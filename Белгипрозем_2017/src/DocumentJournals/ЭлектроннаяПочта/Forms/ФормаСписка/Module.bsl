////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	ИсходныйТекстЗапроса = Список.ТекстЗапроса;
	
	ЗагрузитьНастройки();
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ЗаполнитьДеревоПапок();
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединения);
	
	Если ЭтоФайловаяБаза Тогда
		Элементы.ОтправитьИПолучить.Видимость = Истина;
		Элементы.Обновить.Видимость = Ложь;
	Иначе
		Элементы.ОтправитьИПолучить.Видимость = Ложь;
		Элементы.Обновить.Видимость = Истина;
	КонецЕсли;
	
	СостояниеДереваПапок =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"СостояниеДерева",
			Неопределено);
	
	СформироватьТаблицуБыстрогоОтбора();
		
	ТекущаяПапкаПриСоздании = Неопределено;
	Если ЗначениеЗаполнено(СостояниеДереваПапок)
		И СостояниеДереваПапок.Свойство("ТекСсылка")
		И ЗначениеЗаполнено(СостояниеДереваПапок.ТекСсылка) Тогда
		
		ТекущаяПапкаПриСоздании = СостояниеДереваПапок.ТекСсылка;
		УстановитьОтборПоПапкеСервер(ТекущаяПапкаПриСоздании);
		
	КонецЕсли;
	
	ТекущееПисьмо =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"ТекущееПисьмо",
			Неопределено);
			
	БыстрыйПоискВключен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"БыстрыйПоискВключен",
			Истина);
			
	Если ЗначениеЗаполнено(ТекущееПисьмо)
		И ВстроеннаяПочтаСервер.ПисьмоДоступно(ТекущееПисьмо)
		И ОтображениеОбластиЧтения <> Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			ТекущееПисьмо,
			УникальныйИдентификатор,
			Истина); // ВыводитьШапку
		
		ЗаполнитьВложения(Вложения, ТекущееПисьмо);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюНастроитьАвтообновление.Видимость = Ложь;
		Элементы.ПапкиКонтекстноеМенюНастроитьАвтообновление.Видимость = Ложь;
		Элементы.СохранитьПисьмо.Видимость = Ложь;
		Элементы.СохранитьТекстПисьма.Видимость = Истина;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.СписокКонтекстноеМенюНастроитьАвтообновление.Видимость = Истина;
		Элементы.ПапкиКонтекстноеМенюНастроитьАвтообновление.Видимость = Истина;
		Элементы.СохранитьПисьмо.Видимость = Истина;
		Элементы.СохранитьТекстПисьма.Видимость = Ложь;
	КонецЕсли;
			
	ДеревоПереносаИнициализировано =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ПереносПисем",
			"ДеревоПереносаИнициализировано",
			Ложь);
	ТекущаяСтрокаВОтбореВПапке = -1;		
	
	ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
	УстановитьОтборСписка(БыстрыйПоискВключен);
	
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ВариантОтображенияОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображениеОбластиЧтения");
	
	Если ТипЗнч(ВариантОтображенияОбластиЧтения) <> Тип("ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения")
		Или Не ЗначениеЗаполнено(ВариантОтображенияОбластиЧтения) Тогда
		
		ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
	ОтображатьУдаленныеПисьмаИПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
	
	ОтображатьУдаленныеСервер();
	
	ДействиеПриВыбореВходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДействиеПриВыбореВходящегоПисьма");
		
	ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
		ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку(
			"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
		
	РежимМоиПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	Если РежимМоиПапки Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
	ИспользоватьАвтоматическоеПрочтение =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения");
		
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	
	НеПредлагатьСоздатьПравилоПриПеретаскивании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("НеПредлагатьСоздатьПравилоПриПеретаскивании");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	// Настройка отбора в текущей папке
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Адресаты";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'От кого/Кому:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Тема";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Тема:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Текст";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Текст:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Флаг";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Флаг:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ФлагиОбъектов";
	НоваяСтрока.Значение = Перечисления.ФлагиОбъектов.ПустаяСсылка();
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Прочтено";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Прочтенные:'");
	НоваяСтрока.Тип = "Булево";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = ОтборВПапке.Добавить();
	НоваяСтрока.Параметр = "Ссылка.Комментарий";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Комментарий:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ОтборВПапке",
		Новый Массив);
	
	Индекс = 0;
	Для каждого Элемент Из НастройкиОтбора Цикл
		ОтборВПапке[Индекс].Значение = Элемент;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилосьСодержаниеПисьма" Тогда
		ОбработатьОповещениеИзменилосьСодержаниеПисьма(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПисьмаИзменены" И Источник <> ЭтаФорма Тогда
		ОбновитьДанные();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
			Элементы.Список.Обновить();
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг" Тогда
		ТипОбъекта = ТипЗнч(Параметр[0]);
		Если ТипОбъекта = Тип("ДокументСсылка.ВходящееПисьмо")
			ИЛИ ТипОбъекта = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			
			ОбновитьДанные();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПапкаПисемСохранена" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданиеПапкиПоиска" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ЗаполнитьДеревоПапок();
		СостояниеДерева.ТекСсылка = Параметр;
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтаФорма Тогда
		
		Если Параметр.Свойство("ДействиеПриВыбореВходящегоПисьма") Тогда
			
			ДействиеПриВыбореВходящегоПисьма =Параметр.ДействиеПриВыбореВходящегоПисьма;
			Если Не ЗначениеЗаполнено(ДействиеПриВыбореВходящегоПисьма) Тогда
				ДействиеПриВыбореВходящегоПисьма =
					ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки")
			И ОтображатьУдаленныеПисьмаИПапки <> Параметр.ОтображатьУдаленныеПисьмаИПапки Тогда
			
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
			СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
			ОтображатьУдаленныеСервер(Истина);
			ВосстановитьСостояниеДереваПапок(СостояниеДерева);
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображениеОбластиЧтения")
			И ОтображениеОбластиЧтения <> Параметр.ОтображениеОбластиЧтения Тогда
			
			ИзменитьОтображениеОбластиЧтения(Параметр.ОтображениеОбластиЧтения, Ложь);
			
		КонецЕсли;
		
		Если Параметр.Свойство("РежимМоиПапки")
			И РежимМоиПапки <> Параметр.РежимМоиПапки Тогда
			
			УстановитьРежимМоиПапки(Параметр.РежимМоиПапки);
			Элементы.Список.Обновить();
			
		КонецЕсли;
		
		Если Параметр.Свойство("НастройкиАвтообновления") Тогда
			
			#Если Не ВебКлиент Тогда
				НастройкиАвтообновления = Параметр.НастройкиАвтообновления;
				Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
					И НастройкиАвтообновления.Автообновление Тогда
					ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
				Иначе
					ОтключитьОбработчикОжидания("Автообновление");
				КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;
		
		Если Параметр.Свойство("НеПредлагатьСоздатьПравилоПриПеретаскивании") Тогда
			НеПредлагатьСоздатьПравилоПриПеретаскивании =
				Параметр.НеПредлагатьСоздатьПравилоПриПеретаскивании;
		КонецЕсли;
		
		Если Параметр.Свойство("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения") Тогда
			ИспользоватьАвтоматическоеПрочтение = Параметр.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписьПапкиПоиска" Тогда
		
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
			Предпросмотр = "<html><body></body></html>";
			Вложения.Очистить();
			УстановитьОтборПоПапкеСервер(Неопределено);
			Возврат;
		КонецЕсли;
		
		ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
		Предпросмотр = "<html><body></body></html>";
		Вложения.Очистить();
		УстановитьОтборПоПапкеСервер(ТекущиеДанные.Ссылка, Элементы.Папки.ТекущаяСтрока);
		СписокПриАктивизацииСтроки(Неопределено);
		
	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат" 
		Или ИмяСобытия = "Запись_Корреспондент" 
		Или ИмяСобытия = "Запись_КонтактноеЛицо" 
		Или ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "Запись_РолиИсполнителей" 
		Или ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда
		
		ОбновитьДанные();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьСтраницуПредпросмотра();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен"
		И ЗначениеЗаполнено(ТекущееПисьмо)
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец")
		И Параметр.Владелец = ТекущееПисьмо Тогда
		
		ОбновитьФайлыПисьма();
		УстановитьДоступностьКомандРаботыСВложением();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПришлиНовыеПисьма" Тогда
		ЭтаФорма.Активизировать();
		ОбновитьДанные();
	КонецЕсли;	
	
	Если ИмяСобытия = "АктивизироватьФормуПочты" Тогда
		ЭтаФорма.Активизировать();
	КонецЕсли;	
	
	Если ИмяСобытия = "УстановитьВыделениеНаПапкуИПисьмо" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ПоследнееПисьмо = Параметр.ПоследнееПисьмо;
		Если ТекущееПисьмо <> ПоследнееПисьмо Тогда
			
			ПапкаПисьма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПоследнееПисьмо, "Папка");
			
			Если ТекущаяПапка <> ПапкаПисьма Тогда
				
				Контекст = Новый Структура;
				Контекст.Вставить("Дерево", Папки);
				Контекст.Вставить("ФормаДерево", Элементы.Папки);
				Контекст.Вставить("Ссылка", ПапкаПисьма);
				Контекст.Вставить("ВозвращаемыйИдентификаторСтроки", Неопределено);
				ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "НайтиПапкуПоСсылке");
				
				Если ЗначениеЗаполнено(Контекст.ВозвращаемыйИдентификаторСтроки) Тогда
					Элементы.Папки.ТекущаяСтрока = Контекст.ВозвращаемыйИдентификаторСтроки;
				КонецЕсли;	
				
			КонецЕсли;	
			
			Элементы.Список.ТекущаяСтрока = ПоследнееПисьмо;
		
		КонецЕсли;	
		
		ЭтаФорма.Активизировать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ТребуетсяОбновлениеСпискаПисемПриАктивизацииФормы"
		И НужноОбновитьСписокПисем = Ложь Тогда
		
		#Если Не ВебКлиент Тогда
		НужноОбновитьСписокПисем = Истина;
		ПодключитьОбработчикОжидания("ПроверкаДоступностиВвода", 1);
		#КонецЕсли	
		
	КонецЕсли;	
	
	Если ИмяСобытия = "ПисьмоОтправлено"
		И ЗначениеЗаполнено(ТекущееПисьмо) И Параметр = ТекущееПисьмо Тогда
		Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			ТекущееПисьмо,
			УникальныйИдентификатор,
			Истина); // ВыводитьШапку
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиВвода()
	
	Если ВводДоступен() Тогда
		НужноОбновитьСписокПисем = Ложь;
		ОтключитьОбработчикОжидания("ПроверкаДоступностиВвода");
		ОбновитьДанные();
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Функция НайтиПапкуПоСсылке(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Контекст.Ссылка Тогда
		Контекст.ВозвращаемыйИдентификаторСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СостояниеДереваПапок <> Неопределено Тогда
		ВосстановитьСостояниеДереваПапок(СостояниеДереваПапок);
	КонецЕсли;
	
	УстановитьСтраницуПредпросмотра();
	
#Если Не ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ПоискАвтосохраненныхПисем", 0.5, Истина);
#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискАвтосохраненныхПисем()
	
#Если Не ВебКлиент Тогда	
	Если ВыполненаПроверкаНаличияНесохраненныхПисем <> Истина Тогда
		ВыполнитьПоискАвтосохраненныхПисем();
		ВыполненаПроверкаНаличияНесохраненныхПисем = Истина;
	КонецЕсли;	
#КонецЕсли	

КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьПоискАвтосохраненныхПисем()
	
#Если Не ВебКлиент Тогда
	Если Не АвтоматическиСохранятьВерсииНеотправленногоПисьма Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог,
		ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
	МаскаПоиска = "v8cln_Автосохранение_Новое_*.*";
	МассивФайлов = НайтиФайлы(Каталог, МаскаПоиска);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.НесохраненныеПисьма", , , , , , , РежимОткрытияОкна);
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("Автообновление");
		
	Иначе
		
		ОбновитьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	
	Настройки = Новый Структура;
	Настройки.Вставить("СостояниеДерева", СостояниеДерева);
	Настройки.Вставить("ТекущееПисьмо", ТекущееПисьмо);
	
	// Сохранение параметров отбора в папке
	МассивНастроек = Новый Массив;
	Для каждого Строка Из ОтборВПапке Цикл
		МассивНастроек.Добавить(Строка.Значение);
	КонецЦикла;
	Настройки.Вставить("ОтборВПапке", МассивНастроек);
	
	ПриЗакрытииСервер(ЭтаФорма.ИмяФормы, Настройки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(ИмяФормы, Настройки, УникальныйИдентификатор)
	
	// Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);
	
	Для каждого Настройка Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучитьПочту(Команда)
	
	ОчиститьСообщения();
	
	Текст = НСтр("ru ='Идет отправка и загрузка электронной почты. Пожалуйста подождите...'");
	Состояние(Текст,,, БиблиотекаКартинок.ПолучитьОтправитьПочту);
	
	РезультатОбработки = ОтправитьПолучитьПочтуСервер(РежимМоиПапки);
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	Если РезультатОбработки.Ошибки.Количество() > 0 Тогда
		
		Состояние();
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Ошибки приема и отправки почты'"));
		ПараметрыОткрытия.Вставить("МассивОшибок", РезультатОбработки.Ошибки);
		ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаОтчетаОбОшибках", ПараметрыОткрытия);
		
	Иначе
		
		Состояние(НСтр("ru ='Отправка и загрузка электронной почты завершена успешно.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьПолучитьПочтуСервер(РежимМоиПапки)
	
	Результат = Новый Структура;
	
	Ошибки = ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьма();
	ВстроеннаяПочтаСервер.ПолучитьИОтправитьПисьмаПоВнутреннейМаршрутизации(Ошибки);
	Результат.Вставить("Ошибки", Ошибки);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда 
		
		ПересылаемыеПисьма = Новый СписокЗначений;
		ПересылаемыеПисьма.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПересылаемыеПисьма", ПересылаемыеПисьма);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаПересылки", ПараметрыФормы, ЭтаФорма);
		
	Иначе	
		
		ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
		Если ВыбранноеПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапку(Команда)
	
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуКлиент()
	
	ЗначенияЗаполнения = Новый Структура;
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(Элементы.Папки.ТекущиеДанные.Ссылка)
			И ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ТекущиеДанные.Ссылка) Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиПисем.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПисьмаИзMicrosoftOutlook(Команда)
	
	#Если ВебКлиент Тогда			
		ПоказатьПредупреждение(, НСтр("ru = 'В веб клиенте загрузка из Microsoft Outlook не поддерживается.'"));
		Возврат;
	#КонецЕсли	
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаИмпортаИзMicrosoftOutlook",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПочты(Команда)
	
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрочтенныеПисьма = Новый Массив;
	НепрочтенныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Письмо);
			
			Если ДанныеСтроки <> Неопределено Тогда
				
				Если ДанныеСтроки.Прочтено Тогда
					ПрочтенныеПисьма.Добавить(Письмо);
				Иначе
					НепрочтенныеПисьма.Добавить(Письмо);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Если НепрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Письма помечаются как прочтенные. Пожалуйста подождите...'");
			Состояние(ТекстСостояния);
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(НепрочтенныеПисьма, Истина, РежимМоиПапки);
		
	Иначе
		
		Если ПрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Снимается пометка прочтенности. Пожалуйста подождите...'");
		КонецЕсли;
		
		РезультатОбработки = ПометитьКакПрочтенныеСервер(ПрочтенныеПисьма, Ложь, РежимМоиПапки);
		
	КонецЕсли;
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	Если НепрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Письма помечены как прочтенные (%1)'"),
			НепрочтенныеПисьма.Количество()));
		
	ИначеЕсли ПрочтенныеПисьма.Количество() > 0 Тогда
		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сняты пометки прочтенности писем (%1)'"),
			ПрочтенныеПисьма.Количество()));
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометитьКакПрочтенныеСервер(Письма, Пометка, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	УстановитьПрочтение(Письма, Пометка);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбластьЧтенияВнизу(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ИзменитьОтображениеОбластиЧтения(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленныеПисьмаИПапки = Не ОтображатьУдаленныеПисьмаИПапки;
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ОтображатьУдаленныеСервер(Истина);
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("ОтображатьУдаленныеПисьмаИПапки", ОтображатьУдаленныеПисьмаИПапки);
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(ЗаполнятьДеревоПапок = Ложь)
	
	Элементы.ОтображатьУдаленныеПисьмаИПапки.Пометка = ОтображатьУдаленныеПисьмаИПапки;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	Если ЗаполнятьДеревоПапок Тогда
		ЗаполнитьДеревоПапок();
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображатьУдаленныеПисьмаИПапки",
		ОтображатьУдаленныеПисьмаИПапки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(НСтр("ru = 'Идет удаление писем в корзину. Пожалуйста подождите...'"));
	КонецЕсли;
	
	РезультатОбработки = ПереместитьВКорзинуСервер(Письма, РежимМоиПапки);
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НеПеренесенныеПисьма[0], "Тема");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" не удалось удалить в корзину.
					|Возможно это письмо открыто вами или другим пользователем.'"),
				ТемаПисьма);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить несколько писем (%1) в корзину.
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письма (%1) успешно удалены в корзину'"),
				КоличествоПисем));
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьВКорзинуСервер(Письма, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаПроверкиНовыхПисем", , , , , , , РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапку(Команда)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	ПараметрыФормы.Вставить("РежимМоиПапки", РежимМоиПапки);
	ПараметрыФормы.Вставить("КоличествоПисем", КоличествоПисем);
	Если Не ДеревоПереносаИнициализировано Тогда
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		ПараметрыФормы.Вставить("СостояниеДереваПапок", СостояниеДерева);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Письма", Письма);
	ПараметрыОбработчика.Вставить("СостояниеДерева", СостояниеДерева);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиПисьмаВПапкуЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПапкиПисем.Форма.ФормаПереносаПисем", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапкуЗавершение(Папка, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьВПапкуКлиент(ДополнительныеПараметры.Письма, Папка);
	
	Если Не ДеревоПереносаИнициализировано Тогда
		ВосстановитьСостояниеДереваПапок(ДополнительныеПараметры.СостояниеДерева);
		ДеревоПереносаИнициализировано = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПисьмо(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстПисьма(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	ВстроеннаяПочтаКлиент.СохранитьТекстПисьма(ВыбранноеПисьмо, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПисьмо()
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ВыбранноеПисьмо) Тогда 
		ПоказатьПредупреждение(, НСтр("ru='Скопировать можно только исходящее письмо.'"));
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СкопироватьПисьмо(ВыбранноеПисьмо);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуПоиска(Команда)
	
	ОткрытьФорму("Справочник.ПапкиПоиска.ФормаОбъекта");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыВариантыПросмотра.ТекущаяСтраница = Элементы.СтраницаПапки Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.ПапкиПисем.ПустаяСсылка") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Ссылка = ТекущаяПапка Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработчикПапкиПриАктивизацииСтроки", 0.2, Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПапкиПриАктивизацииСтроки()
	
	ПапкаДляАктивации = Неопределено;
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ПапкаДляАктивации = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяПапка) Тогда
		ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
	КонецЕсли;	
	
	ПредыдущаяПапка = ТекущаяПапка;
	ТекущаяПапка = ПапкаДляАктивации;
	
	Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
		УстановитьОтборПоПапкеКлиент(Неопределено);
		ОбновитьОбластьПредпросмотра("<html><body></body></html>");
	Иначе
		УстановитьОтборПоПапкеКлиент(ТекущаяПапка, Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;
	
	//ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
	//	Предпросмотр = "<html><body></body></html>";
	//	Вложения.Очистить();
	//	УстановитьОтборПоПапкеСервер(Неопределено);
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПредыдущаяПапка = ТекущиеДанные.Ссылка Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОтключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки");
	//Предпросмотр = "<html><body></body></html>";
	//Вложения.Очистить();
	//УстановитьОтборПоПапкеСервер(ТекущиеДанные.Ссылка, Элементы.Папки.ТекущаяСтрока);
	//СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПапкеКлиент(Папка, ТекущаяСтрока = Неопределено)
	
	УстановитьОтборПоПапкеСервер(Папка, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПредпросмотра(HTMLПредставлениеПисьма, ДанныеФайлов = Неопределено)
	
	Если Предпросмотр <> HTMLПредставлениеПисьма Тогда
		Предпросмотр = HTMLПредставлениеПисьма;
	КонецЕсли;
	
	ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлыВОбластиПредпросмотра(ДанныеФайлов = Неопределено)
	
	Вложения.Очистить();
	Если ТипЗнч(ДанныеФайлов) = Тип("Массив") Тогда
		Для каждого ДанныеФайла Из ДанныеФайлов Цикл
			ЗаполнитьЗначенияСвойств(Вложения.Добавить(), ДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьСтраницуПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ВыбранноеПисьмо = ТекущееПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	Письмо = Элементы.Список.ТекущаяСтрока;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Письмо = Неопределено;
	КонецЕсли;
	
	Если ТекущееПисьмо = Письмо Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееПисьмо = Письмо;
	
	Если ОбластьЧтенияВключена Тогда
		
		Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
			
			// Вычисление, включен ли быстрый поиск по непрочтенным письмам
			ИспользуетсяБыстрыйПоискПоНепрочитанным = Ложь;			
			Для Каждого Строка Из ОтборВПапке Цикл
				Если Строка.Параметр = "Прочтено" Тогда
					ИспользуетсяБыстрыйПоискПоНепрочитанным = Строка.Значение = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			РезультатОбработки = ОбработатьАктивизациюСтроки(
				Письмо,
				УникальныйИдентификатор,
				ИспользоватьАвтоматическоеПрочтение,
				РежимМоиПапки,
				ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную 
					Или ИспользуетсяПоискПоНепрочитанным
					Или ИспользуетсяБыстрыйПоискПоНепрочитанным);
			
			ОбновитьОбластьПредпросмотра(
				РезультатОбработки.HTMLПредставлениеПисьма,
				РезультатОбработки.Вложения);
			
			Если РезультатОбработки.ОповеститьОПрочтении Тогда
				ОбновитьДанные(РезультатОбработки.СведенияОПапках);
			КонецЕсли;
			
		Иначе
			
			ОбновитьОбластьПредпросмотра("<html><body></body></html>");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьАктивизациюСтроки(
	Письмо,
	УникальныйИдентификаторФормы,
	ИспользоватьАвтоматическоеПрочтение,
	РежимМоиПапки,
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Письмо);
	
	Результат = Новый Структура;
	
	HTMLПредставлениеПисьма = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
		Письмо,
		УникальныйИдентификаторФормы,
		Истина); // ВыводитьШапку
	
	Результат.Вставить("HTMLПредставлениеПисьма", HTMLПредставлениеПисьма);
	
	Результат.Вставить("ОповеститьОПрочтении", Ложь);
	Если ИспользоватьАвтоматическоеПрочтение И Не ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		
		Результат.ОповеститьОПрочтении = УстановитьПрочтение(Письмо);
		
		Если Результат.ОповеститьОПрочтении Тогда
			СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
			Результат.Вставить("СведенияОПапках", СведенияОПапках);
		КонецЕсли;
		
	КонецЕсли;
	
	Вложения = Новый Массив;
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
		
		Вложение = Новый Структура(
			"ИмяФайла,
			|ИндексКартинки,
			|ПометкаУдаления,
			|Представление,
			|Размер,
			|РазмерПредставление,
			|Редактирует,
			|РедактируетТекущийПользователь,
			|Ссылка");
		
		ЗаполнитьЗначенияСвойств(Вложение, ФайлыПисьмаСтрока);
		Вложения.Добавить(Вложение);
		
	КонецЦикла;
	
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПапкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьПапкуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущиеДанные.Ссылка <> Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ТекущийЭлемент = Элементы.ПредпросмотрHTMLБезВложений
		Или ТекущийЭлемент = Элементы.ПредпросмотрHTML Тогда
		УстановитьПисьмамПометкуУдаления();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПапки()
	
	ЗаполнитьДеревоПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СкопироватьПисьмо();
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.СоздатьПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если Не ЗначениеЗаполнено(ВыбранноеПисьмо) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.Флаг Тогда
		
		СтандартнаяОбработка = Ложь;
		ПереключитьФлаг(ВыбранноеПисьмо);
		Элементы.Список.Обновить();
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ВыбранноеПисьмо) Тогда
		
		Если ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОткрытьКарточкуПисьма") Тогда
			
			СтандартнаяОбработка = Истина;
			Возврат;
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Ответить") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.ОтветитьВсем") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);
			
		ИначеЕсли ДействиеПриВыбореВходящегоПисьма =
			ПредопределенноеЗначение("Перечисление.ДействияПриВыбореВходящегоПисьма.Переслать") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	ОбновитьСвойстваПапок(СведенияОПапках);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПисьмамПометкуУдаления()
	
	ВыбранныеПисьма = ПолучитьВыбранныеПисьма(Ложь);
	Если ВыбранныеПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПисем = ВыбранныеПисьма.Количество();
	ТекущаяПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
	
	Если ВыбранныеПисьма.Количество() = 1 Тогда
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				Строка(ТекущиеДанные.Ссылка));
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(ТекущиеДанные.Ссылка));
		КонецЕсли;
	Иначе
		Если ТекущаяПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("КоличествоПисем", КоличествоПисем);
	ПараметрыОбработчика.Вставить("ВыбранныеПисьма", ВыбранныеПисьма);
	ПараметрыОбработчика.Вставить("ТекущаяПометкаУдаления", ТекущаяПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПисьмамПометкуУдаленияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПисьмамПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
		Состояние(НСтр("ru = 'Идет снятие пометки на удаление. Пожалуйста подождите...'"));
	Иначе
		Состояние(НСтр("ru = 'Идет пометка на удаление. Пожалуйста подождите...'"));
	КонецЕсли;
	
	РезультатОбработки = УстановитьПисьмамПометкуУдаленияСервер(
		ДополнительныеПараметры.ВыбранныеПисьма,
		Не ДополнительныеПараметры.ТекущаяПометкаУдаления,
		РежимМоиПапки);
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеОбработанныеПисьма = РезультатОбработки.НеОбработанныеПисьма;
	НеОбработаноПисем = НеОбработанныеПисьма.Количество();
	
	Если НеОбработаноПисем = 0 Тогда
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно снята (%1).'"),
				ДополнительныеПараметры.КоличествоПисем));
			
		Иначе
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометка на удаление успешно установлена (%1).'"),
				ДополнительныеПараметры.КоличествоПисем));
			
		КонецЕсли;
		
	ИначеЕсли НеОбработаноПисем = 1 Тогда
		
		ТемаПисьма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НеОбработанныеПисьма[0], "Тема");
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось снять пометку удаления с письма ""%1"".
					|Возможно это письмо открыто вами или другим пользователем.'"),
				ТемаПисьма);
			
		Иначе
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось пометить на удаление письмо ""%1"".
					|Возможно это письмо открыто вами или другим пользователем.'"),
				ТемаПисьма);
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Иначе
		
		Если ДополнительныеПараметры.ТекущаяПометкаУдаления Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось снять пометку удаления с нескольких писем (%1).
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеОбработаноПисем);
			
		Иначе
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось пометить на удаление нескольких писем (%1).
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеОбработаноПисем);
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПисьмамПометкуУдаленияСервер(Письма, Пометка, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	НеОбработанныеПисьма = Новый Массив;
	
	Для каждого Письмо Из Письма Цикл
		
		ПисьмоОбъект = Письмо.ПолучитьОбъект();
		
		Если ПисьмоОбъект.ПометкаУдаления = Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПисьмоОбъект.Заблокировать();
		Исключение
			НеОбработанныеПисьма.Добавить(Письмо);
			Продолжить;
		КонецПопытки;
		
		ПисьмоОбъект.УстановитьПометкуУдаления(Пометка);
		ПисьмоОбъект.Разблокировать();
		
	КонецЦикла;
	
	Результат.Вставить("НеОбработанныеПисьма", НеОбработанныеПисьма);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредпросмотрHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПапках = УстановитьФлагиСервер(Письма, Флаг, РежимМоиПапки);
	
	ОбновитьДанные(СведенияОПапках);
	
	Оповестить("ИзменилсяФлаг", Письма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьФлагиСервер(Письма, Флаг, РежимМоиПапки)
	
	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектам(Письма, Флаг);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	
	Возврат СведенияОПапках;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьФлаг(Письмо)
	
	СведенияОПапках = ПереключитьФлагСервер(Письмо, РежимМоиПапки);
	
	ОбновитьДанные(СведенияОПапках);
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(Письмо);
	Оповестить("ИзменилсяФлаг", МассивПисем);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьФлагСервер(Письмо, РежимМоиПапки)
	
	РаботаСФлагамиОбъектовСервер.ПереключитьФлагПисьма(Письмо);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	
	Возврат СведенияОПапках;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если (Строка = Неопределено) Или (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНазначение = Папки.НайтиПоИдентификатору(Строка);
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(СтрокаНазначение.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение[0]) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПараметрыПеретаскивания.Значение) Тогда
		Если Почта.ЭтоУчетнаяЗапись(СтрокаНазначение.Ссылка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПараметрыПеретаскивания.Значение) Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если Строка = Неопределено Тогда
		ПапкаНазначения = Неопределено;
	Иначе
		ПапкаНазначения = Папки.НайтиПоИдентификатору(Строка).Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Массив")
		И ПеретаскиваемоеЗначение.Количество() > 0
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ПеретаскиваемоеЗначение[0]) Тогда
		
		Письма = Новый Массив;
		Для каждого Письмо Из ПеретаскиваемоеЗначение Цикл
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
				Письма.Добавить(Письмо);
			КонецЕсли;
		КонецЦикла;
		
		ПереместитьВПапкуКлиент(Письма, ПапкаНазначения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		
		СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
		УстановитьРодителяПапки(ПеретаскиваемоеЗначение, ПапкаНазначения);
		ВосстановитьСостояниеДереваПапок(СостояниеДерева);
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПапкуКлиент(Письма, Папка)
	
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Состояние(НСтр("ru = 'Письма не выбраны'"));
		Возврат;
	КонецЕсли;
	
	Если КоличествоПисем > 1 Тогда
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет перенос писем в папку ""%1"". Пожалуйста подождите...'"),
			Папка));
	КонецЕсли;
	
	РезультатОбработки = ОбработатьПеремещениеВПапку(Письма, Папка, РежимМоиПапки);
	
	ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	
	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	
	Если НеПеренесеноПисем > 0 Тогда
		
		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;
		
		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначения.ПолучитьЗначениеРеквизита(НеПеренесенныеПисьма[0], "Тема");
			СообщениеОбОшибке = "";
			Если ТипЗнч(РезультатОбработки.Ошибки) = Тип("Массив") И РезультатОбработки.Ошибки.Количество() <> 0 Тогда
				СообщениеОбОшибке = РезультатОбработки.Ошибки[0];
			КонецЕсли;	
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письмо ""%1"" не удалось переместить в папку ""%2"".
					|Возможно это письмо открыто вами или другим пользователем.
					|
					|Подробное описание ошибки: ""%3""'"),
				ТемаПисьма,
				Папка,
				СообщениеОбОшибке);
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось переместить несколько писем (%1) в папку ""%2"".
					|Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем,
				Папка);
		КонецЕсли;
		
		ВызватьИсключение ТекстПредупреждения;
		
	Иначе
		
		Если КоличествоПисем > 1 Тогда
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Письма (%1) успешно перемещены в папку ""%2""'"),
				КоличествоПисем,
				Папка));
			
		КонецЕсли;
		
		ПисьмаДляПеретаскивания.ЗагрузитьЗначения(Письма);
		ПапкаДляПеретаскивания = Папка;
		ПодключитьОбработчикОжидания("ПредложитьСоздатьПравило", 0.2, Истина);
		
	КонецЕсли;
	
	Оповестить("ПисьмаИзменены",, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеремещениеВПапку(Письма, Папка, РежимМоиПапки)
	
	Результат = Новый Структура;
	
	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВПапку(Письма, Папка);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	Результат.Вставить("Ошибки", РезультатПереноса.Ошибки);
	
	СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	Результат.Вставить("СведенияОПапках", СведенияОПапках);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьРодителяПапки(Папка, ПапкаРодитель)
	
	Если ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПисем")
		И ТипЗнч(ПапкаРодитель) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		
		Справочники.ПапкиПисем.УстановитьРодителяПапки(Папка, ПапкаРодитель);
		ЗаполнитьДеревоПапок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	ПеретаскиваемоеЗначение = ТекущиеДанные.Ссылка;
	ВидПапки = ТекущиеДанные.ВидПапки;
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПапкаПисем(ПеретаскиваемоеЗначение) Тогда
		ПараметрыПеретаскивания.Значение = ПеретаскиваемоеЗначение;
		Возврат;
	КонецЕсли;
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСоздатьПравило()
	
	Если НеПредлагатьСоздатьПравилоПриПеретаскивании = Ложь Тогда
		
		ПараметрыФормы = Новый Структура;
		Письма = ПисьмаДляПеретаскивания.ВыгрузитьЗначения();
		ПараметрыФормы.Вставить("Письма", Письма);
		ПараметрыФормы.Вставить("Папка", ПапкаДляПеретаскивания);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьСоздатьПравилоЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ВопросСозданияПравилаПриПеретаскивании",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСоздатьПравилоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ОткрытьФорму("Справочник.ПравилаОбработкиПисем.ФормаОбъекта", Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ПАПОК

&НаСервере
Процедура ЗаполнитьДеревоПапок()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиПисем.Ссылка КАК Папка,
		|	ПапкиПисем.ПометкаУдаления КАК ПапкаПометкаУдаления,
		|	ПапкиПисем.Представление КАК ПредставлениеПапки,
		|	ПапкиПисем.ВидПапки КАК ВидПапки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ПометкаУдаления
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 4
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинки,
		|	ВЫБОР
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие)
		|			ТОГДА 1
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Исходящие)
		|			ТОГДА 2
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Отправленные)
		|			ТОГДА 3
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Корзина)
		|			ТОГДА 5
		|		КОГДА ПапкиПисем.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Черновики)
		|			ТОГДА 6
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК Порядок,
		|
		|%ПапкаБыстрогоДоступа%
		|
		|ИЗ
		|	Справочник.ПапкиПисем КАК ПапкиПисем
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
		|	ПО (ПапкиПисемБыстрогоДоступа.Папка = ПапкиПисем.Ссылка И ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	((НЕ ПапкиПисем.ПометкаУдаления)
		|			ИЛИ &ОтображатьУдаленные)
		|
		|%ОтборМоиПапки%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Папка ИЕРАРХИЯ";
	
	// Добавление отметки папки быстрого доступа, которая используется для условного
	// оформления в режиме просмотра "Все папки"
	Если РежимМоиПапки Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПапкаБыстрогоДоступа%",
			"	ВЫБОР КОГДА ИСТИНА ТОГДА ЛОЖЬ КОНЕЦ КАК ПапкаБыстрогоДоступа");
		
		// Добавление отбора только папок, которые находятся в иерархии папок быстрого
		// доступа
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборМоиПапки%",
			"	И ПапкиПисем.Ссылка В ИЕРАРХИИ
			|		(ВЫБРАТЬ
			|			ПапкиПисемБыстрогоДоступа.Папка
			|		ИЗ
			|			РегистрСведений.ПапкиПисемБыстрогоДоступа КАК ПапкиПисемБыстрогоДоступа
			|		ГДЕ
			|			ПапкиПисемБыстрогоДоступа.Пользователь = &ТекущийПользователь)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПапкаБыстрогоДоступа%",
			"	ВЫБОР
			|		КОГДА ПапкиПисемБыстрогоДоступа.Папка ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПапкаБыстрогоДоступа");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборМоиПапки%", "");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоПапок = РеквизитФормыВЗначение("Папки");
	ДеревоПапок.Строки.Очистить();
	
	СведенияОПапках = ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
		Пользователи.ТекущийПользователь(),
		РежимМоиПапки);
	
	ДобавитьПапкиВДерево(ДеревоПапок.Строки, Дерево.Строки, СведенияОПапках);
	
	СортироватьИерархически(ДеревоПапок.Строки, "Порядок, Представление");
	
	// Добавление папок поиска в общее дерево папок
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПапкиПоиска.Ссылка,
		|	ПапкиПоиска.КоличествоОбъектов
		|ИЗ
		|	Справочник.ПапкиПоиска КАК ПапкиПоиска
		|ГДЕ
		|	ПапкиПоиска.Ответственный = &Ответственный
		|	И Не ПапкиПоиска.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ПапкаПоиска = ДеревоПапок.Строки.Добавить();
		ПапкаПоиска.Ссылка = Неопределено;
		ПапкаПоиска.Представление = НСтр("ru = 'Папки поиска'");
		ПапкаПоиска.НомерКартинки = 5;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ПапкаПоиска.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			
			НоваяСтрока.Представление = Строка(Выборка.Ссылка);
			
			Если Выборка.КоличествоОбъектов > 0 Тогда
				
				НоваяСтрока.Представление = НоваяСтрока.Представление
					+ " (" + Строка(Выборка.КоличествоОбъектов) + ")";
				
			КонецЕсли;
			
			НоваяСтрока.НомерКартинки = 5;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДеревоПапок, Папки);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьИерархически(СтрокиДерева, Знач Колонки)
	
	СтрокиДерева.Сортировать(Колонки);
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СортироватьИерархически(СтрокаДерева.Строки, Колонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПапкиВДерево(СтрокиДерева, СтрокиИсточника, СведенияОПапках)
	
	Для каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Ссылка = СтрокаИсточника.Папка;
		
		НоваяСтрока.Представление = СтрокаИсточника.ПредставлениеПапки;
		НоваяСтрока.Количество = 0;
		НоваяСтрока.Выделена = Ложь;
		
		СведенияОПапке = СведенияОПапках.Получить(СтрокаИсточника.Папка);
		
		Если СведенияОПапке <> Неопределено Тогда
			
			НоваяСтрока.Представление = СведенияОПапке.Представление;
			НоваяСтрока.Количество = СведенияОПапке.Количество;
			НоваяСтрока.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
		
		НоваяСтрока.НомерКартинки = СтрокаИсточника.НомерКартинки;
		
		НоваяСтрока.ВидПапки = СтрокаИсточника.ВидПапки;
		НоваяСтрока.Порядок = СтрокаИсточника.Порядок;
		НоваяСтрока.ПапкаБыстрогоДоступа = СтрокаИсточника.ПапкаБыстрогоДоступа;
		
		ДобавитьПапкиВДерево(НоваяСтрока.Строки, СтрокаИсточника.Строки, СведенияОПапках);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для каждого Элемент Из ДеревоЭлементы Цикл
		// Рекурсивный вызов
		ПодчиненныеУзлы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() > 0 Тогда
			ОбойтиДерево(ПодчиненныеУзлы, Контекст, ИмяПроцедуры);
		КонецЕсли;
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеДереваПапок()
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", Неопределено);
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			Состояние.ТекСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Неопределено Тогда
		Ключ = ПредопределенноеЗначение("Справочник.ПапкиПоиска.ПустаяСсылка");
	КонецЕсли;
	Контекст.Состояние.Вставить(Ключ, Контекст.ФормаДерево.Развернут(ИдентификаторСтроки));

	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДереваПапок(Состояние)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", Папки);
	Контекст.Вставить("ФормаДерево", Элементы.Папки);
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(Папки.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = ТекДанные.Ссылка;
	Если Ключ = Неопределено Тогда
		Ключ = ПредопределенноеЗначение("Справочник.ПапкиПоиска.ПустаяСсылка");
	КонецЕсли;	
	Если Контекст.Состояние.Получить(Ключ) = Истина Тогда
		Контекст.ФормаДерево.Развернуть(ИдентификаторСтроки);
	Иначе
		Контекст.ФормаДерево.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	Если ТекДанные.Ссылка = Контекст.ТекСсылка Тогда
		Контекст.ФормаДерево.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПапкиПередСворачиванием(Элемент, Строка, Отказ)
	
	ТекСтрока = Папки.НайтиПоИдентификатору(Строка);
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СворачиваемыйЭлемент Из ТекСтрока.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СворачиваемыйЭлемент.ПолучитьИдентификатор();
		Если Элементы.Папки.Развернут(ИдентификаторСтроки) Тогда
			Элементы.Папки.Свернуть(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(СведенияОПапках = Неопределено)
	
	Если СведенияОПапках = Неопределено Тогда
		СведенияОПапках = ПолучитьСведенияОПапках(РежимМоиПапки);
	КонецЕсли;
	
	ОбновитьСвойстваПапок(СведенияОПапках);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияОПапках(РежимМоиПапки)
	
	Возврат ВстроеннаяПочтаСервер.ПолучитьСведенияОПапках(
		Пользователи.ТекущийПользователь(),
		РежимМоиПапки);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвойстваПапок(СведенияОПапках)
	
	ОчередьПапок = Новый Массив;
	
	Для каждого Элемент Из Папки.ПолучитьЭлементы() Цикл
		ОчередьПапок.Добавить(Элемент);
	КонецЦикла;
	
	Пока ОчередьПапок.Количество() > 0 Цикл
		
		Элемент = ОчередьПапок[0];
		СведенияОПапке = СведенияОПапках.Получить(Элемент.Ссылка);
		
		Если СведенияОПапке <> Неопределено
			И Элемент.Количество <> СведенияОПапке.Количество Тогда
			
			Элемент.Количество = СведенияОПапке.Количество;
			Элемент.Представление = СведенияОПапке.Представление;
			Элемент.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
		
		Для каждого ПодчиненныйЭлемент Из Элемент.ПолучитьЭлементы() Цикл
			ОчередьПапок.Добавить(ПодчиненныйЭлемент);
		КонецЦикла;
		
		ОчередьПапок.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРОЧТЕННОСТЬЮ ПИСЕМ

&НаСервереБезКонтекста
Функция УстановитьПрочтение(Письмо, Прочтен = Истина)
	
	ПрочтениеУстановлено = РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо, Прочтен);
	
	Возврат ПрочтениеУстановлено; 
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛОЖЕНИЕМ ОБЛАСТИ ЧТЕНИЯ

&НаКлиенте
Процедура ИзменитьОтображениеОбластиЧтения(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку);
	
	Если СохранитьНастройку Тогда
		НастройкиВстроеннойПочты = Новый Структура;
		НастройкиВстроеннойПочты.Вставить("ОтображениеОбластиЧтения", ОтображениеОбластиЧтения);
		Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения, СохранитьНастройку)
	
	Если СохранитьНастройку Тогда
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ОтображениеОбластиЧтения",
			ВариантОтображенияОбластиЧтения);
		
	КонецЕсли;
	
	Если ОтображениеОбластиЧтения <> ВариантОтображенияОбластиЧтения
		И (ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу
		Или ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа) Тогда
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ТекущееПисьмо) Тогда
			
			Предпросмотр = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
				ТекущееПисьмо,
				УникальныйИдентификатор,
				Истина); // ВыводитьШапку
			
			ЗаполнитьВложения(Вложения, ТекущееПисьмо);
			
		Иначе
			
			Предпросмотр = "<html><body></body></html>";
			Вложения.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	ОтображениеОбластиЧтения = ВариантОтображенияОбластиЧтения;
	
	Если ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
	
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ОбластьЧтенияВнизу.Пометка = Истина;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Истина;
		Элементы.Вложения.Видимость = Истина;
		Элементы.СтраницаПредпросмотрСВложениями.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСписок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Элементы.СтраницыПредпросмотр.Видимость = Ложь;
		Элементы.Вложения.Видимость = Ложь;
		Элементы.ОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ОбластьЧтенияОтключена.Пометка = Истина;
		ОбластьЧтенияВключена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимМоиПапки(Команда)
	
	УстановитьРежимМоиПапкиКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВсеПапки(Команда)
	
	УстановитьРежимМоиПапкиКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимМоиПапкиКлиент(Режим)
	
	УстановитьРежимМоиПапки(Режим);
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("РежимМоиПапки", РежимМоиПапки);
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимМоиПапки(Режим)
	
	Если РежимМоиПапки = Режим Тогда
		Возврат;
	КонецЕсли;
	
	РежимМоиПапки = Режим;
	
	ЗаполнитьДеревоПапок();
	Если РежимМоиПапки Тогда
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Мои папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Истина;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Ложь;
	Иначе
		Элементы.ПапкиГруппаКолонок.Заголовок = НСтр("ru ='Все папки'");
		Элементы.ПапкиКонтекстноеМенюРежимМоиПапки.Пометка = Ложь;
		Элементы.ПапкиКонтекстноеМенюРежимВсеПапки.Пометка = Истина;
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"РежимМоиПапки",
		РежимМоиПапки);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОТБОР В ПАПКЕ

&НаКлиенте
Процедура УстановитьОтборСпискаКлиент()
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	УстановитьОтборСписка(БыстрыйПоискВключен);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоискаПоТексту()
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловаПисем КАК СловаПисем
	|ПО (СловаПисем.Письмо = ЭлектроннаяПочта.Ссылка)
	|	И (СловаПисем.Слово = &СтрокаПоиска)
	| ";
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоПапкеПоиска()
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромежуточныеРезультатыПоискаПисем КАК ПромежуточныеРезультатыПоискаПисем
	|ПО (ПромежуточныеРезультатыПоискаПисем.Ссылка = ЭлектроннаяПочта.Ссылка)
	|	И (ПромежуточныеРезультатыПоискаПисем.ИдентификаторПоиска = &ИдентификаторПоиска)
	| ";

КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту()
	
	Возврат "ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПромежуточныеРезультатыПоискаПисем КАК ПромежуточныеРезультатыПоискаПисем
	|ПО (ПромежуточныеРезультатыПоискаПисем.Ссылка = ЭлектроннаяПочта.Ссылка)
	|	И (ПромежуточныеРезультатыПоискаПисем.ИдентификаторПоиска = &ИдентификаторПоиска)
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловаПисем КАК СловаПисем
	|ПО (СловаПисем.Письмо = ЭлектроннаяПочта.Ссылка)
	|	И (СловаПисем.Слово = &СтрокаПоиска)
	| ";

КонецФункции	

&НаСервере
Процедура УстановитьОтборСписка(ПоискВключен)
	
	Для каждого строка Из ОтборВПапке Цикл
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, ИмяПараметра);
	КонецЦикла;
	
	Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
		
		Если Найти(Список.ТекстЗапроса, "РегистрСведений.ПромежуточныеРезультатыПоискаПисем") <> 0 Тогда
			
			Список.ТекстЗапроса = ИсходныйТекстЗапроса;
			
			Список.ТекстЗапроса = СтрЗаменить(
				Список.ТекстЗапроса,
				"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
				ПолучитьТекстЗапросаПоПапкеПоиска());
				
		Иначе
			
			Список.ТекстЗапроса = ИсходныйТекстЗапроса;
			
		КонецЕсли;		
		
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());
			
	КонецЕсли;	
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для каждого строка Из ОтборВПапке Цикл
		
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		
		Если ЗначениеЗаполнено(Строка.Значение)
			И Строка.Значение <> Неопределено Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
		КонецЕсли;	
		
		Если Не ПоискВключен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Тип = "Строка"
			И ЗначениеЗаполнено(Строка.Значение)
			И Строка.Параметр <> "Текст" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Содержит,
				Строка.Значение);
						
		ИначеЕсли Строка.Тип = "Булево"
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);
					
		ИначеЕсли Строка.Тип = "Дата"
			И ЗначениеЗаполнено(Строка.Значение)Тогда
			
			Если Найти(Строка.Параметр, "_С") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
					НачалоДня(Строка.Значение));
				
			КонецЕсли;
			
			Если Найти(Строка.Параметр, "_По") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
					КонецДня(Строка.Значение));
				
			КонецЕсли;
							
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			
			Если Строка.Значение = НСтр("ru = 'Любой'") Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.НеРавно,
					Ложь);			
			Иначе
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.Равно,
					Строка.Значение);
			КонецЕсли;
						
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип <> "Булево"
			И Строка.Параметр <> "Текст" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);
				
		ИначеЕсли Строка.Параметр = "Текст"
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			СтрокаПоиска = Строка.Значение;
			СтрокаПоиска = СокрЛП(НРег(СтрокаПоиска));
			
			Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") = 0 Тогда
				
				Если Найти(Список.ТекстЗапроса, "РегистрСведений.ПромежуточныеРезультатыПоискаПисем") = 0 Тогда
					
					Список.ТекстЗапроса = ИсходныйТекстЗапроса;
					
					Список.ТекстЗапроса = СтрЗаменить(
						Список.ТекстЗапроса,
						"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
						ПолучитьТекстЗапросаПоискаПоТексту());
					
					
				Иначе	
					
					Список.ТекстЗапроса = ИсходныйТекстЗапроса;
					
					Список.ТекстЗапроса = СтрЗаменить(
						Список.ТекстЗапроса,
						"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
						ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту());
						
					
				КонецЕсли;	
					
				Список.Параметры.УстановитьЗначениеПараметра("СтрокаПоиска", СтрокаПоиска);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись истории ввода
	СписокСписковВыбора.Очистить();
	Для каждого Строка Из ОтборВПапке Цикл
		
		СписокПоследнихЗначений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			Строка.Параметр,
			Новый СписокЗначений());
		
		ОбновленныйСписокПоследнихЗначений = Новый СписокЗначений;
		Если (Строка.Тип = "Строка"
			Или Строка.Тип = "Дата")
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			Представление = Строка(Строка.Значение);
			Если ТипЗнч(Строка.Значение) = Тип("Дата") Тогда
				Представление = Формат(Строка.Значение, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			ОбновленныйСписокПоследнихЗначений.Добавить(
				Строка.Значение,
				Представление);
				
		ИначеЕсли Строка.Тип = "Булево" Тогда				
			
			ОбновленныйСписокПоследнихЗначений.Добавить(Истина);
			ОбновленныйСписокПоследнихЗначений.Добавить(Ложь);
			
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			
			// Подготовка списка выбора для Флага
			Для каждого Флаг Из Метаданные.Перечисления.ФлагиОбъектов.ЗначенияПеречисления Цикл
				
				ОбновленныйСписокПоследнихЗначений.Добавить(
					Перечисления.ФлагиОбъектов[Флаг.Имя],,,
					БиблиотекаКартинок[Флаг.Имя + "Флаг"]);
				
			КонецЦикла;
			
			ОбновленныйСписокПоследнихЗначений.Добавить(
				НСтр("ru = 'Любой'"), НСтр("ru = 'Любой флаг'"),,
				БиблиотекаКартинок.ПустойФлаг);
				
			ОбновленныйСписокПоследнихЗначений.Добавить(
				Ложь,,,
				БиблиотекаКартинок.ПустойФлаг);
			
		КонецЕсли;
		
		Для каждого Элемент Из СписокПоследнихЗначений Цикл
			
			Если ОбновленныйСписокПоследнихЗначений.НайтиПоЗначению(Элемент.Значение) = Неопределено
				И ОбновленныйСписокПоследнихЗначений.Количество() < 8 Тогда
				
				ОбновленныйСписокПоследнихЗначений.Добавить(
					Элемент.Значение,
					Элемент.Представление,
					Элемент.Пометка,
					Элемент.Картинка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Строка.Параметр, ОбновленныйСписокПоследнихЗначений);
		
		// Обновление коллекции списков выбора на форме
		СписокСписковВыбора.Добавить(ОбновленныйСписокПоследнихЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеСтрокаПриИзменении(Элемент)
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Если Не БыстрыйПоискВключен Тогда
		Если ЗначениеЗаполнено(Элементы.ОтборВПапке.ТекущиеДанные.Значение) Тогда
			БыстрыйПоискВключен = Истина;
			ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
		КонецЕсли;
	КонецЕсли;
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораУТекущегоПоляОтбора(ДанныеВыбора = Неопределено)
	
	// Обновление списка выбора у элемента
	Если ДанныеВыбора = Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	СписокПоследнихЗначений = СписокСписковВыбора[Элементы.ОтборВПапке.ТекущаяСтрока].Значение;
	Для Каждого ПоследнееЗначение Из СписокПоследнихЗначений Цикл			
		ДанныеВыбора.Добавить(
			ПоследнееЗначение.Значение,
			ПоследнееЗначение.Представление,
			ПоследнееЗначение.Пометка,
			ПоследнееЗначение.Картинка);		
	КонецЦикла;
	Элементы.ОтборВПапкеЗначение.КнопкаВыбора = 
		СписокПоследнихЗначений.Количество() > 0
		Или Найти(ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока].Тип, "Перечисление") > 0 
		Или Найти(ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока].Тип, "Булево") > 0;
		
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Для Каждого Строка Из ОтборВПапке Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	УстановитьОтборСпискаКлиент();
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаВОтбореВПапке <> Элементы.ОтборВПапке.ТекущаяСтрока Тогда
		ОбновитьСписокВыбораУТекущегоПоляОтбора();
		Элементы.ОтборВПапкеЗначение.РедактированиеТекста = Истина;
		Если Найти(НРег(Элементы.ОтборВПапке.ТекущиеДанные.Тип), "булево") > 0 
			Или Найти(НРег(Элементы.ОтборВПапке.ТекущиеДанные.Тип), "перечисление") > 0 Тогда
			Элементы.ОтборВПапкеЗначение.РедактированиеТекста = Ложь;
		КонецЕсли;
		ТекущаяСтрокаВОтбореВПапке = Элементы.ОтборВПапке.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюВвода(Команда)
	
	Строка = ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока];
	Если Строка.Тип <> "Строка" И Строка.Тип <> "Дата" И Строка.Тип <> "Булево" Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Строка.Параметр, Новый СписокЗначений);
	СписокСписковВыбора[Элементы.ОтборВПапке.ТекущаяСтрока].Значение = Новый СписокЗначений;
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка из Элемент.СписокВыбора Цикл
		Если Найти(НРег(Строка(ЭлементСписка.Значение)), НРег(Текст)) = 1 Тогда
			ДанныеВыбора.Добавить(
				ЭлементСписка.Значение,
				ЭлементСписка.Представление,
				ЭлементСписка.Пометка,
				ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	
	Строка = ОтборВПапке[Элементы.ОтборВПапке.ТекущаяСтрока];
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1,1,1);
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Неопределено;
	КонецЕсли;
	Элементы.ОтборВПапке.ЗакончитьРедактированиеСтроки(Ложь);
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Папки.ТекущиеДанные;
	Элементы.ОтборВПапке.ТекущиеДанные.Значение = ВыбранноеЗначение;
	Элементы.ОтборВПапке.ЗакончитьРедактированиеСтроки(Ложь);
	
	Если Не БыстрыйПоискВключен Тогда
		Если ЗначениеЗаполнено(Элементы.ОтборВПапке.ТекущиеДанные.Значение) Тогда
			БыстрыйПоискВключен = Истина;
			ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// СПИСОК ФАЙЛОВ В ОБЛАСТИ ПРЕДПРОСМОТРА

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ВстроеннаяПочтаКлиент.ОткрытьВложение(Элемент.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	Для каждого ВыделеннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
		ДанныеСтроки = Вложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайлов;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Вложения.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			ТекущиеДанные.Представление);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			ТекущиеДанные.Представление);
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПередУдалениемЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВложениеПометитьНаУдалениеСервер(
		ДополнительныеПараметры.ТекущиеДанные.Ссылка,
		ДополнительныеПараметры.ТекущиеДанные.РедактируетТекущийПользователь);
	УстановитьСтраницуПредпросмотра();
	
КонецПроцедуры

&НаСервере
Процедура ВложениеПометитьНаУдалениеСервер(ФайлСсылка, РедактируетТекущийПользователь)
	
	// упрощенный режим работы с файлами - освободим файлы	
	Если РедактируетТекущийПользователь И ОткрыватьФайлыИсходящегоПисьмаНаРедактирование Тогда
		РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;	
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка);
	ФайлОбъект.УстановитьПометкуУдаления(Не ФайлОбъект.ПометкаУдаления);
	ОбновитьФайлыПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлыПисьма()
	
	// Сохранение текущей строки
	ТекПозиция = Неопределено;
	Если Элементы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ТекДанные = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
		Если ТекДанные <> Неопределено Тогда
			Если ТекДанные.Свойство("Ссылка")
				И ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
				ТекПозиция = Новый Структура("Ссылка", ТекДанные.Ссылка);
			ИначеЕсли ТекДанные.Свойство("Представление")
				И ТекДанные.Свойство("Размер") Тогда
				ТекПозиция = Новый Структура("Представление, Размер", ТекДанные.Представление, ТекДанные.Размер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение списка файлов
	Если ЗначениеЗаполнено(ТекущееПисьмо) Тогда
		ЗаполнитьВложения(Вложения, ТекущееПисьмо);
	КонецЕсли;
	
	// Восстановление текущей строки
	Если ЗначениеЗаполнено(ТекПозиция) Тогда
		Если ТипЗнч(ТекПозиция) = Тип("Структура") Тогда
			Строки = Вложения.НайтиСтроки(ТекПозиция);
			Если Строки.Количество() > 0 Тогда
				Элементы.Вложения.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСВложением()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Элементы.ПросмотретьВложение.Доступность = Ложь;
		Элементы.РедактироватьВложение.Доступность = Ложь;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = Ложь;
		Элементы.СохранитьВложениеКак.Доступность = Ложь;
	Иначе
		ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
		Элементы.ПросмотретьВложение.Доступность = Истина;
		Элементы.РедактироватьВложение.Доступность = Истина;
		Элементы.ЗакончитьРедактированиеВложения.Доступность = ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.СохранитьВложениеКак.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеКак(Команда)
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Вложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для каждого ВыбраннаяСтрока Из Элементы.Вложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Вложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ВстроеннаяПочтаКлиент.СохранитьВложенияКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(
			Элементы.Вложения.ТекущиеДанные.Ссылка,
			Неопределено,
			ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьВложение(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВстроеннаяПочтаКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВложение(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(
		Обработчик,
		Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВложения(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокВложенийИУстановитьДоступностьКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Обработчик,
		Элементы.Вложения.ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложенийИУстановитьДоступностьКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлыПисьма();
	УстановитьДоступностьКомандРаботыСВложением();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаполнитьВложения(Вложения, Письмо)
	
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		Письмо, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
	
	Вложения.Очистить();
	Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
		ВложенияСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(ВложенияСтрока, ФайлыПисьмаСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуПредпросмотра()
	
	Если Вложения.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрСВложениями;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПредпросмотрБезВложений;
	КонецЕсли;
	
	Если Элементы.СтраницыПредпросмотр.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.СтраницыПредпросмотр.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

&НаСервере
Процедура УстановитьОтборПоПапкеСервер(Папка, ТекущаяСтрока = Неопределено)
	
	ТекущаяПапка = Папка;
	
	// Удалить предыдущие промежуточные результаты поиска
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Набор.Записать(Истина);

	Список.Параметры.УстановитьЗначениеПараметра("Папка", Неопределено);
	Элементы.ГруппаОтборВПапке.Доступность = Истина;	
	Если Папка = Неопределено ИЛИ Папка.Пустая() Тогда
		Элементы.ГруппаОтборВПапке.Доступность = Ложь;
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	КонецЕсли;
	
	ИспользуетсяПоискПоНепрочитанным = Ложь;
	
	Если ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПоиска") Тогда
		
		Если Найти(Список.ТекстЗапроса, "ПромежуточныеРезультатыПоискаПисем") = 0 Тогда
			
			Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;		
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ПолучитьТекстЗапросаПоПапкеПоискаИПоТексту());
				
			Иначе	
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ПолучитьТекстЗапросаПоПапкеПоиска());
					
			КонецЕсли;
				
			Список.Параметры.УстановитьЗначениеПараметра("ИдентификаторПоиска", УникальныйИдентификатор);
				
		КонецЕсли;
		
		КоличествоПисем = ВыполнитьПоискПоПапкеПоискаСервер(Папка);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеПапки = Папки.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если КоличествоПисем = 0 Тогда
			ДанныеПапки.Представление = Строка(ДанныеПапки.Ссылка);
		Иначе
			ДанныеПапки.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)",
				Строка(ДанныеПапки.Ссылка),
				Строка(КоличествоПисем));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Папка) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		
		Если Список.ТекстЗапроса <> ИсходныйТекстЗапроса Тогда
			
			Если Найти(Список.ТекстЗапроса, "РегистрСведений.СловаПисем") <> 0 Тогда
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				
				Список.ТекстЗапроса = СтрЗаменить(
					Список.ТекстЗапроса,
					"ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта",
					ПолучитьТекстЗапросаПоискаПоТексту());
					
			Иначе
				
				Список.ТекстЗапроса = ИсходныйТекстЗапроса;
				
			КонецЕсли;			
			
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Папка);
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СведенияОПапке = ВстроеннаяПочтаСервер.ПолучитьСведенияОПапке(Папка);
		ДанныеПапки = Папки.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ДанныеПапки.Представление <> СведенияОПапке.Представление
			Или ДанныеПапки.Выделена <> СведенияОПапке.Выделена Тогда
			
			ДанныеПапки.Представление = СведенияОПапке.Представление;
			ДанныеПапки.Выделена = СведенияОПапке.Выделена;
			
		КонецЕсли;
				
	КонецЕсли;
	
	УстановитьОтборСписка(БыстрыйПоискВключен);
	ПредыдущаяПапка = Папка;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПоискПоПапкеПоискаСервер(ПапкаПоиска)
	
	ПапкаПоискаОбъект = ПапкаПоиска.ПолучитьОбъект();
	УсловияПоиска = ПапкаПоискаОбъект.НастройкаОтбора.Получить();
	
	Для Каждого Строка Из УсловияПоиска Цикл
		Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.Прочтено
			И Строка.ЗначенияУсловия.Количество() > 0 Тогда
			
			ИспользуетсяПоискПоНепрочитанным = Не Строка.ЗначенияУсловия[0].Значение;

		КонецЕсли;	
	КонецЦикла;
	
	РезультатПоиска = ПоискПисемПоРеквизитам.ВыполнитьПоиск(УсловияПоиска);
	МассивСсылок = РезультатПоиска.МассивСсылок;
	КоличествоНайденных = МассивСсылок.Количество();
	Если ПапкаПоискаОбъект.КоличествоОбъектов <> КоличествоНайденных Тогда
		ПапкаПоискаОбъект.КоличествоОбъектов = МассивСсылок.Количество();
		ПапкаПоискаОбъект.Записать();
		НеобходимоОбновитьДеревоПапок = Истина;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаПоиска = ТекущаяДатаСеанса();
	Набор = РегистрыСведений.ПромежуточныеРезультатыПоискаПисем.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторПоиска.Установить(УникальныйИдентификатор);
	Для Каждого ЭлементМассива Из МассивСсылок Цикл
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Ссылка = ЭлементМассива;
		НоваяЗапись.ИдентификаторПоиска = УникальныйИдентификатор;
		НоваяЗапись.ДатаПоиска = ДатаПоиска;
	КонецЦикла;	
	Набор.Записать(Истина);
	
	Возврат КоличествоНайденных;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранноеПисьмо(ВыводитьПредупреждение)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Письмо = Элементы.Список.ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Письмо;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение)
	
	Результат = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ЗначениеЗаполнено(ВыбранноеПисьмо)
		И Результат.Найти(ВыбранноеПисьмо) = Неопределено Тогда
		Результат.Добавить(ВыбранноеПисьмо);
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны письма.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КомандаОшибкаПодключенияПодробно(Команда)
	
	ПараметрыФормы = Новый Структура("ОшибкаСоединенияСПочтовымСервером", ОшибкаСоединенияСПочтовымСервером);
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрОшибкиСоединения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПравилОбработки(Команда)
	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.НастройкаПравилОбработки");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПравило(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ВходящееПисьмо")
		И ТипЗнч(ТекущиеДанные.Ссылка) <> Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСозданияПравила = ПолучитьДанныеДляСозданияПравила(ТекущиеДанные.Ссылка);	
	ОткрытьФорму("Справочник.ПравилаОбработкиПисем.Форма.ФормаЭлемента", ДанныеДляСозданияПравила);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСозданияПравила(Основание)
	
	Условия = Новый СписокЗначений;
	Действия = Новый СписокЗначений;
	ДляВходящих = ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание);
	ДляИсходящих = ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание);
	
	РаботаСПравиламиОбработкиПисем.СформироватьУсловияПоПисьму(
		Основание,
		Условия,
		ДляВходящих,
		ДляИсходящих);
	РаботаСПравиламиОбработкиПисем.СформироватьДействияПоПисьму(
		Основание,
		Действия,
		ДляВходящих,
		ДляИсходящих);
		
	Результат = Новый Структура;
	Результат.Вставить("Условия", Условия);
	Результат.Вставить("Действия", Действия);
	
	УчетнаяЗапись = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "УчетнаяЗапись");
	
	Результат.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Результат.Вставить("ДляВходящихПисем", ДляВходящих);
	Результат.Вставить("ДляИсходящихПисем", ДляИсходящих);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВСписок(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Элементы.Список.ТекущиеДанные.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = Элементы.Список.ТекущиеДанные.Отправитель;
	УчетнаяЗапись = Элементы.Список.ТекущиеДанные.УчетнаяЗапись;
	
	Если Не ДобавитьВСписокСервер(Результат, Отправитель, УчетнаяЗапись) Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отправитель письма уже есть в списке адресов ""%1"".'"), 
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	Иначе
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отправитель письма добавлен в список адресов ""%1""'"), Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);		
		ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавигационнаяСсылка, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВСписокСервер(Элемент, Адресат, УчетнаяЗапись)
	
	Адрес = ""; 
	
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Адрес = Адресат.Адрес;
	Иначе
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(УчетнаяЗапись, "АдресЭлектроннойПочты");
	КонецЕсли;	
	
	Возврат Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(Элемент, Адрес);

КонецФункции

&НаКлиенте
Процедура ДобавитьДоменВСписок(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", Элементы.Список.ТекущиеДанные.УчетнаяЗапись);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДоменВСписокЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отправитель = Элементы.Список.ТекущиеДанные.Отправитель;
	УчетнаяЗапись = Элементы.Список.ТекущиеДанные.УчетнаяЗапись;
	
	Если Не ДобавитьДоменВСписокСервер(Результат, Отправитель, УчетнаяЗапись) Тогда
		
		Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отправитель письма уже есть в списке адресов ""%1"".'"), 
			Результат);
		ПоказатьПредупреждение(, Причина);
		
	Иначе
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отправитель письма добавлен в список адресов ""%1""'"), Результат);
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат);
		ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавигационнаяСсылка, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьДоменВСписокСервер(Элемент, Адресат, УчетнаяЗапись)
	
	Адрес = ""; 
	
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Адрес = Адресат.Адрес;
	Иначе
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(УчетнаяЗапись, "АдресЭлектроннойПочты");
	КонецЕсли;	
	
	Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(Адрес);
	Возврат Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(Элемент, Домен);

КонецФункции

&НаКлиенте
Процедура СпискиАдресов(Команда)
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.Форма.ФормаСпискаПоУчетнымЗаписям");
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьПисьма(Команда)
	
	ОткрытьФорму("Обработка.ПоискПисемПоРеквизитам.Форма.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеИзменилосьСодержаниеПисьма(Письмо = Неопределено)
	
	ПолучитьДанныеДляПредпросмотра = ЗначениеЗаполнено(Письмо)
		И ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо)
		И Письмо = ТекущееПисьмо;
	
	Если Не ПолучитьДанныеДляПредпросмотра Тогда
		Возврат;
	КонецЕсли;
	
	// Вычисление, включен ли быстрый поиск по непрочтенным письмам
	ИспользуетсяБыстрыйПоискПоНепрочитанным = Ложь;			
	Для Каждого Строка Из ОтборВПапке Цикл
		Если Строка.Параметр = "Прочтено" Тогда
			ИспользуетсяБыстрыйПоискПоНепрочитанным = 
				Строка.Значение = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбработки = ОбработатьАктивизациюСтроки(
		Письмо,
		УникальныйИдентификатор,
		ИспользоватьАвтоматическоеПрочтение,
		РежимМоиПапки,
		ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную 
			Или ИспользуетсяПоискПоНепрочитанным
			Или ИспользуетсяБыстрыйПоискПоНепрочитанным);
	
	Вложения.Очистить();
	Для каждого Вложение Из РезультатОбработки.Вложения Цикл
		ЗаполнитьЗначенияСвойств(Вложения.Добавить(), Вложение);
	КонецЦикла;
	
	Если РезультатОбработки.ОповеститьОПрочтении Тогда
		ОбновитьДанные(РезультатОбработки.СведенияОПапках);
	КонецЕсли;
	
	ОбновитьОбластьПредпросмотра(
		РезультатОбработки.HTMLПредставлениеПисьма,
		РезультатОбработки.Вложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПапкуНаУдаление(Команда)
	
	Если Элементы.Папки.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана папка для удаления.'"));
		Возврат;
	КонецЕсли;
	
	Ссылка = Элементы.Папки.ТекущиеДанные.Ссылка;
	Пометка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	Если Пометка Тогда 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			Строка(Ссылка));
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			Строка(Ссылка));
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Ссылка", Ссылка);
	ПараметрыОбработчика.Вставить("Пометка", Пометка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьПапкуНаУдалениеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПапкуНаУдалениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Делопроизводство.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Ссылка, Не ДополнительныеПараметры.Пометка);
	
	ОповеститьОбИзменении(ДополнительныеПараметры.Ссылка);
	
	СостояниеДерева = ЗапомнитьСостояниеДереваПапок();
	ЗаполнитьПапки();
	ВосстановитьСостояниеДереваПапок(СостояниеДерева);
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоиск(Команда)
	
	ВключитьВыключитьБыстрыйПоискКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоискКлиент()
	
	ВключитьВыключитьБыстрыйПоискСервер(Не БыстрыйПоискВключен);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВыключитьБыстрыйПоискСервер(ВключитьПоиск)
	
	БыстрыйПоискВключен = ВключитьПоиск;
	
	Если БыстрыйПоискВключен Тогда
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Выключить быстрый поиск'");
	Иначе
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВыкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Включить быстрый поиск'");
	КонецЕсли;
	
	УстановитьОтборСписка(БыстрыйПоискВключен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВПапкеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьСписокВыбораУТекущегоПоляОтбора(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбранноеПисьмо, ЭтаФорма);
	
КонецПроцедуры

