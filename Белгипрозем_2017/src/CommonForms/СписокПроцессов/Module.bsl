
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Заполнение списка типов процессов
	ТипыПроцессов.Добавить("Исполнение", НСтр("ru = 'Исполнение'"));
	ТипыПроцессов.Добавить("Ознакомление", НСтр("ru = 'Ознакомление'"));
	ТипыПроцессов.Добавить("Поручение", НСтр("ru = 'Поручение'"));
	ТипыПроцессов.Добавить("Рассмотрение", НСтр("ru = 'Рассмотрение'"));
	ТипыПроцессов.Добавить("Регистрация", НСтр("ru = 'Регистрация'"));
	ТипыПроцессов.Добавить("Согласование", НСтр("ru = 'Согласование'"));
	ТипыПроцессов.Добавить("Утверждение", НСтр("ru = 'Утверждение'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПриглашениеНаМероприятие") Тогда 
		ТипыПроцессов.Добавить("Приглашение", НСтр("ru = 'Приглашение'"));
	КонецЕсли;	
	ТипыПроцессов.Добавить("КомплексныйПроцесс", НСтр("ru = 'Комплексный процесс'"));
	ТипыПроцессов.Добавить("ОбработкаВнутреннегоДокумента", НСтр("ru = 'Обработка внутреннего документа'"));
	ТипыПроцессов.Добавить("ОбработкаВходящегоДокумента", НСтр("ru = 'Обработка входящего документа'"));
	ТипыПроцессов.Добавить("ОбработкаИсходящегоДокумента", НСтр("ru = 'Обработка исходящего документа'"));
	
	//заполнение параметров запросов
	ТочкиМаршрута = Новый Массив;
	ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
	ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать);
	
	СписокИсполнение.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", ТочкиМаршрута);
	СписокПоручение.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", ТочкиМаршрута);

	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	СписокИсполнение.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокКомплексныйПроцесс.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокОбработкаВнутреннегоДокумента.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокОбработкаВходящегоДокумента.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокОбработкаИсходящегоДокумента.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокОзнакомление.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокПоручение.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокПриглашение.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокРассмотрение.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокРегистрация.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокСогласование.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	СписокУтверждение.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	
	// Установка оформления списков
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияИсполнение);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияКомплексныйПроцесс);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияОзнакомление);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияПоручение);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияПриглашение);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияРассмотрение);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияРегистрация);
    РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокСогласованияДатойСогласование);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.СрокИсполненияУтверждение);

	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокИсполнение.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокКомплексныйПроцесс.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокОзнакомление.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокПоручение.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокПриглашение.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокРассмотрение.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокРегистрация.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокСогласование.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокУтверждение.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокОбработкаВнутреннегоДокумента.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокОбработкаВходящегоДокумента.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеБизнесПроцессов(СписокОбработкаИсходящегоДокумента.УсловноеОформление);
	
	// Работа с данными формы
	ТекущийТипПроцесса = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ТекущийТипПроцесса");
	Если Не ЗначениеЗаполнено(ТекущийТипПроцесса) Тогда
		ТекущийТипПроцесса = "Исполнение";
	КонецЕсли;
	
	ЗначениеПоказыватьТолькоАктивныеПроцессы = 
		ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ПоказыватьТолькоАктивныеПроцессы");
	Если ЗначениеЗаполнено(ЗначениеПоказыватьТолькоАктивныеПроцессы) Тогда
		ПоказыватьТолькоАктивныеПроцессы = ЗначениеПоказыватьТолькоАктивныеПроцессы;
	Иначе
		ПоказыватьТолькоАктивныеПроцессы = Истина;
	КонецЕсли;
	
	ПоАвтору = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ПоАвтору");
	
	ПоИсполнителю = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ПоИсполнителю");
	Если НЕ ЗначениеЗаполнено(ПоИсполнителю) Тогда
		ПоИсполнителю = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ОсновнойОбъектАдресации = Неопределено;
		ДополнительныйОбъектАдресации = Неопределено
	КонецЕсли;
	
	ОсновнойОбъектАдресации = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ОсновнойОбъектАдресации");
	ДополнительныйОбъектАдресации = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ДополнительныйОбъектАдресации");
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ПоПроекту = ХранилищеНастроекДанныхФорм.Загрузить("СписокПроцессов", "ДополнительныйОбъектАдресации");
	КонецЕсли;
	
	ПереключитьВкладку();
	
	ТекущийТип = ТипыПроцессов.НайтиПоЗначению(ТекущийТипПроцесса);
	Если ТекущийТип <> Неопределено Тогда
		Индекс = ТипыПроцессов.Индекс(ТекущийТип);
		Элементы.ТипыПроцессов.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроляИсполнение.Видимость = Ложь;
		Элементы.СостояниеКонтроляКомплексныйПроцесс.Видимость = Ложь;
		Элементы.СостояниеКонтроляОбработкаВнутреннегоДокумента.Видимость = Ложь;
		Элементы.СостояниеКонтроляОбработкаВходящегоДокумента.Видимость = Ложь;
		Элементы.СостояниеКонтроляОбработкаИсходящегоДокумента.Видимость = Ложь;
		Элементы.СостояниеКонтроляОзнакомление.Видимость = Ложь;
		Элементы.СостояниеКонтроляПоручение.Видимость = Ложь;
		Элементы.СостояниеКонтроляПриглашение.Видимость = Ложь;
		Элементы.СостояниеКонтроляРассмотрение.Видимость = Ложь;
		Элементы.СостояниеКонтроляРегистрация.Видимость = Ложь;
		Элементы.СостояниеКонтроляСогласование.Видимость = Ложь;
		Элементы.СостояниеКонтроляУтверждение.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БизнесПроцессИзменен"
		ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		
		ИмяСписка = "Список" + ТекущийТипПроцесса;
		
		Элементы[ИмяСписка].Обновить();
		
		УстановитьДоступностьКнопокИзмененияСостоянияПроцессов(ИмяСписка);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) И ЭтоПоддерживаемыйБизнесПроцесс(Параметр.Предмет) Тогда
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоздатьПроцесс(Элемент)
	
	ПараметрыФормы = Новый Структура("ТипПроцесса", ТекущийТипПроцесса);
	Если Элемент = Элементы.СписокОбработкаВнутреннегоДокумента
		ИЛИ Элемент = Элементы.СписокОбработкаВходящегоДокумента
		ИЛИ Элемент = Элементы.СписокОбработкаИсходящегоДокумента Тогда
		ВидПроцесса = СтрЗаменить(Элемент.Имя, "Список", "");
		ПараметрыФормы.Вставить("ВидПроцесса", ВидПроцесса);
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ПоИсполнителю,,,,,
		ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПоИсполнителю = ВыбранноеЗначение.РольИсполнителя;
		ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		УстановитьОтбор();
		
	Иначе  
		ОсновнойОбъектАдресации = Неопределено;
		ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоАвторуПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюПриИзменении(Элемент)
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПоИсполнителюПриИзмененииЗавершение", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ЭтаФорма,
		"ПоИсполнителю",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоПроектуПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоИсполнителю = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоАктивныеПроцессыПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТипыПроцессов

&НаКлиенте
Процедура ТипыПроцессовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПереключитьСписок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыПроцессовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не Копирование Тогда
		СоздатьПроцесс(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыПроцессовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		СоздатьПроцесс(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДоступностьКоманд", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКоманд()
	
	УстановитьДоступностьКнопокИзмененияСостоянияПроцессов("Список" + ТекущийТипПроцесса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.Остановить(Элементы["Список" + ТекущийТипПроцесса].ВыделенныеСтроки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СделатьАктивным(Элементы["Список" + ТекущийТипПроцесса].ВыделенныеСтроки, ЭтаФорма);
	
КонецПроцедуры

// Повторение процессов
&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторение(Элементы["Список" + ТекущийТипПроцесса].ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	Предмет = Элементы["Список" + ТекущийТипПроцесса].ТекущаяСтрока;
	
	Если Предмет = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Предмет, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ТекущийТипПроцесса", ТекущийТипПроцесса);
	ХранилищеНастроекДанныхФорм.Сохранить(
		"СписокПроцессов", "ПоказыватьТолькоАктивныеПроцессы", ПоказыватьТолькоАктивныеПроцессы);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ПоАвтору", ПоАвтору);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ПоИсполнителю", ПоИсполнителю);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ХранилищеНастроекДанныхФорм.Сохранить("СписокПроцессов", "ПоПроекту", ПоПроекту);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор()
	
	УстановитьОтборНаСервере();
	
	Элементы["Список" + ТекущийТипПроцесса].Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНаСервере()
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоАвтору", ПоАвтору);
	ПараметрыОтбора.Вставить("ПоИсполнителю", ПоИсполнителю);
	ПараметрыОтбора.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ПараметрыОтбора.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Параметрыотбора.Вставить("ПоказыватьТолькоАктивныеПроцессы", ПоказыватьТолькоАктивныеПроцессы);
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ПараметрыОтбора.Вставить("ПоПроекту", ПоПроекту);
	КонецЕсли;
	
	УстановитьОтборСписка(ЭтаФорма["Список" + ТекущийТипПроцесса], ПараметрыОтбора);
	
КонецПроцедуры

// Устанавливает дополнительные параметры для динамического списка
// по которым отбираются записи
//
// Параметры:
//   - Список - динамический список формы
//   - ПараметрыОтбора - соответсвие - параметры для установки отбора
//        - ПоАвтору - СправочникСсылка.Пользователи
//        - ПоПроекту - СправочникСсылка.Проекты
//        - ПоИсполнителю - СправочникСсылка.Пользователи/СправочникСсылка.РолиИсполнителей
//        - ПоказыватьТолькоАктивныеПроцессы - Булево
//        - ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач
//        - ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач
//
&НаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	// Отбор по автору
	ПоАвтору = ПараметрыОтбора["ПоАвтору"];
	ПараметрАвтор = Список.Параметры.Элементы.Найти("Автор");
	Если Не ЗначениеЗаполнено(ПоАвтору) Тогда
		ПараметрАвтор.Использование = Ложь;
	Иначе
		ПараметрАвтор.Использование = Истина;
		ПараметрАвтор.Значение = ПоАвтору;
	КонецЕсли;
	
	// Отбор по исполнителю
	ПараметрИсполнитель = Список.Параметры.Элементы.Найти("Исполнитель");
	Если ПараметрИсполнитель <> Неопределено Тогда
		
		ПоИсполнителю = ПараметрыОтбора["ПоИсполнителю"];
		ОсновнойОбъектАдресации = ПараметрыОтбора["ОсновнойОбъектАдресации"];
		ДополнительныйОбъектАдресации = ПараметрыОтбора["ДополнительныйОбъектАдресации"];
		
		ПараметрОсновнойОбъектАдресации = Список.Параметры.Элементы.Найти("ОсновнойОбъектАдресации");
		ПараметрДополнительныйОбъектАдресации = 
			Список.Параметры.Элементы.Найти("ДополнительныйОбъектАдресации");
		
		ПараметрИсполнитель.Использование = Ложь;
		ПараметрОсновнойОбъектАдресации.Использование = Ложь;
		ПараметрДополнительныйОбъектАдресации.Использование = Ложь;
		
		Если ЗначениеЗаполнено(ПоИсполнителю) Тогда
			
			ПараметрИсполнитель.Использование = Истина;
			ПараметрИсполнитель.Значение = ПоИсполнителю;
			
			Если ТипЗнч(ПоИсполнителю) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
					ПараметрОсновнойОбъектАдресации.Использование = Истина;
					ПараметрОсновнойОбъектАдресации.Значение = ОсновнойОбъектАдресации;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
					ПараметрДополнительныйОбъектАдресации.Использование = Истина;
					ПараметрДополнительныйОбъектАдресации.Значение = ДополнительныйОбъектАдресации;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Отбор по проекту
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ПараметрПроект = Список.Параметры.Элементы.Найти("Проект");
		Если ПараметрыОтбора["ПоПроекту"] <> Неопределено 
			И ПараметрыОтбора["ПоПроекту"].Пустая() Тогда
			ПараметрПроект.Использование = Ложь;
		Иначе
			ПараметрПроект.Использование = Истина;
			ПараметрПроект.Значение = ПараметрыОтбора["ПоПроекту"];
		КонецЕсли;
	КонецЕсли;
	
	// Отбор по Показывать только активные процессы
	ПараметрПоказыватьТолькоАктивныеПроцессы =
		Список.Параметры.Элементы.Найти("ПоказыватьТолькоАктивныеПроцессы");
	Если ПараметрыОтбора["ПоказыватьТолькоАктивныеПроцессы"] Тогда
		ПараметрПоказыватьТолькоАктивныеПроцессы.Использование = Истина;
		ПараметрПоказыватьТолькоАктивныеПроцессы.Значение = Истина;
	Иначе
		ПараметрПоказыватьТолькоАктивныеПроцессы.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВкладку()
	
	ТекущийТип = ТипыПроцессов.НайтиПоЗначению(ТекущийТипПроцесса);
	МетаданныеПроцессы = Метаданные.БизнесПроцессы;
	
	Элементы.ГруппаСписки.ТекущаяСтраница = Элементы["Группа" + ТекущийТипПроцесса];
	Элементы.ПоИсполнителю.Доступность = 
		МетаданныеПроцессы[ТекущийТипПроцесса].Реквизиты.Найти("Исполнитель") <> Неопределено
		И МетаданныеПроцессы[ТекущийТипПроцесса].ТабличныеЧасти.Найти("Исполнители") = Неопределено;
	УстановитьОтборНаСервере();
	
	Элементы.ГруппаКомандныеПанели.ТекущаяСтраница = Элементы["СтраницаКоманды" + ТекущийТипПроцесса];
	
	УстановитьПараметрыФункциональныхОпцийФормы(
		Новый Структура(
			"ТипФормыСДополнительнымиОтчетамиИОбработками, ТипОбъектаСДополнительнымиОтчетамиИОбработками", 
			"ФормаСписка",
			"БизнесПроцесс." + ТекущийТипПроцесса));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСписок()
	
	ТекущиеДанные = Элементы.ТипыПроцессов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Значение = ТекущийТипПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТипПроцесса = ТекущиеДанные.Значение;
	ПереключитьВкладку();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокИзмененияСостоянияПроцессов(ИмяТекущейТаблицы)
	
	ТекущиеДанные = Элементы[ИмяТекущейТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы[ИмяТекущейТаблицы].ВыделенныеСтроки.Количество() > 1 Тогда
		
		ДоступныеДействия = Новый Структура;
		ДоступныеДействия.Вставить("Остановить", Истина);
		ДоступныеДействия.Вставить("Продолжить", Истина);
		
	Иначе
		ДоступныеДействия = 
			РаботаСБизнесПроцессамиКлиент.ДоступныеДействияПоИзменениюСостоянияПроцесса(ТекущиеДанные);
	КонецЕсли;
	
	Элементы["Остановить" + ТекущийТипПроцесса].Доступность = ДоступныеДействия.Остановить;
	
	Элементы["ПродолжитьБизнесПроцесс" + ТекущийТипПроцесса].Доступность = ДоступныеДействия.Продолжить;
	
	Элементы["Остановить" + ТекущийТипПроцесса + "Контекст"].Доступность =
		ДоступныеДействия.Остановить;
		
	Элементы["ПродолжитьБизнесПроцесс" + ТекущийТипПроцесса + "Контекст"].Доступность =
		ДоступныеДействия.Продолжить;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка)
	
	Возврат ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Исполнение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Поручение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Приглашение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Регистрация")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Согласование")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Утверждение");
	
КонецФункции

#КонецОбласти
