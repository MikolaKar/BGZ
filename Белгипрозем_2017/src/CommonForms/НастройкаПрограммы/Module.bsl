#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МаксимальныйРазмерФайла = ФайловыеФункции.ПолучитьМаксимальныйРазмерФайла() / (1024*1024);
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	ПолнотекстовыйПоискИзменен = Ложь;
	
	ИспользоватьВидыВходящихДокументов 	 = НаборКонстант.ИспользоватьВидыВходящихДокументов;
	ИспользоватьВидыИсходящихДокументов  = НаборКонстант.ИспользоватьВидыИсходящихДокументов;
	ИспользоватьВидыВнутреннихДокументов = НаборКонстант.ИспользоватьВидыВнутреннихДокументов;
	ИспользоватьВидыПроектов 			 = НаборКонстант.ИспользоватьВидыПроектов;
	ИспользоватьВизыСогласования 		 = НаборКонстант.ИспользоватьВизыСогласования;
	
	ИспользоватьВопросыДеятельности 	   = НаборКонстант.ИспользоватьВопросыДеятельности;
	ВестиУчетОбращенийГраждан 			   = НаборКонстант.ВестиУчетОбращенийГраждан;
	ИспользоватьНоменклатуруДел 		   = НаборКонстант.ИспользоватьНоменклатуруДел;
	
	ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
	Элементы.ГруппаБизнесПроцессы.Доступность = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;

	ИспользоватьУчетПоОрганизациям = НаборКонстант.ИспользоватьУчетПоОрганизациям;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Элементы.СтраницаДанныеПредприятия.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьГрифыДоступа = НаборКонстант.ИспользоватьГрифыДоступа;
	ИспользоватьГрифыДоступаНачальноеЗначение = НаборКонстант.ИспользоватьГрифыДоступа;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.ИспользоватьПротоколированиеРаботыПользователей Тогда
		Элементы.СрокХраненияПротоколаРаботыПользователей.Доступность = Ложь;
		Элементы.КаталогСохраненияКопииПротоколаРаботыПользователей.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда 
		Элементы.ГруппаНастроекОчистки.Доступность = Ложь;
		Элементы.ОчиститьСейчас.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	Элементы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.НастройкиЭП.Доступность = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	Элементы.НастройкиРаспознавания.Доступность = НаборКонстант.ИспользоватьРаспознавание;
	Элементы.ПрефиксИБвШтрихкоде.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	Элементы.ИспользоватьВнешниеЗадачи.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.НастройкаУведомлений.Доступность = НаборКонстант.ИспользоватьУведомления;
	
	// для установки в значение по умолчанию - 180 дней
	СрокХраненияНеактивныхВерсийЗначение = РаботаСФайламиВызовСервера.ПолучитьСрокХраненияНеактивныхВерсий();
	Если НаборКонстант.СрокХраненияНеактивныхВерсий = 0 Тогда
		НаборКонстант.СрокХраненияНеактивныхВерсий = СрокХраненияНеактивныхВерсийЗначение;
	КонецЕсли;
	
	// для установки в значение по умолчанию - Электронная почта
	ТипОповещения = РаботаСФайламиВызовСервера.ПолучитьТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий();
	Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий.Пустая() Тогда
		НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ТипОповещения;
	КонецЕсли;
	
	ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление);
	Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесСобытия") Тогда
		Элементы.ГруппаСрокХраненияБизнесСобытий.Доступность = Ложь;
		Элементы.ИспользоватьУведомления.Доступность = Ложь;
	КонецЕсли;
	
	ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	КаталогСохраненияКопииПротоколаРаботыПользователей = СформироватьПутьWindowsLinux(
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейWindows, 
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейLinux);
		
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	Элементы.КаталогВременныхФайлов.Видимость = 
		РежимРаботы.КлиентСерверный И РежимРаботы.ЭтоАдминистраторСистемы;
	
	КаталогВременныхФайлов = СформироватьПутьWindowsLinux(
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляWindows, 
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляLinux);
		
	Если НаборКонстант.ВестиУчетПоПроектам Тогда 
		Элементы.ВестиУчетПлановыхТрудозатратВБизнесПроцессах.Доступность = Ложь;
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Ложь;
		Элементы.ИспользоватьВидыПроектов.Доступность = Истина;
	Иначе
		Элементы.ВестиУчетПлановыхТрудозатратВБизнесПроцессах.Доступность = Истина;
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Истина;
		Элементы.ИспользоватьВидыПроектов.Доступность = Ложь;
	КонецЕсли;
	
	Если НаборКонстант.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Ложь;
	Иначе
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Истина;
	КонецЕсли;
	
	// Почта
	ПрефиксДляОтветныхПисем = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляОтветныхПисем();
	ПрефиксДляПересылаемыхПисем = ВстроеннаяПочтаСервер.ПолучитьПрефиксДляПересылаемыхПисем();
	ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем =
		ПолучитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем();
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();	
	Если ЭтоФайловаяБаза Тогда
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Видимость = Ложь;
	Иначе
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Доступность =
			НаборКонстант.ИспользоватьВстроеннуюПочту;
		
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.АвтоОтметкаНезаполненного =
			НаборКонстант.ИспользоватьВстроеннуюПочту;
	КонецЕсли;
	
	Элементы.ГруппаВстроеннаяПочта.Доступность = НаборКонстант.ИспользоватьВстроеннуюПочту;
	
	ПериодХраненияHTMLПредставленияСодержанияПисем =
		ВстроеннаяПочтаСервер.ПолучитьНастройкуПрограммы("ПериодХраненияHTMLПредставленияСодержанияПисем");
	
	АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисем =
		(ПериодХраненияHTMLПредставленияСодержанияПисем > 0);
	
	Если АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисем Тогда
		
		Элементы.ДекорацияНадписьСрокУстаревания.Доступность = Истина;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.Доступность = Истина;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДекорацияНадписьСрокУстареванияДней.Доступность = Истина;
		Элементы.ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисем.Доступность = Истина;
		
	Иначе
		
		Элементы.ДекорацияНадписьСрокУстаревания.Доступность = Ложь;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.Доступность = Ложь;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДекорацияНадписьСрокУстареванияДней.Доступность = Ложь;
		Элементы.ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисем.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияНадписьСрокУстареванияДней.Заголовок =
		ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(
			ПериодХраненияHTMLПредставленияСодержанияПисем);
	
	// Права доступа
	Если Не ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа") Тогда 
		Элементы.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа.Доступность = Ложь;
		Элементы.ВключатьРуководителейВГруппыДоступаПодчиненных.Доступность = Ложь;
	КонецЕсли;
	
	ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем =
		ПолучитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем();
		
	ЗаполнитьСписокОповещения();	
	
	Элементы.ЧислоАдресатовДляКраткогоПредставления.Доступность = 
		НаборКонстант.СокращатьПредставлениеАдресатов
		И (Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
			ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке);
	
	Элементы.СимволЦитированияВПереписке.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
		
	Элементы.СокращатьПредставлениеАдресатов.Доступность = 
		Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
		ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке;
		
	Элементы.ВидЦитированияПриОтветеВФорматеHTML.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
	
	ИспользоватьРабочийКалендарь = НаборКонстант.ИспользоватьРабочийКалендарь;
	ИспользоватьУправлениеМероприятиями = НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Элементы.ИспользоватьНапоминанияПользователя.Доступность = НаборКонстант.ИспользоватьРабочийКалендарь;
	
	// Инструкции
	Элементы.ЗагрузитьТиповыеИнструкции.Доступность = НаборКонстант.ИспользоватьИнструкции;
	
	// Категории
	Если Не НаборКонстант.ИспользоватьКатегорииДанных = Истина Тогда
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Ложь;
		Элементы.ПроверкаКатегорий.Доступность = Ложь;
	КонецЕсли;
	
	// Доп. свойства
	ДоступностьДопНастроек = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ИспользоватьОбщиеДополнительныеЗначения.Доступность = ДоступностьДопНастроек;
	Элементы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Доступность = ДоступностьДопНастроек;
	
	// Обмен ЭД
	Элементы.ИспользоватьОбменЭД.Доступность = НаборКонстант.ИспользоватьСВД;
	
	// ЭП
	ИспользоватьЭП = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.ВыполнятьПроверкуЭПНаСервере.Доступность = ИспользоватьЭП;
	Элементы.НастройкиЭП.Доступность = ИспользоватьЭП;
	ВыполнятьПроверкуЭПНаСервере = НаборКонстант.ВыполнятьПроверкуЭПНаСервере;
	
	Элементы.ПараметрыИнтернетПоддержки.Видимость =  ИнтернетПоддержкаПользователейВызовСервера
		.ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке();

	//Фоновоя маршрутизация комплексных процессов
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Элементы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОрганизации(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ВыбранаОрганизация", Истина);
	Организация = ВыбранноеЗначение.Значение;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВопросаДеятельности(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВопросДеятельности = СоздатьВопросДеятельности(Результат);
	ПараметрыЗаписи.Вставить("СозданВопросДеятельности", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	ВопросДеятельности = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВопросДеятельностиВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаВходящихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыВходящихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидВходящихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаВходящихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	ВидДокумента = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВидВходящихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаИсходящихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыИсходящихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидИсходящихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаИсходящихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	ВидДокумента = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВидИсходящихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаВнутреннихДокументов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = СоздатьВидДокумента(Результат, "ВидыВнутреннихДокументов");
	ПараметрыЗаписи.Вставить("СозданВидВнутреннихДокументов", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаВнутреннихДокументов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	ВидДокумента = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВидВнутреннихДокументовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеСозданиеВидаПроектов(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВидПроекта = РаботаСПроектами.СоздатьВидПроекта(Результат);
	ПараметрыЗаписи.Вставить("СозданВидПроекта", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораВидаПроектов(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	ВидПроекта = ВыбранноеЗначение.Значение;	
	ПараметрыЗаписи.Вставить("ВидПроектовВыбран", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НаборКонстант.ИспользоватьВидыВходящихДокументов
		Или НаборКонстант.ИспользоватьВидыИсходящихДокументов
		Или НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		ИспользоватьВидыДокументов = Истина;
	Иначе
		ИспользоватьВидыДокументов = Ложь;
	КонецЕсли;
	
	// Включен учет по организациям
	Если Не ИспользоватьУчетПоОрганизациям И НаборКонстант.ИспользоватьУчетПоОрганизациям Тогда 
		
		Организации = МассивОрганизаций();
		Если Организации.Количество() = 0 Тогда // создание организации
			Организация = СоздатьОрганизацию();
		КонецЕсли;	
		
		Если НужноЗаполнитьОрганизацию() Тогда 
			
			Если Организации.Количество() = 1 Тогда 
				Организация = Организации[0];
			ИначеЕсли Организации.Количество() > 1 Тогда 
				Если Не ПараметрыЗаписи.Свойство("ВыбранаОрганизация") Тогда
					СписокОрганизаций = Новый СписокЗначений;
					СписокОрганизаций.ЗагрузитьЗначения(Организации);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеПослеВыбораОрганизации",
						ЭтотОбъект,
						ПараметрыЗаписи);
						
					СписокОрганизаций.ПоказатьВыборЭлемента(ОписаниеОповещения,
						НСтр("ru = 'Укажите организацию, к которой отнести существующие справочники и документы'"));
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;	
			
			Состояние(НСтр("ru = 'Выполняется включение учета по организациям. Пожалуйста, подождите...'"));
			ЗаполнитьОрганизацию(Организация);
			Состояние(НСтр("ru = 'Использование учета по организациям включено.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Включен учет вопросов деятельности
	Если Не ИспользоватьВопросыДеятельности И НаборКонстант.ИспользоватьВопросыДеятельности Тогда 
		Если НужноЗаполнитьВопросДеятельности() Тогда  
			
			ВопросыДеятельности = МассивВопросовДеятельности();
			Если ВопросыДеятельности.Количество() = 0 Тогда // создание вопроса деятельности
				Если Не ПараметрыЗаписи.Свойство("СозданВопросДеятельности") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВопросаДеятельности",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вопрос деятельности'"), 
						НСтр("ru = 'Введите наименование вопроса деятельности, к которому будут отнесены существующие документы:'"), 
						150, 
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			ИначеЕсли ВопросыДеятельности.Количество() = 1 Тогда 
				ВопросДеятельности = ВопросыДеятельности[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВопросДеятельностиВыбран") Тогда
				СписокВопросов = Новый СписокЗначений;
				СписокВопросов.ЗагрузитьЗначения(ВопросыДеятельности);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				СписокВопросов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, НСтр("ru = 'Укажите вопрос деятельности, к которому отнести существующие документы'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется включение учета по вопросам деятельности. Пожалуйста, подождите...'"));
			ЗаполнитьВопросДеятельности(ВопросДеятельности);
			Состояние(НСтр("ru = 'Использование учета по вопросам деятельности включено.'"));
			
		КонецЕсли;	
	КонецЕсли;
	
	// Включены виды входящих документов
	Если Не ИспользоватьВидыВходящихДокументов И НаборКонстант.ИспользоватьВидыВходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВходящийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыВходящихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидВходящихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаВходящихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие входящие документы:'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидВходящихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаВходящихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие входящие документы'"));
				
				Отказ = Истина;
				Возврат;
								
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида во входящих документах. Пожалуйста, подождите...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ВходящиеДокументы");
			Состояние(НСтр("ru = 'Использование видов входящих документов включено.'"));
			
		КонецЕсли;	
	КонецЕсли;
	
	// Включены виды исходящих документов
	Если Не ИспользоватьВидыИсходящихДокументов И НаборКонстант.ИспользоватьВидыИсходящихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ИсходящийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыИсходящихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда 
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидИсходящихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаИсходящихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие исходящие документы:'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидИсходящихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаИсходящихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие исходящие документы'"));
				
				Отказ = Истина;
				Возврат;
								
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида в исходящих документах. Пожалуйста, подождите...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ИсходящиеДокументы");
			Состояние(НСтр("ru = 'Использование видов исходящих документов включено.'"));
			
		КонецЕсли;
	КонецЕсли;
	
	// Включены виды внутренних документов
	Если Не ИспользоватьВидыВнутреннихДокументов И НаборКонстант.ИспользоватьВидыВнутреннихДокументов Тогда
		Если Делопроизводство.КоличествоДокументовСПустымВидом("ВнутреннийДокумент") > 0 Тогда 
			
			ВидыДокументов = МассивВидовДокументов("ВидыВнутреннихДокументов");
			Если ВидыДокументов.Количество() = 0 Тогда 
				
				Если Не ПараметрыЗаписи.Свойство("СозданВидВнутреннихДокументов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаВнутреннихДокументов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид документа'"), 
						НСтр("ru = 'Введите наименование вида документа, к которому будут отнесены существующие внутренние документы:'"),
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			ИначеЕсли ВидыДокументов.Количество() = 1 Тогда 
				ВидДокумента = ВидыДокументов[0];
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидВнутреннихДокументовВыбран") Тогда
				
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыДокументов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаВнутреннихДокументов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид документа, к которому отнести существующие внутренние документы'"));
				
				Отказ = Истина;
				Возврат;
								
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида во внутренних документах. Пожалуйста, подождите...'"));
			ЗаполнитьВидДокумента(ВидДокумента, "ВнутренниеДокументы");
			Состояние(НСтр("ru = 'Использование видов внутренних документов включено.'"));
			
		КонецЕсли;
	КонецЕсли;

	// Включены виды проектов
	Если Не ИспользоватьВидыПроектов И НаборКонстант.ИспользоватьВидыПроектов Тогда			
		Если РаботаСПроектами.КоличествоПроектовСПустымВидом() > 0 Тогда
			ВидыПроектов = МассивВидовПроектов();
			
			Если ВидыПроектов.Количество() = 0 Тогда
				Если Не ПараметрыЗаписи.Свойство("СозданВидПроектов") Тогда
					Наименование = "";
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПродолжениеСозданиеВидаПроектов",
						ЭтотОбъект,
						ПараметрыЗаписи);
					ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(Наименование, 
						НСтр("ru = 'Укажите вид проекта'"), 
						НСтр("ru = 'Введите наименование вида проекта, к которому будут отнесены существующие проекты:'"), 
						150,
						ОписаниеОповещения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;				
			ИначеЕсли ВидыПроектов.Количество() = 1 Тогда
				ВидПроекта = ВидыПроектов[0];
				
			ИначеЕсли Не ПараметрыЗаписи.Свойство("ВидПроектовВыбран") Тогда			
				СписокВидов = Новый СписокЗначений;
				СписокВидов.ЗагрузитьЗначения(ВидыПроектов);
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВыбораВидаПроектов",
					ЭтотОбъект,
					ПараметрыЗаписи);
				СписокВидов.ПоказатьВыборЭлемента(
					ОписаниеОповещения, 
					НСтр("ru = 'Укажите вид проекта, к которому отнести существующие проекты'"));
				
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется заполнение вида в проектах. Пожалуйста, подождите...'"));
			РаботаСПроектами.ЗаполнитьВидПроекта(ВидПроекта);
			Состояние(НСтр("ru = 'Использование видов проектов включено.'"));
			
		КонецЕсли;
	КонецЕсли;	
	
	// Включено использование виз согласования
	Если Не ИспользоватьВизыСогласования И НаборКонстант.ИспользоватьВизыСогласования Тогда
		Состояние(НСтр("ru = 'Выполняется заполнение виз согласования в существующих документах. Пожалуйста, подождите...'"));
		ЗаполнитьВизы();
		Состояние(НСтр("ru = 'Визы согласования в существующих документах заполнены.'"));
	КонецЕсли;	
	
	// Включен рабочий календарь и управление мероприятиями
	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Состояние(НСтр("ru = 'Выполняется заполнение рабочего календаря мероприятиями. Пожалуйста, подождите...'"));
		ЗаполнитьРабочийКалендарьМероприятиями();
		Состояние(НСтр("ru = 'Рабочий календарь заполнен мероприятиями.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа 
		И ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа <> Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда
		
		ПоказатьПредупреждениеПриИзмененииОграниченияДоступаНаУровнеЗаписей	= Истина;
		
	Иначе
		
		ПоказатьПредупреждениеПриИзмененииОграниченияДоступаНаУровнеЗаписей	= Ложь;
		
	КонецЕсли;
	
	ИспользоватьБизнесСобытияВключено = ТекущийОбъект.ИспользоватьБизнесСобытия И Не Константы.ИспользоватьБизнесСобытия.Получить();
	
	ХранитьФайлыВТомахНаДиске = Константы.ХранитьФайлыВТомахНаДиске.Получить();
	ХранениеВТомахНаДискеВключено = ТекущийОбъект.ХранитьФайлыВТомахНаДиске И Не ХранитьФайлыВТомахНаДиске;
	Если ХранениеВТомахНаДискеВключено Тогда
		
		Если ФайловыеФункции.ЕстьТомаХраненияФайлов() Тогда
			ХранениеВТомахНаДискеВключено = Ложь;
		КонецЕсли;
		
		// Создаем группу томов
		Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию(НСтр("ru='Группа по умолчанию'"), Истина);
		Если Не ЗначениеЗаполнено(Группа) Тогда
			Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
			Группа.Наименование = НСтр("ru='Группа по умолчанию'");
			Группа.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ПолнотекстовыйПоискИзменен = (ТекущийОбъект.ИспользоватьПолнотекстовыйПоиск <> Константы.ИспользоватьПолнотекстовыйПоиск.Получить());
	
	ИспользоватьРаспознавание = Константы.ИспользоватьРаспознавание.Получить();
	ИспользоватьРаспознаваниеВключено = ТекущийОбъект.ИспользоватьРаспознавание = Истина И ИспользоватьРаспознавание = Ложь;
	
	// Приглашение на мероприятие
	ИспользоватьПриглашениеНаМероприятие = 
		ТекущийОбъект.ИспользоватьБизнесПроцессыИЗадачи И 
		ТекущийОбъект.ИспользоватьУправлениеМероприятиями;
	
	ТекущийОбъект.ИспользоватьПриглашениеНаМероприятие = ИспользоватьПриглашениеНаМероприятие;
	
	// Учет по проектам
	Если ТекущийОбъект.ВестиУчетПоПроектам Тогда 
		ТекущийОбъект.ВестиУчетПлановыхТрудозатратВБизнесПроцессах = Истина;
		ТекущийОбъект.ВестиУчетФактическихТрудозатрат = Истина;
	КонецЕсли;
	
	Если ТекущийОбъект.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		ТекущийОбъект.ВестиУчетФактическихТрудозатрат = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ОсновнаяЕдиницаДлительности) Тогда 
		ТекущийОбъект.ОсновнаяЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Час;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ОсновнаяЕдиницаТрудозатрат) Тогда 
		ТекущийОбъект.ОсновнаяЕдиницаТрудозатрат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
	КонецЕсли;
	
	// Ограничение прав доступа
	ТекущийОбъект.ОграничиватьДоступНаУровнеЗаписей = ТекущийОбъект.ДокументооборотИспользоватьОграничениеПравДоступа;
	
	Если АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисем Тогда
		
		ВстроеннаяПочтаСервер.УстановитьНастройкуПрограммы(
			"ПериодХраненияHTMLПредставленияСодержанияПисем",
			ПериодХраненияHTMLПредставленияСодержанияПисем);
		
	Иначе
		
		ВстроеннаяПочтаСервер.УстановитьНастройкуПрограммы(
			"ПериодХраненияHTMLПредставленияСодержанияПисем",
			-1);
		
	КонецЕсли;
	
	Если Не ТекущийОбъект.ИспользоватьСВД Тогда
		ТекущийОбъект.ИспользоватьОбменЭД = Ложь;
	КонецЕсли;
	ТекущийОбъект.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов = ТекущийОбъект.ИспользоватьОбменЭД;
	
	// ЭП
	ТекущийОбъект.ВыполнятьПроверкуЭПНаСервере = ВыполнятьПроверкуЭПНаСервере;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Настройка журнала регистрации для хранения сведений о доступе к объектам
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда 
		
		Использование = Новый ИспользованиеСобытияЖурналаРегистрации();
		Использование.Использование = Истина;
		Использование.ОписаниеИспользования = Новый Массив();
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ФизическиеЛица";
		НастройкаСправочника.ПоляДоступа.Добавить("ДатаРождения");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.Файлы";
		НастройкаСправочника.ПоляДоступа.Добавить("Описание");
		НастройкаСправочника.ПоляДоступа.Добавить("ТекстХранилище");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВерсииФайлов";
		НастройкаСправочника.ПоляДоступа.Добавить("ФайлХранилище");
		НастройкаСправочника.ПоляДоступа.Добавить("ТекстХранилище");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВходящиеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо.Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ИсходящиеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВнутренниеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", Использование);
		а = ПолучитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access");
		
		Использование = Новый ИспользованиеСобытияЖурналаРегистрации();
		Использование.Использование = Истина;
		Использование.ОписаниеИспользования = Новый Массив();
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ФизическиеЛица";
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.Файлы";
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВерсииФайлов";
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.AccessDenied", Использование);
		
	Иначе
		
		// Отключаем регистрацию событий "Доступ" и "Отказ в доступе".
		Использование = Новый ИспользованиеСобытияЖурналаРегистрации();
		Использование.Использование =Ложь;
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", Использование);
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.AccessDenied", Использование);
		
	КонецЕсли;
	
	МаксимальныйРазмерФайлаМБ = МаксимальныйРазмерФайла * (1024*1024);
	Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайлаМБ);
	
	Константы.ИспользоватьВидыДокументов.Установить(ИспользоватьВидыДокументов);
	Элементы.ПрефиксИБвШтрихкоде.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступа);
	
	Если Не НаборКонстант.ИспользоватьСинхронизациюДанных Тогда
		
		Константы.ИспользоватьВнешниеЗадачи.Установить(Ложь);
		
	КонецЕсли;
	
	// Почта
	ВстроеннаяПочтаСервер.УстановитьПрефиксДляОтветныхПисем(ПрефиксДляОтветныхПисем);
	ВстроеннаяПочтаСервер.УстановитьПрефиксДляПересылаемыхПисем(ПрефиксДляПересылаемыхПисем);
	
	Если НаборКонстант.ИспользоватьВстроеннуюПочту И Не ЭтоФайловаяБаза Тогда
		
		СообщениеОбОшибке = "";
		Если Не ПроверитьИУстановитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем(
			ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем, Ложь, Ложь, СообщениеОбОшибке) Тогда
			
			Отказ = Истина;
			
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьСписокОповещения();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Настройка журнала регистрации для хранения сведений о доступе к объектам:
	// - Файлы
	// - Версии файлов
	// - Физические лица
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда 
		
		Использование = Новый ИспользованиеСобытияЖурналаРегистрации();
		Использование.Использование = Истина;
		Использование.ОписаниеИспользования = Новый Массив();
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ФизическиеЛица";
		НастройкаСправочника.ПоляДоступа.Добавить("ДатаРождения");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.ЗначенияПолей");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.Страна");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.Регион");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.Город");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.АдресЭП");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.НомерТелефона");
		НастройкаСправочника.ПоляДоступа.Добавить("КонтактнаяИнформация.НомерТелефонаБезКодов");
		НастройкаСправочника.ПоляРегистрации.Добавить("Ссылка");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.Файлы";
		НастройкаСправочника.ПоляДоступа.Добавить("Описание");
		НастройкаСправочника.ПоляДоступа.Добавить("ТекстХранилище");
		НастройкаСправочника.ПоляДоступа.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВерсииФайлов";
		НастройкаСправочника.ПоляДоступа.Добавить("ФайлХранилище");
		НастройкаСправочника.ПоляДоступа.Добавить("ТекстХранилище");
		НастройкаСправочника.ПоляДоступа.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВходящиеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляДоступа.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ИсходящиеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляДоступа.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		НастройкаСправочника = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации();
		НастройкаСправочника.Объект = "Справочник.ВнутренниеДокументы";
		НастройкаСправочника.ПоляДоступа.Добавить("Содержание");
		НастройкаСправочника.ПоляДоступа.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		НастройкаСправочника.ПоляРегистрации.Добавить("СубъектыПерсональныхДанных.ФизическоеЛицо");
		Использование.ОписаниеИспользования.Добавить(НастройкаСправочника);
		
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", Использование);
		
	Иначе
		
		// Отключаем регистрацию событий "Доступ" и "Отказ в доступе"
		Использование = Новый ИспользованиеСобытияЖурналаРегистрации();
		Использование.Использование = Ложь;
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", Использование);
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.AccessDenied", Использование);
		
	КонецЕсли;

	Если ПолнотекстовыйПоискИзменен Тогда
		
		Разрешен = Константы.ИспользоватьПолнотекстовыйПоиск.Получить();
		Если Разрешен Тогда
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
		Иначе
			ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
		КонецЕсли;
		
	КонецЕсли;
	
	// Настройка использования почтового клиента
	РегистрыСведений.ИспользованиеПочты.ОбновитьИспользованиеПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение1(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение1", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение2(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение2", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение3(Результат, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказанВопрос3", Истина);
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Формируется очередь распознавания изображений. Пожалуйста подождите...'"));				
		ЧислоКартинок = ПоставитьВсеКартинкиВОчередьРаспознавания();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Очередь распознавания изображений сформирована (файлов: %1).'"), ЧислоКартинок);
		Состояние(ТекстСообщения);		
	КонецЕсли;
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжение4(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение4", Истина);
	ПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(УстанавливаемыеПараметры);
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Если ПолнотекстовыйПоискИзменен Тогда
		ПолнотекстовыйПоискИзменен = Ложь;
		Оповестить("ПолнотекстовыйПоискИзменен");
	КонецЕсли;
	
	Если ИспользованиеГрифовДоступаБылоИзменено И ИспользоватьГрифыДоступа Тогда 
		ИспользованиеГрифовДоступаБылоИзменено = Ложь;
		Состояние(НСтр("ru = 'Идет обновление грифов доступа входящих и исходящих документов. 
			|Пожалуйста, подождите...'"));
		КорректировкаГрифовДоступа();
		Состояние(НСтр("ru = 'Обновление грифов доступа завершено.'"));
	КонецЕсли;
	
	ИспользованиеГрифовДоступаБылоИзменено = Ложь;
	
	// Изменен учет обращений граждан
	Если Не ВестиУчетОбращенийГраждан И НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение учета обращений граждан. Пожалуйста, подождите...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан включено.'"));
		
	ИначеЕсли ВестиУчетОбращенийГраждан И Не НаборКонстант.ВестиУчетОбращенийГраждан Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение учета обращений граждан. Пожалуйста, подождите...'"));
		ПереключитьУчетОбращенийГраждан();
		Состояние(НСтр("ru = 'Использование учета обращений граждан выключено.'"));
		
	КонецЕсли;
	
	// изменено использование номенклатуры дел
	Если Не ИспользоватьНоменклатуруДел И НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется включение использования номенклатуры дел. Пожалуйста, подождите...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел включено.'"));
		
	ИначеЕсли ИспользоватьНоменклатуруДел И Не НаборКонстант.ИспользоватьНоменклатуруДел Тогда 
		
		Состояние(НСтр("ru = 'Выполняется выключение использования номенклатуры дел. Пожалуйста, подождите...'"));
		ПереключитьИспользованиеНоменклатурыДел();
		Состояние(НСтр("ru = 'Использование номенклатуры дел выключено.'"));
		
	КонецЕсли;
	
	Если ПоказатьПредупреждениеПриИзмененииОграниченияДоступаНаУровнеЗаписей Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение1") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение1",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено использование прав доступа!
					|Выполните полное обновление прав доступа (Настройка и администрирование - Обновление прав доступа).'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ХранениеВТомахНаДискеВключено Тогда
		Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение2") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение2",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьПредупреждение(
				ОписаниеОповещения,
				НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
					|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьРаспознаваниеВключено Тогда
		
		Если Не ПараметрыЗаписи.Свойство("ПоказанВопрос3") Тогда
			Текст = НСтр("ru = 'Включено распознавание. 
			|Для работы распознавания необходимо установить бесплатную программу CuneiForm (http://www.cuneiform.ru/downloads/index.html).
			|Поставить в очередь на распознавание все существующие файлы изображений?'");		
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиПродолжение3",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет); 
			Возврат;	  
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьБизнесСобытияВключено Тогда
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение4") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПослеЗаписиПродолжение4",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ПоказатьПредупреждение(
					ОписаниеОповещения,
					НСтр("ru = 'Включено использование бизнес-событий.
								|В режиме файловой информационной базы регламентное задание
							  	|""Обработка произошедших бизнес-событий""
							  	|необходимо выполнять вручную через консоль регламентных заданий
							  	|(например, запустив отдельный сеанс для выполнения регламентных заданий).'"));
				Возврат;
			КонецЕсли;									  
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьГрифыДоступаПриИзменении(Элемент)
	
	ИспользованиеГрифовДоступаБылоИзменено = Истина;
	Модифицированность = Истина;
	Если Не ИспользоватьГрифыДоступа Тогда
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Ложь;
	Иначе	
		Элементы.ГрифДоступаПоУмолчанию.Доступность = Истина;
		Элементы.ГрифДоступаПоУмолчанию.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;	
	
	СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступа);
	ОбновитьИнтерфейс();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретЗагрузкиФайловПоРасширениюПриИзменении(Элемент)
	
	Элементы.СписокЗапрещенныхРасширений.Доступность = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаспознаваниеПриИзменении(Элемент)
	Элементы.НастройкиРаспознавания.Доступность = НаборКонстант.ИспользоватьРаспознавание;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменДаннымиПриИзменении(Элемент)
	
	Элементы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	Элементы.ПрефиксИБвШтрихкоде.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	Элементы.ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
	
	Если НаборКонстант.ИспользоватьСинхронизациюДанных Тогда
		Элементы.ИспользоватьВнешниеЗадачи.Доступность = Истина;
		НаборКонстант.ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств = Истина;
	Иначе
		Элементы.ИспользоватьВнешниеЗадачи.Доступность = Ложь;
		НаборКонстант.ЗапретитьРедактированиеСтатейДвиженияДенежныхСредств = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронноЦифровыеПодписиПриИзменении(Элемент)
	
	ИспользоватьЭП = НаборКонстант.ИспользоватьЭлектронныеПодписи;
	Элементы.ВыполнятьПроверкуЭПНаСервере.Доступность = ИспользоватьЭП;
	Элементы.НастройкиЭП.Доступность = ИспользоватьЭП;
	Если Не ИспользоватьЭП И ВыполнятьПроверкуЭПНаСервере Тогда
		ВыполнятьПроверкуЭПНаСервере = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСостоянияДокументовПриИзменении(Элемент)
	
	Элементы.РазрешитьРучноеИзменениеСостоянияДокументов.Доступность = 
		НаборКонстант.ИспользоватьСостоянияДокументов;
	Элементы.ОграничиватьДоступностьПолейПоСостоянию.Доступность = 
		НаборКонстант.ИспользоватьСостоянияДокументов;
	НаборКонстант.РазрешитьРучноеИзменениеСостоянияДокументов = 
		НаборКонстант.ИспользоватьСостоянияДокументов;
	НаборКонстант.ОграничиватьДоступностьПолейПоСостоянию = 
		НаборКонстант.ИспользоватьСостоянияДокументов;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКатегорииДанныхПриИзменении(Элемент)
		
	Если НаборКонстант.ИспользоватьКатегорииДанных = Ложь Тогда
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Ложь;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Ложь;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Ложь;
		Элементы.ПроверкаКатегорий.Доступность = Ложь;
	Иначе
		НаборКонстант.ИспользоватьАвтоматическуюКатегоризациюДанных = Истина;
		НаборКонстант.ИспользоватьПроверкуКатегорий = Истина;
		Элементы.ИспользоватьАвтоматическуюКатегоризациюДанных.Доступность = Истина;
		Элементы.ПроверкаКатегорий.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрафикиРаботыПриИзменении(Элемент)
	
	СохранитьКонстантуИспользоватьГрафикиРаботы(НаборКонстант.ИспользоватьГрафикиРаботы);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПротоколированиеРаботыПользователейПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьПротоколированиеРаботыПользователей Тогда
		Элементы.СрокХраненияПротоколаРаботыПользователей.Доступность = Ложь;
		Элементы.КаталогСохраненияКопииПротоколаРаботыПользователей.Доступность = Ложь;
	Иначе	
		Элементы.СрокХраненияПротоколаРаботыПользователей.Доступность = Истина;
		Элементы.КаталогСохраненияКопииПротоколаРаботыПользователей.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсийПриИзменении(Элемент)
	
	ДоступноПоле = (НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = ПредопределенноеЗначение("Перечисление.ТипыОповещения.Ознакомление"));
	Элементы.ПапкаДляХраненияОтчетовОбУдалении.Доступность = ДоступноПоле;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБизнесСобытияПриИзменении(Элемент)
	
	Элементы.ГруппаСрокХраненияБизнесСобытий.Доступность = НаборКонстант.ИспользоватьБизнесСобытия;
	Элементы.ИспользоватьУведомления.Доступность = НаборКонстант.ИспользоватьБизнесСобытия;
	
	Если Не НаборКонстант.ИспользоватьБизнесСобытия Тогда
		НаборКонстант.ИспользоватьУведомления = Ложь;
		Элементы.НастройкаУведомлений.Доступность = НаборКонстант.ИспользоватьУведомления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьНеактивныеВерсииПриИзменении(Элемент)
	
	Элементы.ГруппаНастроекОчистки.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ОчиститьСейчас.Доступность = НаборКонстант.УдалятьНеактивныеВерсии;
	Элементы.ПутьСохраненияУдаляемыхВерсий.АвтоОтметкаНезаполненного = НаборКонстант.УдалятьНеактивныеВерсии;
	
КонецПроцедуры

&НаКлиенте
Процедура ХранитьФайлыВТомахНаДискеПриИзменении(Элемент)
	
	Элементы.ОткрытьТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
	ЕстьТомаХраненияФайлов = СохранитьФормуИПолучитьЕстьТомаХраненияФайлов();
	ОбновитьИнтерфейс();
	
	
	Если ХранитьФайлыВТомахНаДискеНачальноеЗначение = Ложь И
		НаборКонстант.ХранитьФайлыВТомахНаДиске = Истина И
		Не ЕстьТомаХраненияФайлов Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не указаны.
		|Программа будет продолжать сохранять файлы в информационной базе до тех пор, пока не будет указан хотя бы один том хранения файлов.'"));
		
	КонецЕсли;	
	
	ХранитьФайлыВТомахНаДискеНачальноеЗначение = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоПроектамПриИзменении(Элемент)
	
	Если НаборКонстант.ВестиУчетПоПроектам Тогда 
		НаборКонстант.ВестиУчетПлановыхТрудозатратВБизнесПроцессах = Истина;
		НаборКонстант.ВестиУчетФактическихТрудозатрат = Истина;
		
		Элементы.ВестиУчетПлановыхТрудозатратВБизнесПроцессах.Доступность = Ложь;
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Ложь;
		
		НаборКонстант.ИспользоватьВидыПроектов = Истина;
		Элементы.ИспользоватьВидыПроектов.Доступность = Истина;
	Иначе	
		Элементы.ВестиУчетПлановыхТрудозатратВБизнесПроцессах.Доступность = Истина;
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Истина;
		
		НаборКонстант.ИспользоватьВидыПроектов = Ложь;
		Элементы.ИспользоватьВидыПроектов.Доступность = Ложь;
	КонецЕсли;	
	
	Если НаборКонстант.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Ложь;
	Иначе	
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПлановыхТрудозатратВБизнесПроцессахПриИзменении(Элемент)
	
	Если НаборКонстант.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		НаборКонстант.ВестиУчетФактическихТрудозатрат = Истина;
		
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Ложь;
	Иначе	
		Элементы.ВестиУчетФактическихТрудозатрат.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru='Путь для перемещения устаревших версий'"),
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение",
		ЭтотОбъект);	
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийНачалоВыбораПродолжение(Результат, Параметры)Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows = Результат.ПолныйПутьWindows;
		НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux = Результат.ПолныйПутьLinux;
		
		ПутьСохраненияУдаляемыхВерсий = СформироватьПутьWindowsLinux(
			НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows, 
			НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПутьСохраненияУдаляемыхВерсийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru='Путь сохранения копии протокола работы пользователей'"),
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейWindows, 
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбораПродолжение",
		ЭтотОбъект);	
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейНачалоВыбораПродолжение(Результат, Параметры)Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейWindows = Результат.ПолныйПутьWindows;
		НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейLinux = Результат.ПолныйПутьLinux;
		
		КаталогСохраненияКопииПротоколаРаботыПользователей = СформироватьПутьWindowsLinux(
			НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейWindows, 
			НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейLinux);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияКопииПротоколаРаботыПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, ПолныйПутьWindows, ПолныйПутьLinux",
		НСтр("ru = 'Путь к единому сетевому каталогу для общих временных файлов серверов 1С:Предприятие, работающих в одном кластере.'"),
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляWindows, 
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляLinux);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КаталогВременныхФайловНачалоВыбораПродолжение",
		ЭтотОбъект);	
	ОткрытьФорму("ОбщаяФорма.ВыборПутиWindowsLinux", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловНачалоВыбораПродолжение(Результат, Параметры)Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляWindows = Результат.ПолныйПутьWindows;
		НаборКонстант.КаталогСообщенийОбменаДаннымиДляLinux = Результат.ПолныйПутьLinux;
		
		КаталогВременныхФайлов = СформироватьПутьWindowsLinux(
			НаборКонстант.КаталогСообщенийОбменаДаннымиДляWindows, 
			НаборКонстант.КаталогСообщенийОбменаДаннымиДляLinux);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВстроеннуюПочтуПриИзменении(Элемент)
	
	Если ЭтоФайловаяБаза Тогда
		
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Видимость = Ложь;
		
	Иначе
		
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Доступность =
			НаборКонстант.ИспользоватьВстроеннуюПочту;
		
		Элементы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.АвтоОтметкаНезаполненного =
			НаборКонстант.ИспользоватьВстроеннуюПочту;
		
	КонецЕсли;
	
	Элементы.ГруппаВстроеннаяПочта.Доступность = НаборКонстант.ИспользоватьВстроеннуюПочту;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументооборотИспользоватьОграничениеПравДоступаПриИзменении(Элемент)
	
	Если НаборКонстант.ДокументооборотИспользоватьОграничениеПравДоступа Тогда 
		
		Элементы.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа.Доступность = Истина;
		Элементы.ВключатьРуководителейВГруппыДоступаПодчиненных.Доступность = Истина;
		
		Если Не ЭтоФайловаяБаза Тогда
			НаборКонстант.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа = Истина;
		КонецЕсли;	
			
	Иначе	
		
		Элементы.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа.Доступность = Ложь;
		Элементы.ВключатьРуководителейВГруппыДоступаПодчиненных.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СокращатьПредставлениеАдресатовПриИзменении(Элемент)
	
	Элементы.ЧислоАдресатовДляКраткогоПредставления.Доступность = 
		НаборКонстант.СокращатьПредставлениеАдресатов
		И (Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
			ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке);
	
КонецПроцедуры

&НаКлиенте
Процедура СокращатьИнформациюОПисьмеПриОтветеПриИзменении(Элемент)
	
	Элементы.СокращатьПредставлениеАдресатов.Доступность = 
		Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
		ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке;
		
	Элементы.ЧислоАдресатовДляКраткогоПредставления.Доступность = 
		НаборКонстант.СокращатьПредставлениеАдресатов
		И (Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
			ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке);
	
КонецПроцедуры

&НаКлиенте
Процедура СокращатьИнформациюОПисьмеПриПересылкеПриИзменении(Элемент)
	
	Элементы.СокращатьПредставлениеАдресатов.Доступность = 
		Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
		ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке;
		
	Элементы.ЧислоАдресатовДляКраткогоПредставления.Доступность = 
		НаборКонстант.СокращатьПредставлениеАдресатов
		И (Не НаборКонстант.СокращатьИнформациюОПисьмеПриОтвете
			ИЛИ Не НаборКонстант.СокращатьИнформациюОПисьмеПриПересылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтветеПриИзменении(Элемент)
	
	Элементы.СимволЦитированияВПереписке.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
		
	Элементы.ВидЦитированияПриОтветеВФорматеHTML.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
		
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылкеПриИзменении(Элемент)
	
	Элементы.СимволЦитированияВПереписке.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
		
	Элементы.ВидЦитированияПриОтветеВФорматеHTML.Доступность = 
		НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете
		ИЛИ НаборКонстант.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУведомленияПриИзменении(Элемент)
	
	Элементы.НастройкаУведомлений.Доступность = НаборКонстант.ИспользоватьУведомления;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьРабочийКалендарьПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));	

	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и управление мероприятиями. 
			|Для работы необходимо заполнить календарь данными мероприятий.
			|При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРабочийКалендарьПриИзмененииПродолжение(Результат, Параметры) Экспорт 

	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		НаборКонстант.ИспользоватьРабочийКалендарь = Не НаборКонстант.ИспользоватьРабочийКалендарь;
	Иначе
		НаборКонстант.ИспользоватьНапоминанияПользователя = НаборКонстант.ИспользоватьРабочийКалендарь;
		Элементы.ИспользоватьНапоминанияПользователя.Доступность = НаборКонстант.ИспользоватьРабочийКалендарь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеМероприятиямиПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИспользоватьУправлениеМероприятиямиПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("Отказ", Ложь));	

	ВключенРабочийКалендарь = Не ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьРабочийКалендарь;
	ВключеноУправлениеМероприятиями = Не ИспользоватьУправлениеМероприятиями И НаборКонстант.ИспользоватьУправлениеМероприятиями;
	Если НаборКонстант.ИспользоватьРабочийКалендарь И НаборКонстант.ИспользоватьУправлениеМероприятиями
		И (ВключенРабочийКалендарь Или ВключеноУправлениеМероприятиями) Тогда
		
		Текст = НСтр("ru = 'Включено использование рабочего календаря и управление мероприятиями. 
			|Для работы необходимо заполнить календарь данными мероприятий.
			|При сохранении настроек будет произведено заполнение календаря. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеМероприятиямиПриИзмененииПродолжение(Результат, Параметры) Экспорт 

	Отказ = Параметры.Отказ;
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		НаборКонстант.ИспользоватьУправлениеМероприятиями = Не НаборКонстант.ИспользоватьУправлениеМероприятиями;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыПриИзменении(Элемент)
	
	ДоступностьДопНастроек = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ИспользоватьОбщиеДополнительныеЗначения.Доступность = ДоступностьДопНастроек;
	Элементы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Доступность = ДоступностьДопНастроек;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСВДПриИзменении(Элемент)
	
	Элементы.ИспользоватьОбменЭД.Доступность = НаборКонстант.ИспользоватьСВД;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБизнесПроцессыИЗадачиПриИзменении(Элемент)
	
	Элементы.ГруппаБизнесПроцессы.Доступность = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
	НаборКонстант.ИспользоватьПовторениеБизнесПроцессов = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// ОЧИСТКА УСТАРЕВШИХ HTML ПРЕДСТАВЛЕНИЙ СОДЕРЖАНИЯ ПИСЕМ

&НаКлиенте
Процедура АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисемПриИзменении(Элемент)
	
	Если АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисем Тогда
		
		Элементы.ДекорацияНадписьСрокУстаревания.Доступность = Истина;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.Доступность = Истина;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДекорацияНадписьСрокУстареванияДней.Доступность = Истина;
		Элементы.ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисем.Доступность = Истина;
		
	Иначе
		
		ПериодХраненияHTMLПредставленияСодержанияПисем = 0;
		ПериодХраненияHTMLПредставленияСодержанияПисемПриИзменении(Элемент);
		
		Элементы.ДекорацияНадписьСрокУстаревания.Доступность = Ложь;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.Доступность = Ложь;
		Элементы.ПериодХраненияHTMLПредставленияСодержанияПисем.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДекорацияНадписьСрокУстареванияДней.Доступность = Ложь;
		Элементы.ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисем.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодХраненияHTMLПредставленияСодержанияПисемПриИзменении(Элемент)
	
	Элементы.ДекорацияНадписьСрокУстареванияДней.Заголовок =
		ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(
			ПериодХраненияHTMLПредставленияСодержанияПисем);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнструкцииПриИзменении(Элемент)
	
	Элементы.ЗагрузитьТиповыеИнструкции.Доступность = НаборКонстант.ИспользоватьИнструкции;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаАвтоматическойЗагрузкиФайлов(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтоматическойЗагрузкиФайлов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭП(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьНастройкиШифрования", Истина);
	ПараметрыФормы.Вставить("ВыполнятьПроверкуЭПНаСервере", НаборКонстант.ВыполнятьПроверкуЭПНаСервере);
	ОткрытьФорму("Справочник.ПрофилиНастроекКриптографии.ФормаСписка", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПрокси(Команда)
	
	ОткрытьФорму("Общаяформа.ПараметрыПроксиСервера",,,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыИнтернетПоддержки(Команда)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьФормуНастроекПараметровПодключения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаспознавания(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.ОбщиеНастройкиРаспознавания",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТомаХраненияФайлов(Команда)
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСейчас(Команда)
	ОткрытьФорму("Обработка.ОчисткаУстаревшихВерсийФайлов.Форма.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТиповыеИнструкции(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаТиповыхИнструкций.Форма.Форма", , ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомлений(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаУведомлений",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисем(Команда)
	
	ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисемСервер();
	ПоказатьПредупреждение(, НСтр("ru = 'Очистка завершена.'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокОповещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";
	
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Для Каждого Пользователь Из МассивПользователей Цикл
		СписокОповещения.Добавить(Пользователь);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСписокОповещения()
	
	// стираем записи
	НаборЗаписей = РегистрыСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы.СоздатьНаборЗаписей();
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
	Для Каждого Строка Из СписокОповещения Цикл
		
		Пользователь = Строка.Значение;
		
		МенеджерЗаписи = РегистрыСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.Записать();

	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПоставитьВсеКартинкиВОчередьРаспознавания()
	УстановитьПривилегированныйРежим(Истина);
	
	ЧислоКартинок = 0;
	ИспользоватьImageMagickДляРаспознаванияPDF = РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.ТекущаяВерсияРасширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
			Объект.ЯзыкРаспознавания = "7"; // русско-английский
			Объект.Записать();
			ЧислоКартинок = ЧислоКартинок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Выборка.Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		Если РасширениеПоддерживается Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусРаспознаванияТекста = Перечисления.СтатусыРаспознаванияТекста.НужноРаспознать;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат ЧислоКартинок;
	
КонецФункции

&НаСервере
Процедура КорректировкаГрифовДоступа()
	
	Если Не НаборКонстант.ИспользоватьГрифыДоступа Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|ГДЕ
	|	ВходящиеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутренниеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|ГДЕ
	|	ВнутренниеДокументы.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Если НаборКонстант.ВестиУчетПоПроектам Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПроектОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроектОбъект.Заблокировать();
			ПроектОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			ПроектОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборКонстант.ИспользоватьУправлениеМероприятиями Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МероприятиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			МероприятиеОбъект.Заблокировать();
			МероприятиеОбъект.ГрифДоступа = НаборКонстант.ГрифДоступаПоУмолчанию;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантуИспользованияГрифовДоступа(ИспользоватьГрифыДоступы)
	
	Константы.ИспользоватьГрифыДоступа.Установить(ИспользоватьГрифыДоступы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантуИспользоватьГрафикиРаботы(ИспользоватьГрафикиРаботы)
	
	Константы.ИспользоватьГрафикиРаботы.Установить(ИспользоватьГрафикиРаботы);
	
КонецПроцедуры

&НаСервере
Функция СоздатьОрганизацию()
	
	НаименованиеПредприятия = НаборКонстант.НаименованиеПредприятия;
	РуководительПредприятия = НаборКонстант.РуководительПредприятия;
	РуководительСлужбыДОУ = НаборКонстант.РуководительСлужбыДОУ;
	РуководительАрхива = НаборКонстант.РуководительАрхива;
	
	ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда 
		ОрганизацияОбъект.Наименование = НаименованиеПредприятия;
	Иначе	
		ОрганизацияОбъект.Наименование = "Наша организация";
	КонецЕсли;	
	ОрганизацияОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОрганизацияОбъект.Записать();
	Организация = ОрганизацияОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(РуководительПредприятия) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
		МенеджерЗаписи.Пользователь = РуководительПредприятия;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РуководительСлужбыДОУ) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительСлужбыДОУ;
		МенеджерЗаписи.Пользователь = РуководительСлужбыДОУ;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РуководительАрхива) Тогда 
		МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Дата(2000, 1, 1);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительАрхива;
		МенеджерЗаписи.Пользователь = РуководительАрхива;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат Организация;	
	
КонецФункции	

&НаСервере
Функция МассивОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьОрганизацию(Организация)
	
	НачатьТранзакцию();
	Попытка
		МассивОМД = Новый Массив;
		МассивОМД.Добавить("Справочник.ВходящиеДокументы");
		МассивОМД.Добавить("Справочник.ИсходящиеДокументы");
		МассивОМД.Добавить("Справочник.ВнутренниеДокументы");
		МассивОМД.Добавить("Справочник.НоменклатураДел");
		МассивОМД.Добавить("Справочник.РазделыНоменклатурыДел");
		МассивОМД.Добавить("Документ.ПередачаДелВАрхив");
		МассивОМД.Добавить("Документ.УничтожениеДел");
		
		ТекстЗапроса = "";
		Для Каждого ИмяОМД Из МассивОМД Цикл
			
			УсловиеНаГруппу = "";
			Если Лев(ИмяОМД, 10) = "Справочник" Тогда
				МетаданныеСпр = Метаданные.Справочники[Сред(ИмяОМД, 12)];
				Если МетаданныеСпр.Иерархический И МетаданныеСпр.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Если МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда 
						УсловиеНаГруппу = " И Не ЭтоГруппа ";
					ИначеЕсли МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда 
						УсловиеНаГруппу = " И ЭтоГруппа ";
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса 
			+ " ВЫБРАТЬ Ссылка ИЗ " 
			+ ИмяОМД 
			+ " ГДЕ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) " + УсловиеНаГруппу + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЦикла;	
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
	
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Заблокировать();
			Объект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			Объект.Организация = Организация;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Функция НужноЗаполнитьОрганизацию()
	
	МассивОМД = Новый Массив;
	МассивОМД.Добавить("Справочник.ВходящиеДокументы");
	МассивОМД.Добавить("Справочник.ИсходящиеДокументы");
	МассивОМД.Добавить("Справочник.ВнутренниеДокументы");
	МассивОМД.Добавить("Справочник.НоменклатураДел");
	МассивОМД.Добавить("Справочник.РазделыНоменклатурыДел");
	МассивОМД.Добавить("Документ.ПередачаДелВАрхив");
	МассивОМД.Добавить("Документ.УничтожениеДел");
	
	ТекстЗапроса = "";
	Для Каждого ИмяОМД Из МассивОМД Цикл
		
		УсловиеНаГруппу = "";
		Если Лев(ИмяОМД, 10) = "Справочник" Тогда
			МетаданныеСпр = Метаданные.Справочники[Сред(ИмяОМД, 12)];
			Если МетаданныеСпр.Иерархический И МетаданныеСпр.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Если МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда 
					УсловиеНаГруппу = " И Не ЭтоГруппа ";
				ИначеЕсли МетаданныеСпр.Реквизиты.Организация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда 
					УсловиеНаГруппу = " И ЭтоГруппа ";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
		+ " ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ " 
		+ ИмяОМД 
		+ " ГДЕ Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) " + УсловиеНаГруппу + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьВопросДеятельности(ВопросДеятельности)
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВыборкаОбъект.Заблокировать();
			ВыборкаОбъект.ВопросДеятельности = ВопросДеятельности;
			ВыборкаОбъект.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Функция НужноЗаполнитьВопросДеятельности()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|ГДЕ
	|	ВходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|ГДЕ
	|	ВнутренниеДокументы.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция МассивВопросовДеятельности()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВопросыДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВопросыДеятельности КАК ВопросыДеятельности
	|ГДЕ
	|	Не ВопросыДеятельности.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Функция СоздатьВопросДеятельности(Наименование)
	
	ВопросДеятельностиОбъект = Справочники.ВопросыДеятельности.СоздатьЭлемент();
	ВопросДеятельностиОбъект.Наименование = Наименование;
	ВопросДеятельностиОбъект.Записать();
	Возврат ВопросДеятельностиОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция МассивВидовДокументов(ИмяСправочника)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + "
	|ГДЕ
	|	Не ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаСервере
Функция МассивВидовПроектов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПроектов";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция СоздатьВидДокумента(Наименование, ИмяСправочника)
	
	ВидДокументаОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
	ВидДокументаОбъект.Наименование = Наименование;
	ВидДокументаОбъект.Записать();
	
	МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;	
	Если ИмяСправочника = "ВидыВходящихДокументов" Тогда 
		МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
		МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
	ИначеЕсли ИмяСправочника = "ВидыИсходящихДокументов" Тогда 
		МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
		МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
	ИначеЕсли ИмяСправочника = "ВидыВнутреннихДокументов" Тогда 	
		МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
		МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
	КонецЕсли;	
	МенеджерЗаписи.Записать();
	
	Возврат ВидДокументаОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидДокумента(ВидДокумента, ИмяСправочника)
	
	НачатьТранзакцию();
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + "
		|ГДЕ
		|	ВидДокумента = &ПустойВидДокумента";
		
		Если ИмяСправочника = "ВходящиеДокументы" Тогда 
			ПустойВидДокумента = Справочники.ВидыВходящихДокументов.ПустаяСсылка();
		ИначеЕсли ИмяСправочника = "ИсходящиеДокументы" Тогда 
			ПустойВидДокумента = Справочники.ВидыИсходящихДокументов.ПустаяСсылка();
		ИначеЕсли ИмяСправочника = "ВнутренниеДокументы" Тогда 	
			ПустойВидДокумента = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		КонецЕсли;	
		Запрос.УстановитьПараметр("ПустойВидДокумента", ПустойВидДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			ДокументОбъект.ВидДокумента = ВидДокумента;
			ДокументОбъект.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Процедура ПереключитьУчетОбращенийГраждан()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВходящихДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
	|ГДЕ
	|	ВидыВходящихДокументов.ЯвляетсяОбращениемОтГраждан";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПереключитьИспользованиеНоменклатурыДел()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыВходящихДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
	|ГДЕ
	|	ВидыВходящихДокументов.ВестиУчетПоНоменклатуреДел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыИсходящихДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов
	|ГДЕ
	|	ВидыИсходящихДокументов.ВестиУчетПоНоменклатуреДел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыВнутреннихДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
	|ГДЕ
	|	ВидыВнутреннихДокументов.ВестиУчетПоНоменклатуреДел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Заблокировать();
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВизы()
	
	НачатьТранзакцию();
	Попытка
		
		// создание виз по задачам
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СогласованиеПредметы.Ссылка КАК БизнесПроцесс,
		|	СогласованиеПредметы.Предмет
		|ПОМЕСТИТЬ БизнесПроцессы
		|ИЗ
		|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
		|ГДЕ
		|	СогласованиеПредметы.РольПредмета = Значение(Перечисление.РолиПредметов.Основной)
		|	И (ТИПЗНАЧЕНИЯ(СогласованиеПредметы.Предмет) = ТИП(Справочник.ИсходящиеДокументы)
		|			ИЛИ ТИПЗНАЧЕНИЯ(СогласованиеПредметы.Предмет) = ТИП(Справочник.ВнутренниеДокументы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредметыЗадач.Ссылка КАК ЗадачаИсполнителя,
		|	ПредметыЗадач.Ссылка.БизнесПроцесс КАК БизнесПроцесс,
		|	ПредметыЗадач.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ПредметыЗадач.Предмет КАК Предмет,
		|	ПредметыЗадач.Ссылка.Исполнитель КАК Исполнитель,
		|	ПредметыЗадач.Ссылка.РольИсполнителя КАК РольИсполнителя,
		|	ПредметыЗадач.Ссылка.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ПредметыЗадач.Ссылка.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ПредметыЗадач.Ссылка.ДатаИсполнения КАК ДатаИсполнения,
		|	ПредметыЗадач.Ссылка.Автор КАК Автор,
		|	ПредметыЗадач.Ссылка.Дата КАК ЗадачаИсполнителяДата,
		|	ПредметыЗадач.Ссылка.БизнесПроцесс.Дата КАК БизнесПроцессДата,
		|	ВизыСогласования.Документ,
		|	ВизыСогласования.Источник,
		|	ИсторияСобытийЗадач.Пользователь КАК ПользовательСобытиеВыполнена
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ПредметыЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцессы КАК БизнесПроцессы
		|		ПО ПредметыЗадач.Ссылка.БизнесПроцесс = БизнесПроцессы.БизнесПроцесс
		|			И ПредметыЗадач.Предмет = БизнесПроцессы.Предмет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВизыСогласования КАК ВизыСогласования
		|		ПО (ВизыСогласования.Документ = ПредметыЗадач.Предмет)
		|			И (ВизыСогласования.Источник = ПредметыЗадач.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСобытийЗадач КАК ИсторияСобытийЗадач
		|		ПО (ИсторияСобытийЗадач.Задача = ПредметыЗадач.Ссылка)
		|			И (ИсторияСобытийЗадач.Событие = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийЗадач.Выполнена))
		|ГДЕ
		|	ПредметыЗадач.Ссылка.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Согласование.ТочкаМаршрута.Согласовать)
		|
		|УПОРЯДОЧИТЬ ПО
		|	БизнесПроцессДата,
		|	ЗадачаИсполнителяДата";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Задача = Выборка.ЗадачаИсполнителя;
			БизнесПроцесс = Выборка.БизнесПроцесс;
			Предмет = Выборка.Предмет;
			
			Если Не ЗначениеЗаполнено(Предмет) Тогда // не задан предмет
				Продолжить;
			КонецЕсли;	
			
			Если Выборка.Документ <> NULL Тогда // виза есть
				Продолжить;
			КонецЕсли;	
			
			// номер итерации задачи
			НомерИтерации = 0;
			НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;	
			
			
			ДатаПомещенияВИсторию = '00010101';
			ПоместилВИсторию = Неопределено;
			
			Если НомерИтерации = БизнесПроцесс.НомерИтерации Тогда 
				ПомещенаВИсторию = Ложь;
			Иначе
				ПомещенаВИсторию = Истина;
				
				НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(НомерИтерации, "НомерИтерации");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ДатаПомещенияВИсторию = НайденнаяСтрока.ЗадачаИсполнителя.ДатаИсполнения;
					ПоместилВИсторию = НайденнаяСтрока.ЗадачаИсполнителя.Исполнитель;
				КонецЕсли;	
			КонецЕсли;	
			
			
			РезультатСогласования = Неопределено;
			ДатаИсполнения = '00010101';
			УстановилРезультат = Неопределено;
			
			Если Задача.Выполнена Тогда 
				НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатСогласования = НайденнаяСтрока.РезультатСогласования;
					
					УстановилРезультат = Выборка.Исполнитель;
					Если ЗначениеЗаполнено(Выборка.ПользовательСобытиеВыполнена) И Выборка.ПользовательСобытиеВыполнена <> УстановилРезультат Тогда 
						УстановилРезультат = Выборка.ПользовательСобытиеВыполнена;
					КонецЕсли;
					
					ДатаИсполнения = Выборка.ДатаИсполнения;
				КонецЕсли;	
			КонецЕсли;
			
			Удалена = Выборка.ПометкаУдаления;
			Комментарий = Выборка.ЗадачаИсполнителя.РезультатВыполнения;
			
			// проверка активной визы
			Если Не ПомещенаВИсторию И Не Удалена Тогда 
				АктивнаяВиза = РаботаСВизамиСогласования.ПолучитьАктивнуюВизуПоИсполнителю(Предмет, Выборка);
				Если АктивнаяВиза <> Неопределено Тогда 
					
					АктивнаяВизаБизнесПроцесс = Неопределено;
					Если ТипЗнч(АктивнаяВиза.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
						АктивнаяВизаБизнесПроцесс = АктивнаяВиза.Источник;
					ИначеЕсли ТипЗнч(АктивнаяВиза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
						АктивнаяВизаБизнесПроцесс = АктивнаяВиза.Источник.БизнесПроцесс;
					КонецЕсли;	
					
					Если АктивнаяВизаБизнесПроцесс = Неопределено Или АктивнаяВизаБизнесПроцесс = БизнесПроцесс Тогда 
						Визы = Новый Массив;
						Визы.Добавить(АктивнаяВиза);
					Иначе
						Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(Предмет, АктивнаяВизаБизнесПроцесс);
					КонецЕсли;	
					
					РаботаСВизамиСогласования.ПоместитьВизыВИсторию(Визы);
				КонецЕсли;	
			КонецЕсли;
			
			// создание визы
			ОбъектВизы = Справочники.ВизыСогласования.СоздатьЭлемент();
			ОбъектВизы.Документ = Предмет;
			
			Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
				ОбъектВизы.Исполнитель = Выборка.Исполнитель;
			Иначе	
				ОбъектВизы.Исполнитель = Выборка.РольИсполнителя;
			КонецЕсли;
			
			ОбъектВизы.ОсновнойОбъектАдресации = Выборка.ОсновнойОбъектАдресации;
			ОбъектВизы.ДополнительныйОбъектАдресации = Выборка.ДополнительныйОбъектАдресации;
			
			ОбъектВизы.ПомещенаВИсторию = ПомещенаВИсторию;
			ОбъектВизы.ДатаПомещенияВИсторию = ДатаПомещенияВИсторию;
			
			ОбъектВизы.Удалена = Удалена;
			ОбъектВизы.РезультатСогласования = РезультатСогласования;
			ОбъектВизы.Комментарий = Комментарий;
			ОбъектВизы.ДатаИсполнения = ДатаИсполнения;
			
			ОбъектВизы.Автор = Выборка.Автор;
			ОбъектВизы.ПоместилВИсторию = ПоместилВИсторию;
			ОбъектВизы.УстановилРезультат = УстановилРезультат;
			ОбъектВизы.Источник = Задача.Ссылка;
			
			ОбъектВизы.Записать();
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРабочийКалендарьМероприятиями()
	
	НачатьТранзакцию();
	Попытка
		
		
		ВыборкаМероприятия = Справочники.Мероприятия.Выбрать();
		
		Пока ВыборкаМероприятия.Следующий() Цикл
			
			Если ВыборкаМероприятия.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			СостоянияЗаписейКалендаря = РаботаСРабочимКалендаремСервер.ПолучитьСостоянияЗаписейКалендаря(ВыборкаМероприятия.Ссылка);
			РаботаСРабочимКалендаремСервер.ОбновитьСостоянияЗаписейКалендаря(ВыборкаМероприятия.Ссылка, СостоянияЗаписейКалендаря);
			
			ТаблицаРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(ВыборкаМероприятия.Ссылка);
			РаботаСРабочимКалендаремСервер.ОбновитьРабочиеГруппыСвязанныхЗаписейКалендаря(ВыборкаМероприятия.Ссылка, ТаблицаРабочейГруппы);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НаборКонстант.ИспользоватьБизнесСобытия Тогда
		
		Если НаборКонстант.СрокХраненияБизнесСобытий = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'Укажите срок хранения бизнес-событий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.СрокХраненияБизнесСобытий", , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не НаборКонстант.ХранитьФайлыВТомахНаДиске Тогда
		
		Если МаксимальныйРазмерФайла > 1024 Тогда
			
			ТекстОшибки = НСтр("ru = 'Максимальный размер файла превышает 1024 Мб'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "МаксимальныйРазмерФайла", , Отказ);
			
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если НаборКонстант.УдалятьНеактивныеВерсии Тогда	
		
		ПутьСохраненияВерсий = "";
		
		ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийWindows;
		Иначе	
			ПутьСохраненияВерсий = НаборКонстант.ПутьСохраненияУдаляемыхВерсийLinux;
		КонецЕсли;	
		
		Если ПустаяСтрока(ПутьСохраненияВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнен путь сохранения очищаемых версий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			Если Не ПустаяСтрока(ПутьСохраненияВерсий) 
				И (Лев(ПутьСохраненияВерсий, 2) <> "\\" 
				ИЛИ Найти(ПутьСохраненияВерсий, ":") <> 0) Тогда
				
				ТекстОшибки = НСтр("ru = 'Путь сохранения очищаемых версий должен быть в формате UNC (\\servername\resource)'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПутьСохраненияУдаляемыхВерсий", , Отказ);
				
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ПолныйПутьТома = "";
			
			ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
			ИмяКаталогаТестовое = ПутьСохраненияВерсий;
			ИмяКаталогаТестовое = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ИмяКаталогаТестовое, ТипПлатформыСервера);
			ИмяКаталогаТестовое = ИмяКаталогаТестовое + "ПроверкаДоступа\";
			СоздатьКаталог(ИмяКаталогаТестовое);
			УдалитьФайлы(ИмяКаталогаТестовое);
		Исключение
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Путь к каталогу сохранения очищаемых версий некорректен. Возможно учетная запись, от лица которой работает сервер 1С:Предприятия, не имеет прав доступа к каталогу:
				|
				|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				"ПутьСохраненияУдаляемыхВерсий",, Отказ);
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан ответственный за очистку неактивных версий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.СрокХраненияНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан срок хранения неактивных версий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.СрокХраненияНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не указан тип оповещения ответственного за удаление неактивных версий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий", , Отказ);
			
		КонецЕсли;
		
		Если НаборКонстант.ТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий = Перечисления.ТипыОповещения.Ознакомление Тогда
			Если Не ЗначениеЗаполнено(НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена папка для хранения отчетов об удалении'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ПапкаДляХраненияОтчетовОбУдалении", , Отказ);
			КонецЕсли;
		Иначе // email
			ПредставлениеПочтовогоАдреса = РаботаСФайламиВызовСервера.ПолучитьАдресДляОтправкиУведомленияПользователю(
				НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий);
			Если Не ЗначениеЗаполнено(ПредставлениеПочтовогоАдреса) Тогда
				ТекстОшибки = НСтр("ru = 'У ответственного за удаление неактивных версий не заполнен адрес электронной почты'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОтветственныйЗаУдалениеНеактивныхВерсий", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаборКонстант.ИспользоватьПротоколированиеРаботыПользователей Тогда
		
		Если НаборКонстант.ИспользоватьПротоколированиеРаботыПользователей
			И НаборКонстант.СрокХраненияПротоколаРаботыПользователей <> 0 Тогда
			
			КаталогСохраненияПротокола = "";
			
			ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
			
			Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 Или ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
				КаталогСохраненияПротокола = НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейWindows;
			Иначе	
				КаталогСохраненияПротокола = НаборКонстант.КаталогСохраненияКопииПротоколаРаботыПользователейLinux;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(КаталогСохраненияПротокола) Тогда
				ТекстОшибки = НСтр("ru='Не указан каталог сохранения копии протокола работы пользователей'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "КаталогСохраненияКопииПротоколаРаботыПользователей");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
			Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
				
				ИмяКаталога = КаталогСохраненияПротокола;
				
				Если Не ПустаяСтрока(ИмяКаталога) И (Лев(ИмяКаталога, 2) <> "\\" ИЛИ Найти(ИмяКаталога, ":") <> 0) Тогда
					ТекстОшибки = НСтр("ru = 'Путь каталог сохранения копии протокола работы пользователей должен быть в формате UNC (\\servername\resource)'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "КаталогСохраненияКопииПротоколаРаботыПользователей");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				ПолныйПутьТома = "";
				
				ТипПлатформыСервера = ФайловыеФункции.ТипПлатформыСервера();
				ИмяКаталогаТестовое = КаталогСохраненияПротокола;
				ИмяКаталогаТестовое = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ИмяКаталогаТестовое, ТипПлатформыСервера);
				ИмяКаталогаТестовое = ИмяКаталогаТестовое + "ПроверкаДоступа\";
				СоздатьКаталог(ИмяКаталогаТестовое);
				УдалитьФайлы(ИмяКаталогаТестовое);
			Исключение
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Путь к каталогу хранения протоколов некорректен. Возможно учетная запись, от лица которой работает сервер 1С:Предприятия, не имеет прав доступа к каталогу:
					|
					|%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , 
					"КаталогСохраненияКопииПротоколаРаботыПользователей", , Отказ);
				
			КонецПопытки;
				
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НаборКонстант.ВестиУчетПоПроектам Тогда 
		Если Не ЗначениеЗаполнено(НаборКонстант.ОсновнаяЕдиницаТрудозатрат) Тогда 
			ТекстОшибки = НСтр("ru = 'Поле ""Основная единица трудозатрат"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОсновнаяЕдиницаТрудозатрат", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НаборКонстант.ОсновнаяЕдиницаДлительности) Тогда 
			ТекстОшибки = НСтр("ru = 'Поле ""Основная единица длительности"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборКонстант.ОсновнаяЕдиницаДлительности", , Отказ);
		КонецЕсли;
	КонецЕсли;	
	
	Если НаборКонстант.ИспользоватьВстроеннуюПочту И Не ЭтоФайловаяБаза Тогда
		
		СообщениеОбОшибке = "";
		
		Если Не ПроверитьИУстановитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем(
			ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем,
			Истина,
			Ложь,
			СообщениеОбОшибке) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,,
				"ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем",,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаборКонстант.ИспользоватьВстроеннуюПочту
		И АвтоматическиОчищатьУстаревшиеHTMLПредставленияСодержанияПисем
		И ПериодХраненияHTMLПредставленияСодержанияПисем = 0 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Поле ""Срок устаревания"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ПериодХраненияHTMLПредставленияСодержанияПисем",,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьФормуИПолучитьЕстьТомаХраненияФайлов()
	
	Записать();
	Возврат ФайловыеФункции.ЕстьТомаХраненияФайлов();
	
КонецФункции

Функция СформироватьПутьWindowsLinux(ПолныйПутьWindows, ПолныйПутьLinux)
	
	СтрокаПути = "";
	
	Если ЗначениеЗаполнено(ПолныйПутьWindows) Тогда
		СтрокаПути = СтрокаПути + ПолныйПутьWindows;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПолныйПутьLinux) Тогда
		
		Если ЗначениеЗаполнено(СтрокаПути) Тогда
			СтрокаПути = СтрокаПути + ";";
		КонецЕсли;	
		
		СтрокаПути = СтрокаПути + ПолныйПутьLinux;
	КонецЕсли;	
	
	Возврат СтрокаПути;
	
КонецФункции	

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ

&НаКлиенте
Процедура ПользовательРегламентногоЗаданияПолучениеИОтправкаПисемПриИзменении(Элемент)
	
	СообщениеОбОшибке = "";
	Если Не ПроверитьИУстановитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем(
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем, Истина, Истина, СообщениеОбОшибке) Тогда
		
		ПоказатьПредупреждение(, СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем()
	
	Пользователь = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
	
	Возврат Пользователь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьИУстановитьПользователяРегламентногоЗаданияПолучениеИОтправкаПисем(
	Пользователь,
	ТолькоПроверить,
	РазрешатьНезаполненноеЗначение,
	СообщениеОбОшибке)
	
	Результат = Истина;
	СообщениеОбОшибке = "";
	ИмяПользователя = "";
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		
		Пользователь = Неопределено;
		
		Если Не РазрешатьНезаполненноеЗначение Тогда
			
			СообщениеОбОшибке =
				НСтр("ru = 'Не выбран пользователь регламентного задания ""Получение и отправка писем"".'");
			
			Результат = Ложь;
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеПользователя = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Пользователь, "ПометкаУдаления, Недействителен");
		
		Если ДанныеПользователя.ПометкаУдаления Тогда
			
			СообщениеОбОшибке =
				НСтр("ru = 'Выбранный пользователь регламентного задания ""Получение и отправка писем"" помечен на удаление.
					|Необходимо выбрать не помеченного на удаление пользователя.'");
			
			Пользователь = Неопределено;
			Результат = Ложь;
			
		ИначеЕсли ДанныеПользователя.Недействителен Тогда
			
			СообщениеОбОшибке =
				НСтр("ru = 'Выбранный пользователь регламентного задания ""Получение и отправка писем"" недействителен.
					|Необходимо выбрать действительного пользователя.'");
			
			Пользователь = Неопределено;
			Результат = Ложь;
			
		КонецЕсли;
		
		ИдентификаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Пользователь, "ИдентификаторПользователяИБ");
		
		Если ПустаяСтрока(ИдентификаторПользователяИБ) Тогда
			
			СообщениеОбОшибке =
				НСтр("ru = 'Для выбранного пользователя регламентного задания ""Получение и отправка писем""
					|не указан идентификатор пользователь ИБ.'");
			
			Пользователь = Неопределено;
			Результат = Ложь;
			
		Иначе
			
			ПользовательИБ =
				ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
			
			Если ПользовательИБ = Неопределено Тогда
				
				СообщениеОбОшибке = НСтр("ru = 'Для выбранного пользователя регламентного задания ""Получение и отправка писем""
					|не найден соответствующий пользователь ИБ по идентификатору.'");
				
				Пользователь = Неопределено;
				Результат = Ложь;
				
			Иначе
				
				Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
					
					СообщениеОбОшибке = НСтр("ru = 'Выбранный пользователь регламентного задания ""Получение и отправка писем"" не обладает полными правами.
						|Необходимо указать полноправного пользователя.'");
					
					Пользователь = Неопределено;
					Результат = Ложь;
					
				Иначе
					
					ИмяПользователя = ПользовательИБ.Имя;
					Результат = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТолькоПроверить Тогда
		
		Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(Пользователь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьСтарыеЗаписиHTMLПредставленияСодержанияПисемСервер()
	
	ГраницаОчисткиЗаписей = НачалоДня(ТекущаяДатаСеанса())
		- ПериодХраненияHTMLПредставленияСодержанияПисем * 24 * 3600;
	
	РегистрыСведений.HTMLПредставленияСодержанияПисем.ОчиститьУстаревшиеЗаписи(ГраницаОчисткиЗаписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоОрганизациямПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьУчетПоОрганизациям 
		И РаботаСЭП.СуществуютПодписиКДокументам() Тогда
		
		Текст = НСтр("ru = 'В информационной базе есть документы, подписанные электронной подписью.
		|При включении учета по организациям электронные подписи таких документов будут удалены.
		|Включить учет по организациям?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИспользоватьУчетПоОрганизациямПриИзмененииПродолжение",
			ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоОрганизациямПриИзмененииПродолжение(Результат, Параметры)Экспорт  
	
	 НаборКонстант.ИспользоватьУчетПоОрганизациям = Результат = КодВозвратаДиалога.Да;

КонецПроцедуры

#КонецОбласти
