
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач = РаботаСБизнесПроцессами.ПолучитьИспользованиеДатыИВремениВСрокахЗадач();
	Элементы.ДеревоЗадачСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.ДеревоЗадачДатаВыполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.СписокАктивныхЗадачСрокИсполнения.Формат = 
		?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	НастройкиОтображения = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ЗначениеЗаполнено(НастройкиОтображения) Тогда
		ПоказыватьТолькоАктивныеПроцессы = 
			НастройкиОтображения.Получить("ПоказыватьТолькоАктивныеПроцессы");
	КонецЕсли;
	
	ЗаполнитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		ИЛИ ИмяСобытия = "БизнесПроцессИзменен" Тогда
		
		ЗаполнитьДеревоЗадач();
		Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьДеревоЗадач();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) Тогда 
			ОбновитьДеревоЗадач();
		КонецЕсли;	
	КонецЕсли;

	Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьТолькоАктивныеПроцессыПриИзменении(Элемент)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрокаВДереве = Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		СтрокаТаблицы = ДеревоЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущийЭлемент = Элементы.СписокАктивныхЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Элементы.СписокАктивныхЗадач.ТекущаяСтрока;
		СтрокаТаблицы = СписокАктивныхЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуСпискаАктивныхЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрокаВСпискеАктивныхЗадач = Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОткрытьЗадачу(Команда)
	
	ОткрытьЗадачуСпискаАктивныхЗадач();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с флагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	УстановитьФлаги(
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	УстановитьФлаги(
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг, ИмяТаблицы)
	
	ВыделенныеСтроки = Новый Массив;
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	
	МассивВыделенныхСтрок = ТаблицаФормы.ВыделенныеСтроки;
	Для Каждого Стр Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(Стр);
		ВыделенныеСтроки.Добавить(СтрокаДерева.Ссылка);
	КонецЦикла;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокАктивныхЗадач(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ТипЗнч(ЭлементДерева.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И НЕ ЭлементДерева.Выполнена
			И ЭлементДерева.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			НоваяСтрока = СписокАктивныхЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			
		КонецЕсли;
		
		ЗаполнитьСписокАктивныхЗадач(ЭлементДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	
	Предметы = Новый Массив;
	Предметы.Добавить(Параметры.Предмет);
	
	// Заполнение дополнительных предметов, которые следует отображать в дереве задач
	Если ТипЗнч(Параметры.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		// Для мероприятия следует отображать задачи по программе и по протоколу
		РеквизитыМероприятия = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			Параметры.Предмет, "МатериалПрограмма, МатериалПротокол");
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПрограмма) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПрограмма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПротокол) Тогда 
			Предметы.Добавить(РеквизитыМероприятия.МатериалПротокол);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры.Предмет) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		// Для темы обсуждения следует отображать задачи по всем сообщениям данной темы
		СообщенияТемы = РаботаСОбсуждениями.ПолучитьСписокСообщенийТемы(Параметры.Предмет);
		Для Каждого Сообщение Из СообщенияТемы Цикл
			Предметы.Добавить(Сообщение);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		ДобавитьЗадачиПоПредмету(Дерево, Предмет); // Добавление независимых процессов в дерево.
		ДобавитьЗадачиПоПредмету(Дерево, Предмет, Ложь) // Добавление зависимых процессов в дерево.
														// Ранее добавленные процессы не добавляются.
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоЗадач);
	
	УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы());
	
	СписокАктивныхЗадач.Очистить();
	ЗаполнитьСписокАктивныхЗадач(ДеревоЗадач.ПолучитьЭлементы());
	СписокАктивныхЗадач.Сортировать("Ссылка Возр");
	УстановитьТекущуюСтрокуВСпискеАктивныхЗадач();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку(ЭлементыДерева)
	
	Если Элементы.Количество() > 0 Тогда
		Для каждого Эл Из ЭлементыДерева Цикл
			Если Эл.Ссылка = ТекущаяСтрокаВДереве Тогда
				Элементы.ДеревоЗадач.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
				Возврат;
			Иначе	
				УстановитьТекущуюСтроку(Эл.ПолучитьЭлементы());
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуВСпискеАктивныхЗадач()
	
	Для Каждого ЗадачаСтрока Из СписокАктивныхЗадач Цикл
		
		Если ЗадачаСтрока.Ссылка = ТекущаяСтрокаВСпискеАктивныхЗадач Тогда
			Элементы.СписокАктивныхЗадач.ТекущаяСтрока = ЗадачаСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПоПредмету(Дерево, Предмет, ТолькоНезависимыеПроцессы = Истина)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	УсловиеОтбора = "БизнесПроцессы.Предметы.Предмет = &Предмет";
	
	Если ТолькоНезависимыеПроцессы Тогда
		УсловиеОтбора = УсловиеОтбора + "
			|	И БизнесПроцессы.ВедущаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
			|	И БизнесПроцессы.ГлавнаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	Иначе
		УсловиеОтбора = УсловиеОтбора + "
			|	И (БизнесПроцессы.ВедущаяЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
			|	ИЛИ БизнесПроцессы.ГлавнаяЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка))";
	КонецЕсли;
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если ТекстЗапроса = "" Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование КАК Наименование,
			|	БизнесПроцессы.Завершен КАК Завершен,
			|	БизнесПроцессы.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
			|			ТОГДА 2
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.СтартОтменен)
			|			ТОГДА 3
			|		ИНАЧЕ -1	
			|	КОНЕЦ КАК СостояниеКартинка,						
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА 4
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА 3
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА 2
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения,
			|	ВЫБОР
			|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
			|		ТОГДА ВЫБОР
			|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|						ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|					ТОГДА 1
			|				ИНАЧЕ 3
			|			КОНЕЦ
			|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
			|		ТОГДА 4
			|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
			|			ТОГДА ВЫБОР
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|						ТОГДА 5
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
			|						ТОГДА 8
			|					ИНАЧЕ 6
			|				КОНЕЦ
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
			|			ТОГДА 7
			|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
			|			ТОГДА ВЫБОР
			|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
			|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
			|						ТОГДА 9
			|					ИНАЧЕ 10
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|КОНЕЦ КАК СостояниеКонтроля
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
			|		ПО БизнесПроцессы.Ссылка = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
			|		ПО БизнесПроцессы.Ссылка = КешИнформацииОбОбъектах.Объект
			|ГДЕ
			|	%УсловиеОтбора%
			|	И БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
			|	И (&ПоказыватьВыполненные = ИСТИНА
			|			ИЛИ БизнесПроцессы.Завершен = ЛОЖЬ)
			|   И (&ПоказыватьПрерванные 
			|		ИЛИ БизнесПроцессы.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
			|	И (&ОтображатьОтложенныеПроцессы 
			|		ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
			|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние ЕСТЬ NULL)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбора%", УсловиеОтбора);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		
	КонецЦикла;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));

	Если ПоказыватьТолькоАктивныеПроцессы Тогда
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Ложь);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Ложь);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Истина);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Истина);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеВДанныеФормы(Дерево, ДеревоЗадач);
		Индекс = -1;
		НайтиПроцессВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), ВыборкаДетальныеЗаписи.Ссылка, Индекс);
		Если Индекс > -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Дерево.Строки.Добавить();
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
		Строка.СостояниеКартинка = ВыборкаДетальныеЗаписи.СостояниеКартинка;
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
		Строка.СостояниеКонтроля = ВыборкаДетальныеЗаписи.СостояниеКонтроля;
		Строка.ПринятаКИсполнению = Истина;
		Строка.Тип = 0;
		
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Строка);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка, СтрокаРодитель)
	
	Запрос = Новый Запрос;
		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БизнесПроцессы.БизнесПроцесс КАК Ссылка,
		|	БизнесПроцессы.Наименование,
		|	ВЫБОР
		|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
		|			ТОГДА 2
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.СтартОтменен)
		|			ТОГДА 3
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 4
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 3
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 2
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	БизнесПроцессы.Завершен КАК Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК БизнесПроцессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО БизнесПроцессы.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
		|		ПО БизнесПроцессы.БизнесПроцесс = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО БизнесПроцессы.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	(БизнесПроцессы.ГлавнаяЗадача = &Задача
		|			ИЛИ БизнесПроцессы.ВедущаяЗадача = &Задача)
		|	И БизнесПроцессы.ПометкаУдаления = ЛОЖЬ
		|	И (&ПоказыватьВыполненные = ИСТИНА
		|			ИЛИ БизнесПроцессы.Завершен = ЛОЖЬ)
		|	И (&ПоказыватьПрерванные
		|			ИЛИ БизнесПроцессы.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
		|	И (&ОтображатьОтложенныеПроцессы
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние ЕСТЬ NULL )";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Если ПоказыватьТолькоАктивныеПроцессы Тогда
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Ложь);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Ложь);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Истина);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Истина);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Истина);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = СтрокаРодитель.Строки.Добавить();
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
		Строка.СостояниеКартинка = ВыборкаДетальныеЗаписи.СостояниеКартинка;
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
		Строка.ПринятаКИсполнению = Истина;
		Строка.СостояниеКонтроля = ВыборкаДетальныеЗаписи.СостояниеКонтроля;
		Строка.Тип = 0;
		
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Строка);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, СтрокаРодитель)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	Если ПоказыватьТолькоАктивныеПроцессы Тогда
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Ложь);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Ложь);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Истина);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Истина);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Процесс
		|ПОМЕСТИТЬ ЗадачиСПроцессами
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО (ДанныеБизнесПроцессов.ВедущаяЗадача = ЗадачаИсполнителя.Ссылка)
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И (&ПоказыватьВыполненные = ИСТИНА
		|			ИЛИ ЗадачаИсполнителя.БизнесПроцесс.Завершен = ЛОЖЬ)
		|	И (&ПоказыватьПрерванные
		|			ИЛИ ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО (ДанныеБизнесПроцессов.ГлавнаяЗадача = ЗадачаИсполнителя.Ссылка)
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И (&ПоказыватьВыполненные = ИСТИНА
		|			ИЛИ ЗадачаИсполнителя.БизнесПроцесс.Завершен = ЛОЖЬ)
		|	И (&ПоказыватьПрерванные
		|			ИЛИ ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиСПроцессами.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиСПроцессами.Процесс) КАК КоличествоПроцессов
		|ПОМЕСТИТЬ ЗадачиСКоличествомПроцессов
		|ИЗ
		|	ЗадачиСПроцессами КАК ЗадачиСПроцессами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
		|		ПО ЗадачиСПроцессами.Процесс = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	(&ОтображатьОтложенныеПроцессы
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиСПроцессами.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗадачиСПроцессами.Ссылка";
	Запрос.Выполнить();
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиСКоличествомПроцессов.Ссылка,
		|	ЗадачиСКоличествомПроцессов.КоличествоПроцессов,
		|	ЕСТЬNULL(ДанныеБизнесПроцессов.БизнесПроцесс, НЕОПРЕДЕЛЕНО) КАК ВедомыйБизнесПроцесс
		|ПОМЕСТИТЬ ЗадачиСКоличествомПроцессовИВедомымиПроцессами
		|ИЗ
		|	ЗадачиСКоличествомПроцессов КАК ЗадачиСКоличествомПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачиСКоличествомПроцессов.Ссылка = ДанныеБизнесПроцессов.ВедущаяЗадача";
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Наименование,
		|	Задачи.Исполнитель,
		|	Задачи.ОсновнойОбъектАдресации,
		|	Задачи.ДополнительныйОбъектАдресации,
		|	Задачи.РольИсполнителя,
		|	Задачи.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА Задачи.Выполнена
		|			ТОГДА Задачи.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	Задачи.Выполнена,
		|	Задачи.РезультатВыполнения,
		|	Задачи.ПринятаКИсполнению,
		|	Задачи.Автор,
		|	ВЫБОР
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 4
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 3
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 2
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Задачи.Выполнена = ИСТИНА
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения,
		|	ЗадачиСКоличествомПроцессовИВедомымиПроцессами.ВедомыйБизнесПроцесс КАК ВедомыйБизнесПроцесс,
		|	ЗадачиСКоличествомПроцессовИВедомымиПроцессами.КоличествоПроцессов КАК КоличествоПроцессов,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ВЫБОР
		|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|		ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|		ТОГДА 4
		|	КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|КОНЕЦ КАК СостояниеКонтроля,
		|	Задачи.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса
		|ИЗ
		|	ЗадачиСКоличествомПроцессовИВедомымиПроцессами КАК ЗадачиСКоличествомПроцессовИВедомымиПроцессами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ЗадачиСКоличествомПроцессовИВедомымиПроцессами.Ссылка = Задачи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО (Задачи.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиСКоличествомПроцессовИВедомымиПроцессами.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиСКоличествомПроцессовИВедомымиПроцессами.Ссылка = КешИнформацииОбОбъектах.Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ВедомыйБизнесПроцесс <> Неопределено
			И ВыборкаДетальныеЗаписи.КоличествоПроцессов = 0 Тогда
			
			Продолжить;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.ВедомыйБизнесПроцесс = Неопределено Тогда
			
			Если НЕ (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Исполнитель)
				ИЛИ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РольИсполнителя)) Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = СтрокаРодитель.Строки.Добавить();
			Строка.НомерФлага = ВыборкаДетальныеЗаписи.НомерФлага;
			Строка.Флаг = ВыборкаДетальныеЗаписи.Флаг;
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.СостояниеКартинка = ВыборкаДетальныеЗаписи.СостояниеКартинка;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
			Строка.ДатаВыполнения = ВыборкаДетальныеЗаписи.ДатаВыполнения;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Выполнена;
			Строка.РезультатВыполнения = ВыборкаДетальныеЗаписи.РезультатВыполнения;
			Строка.ПринятаКИсполнению = ВыборкаДетальныеЗаписи.ПринятаКИсполнению;
			Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
			Строка.Просрочена = Ложь;
			Строка.Тип = 1;
			Строка.Автор = ВыборкаДетальныеЗаписи.Автор;
			Строка.СостояниеБизнесПроцесса = ВыборкаДетальныеЗаписи.СостояниеБизнесПроцесса;
			Строка.СостояниеКонтроля = ВыборкаДетальныеЗаписи.СостояниеКонтроля;
			
			Если ВыборкаДетальныеЗаписи.СрокИсполнения <> '00010101000000' 
				И ВыборкаДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса() Тогда
				Строка.Просрочена = Истина;
			КонецЕсли;				
			
			Если ВыборкаДетальныеЗаписи.Исполнитель.Пустая() Тогда
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.РольИсполнителя;
				Строка.ОсновнойОбъектАдресации = ВыборкаДетальныеЗаписи.ОсновнойОбъектАдресации;
				Строка.ДополнительныйОбъектАдресации = ВыборкаДетальныеЗаписи.ДополнительныйОбъектАдресации;
			Иначе	
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
			КонецЕсли;	
			
			Если ВыборкаДетальныеЗаписи.КоличествоПроцессов > 0 Тогда
				ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Строка);
			КонецЕсли;
			
		Иначе
			
			ВедомыйБизнесПроцесс = Новый Структура();
			ПолучитьВедомыйПроцесс(ВыборкаДетальныеЗаписи.ВедомыйБизнесПроцесс, ВедомыйБизнесПроцесс);
			
			Если ПоказыватьТолькоАктивныеПроцессы 
				И (ВедомыйБизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
						ИЛИ ВедомыйБизнесПроцесс.СостояниеОтложенногоБизнесПроцесса = Перечисления.СостоянияОтложенныхПроцессов.ГотовКСтарту
						ИЛИ ВедомыйБизнесПроцесс.Завершен = Истина)Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = СтрокаРодитель.Строки.Добавить();
			Строка.НомерФлага = ВыборкаДетальныеЗаписи.НомерФлага;
			Строка.Флаг = ВыборкаДетальныеЗаписи.Флаг;
			
			Строка.Наименование = ВедомыйБизнесПроцесс.Наименование;
			Строка.Важность = ВедомыйБизнесПроцесс.Важность;
			Строка.СостояниеКартинка = ВедомыйБизнесПроцесс.СостояниеКартинка;
			Строка.Ссылка = ВедомыйБизнесПроцесс.Ссылка;
			Строка.Выполнена = ВедомыйБизнесПроцесс.Завершен;
			Строка.РезультатЗавершения = ВедомыйБизнесПроцесс.РезультатЗавершения;
			Строка.ПринятаКИсполнению = Истина;
			Строка.Тип = 0;
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, Строка.Ссылка, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВедомыйПроцесс(БизнесПроцесс, ДанныеВедомогоПроцесса)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БизнесПроцессы.Ссылка,
		|	БизнесПроцессы.Наименование,
		|	БизнесПроцессы.Завершен,
		|	ВЫБОР
		|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
		|			ТОГДА 1
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
		|			ТОГДА 2
		|		КОГДА НЕ БизнесПроцессы.Стартован
		|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.СтартОтменен)
		|			ТОГДА 3
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 4
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 3
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 2
		|		ИНАЧЕ 			
		|			ВЫБОР
		|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения,
		|	БизнесПроцессы.Состояние,
		|	НастройкаОтложенногоСтартаБизнесПроцессов.Состояние КАК СостояниеОтложенногоБизнесПроцесса
		|ИЗ
		|	%БизнесПроцесс% КАК БизнесПроцессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
		|		ПО БизнесПроцессы.Ссылка = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	БизнесПроцессы.Ссылка = &БизнесПроцесс";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", БизнесПроцесс.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВедомогоПроцесса.Вставить("Наименование", Выборка.Наименование);
		ДанныеВедомогоПроцесса.Вставить("Важность", Выборка.Важность);
		ДанныеВедомогоПроцесса.Вставить("СостояниеКартинка", Выборка.СостояниеКартинка);
		ДанныеВедомогоПроцесса.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеВедомогоПроцесса.Вставить("Завершен", Выборка.Завершен);
		ДанныеВедомогоПроцесса.Вставить("РезультатЗавершения", Выборка.РезультатЗавершения);
		ДанныеВедомогоПроцесса.Вставить("Состояние", Выборка.Состояние);
		ДанныеВедомогоПроцесса.Вставить("СостояниеОтложенногоБизнесПроцесса", Выборка.СостояниеОтложенногоБизнесПроцесса);
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура НайтиПроцессВДеревеПоСсылке(КоллекцияПроцессовОдногоУровня, ИскомыйПроцесс, Индекс) Экспорт
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из КоллекцияПроцессовОдногоУровня Цикл
		Если Строка.Ссылка = ИскомыйПроцесс Тогда
			Индекс = Строка.ПолучитьИдентификатор();
		Иначе
			НайтиПроцессВДеревеПоСсылке(Строка.ПолучитьЭлементы(), ИскомыйПроцесс, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЗадач()
	
	ЗаполнитьДеревоЗадач();
	Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюСтрокуДереваЗадач()
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		Иначе	
			ПоказатьЗначение(, Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

// Открывает текущую задачу списка СписокАктивныхЗадач
//
&НаКлиенте
Процедура ОткрытьЗадачуСпискаАктивныхЗадач()
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти
