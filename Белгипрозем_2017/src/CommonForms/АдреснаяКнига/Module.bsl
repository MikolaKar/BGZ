////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Перем ТекущийЭлементФормы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ЗаполнятьКарточкуПользователя = Истина;
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		ЗаполнятьКарточкуПользователя = Ложь;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	
	Если МножественныйВыбор Тогда
		Заголовок = НСтр("ru='Подбор адресатов'");
	КонецЕсли;	
	
	Если Параметры.Свойство("ТекущийКонтакт") Тогда
		ТекущийКонтакт = Параметры.ТекущийКонтакт;
	КонецЕсли;	
	
	Если Параметры.Свойство("РежимСправочникСотрудников") Тогда
		РежимСправочникСотрудников = Параметры.РежимСправочникСотрудников;
	КонецЕсли;	
	
	ЗаполнитьТаблицуПолучателей();
	УстановитьГруппуПоУмолчанию();
	
	Если Не МножественныйВыбор Тогда
		Элементы.ГруппаПраваяКолонка.Видимость = Ложь;
	КонецЕсли;	
	
	СохранениеВводимыхЗначений.ЗагрузитьСписокВыбора(ЭтаФорма, "СтрокаПоиска");
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьИспользоватьПолнотекстовыйПоиск();
	
	Если Не ИспользоватьПолнотекстовыйПоиск Или ЭтоФайловаяБаза Тогда
		
		Элементы.СтраницаПоиск.Видимость = Ложь;
		Элементы.ОткрытьПоиск.Видимость = Ложь;
		
	Иначе
		
		Если ЧислоОбъектовПоискаПревышаетМаксимум() Тогда
			Элементы.СтраницаПоиск.Видимость = Ложь;
			Элементы.ОткрытьПоиск.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	СписокНичегоНеНайдено.Добавить(НСтр("ru='Ничего не найдено'"));
	
	НастроитьВидПросмотра();
	
	Если РольДоступна("ПолныеПрава") Тогда
		Элементы.ОткрытьМоиКонтакты.Видимость = Ложь;
		Элементы.СтраницаМоиКонтакты.Видимость = Ложь;
		
		Элементы.ДобавитьВМоиКонтактыПользователя.Видимость = Ложь;
		Элементы.ДеревоПользователейКонтекстноеМенюДобавитьВМоиКонтакты.Видимость = Ложь;
		Элементы.ПользователиАдресаКонтекстноеМенюДобавитьВМоиКонтактыПользователиАдреса.Видимость = Ложь;

		Элементы.ДобавитьВМоиКонтактыКорреспондента.Видимость = Ложь;
		Элементы.КорреспондентыКонтекстноеМенюДобавитьВМоиКонтактыКорреспондента.Видимость = Ложь;
		Элементы.КорреспондентыАдресаКонтекстноеМенюДобавитьВМоиКонтактыКонтактноеЛицо.Видимость = Ложь;

		Элементы.ДобавитьВМоиКонтактыФизлицо.Видимость = Ложь;
		Элементы.ФизлицаКонтекстноеМенюДобавитьВМоиКонтактыФизлицо.Видимость = Ложь;

		Элементы.ДобавитьВМоиКонтактыЛичныеАдресаты.Видимость = Ложь;
		Элементы.ДеревоКонтактовКонтекстноеМенюДобавитьВМоиКонтактыЛичныеАдресаты.Видимость = Ложь;

		Элементы.ДобавитьВМоиКонтактыПоиск.Видимость = Ложь;
		Элементы.ТаблицаНайденногоКонтекстноеМенюДобавитьВМоиКонтактыПоиск.Видимость = Ложь;
		
		Элементы.ПолучателиПисьмаКонтекстноеМенюДобавитьВМоиКонтактыПолучателя.Видимость = Ложь;
		
	Иначе	
		ЗаполнитьМоиКонтакты();
	КонецЕсли;	
	
	Если Не Элементы.ОткрытьФизическиеЛица.Видимость И ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ФизическиеЛица Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоПодразделениям;
	КонецЕсли;	
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей Тогда
		ЗаполнитьПользователейВГруппах();
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
		Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники по группам:'");
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоПодразделениям Тогда	
		ЗаполнитьПользователейВПодразделениях();
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
		Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники по подразделениям:'");
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.Списком Тогда
		ЗаполнитьПользователейСписком();
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
		Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники списком:'");
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.МоиКонтакты Тогда
		ЗаполнитьМоиКонтакты();
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты;
		ЗагрузитьПозицииСписков();
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.Корреспонденты Тогда
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты;
		ЗагрузитьПозицииСписков();
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ФизическиеЛица Тогда	
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица;
		ЗагрузитьПозицииСписков();
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.Поиск Тогда	
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск;
		ЗагрузитьПозицииСписков();
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ЛичныеАдресаты Тогда	
		ЗаполнитьЛичныеАдресаты();
		Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты;
		ЗагрузитьПозицииСписков();
	КонецЕсли;	
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей
		Или ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоПодразделениям
		Или ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.Списком Тогда
		
		ТекущийКонтактДляКарточкиПользователя = ТекущийПользователь;
		ПользователиАдреса.Очистить();
		Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
			ЗаполнитьАдресаПользователя(ТекущийКонтактДляКарточкиПользователя, Истина);
		КонецЕсли;	
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.МоиКонтакты Тогда	
		
		ТекущийКонтактДляКарточкиПользователя = ТекущийКонтактИзбранного;
		
	КонецЕсли;
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");	
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая 
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		ПолучатьФотографии = Ложь;
		Элементы.ГруппаФото.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		Элементы.ГруппаКарточкаПользователя.Видимость = Ложь;
	КонецЕсли;	
	
	ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	
	Если РежимСправочникСотрудников Тогда
		Заголовок = НСтр("ru='Адресная книга'");
		Элементы.КомандаВыбрать.Видимость = Ложь;
		Элементы.Отмена.Видимость = Ложь;
		
		Элементы.ГруппаМоиКонтактыОбщее.Видимость = Истина;
		Элементы.ГруппаПользователиОбщее.Видимость = Истина;
		Элементы.ГруппаКорреспондентыОбщее.Видимость = Истина;
		Элементы.ГруппаФизлицаОбщее.Видимость = Истина;
		Элементы.ГруппаПоискОбщее.Видимость = Истина;
		Элементы.ГруппаЛичныеАдресатыОбщее.Видимость = Истина;

		Элементы.ГруппаКнопки.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаМоиКонтактыОбщее.Видимость = Ложь;
		Элементы.ГруппаПользователиОбщее.Видимость = Ложь;
		Элементы.ГруппаКорреспондентыОбщее.Видимость = Ложь;
		Элементы.ГруппаФизлицаОбщее.Видимость = Ложь;
		Элементы.ГруппаПоискОбщее.Видимость = Ложь;
		Элементы.ГруппаЛичныеАдресатыОбщее.Видимость = Ложь;
		
		Элементы.ГруппаКнопки.Видимость = Истина;
	КонецЕсли;	
	
	Элементы.Ранг.СписокВыбора.Добавить(0, НСтр("ru='Любой'"));
	Элементы.Ранг.СписокВыбора.Добавить(1, "*");
	Элементы.Ранг.СписокВыбора.Добавить(2, "**");
	Элементы.Ранг.СписокВыбора.Добавить(3, "***");
	Элементы.Ранг.СписокВыбора.Добавить(4, "****");
	Элементы.Ранг.СписокВыбора.Добавить(-1, НСтр("ru='* и выше'"));
	
	Ранг = 0;
	РангПриОткрытии = Ранг;
	
	ТекущийПользовательПредприятия = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если Параметры.Свойство("УчетнаяЗапись") Тогда
		
		УчетнаяЗапись = Параметры.УчетнаяЗапись;
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникУчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК СправочникУчетныеЗаписиЭлектроннойПочты
			|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
			|		ПО (УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = СправочникУчетныеЗаписиЭлектроннойПочты.Ссылка)}
			|ГДЕ
			|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь = &Ответственный
			|	И СправочникУчетныеЗаписиЭлектроннойПочты.ВариантИспользования = &ВариантИспользования
			|	И СправочникУчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Ответственный", ТекущийПользовательПредприятия);	
		Запрос.УстановитьПараметр("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);	
		ТаблицаУчетныхЗаписей = Запрос.Выполнить().Выгрузить();
		Если ТаблицаУчетныхЗаписей.Количество() = 1 Тогда
			УчетнаяЗапись = ТаблицаУчетныхЗаписей[0].Ссылка;
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Корреспонденты, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Физлица, "ПометкаУдаления", Ложь, , , Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьПозицииВСписках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущийЭлементФормы = Неопределено;
	ПодключитьОбработчикОжидания("ЗапомнитьТекущийЭлемент", 1);
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей") Тогда
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиПоГруппам);
		РазвернутьГруппыПользователей();
		ТекущийЭлемент = Элементы.ДеревоПользователей;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоПодразделениям") Тогда	
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиПоПодразделениям);
		РазвернутьГруппыПользователей();
		ТекущийЭлемент = Элементы.ДеревоПользователей;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Списком") Тогда
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиСписком);
		ТекущийЭлемент = Элементы.ДеревоПользователей;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.МоиКонтакты") Тогда
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьМоиКонтакты);
		ТекущийЭлемент = Элементы.МоиКонтакты;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Корреспонденты") Тогда
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьКорреспонденты);
		ТекущийЭлемент = Элементы.Корреспонденты;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ФизическиеЛица") Тогда	
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьФизическиеЛица);
		ТекущийЭлемент = Элементы.Физлица;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Поиск") Тогда	
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьПоиск);
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ЛичныеАдресаты") Тогда	
		ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьЛичныеАдресаты);
		ТекущийЭлемент = Элементы.ДеревоКонтактов;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьТекущийЭлемент()
	
	Если ТекущийЭлемент = Элементы.ПользователиАдреса 
		Или ТекущийЭлемент = Элементы.ДеревоПользователей Тогда
		ТекущийЭлементФормы = ТекущийЭлемент;
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ЧислоОбъектовПоискаПревышаетМаксимум()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксимумЗаписей = 100000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК ЧислоЗаписей
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЧислоЗаписей = Выборка.ЧислоЗаписей;
	Если ЧислоЗаписей > МаксимумЗаписей Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьИспользоватьПолнотекстовыйПоиск()
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПолнотекстовыйПоиск = Константы.ИспользоватьПолнотекстовыйПоиск.Получить();
	Возврат ИспользоватьПолнотекстовыйПоиск;
	
КонецФункции

&НаСервере
Процедура НастроитьВидПросмотра()
	
	ВидПросмотра = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ВидПросмотра");
	Если Не ЗначениеЗаполнено(ВидПросмотра) Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраАдреснойКниги.ПоПодразделениям;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛичныеАдресаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникГруппыЛичныхАдресатов.Ссылка КАК ГруппаСсылка,
		|	СправочникГруппыЛичныхАдресатов.ПометкаУдаления КАК ГруппаПометкаУдаления,
		|	СправочникГруппыЛичныхАдресатов.Предопределенный КАК ГруппаПредопределенный,
		|	СправочникГруппыЛичныхАдресатов.Наименование КАК ГруппаНаименование,
		|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
		|	ЛичныеАдресаты.ПометкаУдаления КАК ЛичныеАдресатыПометкаУдаления,
		|	ЛичныеАдресаты.Наименование КАК ЛичныеАдресатыНаименование
		|ИЗ
		|	Справочник.ГруппыЛичныхАдресатов КАК СправочникГруппыЛичныхАдресатов
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|		ПО СправочникГруппыЛичныхАдресатов.Ссылка = ЛичныеАдресаты.Группа
		|ГДЕ
		|	ЕСТЬNULL(СправочникГруппыЛичныхАдресатов.Пользователь, ЛичныеАдресаты.Пользователь) = &Пользователь
		|	И ЕСТЬNULL(ЛичныеАдресаты.Пользователь, СправочникГруппыЛичныхАдресатов.Пользователь) = &Пользователь
		|	И (&ПометкаУдаления = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ ЕСТЬNULL(ЛичныеАдресаты.ПометкаУдаления, ЛОЖЬ))
		|	И (&ПометкаУдаления = НЕОПРЕДЕЛЕНО
		|			ИЛИ НЕ ЕСТЬNULL(СправочникГруппыЛичныхАдресатов.ПометкаУдаления, ЛОЖЬ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаСсылка ИЕРАРХИЯ,
		|	ЛичныеАдресатыНаименование";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	ВыборкаДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоКонтактов.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваМоиКонтакты(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	СтрокаДереваГруппы = Неопределено;
	ЭлементыДляДобавленияПользователей = КореньДерева;
	
	Если ЗначениеЗаполнено(Выборка.ГруппаСсылка) Тогда
	
		СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
		Если СтрокаДереваГруппы = Неопределено Тогда
			
			СтрокаДереваГруппы = КореньДерева.Добавить();
			ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
			
			СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
			СтрокаДереваГруппы.Группа = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.Ссылка = Выборка.ГруппаСсылка;
			СтрокаДереваГруппы.НомерКартинки = 2; // папка
			СтрокаДереваГруппы.Представление = СтрокаДереваГруппы.Наименование;
			
		КонецЕсли;
		
		ЭлементыДляДобавленияПользователей = СтрокаДереваГруппы.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ЛичныеАдресатыСсылка) Тогда
		
		СтрокаДереваПользователь = ЭлементыДляДобавленияПользователей.Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ЛичныеАдресатыНаименование;
		СтрокаДереваПользователь.Группа = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Ссылка = Выборка.ЛичныеАдресатыСсылка;
		СтрокаДереваПользователь.НомерКартинки = 3; // пользователь
		СтрокаДереваПользователь.ЭтоАдресат = Истина;
		
		Для Каждого СтрокаКонтактнойИнформации Из Выборка.ЛичныеАдресатыСсылка.КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				СтрокаДереваПользователь.АдресEmail = СтрокаКонтактнойИнформации.АдресЭП;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		СтрокаДереваПользователь.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(СтрокаДереваПользователь.Наименование),
				СтрокаДереваПользователь.АдресEmail);
		
	КонецЕсли;	
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ЛичныеАдресатыНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваМоиКонтакты(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейВПодразделениях()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделениях();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
	ЗагрузитьПозицииСписков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВПодразделениях(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	
	СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
	Если СтрокаДереваГруппы = Неопределено Тогда
		
		СтрокаДереваГруппы = КореньДерева.Добавить();
		
		ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
		
		СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
		СтрокаДереваГруппы.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваГруппы.НомерКартинки = 2; // папка
		
	КонецЕсли;	
	
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
	Если Выборка.ПользователиСсылка <> Null Тогда
		
		СтрокаДереваПользователь = СтрокаДереваГруппы.ПолучитьЭлементы().Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ПользователиНаименование;
		СтрокаДереваПользователь.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Пользователь = Выборка.ПользователиСсылка;
		СтрокаДереваПользователь.НомерКартинки = 3; // пользователь
		СтрокаДереваПользователь.ЭтоПользователь = Истина;
		СтрокаДереваПользователь.ЭтоРуководитель = Выборка.ЭтоРуководитель;
		Если ТипЗнч(СтрокаДереваПользователь.Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			СтрокаДереваПользователь.ЭтоРоль = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейСписком()
	
	ВыборкаТаблица = ПользователиСерверПовтИсп.ПолучитьПользователейСписком();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Список;
	
	Для Каждого Выборка Из ВыборкаТаблица Цикл
		
		СтрокаДереваПользователь = КореньДерева.Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.Наименование;
		СтрокаДереваПользователь.Пользователь = Выборка.Ссылка;
		СтрокаДереваПользователь.НомерКартинки = 3; // пользователь
		СтрокаДереваПользователь.ЭтоПользователь = Истина;
		СтрокаДереваПользователь.ЭтоРуководитель = Выборка.ЭтоРуководитель;
		Если ТипЗнч(СтрокаДереваПользователь.Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			СтрокаДереваПользователь.ЭтоРоль = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗагрузитьПозицииСписков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователейВГруппах()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппах();
		
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	СтрокаВсеПользователи = Неопределено;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВГруппах(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп, СтрокаВсеПользователи);
		
	КонецЦикла;
	
	ЗагрузитьПозицииСписков();
	
	Если СтрокаВсеПользователи <> Неопределено Тогда
		Индекс = КореньДерева.Индекс(СтрокаВсеПользователи);
		КореньДерева.Сдвинуть(Индекс, -Индекс);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВГруппах(Выборка, КореньДерева, ВеткиДереваДляГрупп, СтрокаВсеПользователи)
	
	СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.ГруппаСсылка);
	Если СтрокаДереваГруппы = Неопределено Тогда
		
		СтрокаДереваГруппы = КореньДерева.Добавить();
		ВеткиДереваДляГрупп.Вставить(Выборка.ГруппаСсылка, СтрокаДереваГруппы);
		
		Если Выборка.ГруппаСсылка = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			СтрокаВсеПользователи = СтрокаДереваГруппы;
		КонецЕсли;	
		
		СтрокаДереваГруппы.Наименование = Выборка.ГруппаНаименование;
		СтрокаДереваГруппы.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваГруппы.НомерКартинки = 2; // папка
		
	КонецЕсли;	
	
	Выборка.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВГруппах(СтрокаВыборкиДерево, 
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп, СтрокаВсеПользователи);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Выборка.ПользователиСсылка) Тогда
		
		СтрокаДереваПользователь = СтрокаДереваГруппы.ПолучитьЭлементы().Добавить();
		
		СтрокаДереваПользователь.Наименование = Выборка.ПользователиНаименование;
		СтрокаДереваПользователь.ГруппаПользователей = Выборка.ГруппаСсылка;
		СтрокаДереваПользователь.Пользователь = Выборка.ПользователиСсылка;
		СтрокаДереваПользователь.НомерКартинки = 3; // пользователь
		СтрокаДереваПользователь.ЭтоПользователь = Истина;
		СтрокаДереваПользователь.ЭтоРуководитель = Выборка.ЭтоРуководитель;
		Если ТипЗнч(СтрокаДереваПользователь.Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			СтрокаДереваПользователь.ЭтоРоль = Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	табПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
		
		Если ГруппаВыбранных.Значение <> Неопределено Тогда
			
			Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
				
				новСтр = табПолучатели.Добавить();
				новСтр.Группа = ГруппаВыбранных.Представление;
				ЗаполнитьЗначенияСвойств(новСтр, Элемент);
				
				новСтр.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(новСтр.Адрес, новСтр.Контакт);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	табПолучатели.Сортировать("Группа");
	
	ЗначениеВРеквизитФормы(табПолучатели, "ПолучателиПисьма");
	
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиПользователей(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ПользователиАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(ТекущийПользователь);
				НоваяСтрока.Контакт = ТекущийПользователь;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиДереваПользователей(Знач ВыделенныеСтроки)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ДеревоПользователей.НайтиПоИдентификатору(ИдСтроки);
		ДеревоПользователейВыполнитьВыборВМножественномВыбореСервер(ДеревоПользователей, СтрокаДанных);
		
	КонецЦикла;
	
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПользователейВыполнитьВыборВМножественномВыбореСервер(РеквизитДерево, ТекущиеДанные)
	
	Если ТекущиеДанные.ЭтоПользователь Тогда
		
		ОсновнойАдрес = ТекущиеДанные.ОсновнойАдрес;
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Пользователь);
		КонецЕсли;
		
	Иначе // группа пользователей или отдел
		
		ИдСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		ПеренестиВВыбранныеАдреса(РеквизитДерево, ИдСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуПоУмолчанию()
	
	Если Параметры.Свойство("ГруппаПоУмолчанию") Тогда
		ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	КонецЕсли;
	Если ПустаяСтрока(ГруппаПоУмолчанию) Тогда
		ГруппаПоУмолчанию = НСтр("ru = 'Кому'");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьЗакладкуКонтактов()
	
	Элементы.СтраницаМоиКонтакты.Заголовок 
		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru ='Мои контакты (%1)'"),
			ЧислоМоихКонтактов);
			
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
//КОМАНДЫ ФОРМЫ

&НаСервере
Процедура СохранитьПозицииВСписках()
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ВидПросмотра", ВидПросмотра);
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущееФизическоеЛицо", Элементы.Физлица.ТекущаяСтрока);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущийПользователь", ТекущийПользователь);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущийКорреспондент", Элементы.Корреспонденты.ТекущаяСтрока);
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы, "ТекущийКонтактИзбранного", ТекущийКонтактИзбранного);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПозицииСписков()
	
	СохраненноеФизическоеЛицо = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущееФизическоеЛицо");
	СохраненныйКорреспондент = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущийКорреспондент");
	СохраненныйПользователь = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущийПользователь");
	СохраненныйКонтактИзбранного = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы, "ТекущийКонтактИзбранного");
	
	Если ЗначениеЗаполнено(ТекущийКонтакт) Тогда
		
		Если ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СохраненноеФизическоеЛицо = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Корреспонденты") Тогда
			СохраненныйКорреспондент = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
			СохраненныйПользователь = ТекущийКонтакт;
		КонецЕсли;		
		
	КонецЕсли;	

	Элементы.Физлица.ТекущаяСтрока = СохраненноеФизическоеЛицо;
	Элементы.Корреспонденты.ТекущаяСтрока = СохраненныйКорреспондент;
	
	КореньДерева = МоиКонтакты.ПолучитьЭлементы();
	
	ТекущийИдентификатор = Неопределено;
	Если СохраненныйКонтактИзбранного <> Неопределено Тогда
		ТекущийИдентификатор = НайтиИдентификаторПоСсылке(КореньДерева, СохраненныйКонтактИзбранного);
	КонецЕсли;

	Элементы.МоиКонтакты.ТекущаяСтрока = ТекущийИдентификатор;	
	
	ТекущийКонтактИзбранного = СохраненныйКонтактИзбранного;
	
	Если ЗначениеЗаполнено(СохраненныйКорреспондент) Тогда
		КорреспондентыАдреса.ПолучитьЭлементы().Очистить();
		ЗаполнитьКорреспондентыАдреса(СохраненныйКорреспондент);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СохраненныйПользователь) Тогда
		
		Индекс = -1;
		НайтиВДеревеПоСсылке(ДеревоПользователей.ПолучитьЭлементы(), СохраненныйПользователь, Индекс, Истина);
		
		Если Индекс = -1 Тогда
			НайтиВДеревеПоСсылке(ДеревоПользователей.ПолучитьЭлементы(), СохраненныйПользователь, Индекс, Ложь);
		КонецЕсли;
		
		Если Индекс > -1 Тогда
			Элементы.ДеревоПользователей.ТекущаяСтрока = Индекс;
			
			ТекущийПользователь = СохраненныйПользователь;
			ПользователиАдреса.Очистить();
			ЗаполнитьАдресаПользователя(ТекущийПользователь, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НайтиВДеревеПоСсылке(КоллекцияЭлементовОдногоУровня, ИскомаяСсылка, Индекс, ПропускатьВсеПользователи)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементовОдногоУровня Цикл
		
		Если ПропускатьВсеПользователи И 
			СтрокаДерева.ГруппаПользователей = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДерева.Пользователь = ИскомаяСсылка Тогда
			Индекс = СтрокаДерева.ПолучитьИдентификатор();
		Иначе
			НайтиВДеревеПоСсылке(СтрокаДерева.ПолучитьЭлементы(), ИскомаяСсылка, Индекс, ПропускатьВсеПользователи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
&НаКлиенте
Процедура КомандаОКВыполнить()
	
	Если МножественныйВыбор Тогда
		
		Если ПолучателиПисьма.Количество() = 0 Тогда
			
			Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
				Если Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиДереваПользователей(Элементы.ДеревоПользователей.ВыделенныеСтроки);
				КонецЕсли;	
			ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда	
				Если Элементы.МоиКонтакты.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиИзбранного(Элементы.МоиКонтакты.ВыделенныеСтроки);
				КонецЕсли;				
			ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда	
				Если Элементы.ЛичныеАдресатыАдреса.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиМоихКонтактов(Элементы.ЛичныеАдресатыАдреса.ВыделенныеСтроки);
				КонецЕсли;				
			ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
				Если Элементы.ФизлицаАдреса.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиФизическихЛиц(Элементы.ФизлицаАдреса.ВыделенныеСтроки);
				КонецЕсли;				
			ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
				Если Элементы.КорреспондентыАдреса.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиКорреспондентов(Элементы.КорреспондентыАдреса.ВыделенныеСтроки);
				КонецЕсли;				
			ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
				Если Элементы.ТаблицаНайденного.ВыделенныеСтроки.Количество() <> 0 Тогда
					ПеренестиВыделенныеСтрокиПоиска(Элементы.ТаблицаНайденного.ВыделенныеСтроки);
				КонецЕсли;	
			КонецЕсли;			
			
			Если ПолучателиПисьма.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru= 'Выберите хотя бы одного получателя.'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Новый Массив;
		
		Для Каждого Стр Из ПолучателиПисьма Цикл
			Группа = ?(ПустаяСтрока(Стр.Группа), "Кому", Стр.Группа);
			Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", Стр.Адрес, Стр.Представление, Стр.Контакт, Группа);
			Результат.Добавить(Контакт);
		КонецЦикла;
		
		Закрыть(Результат);
		
	Иначе
		
		ВыполнитьВыборВОдиночномРежиме();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборВОдиночномРежиме()
	
	Если РежимСправочникСотрудников Тогда
		
		Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
			ПоказатьЗначение(, ТекущийКонтактДляКарточкиПользователя);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;	
	
	ВозвращаемоеВыданоПредупреждение = Ложь;
	СтруктураАдресата = ПолучитьТекущегоАдресата(ВозвращаемоеВыданоПредупреждение);
	Если ТипЗнч(СтруктураАдресата) <> Тип("Структура") Тогда
		
		Если Не ВозвращаемоеВыданоПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru= 'Выберите получателя.'"));
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Группа = ГруппаПоУмолчанию;
	Контакт = Новый Структура("Адрес, Представление, Контакт, Группа", 
		СтруктураАдресата.Адрес, СтруктураАдресата.Представление, СтруктураАдресата.Контакт, Группа);
	Результат.Добавить(Контакт);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		
		Если ТекущийЭлементФормы = Неопределено 
			Или ТекущийЭлементФормы = Элементы.ПользователиАдреса Тогда
			ПеренестиВыделенныеСтрокиПользователей(Элементы.ПользователиАдреса.ВыделенныеСтроки);
		ИначеЕсли ТекущийЭлементФормы = Элементы.ДеревоПользователей Тогда
			ПеренестиВыделенныеСтрокиДереваПользователей(Элементы.ДеревоПользователей.ВыделенныеСтроки);
		КонецЕсли;	
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		
		ПеренестиВыделенныеСтрокиИзбранного(Элементы.МоиКонтакты.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		
		ПеренестиВыделенныеСтрокиКорреспондентов(Элементы.КорреспондентыАдреса.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
		
		ПеренестиВыделенныеСтрокиФизическихЛиц(Элементы.ФизлицаАдреса.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		ПеренестиВыделенныеСтрокиПоиска(Элементы.ТаблицаНайденного.ВыделенныеСтроки);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда
		
		ПеренестиВыделенныеСтрокиМоихКонтактов(Элементы.ЛичныеАдресатыАдреса.ВыделенныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыПользователей()
	
	// Развернем узел верхнего уровня - если он один
	Если ДеревоПользователей.ПолучитьЭлементы().Количество() = 1 Тогда
		
		СтрокаДерева = ДеревоПользователей.ПолучитьЭлементы().Получить(0);
		
		Если СтрокаДерева.ГруппаПользователей <> ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
			Элементы.ДеревоПользователей.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиИзбранного(Знач ВыделенныеСтроки, СтрокаПредупреждения = "")
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = МоиКонтакты.НайтиПоИдентификатору(ИдСтроки);
		АдресEmail = СтрокаДанных.КонтактнаяИнформация;
		
		ЭтоГруппаИлиОтдел = Ложь;
		Если ЗначениеЗаполнено(СтрокаДанных.Контакт) 
			И (ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
			Или ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			
			ЭтоГруппаИлиОтдел = Истина;
			
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоАвтоподстановка Тогда
			
			ЗначениеАвтоподстановки = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(СтрокаДанных.Контакт);
				
			Если ЗначениеАвтоподстановки <> Неопределено Тогда
				ПеренестиМассивКонтактовВВыбранныеАдреса(ЗначениеАвтоподстановки);
			КонецЕсли;	
			
		ИначеЕсли СтрокаДанных.ЭтоГруппа Тогда
			
			Для Каждого СтрокаТаблЧасти Из СтрокаДанных.ГруппаКонтактовПользователей.Контакты Цикл 
				
				Контакт = СтрокаТаблЧасти.Контакт;  
				
				Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					Если Контакт.Недействителен Тогда
						Продолжить;
					КонецЕсли;              				
				КонецЕсли;						
				
				Адрес = СтрокаТаблЧасти.КонтактнаяИнформация;
				ЭтоАвтоподстановка = (ТипЗнч(Контакт) = Тип("Строка"));
				
				Если ЭтоАвтоподстановка Тогда
					
					ЗначениеАвтоподстановки = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(Контакт);
						
					Если ЗначениеАвтоподстановки <> Неопределено Тогда
						ПеренестиМассивКонтактовВВыбранныеАдреса(ЗначениеАвтоподстановки);
					КонецЕсли;	
					
				ИначеЕсли ЗначениеЗаполнено(Контакт) 
					И (ТипЗнч(Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
					Или ТипЗнч(Контакт) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
					
					ЗаполнитьДеревоПользователейДляИзбранного(Контакт);
					
					ИдентификаторВДеревеПользователей = НайтиИдентификаторГруппыПоСсылке(
						ДеревоПользователейДляИзбранного.ПолучитьЭлементы(), 
						Контакт);
						
					СтрокаДанных = ДеревоПользователейДляИзбранного.НайтиПоИдентификатору(ИдентификаторВДеревеПользователей);
					ДеревоПользователейВыполнитьВыборВМножественномВыбореСервер(ДеревоПользователейДляИзбранного, СтрокаДанных);
					
				Иначе	
					
					Если ЗначениеЗаполнено(Адрес) Тогда
						
						Отбор = Новый Структура();
						Отбор.Вставить("Адрес", Адрес);
						Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
						
						Если Строки.Количество() = 0 Тогда
						
							НоваяСтрока = Результат.Добавить();
							
							НоваяСтрока.Адрес = Адрес;
							НоваяСтрока.Представление = Строка(Контакт);
							НоваяСтрока.Контакт = Контакт;
							НоваяСтрока.Группа = ГруппаПоУмолчанию;
							НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
							
						КонецЕсли;
						
					КонецЕсли;		
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		ИначеЕсли ЭтоГруппаИлиОтдел Тогда
			
			ЗаполнитьДеревоПользователейДляИзбранного(СтрокаДанных.Контакт);
			
			ИдентификаторВДеревеПользователей = НайтиИдентификаторГруппыПоСсылке(
				ДеревоПользователейДляИзбранного.ПолучитьЭлементы(), 
				СтрокаДанных.Контакт);
				
			СтрокаДанных = ДеревоПользователейДляИзбранного.НайтиПоИдентификатору(ИдентификаторВДеревеПользователей);
			ДеревоПользователейВыполнитьВыборВМножественномВыбореСервер(ДеревоПользователейДляИзбранного, СтрокаДанных);
			
		ИначеЕсли ЗначениеЗаполнено(АдресEmail) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", АдресEmail);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = АдресEmail;
				НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
				НоваяСтрока.Контакт = СтрокаДанных.Контакт;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
			
		ИначеЕсли Не СтрокаДанных.ЭтоАвтоподстановка И Не СтрокаДанных.ЭтоГруппа И Не ЭтоГруппаИлиОтдел 
			И Не ЗначениеЗаполнено(АдресEmail) Тогда		
			
			СтрокаПредупреждения = НСтр("ru ='Для этого адресата не указан ни один адрес электронной почты.'");
			
		Иначе	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранноеПолучателя(Команда)
	
	Если Элементы.ПолучателиПисьма.ТекущиеДанные <> Неопределено Тогда
		
		Если ЕстьГруппыВИзбранном Тогда 
			
			ПараметрыФормы = Новый Структура;
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавитьВИзбранноеПолучателя", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
		Иначе
			
			ДобавитьВИзбранноеПолучателяСервер(Элементы.ПолучателиПисьма.ВыделенныеСтроки);
			
		КонецЕсли;	
		
	Иначе
		
		ПоказатьПредупреждение(, НСТр("ru ='Для добавления в ""Мои контакты"" выберите адрес в списке выбранных адресов.'"));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВИзбранноеПолучателя(ГруппаИзбранного, Параметры) Экспорт

	Если ГруппаИзбранного <> Неопределено Тогда
		ДобавитьВИзбранноеПолучателяСервер(Элементы.ПолучателиПисьма.ВыделенныеСтроки, ГруппаИзбранного);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВИзбранноеПолучателяСервер(Знач ВыделенныеСтроки, ГруппаИзбранного = Неопределено)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ПолучателиПисьма.НайтиПоИдентификатору(ИдСтроки);
		ДобавитьВМоиКонтактыСервер(СтрокаДанных.Контакт, ГруппаИзбранного, СтрокаДанных.Адрес);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиКорреспондентов(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = КорреспондентыАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(СтрокаДанных.КонтактноеЛицо);
				НоваяСтрока.Контакт = СтрокаДанных.КонтактноеЛицо;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиФизическихЛиц(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ФизлицаАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(Элементы.Физлица.ТекущаяСтрока);
				НоваяСтрока.Контакт = Элементы.Физлица.ТекущаяСтрока;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
		ФизлицаПриАктивизацииСтрокиВыполнить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.Физлица.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.Физлица.ТекущаяСтрока;
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ПодключитьОбработчикОжидания("ОбновитьФизлицо", 0.4, Истина);
			
		КонецЕсли;	
		
	Иначе	
		ТекущийКонтактДляКарточкиПользователя = "";
		ОчиститьКарточкуПользователя();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКарточкуПользователя()
	
	Если Не Элементы.ГруппаКарточкаПользователя.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеПользователя = "";
	
	Если ПолучатьФотографии Тогда
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФизлицо()
	
	ЗаполнитьФизлицаАдреса(ТекущийКонтактДляКарточкиПользователя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизлицаАдреса(ТекущаяСтрока)
	
	ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	
	ФизлицаАдреса.Очистить();
	
	Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
		
		ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			НоваяСтрока = ФизлицаАдреса.Добавить();
			НоваяСтрока.АдресПочты = Строка.Значение;
			НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
			НоваяСтрока.НомерКартинки = 1;
				
		КонецЦикла;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		Если Не ДобавитьАдрес(Элементы.ФизлицаАдреса.ТекущиеДанные.АдресПочты, Элементы.Физлица.ТекущаяСтрока) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
		КонецЕсли;	
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьАдрес(АдресEmail, Контакт)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Отбор = Новый Структура();
	Отбор.Вставить("Адрес", АдресEmail);
	Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
	
	Если Строки.Количество() = 0 Тогда
	
		НоваяСтрока = Результат.Добавить();
		
		НоваяСтрока.Адрес = АдресEmail;
		НоваяСтрока.Представление = Строка(Контакт);
		НоваяСтрока.Контакт = Контакт;
		НоваяСтрока.Группа = ГруппаПоУмолчанию;
		НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
		ПолучателиПисьма.Сортировать("Представление Возр");
		ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
		
		ОбновитьТекущуюСтрокуПолучателей();
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФизлицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиФизлицаВВыбранныеАдреса(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа);
		
	Иначе	
		
		Если МножественныйВыбор Тогда
		
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				ТекстВопроса = НСтр("ru ='Для этого физического лица не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ФизлицаВыборПродолжение",
					ЭтотОбъект,
					Новый Структура("ТекущиеДанные", ТекущиеДанные));
					
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаВыборПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
					
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Параметры.ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФизлицаОткрытиеДляЗаполненияПочты",
			ЭтотОбъект);

		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ФизлицаОткрытиеДляЗаполненияПочты(Результат, Параметры) Экспорт 
	
	ЗаполнитьФизлицаАдреса(Элементы.Корреспонденты.ТекущаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ПеренестиФизлицаВВыбранныеАдреса(ФизлицоСсылка, ЭтоГруппа)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(ФизлицоСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			ДобавитьАдрес(ОсновнойАдрес, ФизлицоСсылка);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка,
			|	ФизическиеЛица.ЭтоГруппа
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", ФизлицоСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиФизлицаВВыбранныеАдреса(Строка.Ссылка, Строка.ЭтоГруппа);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеАдреса(Адрес, Вид)
	
	Представление = "";
	
	Если Строка(Вид) = "Email" ИЛИ Строка(Вид) = "E-mail" Тогда
		Представление = Адрес;
	Иначе
		Представление = Строка(Вид) + ": " + Адрес;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОсновнойАдрес(Вид)
	
	Если Строка(Вид) = "Email" ИЛИ Строка(Вид) = "E-mail" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПолноеПредставлениеАдреса(Адрес, Контакт)
	
	Представление = Адрес;
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		ПредставлениеКонтакта = Строка(Контакт);
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			ПредставлениеКонтакта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контакт, "ПредставлениеВПерепискеСРангом");
		КонецЕсли;	
		
		Представление = ПредставлениеКонтакта + " <" + Строка(Адрес) + ">";
	КонецЕсли;	
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАдресаПользователя(ТекущаяСтрока, ЗагружатьФото)
	
	Если ЗагружатьФото Тогда
		ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		СтрокаДанных = ДеревоПользователей.НайтиПоИдентификатору(ТекущийИдентификаторСтрокиПользователей);
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных.ОсновнойАдрес = ПолучитьОсновнойАдрес(ТекущаяСтрока);
			СтрокаДанных.ОсновнойАдресЗаполнен = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("СправочникСсылка.СтруктураПредприятия")
		И ТипЗнч(ТекущаяСтрока) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			НоваяСтрока = ПользователиАдреса.Добавить();
			НоваяСтрока.АдресПочты = Строка.Значение;
			НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
			НоваяСтрока.НомерКартинки = 1; // адрес
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "ФизЛицо");
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ЗаполнитьАдресаПользователя(ФизЛицо, ЗагружатьФото);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		
		Если Не ДобавитьАдрес(Элементы.ПользователиАдреса.ТекущиеДанные.АдресПочты, ТекущийПользователь) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
		КонецЕсли;	
		
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		ДеревоПользователейПриАктивизацииСтрокиВыполнить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
		Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ТекущаяСтрока = Элементы.ДеревоПользователей.ТекущиеДанные.ГруппаПользователей;
		КонецЕсли;	
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийПользователь = ТекущаяСтрока;
			ТекущийИдентификаторСтрокиПользователей = Элементы.ДеревоПользователей.ТекущаяСтрока;
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ПодключитьОбработчикОжидания("ОбновитьАдресаИФотоПользователя", 0.4, Истина);
			
		КонецЕсли;
		
	Иначе	
		
		ТекущийКонтактДляКарточкиПользователя = "";		
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаИФотоПользователя()
	
	Если Не Элементы.ГруппаКарточкаПользователя.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	ПользователиАдреса.Очистить();
	Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
		ЗаполнитьАдресаПользователя(ТекущийКонтактДляКарточкиПользователя, Истина);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные.ЭтоПользователь Тогда
		ПоказатьЗначение(, Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь);
	Иначе	
		ПоказатьЗначение(, Элементы.ДеревоПользователей.ТекущиеДанные.ГруппаПользователей);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		КорреспондентыПриАктивизацииСтрокиВыполнить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.Корреспонденты.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.Корреспонденты.ТекущаяСтрока;
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ТекущийКорреспондент = ТекущаяСтрока;
			ПодключитьОбработчикОжидания("ОбновитьКорреспондента", 0.4, Истина);
			
		КонецЕсли;	
		
	Иначе	
		
		ТекущийКонтактДляКарточкиПользователя = "";
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКорреспондента()
	
	КорреспондентыАдреса.ПолучитьЭлементы().Очистить();
	ЗаполнитьКорреспондентыАдреса(ТекущийКорреспондент);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКорреспондентыАдреса(ТекущаяСтрока)
	
	ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = КорреспондентыАдреса.ПолучитьЭлементы().Добавить();
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.КонтактноеЛицо = ТекущийКорреспондент;
		НоваяСтрока.НомерКартинки = 1;// адрес
			
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка,
		|	КонтактныеЛица.Наименование,
		|	КонтактныеЛица.КонтактнаяИнформация.(
		|		АдресЭП,
		|		Тип,
		|		Вид
		|	)
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Владелец", ТекущаяСтрока);	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Таблица Цикл
		
		НоваяСтрока = КорреспондентыАдреса.ПолучитьЭлементы().Добавить();
		НоваяСтрока.КонтактноеЛицо =  Строка.Ссылка;
		НоваяСтрока.КонтактноеЛицоПредставление = Строка(Строка.Ссылка);
		НоваяСтрока.НомерКартинки = 0; // контактное лицо
		НоваяСтрока.ЭтоКонтактноеЛицо = Истина;
		
		Для Каждого СтрокаАдреса Из Строка.КонтактнаяИнформация Цикл
			
			НоваяСтрокаАдреса = НоваяСтрока.ПолучитьЭлементы().Добавить();
			НоваяСтрокаАдреса.КонтактноеЛицо = Строка.Ссылка;
			НоваяСтрокаАдреса.АдресПочты = СтрокаАдреса.АдресЭП;
			НоваяСтрокаАдреса.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(СтрокаАдреса.АдресЭП, СтрокаАдреса.Вид);
			НоваяСтрокаАдреса.НомерКартинки = 1; // адрес
			
			Если ЭтоОсновнойАдрес(СтрокаАдреса.Вид) Тогда
				НоваяСтрока.ОсновнойАдрес = СтрокаАдреса.АдресЭП;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "ФизЛицо");
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		
		ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ФизЛицо, 
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			НоваяСтрока = КорреспондентыАдреса.ПолучитьЭлементы().Добавить();
			НоваяСтрока.АдресПочты = Строка.Значение;
			НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
			НоваяСтрока.КонтактноеЛицо = ФизЛицо;
			НоваяСтрока.НомерКартинки = 1; // адрес
				
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.КорреспондентыАдреса.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АдресПочты) Тогда
		
		Если МножественныйВыбор Тогда
			
			Если Не ДобавитьАдрес(ТекущиеДанные.АдресПочты, ТекущиеДанные.КонтактноеЛицо) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
		
	Иначе
		
		Если МножественныйВыбор Тогда
		
			Если ТекущиеДанные.ЭтоКонтактноеЛицо 
				И ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ОсновнойАдрес) Тогда
					
					Если Не ДобавитьАдрес(ТекущиеДанные.ОсновнойАдрес, ТекущиеДанные.КонтактноеЛицо) Тогда
						ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
					КонецЕсли;	
					
				Иначе
					
					ТекстВопроса = НСтр("ru ='Для этого контактного лица не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"КорреспондентыАдресаВыборПродолжение",
						ЭтотОбъект,
						Новый Структура("ТекущиеДанные", ТекущиеДанные));
						
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				
			КонецЕсли;	
		
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаВыборПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
					
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Параметры.ТекущиеДанные.КонтактноеЛицо);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"КонтактныеЛицаОткрытиеДляЗаполненияПочты",
			ЭтотОбъект);

		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаОткрытиеДляЗаполненияПочты(Результат, Параметры) Экспорт 
	
	КорреспондентыАдреса.ПолучитьЭлементы().Очистить();
	ЗаполнитьКорреспондентыАдреса(Элементы.Корреспонденты.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзВыбранного(Команда)
	
	Если Элементы.ПолучателиПисьма.ТекущаяСтрока <> Неопределено Тогда
		
		Для Каждого ИдСтроки Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
			Строка = ПолучателиПисьма.НайтиПоИдентификатору(ИдСтроки);
			ПолучателиПисьма.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПослеУдаления(Элемент)
	
	ОбновитьЗакладкуКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ЗначениеЗаполнено(Элементы.КорреспондентыАдреса.ТекущиеДанные.АдресПочты) 
		И ЗначениеЗаполнено(Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо) Тогда
		
		ПоказатьЗначение(, Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элементы.Корреспонденты.ТекущиеДанные.Ссылка) Тогда
		
		ПоказатьЗначение(, Элементы.Корреспонденты.ТекущиеДанные.Ссылка);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдреса(ТекущаяСтрока, ПолучатьФизЛицо = Истина)
	
	МассивКонтактов = Новый Массив;	
	
	ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактовEmail Цикл
		
		ОписаниеКонтакта = Новый Структура("Значение, Вид", 
			Строка.Значение, Строка.Вид);
		МассивКонтактов.Добавить(ОписаниеКонтакта);
		
	КонецЦикла;	
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") И ПолучатьФизЛицо Тогда
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "ФизЛицо");
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			
			МассивФизлица = ПолучитьАдреса(ФизЛицо);
			Для Каждого Строка Из МассивФизлица Цикл
				МассивКонтактов.Добавить(Строка);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат МассивКонтактов;	
		
КонецФункции		

&НаСервере
Функция ПолучитьОсновнойАдрес(Пользователь)
	
	ТаблицаКонтактов = ПолучитьАдреса(Пользователь);
	
	Если ТаблицаКонтактов.Количество() <> 0 Тогда
		
		ОсновнойАдрес = "";
		
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			
			Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
				ОсновнойАдрес = Строка.Значение;
				Прервать;
			КонецЕсли;	
				
		КонецЦикла;	
		
		// Если основной адрес не заполнен, берем первый.
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Возврат ОсновнойАдрес;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции		

&НаКлиенте
Процедура КорреспондентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиКорреспондентовВВыбранныеАдреса(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа);
		
	Иначе	
		
		Если МножественныйВыбор Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				ТекстВопроса = НСтр("ru ='Для этого корреспондента не указан ни один адрес электронной почты.
					|Хотите ввести сейчас адрес электронной почты?'");
					
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"КорреспондентыВыборПродолжение",
					ЭтотОбъект,
					Новый Структура("ТекущиеДанные", ТекущиеДанные));
					
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;	
			
		Иначе
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыВыборПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
					
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Параметры.ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("ОткрытьНаЗакладкеКонтактнойИнформации", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"КонтактныеЛицаОткрытиеДляЗаполненияПочты",
			ЭтотОбъект);

		ОткрытьФорму("Справочник.Корреспонденты.ФормаОбъекта", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПеренестиКорреспондентовВВыбранныеАдреса(КорреспондентСсылка, ЭтоГруппа)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(КорреспондентСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, КорреспондентСсылка);
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка,
			|	Корреспонденты.ЭтоГруппа
			|ИЗ
			|	Справочник.Корреспонденты КАК Корреспонденты
			|ГДЕ
			|	Корреспонденты.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", КорреспондентСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиКорреспондентовВВыбранныеАдреса(Строка.Ссылка, Строка.ЭтоГруппа);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДеревоПользователейВыполнитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыполнитьВыборВМножественномВыборе(ТекущиеДанные, ПоказыватьПредупреждения)
	
	Если ТекущиеДанные.ЭтоПользователь Тогда
		
		ОсновнойАдрес = "";
		
		Если ТекущиеДанные.ОсновнойАдресЗаполнен Тогда
			ОсновнойАдрес = ТекущиеДанные.ОсновнойАдрес;
		Иначе	
			ОсновнойАдрес = ПолучитьОсновнойАдрес(ТекущиеДанные.Пользователь);
			
			ТекущиеДанные.ОсновнойАдресЗаполнен = Истина;
			ТекущиеДанные.ОсновнойАдрес = ОсновнойАдрес;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Пользователь) И ПоказыватьПредупреждения Тогда
				ПоказатьПредупреждение(, НСтр("ru='Пользователь с таким адресом почты уже выбран.'"));
			КонецЕсли;	
			
		Иначе
			
			Если ПоказыватьПредупреждения Тогда
				
				ПоказатьПредупреждение(, НСтр("ru ='Для этого пользователя не указан ни один адрес электронной почты. 
					|Указать адрес может только сам пользователь или администратор.'"));
					
			КонецЕсли;	
			
		КонецЕсли;
		
	Иначе // группа пользователей или отдел
		
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение выбора'");
		
		Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбрать всех пользователей группы ""%1""?'"),
				Элементы.ДеревоПользователей.ТекущиеДанные.Наименование);	
		ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоПодразделениям") Тогда	
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбрать всех сотрудников подразделения ""%1""?'"),
				Элементы.ДеревоПользователей.ТекущиеДанные.Наименование);	
		КонецЕсли;
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДеревоПользователейВыполнитьВыборВМножественномВыбореПродолжение",
			ЭтотОбъект);

		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			ЗаголовокВопроса,
			Текст,
			"АдреснаяКнига",
			"ЗадаватьВопросПриДвойномКликеНаГруппу",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыполнитьВыборВМножественномВыбореПродолжение(Результат, Параметры)Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей") Тогда
		Состояние(НСтр("ru='Выполняется выбор всех пользователей в группе...'"));
	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоПодразделениям") Тогда	
		Состояние(НСтр("ru='Выполняется выбор всех пользователей в подразделении...'"));
	КонецЕсли;

	ПеренестиВВыбранныеАдресаСервер(Элементы.ДеревоПользователей.ТекущаяСтрока);
	Состояние();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейВыполнитьВыбор()
	
	ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если РежимСправочникСотрудников Тогда
		
		Если Элементы.ДеревоПользователей.ТекущиеДанные.ЭтоПользователь Тогда
			ПоказатьЗначение(, Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь);
		Иначе	
			ПоказатьЗначение(, Элементы.ДеревоПользователей.ТекущиеДанные.ГруппаПользователей);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;	
	
	Если МножественныйВыбор Тогда
		
		ПоказыватьПредупреждения = Истина;
		ДеревоПользователейВыполнитьВыборВМножественномВыборе(ТекущиеДанные, ПоказыватьПредупреждения);
	
	Иначе
		Если ТекущиеДанные.ЭтоПользователь Тогда
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаСервер(ИдСтроки)
	
	СтрокаДерева = ДеревоПользователей.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдреса(РеквизитДерево, ИдСтроки)
	
	СтрокаДерева = РеквизитДерево.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(СтрокаДерева)
	
	Если СтрокаДерева.ЭтоПользователь Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Пользователь);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, СтрокаДерева.Пользователь);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПеренестиВВыбранныеАдресаВсехПользователейВГруппе(ЭлементДерева);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоиКонтакты()
	
	МоиКонтакты.ПолучитьЭлементы().Очистить();
	ЕстьГруппыВИзбранном = Ложь;
	ЧислоМоихКонтактов = 0;
	
	// сперва заполняем группы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКонтактовПользователей.Ссылка КАК Ссылка,
		|	ГруппыКонтактовПользователей.Наименование КАК Наименование,
		|	ГруппыКонтактовПользователей.ОбщийСписокРассылки КАК ОбщийСписокРассылки
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	ГруппыКонтактовПользователей.Родитель <> &Родитель
		|	И ГруппыКонтактовПользователей.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыКонтактовПользователей.ПустаяСсылка());
	
	ТаблицаГрупп = Запрос.Выполнить().Выгрузить();
	
	КореньДерева = МоиКонтакты.ПолучитьЭлементы();
	
	Для Каждого Строка Из ТаблицаГрупп Цикл
		
		Если Не Строка.ОбщийСписокРассылки Тогда
			ЕстьГруппыВИзбранном = Истина;
		КонецЕсли;	
		
		НоваяСтрокаГруппы = КореньДерева.Добавить();
		НоваяСтрокаГруппы.ПредставлениеОригинальное = Строка.Наименование;
				
		НоваяСтрокаГруппы.НомерКартинки = 2; // папка
		НоваяСтрокаГруппы.ГруппаКонтактовПользователей = Строка.Ссылка;
		НоваяСтрокаГруппы.ЭтоГруппа = Истина;
		НоваяСтрокаГруппы.ЭтоКорневаяГруппа = Ложь;
		
		ЧислоКонтактовВГруппе = 0;
		
		Для Каждого СтрокаТаблЧасти Из Строка.Ссылка.Контакты Цикл 
			Если ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Если СтрокаТаблЧасти.Контакт.Недействителен Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			ЧислоКонтактовВГруппе = ЧислоКонтактовВГруппе + 1;			
			ЧислоМоихКонтактов = ЧислоМоихКонтактов + 1;
			НоваяСтрокаЭлемента = НоваяСтрокаГруппы.ПолучитьЭлементы().Добавить();
			
			Если ТипЗнч(СтрокаТаблЧасти.Контакт) <> Тип("Строка")
				И Не ПустаяСтрока(СтрокаТаблЧасти.КонтактнаяИнформация) Тогда
				НоваяСтрокаЭлемента.Представление = ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(
					СтрокаТаблЧасти.Контакт,
					СтрокаТаблЧасти.КонтактнаяИнформация);
			Иначе
				НоваяСтрокаЭлемента.Представление = Строка(СтрокаТаблЧасти.Контакт);
			КонецЕсли;	
			
			ЭтоГруппаПользователей = (ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
						Или ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.СтруктураПредприятия"));
						
			Если ЭтоГруппаПользователей Тогда
				НоваяСтрокаЭлемента.НомерКартинки = 5; // 2 пользователя
			Иначе	
				НоваяСтрокаЭлемента.НомерКартинки = 3; // пользователь
			КонецЕсли;	
			
			НоваяСтрокаЭлемента.Контакт = СтрокаТаблЧасти.Контакт;
			НоваяСтрокаЭлемента.КонтактнаяИнформация = СтрокаТаблЧасти.КонтактнаяИнформация;
			НоваяСтрокаЭлемента.ГруппаКонтактовПользователей = Строка.Ссылка;
			НоваяСтрокаЭлемента.ЭтоГруппа = Ложь;
			НоваяСтрокаЭлемента.ЭтоАвтоподстановка = (ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("Строка"));
			НоваяСтрокаЭлемента.ЭтоКорневаяГруппа = Ложь;
			
		КонецЦикла;	
		
		НоваяСтрокаГруппы.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(	
			НСтр("ru='%1 (%2)'"), Строка.Наименование, ЧислоКонтактовВГруппе);		
		
	КонецЦикла;	
	
	// заполняем контакты без групп
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКонтактовПользователей.Ссылка КАК Ссылка,
		|	ГруппыКонтактовПользователей.Наименование КАК Наименование,
		|	ГруппыКонтактовПользователей.ОбщийСписокРассылки КАК ОбщийСписокРассылки
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	ГруппыКонтактовПользователей.Родитель = &Родитель
		|	И ГруппыКонтактовПользователей.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыКонтактовПользователей.ПустаяСсылка());
	
	ТаблицаГрупп = Запрос.Выполнить().Выгрузить();
	
	КореньДерева = МоиКонтакты.ПолучитьЭлементы();
	
	Для Каждого Строка Из ТаблицаГрупп Цикл
		
		Для Каждого СтрокаТаблЧасти Из Строка.Ссылка.Контакты Цикл 
			Если ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				Если СтрокаТаблЧасти.Контакт.Недействителен Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	
			
			ЧислоМоихКонтактов = ЧислоМоихКонтактов + 1;
			НоваяСтрокаЭлемента = КореньДерева.Добавить();
			
			Если ТипЗнч(СтрокаТаблЧасти.Контакт) <> Тип("Строка")
				И Не ПустаяСтрока(СтрокаТаблЧасти.КонтактнаяИнформация) Тогда
				НоваяСтрокаЭлемента.Представление = ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(
					СтрокаТаблЧасти.Контакт,
					СтрокаТаблЧасти.КонтактнаяИнформация);
			Иначе
				НоваяСтрокаЭлемента.Представление = Строка(СтрокаТаблЧасти.Контакт);
			КонецЕсли;	
			
			ЭтоГруппаПользователей = (ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
						Или ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("СправочникСсылка.СтруктураПредприятия"));
						
			Если ЭтоГруппаПользователей Тогда
				НоваяСтрокаЭлемента.НомерКартинки = 5; // 2 пользователя
			Иначе	
				НоваяСтрокаЭлемента.НомерКартинки = 3; // пользователь
			КонецЕсли;	
			
			НоваяСтрокаЭлемента.Контакт = СтрокаТаблЧасти.Контакт;
			НоваяСтрокаЭлемента.КонтактнаяИнформация = СтрокаТаблЧасти.КонтактнаяИнформация;
			НоваяСтрокаЭлемента.ГруппаКонтактовПользователей = Строка.Ссылка;
			НоваяСтрокаЭлемента.ЭтоГруппа = Ложь;
			НоваяСтрокаЭлемента.ЭтоАвтоподстановка = (ТипЗнч(СтрокаТаблЧасти.Контакт) = Тип("Строка"));
			НоваяСтрокаЭлемента.ЭтоКорневаяГруппа = Истина;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ОбновитьЗакладкуКонтактов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПеретаскиваниеДобавитьАдреса(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ПеретаскиваниеДобавитьАдреса(ПараметрыПеретаскиванияЗначение)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");
	
	Для Каждого СтрокаДанных Из ПараметрыПеретаскиванияЗначение Цикл
		
		Если Не СтрокаДанных.Свойство("ГруппаКонтактовПользователей") И СтрокаДанных.Свойство("Адрес") Тогда
		
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.Адрес);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.Адрес;
				НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
				НоваяСтрока.Контакт = СтрокаДанных.Контакт;
				
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийПользователь, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийКорреспондент, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			Элементы.Физлица.ТекущаяСтрока, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
	Если Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДеревоПользователейНачалоПеретаскиванияВызовСервера(Элементы.ДеревоПользователей.ВыделенныеСтроки, 
		ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПользователейНачалоПеретаскиванияВызовСервера(Знач ВыделенныеСтроки, 
	ПараметрыПеретаскиванияЗначение)
	
	ДеревоПользователейНачалоПеретаскиванияСервер(ДеревоПользователей, Элементы.ДеревоПользователей.ВыделенныеСтроки, 
		ПараметрыПеретаскиванияЗначение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВСпискеУжеЕстьАдрес(ПараметрыПеретаскиванияЗначение, Адрес)
	
	Для Каждого Строка Из ПараметрыПеретаскиванияЗначение Цикл
		
		Если Строка.Адрес = Адрес Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ДеревоПользователейНачалоПеретаскиванияСервер(РеквизитДерево, Знач ВыделенныеСтроки, 
	ПараметрыПеретаскиванияЗначение)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = РеквизитДерево.НайтиПоИдентификатору(ИдСтроки);
	
		Если ТекущиеДанные.ЭтоПользователь Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Пользователь);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	 
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ВСпискеУжеЕстьАдрес(ПараметрыПеретаскиванияЗначение, ОсновнойАдрес) Тогда
					Данные = Новый Структура("Контакт, Адрес",
						ТекущиеДанные.Пользователь, ОсновнойАдрес);
					ПараметрыПеретаскиванияЗначение.Добавить(Данные);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // группа пользователей или отдел
			
			ДобавитьАдресаВПараметрыПеретаскивания(РеквизитДерево, ИдСтроки, 
				ПараметрыПеретаскиванияЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаВПараметрыПеретаскивания(РеквизитДерево, ИдСтроки, ПараметрыПеретаскиванияЗначение)
	
	СтрокаДерева = РеквизитДерево.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение)
	
	Если СтрокаДерева.ЭтоПользователь Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Пользователь);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Если Не ВСпискеУжеЕстьАдрес(ПараметрыПеретаскиванияЗначение, ОсновнойАдрес) Тогда
				Данные = Новый Структура("Контакт, Адрес",
					СтрокаДерева.Пользователь, ОсновнойАдрес);
				ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			КонецЕсли;	
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ДобавитьАдресаВПараметрыПеретаскиванияВсехПользователейВГруппе(ЭлементДерева, ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура КорреспондентыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	КорреспондентыНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);	
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания)
	
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиКорреспондентовВПараметрыПеретаскивания(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа,
			ПараметрыПеретаскивания.Значение);
		
	Иначе	
		
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиКорреспондентовВПараметрыПеретаскивания(КорреспондентСсылка, ЭтоГруппа, ПараметрыПеретаскиванияЗначение)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(КорреспондентСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			Данные = Новый Структура("Контакт, Адрес",
				КорреспондентСсылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка,
			|	Корреспонденты.ЭтоГруппа
			|ИЗ
			|	Справочник.Корреспонденты КАК Корреспонденты
			|ГДЕ
			|	Корреспонденты.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", КорреспондентСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиКорреспондентовВПараметрыПеретаскивания(Строка.Ссылка, Строка.ЭтоГруппа,
				ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	ФизлицаНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицаНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания)
	
	ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ПеренестиФизлицаВПараметрыПеретаскивания(ТекущиеДанные.Ссылка, ТекущиеДанные.ЭтоГруппа,
			ПараметрыПеретаскивания.Значение);
		
	Иначе	
	
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиФизлицаВПараметрыПеретаскивания(ФизлицоСсылка, ЭтоГруппа, ПараметрыПеретаскиванияЗначение)
	
	Если Не ЭтоГруппа Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(ФизлицоСсылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			
			Данные = Новый Структура("Контакт, Адрес",
				ФизлицоСсылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			
		КонецЕсли;	
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛица.Ссылка,
			|	ФизическиеЛица.ЭтоГруппа
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", ФизлицоСсылка);	
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Таблица Цикл
			ПеренестиФизлицаВПараметрыПеретаскивания(Строка.Ссылка, Строка.ЭтоГруппа,
				ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВыбранныеАдресаПодпись(Форма)
	
	Если Форма.ПриложениеЯвляетсяВебКлиентом Тогда
		Возврат;
	КонецЕсли;	
	
	ЧислоПолучателей = Форма.ПолучателиПисьма.Количество();
	
	Если ЧислоПолучателей = 0 Тогда
		Форма.Элементы.ДекорацияВыбранныеАдресаты.Заголовок = НСтр("ru ='Выбранные адресаты:'");
	Иначе
		Форма.Элементы.ДекорацияВыбранныеАдресаты.Заголовок 
			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Выбранные адресаты (%1):'"),
				ЧислоПолучателей);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПослеУдаления(Элемент)
	
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущегоАдресата(ВозвращаемоеВыданоПредупреждение)
	
	ВозвращаемоеВыданоПредупреждение = Ложь;
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		
		ТекущиеДанные = Элементы.МоиКонтакты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Контакт = ТекущиеДанные.Контакт;
			
			ЭтоГруппа = (ТипЗнч(Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
						Или ТипЗнч(Контакт) = Тип("СправочникСсылка.СтруктураПредприятия"));
						
			Если Не ТекущиеДанные.ЭтоАвтоподстановка И Не ЭтоГруппа Тогда
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ТекущиеДанные.КонтактнаяИнформация, ТекущиеДанные.Представление, ТекущиеДанные.Контакт);
				Возврат Контакт;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда	
		
		ЭтоГруппаИлиОтдел = Ложь;
		ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЭтоГруппаИлиОтдел = Не ТекущиеДанные.ЭтоПользователь;
		КонецЕсли;	
		
		Если Не МножественныйВыбор И
			(ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоПодразделениям")
			Или ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей"))
			И ЭтоГруппаИлиОтдел
			Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;	
		
		Если ЭтаФорма.ТекущийЭлемент = Элементы.ПользователиАдреса Тогда
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.ПользователиАдреса.ТекущиеДанные.АдресПочты, 
				Строка(ТекущийПользователь), ТекущийПользователь);
			Возврат Контакт;
			
		Иначе	
		
			ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				
				ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Пользователь);
				
				Если ТаблицаКонтактов.Количество() <> 0 Тогда
					
					ОсновнойАдрес = "";
					
					Для Каждого Строка Из ТаблицаКонтактов Цикл
						
						Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
							ОсновнойАдрес = Строка.Значение;
							Прервать;
						КонецЕсли;	
							
					КонецЦикла;	
					
					// Если основной адрес не заполнен, берем первый.
					Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
						ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
					КонецЕсли;	
					
					Контакт = Новый Структура("Адрес, Представление, Контакт", 
						ОсновнойАдрес, Строка(ТекущиеДанные.Пользователь), ТекущиеДанные.Пользователь);
					Возврат Контакт;
					
				Иначе
					
					ПоказатьПредупреждение(, НСтр("ru ='Для этого пользователя не указан ни один адрес электронной почты. 
						|Указать адрес может только сам пользователь или администратор.'"));
					
					ВозвращаемоеВыданоПредупреждение = Истина;
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда	
		
		Если ЭтаФорма.ТекущийЭлемент = Элементы.Корреспонденты Тогда
			
			ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ОсновнойАдрес, 
					Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
				Возврат Контакт;
				
			Иначе
				
				Текст = НСтр("ru ='Для этого корреспондента не указан ни один адрес электронной почты.'");
				ПоказатьПредупреждение(, Текст);
				
				ВозвращаемоеВыданоПредупреждение = Истина;
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ТекущиеДанные = Элементы.КорреспондентыАдреса.ТекущиеДанные;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.АдресПочты) Тогда
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ТекущиеДанные.АдресПочты, 
					Строка(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо);
				Возврат Контакт;
				
			Иначе
				
				Если ТекущиеДанные.ЭтоКонтактноеЛицо 
					И ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда
					
					Если ЗначениеЗаполнено(ТекущиеДанные.ОсновнойАдрес) Тогда
						
						Контакт = Новый Структура("Адрес, Представление, Контакт", 
							ТекущиеДанные.ОсновнойАдрес, 
							Строка(ТекущиеДанные.КонтактноеЛицо), ТекущиеДанные.КонтактноеЛицо);
						Возврат Контакт;
						
					Иначе
								
						Текст = НСтр("ru ='Для этого контактного лица не указан ни один адрес электронной почты.'");
						ПоказатьПредупреждение(, Текст);
						
						ВозвращаемоеВыданоПредупреждение = Истина;
						Возврат Неопределено;
						
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда	
		
		Если ЭтаФорма.ТекущийЭлемент = Элементы.Физлица Тогда
			
			ТекущиеДанные = Элементы.Физлица.ТекущиеДанные;
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ОсновнойАдрес, 
					Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
				Возврат Контакт;

			Иначе
				
				Текст = НСтр("ru ='Для этого физического лица не указан ни один адрес электронной почты.'");
				ПоказатьПредупреждение(, Текст);
				
				ВозвращаемоеВыданоПредупреждение = Истина;
				Возврат Неопределено;
				
			КонецЕсли;	
			
		Иначе	
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.ФизлицаАдреса.ТекущиеДанные.АдресПочты, 
				Строка(Элементы.Физлица.ТекущаяСтрока), Элементы.Физлица.ТекущаяСтрока);
			Возврат Контакт;
			
		КонецЕсли;		
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		ТекущиеДанные = Элементы.ТаблицаНайденного.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				ТекущиеДанные.Адрес, ТекущиеДанные.Представление, ТекущиеДанные.Контакт);
			Возврат Контакт;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда	
		
		Если ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоКонтактов Тогда
		
			ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				
				ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
				
				Если ТаблицаКонтактов.Количество() <> 0 Тогда
					
					ОсновнойАдрес = "";
					
					Для Каждого Строка Из ТаблицаКонтактов Цикл
						
						Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
							ОсновнойАдрес = Строка.Значение;
							Прервать;
						КонецЕсли;	
							
					КонецЦикла;	
					
					// Если основной адрес не заполнен, берем первый.
					Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
						ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
					КонецЕсли;	
					
					Контакт = Новый Структура("Адрес, Представление, Контакт", 
						ОсновнойАдрес, Строка(ТекущиеДанные.Ссылка), ТекущиеДанные.Ссылка);
					Возврат Контакт;
					
				Иначе
					
					Текст = НСтр("ru ='Для этого личного адресата не указан ни один адрес электронной почты.'");					
					ПоказатьПредупреждение(, Текст);
					
					ВозвращаемоеВыданоПредупреждение = Истина;
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.ЛичныеАдресатыАдреса
			И Элементы.ЛичныеАдресатыАдреса.ТекущиеДанные <> Неопределено Тогда
			
			Контакт = Новый Структура("Адрес, Представление, Контакт", 
				Элементы.ЛичныеАдресатыАдреса.ТекущиеДанные.АдресПочты, 
				Строка(ТекущийЛичныйАдресат), ТекущийЛичныйАдресат);
			Возврат Контакт;
			
		ИначеЕсли ДеревоКонтактов.ПолучитьЭлементы().Количество() <> 0 Тогда // ничего не выделено - берем первую строку	
			
			ЭлементыЛичныхАдресатов = ДеревоКонтактов.ПолучитьЭлементы();
			
			Если ЭлементыЛичныхАдресатов.Количество() <> 0 Тогда
				
				Элементы.ДеревоКонтактов.ТекущаяСтрока = ЭлементыЛичныхАдресатов[0].ПолучитьИдентификатор();
				ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
				
				Контакт = Новый Структура("Адрес, Представление, Контакт", 
					ТекущиеДанные.АдресEmail, 
					ТекущиеДанные.Наименование, ТекущиеДанные.Ссылка);
				Возврат Контакт;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура НайтиАдресатов(Команда)
	
	НайтиАдресатовКлиент();	
			
КонецПроцедуры

&НаКлиенте
Процедура НайтиАдресатовКлиент()
	
	Попытка
		
		Если СтрДлина(СтрокаПоиска) < 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Строка поиска должна быть не менее двух знаков.'"));
			Возврат;
		КонецЕсли;
		
		ТаблицаНайденного.Очистить();
		
		НайтиНаСервере();
		
		Если СлишкомМногоРезультатов Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Полнотекстовый поиск не может быть выполнен. Найдено слишком много результатов, уточните запрос.'"));
			Возврат;
		КонецЕсли;
		
		Если ПолноеКоличество > 50 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Найдено более 50 адресатов. Уточните поисковое выражение и повторите поиск.'"));
		КонецЕсли;
		
		Если ТаблицаНайденного.Количество() <> 0 Тогда
			СохранениеВводимыхЗначенийКлиент.ОбновитьСписокВыбора(ЭтаФорма, "СтрокаПоиска");
		КонецЕсли;	
		
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки	
			
КонецПроцедуры

&НаСервере
Процедура НайтиНаСервере()
	
	ТекущаяСтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	НайтиНаСервереРеализация(ТекущаяСтрокаПоиска);
	
	Если ТаблицаНайденного.Количество() = 0 И Прав(ТекущаяСтрокаПоиска, 1) <> "*" Тогда
		ТекущаяСтрокаПоиска = ТекущаяСтрокаПоиска + "*";
		НайтиНаСервереРеализация(ТекущаяСтрокаПоиска);		
	КонецЕсли;
	
	Если ТаблицаНайденного.Количество() = 0 Тогда
		Элементы.СтраницыНайденного.ТекущаяСтраница = Элементы.СтраницаНичегоНеНайдено;
	Иначе	
		Элементы.СтраницыНайденного.ТекущаяСтраница = Элементы.СтраницаСписокНайденного;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере 
Функция ПолучитьИспользованиеПользователя(ОтборПоРангу, Ранг)
	
	ДобавитьЭтогоПользователя = Истина;
	
	Если Ранг <> Null Тогда
		
		Если ОтборПоРангу = -1 И Ранг <> 0 Тогда // -1 - Любой ранг - ненулевой
			ДобавитьЭтогоПользователя = Истина;
			Возврат ДобавитьЭтогоПользователя;
		КонецЕсли;
		
		Если ОтборПоРангу <> Ранг Тогда
			ДобавитьЭтогоПользователя = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ДобавитьЭтогоПользователя;
	
КонецФункции	

&НаСервере
Процедура НайтиНаСервереРеализация(ТекущаяСтрокаПоиска)
	
	РезультатовНаСтранице = 50;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(ТекущаяСтрокаПоиска, РезультатовНаСтранице);
	
	ОбластьПоиска = Новый Массив;
	ОбластьПоиска.Добавить(Метаданные.Справочники.Корреспонденты);
	ОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛица);
	ОбластьПоиска.Добавить(Метаданные.Справочники.Пользователи);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ФизическиеЛица);
	ОбластьПоиска.Добавить(Метаданные.Справочники.РолиИсполнителей);
	ОбластьПоиска.Добавить(Метаданные.Справочники.ЛичныеАдресаты);
	
	СписокПоиска.ОбластьПоиска = ОбластьПоиска;
	СписокПоиска.ПолучатьОписание = Ложь;
	
	ВремяНачалаПоиска = ТекущаяДатаСеанса();
	
	СписокПоиска.ПерваяЧасть();
	
	СлишкомМногоРезультатов = СписокПоиска.СлишкомМногоРезультатов();
	КоличествоРезультатов = СписокПоиска.Количество();
	ПолноеКоличество = СписокПоиска.ПолноеКоличество();
	
	Для каждого Результат Из СписокПоиска Цикл
		
		ТаблицаКонтактов = ПолучитьАдреса(Результат.Значение, Ложь);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЗначениеЗаполнено(Строка.Значение) Тогда // адрес заполнен
					
					ДобавитьНайденногоАдресата(Результат.Значение, Строка.Значение);
					
				КонецЕсли;
					
			КонецЦикла;	
			
		Иначе
			ДобавитьНайденногоАдресата(Результат.Значение, ""); // без адреса тоже добавляем
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНайденногоАдресата(Контакт, Адрес)
	
	ДобавитьЭтогоПользователя = Истина;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контакт, "ПометкаУдаления, Недействителен");
		
		Если Ранг <> 0 Тогда
			СведенияПользователей = РегистрыСведений.СведенияОПользователях.Получить(Новый Структура("Пользователь", Контакт));
			РангПользователя = СведенияПользователей.Ранг;
			ДобавитьЭтогоПользователя = ПолучитьИспользованиеПользователя(Ранг, РангПользователя);
		КонецЕсли;	
		
		Если ЗначенияРеквизитов.ПометкаУдаления Или ЗначенияРеквизитов.Недействителен Тогда
			ДобавитьЭтогоПользователя = Ложь;
		КонецЕсли;	
		
	Иначе
		
		Если Ранг <> 0 Тогда
			ДобавитьЭтогоПользователя = Ложь; // не показываем например Корреспондентов, если задан отбор по **
		КонецЕсли;		
		
	КонецЕсли;	
	
	Если ДобавитьЭтогоПользователя И ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Для Каждого Строка Из ТаблицаНайденного Цикл
			Если Строка.ФизЛицо = Контакт Тогда  // уже есть пользователь, физлицо не добавляем
				ДобавитьЭтогоПользователя = Ложь;
				Прервать;
			КонецЕсли;				
		КонецЦикла;	
	КонецЕсли;			
	
	Если ДобавитьЭтогоПользователя И ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контакт, "ФизЛицо");
		
		Для Каждого Строка Из ТаблицаНайденного Цикл
			Если Строка.Контакт = ФизЛицо Тогда // уже есть физлицо, заменяем его на пользователя
				
				Строка.Контакт = Контакт;
				Строка.Адрес = Адрес;
				Строка.Представление = ПолучитьПолноеПредставлениеАдреса(Строка.Адрес, Строка.Контакт);
				Строка.ФизЛицо = ФизЛицо;
				
				Возврат;
			КонецЕсли;				
		КонецЦикла;	
		
	КонецЕсли;			
	
	Если ДобавитьЭтогоПользователя Тогда
		
		НоваяСтрока = ТаблицаНайденного.Добавить();
		НоваяСтрока.Контакт = Контакт;
		НоваяСтрока.Адрес = Адрес;
		НоваяСтрока.Представление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
			НоваяСтрока.ФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контакт, "ФизЛицо");
		КонецЕсли;		
		
	КонецЕсли;
				
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоиска = ВыбранноеЗначение;
	НайтиАдресатовКлиент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МножественныйВыбор Тогда
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		ПеренестиВыделенныеСтрокиПоиска(ВыделенныеСтроки);
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиПоиска(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ТаблицаНайденного.НайтиПоИдентификатору(ИдСтроки);
		
		АдресEmail = СтрокаДанных.Адрес;
		Если ЗначениеЗаполнено(АдресEmail) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", АдресEmail);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = АдресEmail;
				НоваяСтрока.Представление = Строка(СтрокаДанных.Контакт);
				НоваяСтрока.Контакт = СтрокаДанных.Контакт;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущуюСтрокуПолучателей()
	
	Если ПолучателиПисьма.Количество() <> 0 Тогда
		ИдентификаторПоследнейДобавленнойСтроки = ПолучателиПисьма[ПолучателиПисьма.Количество() - 1].ПолучитьИдентификатор();
		Элементы.ПолучателиПисьма.ТекущаяСтрока = ИдентификаторПоследнейДобавленнойСтроки;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	НайтиАдресатовКлиент();	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контакт) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			Элемент.ТекущиеДанные.Контакт, Элемент.ТекущиеДанные.Адрес);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контакт) Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если МножественныйВыбор Тогда
	
		Если ТекущиеДанные.ЭтоАдресат Тогда
			
			ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
			
			Если ТаблицаКонтактов.Количество() <> 0 Тогда
				
				ОсновнойАдрес = "";
				
				Для Каждого Строка Из ТаблицаКонтактов Цикл
					
					Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
						ОсновнойАдрес = Строка.Значение;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
				// Если основной адрес не заполнен, берем первый.
				Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
					ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
				КонецЕсли;	
				
				Если Не ДобавитьАдрес(ОсновнойАдрес, ТекущиеДанные.Ссылка) Тогда
					ПоказатьПредупреждение(, НСтр("ru='Личный адресат с таким адресом почты уже выбран.'"));
				КонецЕсли;	
				
			Иначе
				
				Текст = НСтр("ru ='Для этого личного адресата не указан ни один адрес электронной почты.'");
				ПоказатьПредупреждение(, Текст);
				
			КонецЕсли;
			
		Иначе // группа личных адресатов
			
			ПеренестиВВыбранныеАдресаЛичныхАдресатов(Элементы.ДеревоКонтактов.ТекущаяСтрока);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоАдресат Тогда
			ВыполнитьВыборВОдиночномРежиме();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаЛичныхАдресатов(ИдСтроки)
	
	СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(Элементы.ДеревоКонтактов.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(СтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(СтрокаДерева)
	
	Если СтрокаДерева.ЭтоАдресат Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Ссылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			ДобавитьАдрес(ОсновнойАдрес, СтрокаДерева.Ссылка);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПеренестиВВыбранныеАдресаВсехЛичныхАдресатовВГруппе(ЭлементДерева);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда
		ДеревоКонтактовПриАктивизацииСтрокиВыполнить();	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
		
		Если ТекущийЛичныйАдресат <> ТекущаяСтрока Тогда
			
			ТекущийЛичныйАдресат = ТекущаяСтрока;
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			
			ПодключитьОбработчикОжидания("ОбновитьЛичногоАдресата", 0.4, Истина);
			ЗаполнитьЛичныеАдресатыАдреса(ТекущаяСтрока);
		КонецЕсли;	
		
	Иначе	
		
		ТекущийКонтактДляКарточкиПользователя = "";		
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛичногоАдресата()
	
	ЗаполнитьЛичныеАдресатыАдреса(ТекущийЛичныйАдресат);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛичныеАдресатыАдреса(ТекущаяСтрока)
	
	ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	
	ЛичныеАдресатыАдреса.Очистить();
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(ТекущаяСтрока, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		НоваяСтрока = ЛичныеАдресатыАдреса.Добавить();
		
		НоваяСтрока.АдресПочты = Строка.Значение;
		НоваяСтрока.ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Строка.Значение, Строка.Вид);
		НоваяСтрока.НомерКартинки = 1;
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиМоихКонтактов(Знач ВыделенныеСтроки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = ЛичныеАдресатыАдреса.НайтиПоИдентификатору(ИдСтроки);
		
		Если ЗначениеЗаполнено(СтрокаДанных.АдресПочты) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", СтрокаДанных.АдресПочты);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = СтрокаДанных.АдресПочты;
				НоваяСтрока.Представление = Строка(ТекущийЛичныйАдресат);
				НоваяСтрока.Контакт = ТекущийЛичныйАдресат;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныеАдресатыАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если МножественныйВыбор Тогда
		
		Если Не ДобавитьАдрес(Элементы.ЛичныеАдресатыАдреса.ТекущиеДанные.АдресПочты, ТекущийЛичныйАдресат) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Личный адресат с таким адресом почты уже выбран.'"));
		КонецЕсли;	
		
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныеАдресатыАдресаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.АдресПочты) Тогда
		Данные = Новый Структура("Контакт, Адрес",
			ТекущийЛичныйАдресат, Элемент.ТекущиеДанные.АдресПочты);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	ДеревоКонтактовНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания)
	
	ТекущиеДанные = Элементы.ДеревоКонтактов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// добавляем ссылки - для внутреннего перетаскивания
	Для Каждого СтрокаИд Из Элементы.ДеревоКонтактов.ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаИд);
		
		Данные = Новый Структура("Ссылка", СтрокаДерева.Ссылка);
		ПараметрыПеретаскивания.Значение.Добавить(Данные);
		
	КонецЦикла;
	
	Если ТекущиеДанные.ЭтоАдресат Тогда
		
		ТаблицаКонтактов = ПолучитьАдреса(ТекущиеДанные.Ссылка);
		
		Если ТаблицаКонтактов.Количество() <> 0 Тогда
			
			ОсновнойАдрес = "";
			
			Для Каждого Строка Из ТаблицаКонтактов Цикл
				
				Если ЭтоОсновнойАдрес(Строка.Вид) Тогда
					ОсновнойАдрес = Строка.Значение;
					Прервать;
				КонецЕсли;	
					
			КонецЦикла;	
			
			// Если основной адрес не заполнен, берем первый.
			Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
				ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
			КонецЕсли;	
			
			Данные = Новый Структура("Контакт, Адрес",
				ТекущиеДанные.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
			
		КонецЕсли;
		
	Иначе // группа пользователей или отдел
		
		ДобавитьАдресаКонтактовВПараметрыПеретаскивания(Элементы.ДеревоКонтактов.ТекущаяСтрока, ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаКонтактовВПараметрыПеретаскивания(ИдСтроки, ПараметрыПеретаскиванияЗначение)
	
	СтрокаДерева = ДеревоКонтактов.НайтиПоИдентификатору(Элементы.ДеревоКонтактов.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(СтрокаДерева, ПараметрыПеретаскиванияЗначение)
	
	Если СтрокаДерева.ЭтоАдресат Тогда
		
		ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДерева.Ссылка);
		Если ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Данные = Новый Структура("Контакт, Адрес",
				СтрокаДерева.Ссылка, ОсновнойАдрес);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
		КонецЕсли;	
		
	Иначе	
		
		Для Каждого ЭлементДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ДобавитьАдресаКонтактовВПараметрыПеретаскиванияВсехКонтактовВГруппе(ЭлементДерева, ПараметрыПеретаскиванияЗначение);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущаяГруппа = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяГруппа = Элементы.ДеревоКонтактов.ТекущиеДанные.Группа;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Родитель", ТекущаяГруппа);
	Если Копирование Тогда
		ПараметрыФормы.Вставить("КопируемыйЭлемент", Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеАдресатовИВосстановлениеСостоянияДерева",
		ЭтотОбъект);

	ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеАдресатовИВосстановлениеСостоянияДерева(Результат, Параметры) Экспорт 
	
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАдресатовИВосстановитьСостояниеДерева()
	
	СостояниеРаскрытости = Новый Соответствие;
	
	ТекущаяСсылка = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСсылка = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	Для Каждого Строка Из КореньДерева Цикл
		СтрокаРазвернута = Элементы.ДеревоКонтактов.Развернут(Строка.ПолучитьИдентификатор());
		СостояниеРаскрытости[Строка.Ссылка] = СтрокаРазвернута;
	КонецЦикла;
	
	ЗаполнитьЛичныеАдресаты();
	
	КореньДерева = ДеревоКонтактов.ПолучитьЭлементы();
	
	ТекущийИдентификатор = Неопределено;
	Если ТекущаяСсылка <> Неопределено Тогда
		ТекущийИдентификатор = НайтиИдентификаторКонтактаПоСсылке(КореньДерева, ТекущаяСсылка);
	КонецЕсли;
	
	Для Каждого Строка Из КореньДерева Цикл
		
		СтрокаРазвернута = СостояниеРаскрытости.Получить(Строка.Ссылка);
		
		Если СтрокаРазвернута = Истина Тогда
			Элементы.ДеревоКонтактов.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;	
		
	КонецЦикла;
	
	Элементы.ДеревоКонтактов.ТекущаяСтрока = ТекущийИдентификатор;
	
КонецПроцедуры

&НаКлиенте 
Функция НайтиИдентификаторКонтактаПоСсылке(ЭлементыДерева, ТекущаяСсылка)
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		Если Строка.Ссылка = ТекущаяСсылка Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		ДочерниеЭлементыДерева = Строка.ПолучитьЭлементы();
		Идентификатор = НайтиИдентификаторКонтактаПоСсылке(ДочерниеЭлементыДерева, ТекущаяСсылка);
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ДеревоКонтактовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент", Элемент);

	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			Пометка = Элемент.ТекущиеДанные.ПометкаУдаления;
			ПараметрыОповещения.Вставить("Множественный", Ложь);
			
			Если Пометка Тогда 
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Cнять с ""%1"" пометку на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пометить ""%1"" на удаление?'"),
					Строка(Элемент.ТекущиеДанные.Наименование));
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Пометка = Истина;
		Для Каждого СтрокаТаблицы Из Элемент.ВыделенныеСтроки Цикл
			СтрокаТаблицыКонтакт = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыКонтакт.ПометкаУдаления = Истина Тогда
				Пометка = Ложь;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		ПараметрыОповещения.Вставить("Множественный", Истина);

		Если Пометка Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения.Вставить("Пометка", Пометка);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКонтактовПередУдалениемПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	
	Элемент = Параметры.Элемент;
	Пометка = Параметры.Пометка;
	
	Если Параметры.Множественный Тогда 
		ПометитьНаУдалениеСтроки(Элемент.ВыделенныеСтроки, Пометка);
	Иначе 	
		Ссылка = Элемент.ТекущиеДанные.Ссылка;
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Ссылка = Элемент.ТекущиеДанные.Группа;
		КонецЕсли;	
			
		ПометитьНаУдаление(Ссылка, Не Пометка);
	КонецЕсли;	
	
	ЗаполнитьЛичныеАдресаты();	

КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдаление(Ссылка, Пометка)
	
	ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
	СправочникОбъект = Ссылка.ПолучитьОбъект();
	СправочникОбъект.УстановитьПометкуУдаления(Пометка, Истина);
	РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеСтроки(Знач МассивСтрок, Пометка)
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицыКонтакт = ДеревоКонтактов.НайтиПоИдентификатору(СтрокаТаблицы);
		ПометитьНаУдаление(СтрокаТаблицыКонтакт.Ссылка, Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзOutlook(Команда)
	
	Состояние(НСтр("ru='Выполняется загрузка из адресной книги Outlook. Пожалуйста подождите...'"));
	
	МассивКонтактов = РаботаСЛичнымиАдресатамиКлиент.ЗагрузитьКонтактыИзOutlook();

	ЧислоЗагруженных = РаботаСЛичнымиАдресатами.ЗаписатьКонтакты(МассивКонтактов);
	ЗаполнитьЛичныеАдресаты();
	
	Состояние();
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Загрузка из адресной книги Outlook завершена. Загружено: %1.'"), 
		Формат(ЧислоЗагруженных, "ЧН=0"));
	ПоказатьПредупреждение(, СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура МоиКонтактыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		МоиКонтактыПриАктивизацииСтрокиВыполнить();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.МоиКонтакты.ТекущиеДанные.Контакт;
		Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ТекущаяСтрока = Элементы.МоиКонтакты.ТекущиеДанные.ГруппаКонтактовПользователей;
		КонецЕсли;	
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийКонтактИзбранного = ТекущаяСтрока;
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ТекущийИдентификаторСтрокиМоиКонтакты = Элементы.МоиКонтакты.ТекущаяСтрока;
			
			ПодключитьОбработчикОжидания("ОбновитьКарточкуМоиКонтакты", 0.4, Истина);
			
		КонецЕсли;
		
	Иначе	
		
		ТекущийКонтактДляКарточкиПользователя = "";		
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКарточкуМоиКонтакты()
	
	Если Не Элементы.ГруппаКарточкаПользователя.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
		ЗаполнитьКарточкуМоиКонтакты(ТекущийКонтактДляКарточкиПользователя);
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуМоиКонтакты(ТекущаяСтрока)
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Корреспонденты") 
		Или ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.КонтактныеЛица") 
		Или ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		СтрокаДанных = МоиКонтакты.НайтиПоИдентификатору(ТекущийИдентификаторСтрокиМоиКонтакты);
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных.ОсновнойАдрес = ПолучитьОсновнойАдрес(ТекущаяСтрока);
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗаполнитьКарточкуКонтакта(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКарточкуКонтакта()
	
	Если Не Элементы.ГруппаКарточкаПользователя.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийКонтактДляКарточкиПользователя) Тогда
		ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуКонтакта(ТекущаяСтрока)
	
	Если Не Элементы.ГруппаКарточкаПользователя.Видимость Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗаполнятьКарточкуПользователя Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПолучатьФотографии Тогда
	
		Если ЭтоАдресВременногоХранилища(Фотография) Тогда
			УдалитьИзВременногоХранилища(Фотография);
		КонецЕсли;	
		
		Фотография = "";
		Если ЗначениеЗаполнено(ТекущаяСтрока) И ТипЗнч(ТекущаяСтрока) <> Тип("Строка") Тогда
			
			ЕстьКартинка = Ложь;
			Фотография = РаботаСФотографиями.ПолучитьАдресФото(ТекущаяСтрока, УникальныйИдентификатор, ЕстьКартинка);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Фотография) Тогда
			Фотография = "";
			ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		Иначе	
			ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФотография;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// карточка пользователя
	ОписаниеПользователя = "";
	ОписаниеПользователяИмя = Строка(ТекущаяСтрока);
	ОписаниеПользователяПодразделение = "";
	
	// Заполнение подразделения и должности
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда
		СведенияПользователей = РегистрыСведений.СведенияОПользователях.Получить(Новый Структура("Пользователь", ТекущаяСтрока));
		ОписаниеПользователяПодразделение = Строка(СведенияПользователей.Подразделение);
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Руководитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "Руководитель");
		Если ЗначениеЗаполнено(Руководитель) Тогда
			ОписаниеПользователяПодразделение = НСтр("ru='Руководитель: '") + Строка(Руководитель);
		КонецЕсли;	
	КонецЕсли;
	
	// карточка пользователя
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеПользователя, Символы.ПС, ОписаниеПользователяИмя);	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ОписаниеПользователя, Символы.ПС, ОписаниеПользователяПодразделение);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыСпискиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		ДеревоПользователейПриАктивизацииСтрокиВыполнить();
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		МоиКонтактыПриАктивизацииСтрокиВыполнить();
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		КорреспондентыАдресаПриАктивизацииСтрокиВыполнить();
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
		ФизлицаПриАктивизацииСтрокиВыполнить();		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		ТаблицаНайденногоПриАктивизацииСтрокиВыполнить();
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда
		ДеревоКонтактовПриАктивизацииСтрокиВыполнить();			
	КонецЕсли;
	
	ЗаполнитьКарточкуКонтакта(ТекущийКонтактДляКарточкиПользователя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНайденногоПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		ТаблицаНайденногоПриАктивизацииСтрокиВыполнить();
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаНайденногоПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.ТаблицаНайденного.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаНайденного.ТекущиеДанные.Контакт;
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.4, Истина);
			
		КонецЕсли;
		
	Иначе	
		ТекущийКонтактДляКарточкиПользователя = "";		
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		КорреспондентыАдресаПриАктивизацииСтрокиВыполнить();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыАдресаПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.КорреспондентыАдреса.ТекущиеДанные <> Неопределено Тогда
	
		ТекущаяСтрока = Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо;
		Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ТекущаяСтрока = ТекущийКорреспондент;
		КонецЕсли;	
		
		Если ТекущийКонтактДляКарточкиПользователя <> ТекущаяСтрока Тогда
			
			ТекущийКонтактДляКарточкиПользователя = ТекущаяСтрока;
			ТекущийКорреспондент = ТекущаяСтрока;
			ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.4, Истина);
			
		КонецЕсли;	
		
	Иначе
		
		ОчиститьКарточкуПользователя();
		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура Готово(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтакты(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		
		Если ЕстьГруппыВИзбранном Тогда 
			
			ПараметрыФормы = Новый Структура;
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавитьВМоиКонтакты", ЭтотОбъект);
			ОткрытьФорму(
				"Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Иначе
			
			ДобавитьВИзбранноеПользователяСервер(Элементы.ДеревоПользователей.ВыделенныеСтроки);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВМоиКонтакты(ГруппаИзбранного, Параметры) Экспорт

	Если ГруппаИзбранного <> Неопределено Тогда
		ДобавитьВИзбранноеПользователяСервер(Элементы.ДеревоПользователей.ВыделенныеСтроки, ГруппаИзбранного);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьВИзбранноеПользователяСервер(Знач ВыделенныеСтроки, ГруппаИзбранного = Неопределено)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ДеревоПользователей.НайтиПоИдентификатору(ИдСтроки);
		Контакт = СтрокаДанных.Пользователь;
		Если Не ЗначениеЗаполнено(Контакт) Тогда
			Контакт = СтрокаДанных.ГруппаПользователей;
		КонецЕсли;	
		ДобавитьВМоиКонтактыСервер(Контакт, ГруппаИзбранного);
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьВМоиКонтактыСервер(Контакт, ГруппаИзбранного = Неопределено, Адрес = Неопределено)
	
	Если Адрес = Неопределено Тогда
		
		Адрес = "";
		
		Если ТипЗнч(Контакт) <> Тип("СправочникСсылка.ГруппыПользователей")
			И ТипЗнч(Контакт) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Адрес = ПолучитьОсновнойАдрес(Контакт);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Не Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Контакт, Адрес, ГруппаИзбранного) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ЗаполнитьМоиКонтакты();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГруппуВИзбранное(Команда)
	
	ПараметрыФормы = Новый Структура("ЭтоГруппаКонтактов", Истина);
	ОткрытьФорму("Справочник.ГруппыКонтактовПользователей.ФормаОбъекта", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.МоиКонтакты.ТекущиеДанные.ЭтоГруппа Тогда
			ПоказатьЗначение(, Элементы.МоиКонтакты.ТекущиеДанные.ГруппаКонтактовПользователей);
		ИначеЕсли ТипЗнч(Элементы.МоиКонтакты.ТекущиеДанные.Контакт) <> Тип("Строка") Тогда
			ПоказатьЗначение(, Элементы.МоиКонтакты.ТекущиеДанные.Контакт);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	МоиКонтактыДобавитьВЗначениеПеретаскивания(Элементы.МоиКонтакты.ВыделенныеСтроки, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаСервере
Процедура МоиКонтактыДобавитьВЗначениеПеретаскивания(Знач ВыделенныеСтроки, ПараметрыПеретаскиванияЗначение)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаДанных = МоиКонтакты.НайтиПоИдентификатору(ИдСтроки);
		АдресEmail = СтрокаДанных.КонтактнаяИнформация;
		
		Если Не СтрокаДанных.ЭтоГруппа Тогда
			// добавляем для перетаскивания внутри моих контактов
			Данные = Новый Структура("Контакт, Адрес, ГруппаКонтактовПользователей",
				СтрокаДанных.Контакт, СтрокаДанных.КонтактнаяИнформация,
				СтрокаДанных.ГруппаКонтактовПользователей);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
		КонецЕсли;	
			
		Если СтрокаДанных.ЭтоАвтоподстановка Тогда
			
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);
			
			ЗначениеАвтоподстановки = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(СтрокаДанных.Контакт);
				
			Если ЗначениеАвтоподстановки <> Неопределено Тогда
						
				Для Каждого Контакт Из ЗначениеАвтоподстановки Цикл
					
					АдресEmail = ПолучитьОсновнойАдрес(Контакт);
					Если ЗначениеЗаполнено(АдресEmail) Тогда

						Данные = Новый Структура("Контакт, Адрес",
							Контакт, АдресEmail);
							
						ПараметрыПеретаскиванияЗначение.Добавить(Данные);
						
					КонецЕсли;	
					
				КонецЦикла;	
				
			КонецЕсли;	
			
		ИначеЕсли СтрокаДанных.ЭтоГруппа Тогда
			
			Для Каждого СтрокаТаблЧасти Из СтрокаДанных.ГруппаКонтактовПользователей.Контакты Цикл 
				
				Контакт = СтрокаТаблЧасти.Контакт;  
				Адрес = СтрокаТаблЧасти.КонтактнаяИнформация;
				ЭтоАвтоподстановка = (ТипЗнч(Контакт) = Тип("Строка"));
				
				Если ЭтоАвтоподстановка Тогда
					
					ЗначениеАвтоподстановки = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(Контакт);
						
					Если ЗначениеАвтоподстановки <> Неопределено Тогда
						
						Для Каждого Контакт Из ЗначениеАвтоподстановки Цикл
							
							АдресEmail = ПолучитьОсновнойАдрес(Контакт);
							Если ЗначениеЗаполнено(АдресEmail) Тогда

								Данные = Новый Структура("Контакт, Адрес",
									Контакт, АдресEmail);
									
								ПараметрыПеретаскиванияЗначение.Добавить(Данные);
								
							КонецЕсли;	
							
						КонецЦикла;	
						
					КонецЕсли;	
					
				ИначеЕсли ЗначениеЗаполнено(Контакт) 
					И (ТипЗнч(Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
					Или ТипЗнч(Контакт) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
					
					ЗаполнитьДеревоПользователейДляИзбранного(Контакт);
					
					ИдентификаторВДеревеПользователей = НайтиИдентификаторГруппыПоСсылке(ДеревоПользователейДляИзбранного.ПолучитьЭлементы(), 
						Контакт);
					
					ВыделенныеСтрокиПользователей = Новый Массив;
					ВыделенныеСтрокиПользователей.Добавить(ИдентификаторВДеревеПользователей);
					ДеревоПользователейНачалоПеретаскиванияСервер(
						ДеревоПользователейДляИзбранного,
						ВыделенныеСтрокиПользователей, 
						ПараметрыПеретаскиванияЗначение);
					
				Иначе	
					
					Если ЗначениеЗаполнено(Адрес) Тогда
						Данные = Новый Структура("Контакт, Адрес",
							Контакт, Адрес);
							
						ПараметрыПеретаскиванияЗначение.Добавить(Данные);
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			
		ИначеЕсли ЗначениеЗаполнено(АдресEmail) Тогда   

			// просто пользователь/физлицо/корреспондент - добавляем для перетаскивания в Выбранное
			Данные = Новый Структура("Контакт, Адрес",
				СтрокаДанных.Контакт, СтрокаДанных.КонтактнаяИнформация);
			ПараметрыПеретаскиванияЗначение.Добавить(Данные);	
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Контакт) 
			И (ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.ГруппыПользователей") 
			Или ТипЗнч(СтрокаДанных.Контакт) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			// группа пользователей или отдел
			
			ЗаполнитьДеревоПользователейДляИзбранного(СтрокаДанных.Контакт);
			
			ИдентификаторВДеревеПользователей = НайтиИдентификаторГруппыПоСсылке(
				ДеревоПользователейДляИзбранного.ПолучитьЭлементы(), 
				СтрокаДанных.Контакт);
				
			ВыделенныеСтрокиПользователей = Новый Массив;
			ВыделенныеСтрокиПользователей.Добавить(ИдентификаторВДеревеПользователей);
			ДеревоПользователейНачалоПеретаскиванияСервер(
				ДеревоПользователейДляИзбранного,
				ВыделенныеСтрокиПользователей, 
				ПараметрыПеретаскиванияЗначение);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПользователейДляИзбранного(Контакт)
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ЗаполнитьДеревоПользователейДляИзбранногоВГруппах();
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		ЗаполнитьДеревоПользователейДляИзбранногоВОтделах();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПользователейДляИзбранногоВГруппах()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВГруппах();
		
	ДеревоПользователейДляИзбранного.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователейДляИзбранного.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	СтрокаВсеПользователи = Неопределено; 
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВГруппах(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп, СтрокаВсеПользователи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПользователейДляИзбранногоВОтделах()
	
	ВыборкаДерево = ПользователиСерверПовтИсп.ПолучитьПользователейВПодразделениях();
		
	ДеревоПользователейДляИзбранного.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователейДляИзбранного.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	ВыборкаДерево.Строки.Сортировать("ГруппаНаименование, ПользователиНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево, КореньДерева, ВеткиДереваДляГрупп);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
		
		СостояниеРаскрытости = Неопределено;
		ТекущаяСсылка = Неопределено;
		
		Действие = ПараметрыПеретаскивания.Действие;
		ЭтоПеремещение = Ложь;
		Если Действие = ДействиеПеретаскивания.Перемещение Тогда
			ЭтоПеремещение = Истина;
		КонецЕсли;	
		
		ЗапомнитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		ПеретаскиваниеПеренестиИзбранное(ПараметрыПеретаскивания.Значение, Строка, ЭтоПеремещение);
		ВосстановитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Процедура ПеретаскиваниеПеренестиИзбранное(ПараметрыПеретаскиванияЗначение, ИдСтрокиНазначения, ЭтоПеремещение)
	
	ГруппаНазначения = Неопределено;
	БылиИзмененыДанные = Ложь;
	
	Если ИдСтрокиНазначения <> Неопределено Тогда
		СтрокаДанныхНазначения = МоиКонтакты.НайтиПоИдентификатору(ИдСтрокиНазначения);
		ГруппаНазначения = СтрокаДанныхНазначения.ГруппаКонтактовПользователей;
	КонецЕсли;	
	
	Для Каждого Данные Из ПараметрыПеретаскиванияЗначение Цикл
		
		// т.е. перетаскивание из Избранного в МоиКонтакты
		Если Данные.Свойство("ГруппаКонтактовПользователей") Тогда
			
			ГруппаИсходная = Данные.ГруппаКонтактовПользователей;
			
			Если ГруппаНазначения <> ГруппаИсходная Тогда
				
				ПеренестиЭтотЭлемент = Истина;
				
				Если ЗначениеЗаполнено(ГруппаНазначения)
					И ТипЗнч(ГруппаНазначения) = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
					И ГруппаНазначения.ОбщийСписокРассылки
					И ТипЗнч(Данные.Контакт) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
					ПеренестиЭтотЭлемент = Ложь;
				КонецЕсли;	
				
				Если ПеренестиЭтотЭлемент Тогда
					Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Данные.Контакт, Данные.Адрес, ГруппаНазначения);
					Если ЭтоПеремещение Тогда
						Справочники.ГруппыКонтактовПользователей.УдалитьКонтакт(Данные.Контакт, Данные.Адрес, ГруппаИсходная);
					КонецЕсли;	
					БылиИзмененыДанные = Истина;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла;	
	
	Если БылиИзмененыДанные Тогда
		ЗаполнитьМоиКонтакты();
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьАвтосписок(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьАвтосписокПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("ОбщаяФорма.ВыборАвтоПодстановки", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтосписокПродолжение(Значение, Параметры) Экспорт 
	
	Если ТипЗнч(Значение) = Тип("ЭлементСпискаЗначений") Тогда
		
		ГруппаИзбранного = Неопределено;
		Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
			ГруппаИзбранного = Элементы.МоиКонтакты.ТекущиеДанные.ГруппаКонтактовПользователей;
		КонецЕсли;	
		
		СостояниеРаскрытости = Неопределено;
		ТекущаяСсылка = Неопределено;
		ЗапомнитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		
		КодВозврата = ДобавитьВМоиКонтактыАвтоподстановкуСервер(Значение.Представление, ГруппаИзбранного);
		Если КодВозврата = Ложь Тогда
			ПоказатьПредупреждение(, Нстр("ru='Такой адресат уже есть в группе ""Мои контакты""'"));
		КонецЕсли;	
		
		ТекущаяСсылка = Значение.Представление;
		
		ВосстановитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);

	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ДобавитьВМоиКонтактыАвтоподстановкуСервер(Значение, ГруппаИзбранного = Неопределено)
	
	Адрес = "";
	Если Не Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Значение, 
		Адрес, ГруппаИзбранного) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ЗаполнитьМоиКонтакты();
	ОбновитьЗакладкуКонтактов();
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура МоиКонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.МоиКонтакты.ТекущиеДанные;
		
		Если ТекущиеДанные.ЭтоАвтоподстановка И МножественныйВыбор Тогда
			
			ЗначениеАвтоподстановки = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(
				ТекущиеДанные.Контакт);
				
			Если ЗначениеАвтоподстановки <> Неопределено Тогда
					
				Если ЗначениеАвтоподстановки.Количество() > 10 Тогда					
					Состояние(НСтр("ru='Выполняется выбор всех пользователей в группе...'"));
				КонецЕсли;
				
				ПеренестиМассивКонтактовВВыбранныеАдреса(ЗначениеАвтоподстановки);
				
				Состояние();
				
			КонецЕсли;	
			
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если МножественныйВыбор Тогда
		
		ВыделенныеСтроки = Новый Массив;
		ВыделенныеСтроки.Добавить(ВыбраннаяСтрока);
		СтрокаПредупреждения = "";
		
		ПеренестиВыделенныеСтрокиИзбранного(ВыделенныеСтроки, СтрокаПредупреждения);
		
		Если ЗначениеЗаполнено(СтрокаПредупреждения) Тогда
			ПоказатьПредупреждение(, СтрокаПредупреждения);
		КонецЕсли;	
		
	Иначе
		ВыполнитьВыборВОдиночномРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиМассивКонтактовВВыбранныеАдреса(МассивКонтактов)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Адрес");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("Контакт");
	Результат.Колонки.Добавить("Группа");
	Результат.Колонки.Добавить("СписокАдресов");
	Результат.Колонки.Добавить("ПолноеПредставление");

	Для Каждого Контакт Из МассивКонтактов Цикл
		
		АдресEmail = ПолучитьОсновнойАдрес(Контакт);
		
		Если ЗначениеЗаполнено(АдресEmail) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Адрес", АдресEmail);
			Строки = ПолучателиПисьма.НайтиСтроки(Отбор);
			
			Если Строки.Количество() = 0 Тогда
			
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.Адрес = АдресEmail;
				НоваяСтрока.Представление = Строка(Контакт);
				НоваяСтрока.Контакт = Контакт;
				НоваяСтрока.Группа = ГруппаПоУмолчанию;
				НоваяСтрока.ПолноеПредставление = ПолучитьПолноеПредставлениеАдреса(НоваяСтрока.Адрес, НоваяСтрока.Контакт);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ПолучателиПисьма);
	ПолучателиПисьма.Сортировать("Представление Возр");
	ОбновитьВыбранныеАдресаПодпись(ЭтаФорма);
	
	ОбновитьТекущуюСтрокуПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ГруппыВыбранныхКонтактов = Новый Соответствие;
	КоличествоВыбранныхКонтактов = Элементы.МоиКонтакты.ВыделенныеСтроки.Количество();
	ГруппаКонтактовПользователей = Неопределено;
	ЭтоКорневаяГруппа = Ложь;
	
	Для Каждого ИдСтроки Из Элементы.МоиКонтакты.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.МоиКонтакты.ДанныеСтроки(ИдСтроки);
		ГруппаКонтактовПользователей = ДанныеСтроки.ГруппаКонтактовПользователей;
		ЭтоКорневаяГруппа = ДанныеСтроки.ЭтоКорневаяГруппа;
		ГруппыВыбранныхКонтактов.Вставить(ГруппаКонтактовПользователей, 0);
	КонецЦикла;	
	
	ТекстВопроса = "";
	
	Если ГруппыВыбранныхКонтактов.Количество() <> 1 
		Или (ГруппыВыбранныхКонтактов.Количество() = 1 И ЭтоКорневаяГруппа) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить из списка выделенные контакты (%1)?'"), КоличествоВыбранныхКонтактов);
			
	Иначе
			
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить выделенные контакты из группы ""%1""?'"), Строка(ГруппаКонтактовПользователей));
			
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"МоиКонтактыПередУдалениемПродолжение",
		ЭтотОбъект);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Отказ = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура МоиКонтактыПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СостояниеРаскрытости = Неопределено;
		ТекущаяСсылка = Неопределено;
		ЗапомнитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		
		УдалитьИзбранное();
		
		ВосстановитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
	КонецЕсли;	

КонецПроцедуры
&НаСервере
Процедура УдалитьИзбранное()
	
	Если Элементы.МоиКонтакты.ТекущаяСтрока <> Неопределено Тогда
		
		Для Каждого ИдСтроки Из Элементы.МоиКонтакты.ВыделенныеСтроки Цикл
			
			Строка = МоиКонтакты.НайтиПоИдентификатору(ИдСтроки);
			
			Если Строка.ЭтоГруппа Тогда // ставим пометку удаления
				ПометитьНаУдаление(Строка.ГруппаКонтактовПользователей, Истина);
			Иначе
				Справочники.ГруппыКонтактовПользователей.УдалитьКонтакт(Строка.Контакт, 
					Строка.КонтактнаяИнформация, Строка.ГруппаКонтактовПользователей);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьМоиКонтакты();

КонецПроцедуры


&НаКлиенте
Процедура ЗапомнитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка)
	
	СостояниеРаскрытости = Новый Соответствие;
	
	ТекущаяСсылка = Неопределено;
	Если Элементы.МоиКонтакты.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСсылка = Элементы.МоиКонтакты.ТекущиеДанные.Контакт;
	КонецЕсли; 
	
	КореньДерева = МоиКонтакты.ПолучитьЭлементы();
	Для Каждого Строка Из КореньДерева Цикл
		
		Если Строка.ЭтоГруппа Тогда
			СтрокаРазвернута = Элементы.МоиКонтакты.Развернут(Строка.ПолучитьИдентификатор());
			СостояниеРаскрытости[Строка.ГруппаКонтактовПользователей] = СтрокаРазвернута;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка)
	
	КореньДерева = МоиКонтакты.ПолучитьЭлементы();
	
	ТекущийИдентификатор = Неопределено;
	Если ТекущаяСсылка <> Неопределено Тогда
		ТекущийИдентификатор = НайтиИдентификаторПоСсылке(КореньДерева, ТекущаяСсылка);
	КонецЕсли;
	
	Для Каждого Строка Из КореньДерева Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			СтрокаРазвернута = СостояниеРаскрытости.Получить(Строка.ГруппаКонтактовПользователей);
			
			Если СтрокаРазвернута = Истина Тогда
				Элементы.МоиКонтакты.Развернуть(Строка.ПолучитьИдентификатор());
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Элементы.МоиКонтакты.ТекущаяСтрока = ТекущийИдентификатор;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиИдентификаторПоСсылке(ЭлементыДерева, ТекущаяСсылка)
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		Если Строка.Контакт = ТекущаяСсылка Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		ДочерниеЭлементыДерева = Строка.ПолучитьЭлементы();
		Идентификатор = НайтиИдентификаторПоСсылке(ДочерниеЭлементыДерева, ТекущаяСсылка);
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаСервере
Функция НайтиИдентификаторГруппыПоСсылке(ЭлементыДерева, ТекущаяСсылка)
	
	Для Каждого Строка Из ЭлементыДерева Цикл
		
		Если Строка.ГруппаПользователей = ТекущаяСсылка Тогда
			Возврат Строка.ПолучитьИдентификатор();
		КонецЕсли;	
		
		ДочерниеЭлементыДерева = Строка.ПолучитьЭлементы();
		Идентификатор = НайтиИдентификаторГруппыПоСсылке(ДочерниеЭлементыДерева, ТекущаяСсылка);
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьВМоиКонтактыКорреспондента(Команда)
	
	Если Элементы.Корреспонденты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Корреспонденты.ТекущиеДанные.Ссылка;
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока, Адрес = Неопределено)
	
	КодВозврата = Неопределено;
	
	Если ЕстьГруппыВИзбранном Тогда 
		
		ПараметрыФормы = Новый Структура;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("Адрес", Адрес);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавитьВМоиКонтактыСсылку", ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Возврат;	
		
	Иначе
		
		КодВозврата = ДобавитьВМоиКонтактыСервер(ТекущаяСтрока, , Адрес);
		
	КонецЕсли;	
	
	ПродолжитьДобавитьВМоиКонтактыСсылку(КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВМоиКонтактыСсылку(ГруппаИзбранного, Параметры) Экспорт
	
	КодВозврата = Неопределено;
	
	Если ГруппаИзбранного <> Неопределено Тогда
		КодВозврата = ДобавитьВМоиКонтактыСервер(
			Параметры.ТекущаяСтрока, 
			ГруппаИзбранного, 
			Параметры.Адрес);
	КонецЕсли;

	ПродолжитьДобавитьВМоиКонтактыСсылку(КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВМоиКонтактыСсылку(КодВозврата)

	Если КодВозврата = Ложь Тогда
		ПоказатьПредупреждение(, Нстр("ru='Такой адресат уже есть в группе ""Мои контакты""'"));
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыФизлицо(Команда)
	
	Если Элементы.Физлица.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Физлица.ТекущиеДанные.Ссылка;
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыЛичныеАдресаты(Команда)
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыПоиск(Команда)
	
	Если Элементы.ТаблицаНайденного.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаНайденного.ТекущиеДанные.Контакт;
		Адрес = Элементы.ТаблицаНайденного.ТекущиеДанные.Адрес;
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока, Адрес);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыКонтактноеЛицо(Команда)
	
	Если Элементы.КорреспондентыАдреса.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Элементы.КорреспондентыАдреса.ТекущиеДанные.КонтактноеЛицо;
		Адрес = Элементы.КорреспондентыАдреса.ТекущиеДанные.АдресПочты;
		
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока, Адрес);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиКонтактыПользователиАдреса(Команда)
	
	Если Элементы.ПользователиАдреса.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = ТекущийПользователь;
		Адрес = Элементы.ПользователиАдреса.ТекущиеДанные.АдресПочты;
		
		ДобавитьВМоиКонтактыСсылку(ТекущаяСтрока, Адрес);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомандыПереходаКСтраницам(ТекущийЭлемент)
	
	УстановитьСтандартноеОформление(Элементы.ОткрытьМоиКонтакты);
	УстановитьСтандартноеОформление(Элементы.ОткрытьСотрудникиСписком);
	УстановитьСтандартноеОформление(Элементы.ОткрытьСотрудникиПоПодразделениям);
	УстановитьСтандартноеОформление(Элементы.ОткрытьСотрудникиПоГруппам);
	УстановитьСтандартноеОформление(Элементы.ОткрытьКорреспонденты);
	УстановитьСтандартноеОформление(Элементы.ОткрытьФизическиеЛица);
	УстановитьСтандартноеОформление(Элементы.ОткрытьЛичныеАдресаты);
	УстановитьСтандартноеОформление(Элементы.ОткрытьПоиск);
	
	УстановитьВыделенноеОформление(ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартноеОформление(Элемент)
	
	Элемент.Гиперссылка = Истина;
	Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделенноеОформление(Элемент)
	
	Элемент.Гиперссылка = Ложь;
	Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМоиКонтакты(Команда)
	
	ЗаполнитьМоиКонтакты();
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.МоиКонтакты");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьМоиКонтакты);
	ТекущийЭлемент = Элементы.МоиКонтакты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудникиСписком(Команда)
	
	ЗаполнитьПользователейСписком();
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Списком");
	Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники списком:'");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиСписком);
	ТекущийЭлемент = Элементы.ДеревоПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудникиПоПодразделениям(Команда)
	
	ЗаполнитьПользователейВПодразделениях();
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоПодразделениям");
	Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники по подразделениям:'");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиПоПодразделениям);
	РазвернутьГруппыПользователей();
	ТекущийЭлемент = Элементы.ДеревоПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСотрудникиПоГруппам(Команда)
	
	ЗаполнитьПользователейВГруппах();
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ПоГруппамПользователей");
	Элементы.ДекорацияСотрудникиИмя.Заголовок = НСтр("ru = 'Сотрудники по группам:'");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьСотрудникиПоГруппам);
	РазвернутьГруппыПользователей();
	ТекущийЭлемент = Элементы.ДеревоПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорреспонденты(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Корреспонденты");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьКорреспонденты);
	ТекущийЭлемент = Элементы.Корреспонденты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФизическиеЛица(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ФизическиеЛица");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьФизическиеЛица);
	ТекущийЭлемент = Элементы.Физлица;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛичныеАдресаты(Команда)
	
	ЗаполнитьЛичныеАдресаты();
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.ЛичныеАдресаты");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьЛичныеАдресаты);
	ТекущийЭлемент = Элементы.ДеревоКонтактов;
	
	ЭлементыЛичныхАдресатов = ДеревоКонтактов.ПолучитьЭлементы();
	Если ЭлементыЛичныхАдресатов.Количество() <> 0 Тогда
		Элементы.ДеревоКонтактов.ТекущаяСтрока = ЭлементыЛичныхАдресатов[0].ПолучитьИдентификатор();
		ТекущийКонтактДляКарточкиПользователя = Элементы.ДеревоКонтактов.ТекущиеДанные.Ссылка;
	КонецЕсли;	
	ДеревоКонтактовПриАктивизацииСтрокиВыполнить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоиск(Команда)
	
	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраАдреснойКниги.Поиск");
	Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск;
	ОбновитьКомандыПереходаКСтраницам(Элементы.ОткрытьПоиск);
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПисьмо(Команда)
	
	СписокПочтовыхАдресов = Новый СписокЗначений;
	ПараметрыПеретаскивания = Новый Структура("Значение", Новый Массив);
	
	Если Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПользователей Тогда
		
		ТекущиеДанные = Элементы.ДеревоПользователей.ТекущиеДанные;
		Если Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		ДеревоПользователейНачалоПеретаскиванияВызовСервера(Элементы.ДеревоПользователей.ВыделенныеСтроки, 
			ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаМоиКонтакты Тогда
		
		МоиКонтактыДобавитьВЗначениеПеретаскивания(Элементы.МоиКонтакты.ВыделенныеСтроки, ПараметрыПеретаскивания.Значение);	
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаКорреспонденты Тогда
		
		КорреспондентыНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);	
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаФизическиеЛица Тогда
		
		ФизлицаНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);	
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаЛичныеАдресаты Тогда		
		
		ДеревоКонтактовНачалоПеретаскиванияВыполнить(ПараметрыПеретаскивания);
		
	ИначеЕсли Элементы.СтраницыСписки.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда	
		
		Если ЗначениеЗаполнено(Элементы.ТаблицаНайденного.ТекущиеДанные.Контакт) Тогда
			Данные = Новый Структура("Контакт, Адрес",
				Элементы.ТаблицаНайденного.ТекущиеДанные.Контакт, Элементы.ТаблицаНайденного.ТекущиеДанные.Адрес);
			ПараметрыПеретаскивания.Значение.Добавить(Данные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() <> 0 Тогда
		
		ЗаполнитьСписокАдресов(ПараметрыПеретаскивания.Значение, СписокПочтовыхАдресов);
		
		Если СписокПочтовыхАдресов.Количество() <> 0 Тогда
			ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
			ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;		
	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокАдресов(ПараметрыПеретаскиванияЗначение, СписокПочтовыхАдресов)
	
	Для Каждого Строка Из ПараметрыПеретаскиванияЗначение Цикл
		
		Если Строка.Свойство("Адрес") И ЗначениеЗаполнено(Строка.Адрес) Тогда
			
			АдресИнфо = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
				Строка.Контакт, Строка.Адрес, Строка(Строка.Контакт));
			СписокПочтовыхАдресов.Добавить(АдресИнфо);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГруппыКонтактовПользователей_Запись" Тогда
		
		СостояниеРаскрытости = Неопределено;
		ТекущаяСсылка = Неопределено;
		ЗапомнитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		
		ЗаполнитьМоиКонтакты();
		
		ВосстановитьСостояниеРаскрытостиИзбранного(СостояниеРаскрытости, ТекущаяСсылка);
		
	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат" Тогда				
		Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраАдреснойКниги.ЛичныеАдресаты") Тогда				
			Если Источник <> Неопределено И ТекущийЛичныйАдресат = Источник 
				И Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
				
				ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
				ОбновитьЛичногоАдресата();				
			КонецЕсли;			
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "Запись_Корреспондент" Или ИмяСобытия = "Запись_КонтактноеЛицо" Тогда							
		Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраАдреснойКниги.Корреспонденты") Тогда				
			Если Источник <> Неопределено И ТекущийКонтактДляКарточкиПользователя = Источник 
				И Элементы.Корреспонденты.ТекущиеДанные <> Неопределено Тогда				
				
				Если ИмяСобытия = "Запись_КонтактноеЛицо" Тогда
					ТекущийКорреспондент = Элементы.Корреспонденты.ТекущиеДанные.Ссылка;
				КонецЕсли;				
				
				ОбновитьКорреспондента(); 				
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппуЛичныхАдресатов(Команда)
	
	ТекущаяГруппа = Неопределено;
	Если Элементы.ДеревоКонтактов.ТекущиеДанные <> Неопределено Тогда
		ТекущаяГруппа = Элементы.ДеревоКонтактов.ТекущиеДанные.Группа;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеАдресатовИВосстановлениеСостоянияДерева",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("Родитель", ТекущаяГруппа);
	ОткрытьФорму("Справочник.ГруппыЛичныхАдресатов.ФормаОбъекта", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКонтактовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ГруппаНазначения = ПредопределенноеЗначение("Справочник.ЛичныеАдресаты.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(Строка) Тогда
		СтрокаНазначения = ДеревоКонтактов.НайтиПоИдентификатору(Строка);
		Если СтрокаНазначения <> Неопределено Тогда
			ГруппаНазначения = СтрокаНазначения.Группа;
		КонецЕсли;			
	КонецЕсли;	
	
	СменитьВладельца(ПараметрыПеретаскивания.Значение, ГруппаНазначения);
	ЗаполнитьАдресатовИВосстановитьСостояниеДерева();
	
КонецПроцедуры

&НаСервере
Процедура СменитьВладельца(МассивСсылок, ГруппаНазначения)
	
	Для Каждого ОписаниеДанных Из МассивСсылок Цикл
		
		Если ОписаниеДанных.Свойство("Ссылка") Тогда
			
			Ссылка = ОписаниеДанных.Ссылка;
			
			Если Ссылка.Группа <> ГруппаНазначения Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Ссылка, , УникальныйИдентификатор);
				СправочникОбъект = Ссылка.ПолучитьОбъект();
				СправочникОбъект.Группа = ГруппаНазначения;
				СправочникОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РангПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоиска) И Ранг <> РангПриОткрытии Тогда
		НайтиАдресатовКлиент();
	КонецЕсли;	
	
	РангПриОткрытии = Ранг;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПользователейПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпискиАдресов(Команда)
	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.Форма.ФормаСпискаПоУчетнымЗаписям");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПользователя(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокПользователя");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокПользователя(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокПользователя(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокПользователя(УчетнаяЗаписьДляДобавления)
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокПользователя(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокПользователяПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму(
		"Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПользователяПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокПользователяСервер(Результат, 
			Элементы.ДеревоПользователей.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Пользователи (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокПользователяСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ДеревоПользователей.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		Если СтрокаДанных.ОсновнойАдресЗаполнен Тогда
			ОсновнойАдрес = СтрокаДанных.ОсновнойАдрес;
		Иначе	
			ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДанных.Пользователь);
			
			СтрокаДанных.ОсновнойАдресЗаполнен = Истина;
			СтрокаДанных.ОсновнойАдрес = ОсновнойАдрес;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный пользователь уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных пользователей не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокМойКонтакт(Команда)
	
	Если Элементы.МоиКонтакты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокМойКонтакт");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокМойКонтакт(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокМойКонтакт(УчетнаяЗаписьДляДобавления, Параметры) Экспорт
	
	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокМойКонтакт(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокМойКонтакт(УчетнаяЗаписьДляДобавления)

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокПользователяПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокМойКонтактПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокМойКонтактСервер(Результат, 
			Элементы.МоиКонтакты.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокМойКонтактСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = МоиКонтакты.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Или СтрокаДанных.ЭтоАвтоподстановка Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.КонтактнаяИнформация;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокКорреспонденты(Команда)
	
	Если Элементы.Корреспонденты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокКорреспонденты");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокКорреспонденты(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокКорреспонденты(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьВСписокКорреспонденты(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокКорреспонденты(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокКорреспондентыПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокКорреспондентыПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокКорреспондентыСервер(Результат, 
			Элементы.Корреспонденты.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Корреспонденты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокКорреспондентыСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ИдСтроки;
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		ТаблицаКонтактов = ПолучитьАдреса(СтрокаДанных.Ссылка);
		Если ТаблицаКонтактов.Количество() > 0 Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокФизлицо(Команда)
	
	Если Элементы.Физлица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокФизлицо");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокФизлицо(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокФизлицо(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьВСписокФизлицо(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокФизлицо(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокФизлицоПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокФизлицоПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокФизлицаСервер(Результат, 
			Элементы.Физлица.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокФизлицаСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ИдСтроки;
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		ТаблицаКонтактов = ПолучитьАдреса(СтрокаДанных.Ссылка);
		Если ТаблицаКонтактов.Количество() > 0 Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокЛичныхАдресатов(Команда)
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокЛичныхАдресатов");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокЛичныхАдресатовПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокЛичныхАдресатовПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокЛичныхАдресатовСервер(Результат, 
			Элементы.ДеревоКонтактов.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокЛичныхАдресатовСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ДеревоКонтактов.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не СтрокаДанных.ЭтоАдресат Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.АдресEmail;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПоиск(Команда)
	
	Если Элементы.ТаблицаНайденного.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьВСписокПоиск");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьВСписокПоиск(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьВСписокПоиск(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьВСписокПоиск(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьВСписокПоиск(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокПоискПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокПоискПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьВСписокПоискСервер(Результат, 
			Элементы.ТаблицаНайденного.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокПоискСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ТаблицаНайденного.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.Адрес;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, ОсновнойАдрес) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокПользователя(Команда)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокПользователя");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокПользователя(УчетнаяЗаписьДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокПользователя(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокПользователя(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокПользователя(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокПользователяПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокПользователяПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокПользователяСервер(Результат, 
			Элементы.ДеревоПользователей.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Пользователи (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокПользователяСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ДеревоПользователей.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		Если СтрокаДанных.ОсновнойАдресЗаполнен Тогда
			ОсновнойАдрес = СтрокаДанных.ОсновнойАдрес;
		Иначе	
			ОсновнойАдрес = ПолучитьОсновнойАдрес(СтрокаДанных.Пользователь);
			
			СтрокаДанных.ОсновнойАдресЗаполнен = Истина;
			СтрокаДанных.ОсновнойАдрес = ОсновнойАдрес;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный пользователь уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных пользователей не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокМойКонтакт(Команда)
	
	Если Элементы.МоиКонтакты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокМойКонтакт");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокМойКонтакт(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокМойКонтакт(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокМойКонтакт(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокМойКонтакт(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокМойКонтактПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокМойКонтактПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокМойКонтактСервер(Результат, 
			Элементы.МоиКонтакты.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокМойКонтактСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = МоиКонтакты.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Или СтрокаДанных.ЭтоАвтоподстановка Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.КонтактнаяИнформация;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокКорреспонденты(Команда)
	
	Если Элементы.Корреспонденты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокКорреспонденты");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокКорреспонденты(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокКорреспонденты(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокКорреспонденты(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокКорреспонденты(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокКорреспондентыПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокКорреспондентыПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокКорреспондентыСервер(Результат, 
			Элементы.Корреспонденты.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Корреспонденты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере  
Процедура ДобавитьДоменВСписокКорреспондентыСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ИдСтроки;
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		ТаблицаКонтактов = ПолучитьАдреса(СтрокаДанных.Ссылка);
		Если ТаблицаКонтактов.Количество() > 0 Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокФизлицо(Команда)
	
	Если Элементы.Физлица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокФизлицо");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокФизлицо(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокФизлицо(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокФизлицо(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокФизлицо(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокФизлицоПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокФизлицоПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокФизлицаСервер(Результат, 
			Элементы.Физлица.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокФизлицаСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ИдСтроки;
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаДанных.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = "";
		
		ТаблицаКонтактов = ПолучитьАдреса(СтрокаДанных.Ссылка);
		Если ТаблицаКонтактов.Количество() > 0 Тогда
			ОсновнойАдрес = ТаблицаКонтактов[0].Значение;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокЛичныхАдресатов(Команда)
	
	Если Элементы.ДеревоКонтактов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокЛичныхАдресатов");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокЛичныхАдресатов(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокЛичныхАдресатовПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокЛичныхАдресатовПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокЛичныхАдресатовСервер(Результат, 
			Элементы.ДеревоКонтактов.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокЛичныхАдресатовСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ДеревоКонтактов.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не СтрокаДанных.ЭтоАдресат Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.АдресEmail;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокПоиск(Команда)
	
	Если Элементы.ТаблицаНайденного.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УчетнаяЗаписьДляДобавления = Неопределено;
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВыбратьУчетнуюЗапись("ЗавершениеДобавитьДоменВСписокПоиск");
		Возврат;
	Иначе
		УчетнаяЗаписьДляДобавления = УчетнаяЗапись;
	КонецЕсли;
	
	ПродолжитьДобавитьДоменВСписокПоиск(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавитьДоменВСписокПоиск(УчетнаяЗаписьДляДобавления, Параметры) Экспорт

	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПродолжитьДобавитьДоменВСписокПоиск(УчетнаяЗаписьДляДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавитьДоменВСписокПоиск(УчетнаяЗаписьДляДобавления)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьДоменВСписокПоискПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);	
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоменВСписокПоискПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ЧислоДобавленных = 0;
		Причина = "";
		
		ДобавитьДоменВСписокПоискСервер(Результат, 
			Элементы.ТаблицаНайденного.ВыделенныеСтроки, ЧислоДобавленных, Причина);
		
		Если ЧислоДобавленных <> 0 Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Адресаты (%1 шт) добавлены в список адресов ""%2""'"), ЧислоДобавленных, Результат);
			НавСсылка = ПолучитьНавигационнуюСсылку(Результат);		
			ПоказатьОповещениеПользователя(НСтр("ru='Добавление в список адресов'"), НавСсылка, Текст);
		ИначеЕсли Элементы.ДеревоПользователей.ВыделенныеСтроки.Количество() = 1 Тогда
			ПоказатьПредупреждение(, Причина);
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьДоменВСписокПоискСервер(ЭлементСправочникаСпискиАдресов, Знач ВыделенныеСтроки, ЧислоДобавленных, Причина)
	
	Для Каждого ИдСтроки Из ВыделенныеСтроки Цикл
	
		СтрокаДанных = ТаблицаНайденного.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ОсновнойАдрес = СтрокаДанных.Адрес;
		
		Если Не ЗначениеЗаполнено(ОсновнойАдрес) Тогда
			Продолжить;
		КонецЕсли;	
		
		Домен = ВстроеннаяПочтаКлиентСервер.ПолучитьДомен(ОсновнойАдрес);
	
		Если Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(ЭлементСправочникаСпискиАдресов, Домен) Тогда
			ЧислоДобавленных = ЧислоДобавленных + 1;
		Иначе
			Причина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данный адресат уже есть в списке ""%1"".'"), 
				ЭлементСправочникаСпискиАдресов);
		КонецЕсли;	

	КонецЦикла;	
	
	Если ВыделенныеСтроки.Количество() <> 0 И ЧислоДобавленных = 0 И Не ЗначениеЗаполнено(Причина) Тогда
		Причина = НСтр("ru= 'Ни у одного из выбранных адресатов не указан адрес email.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУчетнуюЗапись(ИмяПроцедурыЗавершения)
	
	Отбор = Новый Структура("ВариантИспользования", 
		ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПочты.Встроенная"));
	ПараметрыФормы = Новый Структура("Ответственный, Отбор", ТекущийПользовательПредприятия, Отбор);	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедурыЗавершения, ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
