
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
	Список.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Параметры.БизнесПроцесс);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ИмяМенеджераПроцесса = ИмяМенеджераПроцесса(Параметры.БизнесПроцесс);
	Если ИмяМенеджераПроцесса <> Неопределено Тогда
		УстановитьДополнительныеПараметрыСпискаЗадач(ИмяМенеджераПроцесса);
		НастроитьСвойстваЭлементов(ИмяМенеджераПроцесса);
	КонецЕсли;
	
	СостояниеБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Параметры.БизнесПроцесс,
		"Состояние");
	БизнесПроцессПрерван = СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван;
	
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ДатаИсполнения);
	
	НастройкиОтбора = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	
	Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
		ПоказыватьПрерванные = НастройкиОтбора.Получить("ПоказыватьПрерванные") ИЛИ БизнесПроцессПрерван;
	Иначе
		ПоказыватьПрерванные = Ложь ИЛИ БизнесПроцессПрерван;
	КонецЕсли;
	Элементы.ПоказатьПрерванные.Пометка = ПоказыватьПрерванные;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоказыватьПрерванные = ПоказыватьПрерванные ИЛИ БизнесПроцессПрерван;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		ИЛИ ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" Тогда
		
		Элементы.Список.Обновить();
		
		УстановитьДоступностьКомандПринятияКИсполнениюДляДереваЗадач();
		
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ОтобразитьПрерванныеЗадачиВФормеЗадачиПоБизнесПроцессу" Тогда
		НайденноеЗначение = Список.Параметры.Элементы.Найти("БизнесПроцесс");
		Если НайденноеЗначение <> Неопределено Тогда
			БизнесПроцесс = НайденноеЗначение.Значение;
			Если БизнесПроцесс = Параметр И НЕ ПоказыватьПрерванные Тогда
				БизнесПроцессПрерван = Истина;
				ПоказыватьПрерванные = Истина;
				Элементы.ПоказатьПрерванные.Пометка = ПоказыватьПрерванные;
				УстановитьОтбор();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) 
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.НомерФлага Тогда
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СтандартнаяОбработка = Ложь;
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандПринятияКИсполнениюДляДереваЗадач", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(Элементы.Список.ВыделенныеСтроки, ЭтаФорма);
	
	Элементы.Список.Обновить();
	
	УстановитьДоступностьКомандПринятияКИсполнениюДляДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(Элементы.Список.ВыделенныеСтроки, ЭтаФорма);
	
	Элементы.Список.Обновить();
	
	УстановитьДоступностьКомандПринятияКИсполнениюДляДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрерванные(Команда)
	
	ПоказыватьПрерванные = Не ПоказыватьПрерванные;
	Элементы.ПоказатьПрерванные.Пометка = ПоказыватьПрерванные;
	
	УстановитьОтбор();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с флагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает имя менеджера процесса по ссылке на процесс.
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцесс.Ссылка - ссылка на процесс, для которого следует получить имя
//                                            менеджера
//
// Возвращаемое значение:
//   Строка - имя менеджера процесса
//
&НаСервереБезКонтекста
Функция ИмяМенеджераПроцесса(БизнесПроцесс)
	
	МассивТипов = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцесс ИЗ Метаданные.БизнесПроцессы Цикл
		ТипБизнесПроцесса = Тип("БизнесПроцессСсылка." + МетаданныеБизнесПроцесс.Имя);
		МассивТипов.Добавить(ТипБизнесПроцесса);
	КонецЦикла;
	
	ТипПараметра = ТипЗнч(БизнесПроцесс);
	
	Если МассивТипов.Найти(ТипПараметра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеБизнесПроцесса = БизнесПроцесс.Метаданные();
	ИмяБизнесПроцесса = МетаданныеБизнесПроцесса.Имя;
	
	Возврат ИмяБизнесПроцесса;
	
КонецФункции

// Производит установку свойств элементов формы в зависимости от имени
// менеджера бизнес-процесса, по которому отображаются задачи в текущей форме.
//
// Параметры:
//   - ИмяМенеджера - Имя менеджера бизнес-процесса.
//
&НаСервере
Процедура НастроитьСвойстваЭлементов(ИмяМенеджера)
	
	Попытка
		МенеджерПроцесса = БизнесПроцессы[ИмяМенеджера];
	Исключение
		Возврат;
	КонецПопытки;
	
	Если МенеджерПроцесса.ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваПолейСпискаЗадач = МенеджерПроцесса.СвойстваЭлементовФормыЗадачиПоБизнесПроцессу();
	
	ТипСтруктура = Тип("Структура");
	
	Если ТипЗнч(СвойстваПолейСпискаЗадач) <> ТипСтруктура Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолеСпискаЗадач Из СвойстваПолейСпискаЗадач Цикл
		
		СвойстваПоля = ПолеСпискаЗадач.Значение;
		
		Если ТипЗнч(СвойстваПоля) <> ТипСтруктура Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыДляОбработки = Элементы.Найти(ПолеСпискаЗадач.Ключ);
		
		Если ЭлементыДляОбработки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Для Каждого СвойствоПоля Из СвойстваПоля Цикл
			
			ИмяСвойства = СвойствоПоля.Ключ;
			ЗначениеСвойства = СвойствоПоля.Значение;
			
			Попытка
				ЭлементыДляОбработки[ИмяСвойства] = ЗначениеСвойства;
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит установку дополнительных параметров для динамического
// списка Список.
//
// Параметры:
//   - ИмяМенеджера - Строка - Имя менеджера бизнес-процесса.
//
&НаСервере
Процедура УстановитьДополнительныеПараметрыСпискаЗадач(ИмяМенеджера)
	
	Попытка
		МенеджерПроцесса = БизнесПроцессы[ИмяМенеджера];
	Исключение
		Возврат;
	КонецПопытки;
	
	ТекстЗапроса = Список.ТекстЗапроса;
	
	Если МенеджерПроцесса.ЕстьМетодДополнитьТекстЗапросСпискаЗадач() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерПроцесса.ДополнитьТекстЗапросСпискаЗадач(ТекстЗапроса);
	
	Список.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	ПараметрыОтбора = Новый Соответствие();	
	Параметрыотбора.Вставить("ПоказыватьПрерванные", ПоказыватьПрерванные);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "СостояниеБизнесПроцесса");
	
	ПоказыватьПрерванные = ПараметрыОтбора["ПоказыватьПрерванные"];
	Если ЗначениеЗаполнено(ПоказыватьПрерванные) И Не ПоказыватьПрерванные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, 
			"СостояниеБизнесПроцесса", 
			Перечисления.СостоянияБизнесПроцессов.Прерван, 
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПринятияКИсполнениюДляДереваЗадач()
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ДоступностьКомандыПринятьКИсполнению = Ложь;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Ложь;
		
	ИначеЕсли Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		
		ОбщаяДоступностьКомандПринятияКИсполнению = 
			НЕ Элементы.Список.ТекущиеДанные.Выполнена
			И Элементы.Список.ТекущиеДанные.СостояниеБизнесПроцесса 
				= ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен");
		
		ДоступностьКомандыПринятьКИсполнению = 
			НЕ Элементы.Список.ТекущиеДанные.ПринятаКИсполнению
			И ОбщаяДоступностьКомандПринятияКИсполнению;
		
		ДоступностьКомандыОтменитьПринятиеКИсполнению = 
			Элементы.Список.ТекущиеДанные.ПринятаКИсполнению
			И ОбщаяДоступностьКомандПринятияКИсполнению;
		
	Иначе
		
		ДоступностьКомандыПринятьКИсполнению = Истина;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Истина;
		
	КонецЕсли;
	
	Элементы.ФормаПринятьКИсполнению.Доступность = 
		ДоступностьКомандыПринятьКИсполнению;
	
	Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = 
		ДоступностьКомандыОтменитьПринятиеКИсполнению;
		
	Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность = 
		ДоступностьКомандыПринятьКИсполнению;
	
	Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность = 
		ДоступностьКомандыОтменитьПринятиеКИсполнению;
	
КонецПроцедуры

#КонецОбласти

