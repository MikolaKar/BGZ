
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОписаниеТиповПредметов = ПолучитьОписаниеДоступныхТиповПредметов(ПользователиКлиентСервер.ТекущийПользователь());
	ВладелецШаблона = Параметры.ВладелецШаблона;
	ИдентификаторЭтапа = Параметры.ИдентификаторЭтапа;
	
	ИспользоватьПриглашениеНаМероприятие = ПолучитьФункциональнуюОпцию("ИспользоватьПриглашениеНаМероприятие");
	
	ДляКомплексногоПроцесса = Ложь;
	Если ЗначениеЗаполнено(ВладелецШаблона)
		И (ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		ИЛИ ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")) Тогда
		ДляКомплексногоПроцесса = Истина;
		Элементы.СоздатьПроцесс.Заголовок = НСтр("ru = 'Добавить действие'");
		Элементы.ДеревоШаблоновКонтекстноеМенюСоздатьПроцесс.Заголовок = НСтр("ru = 'Добавить это действие'");
		Элементы.ГруппаПанелиПредметСовет.ТекущаяСтраница = Элементы.ГруппаСоветКомплексныйПроцесс;
	КонецЕсли;	
	
	Если ТипЗнч(Параметры.Предметы) = Тип("ТаблицаЗначений") Тогда
		Предметы.Загрузить(Параметры.Предметы);
	ИначеЕсли ТипЗнч(Параметры.Предметы) = Тип("ДанныеФормыКоллекция") Тогда
		Предметы.Загрузить(Параметры.Предметы.Выгрузить());
	ИначеЕсли ТипЗнч(Параметры.Предметы) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Задача = Параметры.Предметы;
		ПредметыЗадачи = Мультипредметность.ПолучитьПредметыПроцессаПоЗадаче(Параметры.Предметы);
		Предметы.Загрузить(ПредметыЗадачи);
	Иначе
		
		ОбработатьМассивПредметов = Ложь;
		ПараметрПредметы = Параметры.Предметы;
		
		Если ТипЗнч(ПараметрПредметы) = Тип("Массив") Тогда
			Если Параметры.Предметы.Количество() > 1 Тогда
				ОбработатьМассивПредметов = Истина;
			Иначе
				ПараметрПредметы = Параметры.Предметы[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ОбработатьМассивПредметов Тогда
			ИсходныеИменаПредметов = Новый Массив;
			Для Каждого Предмет ИЗ ПараметрПредметы Цикл
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Пользователи")
					ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					
					Исполнители.Добавить(Предмет);
				Иначе
					СтрокаПредметов = Предметы.Добавить();
					СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
					СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.
						ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИсходныеИменаПредметов);
					ИсходныеИменаПредметов.Добавить(СтрокаПредметов.ИмяПредмета);
					СтрокаПредметов.Предмет = Предмет;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ПараметрПредметы <> Неопределено Тогда
			Если ТипЗнч(ПараметрПредметы) = Тип("СправочникСсылка.Пользователи")
					ИЛИ ТипЗнч(ПараметрПредметы) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					
				Исполнители.Добавить(ПараметрПредметы);
			Иначе
				СтрокаПредметов = Предметы.Добавить();
				СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
				СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(ПараметрПредметы);
				СтрокаПредметов.Предмет = ПараметрПредметы;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПредмета Из Предметы Цикл 
		Если Мультипредметность.ЭтоФайлБизнесПроцесса(СтрокаПредмета.Предмет) Тогда
			СтрокиКУдалению.Добавить(СтрокаПредмета);
		ИначеЕсли Мультипредметность.ЭтоГруппаКорреспондентов(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение НСтр("ru = 'Ввод процесса на основании группы корреспондентов невозможен!
			 	|Выберите корреспондента. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз'");	
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Предметы.Удалить(Строка);
	КонецЦикла;
	
	Если НЕ ДляКомплексногоПроцесса Тогда
		СтрокиКУдалению = Предметы.НайтиСтроки(Новый Структура("Предмет", Неопределено));
		Для Каждого Строка Из СтрокиКУдалению Цикл
			Предметы.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		СтрокаПредмета.Описание = ОбщегоНазначенияДокументооборот.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		СтрокаПредмета.Картинка = МультипредметностьКлиентСервер.ИндексКартинкиРолиПредмета(
			СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
	КонецЦикла;
	
	Если Параметры.Свойство("Задача") Тогда
		Задача = Параметры.Задача;
	КонецЕсли;
	
	Если Параметры.Свойство("ГлавнаяЗадача") Тогда
		ГлавнаяЗадача = Параметры.ГлавнаяЗадача;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроектнаяЗадача") И ЗначениеЗаполнено(Параметры.ПроектнаяЗадача) Тогда
		ПроектнаяЗадача = Параметры.ПроектнаяЗадача;
		ПредметБП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		Если ПредметБП <> Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(ПредметБП);
			СтрокаПредметов.Предмет = ПредметБП;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Проект") И ЗначениеЗаполнено(Параметры.Проект) Тогда
		Если Параметры.Проект.ЭтоГруппа Тогда
			СообщениеПользователю = НСтр("ru = 'Создание основного процесса запрещено для групп проектов.'");
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
		Проект = Параметры.Проект;
	ИначеЕсли Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) Тогда
		Если ТипЗнч(Параметры.Предмет) = Тип("СправочникСсылка.Проекты") И Параметры.Предмет.ЭтоГруппа Тогда
			СообщениеПользователю = НСтр("ru = 'Создание вспомогательного процесса запрещено для групп проектов.'");
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипПроцесса") Тогда
		ТипПроцесса = Параметры.ТипПроцесса;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидПроцесса") Тогда
		ВидПроцесса = Параметры.ВидПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок; 
	КонецЕсли;
	
	СозданиеБезПредмета = Ложь;
	Элементы.ВидДокументаПредмета.Видимость = Ложь;
	Если Предметы.Количество() = 0 Тогда
		СозданиеБезПредмета = Истина;
		Элементы.ПредметБизнесПроцесса.Видимость = Ложь;
		Если НЕ ДляКомплексногоПроцесса Тогда
			Элементы.ГруппаПанелиПредметСовет.ТекущаяСтраница = 
				Элементы.ГруппаСовет;
		КонецЕсли;
	Иначе
		СозданиеБезПредмета = Ложь;
		Если Предметы.Количество() = 1 Тогда
			Если Предметы[0].Предмет <> Неопределено Тогда
				Элементы.ПредметБизнесПроцесса.Заголовок = Предметы[0].Предмет.Метаданные().ПредставлениеОбъекта;
			КонецЕсли;
			Элементы.Предметы.ТекущаяСтрока = 0;
		КонецЕсли;
		Для Каждого СтрокаПредмета Из Предметы Цикл
			Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
				ИЛИ ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				СтрокаПредмета.ВидДокументаПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаПредмета.Предмет,"ВидДокумента");
				Элементы.ВидДокументаПредмета.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СозданиеБезПредмета Тогда
		ПостроитьДеревоВариантовДляПустогоПроцесса();
	Иначе
		ПостроитьДеревоВариантовДляПредметов(Предметы);
		
		Если НЕ (ЗначениеЗаполнено(ВладелецШаблона)
			И (ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
			ИЛИ ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов"))) Тогда
				Если Предметы.Количество() = 1 Тогда
					Элементы.Предметы.ТекущаяСтрока = Предметы[0].ПолучитьИдентификатор();
					Элементы.ГруппаПанелиПредметСовет.ТекущаяСтраница = Элементы.ГруппаПредмет;
				ИначеЕсли Предметы.Количество() > 1 Тогда
					Элементы.Предметы.ТекущаяСтрока = Предметы[0].ПолучитьИдентификатор();
					Элементы.ГруппаПанелиПредметСовет.ТекущаяСтраница = Элементы.ГруппаПредмет;
					Элементы.ДекорацияЕще.Видимость = Истина;
					
					ПрописьЧисла          = ЧислоПрописью(Предметы.Количество() - 1, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"));
					ПрописьЧислаИПредмета =
						ЧислоПрописью(Предметы.Количество() - 1, "Л = ru_RU", НСтр("ru = 'предмет,предмета,предметов,,,,,,0'"));
					ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(Предметы.Количество() - 1, "ЧГ=") + " ");
					
					Элементы.ДекорацияЕще.Заголовок = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Элементы.ДекорацияЕще.Заголовок,ЧислоИПредмет);
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуВДеревеНаПервыйЗначащийЭлемент()
	
	ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПерваяГруппа = ЭлементыДерева[0];
	Если ПерваяГруппа.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПервыйЭлементПервойГруппы = ПерваяГруппа.ПолучитьЭлементы()[0];
	Индекс = ПервыйЭлементПервойГруппы.ПолучитьИдентификатор();
	Элементы.ДеревоШаблонов.ТекущаяСтрока = Индекс;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоВариантовДляПредметов(Предметы)
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	МассивРекомендованныхШаблонов = Новый Массив;
	МассивОбщихШаблонов = Новый Массив;
	
	//Получение шаблонов БП по виду предмета
	ШаблоныПоПредмету = Новый Массив;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		
		ПредметБП = СтрокаПредмета.Предмет;
		
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныИсполнения");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныКомплексныхБизнесПроцессов");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныОзнакомления");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныПоручения");
		
		Если ИспользоватьПриглашениеНаМероприятие Тогда
			ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныПриглашения");
		КонецЕсли;
		
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныРассмотрения");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныРегистрации");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныСогласования");
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныУтверждения");
		
		Если ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаВнутреннегоДокумента");
		ИначеЕсли ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаВходящегоДокумента");
		ИначеЕсли ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаИсходящегоДокумента");
		КонецЕсли;
		
	КонецЦикла;
	СписокШаблоныПоПредмету = Новый СписокЗначений;
	Для Каждого Шаблон Из ШаблоныПоПредмету Цикл
		СписокШаблоныПоПредмету.Добавить(Шаблон, Строка(Шаблон));
	КонецЦикла;
	СписокШаблоныПоПредмету.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	ШаблоныПоПредмету = СписокШаблоныПоПредмету.ВыгрузитьЗначения();
	КоличествоРекомендуемыхШаблонов = ШаблоныПоПредмету.Количество();
	Если КоличествоРекомендуемыхШаблонов > 0 Тогда
		//есть шаблоны, привязанные к виду предмета процесса
		//они отображаются в группе "Рекомендованные шаблоны"
		СтрокаРекомендованные = Дерево.Строки.Добавить();
		СтрокаРекомендованные.Наименование = НСтр("ru = 'Рекомендованные шаблоны'");
		СтрокаРекомендованные.Подсказка = СформироватьСводкуПоГруппеЭлементов(СтрокаРекомендованные.Наименование);
		СтрокаРекомендованные.Развернуть = Истина;
		СтрокаРекомендованные.ЭтоЗаголовок = Истина;
		Для Каждого Шаблон Из ШаблоныПоПредмету Цикл
			НоваяСтрока = СтрокаРекомендованные.Строки.Добавить();
			НоваяСтрока.Наименование = Шаблон.Наименование;
			НоваяСтрока.Описание = Шаблон.Комментарий;
			НоваяСтрока.ШаблонСсылка = Шаблон.Ссылка;
			НоваяСтрока.Подсказка = СформироватьСводкуПоШаблонуИПолучитьИмяФормы(НоваяСтрока.ШаблонСсылка, НоваяСтрока.ИмяФормы);
			МассивРекомендованныхШаблонов.Добавить(Шаблон.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	//Получение шаблонов БП, не привязанных к видам документов
	ПолучитьНеПривязанныеШаблоны(Дерево, МассивОбщихШаблонов);

	//Получение пустых БП, которые привязаны к БП в меню "Создать на основании"
	//они добавляются в группу "Незаполненные процессы"
	ПолучитьНезаполненныеПроцессы(Дерево, Предметы);
	
	//Получение шаблонов БП, которые настроены для других видов документов
	//они попадают в группу "Другие процессы"
	ПолучитьОстальныеШаблоны(Дерево, МассивОбщихШаблонов, МассивРекомендованныхШаблонов);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
		
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоВариантовДляПустогоПроцесса()
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	МассивОбщихШаблонов = Новый Массив;	
	МассивРекомендованныхШаблонов = Новый Массив;
	
	ПолучитьНеПривязанныеШаблоны(Дерево, МассивОбщихШаблонов);
	
	//Получение пустых БП, которые привязаны к БП в меню "Создать на основании"
	//они добавляются в группу "Незаполненные процессы"
	ПолучитьНезаполненныеПроцессы(Дерево);
	
	ПолучитьОстальныеШаблоны(Дерево, МассивОбщихШаблонов, МассивРекомендованныхШаблонов);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНезаполненныеПроцессы(Дерево, ПредметыПроцесса = Неопределено)
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	СтрокаНовыеПроцессы = Дерево.Строки.Добавить();
	СтрокаНовыеПроцессы.Наименование = НСтр("ru = 'Новые процессы'");
	СтрокаНовыеПроцессы.Подсказка = СформироватьСводкуПоГруппеЭлементов(СтрокаНовыеПроцессы.Наименование);
	СтрокаНовыеПроцессы.Развернуть = Истина;
	СтрокаНовыеПроцессы.ЭтоЗаголовок= Истина;
	
	МетаданныеПроцессы = Метаданные.БизнесПроцессы;
	ПорядокСледованияПроцессов = Новый Массив;
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Поручение);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Согласование);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Исполнение);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Рассмотрение);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Ознакомление);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Регистрация);
	ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Утверждение);
	
	Если ИспользоватьПриглашениеНаМероприятие Тогда
		ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.Приглашение);
	КонецЕсли;
	
	Если НЕ ЕстьИсполнители ИЛИ ЕстьПредметы Тогда
		ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.ОбработкаВнутреннегоДокумента);
		ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.ОбработкаВходящегоДокумента);
		ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.ОбработкаИсходящегоДокумента);
		ПорядокСледованияПроцессов.Добавить(МетаданныеПроцессы.КомплексныйПроцесс);
	КонецЕсли;
	
	КоличествоПустыхПроцессов = 0;
	Для Каждого БПОбъект Из МетаданныеПроцессы Цикл
		Если ЗначениеЗаполнено(ТипПроцесса) И БПОбъект.Имя <> ТипПроцесса
			ИЛИ БПОбъект.Имя = "Приглашение" И 
				НЕ ИспользоватьПриглашениеНаМероприятие Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если (БПОбъект.Имя = "КомплексныйПроцесс"
			ИЛИ БПОбъект.Имя = "ОбработкаВнутреннегоДокумента"
			ИЛИ БПОбъект.Имя = "ОбработкаВходящегоДокумента"
			ИЛИ БПОбъект.Имя = "ОбработкаИсходящегоДокумента")
			И ЕстьИсполнители
			И НЕ ЕстьПредметы Тогда
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ДляКомплексногоПроцесса
				И НЕ БизнесПроцессы[БПОбъект.Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера бизнес-процесса 
						// не определена функция МожетИспользоватьсяВКомплексномПроцессе()
		КонецПопытки;
		
		Попытка
			Если НЕ БизнесПроцессы[БПОбъект.Имя].МожетЗапускатьсяИнтерактивно() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера бизнес-процесса 
						// не определена функция МожетЗапускатьсяИнтерактивно()
		КонецПопытки;

		ИндексПроцесса = ПорядокСледованияПроцессов.Найти(БПОбъект);
		Если ИндексПроцесса = Неопределено Тогда
			ИндексПроцесса = 999;
		КонецЕсли;
		
		Если ПредметыПроцесса <> Неопределено И ПредметыПроцесса.Количество() > 0 Тогда 
			Для Каждого ОснованиеДляВвода Из БПОбъект.ВводитсяНаОсновании Цикл
				Для Каждого СтрокаПредмета Из ПредметыПроцесса Цикл
					Если СтрокаПредмета.Предмет = Неопределено Или ОснованиеДляВвода = СтрокаПредмета.Предмет.Метаданные() Тогда
						Если  СтрокаНовыеПроцессы.Строки.Найти("БизнесПроцесс." + БПОбъект.Имя) = Неопределено Тогда
							КоличествоПустыхПроцессов = КоличествоПустыхПроцессов + 1;
							НоваяСтрока = СтрокаНовыеПроцессы.Строки.Добавить();
							НоваяСтрока.Наименование = БПОбъект.Синоним;
							НоваяСтрока.ТипПроцесса = "БизнесПроцесс." + БПОбъект.Имя; 
							НоваяСтрока.Подсказка = СформироватьСводкуПоПроцессуИПолучитьИмяФормы(НоваяСтрока.ТипПроцесса, НоваяСтрока.ИмяФормы, ДляКомплексногоПроцесса);
							НоваяСтрока.Порядок = ИндексПроцесса;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			КоличествоПустыхПроцессов = КоличествоПустыхПроцессов + 1;
			НоваяСтрока = СтрокаНовыеПроцессы.Строки.Добавить();
			НоваяСтрока.Наименование = БПОбъект.Синоним;
			НоваяСтрока.ТипПроцесса = "БизнесПроцесс." + БПОбъект.Имя; 
			НоваяСтрока.Подсказка = СформироватьСводкуПоПроцессуИПолучитьИмяФормы(НоваяСтрока.ТипПроцесса, НоваяСтрока.ИмяФормы, ДляКомплексногоПроцесса);
			НоваяСтрока.Порядок = ИндексПроцесса;
		КонецЕсли;
		
	КонецЦикла;
	СтрокаНовыеПроцессы.Строки.Сортировать("Порядок Возр, Наименование Возр");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, Предмет, Тип)
	
	ШаблоныПоТипуПроцесса = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(Предмет, Тип);
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		
		Если ШаблоныПоПредмету.Найти(Шаблон) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ДляКомплексногоПроцесса
				И НЕ Справочники[Шаблон.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
						// не определена функция МожетИспользоватьсяВКомплексномПроцессе()
		КонецПопытки;
		ШаблоныПоПредмету.Добавить(Шаблон);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНеПривязанныеШаблоны(Дерево, МассивОбщихШаблонов)
	
	СписокОбщихШаблонов = Новый СписокЗначений;
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	Для каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		
		Если ЗначениеЗаполнено(ТипПроцесса) И БизнесПроцесс.Имя <> ТипПроцесса
			ИЛИ БизнесПроцесс.Имя = "Приглашение" И 
				НЕ ИспользоватьПриглашениеНаМероприятие Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если (БизнесПроцесс.Имя = "КомплексныйПроцесс"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента")
			И ЕстьИсполнители
			И НЕ ЕстьПредметы Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Для каждого СтрокаПредмета Из Предметы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ПродолжитьВыполнение = Истина;
						Прервать;
					КонецЕсли;
					Если СтрокаПредмета.Предмет = Неопределено Или ОснованиеДляВвода = СтрокаПредмета.Предмет.Метаданные() Тогда
						ПродолжитьВыполнение = Истина; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПродолжитьВыполнение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; //у процесса не определен метод ТипШаблона() в модуле менеджера
		КонецПопытки;
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%1.Ссылка,
				|	%1.Наименование
				|ИЗ
				|	%1
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО %1.Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|ГДЕ
				|	%1.ПометкаУдаления = ЛОЖЬ
				|И	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса ЕСТЬ NULL
				|И	НЕ %1.ШаблонВКомплексномПроцессе
				|И	НЕ %1.ЭтоГруппа";
			
			Если ТипШаблона = "Справочник.ШаблоныСоставныхБизнесПроцессов" Тогда
				Запрос.Текст = Запрос.Текст + " И %1.ТипШаблона = ""%2""";
			КонецЕсли;	
						
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Запрос.Текст,
				ТипШаблона,
				БизнесПроцесс.Имя);
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				
				Попытка
					Если ДляКомплексногоПроцесса
						И НЕ Справочники[Результат.Ссылка.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
								// не определена функция МожетИспользоватьсяВКомплексномПроцессе() 
				КонецПопытки;
				
				Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов")
					И ЗначениеЗаполнено(ВидПроцесса) Тогда
					
					ТипСоставногоШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
						Результат.Ссылка,
						"ТипШаблона");
						
					Если ТипСоставногоШаблона <> ВидПроцесса Тогда
						Продолжить;
					КонецЕсли;
						
				КонецЕсли;					 
								
				Если СписокОбщихШаблонов.НайтиПоЗначению(Результат.Ссылка) = Неопределено Тогда
					СписокОбщихШаблонов.Добавить(Результат.Ссылка, Результат.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	СписокОбщихШаблонов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивОбщихШаблонов = СписокОбщихШаблонов.ВыгрузитьЗначения();
	КоличествоОбщихШаблонов = МассивОбщихШаблонов.Количество(); 
	Если КоличествоОбщихШаблонов > 0 Тогда
		// Если найдены шаблоны бизнес-процессов, не привязанные к видам документов,
		// они добавляются в группу "Общие шаблоны"
		СтрокаОбщие = Дерево.Строки.Добавить();
		СтрокаОбщие.Наименование = НСтр("ru = 'Общие шаблоны'");
		СтрокаОбщие.Подсказка = СформироватьСводкуПоГруппеЭлементов(СтрокаОбщие.Наименование);
		СтрокаОбщие.Развернуть = Истина;
		СтрокаОбщие.ЭтоЗаголовок = Истина;
		Для Каждого ОбщийШаблон Из МассивОбщихШаблонов Цикл
			ДанныеШаблона = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбщийШаблон, "Наименование, Комментарий");
			НоваяСтрока = СтрокаОбщие.Строки.Добавить();
			НоваяСтрока.Наименование = ДанныеШаблона.Наименование;
			НоваяСтрока.Описание = ДанныеШаблона.Комментарий;
			НоваяСтрока.ШаблонСсылка = ОбщийШаблон;
			НоваяСтрока.Подсказка = СформироватьСводкуПоШаблонуИПолучитьИмяФормы(НоваяСтрока.ШаблонСсылка, НоваяСтрока.ИмяФормы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОстальныеШаблоны(Дерево, МассивОбщихШаблонов, МассивРекомендованныхШаблонов)
	
	ЕстьИсполнители = Исполнители.Количество() > 0;
	ЕстьПредметы = Предметы.Количество() > 0;
	
	СписокШаблоновДляДобавления = Новый СписокЗначений;
	Для каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		Если ЗначениеЗаполнено(ТипПроцесса) И БизнесПроцесс.Имя <> ТипПроцесса
			ИЛИ БизнесПроцесс.Имя = "Приглашение" И 
				НЕ ИспользоватьПриглашениеНаМероприятие Тогда
				
			Продолжить;
		КонецЕсли;
		
		Если (БизнесПроцесс.Имя = "КомплексныйПроцесс"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
			ИЛИ БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента")
			И ЕстьИсполнители
			И НЕ ЕстьПредметы Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Для каждого СтрокаПредмета Из Предметы Цикл 
					Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ПродолжитьВыполнение = Истина;
						Прервать;
					КонецЕсли;
					Если СтрокаПредмета.Предмет = Неопределено Или ОснованиеДляВвода = СтрокаПредмета.Предмет.Метаданные() Тогда
						ПродолжитьВыполнение = Истина; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПродолжитьВыполнение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; // в модуле менеджера бизнес-процесса не определен метод ТипШаблона()
		КонецПопытки;
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|" + ТипШаблона + ".Ссылка,
				|" + ТипШаблона + ".Наименование 
				|ИЗ
				|	" + ТипШаблона + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО " + ТипШаблона + ".Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|ГДЕ
				|	" + ТипШаблона + ".ПометкаУдаления = ЛОЖЬ
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивРекомендованных)
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивОбщих)
				|И НЕ " + ТипШаблона + ".ШаблонВКомплексномПроцессе
				|И Не " + ТипШаблона + ".ЭтоГруппа";
			Запрос.УстановитьПараметр("МассивРекомендованных", МассивРекомендованныхШаблонов);
			Запрос.УстановитьПараметр("МассивОбщих", МассивОбщихШаблонов);
			
			Если БизнесПроцесс.Имя = "ОбработкаВнутреннегоДокумента"
				Или БизнесПроцесс.Имя = "ОбработкаВходящегоДокумента"
				Или БизнесПроцесс.Имя = "ОбработкаИсходящегоДокумента" Тогда
				Запрос.Текст = Запрос.Текст +
					" И " + ТипШаблона + ".ТипШаблона = &ИмяТипаШаблона";
				Запрос.УстановитьПараметр("ИмяТипаШаблона", БизнесПроцесс.Имя);
			КонецЕсли;
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				Попытка
					Если ДляКомплексногоПроцесса
						И НЕ Справочники[Результат.Ссылка.Метаданные().Имя].МожетИспользоватьсяВКомплексномПроцессе() Тогда
						Продолжить;
					КонецЕсли;
				Исключение
					Продолжить; // В модуле менеджера справочника шаблона бизнес-процесса
								// не определена функция МожетИспользоватьсяВКомплексномПроцессе() 
				КонецПопытки;
				
				Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов")
					И ЗначениеЗаполнено(ВидПроцесса) Тогда
					
					ТипСоставногоШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
						Результат.Ссылка,
						"ТипШаблона");
						
					Если ТипСоставногоШаблона <> ВидПроцесса Тогда
						Продолжить;
					КонецЕсли;
						
				КонецЕсли;
				
				Если СписокШаблоновДляДобавления.НайтиПоЗначению(Результат.Ссылка) = Неопределено Тогда		
					СписокШаблоновДляДобавления.Добавить(Результат.Ссылка, Результат.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	СписокШаблоновДляДобавления.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивШаблоновДляДобавления = СписокШаблоновДляДобавления.ВыгрузитьЗначения();
	КоличествоОстальныхШаблонов = МассивШаблоновДляДобавления.Количество();
	Если КоличествоОстальныхШаблонов > 0 Тогда
		СтрокаДругиеШаблоны = Дерево.Строки.Добавить();
		СтрокаДругиеШаблоны.Наименование = НСтр("ru = 'Другие шаблоны'");
		СтрокаДругиеШаблоны.Развернуть = Ложь;
		СтрокаДругиеШаблоны.ЭтоЗаголовок = Истина;
		СтрокаДругиеШаблоны.Подсказка = СформироватьСводкуПоГруппеЭлементов(СтрокаДругиеШаблоны.Наименование);
		Для Каждого Шаблон Из МассивШаблоновДляДобавления Цикл
			ДанныеШаблона = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Шаблон, "Наименование, Комментарий");
			НоваяСтрока = СтрокаДругиеШаблоны.Строки.Добавить();
			НоваяСтрока.Наименование = ДанныеШаблона.Наименование;
			НоваяСтрока.Описание = ДанныеШаблона.Комментарий;
			НоваяСтрока.ШаблонСсылка = Шаблон;
			НоваяСтрока.Подсказка = СформироватьСводкуПоШаблонуИПолучитьИмяФормы(НоваяСтрока.ШаблонСсылка, НоваяСтрока.ИмяФормы);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Устанавливается развернутость ветвей по умолчанию
	ЭлементыДерева = ДеревоШаблонов.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Развернуть Тогда
			Элементы.ДеревоШаблонов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);	
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТипПроцесса)
		И КоличествоРекомендуемыхШаблонов = 0
		И КоличествоОбщихШаблонов = 0
		И КоличествоОстальныхШаблонов = 0
		И КоличествоПустыхПроцессов = 1 Тогда
		
		Отказ = Истина;
		СоздатьПроцессВыполнить();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоШаблонов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СоздатьПроцесс.Доступность = НЕ Элементы.ДеревоШаблонов.ТекущиеДанные.ЭтоЗаголовок;
	Элементы.ФормаОткрытьКарточкуШаблонаКонтекст.Доступность = ЗначениеЗаполнено(Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка);
	Элементы.ОткрытьКарточкуШаблона.Доступность = ЗначениеЗаполнено(Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка);
	
	Сводка = Элементы.ДеревоШаблонов.ТекущиеДанные.Подсказка;
	ИмяДляФормы = Элементы.ДеревоШаблонов.ТекущиеДанные.ИмяФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)

	СоздатьПроцессВыполнить();

КонецПроцедуры

&НаСервере
Функция СформироватьСводкуПоПроцессуИПолучитьИмяФормы(ТипПроцесса, ИмяДляФормы, ДляКомплексногоПроцесса)
	
	СтрокаТип = СтрЗаменить(ТипПроцесса, НСтр("ru = 'БизнесПроцесс.'"), "");
	Если НЕ ДляКомплексногоПроцесса Тогда
		ИмяДляФормы = ТипПроцесса + ".Форма.ФормаБизнесПроцесса";
	Иначе
		Попытка 
			ИмяТипаПроцесса = СтрЗаменить(ТипПроцесса, НСтр("ru = 'БизнесПроцесс.'"), "");
			ИмяДляФормы = БизнесПроцессы[ИмяТипаПроцесса].ТипШаблона() + ".ФормаОбъекта";	
		Исключение
			// в модуле менеджера бизнес-процесса не определена функция ТипШаблона()
			Текст = НСтр("ru = 'В модуле менеджера процесса " + ИмяТипаПроцесса + " не определена функция ТипШаблона(). Обратитесь к администратору.'");
			ВызватьИсключение(Текст);
		Конецпопытки;
	КонецЕсли;
	Попытка 
		Возврат БизнесПроцессы[СтрокаТип].ПолучитьОписаниеПроцесса();
	Исключение
		Возврат Метаданные.БизнесПроцессы[СтрокаТип].Синоним;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СформироватьСводкуПоШаблонуИПолучитьИмяФормы(ШаблонСсылка, ИмяФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьИмяФормыПроцессаПоШаблону(ШаблонСсылка);
	Попытка
		Возврат ШаблонСсылка.ПолучитьОбъект().СформироватьСводкуПоШаблону();
	Исключение
		Возврат ШаблонСсылка.Наименование;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СформироватьСводкуПоГруппеЭлементов(ИмяГруппы)
	
	Если ИмяГруппы = НСтр("ru = 'Рекомендованные шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, привязанные к данному виду документа.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Общие шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, не привязанные ни к одному из видов документов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Новые процессы'") Тогда
		Текст = НСтр("ru = 'Ссылки на создание новых, незаполненных процессов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Другие шаблоны'") Тогда
		Если Предметы.Количество() > 0 Тогда
			Если Предметы.Количество() > 1 Тогда
				Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данных.'");
			Иначе
				Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данного.'");
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к какому-либо виду документов.'");
		КонецЕсли;
	Иначе
		Текст = НСтр("ru = 'Группа шаблонов процессов.'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ДеревоШаблоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьПроцессВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессВыполнить()
	
	Если Элементы.ДеревоШаблонов.ТекущиеДанные = Неопределено 
		ИЛИ Элементы.ДеревоШаблонов.ТекущиеДанные.ЭтоЗаголовок Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонБП = Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка;
	ТипБП = Элементы.ДеревоШаблонов.ТекущиеДанные.ТипПроцесса;
	Если ЗначениеЗаполнено(ИмяДляФормы) Тогда
		Если ДляКомплексногоПроцесса Тогда
			Если ЗначениеЗаполнено(ШаблонБП) Тогда
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
				ПараметрыОповещения.Вставить("ВладелецШаблона", ВладелецШаблона);
				ПараметрыОповещения.Вставить("ШаблонБП", ШаблонБП);
				ПараметрыОповещения.Вставить("Предметы", Предметы);
				Оповестить("ВыборШаблонаДействия", ПараметрыОповещения);
				ЭтаФорма.Закрыть();
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("КомплексныйПроцесс", Истина);
				ПараметрыФормы.Вставить("ВладелецШаблона", ВладелецШаблона);
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
				ПараметрыФормы.Вставить("Предметы", Предметы);
				ПараметрыФормы.Вставить("ТипШаблона", СтрЗаменить(ТипБП, НСтр("ru = 'БизнесПроцесс.'"), ""));
				ОткрытьФорму(ИмяДляФормы, ПараметрыФормы, ЭтаФорма.ВладелецФормы);
				ЭтаФорма.Закрыть();
			КонецЕсли;
		Иначе
			
			Основание = Новый Структура;
			Если НЕ СозданиеБезПредмета Тогда
				Основание.Вставить("Предметы", Предметы);
			КонецЕсли;
			Если ЗначениеЗаполнено(ШаблонБП) Тогда
				Основание.Вставить("Шаблон", ШаблонБП);
			КонецЕсли;
			Если ЗначениеЗаполнено(Задача) Тогда
				Основание.Вставить("ЗадачаИсполнителя", Задача);
			КонецЕсли;
			Если ЗначениеЗаполнено(ГлавнаяЗадача) Тогда
				Основание.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда
				Основание.Вставить("ПроектнаяЗадача", ПроектнаяЗадача);
			КонецЕсли;
			Если ЗначениеЗаполнено(Проект) Тогда
				Основание.Вставить("Проект", Проект);
			КонецЕсли;
			Если Исполнители.Количество() > 0 Тогда
				Основание.Вставить("Исполнители", Исполнители.ВыгрузитьЗначения());
			КонецЕсли;
			
			Попытка
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Основание", Основание);
					
				ОткрытьФорму(ИмяДляФормы, ПараметрыФормы);
				
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если Найти(Инфо.Описание, "не указан предмет процесса") > 0 Тогда
					Подсказка = НСтр("ru = 'Укажите предмет процесса'");
					Типы = Новый ОписаниеТипов(ОписаниеТиповПредметов);
					СтрокаПредметов = Предметы.Добавить();
					
					ОписаниеОповещения = 
						Новый ОписаниеОповещения("СоздатьПроцессВыполнитьЗавершение", ЭтаФорма, СтрокаПредметов);
						
					ПоказатьВводЗначения(ОписаниеОповещения, СтрокаПредметов.Предмет, Подсказка, Типы);
					
					Возврат;
				
				Иначе
					Инфо = ИнформацияОбОшибке();
					ВызватьИсключение(КраткоеПредставлениеОшибки(Инфо));
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		Если Открыта() Тогда 
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцессВыполнитьЗавершение(ВыбранноеЗначение, СтрокаПредметов) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПредметов.ИмяПредмета = 
		МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
			ВыбранноеЗначение);
			
	СозданиеБезПредмета = Ложь;
	СоздатьПроцессВыполнить();
	
	Если Открыта() Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеДоступныхТиповПредметов(Пользователь)
	
	Результат = "";	
	Если ПравоДоступа("Чтение", Метаданные.Справочники["ВнутренниеДокументы"]) Тогда
		Результат = "СправочникСсылка.ВнутренниеДокументы";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["ВходящиеДокументы"]) Тогда
		Результат = Результат + ",СправочникСсылка.ВходящиеДокументы";
	КонецЕсли;
    Если ПравоДоступа("Чтение", Метаданные.Справочники["ИсходящиеДокументы"]) Тогда
		Результат = Результат + ",СправочникСсылка.ИсходящиеДокументы";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["Корреспонденты"]) Тогда
		Результат = Результат + ",СправочникСсылка.Корреспонденты";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники["Файлы"]) Тогда
		Результат = Результат + ",СправочникСсылка.Файлы";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуШаблона(Команда)
	
	ПоказатьЗначение(, Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.ДеревоШаблонов.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка) Тогда
		ПоказатьЗначение(, Элементы.ДеревоШаблонов.ТекущиеДанные.ШаблонСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметБизнесПроцессаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Предметы[0].Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыВыбор(Предметы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕщеНажатие(Элемент)
	
	Элементы.ГруппаПанелиПредметСовет.ТекущаяСтраница = Элементы.ГруппаПредметы;
	
КонецПроцедуры
