&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧтениеВнутреннихДокументов = ПравоДоступа("Чтение", Метаданные.Справочники.ВнутренниеДокументы);
	ЧтениеВходящихДокументов = ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы);
	ЧтениеИсходящихДокументов = ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы);
	
	Если НЕ ЧтениеВходящихДокументов Тогда
		Элементы.ГруппаВходящиеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЧтениеИсходящихДокументов Тогда
		Элементы.ГруппаИсходящиеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЧтениеВнутреннихДокументов Тогда
		Элементы.ГруппаВнутренниеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда 
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
	КонецЕсли;
	
	// Работа с файлами
	СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиОткрытияФайлов",
			"СпрашиватьРежимРедактированияПриОткрытииФайла");
	
	Если СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка = Истина;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиОткрытияФайлов",
			"СпрашиватьРежимРедактированияПриОткрытииФайла",
			СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка);
		
	КонецЕсли;
	СпрашиватьРежимРедактированияПриОткрытииФайла = СпрашиватьРежимРедактированияПриОткрытииФайлаНастройка;
	
	ДействиеПоДвойномуЩелчкуМышиНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиОткрытияФайлов",
			"ДействиеПоДвойномуЩелчкуМыши");
	
	Если ДействиеПоДвойномуЩелчкуМышиНастройка = Неопределено Тогда
		ДействиеПоДвойномуЩелчкуМышиНастройка = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиОткрытияФайлов",
			"ДействиеПоДвойномуЩелчкуМыши",
			ДействиеПоДвойномуЩелчкуМышиНастройка);
		
	КонецЕсли;
	ДействиеПоДвойномуЩелчкуМыши = ДействиеПоДвойномуЩелчкуМышиНастройка;
	
	СпособСравненияВерсийФайлов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиСравненияФайлов",
			"СпособСравненияВерсийФайлов");
	
	ПоказыватьПодсказкиПриРедактированииФайлов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиПрограммы",
			"ПоказыватьПодсказкиПриРедактированииФайлов");
	
	ПутьКПрограммеКонвертацииPDF = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиСканирования/ПутьКПрограммеКонвертации", ИдентификаторКлиента);	
	
	Если ПустаяСтрока(ПутьКПрограммеКонвертацииPDF) Тогда
		ПутьКПрограммеКонвертацииPDF = "convert.exe"; // ImageMagick
	КонецЕсли;
	
	ИспользоватьImageMagickДляПреобразованияВPDF =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиСканирования/ИспользоватьImageMagickДляПреобразованияВPDF",
			ИдентификаторКлиента);
	
	Если ИспользоватьImageMagickДляПреобразованияВPDF = Неопределено Тогда
		ИспользоватьImageMagickДляПреобразованияВPDF = Ложь;
	КонецЕсли;
	
	ИспользоватьImageMagickДляРаспознаванияPDF =
		РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	Элементы.ПутьКПрограммеКонвертацииPDF.Видимость =
		ИспользоватьImageMagickДляРаспознаванияPDF Или ИспользоватьImageMagickДляПреобразованияВPDF;
	
	ПоказыватьКолонкуРазмерНастройка =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиПрограммы",
			"ПоказыватьКолонкуРазмер");
	
	Если ПоказыватьКолонкуРазмерНастройка = Неопределено Тогда
		ПоказыватьКолонкуРазмерНастройка = Ложь;
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиПрограммы",
			"ПоказыватьКолонкуРазмер",
			ПоказыватьКолонкуРазмерНастройка);
	КонецЕсли;
	ПоказыватьКолонкуРазмер = ПоказыватьКолонкуРазмерНастройка;
	
	// Работа с документами
	ВидВнутреннегоДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидВнутреннегоДокумента");
	
	ВидВходящегоДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидВходящегоДокумента");
	
	ВидИсходящегоДокумента =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ВидИсходящегоДокумента");
	
	СпособОтправки =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособОтправки");
	
	СпособПолучения =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособПолучения");
	
	ПоказыватьПредупреждениеПриРегистрации =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ПоказыватьПредупреждениеПриРегистрации");
	
	Если ПоказыватьПредупреждениеПриРегистрации = Неопределено Тогда 
		ПоказыватьПредупреждениеПриРегистрации = Истина;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиРаботыСДокументами",
			"ПоказыватьПредупреждениеПриРегистрации",
			ПоказыватьПредупреждениеПриРегистрации);
		
	КонецЕсли;
	
	НастройкаИспользоватьОбзорДокументов =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьОбзорДокументов");
	
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорДокументов = Истина;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьОбзорДокументов",
			ИспользоватьОбзорДокументов);
	Иначе		
		ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;	
	КонецЕсли;
	
	Организация =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"Организация");
	
	Валюта =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"Валюта");
	
	СпособОтраженияПередачиКорреспонденту =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"СпособОтраженияПередачиКорреспонденту");
	
	Если СпособОтраженияПередачиКорреспонденту = Неопределено Тогда
		СпособОтраженияПередачиКорреспонденту = Перечисления.СпособыОтраженияПередачиКонтрагенту.ЗадаватьВопрос;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиРаботыСДокументами",
			"СпособОтраженияПередачиКорреспонденту",
			СпособОтраженияПередачиКорреспонденту);
		
	КонецЕсли;
	
	// Настройки учета времени
	ВидРабот =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиУчетаВремени",
			"ВидРабот");
	
	СпособУказанияВремени =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиУчетаВремени",
			"СпособУказанияВремени");
	
	Если Не ЗначениеЗаполнено(СпособУказанияВремени) Тогда
		СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиУчетаВремени",
			"СпособУказанияВремени",
			СпособУказанияВремени);
		
	КонецЕсли;
	
	ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиУчетаВремени",
			"ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи");
	
	Если Не ЗначениеЗаполнено(ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи) Тогда
		ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи = Истина;
		
		ХранилищеОбщихНастроек.Сохранить(
			"НастройкиУчетаВремени",
			"ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи",
			ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
			Элементы.УстановитьРасширениеРаботыСКриптографиейНаКлиенте.Видимость = Ложь;
		Иначе
			Элементы.НастройкаСканирования.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаВыходаИзПрограммы = ХранилищеОбщихНастроек.Загрузить("НастройкаВыходаИзПрограммы");
	Если НастройкаВыходаИзПрограммы = Неопределено Тогда
		ЗапрашиватьПодтверждениеПриЗакрытииПрограммы = Ложь;
	Иначе
		ЗапрашиватьПодтверждениеПриЗакрытииПрограммы = НастройкаВыходаИзПрограммы;
	КонецЕсли;
	
	//Настройки штрихкода
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
		Элементы.Штрихкодирование.Видимость = Истина;
		НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
		ПоказыватьФормуНастройкиПоложения = НастройкиШтрихкода.ПоказыватьФормуНастройки;
		ПоложениеШтрихкода = НастройкиШтрихкода.ПоложениеНаСтранице;
		СмещениеПоГоризонтали = НастройкиШтрихкода.СмещениеПоГоризонтали;
		СмещениеПоВертикали = НастройкиШтрихкода.СмещениеПоВертикали;
		РазмерНаклейкиШКВерт = НастройкиШтрихкода.ВысотаНаклейки;
		РазмерНаклейкиШКГор = НастройкиШтрихкода.ШиринаНаклейки;
		ВставлятьЦифрыВШК = НастройкиШтрихкода.ПоказыватьЦифры;
		
		ВысотаШтрихкодаПриВставкеВФайл = НастройкиШтрихкода.ВысотаШК;
		Если Не ЗначениеЗаполнено(ВысотаШтрихкодаПриВставкеВФайл)
			Или ВысотаШтрихкодаПриВставкеВФайл < 10 И Не ВставлятьЦифрыВШК
			Или ВысотаШтрихкодаПриВставкеВФайл < 13 И ВставлятьЦифрыВШК Тогда
			Если ВставлятьЦифрыВШК Тогда
				ВысотаШтрихкодаПриВставкеВФайл = 13;
			Иначе
				ВысотаШтрихкодаПриВставкеВФайл = 10;
			КонецЕсли;
		КонецЕсли;
		РежимИспользованияНастроек = 1;
		ПереключитьСтандартныеЗначенияНастроек();
		
		ИнформацияОСистеме = Новый СистемнаяИнформация;
		Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86
			Или ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ТипОС = "Windows";
		ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86
			Или ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			ТипОС = "Linux";
		КонецЕсли;
		ПараметрыСканера = ШтрихкодированиеСервер.ЗагрузитьПараметрыПодключенияСканера(ТипОС);
		Если ПараметрыСканера = Неопределено Тогда
			СтатусПодключенияСканераШтрихкодов = "Не подключен";
		Иначе
			СтатусПодключенияСканераШтрихкодов = "Подключен к порту " + ПараметрыСканера.Порт; 
		КонецЕсли;
	Иначе
		Элементы.Штрихкодирование.Видимость = Ложь;
	КонецЕсли;
	
	// Настройки программы
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка = Истина;
	КонецЕсли;
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ПоказыватьЗанятыеФайлыПриЗавершенииРаботыНастройка;
	
	// Работа с почтой
	ИспользоватьЛегкуюПочту = РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеЛегкойПочты();
	ИспользоватьВстроеннуюПочту = РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеВстроеннойПочты();
	НачальноеЗначениеИспользоватьЛегкуюПочту = ИспользоватьЛегкуюПочту;
	НачальноеЗначениеИспользоватьВстроеннуюПочту = ИспользоватьВстроеннуюПочту;
	Элементы.НастройкиЛегкойПочты.Доступность = ИспользоватьЛегкуюПочту;
	Элементы.НастройкиВстроеннойПочты.Доступность = ИспользоватьВстроеннуюПочту;
	
	//Категории
	ЗапрашиватьПодтверждениеПриПроверкеКатегорий =
		ХранилищеОбщихНастроек.Загрузить(
			"ПроверкаКатегорий",
			"ПоказыватьПодтверждениеПроверкиКатегорий");
	
	ПоказыватьПодтверждениеПовторнойКатегоризации =
		ХранилищеОбщихНастроек.Загрузить(
			"ПроверкаКатегорий",
			"ПоказыватьПодтверждениеПовторнойКатегоризации");
	
	// Заполняем настройки открытия файлов
	СтрокаНастройки = НастройкиОткрытияФайлов.Добавить();
	СтрокаНастройки.ТипФайла = Перечисления.ТипыФайловДляВстроенногоРедактора.ТекстовыеФайлы;
	
	СтрокаНастройки.Расширение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"Расширение",
			"TXT XML INI");
	
	СтрокаНастройки.СпособОткрытия =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"СпособОткрытия",
			Перечисления.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе);
	
	ПоказыватьИнформациюЧтоФайлНеБылИзменен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ПоказыватьИнформациюЧтоФайлНеБылИзменен",
			Ложь);
	
	// Проект
	Проект =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСПроектами",
			"ПроектПоУмолчанию");
		
	ВидПроекта =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСПроектами",
			"ВидПроектаПоУмолчанию");
			
	// Прочтение
	ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрочтения",
			"ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения",
			Ложь);
		
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
	
	// НапоминанияПользователя
	Элементы.ГруппаНапоминания.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	ИнтервалПроверкиНапоминаний = НапоминанияПользователяСлужебный.ПолучитьИнтервалПроверкиНапоминаний();
	СрокНапоминанияПоУмолчанию =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
	УстанавливатьНапоминаниеАвтоматически =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
	// Конец НапоминанияПользователя
	
	ФлагПоУмолчаниюДляЗадач = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ФлагиОбъектов",
			"ФлагПоУмолчаниюДляЗадач",
			Перечисления.ФлагиОбъектов.Красный);
		
	ОтобразитьФлагЗадачи();
	
	Элементы.ГруппаМобильныйКлиент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты");
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповестить("ПерсональныеНастройки_Закрытие");	
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗакрытиемПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки();
		НеобходимостьОбновленияИнтерфейса = Истина;
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		Если ИспользоватьЛегкуюПочту <> НачальноеЗначениеИспользоватьЛегкуюПочту
			ИЛИ ИспользоватьВстроеннуюПочту <> НачальноеЗначениеИспользоватьВстроеннуюПочту Тогда
			ОтменаСервер();
			НеобходимостьОбновленияИнтерфейса = Истина;
		КонецЕсли;
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НеобходимостьОбновленияИнтерфейса Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьИнтерфейсКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Применить() Тогда
		Закрыть(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Применить()
	
	Если Элементы.Штрихкодирование.Видимость Тогда
		Если ВысотаШтрихкодаПриВставкеВФайл < 10
			И Не ВставлятьЦифрыВШК Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Введена слишком маленькая высота штрихкода. Минимальная высота штрихкода без вставки цифр составляет 10 мм.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ВысотаШтрихкодаПриВставкеВФайл");
			Возврат Ложь;
		КонецЕсли;
		
		Если ВысотаШтрихкодаПриВставкеВФайл < 13
			И ВставлятьЦифрыВШК Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Введена слишком маленькая высота штрихкода. Минимальная высота штрихкода со вставкой цифр составляет 13 мм.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ВысотаШтрихкодаПриВставкеВФайл");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СохранитьНастройки();
	НеобходимостьОбновленияИнтерфейса = Истина;
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	МассивСтруктур = Новый Массив;
	
	// НастройкиПрограммы
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиСканирования/ПутьКПрограммеКонвертации", ИдентификаторКлиента, ПутьКПрограммеКонвертацииPDF);
	
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ПоказыватьИнформациюЧтоФайлНеБылИзменен", ПоказыватьИнформациюЧтоФайлНеБылИзменен);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрограммы", "ОтображатьФотографииПерсональнаяНастройка", ОтображатьФотографииПерсональнаяНастройка);
	
	// НастройкиОткрытияФайлов
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	
	// НастройкиСравненияФайлов
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);
	
	// НастройкиРаботыСДокументами
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "ВидВнутреннегоДокумента", ВидВнутреннегоДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "ВидВходящегоДокумента", ВидВходящегоДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "ВидИсходящегоДокумента", ВидИсходящегоДокумента);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "СпособОтправки", СпособОтправки);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "СпособПолучения", СпособПолучения);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "Организация", Организация);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "Валюта", Валюта);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "СпособОтраженияПередачиКорреспонденту", СпособОтраженияПередачиКорреспонденту);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов", ИспользоватьОбзорДокументов);
	
	// НастройкиУчетаВремени
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиУчетаВремени", "ВидРабот", ВидРабот);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиУчетаВремени", "СпособУказанияВремени", СпособУказанияВремени);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиУчетаВремени", "ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи", ДобавлятьРаботуВЕжедневныйОтчетПриВыполненииЗадачи);
	
	// НастройкаВыходаИзПрограммы
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкаВыходаИзПрограммы",, ЗапрашиватьПодтверждениеПриЗакрытииПрограммы);
	
	// НастройкиШтрихкода
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ПоказыватьФормуНастройкиШтрихкода", ПоказыватьФормуНастройкиПоложения);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ПоложениеШтрихкодаНаСтранице", ПоложениеШтрихкода);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "СмещениеПоГоризонтали", СмещениеПоГоризонтали);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "СмещениеПоВертикали", СмещениеПоВертикали);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ШиринаНаклейки", РазмерНаклейкиШКГор);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ВысотаНаклейки", РазмерНаклейкиШКВерт);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ВысотаШтрихкодаПриВставкеВФайл", ВысотаШтрихкодаПриВставкеВФайл);	
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиШтрихкода", "ВставлятьЦифрыВШК", ВставлятьЦифрыВШК);
	
	// ПроверкаКатегорий
	ДобавитьСтруктуруНастройки(МассивСтруктур, "ПроверкаКатегорий", "ПоказыватьПодтверждениеПроверкиКатегорий", ЗапрашиватьПодтверждениеПриПроверкеКатегорий);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "ПроверкаКатегорий", "ПоказыватьПодтверждениеПовторнойКатегоризации", ПоказыватьПодтверждениеПовторнойКатегоризации);
	
	// Настройки открытия файлов
	Если НастройкиОткрытияФайлов.Количество() = 1 Тогда
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "Расширение",
			НастройкиОткрытияФайлов[0].Расширение);
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "СпособОткрытия",
			НастройкиОткрытияФайлов[0].СпособОткрытия);
	КонецЕсли;
	
	// Проект
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСПроектами", "ПроектПоУмолчанию", Проект);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиРаботыСПроектами", "ВидПроектаПоУмолчанию", ВидПроекта);
	
	// Прочтение
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиПрочтения", "ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения", ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения);
	
	// НапоминанияПользователя
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиНапоминаний", "ИнтервалПроверкиНапоминаний",
		ИнтервалПроверкиНапоминаний);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиНапоминаний", "СрокНапоминанияПоУмолчанию",
		СрокНапоминанияПоУмолчанию);
	ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиНапоминаний", "УстанавливатьНапоминаниеАвтоматически",
		УстанавливатьНапоминаниеАвтоматически);
	// Конец НапоминанияПользователя
	
	// ФлагиОбъектов
	ДобавитьСтруктуруНастройки(МассивСтруктур, "ФлагиОбъектов", "ФлагПоУмолчаниюДляЗадач", ФлагПоУмолчаниюДляЗадач);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	УстановитьФункциональныеОпцииИспользованияПочты();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтруктуруНастройки(МассивСтруктур, Объект, Настройка = Неопределено, Значение)
	
	МассивСтруктур.Добавить(Новый Структура ("Объект, Настройка, Значение", Объект, Настройка, Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	
	ЭтоВебКлиент = Ложь;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ПараметрыОткрытия = Новый Структура("ЭтоВебКлиент", ЭтоВебКлиент);
	ОткрытьФорму("ОбщаяФорма.НастройкаЛокальногоКэшаФайлов", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	
	НачатьУстановкуРасширенияРаботыСФайлами();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	КомпонентаУстановлена = РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура(
		"КомпонентаУстановлена, ИдентификаторКлиента",
		КомпонентаУстановлена,
		ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаспознавания(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.ПерсональныеНастройкиРаспознавания",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭП(Команда)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	ВебКлиентВLinux = Ложь;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ВебКлиентВLinux = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"ВебКлиентВLinux, ПоказыватьНастройкиШифрования",
		ВебКлиентВLinux,
		Истина);
	
	ОткрытьФорму("Общаяформа.ПерсональныеНастройкиЭП", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСКриптографиейНаКлиенте(Команда)
	
	НачатьУстановкуРасширенияРаботыСКриптографией();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеШтрихкодаПриИзменении(Элемент)
	
	ПереключитьСтандартныеЗначенияНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьСтандартныеЗначенияНастроек()
	
	Элементы.СмещениеПоГоризонтали.Доступность = Ложь;
	Элементы.СмещениеПоВертикали.Доступность = Ложь;
	Элементы.СмещениеПоГоризонтали.Маска = "";
	Элементы.СмещениеПоВертикали.Маска = "";
	Элементы.ГруппаОтступСверху.Доступность = Ложь;
	Элементы.ГруппаОтступСлева.Доступность = Ложь;

	Если ПоложениеШтрихкода = Перечисления.ВариантыРасположенияШтрихкода.ПравыйНижний Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MAX";
	ИначеЕсли ПоложениеШтрихкода = Перечисления.ВариантыРасположенияШтрихкода.ПравыйВерхний Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеШтрихкода = Перечисления.ВариантыРасположенияШтрихкода.ЛевыйВерхний Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеШтрихкода = Перечисления.ВариантыРасположенияШтрихкода.ЛевыйНижний Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MAX";
	Иначе
		Элементы.СмещениеПоГоризонтали.Доступность = Истина;
		Элементы.СмещениеПоВертикали.Доступность = Истина;
		Элементы.СмещениеПоГоризонтали.Маска = "999";
		Элементы.СмещениеПоВертикали.Маска = "999";
		СмещениеПоГоризонтали = 0;
		СмещениеПоВертикали = 0;
		Элементы.ГруппаОтступСверху.Доступность = Истина;
		Элементы.ГруппаОтступСлева.Доступность = Истина;
	КонецЕсли;
	
	УстановитьИндексКартинки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИндексКартинки()
	
	Элементы.КартинкаДляПредпросмотра.ТекстНевыбраннойКартинки = НСтр("ru = 'Распечатайте пробный лист для проверки правильности расположения штрихкода'");
			
	КартинкаДляПредпросмотра = -1;
		
	Если СмещениеПоГоризонтали = "MIN" Тогда
		КартинкаДляПредпросмотра = КартинкаДляПредпросмотра + 1;
	ИначеЕсли СмещениеПоГоризонтали = "MAX" Тогда
		КартинкаДляПредпросмотра = КартинкаДляПредпросмотра + 3;
	КонецЕсли;
	
	Если СмещениеПоВертикали = "MAX" Тогда
		КартинкаДляПредпросмотра = КартинкаДляПредпросмотра + 1;
	КонецЕсли;
	
	Если НЕ Элементы.СмещениеПоГоризонтали.Доступность Тогда 
	
		Если РежимИспользованияНастроек = 1 Тогда 
			КартинкаДляПредпросмотра = 2 * КартинкаДляПредпросмотра + 12;	
		ИначеЕсли РежимИспользованияНастроек = 0 И ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда 
			КартинкаДляПредпросмотра = 2 * КартинкаДляПредпросмотра + 4;
		ИначеЕсли РежимИспользованияНастроек = 2 Тогда 
			КартинкаДляПредпросмотра = КартинкаДляПредпросмотра + 20;
		КонецЕсли;	
		
		Если РежимИспользованияНастроек < 2 Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") и Не ВставлятьЦифрыВШК Тогда
				КартинкаДляПредпросмотра = КартинкаДляПредпросмотра + 1;	
			КонецЕсли;
		КонецЕсли;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСканерШтрихкодов(Команда)
	
	// Обновление текущих настроек сканера
	
	// Получим форму настройки торгового оборудования
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастроитьСканерШтрихкодовПродолжение",
		ЭтотОбъект);	

	ОткрытьФорму("Справочник.НастройкиОборудования.ФормаВыбора", 
		Новый Структура("РежимВыбора", Истина),,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСканерШтрихкодовПродолжение(ВыбранныеНастройки, Параметры) Экспорт 

	 // Если настройки выбраны - осуществляем попытку подключения сканера
	Если ВыбранныеНастройки <> Неопределено Тогда
		
		СисИнфо = Новый СистемнаяИнформация;
		
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			
			ТипОС = "Windows";
			
		ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86
			Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			
			ТипОС = "Linux";
			
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТипОС", ТипОС);
		ПараметрыОповещения.Вставить("ВыбранныеНастройки", ВыбранныеНастройки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановкаВнешнейКомпонентыДрайверСканераШтрихкодов",
			ЭтотОбъект,
			ПараметрыОповещения);	

		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, "ОбщийМакет.ДрайверСканераШтрихкодов");
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаВнешнейКомпонентыДрайверСканераШтрихкодов(Параметры) Экспорт 

	СохранитьПараметрыПодключенияСканера(Параметры.ТипОС, Параметры.ВыбранныеНастройки);
	// Применение новых настроек подключения сканера штрихкодов
	РаботаСТорговымОборудованием.ОтключитьСканерШтрихкодов();
	РаботаСТорговымОборудованием.ПодключитьСканерШтрихкодов("ПоискДокументовПоШтрихкоду");

КонецПроцедуры

// Заполнение параметров подключения драйвера сканера и их сохранение в хранилище настроек.
//
// Параметры:
//  ТипОС (Строка) – тип операционной системы.  (IN)
//  ВыбранныеПараметры (Структура) – исходные данные для подключения. (IN)
//  АдресДрайвераСканера (Строка) - адрес внешней компоненты сканера
// 
// Возвращаемое значение: 
//  Нет.
&НаСервере
Процедура СохранитьПараметрыПодключенияСканера(ТипОС, ВыбранныеПараметры)

	ПараметрыСканера = Новый Структура();
	ПараметрыСканера.Вставить("БитДанных", ВыбранныеПараметры.БитДанных);
	ПараметрыСканера.Вставить("Скорость", ВыбранныеПараметры.Скорость);
	ПараметрыСканера.Вставить("Порт", ВыбранныеПараметры.Порт);
	
	Если ТипОС = "Windows" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("ТекущиеНастройкиСканераWindows",, ПараметрыСканера);
		
	ИначеЕсли ТипОС = "Linux" Тогда
	
		ХранилищеОбщихНастроек.Сохранить("ТекущиеНастройкиСканераLinux",, ПараметрыСканера);
		
	КонецЕсли;
	
	СтатусПодключенияСканераШтрихкодов = "Подключен к порту " + ВыбранныеПараметры.Порт;

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Если ИспользоватьЛегкуюПочту <> НачальноеЗначениеИспользоватьЛегкуюПочту
		ИЛИ ИспользоватьВстроеннуюПочту <> НачальноеЗначениеИспользоватьВстроеннуюПочту Тогда
		ОтменаСервер();
		НеобходимостьОбновленияИнтерфейса = Истина;
	КонецЕсли;
	Модифицированность = Ложь;
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаСервере
Процедура ОтменаСервер()
	
	ИспользоватьЛегкуюПочту = НачальноеЗначениеИспользоватьЛегкуюПочту;
	ИспользоватьВстроеннуюПочту = НачальноеЗначениеИспользоватьВстроеннуюПочту;
	УстановитьФункциональныеОпцииИспользованияПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКПрограммеКонвертацииPDFНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ПутьКПрограммеКонвертацииPDF;
	Фильтр = НСтр("ru = 'Исполняемые файлы(*.exe)|*.exe'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите исполняемый файл для преобразования PDF'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКПрограммеКонвертацииPDF = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВысотаШтрихкодаПриВставкеВФайлОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВысотаШтрихкодаПриВставкеВФайл = 21;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЛегкойПочты(Команда)
	
	ОткрытьФорму("Обработка.НастройкаПочты.Форма.НастройкиЛегкойПочты",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВстроеннойПочты(Команда)
	
	ВстроеннаяПочтаКлиент.ОткрытьФормуНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛегкуюПочтуПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииИспользованияПочты();
	Элементы.НастройкиЛегкойПочты.Доступность = ИспользоватьЛегкуюПочту;
	ОбновитьИнтерфейсКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВстроеннуюПочтуПриИзменении(Элемент)
	
	УстановитьФункциональныеОпцииИспользованияПочты();
	Элементы.НастройкиВстроеннойПочты.Доступность = ИспользоватьВстроеннуюПочту;
	ОбновитьИнтерфейсКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсКлиент()
	
	УстанавливаемыеПараметры = Новый Структура;
	УстанавливаемыеПараметры.Вставить("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	УстановитьПараметрыФункциональныхОпцийИнтерфейса(УстанавливаемыеПараметры);
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииИспользованияПочты()
	
	РегистрыСведений.ИспользованиеПочты.УстановитьИспользованиеПочты(ИспользоватьЛегкуюПочту, ИспользоватьВстроеннуюПочту);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомлений(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПодпискиПользователя",,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура КрасныйФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.СинийФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлагЗадачи(Команда)
	
	ФлагПоУмолчаниюДляЗадач = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый");
	Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФлагЗадачи()
	
	Если ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ПустойФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Красный Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Синий Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.СинийФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Желтый Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Зеленый Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Оранжевый Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	ИначеЕсли ФлагПоУмолчаниюДляЗадач = Перечисления.ФлагиОбъектов.Лиловый Тогда
		Элементы.ПодменюФлагиЗадач.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСинхронизацииСМобильным(Команда)
	
	ОткрытьФорму("Обработка.НастройкаСинхронизацииСМобильнымКлиентом.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ВставлятьЦифрыВШКПриИзменении(Элемент)
	
	ПоложениеШтрихкодаПриИзменении(Элемент);
	
КонецПроцедуры

//1С-Минск
&НаКлиенте
Процедура мНастройкаСканированияДел(Команда)
	
	КомпонентаУстановлена = РаботаСоСканеромКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура(
		"КомпонентаУстановлена, ИдентификаторКлиента",
		КомпонентаУстановлена,
		ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.Файлы.Форма.мНастройкаСканированияДел", ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
//1С-Минск
