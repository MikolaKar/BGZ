#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Пользователь") Тогда
		Пользователь = Параметры.Пользователь;
	Иначе
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если Параметры.Свойство("ОтобразитьСпособыДоставки") И Параметры.ОтобразитьСпособыДоставки Тогда
		Элементы.СтраницыНастройкаУведомлений.ТекущаяСтраница = Элементы.СтраницаСпособыУведомления;
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ГруппаПользователь.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьСервер();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Подписки были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьАдресаЭлектроннойПочты() Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьСервер();
		
		Если ИзмененыДанныеУведомленияПоПочте Тогда
			Оповестить("ИзмененыДанныеУведомленияПоПочте");
			ИзмененыДанныеУведомленияПоПочте = Ложь;
		КонецЕсли;
		
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеДляУведомленияПоПочтеПриИзменении(Элемент)
	
	ИзмененыДанныеУведомленияПоПочте = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПодошелСрокЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ОбновитьСервер();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыОбработчикаОповещения = Новый Структура;
		ПараметрыОбработчикаОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПользовательОбработкаВыбораЗавершение", ЭтотОбъект, ПараметрыОбработчикаОповещения);
		ТекстВопроса = НСтр("ru = 'Подписки были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьАдресаЭлектроннойПочты() Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьСервер();
		
		Если ИзмененыДанныеУведомленияПоПочте Тогда
			Оповестить("ИзмененыДанныеУведомленияПоПочте");
			ИзмененыДанныеУведомленияПоПочте = Ложь;
		КонецЕсли;
		
		Пользователь = ДополнительныеПараметры.ВыбранноеЗначение;
		ОбновитьСервер();
		УстановитьДоступностьЭлементовФормы();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Пользователь = ДополнительныеПараметры.ВыбранноеЗначение;
		ОбновитьСервер();
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаСозданиеЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
	Если ПодпискаСозданиеЗадачи = Ложь Тогда
		ИспользоватьВыполнениеЗадачПоПочте = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПросроченаЗадачаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПросроченаЗадачаОдинРаз Тогда
		
		Если ЧастотаПросроченаЗадача <> 0 Тогда
			
			ЧастотаПросроченаЗадача = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадача = 0 Тогда
			
			ЗначениеПоУмолчанию = Макс(ЧастотаПросроченаЗадачаПоУмолчанию, 1);
			ЧастотаПросроченаЗадача = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
		
		Если ЧастотаПодошелСрокЗадачи <> 0 Тогда
			
			ЧастотаПодошелСрокЗадачи = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачи = 0 Тогда
			
			ЗначениеПоУмолчанию = Макс(ЧастотаПодошелСрокЗадачиПоУмолчанию, 1);
			ЧастотаПодошелСрокЗадачи = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаПриИзменении(Элемент)
	
	ОбработкаИзмененияЧастотаПросроченаЗадача();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастотаПросроченаЗадача = ЧастотаПросроченаЗадачаПоУмолчанию;
	ОбработкаИзмененияЧастотаПросроченаЗадача();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПодошелСрокЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СрокПодошелСрокЗадачи = СрокПодошелСрокЗадачиПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиПриИзменении(Элемент)
	
	ОбработкаИзмененияЧастотаПодошелСрокЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастотаПодошелСрокЗадачи = ЧастотаПодошелСрокЗадачиПоУмолчанию;
	ОбработкаИзмененияЧастотаПодошелСрокЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПриближениеОкончанияСрокаДействияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриближениеОкончанияСрокаДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СрокПриближениеОкончанияСрокаДействия = СрокПриближениеОкончанияСрокаДействияПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПриближениеОкончанияСрокаДействияОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
		
		Если ЧастотаПриближениеОкончанияСрокаДействия <> 0 Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействия = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
			
			ЗначениеПоУмолчанию = Макс(ЧастотаПриближениеОкончанияСрокаДействияПоУмолчанию, 1);
			ЧастотаПриближениеОкончанияСрокаДействия = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПриближениеОкончанияСрокаДействияПриИзменении(Элемент)
	
	ОбработкаИзмененияЧастотаПриближениеОкончанияСрокаДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПриближениеОкончанияСрокаДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастотаПриближениеОкончанияСрокаДействия = ЧастотаПриближениеОкончанияСрокаДействияПоУмолчанию;
	ОбработкаИзмененияЧастотаПриближениеОкончанияСрокаДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПодошелСрокКонтроляПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПросроченКонтрольПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченКонтрольОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПросроченКонтрольОдинРаз Тогда
		
		Если ЧастотаПросроченКонтроль <> 0 Тогда
			
			ЧастотаПросроченКонтроль = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченКонтроль = 0 Тогда
			
			ЗначениеПоУмолчанию = Макс(ЧастотаПросроченКонтрольПоУмолчанию, 1);
			ЧастотаПросроченКонтроль = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокКонтроляОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокКонтроляОдинРаз Тогда
		
		Если ЧастотаПодошелСрокКонтроля <> 0 Тогда
			
			ЧастотаПодошелСрокКонтроля = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокКонтроля = 0 Тогда
			
			ЗначениеПоУмолчанию = Макс(ЧастотаПодошелСрокКонтроляПоУмолчанию, 1);
			ЧастотаПодошелСрокКонтроля = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченКонтрольПриИзменении(Элемент)
	
	ОбработкаИзмененияЧастотаПросроченКонтроль();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченКонтрольОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастотаПросроченКонтроль = ЧастотаПросроченКонтрольПоУмолчанию;
	ОбработкаИзмененияЧастотаПросроченКонтроль();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПодошелСрокКонтроляОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СрокПодошелСрокКонтроля = СрокПодошелСрокКонтроляПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокКонтроляПриИзменении(Элемент)
	
	ОбработкаИзмененияЧастотаПодошелСрокКонтроля();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокКонтроляОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЧастотаПодошелСрокКонтроля = ЧастотаПодошелСрокКонтроляПоУмолчанию;
	ОбработкаИзмененияЧастотаПодошелСрокКонтроля();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодпискиНаУведомленияПоОбъектам

&НаКлиенте
Процедура ПодпискиНаУведомленияПоОбъектамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ПодпискиНаУведомленияПоОбъектамПодпискаАктивнаСтрокой" Тогда
		ИзменитьПодписку(Элемент.ТекущиеДанные.ПодпискаАктивна, Элемент.ТекущиеДанные.ПодпискаАктивнаСтрокой);
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ОбъектПодписки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ПроверитьАдресаЭлектроннойПочты() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСервер();
	Если ИзмененыДанныеУведомленияПоПочте Тогда
		Оповестить("ИзмененыДанныеУведомленияПоПочте");
		ИзмененыДанныеУведомленияПоПочте = Ложь;
	КонецЕсли;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ПроверитьАдресаЭлектроннойПочты() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСервер();
	Если ИзмененыДанныеУведомленияПоПочте Тогда
		Оповестить("ИзмененыДанныеУведомленияПоПочте");
		ИзмененыДанныеУведомленияПоПочте = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПодпискиДа(Команда)
	
	УстановитьЗначениеПодпискиСтрок(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПодпискиНет(Команда)
	
	УстановитьЗначениеПодпискиСтрок(0)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПодпискиПусто(Команда)
	
	УстановитьЗначениеПодпискиСтрок(2)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьПодписку(Подписка, ПодпискаСтрокой)
	
	Модифицированность = Истина;
	
	Подписка = Подписка - 1;
	Если Подписка < 0 Тогда
		Подписка = 2;
	КонецЕсли;
	
	ПодпискаСтрокой = СтрокаПодписка(Подписка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПодписка(Подписка)
	
	Если Подписка = 0 Тогда
		Возврат НСтр("ru = 'Нет'");
	ИначеЕсли Подписка = 1 Тогда
		Возврат НСтр("ru = 'Да'");
	ИначеЕсли Подписка = 2 Тогда
		Возврат " ";
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура СохранитьСервер()
	
	Модифицированность = Ложь;
	Дерево = РеквизитФормыВЗначение("ПодпискиНаУведомленияПоОбъектам");
	МассивПодписок = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь), Истина);
	РаботаСУведомлениями.ЗаполнитьПодпискиНаУведомления(МассивПодписок, Пользователь);
	
	МассивСпособовУведомления = Новый Массив;
	Если ОдинСпособУведомления Тогда
		МассивСпособовУведомления.Добавить(СпособУведомления);
	КонецЕсли;
	
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		МассивСпособовУведомления,
		ПодпискаСозданиеЗадачи,
		Пользователь);
	РаботаСУведомлениями.УстановитьНастройкуПользователя(
		Пользователь,
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте, 
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи, 
		ИспользоватьВыполнениеЗадачПоПочте);
	РаботаСУведомлениями.УстановитьНастройкуПользователя(
		Пользователь,
		Перечисления.НастройкиУведомлений.УведомленияПрограммы, 
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы, 
		УведомленияПрограммы);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
		МассивСпособовУведомления,
		ПодпискаПеренаправлениеЗадачи,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		МассивСпособовУведомления,
		ПодпискаОтменаВыполненияЗадачи,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		МассивСпособовУведомления,
		ПодпискаПодошелСрокЗадачи,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		МассивСпособовУведомления,
		ПодпискаПросроченаЗадача,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,
		МассивСпособовУведомления,
		ПодпискаВыполнениеЗадачи,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		МассивСпособовУведомления,
		ПодпискаПриближениеОкончанияСрокаДействия,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
		МассивСпособовУведомления,
		ПодпискаОкончаниеСрокаДействия,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.СозданиеСообщения,
		МассивСпособовУведомления,
		ПодпискаСозданиеСообщения,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса,
		МассивСпособовУведомления,
		ПодпискаОстановкаИПрерываниеПроцесса,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса,
		МассивСпособовУведомления,
		ПодпискаОстановкаИПрерываниеПроцесса,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса,
		МассивСпособовУведомления,
		ПодпискаОстановкаИПрерываниеПроцесса,
		Пользователь);
	
	РаботаСУведомлениями.СохранитьНастройкуУведомленияОЗадачах(
		СрокПодошелСрокЗадачи,
		ЧастотаПодошелСрокЗадачи,
		ЧастотаПросроченаЗадача,
		Пользователь);
	
	РаботаСУведомлениями.СохранитьНастройкуУведомленияОкончанияСрокаДействия(
		СрокПриближениеОкончанияСрокаДействия, 
		ЧастотаПриближениеОкончанияСрокаДействия,
		Пользователь);
		
	//Контроль
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		МассивСпособовУведомления,
		ПодпискаПодошелСрокКонтроля,
		Пользователь);
	РаботаСУведомлениями.СохранитьНастройкуУведомленияОКонтроле(
		СрокПодошелСрокКонтроля,
		ЧастотаПодошелСрокКонтроля,
		ЧастотаПросроченКонтроль,
		Пользователь);
	РаботаСУведомлениями.УстановитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПросроченКонтроль,
		МассивСпособовУведомления,
		ПодпискаПросроченКонтроль,
		Пользователь);
	
	Если ИзмененыДанныеУведомленияПоПочте Тогда
		РаботаСУведомлениями.ЗаполнитьДанныеСпособаУведомления(Перечисления.СпособыУведомления.ПоПочте, ДанныеДляУведомленияПоПочте, Пользователь);
	КонецЕсли;
	
	// Если включили подписку ОкончанияСрокаДействия,
	// то для закончившихся ранее документов добавим записи, что уведомления обработаны
	Если Не НачальноеЗначениеПодпискаОкончаниеСрокаДействия И ПодпискаОкончаниеСрокаДействия  Тогда 
		РаботаСУведомлениями.ОтметитьОтправкуУведомленийПоОкончившимсяРанееДокументам(Пользователь);
	КонецЕсли;	
	НачальноеЗначениеПодпискаОкончаниеСрокаДействия = ПодпискаОкончаниеСрокаДействия;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодпискиНаУведомленияПоОбъектам(СписокВидовБизнесСобытий, СписокСпособовУведомления)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполняем дерево
	Дерево = РеквизитФормыВЗначение("ПодпискиНаУведомленияПоОбъектам");
	
	Дерево.Строки.Очистить();
	
	// Получить данные из регистра сведений
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодпискиНаУведомления.ВидСобытия КАК ВидСобытия,
		|	ПодпискиНаУведомления.ОбъектПодписки КАК ОбъектПодписки,
		|	ПодпискиНаУведомления.СпособУведомления,
		|	ЕСТЬNULL(ПодпискиНаУведомления.ПодпискаАктивна, 2) КАК ПодпискаАктивна
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия В(&СписокБизнесСобытий)
		|	И ПодпискиНаУведомления.Пользователь = &Пользователь
		|	И ПодпискиНаУведомления.СпособУведомления В(&СписокСпособовУведомлений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодпискиНаУведомления.ОбъектПодписки";
	Запрос.УстановитьПараметр("СписокБизнесСобытий", СписокВидовБизнесСобытий);
	Запрос.УстановитьПараметр("СписокСпособовУведомлений", СписокСпособовУведомления);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектГруппировки = Выборка.ОбъектПодписки;
		
		Если ЗначениеЗаполнено(ОбъектГруппировки) Тогда
			
			НайденнаяСтрока = Дерево.Строки.Найти(ОбъектГруппировки, "ОбъектГруппировки");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
			Иначе
				СтрокаГруппировки = Дерево.Строки.Добавить();
				СтрокаГруппировки.ОбъектГруппировки = ОбъектГруппировки;
				СтрокаГруппировки.ОбъектПодписки = ОбъектГруппировки;
				СтрокаГруппировки.ЭтоГруппа = Истина;
				СтрокаГруппировки.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 (%2)",
					ОбъектГруппировки,
					ТипЗнч(ОбъектГруппировки));
				НоваяСтрока = СтрокаГруппировки.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.ЭтоГруппа = Ложь;
			НоваяСтрока.ВидСобытия = Выборка.ВидСобытия;
			НоваяСтрока.ОбъектПодписки = Выборка.ОбъектПодписки;
			НоваяСтрока.Представление = 
				РаботаСУведомлениями.ПолучитьПредставлениеБизнесСобытия(Выборка.ВидСобытия, Выборка.ОбъектПодписки);
			НоваяСтрока.СпособУведомления = Выборка.СпособУведомления;
			НоваяСтрока.ПодпискаАктивна = Выборка.ПодпискаАктивна;
			НоваяСтрока.ПодпискаАктивнаСтрокой = СтрокаПодписка(НоваяСтрока.ПодпискаАктивна);
			
		КонецЕсли;
		
	КонецЦикла;
	 
	ЗначениеВРеквизитФормы(Дерево, "ПодпискиНаУведомленияПоОбъектам");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляУведомленияПоПочте()
	
	АдресаЭлектроннойПочты = РаботаСУведомлениями.ПолучитьДанныеСпособаУведомления(Перечисления.СпособыУведомления.ПоПочте, Пользователь);
	
	ДанныеДляУведомленияПоПочте.Очистить();
	
	Для Каждого АдресЭлектроннойПочты Из АдресаЭлектроннойПочты Цикл
		
		НоваяСтрока = ДанныеДляУведомленияПоПочте.Добавить();
		НоваяСтрока.АдресЭлектроннойПочты = АдресЭлектроннойПочты; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьАдресаЭлектроннойПочты()
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	МассивПредупреждений = Новый Массив;
	НомерСтроки = 1;
	
	Для Каждого Элемент Из ДанныеДляУведомленияПоПочте Цикл
		
		Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Элемент.АдресЭлектроннойПочты) Тогда
			
			ЕстьОшибки = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан некорректный почтовый адрес ""%1""'") + Символы.ПС,
				Элемент.АдресЭлектроннойПочты);
			
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ДанныеДляУведомленияПоПочте",
				НомерСтроки,
				"АдресЭлектроннойПочты");
						
			ОписаниеОшибки = Новый Структура;
			ОписаниеОшибки.Вставить("ТекстОшибки", ТекстОшибки);
			ОписаниеОшибки.Вставить("ЭлементФормы", ПутьКТабличнойЧасти);
			
			МассивПредупреждений.Добавить(ОписаниеОшибки);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
		
	Для Каждого ОписаниеПредупреждения Из МассивПредупреждений Цикл
		
		ТекстОшибки = ОписаниеПредупреждения.ТекстОшибки;
		ЭлементФормы = ОписаниеПредупреждения.ЭлементФормы;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ЭлементФормы);
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ПодпискаВыполнениеЗадачи.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаВыполнениеЗадачиПоУмолчанию;
	Элементы.ПодпискаСозданиеЗадачи.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаСозданиеЗадачиПоУмолчанию;
	Элементы.ИспользоватьВыполнениеЗадачПоПочте.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ИспользоватьВыполнениеЗадачПоПочтеПоУмолчанию)
		И ПодпискаСозданиеЗадачи
		И Элементы.ПодпискаСозданиеЗадачи.Доступность;
	Элементы.УведомленияПрограммы.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ УведомленияПрограммыПоУмолчанию;
	Элементы.ПодпискаПеренаправлениеЗадачи.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПеренаправлениеЗадачиПоУмолчанию;
	Элементы.ПодпискаОтменаВыполненияЗадачи.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаОтменаВыполненияЗадачиПоУмолчанию;
	Элементы.ПодпискаПросроченаЗадача.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченаЗадачаПоУмолчанию;
	Элементы.ПодпискаПодошелСрокЗадачи.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокЗадачиПоУмолчанию;
	Элементы.ПодпискаПриближениеОкончанияСрокаДействия.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПриближениеОкончанияСрокаДействияПоУмолчанию;
	Элементы.ПодпискаОкончаниеСрокаДействия.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаОкончаниеСрокаДействияПоУмолчанию;
	Элементы.ПодпискаСозданиеСообщения.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаСозданиеСообщения;
	Элементы.ПодпискаОстановкаИПрерываниеПроцесса.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаОстановкаИПрерываниеПроцесса;
	
	Элементы.СрокПодошелСрокЗадачи.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокЗадачиПоУмолчанию)
		И ПодпискаПодошелСрокЗадачи;
	Элементы.СрокПриближениеОкончанияСрокаДействия.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПриближениеОкончанияСрокаДействияПоУмолчанию)
		И ПодпискаПриближениеОкончанияСрокаДействия;
	
	Элементы.ЧастотаПросроченаЗадачаОдинРаз.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченаЗадачаПоУмолчанию)
		И ПодпискаПросроченаЗадача;
	Элементы.ЧастотаПросроченаЗадача.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченаЗадачаПоУмолчанию)
		И ПодпискаПросроченаЗадача И НЕ ЧастотаПросроченаЗадачаОдинРаз;
	Элементы.ЧастотаПодошелСрокЗадачиОдинРаз.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокЗадачиПоУмолчанию)
		И ПодпискаПодошелСрокЗадачи;
	Элементы.ЧастотаПодошелСрокЗадачи.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокЗадачиПоУмолчанию)
		И ПодпискаПодошелСрокЗадачи И НЕ ЧастотаПодошелСрокЗадачиОдинРаз;
	Элементы.ЧастотаПриближениеОкончанияСрокаДействияОдинРаз.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПриближениеОкончанияСрокаДействияПоУмолчанию)
		И ПодпискаПриближениеОкончанияСрокаДействия;
	Элементы.ЧастотаПриближениеОкончанияСрокаДействия.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПриближениеОкончанияСрокаДействияПоУмолчанию)
		И ПодпискаПриближениеОкончанияСрокаДействия И НЕ ЧастотаПриближениеОкончанияСрокаДействияОдинРаз;
		
	//Контроль	
	Элементы.ПодпискаПодошелСрокКонтроля.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокКонтроляПоУмолчанию;
	Элементы.СрокПодошелСрокКонтроля.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокКонтроляПоУмолчанию)
		И ПодпискаПодошелСрокКонтроля;
	Элементы.ЧастотаПодошелСрокКонтроляОдинРаз.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокКонтроляПоУмолчанию)
		И ПодпискаПодошелСрокКонтроля;
	Элементы.ЧастотаПодошелСрокКонтроля.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПодошелСрокКонтроляПоУмолчанию)
		И ПодпискаПодошелСрокКонтроля И НЕ ЧастотаПодошелСрокКонтроляОдинРаз;
	Элементы.ПодпискаПросроченКонтроль.Доступность =
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченКонтрольПоУмолчанию;	
	Элементы.ЧастотаПросроченКонтрольОдинРаз.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченКонтрольПоУмолчанию)
		И ПодпискаПросроченКонтроль;
	Элементы.ЧастотаПросроченКонтроль.Доступность =
		(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию ИЛИ НЕ ПодпискаПросроченКонтрольПоУмолчанию)
		И ПодпискаПросроченКонтроль И НЕ ЧастотаПросроченКонтрольОдинРаз;	

КонецПроцедуры

&НаСервере
Процедура ОбновитьСервер()
	
	// Получить список возможных событий
	СписокВидовБизнесСобытий = РаботаСУведомлениями.ПолучитьСписокВидовБизнесСобытий();
	
	// Получить список вариантов оповещения
	СписокСпособовУведомления = РаботаСУведомлениями.ПолучитьСписокСпособовУведомления();
	
	ОдинСпособУведомления = Истина;
	СпособУведомления = Перечисления.СпособыУведомления.ПоПочте;
	
	ПодпискаСозданиеЗадачи = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи, Пользователь, СписокСпособовУведомления);
	ПодпискаОтменаВыполненияЗадачи = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, Пользователь, СписокСпособовУведомления);
	ИспользоватьВыполнениеЗадачПоПочте = РаботаСУведомлениями.ПолучитьНастройкуПользователя(
		Пользователь,
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	УведомленияПрограммы = РаботаСУведомлениями.ПолучитьНастройкуПользователя(
		Пользователь,
		Перечисления.НастройкиУведомлений.УведомленияПрограммы,
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы);
	ПодпискаПеренаправлениеЗадачи = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи, Пользователь, СписокСпособовУведомления);
	ПодпискаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи, Пользователь, СписокСпособовУведомления);
	ПодпискаПросроченаЗадача = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПросроченаЗадача, Пользователь, СписокСпособовУведомления);
	ПодпискаВыполнениеЗадачи = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи, Пользователь, СписокСпособовУведомления);
	ПодпискаПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента, Пользователь, СписокСпособовУведомления);
	ПодпискаОкончаниеСрокаДействия = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента, Пользователь, СписокСпособовУведомления);
	ПодпискаСозданиеСообщения = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.СозданиеСообщения, Пользователь, СписокСпособовУведомления);
	ПодпискаОстановкаИПрерываниеПроцесса = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, Пользователь, СписокСпособовУведомления);
				
	//Контроль	
	ПодпискаПодошелСрокКонтроля = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля, Пользователь, СписокСпособовУведомления);
	ПодпискаПросроченКонтроль = РаботаСУведомлениями.ПолучитьПодпискуНаСобытие(
		Перечисления.СобытияУведомлений.ПросроченКонтроль, Пользователь, СписокСпособовУведомления);	
		
	НастройкаУведомленийКонтроля = РаботаСУведомлениями.ПолучитьНастройкуУведомленияОКонтроле(Пользователь);
	СрокПодошелСрокКонтроля = НастройкаУведомленийКонтроля.СрокПодошелСрокКонтроля;
	ЧастотаПодошелСрокКонтроля = НастройкаУведомленийКонтроля.ЧастотаПодошелСрокКонтроля;
	Если ЧастотаПодошелСрокКонтроля = 0 Тогда
		ЧастотаПодошелСрокКонтроляОдинРаз = Истина;
	Иначе
		ЧастотаПодошелСрокКонтроляОдинРаз = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченКонтроль = НастройкаУведомленийКонтроля.ЧастотаПросроченКонтроль;
	Если ЧастотаПросроченКонтроль = 0 Тогда
		ЧастотаПросроченКонтрольОдинРаз = Истина;
	Иначе
		ЧастотаПросроченКонтрольОдинРаз = Ложь;
	КонецЕсли;

	НачальноеЗначениеПодпискаОкончаниеСрокаДействия = ПодпискаОкончаниеСрокаДействия;
	
	ЗаполнитьПодпискиНаУведомленияПоОбъектам(СписокВидовБизнесСобытий, СписокСпособовУведомления);
	
	ЗаполнитьДанныеДляУведомленияПоПочте();
	
	// уведомления о задачах
	НастройкаУведомлений = РаботаСУведомлениями.ПолучитьНастройкуУведомленияОЗадачах(Пользователь);
	СрокПодошелСрокЗадачи = НастройкаУведомлений.СрокПодошелСрокЗадачи;
	ЧастотаПодошелСрокЗадачи = НастройкаУведомлений.ЧастотаПодошелСрокЗадачи;
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
	Иначе
		ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченаЗадача = НастройкаУведомлений.ЧастотаПросроченаЗадача;
	Если ЧастотаПросроченаЗадача = 0 Тогда
		ЧастотаПросроченаЗадачаОдинРаз = Истина;
	Иначе
		ЧастотаПросроченаЗадачаОдинРаз = Ложь;
	КонецЕсли;
	
	// уведомления о сроке действия
	НастройкаУведомлений = РаботаСУведомлениями.ПолучитьНастройкуУведомленияОкончанияСрокаДействия(Пользователь);
	СрокПриближениеОкончанияСрокаДействия = НастройкаУведомлений.СрокУведомления;
	ЧастотаПриближениеОкончанияСрокаДействия = НастройкаУведомлений.ЧастотаУведомления;
	Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
		ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Истина;
	Иначе
		ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Ложь;
	КонецЕсли;
	
	// Уведомления по умолчанию
	НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию =
		РаботаСУведомлениями.ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	ПодпискаОкончаниеСрокаДействияПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
	ПодпискаПеренаправлениеЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
	ПодпискаПодошелСрокЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	ПодпискаПриближениеОкончанияСрокаДействияПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	ПодпискаПросроченаЗадачаПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	ПодпискаСозданиеЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	ИспользоватьВыполнениеЗадачПоПочтеПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	УведомленияПрограммыПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.УведомленияПрограммы,
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы);
	ПодпискаВыполнениеЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	ПодпискаСозданиеСообщенияПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения);
	ПодпискаОстановкаИПрерываниеПроцессаПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
	
	СрокПодошелСрокЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	СрокПриближениеОкончанияСрокаДействияПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
	
	ЧастотаПодошелСрокЗадачиПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	Если ЧастотаПодошелСрокЗадачиПоУмолчанию = 0 Тогда
		ЧастотаПодошелСрокЗадачиОдинРазПоУмолчанию = Истина;
	Иначе
		ЧастотаПодошелСрокЗадачиОдинРазПоУмолчанию = Ложь;
	КонецЕсли;
	
	ЧастотаПриближениеОкончанияСрокаДействияПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	Если ЧастотаПриближениеОкончанияСрокаДействияПоУмолчанию = 0 Тогда
		ЧастотаПриближениеОкончанияСрокаДействияОдинРазПоУмолчанию = Истина;
	Иначе
		ЧастотаПриближениеОкончанияСрокаДействияОдинРазПоУмолчанию = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченаЗадачаПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	Если ЧастотаПросроченаЗадачаПоУмолчанию = 0 Тогда
		ЧастотаПросроченаЗадачаОдинРазПоУмолчанию = Истина;
	Иначе
		ЧастотаПросроченаЗадачаОдинРазПоУмолчанию = Ложь;
	КонецЕсли;
		
	//Контроль
	ПодпискаПодошелСрокКонтроляПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	СрокПодошелСрокКонтроляПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	ПодпискаПросроченКонтрольПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченКонтроль);	
	ЧастотаПодошелСрокКонтроляПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	Если ЧастотаПодошелСрокКонтроляПоУмолчанию = 0 Тогда
		ЧастотаПодошелСрокКонтроляОдинРазПоУмолчанию = Истина;
	Иначе
		ЧастотаПодошелСрокКонтроляОдинРазПоУмолчанию = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченКонтрольПоУмолчанию = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченКонтроль);
	Если ЧастотаПросроченКонтрольПоУмолчанию = 0 Тогда
		ЧастотаПросроченКонтрольОдинРазПоУмолчанию = Истина;
	Иначе
		ЧастотаПросроченКонтрольОдинРазПоУмолчанию = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПодпискиСтрок(ЗначениеПодписки)
	
	ВыделенныеСтроки = Элементы.ПодпискиНаУведомленияПоОбъектам.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.ПодпискиНаУведомленияПоОбъектам.ДанныеСтроки(Строка);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОбъектГруппировки) Тогда
			
			ДанныеПодчиненныхСтрок= ДанныеСтроки.ПолучитьЭлементы();
			
			Для Каждого ДанныеПодчиненнойСтроки Из ДанныеПодчиненныхСтрок Цикл
				
				УстановитьЗначениеПодписки(
					ДанныеПодчиненнойСтроки.ПодпискаАктивна, 
					ДанныеПодчиненнойСтроки.ПодпискаАктивнаСтрокой, 
					ЗначениеПодписки);
				
			КонецЦикла;
			
		Иначе
			
			УстановитьЗначениеПодписки(
				ДанныеСтроки.ПодпискаАктивна, 
				ДанныеСтроки.ПодпискаАктивнаСтрокой, 
				ЗначениеПодписки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПодписки(Подписка, ПодпискаСтрокой, ЗначениеПодписки)
	
	Модифицированность = Истина;
	
	Подписка = ЗначениеПодписки;
	ПодпискаСтрокой = СтрокаПодписка(Подписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	
	Элементы.ГруппаПереключательПросроченаЗадача.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодошелСрокЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодпискаСозданиеЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	ИспользоватьКонтрольОбъектов = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
	Элементы.ГруппаПодошелСрокКонтроля.Видимость = ИспользоватьКонтрольОбъектов;
	Элементы.ГруппаПереключательПросроченКонтроль.Видимость = ИспользоватьКонтрольОбъектов;
	Элементы.ГруппаПользователь.Видимость = РольДоступна("ПолныеПрава");
	
	Элементы.ГруппаПользователь.Видимость = РольДоступна("ПолныеПрава");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЧастотаПриближениеОкончанияСрокаДействия()
	
	Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
		
		Если Не ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЧастотаПросроченаЗадача()
	
	Если ЧастотаПросроченаЗадача = 0 Тогда
		
		Если Не ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЧастотаПодошелСрокЗадачи()
	
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		
		Если Не ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЧастотаПодошелСрокКонтроля()
	
	Если ЧастотаПодошелСрокКонтроля = 0 Тогда
		
		Если Не ЧастотаПодошелСрокКонтроляОдинРаз Тогда
			
			ЧастотаПодошелСрокКонтроляОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокКонтроляОдинРаз Тогда
			
			ЧастотаПодошелСрокКонтроляОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЧастотаПросроченКонтроль()
	
	Если ЧастотаПросроченКонтроль = 0 Тогда
		
		Если Не ЧастотаПросроченКонтрольОдинРаз Тогда
			
			ЧастотаПросроченКонтрольОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченКонтрольОдинРаз Тогда
			
			ЧастотаПросроченКонтрольОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти