#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьУведомленияПоУмолчанию();
	ЗаполнитьАдресаДляУведомлений();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьУведомленияПоУмолчанию();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Пользователь" Тогда
		ЗаполнитьАдресаДляУведомлений();
	ИначеЕсли ИмяСобытия = "ИзмененыДанныеУведомленияПоПочте" Тогда
		ЗаполнитьАдресаДляУведомлений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодпискаСозданиеЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
	Если ПодпискаСозданиеЗадачи = Ложь Тогда
		ИспользоватьВыполнениеЗадачПоПочте = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПросроченаЗадачаОдинРаз Тогда
		
		Если ЧастотаПросроченаЗадача <> 0 Тогда
			
			ЧастотаПросроченаЗадача = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадача = 0 Тогда
			
			ЧастотаПросроченаЗадача = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаПриИзменении(Элемент)
	
	Если ЧастотаПросроченаЗадача = 0 Тогда
		
		Если Не ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченКонтрольОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПросроченКонтрольОдинРаз Тогда
		
		Если ЧастотаПросроченКонтроль <> 0 Тогда
			
			ЧастотаПросроченКонтроль = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченКонтроль = 0 Тогда
			
			ЧастотаПросроченКонтроль = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченКонтрольПриИзменении(Элемент)
	
	Если ЧастотаПросроченКонтроль = 0 Тогда
		
		Если Не ЧастотаПросроченКонтрольОдинРаз Тогда
			
			ЧастотаПросроченКонтрольОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченКонтрольОдинРаз Тогда
			
			ЧастотаПросроченКонтрольОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
		
		Если ЧастотаПодошелСрокЗадачи <> 0 Тогда
			
			ЧастотаПодошелСрокЗадачи = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачи = 0 Тогда
			
			ЧастотаПодошелСрокЗадачи = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		
		Если Не ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокКонтроляОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокКонтроляОдинРаз Тогда
		
		Если ЧастотаПодошелСрокКонтроля <> 0 Тогда
			
			ЧастотаПодошелСрокКонтроля = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокКонтроля = 0 Тогда
			
			ЧастотаПодошелСрокКонтроля = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокКонтроляПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокКонтроля = 0 Тогда
		
		Если Не ЧастотаПодошелСрокКонтроляОдинРаз Тогда
			
			ЧастотаПодошелСрокКонтроляОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокКонтроляОдинРаз Тогда
			
			ЧастотаПодошелСрокКонтроляОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПриближениеОкончанияСрокаДействияОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
		
		Если ЧастотаПриближениеОкончанияСрокаДействия <> 0 Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействия = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействия = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПриближениеОкончанияСрокаДействияПриИзменении(Элемент)
	
	Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
		
		Если Не ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПриближениеОкончанияСрокаДействияОдинРаз Тогда
			
			ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаАдресаДляУведомлений

&НаКлиенте
Процедура ТаблицаАдресаДляУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборСтроки(ТаблицаАдресаДляУведомлений.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресаДляУведомленийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресаДляУведомленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресаДляУведомленийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбработатьВыборСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьУведомленияПоУмолчанию();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Очистить настройки уведомлений всех пользователей?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУведомленияПоУмолчанию()
	
	НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию =
		РаботаСУведомлениями.ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	ПодпискаОкончаниеСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
	ПодпискаПеренаправлениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
	ПодпискаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	ПодпискаПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	ПодпискаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	ПодпискаСозданиеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	ПодпискаОтменаВыполненияЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);
	ИспользоватьВыполнениеЗадачПоПочте = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	УведомленияПрограммы = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.УведомленияПрограммы,
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы);
	ПодпискаВыполнениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	ПодпискаСозданиеСообщения = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения);
	ПодпискаОстановкаИПрерываниеПроцесса = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
	
	СрокПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	СрокПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
	
	ЧастотаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
	Иначе
		ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
	КонецЕсли;
	
	ЧастотаПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	Если ЧастотаПриближениеОкончанияСрокаДействия = 0 Тогда
		ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Истина;
	Иначе
		ЧастотаПриближениеОкончанияСрокаДействияОдинРаз = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	Если ЧастотаПросроченаЗадача = 0 Тогда
		ЧастотаПросроченаЗадачаОдинРаз = Истина;
	Иначе
		ЧастотаПросроченаЗадачаОдинРаз = Ложь;
	КонецЕсли;
	
			
	//Контроль
	ПодпискаПодошелСрокКонтроля = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	ПодпискаПросроченКонтроль = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченКонтроль);
	ЧастотаПросроченКонтроль = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченКонтроль);
	Если ЧастотаПросроченКонтроль = 0 Тогда
		ЧастотаПросроченКонтрольОдинРаз = Истина;
	Иначе
		ЧастотаПросроченКонтрольОдинРаз = Ложь;
	КонецЕсли;

	СрокПодошелСрокКонтроля = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	ЧастотаПодошелСрокКонтроля = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	Если ЧастотаПодошелСрокКонтроля = 0 Тогда
		ЧастотаПодошелСрокКонтроляОдинРаз = Истина;
	Иначе
		ЧастотаПодошелСрокКонтроляОдинРаз = Ложь;
	КонецЕсли;
	
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУведомленияПоУмолчанию()
	
	Модифицированность = Ложь;
	
	РаботаСУведомлениями.УстановитьРазрешитьИзменятьНастройкиУведомлений(
		НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
		ПодпискаОкончаниеСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
		ПодпискаПеренаправлениеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		ПодпискаПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		ПодпискаПриближениеОкончанияСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		ПодпискаПросроченаЗадача);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ПодпискаСозданиеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		ПодпискаОтменаВыполненияЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ИспользоватьВыполнениеЗадачПоПочте);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.УведомленияПрограммы,
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы,
		УведомленияПрограммы);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,
		ПодпискаВыполнениеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения,
		ПодпискаСозданиеСообщения);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса,
		ПодпискаОстановкаИПрерываниеПроцесса);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		СрокПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		СрокПриближениеОкончанияСрокаДействия);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		ЧастотаПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		ЧастотаПриближениеОкончанияСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		ЧастотаПросроченаЗадача);
		
	//Контроль	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		ПодпискаПодошелСрокКонтроля);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченКонтроль,
		ПодпискаПросроченКонтроль);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченКонтроль,
		ЧастотаПросроченКонтроль);
		
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		СрокПодошелСрокКонтроля);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
		ЧастотаПодошелСрокКонтроля);
	
	Константы.АдресПубликацииНаВебСервере.Установить(АдресПубликацииНаВебСервере);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаДляУведомлений()
	
	ТаблицаАдресаДляУведомлений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	ЕСТЬNULL(СпособыУведомленияПользователей.ДанныеСпособа, """") КАК Адрес,
		|	ЛОЖЬ КАК КонтактнаяИнформация
		|ПОМЕСТИТЬ АдресаДляУведомлений
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
		|		ПО Пользователи.Ссылка = СпособыУведомленияПользователей.Пользователь
		|			И (СпособыУведомленияПользователей.СпособУведомления = ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.ПоПочте))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.АдресЭП, """"),
		|	ИСТИНА
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка
		|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаДляУведомлений.Пользователь,
		|	АдресаДляУведомлений.Адрес,
		|	МАКСИМУМ(АдресаДляУведомлений.КонтактнаяИнформация) КАК КонтактнаяИнформация
		|ИЗ
		|	АдресаДляУведомлений КАК АдресаДляУведомлений
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресаДляУведомлений.Пользователь,
		|	АдресаДляУведомлений.Адрес";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Адрес", "");
	ПустыеАдреса = Выгрузка.НайтиСтроки(Отбор);
	Для Каждого СтрокаПустыеАдреса Из ПустыеАдреса Цикл
		
		ЕстьЗаполненныйАдрес = Ложь;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", СтрокаПустыеАдреса.Пользователь);
		СтрокиПользователь = Выгрузка.НайтиСтроки(Отбор);
		Для Каждого СтрокаПользователя Из СтрокиПользователь Цикл
			Если ЗначениеЗаполнено(СтрокаПользователя.Адрес) Тогда
				ЕстьЗаполненныйАдрес = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЗаполненныйАдрес Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАдресаДляУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПустыеАдреса);
		
	КонецЦикла;
	
	Для Каждого СтрокаВыгрузки Из Выгрузка Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыгрузки.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаАдресаДляУведомлений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСервер()
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиУведомленияОЗадачах.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиУведомленияОкончанияСрокаДействия.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтроки(ЗначениеСтроки)
	
	Если ЗначениеСтроки <> Неопределено Тогда
		
		Если ЗначениеСтроки.КонтактнаяИнформация Тогда
			ПоказатьЗначение(, ЗначениеСтроки.Пользователь);
		Иначе
			ПараметрыФормы = Новый Структура("Пользователь, ОтобразитьСпособыДоставки", ЗначениеСтроки.Пользователь, Истина);
			Отказ = ОткрытьФорму("ОбщаяФорма.ПодпискиПользователя", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ИспользоватьВыполнениеЗадачПоПочте.Доступность = ПодпискаСозданиеЗадачи;
	Элементы.ЧастотаПросроченаЗадача.Доступность = Не ЧастотаПросроченаЗадачаОдинРаз;
	Элементы.ЧастотаПодошелСрокЗадачи.Доступность = Не ЧастотаПодошелСрокЗадачиОдинРаз;
	Элементы.ЧастотаПриближениеОкончанияСрокаДействия.Доступность = Не ЧастотаПриближениеОкончанияСрокаДействияОдинРаз;
	Элементы.ЧастотаПодошелСрокКонтроля.Доступность = Не ЧастотаПодошелСрокКонтроляОдинРаз;
	Элементы.ЧастотаПросроченКонтроль.Доступность = Не ЧастотаПросроченКонтрольОдинРаз;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	
	Элементы.ГруппаПереключательПросроченаЗадача.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодошелСрокЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодпискаСозданиеЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
		
	ИспользоватьКонтрольОбъектов = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
	Элементы.ГруппаПодошелСрокКонтроля.Видимость = ИспользоватьКонтрольОбъектов;
	Элементы.ГруппаПереключательПросроченКонтроль.Видимость = ИспользоватьКонтрольОбъектов;

КонецПроцедуры

#КонецОбласти