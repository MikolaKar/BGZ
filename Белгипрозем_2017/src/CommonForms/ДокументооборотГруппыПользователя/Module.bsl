////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Пользователь = Параметры.Пользователь;
	
	Элементы.ГруппыПользователей.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
		
	ЗаполнитьГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыбранаГруппаДоступа = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
		ВыбранаГруппаДоступа = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Возврат
	КонецЕсли;
	
	Если ВыбранаГруппаДоступа Тогда
		НайденВГруппе = ПользовательСостоитВГруппеДоступа(ВыбранноеЗначение);
	Иначе
		НайденВГруппе = ПользовательСостоитВГруппеПользователей(ВыбранноеЗначение);
	КонецЕсли;
	
	Если НайденВГруппе Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Пользователь уже состоит в выбранной группе.'"));
		Возврат;
	КонецЕсли;
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 	НСтр("ru = 'Добавление пользователя в группу ""%1""...'"),
		ВыбранноеЗначение);
	Состояние(ТекстСостояния);
	
	Если ВыбранаГруппаДоступа Тогда
		ИзменитьСоставГруппыДоступа(ВыбранноеЗначение, Истина);
	Иначе
		ИзменитьСоставГруппыПользователей(ВыбранноеЗначение, Истина);
	КонецЕсли;
	
	РазвернутьДеревьяГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_ГруппыПользователей") Тогда
		ЗаполнитьГруппы();
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("ИзмененаГруппаДоступа") Тогда
		ЗаполнитьГруппы(Истина);
	КонецЕсли;
	
	РазвернутьДеревьяГрупп();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ГруппыПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПередНачаломДобавленияГруппы(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПередНачаломДобавленияГруппы(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияГруппы(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент = Элементы.ГруппыПользователей Тогда
		ИмяСправочникаГрупп = "ГруппыПользователей";
	Иначе
		ИмяСправочникаГрупп = "ГруппыДоступа";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник." + ИмяСправочникаГрупп + ".ФормаВыбора", ПараметрыОткрытия, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПередУдалением(Элемент, Отказ)
	
	ПередУдалениемГруппы(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыДоступаПередУдалением(Элемент, Отказ)
	
	ПередУдалениемГруппы(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемГруппы(Элемент, Отказ)
	
	Отказ = Истина;
	
	Группа = Элемент.ТекущиеДанные.Группа;
	
	Если Элемент = Элементы.ГруппыДоступа
		И ТипЗнч(Группа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Возврат
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекстПредупреждения = НСтр(
			"ru = 'Для удаления пользователя из этой группы необходимо исключить его из входящих в нее групп пользователей.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если Группа = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
		ТекстПредупреждения = 
			НСтр("ru = 'Удаление пользователя из предопределенной группы ""Все пользователи"" запрещено.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
 		НСтр("ru = 'Пользователь будет исключен из группы ""%1"". Продолжить?'"),
		Группа);
		
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Группа", Группа);
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередУдалениемГруппыПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемГруппыПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 	НСтр("ru = 'Удаление пользователя из группы ""%1""...'"),
		Параметры.Группа);
	Состояние(ТекстСостояния);
	
	Если Параметры.Элемент = Элементы.ГруппыДоступа Тогда
		ИзменитьСоставГруппыДоступа(Параметры.Группа, Ложь);
	Иначе
		ИзменитьСоставГруппыПользователей(Параметры.Группа, Ложь);
	КонецЕсли;
	
	РазвернутьДеревьяГрупп();	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыДоступаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Группа);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьСписки(Команда)
	
	ЗаполнитьГруппы();
	РазвернутьДеревьяГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВГруппуПользователей(Команда)
	
	ПередНачаломДобавленияГруппы(Элементы.ГруппыПользователей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВГруппуДоступа(Команда)
	
	ПередНачаломДобавленияГруппы(Элементы.ГруппыДоступа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзГруппыПользователей(Команда)
	
	ПередУдалениемГруппы(Элементы.ГруппыПользователей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзГруппыДоступа(Команда)
	
	ПередУдалениемГруппы(Элементы.ГруппыДоступа, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьГруппы(ТолькоГруппыДоступа = Ложь)
	
	// Заполнение дерева групп пользователей
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ГруппыПользователейСостав.Ссылка КАК Группа,
		|	ГруппыПользователейСостав.Ссылка.Наименование КАК ГруппаНаименование,
		|	ГруппыПользователейСостав.Ссылка.Родитель КАК Родитель,
		|	0 КАК Уровень
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	ТаблицаГруппПользователей = Запрос.Выполнить().Выгрузить();
	
	Если Не ТолькоГруппыДоступа Тогда
		
		ГруппыПользователя = ТаблицаГруппПользователей.ВыгрузитьКолонку("Группа");
		ДобавитьРодительскиеГруппы(ТаблицаГруппПользователей, ТаблицаГруппПользователей, 1);
			
		ДеревоГруппПользователей = Новый ДеревоЗначений;
		ДеревоГруппПользователей.Колонки.Добавить("Группа");
		ДеревоГруппПользователей.Колонки.Добавить("ГруппаНаименование");
		ДеревоГруппПользователей.Колонки.Добавить("Картинка");
		
		ГруппаВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
		СтрокаВсеПользователи = ДеревоГруппПользователей.Строки.Добавить();
		СтрокаВсеПользователи.Группа = ГруппаВсеПользователи;
		
		ТаблицаГруппПользователей.Сортировать("Уровень УБЫВ");
		
		Для Каждого СтрокаГруппы Из ТаблицаГруппПользователей Цикл
			
			Если ДеревоГруппПользователей.Строки.Найти(СтрокаГруппы.Группа, "Группа", Истина) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРодитель = Неопределено;
			Если ЗначениеЗаполнено(СтрокаГруппы.Родитель) Тогда
				СтрокаРодитель = ДеревоГруппПользователей.Строки.Найти(СтрокаГруппы.Родитель, "Группа", Истина);
			КонецЕсли;
			
			Если СтрокаРодитель = Неопределено Тогда
				НоваяСтрока = ДеревоГруппПользователей.Строки.Добавить();
			Иначе
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппы);
			
		КонецЦикла;
		
		ДеревоГруппПользователей.Строки.Сортировать("ГруппаНаименование", Истина);	
		ЗначениеВДанныеФормы(ДеревоГруппПользователей, ГруппыПользователей);
		
	КонецЕсли;
		
	// Заполнение списка групп доступа
	Запрос.Текст = "ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка КАК Группа,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаПользователей
		|ПОМЕСТИТЬ ГруппыДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка,
		|	ГруппыПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
		|		ПО ГруппыДоступаПользователи.Пользователь = ГруппыПользователей.Ссылка
		|ГДЕ
		|	ГруппыПользователей.Ссылка В(&ГруппыПользователей)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка,
		|	&ВсеПользователи
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &ВсеПользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыДоступа.Группа КАК Группа,
		|	ГруппыДоступа.Группа.Наименование КАК ГруппаНаименование,
		|	ГруппыДоступа.ГруппаПользователей,
		|	ГруппыДоступа.ГруппаПользователей.Наименование КАК ГруппаПользователейНаименование
		|ИЗ
		|	ГруппыДоступа КАК ГруппыДоступа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппаНаименование,
		|	ГруппаПользователейНаименование
		|ИТОГИ ПО
		|	Группа";
		
	Запрос.УстановитьПараметр("ГруппыПользователей", ТаблицаГруппПользователей.ВыгрузитьКолонку("Группа"));
	Запрос.УстановитьПараметр("ВсеПользователи", Справочники.ГруппыПользователей.ВсеПользователи);
	
	ДеревоГруппДоступа = Новый ДеревоЗначений;
	ДеревоГруппДоступа.Колонки.Добавить("Группа");
	ДеревоГруппДоступа.Колонки.Добавить("ГруппаНаименование");
	ДеревоГруппДоступа.Колонки.Добавить("Картинка");
	
	ВыборкаГруппДоступа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппДоступа.Следующий() Цикл
		
		НоваяСтрока = ДеревоГруппДоступа.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаГруппДоступа);
		ВыборкаГруппПользователей = ВыборкаГруппДоступа.Выбрать();
		
		Пока ВыборкаГруппПользователей.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаГруппПользователей.ГруппаПользователей) Тогда
				НоваяПодчиненнаяСтрока = НоваяСтрока.Строки.Добавить();
				НоваяПодчиненнаяСтрока.Группа = ВыборкаГруппПользователей.ГруппаПользователей;
				НоваяПодчиненнаяСтрока.Картинка = 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоГруппДоступа, ГруппыДоступа);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРодительскиеГруппы(ОбщаяТаблица, ТекущаяТаблица, Уровень);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка КАК Группа,
		|	ГруппыПользователей.Наименование КАК ГруппаНаименование,
		|	ГруппыПользователей.Родитель КАК Родитель,
		|	&Уровень КАК Уровень
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.Ссылка В(&Группы)");
	
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.УстановитьПараметр("Группы", ТекущаяТаблица.ВыгрузитьКолонку("Родитель"));
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицаРодителей = Результат.Выгрузить();
		Для Каждого СтрокаРодителя из ТаблицаРодителей Цикл
			ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаРодителя);
		КонецЦикла;
		
		Уровень = Уровень + 1;
		ДобавитьРодительскиеГруппы(ОбщаяТаблица, ТаблицаРодителей, Уровень);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПользовательСостоитВГруппеПользователей(Группа)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка = &Группа
		|	И ГруппыПользователейСостав.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

&НаСервере
Функция ПользовательСостоитВГруппеДоступа(Группа)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа
		|	И ГруппыДоступаПользователи.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО ГруппыДоступаПользователи.Пользователь = ГруппыПользователейСостав.Ссылка
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа
		|	И ГруппыПользователейСостав.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ГруппаДоступа", Группа);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Добавляет пользователей в группу, удаляет из группы.
// Параметры:
//  Группа - группа пользователей
//  Добавить - булево: Истина - добавить пользователя в группу, Ложь - удалить из группы
//
&НаСервере
Процедура ИзменитьСоставГруппыПользователей(Группа, Добавить)
	
	// Редактирование состава группы
	ГруппаОбъект = Группа.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Группа,, УникальныйИдентификатор);
	
	Если Добавить Тогда
		НоваяСтрока = ГруппаОбъект.Состав.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
	Иначе
		УдаляемаяСтрока = ГруппаОбъект.Состав.Найти(Пользователь);
		Если УдаляемаяСтрока <> Неопределено Тогда
			ГруппаОбъект.Состав.Удалить(УдаляемаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Группа, УникальныйИдентификатор);
	
	ЗаполнитьГруппы();
	
КонецПроцедуры

// Добавляет пользователей в группу, удаляет из группы.
// Параметры:
//  Группа - группа пользователей
//  Добавить - булево: Истина - добавить пользователя в группу, Ложь - удалить из группы
//
&НаСервере
Процедура ИзменитьСоставГруппыДоступа(Группа, Добавить)
	
	ГруппаОбъект = Группа.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Группа,, УникальныйИдентификатор);
	Если Добавить Тогда
		НоваяСтрока = ГруппаОбъект.Пользователи.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
	Иначе
		УдаляемаяСтрока = ГруппаОбъект.Пользователи.Найти(Пользователь);
		Если УдаляемаяСтрока <> Неопределено Тогда
			ГруппаОбъект.Пользователи.Удалить(УдаляемаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Группа, УникальныйИдентификатор);
	
	ЗаполнитьГруппы(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревьяГрупп()
	
	КоллекцияЭлементовДерева = ГруппыПользователей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ГруппыПользователей.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;   
	
	КоллекцияЭлементовДерева = ГруппыДоступа.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ГруппыДоступа.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;   
	
КонецПроцедуры
