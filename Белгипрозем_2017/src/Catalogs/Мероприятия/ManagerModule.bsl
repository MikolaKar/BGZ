#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ГрифДоступа,
		|Организация,
		|ВидМероприятия,
		|Проект,
		|Папка,
		|Организатор,
		|Председатель,
		|Секретарь";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидМероприятия;
	
	ДескрипторПапки = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
		ОбъектДоступа.Папка);
	Если ЗначениеЗаполнено(ДескрипторПапки) Тогда
		ДескрипторДоступа.ДескрипторВладельца = ДескрипторПапки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Организатор) Тогда 
		ДескрипторДоступа.ДобавитьПользователя("Организатор", ОбъектДоступа.Организатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Председатель)
	 И (ТипЗнч(ОбъектДоступа.Председатель) = Тип("СправочникСсылка.Пользователи")
	Или ТипЗнч(ОбъектДоступа.Председатель) = Тип("СправочникСсылка.РолиИсполнителей")) Тогда 
		ДескрипторДоступа.ДобавитьПользователя("Председатель", ОбъектДоступа.Председатель);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Секретарь)
	 И (ТипЗнч(ОбъектДоступа.Секретарь) = Тип("СправочникСсылка.Пользователи")
	Или ТипЗнч(ОбъектДоступа.Секретарь) = Тип("СправочникСсылка.РолиИсполнителей")) Тогда 
		ДескрипторДоступа.ДобавитьПользователя("Секретарь", ОбъектДоступа.Секретарь);
	КонецЕсли;	
	
	// Участники мероприятия
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОбъектДоступа.Ссылка, Истина);
	Для каждого Эл Из Участники Цикл
		ДескрипторДоступа.ДобавитьПользователя(
			"Участник",
			Эл.Исполнитель,
			Эл.ОсновнойОбъектАдресации,
			Эл.ДополнительныйОбъектАдресации);
	КонецЦикла;	
	
	// Рабочая группа
	РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектДоступа.Ссылка);
	Для каждого Эл Из РабочаяГруппа Цикл
		Строка = ДескрипторДоступа.РабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, указывая тем самы что этот объект сам заполняет свои права 
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваДоступаСтандартно(
		ДескрипторДоступа,
		ПраваДоступа,
		ПротоколРасчетаПрав);
	
	РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДескрипторДоступа, "РабочаяГруппа");
	
	// Сужаем права с учетом рабочей группы
	СоставРабочейГруппы = Справочники.ДескрипторыДоступаОбъектов.РазвернутьРабочуюГруппу(
		РеквизитыДескриптора.РабочаяГруппа.Выбрать());
		
	Если Не РеквизитыДескриптора.РабочаяГруппа.Пустой() Тогда
		
		// Добавление рабочей группы в протокол расчета прав
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Рабочая группа'"));
		КонецЕсли;	
		
		НовыеПраваДоступа = Новый Соответствие;
		Для Каждого Эл Из ПраваДоступа Цикл
			Если СоставРабочейГруппы.Получить(Эл.Ключ) <> Неопределено Тогда
				ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(НовыеПраваДоступа, Эл.Ключ, Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ПраваДоступа = НовыеПраваДоступа;
		
	КонецЕсли;
	
	// Сужаем права всех пользователей до чтения, кроме управляющих мероприятием
	СоставУправляющихМероприятием = РазвернутьУправляющихМероприятием(ДескрипторДоступа.Пользователи);
	Для Каждого Эл Из ПраваДоступа Цикл
		Если СоставУправляющихМероприятием.Получить(Эл.Ключ) = Неопределено Тогда
			Эл.Значение.Добавление = Ложь;
			Эл.Значение.Изменение = Ложь;
			Эл.Значение.Удаление = Ложь;
			Эл.Значение.УправлениеПравами = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, указывая тем самы что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владелец
// которых имеет указанный дескриптор
Процедура ЗаполнитьПраваДоступаДляФайлов(ДескрипторОбъектаДоступа, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументооборотПраваДоступа.СкопироватьПраваДескриптора(ДескрипторОбъектаДоступа, ПраваДоступа);
	
	// участникам мероприятия права на запись
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектовПользователи.Пользователь,
		|	ДескрипторыДоступаОбъектовПользователи.ОсновнойОбъектАдресации,
		|	ДескрипторыДоступаОбъектовПользователи.ДополнительныйОбъектАдресации
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
		|ГДЕ
		|	ДескрипторыДоступаОбъектовПользователи.Ссылка = &ДескрипторОбъектаДоступа
		|	И ДескрипторыДоступаОбъектовПользователи.Ключ = ""Участник""");
		
	Запрос.УстановитьПараметр("ДескрипторОбъектаДоступа", ДескрипторОбъектаДоступа);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
											Истина, Истина, Истина, Истина, Ложь);
		
		ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
			ПраваДоступа,
			Выборка.Пользователь,
			Выборка.ОсновнойОбъектАдресации,
			Выборка.ДополнительныйОбъектАдресации,
			ПраваПользователя);
	
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область Печать

// Процедура формирования печатной формы
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак достпности печати по-комплектно
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда	
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка мероприятия", ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			, "Справочник.Мероприятия.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки мероприятия
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Карточка";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Мероприятия.Ссылка КАК Ссылка,
	|	Мероприятия.Организация КАК Организация,
	|	Мероприятия.Наименование КАК Наименование,
	|	Мероприятия.МестоПроведения,
	|	Мероприятия.ДатаНачалаФакт,
	|	Мероприятия.ДатаОкончанияФакт,
	|	Мероприятия.Председатель КАК Председатель,
	|	Мероприятия.Секретарь КАК Секретарь,
	|	Мероприятия.ДатаНачала,
	|	Мероприятия.ДатаОкончания,
	|	Мероприятия.Организатор КАК Организатор
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаЗаголовок = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчастникиМероприятия.Порядок КАК Порядок,
	|	УчастникиМероприятия.Исполнитель,
	|	УчастникиМероприятия.ОсновнойОбъектАдресации,
	|	УчастникиМероприятия.ДополнительныйОбъектАдресации,
	|	УчастникиМероприятия.Мероприятие КАК Ссылка
	|ИЗ
	|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
	|ГДЕ
	|	УчастникиМероприятия.Мероприятие В(&МассивОбъектов)
	|	И Не УчастникиМероприятия.Отсутствовал
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаУчастники = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Программа.НомерПункта КАК НомерПункта,
	|	Программа.Содержание КАК Содержание,
	|	Программа.Исполнитель КАК Исполнитель,
	|	Программа.Ссылка КАК Ссылка,
	|	Программа.ВремяПлан,
	|	Программа.Начало,
	|	Программа.Окончание
	|ИЗ
	|	Справочник.Мероприятия.Программа КАК Программа
	|ГДЕ
	|	Программа.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПункта";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПункты = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Протокол.Ссылка,
	|	Протокол.НомерСтроки,
	|	Протокол.Исполнитель,
	|	Протокол.НомерПунктаПрограммы,
	|	Протокол.ОсновнойОбъектАдресации,
	|	Протокол.ДополнительныйОбъектАдресации,
	|	Протокол.Слушали,
	|	Протокол.Выступили,
	|	Протокол.Решили,
	|	Протокол.СрокИсполнения
	|ИЗ
	|	Справочник.Мероприятия.Протокол КАК Протокол
	|ГДЕ
	|	Протокол.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Протокол.НомерПунктаПрограммы,
	|	Протокол.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	
	// Получение областей макета 
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.Мероприятия.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовокУчастники = Макет.ПолучитьОбласть("ЗаголовокУчастники");
	ОбластьСтрокаУчастники = Макет.ПолучитьОбласть("СтрокаУчастники");
	
	ОбластьЗаголовокПрограмма = Макет.ПолучитьОбласть("ЗаголовокПрограмма");
	ОбластьСтрокаПрограмма = Макет.ПолучитьОбласть("СтрокаПрограмма");
	
	ОбластьЗаголовокСлушали = Макет.ПолучитьОбласть("ЗаголовокСлушали");
	ОбластьСтрокаСлушали = Макет.ПолучитьОбласть("СтрокаСлушали");
	
	ОбластьЗаголовокВыступили = Макет.ПолучитьОбласть("ЗаголовокВыступили");
	ОбластьСтрокаВыступили = Макет.ПолучитьОбласть("СтрокаВыступили");
	
	ОбластьЗаголовокРешили = Макет.ПолучитьОбласть("ЗаголовокРешили");
	ОбластьСтрокаРешили = Макет.ПолучитьОбласть("СтрокаРешили");
	
	ОбластьПредседательСекретарь = Макет.ПолучитьОбласть("ПредседательСекретарь");
	ОбластьДатаИМесто = Макет.ПолучитьОбласть("ДатаИМесто");
	ОбластьЗаголовокПротокол = Макет.ПолучитьОбласть("ЗаголовокПротокол");
	
	ПервыйДокумент = Истина;
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Вывод заголовка
		ОбластьЗаголовок.Параметры.НаименованиеПредприятия = РаботаСОрганизациями.ПолучитьНаименованиеОрганизации(ВыборкаЗаголовок.Организация);
		ОбластьЗаголовок.Параметры.НаименованиеМероприятия = ВыборкаЗаголовок.Наименование;
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПараметрыПечати.ЗаголовокОтчета;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ПараметрыПечати.ВыводитьДатуИМестоПроведения Тогда 
			ОбластьДатаИМесто.Параметры.ДатаПроведения = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ=dd.MM.yyyy");
			ОбластьДатаИМесто.Параметры.ВремяПроведения = Формат(ВыборкаЗаголовок.ДатаНачала, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаЗаголовок.ДатаОкончания, "ДФ=ЧЧ:мм");
			ОбластьДатаИМесто.Параметры.МестоПроведения = ВыборкаЗаголовок.МестоПроведения;
			ТабличныйДокумент.Вывести(ОбластьДатаИМесто);
		КонецЕсли;	
		
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			ОбластьПредседательСекретарь.Параметры.Председатель = ВыборкаЗаголовок.Председатель;
			ОбластьПредседательСекретарь.Параметры.Секретарь = ВыборкаЗаголовок.Секретарь;
			ТабличныйДокумент.Вывести(ОбластьПредседательСекретарь);
		КонецЕсли;	
		
		Если ПараметрыПечати.ВыводитьУчастников Тогда 
			// Вывод участников
			ТабличныйДокумент.Вывести(ОбластьЗаголовокУчастники);
			Номер = 0;
			Пока ВыборкаУчастники.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				Номер = Номер + 1;
				ОбластьСтрокаУчастники.Параметры.Номер = Номер;
				ОбластьСтрокаУчастники.Параметры.Участник = ВыборкаУчастники.Исполнитель;
				ТабличныйДокумент.Вывести(ОбластьСтрокаУчастники);
			КонецЦикла;
		КонецЕсли;
		
		
		Если ПараметрыПечати.ВыводитьПрограмму И ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПункты.Сбросить();
			
			// Вывод пограммы
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПрограмма);
			Номер = 0;
			Пока ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				
				Номер = Номер + 1;
				ОбластьСтрокаПрограмма.Параметры.НомерПункта = Номер;
				ОбластьСтрокаПрограмма.Параметры.Содержание = ВыборкаПункты.Содержание;
				ОбластьСтрокаПрограмма.Параметры.Исполнитель = ВыборкаПункты.Исполнитель;
				Если ЗначениеЗаполнено(ВыборкаПункты.Начало) И ЗначениеЗаполнено(ВыборкаПункты.Окончание) Тогда 
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПункты.ВремяПлан) Тогда 
					
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПрограмма);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПротокол И ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПротокол.Сбросить();
			
			// Вывод протокола
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПротокол);
			
			Номер = 0;
			Пока ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				
				Номер = Номер + 1;
				
				ОбластьЗаголовокСлушали.Параметры.НомерПункта = Номер;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокСлушали);
				
				ОбластьСтрокаСлушали.Параметры.Слушали = ВыборкаПротокол.Слушали;
				ТабличныйДокумент.Вывести(ОбластьСтрокаСлушали);
				
				Если ЗначениеЗаполнено(ВыборкаПротокол.Выступили) Тогда 
					
					ТабличныйДокумент.Вывести(ОбластьЗаголовокВыступили);
					ОбластьСтрокаВыступили.Параметры.Выступили = ВыборкаПротокол.Выступили;
					ТабличныйДокумент.Вывести(ОбластьСтрокаВыступили);
					
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьЗаголовокРешили);
				
				Решили = ВыборкаПротокол.Решили;
				Если ЗначениеЗаполнено(ВыборкаПротокол.Исполнитель) Тогда 
					Решили = Решили 
					+ Символы.ПС 
					+ НСтр("ru = 'Ответственный: '") 
					+ Строка(ВыборкаПротокол.Исполнитель);
					
					Если ЗначениеЗаполнено(ВыборкаПротокол.СрокИсполнения) Тогда 
						Решили = Решили 
						+ НСтр("ru = ' Срок: '")	
						+ Формат(ВыборкаПротокол.СрокИсполнения, "ДФ=dd.MM.yyyy");
					КонецЕсли;		
				КонецЕсли;		
				
				ОбластьСтрокаРешили.Параметры.Решили = Решили;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРешили);
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывод подвала
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			ОбластьПодвал.Параметры.Председатель = ВыборкаЗаголовок.Председатель;
			ОбластьПодвал.Параметры.Секретарь = ВыборкаЗаголовок.Секретарь;
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;	
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область РабочаяГруппа

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Добавляет участников документа в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Мероприятия") Тогда 
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"Организатор, Ссылка");
	Иначе 
		РеквизитыМероприятия = Документ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыМероприятия.Ссылка) Тогда 
		Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(РеквизитыМероприятия.Ссылка, Истина);
		
		Для Каждого Строка Из Участники Цикл
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, 
				Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
		КонецЦикла;	
	КонецЕсли;	
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Организатор);
	
	Для каждого Строка Из Документ.Протокол Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, 
			Строка.Исполнитель, Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыМероприятия.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Мероприятие'");
	
КонецФункции

// Формирует HTML представление записи календаря
Функция СформироватьHTMLПредставление(Мероприятие, ДатаЗаписи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Мероприятие)
		ИЛИ ТипЗнч(Мероприятие) <> Тип("СправочникСсылка.Мероприятия") Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Мероприятие,
		"Наименование, ВидМероприятия, МестоПроведения, Организатор,
		|Председатель, Секретарь, ДатаНачала, ДатаОкончания, Описание");
	
	ТекстНаименование = РеквизитыМероприятия.Наименование;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстНаименование);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстНаименование);
	
	ТекстВидМероприятия = Строка(РеквизитыМероприятия.ВидМероприятия);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВидМероприятия);
	
	ТекстМестоПроведения =  РеквизитыМероприятия.МестоПроведения;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстМестоПроведения);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстМестоПроведения);
	
	ТекстОрганизатор = Строка(РеквизитыМероприятия.Организатор);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОрганизатор);
	
	ТекстПредседатель = Строка(РеквизитыМероприятия.Председатель);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстПредседатель);
	
	ТекстСекретарь = Строка(РеквизитыМероприятия.Секретарь);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстСекретарь);
	
	ТекстВремя = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
		+ Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ=ЧЧ:мм");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВремя);
	
	ТекстДата = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДата);
	
	ТекстДатаНачала = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаНачала);
	
	ТекстДатаОкончания = Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаОкончания);
	
	ТекстОписание = РеквизитыМероприятия.Описание;
	ТекстОписание = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОписание);
	ТекстОписание = СтрЗаменить(ТекстОписание, Символы.ПС, "<br>");
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстОписание);
	
	ПредставлениеHTML =
		"<html><body scroll=auto>
		|<div style='font-size=14px;font-family=Arial;line-height:150%'>
		|<b>[Наименование]</b>
		|</div>
		|<div style='font-size=11px;font-family=Arial;top-margin:10px'>
		|<b>[НадписьВидМероприятия]:</b> [ВидМероприятия]<br>
		|<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>
		|<b>[НадписьОрганизатор]:</b> [Организатор]<br>
		|<b>[НадписьПредседатель]:</b> [Председатель]<br>
		|<b>[НадписьСекретарь]:</b> [Секретарь]<br>
		|<b>[НадписьВремя]:</b> [Время]<br>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>
		|<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>
		|</div>
		|<hr>
		|<div style='font-size=12px;font-family=Arial'>
		|[Описание]
		|</div>
		|</body></html>";
	
	Если НачалоДня(РеквизитыМероприятия.ДатаОкончания) - НачалоДня(РеквизитыМероприятия.ДатаНачала) <> 0 Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьВремя]:</b> [Время]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	Иначе
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстМестоПроведения) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстПредседатель) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПредседатель]:</b> [Председатель]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстСекретарь) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьСекретарь]:</b> [Секретарь]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекстДатаОкончания) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВидМероприятия]", НСтр("ru = 'Вид мероприятия'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьМестоПроведения]", НСтр("ru = 'Место проведения'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьОрганизатор]", НСтр("ru = 'Организатор'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПредседатель]", НСтр("ru = 'Председатель'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьСекретарь]", НСтр("ru = 'Секретарь'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВремя]", НСтр("ru = 'Время'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДата]", НСтр("ru = 'Дата'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаНачала]", НСтр("ru = 'Начало'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаОкончания]", НСтр("ru = 'Окончание'"));
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Наименование]", ТекстНаименование);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ВидМероприятия]", ТекстВидМероприятия);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[МестоПроведения]", ТекстМестоПроведения);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Организатор]", ТекстОрганизатор);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Председатель]", ТекстПредседатель);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Секретарь]", ТекстСекретарь);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Время]", ТекстВремя);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Дата]", ТекстДата);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаНачала]", ТекстДатаНачала);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаОкончания]", ТекстДатаОкончания);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Описание]", ТекстОписание);
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Обрабатывает изменение статуса записи календаря
Процедура ОбработатьИзменениеСтатусаЗаписиКалендаря(Мероприятие, Пользователь, СостояниеЗаписиКалендаря) Экспорт
	
	НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
	НаборЗаписей.Отбор.Исполнитель.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		НовоеСостояниеПриглашения = НаборЗаписей[0];
		НовоеСостояниеПриглашения.СостояниеПриглашения =
			ПолучитьСоответствующееСостояниеПриглашения(СостояниеЗаписиКалендаря);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИзменениеПредметаИзЗаписиКалендаря", Истина);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПраваДоступа

Функция РазвернутьУправляющихМероприятием(Участники)
	
	СоставУправляющихМероприятием = Новый Соответствие;
	
	Для Каждого Эл Из Участники Цикл
		
		Если Эл.Ключ <> "Организатор"
			И Эл.Ключ <> "Председатель"
			И Эл.Ключ <> "Секретарь" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Эл.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СоставУправляющихМероприятием.Вставить(Эл.Пользователь, Истина);
			
		ИначеЕсли ТипЗнч(Эл.Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда	
			
			// Обходим всех исполнителей роли
			ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(Эл.Пользователь, Эл.ОсновнойОбъектАдресации, Эл.ДополнительныйОбъектАдресации);
			Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
				СоставУправляющихМероприятием.Вставить(ИсполнительРоли.Исполнитель, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоставУправляющихМероприятием;
	
КонецФункции

#КонецОбласти

// Возвращает соответствующее состояние записи календаря
Функция ПолучитьСоответствующееСостояниеПриглашения(СостояниеЗаписиРабочегоКалендаря)
	
	СостояниеПриглашения = Неопределено;
	
	Если СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
		ИЛИ Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
		СостояниеПриглашения = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СостояниеПриглашения;
	
КонецФункции

#КонецОбласти

#КонецЕсли