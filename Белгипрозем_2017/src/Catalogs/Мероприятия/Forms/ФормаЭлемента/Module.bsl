#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// Кэшируемые значения
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ВОтдельномДокументе = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе;
	ВТаблице = Перечисления.ТипыПрограммыПротокола.ВТаблице;
	ВМатериалах = Перечисления.ТипыПрограммыПротокола.ВМатериалах;
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	// Установка времени
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.РешенияСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	// Вывод предмета строкой
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборот.ПредметСтрокой(Объект.Предмет);
	КонецЕсли;	
	
	// Вывод состояний
	ПрочитатьСостоянияМероприятия();
	УстановитьДоступностьПоСостоянию();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		
		МассивФайлов =
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.ЗначениеКопирования, Ложь);
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			Для Каждого ФайлСсылка Из МассивФайлов Цикл
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлСсылка);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ФайлСсылка.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		// Копирование участников и включение организатора в участники
		УчастникиЗначенияКопирования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Параметры.ЗначениеКопирования);
		Участники.Загрузить(УчастникиЗначенияКопирования);
		
		ПараметрыОтбораИсполнитель = Новый Структура("Исполнитель");
		ПараметрыОтбораИсполнитель.Исполнитель = Объект.Организатор;
		
		Если Участники.НайтиСтроки(ПараметрыОтбораИсполнитель).Количество() = 0 Тогда
			НоваяСтрока = Участники.Добавить();
			НоваяСтрока.Исполнитель = Объект.Организатор;
			НоваяСтрока.ЯвкаОбязательна = Истина;
			КоличествоУчастников = Участники.Количество();
		КонецЕсли;
		
		Для Каждого Участник Из Участники Цикл
			Участник.СостояниеПриглашения = Неопределено;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании	
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
	 	Если ТипЗнч(ОснованиеДокумента) = Тип("Массив") 
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайлов = ФайлыДобавленные.Количество();	
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеДокумента) Тогда
			
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
				
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайловТаблицы = МассивФайлов.Количество();
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Мероприятия") Тогда 
			УчастникиОснования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОснованиеДокумента);
			Участники.Загрузить(УчастникиОснования);
			
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Председатель, ОсновнойОбъектАдресацииПредседателя, ДополнительныйОбъектАдресацииПредседателя");
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Секретарь, ОсновнойОбъектАдресацииСекретаря, ДополнительныйОбъектАдресацииСекретаря");
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Проекты") Тогда
			
			Для Каждого ЭлементПроектнаяКоманда Из ОснованиеДокумента.ПроектнаяКоманда Цикл
				НоваяСтрока = Участники.Добавить();
				НоваяСтрока.Исполнитель = ЭлементПроектнаяКоманда.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = ЭлементПроектнаяКоманда.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = ЭлементПроектнаяКоманда.ДополнительныйОбъектАдресации;
			КонецЦикла;
			
			Объект.Председатель = ОснованиеДокумента.Руководитель;
			Если ЗначениеЗаполнено(Объект.Председатель) Тогда
				ПараметрыОтбораИсполнитель = Новый Структура("Исполнитель");
				ПараметрыОтбораИсполнитель.Исполнитель = Объект.Председатель;
				Если Участники.НайтиСтроки(ПараметрыОтбораИсполнитель).Количество() = 0 Тогда
					НоваяСтрока = Участники.Добавить();
					НоваяСтрока.Исполнитель = Объект.Председатель;
					НоваяСтрока.ЯвкаОбязательна = Истина;
					КоличествоУчастников = Участники.Количество();
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Корреспонденты")
			Или ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			НоваяСтрока = Участники.Добавить();
			НоваяСтрока.Исполнитель = ОснованиеДокумента;
			НоваяСтрока.ЯвкаОбязательна = Истина;
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда 
			
			Параметры.ПисьмоОснование = ОснованиеДокумента;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ОснованиеДокумента) Тогда
				
				ОтправительАдресат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумента, "ОтправительАдресат");
				Если ЗначениеЗаполнено(ОтправительАдресат) Тогда
					ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительАдресат);
					Если ЗначениеЗаполнено(ДанныеАдресата.Контакт) Тогда
						НоваяСтрока = Участники.Добавить();
						НоваяСтрока.Исполнитель = ДанныеАдресата.Контакт;
						НоваяСтрока.ЯвкаОбязательна = Истина;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ОснованиеДокумента) Тогда
				
				Для Каждого Получатель Из ОснованиеДокумента.ПолучателиПисьма Цикл
					Адресат = Получатель.Адресат;
					Если ЗначениеЗаполнено(Адресат) Тогда
						ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
						Если ТипЗнч(ДанныеАдресата.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
							НоваяСтрока = Участники.Добавить();
							НоваяСтрока.Исполнитель = ДанныеАдресата.Контакт;
							НоваяСтрока.ЯвкаОбязательна = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Заполнение файлов из письма
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
			
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайловТаблицы = МассивФайлов.Количество();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
	Если РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование() = Ложь Тогда
		Элементы.ФайлыПодписан.Видимость = Ложь;
		Элементы.ФайлыЗашифрован.Видимость = Ложь;
	КонецЕсли;
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	// Видимость программы и протокола
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	
	УстановитьВидимость();
	
	// Установка параметров файлов
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	НайтиИПоказатьКоличествоФайлов();
	
	// Заполнение участников мероприятия
	ЗаполнитьУчастниковМероприятия();
	Если Объект.Председатель = Неопределено Тогда 
		Объект.Председатель = ПользователиПустаяСсылка;
	КонецЕсли;
	Если Объект.Секретарь = Неопределено Тогда 
		Объект.Секретарь = ПользователиПустаяСсылка;
	КонецЕсли;
	
	// Вывод информационных надписей
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиНомерПунктаПротокола();
	
	ВывестиИнформационнуюНадпись();
	СледующееМероприятие = УправлениеМероприятиями.ПолучитьСледующееМероприятие(Объект.Ссылка);
	Если Не ЗначениеЗаполнено(СледующееМероприятие) Тогда 
		Элементы.СледующееМероприятие.Видимость = Ложь;
	КонецЕсли;	
	
	// Инициализация учета времени
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
	    ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	// Заполнение рабочих групп
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	
	// Запись в список последних
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "СтраницаСвойства");
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	Элементы.ПодсказкаСледующегоДействия.Видимость = 
		(ТекущийПользователь = Объект.Организатор
		Или ТекущийПользователь = Объект.Секретарь
		Или ТекущийПользователь = Объект.Председатель);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыОтбораИсполнитель = Новый Структура("Исполнитель");
		ПараметрыОтбораИсполнитель.Исполнитель = Объект.Организатор;
		Если Участники.НайтиСтроки(ПараметрыОтбораИсполнитель).Количество() = 0 Тогда
			НоваяСтрока = Участники.Добавить();
			НоваяСтрока.Исполнитель = Объект.Организатор;
			НоваяСтрока.ЯвкаОбязательна = Истина;
			КоличествоУчастников = Участники.Количество();
		КонецЕсли;
		
	КонецЕсли;
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	УстановитьДоступность();
	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.Решение = ПолучитьРешениеВСтрокеПрограммы(Строка, Объект.Протокол);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;	
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПользователиПустаяСсылка;
		Объект.Секретарь = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Удаление пустых строк участников
	КоличествоУчастников = Участники.Количество();
	Для Инд = 1 По КоличествоУчастников Цикл
		Строка = Участники[КоличествоУчастников - Инд];
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Участники.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	КоличествоУчастников = Участники.Количество();
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокУчастников", Участники);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Изменение состояния
	ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояниеМероприятия, СостояниеМероприятия);
	ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояниеПрограммы, СостояниеПрограммы);
	ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояниеПриглашений, СостояниеПриглашений);
	ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояниеМатериаловВыступающих, СостояниеМатериаловВыступающих);
	ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояниеПротокола, СостояниеПротокола);
	УстановитьДоступностьПоСостоянию();
	
	// Запись участников совещания
	Если ДанныеУчастниковЗаблокированы Или Объект.Ссылка.Пустая() Тогда 
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = ТекущийОбъект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		
		Для Каждого Строка Из Участники Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Мероприятие = ТекущийОбъект.Ссылка;
			НоваяЗапись.Порядок = Участники.Индекс(Строка);
		КонецЦикла;	
		НаборЗаписей.Записать();
		
		РазблокироватьДанныеУчастниковДляРедактирования();
		
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Запись связей мероприятия
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование,
			Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
	ВывестиИнформационнуюНадпись();
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиНомерПунктаПротокола();
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() <> 0 И ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(
				ВладелецФайла,                                     
				Источник.Описание,
				Источник.ПолноеНаименование,
				ХранитьВерсииНовыйФайл,
				"");
							
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
					
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;	
				
				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(
					ТекущаяДата(),
					РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ТекущаяДата()),
					Приемник,
					Приемник.Наименование,
					Источник.ТекущаяВерсия.Размер,
					Источник.ТекущаяВерсия.Расширение,
					ХранилищеФайла,
					Источник.ТекущаяВерсия.ТекстХранилище,
					Истина,
					Источник.ТекущаяВерсия);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания();
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки, 
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);		
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					Для Каждого Строка Из Источник.СертификатыШифрования Цикл
						НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
				КонецЕсли;	
				
				Если Источник = ТекущийФайлВСпискеДобавленных Тогда
					ТекущийФайлВСпискеДобавленных = Приемник;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ФайлыДобавленные.Очистить();	
	КонецЕсли;
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ФайлыДобавленные.Количество() <> 0 И Не ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);
		КонецЦикла;
		ФайлыДобавленные.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленных) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленных);
		УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		Элементы.Файлы.ТекущаяСтрока = ТекущийФайлВСпискеДобавленных;
		ТекущийФайлВСпискеДобавленных = Неопределено;
	КонецЕсли;
	
	Оповестить("Запись_Мероприятие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументСоздан" И ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда 
		Если Источник.ВладелецФормы = Элементы.МатериалПрограмма Тогда 
			Объект.МатериалПрограмма = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;	
			
		Если Источник.ВладелецФормы = Элементы.МатериалПротокол Тогда 
			Объект.МатериалПротокол = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		Элементы.Файлы.Обновить();
		НайтиИПоказатьКоличествоФайлов();
		
		Если Параметр <> Неопределено Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец") Тогда
			ВладелецФайла = Параметр.Владелец;
		Иначе	
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "ВладелецФайла");
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			Элементы.Файлы.Обновить();
			УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
			
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				РаботаСКатегориямиДанных.СнятьПризнакОбработкиОбъектаПравилами(Объект.Ссылка);
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		КонецЕсли;	
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Объект.Ссылка Тогда
					Элементы.Файлы.Обновить();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						Элементы.Файлы.ТекущаяСтрока = ФайлСозданный;
					КонецЕсли;
					
					КоличествоФайлов = КоличествоФайлов + 1;
					
					ОповеститьОбИзменении(Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса") И 
			(Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
			 Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
			 Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			ПрочитатьСостоянияМероприятия();
			УстановитьДоступностьПоСостоянию();
			ВывестиПодсказкуСледующегоДействия();
		КонецЕсли;	
		
		Если Параметр.Свойство("СсылкаНаБизнесПроцесс") И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") И
			(Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
			 Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
			 Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			ЗаполнитьУчастниковМероприятия();
			Прочитать();
			ВывестиПодсказкуСледующегоДействия();
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПриглашениеПринято" 
		Или ИмяСобытия = "ПриглашениеОтклонено" 
		Или ИмяСобытия = "ПриглашенияОтправлены"
		Или ИмяСобытия = "ИсключеныУчастники" Тогда 
		Если Параметр = Объект.Ссылка Тогда 
			ЗаполнитьУчастниковМероприятия();
		КонецЕсли;
	КонецЕсли;	
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВывестиИнформационнуюНадпись();
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиНомерПунктаПротокола();
	ЗаполнитьСпискиВыбора(Объект.ДатаНачала, Элементы.ДатаНачалаВремя.СписокВыбора,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(Объект.ДатаОкончания, Элементы.ДатаОкончанияВремя.СписокВыбора,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
		ВывестиПодсказкуСледующегоДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка дублей
	КоличествоИсполнителей = Участники.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Участники[Инд1];
		
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Участники[Инд2];
			
			Если ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				Если Не (Строка1.Исполнитель = Строка2.Исполнитель
					И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
					И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка1.ДополнительныйОбъектАдресации) Тогда 	
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1 (%2, %3)"" указан дважды в списке участников!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации),
						Строка(Строка1.ДополнительныйОбъектАдресации));
				ИначеЕсли ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1 (%2)"" указан дважды в списке участников!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации)	);	
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"), 
						Строка(Строка1.Исполнитель));
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Участники[" + Формат(Инд1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			ИначеЕсли Строка1.Исполнитель = Строка2.Исполнитель Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Участники[" + Формат(Инд1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка председателя
	Если ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Председатель Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда 
			ТекстСообщения = НСтр("ru = 'Председатель не найден среди участников мероприятия'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Председатель",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверка секретаря
	Если ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Секретарь Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден И Участники.Количество() > 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Секретарь не найден среди участников мероприятия'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Секретарь",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;	

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредседательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Председатель выбирается из состава участников. Укажите участников мероприятия.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредседательНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(ОписаниеОповещения ,"Укажите председателя", Объект.Председатель);
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Председатель = Результат.Значение.Исполнитель;
	Объект.ОсновнойОбъектАдресацииПредседателя = Результат.Значение.ОсновнойОбъектАдресации;
	Объект.ДополнительныйОбъектАдресацииПредседателя = Результат.Значение.ДополнительныйОбъектАдресации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		СтандартнаяОбработка = Ложь;
		
		Объект.Председатель = ВыбранноеЗначение.Исполнитель;
		Объект.ОсновнойОбъектАдресацииПредседателя = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресацииПредседателя = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
	Иначе  
		Объект.ОсновнойОбъектАдресацииПредседателя = Неопределено;
		Объект.ДополнительныйОбъектАдресацииПредседателя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораУчастника[0].Значение;
			
			Объект.Председатель = ВыбранноеЗначение.Исполнитель;
			Объект.ОсновнойОбъектАдресацииПредседателя = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			Объект.ДополнительныйОбъектАдресацииПредседателя = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Секретарь выбирается из состава участников. Укажите участников мероприятия.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("СекретарьНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(ОписаниеОповещения ,"Укажите секретаря", Объект.Секретарь);
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Секретарь = Результат.Значение.Исполнитель;
	Объект.ОсновнойОбъектАдресацииСекретаря = Результат.Значение.ОсновнойОбъектАдресации;
	Объект.ДополнительныйОбъектАдресацииСекретаря = Результат.Значение.ДополнительныйОбъектАдресации;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 
		СтандартнаяОбработка = Ложь;
		
		Объект.Секретарь = ВыбранноеЗначение.Исполнитель;
		Объект.ОсновнойОбъектАдресацииСекретаря = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресацииСекретаря = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
	Иначе  
		Объект.ОсновнойОбъектАдресацииСекретаря = Неопределено;
		Объект.ДополнительныйОбъектАдресацииСекретаря = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораУчастника[0].Значение;
			
			Объект.Секретарь = ВыбранноеЗначение.Исполнитель;
			Объект.ОсновнойОбъектАдресацииСекретаря = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			Объект.ДополнительныйОбъектАдресацииСекретаря = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Организатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	ПриИзмененииВидаМероприятия();
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаМероприятия()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	ВывестиРешенияВПрограмме();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НачальноеЗначениеДатаНачала) И ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Если НачалоДня(Объект.ДатаНачала) = НачалоДня(ТекущаяДата()) Тогда 
			Объект.ДатаНачала = ТекущаяДата();
		Иначе	
			Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + 9 * 3600;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
			Объект.ДатаОкончания = Объект.ДатаНачала + 1 * 3600;
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда 
		Объект.ДатаОкончания = Объект.ДатаНачала +  1 * 3600;
	КонецЕсли;	
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Если НачалоДня(Объект.ДатаОкончания) = НачалоДня(ТекущаяДата()) Тогда 
			Объект.ДатаОкончания = ТекущаяДата();
		Иначе	
			Объект.ДатаОкончания = НачалоДня(Объект.ДатаОкончания) + 10 * 3600;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
			Объект.ДатаНачала = Объект.ДатаОкончания - 1 * 3600;
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда 
		Объект.ДатаНачала = Объект.ДатаОкончания - 1 * 3600;
	КонецЕсли;	
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НачальноеЗначениеДатаНачала) И ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Объект.ДатаНачала = НачалоДня(ТекущаяДата()) + 3600 * Час(Объект.ДатаНачала) + 60 * Минута(Объект.ДатаНачала);
	КонецЕсли;	
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда 
		Объект.ДатаОкончания = Объект.ДатаНачала +  1 * 3600;
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Объект.ДатаОкончания = НачалоДня(ТекущаяДата()) + 3600 * Час(Объект.ДатаОкончания) + 60 * Минута(Объект.ДатаОкончания);
	КонецЕсли;
	
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда 
		Объект.ДатаНачала = Объект.ДатаОкончания - 1 * 3600;
	КонецЕсли;
	
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачалаФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачалаФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПрограммыПриИзменении(Элемент)
	
	Если Объект.ТипПрограммы <> ВОтдельномДокументе Тогда 
		Объект.МатериалПрограмма = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПротоколаПриИзменении(Элемент)
	
	Если Объект.ТипПротокола <> ВОтдельномДокументе Тогда 
		Объект.МатериалПротокол = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалПротоколПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМероприятияПриИзменении(Элемент)
	
	ЕстьРешениеНеПринято = Ложь;
	Если СостояниеМероприятия = ПредопределенноеЗначение("Перечисление.СостоянияМероприятий.МероприятиеПроведено") Тогда 
		Если УчитыватьКакПротокольноеМероприятие Тогда 
			
			Для Каждого Строка Из Объект.Программа Цикл
				
				Решение = "";
				Если Строка.ТребуетПринятияРешения Тогда 
					НайденныеСтроки = Объект.Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
							Решение = НСтр("ru = 'Принято'");
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если Решение = "" Тогда 
						ЕстьРешениеНеПринято = Истина;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;	
	
	Если ЕстьРешениеНеПринято Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеМероприятияПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Не по всем пунктам программы приняты решения. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ВывестиИнформационнуюНадпись();
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМероприятияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		СостояниеМероприятия = НачальноеСостояниеМероприятия;
	КонецЕсли;
	
	ВывестиИнформационнуюНадпись();
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("Справочник.ВходящиеДокументы", "Входящий документ");
	СписокТипов.Добавить("Справочник.ИсходящиеДокументы", "Исходящий документ");
	СписокТипов.Добавить("Справочник.ВнутренниеДокументы", "Внутренний документ");
	СписокТипов.Добавить("Справочник.Файлы", "Файл");
	СписокТипов.Добавить("Справочник.Корреспонденты", "Корреспондент");
	СписокТипов.Добавить("Документ.ВходящееПисьмо", "Входящее письмо");
	СписокТипов.Добавить("Документ.ИсходящееПисьмо", "Исходящее письмо");
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредметНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТипов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = Результат.Значение;
	
	ЗначениеВыбранногоТипа = Неопределено;
	Если Найти(ВыбранныйТип, "Справочник.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Справочник.", "СправочникСсылка."));
	ИначеЕсли Найти(ВыбранныйТип, "Документ.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Документ.", "ДокументСсылка."));
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) = ЗначениеВыбранногоТипа Тогда 
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Объект.Предмет);
	Иначе
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборот.ПредметСтрокой(ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.Предмет = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПоказатьЗначение(, Объект.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Предмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПрограммыПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриглашенийПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловВыступающихПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПротоколаПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		ТекущиеДанные.ЯвкаОбязательна = Истина;
		
		КоличествоУчастников = Участники.Количество();
	КонецЕсли;
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущиеДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Исполнитель = Объект.Председатель
		И ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве председателя'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Исполнитель = Объект.Секретарь
		И ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве секретаря'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьМоиКонтакты = Истина;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.Участники.ТекущиеДанные.Исполнитель,,Истина,,,
		Элементы.Участники.ТекущиеДанные.ОсновнойОбъектАдресации, 
		Элементы.Участники.ТекущиеДанные.ДополнительныйОбъектАдресации,
		Истина, Истина, ПоказыватьМоиКонтакты);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиями.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиями.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Исполнитель = Объект.Председатель
		И ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве председателя'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Исполнитель = Объект.Секретарь
		И ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве секретаря'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ТекущийДанные = Элементы.Участники.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		ВыбранноеЗначение = ВыбранноеЗначение.РольИсполнителя;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
		
		СоставГруппыПользователей = РаботаСПользователями.ПолучитьПользователейГруппыПользователей(ВыбранноеЗначение);
		
		ВГраницаСоставГруппыПользователей = СоставГруппыПользователей.ВГраница();
		Для Инд = 0 По ВГраницаСоставГруппыПользователей Цикл
			СтруктураПоиска = Новый Структура("Исполнитель", СоставГруппыПользователей[ВГраницаСоставГруппыПользователей - Инд]);
			НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СоставГруппыПользователей.Удалить(ВГраницаСоставГруппыПользователей - Инд);
			КонецЕсли;	
		КонецЦикла;	
		
		Если СоставГруппыПользователей.Количество() > 0 Тогда 
			
			ТекущийДанные = Элементы.Участники.ТекущиеДанные;
			ТекущийДанные.Исполнитель = СоставГруппыПользователей[0];
			
			Для Инд = 1 По СоставГруппыПользователей.ВГраница() Цикл
				
				ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
				Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
				
				НоваяСтрока = Участники.Вставить(Индекс + 1);
				НоваяСтрока.Исполнитель = СоставГруппыПользователей[Инд];
				НоваяСтрока.ЯвкаОбязательна = Истина;
				
				Элементы.Участники.ТекущаяСтрока = новаяСтрока.ПолучитьИдентификатор();
				
			КонецЦикла;	
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрограмма

&НаКлиенте
Процедура ПрограммаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|ОсновнойОбъектАдресации, 
		|ДополнительныйОбъектАдресации, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|ВидМероприятия");
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	// последний пункт программы
	Если Объект.Программа.Количество() = 0 Тогда 
		НомерПункта = 1;
		Начало = Объект.ДатаНачала;
	Иначе	
		ПоследнийПункт = Объект.Программа[Объект.Программа.Количество()-1];
		НомерПункта = ПоследнийПункт.НомерПункта + 1;
		Начало = ПоследнийПункт.Окончание;
	КонецЕсли;
	
	ПараметрыФормы.НомерПункта = НомерПункта;
	ПараметрыФормы.Начало = Начало;
	ПараметрыФормы.ТребуетПринятияРешения = Истина;
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломДобавленияЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Программа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	НоваяСтрока.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяПлан);
	НоваяСтрока.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяФакт);
	НоваяСтрока.Решение = ПолучитьРешениеВСтрокеПрограммы(НоваяСтрока, Объект.Протокол);
	
	Элементы.Программа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|ОсновнойОбъектАдресации, 
		|ДополнительныйОбъектАдресации, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|ВидМероприятия");
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломИзмененияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяПлан);
	ТекущиеДанные.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяФакт);
	ТекущиеДанные.Решение = ПолучитьРешениеВСтрокеПрограммы(ТекущиеДанные, Объект.Протокол);
	
	Модифицированность = Истина;
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер-1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	Модифицированность = Истина;
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.Программа.Количество() Тогда 
		Возврат;
	КонецЕсли;
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер+1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	Модифицированность = Истина;
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", ТекущиеДанные.НомерПункта);
	НайденныеСтроки = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалить пункт программы, так как для него введен пункт протокола.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Программа.ТекущаяСтрока;
	ЭлементКоллекции = Объект.Программа.НайтиПоИдентификатору(ТекущаяСтрока);
	ИндексЭлемента = Объект.Программа.Индекс(ЭлементКоллекции);
	
	// Изменение номеров пунктов программы
	Для Инд = ИндексЭлемента + 1 По Объект.Программа.Количество()-1 Цикл
		
		СтарыйНомер = Объект.Программа[Инд].НомерПункта;
		НовыйНомер = СтарыйНомер - 1;
		
		ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
		
	КонецЦикла;
	
	Объект.Программа.Удалить(ИндексЭлемента);
	
	// Пересчет программы
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	ВывестиСуммарнуюДлительностьПрограммы();
	
	// Сортировка протокола
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// Изменение номеров пунктов программы
	ИзмененияНомеровПунктовПрограммы = Новый Соответствие;
	Для Каждого ПунктПрограммы Из Объект.Программа Цикл
		
		СтарыйНомер = ПунктПрограммы.НомерПункта;
		НовыйНомер = ПунктПрограммы.НомерСтроки;
		
		Если СтарыйНомер = НовыйНомер Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияНомеровПунктовПрограммы.Вставить(СтарыйНомер, НовыйНомер);
		ПунктПрограммы.НомерПункта = НовыйНомер;
		
	КонецЦикла;
	
	// Пересчет программы
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	
	// Изменение номеров пунктов протокола
	Для Каждого ПунктПротокола Из Объект.Протокол Цикл
		
		НовыйНомер = ИзмененияНомеровПунктовПрограммы[ПунктПротокола.НомерПунктаПрограммы];
		Если НовыйНомер = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПунктПротокола.НомерПунктаПрограммы = НовыйНомер;
		
	КонецЦикла;
	
	// Сортировка протокола
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПротокол

&НаКлиенте
Процедура ПротоколПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура(
		"НомерПунктаПрограммы, 
		|Исполнитель, 
		|ОсновнойОбъектАдресации, 
		|ДополнительныйОбъектАдресации, 
		|Слушали,
		|Выступили,
		|Решили,
		|СрокИсполнения,
		|НоваяСтрока,
		|НомерСтроки");
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	МаксимальныйПунктПротокола = 0;
	Для Каждого Строка Из Объект.Протокол Цикл
		Если Строка.НомерПунктаПрограммы > МаксимальныйПунктПротокола Тогда 
			МаксимальныйПунктПротокола = Строка.НомерПунктаПрограммы;
		КонецЕсли;	
	КонецЦикла;	
	
	ПараметрыФормы.НоваяСтрока = Истина;
	ПараметрыФормы.НомерПунктаПрограммы = МаксимальныйПунктПротокола + 1;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколПередНачаломДобавленияЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПротокола", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Протокол.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	СтрокиПрограммы = Объект.Программа.НайтиСтроки(Новый Структура("НомерПункта", НоваяСтрока.НомерПунктаПрограммы));
	Для Каждого СтрокаПрограммы Из СтрокиПрограммы Цикл
		СтрокаПрограммы.Решение = ПолучитьРешениеВСтрокеПрограммы(СтрокаПрограммы, Объект.Протокол);
	КонецЦикла;	
	
	Элементы.Протокол.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НомерПунктаПрограммы, 
		|Исполнитель, 
		|ОсновнойОбъектАдресации, 
		|ДополнительныйОбъектАдресации, 
		|Слушали,
		|Выступили,
		|Решили,
		|СрокИсполнения,
		|НоваяСтрока, 
		|НомерСтроки");
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.НоваяСтрока = Ложь;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколПередНачаломИзмененияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПротокола", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	СтрокиПрограммы = Объект.Программа.НайтиСтроки(Новый Структура("НомерПункта", ТекущиеДанные.НомерПунктаПрограммы));
	Для Каждого СтрокаПрограммы Из СтрокиПрограммы Цикл
		СтрокаПрограммы.Решение = ПолучитьРешениеВСтрокеПрограммы(СтрокаПрограммы, Объект.Протокол);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКатегорий

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Файлы

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока,
		ЭтаФорма.УникальныйИдентификатор,
		Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
		Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Файлы.ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока,
		Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
		Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Файлы.ТекущиеДанные.Редактирует);
		
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандКлиент", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайлов", ЭтотОбъект);
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Файлы.ВыделенныеСтроки);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	РаботаСФайламиКлиент.ВыполнитьИмпортФайлов(Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Подписать'"));
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ПодписатьПослеФормированияПодписи", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.СформироватьПодписьФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеФормированияПодписи(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.Успех = Истина Тогда
		РаботаСФайламиВызовСервера.ЗанестиИнформациюОднойПодписи(Результат.ДанныеПодписи);
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);	
		Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ДанныеФайла.Владелец);
	КонецЕсли;
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиКлиент.ДобавитьПодписьИзФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока);
	РаботаСФайламиКлиент.СохранитьСПодписью(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Зашифровать'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Файлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Расшифровать'"));
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.Файлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииМероприятия

&НаКлиенте
Процедура УтвердитьПрограмму(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПрограммы = ВОтдельномДокументе И ЗначениеЗаполнено(Объект.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПрограмму");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьУчастников(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПрограммы = ВОтдельномДокументе И ЗначениеЗаполнено(Объект.МатериалПрограмма) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПрограмма);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе	
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("БизнесПроцесс.Приглашение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМатериалы(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ЗапроситьМатериалы");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьСМатериалами(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ОзнакомитьСМатериалами");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Ознакомление.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиМероприятие(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПровестиМероприятие");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ОперацияМероприятия", "ПодготовитьПротокол");
	Основание.Вставить("Мероприятие", Объект.Ссылка);
		
	ПараметрыФормы = Новый Структура("Основание", Основание);
	ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ВОтдельномДокументе И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "СогласоватьПротокол");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Согласование.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ВОтдельномДокументе И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "УтвердитьПротокол");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Утверждение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПротокол(Команда)
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПротокола = ВОтдельномДокументе И ЗначениеЗаполнено(Объект.МатериалПротокол) Тогда 
		ПараметрыФормы = Новый Структура("Основание", Объект.МатериалПротокол);
		ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		Основание = Новый Структура;
		Основание.Вставить("ОперацияМероприятия", "ИсполнитьПротокол");
		Основание.Вставить("Мероприятие", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		ОткрытьФорму("БизнесПроцесс.Исполнение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьРабочуюГруппуДокументаЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьРабочуюГруппуДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
		
	Иначе
		
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор участников мероприятия'"));
	ПараметрыФормы.Вставить("ВыбранныеЗаголовок", НСтр("ru = 'Выбранные участники мероприятия'"));
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли", Ложь);
	ПараметрыФормы.Вставить("БезВнешнихРолей", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьФункции", Ложь);
	ПараметрыФормы.Вставить("ПодбиратьГруппыПользователей", Истина);
	ПараметрыФормы.Вставить("ПоказыватьКорреспондентов", Истина);
	ПараметрыФормы.Вставить("ПоказыватьМоиКонтакты", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПодборИсполнителей", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеУчастников(Команда)
	
	ЗаполнитьУчастниковМероприятия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротокол(Команда)
	
	Если Объект.Протокол.Количество() > 0  Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перед заполнением строки протокола будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Программа Цикл
		Если Не Строка.ТребуетПринятияРешения Тогда 
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Объект.Протокол.Добавить();
		НоваяСтрока.НомерПунктаПрограммы = Строка.НомерПункта;
		
		Слушали = "";
		Если ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Слушали = Слушали + Строка(Строка.Исполнитель) + Символы.ПС;
		КонецЕсли;	
		Слушали = Слушали + Строка.Содержание;
		
		НоваяСтрока.Слушали = Слушали;
	КонецЦикла;	
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Протокол.Очистить();
	
	Для Каждого Строка Из Объект.Программа Цикл
		
		Если Не Строка.ТребуетПринятияРешения Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Протокол.Добавить();
		НоваяСтрока.НомерПунктаПрограммы = Строка.НомерПункта;
		
		Слушали = "";
		Если ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Слушали = Слушали + Строка(Строка.Исполнитель) + Символы.ПС;
		КонецЕсли;	
		Слушали = Слушали + Строка.Содержание;
		
		НоваяСтрока.Слушали = Слушали;
		
	КонецЦикла;
	
	Объект.Протокол.Сортировать("НомерПунктаПрограммы, НомерСтроки");
	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрограмму(Команда)
	
	СоздатьДокумент(Элементы.МатериалПрограмма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПротокол(Команда)
	
	СоздатьДокумент(Элементы.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремя(Команда)
	
	ПодобратьВремяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастников(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана дата мероприятия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.ДатаНачала");
		Возврат;
		
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны участники мероприятия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	Для Каждого Строка Из Участники Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель)
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи")Тогда 
			МассивУчастников.Добавить(Строка.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	УчастникиДоступны = РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
		МассивУчастников,
		Объект.ДатаНачала,
		Объект.ДатаОкончания,
		Истина,
		Объект.Ссылка,
		Ложь);
	
	Если УчастникиДоступны Тогда
		ТекстПредупреждения = НСтр("ru = 'Все участники доступны.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДоступностьУчастниковЗавершение", ЭтотОбъект);
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуЗанятостиПользователей(
		ОписаниеОповещения, МассивУчастников, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ПодобратьВремяКлиент();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Файлы

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, 
		Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ОперацииМероприятия

&НаКлиенте
Функция ПередВыполнениемОперацииМероприятия()
	
	ОтменаОперации = Ложь;
	ТребуетсяЗаписатьМероприятие = Объект.Ссылка.Пустая() Или Модифицированность;
	Если ТребуетсяЗаписатьМероприятие Тогда
		Если Не Записать() Тогда
			ОтменаОперации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтменаОперации;
	
КонецФункции

#КонецОбласти

#Область Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьДокумент(ЭлементВладелец)
	
	ТипШаблонаДокумента = "ШаблоныВнутреннихДокументов";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипШаблонаДокумента", ТипШаблонаДокумента);
	ПараметрыФормы.Вставить("ВозможностьСозданияПустогоДокумента", Истина);
	ПараметрыФормы.Вставить("НаименованиеКнопкиВыбора", НСтр("ru = 'Создать по шаблону'"));
	
	Попытка
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ЭлементВладелец", ЭлементВладелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("ОбщаяФорма.СозданиеДокументаПоШаблону", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Описание = "СоздатьПустойДокумент" Тогда
			Результат = "СоздатьПустойДокумент";
			СоздатьДокументЗавершение(Результат, ПараметрыОбработчика)
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = "ПрерватьОперацию" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДокумента = "Справочник.ВнутренниеДокументы.ФормаОбъекта";
	
	КлючеваяОперация = "ВнутренниеДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыФормы = Новый Структура;
	Если (ТипЗнч(Результат) <> Тип("Строка")) Тогда 
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
		ПараметрыФормы.Вставить("ЗаполнятьРеквизитыДоСоздания", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
		ПараметрыФормы.Вставить("ЗаполнятьРеквизитыДоСоздания", Ложь);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ДополнительныеПараметры.ЭлементВладелец);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСостояниеМероприятия(ТекущийОбъект, НачальноеСостояние, Состояние)
	
	Если НачальноеСостояние = Состояние Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Состояние) Тогда 
		УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
			ТекущийОбъект.Ссылка, 
			ТекущаяДата(), 
			Состояние, 
			ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		УправлениеМероприятиями.ОчиститьСостояниеМероприятия(
			ТекущийОбъект.Ссылка, 
			НачальноеСостояние);	
	КонецЕсли;
	
	НачальноеСостояние = Состояние;	
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьСостоянияМероприятия()
	
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
		НачальноеСостояниеМероприятия = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
	Иначе	
		СостояниеМероприятия = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМероприятия");
		НачальноеСостояниеМероприятия = СостояниеМероприятия;
		
		СостояниеПриглашений = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПриглашений");
		НачальноеСостояниеПриглашений = СостояниеПриглашений;
		
		СостояниеПрограммы = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПрограммы");
		НачальноеСостояниеПрограммы = СостояниеПрограммы;
		
		СостояниеМатериаловВыступающих = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМатериаловВыступающих");
		НачальноеСостояниеМатериаловВыступающих = СостояниеМатериаловВыступающих;
		
		СостояниеПротокола = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПротокола");
		НачальноеСостояниеПротокола = СостояниеПротокола;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Участники.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	Участники.Очистить();
	
	ЗагруженныеИсполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого Строка Из ЗагруженныеИсполнители Цикл
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ГруппыПользователей") Тогда 
			СоставГруппыПользователей = РаботаСПользователями.ПолучитьПользователейГруппыПользователей(Строка.Исполнитель);
			
			ВГраницаСоставГруппыПользователей = СоставГруппыПользователей.ВГраница();
			Для Инд = 0 По ВГраницаСоставГруппыПользователей Цикл
				СтруктураПоиска = Новый Структура("Исполнитель", СоставГруппыПользователей[ВГраницаСоставГруппыПользователей - Инд]);
				НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда 
					СоставГруппыПользователей.Удалить(ВГраницаСоставГруппыПользователей - Инд);
				КонецЕсли;	
			КонецЦикла;	
			
			Для Инд = 0 По СоставГруппыПользователей.ВГраница() Цикл
				НоваяСтрока = Участники.Добавить();
				НоваяСтрока.Исполнитель = СоставГруппыПользователей[Инд];
				НоваяСтрока.ЯвкаОбязательна = Истина;
			КонецЦикла;
		Иначе
			НоваяСтрока = Участники.Добавить();
			НоваяСтрока.Исполнитель = Строка.Исполнитель;
			НоваяСтрока.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
			НоваяСтрока.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			НоваяСтрока.ЯвкаОбязательна = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	КоличествоУчастников = Участники.Количество();
	
	Если ЗагруженныеИсполнители.Количество() > 0 Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНачалоОкончаниеПунктовПрограммы()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Для Каждого ПунктПрограммы Из Объект.Программа Цикл
			ПунктПрограммы.Начало = Неопределено;
			ПунктПрограммы.Окончание = Неопределено;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Объект.Программа.Количество() > 0 Тогда 
		Строка = Объект.Программа[0];
		Строка.Начало = Объект.ДатаНачала;
		Строка.Окончание = Строка.Начало + Строка.ВремяПлан;
	КонецЕсли;
	
	Для Инд = 1 По Объект.Программа.Количество()-1 Цикл
		
		Строка = Объект.Программа[Инд];
		
		Если ЗначениеЗаполнено(Объект.Программа[Инд-1].Окончание) Тогда 
			Строка.Начало = Объект.Программа[Инд-1].Окончание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Начало) Тогда 
			Строка.Окончание = Строка.Начало + Строка.ВремяПлан
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСуммарнуюДлительностьПрограммы()
	
	Если Объект.ТипПрограммы <> ВТаблице Тогда 
		Возврат;
	КонецЕсли;
	
	// Вывод итогового времени в подвал
	ВремяПланСек = 0; ВремяФактСек = 0;
	
	Для Каждого Строка Из Объект.Программа Цикл
		ВремяПланСек = ВремяПланСек + Строка.ВремяПлан;
		ВремяФактСек = ВремяФактСек + Строка.ВремяФакт;
	КонецЦикла;
	
	ИтогоВремяПлан = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяПланСек);
	ИтогоВремяФакт = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяФактСек);
	
	// Вывод превышенного / оставшегося времени
	СуммарнаяДлительностьПрограммы = 0;
	Для Каждого Строка Из Объект.Программа Цикл
		СуммарнаяДлительностьПрограммы = СуммарнаяДлительностьПрограммы + Строка.ВремяПлан;
	КонецЦикла;
	
	ИнформационнаяНадписьПрограмма = "";
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) 
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда 
		
		ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		Если СуммарнаяДлительностьПрограммы <> ДлительностьСек Тогда 
			Если СуммарнаяДлительностьПрограммы > ДлительностьСек Тогда 
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышено на %1'"),  
					УчетВремениКлиентСервер.ЧислоВСтроку(СуммарнаяДлительностьПрограммы - ДлительностьСек));
			Иначе
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Осталось %1'"),
					УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьСек - СуммарнаяДлительностьПрограммы));
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер)
	
	СтруктураПоиска = Новый Структура("НомерПункта", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПункта", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтрокиСтарыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиСтарыйНомер[0].НомерПункта = НовыйНомер;
	КонецЕсли;
	
	Если НайденныеСтрокиНовыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиНовыйНомер[0].НомерПункта = СтарыйНомер;
	КонецЕсли;
	
	Если НовыйНомер > СтарыйНомер Тогда 
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Начало;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
	ИначеЕсли НовыйНомер < СтарыйНомер Тогда 
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиНовыйНомер[0].Начало;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайденныеСтрокиСтарыйНомер Цикл
		Строка.НомерПунктаПрограммы = НовыйНомер;
	КонецЦикла;	
	
	Для Каждого Строка Из НайденныеСтрокиНовыйНомер Цикл
		Строка.НомерПунктаПрограммы = СтарыйНомер;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиДлительностьВПрограмме()
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРешениеВСтрокеПрограммы(СтрокаПрограммы, Протокол)
	
	Решение = "";
	
	Если Не СтрокаПрограммы.ТребуетПринятияРешения Тогда 
		Решение = НСтр("ru = 'Не требуется'");
	Иначе	
		НайденныеСтроки = Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", СтрокаПрограммы.НомерПункта));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
				Решение = НСтр("ru = 'Принято'");
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Решение = "" Тогда 
			Решение = НСтр("ru = 'Не принято'");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Решение;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНомерПунктаПротокола(СтрокаПротокола, Протокол)
	
	НомерПунктаПрограммы = СтрокаПротокола.НомерПунктаПрограммы;
	
	Строки = Новый Массив;
	Для Каждого Строка Из Протокол Цикл
		Если НомерПунктаПрограммы = Строка.НомерПунктаПрограммы Тогда 
			Строки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Если Строки.Количество() = 1 Тогда 
		Возврат НомерПунктаПрограммы;
	Иначе
		Инд = Строки.Найти(СтрокаПротокола);
		Возврат Строка(НомерПунктаПрограммы) + "." + Строка(Инд+1);
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ВывестиНомерПунктаПротокола()

	Для Каждого Строка Из Объект.Протокол Цикл
		Строка.НомерПунктаПротокола = ПолучитьНомерПунктаПротокола(Строка, Объект.Протокол);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиРешенияВПрограмме()
	
	Если Не УчитыватьКакПротокольноеМероприятие Или Объект.ТипПротокола <> ВТаблице Тогда 
		Элементы.ПрограммаРешение.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ПрограммаРешение.Видимость = Истина;
	
	Для Каждого Строка Из Объект.Программа Цикл
		Строка.Решение = ПолучитьРешениеВСтрокеПрограммы(Строка, Объект.Протокол);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиИнформационнуюНадпись()
	
	ИнформационнаяНадпись = "";
	
	Если СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки Тогда 
		
		Если Объект.ДатаОкончания < ТекущаяДатаСеанса() И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
			ИнформационнаяНадпись = НСтр("ru = 'Срок проведения мероприятие прошёл, и оно не отмечено как проведенное или отмененное.'");
		КонецЕсли;	
	
	ИначеЕсли СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеПроведено Тогда 
		
		Если Объект.ТипПротокола = ВТаблице И Объект.ТипПрограммы = ВТаблице И УчитыватьКакПротокольноеМероприятие Тогда 
			
			ЕстьРешениеНеПринято = Ложь;
			Для Каждого Строка Из Объект.Программа Цикл
				
				Решение = "";
				Если Строка.ТребуетПринятияРешения Тогда 
					НайденныеСтроки = Объект.Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
							Решение = НСтр("ru = 'Принято'");
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если Решение = "" Тогда 
						ЕстьРешениеНеПринято = Истина;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	
			
			Если ЕстьРешениеНеПринято Тогда 
				ИнформационнаяНадпись = НСтр("ru = 'Не по всем вопросам мероприятия приняты решения'");
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ИнформационнаяНадпись <> "" Тогда 
		Элементы.ИнформационнаяНадпись.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандКлиент(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элементы.Файлы.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыКонтекстноеМенюРаспознать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Ложь);

		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыЗанять, Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОсвободить, Не Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать, РасширениеПоддерживается И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМеню.ПодчиненныеЭлементы.ФайлыКонтекстноеМенюРаспознать, РасширениеПоддерживается И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Зашифрован);
		
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Функция СформироватьДанныеВыбораУчастника(Текст = "")
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Строка Из Участники Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Текст <> "" И Нрег(Лев(Строка.Исполнитель, СтрДлина(Текст))) <> НРег(Текст) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Исполнитель", Строка.Исполнитель);
		ЗначениеВыбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ЗначениеВыбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка.ДополнительныйОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ", " + Строка.ДополнительныйОбъектАдресации + ")";
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ")";
		Иначе
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		КонецЕсли;	
		
		ДанныеВыбора.Добавить(ЗначениеВыбора, ПредставлениеВыбора);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции	

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("МестоПроведения", Объект.МестоПроведения);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Участники.ТолькоПросмотр = Ложь;
	Элементы.ДатаНачала.ТолькоПросмотр = Ложь;
	Элементы.ДатаНачалаВремя.ТолькоПросмотр = Ложь;
	Элементы.ДатаОкончания.ТолькоПросмотр = Ложь;
	Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Ложь;
	Элементы.МестоПроведения.ТолькоПросмотр = Ложь;
	Элементы.Программа.ТолькоПросмотр = Ложь;
	Элементы.Протокол.ТолькоПросмотр = Ложь;
	
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияОтправлены Тогда 
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаВремя.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Истина;
		Элементы.МестоПроведения.ТолькоПросмотр = Истина;
	КонецЕсли;	
		
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияПриняты Тогда 
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаНачалаВремя.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончанияВремя.ТолькоПросмотр = Истина;
		Элементы.МестоПроведения.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколСогласован
	 Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколУтвержден Тогда 
		Элементы.Протокол.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
		ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
				
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи,,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура РазблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
		ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
				
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		РазблокироватьДанныеДляРедактирования(КлючЗаписи,ЭтаФорма.УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковМероприятия()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Участники.Очистить();
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Объект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Записи = НаборЗаписей.Выгрузить();
		Записи.Сортировать("Порядок");
		Для Каждого Запись Из Записи Цикл
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		КонецЦикла;	
		
	КонецЕсли;
	
	ДанныеУчастниковЗаблокированы = Ложь;
	КоличествоУчастников = Участники.Количество();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда 
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда 
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		
		Элементы.МатериалПрограмма.Видимость = Истина;
		Элементы.СоздатьПрограмму.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда 	
		
		Элементы.Программа.Видимость = Истина;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Истина;
		
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	КонецЕсли;	
	
	Если Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда 
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда 
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.МатериалПротокол.Видимость = Истина;
		Элементы.СоздатьПротокол.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда 	
		
		Элементы.Протокол.Видимость = Истина;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.СоздатьПрограмму.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПрограмма);
	Элементы.СоздатьПротокол.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьМероприятия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаНачала) <> НачалоДня(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;	
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		
	Часов = Цел(ДлительностьСек	/ 3600);
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Часов*3600) / 60);
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(Минут);
	
	Если Часов > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;	
		
	Если Минут > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Минут) + " " + ПодписьМинут;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОсталосьДоНачала()
	
	ТекущаяДата = ТекущаяДата();
	Если Объект.ДатаНачала <= ТекущаяДата Тогда 
		ОсталосьДоНачала = "";
	Иначе
		ОсталосьДоНачала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'осталось %1'"),
			НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаНачала, ТекущаяДата)));
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура НайтиИПоказатьКоличествоФайлов()
	
	КоличествоФайлов = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = Делопроизводство.КоличествоФайлов(Объект.Ссылка);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьВремяКлиент()
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда 
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны участники мероприятия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Мероприятие", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьВремяКлиентЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ВыборВремени", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремяКлиентЗавершение(Время, ДополнительныеПараметры) Экспорт
	
	Если Время = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.ДатаНачала = Время.ДатаНачала;
	Объект.ДатаОкончания = Время.ДатаОкончания;
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда 
		Объект.ДатаОкончания = Объект.ДатаНачала +  1 * 3600;
	КонецЕсли;

	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ПересчитатьНачалоОкончаниеПунктовПрограммы();
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	
	// Включение добавленных во время подбора участников в участники мероприятия
	Для Каждого ДобавленныйУчастник Из Время.ДобавленныеУчастники Цикл
		
		Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
			ЗаблокироватьДанныеУчастниковДляРедактирования();
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
		Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
		
		НоваяСтрока = Участники.Вставить(Индекс + 1);
		НоваяСтрока.Исполнитель = ДобавленныйУчастник;
		НоваяСтрока.ЯвкаОбязательна = Истина;
		
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПодсказкуСледующегоДействия()
	
	ЗаполненыОсновныеРеквизиты = 
		ЗначениеЗаполнено(Объект.ВидМероприятия)
		И ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И ЗначениеЗаполнено(Объект.Организатор)
		И Участники.Количество() <> 0;
	
	ПодсказкаСледующегоДействия = УправлениеМероприятиямиКлиент.ПолучитьПодсказкуСледующегоДействия(
		СостояниеМероприятия, СостояниеПрограммы, СостояниеПриглашений, СостояниеМатериаловВыступающих,
		СостояниеПротокола, ЗаполненыОсновныеРеквизиты, УчитыватьКакПротокольноеМероприятие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиВыбораДат()
	
	ЗаполнитьСпискиВыбора(Объект.ДатаНачала, Элементы.ДатаНачалаВремя.СписокВыбора,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(Объект.ДатаОкончания, Элементы.ДатаОкончанияВремя.СписокВыбора,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпискиВыбора(ДатаВыбора, СписокВыбораПлан, СписокВыбораФакт)
	
	СписокВыбораПлан.Очистить();
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		ТекДата = НачалоДня(ДатаВыбора);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;	
		
	Для Инд = 1 По 24 Цикл
		
		СписокВыбораПлан.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если ДатаВыбора > ТекДата И ДатаВыбора < ТекДата + 3600 Тогда
			СписокВыбораПлан.Добавить(ДатаВыбора, Формат(ДатаВыбора, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 3600;
		
	КонецЦикла;	
	
	СписокВыбораФакт.Очистить();
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		СписокВыбораФакт.Добавить(ДатаВыбора);
	Иначе
		Для Каждого ТекДата Из СписокВыбораПлан Цикл
			СписокВыбораФакт.Добавить(ТекДата.Значение, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти