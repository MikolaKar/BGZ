
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Согласование (Создание)'");
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда 
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	Иначе
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Согласование ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Заполнение сроков отложенного старта
	ОтложенныйСтартДни = Цел(Объект.СрокОтложенногоСтарта/86400);
	ОтложенныйСтартЧасы = (Объект.СрокОтложенногоСтарта - ОтложенныйСтартДни * 86400)/3600;
	
	// Инициализация формы механизмом комплексных процессов 
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтаФорма, 
		ЗаголовокФормы);
				
	// Инициализация учета времени в сроках задач
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	Элементы.ОтложенныйСтартЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ДекорацияОтложенныйСтартЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	
	// Обработчик подсистемы "Свойства"
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПустойБизнесПроцесс, "ГруппаДополнительныеРеквизиты");
	
	// Остальная инициализация формы	
	ВариантСогласованияПараллельно = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	ВариантСогласованияПоследовательно = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
	ВариантСогласованияСмешанно = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	ПорядокСогласованияВместеСПредыдущим = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
	ПорядокСогласованияПослеПредыдущего = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
	
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость = Объект.ИспользоватьУсловия;
	
	Элементы.ПодписыватьЭП.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	УстановитьВидимость();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
		ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);	
		Элементы.ТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
		Элементы.ТрудозатратыПланАвтора.Заголовок = ЕдиницаТрудозатратСтр;
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
	КонецЕсли;
	
	Мультипредметность.ШаблонПриСозданииНаСервере(ЭтаФорма, Объект);
	
	ЗаполнитьШагСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		ЗаполнитьШагКлиент();		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеУсловийФормы(Объект);
			
	// СтандартныеПодсистемы.Свойства
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	ПустойБизнесПроцессОбъект =
		РеквизитФормыВЗначение("ПустойБизнесПроцесс", Тип("БизнесПроцессОбъект.Согласование"));
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ПустойБизнесПроцессОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");

	// Заполнение сроков отложенного старта
	Объект.СрокОтложенногоСтарта = (ОтложенныйСтартЧасы * 3600) + (ОтложенныйСтартДни * 86400);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Согласование ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеУсловийФормы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьШагКлиент();
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда 
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ПредыдущийВариантСогласования = ВариантСогласованияПоследовательно Тогда 
				Строка.ПорядокСогласования = ПорядокСогласованияПослеПредыдущего;
			ИначеЕсли ПредыдущийВариантСогласования = ВариантСогласованияПараллельно Тогда 
				Строка.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;	
		КонецЦикла;	
		ЗаполнитьШагКлиент();
	КонецЕсли;	
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияПриИзменении(Элемент)
	
	ЗаполнитьШагКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(
		ЭтаФорма,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	МультипредметностьКлиент.УстановкаУсловияМаршрутизации(ИменаПредметов, Элемент, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		ТекущиеДанные.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
			ТекущиеДанные.ИмяПредметаУсловия, ТекущиеДанные.Условие);
		
		Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда 
			ТекущаяСтрока = Объект.Исполнители.НайтиПоИдентификатору(Элементы.Исполнители.ТекущаяСтрока);
			ИндексСтроки = Объект.Исполнители.Индекс(ТекущаяСтрока);
			
			Если ИндексСтроки > 0 Тогда 
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = Объект.Исполнители[ИндексСтроки-1].ПорядокСогласования;
			Иначе
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;	
		КонецЕсли;
		
		ЗаполнитьШагКлиент();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ЗаполнитьШагКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма); 
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ТекущиеДанные.Исполнитель,, Истина, ИспользоватьАвтоподстановки, ИменаПредметовДляФункций,
		ТекущиеДанные.ОсновнойОбъектАдресации, ТекущиеДанные.ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст, Истина, ИменаПредметовДляФункций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст, Истина, ИменаПредметовДляФункций);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТОчкиМаршрута
 
&НаКлиенте
Процедура ТочкиМаршрутаПриИзменении(Элемент)
	
	МультипредметностьКлиент.ТочкиМаршрутаПриИзменении(ЭтаФорма, Объект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма,, Истина, ИспользоватьАвтоподстановки, ИменаПредметовДляФункций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ЗаполнитьШагКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.Исполнители.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	
	ЗаполнитьШагКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУсловия(Команда)
	
	Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость = 
		НЕ Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость;
	 
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = 
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость;
		
	Объект.ИспользоватьУсловия = Элементы.ИсполнителиИспользоватьУсловия.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьРоль(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ИзменитьРольПредмета(ЭтаФорма, Объект, ВыбраннаяСтрока, Ложь);
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазныеСроки(Команда)
	
	Объект.РазныеСроки = Не Объект.РазныеСроки;
	
	Если Объект.РазныеСроки Тогда 
		Для Каждого Исполнитель Из Объект.Исполнители Цикл 
			Исполнитель.СрокИсполнения = Объект.СрокИсполнения;
			Исполнитель.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, Объект.СрокИсполненияЧас, 0);
			Исполнитель.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
				Объект.ТрудозатратыПланИсполнителя, 0);
		КонецЦикла;	
	Иначе	
		Если Объект.Исполнители.Количество() > 0 Тогда 
			СтрокаИсполнитель = Объект.Исполнители[0];
			
			Объект.СрокИсполнения = СтрокаИсполнитель.СрокИсполнения;
			Объект.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, СтрокаИсполнитель.СрокИсполненияЧас, 0);
			Объект.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
				СтрокаИсполнитель.ТрудозатратыПланИсполнителя, 0);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокСогласования.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	Иначе
		Элементы.ПорядокСогласования.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;
	
	// Работа со сроками согласования
	Если Объект.РазныеСроки Тогда 
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиСрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.СрокСогласования.Видимость = Ложь;
		Элементы.Дней.Видимость = Ложь;
		Элементы.СрокИсполненияЧас.Видимость = Ложь;
		Элементы.Часов.Видимость = Ложь;
		Элементы.РазныеСроки.Пометка = Истина;		
		Элементы.ДекорацияТрудозатраты.Видимость = Ложь;
		Элементы.ТрудозатратыПланИсполнителя.Видимость = Ложь;
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	Иначе 
		Элементы.ИсполнителиСрокИсполнения.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполненияЧас.Видимость = Ложь;
		Элементы.СрокСогласования.Видимость = Истина;
		Элементы.Дней.Видимость = Истина;
		Элементы.СрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.Часов.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.РазныеСроки.Пометка = Ложь;		              
		Элементы.ДекорацияТрудозатраты.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;	
		Элементы.ТрудозатратыПланИсполнителя.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		
		ТекущиеИсполнители = Объект.Исполнители.Выгрузить();
		НовыеИсполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Объект.Исполнители.Очистить();
		Для Каждого СтрокаНовыйИсполнитель Из НовыеИсполнители Цикл
			
			СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				СтрокаНовыйИсполнитель.Исполнитель, 
				СтрокаНовыйИсполнитель.ОсновнойОбъектАдресации, 
				СтрокаНовыйИсполнитель.ДополнительныйОбъектАдресации);
				
			НайденныеСтроки = ТекущиеИсполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				НоваяСтрока = Объект.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = НайденныеСтроки[0].Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = НайденныеСтроки[0].ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = НайденныеСтроки[0].ДополнительныйОбъектАдресации;
				НоваяСтрока.ПорядокСогласования = НайденныеСтроки[0].ПорядокСогласования;
			Иначе
				НоваяСтрока = Объект.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаНовыйИсполнитель.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = СтрокаНовыйИсполнитель.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаНовыйИсполнитель.ДополнительныйОбъектАдресации;
				
				ИндексСтроки = Объект.Исполнители.Индекс(НоваяСтрока);
				Если ИндексСтроки > 0 Тогда 
					НоваяСтрока.ПорядокСогласования = Объект.Исполнители[ИндексСтроки-1].ПорядокСогласования;
				Иначе
					НоваяСтрока.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
				КонецЕсли;	
			КонецЕсли;	
			ЗаполнитьШагСервер();
			
		КонецЦикла;	
		
	Иначе	
		Объект.Исполнители.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
&НаКлиенте
Процедура ЗаполнитьШагКлиент()
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда  
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШагСогласования(Объект.Исполнители);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьШагСервер()

	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда  
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШагСогласования(Объект.Исполнители);
	КонецЕсли;
	
КонецПроцедуры	

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		Элементы.ТочкиМаршрута.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
		Элементы.РазныеСроки.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ИсполнителиИспользоватьУсловия.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

