
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Строка.Исполнитель.ВнешняяРоль Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
				ЭтотОбъект,
				"Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если БизнесСобытияВызовСервера.ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(Ссылка) Тогда
		
		МассивПолей = ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если МассивПолей.Количество() <> 0 Тогда
			
			СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
			
			Текст = 
				НСтр("ru = 'Этот шаблон используется для автоматического запуска процессов. Должны быть заполнены поля: '")
				+ СтрокаПолей;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"Объект.Ссылка",, 
				Отказ);
			
		КонецЕсли;		
		
	КонецЕсли;
	
	// Проверка согласующих на дубли
	КоличествоИсполнителей = Исполнители.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;

		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи")Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"),
					Строка(Строка2.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
					
			ИначеЕсли Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("Строка") Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Автоподстановка ""%1"" указана дважды в списке согласующих!'"),
					Строка(Строка2.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
		
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка2.ДополнительныйОбъектАдресации) Тогда 	
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке согласующих!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации),
						Строка(Строка2.ДополнительныйОбъектАдресации));
				ИначеЕсли ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке согласующих!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации)	);	
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"), 
						Строка(Строка2.Исполнитель));
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач")
		И ЗначениеЗаполнено(СрокИсполненияЧас) Тогда
		Результат = Результат 
			+ НСтр("ru = 'Срок исполнения (общий)'") + ": "
			+ ?(ЗначениеЗаполнено(СрокИсполнения), Строка(СрокИсполнения) + НСтр("ru = ' дней'"),"")
			+ ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") И ЗначениеЗаполнено(СрокИсполненияЧас), Строка(СрокИсполненияЧас) + НСтр("ru = ' часов'"),"") 
			+ Символы.ПС;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
	
	Если Исполнители.Количество() > 0 Тогда
		Результат = Результат + НСтр("ru = 'Согласующие'") + ": ";
		Для Каждого Исполнитель Из Исполнители Цикл
			Результат = Результат + Исполнитель.Исполнитель
				+ ?(ЗначениеЗаполнено(Исполнитель.ОсновнойОбъектАдресации),
					", " + Исполнитель.ОсновнойОбъектАдресации, "")
				+ ?(ЗначениеЗаполнено(Исполнитель.ДополнительныйОбъектАдресации),
					", " + Исполнитель.ДополнительныйОбъектАдресации, "")
				+ ";" + Символы.ПС;
		КонецЦикла;
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 2);
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантСогласования) Тогда
		Результат = Результат + Нстр("ru = 'Порядок согласования'") + ": " + Строка(ВариантСогласования) + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка комплексных процессов

Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения() Экспорт
	
	Результат = "";
	
	Если РазныеСроки Тогда
		ОбщийСрокИсполнения = 
			ПолучитьДлительностьИсполнения(Исполнители) * 3600
			+ СрокОтложенногоСтарта;
	Иначе
		ОбщийСрокИсполнения = 
			СрокИсполнения * 86400
			+ СрокИсполненияЧас * 3600
			+ СрокОтложенногоСтарта;	
	КонецЕсли;	
		
	ОбщийСрокИсполненияДни = Цел(ОбщийСрокИсполнения / 86400);
	ОбщийСрокИсполненияЧасы = 
		(ОбщийСрокИсполнения - ОбщийСрокИсполненияДни * 86400) / 3600;
	
	РезультатИсполнение = "";
	БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		РезультатИсполнение,
		ОбщийСрокИсполненияДни,
		ОбщийСрокИсполненияЧасы);

	Возврат РезультатИсполнение;
			
КонецФункции

Функция ПолучитьСтроковоеПредставлениеИсполнителей() Экспорт
	
	Результат = "";
	КоличествоИсполнителей = Исполнители.Количество();
	Для Счетчик = 0 по КоличествоИсполнителей - 1 Цикл
		Результат = Результат + Строка(Исполнители[Счетчик].Исполнитель);
		Если Счетчик < КоличествоИсполнителей - 1 Тогда
			Результат = Результат + ", ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДлительностьПроцесса() Экспорт
	
	Если Не РазныеСроки Тогда
		Результат = СрокИсполнения * 24 + СрокИсполненияЧас + СрокОтложенногоСтарта / 3600;
	Иначе
		Результат = ПолучитьДлительностьИсполнения(Исполнители) +  СрокОтложенногоСтарта / 3600;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДлительностьИсполнения(Знач ТаблицаИсполнители)
	
	Если ТаблицаИсполнители.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ИсполнителиШага = Новый Массив;
	ИсполнителиШага.Добавить(ТаблицаИсполнители[0]);
	МаксимальнаяДлительностьЭтапа = ТаблицаИсполнители[0].СрокИсполнения * 24 + ТаблицаИсполнители[0].СрокИсполненияЧас;
	Для Индекс = 1 По ТаблицаИсполнители.Количество() - 1 Цикл
		Исполнитель = ТаблицаИсполнители[Индекс];
		Если Исполнитель.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего 
			Или ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
			Прервать;
		КонецЕсли;
		ДлительностьИсполнителя = Исполнитель.СрокИсполнения * 24 + Исполнитель.СрокИсполненияЧас;
		Если ДлительностьИсполнителя > МаксимальнаяДлительностьЭтапа Тогда
			МаксимальнаяДлительностьЭтапа = ДлительностьИсполнителя;
		КонецЕсли;
		ИсполнителиШага.Добавить(Исполнитель);
	КонецЦикла;
	
	Для Каждого Исполнитель Из ИсполнителиШага Цикл
		ТаблицаИсполнители.Удалить(Исполнитель);
	КонецЦикла;
	
	Возврат МаксимальнаяДлительностьЭтапа + ПолучитьДлительностьИсполнения(ТаблицаИсполнители);
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ШаблоныСогласования.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры
