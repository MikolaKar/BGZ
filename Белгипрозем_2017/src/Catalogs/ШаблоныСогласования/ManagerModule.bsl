#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей шаблона процесса
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Родитель
//     Ответственный
//     Комментарий
//     ДобавлятьНаименованиеПредмета
//     НаименованиеБизнесПроцесса
//     Описание
//     СрокИсполнения
//     СрокИсполненияЧас
//     Важность
//     Автор
//     Предметы
//     РабочаяГруппа
//     ВариантСогласования
//     ПодписыватьЭП
//     Исполнители
//     НастрокиШаблона
//     РазныеСроки
//
Функция ПолучитьСтруктуруШаблонаСогласования() Экспорт
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Наименование");
	ПараметрыПроцесса.Вставить("Родитель");
	ПараметрыПроцесса.Вставить("Ответственный");
	ПараметрыПроцесса.Вставить("Комментарий");
	ПараметрыПроцесса.Вставить("ДобавлятьНаименованиеПредмета");
	ПараметрыПроцесса.Вставить("НаименованиеБизнесПроцесса");
	ПараметрыПроцесса.Вставить("Описание");
	ПараметрыПроцесса.Вставить("Важность");
	ПараметрыПроцесса.Вставить("Автор");
	ПараметрыПроцесса.Вставить("ШаблонВКомплексномПроцессе");
	ПараметрыПроцесса.Вставить("ВладелецШаблона");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("ТочкаМаршрута");
	Предметы.Колонки.Добавить("ИмяПредметаОснование");
	Предметы.Колонки.Добавить("ШаблонОснование");
	ПараметрыПроцесса.Вставить("Предметы", Предметы);
	
	РабочаяГруппаШаблона = Новый ТаблицаЗначений;
	РабочаяГруппаШаблона.Колонки.Добавить("Участник");
	РабочаяГруппаШаблона.Колонки.Добавить("ОсновнойОбъектАдресации");
	РабочаяГруппаШаблона.Колонки.Добавить("ДополнительныйОбъектАдресации");
	ПараметрыПроцесса.Вставить("РабочаяГруппа", РабочаяГруппаШаблона);
	
	НастрокиШаблона = Новый ТаблицаЗначений;
	НастрокиШаблона.Колонки.Добавить("ВидДокумента");
	Если Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
		НастрокиШаблона.Колонки.Добавить("Организация");
	КонецЕсли;
	НастрокиШаблона.Колонки.Добавить("Условие");
	НастрокиШаблона.Колонки.Добавить("ЗапрещеноИзменение");
	НастрокиШаблона.Колонки.Добавить("ИнтерактивныйЗапуск");
	НастрокиШаблона.Колонки.Добавить("ВидИнтерактивногоСобытия");
	ПараметрыПроцесса.Вставить("НастрокиШаблона", НастрокиШаблона);
	
	ПараметрыПроцесса.Вставить("СрокИсполнения");
	ПараметрыПроцесса.Вставить("СрокИсполненияЧас");
	
	ТаблицаИсполнителей = Новый ТаблицаЗначений;
	ТаблицаИсполнителей.Колонки.Добавить("Исполнитель");
	ТаблицаИсполнителей.Колонки.Добавить("ОсновнойОбъектАдресации");
	ТаблицаИсполнителей.Колонки.Добавить("ДополнительныйОбъектАдресации");
	ТаблицаИсполнителей.Колонки.Добавить("ПорядокСогласования");
	ТаблицаИсполнителей.Колонки.Добавить("СрокИсполнения");
	ТаблицаИсполнителей.Колонки.Добавить("СрокИсполненияЧас");
	ПараметрыПроцесса.Вставить("Исполнители", ТаблицаИсполнителей);
	
	ПараметрыПроцесса.Вставить("ВариантСогласования");
	ПараметрыПроцесса.Вставить("РазныеСроки");
	
	ПараметрыПроцесса.Вставить("ПодписыватьЭП");
	
	Возврат ПараметрыПроцесса;
	
КонецФункции

// Создает шаблон процесса.
//
// Параметры:
//   СтруктураШаблона - Структура - структура полей шаблона исполнение.
//
// Возвращаемый параметр:
//   СправочникСсылка.ШаблоныСогласования
//
Функция СоздатьШаблонСогласования(СтруктураШаблона) Экспорт
	
	НовыйШаблон = СоздатьЭлемент();
	ШаблоныБизнесПроцессов.ЗаполнитьШаблон(НовыйШаблон, СтруктураШаблона);
	
	// Заполнение таблицы Исполнителей
	
	Для Каждого СтрокаИсполнителя Из СтруктураШаблона.Исполнители Цикл
		
		НоваяСтрокаИсполнителя = НовыйШаблон.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнителя, СтрокаИсполнителя);
		
	КонецЦикла;
	
	НовыйШаблон.Записать();
	
	НастрокиШаблона = 
	СтруктураШаблона.НастрокиШаблона.Скопировать();
	НастрокиШаблона.Колонки.Добавить("ШаблонБизнесПроцесса");
	НастрокиШаблона.ЗаполнитьЗначения(НовыйШаблон.Ссылка, "ШаблонБизнесПроцесса");
	
	НаборЗаписей = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(НовыйШаблон.Ссылка);
	НаборЗаписей.Загрузить(НастрокиШаблона);
	НаборЗаписей.Записать();
		
	Возврат НовыйШаблон.Ссылка;
	
КонецФункции

Функция ИмяПроцесса(ШаблонСсылка) Экспорт
	
	Возврат "Согласование";
	
КонецФункции

// Показывает, может ли процесс по данному шаблону использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("ВладелецШаблона")
			И (ТипЗнч(Параметры.ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			ИЛИ ТипЗнч(Параметры.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) 
			ИЛИ Параметры.Свойство("Ключ")
			И (ТипЗнч(Параметры.Ключ.ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			ИЛИ ТипЗнч(Параметры.Ключ.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) Тогда
	
			Если НЕ Параметры.Свойство("ВладелецШаблона") Тогда
				Параметры.Вставить("ВладелецШаблона", Параметры.Ключ.ВладелецШаблона);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ответственный,
		|Ссылка,
		|ШаблонВКомплексномПроцессе,
		|ВладелецШаблона";
	
КонецФункции

Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа);	
	
КонецПроцедуры	

// Возвращает Истина, указывая тем самым что этот объект сам заполняет свои права 
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции	

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
