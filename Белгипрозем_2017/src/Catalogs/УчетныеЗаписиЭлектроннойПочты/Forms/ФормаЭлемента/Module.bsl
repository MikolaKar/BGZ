////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ИмяПользователя = Строка(ПользователиКлиентСервер.ТекущийПользователь());		
	КонецЕсли;
	
	ВидимостьНастроекПочтовогоКлиента =
		Не Объект.Ссылка.Пустая()
		И Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная;
	
	Элементы.СтраницаПапки.Доступность = ВидимостьНастроекПочтовогоКлиента;
	
	// Рабочие группы
	Элементы.РабочаяГруппаТаблица.Доступность = Истина;
	РаботаСРабочимиГруппами.ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(ЭтаФорма);
	
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	УдалятьСообщенияССервера = (Объект.ПериодХраненияСообщенийНаСервере > 0);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пользователь", ПользователиКлиентСервер.ТекущийПользователь()); 
		НайденныеСтроки = Объект.ОтветственныеЗаОбработкуПисем.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Строка = Объект.ОтветственныеЗаОбработкуПисем.Добавить();
			Строка.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не РольДоступна("РаботаСПротоколомРаботыПользователей") И Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ФормаПротоколРаботы.Видимость = Ложь;
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если Объект.SMTPАутентификация <> Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.ПользовательSMTP = "";
		Объект.ПарольSMTP = "";
	КонецЕсли;
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Создание папок почты при необходимости
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Если Не ЗначениеЗаполнено(ПапкаВходящие) 
			И Не ЗначениеЗаполнено(ПапкаИсходящие) 
			И Не ЗначениеЗаполнено(ПапкаОтправленные) 
			И Не ЗначениеЗаполнено(ПапкаЧерновики) 
			И Не ЗначениеЗаполнено(ПапкаКорзина) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			// Создание корневой папки для учетной записи
			КорневаяПапка = Справочники.ПапкиПисем.СоздатьЭлемент();
			КорневаяПапка.ВидПапки = Перечисления.ВидыПапокПисем.Общая;
			КорневаяПапка.ВариантОтображенияКоличестваПисем =
				Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(
					Перечисления.ВидыПапокПисем.Общая);
			КорневаяПапка.Наименование = Объект.Наименование;
			КорневаяПапка.Записать();
			
			СформироватьПраваДоступаКПапке(КорневаяПапка.Ссылка);
			
			// Создание предопределенных папок
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Входящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Исходящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Отправленные);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Черновики);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Корзина);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			// Перечитать информацию о папках
			ПолучитьПредопределенныеПапки(Объект.Ссылка);
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СоздатьПредопределеннуюПодпапку(КорневаяПапка, ВидПапки)
	
	// Создание папки
	Папка = Справочники.ПапкиПисем.СоздатьЭлемент();
	Папка.Родитель = КорневаяПапка;
	Папка.ВидПапки = ВидПапки;
	Папка.ВариантОтображенияКоличестваПисем =
		Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(ВидПапки);
	Папка.Наименование = Строка(ВидПапки);
	Папка.Записать();
	
	// Сохранение сведений о принадлежности созданной папке к учетной записи
	РегистрыСведений.ПапкиУчетныхЗаписей.УстановитьПапку(
		Объект.Ссылка,
		ВидПапки,
		Папка.Ссылка);
	
	Возврат Папка.Ссылка;
	
КонецФункции

&НаСервере
Процедура СформироватьПраваДоступаКПапке(ПапкаСсылка)
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(ПапкаСсылка).Настройки;
	ОписаниеПрав.Очистить();
	
	// Добавление всех ответственных с полными правами
	Для каждого Эл Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		Строка = ОписаниеПрав.Добавить();
		
		Строка.ВладелецНастройки = ПапкаСсылка;
		Строка.ЧтениеПапокИПисем = Истина;
		Строка.ДобавлениеПапокИПисем = Истина; 
		Строка.ИзменениеПапокИПисем = Истина;
		Строка.ИзменениеПапок = Истина;
		Строка.ПометкаУдаленияПапокИПисем = Истина;
		Строка.УправлениеПравами = Истина;
		Строка.НаследованиеРазрешено = Истина;
		Строка.НастройкаРодителя = Ложь;
		Строка.Пользователь = Эл.Пользователь;
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Истина);	
	РегистрыСведений.НастройкиПравОбъектов.Записать(ПапкаСсылка, ОписаниеПрав, Истина);	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьПредопределенныеПапки(ТекущийОбъект);
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("УчетнаяЗаписьЭлектроннойПочтыСохранена", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредопределенныеПапки(ТекущийОбъект)
	
	ПапкаВходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Входящие);
	
	ПапкаИсходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Исходящие);
	
	ПапкаОтправленные = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Отправленные);
	
	ПапкаЧерновики = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Черновики);
	
	ПапкаКорзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Корзина);
	
КонецПроцедуры

&НаКлиенте
Процедура SMTPАутентификацияПриИзменении(Элемент)
	
	SMTPАутентификацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура SMTPАутентификацияПриИзмененииСервер()
	
	Если Объект.SMTPАутентификация <> Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Объект.СпособSMTPАутентификации = Неопределено;
		Объект.ПользовательSMTP = "";
		Объект.ПарольSMTP = "";
	КонецЕсли;
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляПолученияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляОтправкиПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы()
	
	Если Объект.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Элементы.ПользовательSMTP.Доступность = Истина;
		Элементы.ПарольSMTP.Доступность = Истина;
		Элементы.СпособSMTPАутентификации.Доступность = Истина;
	Иначе
		Элементы.ПользовательSMTP.Доступность = Ложь;
		Элементы.ПарольSMTP.Доступность = Ложь;
		Элементы.СпособSMTPАутентификации.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.НастройкиСервераВходящейПочты.Доступность = Объект.ИспользоватьДляПолучения;
	Элементы.НастройкиСервераИсходящейПочты.Доступность = Объект.ИспользоватьДляОтправки;
	
	Элементы.УдалятьСообщенияССервера.Доступность = Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.ОставлятьКопииСообщенийЧислоДней.Доступность =
		Объект.ОставлятьКопииСообщенийНаСервере И УдалятьСообщенияССервера;
	
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Элементы.СтраницаПапки.Доступность = Истина;
		Элементы.СтраницаРабочаяГруппа.Доступность = Истина;
	Иначе
		Элементы.СтраницаПапки.Доступность = Ложь;
		Элементы.СтраницаРабочаяГруппа.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Объект.АдресЭлектроннойПочты);
	НастройкиПочтовогоСервера = ПолучитьПредопределенныеНастройкиПочтовогоСервера(Объект.АдресЭлектроннойПочты);
	
	Если ЗначениеЗаполнено(НастройкиПочтовогоСервера) Тогда
		Если Не ЗначениеЗаполнено(Объект.СерверВходящейПочтыPOP3)
			И НастройкиПочтовогоСервера.Свойство("СерверВходящейПочтыPOP3")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверВходящейПочтыPOP3) Тогда
			Объект.СерверВходящейПочтыPOP3 = НастройкиПочтовогоСервера.СерверВходящейПочтыPOP3;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СерверИсходящейПочтыSMTP)
			И НастройкиПочтовогоСервера.Свойство("СерверИсходящейПочтыSMTP")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверИсходящейПочтыSMTP) Тогда
			Объект.СерверИсходящейПочтыSMTP= НастройкиПочтовогоСервера.СерверИсходящейПочтыSMTP;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Пользователь)
			И НастройкиПочтовогоСервера.Свойство("Пользователь")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.Пользователь) Тогда
			Объект.Пользователь = НастройкиПочтовогоСервера.Пользователь;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СпособPOP3Аутентификации)
			И НастройкиПочтовогоСервера.Свойство("СпособPOP3Аутентификации")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СпособPOP3Аутентификации) Тогда
			Объект.СпособPOP3Аутентификации = НастройкиПочтовогоСервера.СпособPOP3Аутентификации;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.SMTPАутентификация)
			И НастройкиПочтовогоСервера.Свойство("SMTPАутентификация")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.SMTPАутентификация) Тогда
			Объект.SMTPАутентификация = НастройкиПочтовогоСервера.SMTPАутентификация;
		КонецЕсли;
	Иначе
		Объект.Пользователь = АдресИнфо.Пользователь;
	КонецЕсли;
	
	Объект.Наименование = Объект.АдресЭлектроннойПочты;
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредопределенныеНастройкиПочтовогоСервера(Адрес)
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Адрес);
	
	Результат = Новый Структура;
	Если ВРег(АдресИнфо.Домен) = ВРег("mail.ru") Тогда
		Результат.Вставить("СерверВходящейПочтыPOP3", "pop.mail.ru");
		Результат.Вставить("СерверИсходящейПочтыSMTP", "smtp.mail.ru");
		Результат.Вставить("Пользователь", Адрес);
		Результат.Вставить("СпособPOP3Аутентификации", ПредопределенноеЗначение("Перечисление.СпособыPOP3Аутентификации.Обычная"));
		Результат.Вставить("SMTPАутентификация", ПредопределенноеЗначение("Перечисление.ВариантыSMTPАутентификации.АналогичноPOP3"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИмяПользователяПриИзменении(Элемент)
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РАБОЧИМИ ГРУППАМИ

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииСообщенийНаСервереПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьСообщенияССервераПриИзменении(Элемент)
	
	Если Не УдалятьСообщенияССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеАдреса(Объект)
		
	ПредставлениеАдреса = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(Объект.ИмяПользователя, Объект.АдресЭлектроннойПочты);
		
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаКлиенте
Процедура ВариантИспользованияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ОтветственныеЗаОбработкуПисем, "Пользователь");
	
	// Проверка списка Ответственных на дубли
	Для каждого	Эл Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		Для Индекс = Эл.НомерСтроки ПО Объект.ОтветственныеЗаОбработкуПисем.Количество() - 1 Цикл
			
			Если Эл.Пользователь = Объект.ОтветственныеЗаОбработкуПисем[Индекс].Пользователь Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Ответственный указан дважды.'"),
					,
					"Объект.ОтветственныеЗаОбработкуПисем[" + Индекс + "].Пользователь",
					,
					Отказ);

				Отказ = Истина;
				
			КонецЕсли;	
					
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ПротоколРаботыПользователей.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
