#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьНастройкиШифрования") И Параметры.ПоказыватьНастройкиШифрования = Ложь Тогда
		Элементы.АлгоритмШифрования.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыполнятьПроверкуЭПНаСервере") Тогда
		ВыполнятьПроверкуЭПНаСервере = Параметры.ВыполнятьПроверкуЭПНаСервере;
	Иначе
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки(),
			"ВыполнятьПроверкуЭПНаСервере");
	КонецЕсли;
			
	Элементы.ПутиМодулейКриптографииСерверовLinux.Доступность = ВыполнятьПроверкуЭПНаСервере;
	Элементы.ПутиМодулейКриптографииСерверовLinuxКоманднаяПанель.Доступность = ВыполнятьПроверкуЭПНаСервере;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Элементы.ПутиМодулейКриптографииСерверовLinux.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПодключитьРасширениеРаботыСКриптографией() Тогда
		
		ДействияПриОткрытии();
		
	Иначе
		
		Отказ = Истина;
		Обработчик = Новый ОписаниеОповещения("ОткрытьФормуПослеУстановкиРасширения", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для настройки ЭП необходимо установить
	                         |расширение работы с криптографией.'");
		ЭлектроннаяПодписьКлиент.УстановитьРасширение(Обработчик, ТекстВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПровайдераЭППриИзменении(Элемент)
	
	ЗаполнитьСпискиВыбораНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровайдерЭППриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровайдерЭПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТипаПровайдера = "";
	Пока Прав(ВыбранноеЗначение, 1) <> "/" Цикл
		СтрокаТипаПровайдера = Прав(ВыбранноеЗначение, 1) + СтрокаТипаПровайдера;
		ВыбранноеЗначение = Лев(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - 1);
	КонецЦикла;
	ВыбранноеЗначение = Лев(ВыбранноеЗначение, СтрДлина(ВыбранноеЗначение) - 1);
	
	Объект.ТипПровайдераЭП = Число(СтрокаТипаПровайдера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДействияПриОткрытии()
	
	Если Объект.ТипПровайдераЭП = 0 Тогда
		Объект.ТипПровайдераЭП = 1;
	КонецЕсли;
	
	//МиСофт+
	//ДобавитьМенеджераКриптографииВСписок("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider", "", 75);
	//ДобавитьМенеджераКриптографииВСписок("Signal-COM CPGOST Cryptographic Provider", "", 75);
	//ДобавитьМенеджераКриптографииВСписок("Infotecs Cryptographic Service Provider", "", 2);
	//ДобавитьМенеджераКриптографииВСписок("Microsoft Enhanced Cryptographic Provider v1.0", "", 1);
	//ДобавитьМенеджераКриптографииВСписок("Microsoft Strong Cryptographic Provider", "", 1);
	ДобавитьМенеджераКриптографииВСписок("Avest CSP Base", "", 421); 
	ДобавитьМенеджераКриптографииВСписок("Avest CSP Bel PRO", "", 423);
	//МиСофт-
	ДобавитьМенеджераКриптографииВСписок("", "", 75);
	
	Если Элементы.ПровайдерЭП.СписокВыбора.Количество() = 0 Тогда
		Элементы.ПровайдерЭП.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ПровайдерЭП.КнопкаОчистки = Ложь;
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНаКлиенте()
	
	ОчиститьСообщения();
	
	Элементы.АлгоритмПодписи.СписокВыбора.Очистить();
	Элементы.АлгоритмХеширования.СписокВыбора.Очистить();
	Элементы.АлгоритмШифрования.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ПровайдерЭП) Тогда
		ИнформацияМенеджера = СкомпоноватьИнформациюМенеджераКриптографии(Объект.ПровайдерЭП, "", Объект.ТипПровайдераЭП);
	Иначе
		ИнформацияМенеджера = Неопределено;
	КонецЕсли;
	
	Если ИнформацияМенеджера = Неопределено Тогда
		
		СпискиАлгоритмовУспешноЗаполнены = Ложь;
		
	Иначе
				
		СпискиАлгоритмовУспешноЗаполнены = Истина;
		
		АлгоритмПодписиНайден = Ложь;
		АлгоритмХешированияНайден = Ложь;
		АлгоритмШифрованияНайден = Ложь;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыПодписи Цикл
			Элементы.АлгоритмПодписи.СписокВыбора.Добавить(Строка);
			Если Объект.АлгоритмПодписи = Строка Тогда
				АлгоритмПодписиНайден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыХеширования Цикл
			Элементы.АлгоритмХеширования.СписокВыбора.Добавить(Строка);
			Если Объект.АлгоритмХеширования = Строка Тогда
				АлгоритмХешированияНайден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ИнформацияМенеджера.АлгоритмыШифрования Цикл
			Элементы.АлгоритмШифрования.СписокВыбора.Добавить(Строка);
			Если Объект.АлгоритмШифрования = Строка Тогда
				АлгоритмШифрованияНайден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ АлгоритмПодписиНайден Тогда
			Объект.АлгоритмПодписи = "";
		КонецЕсли;
			
		Если НЕ АлгоритмХешированияНайден Тогда
			Объект.АлгоритмХеширования = "";
		КонецЕсли;
		
		Если НЕ АлгоритмШифрованияНайден Тогда
			Объект.АлгоритмШифрования = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.АлгоритмПодписи.Доступность     = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмХеширования.Доступность = СпискиАлгоритмовУспешноЗаполнены;
	Элементы.АлгоритмШифрования.Доступность  = СпискиАлгоритмовУспешноЗаполнены;
	
КонецПроцедуры

&НаКлиенте
Функция СкомпоноватьИнформациюМенеджераКриптографии(ИмяМодуляКриптографии, ПутьМодуляКриптографии, ТипМодуляКриптографии,
	СообщатьОшибки = Истина)
	
	Если ПутьМодуляКриптографии = Неопределено Тогда
		ПутьМодуляКриптографии = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().ПутьМодуляКриптографии;
	КонецЕсли;
	
	ИнформацияМенеджера = Неопределено;
	
	Попытка
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ИмяМодуляКриптографии, ПутьМодуляКриптографии, ТипМодуляКриптографии);
		ИнформацияМенеджера = МенеджерКриптографии.ПолучитьИнформациюМодуляКриптографии();
		
	Исключение
		
		Если СообщатьОшибки Тогда
			ПредставлениеОшибки = СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если Прав(ПредставлениеОшибки, 1) <> "." Тогда
				ПредставлениеОшибки = ПредставлениеОшибки + ".";
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключить провайдера ЭП: %1
                          |Укажите Провайдера и его Тип согласно инструкции фирмы-производителя криптопровайдера.'"),
					ПредставлениеОшибки
				),
				,
				"ТипПровайдераЭП");
		КонецЕсли;
		
	КонецПопытки;
	
	Если ИнформацияМенеджера <> Неопределено Тогда
		
		ЗначениеСпискаВыбора = ИнформацияМенеджера.Имя + "/" + ТипМодуляКриптографии;
		
		Если Элементы.ПровайдерЭП.СписокВыбора.НайтиПоЗначению(ЗначениеСпискаВыбора) = Неопределено Тогда
			Элементы.ПровайдерЭП.СписокВыбора.Добавить(ЗначениеСпискаВыбора, ИнформацияМенеджера.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИнформацияМенеджера;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьМенеджераКриптографииВСписок(ИмяМодуляКриптографии, ПутьМодуляКриптографии, ТипМодуляКриптографии)
	
	ИнформацияМенеджера = СкомпоноватьИнформациюМенеджераКриптографии(
		ИмяМодуляКриптографии,
		ПутьМодуляКриптографии,
		ТипМодуляКриптографии,
		Ложь);
	
КонецПроцедуры

#Область СлужебныеОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ОткрытьФормуПослеУстановкиРасширения(РасширениеУстановлено, ДополнительныеПараметры) Экспорт
	
	Если РасширениеУстановлено = Истина Тогда
		Если Не Открыта() Тогда
			Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//МиСофт
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	СтруктураКонстант = Новый Структура("АлгоритмПодписи, АлгоритмХеширования, АлгоритмШифрования, ПровайдерЭП, ТипПровайдераЭП", ТекущийОбъект.АлгоритмПодписи, ТекущийОбъект.АлгоритмХеширования, ТекущийОбъект.АлгоритмШифрования, ТекущийОбъект.ПровайдерЭП, ТекущийОбъект.ТипПровайдераЭП);
	Для Каждого Константа Из СтруктураКонстант Цикл
		Если Не ЗначениеЗаполнено(Константы[Константа.Ключ].Получить()) Тогда
			Константы[Константа.Ключ].Установить(Константа.Значение); 
		КонецЕсли;                               
	КонецЦикла;
КонецПроцедуры

//МиСофт
&НаКлиенте
Процедура УстановитьКомпонентуКриптографии(Команда)
	//МиСофт+
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии");		
	#КонецЕсли
	
	Попытка			
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии", "Crypto");
		Крипто = Новый("AddIn.Crypto.CryptoExtension");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	//МиСофт-
КонецПроцедуры

#КонецОбласти

#КонецОбласти
