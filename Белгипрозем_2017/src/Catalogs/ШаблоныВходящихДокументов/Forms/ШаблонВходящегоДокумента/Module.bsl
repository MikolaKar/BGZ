//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ВидОбращенияАнонимное = Перечисления.ВидыОбращенийГраждан.Анонимное;
	ВидыКорреспондентовФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
    
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		НазваниеОрганизации = Константы.НаименованиеПредприятия.Получить();
		Элементы.ДекорацияОрганизация.Видимость = Истина;
		Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
	Иначе	
		Элементы.ДекорацияОрганизация.Видимость = Ложь;
	КонецЕсли;	

	Если ЗначениеЗаполнено(Объект.Отправитель) И ЗначениеЗаполнено(Объект.Подписал) Тогда
		ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Объект.Отправитель, Объект.Подписал);
	Иначе
		ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Объект.Отправитель);
	КонецЕсли;	

	// Обращения граждан
	УчитыватьКакОбращениеГраждан = ПолучитьФункциональнуюОпцию(
		"УчитыватьКакОбращениеГраждан", 
		Новый Структура("ВидВходящегоДокумента", 
		Объект.ВидДокумента));

	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	// Категории данных
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Для Каждого Категория Из Объект.Категории Цикл
			Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
		КонецЦикла;
	Иначе
		Элементы.СтраницаКатегории.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Адресат) И ЗначениеЗаполнено(Объект.Подразделение) Тогда
		АдресатТекст = СокрЛП(Объект.Адресат) + ", " + СокрЛП(Объект.Подразделение);
	ИначеЕсли ЗначениеЗаполнено(Объект.Адресат) Тогда
		АдресатТекст = СокрЛП(Объект.Адресат);	
	КонецЕсли;	
	
	ОбновитьВидимостьРеквизитов();
	
	ОбновитьИконкиУчастниковРабочейГруппыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	ИсходнаяРабочаяГруппа.Загрузить(НоваяРабочаяГруппа);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Категории данных
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Для Каждого Категория Из Объект.Категории Цикл
			Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
		КонецЦикла;
	Иначе
		Элементы.СтраницаКатегории.Видимость = Ложь;
	КонецЕсли;
	
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	ОбновитьВидимостьРеквизитов();
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.РабочаяГруппаДокумента, "Участник");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбращенияПриИзменении(Элемент)
	
	Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
		Объект.Отправитель = Неопределено;
		Объект.Подписал = Неопределено;
		ОтправительТекст = Неопределено;
		Элементы.ОтправительТекст.Доступность = Ложь;
	Иначе	
		Элементы.ОтправительТекст.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВидДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуВыбораЗначения(ЭтаФорма, Элемент);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Корреспондент", 		Объект.Отправитель);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Неопределено);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с адресатом, корреспондентом и контактным лицом

&НаКлиенте
Процедура ОтправительТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;                                                       
	
	Если ЗначениеЗаполнено(Объект.Подписал) Тогда
		Подписал = Объект.Подписал;
	Иначе	
		Подписал = Объект.Отправитель;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Получатель", Подписал);
	Если УчитыватьКакОбращениеГраждан Тогда 
		ПараметрыФормы.Вставить("ЮрФизЛицо", ВидыКорреспондентовФизЛицо);
		ПараметрыФормы.Вставить("Режим", "ТолькоКорреспонденты");
	Иначе
		ПараметрыФормы.Вставить("Режим", "КорреспондентыКонтактныеЛица");
	КонецЕсли;

	ОткрытьФорму("ОбщаяФорма.ВыборКорреспондентаКонтактноеЛицо", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Отправитель = Неопределено;
	Объект.Подписал = Неопределено;
	ОтправительТекст = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтправительТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Подписал) Тогда
		ПоказатьЗначение(, Объект.Подписал);
	ИначеЕсли ЗначениеЗаполнено(Объект.Отправитель) Тогда
		ПоказатьЗначение(, Объект.Отправитель);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Отправитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Отправитель, ВыбранноеЗначение);
		Объект.Отправитель = Отправитель;			
		Объект.Подписал = ВыбранноеЗначение;			
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Корреспонденты") Тогда 	
		
		ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Отправитель = ВыбранноеЗначение;						
		Объект.Подписал = Неопределено;	

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Корреспондент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", ВыбранноеЗначение.Корреспондент, ВыбранноеЗначение.КонтактноеЛицо);
			Объект.Отправитель = ВыбранноеЗначение.Корреспондент;			
			Объект.Подписал = ВыбранноеЗначение.КонтактноеЛицо;			
		Иначе
			ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", ВыбранноеЗначение.Корреспондент);
			Объект.Отправитель = ВыбранноеЗначение.Корреспондент;						
			Объект.Подписал = Неопределено;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	ДанныеОтправителя = Делопроизводство.ПолучитьДанныеКорреспондента(Объект.Отправитель);
	ОтправительЮрЛицо = ДанныеОтправителя.КорреспондентЮрЛицо;
	
	Если ОтправительЮрЛицо И УчитыватьКакОбращениеГраждан Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранное значение не является физическим лицом!'"));
		Объект.Отправитель = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если УчитыватьКакОбращениеГраждан Тогда 
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст, УчитыватьКакОбращениеГраждан);
		Иначе	
			Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
				Если Найти(Текст, СокрЛП(Объект.Отправитель)+",") > 0 Тогда 
					ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Отправитель))-1));
					ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Отправитель);
				Иначе
					ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
				КонецЕсли;	
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;	
		КонецЕсли;		
	Иначе
		Объект.Отправитель = Неопределено;
		Объект.Подписал = Неопределено;	
		ОтправительТекст = Неопределено;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОтправительТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если УчитыватьКакОбращениеГраждан Тогда 
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст, УчитыватьКакОбращениеГраждан);
		Иначе	
			Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
				Если Найти(Текст, СокрЛП(Объект.Отправитель)+",") > 0 Тогда 
					ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Отправитель))-1));
					ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Отправитель);
				Иначе
					ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
				КонецЕсли;	
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;	
		КонецЕсли;		
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ОтправительТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;	
	Иначе
		Объект.Отправитель = Неопределено;
		Объект.Подписал = Неопределено;	
		ОтправительТекст = Неопределено;				
 	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Адресат) Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Адресат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Адресат);

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РАБОЧАЯ ГРУППА ДОКУМЕНТА

&НаКлиенте
Процедура РабочаяГруппаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(
		Элемент, // РабочаяГруппаЭлемент
		НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Объект.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаДокументаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Объект.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		Ложь); // ОтменаРедактирования
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникНачалоВыбора(
		ЭтаФорма,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РАБОЧАЯ ГРУППА ТАБЛИЦА

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(
		ЭтаФорма,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппыДокумента(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонПодобратьУчастниковРабочейГруппы(
		ЭтаФорма,
		Объект.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		Объект.Категории, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		Объект.Категории, ОписаниеОповещения); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУчетОбращенийГраждан()
	
	Если УчитыватьКакОбращениеГраждан Тогда  
		
		Если ЗначениеЗаполнено(Объект.Отправитель) И Объект.Отправитель.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			Объект.Отправитель = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Подписал) Тогда 
			Объект.Подписал = Неопределено;
		КонецЕсли;	
		
		ОтправительТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Объект.Отправитель);

		ВидОбращенияАнонимное = Перечисления.ВидыОбращенийГраждан.Анонимное;
		Если Объект.ВидОбращения = ВидОбращенияАнонимное Тогда 
			Элементы.ОтправительТекст.Доступность = Ложь;
		КонецЕсли;	
		
	Иначе
		Элементы.ОтправительТекст.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ВидДокументаПриИзмененииСервер()
	
	УчитыватьКакОбращениеГраждан = ПолучитьФункциональнуюОпцию(
		"УчитыватьКакОбращениеГраждан", 
		Новый Структура("ВидВходящегоДокумента", 
		Объект.ВидДокумента));
	УстановитьУчетОбращенийГраждан();	

	ОбновитьВидимостьРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитов()
	
	// ЕдиницыИзмерения
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВходящегоДокумента", Объект.ВидДокумента));
	
	// Доп. реквизиты
	СписокДопРеквизитов = РаботаСШаблонамиДокументовСервер.ПолучитьНаборДопРеквизитовДокумента("ВходящиеДокументы", Объект.ВидДокумента, Объект);
	РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(Объект.ДополнительныеРеквизиты, СписокДопРеквизитов);
	КоличествоСвойств = СписокДопРеквизитов.Количество();
	
	Если КоличествоСвойств > 0 Тогда
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Истина;
	Иначе 
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;	

	ПараметрыФункциональныхОпций = ПолучитьПараметрыФункциональныхОпцийФормы();
	Элементы.ЕдиницыИзмерения.Видимость = ПараметрыФункциональныхОпций.ВидВходящегоДокумента.ИспользоватьСрокИсполнения;
	Элементы.ДекорацияСрока.Видимость = ПараметрыФункциональныхОпций.ВидВходящегоДокумента.ИспользоватьСрокИсполнения;	
	
КонецПроцедуры

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.ГруппаСтраницыШаблона.ТолькоПросмотр = Истина;
		Элементы.Страницы.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с рабочей группой

&НаСервере
Процедура РабочаяГруппаДокументаОбработкаВыбораСервер(ВыбранноеЗначение)
	
	РаботаСРабочимиГруппами.ШаблонОбработкаВыбора(
		ЭтаФорма,
		ВыбранноеЗначение,
		Объект.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИконкиУчастниковРабочейГруппыДокумента()
	
	Для Каждого Строка Из  Объект.РабочаяГруппаДокумента Цикл
		Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Строка.Иконка = 1;
			Строка.ЭтоРоль = Истина;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Строка.Иконка = 2;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			Строка.Иконка = 3;
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
			Строка.Иконка = 4;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
	
КонецПроцедуры
