#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей папки файлов
//
// Возвращаемое значение:
//   Структура
//     Родитель
//     Наименование
//     Описание
//     Ответственный
//     ДатаСоздания
//
Функция ПолучитьСтруктуруПапки() Экспорт
	
	ПараметрыПапки = Новый Структура;
	ПараметрыПапки.Вставить("Родитель");
	ПараметрыПапки.Вставить("Наименование");
	ПараметрыПапки.Вставить("Описание");
	ПараметрыПапки.Вставить("Ответственный");
	ПараметрыПапки.Вставить("ДатаСоздания");
	
	Возврат ПараметрыПапки;
	
КонецФункции

// Создает и записывает в БД папку файлов
//
// Параметры:
//   СтруктураПапкиФайлов - Структура - структура полей папки.
//
// Возвращаемое значение - ссылка на созданную папку
//
Функция СоздатьПапку(СтруктураПапкиФайлов) Экспорт
	
	НоваяПапка = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяПапка, СтруктураПапкиФайлов);
	НоваяПапка.Записать();
	
	Возврат НоваяПапка.Ссылка;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоДокументу(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ПолучитьЗначенияРеквизитов()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДокументооборотПраваДоступа.ЗаполнитьНастройкиДескриптора(ДескрипторДоступа, ОбъектДоступа);

КонецПроцедуры	

Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет права по переданному дескриптору доступа 
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	// Заполнение правил обработки настроек папки
	ПравилаОбработкиНастроек = Новый Соответствие;
	
	Настройка = "ЧтениеПапокИФайлов";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Чтение");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	Настройка = "ИзменениеПапок";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Добавление");
	РазрешенныеДействия.Добавить("Изменение");
	РазрешенныеДействия.Добавить("Удаление");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	Настройка = "УправлениеПравами";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("УправлениеПравами");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	// Получение прав по настройкам
	ЭтоСтарыйДескриптор = ЗначениеЗаполнено(ДескрипторДоступа.УдалитьПапка);
	Если ЭтоСтарыйДескриптор Тогда
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваПоНастройкамПапки(
			ДескрипторДоступа.УдалитьПапка, ПраваДоступа, ПравилаОбработкиНастроек);
	Иначе
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваПоНастройкамДескриптора(
			ДескрипторДоступа, ПраваДоступа, ПравилаОбработкиНастроек);
	КонецЕсли;
											
	// Добавление папки в протокол прав
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Права на папку (см. Настройка прав папки)'"));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, указывая тем самы что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции	

// Заполняет параметр ПраваДоступа правами доступа к файлам, владелец 
// которых имеет указанный дескриптор
Процедура ЗаполнитьПраваДоступаДляФайлов(ДескрипторОбъектаДоступа, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение правил обработки настроек папки
	ПравилаОбработкиНастроек = Новый Соответствие;
	
	Настройка = "ЧтениеПапокИФайлов";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Чтение");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	Настройка = "ДобавлениеПапокИФайлов";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Добавление");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	Настройка = "ИзменениеПапокИФайлов";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Изменение");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	Настройка = "ПометкаУдаленияПапокИФайлов";
	РазрешенныеДействия = Новый Массив;
	РазрешенныеДействия.Добавить("Удаление");
	ПравилаОбработкиНастроек.Вставить(Настройка, РазрешенныеДействия);
	
	// Получение прав по настройкам
	ЭтоСтарыйДескриптор = ЗначениеЗаполнено(ДескрипторОбъектаДоступа.УдалитьПапка);
	Если ЭтоСтарыйДескриптор Тогда
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваПоНастройкамПапки(
			ДескрипторОбъектаДоступа.УдалитьПапка, ПраваДоступа, ПравилаОбработкиНастроек);
	Иначе
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваПоНастройкамДескриптора(
			ДескрипторОбъектаДоступа, ПраваДоступа, ПравилаОбработкиНастроек);
	КонецЕсли;
											
КонецПроцедуры

#КонецОбласти

#КонецЕсли

