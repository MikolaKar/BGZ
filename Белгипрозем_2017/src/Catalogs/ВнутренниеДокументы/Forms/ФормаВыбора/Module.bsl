&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// текущая строка по умолчанию
	Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) 
	   И ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		ТекущаяПапка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Параметры.ТекущаяСтрока, "Папка");
		Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
	Иначе
		ТекущаяПапка = Неопределено;
	КонецЕсли;	
	
	// вид просмотра
	ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	Если Параметры.Свойство("ИспользоватьИерархию") И Не Параметры.ИспользоватьИерархию Тогда
		СвойствоИспользоватьИерархию = Истина;
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;
	ПереключитьВидПросмотра();
	
	// Виды документов
	Если Параметры.Свойство("ВидДокумента") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Параметры.ВидДокумента);
	КонецЕсли;
	
	// Комплекты документов
	Если Параметры.Свойство("ЯвляетсяКомплектомДокументов") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ЯвляетсяКомплектомДокументов", Параметры.ЯвляетсяКомплектомДокументов);
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьКомандуСоздать") Тогда
		Элементы.СписокСоздать.Видимость = (Параметры.ПоказыватьКомандуСоздать = Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ВыбранныеДокументыНадпись = НСтр("ru = 'Выбранные документы:'");
	
	// Подбор связанного документа
	Если Параметры.Свойство("СвязанныйДокумент") Тогда
		СписокСвязанныхДокументов = ПолучитьСписокСвязанныхДокументов(Параметры.СвязанныйДокумент);
		Список.Параметры.УстановитьЗначениеПараметра("СписокСвязанныхДокументов", СписокСвязанныхДокументов);
	КонецЕсли;
	
	//1С-Минск+
	Если Параметры.Свойство("ЭтапДоговора") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", Параметры.ЭтапДоговора);
	КонецЕсли;
	//1С-Минск-
	
	Если Параметры.Свойство("ВыбранныеЗначения") Тогда
		Для каждого Значение Из Параметры.ВыбранныеЗначения Цикл
			ВыбранныеЗначения.Добавить(Значение, ПолучитьПолныйПуть(Значение) + "\" + Значение);
		КонецЦикла;
		ОбновитьОтображение();
	КонецЕсли;
	
	Если ЗакрыватьПриВыборе Тогда
		Элементы.ВыбранныеДокументыНадпись.Видимость = Ложь;
		Элементы.ВыбранныеЗначения.Видимость = Ложь;
	КонецЕсли;
	
	//кешируем количество доступных шаблонов внутренних документов
	КоличествоДоступныхШаблоновДокументов = ОбновитьКоличествоДоступныхШаблоновВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхШаблонов", 1200, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не СвойствоИспользоватьИерархию Тогда 
	
		ВидПросмотра = Настройки["ВидПросмотра"];
		ПереключитьВидПросмотра();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
	Если Элементы.Папки.ТекущаяСтрока <> Неопределено Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Группа", Элементы.Папки.ТекущаяСтрока);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда	
	
		Если ТекущаяПапка = Элементы.Папки.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		
		Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
			Элементы.СписокСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СписокСоздать.Доступность = Истина;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			ТекущаяПапка = Элементы.Список.ТекущиеДанные.Папка;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Группа"));
	Параметр.Использование = Ложь;
	
	Элементы.ВключитьПросмотрПапками.Пометка = Ложь;
	Элементы.ВключитьПросмотрСписком.Пометка = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
		
		Элементы.Папки.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Папка.Видимость = Истина;
		
		Элементы.СписокСоздать.Доступность = Истина;
		
		Элементы.ВключитьПросмотрСписком.Пометка = Истина;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Элементы.Папки.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Папка.Видимость = Ложь;
		
		Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
		Список.Параметры.УстановитьЗначениеПараметра("Группа", ТекущаяПапка);
		
		Если Не ЗначениеЗаполнено(ТекущаяПапка) Тогда
			Элементы.СписокСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СписокСоздать.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ВключитьПросмотрПапками.Пометка = Истина;
		
	Иначе
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если ЗакрыватьПриВыборе Тогда
		Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОповеститьОВыборе(Элементы.Список.ТекущаяСтрока);
	Иначе
		Если ВыбранныеЗначения.Количество() = 0 Тогда
			ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
			Если ВыделенныеСтроки.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ни один документ.'"));
				Возврат;
			КонецЕсли;
			ОповеститьОВыборе(ВыделенныеСтроки);
		ИначеЕсли ВыбранныеЗначения.Количество() = 1 Тогда
			ОповеститьОВыборе(ВыбранныеЗначения[0].Значение);
		ИначеЕсли ВыбранныеЗначения.Количество() > 1 Тогда
			ОповеститьОВыборе(ВыбранныеЗначения.ВыгрузитьЗначения());
		КонецЕсли;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ВнутренниеДокументы")
	 Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ВыборЗначенияСервер(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗакрыватьПриВыборе Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВыборЗначенияСервер(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ВыборЗначенияСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда 
		ЗначениеМассив = ВыбранноеЗначение;
	Иначе	
		ЗначениеМассив = Новый Массив;
		ЗначениеМассив.Добавить(ВыбранноеЗначение);
	КонецЕсли;	
	
	Для Каждого Значение Из ЗначениеМассив Цикл
		Элемент = ВыбранныеЗначения.НайтиПоЗначению(Значение);
		Если Элемент = Неопределено Тогда
			ВыбранныеЗначения.Добавить(Значение, ПолучитьПолныйПуть(Значение) + "\" + Строка(Значение));
			ВыбранныеЗначения.СортироватьПоПредставлению();
		Иначе
			ВыбранныеЗначения.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПослеУдаления(Элемент)
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
	ПараметрыФормы = Новый Структура;
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДокумент);
		Открытьформу("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьНовыйДокументПродолжение",
		ЭтотОбъект,
		ПараметрыФормы);
		
	Если КоличествоДоступныхШаблоновДокументов > 0 Тогда
		РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
			ОписаниеОповещения,
			"ШаблоныВнутреннихДокументов");
	Иначе
		Результат = "СоздатьПустойДокумент";
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, ПараметрыФормы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
	Иначе
		ТекущаяПапка = Неопределено;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
	КонецЕсли;
	
	Открытьформу("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапками(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСписком(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокСвязанныхДокументов(СвязанныйДокумент)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиДокументов.Документ КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.СвязанныйДокумент = &Ссылка
		|	И СвязиДокументов.Документ ССЫЛКА Справочник.ВнутренниеДокументы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязиДокументов.СвязанныйДокумент
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Ссылка
		|	И СвязиДокументов.СвязанныйДокумент ССЫЛКА Справочник.ВнутренниеДокументы");
	
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображение()
	
	ВыбранныеДокументыНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выбранные документы (%1):'"), 
			ВыбранныеЗначения.Количество());
			
	УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = ВыбранныеЗначения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолныйПуть(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Путь = "";
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Папка КАК Папка,
		|	ВнутренниеДокументы.Папка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Папка = РезультатЗапроса[0].Папка;
	Пока ЗначениеЗаполнено(Папка) Цикл
		Путь = РезультатЗапроса[0].Наименование + ?(ПустаяСтрока(Путь), "", "\") + Путь;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПапкиВнутреннихДокументов.Родитель КАК Папка,
			|	ПапкиВнутреннихДокументов.Родитель.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ПапкиВнутреннихДокументов КАК ПапкиВнутреннихДокументов
			|ГДЕ
			|	ПапкиВнутреннихДокументов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Папка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Папка = РезультатЗапроса[0].Папка;
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьКоличествоДоступныхШаблоновВыполнить()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ШаблоныДокументов.Код
					|ИЗ
					|	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныДокументов";
	Возврат Запрос.Выполнить().Выбрать().Количество();	
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхШаблонов()
	
	КоличествоДоступныхШаблоновДокументов = ОбновитьКоличествоДоступныхШаблоновВыполнить();
		
КонецПроцедуры	

