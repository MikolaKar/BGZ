
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Документ", Документ) Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствует обязательный параметр открытия формы <Документ>.'");
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Документ) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ВызватьИсключение НСтр("ru = 'Передан некорректный параметр открытия формы <Документ>.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Элементы.Документ.Видимость = Ложь;
		Элементы.ГруппаИстория.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнитьРеквизиты") И Параметры.ЗаполнитьРеквизиты = Истина Тогда
		Если Не Справочники.ВнутренниеДокументы.ИмеетСрокДействия(Параметры.Документ) Тогда
			ВызватьИсключение НСтр("ru = 'По документу не ведется учет сроков действия.'");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПолучитьРеквизитыСрокаДействия(Документ));
	КонецЕсли;
	
	Параметры.Свойство("ДатаНачалаДействия", ДатаНачалаДействия);
	Параметры.Свойство("ДатаОкончанияДействия", ДатаОкончанияДействия);
	Параметры.Свойство("Бессрочный", Бессрочный);
	Параметры.Свойство("ПорядокПродления", ПорядокПродления);
	Параметры.Свойство("Пользователь", Пользователь);
	Параметры.Свойство("ДокументИсточникИзменения", ДокументИсточникИзменения);
	Параметры.Свойство("Комментарий", Комментарий);
	Параметры.Свойство("ИзменятьСрокДействия", ИзменятьСрокДействия);
	
	ДокументЗарегистрирован = ЗначениеЗаполнено(
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Документ,
			"РегистрационныйНомер"));
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура БессрочныйПриИзменении(Элемент)
	
	Если Бессрочный Тогда
		ДатаОкончанияДействия = '00010101';
		ПорядокПродления = Неопределено;
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНажатие(Элемент)
	
	Если Документ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Документ", Документ));
	ОткрытьФорму("РегистрСведений.ИсторияСроковДействияДокументов.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьСрокДействия(Команда)
	
	Если ИзменятьСрокДействия И Не ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данные не были изменены'"));
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Документ", Документ);
	Результат.Вставить("ДатаНачалаДействия", ДатаНачалаДействия);
	Результат.Вставить("ДатаОкончанияДействия", ДатаОкончанияДействия);
	Результат.Вставить("Бессрочный", Бессрочный);
	Результат.Вставить("ПорядокПродления", ПорядокПродления);
	Результат.Вставить("ДокументИсточникИзменения", ДокументИсточникИзменения);
	Результат.Вставить("Комментарий", Комментарий);
	
	Если ИзменятьСрокДействия Тогда
		ИзменитьСрокДействияДокумента(Результат);
		ОповеститьОбИзменении(Документ);
		Закрыть();
	Иначе
		Закрыть(Результат);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПолучитьРеквизитыСрокаДействия(ДокументСсылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ВнутренниеДокументы.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ВнутренниеДокументы.Бессрочный КАК Бессрочный,
		|	ВнутренниеДокументы.ПорядокПродления КАК ПорядокПродления
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
		
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеКлиент()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если ДокументЗарегистрирован Тогда
		ПроверитьЗначениеЗаполнено(
			ДатаНачалаДействия,
			Отказ,
			"ДатаНачалаДействия",
			НСтр("ru = 'Поле ""Дата начала"" не заполнено'"));
	КонецЕсли;
	
	Если ДокументЗарегистрирован И Не Бессрочный Тогда
		ПроверитьЗначениеЗаполнено(
			ДатаОкончанияДействия,
			Отказ,
			"ДатаОкончанияДействия",
			НСтр("ru = 'Поле ""Дата окончания"" не заполнено'"));
	КонецЕсли;
	
	Если ДокументЗарегистрирован И Не Бессрочный Тогда
		ПроверитьЗначениеЗаполнено(
			ПорядокПродления,
			Отказ,
			"ПорядокПродления",
			НСтр("ru = 'Поле ""Порядок продления"" не заполнено'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачалаДействия)
		И ЗначениеЗаполнено(ДатаОкончанияДействия)
		И ДатаНачалаДействия > ДатаОкончанияДействия Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания действия договора меньше даты начала действия.'"),,
			"ДатаОкончанияДействия",,
			Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗначениеЗаполнено(Значение, Отказ, Знач Поле = Неопределено, Знач ТекстСообщения = Неопределено)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекстСообщения = Неопределено Тогда
		Если ЗначениеЗаполнено(Поле) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				Поле);
		Иначе
			ТекстСообщения = НСтр("ru = 'Найдено незаполненное поле'");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,,
		Поле,,
		Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСрокДействияДокумента(ПараметрыЗаписи)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.ИзменитьСрокДействия(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы()
	
	Если Бессрочный Тогда
		Элементы.ДатаОкончанияДействия.Доступность = Ложь;
		Элементы.ДатаОкончанияДействия.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ПорядокПродления.Доступность = Ложь;
		Элементы.ПорядокПродления.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ДатаОкончанияДействия.Доступность = Истина;
		Элементы.ДатаОкончанияДействия.АвтоОтметкаНезаполненного = ДокументЗарегистрирован;
		Элементы.ПорядокПродления.Доступность = Истина;
		Элементы.ПорядокПродления.АвтоОтметкаНезаполненного = ДокументЗарегистрирован;
	КонецЕсли;
	
КонецПроцедуры
