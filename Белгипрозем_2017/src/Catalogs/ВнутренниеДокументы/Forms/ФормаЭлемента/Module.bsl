
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Кэшируемые значения
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные");
	ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	ИспользоватьРезолюцииВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию");
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = 
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСоставДокументов")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних") Тогда
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	
	РольДелопроизводитель = РольДоступна("РегистрацияВнутреннихДокументов") Или РольДоступна("ПолныеПрава");
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда		
		Основание = Параметры.Основание.Основание;
	ИначеЕсли ТипЗнч(Параметры.Основание) <> Тип("Массив") Тогда
		Основание = Параметры.Основание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) И
		ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ОснованиеВидДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "ВидДокумента");
		Если ЗначениеЗаполнено(ОснованиеВидДокумента) Тогда
			ОснованиеВидДокументаРодитель 
				= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеВидДокумента, "Родитель");
	 	КонецЕсли;
	КонецЕсли;

	ПорядокПродленияНеПродлевается = Перечисления.ПорядокПродления.НеПродлевается;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.Проект);
		
		НеДействуетВСоответствии = Справочники.ВнутренниеДокументы.ПустаяСсылка();
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		Элементы.КомментарийРеквизит.Видимость = Истина;
		
	Иначе
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		ПрочитатьСвязи();
		
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
		Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
			ИспользоватьОбзорДокументов = Истина;
		Иначе
			ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
		КонецЕсли;	
	
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
			Элементы.КомментарийРеквизит.Видимость = Ложь;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
			Элементы.КомментарийРеквизит.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Файлы
	ЗаполнитьСписокФайлов(Истина);
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = Параметры.ДокументОснование.ПодписанЭП;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);

		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("Массив")
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда				
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;	
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;	
	
		ИначеЕсли ТипЗнч(ОснованиеДокумента) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			
			ПерепискаПоПредмету = ОснованиеДокумента;
			
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);

			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
				КоличествоФайлов = КоличествоФайловТаблицы;
				Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
					КоличествоФайловТаблицы);
			КонецЕсли;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИмяСобытия", "СозданВнутреннийДокументНаОснованииПисьма");
				ПараметрыОповещения.Вставить("ПараметрСобытия", ОснованиеДокумента);
				Параметры.ПисьмоОснование = ОснованиеДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выбор вида документа
	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыбораВидаДокумента("ВнутреннийДокумент");
	Элементы.ВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаСвойства");
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбновитьПолныйПуть();
	
	Если РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование() = Ложь Тогда
		Элементы.ФайлыПодписан.Видимость = Ложь;
		Элементы.ФайлыЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	// Список резолюций
	Элементы.ГруппаРезолюции.Видимость = ИспользоватьРезолюцииВДокументах;
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеРезолюции") = Неопределено Тогда
		ПоказыватьУдаленныеРезолюции = Ложь;
		Элементы.ПоказыватьУдаленныеРезолюции.Пометка = Ложь;			
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	// Статьи ДДС.
	ПрочитатьСтатьиДДС(Параметры.ДокументОснование);
	
	// Срок действия
	СрокДействияПриСозданииНаСервере();
	
	Если Объект.ВидДокумента.УчитыватьНедействующиеДокументы
		И Объект.ВидДокумента.ЯвляетсяДоговором Тогда
		//1С-Минск +
		//Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
		Элементы.НеДействует.Заголовок = НСтр("ru = 'Не действует'");
		//1С-Минск -
	КонецЕсли;
	Элементы.НеДействуетВСоответствии.Доступность = Объект.НеДействует;
	
	// Визы согласования
	Элементы.ГруппаВизыСогласования.Видимость = ИспользоватьВизыСогласования;
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеВизы") = Неопределено Тогда
		ПоказыватьУдаленныеВизы = Ложь;
		Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = Ложь;			
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	// Штрихкодирование
	Если ИспользоватьШК Тогда
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект);
	КонецЕсли;
	
	//Мисофт+
	Если Объект.ВидДокумента.ЯвляетсяДоговором Тогда
				
		Если Объект.ВидДокумента.УчитыватьНедействующиеДокументы Тогда
			Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
		КонецЕсли;
		
		Элементы.Корреспондент.Заголовок = НСтр("ru = 'Контрагент'");
		Элементы.ГруппаКорреспондент.Заголовок = НСтр("ru = 'Контрагент'");
		Элементы.ГруппаКорреспонденты.Заголовок = НСтр("ru = 'Контрагенты'");
		Элементы.КорреспондентыКорреспондент.Заголовок = НСтр("ru = 'Контрагент'");
		
	Иначе
		Элементы.Корреспондент.Заголовок = НСтр("ru = 'Корреспондент'");
		Элементы.ГруппаКорреспондент.Заголовок = НСтр("ru = 'Корреспондент'");
		Элементы.ГруппаКорреспонденты.Заголовок = НСтр("ru = 'Корреспонденты'");
		Элементы.КорреспондентыКорреспондент.Заголовок = НСтр("ru = 'Корреспондент'");
		
	КонецЕсли;
	//Мисофт-		
	
	Если Параметры.Свойство("ШаблонДокумента") И Параметры.ШаблонДокумента <> Неопределено
		И Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
		АвтозаполнениеШаблоновФайловСервер.СкопироватьФайлыИзШаблонаДокумента(Параметры.ШаблонДокумента, ФайлыДобавленные, Ложь);
		КоличествоФайлов = ФайлыДобавленные.Количество();
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;		
		Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
		
		ЗаполнитьКонтрагентовИзШаблона(Параметры.ШаблонДокумента);
		
		ИзменениеВидаДокументаОбработано = Ложь;
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			ЗаполнитьРеквизитыИзШаблона(Параметры.ШаблонДокумента);
			ПриИзмененииВидаДокумента();
			ИзменениеВидаДокументаОбработано = Истина;
			//Копирование дополнительных реквизитов из шаблона
			Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
				Для Каждого Реквизит Из Параметры.ШаблонДокумента.ДополнительныеРеквизиты Цикл
					СтруктураПоиска = Новый Структура("Свойство", Реквизит.Реквизит);
					МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
					Если МассивСтрок.Количество() > 0 Тогда
						НоваяСтрока = МассивСтрок[0];
						ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				ОбновитьЭлементыДополнительныхРеквизитов();
			КонецЕсли;
		КонецЕсли;
		Если Не ИзменениеВидаДокументаОбработано Тогда
			ПриИзмененииВидаДокумента();
		КонецЕсли;
		Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
		Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
		
		// Визы согласования
		РаботаСВизамиСогласования.ДобавитьИсполнителейСогласованияИзШаблона(ЭтаФорма);
	Иначе 
		//Копирование дополнительных реквизитов основания 
		Если ЗначениеЗаполнено(Основание) 
			И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы")
			И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
			
			Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
				МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					НоваяСтрока = МассивСтрок[0];
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	
	НазваниеОрганизации = Константы.НаименованиеПредприятия.Получить();
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") 
		И ЗначениеЗаполнено(НазваниеОрганизации) Тогда
		Элементы.ДекорацияОрганизация.Видимость = Истина;
		Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
	Иначе	
		Элементы.ДекорацияОрганизация.Видимость = Ложь;
	КонецЕсли;	
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;	
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриСозданииНаСервере(ЭтаФорма);
	ТипСвязиСодержит = Справочники.ТипыСвязей.Содержит;
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
//1С-Минск + 
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	ОбновитьЭлементыДополнительныхРеквизитов();
//1С-Минск -

	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента));
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	УстановитьДоступностьПолей();
	
	// Доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	Элементы.Зарегистрировать.Видимость = РольДелопроизводитель;
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Заполнение текстовых реквизитов
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел, МестоХранения"); 
		ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
			+ " " + СокрЛП(Объект.Дело);

		ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
				РеквизитыДела.МестоХранения), "")
			+ Делопроизводство.ПолучитьСостояниеДела(Объект.Дело);
	КонецЕсли;	
	
	// Обновление заголовка страницы резолюций и виз
	Результат = СформироватьЗаголовокРезолюцийИВиз(КоличествоРезолюций, КоличествоВиз,
		ИспользоватьРезолюцииВДокументах, ИспользоватьВизыСогласования);
	Если Результат = "Отказ" Тогда
		Элементы.ГруппаРезолюцииИВизы.Видимость = Ложь;	
	Иначе	
		Элементы.ГруппаРезолюцииИВизы.Заголовок = Результат;
	КонецЕсли;
	
	СформироватьПредставлениеСтатейДДС();
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
		
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
//1С-Минск +
	//НесколькоКонтрагентов = (Объект.Корреспонденты.Количество() > 1);
	НесколькоКонтрагентов = (Объект.Корреспонденты.Количество() > 1 ИЛИ Объект.Инвесторы.Количество() > 0);
	Если Элементы.Найти("СостояниеДоговора") <> Неопределено Тогда
		ЭтаФорма["СостояниеДоговора"] = мРаботаСДоговорами.ПолучитьСостояниеДоговора(Объект.Ссылка);
	КонецЕсли; 
	Если Элементы.Найти("НашРасчетныйСчет") <> Неопределено Тогда
		ЭтаФорма["НашРасчетныйСчет"] = мРаботаСДоговорами.ПолучитьНашРасчетныйСчет(Объект.Ссылка);
	КонецЕсли; 
//1С-Минск - 	
	УстановитьВидимостьКонтрагентов();
	
	ЗаполнитьСвязи();
	
	// картинки состояний
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда 
		АктивизироватьЭлемент()
	КонецЕсли;
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ВидДокумента.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	ВключитьАвтоотметкуИЗаполнитьПолеОтветственный();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") И Не ТипСвязиВыбран Тогда
			МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
		КонецЕсли;
	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	ПолучитьОбзорДокумента();
    
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		УстановитьДоступностьКомандФайлыДобавленные();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.ФайлыКонтекстноеМенюГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ТаблицаПодписей.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтрока = ДелопроизводствоКлиент.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;

	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		
		ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);
	
	КонецЕсли;
	
//1С-Минск  
	М_УправлениеФормамиДОРБКлиент.ПриОткрытииФормыЭлемента(ЭтаФорма, Отказ);
	ОбработатьзакладкуКорреспонденты();

	УправлениеВидимостьюДобавленныхРеквизитов();
//Конец 1С-Минск
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭП()
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны.
		| Копирование сведений об ЭП в новый документ сделает его недоступным для изменения.
		| Скопировать в новый документ сведения об ЭП?'"),
		Строка(Параметры.ДокументОснование));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросКопированияЭППродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭППродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
		УстановитьДоступностьПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Перенос срока связанного документа
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.Заголовок = НСтр("ru = 'Выбор связанного документа'") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Документ", ВыбранноеЗначение);
		ПараметрыОткрытия.Вставить("ЗаполнитьРеквизиты", Истина);
		ПараметрыОткрытия.Вставить("ДокументИсточникИзменения", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИзменятьСрокДействия", Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		ЗаполнитьСписокФайлов();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущуюСтрокуФайла(Параметр);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Свойство("ЕстьЗашифрованныеИлиЗанятыеФайлы") Тогда
					ЕстьЗашифрованныеИлиЗанятыеФайлы = Параметр.ЕстьЗашифрованныеИлиЗанятыеФайлы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				Если Параметр.Свойство("ИзменилсяПризнакОригинала") И Параметр.ИзменилсяПризнакОригинала Тогда 
					ОбновитьСтрокуФайла(Параметр.Файл, Истина);
				Иначе	
					ОбновитьСтрокуФайла(Параметр.Файл);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
				И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
				ЗаполнитьСписокВиз();
			КонецЕсли;
			
			СтатусВзаимодействие = 1;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'");
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
			   И (ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение")
			  Или ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")) Тогда
				  ВывестиКартинкуКонтроля();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаСогласованияВыполнена" Тогда
		Если Параметр.Свойство("Предмет") И Параметр.Предмет = Объект.Ссылка Тогда
			ЗаполнитьСписокВиз();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлЗашифрован" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлПодписан" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
		ОповеститьОбИзменении(Объект.Ссылка);
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда
		КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
			КонецЕсли;
			
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыРеквизитыПриИзмененииСвязи" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" Тогда
		
		Если Параметр.Документ = Объект.Ссылка Тогда
			ПрочитатьСвязи(Параметр.ТипыСвязей);
		КонецЕсли;
		
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
		
		// Установим курсор в нужную строку
		НашлиСтроку = Ложь; 
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			
			Если НашлиСтроку Тогда
				Прервать;
			КонецЕсли;
			
			ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл 
				
				Если Параметр.СвязанныйДокумент = ПодчиненнаяСтрока.СвязанныйДокумент 
					И Параметр.ТипыСвязей[0] = ПодчиненнаяСтрока.ТипСвязи Тогда
					Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
					НашлиСтроку = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЦикла;	

	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = Объект.Ссылка Тогда
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Тогда
		Если ИмяСобытия = "ДобавленЭлементКомплекта" Тогда
			Если Параметр.Свойство("ПараметрСобытия") И Параметр.ПараметрСобытия = УникальныйИдентификатор Тогда
				РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, Параметр.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
			РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	// Резолюции
	Если ИмяСобытия = "Запись_Резолюции" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	// Визы согласования
	Если ИмяСобытия = "Запись_ВизыСогласования" И Параметр = Объект.Ссылка Тогда
		ПрочитатьГруппыНаСервере();
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	Если ИмяСобытия = "НапечатанШтрихкод" И Параметр = Объект.Ссылка Тогда
		НеобходимоНапечататьШтрихкодПриСоздании = Ложь;
	КонецЕсли; 
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессПрерван" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса") 
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда 
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс") 
			   И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
				ЗаполнитьСписокВиз();			   
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
    //{{1С-Минск
	Если ИмяСобытия = "Изменен этап договора" Тогда
		Если мРаботаСДоговорами.ЯвляетсяДоговором(Объект.ВидДокумента)  Тогда
			Если Объект.Сумма <> Параметр Тогда
				//Объект.Сумма = Параметр;
				Объект.Сумма = мРаботаСДоговорами.ПолучитьСуммуДоговора(Объект.Ссылка);
				Модифицированность = Истина;
				ПолучитьОбзорДокумента();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Если Параметр.Свойство("ЭтоДело") И Параметр.ЭтоДело И Параметр.СохранятьВАрхив Тогда
			// Было отсканировано дело - сохранение в архив
			Если Параметр.Свойство("Файл") Тогда
				ПараметрыСохранения = Новый Структура("ПутьКАрхивуФайлов, РайонПоУмолчаниюДляСкановДел");
				ЗаполнитьЗначенияСвойств(ПараметрыСохранения, Параметр);
				ПараметрыСохранения.Вставить("Файл", Параметр.Файл);
				СохранитьДелоВАрхив(ПараметрыСохранения);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если ИмяСобытия = "Напечатан акт выполненных работ" Тогда
		Если Объект.Ссылка = Параметр Тогда
			Подготовлен = ПредопределенноеЗначение("Перечисление.мСостоянияАктовВыполненныхРабот.Подготовлен");
			Если ЭтаФорма["СостояниеАкта"] <> Подготовлен Тогда
				ЭтаФорма["СостояниеАкта"] = Подготовлен;
				Реквизиты = Новый Структура();
				Реквизиты.Вставить("СостояниеАкта", Подготовлен); 
				мРаботаСДоговорами.УстановитьРеквизитыАктаВыполненныхРабот(Объект.Ссылка, Реквизиты); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
    //}}1C-Минск
    
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Статьи ДДС.
	ПрочитатьСтатьиДДС(Параметры.ДокументОснование);
	
	// Срок действия
	СрокДействияПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеПриРегистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала(ПараметрыЗаписи) Экспорт

	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОСканКопииОригиналаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПеререгистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи(Результат, ПараметрыЗаписи) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		СвязанныйДокументДляНумерации = Неопределено;
		Возврат;
	КонецЕсли;
					
	Если ТипыВидыСвязанныхДокументовДляНумерации.Количество() = 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно указать связь ""%1"", так как связь данного типа не настроена для документов вида ""%2"".'"),
			ТипСвязиНумератора,
			Объект.ВидДокумента);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента",
		ЭтотОбъект,
		ПараметрыЗаписи);
	
	// Определение количества возможных типов связанного документа
	ТипСвязанногоДокументаСоставной = Ложь;
	ТипДляВыбора = ТипыВидыСвязанныхДокументовДляНумерации[0].Тип;
	Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
		Если СтрокаТипа.Тип <> ТипДляВыбора Тогда
			ТипСвязанногоДокументаСоставной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Открытие формы выбора связанного документа
	Если ТипСвязанногоДокументаСоставной Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДокументаДляСвязи", 
			Новый Структура("ТаблицаТипов", ТипыВидыСвязанныхДокументовДляНумерации),,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		// Заполнение отбора по виду документа
		МассивВидовДокументов = Новый Массив;
		Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
			
			Если ЗначениеЗаполнено(СтрокаТипа.Вид) Тогда 
				Если МассивВидовДокументов.Найти(СтрокаТипа.Вид) = Неопределено Тогда
					МассивВидовДокументов.Добавить(СтрокаТипа.Вид);
				КонецЕсли;
			Иначе
				// Настройка предусматривает любой вид документа, отбор не нужен
				МассивВидовДокументов.Очистить();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		Если МассивВидовДокументов.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДокумента", МассивВидовДокументов));
		КонецЕсли;
			
		Поз = Найти(ТипДляВыбора, ".");
		ИмяФормыВыбора = "Справочник." + Сред(ТипДляВыбора, Поз + 1) + ".ФормаВыбора";
		
		ОткрытьФорму(
			ИмяФормыВыбора, 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента(СвязанныйДокумент, ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВопросОСозданииСвязи", Истина);
	Если Объект.Ссылка.Пустая() Тогда // связь будет добавлена при записи
		СвязанныйДокументДляНумерации = СвязанныйДокумент;
	Иначе // связь нужно добавить сейчас для корректного формирования номера
		СвязиДокументов.СоздатьСвязь(
			Объект.Ссылка, 
			СвязанныйДокумент, 
			ТипСвязиНумератора);
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ПредыдущийРегНомер = Объект.РегистрационныйНомер;
		ПредыдущаяДатаРегистрации = Объект.ДатаРегистрации;
		
		// Регистрация
		Если Не ДокументЗарегистрирован() Тогда 
			Если ОграничиватьДоступностьПолейПоСостоянию И
				Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеПриРегистрации") Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ДелопроизводствоКлиент.ПредупредитьПриРегистрации(ОбработчикОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Если ОбязателенФайлОригинала Тогда 
				ОтсутствуетОригинал = Истина;
				Для Каждого Строка Из Файлы Цикл
					Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				Если ОтсутствуетОригинал Тогда 
					Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОСканКопииОригиналаДокумента") Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения(
							"ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала",
							ЭтотОбъект,
							ПараметрыЗаписи);
						ПоказатьПредупреждение(
							ОписаниеОповещения, 
							НСтр("ru = 'Для документа требуется обязательное наличие скан-копии оригинала.
								|Вы можете добавить ее в список файлов после регистрации документа.'"));
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПеререгистрации") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				ДелопроизводствоКлиент.ПредупредитьПриПеререгистрации(ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
		СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
		СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
		
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураПараметров);
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;	
		
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Нумератор) Тогда		
			
			Если Не ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера",
					ЭтотОбъект,
					ПараметрыЗаписи);
				РегистрационныйНомер = Объект.РегистрационныйНомер;
				ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
					РегистрационныйНомер, 
					НСтр("ru = 'Укажите регистрационный номер'"), 
					"", 
					30,
					ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи",
					ЭтотОбъект,
					ПараметрыЗаписи);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для регистрации документа необходимо заполнить связь ""%1"". Заполнить сейчас?'"),
						ТипСвязиНумератора);
						
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
		И ЧислоПользовательскихСвязей <= 1
		И ОбязательныеТипыСвязей.Количество() = 1 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") 	
		И ЗначениеЗаполнено(Основание) Тогда
				
		Строка = ОбязательныеТипыСвязей[0];
		
		Если ОснованиеВидДокумента = Строка.СсылкаНа
			Или ОснованиеВидДокументаРодитель = Строка.СсылкаНа Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
			НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
			НоваяСтрока.СвязанныйДокумент = Основание;
			НоваяСтрока.НужноЗаписать = Истина;
			
			ОкноВыбораТипаСвязиПоказано = Истина;
					
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") 
		И Не ТипСвязиВыбран 
		И Не ОкноВыбораТипаСвязиПоказано Тогда
		
		ТипСвязи = Неопределено;
		ТипСвязиВыбран = Истина;
		
		Если МассивТиповСвязей.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораТипаСвязи",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПараметрыФормы = Новый Структура("МассивТиповСвязей, Основание", МассивТиповСвязей, Основание);
			ОткрытьФорму(
				"Справочник.ВнутренниеДокументы.Форма.ВыборТипаСвязи",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Отказ = Истина;	
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		СколькоНеЗаполненоСвязей = 
			ОбязательныеТипыСвязей.Количество() - ОбязательныеСвязи.Количество();
			
		ОбязательныеСвязиПараметр = Новый Массив;
		Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				
				ПараметрыСвязи = Новый Структура("ТипСвязи, СсылкаНа",
					Строка.ТипСвязи, Строка.СсылкаНа);
				
				ОбязательныеСвязиПараметр.Добавить(ПараметрыСвязи);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ПараметрыОповещенияСвязей = Новый Структура("ОбязательныеСвязи, ПараметрыЗаписи", 
			ОбязательныеСвязиПараметр, ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи",
			ЭтотОбъект,
			ПараметрыОповещенияСвязей);
			
		Корреспондент = Неопределено;
		Если Объект.Корреспонденты.Количество() = 1 Тогда
			Корреспондент = Объект.Корреспонденты[0].Корреспондент;
		КонецЕсли;	
			
		ПараметрыОткрытияФормы = Новый Структура(
			"Документ, ОбязательныеСвязи, Корреспондент, Организация, Проект", 
			Объект.Ссылка, ОбязательныеСвязиПараметр,
			Корреспондент, Объект.Организация, Объект.Проект);	
			
		ИмяФормыСозданияСвязи = "";	
		Если СколькоНеЗаполненоСвязей = 1 Тогда
			
			СтрокаПараметров = ОбязательныеСвязиПараметр[0];
			Если ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВнутренниеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВнутренниеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ИсходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ИсходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Файлы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Мероприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Проекты.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ВходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ИсходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			КонецЕсли;	
			
		Иначе	
			ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.СозданиеОбязательныхСвязей";
		КонецЕсли;	
			
		ОткрытьФорму(ИмяФормыСозданияСвязи, 
			ПараметрыОткрытияФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Отказ = Истина;
		Возврат;
			
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
		
	ОчиститьСообщения();
		
	// Оценка производительности
	Если Не Отказ Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ВнутренниеДокументыВыполнениеКомандыЗаписать");
	КонецЕсли;
	
//1С-Минск +
	Если Объект.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот") Тогда
		ПараметрыЗаписи.Вставить("СуммаНДС", ЭтаФорма.СуммаНДС);
		ПараметрыЗаписи.Вставить("Сумма", Объект.Сумма);
		ПараметрыЗаписи.Вставить("СтавкаНДС", ЭтаФорма.СтавкаНДС);
		ПараметрыЗаписи.Вставить("ОсвобождениеОтНДС", ЭтаФорма.ОсвобождениеОтНДС);
		ПараметрыЗаписи.Вставить("СостояниеАкта", ЭтаФорма.СостояниеАкта);
		ПараметрыЗаписи.Вставить("ВрученЗаказчику", ЭтаФорма.ВрученЗаказчику);
		ПараметрыЗаписи.Вставить("Возвращен", ЭтаФорма.Возвращен);
		ПараметрыЗаписи.Вставить("ВидАкта", ЭтаФорма.ВидАкта);
		Если Не ЗначениеЗаполнено(ЭтаФорма.РезультатПроверки) Тогда
			ПараметрыЗаписи.Вставить("РезультатПроверки", ПредопределенноеЗначение("Справочник.мЗамечанияПроверкиАктов.НеПроверен"));
		Иначе
			ПараметрыЗаписи.Вставить("РезультатПроверки", ЭтаФорма.РезультатПроверки);
		КонецЕсли; 
	КонецЕсли; 
	
	// Проверка прав на создание Дела
	ВидДокументаДело =  ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.Дело");
	Если Объект.ВидДокумента = ВидДокументаДело Тогда
		Если НЕ ПараметрыЗаписи.Свойство("Регистрация") И ПараметрыЗаписи.ЭтоНовыйОбъект Тогда
			ОписаниеОшибки = "";
			Если Не мРаботаСДоговорами.РазрешеноСоздатьДело(Объект.ЭтапДоговора, ТекущийПользователь, ОписаниеОшибки) Тогда
				Сообщить(ОписаниеОшибки);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	// Проверка прав на создание акта выполненных работ
	Если Объект.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот") Тогда
		Если НЕ ПараметрыЗаписи.Свойство("Регистрация") И ПараметрыЗаписи.ЭтоНовыйОбъект Тогда
			ОписаниеОшибки = "";
			Если Не мРаботаСДоговорами.РазрешеноСоздатьАктВыполненныхРабот(Объект.ЭтапДоговора, ТекущийПользователь, ОписаниеОшибки) Тогда
				Сообщить(ОписаниеОшибки);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	// Передача для записи СостояниеДоговора
	Если ПолучитьРодителяВидаДокумента(Объект.ВидДокумента) = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот") Тогда
		ЭтоДоговор = Истина;
	Иначе
		ЭтоДоговор = Ложь;
	КонецЕсли; 

	Если ЭтоДоговор	ИЛИ мРаботаСДоговорами.ЭтоДопСоглашение(Объект.Ссылка) Тогда
			Если Элементы.Найти("СостояниеДоговора") <> Неопределено Тогда
				ПараметрыЗаписи.Вставить("СостояниеДоговора", ЭтаФорма.СостояниеДоговора);
			КонецЕсли; 
	КонецЕсли; 
		
	Если ЭтоДоговор Тогда
		Если Элементы.Найти("НашРасчетныйСчет") <> Неопределено Тогда
			ПараметрыЗаписи.Вставить("НашРасчетныйСчет", ЭтаФорма.НашРасчетныйСчет);
		КонецЕсли; 
	КонецЕсли; 
//1С-Минск - 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРодителяВидаДокумента(ВидДок)
	Возврат ВидДок.Родитель;	
КонецФункции

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораТипаСвязи(ТипСвязи, ПараметрыЗаписи) Экспорт
	
	ОкноВыбораТипаСвязиПоказано = Истина;
	
	Если ТипЗнч(ТипСвязи) = Тип("СправочникСсылка.ТипыСвязей")
		И ЗначениеЗаполнено(ТипСвязи) Тогда
		
		ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента = ТипСвязи;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипСвязи", ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
		
		СтрокиСвязи = ОбязательныеСвязи.НайтиСтроки(Отбор);
		СтрокиТипыСвязи = ОбязательныеТипыСвязей.НайтиСтроки(Отбор);
		
		Если СтрокиСвязи.Количество() = 0 И СтрокиТипыСвязи.Количество() <> 0 Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента;
			НоваяСтрока.СвязанныйДокумент = Основание;
			НоваяСтрока.НужноЗаписать = Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ВыбранныеОбязательныеСвязи = Результат; // массив
		
		Для Каждого Строка Из ВыбранныеОбязательныеСвязи Цикл
		
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			Отбор.Вставить("СсылкаНа", Строка.СсылкаНа);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				Строки[0].СвязанныйДокумент = Строка.СвязанныйДокумент;
			ИначеЕсли Строки.Количество() = 0 Тогда
				
				НоваяСтрока = ОбязательныеСвязи.Добавить();
				НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
				НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
				НоваяСтрока.СвязанныйДокумент = Строка.СвязанныйДокумент;
				НоваяСтрока.НужноЗаписать = Истина;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		Записать(Параметры.ПараметрыЗаписи);
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКорреспондентам", Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда 
		Если НесколькоКонтрагентов Тогда 
			Если Объект.Корреспонденты.Количество() = 0 Тогда 
				ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Корреспонденты""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Корреспонденты",,Отказ);
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(Объект.Корреспондент) Тогда 
				ТекстСообщения = НСтр("ru = 'Поле ""Корреспондент"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Корреспондент",,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
		
		Если ИспользоватьЭтапыОбработкиДокумента Тогда 
			Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
				Если Строка.Пройден И Не ЗначениеЗаполнено(Строка.ДатаПрохождения) Тогда 
					НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для пройденного этапа ""%1"" не указана дата прохождения'"), Строка.Этап);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
						"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ДатаПрохождения",, Отказ);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, 
			"ВестиУчетПоСтатьямДДС");
		Если ВестиУчетПоСтатьямДДС 
			И Не НеПроверятьЗаполнениеСтатейДДС Тогда
			Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не выбрана статья движения денежных средств'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, 
					"ПредставлениеСтатейДДС",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;	
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
		
	КонецЕсли;		
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработка рабочей группы
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Срок действия
	СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.Проект, 
				ПользователиКлиентСервер.ТекущийПользователь(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;	
	КонецЕсли;
	
	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		//1С-Минск +
		//ЗарегистрироватьНаСервере(
		//ТекущийОбъект, 
		//СообщениеОбОшибке, 
		//РегистрационныйНомер);
		
		Если Объект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
			Если Не ЗначениеЗаполнено(РегистрационныйНомерДела) Тогда
				РегистрационныйНомерДела = РегистрационныйНомер;
			Конецесли;	
			ЗарегистрироватьНаСервере(
			ТекущийОбъект, 
			СообщениеОбОшибке, 
			РегистрационныйНомерДела);
		Иначе
			ЗарегистрироватьНаСервере(
			ТекущийОбъект, 
			СообщениеОбОшибке, 
			РегистрационныйНомер);
		КонецЕсли; 	
		//1С-Минск -
		
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;	
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
//1С-Минск+
	Если Объект.Ссылка.мДатаНачалаДействияДокумента <> ТекущийОбъект.мДатаНачалаДействияДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("мДатаНачалаДействияДокумента", ТекущийОбъект.мДатаНачалаДействияДокумента);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("СуммаНДС") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаНДС", ПараметрыЗаписи.СуммаНДС);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("СтавкаНДС") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтавкаНДС", ПараметрыЗаписи.СтавкаНДС);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("ОсвобождениеОтНДС") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсвобождениеОтНДС", ПараметрыЗаписи.ОсвобождениеОтНДС);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("СостояниеАкта") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СостояниеАкта", ПараметрыЗаписи.СостояниеАкта);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("ВрученЗаказчику") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВрученЗаказчику", ПараметрыЗаписи.ВрученЗаказчику);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("Возвращен") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Возвращен", ПараметрыЗаписи.Возвращен);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("ВидАкта") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ВидАкта", ПараметрыЗаписи.ВидАкта);
	КонецЕсли; 
	Если ПараметрыЗаписи.Свойство("РезультатПроверки") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РезультатПроверки", ПараметрыЗаписи.РезультатПроверки);
	КонецЕсли; 
	
//1С-Минск-
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;

	// Установка связей
    //{{1С-Минск
    //СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);
    
    Если ЗначениеЗаполнено(Основание) Тогда
        Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") И
            Найти(Основание.ВидДокумента.Наименование, "Поручение") > 0  Тогда
            СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйПерепискаПоПредмету, Основание, Справочники.ТипыСвязей.НаОснованииПоручения);
        Иначе
            СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);
        КонецЕсли; 
    Иначе
        СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("СостояниеДоговора") Тогда
		мРаботаСДоговорами.УстановитьСостояниеДоговора(ТекущийОбъект.Ссылка, ПараметрыЗаписи.СостояниеДоговора);
	КонецЕсли; 
	
	Если ПараметрыЗаписи.Свойство("НашРасчетныйСчет") Тогда
		мРаботаСДоговорами.УстановитьНашРасчетныйСчет(ТекущийОбъект.Ссылка, ПараметрыЗаписи.НашРасчетныйСчет);
	КонецЕсли; 
    //}}1C-Минск
	
	Если СоздатьСвязьДляНумерации и ЗначениеЗаполнено(СвязанныйДокументДляНумерации) Тогда
		СвязиДокументов.СоздатьСвязь(
			ТекущийОбъект.Ссылка, 
			СвязанныйДокументДляНумерации, 
			ТипСвязиНумератора);
			
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьНедействующиеДокументы", Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда  
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйНеДействуетВСоответствии, НеДействуетВСоответствии, Справочники.ТипыСвязей.НеДействуетВСоответствии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента) Тогда
		СвязиДокументов.СоздатьСвязь(ТекущийОбъект.Ссылка, Основание, 
			ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
	КонецЕсли;		
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		Если Строка.НужноЗаписать Тогда
			СвязиДокументов.СоздатьСвязь(
				ТекущийОбъект.Ссылка, 
				Строка.СвязанныйДокумент, 
				Строка.ТипСвязи);
			Строка.НужноЗаписать = Ложь;
		КонецЕсли;	
	КонецЦикла;

    // Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
			
			УстановленоСостояниеСогласован = Ложь;
			Для Каждого СтруктураСостояния Из ПараметрыЗаписи.МассивСостояний Цикл
				Если СтруктураСостояния.Состояние = Перечисления.СостоянияДокументов.Согласован 
					И СтруктураСостояния.Состояние <> СтруктураСостояния.НачальноеСостояние Тогда 
					УстановленоСостояниеСогласован = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если УстановленоСостояниеСогласован Тогда 
				
				ЕстьНеСогласованные = РаботаСВизамиСогласования.ЕстьВизыНеСогласованные(ТекущийОбъект.Ссылка);
				Если ЕстьНеСогласованные Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с отрицательным результатом согласования'"),, 
					"Состояние",, Отказ);
				КонецЕсли;	
				
				ЕстьНаСогласовании = РаботаСВизамиСогласования.ЕстьВизыНаСогласовании(ТекущийОбъект.Ссылка);
				Если ЕстьНаСогласовании Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с незаполненным результатом согласования'"),,
					"Состояние",, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда 
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
			
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	ЗаполнитьСвязи();
    
    // Этапы обработки документов
	Делопроизводство.ЗаписатьЭтапы(ЭтаФорма, ТекущийОбъект.Ссылка);
	// Статьи ДДС.
	РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ЗаписатьСтатьиДокумента(
		ТекущийОбъект.Ссылка, СтатьиДвиженияДенежныхСредств);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		НеобходимоОповещениеОЗаписиНового = Истина;
		
		Если ЗначениеЗаполнено(ПараметрыОповещения) 
			И ПараметрыОповещения.ИмяСобытия = "СозданВнутреннийДокументНаОснованииПисьма" Тогда
			ПисьмоСсылка = ПараметрыОповещения.ПараметрСобытия;
			ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
			ПисьмоОбъект.Предмет = Объект.Ссылка;
			ПисьмоОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// Автозаполнение файлов
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл
			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
            КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(
				ВладелецФайла,
				Источник.Описание,
				Источник.ПолноеНаименование,
				ХранитьВерсииНовыйФайл,
				"");
				
			Если ЗначениеЗаполнено(ФайлТаблицы.ШаблонОснованиеДляСоздания)
					И ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
				РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);//СозданПоШаблону
			КонецЕсли;	
				
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(
					ТекущаяДата(),
					РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ТекущаяДата()),
					Приемник,
					Приемник.Наименование,
					Источник.ТекущаяВерсия.Размер,
					Источник.ТекущаяВерсия.Расширение,
					ХранилищеФайла,
					Источник.ТекущаяВерсия.ТекстХранилище,
					Истина,
					Источник.ТекущаяВерсия);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания();
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);
				КонецЕсли;
				
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <> 0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					Если ФайлОбъект.ПодписанЭП Тогда
						ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					КонецЕсли;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					Для Каждого Строка Из Источник.СертификатыШифрования Цикл
						НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
				КонецЕсли;
				
				// Автозаполнение файлов
				Если Источник <> Неопределено Тогда
					
					НастройкиАвтозаполнения = ПолучитьНастройкиАвтозаполненийШаблона(Приемник, Приемник.ШаблонОснованиеДляСоздания, Приемник.ВладелецФайла);
					Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов") Тогда
						Если Не ИзменениеФайловMSWordНаСервере
							И Приемник.ТекущаяВерсияРасширение = "doc"
							И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
							И Не ЭтоВебКлиент Тогда
							НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
							НоваяСтрока.Файл = Приемник;
							НоваяСтрока.Автозаполнение = Истина;
							НоваяСтрока.Штрихкодирование = Ложь;
							НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
						Иначе
							РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(Ложь, Приемник, Истина);
						КонецЕсли;
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
						ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);
						
						Если (ИзменениеФайловMSWordНаСервере И Приемник.ТекущаяВерсияРасширение = "doc")
							ИЛИ  Приемник.ТекущаяВерсияРасширение <> "doc" Тогда
							Если ДанныеОШтрихкоде <> Неопределено
								И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
								Попытка 
									ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(Приемник.Ссылка,
										НСтр("ru = 'ВставитьИзображениеШтрихкода'"), 
										Ложь, 
										ДанныеОШтрихкоде.ДвоичныеДанныеИзображения, 
										ДанныеОШтрихкоде.ДвоичныеДанныеФайла,
										ДанныеОШтрихкоде.Расширение,
										ДанныеОШтрихкоде.ФайлРедактируется,
										ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
										ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
								Исключение
								КонецПопытки;		
							КонецЕсли;
                        КонецЕсли;
						
						Если Не ИзменениеФайловMSWordНаСервере
							И Приемник.ТекущаяВерсияРасширение = "doc"
							И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
							И Не ЭтоВебКлиент Тогда
							ПараметрыОтбора = Новый Структура("Файл", Приемник);
							НайденныеСтроки = ДанныеДляЗаполненияФайловНаКлиенте.НайтиСтроки(ПараметрыОтбора);
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								НайденныеСтроки[0].Штрихкодирование = Истина;
								НайденныеСтроки[0].НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);
							Иначе
								НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
								НоваяСтрока.Файл = Приемник;
								НоваяСтрока.Автозаполнение = Ложь;
								НоваяСтрока.Штрихкодирование = Истина;
								НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
								НоваяСтрока.НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Источник = ТекущийФайлВСпискеДобавленных Тогда
					ТекущийФайлВСпискеДобавленных = Приемник;
				КонецЕсли;
				
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Файлы
	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;	
	
	// ЭП
	Если КопироватьПодписиЭП Тогда
		Источник = Параметры.ДокументОснование;
		Приемник = Объект.Ссылка;
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Истина;
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
		
		ДокументОбъект.Записать();
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();

	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	// Заполнение по шаблону
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	// Работа с визами
	РаботаСВизамиСогласования.ПослеЗаписиДокументаНаСервере(ЭтаФорма);
	ЗаполнитьСписокВиз();
	
	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	// Срок действия
	СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Или НачальныеЗначенияРеквизитов[0].ЯвляетсяКомплектом Тогда
		РаботаСКомплектамиДокументовСервер.СохранитьСоставКомплекта(ЭтаФорма);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	Если ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияВнутреннихДокументов", ТекущийОбъект.Ссылка) Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Ложь;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Т.к. запись прошла, заполним новые начальные значения реквизитов. Выполнять в самом конце транзакции.
	ЗапомнитьЗначенияРеквизитов();
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ЗаполнитьСвязи();
	ПолучитьОбзорДокумента();
	ПолучитьИнструкции();
	
    //1С-Минск
    М_УправлениеФормамиДОРБСервер.ПослеЗаписиНаСервере(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
    //Конец 1С-Минск
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьУдаленныеВизы"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
		Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = Настройки["ПоказыватьУдаленныеВизы"];
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокФайлов(Истина);
		КонецЕсли;
		
		Если ИспользоватьОбзорДокументов И Не Объект.Ссылка.Пустая() Тогда		
			Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		Иначе
			Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];		
		КонецЕсли;
	
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеРезолюции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах") Тогда
		Элементы.ПоказыватьУдаленныеРезолюции.Пометка = ПоказыватьУдаленныеРезолюции;			
		ЗаполнитьСписокРезолюций();
	КонецЕсли;
	
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;
	
	Если Настройки["ПоказыватьТолькоОригиналыВСвязях"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		ЗаполнитьСвязи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Штрихкодирование
	Если ИспользоватьШК И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'"),
			Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтаФорма);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаПроцесса <> Истина Тогда
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаЗакрытиеКарточки, 
			Объект.Ссылка, 
			"ЗакрытиеКарточки",
			ЭтаФорма,
			Отказ,
			Истина);
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ОтветПользователя, параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПоказанВопросОВставкеШтрихкода = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
		РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
			,,,,,, Объект.Ссылка);

	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "period") > 0 Тогда 
		
		ИзменитьСрокДействияДокумента();
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "status") > 0  Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДляПросмотра", ЗапретитьРучноеИзменениеСостоянияДокументов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьСтатус",
			ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "dossier") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Дело);
		ОткрытьФорму("Справочник.ДелаХраненияДокументов.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "holder") > 0 Тогда 	
		
		ДелопроизводствоКлиент.ОткрытьКарточкуПередачиДокумента(Объект.Ссылка, ЭтаФорма);
		
//1С-Минск
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "Карточка") > 0 Тогда 	
        
        КодКарточки = Сред(НавигационнаяСсылкаПоля, 9);
        
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КодКарточки", КодКарточки);
		
		ОткрытьФорму("Справочник.мКарточкиОбъектовРабот.Форма.ФормаДляПросмотра", ПараметрыФормы, ЭтаФорма);
        
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "Смета") > 0 Тогда 	
        
        КодСметы = Сред(НавигационнаяСсылкаПоля, 6);
        
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КодСметы", КодСметы);
		
		ОткрытьФорму("Справочник.мСметы.Форма.ФормаДляПросмотра", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "ВвестиДату") > 0 Тогда 	
		
		КодЭтапа = Сред(НавигационнаяСсылкаПоля, 11);
		ВвестиДатуВозвратаАкта("", КодЭтапа);

//Конец 1С-Минск 		
	Иначе	
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
		И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
		И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораСтатейДДС(Текст)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыВыбора.Вставить("СпособПоискаСтроки", СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеСтатейДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Строка = СтатьиДвиженияДенежныхСредств.Добавить();
	Строка.СтатьяДвиженияДенежныхСредств = ВыбранноеЗначение;
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтатьиДвиженияДенежныхСредств.Очистить();
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДС()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтатьиДДСЗавершение", ЭтаФорма);
	МассивСтатей = Новый Массив;
	Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
		МассивСтатей.Добавить(Строка.СтатьяДвиженияДенежныхСредств);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтатьиДвиженияДенежныхСредств", МассивСтатей);
	ОткрыватьНаПросмотр = (Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр Или ТолькоПросмотр);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрыватьНаПросмотр);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.СтатьиДвиженияДенежныхСредств", ПараметрыФормы, 
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДСЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Для каждого Статья из Результат Цикл
		Строка = СтатьиДвиженияДенежныхСредств.Добавить();
		Строка.СтатьяДвиженияДенежныхСредств = Статья;
	КонецЦикла;
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИзменитьСрокДействияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (КонецДня(Объект.СрокИсполнения) < Объект.ДатаРегистрации) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения меньше даты регистрации документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
	КонецЕсли;	
	
	СрокИсполненияДней = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "СрокИсполнения");
	Если ЗначениеЗаполнено(СрокИсполненияДней) И ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
		Если Объект.СрокИсполнения > Объект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения превышает нормативный срок для данного вида документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	
	ОбновитьПолныйПуть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененПриИзменении(Элемент)
	
	Если Объект.НеДействует Тогда 
		Элементы.НеДействуетВСоответствии.Доступность = Истина;
		//1С-Минск +
		Элементы.мДокументыВозвращеныЗаказчику.Доступность = Истина;
		//1С-Минск -
	Иначе	
		НеДействуетВСоответствии = Неопределено;
		Элементы.НеДействуетВСоответствии.Доступность = Ложь;
		//1С-Минск +                                                         
		Элементы.мДокументыВозвращеныЗаказчику.Доступность = Ложь;
		Объект.мДокументыВозвращеныЗаказчику = Дата(1,1,1);
		//1С-Минск -
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененДокументомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("НеДействует", Ложь));
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
//1С-Минск
    Если ТекущаяСтраница = Элементы.ГруппаОсновная Тогда
    	УправлениеВидимостьюДобавленныхРеквизитов();
    ИначеЕсли ТекущаяСтраница = Элементы.Обзор Тогда
		ПолучитьОбзорДокумента();
    КонецЕсли; 
//Конец 1С-Минск

КонецПроцедуры
 
&НаКлиенте
Процедура ДекорацияВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.БизнесПроцессыИЗадачиПоПредмету",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;

КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Корреспондент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Корреспондент""'"),,
			"Объект.Корреспонденты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Корреспондент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПодписалОтКорреспондентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Корреспондент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Корреспондент""'"),,
			"Объект.Корреспонденты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Корреспондент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатус(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		ИзменитьСостояние(Объект.Ссылка, Результат);
		ОповеститьОбИзменении(Объект.Ссылка);			
	КонецЕсли;	

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Изменение полей, влияющих на номер

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииДатыРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если БыстрыйВыборВидаДокумента Тогда 
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора("");
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ВидДокумента);
		
		ОткрытьФорму("Справочник.ВидыВнутреннихДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора(Текст);
	КонецЕсли;	
	
КонецПроцедуры

// Готовит данные выбора для поля ВидДокумента
&НаСервереБезКонтекста
Функция ВидДокументаПолучитьДанныеВыбора(Текст)
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	
	Отбор = Новый Структура("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	
	ДанныеВыбора = Справочники.ВидыВнутреннихДокументов.ПолучитьДанныеВыбора(ПараметрыВыбора);	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция МожноПреобразоватькЧислу(Нумератор)
	// Если начинается с номера или с номера связанного документа
	Возврат Лев(Нумератор.ФорматНомера, 6) = "[Номер";
КонецФункции 

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	Если ЗначениеЗаполнено(Нумератор) Тогда // ручное изменение номера
//1С-Минск +
		Если МожноПреобразоватькЧислу(Нумератор) Тогда
	        // Если начинается с номера или с номера связанного документа
			Объект.ЧисловойНомер = СформироватьЧисловойНомерПоРегистрационному(Объект.РегистрационныйНомер);
		Иначе
			Объект.ЧисловойНомер = -1;
		КонецЕсли; 
		РегистрационныйНомерДела = Объект.РегистрационныйНомер;
		
		//Объект.ЧисловойНомер = -1; 
//1С-Минск - 	
	КонецЕсли;	
//1С-Минск +
	СформироватьЗаголовокДелаУслуги();
//1С-Минск - 	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
	УстановитьНашРасчетныйСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Выбор пользователей, корреспондента и контактного лица

&НаКлиенте
Процедура УтвердилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Неопределено;
	Объект.Утвердил = РаботаСПользователямиКлиент.ПолучитьПодписанта(Объект.Организация, Объект.ВидДокумента);
КонецПроцедуры

&НаКлиенте
Процедура УтвердилОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МассивПодписантов = мРаботаСДоговорами.ПолучитьИмеющихПравоПодписи(Объект.Организация, Объект.ВидДокумента);
	Если МассивПодписантов.Найти(ВыбранноеЗначение) = Неопределено Тогда
		ВыбранноеЗначение = Неопределено;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Корреспондент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Корреспондент""'"),,,
			"Объект.Корреспондент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКорреспондентаПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКорреспондентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Корреспондент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Корреспондент""'"),,,
			"Объект.Корреспондент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подготовил) Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Подготовил);
		//1С-Минск+
		// Если это договор на основании Поручения, то Подразделение из поручения
		Если ЗначениеЗаполнено(Основание) Тогда
			ЗаполнитьПодразделениеИзПоручения();
		КонецЕсли; 
		//1С-Минск-
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Подготовил);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Адресат);
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с составом документа

&НаКлиенте
Процедура СоставСтрокаПриИзменении(Элемент)
	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СоставСтрока, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
    НачальныйСостав = СоставСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПоиска = НРег(Элемент.ТекстРедактирования);	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СтрокаПоиска, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
	
	// На случай возврата ошибки останавливаем вызов
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоЛистов", Объект.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Объект.КоличествоПриложений);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Объект.КоличествоЭкземпляров);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Объект.ЛистовВПриложениях);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставСтрокаНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.СоставДокумента", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество() > 0 Тогда 
		Объект.КоличествоЛистов = Результат.КоличествоЛистов;
		Объект.КоличествоПриложений = Результат.КоличествоПриложений;
		Объект.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
		Объект.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
		
        ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиент.ПолучитьСтрокуСоставДокумента(Объект);
    НачальныйСостав = СоставСтрока;
		
КонецПроцедуры	

&НаКлиенте
Процедура СоставСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КоличествоЛистов = 0;
	Объект.КоличествоПриложений = 0;
	Объект.КоличествоЭкземпляров = 0;
	Объект.ЛистовВПриложениях = 0;
    НачальныйСостав = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с делом документа

&НаКлиенте
Процедура ДелоТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДелоТекст) Тогда 
		Объект.Дело = Неопределено;
		ХранениеТекст = Неопределено;
	    ДелоТекст = Неопределено;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДелоТекстНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	Если Не ЗначениеЗаполнено(Объект.Дело) 
		И Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина) > 0 Тогда 
		
		ТекстВопроса = 
			НСтр("ru = 'По документу имеются невыполненные задачи.'") 
			+ Символы.ПС 
			+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРегистрации", 		Объект.ДатаРегистрации);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
		ПараметрыФормы.Вставить("Корреспондент", 		Объект.Корреспондент);
		ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
		ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.Дело);
		ПараметрыФормы.Вставить("НоменклатураДел", 		Объект.НоменклатураДел);
		ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);

		ДелопроизводствоКлиент.ВыбратьДело(Параметры.Элемент, ПараметрыФормы);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Дело = Неопределено;
	ХранениеТекст = Неопределено;
    ДелоТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДелоТекст) Тогда
		ПоказатьЗначение(, Объект.Дело);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Дело = ВыбранноеЗначение;
				
		Если ЗначениеЗаполнено(Дело) Тогда	
			
			Если Не ЗначениеЗаполнено(Объект.Дело) Тогда 
				КоличествоЗадач = Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина);
				Если КоличествоЗадач > 0 Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("Дело", Дело);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ДелоТекстОбработкаВыбораПродолжение",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = 
						НСтр("ru = 'По документу имеются невыполненные задачи.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Дело, "НоменклатураДел, МестоХранения"); 
			ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
				+ " " + СокрЛП(Дело);

			ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
					РеквизитыДела.МестоХранения), "")
				+ Делопроизводство.ПолучитьСостояниеДела(Дело);
		Иначе
			ХранениеТекст = Неопределено;
			ДелоТекст = Неопределено;
		КонецЕсли;	

		Объект.Дело = Дело;
        Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ХранениеТекст = Неопределено;
		ДелоТекст = Неопределено;
		Возврат;
	КонецЕсли;
	
	Дело = Параметры.Дело;
	РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Дело, "НоменклатураДел, МестоХранения"); 
	ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
		+ " " + СокрЛП(Дело);

	ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
			РеквизитыДела.МестоХранения), "")
		+ Делопроизводство.ПолучитьСостояниеДела(Дело);	
		
	Объект.Дело = Дело;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Корреспонденты = Новый Массив;
	Для Каждого Строка Из Объект.Корреспонденты Цикл
		Корреспонденты.Добавить(Строка.Корреспондент);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Корреспондент", 		Корреспонденты);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
//1С-Минск
    //ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
//1С-Минск	
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с состоянием документа

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СостояниеТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			ПараметрыЗаписи = Новый Структура("МассивСостояний", Результат);
			Если Не Записать(ПараметрыЗаписи) Тогда 
				Возврат;
			КонецЕсли;	
		Иначе
			ИзменитьСостояние(Объект.Ссылка, Результат);
			ОповеститьОбИзменении(Объект.Ссылка);			
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДляПросмотра", Истина);
	
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;				
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПараметрыФормы = Новый Структура("ВнешнийРесурс", ТекущиеДанные.СвязаннаяСтрока);
		ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурса", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда 	
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Истина;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		
		НеПродолжатьСозданиеСвязи = Ложь;
		Если ОбязательныеТипыСвязей.Количество() <> 0 И
			ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
			НеПродолжатьСозданиеСвязи = Истина;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		Если НеПродолжатьСозданиеСвязи Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
	КонецЕсли;	
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе 
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму("Справочник.ТипыСвязей.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.ДеревоСвязей);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	Иначе	
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", Элементы.ДеревоСвязей.ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", Элементы.ДеревоСвязей.ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель
	 Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить запись?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", Объект.Ссылка);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);	
		
		УдалитьСвязь(ПараметрыУдаления);
		
		ЗаполнитьСвязи();	
		
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Элементы.ДеревоСвязей.Развернуть(Строка.ПолучитьИдентификатор(), Истина)
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйДокумент = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйДокумент)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(Объект.Ссылка, СвязанныйДокумент) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("СвязанныйДокумент", СвязанныйДокумент);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 			
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с инструкциями

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	
	КоличествоФайлов = Файлы.Количество();
	Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(Строка.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСозданиеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.ФайлыСоздание.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = Ложь;
	Если ВестиУчетСканКопийОригиналовДокументов Тогда
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда 
			
			Если Не ПараметрыДобавления.Свойство("ДобавлениеОригинала") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
					СостояниеТекст);
				
				СписокВариантовОтветов = Новый СписокЗначений;
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
				
				ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
				
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Элемент", Элемент);
				ПараметрыОбработчика.Вставить("Отказ", Отказ);
				ПараметрыОбработчика.Вставить("Копирование", Копирование);
				ПараметрыОбработчика.Вставить("Родитель", Родитель);
				ПараметрыОбработчика.Вставить("Группа", Группа);
				ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ФайлыПередНачаломДобавленияКлиентПродолжение",
					ЭтотОбъект,
					ПараметрыОбработчика);
				
				ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
					НСтр("ru = 'Добавление файла'"),
					Текст,
					"ДобавлениеОригинала",
					"ЗадаватьВопросПриДобавленииСканКопииОригинала",
					СписокВариантовОтветов,,
					ОписаниеОповещения);
				Возврат;
			Иначе
				ДобавлениеОригинала = ПараметрыДобавления.ДобавлениеОригинала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если Элементы.Файлы.ТекущийЭлемент = Элементы.Оригинал Тогда 
			Возврат;
		КонецЕсли;	
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		Если Элементы.ФайлыСоздание.ТекущийЭлемент = Элементы.ОригиналСоздание Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.СозданПоШаблонуДокумента);
		Если Не РазрешеноУдаление Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.СозданИзШаблона Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОригиналПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));	
				
	Если ТекущиеДанные.Оригинал Тогда 
		Если Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ТекущиеДанные.Расширение) Тогда 
			ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
			|Вы действительно хотите отметить его как оригинал?'");
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Отметка оригинала'"));
		КонецЕсли;	
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
			Если ТекущиеДанные.Оригинал И Не ТекущиеДанные.ПометкаУдаления Тогда 
				УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
			Иначе
				Если Не Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ОтсутствуетОригинал = Истина;
					Для Каждого Строка Из Файлы Цикл
						Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
							ОтсутствуетОригинал = Ложь;
						КонецЕсли;	
					КонецЦикла;	
					Если ОтсутствуетОригинал Тогда 
						УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
			
		Если ДанныеФайла.РедактируетТекущийПользователь = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для просмотра файла запишите документ.'"));	
		Иначе	
			КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		КонецЕсли;
		
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.ДобавленИзШаблона);
		Если Не РазрешеноУдаление Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги											
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);										
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВизыСогласованияТаблица

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.ВизыСогласованияТаблица.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекущийПользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().АвторизованныйПользователь;
	ЭтоПолноправныйПользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСФайлами. ЭтоПолноправныйПользователь;
	
	ЗаполненныеВизы = Новый Массив;
	НезаполненныеВизы = Новый Массив;
	
	ТекстОшибки = "";
	Если Не ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки) Тогда 
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	ПерезаполнитьВизы = Ложь;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЗаполненныеВизы", ЗаполненныеВизы);
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", ПерезаполнитьВизы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияТаблицаПередУдалениемПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если ЗаполненныеВизы.Количество() > 0 Тогда 
		Если ЗаполненныеВизы.Количество() = 1 Тогда 
			ТекстВопроса = НСтр("ru = 'Виза с заполненным результатом будет помещена в историю согласования.'");
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с заполненным результатом будут помещены в историю согласования.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;

	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.ПоместитьВизыВИсторию(Параметры.ЗаполненныеВизы, ТекущийПользователь);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", ПерезаполнитьВизы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если НезаполненныеВизы.Количество() > 0 Тогда 
		Если НезаполненныеВизы.Количество() = 1 Тогда
			ДанныеВизы = ВизыСогласованияТаблица.НайтиСтроки(Новый Структура("Ссылка", НезаполненныеВизы[0]))[0]; 
			Если ДанныеВизы.ПометкаУдаления Тогда
				ТекстВопроса = НСтр("ru = 'Удаленная виза будет восстановлена.'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Виза с незаполненным результатом согласования будет удалена.'");
			КонецЕсли;
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с незаполненным результатом согласования будут удалены.
				|Удаленнные визы будут восстановлены.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");	
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;
	
	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.УдалитьВизы(НезаполненныеВизы);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	

	Если ПерезаполнитьВизы Тогда
		ЗаполнитьСписокВиз();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	РаботаСВизамиСогласованияКлиент.ДобавитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСВизамиСогласованияКлиент.ИзменитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеВизы(Команда)
	
	ПоказыватьУдаленныеВизы = Не ПоказыватьУдаленныеВизы;
	Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = ПоказыватьУдаленныеВизы;
	
	ЗаполнитьСписокВиз();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезолюции

&НаКлиенте
Процедура РезолюцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	РаботаСРезолюциямиКлиент.ДобавитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСРезолюциямиКлиент.ИзменитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалениеРезолюцииПродолжение",
		ЭтотОбъект);
	РаботаСРезолюциямиКлиент.УдалитьРезолюцию(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеРезолюцииПродолжение(Результат, Параметры) Экспорт
	
	ЗаполнитьСписокРезолюций();
	// Обновление заголовка страницы резолюций и виз
	Результат = СформироватьЗаголовокРезолюцийИВиз(КоличествоРезолюций, КоличествоВиз,
		ИспользоватьРезолюцииВДокументах, ИспользоватьВизыСогласования);
	Если Результат = "Отказ" Тогда
		Элементы.ГруппаРезолюцииИВизы.Видимость = Ложь;	
	Иначе	
		Элементы.ГруппаРезолюцииИВизы.Заголовок = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезолюцияСтатусПроверкиЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСРезолюциямиКлиент.ПриНажатииСтатусПроверкиЭП(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставКомплекта 

&НаКлиенте
Процедура СоставКомплектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаВыбор(ЭтаФорма, Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПриАктивизацииСтроки(Элемент)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПриАктивизацииСтроки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПередНачаломДобавления(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент = Элементы.СоставКомплектаКомментарий
		И Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередУдалением(Элемент, Отказ)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Объект = Неопределено
		ИЛИ ТекущиеДанные.Объект.Пустая() Тогда
		
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПройденПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ТекущиеДанные.ДатаПрохождения = ТекущаяДата();
		ТекущиеДанные.Установил = ТекущийПользователь;
	Иначе
		ТекущиеДанные.ДатаПрохождения = '00010101';
		ТекущиеДанные.Установил = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияЭтапаЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуЗаполненияДокументаПоШаблону(
		ОписаниеОповещения,
		"ШаблоныВнутреннихДокументов", 
		Объект.Папка);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) <> Тип("Строка") Тогда
		ЗаполнитьПоШаблонуВыполнить(Результат.ШаблонДокумента);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено доступных шаблонов внутренних документов.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияСвязанногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор связанного документа'"));
	ПараметрыОткрытия.Вставить("СвязанныйДокумент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьИерархию", Ложь);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, "ПодборСвязанногоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ЧисловойНомер = 0;
	ДатаРегистрации = Дата(1,1,1);
	РегистрационныйНомер = "";
	
	Попытка
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Регистрация", Истина);
		Если мРаботаСДоговорами.ЯвляетсяДоговором(Объект.ВидДокумента) Тогда
			ПараметрыЗаписи.Вставить("СостояниеДоговора", ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Проект"));
		КонецЕсли; 
		Записать(ПараметрыЗаписи);
	Исключение
		Если ЗначениеЗаполнено(ЧисловойНомер) Тогда
			КомпенсацияРегистрации();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			, НСтр("ru = 'Подписать'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьЗашифрованныеИлиЗанятыеФайлы Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ с зашифрованными или занятыми файлами.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Подписать"" возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПродолжение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗавершение",
		ЭтотОбъект);
		
	РаботаСЭПКлиент.СформироватьПодписьОбъекта(
		Объект.Ссылка,
		УникальныйИдентификатор, 
		МассивДанныхДляЗанесенияВРегистр,
		МассивАдресов,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	МассивАдресов = Результат.МассивАдресов;
	
	ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	
	РаботаСЭПКлиент.ИнформироватьОПодписании(МассивДанныхДляЗанесенияВРегистр, Объект.Ссылка);
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПапокИДокументов(Команда)
	
	ПараметрыФормы = Новый Структура("Папка", Объект.Папка);
	
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаСпискаСПапками", ПараметрыФормы, ,Объект.Папка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ИсторияВизСогласования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласования(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Лист согласования"" возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ВнутренниеДокументы",
		"ЛистСогласования",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВиз(Команда)
	
	ЗаполнитьСписокВиз();
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКорреспондент(Команда)
	
	КоличествоКонтрагентов = Объект.Корреспонденты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = Объект.Корреспонденты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Корреспондент) Тогда 
			Объект.Корреспонденты.Удалить(Строка); 
		КонецЕсли; 
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКорреспондентПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Корреспонденты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все корреспонденты, кроме первого, будут удалены. 
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ОдинКорреспондентПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Пока Объект.Корреспонденты.Количество() > 1 Цикл
			Объект.Корреспонденты.Удалить(1);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
	Если Объект.Корреспонденты.Количество() > 0 Тогда
		Строка = Объект.Корреспонденты[0];		
		Объект.Корреспондент = Строка.Корреспондент;
		Объект.КонтактноеЛицо = Строка.КонтактноеЛицо;
		Объект.ПодписалОтКорреспондента = Строка.ПодписалОтКорреспондента;
	Иначе	
		Объект.Корреспондент = Неопределено;
		Объект.КонтактноеЛицо = Неопределено;
		Объект.ПодписалОтКорреспондента = Неопределено;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновная;

КонецПроцедуры	

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов();

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКорреспонденты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Документ еще не записан и не имеет связей.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ОткрытьФайл(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПараметрыФормы = Новый Структура("ВнешнийРесурс", ТекущиеДанные.СвязаннаяСтрока);
		ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурса", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОткрытьДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор);
			
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайловДляОткрытия(
			МассивФайлов, 
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Файлы

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		ЭтаФорма.УникальныйИдентификатор,
		ТекущиеДанные.ХранитьВерсии,
		ТекущиеДанные.РедактируетТекущийПользователь,
		ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.ХранитьВерсии,
		ТекущиеДанные.РедактируетТекущийПользователь,
		ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеОперации", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСписокФайловПослеОперации(Результат, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайлов(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайлов();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Иначе	
		Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Рабочая группа

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуДокументаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуДокументаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с резолюциями

&НаКлиенте
Процедура ДобавитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ДобавитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРезолюцию(Команда)
	
	РаботаСРезолюциямиКлиент.ИзменитьРезолюцию(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРезолюцию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалениеРезолюцииПродолжение",
		ЭтотОбъект);
	РаботаСРезолюциямиКлиент.УдалитьРезолюцию(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеРезолюции(Команда)

	ПоказыватьУдаленныеРезолюции = Не ПоказыватьУдаленныеРезолюции;
	Элементы.ПоказыватьУдаленныеРезолюции.Пометка = ПоказыватьУдаленныеРезолюции;
	
	ЗаполнитьСписокРезолюций();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с электронной подписью

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнятьПроверкуЭПНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ВыполнятьПроверкуЭПНаСервере;
	
	ЕстьШифрованныеФайлы = РаботаСЭПКлиент.ЕстьШифрованныеФайлы(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей);
	
	Если ВыполнятьПроверкуЭПНаСервере И НЕ ЕстьШифрованныеФайлы Тогда
		ПроверитьНаСервере();
	Иначе	
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
				Неопределено,
				НСтр("ru = 'Проверить'"));
			Возврат;
		КонецЕсли;
		РаботаСЭПКлиент.Проверить(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор);
		ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ВыполнятьПроверкуЭПНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ВыполнятьПроверкуЭПНаСервере;
	
	ЕстьШифрованныеФайлы = РаботаСЭПКлиент.ЕстьШифрованныеФайлыСредиВсехПодписей(ТаблицаПодписей);
	
	Если ВыполнятьПроверкуЭПНаСервере И НЕ ЕстьШифрованныеФайлы Тогда
		ПроверитьВсеНаСервере();
	Иначе	
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
				, НСтр("ru = 'Проверить все'"));
			Возврат;
		КонецЕсли;
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		ДанныеСтрок = РаботаСЭПКлиент.ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
		Для Каждого Строка Из ДанныеСтрок Цикл
			РаботаСЭПКлиент.ПроверитьОднуПодпись(Строка, МенеджерКриптографии, УникальныйИдентификатор);
		КонецЦикла;
		ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
		ОбновитьКартинкуЭП();
	КонецЕсли;	
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ТаблицаПодписей.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ТаблицаПодписей.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеДляФайловПодписи, РасширениеДляФайловПодписи);
			
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());

				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Подписать'"));
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ПодписатьПослеФормированияПодписи", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.СформироватьПодписьФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеФормированияПодписи(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.Успех = Истина Тогда
		РаботаСФайламиВызовСервера.ЗанестиИнформациюОднойПодписи(Результат.ДанныеПодписи);
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ДанныеФайла.Владелец);
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиКлиент.ДобавитьПодписьИзФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка);
	РаботаСФайламиКлиент.СохранитьСПодписью(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Зашифровать'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	

	ЗаполнитьСписокПодписей(); // т.к. параметр Зашифрован в таблице подписей изменился
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Расшифровать'"));
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлДаннымиДокумента(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			ТекущийФайл, 
			Истина, 
			УникальныйИдентификатор);
	#Иначе
		ДанныеВыполнения = ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл);
	#КонецЕсли
	
	Если ДанныеВыполнения.Результат Тогда
		Прочитать();
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'");
	Иначе
		ВызватьИсключение(ДанныеВыполнения.Описание);
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкод(Команда)
	
	ШтрихкодированиеКлиент.ВставитьШтрихкод(ЭтаФорма);

КонецПроцедуры   

&НаКлиенте
Процедура ВставитьРегистрационныйШтамп(Команда)

	ШтрихкодированиеКлиент.ВставитьРегистрационныйШтамп(ЭтаФорма);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Команды работы с составом комплекта

&НаКлиенте
Процедура ЭлементКомплектаУдалить(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПросмотретьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПросмотретьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОткрытьКарточку(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаРедактировать(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаРедактировать(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОбновитьИзФайлаНаДиске(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОбновитьИзФайлаНаДиске(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗанятьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗанятьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОтменитьРедактированиеФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОтменитьРедактированиеФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗакончитьРедактирование(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗакончитьРедактирование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьФайлКак(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьФайлКак(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьИзмененияФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьИзмененияФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбновить(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСоздатьБизнесПроцесс(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСоздатьБизнесПроцесс(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаИзменитьКомментарий(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВниз(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВниз(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВверх(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВверх(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьВнутренниеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ВнутренниеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьВходящиеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ВходящиеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьИсходящиеДокументы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ИсходящиеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьФайлы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "Файлы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Категории

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
		
		Если СписокКатегорийДанных.Количество() = 0 Тогда 
			СтатусКатегории = 0;
			Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорий()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	КонецЕсли;

	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
	КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с инструкциями

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

// Заполняет список файлов в карточке документа
//
//	Параметры
//		ЗаполнитьПризнакОригинал - Булево - если Истина, то будет заполнен признак оригинала
//
&НаСервере
Процедура ЗаполнитьСписокФайлов(ЗаполнитьПризнакОригинал = Ложь)
	
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтаФорма, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

// Обновляет одну или несколько колонок в списке файлов
//
//	Параметры
//		Колонки - Строка - список колонок, которые нужно обновить
//
&НаСервере
Процедура ОбновитьКолонкиСпискаФайлов(Колонки)
	
	МассивФайлов = Файлы.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТаблицаФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	Для Каждого Строка Из Файлы Цикл
		НайденнаяСтрока = ТаблицаФайлов.Найти(Строка.Ссылка, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, Колонки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	Иначе	
		Элементы.ФайлыСоздание.ТекущаяСтрока = СтрокаИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный");
	
	Если ДоступноТолькоДобавлениеОригинала Или
		(ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(НайденнаяСтрока.Расширение) 
		И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, Объект.Ссылка);
	КонецЕсли;		
			
	Если НайденнаяСтрока.Оригинал 
		И Не НайденнаяСтрока.ПометкаУдаления
		И ОбязателенФайлОригинала 
		И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

// Обновляет данные одного файла в списке файлов документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

&НаСервере
Процедура АктивизироватьЭлемент()
	
	ИспользоватьВидыВнутреннихДокументов = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") Тогда
		Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
			Элементы.ВидДокумента.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Заголовок) Тогда
		Элементы.Заголовок.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Объект.Содержание) Тогда
		Элементы.Содержание.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Организация.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Утвердил) Тогда
		Элементы.Утвердил.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	

	Если ИспользоватьВидыВнутреннихДокументов Тогда
		ВестиУчетПоКорреспондентам = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "ВестиУчетПоКорреспондентам");
		Если ВестиУчетПоКорреспондентам Тогда
			Если Не НесколькоКонтрагентов И Не ЗначениеЗаполнено(Объект.Корреспондент) Тогда
				Элементы.Корреспондент.АктивизироватьПоУмолчанию = Истина;
				Возврат;
			КонецЕсли;	
			
			Если Не НесколькоКонтрагентов И Не ЗначениеЗаполнено(Объект.ПодписалОтКорреспондента) Тогда
				Элементы.ПодписалОтКорреспондента.АктивизироватьПоУмолчанию = Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОбзорДокумента()
	
	Если Не ИспользоватьОбзорДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорВнутреннегоДокумента(ЭтаФорма);
	
КонецПроцедуры 	

&НаСервере
Процедура ПриИзмененииВидаДокумента()

	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения, Ложь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента");
		Объект.ВидДокумента = Неопределено;
		Возврат;
	КонецЕсли;		

    Если ЗначениеЗаполнено(Основание) Тогда
		Если Объект.ВидДокумента.ВестиУчетПоКорреспондентам И Не ЗначениеЗаполнено(Объект.Корреспондент) Тогда
			Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				Объект.Корреспондент = Основание.Отправитель;
				Объект.КонтактноеЛицо = Основание.Подписал;
				
				Объект.Корреспонденты.Очистить();	
				Строка = Объект.Корреспонденты.Добавить();
				Строка.Корреспондент = Объект.Корреспондент;
				Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
				
				НесколькоКонтрагентов = Ложь;
				УстановитьВидимостьКонтрагентов();
				
			ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				Объект.Корреспонденты.Очистить();
				Для Каждого СтрокаПолучатель Из Основание.Получатели Цикл
					Строка = Объект.Корреспонденты.Добавить();
					Строка.Корреспондент = СтрокаПолучатель.Получатель;
					Строка.КонтактноеЛицо = СтрокаПолучатель.Адресат;
				КонецЦикла;	
				
				Если Объект.Корреспонденты.Количество() > 0 Тогда 
					Объект.Корреспондент = Объект.Корреспонденты[0].Корреспондент;
					Объект.КонтактноеЛицо = Объект.Корреспонденты[0].КонтактноеЛицо;
				КонецЕсли;	
				
				НесколькоКонтрагентов = (Объект.Корреспонденты.Количество() > 1);
				УстановитьВидимостьКонтрагентов();
				
			ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание)Тогда
				
				Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ОтправительАдресат, "Адрес");
				СтруктураРезультата = 
					ВстроеннаяПочтаСервер.ПолучитьКорреспондентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
					
				Если СтруктураРезультата <> Неопределено Тогда
					Объект.Корреспондент = СтруктураРезультата.Корреспондент;
					Объект.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
	
					Объект.Корреспонденты.Очистить();	
					Строка = Объект.Корреспонденты.Добавить();
					Строка.Корреспондент = СтруктураРезультата.Корреспондент;
					Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
					
					НесколькоКонтрагентов = Ложь;
					УстановитьВидимостьКонтрагентов();

				КонецЕсли;
				
			ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание)Тогда
				
				МассивАдресов = Новый Массив;
				
				Для Каждого Получатель Из Основание.ПолучателиПисьма Цикл 
					МассивАдресов.Добавить(Получатель.Адресат);
				КонецЦикла;
				Для Каждого Получатель Из Основание.ПолучателиКопий Цикл 
					МассивАдресов.Добавить(Получатель.Адресат);
				КонецЦикла;
				Для Каждого Получатель Из Основание.ПолучателиСкрытыхКопий Цикл 
					МассивАдресов.Добавить(Получатель.Адресат);
				КонецЦикла;
				
				Объект.Корреспонденты.Очистить();
				Для Каждого Адресат Из МассивАдресов Цикл 
					Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
					СтруктураРезультата = 
						ВстроеннаяПочтаСервер.ПолучитьКорреспондентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
						
					Если СтруктураРезультата <> Неопределено Тогда
						Строка = Объект.Корреспонденты.Добавить();
						Строка.Корреспондент = СтруктураРезультата.Корреспондент;
						Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
					КонецЕсли;
				КонецЦикла;	
				
				Если Объект.Корреспонденты.Количество() > 0 Тогда 
					Объект.Корреспондент = Объект.Корреспонденты[0].Корреспондент;
					Объект.КонтактноеЛицо = Объект.Корреспонденты[0].КонтактноеЛицо;
				КонецЕсли;	

	            НесколькоКонтрагентов = (Объект.Корреспонденты.Количество() > 1);
				УстановитьВидимостьКонтрагентов();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// обновить номер
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда // документ зарегистрирован
		УстановитьСрокИсполнения(Объект);
	КонецЕсли;
	
	// Срок действия
	СрокДействияПриИзмененииВидаДокумента();
	
	// Недействующие документы
	Если Объект.ВидДокумента.УчитыватьНедействующиеДокументы
	   И Объект.ВидДокумента.ЯвляетсяДоговором Тогда
		Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента));
	НеобходимоНапечататьШтрихкодПриСоздании = Объект.ВидДокумента.НеобходимаПечатьШтрихкода;
	УчитыватьСрокДействия = Объект.ВидДокумента.УчитыватьСрокДействия;
	Если Объект.ВидДокумента.УчитыватьНедействующиеДокументы 
	   И Объект.ВидДокумента.ЯвляетсяДоговором Тогда 
		Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
	КонецЕсли;
	
	// Статьи ДДС
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Элементы.СтраницыСтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	Если Не ВестиУчетПоСтатьямДДС Тогда
		СтатьиДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	СформироватьПредставлениеСтатейДДС();

// Заполнение валюты
	Если Не ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(Объект.ВидДокумента) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних",
		Новый Структура("ВидВнутреннегоДокумента", Объект.ВидДокумента)) Тогда
		Объект.Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
	// Доступность реквизитов регистрации
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Обработчик механизма "Свойства"
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриИзмененииВидаДокументаНаСервере(ЭтаФорма);
	
	Если Объект.ВидДокумента.ВестиУчетПоКорреспондентам Тогда
		Элементы.ДекорацияКому.Видимость = Ложь;
		Элементы.ГруппаКорреспондент.ОтображатьЗаголовок = Истина;		
	Иначе
		Элементы.ДекорацияКому.Видимость = Истина;
		Элементы.ГруппаКорреспондент.ОтображатьЗаголовок = Ложь;		
	Конецесли;		
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	//Копирование дополнительных реквизитов основания 
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы")
		И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		
		Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				
				Если Не ЗначениеЗаполнено(ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение]) Тогда
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Обновить инструкции
	ПолучитьИнструкции();

    // ЭтапыОбработкиДокумента
	Элементы.ГруппаЭтапы.Видимость = Объект.ВидДокумента.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	ВключитьАвтоотметкуИЗаполнитьПолеОтветственный();	

    //1С-Минск  
	УправлениеВидимостьюДобавленныхРеквизитов();
    //Конец 1С-Минск

    Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") И Не ТипСвязиВыбран Тогда
		МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ВключитьАвтоотметкуИЗаполнитьПолеОтветственный()
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
			ВидДокумента, "ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного Тогда	
			
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;	
			
		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДатыРегистрации()
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Нумерация.ПроверитьСменуПериодаНумерации(Объект.ДатаРегистрации, НачальнаяДатаРегистрации, Нумератор) Тогда 
		ОсвободитьНомерДокумента(Объект, НачальнаяДатаРегистрации);
		СформироватьЧисловойНомерДокумента(Объект);
		СформироватьСтроковыйНомерДокумента(Объект);
		Если Не Записать() Тогда 
			ОсвободитьНомерДокумента(Объект, Объект.ДатаРегистрации);
		КонецЕсли;
	Иначе
		СформироватьСтроковыйНомерДокумента(Объект);
	КонецЕсли;
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	
    //1С-Минск  
	Если ЗначениеЗаполнено(РегистрационныйНомерДела) Тогда
        Объект.РегистрационныйНомер = РегистрационныйНомерДела;
    КонецЕсли; 
    //Конец 1С-Минск
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьЗначенияРеквизитов()
	
	НачальныеЗначенияРеквизитов.Очистить();
	НачальныеЗначения = НачальныеЗначенияРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(НачальныеЗначения, Объект);
	НачальныеЗначения.СрокДействияДокументИсточникИзменения = СрокДействияДокументИсточникИзменения;
	НачальныеЗначения.СрокДействияКомментарий = СрокДействияКомментарий;
	НачальныеЗначения.ЯвляетсяКомплектом = 
		ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "ЯвляетсяКомплектомДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если НеобходимоОповещениеОЗаписиНового Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
		
		Оповестить("ДокументСоздан", Объект.Ссылка, ЭтаФорма);
		НеобходимоОповещениеОЗаписиНового = Ложь;
	КонецЕсли;
	
	Оповестить("ДокументИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) Тогда 
		Оповестить("ОбновитьПредметПереписки", ПерепискаПоПредмету, ЭтаФорма);
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВнутренниеДокументы") 
		И ПараметрыЗаписи.Свойство("МассивТиповСвязей")
		И Не ТипСвязиВыбран 
		И Не ПараметрыЗаписи.Свойство("ОкноВыбораТипаСвязиПоказано") Тогда
		
		ТипСвязи = Неопределено;
		ТипСвязиВыбран = Истина;
		
		МассивТиповСвязей = ПараметрыЗаписи.МассивТиповСвязей;
		Если МассивТиповСвязей.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПослеЗаписиКлиентПродолжениеПослеВыбораТипаСвязи",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПараметрыФормы = Новый Структура("МассивТиповСвязей, Основание", МассивТиповСвязей, Основание);
			ОткрытьФорму(
				"Справочник.ВнутренниеДокументы.Форма.ВыборТипаСвязи",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;	
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);			
			Индекс = Индекс - 1;

		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	#Если НЕ ВебКлиент Тогда
	//Выполнить автозаполнение файлов, которые должны заполняться на клиенте
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			
			ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
			ДвоичныеДанныеЗаполненногоФайла = Неопределено;
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеШаблона,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.НастройкиЗамены,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанные);
			КонецЕсли;
			
			// Штрихкодирование
			Если ФайлДляАвтоЗаполнения.Штрихкодирование
				И ФайлДляАвтоЗаполнения.НастройкиЗаполнения.Количество() > 1 Тогда
				ДанныеШК = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[1].Значение;
				Если Не ДанныеШК.Свойство("СообщениеОбОшибке") 
					ИЛИ Не ЗначениеЗаполнено(ДанныеШК.СообщениеОбОшибке) Тогда
					
					Если ДвоичныеДанныеЗаполненногоФайла = Неопределено Тогда
						ДвоичныеДанныеЗаполненногоФайла = ДанныеШК.ДвоичныеДанныеФайла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДвоичныеДанныеЗаполненногоФайла) Тогда 
						РезультатВставкиШтрихкода = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлДляАвтоЗаполнения.Файл,
						НСтр("ru = 'ВставитьИзображениеШтрихкода'"), 
						Истина, 
						ДанныеШК.ДвоичныеДанныеИзображения, 
						ДвоичныеДанныеЗаполненногоФайла,
						ДанныеШК.Расширение,
						ДанныеШК.ФайлРедактируется,
						ДанныеШК.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеШК.НастройкиШтрихкода.ВысотаШК,
						УникальныйИдентификатор,
						Ложь);		
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатВставкиШтрихкода) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанныеЗаполненногоФайла = РезультатВставкиШтрихкода;
			КонецЕсли;
			
			Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
				ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
				ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
				МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
	КонецЕсли;
	
	#КонецЕсли

	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленных) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленных);
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленных);
		ТекущийФайлВСпискеДобавленных = Неопределено;
	КонецЕсли;
	
	//Регистрация 
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ВыполняетсяРегистрация = Ложь;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ зарегистрирован:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
		Отказ = Ложь;
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаРегистрация, Объект.Ссылка, "Регистрация", ЭтаФорма, Отказ, Ложь);	
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГруппыНаСервере()
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокИсполнения(ТекущийОбъект)
	
	Если ПолучитьФункциональнуюОпцию(
		"ИспользоватьСрокИсполненияВоВнутренних",
		Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда
		СрокИсполненияДней = ТекущийОбъект.ВидДокумента.СрокИсполнения;
		Если Не ЗначениеЗаполнено(ТекущийОбъект.СрокИсполнения) И ЗначениеЗаполнено(СрокИсполненияДней) Тогда 
			ТекущийОбъект.СрокИсполнения = ТекущийОбъект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолныйПуть()
	
	ПапкаРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "Папка");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		
		Пока Не ПапкаРодитель.Пустая() Цикл
			
			Если Не ПустаяСтрока(ПолныйПуть) Тогда
				ПолныйПуть = "\" + ПолныйПуть;
			КонецЕсли;	
			
			ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
			
			ПапкаРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПапкаРодитель, "Родитель");	
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Элементы.Папка.Подсказка = ПолныйПуть;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок()
	
	Объект.Корреспонденты.Очистить();
	
	Строка = Объект.Корреспонденты.Добавить();
	Строка.Корреспондент = Объект.Корреспондент;
	Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
	Строка.ПодписалОтКорреспондента = Объект.ПодписалОтКорреспондента;		
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояние(Документ, МассивСостояний) 
	
	Для Каждого СтруктураСостояния Из МассивСостояний Цикл
		
		Если СтруктураСостояния.Состояние = СтруктураСостояния.НачальноеСостояние Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(Документ, СтруктураСостояния.Период, СтруктураСостояния.Состояние, СтруктураСостояния.Установил);
		Иначе
			Делопроизводство.ОчиститьСостояниеДокумента(Документ, СтруктураСостояния.НачальноеСостояние);
		КонецЕсли;
		
	КонецЦикла;	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ);
	
	// установка доступности
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Документ, ДоступныеПоля, НедоступныеПоля);
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоЗапрету();
	
	ПолучитьИнструкции();
	ПолучитьОбзорДокумента();
	
КонецПроцедуры	

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	Если Не БыстрыйВыборВидаДокумента Тогда 
		СохраняемыеЭлементы.Вставить("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;

	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура ОбработатьЗаписьКонтроля()
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с рабочей группой

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с шаблонами

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	ШаблоныДляАвтоЗапускаЗакрытиеКарточки = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(
		Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоВнутреннегоДокумента,
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);
	ШаблоныДляАвтоЗапускаРегистрация = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(
		Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияВнутреннегоДокумента,
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуВыполнить(ШаблонДокумента)
	
	АвтозаполнениеШаблоновФайловСервер.СкопироватьФайлыИзШаблонаДокумента(ШаблонДокумента, ФайлыДобавленные, Истина);
	КоличествоФайлов = ФайлыДобавленные.Количество();
	ЗаполнитьРеквизитыИзШаблона(ШаблонДокумента);
	ЗаполнитьКонтрагентовИзШаблона(ШаблонДокумента);

	НесколькоКонтрагентов = (Объект.Корреспонденты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
	Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	ПриИзмененииВидаДокумента();
	
	//Копирование дополнительных реквизитов
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Для Каждого Реквизит Из ШаблонДокумента.ДополнительныеРеквизиты Цикл
			
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Реквизит);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.ЗначениеРеквизита;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
			
	Модифицированность = Истина;
	Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
	
	// Рабочие группы
	Объект.Шаблон = ШаблонДокумента;
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИзШаблона(ШаблонДокумента)
	
	ВнутреннийДокументОбъект = РеквизитФормыВЗначение("Объект");
	АвтозаполнениеШаблоновФайловСервер.СкопироватьРеквизитыДокументаИзШаблона(ВнутреннийДокументОбъект, ШаблонДокумента);
	ЗначениеВРеквизитФормы(ВнутреннийДокументОбъект, "Объект");
	
	// Статьи ДДС заполним отдельно.
	Если ЗначениеЗаполнено(ШаблонДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтрокаСтатьи = СтатьиДвиженияДенежныхСредств.Добавить();
		СтрокаСтатьи.СтатьяДвиженияДенежныхСредств = ШаблонДокумента.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвтозаполненийШаблона(Файл, Шаблон, Документ)  
	
	СтруктураВозврата = Новый Структура("ВыполнятьНаСервере, РасширениеШаблона,НастройкиЗамены, ДанныеФайла, ДвоичныеДанные, ТекущаяВерсия");
	НаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ПеремДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка);
	
	СтруктураВозврата.ВыполнятьНаСервере = НаСервере;
	СтруктураВозврата.РасширениеШаблона = НРег(Файл.ТекущаяВерсияРасширение);
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Файл;
	КонецЕсли;
		
	СтруктураВозврата.НастройкиЗамены = АвтозаполнениеШаблоновФайловСервер.ПолучитьМассивАвтозаполненийШаблона(Файл, Шаблон, Документ);
	СтруктураВозврата.ДанныеФайла = ПеремДанныеФайла;
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();
	ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование + "." + ТекущаяВерсия.Расширение;
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловСервер.ПолучитьДвоичныеДанныеФайла(Файл);
	
	СтруктураВозврата.ДвоичныеДанные = ДвоичныеДанныеФайла;
	СтруктураВозврата.ТекущаяВерсия = Файл.ТекущаяВерсия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтрагентовИзШаблона(ШаблонДокумента)
	
	Если ШаблонДокумента.Корреспонденты.Количество() > 0 Тогда
		ВнутреннийДокументОбъект = РеквизитФормыВЗначение("Объект"); 
		
		ВнутреннийДокументОбъект.Корреспонденты.Очистить();
		Для Каждого СтрокаПолучатель из ШаблонДокумента.Корреспонденты Цикл
			НоваяСтрока = ВнутреннийДокументОбъект.Корреспонденты.Добавить();
			НоваяСтрока.Корреспондент = СтрокаПолучатель.Корреспондент;
			НоваяСтрока.КонтактноеЛицо = СтрокаПолучатель.КонтактноеЛицо;
		КонецЦикла;
		
		Если ВнутреннийДокументОбъект.Корреспонденты.Количество() > 0 Тогда 
			ВнутреннийДокументОбъект.Корреспондент = ВнутреннийДокументОбъект.Корреспонденты[0].Корреспондент;
			ВнутреннийДокументОбъект.КонтактноеЛицо = ВнутреннийДокументОбъект.Корреспонденты[0].КонтактноеЛицо;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ВнутреннийДокументОбъект, "Объект");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с визами и резолюциями

&НаСервере
Процедура ЗаполнитьСписокВиз()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		РаботаСВизамиСогласования.ЗаполнитьСписокВиз(ЭтаФорма, ПоказыватьУдаленныеВизы);
	КонецЕсли;
	
	// Обновление заголовка страницы резолюций и виз
	Результат = СформироватьЗаголовокРезолюцийИВиз(КоличествоРезолюций, КоличествоВиз, ИспользоватьРезолюцииВДокументах,
		ИспользоватьВизыСогласования);
	Если Результат = "Отказ" Тогда
		Элементы.ГруппаРезолюцииИВизы.Видимость = Ложь;	
	Иначе	
		Элементы.ГруппаРезолюцииИВизы.Заголовок = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРезолюций()
	
	РаботаСРезолюциями.ЗаполнитьСписокРезолюций(ЭтаФорма, Не ПоказыватьУдаленныеРезолюции);
	// Обновление заголовка страницы резолюций и виз
	Результат = СформироватьЗаголовокРезолюцийИВиз(КоличествоРезолюций, КоличествоВиз, ИспользоватьРезолюцииВДокументах,
		ИспользоватьВизыСогласования);
	Если Результат = "Отказ" Тогда
		Элементы.ГруппаРезолюцииИВизы.Видимость = Ложь;	
	Иначе	
		Элементы.ГруппаРезолюцииИВизы.Заголовок = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокРезолюцийИВиз(КоличествоРезолюций, КоличествоВиз, ИспользоватьРезолюцииВДокументах, ИспользоватьВизыСогласования)
	
	Если ЗначениеЗаполнено(КоличествоРезолюций) И ЗначениеЗаполнено(КоличествоВиз)
		И ИспользоватьВизыСогласования И ИспользоватьРезолюцииВДокументах Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Резолюции (%1), визы (%2)'"),
			КоличествоРезолюций, КоличествоВиз);
	ИначеЕсли ЗначениеЗаполнено(КоличествоРезолюций) И ИспользоватьРезолюцииВДокументах Тогда
		Если ИспользоватьВизыСогласования Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Резолюции (%1), визы'"), КоличествоРезолюций);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Резолюции (%1)'"), КоличествоРезолюций);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(КоличествоВиз) И ИспользоватьВизыСогласования Тогда
		Если ИспользоватьРезолюцииВДокументах Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Резолюции, визы (%1)'"), КоличествоВиз);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Визы (%1)'"), КоличествоВиз);
		КонецЕсли;
	ИначеЕсли ИспользоватьВизыСогласования И ИспользоватьРезолюцииВДокументах Тогда
		Возврат НСтр("ru = 'Резолюции, визы'");
	ИначеЕсли ИспользоватьВизыСогласования Тогда
		Возврат НСтр("ru = 'Визы'");
	ИначеЕсли ИспользоватьРезолюцииВДокументах Тогда
		Возврат НСтр("ru = 'Резолюции'");
	Иначе
	    Возврат "Отказ";
	КонецЕсли;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокКорреспондентыИнвесторы(КоличествоКорреспондентов=0, КоличествоИнвесторов=0)
	
	Если КоличествоКорреспондентов > 0 И КоличествоИнвесторов > 0 Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заказчики (%1), инвесторы (%2)'"),
			КоличествоКорреспондентов, КоличествоИнвесторов);
	ИначеЕсли КоличествоКорреспондентов > 1 Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Корреспонденты (%1)'"), КоличествоКорреспондентов);
	Иначе
		Возврат "Отказ";;
	КонецЕсли;
	
КонецФункции	

&НаСервере 
Функция ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеПоВизе = ВизыСогласованияТаблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеПоВизе.Автор <> ТекущийПользователь И Не ЭтоПолноправныйПользователь Тогда 
			ТекстОшибки = НСтр("ru = 'Удалить визу может только ее автор или администратор!'");
			Возврат Ложь;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.Источник) Тогда 
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Не ДанныеПоВизе.Источник.Выполнена Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана задачей, находящейся на выполнении!'");
				Возврат Ложь;
			КонецЕсли;	
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("БизнесПроцессСсылка.Согласование") И Не ДанныеПоВизе.Источник.Завершен Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана процессом, находящемся на выполнении!'");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.РезультатСогласования) Тогда 
			ЗаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		Иначе
			НезаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе	
		Префикс = "Создание";
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюНапечатать"+Префикс], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюСохранитьВместеСЭП"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьШтрихкод"+Префикс], Ложь);		
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюНапечатать"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыРедактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗанять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
				
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);

        УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьШтрихкод"+Префикс], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер) И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер) И Редактирует.Пустая());

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	
	Прочитать();
	УстановитьДоступностьПолей();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	УстановитьДоступностьПоСостоянию();
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоПравам();
	УстановитьДоступностьПоЗапрету();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭП()
	
	УстановитьТолькоПросмотр = Объект.ПодписанЭП;
	
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	УстановитьДоступностьПоСостояниюНеРаботает = ДоступныПолныеПрава ИЛИ НЕ ИспользоватьСостоянияДокументов;
	
	// если не ПодписанЭП - делаем доступными ключевые поля - только для роли ПолныеПрава
	// - для неполных прав сработает УстановитьДоступностьПоСостоянию
	Если Объект.ПодписанЭП ИЛИ (НЕ Объект.ПодписанЭП И УстановитьДоступностьПоСостояниюНеРаботает) Тогда
		
		МассивИмен = Справочники.ВнутренниеДокументы.ПолучитьИменаКлючевыхРеквизитов();
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элем Из Элементы Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Объект.Ссылка, ДоступныеПоля, НедоступныеПоля);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.ДобавитьПервуюРезолюцию.Доступность = Ложь;
			Элементы.ДобавитьРезолюцию.Доступность = Ложь;
			Элементы.ИзменитьРезолюцию.Доступность = Ложь;
			Элементы.УдалитьРезолюцию.Доступность = Ложь;
			Элементы.Зарегистрировать.Доступность = Ложь;
			Элементы.ВизыСогласованияТаблица.ИзменятьСоставСтрок = Ложь;
			Элементы.ВизыСогласованияТаблица.ИзменятьПорядокСтрок = Ложь;
			Элементы.Оригинал.ТолькоПросмотр = Истина;
			Элементы.ОригиналСоздание.ТолькоПросмотр = Истина;
		ИначеЕсли Не ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияВнутреннихДокументов", Объект.Ссылка) Тогда
			Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
			Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Ставит доступность полям, уже заполненным в шаблоне.
&НаСервере
Процедура УстановитьДоступностьПоЗапрету()
	
	Если ЗначениеЗаполнено(Объект.Шаблон) И Не РольДоступна("ПолныеПрава") Тогда 
		
		УстановитьПривилегированныйРежим(Истина);
		Шаблон = Объект.Шаблон;
		
		ЗапретитьИзменятьРеквизитыИзШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона");
			
		Если ЗапретитьИзменятьРеквизитыИзШаблона Тогда
			
			Если ЗначениеЗаполнено(Шаблон.Адресат) Тогда
				Элементы.Адресат.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.ВидДокумента) Тогда
				Элементы.ВидДокумента.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Организация) Тогда
				Элементы.Организация.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.ГрифДоступа) Тогда
				Элементы.ГрифДоступа.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.ВопросДеятельности) Тогда
				Элементы.ВопросДеятельности.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Проект) Тогда
				Элементы.Проект.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Папка) Тогда
				Элементы.Папка.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Ответственный) Тогда
				Элементы.Ответственный.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.НоменклатураДел) Тогда
				Элементы.НоменклатураДел.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.СтатьяДвиженияДенежныхСредств) Тогда
				Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если Шаблон.Корреспонденты.Количество() <> 0 Тогда
				Элементы.Корреспонденты.ТолькоПросмотр = Истина;
				Элементы.Корреспондент.ТолькоПросмотр = Истина;
				Элементы.МногоКонтрагентов.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;		
	
КонецПроцедуры		

&НаСервере
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.Корреспондент.Видимость = Не НесколькоКонтрагентов;
	Элементы.КонтактноеЛицо.Видимость = Не НесколькоКонтрагентов;
    Элементы.ПодписалОтКорреспондента.Видимость = Не НесколькоКонтрагентов;	
    Элементы.Корреспонденты.Видимость = НесколькоКонтрагентов;	
	Элементы.МногоКонтрагентов.Видимость = Не НесколькоКонтрагентов;
	
	Если Объект.ВидДокумента.ВестиУчетПоКорреспондентам Тогда
		Элементы.ДекорацияКому.Видимость = НесколькоКонтрагентов;
		Элементы.ГруппаКорреспондент.ОтображатьЗаголовок = Не НесколькоКонтрагентов;
	Иначе
		Элементы.ДекорацияКому.Видимость = Истина;
		Элементы.ГруппаКорреспондент.ОтображатьЗаголовок = Ложь;		
	Конецесли;		    
    
    //{{1С-Минск
    Элементы.ГруппаКорреспонденты.Видимость = НесколькоКонтрагентов;	
    Если Объект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
        Элементы.КонтактноеЛицо.Видимость = Ложь;
        Элементы.ПодписалОтКорреспондента.Видимость = Ложь;	
    КонецЕсли;     
    //}}1C-Минск
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл)
	
	Возврат АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
		Ложь,
		ТекущийФайл, 
		Истина, 
		УникальныйИдентификатор);
		
КонецФункции

&НаСервере
Процедура ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивФайловДляОбновления)
	
	Для Каждого ЗаполненныйФайл Из МассивФайловДляОбновления Цикл
		АвтозаполнениеШаблоновФайловСервер.ОбновитьВерсиюИзДвоичныхДанных(ЗаполненныйФайл.ДвоичныеДанные, ЗаполненныйФайл.ТекущаяВерсия, "Автозаполнение шаблона");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьКомментарийСрокаДействия()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСроковДействияДокументов.ДатаИзменения,
		|	ИсторияСроковДействияДокументов.Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияСроковДействияДокументов.ДатаИзменения УБЫВ";
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока  Результат.Следующий() Цикл  
		Возврат Результат.Комментарий;
	КонецЦикла;	
		
	Возврат ""; 

КонецФункции	

&НаСервере
Процедура ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект)
	
	ОбязателенФайлОригинала = ВестиУчетСканКопийОригиналовДокументов 
		И ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "ОбязателенФайлОригинала");
		
	Если ОбязателенФайлОригинала И ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда 
		
		НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("Оригинал, ПометкаУдаления", Истина, Ложь));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Истина;
		Иначе
			Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
		КонецЕсли;	
		
	Иначе	
		Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)
	
	Если Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаСервере
Процедура ПрочитатьСвязи(ТипыСвязей = Неопределено)
	
	Если ТипыСвязей = Неопределено
		Или ТипыСвязей.Найти(Справочники.ТипыСвязей.НеДействуетВСоответствии) <> Неопределено Тогда
		НеДействуетВСоответствии = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка, Справочники.ТипыСвязей.НеДействуетВСоответствии);
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязи()
	
	Делопроизводство.ЗаполнитьДеревоСвязейДокумента(ЭтаФорма);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УдалитьСвязь(Параметры)
	
	НаборЗаписей = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Документ);
	НаборЗаписей.Отбор.ТипСвязи.Установить(Параметры.ТипСвязи);
	НаборЗаписей.Отбор.СвязанныйДокумент.Установить(Параметры.СвязанныйДокумент);
	НаборЗаписей.Отбор.СвязаннаяСтрока.Установить(Параметры.СвязаннаяСтрока);
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлюч(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиДокументов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции	

&НаСервере
Функция ПолучитьТипыСвязей(Основание, ВидДокумента)
	
	МассивТиповСвязей.Очистить();
	ЧислоПользовательскихСвязей = 0;
	
	СвязанныйДокумент = Новый Структура("ВидДокумента", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Основание, "ВидДокумента"));
	ДокументСтруктура = Новый Структура("ВидДокумента", ВидДокумента);
	ТаблицаНастроекСвязей = СвязиДокументов.ПолучитьНастройкиСвязи(ДокументСтруктура, СвязанныйДокумент);
	
	Для Каждого Строка Из ТаблицаНастроекСвязей Цикл
		
		Если Не СвязиДокументов.ЭтоПодходящийТипСвязи(Объект.Ссылка, Основание, Строка.ТипСвязи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная Тогда
			
			// если связь единичная - надо проверить, что нет уже документов, связанных с основанием связью этого типа
			ДокументыНайденные = СвязиДокументов.ПолучитьСвязанныеДокументы(Основание, Строка.ТипОбратнойСвязи);
			Если ДокументыНайденные.Количество() = 0 Тогда
				МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			КонецЕсли;
			
		Иначе
			
			МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивТиповСвязей Цикл
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Значение.Предопределенный Тогда
			ЧислоПользовательскихСвязей = ЧислоПользовательскихСвязей + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивТиповСвязей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма свойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронной подписью

&НаСервере
Процедура ОбновитьКартинкуЭП()
	
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов)
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов, УникальныйИдентификатор);
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	РаботаСЭП.ЗаполнитьСписокПодписей(Объект.Ссылка, ТаблицаПодписей, 
		УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП,ПодписанЭП");
		
КонецПроцедуры
	
&НаСервере
Процедура ПроверитьНаСервере()
	
	РаботаСЭП.ПроверитьНаСервере(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор);
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеНаСервере()
	
	РаботаСЭП.ПроверитьВсеНаСервере(ТаблицаПодписей, УникальныйИдентификатор);
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если Элементы.ТаблицаПодписей.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	УдалитьПодписиИОбновитьСписок(Ложь);
		
	ОповеститьОбИзменении(Объект.Ссылка);
		
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
		
КонецПроцедуры	

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	РаботаСЭП.УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, 
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		Объект.Ссылка, ТаблицаПодписей, УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	Если РеквизитПодписанИзменен Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаПодписей(ТекущиеДанные)
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ТаблицаПодписей.ПолучитьЭлементы().Количество() <> 0);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая());
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Регистрация документа

&НаСервере
Процедура КомпенсацияРегистрации()
	
	ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда // не известен вид нумерации
		
		Элементы.РегистрационныйНомер.Доступность = Ложь;
		Элементы.ДатаРегистрации.Доступность = Ложь;
		Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Зарегистрировать'");
		Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Ложь;
		Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
			Элементы.РегистрационныйНомер.Доступность = Истина;
			Элементы.ДатаРегистрации.Доступность = Истина;
			Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Перерегистрировать'");
			Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Истина;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Истина;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Истина;
		Иначе
			Элементы.РегистрационныйНомер.Доступность = Ложь;
			Элементы.ДатаРегистрации.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Зарегистрировать'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьНомерДокумента(ТекущийОбъект, ДатаРегистрации = Неопределено, ЧисловойНомер = Неопределено)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		СтруктураПараметров.Вставить("ДатаРегистрации", ДатаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧисловойНомер) Тогда 
		СтруктураПараметров.Вставить("ЧисловойНомер", ЧисловойНомер);
	КонецЕсли;
	
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьЧисловойНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
	
	Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ТекущийОбъект.ЧисловойНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроковыйНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокументДляНумерации);
	
	ОписанияОшибок = Новый СписокЗначений;
	Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ТекущийОбъект.РегистрационныйНомер, ОписанияОшибок);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
			"Объект");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРеквизита(ЗначениеРеквизита, ИмяРеквизита, Поле, ТекстСообщения = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Сообщение = Новый СообщениеПользователю;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение.Текст = ТекстСообщения;
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				ИмяРеквизита);
		КонецЕсли;
		Сообщение.Поле = Поле;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Проверка заполненности срока действия документа
	Если ТекущийОбъект.ВидДокумента.УчитыватьСрокДействия Тогда
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда
			Поле = "СрокДействияСтрока";
			Сообщение = НСтр("ru = 'Не заполнена дата начала действия'");
			Если Не ПроверитьЗаполнениеРеквизита(
				ТекущийОбъект.ДатаНачалаДействия,
				НСтр("ru = 'Дата начала действия'"),
				Поле,
				Сообщение) Тогда
				Результат = Ложь;
			КонецЕсли;
			Если Не ТекущийОбъект.Бессрочный Тогда
				Сообщение = НСтр("ru = 'Не заполнена дата окончания действия'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ДатаОкончанияДействия,
					НСтр("ru = 'Дата окончания действия'"),
					Поле,
					Сообщение) Тогда
					Результат = Ложь;
				КонецЕсли;
				Сообщение = НСтр("ru = 'Не заполнен порядок продления'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ПорядокПродления,
					НСтр("ru = 'Порядок продления'"),
					Поле,
					Сообщение)Тогда
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.РегистрационныйНомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Возврат Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних", Новый Структура("ВидВнутреннегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		Если Не ЗначениеЗаполнено(ТекущийОбъект.НоменклатураДел) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"),,"Объект.НоменклатураДел");
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"),,,"Файлы");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере(ТекущийОбъект, СообщениеОбОшибке, РегистрационныйНомер = "")
	
	// Проверяем права доступа
	Если Не ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияВнутреннихДокументов", ТекущийОбъект) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Вашего уровня прав недостаточно для регистрации этого внутреннего документа.
                                  |Обратитесь к администратору.'");
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Если РегистрационныйНомер = "" Тогда // сформировать автоматически
		
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
		
		// сформируем текущий номер
		СформироватьЧисловойНомерДокумента(ТекущийОбъект);
		СформироватьСтроковыйНомерДокумента(ТекущийОбъект);
		
	Иначе
		ТекущийОбъект.РегистрационныйНомер = РегистрационныйНомер;
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // успешно сформирован номер
		ТекущийОбъект.Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	Иначе
		ТекущийОбъект.ДатаРегистрации = '00010101';
		НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	КонецЕсли;
	
	УстановитьСрокИсполнения(ТекущийОбъект);
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	
	РегистрационныйНомер = ТекущийОбъект.РегистрационныйНомер;
	ЧисловойНомер = ТекущийОбъект.ЧисловойНомер;
	ДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	
	ПротоколированиеРаботыПользователей.ЗаписатьРегистрациюДокумента(Объект.Ссылка, РегистрационныйНомер);
	
КонецПроцедуры

&НаКлиенте
Функция ДокументЗарегистрирован()
	
	Возврат ЗначениеЗаполнено(Объект.РегистрационныйНомер);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// Срок действия документа

&НаСервере
Процедура СрокДействияПриЧтенииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = Объект.ВидДокумента.УчитыватьСрокДействия;
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриСозданииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = Объект.ВидДокумента.УчитыватьСрокДействия;
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если Не ТекущийОбъект.ВидДокумента.УчитыватьСрокДействия Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НачальныеЗначенияРеквизитов[0].НеДействует И ТекущийОбъект.НеДействует Тогда // установлен признак "Не действует"
		Если ТекущийОбъект.Бессрочный Тогда
			ТекущийОбъект.Бессрочный = Ложь;
		КонецЕсли;
		ТекущийОбъект.ДатаОкончанияДействия = ТекущаяДатаСеанса();
		ТекущийОбъект.ПорядокПродления = Перечисления.ПорядокПродления.НеПродлевается;
		Если ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			СрокДействияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Действие документа прекращено в соответствии с документом: %1.'"),
				Строка(НеДействуетВСоответствии));
		Иначе
			СрокДействияКомментарий = НСтр("ru = 'Действие документа прекращено.'");
		КонецЕсли;
		СрокДействияДокументИсточникИзменения = НеДействуетВСоответствии;
		ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
		ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", НеДействуетВСоответствии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если НовыйДокумент
		И СрокДействияЗаполнен()
		Или СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи) Тогда
		
		Запись = Новый Структура;
		Запись.Вставить("Документ", Объект.Ссылка);
		Запись.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
		Запись.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
		Запись.Вставить("Бессрочный", Объект.Бессрочный);
		Запись.Вставить("ПорядокПродления", Объект.ПорядокПродления);
		Запись.Вставить("ДокументИсточникИзменения", ПараметрыЗаписи.СрокДействияДокументИсточникИзменения);
		Запись.Вставить("Комментарий", ПараметрыЗаписи.СрокДействияКомментарий);
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
		
	КонецЕсли;
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = Объект.ВидДокумента.УчитыватьСрокДействия;
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриИзмененииВидаДокумента()
	
	УчитыватьСрокДействия = Объект.ВидДокумента.УчитыватьСрокДействия;
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСрокаДействия()
	
	Если УчитыватьСрокДействия Тогда
		СрокДействияКомментарий = ПрочитатьКомментарийСрокаДействия();
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Элементы.СрокДействияСтрока.Видимость = Истина;
	Иначе
		Элементы.СрокДействияСтрока.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияДокумента()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
	ПараметрыФормы.Вставить("Бессрочный", Объект.Бессрочный);
	ПараметрыФормы.Вставить("ПорядокПродления", Объект.ПорядокПродления);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	ПараметрыФормы.Вставить("ДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыФормы.Вставить("Комментарий", СрокДействияКомментарий);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьСрокДействияДокументаПродолжение",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия",
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияДокументаПродолжение(Результат, Параметры) Экспорт 

	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ДатаНачалаДействия = Результат.ДатаНачалаДействия;
		Объект.ДатаОкончанияДействия = Результат.ДатаОкончанияДействия;
		Объект.Бессрочный = Результат.Бессрочный;
		Объект.ПорядокПродления = Результат.ПорядокПродления;
		СрокДействияДокументИсточникИзменения = Результат.ДокументИсточникИзменения;
		СрокДействияКомментарий = Результат.Комментарий;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Модифицированность = Истина;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

&НаСервере
Функция СрокДействияЗаполнен()
	
	Возврат ЗначениеЗаполнено(Объект.ДатаНачалаДействия)
	Или Объект.Бессрочный
	Или ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)
	Или ЗначениеЗаполнено(Объект.ПорядокПродления);
	
КонецФункции

&НаСервере
Функция СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НачальныеЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущийОбъект.ДатаНачалаДействия <> НачальныеЗначенияРеквизитов[0].ДатаНачалаДействия
	Или ТекущийОбъект.Бессрочный <> НачальныеЗначенияРеквизитов[0].Бессрочный
	Или ТекущийОбъект.ДатаОкончанияДействия <> НачальныеЗначенияРеквизитов[0].ДатаОкончанияДействия
	Или ТекущийОбъект.ПорядокПродления <> НачальныеЗначенияРеквизитов[0].ПорядокПродления
	Или ПараметрыЗаписи.СрокДействияДокументИсточникИзменения <> НачальныеЗначенияРеквизитов[0].СрокДействияДокументИсточникИзменения
	Или ПараметрыЗаписи.СрокДействияКомментарий <> НачальныеЗначенияРеквизитов[0].СрокДействияКомментарий;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСтатьиДДС(ДокументОснование = Неопределено)
	
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Элементы.СтраницыСтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	
	Если ВестиУчетПоСтатьямДДС Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда // прочтем статьи самого документа
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				Объект.Ссылка, СтатьиДвиженияДенежныхСредств);
			НеПроверятьЗаполнениеСтатейДДС = (СтатьиДвиженияДенежныхСредств.Количество() = 0);
		ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда // скопируем статьи основания
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				ДокументОснование, СтатьиДвиженияДенежныхСредств);
		КонецЕсли;
			
	КонецЕсли;
	
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСтатейДДС()
	
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Элементы.ПредставлениеСтатейДДС.ОтметкаНезаполненного = (КоличествоСтатей = 0);
	Если КоличествоСтатей <= 1 Тогда
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьяДДС;
		Если КоличествоСтатей = 1 Тогда
			ПредставлениеСтатейДДС = Строка(СтатьиДвиженияДенежныхСредств[0].СтатьяДвиженияДенежныхСредств);
		Иначе
			ПредставлениеСтатейДДС = "";
		КонецЕсли;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Истина;
	Иначе
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница= Элементы.СтраницаСтатьиДДС;
		Результат = "";
		Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли;
			Результат = Результат + Строка(Строка.СтатьяДвиженияДенежныхСредств);
		КонецЦикла;
		ПредставлениеСтатейДДС = Результат;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд для поля ФайлыДобавленные (видно при создании по шаблону)
&НаСервере
Процедура УстановитьДоступностьКомандФайлыДобавленные()
	
	СозданИзШаблона = Истина;
	РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданИзШаблона);
	РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданИзШаблона);
	
	Элементы.РедактироватьДобавленныйФайл.Доступность = РазрешеноРедактирование;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Доступность = РазрешеноРедактирование;
	Элементы.ФайлыДобавленныеУдалить.Доступность = РазрешеноУдаление;
	Элементы.ФайлыДобавленныеКонтекстноеМенюУдалить.Доступность = РазрешеноУдаление;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// Работа с инструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 102);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиентПродолжениеПослеВыбораТипаСвязи(ТипСвязи, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ОкноВыбораТипаСвязиПоказано", Истина);
	Если ТипЗнч(ТипСвязи) = Тип("СправочникСсылка.ТипыСвязей")
		И ЗначениеЗаполнено(ТипСвязи) Тогда
		СвязиДокументов.УстановитьСвязь(Объект.Ссылка, Неопределено, Основание, ТипСвязи);
		ПрочитатьСвязи();
		ЗаполнитьСвязи();
  		Если ЯвляетсяКомплектом И ТипСвязи = ТипСвязиСодержит Тогда 
			РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, Основание);
		КонецЕсли;	
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", Основание);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия, ЭтаФорма);		
	КонецЕсли;
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлНаУдаление(Файл, ЗначениеПометкиУдаления)
	
	ОбъектФайл = Файл.ПолучитьОбъект();
	ОбъектФайл.Заблокировать();
	ОбъектФайл.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
	ОбъектФайл.Разблокировать();
	
	Если Не ПоказыватьУдаленныеФайлы Тогда 
		ЗаполнитьСписокФайлов();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункции_1С_Минск
//{{1С-Минск

&НаСервере
Функция ПолучитьРеквизитыАктаВыполненныхРабот(Акт) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС,
		|	мРеквизитыАктовВыполненныхРабот.СуммаНДС,
		|	мРеквизитыАктовВыполненныхРабот.ОсвобождениеОтНДС,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта,
		|	мРеквизитыАктовВыполненныхРабот.ВидАкта
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Акт
		|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Акт", Акт);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Реквизиты = Новый Структура();
	
	Если Результат.Количество() > 0 Тогда
		Для й=0 По Результат.Колонки.Количество()-1 Цикл
			ИмяРеквизита = Результат.Колонки[й].Имя;
			Значение = Результат[0][ИмяРеквизита];
			Реквизиты.Вставить(ИмяРеквизита, Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Реквизиты;
КонецФункции
 
&НаСервере
Процедура УправлениеВидимостьюДобавленныхРеквизитов()
    ВидДок = Объект.ВидДокумента;
	Элементы.КонтактноеЛицо.Видимость = Не НесколькоКонтрагентов;
	Элементы.ПодписалОтКорреспондента.Видимость = Не НесколькоКонтрагентов;
	Элементы.мВнесеноЗис.Видимость = Ложь;
	Элементы.мКомментарийЗИС.Видимость = Ложь;
	
	Если ВидДок = Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот Тогда
		М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитыАктВыполненныхРабот(Объект, ЭтаФорма, Элементы);
		РеквАкта = ПолучитьРеквизитыАктаВыполненныхРабот(Объект.Ссылка);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквАкта);
		
        Если Элементы.Найти("ЭтапДоговора") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитЭтапДоговора(Объект, ЭтаФорма, Элементы);
		КонецЕсли; 
		
		// Скрытие лишнего реквизита
        Если Элементы.Найти("НашРасчетныйСчет") <> Неопределено Тогда
			Элементы.НашРасчетныйСчет.Видимость = Ложь;
        КонецЕсли; 
       
        Элементы.ЭтапДоговора.Видимость = Истина;
		Элементы.СостояниеТекст.Видимость = Ложь;
		
	ИначеЕсли ВидДок = Справочники.ВидыВнутреннихДокументов.Дело Тогда
        Если Элементы.Найти("мСостояниеДела") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитыДела(Объект, ЭтаФорма, Элементы);
        Иначе
            Элементы.мСостояниеДела.Видимость = Истина;
            Элементы.мСистемаКоординат.Видимость = Истина;
            Элементы.мНомерГеопортала.Видимость = Истина;
			//Элементы.мНомерТехархива.Видимость = Истина;
            Элементы.мИнвентарныйНомерТехархива.Видимость = Истина;
        КонецЕсли; 
        
        Если Элементы.Найти("ЭтапДоговора") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитЭтапДоговора(Объект, ЭтаФорма, Элементы);
        КонецЕсли; 
		
		Элементы.мВнесеноЗИС.Видимость = Истина;
		Элементы.мВнесеноЗИС.Доступность = ДокументооборотПраваДоступа.ЕстьРоль("мИмеютПравоВнесенияДелаВЗИС");
		Элементы.мКомментарийЗИС.Видимость = Истина;
		Элементы.мКомментарийЗИС.Доступность = мВнесеноЗИС;
		
		Элементы.ЭтапДоговора.Видимость = Истина;
		// Скрытие лишних реквизитов
		Элементы.ДелоТекст.Видимость = Ложь;
		Элементы.СостояниеТекст.Видимость = Ложь;
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		Элементы.ПодписалОтКорреспондента.Видимость = Ложь;
		 
	ИначеЕсли ВидДок = Справочники.ВидыВнутреннихДокументов.ДелоУслуги Тогда
		
		Если Элементы.Найти("мЗаказчик") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитыДелаУслуги(Объект, ЭтаФорма, Элементы);
		Иначе
			Элементы.мЗаказчик.Видимость = Истина;
			Элементы.мНомерДелаЗаказчика.Видимость = Истина;
			Элементы.мДатаДелаЗаказчика.Видимость = Истина;
			Элементы.мПроверил.Видимость = Истина;
			Элементы.мОбъектРабот.Видимость = Истина;
			Элементы.мВидРабот.Видимость = Истина;
		КонецЕсли; 
		
        Если Элементы.Найти("ЭтапДоговора") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитЭтапДоговора(Объект, ЭтаФорма, Элементы);
        КонецЕсли; 
        
        Элементы.ЭтапДоговора.Видимость = Истина;
		
		// Скрытие лишних реквизитов
		Элементы.Подготовил.Видимость = Ложь;
		Элементы.Утвердил.Видимость = Ложь;
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		Элементы.ПодписалОтКорреспондента.Видимость = Ложь;
		
	ИначеЕсли ВидДок = Справочники.ВидыВнутреннихДокументов.Нормализация Тогда
		// Показ
		Элементы.Подготовил.Видимость = Истина;
		Элементы.Утвердил.Видимость = Истина;
		Элементы.Папка.Видимость = Истина;
		Элементы.ГрифДоступа.Видимость = Истина;
		Элементы.ВопросДеятельности.Видимость = Истина;
		
		// Скрытие лишних реквизитов
		Элементы.КонтактноеЛицо.Видимость = Ложь;
		Элементы.ПодписалОтКорреспондента.Видимость = Ложь;
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.Адресат.Видимость = Ложь;
		Элементы.ГруппаУтверждение.Видимость = Ложь;
		//Элементы.ГруппаСрокДействияСтрока.Видимость = Ложь;
		//Элементы.ГруппаХранение.Видимость = Ложь;
		
	ИначеЕсли Лев(ВидДок, 18) = "Кадастровая оценка" Тогда
        Если Элементы.Найти("ЭтапДоговора") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитЭтапДоговора(Объект, ЭтаФорма, Элементы);
        КонецЕсли; 
        
        Элементы.ЭтапДоговора.Видимость = Истина;
	КонецЕсли; 
    
    Если ВидДок.Родитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот Тогда
        Элементы.СрокИсполнения.Видимость = Ложь;
		Если Параметры.Свойство("ШаблонДокумента") И Параметры.ШаблонДокумента <> Неопределено И
			Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
			Если ЗначениеЗаполнено(Параметры.ШаблонДокумента.Папка) Тогда
				Объект.Папка = Параметры.ШаблонДокумента.Папка;
			Иначе
				Объект.Папка = Справочники.ПапкиВнутреннихДокументов.мДоговоры;
			КонецЕсли; 
		Иначе
			Объект.Папка = Справочники.ПапкиВнутреннихДокументов.мДоговоры;
		КонецЕсли; 
		
		// Если это договор на основании Поручения, то Подразделение из поручения
		Если ЗначениеЗаполнено(Основание) Тогда
			Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда  
				Если Найти(Основание.ВидДокумента.Наименование, "Поручение") > 0 Тогда
					Объект.Подразделение = Основание.Подразделение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если Элементы.Найти("мДатаНачалаДействияДокумента") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитДатаНачалаДействияДокумента(ЭтаФорма, Элементы);
		Иначе
			Элементы.мДатаНачалаДействияДокумента.Видимость = Истина;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ДатаНачалаДействия = ТекущаяДатаСеанса();
			Объект.Бессрочный = Истина;
		КонецЕсли; 
		Элементы.ГруппаСрокДействияСтрока.Видимость = Истина;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
			
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		Если Элементы.Найти("СоздатьАктВыполненныхРабот") = Неопределено Тогда
			Если ДокументооборотПраваДоступа.ЕстьРоль("мРаботаСАктамиВыполненныхРабот",,ТекущийПользователь) Тогда
				// Создание кнопки "Создать Акт выполненных работ" 
				М_УправлениеФормамиДОРБСервер.СоздатьКнопку(ЭтаФорма, Элементы, "СоздатьАктВыполненныхРабот", "СоздатьАктВыполненныхРабот", "Создать Акт вып. работ", 
				БиблиотекаКартинок.СоздатьЭлементСписка, ОтображениеКнопки.КартинкаИТекст,
				ЭтаФорма.КоманднаяПанель);
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.Найти("СоздатьДело") = Неопределено Тогда
			// Создание кнопки "Создать дело" 
			М_УправлениеФормамиДОРБСервер.СоздатьКнопку(ЭтаФорма, Элементы, "СоздатьДело", "СоздатьДело", "Создать дело", 
			БиблиотекаКартинок.СоздатьЭлементСписка, ОтображениеКнопки.КартинкаИТекст,
			ЭтаФорма.КоманднаяПанель);
		КонецЕсли;
		
		Если Элементы.Найти("мДокументыВозвращеныЗаказчику") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитмДокументыВозвращеныЗаказчику(ЭтаФорма, Элементы);
		Иначе
			Элементы.мДокументыВозвращеныЗаказчику.Видимость = Истина;
		КонецЕсли; 
		Элементы.мДокументыВозвращеныЗаказчику.Доступность = Объект.НеДействует;
		
		Если Элементы.Найти("СостояниеДоговора") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьПолеФормыСостояниеДоговора(ЭтаФорма, Элементы);
		Иначе
			Элементы.СостояниеДоговора.Видимость = Истина;
		КонецЕсли;
		
        Если Элементы.Найти("НашРасчетныйСчет") = Неопределено Тогда
            М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитНашРасчетныйСчет(ЭтаФорма, Элементы, "НашРасчетныйСчет", "Расчетный счет", Объект, Элементы.ГруппаОрганизация, Элементы.Утвердил);;
        КонецЕсли; 
		Элементы.НашРасчетныйСчет.Видимость = Истина;
		
		Если Объект.Ссылка.Пустая() Тогда
			ЭтаФорма["СостояниеДоговора"] = Перечисления.мСостоянияДоговоров.Проект;
		КонецЕсли; 
		
	ИначеЕсли ВидДок.Родитель = Справочники.ВидыВнутреннихДокументов.ДопСоглашения Тогда
		Если Параметры.Свойство("ШаблонДокумента") И Параметры.ШаблонДокумента <> Неопределено И
			Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
			Если ЗначениеЗаполнено(Параметры.ШаблонДокумента.Папка) Тогда
				Объект.Папка = Параметры.ШаблонДокумента.Папка;
			Иначе
				Объект.Папка = Справочники.ПапкиВнутреннихДокументов.мДопСоглашения;
			КонецЕсли; 
		Иначе
			Объект.Папка = Справочники.ПапкиВнутреннихДокументов.мДопСоглашения;
		КонецЕсли; 
		
		Если Элементы.Найти("мДатаНачалаДействияДокумента") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьРеквизитДатаНачалаДействияДокумента(ЭтаФорма, Элементы);
		Иначе
			Элементы.мДатаНачалаДействияДокумента.Видимость = Истина;
		КонецЕсли;
		
 		// Скрытие лишнего реквизита
        Если Элементы.Найти("НашРасчетныйСчет") <> Неопределено Тогда
			Элементы.НашРасчетныйСчет.Видимость = Ложь;
        КонецЕсли; 
		
		Если Элементы.Найти("СостояниеДоговора") = Неопределено Тогда
			М_УправлениеФормамиДОРБСервер.ДобавитьПолеФормыСостояниеДоговора(ЭтаФорма, Элементы);
		Иначе
			Элементы.СостояниеДоговора.Видимость = Истина;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ДатаНачалаДействия = ТекущаяДатаСеанса();
			Объект.Бессрочный = Истина;
		КонецЕсли; 
		Элементы.ГруппаСрокДействияСтрока.Видимость = Истина;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);

	КонецЕсли;
		
	Если ВидДок = Справочники.ВидыВнутреннихДокументов.ДоговорКонтрольКачества Тогда
		Если Элементы.Найти("КнопкаСоздатьДелоТехАрхив") <> Неопределено Тогда
			Элементы.КнопкаСоздатьДелоТехАрхив.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Перезаполнение расчетного счета в соответствии с выбранным видом документа
	ЗаполнитьНашРасчетныйСчет();
	
КонецПроцедуры 

&НаКлиенте
Процедура НоменклатураДелПриИзменении(Элемент)
    // Если документ зарегистрирован - надо его перерегистрировать с новой номенклатурой
    ИзменитьРегистрационныйНомерНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьРегистрационныйНомерНаСервере()
    СформироватьСтроковыйНомерДокумента(Объект);
КонецПроцедуры // ИзменитьРегистрационныйНомерНаСервере()

&НаКлиенте
Процедура мДатаНачалаДействияДокументаПриИзменении(Элемент)
    // Если изменяется дата начала действия документа - если есть этапы, то может быть изменен плановый срок
    //ЗаписатьРеквизитыЭтаповДоговораНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДело()
	
	Если Объект.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ДоговорКонтрольКачества") Тогда
		СоздатьДелоУслуги();
		Возврат;
	КонецЕсли; 
	
	СписокЭтапов = мРаботаСДоговорами.ПолучитьСписокЭтаповДоговора(Объект.Ссылка, "Дело");
    
    Если СписокЭтапов.Количество() = 1 Тогда
        ВыбЭлемент = СписокЭтапов[0];
    Иначе
        ВыбЭлемент = СписокЭтапов.ВыбратьЭлемент("Выберите этап договора", );
    КонецЕсли; 
    
    Если ВыбЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли; 
                               
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", ВыбЭлемент.Значение);
    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.Дело"));
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДелоУслуги()

    СписокЭтапов = мРаботаСДоговорами.ПолучитьСписокЭтаповДоговора(Объект.Ссылка, "ДелоУслуги");
    
    Если СписокЭтапов.Количество() = 1 Тогда
        ВыбЭлемент = СписокЭтапов[0];
    Иначе
        ВыбЭлемент = СписокЭтапов.ВыбратьЭлемент("Выберите этап договора", );
    КонецЕсли; 
    
    Если ВыбЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли; 
    
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", ВыбЭлемент.Значение);
    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ДелоУслуги"));
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДелоТехАрхив()

    СписокЭтапов = мРаботаСДоговорами.ПолучитьСписокЭтаповДоговора(Объект.Ссылка, "ОбъектРабот");
    
    Если СписокЭтапов.Количество() = 1 Тогда
        ВыбЭлемент = СписокЭтапов[0];
    Иначе
        ВыбЭлемент = СписокЭтапов.ВыбратьЭлемент("Выберите объект работ договора", );
    КонецЕсли; 
    
    Если ВыбЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли; 
    
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", ВыбЭлемент.Значение);
    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.КадастроваяОценка"));
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктПроверки()

    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
    
    ОткрытьФорму("Справочник.мАктыПроверки.ФормаОбъекта", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСправку()
	Если Модифицированность Тогда
		Ответ = Вопрос("Для создания Справки проверки дело будет записано! Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		Попытка
		
			Записать();
		
		Исключение
		
		КонецПопытки;
	КонецЕсли; 
	
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
    
    ОткрытьФорму("Справочник.мСправкиПроверки.ФормаОбъекта", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктВыполненныхРабот()

    СписокЭтапов = мРаботаСДоговорами.ПолучитьСписокЭтаповДоговора(Объект.Ссылка, "Акт");
    
    Если СписокЭтапов.Количество() = 1 Тогда
        ВыбЭлемент = СписокЭтапов[0];
    Иначе
        ВыбЭлемент = СписокЭтапов.ВыбратьЭлемент("Выберите этап договора", );
    КонецЕсли; 
    
    Если ВыбЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли; 
	
	ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", ВыбЭлемент.Значение);
    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот"));
    ПараметрыФормы.Вставить("ВидАкта", ПредопределенноеЗначение("Перечисление.мВидыАктовВыполненныхРабот.Обычный"));
    ПараметрыФормы.Вставить("СостояниеАкта", ПредопределенноеЗначение("Перечисление.мСостоянияАктовВыполненныхРабот.Черновик"));
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПроверку()
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	// Контроль на заполненность Подразделения
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для запуска процесса надо указать Подразделение!";
		Сообщение.Поле = "Объект.Подразделение";
		//Сообщение.УстановитьДанные();
		Сообщение.Сообщить(); 
		Возврат;
    КонецЕсли; 
    
    // Получить следУровеньПроверки, что бы понять какой шаблон БП использовать
	УровеньОтряд = ПредопределенноеЗначение("Перечисление.мУровниПроверки.Отряд");
    ТекУровеньПроверки = ПредопределенноеЗначение("Перечисление.мУровниПроверки.Исполнитель");
    ТекИсполнитель = ПользователиКлиентСервер.ТекущийПользователь();
    Подразделение = РаботаСПользователями.ПолучитьПодразделение(ТекИсполнитель);
    ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(Объект.Ссылка, ТекУровеньПроверки, Подразделение);
    СледУровеньПроверки = мПроверкаДела.ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса);
	
	Если СледУровеньПроверки = УровеньОтряд Тогда
		// выбор уровня проверки Отряд/Отдел
		ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(Объект.Ссылка, УровеньОтряд, Подразделение);
		СледУровеньПроверкиДляОтряда = мПроверкаДела.ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса);
		СписокУровней = Новый СписокЗначений;
		СписокУровней.Добавить(УровеньОтряд, Строка(УровеньОтряд));
		СписокУровней.Добавить(СледУровеньПроверкиДляОтряда, Строка(СледУровеньПроверкиДляОтряда));
		
		ВыбЭлемент = СписокУровней.ВыбратьЭлемент("Выберите уровень проверки", УровеньОтряд);
	    Если ВыбЭлемент <> Неопределено Тогда
			СледУровеньПроверки = ВыбЭлемент.Значение;
		КонецЕсли; 
	КонецЕсли; 
    
    мПроверкаДела.СтартоватьПроцессПроверкиДела(Объект.Ссылка, СледУровеньПроверки, ,ТекИсполнитель);
    
    // Запись состояния дела
    Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.НаправленоНаПроверку");
    мПроверкаДела.ЗаписатьСостояниеДела(Объект.Ссылка, Состояние, ТекущаяДата(), Подразделение, ТекИсполнитель, ТекУровеньПроверки);  
    
    ПоказатьОповещениеПользователя("Дело "+Объект.РегистрационныйНомер+" отправлено на проверку!");
  	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПроверкиДела(Предмет)
    УстановитьПривилегированныйРежим(Истина);
	ЗадачаПроверкиДела = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Ссылка,
		|	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.ГлавнаяЗадача,
		|	ЗадачаИсполнителяПредметы.Ссылка.ПринятаКИсполнению
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И ЗадачаИсполнителяПредметы.Ссылка.ПринятаКИсполнению
		|	И ТИПЗНАЧЕНИЯ(ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс) = ТИП(БизнесПроцесс.Согласование)
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Отменена
		|	И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса <> &СостояниеБизнесПроцессаПрерван
		|	И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса <> &СостояниеБизнесПроцессаОстановлен";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("СостояниеБизнесПроцессаПрерван", Перечисления.СостоянияБизнесПроцессов.Прерван);
	Запрос.УстановитьПараметр("СостояниеБизнесПроцессаОстановлен", Перечисления.СостоянияБизнесПроцессов.Остановлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗадачаПроверкиДела = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат ЗадачаПроверкиДела;
КонецФункции // ()

// Сохраняет скан в 2 места сразу, в общий архив и в каталог с районом
&НаКлиенте
Процедура СохранитьДелоВАрхив(ПараметрыСохранения)
	ФайлДела = ПараметрыСохранения.Файл;
	ПутьСохранения = ПараметрыСохранения.ПутьКАрхивуФайлов;
	ПутьКаталогРайонаПоУмолчанию = ПараметрыСохранения.РайонПоУмолчаниюДляСкановДел;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;

	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	ИмяФайла = ТекущиеДанные.Наименование;
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
	|Пожалуйста, подождите.'"),
	ИмяФайла,
	ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстСостояния);
	
	// Сохраним Файл из БД на диск

	// Путь к общему архиву
	КаталогНаДиске = Новый Файл(ПутьСохранения);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьСохранения);				
	КонецЕсли; 
	
	// Запись в общий архив
	ПолноеИмяФайла = Строка(ПутьСохранения + "\" + ТекущиеДанные.Наименование + "." + ТекущиеДанные.Расширение);
	ПолучитьФайл(АдресФайла, ПолноеИмяФайла, Ложь);
	
	// Путь к каталогу района по умолчанию не заполнен - файл сохранять не надо
	Если Не ЗначениеЗаполнено(ПутьКаталогРайонаПоУмолчанию) Тогда
		Возврат;
	КонецЕсли; 
	
	//ПутьСохраненияРайонОбщий = ПутьСохранения + "\" + КаталогРайонаПоУмолчанию;
	КаталогНаДискеРайон = Новый Файл(ПутьКаталогРайонаПоУмолчанию);
	Если Не КаталогНаДискеРайон.Существует() Тогда
		СоздатьКаталог(ПутьКаталогРайонаПоУмолчанию);				
	КонецЕсли; 
	
	// Путь к каталогу конкретного района, если его удалось определить
	КаталогРайона = мРаботаСДоговорами.ПолучитьИмяРайона(Объект.ЭтапДоговора);
	Если ЗначениеЗаполнено(КаталогРайона) Тогда
		ПутьКаталогРайонаПоУмолчанию = ПутьКаталогРайонаПоУмолчанию + "\" + КаталогРайона;
		КаталогНаДискеРайон = Новый Файл(ПутьКаталогРайонаПоУмолчанию);
		Если Не КаталогНаДискеРайон.Существует() Тогда
			СоздатьКаталог(ПутьКаталогРайонаПоУмолчанию);				
		КонецЕсли; 
	КонецЕсли; 
	
	// Запись в каталог района
	ПолноеИмяФайла = Строка(КаталогНаДискеРайон.ПолноеИмя + "\" + ТекущиеДанные.Наименование + "." + ТекущиеДанные.Расширение);
	ПолучитьФайл(АдресФайла, ПолноеИмяФайла, Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура мПечатьРаспискиВПолученииТехАрхив(Команда)
	//Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли; 
	
	УсловияОтбора = Новый Структура("ДокументДляПечати", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина); 
	ОткрытьФорму("Отчет.мПечатьРаспискиВПолученииТехАрхив.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура мПроверилПриИзменении(Команда)
	Если ЗначениеЗаполнено(Объект.мПроверил) Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.мПроверил);
	КонецЕсли;	
КонецПроцедуры // мПроверилПриИзменении

&НаКлиенте
Процедура мВидРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьВидДляВыбораДляВидаРабот(Элемент);
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.мВидыРаботЮрЛица")) Тогда
		ВидЛиц = "ЮрЛиц";	
	Иначе
		ВидЛиц = "ФизЛиц";	
	КонецЕсли; 
	ДанныеВыбора = мРаботаСДоговорами.ПолучитьВидыРаботДляВыбора(ПараметрыОтбора, ВидЛиц);
КонецПроцедуры

&НаКлиенте
Процедура мВидРаботСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.мВидыРаботЮрЛица")) Тогда
		ИмяФормыВыбора = "РегистрСведений.мАктуальныеВидыРаботЮрЛиц.Форма.ФормаСоздания";	
	Иначе
		ИмяФормыВыбора = "РегистрСведений.мАктуальныеВидыРаботФизЛиц.Форма.ФормаСоздания";	
	КонецЕсли; 
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидДляВыбораДляВидаРабот(ЭлементВидРабот = "")
	Если ЭлементВидРабот = "" Тогда
		ИскЭлемент = Элементы.Найти("мВидРабот");
	Иначе
		ИскЭлемент = ЭлементВидРабот;
	КонецЕсли; 
	
	МассивТипов=Новый Массив();
	Если ЗначениеЗаполнено(Объект.мЗаказчик) и мРаботаСДоговорами.ЭтоФизЛицо(Объект.мЗаказчик) Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.мВидыРаботФизЛица"));
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.мВидыРаботЮрЛица"));
	КонецЕсли;	
	ИскЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);

КонецПроцедуры // 	УстановитьВидДляВыбораДляВидаРабот()

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты)
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции // ПолучитьЗначениеКонстанты("мПутьКАрхивуФайлов")()

&НаКлиенте
Процедура ДобавитьСкан()
	ОчиститьСообщения();
	
	Если Модифицированность или Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли; 
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	Настройки = мРазное.ПолучитьНастройкиСканированияДел(ИдентификаторКлиента);
	
	Если мРазное.НастройкиСканированияДелНеЗаполнены(Настройки) Тогда
		Возврат;	
	КонецЕсли; 
	
	КаталогНаДиске = Настройки.КаталогНаДиске;
	СохранятьВАрхив = Настройки.СохранятьВАрхив;
	ПутьКАрхивуФайлов = Настройки.ПутьКАрхивуФайлов;
	РайонПоУмолчаниюДляСкановДел = Настройки.РайонПоУмолчаниюДляСкановДел;
	
//  ПараметрыДобавления - Структура:
//       * ОбработчикРезультата - ОписаниеОповещения, Неопределено
//             - Описание процедуры, принимающей результат работы метода.
//       * ПолноеИмяФайла - Строка - Необязательный. Полный путь и имя файла на клиенте.
//             Если не указан, то будет открыт диалог для выбора файла.
//       * ВладелецФайла - ЛюбаяСсылка - владелец файла.
//       * ФормаВладелец - УправляемаяФорма из которой вызвано создание файла.
//       * НеОткрыватьКарточкуПослеСозданияИзФайла - Булево
//             - Истина когда карточка файла не открывается после создания.
//       * ИмяСоздаваемогоФайла - Строка - Необязательный. Новое имя файла.
	
	НайденныеФайлы = НайтиФайлы(КаталогНаДиске, "*.*");
	Для Каждого ФайлВложенный Из НайденныеФайлы Цикл
		
		ВладелецФайла = Объект.Ссылка;
		ДопПараметрыВыполнения = Новый Структура;
		ДопПараметрыВыполнения.Вставить("ПолноеИмяФайла", ФайлВложенный.ПолноеИмя);
		ДопПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
		ДопПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
		ДопПараметрыВыполнения.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
		ИмяСоздаваемогоФайла = мРаботаСДоговорами.СоздатьИмяФайлаДляДела(Объект.Ссылка); 
		ДопПараметрыВыполнения.Вставить("ИмяСоздаваемогоФайла", ИмяСоздаваемогоФайла);
		ДопПараметрыВыполнения.Вставить("ЭтоДело", Истина);
		ДопПараметрыВыполнения.Вставить("СохранятьВАрхив", СохранятьВАрхив);
		ДопПараметрыВыполнения.Вставить("ПутьКАрхивуФайлов", ПутьКАрхивуФайлов);
		ДопПараметрыВыполнения.Вставить("РайонПоУмолчаниюДляСкановДел", РайонПоУмолчаниюДляСкановДел);
	
		Попытка
			РежимСоздания = 2;  // из файловой системы
			ДобавлениеОригинала = Ложь;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала,
				, , , Истина, ДопПараметрыВыполнения);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
		
		УдалитьФайлы(ФайлВложенный.ПолноеИмя);
		
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПодразделениеИзПоручения()

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		Если Найти(Основание.ВидДокумента.Наименование, "Поручение") > 0 Тогда
			Объект.Подразделение = Основание.Подразделение;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьПодразделениеИзПоручения()

&НаКлиенте
Процедура мОбъектРаботПриИзменении(Элемент)
	СформироватьЗаголовокДелаУслуги();	
КонецПроцедуры 

&НаКлиенте
Процедура мОбъектРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.мЗаказчик) Тогда
	    СтандартнаяОбработка = Ложь;
	    ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", Новый Структура("Владелец", Объект.мЗаказчик), Истина);
	    ОткрытьФорму("Справочник.мОбъектыРабот.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура ЭтапДоговораПриИзменении(Элемент)
	СформироватьЗаголовокДелаУслуги();	
КонецПроцедуры // мПроверилПриИзменении

&НаКлиенте
Процедура ЭтапДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.мЭтапыДоговоров") Тогда
			Договор = Основание.Владелец;
		КонецЕсли; 
	Иначе	
		Договор = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, ПредопределенноеЗначение("Справочник.ТипыСвязей.ОтноситсяКДоговору"));	
	КонецЕсли; 

	Если ЗначениеЗаполнено(Договор) Тогда
	    СтандартнаяОбработка = Ложь;
	    ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", Новый Структура("Владелец", Договор), Истина);
	    ОткрытьФорму("Справочник.мЭтапыДоговоров.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли; 
КонецПроцедуры 

&НаСервере
Процедура СформироватьЗаголовокДелаУслуги() 
	Если Объект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДелоУслуги Тогда
		Объект.Заголовок = Объект.РегистрационныйНомер + " " + Объект.ЭтапДоговора.Наименование + " " + Объект.мОбъектРабот.ПолноеНаименование;
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура КорреспондентыПослеУдаления(Элемент)
	ОбработатьзакладкуКорреспонденты();
КонецПроцедуры

&НаКлиенте
Процедура ИнвесторыПослеУдаления(Элемент)
	ОбработатьзакладкуКорреспонденты();
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбработатьзакладкуКорреспонденты();
КонецПроцедуры

&НаКлиенте
Процедура ИнвесторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбработатьзакладкуКорреспонденты();
КонецПроцедуры

// Обновление заголовка страницы Контрагенты
&НаКлиенте
Процедура ОбработатьзакладкуКорреспонденты() 
	Результат = СформироватьЗаголовокКорреспондентыИнвесторы(Объект.Корреспонденты.Количество(), Объект.Инвесторы.Количество());
	Если Результат = "Отказ" Тогда
		Элементы.ГруппаКорреспонденты.Видимость = Ложь;	
	Иначе	
		Элементы.ГруппаКорреспонденты.Заголовок = Результат;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ИнвесторыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Инвесторы.ТекущиеДанные;
		Если ТекДанные.НомерСтроки = 1 Тогда
			ТекДанные.Процент = 100;
		КонецЕсли; 	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДатуВозвратаАкта(Команда, КодЭтапа)
	ДатаВозвратаАкта = ТекущаяДата();
	Если ВвестиДату(ДатаВозвратаАкта, "Введите дату возврата", ЧастиДаты.Дата) Тогда
		ЗаписатьДатуВозвратаАкта(КодЭтапа, ДатаВозвратаАкта);
		//Оповестить("Изменен этап договора");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДатуВозвратаАкта(КодЭтапа, ДатаВозвратаАкта)
	ИскЭтап = Справочники.мЭтапыДоговоров.НайтиПоКоду(КодЭтапа);
	Если ЗначениеЗаполнено(ИскЭтап) Тогда
		ЭтапДоговораОбъект = ИскЭтап.ПолучитьОбъект();
		ЭтапДоговораОбъект.ДатаВозвратаАкта = ДатаВозвратаАкта;
		ЭтапДоговораОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ЭтапДоговораОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать этап договора "+ИскЭтап+"! "+ОписаниеОшибки();
			Сообщение.Сообщить(); 
		КонецПопытки; 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось найти этап договора с кодом "+КодЭтапа+"!";
		Сообщение.Сообщить(); 
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура СуммаПриИзменении() 
	Модифицированность = Истина;
	ЗначениеСтавкиНДС = мРаботаСоСметами.ПолучитьРеквСтавкиНДС(ЭтаФорма.СтавкаНДС).Ставка;
	ЭтаФорма.СуммаНДС = Объект.Сумма / (100 + ЗначениеСтавкиНДС)*ЗначениеСтавкиНДС;
КонецПроцедуры 

&НаКлиенте
Процедура СуммаНДСПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура СтавкаНДСПриИзменении() 
	Модифицированность = Истина;
	ЗначениеСтавкиНДС = мРаботаСоСметами.ПолучитьРеквСтавкиНДС(ЭтаФорма.СтавкаНДС).Ставка;
	ЭтаФорма.СуммаНДС = Объект.Сумма / (100 + ЗначениеСтавкиНДС)*ЗначениеСтавкиНДС;
КонецПроцедуры 

&НаКлиенте
Процедура ВрученЗаказчикуПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ВозвращенПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура НашРасчетныйСчетПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура НашРасчетныйСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	    СтандартнаяОбработка = Ложь;
	    ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", Новый Структура("Владелец", Объект.Организация), Истина);
	    ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОсвобождениеОтНДСПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура СостояниеАктаПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ВидАктаПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура мВнесеноЗИСПриИзменении()
	
	Если мВнесеноЗИС Тогда
		мКомментарийЗИС = мКомментарийЗИС + ?(ЗначениеЗаполнено(мКомментарийЗИС), Символы.ПС, "")+
			Формат(ТекущаяДата(), "ДЛФ=D")+ " - Земельный участок внесен в ЗИС. "+ПолучитьПользователяКратко(ТекущийПользователь);
	Иначе	
		мКомментарийЗИС = мКомментарийЗИС + ?(ЗначениеЗаполнено(мКомментарийЗИС), Символы.ПС, "")+
			Формат(ТекущаяДата(), "ДЛФ=D")+ " - Земельный участок удален из ЗИС. "+ПолучитьПользователяКратко(ТекущийПользователь);
	КонецЕсли; 	
	Элементы.мКомментарийЗИС.Доступность = мВнесеноЗИС; 
	
	ПараметрыЗаписи = Новый Структура("Дело, ВнесеноЗИС, КомментарийЗИС", Объект.Ссылка, мВнесеноЗИС, мКомментарийЗИС); 
	мПроверкаДела.ЗаписатьВнесениеЗИС(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеДоговораПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура мСостояниеПорученияПриИзменении() 
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура мКомментарийЗИСПриИзменении(Элемент)
	ПараметрыЗаписи = Новый Структура("Дело, ВнесеноЗИС, КомментарийЗИС", Объект.Ссылка, мВнесеноЗИС, мКомментарийЗИС); 
	мПроверкаДела.ЗаписатьВнесениеЗИС(ПараметрыЗаписи);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователяКратко(ТекПользователь)
	Возврат ТекПользователь.ПредставлениеВДокументах;	
КонецФункции
 
&НаКлиенте
Функция СформироватьЧисловойНомерПоРегистрационному(РегНомер)
	СтрокаЧисла = "";
	Числа = "0123456789";
	
	Для й=1 По СтрДлина(РегНомер) Цикл
		СимволРегНомер = Сред(РегНомер, й, 1);
		Если СтрНайти(Числа, СимволРегНомер) > 0 Тогда
			СтрокаЧисла = СтрокаЧисла + СимволРегНомер;					
	    Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокаЧисла = "" Тогда
		ЧисловойНомер = -1;
	Иначе	
	    ЧисловойНомер = Число(СтрокаЧисла);
	КонецЕсли; 
	
	Возврат ЧисловойНомер;
КонецФункции

&НаКлиенте
Процедура ОбновитьОбзор(Команда)
	ПолучитьОбзорДокумента();
КонецПроцедуры

&НаКлиенте
Процедура мПечатьРаспискиВПолучении()
	//Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли; 
	
	УсловияОтбора = Новый Структура("ДокументДляПечати", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина); 
	ОткрытьФорму("Отчет.мПечатьРаспискиВПолученииТехАрхив.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура УтвердилИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Утвердил = РаботаСПользователямиКлиент.ПолучитьПодписанта(Объект.Организация, Объект.ВидДокумента, Текст);
КонецПроцедуры

&НаКлиенте
Процедура ОобновитьОбзор(Команда)
	ПолучитьОбзорДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНашРасчетныйСчет()
	Если Элементы.Найти("НашРасчетныйСчет") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗаполнитьНашРасчетныйСчет();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНашРасчетныйСчет()
	Если Элементы.Найти("НашРасчетныйСчет") <> Неопределено Тогда
		БылРасчетныйСчет = ЭтаФорма["НашРасчетныйСчет"];

		Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Не ЗначениеЗаполнено(ЭтаФорма["НашРасчетныйСчет"]) Тогда
			// заполняем по правилам
			ЭтаФорма["НашРасчетныйСчет"] = мРаботаСДоговорами.ОпределитьНашРасчетныйСчет(Объект.Организация, Объект.ВидДокумента, ТекущаяДата());
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// заполняем из сохраненной записи
			ЭтаФорма["НашРасчетныйСчет"] = мРаботаСДоговорами.ПолучитьНашРасчетныйСчет(Объект.Ссылка);
			
		Иначе
			Если БылРасчетныйСчет <> ЭтаФорма["НашРасчетныйСчет"] Тогда
				Сообщить("Изменен расчетный счет! Был: "+БылРасчетныйСчет);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция РезультатПроверкиПриИзменении()
	Модифицированность = Истина;
КонецФункции  

&НаКлиенте
Процедура СоздатьОтчетНормализации()
	Если Модифицированность Тогда
		Записать();
	КонецЕсли; 

 	ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.Нормализация"));
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента", ПараметрыФормы);    

КонецПроцедуры

&НаКлиенте
Процедура мЗагрузкаПечатьОтчетаНормализации()
	Если Модифицированность Тогда
		Текст = "Для загрузки данных документ должен быть записан."+Символы.ПС+"Продолжать?";
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросЗагрузкиПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПродолжениеПослеВопросЗагрузкиПродолжение(Истина, "");	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузкиПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжениеПослеВопросЗагрузкиПродолжение",
			ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеПослеВопросЗагрузкиПродолжение(Результат, Параметры) Экспорт
	
 	ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
    ПараметрыФормы.Вставить("ДатаОтчета", Объект.ДатаРегистрации);
    ПараметрыФормы.Вставить("НомерОтчета", Объект.РегистрационныйНомер);
    ПараметрыФормы.Вставить("Подписал", Объект.Утвердил);
    
    ОткрытьФорму("Обработка.мЗагрузкаПечатьОтчетаНормализации.Форма.Форма", ПараметрыФормы);    
		
КонецПроцедуры

#КонецОбласти
