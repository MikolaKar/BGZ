#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации = '00010101';
	ДатаСоздания 	= ТекущаяДатаСеанса();
	Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
	Подготовил 		= ПользователиКлиентСервер.ТекущийПользователь();
	Подразделение 	= РаботаСПользователями.ПолучитьПодразделение(Подготовил);
	Утвердил		= Справочники.Пользователи.ПустаяСсылка();
		
	КоличествоЭкземпляров = 1;
	КоличествоЛистов 	 = 1;
	КоличествоПриложений = 0;
	ЛистовВПриложениях 	 = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
	ПодписанЭП = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если ЭтоНовый() Тогда 
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации = '00010101';
		ДатаСоздания 	= ТекущаяДатаСеанса();
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Подготовил 		= ПользователиКлиентСервер.ТекущийПользователь();
		Подразделение 	= РаботаСПользователями.ПолучитьПодразделение(Подготовил);
		
		КоличествоЭкземпляров = 1;
		КоличествоЛистов 	 = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях 	 = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		СрокИсполнения = '00010101';

		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;	

		Если ЗначениеЗаполнено(ВидДокумента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних",
			Новый Структура("ВидВнутреннегоДокумента", ВидДокумента)) Тогда
			Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Сначала заполняем данными шаблона - затем документа-основания.
	
	// Создание из шаблона
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		//заполнить данными из шаблона
		ОснованиеЗаполнения = ДанныеЗаполнения.Основание;
		СписокРеквизитовЗаполнения = "";
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		//Для Каждого АтрибутШаблона Из ОснованиеЗаполнения Цикл
		Для Каждого АтрибутШаблона Из ДанныеЗаполнения Цикл
			Если МетаданныеОбъекта.Реквизиты.Найти(АтрибутШаблона.Ключ) <> Неопределено
				И ЗначениеЗаполнено(АтрибутШаблона.Значение) Тогда
				Если ЗначениеЗаполнено(СписокРеквизитовЗаполнения) Тогда
					СписокРеквизитовЗаполнения = СписокРеквизитовЗаполнения + "," + АтрибутШаблона.Ключ;
				Иначе
					СписокРеквизитовЗаполнения = АтрибутШаблона.Ключ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СписокРеквизитовЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, СписокРеквизитовЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	// Создание внутренних документов на основании других внутренних документов.
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
	
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ОснованиеЗаполнения.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВопросДеятельности) Тогда
			ВопросДеятельности = ОснованиеЗаполнения.ВопросДеятельности;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Папка) Тогда
			Папка = ОснованиеЗаполнения.Папка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Корреспондент) Тогда
			Корреспондент = ОснованиеЗаполнения.Корреспондент;
		КонецЕсли;
		
		Корреспонденты.Очистить();
		Для каждого Строка Из ОснованиеЗаполнения.Корреспонденты Цикл				
			НоваяСтрока = Корреспонденты.Добавить();
			НоваяСтрока.Корреспондент = Строка.Корреспондент;
            НоваяСтрока.КонтактноеЛицо = Строка.КонтактноеЛицо;
			НоваяСтрока.ПодписалОтКорреспондента = Строка.ПодписалОтКорреспондента;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НоменклатураДел) Тогда
			НоменклатураДел = ОснованиеЗаполнения.НоменклатураДел;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = ОснованиеЗаполнения.КонтактноеЛицо;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрифДоступа) Тогда
			ГрифДоступа = ОснованиеЗаполнения.ГрифДоступа;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ОснованиеЗаполнения.Проект;
		КонецЕсли;
		
		Сумма = ОснованиеЗаполнения.Сумма;
		
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = ОснованиеЗаполнения.Валюта;
        КонецЕсли;
        
        //1С-Минск
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Если ОснованиеЗаполнения.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот Тогда
				Заголовок = ОснованиеЗаполнения.РегистрационныйНомер + " от " + Формат(ОснованиеЗаполнения.ДатаРегистрации, "ДФ=dd.MM.yy") + " " + ОснованиеЗаполнения.Заголовок;
			Иначе
				Заголовок = ОснованиеЗаполнения.Заголовок;   
			КонецЕсли; 
		КонецЕсли;
        //Конец 1С-Минск 
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") 
		Или ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ОснованиеЗаполнения.Заголовок;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ОснованиеЗаполнения.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВопросДеятельности) Тогда
			ВопросДеятельности = ОснованиеЗаполнения.ВопросДеятельности;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ОснованиеЗаполнения.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("Массив")
		И ОснованиеЗаполнения.Количество() > 0
		И ТипЗнч(ОснованиеЗаполнения[0]) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ОснованиеЗаполнения.Количество() = 1 И Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ОснованиеЗаполнения[0].ПолноеНаименование;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не ЗначениеЗаполнено(Проект) Тогда
			Проекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОснованиеЗаполнения, "Проект");
			Проект = Проекты.Получить(ОснованиеЗаполнения[0]);
			Для Каждого Строка Из Проекты Цикл
				Если Строка.Значение <> Проект Тогда 
					Проект = Неопределено;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеЗаполнения) Тогда
		
		ОснованиеЗаполненияОбъект = ОснованиеЗаполнения.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Содержание) Тогда
			Содержание = ОснованиеЗаполненияОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ОснованиеЗаполненияОбъект.Тема;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ОснованиеЗаполненияОбъект.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних", Новый Структура("ВидВнутреннегоДокумента", ВидДокумента)) Тогда 
		Если ЗначениеЗаполнено(Сумма) Тогда 
			ПроверяемыеРеквизиты.Добавить("Валюта");
		КонецЕсли;	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоАдресатам", Новый Структура("ВидВнутреннегоДокумента", ВидДокумента)) Тогда 
		ПроверяемыеРеквизиты.Добавить("Адресат");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", Новый Структура("ВидВнутреннегоДокумента", ВидДокумента)) Тогда 
		
		Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
			ПроверяемыеРеквизиты.Добавить("ДатаНачалаДействия");
			Если Не Бессрочный Тогда 
				ПроверяемыеРеквизиты.Добавить("ДатаОкончанияДействия");
				ПроверяемыеРеквизиты.Добавить("ПорядокПродления");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаНачалаДействия > ДатаОкончанияДействия Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дата окончания действия меньше, чем дата начала.'"),
				ЭтотОбъект,
				"ДатаОкончанияДействия",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	Делопроизводство.ПроверитьЗаполнениеДела(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено(Дело) Тогда 
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВидДокумента <> ВидДокумента)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВидыДокументов", ВидДокумента, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы с видом %1.'"),
					Строка(ВидДокумента)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (Ссылка.Дело <> Дело Или Ссылка.Корреспондент <> Корреспондент)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("Корреспонденты", Корреспондент, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы по корреспонденту %1.'"),
					Строка(Корреспондент)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВопросДеятельности <> ВопросДеятельности)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВопросыДеятельности", ВопросДеятельности, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы по вопросу деятельности %1.'"),
					Строка(ВопросДеятельности)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
	КонецЕсли;	
	
	Делопроизводство.ПроверкаСвязейПриИзмененииВидаДокумента(ЭтотОбъект, Отказ);
	
	Если ВидДокумента.ВестиУчетПоНоменклатуреДел Тогда
		Делопроизводство.ПроверитьСоответствиеНоменклатурыДел(ЭтотОбъект, Отказ);
	КонецЕсли;	
	
	//Проверка табличной части Корреспонденты на задвоения
	КоличествоКонтрагентов = Корреспонденты.Количество();	
	Если КоличествоКонтрагентов > 1 Тогда	
		Для Инд1 = 0 По КоличествоКонтрагентов - 2 Цикл 			
			Для Инд2 = Инд1 + 1 По КоличествоКонтрагентов - 1 Цикл 			
				Если Корреспонденты[Инд1].Корреспондент = Корреспонденты[Инд2].Корреспондент 
					И Корреспонденты[Инд1].ПодписалОтКорреспондента = Корреспонденты[Инд2].ПодписалОтКорреспондента Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Корреспондент ""%1"" указан дважды в списке контрагентов'"),
						Корреспонденты[Инд2].Корреспондент);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,
						"Корреспонденты["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].Корреспондент",,Отказ);
				КонецЕсли;				
	        КонецЦикла;			
		КонецЦикла;	
	КонецЕсли;

	Если ЗначениеЗаполнено(ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, 
			"ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного И Не ЗначениеЗаполнено(Ответственный) Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа вида ""%1"" должен быть обязательно указан ответственный.'"),
					Строка(ВидДокумента)),
				ЭтотОбъект,
				"Ответственный",, 
				Отказ);
				
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийРегистрационныйНомер = Неопределено;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	Иначе
		ПредыдущийРегистрационныйНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "РегистрационныйНомер");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПредыдущийРегистрационныйНомер", ПредыдущийРегистрационныйНомер);
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;	
	
	Если Не ПривилегированныйРежим() И ЗаписьПодписанногоОбъекта <> Истина Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СсылкаПодписан = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПодписанЭП");
			Если ПодписанЭП И СсылкаПодписан Тогда
				// Проверяем ключевые поля - изменились ли
				МассивИмен = Справочники.ВнутренниеДокументы.ПолучитьИменаКлючевыхРеквизитов();
				РаботаСЭП.ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ЭтотОбъект, Ссылка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	Если Корреспонденты.Количество() = 0 Тогда		
		Корреспондент = Неопределено;
		КонтактноеЛицо = Неопределено;
	    ПодписалОтКорреспондента = Неопределено;		
	Иначе
		Строка = Корреспонденты[0];
		Корреспондент = Строка.Корреспондент;
		КонтактноеЛицо = Строка.КонтактноеЛицо;
	    ПодписалОтКорреспондента = Строка.ПодписалОтКорреспондента;				
	КонецЕсли;
	
	// Заполним строковое представление корреспондентов
	КорреспондентыДляСписков = "";
	Для Каждого Строка Из Корреспонденты Цикл
		КорреспондентыДляСписков = КорреспондентыДляСписков + Строка(Строка.Корреспондент) + ", ";
	КонецЦикла;	
	
//1С-Минск +
	Для Каждого Строка Из Инвесторы Цикл
		КорреспондентыДляСписков = КорреспондентыДляСписков + Строка(Строка.Корреспондент) + ", ";
	КонецЦикла;	
//1С-Минск - 	

	Если СтрДлина(КорреспондентыДляСписков) > 0 Тогда 
		КорреспондентыДляСписков = Лев(КорреспондентыДляСписков, СтрДлина(КорреспондентыДляСписков) - 2);
	КонецЕсли;
	
	// Пометка на удаление приложенных файлов
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда 
		
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Ссылка).Удаление Тогда 
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права ""Пометка на удаление"" документа ""%1"".'"),
				Строка(Ссылка));
		КонецЕсли;	
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		
		ДелоОбъект = Дело.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДелоОбъект.Ссылка);
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить(
			"ИзменилсяСписокПерсональныхДанных", ПерсональныеДанные.ИзменилсяСписокПерсональныхДанных(ЭтотОбъект));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если Не Ссылка.Пустая() Тогда 
			СсылкаПроект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Проект");
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ИзменилсяПроект", СсылкаПроект <> Проект);
		КонецЕсли;	
	КонецЕсли;
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ВнутренниеДокументы.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа);
		
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Обработка обязательного заполнения рабочих групп 
	Если РабочаяГруппа.Количество() = 0 Тогда
	
		Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Тогда
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;		
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ЭтотОбъект);
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);	
		Иначе
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
		КонецЕсли;	
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;	
		
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ЗначениеЗаполнено(РегистрационныйНомер) И РегистрационныйНомер <> ДополнительныеСвойства.ПредыдущийРегистрационныйНомер Тогда
			Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущийРегистрационныйНомер) Тогда
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента);	
			Иначе	
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента);	
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды")
		И ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый Тогда
		
		Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
		ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
		
	КонецЕсли;
	
	// Заполняем сведения о персональных данных во всех файлах
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		
		Если Не ОбменДанными.Загрузка 
			И ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяСписокПерсональныхДанных") 
			И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяСписокПерсональныхДанных Тогда
			
			ПерсональныеДанные.ЗаполнитьПерсональныеДанныеФайлов(Ссылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Заполнение проекта в файлах
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяПроект") 
		   И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяПроект Тогда
			РаботаСПроектами.ЗаполнитьПроектПодчиненныхФайлов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// обновить связи документа
	СвязиДокументов.ОбновитьСвязиДокумента(Ссылка);
	
	//1С-Минск+
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("мДатаНачалаДействияДокумента") Тогда
		мРаботаСДоговорами.ОбработатьмДатаНачалаДействияДокумента(Ссылка, ЭтотОбъект.ДополнительныеСвойства.мДатаНачалаДействияДокумента);
	КонецЕсли;
	
	// Запись состояния нового дела
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый И ЭтотОбъект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
		Состояние = Перечисления.мСостоянияДела.ВРаботе;
		Исполнитель = Пользователи.ТекущийПользователь();
        Подразделение = РаботаСПользователями.ПолучитьПодразделение(Исполнитель);
		УровеньПроверки = Перечисления.мУровниПроверки.Исполнитель;
		мПроверкаДела.ЗаписатьСостояниеДела(ЭтотОбъект.Ссылка, Состояние, ТекущаяДатаСеанса(), Подразделение, Исполнитель, УровеньПроверки);  	
	КонецЕсли;
	
	//Если ЭтотОбъект.ВидДокумента = Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот Тогда
	//	Отказ = мЭСЧФ.АктВыполненныхРаботНельзяИзменять(ЭтотОбъект.Ссылка);
	//КонецЕсли; 
	
	//1С-Минск-
КонецПроцедуры

// Изменяет срок действия документа, делает запись в РС ИсторияСроковДействияДокументов
// Параметры:
// - ПараметрыЗаписи (Структура)
//   - Документ
//   - ДатаНачалаДействия
//   - ДатаОкончанияДействия
//   - Бессрочный
//   - ПорядокПродления
//   - ДокументИсточникИзменения
//   - Комментарий
//
Процедура ИзменитьСрокДействия(ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Документ <> ЭтотОбъект.Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Передан некорректный параметр <Документ>.'");
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ЭтотОбъект.Ссылка);
	
	НачатьТранзакцию();
	Попытка
		СрокДействияПредыдущий = Новый Структура("ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
		ЗаполнитьЗначенияСвойств(СрокДействияПредыдущий, ЭтотОбъект);
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(ПараметрыЗаписи);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаписи, "ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
		Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СрокДействияПредыдущий);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИсходныеРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка,
			"ВидДокумента, Ответственный, Зарегистрировал, Подготовил, Утвердил");
			
		Если ИсходныеРеквизиты.ВидДокумента = ВидДокумента Тогда
			ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты);
		Иначе
			ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		КонецЕсли;	
		
	Иначе	
		
		ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты)
	
	// Добавление реквизита Ответственный
	Если ИсходныеРеквизиты.Ответственный <> Ответственный Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);		
	КонецЕсли;				
	
	// Добавление реквизита Зарегистрировал
	Если ИсходныеРеквизиты.Зарегистрировал <> Зарегистрировал Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);		
	КонецЕсли;				
	
	// Добавление реквизита Подготовил
	Если ИсходныеРеквизиты.Подготовил <> Подготовил Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил);
	КонецЕсли;				
	
	// Добавление реквизита Утвердил
	Если ИсходныеРеквизиты.Утвердил <> Утвердил Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Утвердил);
	КонецЕсли;				
	
КонецПроцедуры	

Процедура ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Утвердил);
	
	// Добавление авторов виз согласования
	АвторыВиз = Справочники.ВизыСогласования.ПолучитьМассивАвторовВизПоДокументу(Ссылка);
	Для каждого Автор Из АвторыВиз Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			Автор.Исполнитель,
			Автор.ОсновнойОбъектАдресации,
			Автор.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Ссылка);
	
КонецПроцедуры

#КонецЕсли