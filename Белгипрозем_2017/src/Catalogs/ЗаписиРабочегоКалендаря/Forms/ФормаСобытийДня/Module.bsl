#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаНачала") И Параметры.ДатаНачала <> Неопределено Тогда
		ДатаНачала = Параметры.ДатаНачала;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаОкончания") И Параметры.ДатаОкончания <> Неопределено Тогда
		ДатаОкончания = Параметры.ДатаОкончания;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ВесьДень") И Параметры.ВесьДень <> Неопределено Тогда
		ВесьДень = Параметры.ВесьДень;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") И Параметры.Заголовок <> Неопределено Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СписокПользователей") И Параметры.СписокПользователей <> Неопределено Тогда
		СписокПользователей = Параметры.СписокПользователей;
	КонецЕсли;
	
	НеОтображатьКорень = (НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания));
	Если НеОтображатьКорень Тогда
		Элементы.ПланДня.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОтображатьПомеченныеНаУдаления = РаботаСРабочимКалендаремСервер.ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаления");
	ОтображатьОтклоненныеМероприятия = РаботаСРабочимКалендаремСервер.ПолучитьПерсональнуюНастройку("ОтображатьОтклоненныеМероприятия");
	ВариантОтображенияОбластиЧтения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяФормы,
		"ОтображениеОбластиЧтения",
		Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать);
	
	ОбновитьОтображениеСервер();
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементов();
	ДатаСегодня = НачалоДня(ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря" Тогда
		
		ОбновитьОтображениеКлиент();
		
	ИначеЕсли ИмяСобытия = "Запись_ЦветЗаписиКалендаря" Тогда
		
		ОбновитьОтображениеКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредпросмотрПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Неопределено, Элемент.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланДня

&НаКлиенте
Процедура ПланДняПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработкаАктивизацииОбласти", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		
		Если ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			
			РаботаСРабочимКалендаремКлиент.ОбработкаВыбораПовторяющегосяСобытия(ДанныеСтроки.Ссылка, ДанныеСтроки.ДатаНачала);
			
		Иначе
			ПоказатьЗначение(, ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СкопироватьЗаписьКалендаряВыполнить();
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УстановитьПометкуУдаленияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	МассивНомеровСтрок = ПараметрыПеретаскивания.Значение;
	
	МассивЗаписейКалендаря = Новый Массив;
	Для Каждого НомерСтроки Из МассивНомеровСтрок Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(НомерСтроки);
		Если ДанныеСтроки.ЭтоГруппа
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Ссылка) 
			ИЛИ ТипЗнч(ДанныеСтроки.Ссылка) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") 
			ИЛИ ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗаписейКалендаря.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Если МассивЗаписейКалендаря.Количество() <> 0 Тогда
		Выполнение = Истина;
		ПараметрыПеретаскивания.Значение = МассивЗаписейКалендаря;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() <> 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		МассивЗаписейКалендаря = Новый Массив;
		Для Каждого ЗначениеПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
				МассивЗаписейКалендаря.Добавить(ЗначениеПеретаскивания);
			КонецЕсли;
		КонецЦикла;
		Если МассивЗаписейКалендаря.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.ДатаДень) Тогда 
			Возврат;
		КонецЕсли;
		
		РаботаСРабочимКалендаремКлиент.ПеренестиЗаписиКалендаряНаДату(МассивЗаписейКалендаря, ДанныеСтроки.ДатаДень);
		
		ТекущаяЗаписьКалендаря = МассивЗаписейКалендаря[0];
		ТекущаяДатаНачала = НачалоДня(ДанныеСтроки.ДатаДень);
		ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьОтображениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПомеченныеНаУдаление(Команда)
	
	РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
	ИзменитьОтображениеПомеченныхНаУдаление();
	ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
	ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтклоненныеМероприятия(Команда)
	
	РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
	ИзменитьОтображениеОтклоненныхМероприятий();
	ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
	ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаря(Команда)
	
	СоздатьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗаписьКалендаря(Команда)
	
	СкопироватьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМероприятие(Команда)
	
	Время = ПолучитьВыделенноеВремя();
	
	Если ТипЗнч(Время) = Тип("Структура")
		И Время.Свойство("ДатаНачала") И Время.ДатаНачала <> Неопределено
		И Время.Свойство("ДатаОкончания") И Время.ДатаОкончания <> Неопределено
		И Время.Свойство("ВесьДень") И Время.ВесьДень <> Неопределено Тогда
		
		РаботаСРабочимКалендаремКлиент.СоздатьМероприятие(Время.ДатаНачала, Время.ДатаОкончания, Время.ВесьДень);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.СоздатьМероприятие();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	УстановитьПометкуУдаленияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияВнизу(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"));
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	МассивЗаписейКалендаря = ПолучитьМассивЗаписейКалендаря();
	РаботаСРабочимКалендаремКлиент.Печать(МассивЗаписейКалендаря, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЦветСобытияРабочегоКалендаря(Цвет)
	
	События = ПолучитьВыделенныеСобытия();
	
	РаботаСРабочимКалендаремКлиент.УстановитьЦветЗаписейКалендаря(Цвет, События);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПомеченныхНаУдаление()
	
	ОтображатьПомеченныеНаУдаления = НЕ ОтображатьПомеченныеНаУдаления;
	РаботаСРабочимКалендаремСервер.УстановитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаления", ОтображатьПомеченныеНаУдаления);
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОтклоненныхМероприятий()
	
	ОтображатьОтклоненныеМероприятия = НЕ ОтображатьОтклоненныеМероприятия;
	РаботаСРабочимКалендаремСервер.УстановитьПерсональнуюНастройку("ОтображатьОтклоненныеМероприятия", ОтображатьОтклоненныеМероприятия);
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.ФормаОтобразитьПомеченныеНаУдаление.Пометка = ОтображатьПомеченныеНаУдаления;
	Элементы.ФормаОтобразитьОтклоненныеМероприятия.Пометка = ОтображатьОтклоненныеМероприятия;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКлиент()
	
	РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
	ОбновитьОтображениеСервер();
	ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
	ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСервер()
	
	МассивПользователей = ПолучитьМассивПользователей();
	ПланДняЗначение = РеквизитФормыВЗначение("ПланДня");
	РаботаСРабочимКалендаремСервер.ОтобразитьПланДня(ПланДняЗначение,
		Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня, ДатаНачала, ОтображатьПомеченныеНаУдаления,
		ОтображатьОтклоненныеМероприятия, ДатаОкончания, ВесьДень, МассивПользователей);
	ЗначениеВРеквизитФормы(ПланДняЗначение, "ПланДня");
	
	Предпросмотр = РаботаСРабочимКалендаремСервер.СформироватьHTMLПредставление(ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяФормы,
		"ОтображениеОбластиЧтения",
		ВариантОтображенияОбластиЧтения);
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
	Если ОбластьЧтенияВключена Тогда
		Предпросмотр = РаботаСРабочимКалендаремСервер.СформироватьHTMLПредставление(
			ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	Если ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
		
		Элементы.Предпросмотр.Видимость = Истина;
		Элементы.ГруппаКалендарьИПредпросмотр.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Истина;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.Предпросмотр.Видимость = Истина;
		Элементы.ГруппаКалендарьИПредпросмотр.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Элементы.Предпросмотр.Видимость = Ложь;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Истина;
		ОбластьЧтенияВключена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииОбласти()
	
	НоваяТекущаяЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря();
	НоваяТекущаяДатаНачала = ПолучитьТекущуюДатуНачала();
	Если НоваяТекущаяЗаписьКалендаря <> ТекущаяЗаписьКалендаря
		ИЛИ НоваяТекущаяДатаНачала <> ТекущаяДатаНачала Тогда
		
		ТекущаяЗаписьКалендаря = НоваяТекущаяЗаписьКалендаря;
		ТекущаяДатаНачала = НоваяТекущаяДатаНачала;
		
		Если ОбластьЧтенияВключена Тогда
			Предпросмотр = РаботаСРабочимКалендаремКлиент.СформироватьHTMLПредставление(
				ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюЗаписьКалендаря()
	
	ЗаписьКалендаря = Неопределено;
	
	ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		ЗаписьКалендаря = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Возврат ЗаписьКалендаря;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущуюДатуНачала()
	
	Результат = Дата(1,1,1);
	
	ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		Результат = НачалоДня(ТекущиеДанные.ДатаНачала);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенноеВремя()
	
	Время = Неопределено;
	
	ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя();
		
		Время.ВесьДень = Ложь;
		Время.ДатаНачала = НачалоДня(ТекущиеДанные.ДатаДень)
			+ (РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ТекущаяДата()) - НачалоДня(ТекущаяДата()));
		Время.ДатаОкончания = Время.ДатаНачала + 3600;
		
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеСобытия(ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина)
	
	События = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ДанныеСтроки.ЭтоГруппа
			И (ДанныеСтроки.ТипЗаписиКалендаря <> ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие")
				ИЛИ ВключаяПовторяющиеся) Тогда
			
			События.Добавить(ДанныеСтроки.Ссылка);
			ПометкаУдаления = ПометкаУдаления Или ДанныеСтроки.ПометкаУдаления;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат События;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеПовторяющиесяСобытия()
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ДанныеСтроки.ЭтоГруппа
			И ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			
			ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
			ПовторяющеесяСобытие.ЗаписьКалендаря = ДанныеСтроки.Ссылка;
			ПовторяющеесяСобытие.ДатаИсключения = НачалоДня(ДанныеСтроки.ДатаНачала);
			
			ПовторяющиесяСобытия.Добавить(ПовторяющеесяСобытие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазвернутыеЭлементыПланаДня()
	
	РазвернутыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		
		Если Элементы.ПланДня.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
			РазвернутыеЭлементы.Добавить(ЭлементДерева.ДатаДень);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутыеЭлементы;
	
КонецФункции

&НаКлиенте
Функция ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы)
	
	Для Каждого РазвернутыйЭлемент Из РазвернутыеЭлементы Цикл
		
		Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
			
			Если ЭлементДерева.ДатаДень = РазвернутыйЭлемент Тогда
				Элементы.ПланДня.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьТекущийЭлементДерева(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Ссылка = ТекущаяЗаписьКалендаря И НачалоДня(ЭлементДерева.ДатаНачала) = ТекущаяДатаНачала Тогда
			Элементы.ПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		ВосстановитьТекущийЭлементДерева(ЭлементДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПользователей()
	
	МассивПользователей = Новый Массив;
	
	Для Каждого СтрокаПользователь Из СписокПользователей Цикл
		
		Если НЕ СтрокаПользователь.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПользователь.Значение)
			И МассивПользователей.Найти(СтрокаПользователь.Значение) = Неопределено Тогда
			МассивПользователей.Добавить(СтрокаПользователь.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуУдаленияВыполнить()
	
	ПометкаУдаления = Ложь;
	События = ПолучитьВыделенныеСобытия(ПометкаУдаления, Ложь);
	ПовторяющиесяСобытия = ПолучитьВыделенныеПовторяющиесяСобытия();
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкиУдаления(События, ПовторяющиесяСобытия, НЕ ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаряВыполнить()
	
	Время = ПолучитьВыделенноеВремя();
	
	Если ТипЗнч(Время) = Тип("Структура")
		И Время.Свойство("ДатаНачала") И Время.ДатаНачала <> Неопределено
		И Время.Свойство("ДатаОкончания") И Время.ДатаОкончания <> Неопределено
		И Время.Свойство("ВесьДень") И Время.ВесьДень <> Неопределено Тогда
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря(, Время.ДатаНачала, Время.ДатаОкончания, Время.ВесьДень);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗаписьКалендаряВыполнить()
	
	ЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря();
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.СкопироватьЗаписьКалендаря(ЗаписьКалендаря);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗаписейКалендаря()
	
	МассивЗаписейКалендаря = Новый Массив;
	
	МассивВыделенныхЗаписейКалендаря = Новый Массив;
	МассивВыделенныхДней = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.ЭтоГруппа Тогда
			МассивВыделенныхДней.Добавить(ДанныеСтроки.ДатаДень);
		Иначе
			СтруктураЗаписиКалендаря = Новый Структура("Ссылка, ДеньНачала");
			СтруктураЗаписиКалендаря.Ссылка = ДанныеСтроки.Ссылка;
			СтруктураЗаписиКалендаря.ДеньНачала = НачалоДня(ДанныеСтроки.ДатаНачала);
			МассивЗаписейКалендаря.Добавить(СтруктураЗаписиКалендаря);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЗаписейКалендаря.Количество() = 0 Тогда
		
		Для Каждого ВыделенныйДень Из МассивВыделенныхДней Цикл
			
			ЭлементыПланДня = ПланДня.ПолучитьЭлементы();
			Для Каждого ЭлементПланДня Из ЭлементыПланДня Цикл
				
				Если ЭлементПланДня.ДатаДень <> ВыделенныйДень Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементыДня = ЭлементПланДня.ПолучитьЭлементы();
				Для Каждого ЭлементДня Из ЭлементыДня Цикл
					
					СтруктураЗаписиКалендаря = Новый Структура("Ссылка, ДеньНачала");
					СтруктураЗаписиКалендаря.Ссылка = ЭлементДня.Ссылка;
					СтруктураЗаписиКалендаря.ДеньНачала = НачалоДня(ЭлементДня.ДатаНачала);
					МассивЗаписейКалендаря.Добавить(СтруктураЗаписиКалендаря);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЗаписейКалендаря;
	
КонецФункции

#КонецОбласти