#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОтображатьДругиеКалендари") Тогда
		
		МойКалендарь = Ложь;
		ОтображатьДругиеКалендари = Параметры.ОтображатьДругиеКалендари;
		
		Если ОтображатьДругиеКалендари Тогда
			
			СписокПользователейКЗагрузке = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				ИмяФормы,
				"СписокПользователей",
				Неопределено);
			
			Если СписокПользователейКЗагрузке <> Неопределено И СписокПользователейКЗагрузке.Количество() > 0 Тогда
				СписокПользователей = СписокПользователейКЗагрузке;
			Иначе
				СписокПользователей.Добавить(ПользователиКлиентСервер.ТекущийПользователь(),,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("Пользователь") И ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		
		МойКалендарь = Ложь;
		ОтображатьДругиеКалендари = Ложь;
		
		СписокПользователей.Добавить(Параметры.Пользователь,,Истина);
		Заголовок = НСтр("ru = 'Календарь пользователя'") + " " + Параметры.Пользователь;
		
	Иначе
		
		МойКалендарь = Истина;
		ОтображатьДругиеКалендари = Ложь;
		
		СписокПользователей.Добавить(ПользователиКлиентСервер.ТекущийПользователь(),,Истина);
		
	КонецЕсли;
	
	ПериодОтображения = РаботаСРабочимКалендаремСервер.ПолучитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря");
	ОтображатьПомеченныеНаУдаления = РаботаСРабочимКалендаремСервер.ПолучитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаления");
	СвернутьСобытияВесьДеньВКалендаре = РаботаСРабочимКалендаремСервер.ПолучитьПерсональнуюНастройку("СвернутьСобытияВесьДеньВКалендаре");
	ПрочитатьОтображениеОбластиЧтения();
	
	Пользователь = Пользователи.ТекущийПользователь();
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
	ЗаданГрафикРаботы = ЗначениеЗаполнено(ГрафикРаботы);
	
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	ОбновитьОтображениеСервер();
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.КалендарьКонтекстноеМенюАвтообновление.Видимость = Ложь;
		Элементы.ПланДняКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.КалендарьКонтекстноеМенюАвтообновление.Видимость = Истина;
		Элементы.ПланДняКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементов();
	УстановитьФокусВНачалоДня();
	
	ДатаСегодня = НачалоДня(ТекущаяДата());
	ПодключитьОбработчикОжидания("КонтрольСменыДня", 60);
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКалендаря"
		ИЛИ ИмяСобытия = "Запись_ДоступноеВремяПользователя"
		ИЛИ ИмяСобытия = "Запись_ЗанятостьПользователя"
		ИЛИ ИмяСобытия = "Запись_Мероприятие" Тогда
		
		ОбновитьОтображениеКлиент();
		
	ИначеЕсли ИмяСобытия = "Запись_ЦветЗаписиКалендаря" Тогда
		
		Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
			
			ОбновитьОтображениеКлиент();
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Запись") И Параметр.Свойство("ОписаниеКраткое") И Параметр.Свойство("Цвет") Тогда
			
			Если НЕ ЗначениеЗаполнено(Параметр.ОписаниеКраткое) ИЛИ НЕ ЗначениеЗаполнено(Параметр.Запись) Тогда
				Возврат;
			КонецЕсли;
			
			ОбластьНачалаПоиска = Календарь.Область(1,1);
			
			НайденнаяОбласть = Календарь.НайтиТекст(Параметр.ОписаниеКраткое, ОбластьНачалаПоиска);
			
			Пока НайденнаяОбласть <> Неопределено Цикл
				
				Расшифровка = НайденнаяОбласть.Расшифровка;
				
				Если ТипЗнч(Расшифровка) = Тип("Структура")
					И Расшифровка.Свойство("Событие") И Расшифровка.Событие = Параметр.Запись Тогда
					
					ОбновитьОтображениеКлиент();
					Прервать;
					
				КонецЕсли;
				
				ОбластьНачалаПоиска = НайденнаяОбласть;
				НайденнаяОбласть = Календарь.НайтиТекст(Параметр.ОписаниеКраткое, ОбластьНачалаПоиска);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("МассивИзмененияЦвета") Тогда
			
			Для Каждого ИзменениеЦвета Из Параметр.МассивИзмененияЦвета Цикл
				
				Если НЕ ЗначениеЗаполнено(ИзменениеЦвета.ОписаниеКраткое) ИЛИ НЕ ЗначениеЗаполнено(ИзменениеЦвета.Запись) Тогда
					Возврат;
				КонецЕсли;
				
				ОбластьНачалаПоиска = Календарь.Область(1,1);
				
				НайденнаяОбласть = Календарь.НайтиТекст(ИзменениеЦвета.ОписаниеКраткое, ОбластьНачалаПоиска);
				
				Пока НайденнаяОбласть <> Неопределено Цикл
					
					Расшифровка = НайденнаяОбласть.Расшифровка;
					
					Если ТипЗнч(Расшифровка) = Тип("Структура")
						И Расшифровка.Свойство("Событие") И Расшифровка.Событие = ИзменениеЦвета.Запись Тогда
						
						ОбновитьОтображениеКлиент();
						Прервать;
						
					КонецЕсли;
					
					ОбластьНачалаПоиска = НайденнаяОбласть;
					НайденнаяОбласть = Календарь.НайтиТекст(ИзменениеЦвета.ОписаниеКраткое, ОбластьНачалаПоиска);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДоступноеВремяПользователя" Тогда
		
		ОбновитьОтображениеСервер();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)
	
	ОбновитьОтображениеКлиент();
	УстановитьФокусВНачалоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если Не ЗаданГрафикРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		
		Если ЗаполненныеГода.НайтиПоЗначению(Год(СтрокаОформленияПериода.Дата)) = Неопределено Тогда
			РаботаСРабочимКалендаремСервер.ЗаполнитьРабочиеДни(РабочиеДни, ЗаполненныеГода, СтрокаОформленияПериода.Дата);
		КонецЕсли;
		
		СтрокаРабочиеДни = РабочиеДни.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		Если СтрокаРабочиеДни = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаРабочиеДни.Пометка Тогда
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		Иначе
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрКалендарьПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Неопределено, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрИнформацияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Неопределено, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие")
			Или Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДень")
			Или Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Мероприятие") Тогда
			
			ПоказатьЗначение(, Расшифровка.Событие);
			
		ИначеЕсли Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.ПустаяЯчейка")
			Или Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.ПустаяЯчейкаВесьДень") Тогда
			
			РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря(
				, Расшифровка.ДатаНачала, Расшифровка.ДатаОкончания, Расшифровка.ВесьДень);
			
		ИначеЕсли Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.День") Тогда
			
			Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
				
				РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря(
					, Расшифровка.ДатаНачала, Расшифровка.ДатаОкончания, Расшифровка.ВесьДень);
				
			Иначе
				
				ИзменитьРазвернутостьСобытияВесьДень();
				
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.НадписьСобытияВесьДень") Тогда
			
			ПредставлениеДня = Формат(Расшифровка.ДатаНачала, "ДФ='d MMMM'");
			
			Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
				РаботаСРабочимКалендаремКлиент.ОткрытьСписокСобытийЗаПериод(
					Расшифровка.ДатаНачала,
					Расшифровка.ДатаОкончания,
					,
					НСтр("ru = 'Календарь на'") + " " + ПредставлениеДня,
					СписокПользователей);
			Иначе
				РаботаСРабочимКалендаремКлиент.ОткрытьСписокСобытийЗаПериод(
					Расшифровка.ДатаНачала,
					Расшифровка.ДатаОкончания,
					Расшифровка.ВесьДень,
					НСтр("ru = 'Календарь событий всего дня на'") + " " + ПредставлениеДня,
					СписокПользователей);
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся")
			Или Расшифровка.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДеньПовторяющееся") Тогда
			
			РаботаСРабочимКалендаремКлиент.ОбработкаВыбораПовторяющегосяСобытия(Расшифровка.Событие, Расшифровка.ДатаНачала);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработкаАктивизацииОбласти", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланДня

&НаКлиенте
Процедура ПланДняПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработкаАктивизацииОбласти", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		
		Если ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			
			РаботаСРабочимКалендаремКлиент.ОбработкаВыбораПовторяющегосяСобытия(ДанныеСтроки.Ссылка, ДанныеСтроки.ДатаНачала);
			
		Иначе
			ПоказатьЗначение(, ДанныеСтроки.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		СкопироватьЗаписьКалендаряВыполнить();
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УстановитьПометкуУдаленияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	МассивНомеровСтрок = ПараметрыПеретаскивания.Значение;
	
	МассивЗаписейКалендаря = Новый Массив;
	Для Каждого НомерСтроки Из МассивНомеровСтрок Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(НомерСтроки);
		Если ДанныеСтроки.ЭтоГруппа
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Ссылка) 
			ИЛИ ТипЗнч(ДанныеСтроки.Ссылка) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") 
			ИЛИ ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЗаписейКалендаря.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Если МассивЗаписейКалендаря.Количество() <> 0 Тогда
		Выполнение = Истина;
		ПараметрыПеретаскивания.Значение = МассивЗаписейКалендаря;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() <> 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		МассивЗаписейКалендаря = Новый Массив;
		Для Каждого ЗначениеПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
			Если ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
				МассивЗаписейКалендаря.Добавить(ЗначениеПеретаскивания);
			КонецЕсли;
		КонецЦикла;
		Если МассивЗаписейКалендаря.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
		Если ДанныеСтроки = Неопределено Или Не ЗначениеЗаполнено(ДанныеСтроки.ДатаДень) Тогда 
			Возврат;
		КонецЕсли;
		
		РаботаСРабочимКалендаремКлиент.ПеренестиЗаписиКалендаряНаДату(МассивЗаписейКалендаря, ДанныеСтроки.ДатаДень);
		
		ТекущаяЗаписьКалендаря = МассивЗаписейКалендаря[0];
		ТекущаяДатаНачала = НачалоДня(ДанныеСтроки.ДатаДень);
		ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПользователей

&НаКлиенте
Процедура СписокПользователейПриИзменении(Элемент)
	
	Если КалендарьУжеОбновлен Тогда
		КалендарьУжеОбновлен = Ложь;
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновитьСписокПользователей = Истина;
	ОбновитьОтображениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	КалендарьУжеОбновлен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Пометка Тогда
		ТребуетсяОбновитьОтображениеКалендаря = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПослеУдаления(Элемент)
	
	КалендарьУжеОбновлен = Истина;
	Если ТребуетсяОбновитьОтображениеКалендаря Тогда
		ТребуетсяОбновитьОтображениеКалендаря = Ложь;
		ОбновитьОтображениеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПометкаПриИзменении(Элемент)
	
	ТребуетсяОбновитьСписокПользователей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейЗначениеПриИзменении(Элемент)
	
	КалендарьУжеОбновлен = Истина;
	ТребуетсяОбновитьСписокПользователей = Истина;
	
	ТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		СтрокаПользователь = СписокПользователей.НайтиПоЗначению(ТекущиеДанные.Значение);
		СтрокаПользователь.Пометка = Истина;
		ОбновитьОтображениеКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Автообновление(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"АвтообновлениеПродолжение",
		ЭтотОбъект);
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма,
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалендарь(Команда)
	
	ОбновитьОтображениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериодДень(Команда)
	
	ИзменитьПериодОтображения(ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День"));
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериодНеделя(Команда)
	
	ИзменитьПериодОтображения(ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя"));
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПланДня(Команда)
	
	ИзменитьПериодОтображения(ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня"));
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериодДвеНедели(Команда)
	
	ИзменитьПериодОтображения(ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели"));
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПериодМесяц(Команда)
	
	ИзменитьПериодОтображения(ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц"));
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПомеченныеНаУдаление(Команда)
	
	РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
	ИзменитьОтображениеПомеченныхНаУдаление();
	ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
	ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредыдущийПериод(Команда)
	
	ОтображаемаяДата = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, ОтображаемаяДата);
	
	ОбновитьОтображениеКлиент();
	УстановитьФокусВНачалоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСегодня(Команда)
	
	ОтображаемаяДата = ТекущаяДата();
	
	ОбновитьОтображениеКлиент();
	УстановитьФокусВНачалоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСледующийПериод(Команда)
	
	ОтображаемаяДата = РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, ОтображаемаяДата);
	
	ОбновитьОтображениеКлиент();
	УстановитьФокусВНачалоДня();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСобытияВесьДеньВКалендаре(Команда)
	
	ИзменитьРазвернутостьСобытияВесьДень();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаря(Команда)
	
	СоздатьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМероприятие(Команда)
	
	Время = ПолучитьВыделенноеВремя();
	
	Если ТипЗнч(Время) = Тип("Структура")
		И Время.Свойство("ДатаНачала") И Время.ДатаНачала <> Неопределено
		И Время.Свойство("ДатаОкончания") И Время.ДатаОкончания <> Неопределено
		И Время.Свойство("ВесьДень") И Время.ВесьДень <> Неопределено Тогда
		
		РаботаСРабочимКалендаремКлиент.СоздатьМероприятие(Время.ДатаНачала, Время.ДатаОкончания, Время.ВесьДень);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.СоздатьМероприятие();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗанятость(Команда)
	
	Время = ПолучитьВыделенноеВремя();
	
	Если ТипЗнч(Время) = Тип("Структура")
		И Время.Свойство("ДатаНачала") И Время.ДатаНачала <> Неопределено
		И Время.Свойство("ДатаОкончания") И Время.ДатаОкончания <> Неопределено
		И Время.Свойство("ВесьДень") И Время.ВесьДень <> Неопределено Тогда
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗанятость(Время.ДатаНачала, Время.ДатаОкончания, Время.ВесьДень);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗанятость();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗаписьКалендаря(Команда)
	
	СкопироватьЗаписьКалендаряВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦветСобытияРабочегоКалендаря(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	УстановитьПометкуУдаленияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияВнизу(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Внизу"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияСправа(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.Справа"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьЧтенияОтключена(Команда)
	
	ИзменитьОтображениеОбластиЧтенияСервер(
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать"));
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	МассивЗаписейКалендаря = ПолучитьМассивЗаписейКалендаря();
	РаботаСРабочимКалендаремКлиент.Печать(МассивЗаписейКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакДоступное(Команда)
	
	МассивВремен = ПолучитьВыделенноеВремя(Истина);
	РаботаСРабочимКалендаремКлиент.ИзменитьДоступностьВремен(МассивВремен);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступноеВремя(Команда)
	
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуНастройкиДоступногоВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКоманда(Команда)
	
	Если ЗначениеЗаполнено(ТекущаяЗаписьКалендаря) Тогда
		ПоказатьЗначение(, ТекущаяЗаписьКалендаря);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьЦветСобытияРабочегоКалендаря(Цвет)
	
	События = ПолучитьВыделенныеСобытия();
	
	РаботаСРабочимКалендаремКлиент.УстановитьЦветЗаписейКалендаря(Цвет, События);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериодОтображения(НовыйПериодОтображения)
	
	Если ПериодОтображения <> НовыйПериодОтображения Тогда
		РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
		ИзменитьПериодОтображенияСервер(НовыйПериодОтображения);
		ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
		ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодОтображенияСервер(НовыйПериодОтображения)
	
	ПериодОтображения = НовыйПериодОтображения;
	РаботаСРабочимКалендаремСервер.УстановитьПерсональнуюНастройку("ПериодОтображенияРабочегоКалендаря", НовыйПериодОтображения);
	ОбновитьОтображениеСервер();
	
	ПрочитатьОтображениеОбластиЧтения();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПомеченныхНаУдаление()
	
	ОтображатьПомеченныеНаУдаления = НЕ ОтображатьПомеченныеНаУдаления;
	РаботаСРабочимКалендаремСервер.УстановитьПерсональнуюНастройку("ОтображатьПомеченныеНаУдаления", ОтображатьПомеченныеНаУдаления);
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.ФормаОтобразитьПериодДень.Пометка =
		(ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День"));
	Элементы.ФормаОтобразитьПериодНеделя.Пометка =
		(ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя"));
	Элементы.ФормаОтобразитьПериодДвеНедели.Пометка =
		(ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели"));
	Элементы.ФормаОтобразитьПериодМесяц.Пометка =
		(ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц"));
	Элементы.ФормаОтобразитьПланДня.Пометка =
		(ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня"));
	
	Элементы.ФормаОтобразитьПомеченныеНаУдаление.Пометка = ОтображатьПомеченныеНаУдаления;
	Элементы.ФормаСвернутьСобытияВесьДеньВКалендаре.Пометка = СвернутьСобытияВесьДеньВКалендаре;
	
	Элементы.ФормаПечатьКалендаря.Доступность =
		(ПериодОтображения <> ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКлиент()
	
	РазвернутыеЭлементы = ПолучитьРазвернутыеЭлементыПланаДня();
	ОбновитьОтображениеСервер();
	ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы);
	ВосстановитьТекущийЭлементДерева(ПланДня.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСервер()
	
	// Отрисовка календаря
	МассивПользователей = ПолучитьМассивПользователей();
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели Тогда
		
		РаботаСРабочимКалендаремСервер.ОтобразитьКалендарь(Календарь, ПериодОтображения, ОтображаемаяДата,
			ОтображатьПомеченныеНаУдаления, Ложь, МассивПользователей);
		РаботаСРабочимКалендаремКлиентСервер.УстановитьРазвернутостьСобытийВесьДень(Календарь, СвернутьСобытияВесьДеньВКалендаре);
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		
		РаботаСРабочимКалендаремСервер.ОтобразитьКалендарь(Календарь, ПериодОтображения, ОтображаемаяДата,
			ОтображатьПомеченныеНаУдаления, Ложь, МассивПользователей);
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		
		ПланДняЗначение = РеквизитФормыВЗначение("ПланДня");
		РаботаСРабочимКалендаремСервер.ОтобразитьПланДня(ПланДняЗначение, ПериодОтображения, ТекущаяДатаСеанса(),
			ОтображатьПомеченныеНаУдаления, Ложь, ,, МассивПользователей);
		ЗначениеВРеквизитФормы(ПланДняЗначение, "ПланДня");
		
	КонецЕсли;
	
	// Установка видимости элементов
	УстановитьВидимостьЭлементов();
	
	// Формирование области чтения
	Предпросмотр = РаботаСРабочимКалендаремСервер.СформироватьHTMLПредставление(ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	
	// Сохранения списка пользователей
	Если ОтображатьДругиеКалендари И ТребуетсяОбновитьСписокПользователей Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ИмяФормы,
			"СписокПользователей",
			СписокПользователей);
		ТребуетсяОбновитьСписокПользователей = Ложь;
	КонецЕсли;
	
	// Установка заголовка формы
	УстановитьЗаголовокФормы();
	
	// Заполнение рабочих дней
	Если ЗаданГрафикРаботы Тогда
		РаботаСРабочимКалендаремСервер.ЗаполнитьРабочиеДни(РабочиеДни, ЗаполненныеГода, ОтображаемаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазвернутостьСобытияВесьДень()
	
	СвернутьСобытияВесьДеньВКалендаре = НЕ СвернутьСобытияВесьДеньВКалендаре;
	РаботаСРабочимКалендаремСервер.УстановитьПерсональнуюНастройку("СвернутьСобытияВесьДеньВКалендаре", СвернутьСобытияВесьДеньВКалендаре);
	
	РаботаСРабочимКалендаремКлиентСервер.УстановитьРазвернутостьСобытийВесьДень(Календарь, СвернутьСобытияВесьДеньВКалендаре);
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусВНачалоДня()
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		Элементы.Календарь.ТекущаяОбласть = Календарь.Область("23:00");
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ОбластьНачалаДня = Календарь.Область("08:00");
		ОбластьНачалаДня = Календарь.Область(ОбластьНачалаДня.Верх, ОбластьНачалаДня.Право + 1);
		Элементы.Календарь.ТекущаяОбласть = ОбластьНачалаДня;
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольСменыДня()
	
	Если НачалоДня(ТекущаяДата()) - ДатаСегодня > 0 Тогда
		ДатаСегодня = НачалоДня(ТекущаяДата());
		ОбновитьОтображениеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтображениеОбластиЧтения()
	
	ВариантОтображенияОбластиЧтения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяФормы,
			"ОтображениеОбластиЧтения" + ПериодОтображения,
			Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать);
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ИмяФормы,
			"ОтображениеОбластиЧтения" + ПериодОтображения,
			ВариантОтображенияОбластиЧтения);
	
	УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения);
	
	Если ОбластьЧтенияВключена Тогда
		Предпросмотр = РаботаСРабочимКалендаремСервер.СформироватьHTMLПредставление(
			ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОбластиЧтенияСервер(ВариантОтображенияОбластиЧтения)
	
	Если ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
		
		Элементы.ПредпросмотрКалендарь.Видимость = Истина;
		Элементы.ПредпросмотрИнформация.Видимость = Ложь;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Истина;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.ПредпросмотрКалендарь.Видимость = Ложь;
		Элементы.ПредпросмотрИнформация.Видимость = Истина;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Истина;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Ложь;
		ОбластьЧтенияВключена = Истина;
		
	ИначеЕсли ВариантОтображенияОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		
		Элементы.ПредпросмотрКалендарь.Видимость = Ложь;
		Элементы.ПредпросмотрИнформация.Видимость = Ложь;
		
		Элементы.ФормаОбластьЧтенияВнизу.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияСправа.Пометка = Ложь;
		Элементы.ФормаОбластьЧтенияОтключена.Пометка = Истина;
		ОбластьЧтенияВключена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииОбласти()
	
	НоваяТекущаяЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря();
	НоваяТекущаяДатаНачала = ПолучитьТекущуюДатуНачала();
	Если НоваяТекущаяЗаписьКалендаря <> ТекущаяЗаписьКалендаря
		ИЛИ НоваяТекущаяДатаНачала <> ТекущаяДатаНачала Тогда
		
		ТекущаяЗаписьКалендаря = НоваяТекущаяЗаписьКалендаря;
		ТекущаяДатаНачала = НоваяТекущаяДатаНачала;
		
		Если ОбластьЧтенияВключена Тогда
			Предпросмотр = РаботаСРабочимКалендаремКлиент.СформироватьHTMLПредставление(
				ТекущаяЗаписьКалендаря, ТекущаяДатаНачала);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюЗаписьКалендаря()
	
	ЗаписьКалендаря = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Попытка
			
			Расшифровка = Календарь.ТекущаяОбласть.Расшифровка;
			
			Если ТипЗнч(Расшифровка) = Тип("Структура")
				И Расшифровка.Свойство("Событие") И Расшифровка.Событие <> Неопределено Тогда
				
				ЗаписьКалендаря = Расшифровка.Событие;
				
			КонецЕсли;
			
		Исключение
			
			// У текущей области может не быть поля Расшифровка
			
		КонецПопытки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
			
			ЗаписьКалендаря = ТекущиеДанные.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаписьКалендаря;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущуюДатуНачала()
	
	ДатаНачала = Дата(1,1,1);
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Попытка
			
			Расшифровка = Календарь.ТекущаяОбласть.Расшифровка;
			
			Если ТипЗнч(Расшифровка) = Тип("Структура")
				И Расшифровка.Свойство("ДатаНачала") И Расшифровка.ДатаНачала <> Неопределено Тогда
				
				ДатаНачала = НачалоДня(Расшифровка.ДатаНачала);
				
			КонецЕсли;
			
		Исключение
			
			// У текущей области может не быть поля Расшифровка
			
		КонецПопытки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
			
			ДатаНачала = НачалоДня(ТекущиеДанные.ДатаНачала);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаНачала;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенноеВремя(МножественноеВыделение = Ложь)
	
	Время = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Время = РаботаСРабочимКалендаремКлиент.ПолучитьВремяВВыделеннойОбласти(Календарь, МножественноеВыделение);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ТекущиеДанные = Элементы.ПланДня.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя();
			
			Время.ВесьДень = Ложь;
			Время.ДатаНачала = НачалоДня(ТекущиеДанные.ДатаДень)
				+ (РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ТекущаяДата()) - НачалоДня(ТекущаяДата()));
			Время.ДатаОкончания = Время.ДатаНачала + 3600;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеСобытия(ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина)
	
	События = Новый Массив;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		События = РаботаСРабочимКалендаремКлиент.ПолучитьСобытияВВыделеннойОбласти(Календарь, ПометкаУдаления, ВключаяПовторяющиеся);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
			
			Если НЕ ДанныеСтроки.ЭтоГруппа
				И (ДанныеСтроки.ТипЗаписиКалендаря <> ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие")
					ИЛИ ВключаяПовторяющиеся) Тогда
				
				События.Добавить(ДанныеСтроки.Ссылка);
				ПометкаУдаления = ПометкаУдаления Или ДанныеСтроки.ПометкаУдаления;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат События;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыделенныеПовторяющиесяСобытия()
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ПовторяющиесяСобытия = РаботаСРабочимКалендаремКлиент.ПолучитьПовторяющиесяСобытияВВыделеннойОбласти(Календарь);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
			
			Если НЕ ДанныеСтроки.ЭтоГруппа
				И ДанныеСтроки.ТипЗаписиКалендаря = ПредопределенноеЗначение("Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие") Тогда
				
				ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
				ПовторяющеесяСобытие.ЗаписьКалендаря = ДанныеСтроки.Ссылка;
				ПовторяющеесяСобытие.ДатаИсключения = НачалоДня(ДанныеСтроки.ДатаНачала);
				
				ПовторяющиесяСобытия.Добавить(ПовторяющеесяСобытие);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		
		Элементы.СтраницыКалендаря.ТекущаяСтраница = Элементы.СтраницаКалендарь;
		Элементы.ФормаГруппаУправлениеКалендарем.Видимость = Истина;
		Элементы.ФормаСвернутьСобытияВесьДеньВКалендаре.Видимость =
			(ПериодОтображения <> Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц);
		Элементы.ОтображаемаяДата.Видимость = Истина;
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		
		Элементы.СтраницыКалендаря.ТекущаяСтраница = Элементы.СтраницаПланДня;
		Элементы.ФормаГруппаУправлениеКалендарем.Видимость = Ложь;
		Элементы.ОтображаемаяДата.Видимость = Ложь;
		
	КонецЕсли;
	
	ПериодОтображенияПоЧасам = ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя
		ИЛИ ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели;
	Элементы.ФормаПометитьКакДоступное.Видимость = ПериодОтображенияПоЧасам И МойКалендарь;
	Элементы.КалендарьКонтекстноеМенюПометитьКакДоступное.Видимость = ПериодОтображенияПоЧасам И МойКалендарь;
	
	Элементы.ФормаСоздатьЗанятость.Видимость = МойКалендарь;
	Элементы.КалендарьКонтекстноеМенюСоздатьЗанятость.Видимость = МойКалендарь;
	Элементы.ПланДняКонтекстноеМенюСоздатьЗанятость.Видимость = МойКалендарь;
	
	Элементы.СписокПользователей.Видимость = ОтображатьДругиеКалендари;
	
	НесколькоКомандСоздать = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями");
	Элементы.ФормаГруппаСоздать.Видимость = НесколькоКомандСоздать;
	Элементы.ФормаСоздатьЗаписьКалендаряОднаКоманда.Видимость = Не НесколькоКомандСоздать;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазвернутыеЭлементыПланаДня()
	
	РазвернутыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
		
		Если Элементы.ПланДня.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
			РазвернутыеЭлементы.Добавить(ЭлементДерева.ДатаДень);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутыеЭлементы;
	
КонецФункции

&НаКлиенте
Функция ВосстановитьРазвернутыеЭлементыПланаДня(РазвернутыеЭлементы)
	
	Для Каждого РазвернутыйЭлемент Из РазвернутыеЭлементы Цикл
		
		Для Каждого ЭлементДерева Из ПланДня.ПолучитьЭлементы() Цикл
			
			Если ЭлементДерева.ДатаДень = РазвернутыйЭлемент Тогда
				Элементы.ПланДня.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьТекущийЭлементДерева(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Ссылка = ТекущаяЗаписьКалендаря И НачалоДня(ЭлементДерева.ДатаНачала) = ТекущаяДатаНачала Тогда
			Элементы.ПланДня.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
		
		ВосстановитьТекущийЭлементДерева(ЭлементДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПользователей()
	
	МассивПользователей = Новый Массив;
	
	Для Каждого СтрокаПользователь Из СписокПользователей Цикл
		
		Если НЕ СтрокаПользователь.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПользователь.Значение)
			И МассивПользователей.Найти(СтрокаПользователь.Значение) = Неопределено Тогда
			МассивПользователей.Добавить(СтрокаПользователь.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПользователей;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуУдаленияВыполнить()
	
	ПометкаУдаления = Ложь;
	События = ПолучитьВыделенныеСобытия(ПометкаУдаления, Ложь);
	ПовторяющиесяСобытия = ПолучитьВыделенныеПовторяющиесяСобытия();
	
	Если События.Количество() = 0 И ПовторяющиесяСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкиУдаления(События, ПовторяющиесяСобытия, НЕ ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаписьКалендаряВыполнить()
	
	Время = ПолучитьВыделенноеВремя();
	
	Если ТипЗнч(Время) = Тип("Структура")
		И Время.Свойство("ДатаНачала") И Время.ДатаНачала <> Неопределено
		И Время.Свойство("ДатаОкончания") И Время.ДатаОкончания <> Неопределено
		И Время.Свойство("ВесьДень") И Время.ВесьДень <> Неопределено Тогда
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря(, Время.ДатаНачала, Время.ДатаОкончания, Время.ВесьДень);
		
	Иначе
		
		РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗаписьКалендаряВыполнить()
	
	ЗаписьКалендаря = ПолучитьТекущуюЗаписьКалендаря();
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.СкопироватьЗаписьКалендаря(ЗаписьКалендаря);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивЗаписейКалендаря()
	
	МассивЗаписейКалендаря = Новый Массив;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		МассивЗаписейКалендаря = РаботаСРабочимКалендаремКлиент.ПолучитьМассивЗаписейКалендаря(Календарь);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		МассивВыделенныхЗаписейКалендаря = Новый Массив;
		МассивВыделенныхДней = Новый Массив;
		
		Для Каждого Элемент Из Элементы.ПланДня.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ПланДня.НайтиПоИдентификатору(Элемент);
			
			Если ДанныеСтроки.ЭтоГруппа Тогда
				МассивВыделенныхДней.Добавить(ДанныеСтроки.ДатаДень);
			Иначе
				СтруктураЗаписиКалендаря = Новый Структура("Ссылка, ДеньНачала");
				СтруктураЗаписиКалендаря.Ссылка = ДанныеСтроки.Ссылка;
				СтруктураЗаписиКалендаря.ДеньНачала = НачалоДня(ДанныеСтроки.ДатаНачала);
				МассивЗаписейКалендаря.Добавить(СтруктураЗаписиКалендаря);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗаписейКалендаря.Количество() = 0 Тогда
			
			Для Каждого ВыделенныйДень Из МассивВыделенныхДней Цикл
				
				ЭлементыПланДня = ПланДня.ПолучитьЭлементы();
				Для Каждого ЭлементПланДня Из ЭлементыПланДня Цикл
					
					Если ЭлементПланДня.ДатаДень <> ВыделенныйДень Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементыДня = ЭлементПланДня.ПолучитьЭлементы();
					Для Каждого ЭлементДня Из ЭлементыДня Цикл
						
						СтруктураЗаписиКалендаря = Новый Структура("Ссылка, ДеньНачала");
						СтруктураЗаписиКалендаря.Ссылка = ЭлементДня.Ссылка;
						СтруктураЗаписиКалендаря.ДеньНачала = НачалоДня(ЭлементДня.ДатаНачала);
						МассивЗаписейКалендаря.Добавить(СтруктураЗаписиКалендаря);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЗаписейКалендаря;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ОтображатьДругиеКалендари Тогда
		ТекстЗаголовкаКалендарь = НСтр("ru = 'Все календари'");
	ИначеЕсли МойКалендарь Тогда
		ТекстЗаголовкаКалендарь = НСтр("ru = 'Мой календарь'");
	ИначеЕсли СписокПользователей.Количество() = 1 Тогда
		Пользователь = СписокПользователей[0].Значение;
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ТекстЗаголовкаКалендарь = НСтр("ru = 'Календарь пользователя'") + " " + Пользователь;
		Иначе
			ТекстЗаголовкаКалендарь = НСтр("ru = 'Календарь'");
		КонецЕсли;
	Иначе
		ТекстЗаголовкаКалендарь = НСтр("ru = 'Календарь'");
	КонецЕсли;
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстЗаголовкаКалендарь, " ", НСтр("ru = 'на день'"));
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстЗаголовкаКалендарь, " ", НСтр("ru = 'на неделю'"));
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстЗаголовкаКалендарь, " ", НСтр("ru = 'на две недели'"));
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстЗаголовкаКалендарь, " ", НСтр("ru = 'на месяц'"));
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстЗаголовкаКалендарь, ": ", НСтр("ru = 'план дня'"));
	КонецЕсли;
	
	Заголовок = ТекстЗаголовкаКалендарь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработкаАвтообновления", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвтообновления()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("ОбработкаАвтообновления");
	Иначе
		ОбновитьОтображениеКлиент();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти