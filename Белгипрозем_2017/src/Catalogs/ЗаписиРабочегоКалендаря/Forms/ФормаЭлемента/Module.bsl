#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(Параметры.ПовторяющеесяСобытие)
		И Параметры.Свойство("ДатаИсключения") И ЗначениеЗаполнено(Параметры.ДатаИсключения) Тогда
		
		ПовторяющеесяСобытие = Параметры.ПовторяющеесяСобытие;
		ПовторяющеесяСобытиеДатаИсключения = Параметры.ДатаИсключения;
		
	КонецЕсли;
	
	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	
	Если ИспользоватьНапоминанияПользователя Тогда 
		
		СрокНапоминанияПоУмолчанию =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
		УстанавливатьНапоминаниеАвтоматически =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
		
		ПрочитатьНапоминание();
		
	КонецЕсли;
	
	ПрочитатьЦвет();
	
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	ПредметСтрокой = РаботаСРабочимКалендаремСервер.ПолучитьПредставлениеПредмета(Объект.Предмет);
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ОтображатьПолеПользователь = Объект.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь();
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	ВывестиДлительностьСобытия();
	ЗаполнитьСпискиВыбора();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = Объект.Ссылка
		И ПараметрыНапоминанияДокументооборота(Параметр) 
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Параметр;
		УстановитьНадписьНапоминания(Параметр, УстановитьНапоминание, УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания, ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = Объект.Ссылка
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Неопределено;
		УстановитьНадписьНапоминания(Неопределено, УстановитьНапоминание, УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания, ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаписьКалендаря"
		И Параметр = Объект.Ссылка Тогда
		
		Прочитать();
		УстановитьДоступностьЭлементовФормы();
		
	ИначеЕсли ИмяСобытия = "Запись_ЦветЗаписиКалендаря"
		И РаботаСРабочимКалендаремКлиент.ИзменилсяЦвет(Параметр, Объект.Ссылка) Тогда
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьЦвет();
	ПрочитатьНапоминание();
	УстановитьЗаголовокФормы();
	УстановитьВидимостьЭлементовФормы();
	УстановитьПодписьПовторять();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПовторяющеесяСобытие) И ЗначениеЗаполнено(ПовторяющеесяСобытиеДатаИсключения) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДатаИсключения", ПовторяющеесяСобытиеДатаИсключения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПовторяющеесяСобытие) И ЗначениеЗаполнено(ПовторяющеесяСобытиеДатаИсключения) Тогда
		ПовторяющеесяСобытие = Неопределено;
		ПовторяющеесяСобытиеДатаИсключения = Неопределено;
	КонецЕсли;
	
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Цвет, ТекущийОбъект.Ссылка);
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Если УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание) Тогда
			// Отключение старого напоминания, если оно было установлено ранее
			Если УстановленоНапоминание И (ИзмененоНапоминание Или ИзмененоВремя) Тогда
				НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
				НапоминаниеСтарое = Напоминание;
				Напоминание = Неопределено;
				ИзмененоНапоминание = Ложь;
				ИзмененоВремя = Ложь;
			КонецЕсли;
			
			Если СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
				// Подключение напоминания относительно времени предмета
				ИнтервалВремениНапоминания = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(ИнтервалВремениСтрокой);
				Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеДоВремениПредмета(
					Строка(Объект.Ссылка), ИнтервалВремениНапоминания, Объект.Ссылка, "ДатаНачала");
				ОбновитьЗаписьВКешеНапоминаний = Истина;
				УстановленоНапоминание = Истина;
				
			ИначеЕсли СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
				// Подключение напоминания в указанное время
				Напоминание = НапоминанияПользователяСлужебный.ПодключитьНапоминаниеВУказанноеВремя(
					Строка(Объект.Ссылка), ВремяНапоминания, Объект.Ссылка);
				ОбновитьЗаписьВКешеНапоминаний = Истина;
				УстановленоНапоминание = Истина;
				
			КонецЕсли;
			
		ИначеЕсли НЕ УстановитьНапоминание И УстановленоНапоминание Тогда
			// Отключение старого напоминания
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание);
			НапоминаниеСтарое = Напоминание;
			Напоминание = Неопределено;
			УстановленоНапоминание = Ложь;
			
		КонецЕсли;
		
		УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания, ВремяНапоминания);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаписьКалендаря", Объект.Ссылка);
	
	Если ИспользоватьНапоминанияПользователя И ОбновитьЗаписьВКешеНапоминаний Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
		ОбновитьЗаписьВКешеНапоминаний = Ложь;
	ИначеЕсли НапоминаниеСтарое <> Неопределено Тогда
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(НапоминаниеСтарое);
		Оповестить("Удаление_НапоминанияПользователя_Документооборот", , НапоминаниеСтарое.Источник);
		НапоминаниеСтарое = Неопределено;
		НапоминанияПользователяКлиент.СброситьТаймерПроверкиТекущихОповещений();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ОбработкаИзмененияЦвета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораЦвета = Новый СписокЗначений;
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"), , , БиблиотекаКартинок.ЦветПоУмолчанию);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"), , , БиблиотекаКартинок.ЦветКрасный);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"), , , БиблиотекаКартинок.ЦветСиний);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"), , , БиблиотекаКартинок.ЦветЖелтый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"), , , БиблиотекаКартинок.ЦветЗеленый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"), , , БиблиотекаКартинок.ЦветОранжевый);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораЦвета, Элементы.Цвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйЦвет = Результат.Значение;
	Если ЗначениеЗаполнено(ВыбранныйЦвет) Тогда
		Цвет = ВыбранныйЦвет;
		ОбработкаИзмененияЦвета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачала = Дата(1,1,1);
	Объект.ДатаОкончания = Дата(1,1,1);
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесьДеньПриИзменении(Элемент)
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.ВесьДень);
	
	ЗаполнитьСпискиВыбора();
	ВывестиДлительностьСобытия();
	УстановитьДоступностьЭлементовФормы();
	ИзмененоВремя = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНапоминаниеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойПриИзменении(Элемент)
	
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НСтр("ru = 'Другое...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыФормы.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
		ПараметрыФормы.Вставить("ВремяНапоминания",
			?(СпособУстановкиВремениНапоминания 
				= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"),
				ВремяНапоминания,
				Объект.ДатаНачала));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнтервалВремениСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Результат = ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.НапоминаниеДокументооборот", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ИнтервалВремениСтрокой <> ВыбранноеЗначение Тогда
		
		ИзмененоНапоминание = Истина;
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СпособУстановкиВремениНапоминания
		= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ИнтервалВремениСтрокой <> Результат.ИнтервалВремениСтрокой Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ИнтервалВремениСтрокой = Результат.ИнтервалВремениСтрокой;
		ВремяНапоминания = Дата(1,1,1);
		
	ИначеЕсли Результат.СпособУстановкиВремениНапоминания =
		ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ВремяНапоминания <> Результат.ВремяНапоминания Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ВремяНапоминания = Результат.ВремяНапоминания;
		ИнтервалВремениСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в %2 %1'"),
				Формат(ВремяНапоминания, "ДЛФ=D"),
				Формат(ВремяНапоминания, "ДФ=ЧЧ:мм"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторятьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если Объект.Пользователь <> ТекущийПользователь Тогда
		Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗаписейРабочегоКалендаря.ПодВопросом");
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПометкаУдаления(Команда)
	
	Если Модифицированность = Истина Или (Не ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкаУдаленияЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для установки отметки удаления необходимо записать внесенные вами изменения. Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкуУдаления(Объект.Ссылка, НЕ Объект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкаУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	РаботаСРабочимКалендаремКлиент.УстановитьПометкуУдаления(Объект.Ссылка, НЕ Объект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура Повторение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуНастройкиПовторения(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПолеПользователь(Команда)
	
	ОтображатьПолеПользователь = Не ОтображатьПолеПользователь;
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ДатаНачалаВремя.Доступность = НЕ Объект.ВесьДень;
	Элементы.ДатаОкончанияВремя.Доступность = НЕ Объект.ВесьДень;
	Элементы.ФормаПовторение.Доступность = НЕ Объект.ПометкаУдаления;
	
	Если ИспользоватьНапоминанияПользователя Тогда
		Элементы.ИнтервалВремениСтрокой.Доступность = УстановитьНапоминание;
		Элементы.ГруппаНапоминаниеОтносительноДатыНачала.Доступность = НЕ Объект.ПометкаУдаления;
	КонецЕсли;
	
	Элементы.Состояние.Доступность = (Объект.Пользователь = ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	
	Элементы.Состояние.Видимость =
		(Объект.Состояние <> Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято)
		Или РаботаСРабочимКалендаремСервер.ЯвляетсяСвязаннойЗаписьюКалендаря(Объект.Ссылка);
	
	Элементы.ГруппаНапоминаниеОтносительноДатыНачала.Видимость = ИспользоватьНапоминанияПользователя;
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Объект.Предмет);
	Элементы.ФормаПовторение.Видимость = (Объект.ТипЗаписиКалендаря <> Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия);
	Элементы.ГруппаПовторять.Видимость = (Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие);
	Элементы.Пользователь.Видимость = ОтображатьПолеПользователь;
	Элементы.ФормаОтображатьПолеПользователь.Пометка = ОтображатьПолеПользователь;
	Элементы.Автор.Видимость = Объект.Пользователь <> Объект.Автор;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АвтоЗаголовок = Ложь;
		
		Если НачалоДня(Объект.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ОписаниеДляЗаголовка = Формат(Объект.ДатаНачала, "ДФ=ЧЧ:мм") + ", " + Объект.ОписаниеКраткое;
		Иначе
			ОписаниеДляЗаголовка = Формат(Объект.ДатаНачала, "ДФ='ЧЧ:мм дд МММ'") + ", "  + Объект.ОписаниеКраткое;
		КонецЕсли;
		
		ЗаголовокПревысилДлину = (СтрДлина(ОписаниеДляЗаголовка) > 40);
		ОписаниеДляЗаголовка = Лев(ОписаниеДляЗаголовка, 40);
		Если ЗаголовокПревысилДлину Тогда
			ОписаниеДляЗаголовка = ОписаниеДляЗаголовка + "...";
		КонецЕсли;
		
		Заголовок = ОписаниеДляЗаголовка + НСтр("ru = ' (Запись календаря)'");
		
	Иначе
		
		АвтоЗаголовок = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодписьПовторять()
	
	Если Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		НастройкиПовторения = ПолучитьНастройкиПовторения();
		ПовторениеСтрокой =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьСобытия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
	
	Если Объект.ВесьДень Тогда
		ДлительностьСек = ДлительностьСек + 1;
	КонецЕсли;
	
	Дней = Цел(ДлительностьСек / 86400); // 86400 - число секунд в сутках
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(Дней);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600); // 86400 - число секунд в сутках
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60); // 86400 - число секунд в сутках
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(Минут);
	
	Если Дней > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Дней) + " " + ПодписьДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 ИЛИ Часов > 0 Тогда
			ДлительностьСтр = ДлительностьСтр + " ";
		КонецЕсли;
		
		ДлительностьСтр = ДлительностьСтр + Строка(Минут) + " " + ПодписьМинут;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	// Заполнение списка выбора даты начала
	Элементы.ДатаНачалаВремя.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		ТекДата = НачалоДня(Объект.ДатаНачала);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаНачала > ТекДата И Объект.ДатаНачала < ТекДата + 1800 Тогда
			Элементы.ДатаНачалаВремя.СписокВыбора.Добавить(Объект.ДатаНачала, Формат(Объект.ДатаНачала, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	// Заполнение списка выбора даты окончания
	Элементы.ДатаОкончанияВремя.СписокВыбора.Очистить();
	
	СобытиеВПределахОдногоДня = ЗначениеЗаполнено(Объект.ДатаНачала)
		И (НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания)
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания))
		И Объект.ДатаНачала < Объект.ДатаОкончания;
	
	Если СобытиеВПределахОдногоДня Тогда
		
		ТекДата = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(Объект.ДатаНачала);
		Если Объект.ДатаОкончания > ТекДата - 1800 И Объект.ДатаОкончания < ТекДата Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекДата = НачалоДня(Объект.ДатаОкончания);
	Иначе
		ТекДата = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Для Инд = 1 По 48 Цикл
		
		Если СобытиеВПределахОдногоДня И ТекДата > КонецДня(Объект.ДатаНачала) Тогда
			Прервать;
		КонецЕсли;
		
		Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если Объект.ДатаОкончания > ТекДата И Объект.ДатаОкончания < ТекДата + 1800 Тогда
			Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(Объект.ДатаОкончания, Формат(Объект.ДатаОкончания, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		ТекДата = ТекДата + 1800;
		
	КонецЦикла;
	
	Элементы.ДатаОкончанияВремя.СписокВыбора.Добавить(ТекДата, "00:00");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНапоминанияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
	СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
	СпособУстановкиВремениНапоминания, ВремяНапоминания)
	
	Если Напоминание <> Неопределено Тогда
		
		УстановитьНапоминание = Истина;
		УстановленоНапоминание = Истина;
		
		Если Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			
			ИнтервалВремениСтрокой =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в %2 %1'"),
					Формат(Напоминание.ВремяСобытия, "ДЛФ=D"),
					Формат(Напоминание.ВремяСобытия, "ДФ=ЧЧ:мм"));
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя");
			ВремяНапоминания = Напоминание.ВремяСобытия;
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			
			Если Напоминание.ИнтервалВремениНапоминания >= 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
				
				ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(Напоминание.ИнтервалВремениНапоминания);
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания <> 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1 до окончания'"),
					НапоминанияПользователяКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания));
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания = 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = НСтр("ru = 'при окончании события'");
				
			КонецЕсли;
			
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
			ВремяНапоминания = Дата(1,1,1);
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			
			ИнтервалВремениСтрокой = НСтр("ru = 'по заданному расписанию'");
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьНапоминание = Ложь;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНапоминанияДокументооборота(ПараметрыНапоминания)
	
	Если ПараметрыНапоминания.Свойство("Пользователь")
		И ПараметрыНапоминания.Свойство("Источник")
		И ПараметрыНапоминания.Свойство("ВремяСобытия")
		И ПараметрыНапоминания.Свойство("СпособУстановкиВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИнтервалВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИмяРеквизитаИсточника") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИнтервалыНапоминания()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Очистить();
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'при наступлении события'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 5 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 10 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 15 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 30 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 1 час'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 2 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 3 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'Другое...'"));
		
		Если Элементы.ИнтервалВремениСтрокой.СписокВыбора.НайтиПоЗначению(ИнтервалВремениСтрокой) = Неопределено Тогда
			Элементы.ИнтервалВремениСтрокой.СписокВыбора.Вставить(0, ИнтервалВремениСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНапоминание()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		ИзмененоНапоминание = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(Объект.Ссылка);
			УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
				СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
				СпособУстановкиВремениНапоминания, ВремяНапоминания);
			
		Иначе
			
			УстановитьНапоминание = УстанавливатьНапоминаниеАвтоматически;
			УстановленоНапоминание = Ложь;
			ИнтервалВремениСтрокой = НапоминанияПользователяКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
			СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиПовторения()
	
	ПовторениеПоДнямНедели = ПолучитьПовторениеПоДнямНедели();
	ПовторениеПоДнямНеделиВМесяце = Неопределено;
	
	Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно
		И НЕ ЗначениеЗаполнено(Объект.ПовторениеПоДнямМесяца) И Объект.ПовторениеПоДням.Количество() = 1 Тогда
		
		ПовторениеПоДнямНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
		ЗаполнитьЗначенияСвойств(ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоДням[0]);
		
	КонецЕсли;
	
	НастройкиПовторения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьСтруктуруНастройкиПовторения(
		Объект.ЧастотаПовторения, Объект.ИнтервалПовторения, Объект.ПравилоОкончанияПовторения,
		Объект.КоличествоПовторов, Объект.ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		Объект.ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, Объект.ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

&НаСервере
Функция ПолучитьПовторениеПоДнямНедели()
	
	ПовторениеПоДням = Новый Соответствие;
	Для ИндексПовторениеПоДням = 1 По 7 Цикл
		
		Если Объект.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДеньНедели", ИндексПовторениеПоДням);
			ПараметрыОтбора.Вставить("НомерВхождения", 0);
			НайденныеСтроки = Объект.ПовторениеПоДням.НайтиСтроки(ПараметрыОтбора); 
			
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, НайденныеСтроки.Количество() <> 0);
			
		Иначе
			ПовторениеПоДням.Вставить(ИндексПовторениеПоДням, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПовторениеПоДням;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаИзмененияЦвета()
	
	ЦветИндекс = РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(Цвет);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиент.УстановитьЦветЗаписиКалендаря(Цвет, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(Объект.Ссылка);
	ЦветИндекс = РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(Цвет);
	
КонецПроцедуры

#КонецОбласти