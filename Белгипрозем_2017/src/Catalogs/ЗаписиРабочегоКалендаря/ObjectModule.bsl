#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Включает на данную дату как исключение из правила повторения
Процедура ДобавитьИсключениеПовторения(ДатаИсключения, ЗаписьИсключения = Неопределено) Экспорт
	
	Если ТипЗаписиКалендаря <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный тип повторяющегося события.'");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", ДатаИсключения);
	НайденныеСтроки = ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'На данную дату уже указано исключение повторения.'");
	КонецЕсли;
	
	НоваяСтрокаИсключенияПовторения = ИсключенияПовторения.Добавить();
	НоваяСтрокаИсключенияПовторения.ЗаписьИсключения = ЗаписьИсключения;
	НоваяСтрокаИсключенияПовторения.ДатаИсключения = ДатаИсключения;
	
КонецПроцедуры

// Возвращает следующую дату начала повторяющегося события
Функция ПолучитьСледующуюДатуНачала(ДатаОтсчета) Экспорт
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) И ДатаОтсчета >= ДатаОкончанияПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	
	НомерИтерации = 0;
	ПроверяемаяДата = НачалоДня(ДатаОтсчета);
	
	Пока НомерИтерации < 10000 Цикл // Ограничение на слишком следующую дату начала
		
		Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
			
			ВозможнаяДата = ПроверяемаяДата + (ДатаНачала - НачалоДня(ДатаНачала));
			Если ДатаОтсчета < ВозможнаяДата Тогда
				Возврат ВозможнаяДата;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает реквизиты записи календаря на дату
Функция ПолучитьРеквизитыЗаписиКалендаря(ДатаЗаписи = Неопределено) Экспорт
	
	РеквизитыЗаписиКалендаря = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСтруктуруРеквизитовЗаписиКалендаря();
	ЗаполнитьЗначенияСвойств(РеквизитыЗаписиКалендаря, ЭтотОбъект);
	
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		Если ЗначениеЗаполнено(ДатаЗаписи) Тогда
			ДатаНачалаИОкончания = ПолучитьДатуНачалаИДатуОкончания(ДатаЗаписи);
			Если НЕ ЗначениеЗаполнено(ДатаНачалаИОкончания) Тогда
				Возврат Неопределено;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(РеквизитыЗаписиКалендаря, ДатаНачалаИОкончания);
		Иначе
			РеквизитыЗаписиКалендаря.Повторять = ПолучитьТекстовоеПредставлениеПовторения();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыЗаписиКалендаря;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Пользователь = Автор;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Предмет") И ЗначениеЗаполнено(ДанныеЗаполнения.Предмет) Тогда
			
			Если ТипЗнч(ДанныеЗаполнения.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
				
				Мероприятие = ДанныеЗаполнения.Предмет;
				
				Описание = СокрЛП(Мероприятие.Наименование);
				ДатаНачала = Мероприятие.ДатаНачала;
				ДатаОкончания = Мероприятие.ДатаОкончания;
				Предмет = Мероприятие;
				ВесьДень = Ложь;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо")
				ИЛИ ТипЗнч(ДанныеЗаполнения.Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				
				Описание = СокрЛП(ДанныеЗаполнения.Предмет.Тема);
				Предмет = ДанныеЗаполнения.Предмет;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И ТипЗнч(ДанныеЗаполнения.Предмет.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
				
				Описание = СокрЛП(ДанныеЗаполнения.Предмет.Наименование);
				ДатаНачала = ДанныеЗаполнения.Предмет.БизнесПроцесс.ДатаНачалаМероприятия;
				ДатаОкончания = ДанныеЗаполнения.Предмет.БизнесПроцесс.ДатаОкончанияМероприятия;
				Предмет = ДанныеЗаполнения.Предмет;
				ВесьДень = Ложь;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Предмет) = Тип("СправочникСсылка.Контроль") Тогда 
				
				Описание = СокрЛП(ДанныеЗаполнения.Предмет.Описание);
				Предмет = ДанныеЗаполнения.Предмет;
				
				Если ЗначениеЗаполнено(Предмет.СрокИсполнения) И НачалоДня(Предмет.СрокИсполнения) >= НачалоДня(ТекущаяДатаСеанса()) Тогда 
					ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(
						ПользователиКлиентСервер.ТекущийПользователь());
					
					ДатаОкончания = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикРаботы, 
						Предмет.СрокИсполнения);
						
					ДатаНачала = ДатаОкончания - 3600;
				КонецЕсли;		
				
			Иначе
				
				Описание = СокрЛП(ДанныеЗаполнения.Предмет.Наименование);
				Предмет = ДанныеЗаполнения.Предмет;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаНачала") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаНачала) Тогда
			
			ДатаНачала = ДанныеЗаполнения.ДатаНачала;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаОкончания") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОкончания) Тогда
			
			ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВесьДень") И ДанныеЗаполнения.ВесьДень Тогда
			
			ВесьДень = ДанныеЗаполнения.ВесьДень;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(ДанныеЗаполнения.ПовторяющеесяСобытие)
			И ДанныеЗаполнения.Свойство("ДатаИсключения") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаИсключения) Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.ПовторяющеесяСобытие,
				"ВесьДень, ДатаНачала, ДатаОкончания, Описание, Пользователь, Предмет, Состояние");
			
			ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;
			
			ИсходнаяДатаНачала = ДатаНачала;
			ДатаНачала = НачалоДня(ДанныеЗаполнения.ДатаИсключения) + (ИсходнаяДатаНачала - НачалоДня(ИсходнаяДатаНачала));
			ДатаОкончания = НачалоДня(ДанныеЗаполнения.ДатаИсключения) + (ДатаОкончания - НачалоДня(ИсходнаяДатаНачала));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		СкопироватьЗаписьКалендаря(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		ДатаНачала = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ТекущаяДатаСеанса());
		ДатаОкончания = ДатаНачала + 3600;
		
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(ДатаНачала, ДатаОкончания, ВесьДень);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДатаНачала >= ДатаОкончания Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания должна быть больше даты начала.'"), ЭтотОбъект, "ДатаОкончания", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончания Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала  не может быть меньше даты окончания.'"));
		Возврат;
	КонецЕсли;
	
	Если ВесьДень Тогда
		РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
			ДатаНачала, ДатаОкончания, ВесьДень);
	КонецЕсли;
	
	ЗаполнитьНаименованиеИКраткоеОписание();
	
	// Установка настроек повторения
	Если ДополнительныеСвойства.Свойство("НастройкиПовторения") Тогда
		
		// Отказ в установке повторения для помеченной на удаление записи
		Если ПометкаУдаления = Истина Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Невозможно настроить повторение для записи, помеченной на удаление.'"));
			Возврат;
		КонецЕсли;
		
		// Отказ в установке повторения для записи, уже являющейся исключением повторения
		Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Невозможно настроить повторение для записи, являющейся исключением повторения.'"));
			Возврат;
		КонецЕсли;
		
		// При смене частоты повторения очищаются все настройки повторения, в том числе и исключения
		Если ЧастотаПовторения <> ДополнительныеСвойства.НастройкиПовторения.ЧастотаПовторения Тогда
			ОчиститьРеквизитыПовторения();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеСвойства.НастройкиПовторения);
		
		// Проверка заполненности частоты повторения
		Если ЗначениеЗаполнено(ЧастотаПовторения) Тогда
			ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
		Иначе
			ОтменитьПовторение();
		КонецЕсли;
		
		// Установка настроек и проверка заполненности, особенная для каждой частоты повторения
		Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПовторениеПоДням.Очистить();
			
			Для Каждого ДеньПовтора Из ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНедели Цикл
				Если ДеньПовтора.Значение Тогда
					НоваяСтрока = ПовторениеПоДням.Добавить();
					НоваяСтрока.ДеньНедели = ДеньПовтора.Ключ;
					НоваяСтрока.НомерВхождения = 0;
				КонецЕсли;
			КонецЦикла;
			
			Если ПовторениеПоДням.Количество() = 0 Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
			
			ПовторениеПоДням.Очистить();
			
			Если ЗначениеЗаполнено(ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце) Тогда
				НоваяСтрока = ПовторениеПоДням.Добавить();
				ЗаполнитьЗначенияСвойств(
					НоваяСтрока,
					ДополнительныеСвойства.НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) И ПовторениеПоДням.Количество() = 0 Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
			
			Если НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) ИЛИ НЕ ЗначениеЗаполнено(ПовторениеПоМесяцам) Тогда
				ОтменитьПовторение();
			КонецЕсли;
			
		КонецЕсли;
		
		// Удаление исключений повторения, не подходящих под новое правило повторения
		СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
		ИсключенияПовторенияКоличество = ИсключенияПовторения.Количество();
		Для ИндексИсключения = 1 По ИсключенияПовторенияКоличество Цикл
			
			ИсключениеПовторения = ИсключенияПовторения[ИсключенияПовторенияКоличество - ИндексИсключения];
			Если НЕ РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ИсключениеПовторения.ДатаИсключения, СтруктураПравилаПовторения, Ложь) Тогда
				
				ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения);
				ИсключенияПовторения.Удалить(ИсключениеПовторения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Корректировка даты начала повторения и даты окончания повторения
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие
		ИЛИ ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		
		ОчиститьРеквизитыПовторения();
		
	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		ДатаНачалаПовторения = ДатаНачала;
		
		Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
			ДатаОкончанияПовторения = Дата(1,1,1);
		ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
			РассчитатьДатуОкончанияПовторения();
		ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияПовторения) Тогда
				ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
			ИначеЕсли ДатаОкончанияПовторения < ДатаНачалаПовторения Тогда
				ОтменитьПовторение();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Очистка настроек повторения при удалении повторяющегося события
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие И ИзмениласьПометкаУдаления() Тогда
		
		Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
			ОтменитьПовторение();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Ссылка.Пустая() Тогда
		
		ПредыдущееСостояние =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
		
		ДополнительныеСвойства.Вставить(
			"ПредыдущееСостояние", 
			ПредыдущееСостояние);
		
	КонецЕсли;
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	
	// Добавление автоматических участников из самого объекта
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа);
		
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПовторяющеесяСобытие") И ЗначениеЗаполнено(ДополнительныеСвойства.ПовторяющеесяСобытие)
		И ДополнительныеСвойства.Свойство("ДатаИсключения") И ЗначениеЗаполнено(ДополнительныеСвойства.ДатаИсключения) Тогда
		
		ПовторяющеесяСобытиеОбъект = ДополнительныеСвойства.ПовторяющеесяСобытие.ПолучитьОбъект();
		ПовторяющеесяСобытиеОбъект.Заблокировать();
		ПовторяющеесяСобытиеОбъект.ДобавитьИсключениеПовторения(ДополнительныеСвойства.ДатаИсключения, Ссылка);
		ПовторяющеесяСобытиеОбъект.Записать();
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПредыдущееСостояние") И ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущееСостояние)
		И ДополнительныеСвойства.ПредыдущееСостояние <> Состояние Тогда
		
		ИзменениеЗаписиКалендаряИзПредмета =
			ДополнительныеСвойства.Свойство("ИзменениеЗаписиКалендаряИзПредмета")
			И ДополнительныеСвойства.ИзменениеЗаписиКалендаряИзПредмета;
		
		
		Если Не ИзменениеЗаписиКалендаряИзПредмета Тогда
			РаботаСРабочимКалендаремСервер.ОбработатьИзменениеСостоянияЗаписиКалендаря(Ссылка, Состояние);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СкопироватьЗаписьКалендаря(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкопироватьЗаписьКалендаря(ЗаписьКалендаря)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаписьКалендаря,
		"ВесьДень, ДатаНачала, ДатаОкончания, Описание, Состояние, Предмет");
	
	ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	
	ДатаНачалаПовторения = Неопределено;
	ДатаОкончанияПовторения = Неопределено;
	ИнтервалПовторения = Неопределено;
	КоличествоПовторов = Неопределено;
	ПовторениеПоДнямМесяца = Неопределено;
	ПовторениеПоМесяцам = Неопределено;
	ПравилоОкончанияПовторения = Неопределено;
	ЧастотаПовторения = Неопределено;
	
	ИсключенияПовторения.Очистить();
	ПовторениеПоДням.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИКраткоеОписание()
	
	ВременныйТекстОписания = СокрЛП(Описание);
	СимволСокращения = "...";
	
	ВременныйТекстОписания = РаботаСРабочимКалендаремКлиентСервер.СократитьПовторноеВхождениеСимвола(ВременныйТекстОписания, Символы.ПС);
	ВременныйТекстОписания = РаботаСРабочимКалендаремКлиентСервер.СократитьПовторноеВхождениеСимвола(ВременныйТекстОписания, " ");
	
	МаксимальнаяДлинаКраткогоОписания = 1024;
	Если СтрДлина(ВременныйТекстОписания) > МаксимальнаяДлинаКраткогоОписания Тогда
		ВременныйТекстОписания = Лев(ВременныйТекстОписания,
			МаксимальнаяДлинаКраткогоОписания - СтрДлина(СимволСокращения)) + СимволСокращения;
	КонецЕсли;
	ОписаниеКраткое = ВременныйТекстОписания;
	
	МаксимальнаяДлинаНаименования = 150 - СтрДлина(Строка(ДатаНачала) + ", ");
	Если СтрДлина(ВременныйТекстОписания) > МаксимальнаяДлинаНаименования Тогда
		ВременныйТекстОписания = Лев(ВременныйТекстОписания,
			МаксимальнаяДлинаНаименования - СтрДлина(СимволСокращения)) + СимволСокращения;
	КонецЕсли;
	Наименование = Строка(ДатаНачала) + ", "+ ВременныйТекстОписания;
	
КонецПроцедуры

Процедура ОчиститьРеквизитыПовторения()
	
	ДатаНачалаПовторения = Дата(1,1,1);
	ДатаОкончанияПовторения = Дата(1,1,1);
	ИнтервалПовторения = 0;
	ПовторениеПоДнямМесяца = 0;
	ПовторениеПоМесяцам = 0;
	ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПустаяСсылка();
	ЧастотаПовторения = Перечисления.ЧастотаПовторения.ПустаяСсылка();
	КоличествоПовторов = 0;
	ПовторениеПоДням.Очистить();
	
	ОчиститьИсключенияПовторения();
	
КонецПроцедуры

Процедура ОчиститьИсключенияПовторения()
	
	Для Каждого ИсключениеПовторения Из ИсключенияПовторения Цикл
		
		ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения);
		
	КонецЦикла;
	
	ИсключенияПовторения.Очистить();
	
КонецПроцедуры

Процедура ПометитьНаУдалениеИсключениеПовторения(ИсключениеПовторения)
	
	Если ЗначениеЗаполнено(ИсключениеПовторения.ЗаписьИсключения) Тогда
		
		ЗаписьИсключенияОбъект = ИсключениеПовторения.ЗаписьИсключения.ПолучитьОбъект();
		
		Если ЗаписьИсключенияОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаписьИсключенияОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
			ЗаписьИсключенияОбъект.Заблокировать();
			ЗаписьИсключенияОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
			ЗаписьИсключенияОбъект.ПометкаУдаления = Истина;
			ЗаписьИсключенияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьДатуОкончанияПовторения()
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КоличествоПовторов) Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
		Возврат;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	
	НомерИтерации = 0;
	НомерПовтора = 0;
	ПроверяемаяДата = ДатаНачалаПовторения;
	
	Пока НомерИтерации < 10000 Цикл // Ограничение на слишком большую дату окончания повторения
		
		Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
				ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
			
			НомерИтерации = 0;
			НомерПовтора = НомерПовтора + 1;
			
			Если НомерПовтора = КоличествоПовторов Тогда
				ДатаОкончанияПовторения = ПроверяемаяДата;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
		НомерИтерации = НомерИтерации + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзмениласьПометкаУдаления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат ПометкаУдаления И НЕ Выборка.ПометкаУдаления;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСтруктуруПравилаПовторения()
	
	СтруктураПравилаПовторения = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСтруктуруПравилаПовторения();
	ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, ЭтотОбъект);
	СтруктураПравилаПовторения.ИсключенияПовторения = ИсключенияПовторения.Выгрузить();
	СтруктураПравилаПовторения.ПовторениеПоДням = ПовторениеПоДням.Выгрузить();
	
	Возврат СтруктураПравилаПовторения;
	
КонецФункции

Процедура ОтменитьПовторение()
	
	ОчиститьРеквизитыПовторения();
	ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	
КонецПроцедуры

Функция ПолучитьДатуНачалаИДатуОкончания(ДатаЗаписи)
	
	Если ДатаЗаписи < ДатаНачалаПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончанияПовторения) И ДатаЗаписи > ДатаОкончанияПовторения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПравилаПовторения = ПолучитьСтруктуруПравилаПовторения();
	ПроверяемаяДата = НачалоДня(ДатаЗаписи);
	
	Если РаботаСРабочимКалендаремСервер.ДатаУдовлетворяетПравилуПовторения(
			ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		
		ДатаНачалаИОкончания = Новый Структура("ДатаНачала, ДатаОкончания");
		ДатаНачалаИОкончания.ДатаНачала = ПроверяемаяДата + (ДатаНачала - НачалоДня(ДатаНачала));
		ДатаНачалаИОкончания.ДатаОкончания = ПроверяемаяДата + (ДатаОкончания - НачалоДня(ДатаНачала));
		
		Возврат ДатаНачалаИОкончания;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТекстовоеПредставлениеПовторения()
	
	ТекстовоеПредставлениеПовторения = "";
	
	НастройкиПовторения = ПолучитьНастройкиПовторения();
	ТекстовоеПредставлениеПовторения =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения);
	
	Возврат ТекстовоеПредставлениеПовторения;
	
КонецФункции

Функция ПолучитьНастройкиПовторения()
	
	ПовторениеПоДнямНедели = Новый Соответствие;
	Для ИндексПовторениеПоДням = 1 По 7 Цикл
		
		Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДеньНедели", ИндексПовторениеПоДням);
			ПараметрыОтбора.Вставить("НомерВхождения", 0);
			НайденныеСтроки = ПовторениеПоДням.НайтиСтроки(ПараметрыОтбора); 
			
			ПовторениеПоДнямНедели.Вставить(ИндексПовторениеПоДням, НайденныеСтроки.Количество() <> 0);
			
		Иначе
			ПовторениеПоДнямНедели.Вставить(ИндексПовторениеПоДням, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	ПовторениеПоДнямНеделиВМесяце = Неопределено;
	
	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно
		И НЕ ЗначениеЗаполнено(ПовторениеПоДнямМесяца) И ПовторениеПоДням.Количество() = 1 Тогда
		
		ПовторениеПоДнямНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
		ЗаполнитьЗначенияСвойств(ПовторениеПоДнямНеделиВМесяце, ПовторениеПоДням[0]);
		
	КонецЕсли;
	
	НастройкиПовторения = РаботаСРабочимКалендаремКлиентСервер.ПолучитьСтруктуруНастройкиПовторения(
		ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
		КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
		ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Пользователь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли