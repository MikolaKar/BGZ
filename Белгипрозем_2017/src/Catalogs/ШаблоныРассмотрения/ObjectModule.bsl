
////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Исполнитель.ВнешняяРоль Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
			ЭтотОбъект,
			"Исполнитель",, 
			Отказ);
	КонецЕсли;
	
	Если БизнесСобытияВызовСервера.ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(Ссылка) Тогда
		
		МассивПолей = ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если МассивПолей.Количество() <> 0 Тогда
			
			СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
			
			Текст = 
				НСтр("ru = 'Этот шаблон используется для автоматического запуска процессов. Должны быть заполнены поля: '")
				+ СтрокаПолей;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"Объект.Ссылка",, 
				Отказ);
			
		КонецЕсли;		
		
	КонецЕсли;		
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) 
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач")
		И ЗначениеЗаполнено(СрокИсполненияЧас) Тогда
		Результат = Результат 
			+ НСтр("ru = 'Срок исполнения'") + ": "
			+ ?(ЗначениеЗаполнено(СрокИсполнения), Строка(СрокИсполнения) + НСтр("ru = ' дней'"),"")
			+ ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") И ЗначениеЗаполнено(СрокИсполненияЧас), Строка(СрокИсполненияЧас) + НСтр("ru = ' часов'"),"") 
			+ Символы.ПС;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Результат = Результат + Нстр("ru = 'Исполнитель'") + ": "
			+ Строка(Исполнитель)
			+ ?(ЗначениеЗаполнено(ОсновнойОбъектАдресации),
				", " + ОсновнойОбъектАдресации, "")
			+ ?(ЗначениеЗаполнено(ДополнительныйОбъектАдресации),
				", " + ДополнительныйОбъектАдресации, "")
			+ Символы.ПС;
	КонецЕсли;
				
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка комплексных процессов

Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения() Экспорт
	
	Результат = "";
	
	ОбщийСрокИсполнения = 
		СрокИсполнения * 86400
		+ СрокИсполненияЧас * 3600
		+ СрокОтложенногоСтарта;
		
	ОбщийСрокИсполненияДни = Цел(ОбщийСрокИсполнения / 86400);
	ОбщийСрокИсполненияЧасы = 
		(ОбщийСрокИсполнения - ОбщийСрокИсполненияДни * 86400) / 3600;
	
	РезультатИсполнение = "";
	БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		РезультатИсполнение,
		ОбщийСрокИсполненияДни,
		ОбщийСрокИсполненияЧасы);

	Возврат РезультатИсполнение;
			
КонецФункции

Функция ПолучитьСтроковоеПредставлениеИсполнителей() Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Результат = Результат + Строка(Исполнитель);
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДлительностьПроцесса() Экспорт
		
	Результат = СрокИсполнения * 24 + СрокИсполненияЧас + СрокОтложенногоСтарта / 3600;
	Возврат Результат;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ШаблоныРассмотрения.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
          	
КонецПроцедуры
