#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлОбязателенДляНовых = Объект.Ссылка.Пустая();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		HTMLКодИнструкции = РаботаСИнструкциями.ТекстИнструкции(Объект.Ссылка);
		ТекстИнструкции = РаботаСИнструкциями.УстановитьСтильОформленияИнструкции(HTMLКодИнструкции);
	КонецЕсли;
	
	Если Параметры.Свойство("ПредметИнструкции") Тогда
		Объект.ПредметИнструкции = Параметры.ПредметИнструкции;
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьДоступность();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		СтруктураПрав = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Элементы.ГруппаЭлемента.Видимость = СтруктураПрав.Изменение;
		Элементы.ГруппаКнопок.Видимость = СтруктураПрав.Изменение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановкаВидаДокументаПоПредмету();
	УстановкаВидимостиХарактеристикПоПредмету();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ТекстИнструкцииИзменен Тогда
		ТекущийОбъект.ТекстИнструкции = Новый ХранилищеЗначения(ТекстИнструкции, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Если ТекущийОбъект.УсловияОтображения.Количество() = 1
		И Не Элементы.УсловияОтображения.Видимость Тогда
		
		ТекСтрока = ТекущийОбъект.УсловияОтображения.Получить(0);
		ТекСтрока.ВидДокумента = ВидДокумента;
		ТекСтрока.СостояниеДокумента = СостояниеДокумента;
		ТекСтрока.ГрифДоступа = ГрифДоступа;
		ТекСтрока.ВопросДеятельности = ВопросДеятельности;
	КонецЕсли;
	
	// Удаление пустых строк в ТЧ ДоступНаЧтение
	ПустыеСтроки = ТекущийОбъект.ДоступНаЧтение.НайтиСтроки(
		Новый Структура("Пользователь", Справочники.Пользователи.ПустаяСсылка()));
	Для каждого СтрокаТаблицы Из ПустыеСтроки Цикл
		ТекущийОбъект.ДоступНаЧтение.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Инструкции", Объект.Ссылка);
	УстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредметИнструкцийПриИзменении(Элемент)
	
	УстановкаВидаДокументаПоПредмету();
	УстановкаВидимостиХарактеристикПоПредмету(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловияОтображения

&НаКлиенте
Процедура УсловияОтображенияВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВнутренниеДокументы") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ВидыВнутреннихДокументов.ФормаВыбора", , Элемент);
	ИначеЕсли Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВходящиеДокументы") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ВидыВходящихДокументов.ФормаВыбора", , Элемент);
	ИначеЕсли Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ИсходящиеДокументы") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ВидыИсходящихДокументов.ФормаВыбора", , Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступНаЧтение

&НаКлиенте
Процедура ДоступНаЧтениеПодобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДоступНаЧтение.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Пользователь) Тогда 
		РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ТекущиеДанные.Пользователь,,Истина,,,
			ТекущиеДанные.ОсновнойОбъектАдресации, 
			ТекущиеДанные.ДополнительныйОбъектАдресации);
	Иначе
		АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
		РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.ДоступНаЧтение.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Пользователь",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступНаЧтение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.Пользователь = ПользователиПустаяСсылка;
	ТекущиеДанные.ОсновнойОбъектАдресации = Неопределено;
	ТекущиеДанные.ДополнительныйОбъектАдресации = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.ДоступНаЧтение.ТекущиеДанные;
		ТекущийДанные.Пользователь = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоступНаЧтениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ДоступНаЧтение.ТекущиеДанные.Пользователь = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьТиповуюИнструкцию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьТиповуюИнструкциюЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаТиповыхИнструкций.Форма.ФормаВыбораМакета",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТиповуюИнструкциюЗавершение(ИмяМакетаТиповой, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяМакетаТиповой) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяМакетаТиповой = ИмяМакетаТиповой;
	
	ТекстИнструкции = РаботаСИнструкциями.ТекстТиповойИнструкции(ИмяМакетаТиповой);
	ТекстИнструкции = РаботаСИнструкциямиКлиент.ОтформатироватьТекстИнструкции(, ТекстИнструкции);
	ТекстИнструкции = РаботаСИнструкциями.УстановитьСтильОформленияИнструкции(ТекстИнструкции);
	
	ТекстИнструкцииИзменен = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлИнструкции(Команда)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файлы инструкций (*.htm, *.html)|*.htm?";
	ДиалогВыбораФайла.Заголовок = "Выберите файл инструкции";
	ДиалогВыбораФайла.ПолноеИмяФайла = "";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКФайлуИнструкции = ДиалогВыбораФайла.ПолноеИмяФайла;
		ТекстИнструкцииИзменен = Истина;
		ПолучитьТекстИнструкции(ПутьКФайлуИнструкции);
		Объект.ИмяМакетаТиповой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлИнструкции(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = "Файлы инструкций (*.htm, *.html)|*.htm?";
	ДиалогВыбораФайла.Заголовок = "Сохранение файла инструкции";
	ДиалогВыбораФайла.ПолноеИмяФайла = 
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Объект.Наименование, "")
		+ ".html";
	ДиалогВыбораФайла.Каталог = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы",
		"ПапкаДляСохранитьКак");
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Текст = Новый ЗаписьТекста(ДиалогВыбораФайла.ПолноеИмяФайла);
		Текст.ЗаписатьСтроку(РаботаСИнструкциямиКлиент.ТекстИнструкции(Объект.Ссылка, Ложь));
		Текст.Закрыть();
		Состояние(НСтр("ru = 'Файл инструкции успешно сохранен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловиеОтображения(Команда)
	
	Элементы.ГруппаОдноУсловиеОтображения.Видимость = Ложь;
	Элементы.УсловияОтображения.Видимость = Истина;
	
	Если Объект.УсловияОтображения.Количество() = 0 Тогда
		УсловиеОтображение = Объект.УсловияОтображения.Добавить();
		УсловиеОтображение.ВидДокумента = Неопределено;
		УсловиеОтображение.СостояниеДокумента = Неопределено;
		УсловиеОтображение.ГрифДоступа = Неопределено;
		УсловиеОтображение.ВопросДеятельности = Неопределено;
	Иначе
		УсловиеОтображение = Объект.УсловияОтображения.Получить(0);
		УсловиеОтображение.ВидДокумента = ВидДокумента;
		УсловиеОтображение.СостояниеДокумента = СостояниеДокумента;
		УсловиеОтображение.ГрифДоступа = ГрифДоступа;
		УсловиеОтображение.ВопросДеятельности = ВопросДеятельности;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьТекстИнструкции(ПутьКФайлуИнструкции)
	
	НаименованиеИнструкции = "";
	
	HTMLКодИнструкции = РаботаСИнструкциямиКлиент.ОтформатироватьТекстИнструкции(
		ПутьКФайлуИнструкции, , НаименованиеИнструкции);
	ТекстИнструкции = РаботаСИнструкциями.УстановитьСтильОформленияИнструкции(HTMLКодИнструкции);
	
	Если Объект.Наименование = "" Тогда
		Объект.Наименование = НаименованиеИнструкции;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаВидаДокументаПоПредмету()
	
	Если ЗначениеЗаполнено(ВидДокумента)
		И (
			ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВнутренниеДокументы")
			ИЛИ ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов")
			И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВходящиеДокументы")
			ИЛИ ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов")
			И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ИсходящиеДокументы")
		) Тогда
		
		ВидДокумента = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.УсловияОтображения Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ВидДокумента)
			И (
				ТипЗнч(ТекСтрока.ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
				И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВнутренниеДокументы")
				ИЛИ ТипЗнч(ТекСтрока.ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов")
				И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВходящиеДокументы")
				ИЛИ ТипЗнч(ТекСтрока.ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов")
				И Объект.ПредметИнструкции <> ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ИсходящиеДокументы")
			) Тогда
			
			ТекСтрока.ВидДокумента = Неопределено;
		КонецЕсли
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Элементы.ВидДокумента.ВыбиратьТип = Истина;
		
		Если Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВнутренниеДокументы") Тогда
			Элементы.ВидДокумента.ВыбиратьТип = Ложь;
			ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ПустаяСсылка");
		ИначеЕсли Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВходящиеДокументы") Тогда
			Элементы.ВидДокумента.ВыбиратьТип = Ложь;
			ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВходящихДокументов.ПустаяСсылка");
		ИначеЕсли Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ИсходящиеДокументы") Тогда
			Элементы.ВидДокумента.ВыбиратьТип = Ложь;
			ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыИсходящихДокументов.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаВидимостиХарактеристикПоПредмету(ПересчитыватьУсловияОтображения = Истина)
	
	ПредметЯвляетсяДокументом = Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.Документы")
		ИЛИ Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВнутренниеДокументы")
		ИЛИ Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ВходящиеДокументы")
		ИЛИ Объект.ПредметИнструкции = ПредопределенноеЗначение("Справочник.ПредметыИнструкций.ИсходящиеДокументы");
		
	Элементы.ГруппаУсловияОтображенияДляДокументов.Видимость = ПредметЯвляетсяДокументом;		
	
	Если ПересчитыватьУсловияОтображения Тогда
		Элементы.ГруппаОдноУсловиеОтображения.Видимость = Объект.УсловияОтображения.Количество() <= 1;
		Элементы.УсловияОтображения.Видимость = Не Элементы.ГруппаОдноУсловиеОтображения.Видимость;
	КонецЕсли;
	
	Если Не ПредметЯвляетсяДокументом Тогда
		ВидДокумента = Неопределено;
		СостояниеДокумента = Неопределено;
		ГрифДоступа = Неопределено;
		ВопросДеятельности = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.СохранитьФайлИнструкции.Доступность = Не Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.УсловияОтображения.Количество() = 1 Тогда
		Элементы.ГруппаОдноУсловиеОтображения.Видимость = Истина;
		Элементы.УсловияОтображения.Видимость = Ложь;
		
		УсловиеОтображения = Объект.УсловияОтображения.Получить(0);
		ВидДокумента = УсловиеОтображения.ВидДокумента;
		СостояниеДокумента = УсловиеОтображения.СостояниеДокумента;
		ГрифДоступа = УсловиеОтображения.ГрифДоступа;
		ВопросДеятельности = УсловиеОтображения.ВопросДеятельности;
	ИначеЕсли Объект.УсловияОтображения.Количество() > 1 Тогда
		Элементы.ГруппаОдноУсловиеОтображения.Видимость = Ложь;
		Элементы.УсловияОтображения.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	ТаблицаЗначений = Объект.ДоступНаЧтение.Выгрузить();
	Колонка = ТаблицаЗначений.Колонки.Найти("Пользователь");
	Колонка.Имя = "Исполнитель";
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначений, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	ТекущиеПользователи = Объект.ДоступНаЧтение.Выгрузить();
	НовыеПользователи = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);

	Объект.ДоступНаЧтение.Очистить();
	Для Каждого СтрокаНовыйПользователь Из НовыеПользователи Цикл
		
		СтруктураОтбора = Новый Структура("Пользователь, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
			СтрокаНовыйПользователь.Исполнитель, 
			СтрокаНовыйПользователь.ОсновнойОбъектАдресации, 
			СтрокаНовыйПользователь.ДополнительныйОбъектАдресации);
			
		НайденныеСтроки = ТекущиеПользователи.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НоваяСтрока = Объект.ДоступНаЧтение.Добавить();
			НоваяСтрока.Пользователь = НайденныеСтроки[0].Пользователь;
			НоваяСтрока.ОсновнойОбъектАдресации = НайденныеСтроки[0].ОсновнойОбъектАдресации;
			НоваяСтрока.ДополнительныйОбъектАдресации = НайденныеСтроки[0].ДополнительныйОбъектАдресации;
		Иначе
			НоваяСтрока = Объект.ДоступНаЧтение.Добавить();
			НоваяСтрока.Пользователь = СтрокаНовыйПользователь.Исполнитель;
			НоваяСтрока.ОсновнойОбъектАдресации = СтрокаНовыйПользователь.ОсновнойОбъектАдресации;
			НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаНовыйПользователь.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти
