&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Если Параметры.Свойство("КарточкаОбъектаРабот") Тогда
        Если ЗначениеЗаполнено(Параметры.КарточкаОбъектаРабот) Тогда
            КарточкаОбъектаРабот = Параметры.КарточкаОбъектаРабот;
            КарточкаТабдок = Справочники.мКарточкиОбъектовРабот.ПечатьКарточкиОбъекта(КарточкаОбъектаРабот, Новый СписокЗначений); 
        КонецЕсли; 
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект.Поручение) Тогда
    	Заказчик = Объект.Поручение.Отправитель;
        Если Объект.Ссылка.Пустая() Тогда
            Объект.Состояние = Перечисления.мСостоянияКарточекОбъектовРабот.Проект;
            Объект.РасчетныйСчет = Заказчик.ОсновнойБанковскийСчет;
            Объект.ДатаСоставления = ТекущаяДата();
            Объект.Составил = Пользователи.ТекущийПользователь();
            Если ЗначениеЗаполнено(Объект.Поручение.мОбъектРабот) Тогда
                Объект.Владелец = Объект.Поручение.мОбъектРабот;
            КонецЕсли; 
            Если ЗначениеЗаполнено(Объект.Поручение.ВидРабот) Тогда
                Объект.ВидРабот = Объект.Поручение.ВидРабот;
            КонецЕсли; 
            ЭтоНовый = Истина;
            ЗаполнитьНаименованиеКарточки();
        Иначе
            ЭтоНовый = Ложь;
            
            //ЗаполнитьМакетКарточкиПараметрамиОбъекта();
            //ЗаполнитьЗаголовокКарточки();
        КонецЕсли; 
	КонецЕсли;
	
	// Заполнение списка вариантов карточек
	СписокВидовКарточек.Очистить();
	КолекцияЗначенийПеречисления = Метаданные.Перечисления.мВариантыКарточекИсходныхДанных.ЗначенияПеречисления;
	Для каждого пНайденноеЗначение из КолекцияЗначенийПеречисления Цикл
		СписокВидовКарточек.Добавить(пНайденноеЗначение, пНайденноеЗначение.Синоним);
	КонецЦикла;
	СписокВидовКарточек.СортироватьПоПредставлению();
	
	Если ЗначениеЗаполнено(ОбъектРабот) Тогда
		Объект.Владелец = ОбъектРабот;
	КонецЕсли; 
	Если Параметры.Свойство("ВидРабот") Тогда
		Если ЗначениеЗаполнено(Параметры.ВидРабот) Тогда
			Объект.ВидРабот = Параметры.ВидРабот;
		КонецЕсли; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(Заказчик) Тогда
		Объект.Заказчик = Заказчик;
		Объект.РасчетныйСчет = Заказчик.ОсновнойБанковскийСчет;
	КонецЕсли; 
    
    Элементы.ОсвобождениеОтНДС.Видимость = Объект.БезНДС;
    
    // СтандартныеПодсистемы.Печать
    УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
    // Конец СтандартныеПодсистемы.Печать
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// Заполняет макет Карточки значениями параметров объекта
&НаСервере
Процедура ЗаполнитьМакетКарточкиПараметрамиОбъекта()
	Карточка.Очистить();
    ИмяМакета = РаботаСКарточкойОбъекта.ПолучитьИмяМакета(Объект.ВидКарточки);	
    Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
        Возврат;
    КонецЕсли;
    Макет = УправлениеПечатью.ПолучитьМакет("Справочник.мКарточкиОбъектовРабот." + ИмяМакета);
	ОбластьПараметры = Макет.ПолучитьОбласть("Параметры");  
    
    // Заполнение параметров карточки
    ПараметрыОбъекта = Объект.ПараметрыОбъекта.Выгрузить();
    
    СтруктураПараметров = Новый Структура;
    Для Каждого ПараметрОбъекта Из ПараметрыОбъекта Цикл
        Если НЕ ОбщегоНазначения.СсылкаСуществует(ПараметрОбъекта.ПараметрОбъекта) Тогда
            ПараметрыОбъекта.Удалить(ПараметрОбъекта);
        	Продолжить;        
		КонецЕсли; 
		
		// Если это количество лесных хозяйств, то к хранимому количеству надо добавить 1, при записи - отнять
		ИмяПараметра = ПараметрОбъекта.ПараметрОбъекта.ИмяПредопределенныхДанных;
		Если ИмяПараметра = "КоличествоПлощадныхЛХорганизаций" Тогда
		    Если ЗначениеЗаполнено(ПараметрОбъекта.Значение) Тогда
				ЗначениеПараметра = ПараметрОбъекта.Значение + 1;
			Иначе	
			    ЗначениеПараметра = 1;
			КонецЕсли; 
		ИначеЕсли ИмяПараметра = "КоличествоЛинейныхЛХорганизаций" Тогда	
		    Если ЗначениеЗаполнено(ПараметрОбъекта.Значение) Тогда
				ЗначениеПараметра = ПараметрОбъекта.Значение + 1;
			Иначе	
			    ЗначениеПараметра = 1;
			КонецЕсли; 
			
		ИначеЕсли ИмяПараметра = "КопииМатериаловА3чб2" 
			Или ИмяПараметра = "КопииМатериаловА3чб1" Тогда
			ЗначениеПараметра = ПараметрОбъекта.Значение;
			ДобавитьКопиюМатериалов(ОбластьПараметры, "3чб", ЗначениеПараметра);
			
		ИначеЕсли ИмяПараметра = "КопииМатериаловА4чб2" 
			Или ИмяПараметра = "КопииМатериаловА4чб1" Тогда	
			ЗначениеПараметра = ПараметрОбъекта.Значение;
			ДобавитьКопиюМатериалов(ОбластьПараметры, "4чб", ЗначениеПараметра);
			
		ИначеЕсли ИмяПараметра = "КопииМатериаловА3цв2" 
			Или ИмяПараметра = "КопииМатериаловА3цв1" Тогда
			ЗначениеПараметра = ПараметрОбъекта.Значение;
			ДобавитьКопиюМатериалов(ОбластьПараметры, "3цв", ЗначениеПараметра);
			
		ИначеЕсли ИмяПараметра = "КопииМатериаловА4цв2" 
			Или ИмяПараметра = "КопииМатериаловА4цв1" Тогда
			ЗначениеПараметра = ПараметрОбъекта.Значение;
			ДобавитьКопиюМатериалов(ОбластьПараметры, "4цв", ЗначениеПараметра);
			
		Иначе	
			ЗначениеПараметра = ПараметрОбъекта.Значение;
		КонецЕсли; 
		
		СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
    КонецЦикла;
    ОбластьПараметры.Параметры.Заполнить(СтруктураПараметров);
	ОбластьПараметры.Параметры.ИсточникФинансирования = Объект.ИсточникФинансирования;
	
    //разукрасить параметры
    Для Каждого ПараметрОбъекта Из ПараметрыОбъекта Цикл
        Если ПараметрОбъекта.Установлен Тогда
            ИмяОбласти = ПараметрОбъекта.ПараметрОбъекта.ИмяПредопределенныхДанных;
            ИскОбласть = ОбластьПараметры.Области.Найти(ИмяОбласти);
            Если ИскОбласть <> Неопределено Тогда
                ОбластьПараметры.Области[ИмяОбласти].ЦветФона = WebЦвета.БледноЗеленый;
            КонецЕсли; 
        КонецЕсли; 
	КонецЦикла; 
    
	ЗакрытьДоступКНенужнымПараметрам(ОбластьПараметры, ИмяМакета, Объект.ВидКарточки);
    
    Карточка.Вывести(ОбластьПараметры);
КонецПроцедуры 

&НаСервере
Процедура ДобавитьКопиюМатериалов(ОбластьПараметры, Суффикс, ЗначениеПараметра);
	Итог = ОбластьПараметры.Параметры["ВсегоА"+Суффикс];
	Если Итог = Неопределено Тогда
		ОбластьПараметры.Параметры["ВсегоА"+Суффикс] = ЗначениеПараметра;
	Иначе
		ОбластьПараметры.Параметры["ВсегоА"+Суффикс] = ОбластьПараметры.Параметры["ВсегоА"+Суффикс] + ЗначениеПараметра;	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗакрытьДоступКНенужнымПараметрам(ОбластьПараметры, ИмяМакета, ВидКарточки)
	Если ИмяМакета = "КарточкаОтвода_Площадно_Линейный" Тогда
		Если ВидКарточки = Перечисления.мВариантыКарточекИсходныхДанных.КарточкаОтвода_Линейный Тогда
			// закрываем площадные параметры
			ЗакрытьДоступОбластям(ОбластьПараметры, "Площадь,
			|МелкоконтурностьПлощадных,
			|КоличествоОбособленныхПлощадныхУчастковБезЛЭП,
			|КоличествоОбособленныхПлощадныхУчастков,
			|КоличествоЗемлепользователейПлощадных,
			|КоличествоПлощадныхУчастковДляРасчетаПотерьБезЛЭП,
			|КоличествоПлощадныхУчастковДляРасчетаПотерь,
			|ПлощадьДляРасчетаПотерь,
			|КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытковБезЛЭП,
			|КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытков,
			|ПлощадьДляРасчетаУбытковСХ,
			|ПлощадьДляРасчетаУбытковЛХ,
			|КоличествоЗемлепользователейПлощадныхДляРасчетаУбытковСХ,
			|КоличествоЗемлепользователейПлощадныхДляРасчетаУбытковЛХ,
			|КоличествоПочвенныхРазновидностейПлощадных,
			|КоличествоПлощадныхЛХорганизаций,
			|КоличествоЭлементарныхУчастков");
		
		ИначеЕсли ВидКарточки = Перечисления.мВариантыКарточекИсходныхДанных.КарточкаОтвода_Площадной Тогда
			// закрываем линейные параметры
			ЗакрытьДоступОбластям(ОбластьПараметры, "Протяженность,
            |ШиринаИзломанная,
            |МелкоконтурностьЛинейных,
			|КоличествоОбособленныхЛинейныхУчастков,
			|КоличествоЗемлепользователейЛинейных,
			|КоличествоЛинейныхУчастковДляРасчетаПотерь,
			|ПротяженностьДляРасчетаПотерь,
			|КоличествоОбособленныхЛинейныхУчастковДляРасчетаУбытков,
			|ПротяженностьДляРасчетаУбытковСХ,
			|ПротяженностьДляРасчетаУбытковЛХ,
			|КоличествоЗемлепользователейЛинейныхДляРасчетаУбытковСХ,
			|КоличествоЗемлепользователейЛинейныхДляРасчетаУбытковЛХ,
			|КоличествоПочвенныхРазновидностейЛинейных,
			|КоличествоЛинейныхЛХорганизаций,
			|КоличествоВидовСельхозземель");
		КонецЕсли; 	
	
	ИначеЕсли ИмяМакета = "КарточкаПИР_Площадно_Линейный" Тогда
		Если ВидКарточки = Перечисления.мВариантыКарточекИсходныхДанных.КарточкаПИР_Линейный Тогда
			// закрываем площадные параметры
			ЗакрытьДоступОбластям(ОбластьПараметры, "Площадь,
			|МелкоконтурностьПлощадных,
			|КоличествоОбособленныхПлощадныхУчастковБезЛЭП,
			|КоличествоОбособленныхПлощадныхУчастков,
			|КоличествоЗемлепользователейПлощадных,
			|КоличествоПлощадныхУчастковДляРасчетаПотерьБезЛЭП,
			|КоличествоПлощадныхУчастковДляРасчетаПотерь,
			|ПлощадьДляРасчетаПотерь,
			|КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытковБезЛЭП,
			|КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытков,
			|ПлощадьДляРасчетаУбытковСХ,
			|ПлощадьДляРасчетаУбытковЛХ,
			|КоличествоЗемлепользователейПлощадныхДляРасчетаУбытковСХ,
			|КоличествоЗемлепользователейПлощадныхДляРасчетаУбытковЛХ,
			|КоличествоПочвенныхРазновидностейПлощадных,
			|КоличествоПлощадныхЛХорганизаций,
			|КоличествоЭлементарныхУчастков");
		
		ИначеЕсли ВидКарточки = Перечисления.мВариантыКарточекИсходныхДанных.КарточкаПИР_Площадной Тогда
			// закрываем линейные параметры
			ЗакрытьДоступОбластям(ОбластьПараметры, "Протяженность,
            |ШиринаИзломанная,
            |МелкоконтурностьЛинейных,
			|КоличествоОбособленныхЛинейныхУчастков,
			|КоличествоЗемлепользователейЛинейных,
			|КоличествоЛинейныхУчастковДляРасчетаПотерь,
			|ПротяженностьДляРасчетаПотерь,
			|КоличествоОбособленныхЛинейныхУчастковДляРасчетаУбытков,
			|ПротяженностьДляРасчетаУбытковСХ,
			|ПротяженностьДляРасчетаУбытковЛХ,
			|КоличествоЗемлепользователейЛинейныхДляРасчетаУбытковСХ,
			|КоличествоЗемлепользователейЛинейныхДляРасчетаУбытковЛХ,
			|КоличествоПочвенныхРазновидностейЛинейных,
			|КоличествоЛинейныхЛХорганизаций,
			|КоличествоВидовСельхозземель");
			
		КонецЕсли;
		
	ИначеЕсли ВидКарточки = Перечисления.мВариантыКарточекИсходныхДанных.КарточкаВедениеЭксплуатацияЗИС Тогда
		// Масштаб для Внесения (эксплуатация) ЗИС
		Масштаб = Объект.Владелец.Масштаб;
		Если ЗначениеЗаполнено(Масштаб) Тогда
			Если Масштаб = Перечисления.мМасштабыОбъектов.М_1_2000 Тогда
				ЗакрытьДоступОбластям(ОбластьПараметры, "ГрафИзмененияЕГРНИ_1_10000,
				|ГрафИзмененияПоКоординатамДо30_1_10000,
				|ГрафИзмененияПоКоординатамСвыше30_1_10000,
				|ГрафИзмененияПоПланКартМатериалу_1_10000");
	 		ИначеЕсли Масштаб = Перечисления.мМасштабыОбъектов.М_1_10000 Тогда
				ЗакрытьДоступОбластям(ОбластьПараметры, "ГрафИзмененияЕГРНИ_1_2000,
				|ГрафИзмененияПоКоординатамДо30_1_2000,
				|ГрафИзмененияПоКоординатамСвыше30_1_2000,
				|ГрафИзмененияПоПланКартМатериалу_1_2000");
			КонецЕсли; 		
		Иначе
			Если Не мРазное.ЭтоТестирование() Тогда
				Сообщить("Заполните масштаб в объекте работ!");
			КонецЕсли; 
		КонецЕсли; 	
        
	КонецЕсли; 
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗакрытьДоступОбластям(ОбластьПараметры, ПереченьОбластей)
	ИменаОбластей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПереченьОбластей, ",");
	Для каждого ИмяОбласти Из ИменаОбластей Цикл
		ИскОбласть = СокрЛП(ИмяОбласти);
	    ОбластьПараметры.Области[ИскОбласть].ЦветФона = WebЦвета.Белый;
	    ОбластьПараметры.Области[ИскОбласть].Защита = Истина;
	КонецЦикла; 
КонецПроцедуры // ЗакрытьДоступОбластям(ОбластьПараметры, ПереченьОбластей)

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьЗаголовокКарточки()
    ИмяМакета = РаботаСКарточкойОбъекта.ПолучитьИмяМакета(Объект.ВидКарточки);	
    Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
        Возврат;
    КонецЕсли;
    
    ЗаголовокКарточки.Очистить();
    
    Макет = УправлениеПечатью.ПолучитьМакет("Справочник.мКарточкиОбъектовРабот." + ИмяМакета);
	ОбластьПараметры = Макет.ПолучитьОбласть("Заголовок");  
    
    Корреспондент = ПолучитьКорреспондента(Объект.Владелец);
    КонтактноеЛицо = Объект.КонтактноеЛицо;
    Должность_ФИО = "";
    Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
        Должность_ФИО = ""+КонтактноеЛицо.Должность+" "+КонтактноеЛицо.Наименование;
    КонецЕсли;
    
	//ОбластьПараметры.Параметры.СБезНДС = ?(Объект.БезНДС, "Без НДС " + Объект.ОсвобождениеОтНДС, "С НДС");
	ОбластьПараметры.Параметры.Заказчик = Корреспондент;
	ОбластьПараметры.Параметры.Должность_ФИО = Должность_ФИО;
	ОбластьПараметры.Параметры.Адрес = ПолучитьАдресКонтрагента(Корреспондент);
	ОбластьПараметры.Параметры.РасчетныйСчет = Объект.РасчетныйСчет;
	ОбластьПараметры.Параметры.НаименованиеОбъекта = Объект.Владелец.ПолноеНаименование;
	ОбластьПараметры.Параметры.Цель = Объект.ЦельПредоставления;
	ОбластьПараметры.Параметры.Месторасположение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
            Объект.Владелец, Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот);
	Если ИмяМакета <> "КарточкаОценка" Тогда
		ОбластьПараметры.Параметры.ВидОбъекта = Объект.Владелец.ВидОбъекта;
	КонецЕсли; 

    ЗаголовокКарточки.Вывести(ОбластьПараметры);
КонецПроцедуры // ЗаполнитьЗаголовокКарточки()

&НаКлиенте
Процедура ПоручениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Заказчик) Тогда
		Заказчик = Объект.Заказчик;
	Иначе
	    Заказчик = ПолучитьЗаказчика(Объект.Владелец);
	КонецЕсли; 
	
 	Если Не ЗначениеЗаполнено(Заказчик) Тогда
		Предупреждение("Выберите сначала заказчика!",3);
		Возврат;
	КонецЕсли; 
   
    ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Заказчик) Тогда
	    ПараметрыФормы.Вставить("Отбор", Новый Структура("Отправитель", Заказчик));
	КонецЕсли; 

	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказчика(ОбъектРабот)
    
    Возврат ОбъектРабот.Владелец;

КонецФункции // ПолучитьЗаказчика()

#Область РаботаСПакетомДокументов

&НаКлиенте
Процедура ПакетДокументовПриИзменении(Элемент)
    ПакетДокументовПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПакетДокументовПриИзмененииНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетыДокументов.Ссылка КАК ДокументЗаказчика,
		|	ПакетыДокументов.Комментарий КАК ДокументКомментарий,
		|	ПакетыДокументовПунктыДокумента.Пункт,
		|	ПакетыДокументовПунктыДокумента.Комментарий КАК ПунктКомментарий,
		|	ПакетыДокументов.Обязательный
		|ИЗ
		|	Справочник.мПакетыДокументов КАК ПакетыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мПакетыДокументов.ПунктыДокумента КАК ПакетыДокументовПунктыДокумента
		|		ПО (ПакетыДокументовПунктыДокумента.Ссылка = ПакетыДокументов.Ссылка)
		|ГДЕ
		|	ПакетыДокументов.Родитель = &Родитель
		|ИТОГИ ПО
		|	ДокументЗаказчика";

	Запрос.УстановитьПараметр("Родитель", Объект.ПакетДокументов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Объект.Документы.Очистить();
	Объект.ПунктыДокумента.Очистить();
	
	Пока Выборка.Следующий() Цикл
		СтрДока = Объект.Документы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДока, Выборка);
        СтрДока.Комментарий = Выборка.ДокументКомментарий;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пункт) Тогда
			    СтрПунктыДока = Объект.ПунктыДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрПунктыДока, ВыборкаДетальныеЗаписи);
			    СтрПунктыДока.Комментарий = ВыборкаДетальныеЗаписи.ПунктКомментарий;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	
	ПунктыДокумента.Очистить();
	Отбор = Новый Структура("ДокументЗаказчика", Элемент.ТекущиеДанные.ДокументЗаказчика);
	Пункты = Объект.ПунктыДокумента.НайтиСтроки(Отбор);
	Для каждого Пункт Из Пункты Цикл
		СтрокаПунктыДокумента = ПунктыДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПунктыДокумента, Пункт);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для Каждого Док Из Объект.Документы Цикл
		Док.Обязательный = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтметитьВсе(Команда)
	Для Каждого Док Из Объект.Документы Цикл
		Док.Обязательный = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыДокументаПриИзменении(Элемент)
	Отбор = Новый Структура("ДокументЗаказчика, Пункт", Элемент.ТекущиеДанные.ДокументЗаказчика, Элемент.ТекущиеДанные.Пункт);
	Пункты = Объект.ПунктыДокумента.НайтиСтроки(Отбор);
	Для каждого Пункт Из Пункты Цикл
		ЗаполнитьЗначенияСвойств(Пункт, Элемент.ТекущиеДанные);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПриИзменении(Элемент)
	РасчетДатыПредоставленияДокументов();
КонецПроцедуры

&НаКлиенте
Процедура РасчетДатыПредоставленияДокументов()
	МаксДата = '00010101';
	ЕстьБезДат = Ложь;
    Для каждого Док Из Объект.Документы Цикл
        Если Док.Обязательный Тогда
            Если НЕ ЗначениеЗаполнено(Док.ДатаПредоставления) Тогда
                ЕстьБезДат = Истина;
                Прервать;
            Иначе
                МаксДата = Макс(МаксДата, Док.ДатаПредоставления);
            КонецЕсли;
        КонецЕсли; 
	КонецЦикла;
	
	Если ЕстьБезДат Тогда
	    Объект.ДатаПредоставленияДокументов = '00010101';
	Иначе	
	    Объект.ДатаПредоставленияДокументов = МаксДата;
	КонецЕсли; 
КонецПроцедуры

// Если изменяем общую дату - запишем ее для всех обязательных документов
&НаКлиенте
Процедура ДатаПредоставленияДокументовПриИзменении(Элемент)
    Для каждого Док Из Объект.Документы Цикл
        Если Док.Обязательный Тогда
            Док.ДатаПредоставления = Объект.ДатаПредоставленияДокументов; 
        КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
	
#КонецОбласти 

// записывает новое значение в таб часть ПараметрыОбъекта
&НаКлиенте
Процедура КарточкаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
    // Ограничение ввода категорий сложности
    Если Область.Имя = "КатегорияСложности" Тогда    
        Если ЗначениеЗаполнено(Область.Значение) Тогда
            Если 1 <= Область.Значение И Область.Значение <= 5 Тогда
                // в пределах нормы
            Иначе
            	Сообщить("Категория сложности может быть только в интервале от 1 до 5!"); 
                Область.Значение = 1;
            КонецЕсли; 
        КонецЕсли;     
    КонецЕсли;
    
	СохранитьИзмененноеЗначение(Область);
	
	// Признак того, что ячейка обработана - меняем цвет на БледноЗеленый
	Область.ЦветФона = WebЦвета.БледноЗеленый; 
    Модифицированность = Истина;
    
    // ЛЭП
    Если Область.Имя = "КоличествоОпорЛЭП" Тогда
        ОпределитьДоступЛЭП(Область.Значение);
        
    ИначеЕсли Область.Имя = "КоличествоОбособленныхПлощадныхУчастковБезЛЭП" Тогда 
        Обл = Карточка.Области["КоличествоОбособленныхПлощадныхУчастков"];
        Если Обл.Защита Тогда
            Обл.Значение = Область.Значение;
            Обл.ЦветФона = WebЦвета.БледноЗеленый;
            СохранитьИзмененноеЗначение(Обл);
        КонецЕсли; 
        
    ИначеЕсли Область.Имя = "КоличествоПлощадныхУчастковДляРасчетаПотерьБезЛЭП" Тогда    
        Обл = Карточка.Области["КоличествоПлощадныхУчастковДляРасчетаПотерь"];
        Если Обл.Защита Тогда
            Обл.Значение = Область.Значение;
            Обл.ЦветФона = WebЦвета.БледноЗеленый;
            СохранитьИзмененноеЗначение(Обл);
       КонецЕсли;  
        
    ИначеЕсли Область.Имя = "КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытковБезЛЭП" Тогда    
        Обл = Карточка.Области["КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытков"];
        Если Обл.Защита Тогда
            Обл.Значение = Область.Значение;
            Обл.ЦветФона = WebЦвета.БледноЗеленый;
            СохранитьИзмененноеЗначение(Обл);
        КонецЕсли;     
    КонецЕсли; 
	
	ВидКарточки = ПолучитьИмяВидаКарточки(Объект.ВидКарточки);
	
    // Для установления границ
	
	Если (ВидКарточки = "КарточкаУстановленияГраниц" ИЛИ
		ВидКарточки = "КарточкаФормированияУчастков") И 
		(Область.Имя = "КоличествоУгловТеодолитногоХода" ИЛИ
		Область.Имя = "КоличествоТочекПоворотаГраницыУчастка" ИЛИ
		Область.Имя = "ТочкиОграниченийДляОбработкиМатериалов" ИЛИ
		Область.Имя = "РасчетКоординат" ИЛИ
		Область.Имя = "СнятиеГрафическихКоординатДляВычисленияПлощади" ИЛИ
		Область.Имя = "ТочкиОграниченийДляВычисленияПлощадиСоставленияПланаГраниц") Тогда
		
		// ТочкиДляОбработкиМатериалов = КоличествоТочекПоворотаГраницыУчастка + 
		//	КоличествоУгловТеодолитногоХода + ТочкиОграниченийДляОбработкиМатериалов при условии,
		//  что КоличествоУгловТеодолитногоХода > 0
		
		Если Карточка.Области["КоличествоУгловТеодолитногоХода"].Значение > 0 Тогда
			СуммаОбластей("ТочкиДляОбработкиМатериалов", 
			"КоличествоТочекПоворотаГраницыУчастка,
			|КоличествоУгловТеодолитногоХода,
			|ТочкиОграниченийДляОбработкиМатериалов");
		Иначе
			СуммаОбластей("ТочкиДляОбработкиМатериалов","");
		КонецЕсли; 
			
        // ТочкиДляВычисленияПлощадиСоставленияПланаГраниц = КоличествоТочекПоворотаГраницыУчастка + РасчетКоординат + 
        //   СнятиеГрафическихКоординатДляВычисленияПлощади + ТочкиОграниченийДляВычисленияПлощадиСоставленияПланаГраниц
		
		СлагаемыеОбласти = "КоличествоТочекПоворотаГраницыУчастка,
			|РасчетКоординат,
			|ТочкиОграниченийДляВычисленияПлощадиСоставленияПланаГраниц";
			
       Если Карточка.Области.Найти("СнятиеГрафическихКоординатДляВычисленияПлощади") <> Неопределено Тогда
            СлагаемыеОбласти = СлагаемыеОбласти + ",СнятиеГрафическихКоординатДляВычисленияПлощади";
        КонецЕсли;
		СуммаОбластей("ТочкиДляВычисленияПлощадиСоставленияПланаГраниц",СлагаемыеОбласти); 
			      

    ИначеЕсли Область.Имя = "КоличествоУчастковРазбивочногоЧертежаДо1" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа1_5" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа5_10" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа10_15" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа15_50" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа50_100" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа100_300" ИЛИ
        Область.Имя = "КоличествоУчастковРазбивочногоЧертежа300" Тогда

 		СуммаОбластей("КоличествоУчастковРазбивочногоЧертежаВсего", 
			"КоличествоУчастковРазбивочногоЧертежаДо1,
			|КоличествоУчастковРазбивочногоЧертежа1_5,
			|КоличествоУчастковРазбивочногоЧертежа5_10,
			|КоличествоУчастковРазбивочногоЧертежа10_15,
			|КоличествоУчастковРазбивочногоЧертежа15_50,
			|КоличествоУчастковРазбивочногоЧертежа50_100,
			|КоличествоУчастковРазбивочногоЧертежа100_300,
			|КоличествоУчастковРазбивочногоЧертежа300");

    ИначеЕсли Область.Имя = "КоличествоУчастковПлановГраницДо6" ИЛИ
        Область.Имя = "КоличествоУчастковПлановГраниц6_10" ИЛИ
        Область.Имя = "КоличествоУчастковПлановГраниц11_20" ИЛИ
        Область.Имя = "КоличествоУчастковПлановГраниц21_40" ИЛИ
        Область.Имя = "КоличествоУчастковПлановГраницБольше40" Тогда

  		СуммаОбластей("КоличествоЭлементарныхУчастков", 
			"КоличествоУчастковПлановГраницДо6,
			|КоличествоУчастковПлановГраниц6_10,
			|КоличествоУчастковПлановГраниц11_20,
			|КоличествоУчастковПлановГраниц21_40,
			|КоличествоУчастковПлановГраницБольше40");

    ИначеЕсли Область.Имя = "КоличествоТочекПлановГраницДо6" ИЛИ
        Область.Имя = "КоличествоТочекПлановГраниц6_10" ИЛИ
        Область.Имя = "КоличествоТочекПлановГраниц11_20" ИЛИ
        Область.Имя = "КоличествоТочекПлановГраниц21_40" ИЛИ
        Область.Имя = "КоличествоТочекПлановГраницБольше40" Тогда

   		СуммаОбластей("КоличествоТочекПлановГраницВсего", 
			"КоличествоТочекПлановГраницДо6,
			|КоличествоТочекПлановГраниц6_10,
			|КоличествоТочекПлановГраниц11_20,
			|КоличествоТочекПлановГраниц21_40,
			|КоличествоТочекПлановГраницБольше40");

	КонецЕсли; 
		
	//Если ВидКарточки = "КарточкаСоставленияОстаточногоКаталога" ИЛИ 
	//	ВидКарточки = "КарточкаУстановленияГраниц" ИЛИ 
	//	ВидКарточки = "КарточкаФормированияУчастков" Тогда
		Если Область.Имя = "КоличествоДелОстаточногоКаталогаДо6Точек" ИЛИ
			Область.Имя = "КоличествоДелОстаточногоКаталога6_10Точек" ИЛИ
			Область.Имя = "КоличествоДелОстаточногоКаталога11_20Точек" ИЛИ
			Область.Имя = "КоличествоДелОстаточногоКаталога21_40Точек" ИЛИ
			Область.Имя = "КоличествоДелОстаточногоКаталога41_50Точек" ИЛИ
			Область.Имя = "КоличествоДелОстаточногоКаталогаБольше50Точек" Тогда
			
			// Подсчет количества дел
			СуммаОбластей("КоличествоДелОстаточногоКаталогаВсего", 
			"КоличествоДелОстаточногоКаталогаДо6Точек,
			|КоличествоДелОстаточногоКаталога6_10Точек,
			|КоличествоДелОстаточногоКаталога11_20Точек,
			|КоличествоДелОстаточногоКаталога21_40Точек,
			|КоличествоДелОстаточногоКаталога41_50Точек,
			|КоличествоДелОстаточногоКаталогаБольше50Точек");
			
		ИначеЕсли Область.Имя = "КоличествоТочекОстаточногоКаталогаДо6" ИЛИ
			Область.Имя = "КоличествоТочекОстаточногоКаталога6_10" ИЛИ
			Область.Имя = "КоличествоТочекОстаточногоКаталога11_20" ИЛИ
			Область.Имя = "КоличествоТочекОстаточногоКаталога21_40" ИЛИ
			Область.Имя = "КоличествоТочекОстаточногоКаталога41_50" ИЛИ
			Область.Имя = "КоличествоТочекОстаточногоКаталогаБольше50" Тогда
			
			// Подсчет количества точек
			СуммаОбластей("КоличествоТочекОстаточногоКаталогаВсего", 
			"КоличествоТочекОстаточногоКаталогаДо6,
			|КоличествоТочекОстаточногоКаталога6_10,
			|КоличествоТочекОстаточногоКаталога11_20,
			|КоличествоТочекОстаточногоКаталога21_40,
			|КоличествоТочекОстаточногоКаталога41_50,
			|КоличествоТочекОстаточногоКаталогаБольше50");
			
		КонецЕсли;	
	//КонецЕсли; 
 		
	Если Область.Имя = "РасчетУбытков" ИЛИ Область.Имя = "РасчетУпущеннойВыгоды" Тогда	
		РасчетТолькоУпущеннойВыгоды();
	КонецЕсли; 	
	
	//Определить ОплатаИмущественныхПрав
	Если Область.Имя = "КоличествоИзготовленийЗемельноКадастровыхПлановА0" ИЛИ
		Область.Имя = "КоличествоИзготовленийЗемельноКадастровыхПлановА1" ИЛИ
		Область.Имя = "КоличествоИзготовленийЗемельноКадастровыхПлановА2" ИЛИ
		Область.Имя = "КоличествоИзготовленийЗемельноКадастровыхПлановА3" ИЛИ
		Область.Имя = "КоличествоИзготовленийЗемельноКадастровыхПлановА4"  Тогда
		
		Обл = Карточка.Области["ОплатаИмущественныхПрав"];
		Обл.Значение = ЕстьОплатаИмущественныхПрав();
		Обл.ЦветФона = WebЦвета.БледноЗеленый;
		СохранитьИзмененноеЗначение(Обл);
	КонецЕсли; 
	
	Если Область.Имя = "ПлощадьЗемельныхУчастковСОрганичениями2000" ИЛИ 
		Область.Имя = "ПлощадьЗемельныхУчастковСОрганичениями5000" ИЛИ 
		Область.Имя = "ПлощадьЗемельныхУчастковСОрганичениями10000"  Тогда	
		
		Обл = Карточка.Области["ПлощадьЗемельныхУчастковСОрганичениямиДМ"];
		Обл.Значение = Окр(Карточка.Области["ПлощадьЗемельныхУчастковСОрганичениями2000"].Значение*0.25
			+ Карточка.Области["ПлощадьЗемельныхУчастковСОрганичениями5000"].Значение*0.04
			+ Карточка.Области["ПлощадьЗемельныхУчастковСОрганичениями10000"].Значение*0.01, 4);
		Обл.ЦветФона = WebЦвета.БледноЗеленый;
		СохранитьИзмененноеЗначение(Обл);
	КонецЕсли; 
	
	// Изготовление копий материалов
	Если Область.Имя = "ВсегоА4чб" 
		ИЛИ Область.Имя = "ВсегоА3чб"
		ИЛИ Область.Имя = "ВсегоА4цв" 
		ИЛИ Область.Имя = "ВсегоА3цв" Тогда
		
		РазнестиКопии(Прав(Область.Имя, 3), Область);
	КонецЕсли;
	
	// Ведение (эксплуатация) ЗИС
	Если Область.Имя = "ГрафИзмененияЕГРНИ_1_2000" ИЛИ
		Область.Имя = "ГрафИзмененияПоКоординатамДо30_1_2000" ИЛИ
		Область.Имя = "ГрафИзмененияПоКоординатамСвыше30_1_2000" ИЛИ
		Область.Имя = "ГрафИзмененияПоПланКартМатериалу_1_2000" Тогда
		
		// Подсчет Суммы
		СуммаОбластей("ВнесениеАтрибутивныхИзменений", 
		"ГрафИзмененияЕГРНИ_1_2000,
		|ГрафИзмененияПоКоординатамДо30_1_2000,
		|ГрафИзмененияПоКоординатамСвыше30_1_2000,
		|ГрафИзмененияПоПланКартМатериалу_1_2000");
		
		//Расчет показателя
		Обл = Карточка.Области["ВнесениеАтрибутивныхИзменений"];
		Обл.Значение = Окр(Обл.Значение/100*3, 2);
		СохранитьИзмененноеЗначение(Обл);
		
	ИначеЕсли Область.Имя = "ГрафИзмененияЕГРНИ_1_10000" ИЛИ
		Область.Имя = "ГрафИзмененияПоКоординатамДо30_1_10000" ИЛИ
		Область.Имя = "ГрафИзмененияПоКоординатамСвыше30_1_10000" ИЛИ
		Область.Имя = "ГрафИзмененияПоПланКартМатериалу_1_10000" Тогда
		
		// Подсчет Суммы
		СуммаОбластей("ВнесениеАтрибутивныхИзменений", 
		"ГрафИзмененияЕГРНИ_1_10000,
		|ГрафИзмененияПоКоординатамДо30_1_10000,
		|ГрафИзмененияПоКоординатамСвыше30_1_10000,
		|ГрафИзмененияПоПланКартМатериалу_1_10000");
		
		//Расчет показателя
		Обл = Карточка.Области["ВнесениеАтрибутивныхИзменений"];
		Обл.Значение = Окр(Обл.Значение/100*3, 2);
		СохранитьИзмененноеЗначение(Обл);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиКопии(Суффикс, Область) 
	// Первый лист только один,
	//  все остальные на последующие
	Если Область.Значение > 1 Тогда
		Обл = Карточка.Области["КопииМатериаловА"+Суффикс+"1"];
		Обл.Значение = 1;
        СохранитьИзмененноеЗначение(Обл);
		Обл = Карточка.Области["КопииМатериаловА"+Суффикс+"2"];
		Обл.Значение = Область.Значение - 1;
        СохранитьИзмененноеЗначение(Обл);
	Иначе	
		Обл = Карточка.Области["КопииМатериаловА"+Суффикс+"1"];
		Обл.Значение = Область.Значение;
        СохранитьИзмененноеЗначение(Обл);
		Обл = Карточка.Области["КопииМатериаловА"+Суффикс+"2"];
		Обл.Значение = 0;
        СохранитьИзмененноеЗначение(Обл);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ЕстьОплатаИмущественныхПрав() 
	Для й=0 По 4 Цикл
		Обл = Карточка.Области["КоличествоИзготовленийЗемельноКадастровыхПлановА"+й];
		Если Обл.Значение > 0 Тогда
			Возврат Истина;
		КонецЕсли;     
	КонецЦикла; 
	Возврат Ложь ;
КонецФункции

&НаКлиенте
Процедура РасчетТолькоУпущеннойВыгоды()
	РасчетТолькоУпущеннойВыгоды = Ложь;
	
	Область1 = Карточка.Области["РасчетУбытков"];
	Область2 = Карточка.Области["РасчетУпущеннойВыгоды"];
	
	Если Область1.Значение = Ложь И Область2.Значение = Истина Тогда
		РасчетТолькоУпущеннойВыгоды = Истина;
	КонецЕсли; 
	
	СохранитьИзмененноеЗначение("РасчетТолькоУпущеннойВыгоды", РасчетТолькоУпущеннойВыгоды);
	
КонецПроцедуры // РасчетТолькоУпущеннойВыгоды()

&НаКлиенте
Функция СуммаОбластей(ОблИтог, ОблСлагаемые)

	Обл = Карточка.Области[ОблИтог];
	МассивСлагаемых = СтрРазделить(ОблСлагаемые, ","+Символы.ПС , Ложь);
	Обл.Значение = 0;
	
	Для й=0 по МассивСлагаемых.Количество()-1 Цикл
		Обл.Значение = Обл.Значение + Карточка.Области[МассивСлагаемых[й]].Значение;	
	КонецЦикла;	
		
	СохранитьИзмененноеЗначение(Обл);
КонецФункции // СуммаОбластей()
 
&НаСервере
Функция ПолучитьИмяВидаКарточки(ВидКарточки)
	ВидКарточкиСтрокой = Строка(ВидКарточки);
    КолекцияЗначенийПеречисления = Метаданные.Перечисления.мВариантыКарточекИсходныхДанных.ЗначенияПеречисления;
    Для каждого пНайденноеЗначение из КолекцияЗначенийПеречисления Цикл
        Если пНайденноеЗначение.Синоним = ВидКарточкиСтрокой Тогда
            Возврат пНайденноеЗначение.Имя;
        КонецЕсли
    КонецЦикла;
    Возврат "";
КонецФункции // ПолучитьВидКарточки(Объект.ВидКарточки)

&НаКлиенте
Процедура ОпределитьДоступЛЭП(КолвоЛЭП)
    ЗащитаЯчейки = ?(КолвоЛЭП = 0, Истина, Ложь);
    Если Карточка.Области.Найти("КоличествоОбособленныхПлощадныхУчастков")<>Неопределено Тогда
        Карточка.Области["КоличествоОбособленныхПлощадныхУчастков"].Защита = ЗащитаЯчейки;
    КонецЕсли;
    Если Карточка.Области.Найти("КоличествоПлощадныхУчастковДляРасчетаПотерь")<>Неопределено Тогда
        Карточка.Области["КоличествоПлощадныхУчастковДляРасчетаПотерь"].Защита = ЗащитаЯчейки;
    КонецЕсли;
    Если Карточка.Области.Найти("КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытков")<>Неопределено Тогда
        Карточка.Области["КоличествоОбособленныхПлощадныхУчастковДляРасчетаУбытков"].Защита = ЗащитаЯчейки;
    КонецЕсли;
КонецПроцедуры

// Записывает измененное значение в табличную часть ПараметрыОбъекта
//
&НаКлиенте
Процедура СохранитьИзмененноеЗначение(Область, Значение = Неопределено)
	Если ТипЗнч(Область) = Тип("Строка") Тогда
		ИмяПараметра = Область;
		ЗначениеПараметра = Значение;
	Иначе	
		ИмяПараметра = Область.Имя;
		ЗначениеПараметра = Область.Значение;
	КонецЕсли;
	
	Попытка
		ПараметрОбъекта = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыОбъектов."+ИмяПараметра);
	Исключение
	    ПараметрОбъекта = Неопределено;
	КонецПопытки; 
	
	Если ПараметрОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрОтбора = Новый Структура("ПараметрОбъекта", ПараметрОбъекта);
	МассивПар = Объект.ПараметрыОбъекта.НайтиСтроки(СтрОтбора);
    ЭтоНовыйПараметр = Ложь;
    Если МассивПар.Количество() = 0 Тогда
        МассивПар = Новый Массив;
        СтрокаПар = Объект.ПараметрыОбъекта.Добавить();
        МассивПар.Добавить(СтрокаПар);
        ЭтоНовыйПараметр = Истина;
    КонецЕсли;  
    
    СтрокаПар = МассивПар[0];
    СтрокаПар.ПараметрОбъекта = ПараметрОбъекта;
    СтрокаПар.Значение = ЗначениеПараметра;
	
	// Если это количество лесных хозяйств, то при записи - надо отнять 1, при открытии - к хранимому количеству надо добавить 1. 
	//ИмяПараметра = Область.Имя;
	Если ИмяПараметра = "КоличествоПлощадныхЛХорганизаций" Тогда
		СтрокаПар.Значение = СтрокаПар.Значение - 1;
	ИначеЕсли ИмяПараметра = "КоличествоЛинейныхЛХорганизаций" Тогда	
		СтрокаПар.Значение = СтрокаПар.Значение - 1;
	КонецЕсли; 
		
    // для нового устанавливаем, для старого меняем на противоположный
    СтрокаПар.Установлен = ?(ЭтоНовыйПараметр, Истина, ?(СтрокаПар.Установлен, Ложь, Истина)); 
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    Отказ = Не ПроверитьЗаполнение();
    
    СтруктураСостояний = ПолучитьСостоянияКарточки(); 
    Если Не Отказ 
        И Объект.Состояние = СтруктураСостояний.Проект 
        И ЗначениеЗаполнено(Объект.ДатаПредоставленияДокументов) Тогда
        Ответ = Вопрос("Изменить состояние карточки на Составлена?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Если Ответ = КодВозвратаДиалога.Да Тогда
            Объект.Состояние = СтруктураСостояний.Составлена;
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
    Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
        
        // Если он не заполнен, сообщим об этом пользователю
        Сообщение = Новый СообщениеПользователю();
        Сообщение.Текст = "Не указано Наименование!";
        Сообщение.Поле = "Объект.Наименование";
        Сообщение.Сообщить();
        
        Отказ = Истина;
        
    КонецЕсли;
    Если Не ЗначениеЗаполнено(Объект.ВидРабот) Тогда
        
        // Если он не заполнен, сообщим об этом пользователю
        Сообщение = Новый СообщениеПользователю();
        Сообщение.Текст = "Не указан Вид работ!";
        Сообщение.Поле = "Объект.ВидРабот";
        Сообщение.Сообщить();
        
        Отказ = Истина;
        
    КонецЕсли;
    Если Не ЗначениеЗаполнено(Объект.ВидКарточки) Тогда
        
        // Если он не заполнен, сообщим об этом пользователю
        Сообщение = Новый СообщениеПользователю();
        Сообщение.Текст = "Не указан Вид карточки!";
        Сообщение.Поле = "Объект.ВидКарточки";
        Сообщение.Сообщить();
        
        Отказ = Истина;
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидКарточкиПриИзменении(Элемент)
	Если Не ЭтоНовый Тогда
		Ответ = Вопрос("Параметры объекта работ будут удалены. Продолжать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 	
    
    ЗаполнитьМакетКарточкиПараметрамиОбъекта();
    
    ЗаполнитьБулевыПараметрыОбъекта();
    
КонецПроцедуры
&НаКлиенте
Процедура ВидКарточкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеВыбора = ДанныеВыбораВидаКарточки();
КонецПроцедуры
&НаКлиенте
Функция ДанныеВыбораВидаКарточки()
	Если Не ЗначениеЗаполнено(Объект.ВидРабот) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ДанныеВыбора = Новый СписокЗначений;
	Если Объект.ВидРабот = ПредопределенноеЗначение("Справочник.мВидыРаботЮрЛица.УстановлениеНефиксированныхГраницЛЭП") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаУстановленияНефиксированныхГраницМинэнерго"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаУниверсальная"));
		Объект.ВидКарточки = ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаУстановленияНефиксированныхГраницМинэнерго");
	ИначеЕсли Объект.ВидРабот = ПредопределенноеЗначение("Справочник.мВидыРаботЮрЛица.РазработкаГрадостроительногоПаспорта") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаГрадостроительныйПаспорт"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаУниверсальная"));
		Объект.ВидКарточки = ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаГрадостроительныйПаспорт");
	Иначе
		Для каждого Стр Из СписокВидовКарточек Цикл
			ДанныеВыбора.Добавить(Стр.Значение, Стр.Представление);
		КонецЦикла; 	
	КонецЕсли;
	Возврат ДанныеВыбора;
КонецФункции

// Булевы отображаются в форме как Нет, а на самом деле Параметру значение не присвоено
//  ЗаполнитьБулевыПараметрыОбъекта() заполняет такие параметры объекта
&НаСервере
Процедура ЗаполнитьБулевыПараметрыОбъекта()
    
    Для Каждого Область Из Карточка.Области Цикл
        Если Область.Защита = Ложь Тогда
            Если ТипЗнч(Область.Значение) = Тип("Булево") Тогда
                ПараметрОбъекта = ПредопределенноеЗначение("ПланВидовХарактеристик.ПараметрыОбъектов."+Область.Имя);
                СтрОтбора = Новый Структура("ПараметрОбъекта", ПараметрОбъекта);
                МассивПар = Объект.ПараметрыОбъекта.НайтиСтроки(СтрОтбора);
                Если МассивПар.Количество() = 0 Тогда
                    МассивПар = Новый Массив;
                    СтрокаПар = Объект.ПараметрыОбъекта.Добавить();
                    МассивПар.Добавить(СтрокаПар);
                    СтрокаПар.ПараметрОбъекта = ПараметрОбъекта;
                    СтрокаПар.Значение = Ложь;
                    СтрокаПар.Установлен = Ложь; 
                КонецЕсли;  
           КонецЕсли; 
        КонецЕсли; 
     КонецЦикла;
КонецПроцедуры //     ЗаполнитьБулевыПараметрыОбъекта()

&НаСервереБезКонтекста
Функция ПолучитьСостоянияКарточки()
    СтуктураСостояний = Новый Структура;
    
    Для каждого Состояние Из Перечисления.мСостоянияКарточекОбъектовРабот Цикл
        СтуктураСостояний.Вставить(""+Состояние, Состояние);
    КонецЦикла; 
    
    Возврат СтуктураСостояний;	

КонецФункции // ПолучитьСостоянияКарточки()

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
    Если Элемент.ТекстРедактирования = "Составлена" Тогда
        Если НЕ ЗначениеЗаполнено(Объект.ДатаПредоставленияДокументов) Тогда
            Ответ = Вопрос("Дата предоставления документов еще не указана! Вы уверены, что хотите изменить состояние карточки на Составлена?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
            Если Ответ = КодВозвратаДиалога.Нет Тогда
                // возвращаем предыдущее состояние
                СтруктураСостояний = ПолучитьСостоянияКарточки();
                Объект.Состояние = СтруктураСостояний.Проект;
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЦельПредоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    Владелец = ПолучитьСвойствоВладелец("Цель предоставления зем. участка юрлицам");
    ПараметрыФормы = Новый Структура("Отбор, РежимВыбора", Новый Структура("Владелец", Владелец), Истина);
    ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.Форма.ФормаСписка", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойствоВладелец(ИмяСвойства)
    Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства);
КонецФункции

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
    Если ТекущаяСтраница.Имя = "СтраницаЗаголовокКарточки" Тогда
        ЗаполнитьЗаголовокКарточки(); 
        
    ИначеЕсли ТекущаяСтраница.Имя = "СтраницаКарточка" Тогда
        ЗаполнитьМакетКарточкиПараметрамиОбъекта();
        // ЛЭП
        Если Карточка.Области.Найти("КоличествоОпорЛЭП")<>Неопределено Тогда
            КоличествоЛЭП = Карточка.Области["КоличествоОпорЛЭП"].Значение;
            ОпределитьДоступЛЭП(КоличествоЛЭП);
		КонецЕсли;
		
    ИначеЕсли ТекущаяСтраница.Имя = "СтраницаСравнения" Тогда
        ЗаполнитьКарточкуСравнения();   
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуСравнения()
    ЦветОтличия = Новый Цвет(255, 218, 185); // PeachPuff
    
    КарточкаСравнения.Очистить();

    ИмяМакета = РаботаСКарточкойОбъекта.ПолучитьИмяМакета(Объект.ВидКарточки);	
    Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
        Возврат;
    КонецЕсли;
    Макет = УправлениеПечатью.ПолучитьМакет("Справочник.мКарточкиОбъектовРабот." + ИмяМакета+"_Сравнение");
	ОбластьПараметры = Макет.ПолучитьОбласть("Параметры");  
	
   // Заполнение параметров исходной карточки
    ПараметрыОбъекта = Объект.ПараметрыОбъекта.Выгрузить();
    
    СтруктураПараметров = Новый Структура;
    Для Каждого ПараметрОбъекта Из ПараметрыОбъекта Цикл
        СтруктураПараметров.Вставить(ПараметрОбъекта.ПараметрОбъекта.ИмяПредопределенныхДанных, ПараметрОбъекта.Значение);
    КонецЦикла;
    ОбластьПараметры.Параметры.Заполнить(СтруктураПараметров);
	ОбластьПараметры.Параметры.ИсточникФинансирования = Объект.ИсточникФинансирования;
    
    // Заполнение параметров сравниваемой карточки
    Если ЗначениеЗаполнено(КарточкаДляСравнения) Тогда
        ПараметрыОбъекта1 = КарточкаДляСравнения.ПараметрыОбъекта.Выгрузить();
        
        СтруктураПараметров1 = Новый Структура;
        Для Каждого ПараметрОбъекта1 Из ПараметрыОбъекта1 Цикл
            СтруктураПараметров1.Вставить(ПараметрОбъекта1.ПараметрОбъекта.ИмяПредопределенныхДанных+"1", ПараметрОбъекта1.Значение);
        КонецЦикла;

        ОбластьПараметры.Параметры.Заполнить(СтруктураПараметров1);
        ОбластьПараметры.Параметры.ИсточникФинансирования1 = КарточкаДляСравнения.ИсточникФинансирования;
        
        // Сравнение параметров
		Для Каждого Область Из Карточка.Области Цикл
			Если Область.Защита = Ложь Тогда
				Было = Область.Значение;
				Стало = ОбластьПараметры.Параметры[Область.Имя+"1"];
				Если ЗначениеЗаполнено(Было) и ЗначениеЗаполнено(Стало) Тогда
					Если Было <> Стало Тогда
						ОбластьПараметры.Области[Область.Имя+"1"].ЦветФона = ЦветОтличия;    
					КонецЕсли; 
				ИначеЕсли ЗначениеЗаполнено(Было) <> ЗначениеЗаполнено(Стало) Тогда  
					ОбластьПараметры.Области[Область.Имя+"1"].ЦветФона = ЦветОтличия;    
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
    
    КарточкаСравнения.Вывести(ОбластьПараметры);

КонецПроцедуры // ЗаполнитьКарточкуСравнения()
 

// Заполняет макет Карточки сравнения значениями параметров объекта
&НаСервере
Процедура ЗаполнитьМакетКарточкиСравненияПараметрамиОбъекта()
    
 КонецПроцедуры // ЗаполнитьМакетКарточки()

&НаКлиенте
Процедура ЗаголовокКарточкиПриИзмененииСодержимогоОбласти(Элемент, Область)
    Если Область.Имя = "Заказчик" Тогда
        ЗаголовокКарточки.Область("Адрес").Значение = ПолучитьАдресКонтрагента(ЗаголовокКарточки.Область("Заказчик").Значение);
    КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресКонтрагента(Корреспондент)

    Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Корреспондент, 
            Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента);

КонецФункции // ПолучитьАдресКонтрагента()

&НаСервереБезКонтекста
Функция ПолучитьКорреспондента(ОбъектРабот)

    Возврат ОбъектРабот.Владелец;	

КонецФункции // ПолучитьКорреспондента()

&НаКлиенте
Процедура БезНДСПриИзменении(Элемент)
    Элементы.ОсвобождениеОтНДС.Видимость = Объект.БезНДС;
КонецПроцедуры

&НаКлиенте
Процедура КарточкаДляСравненияПриИзменении(Элемент)
    ЗаполнитьКарточкуСравнения();
КонецПроцедуры

&НаКлиенте
Процедура ПоручениеПриИзменении(Элемент)
	ПоручениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоручениеПриИзмененииНаСервере()
	Заказчик = Объект.Поручение.Отправитель;
	РасчетныйСчет = Заказчик.ОсновнойБанковскийСчет;
    ЗаполнитьНаименованиеКарточки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеКарточки()
    Если ЗначениеЗаполнено(Объект.Поручение) Тогда
        Объект.Наименование = Объект.Поручение.РегистрационныйНомер + " от "+ Формат(Объект.Поручение.ДатаРегистрации, "ДФ=dd.MM.yyyy");	
    КонецЕсли; 
    Если ЗначениеЗаполнено(Объект.ВидРабот) Тогда
        Объект.Наименование = Объект.Наименование + " " + мРаботаСоСметами.ПолучитьДваСлова(Объект.ВидРабот.Наименование);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
    ЗаполнитьНаименованиеКарточки();
	
	Если Объект.ВидРабот = ПредопределенноеЗначение("Справочник.мВидыРаботЮрЛица.УстановлениеНефиксированныхГраницЛЭП") Тогда
		Объект.ВидКарточки = ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаУстановленияНефиксированныхГраницМинэнерго");
	ИначеЕсли Объект.ВидРабот = ПредопределенноеЗначение("Справочник.мВидыРаботЮрЛица.РазработкаГрадостроительногоПаспорта") Тогда
		Объект.ВидКарточки = ПредопределенноеЗначение("Перечисление.мВариантыКарточекИсходныхДанных.КарточкаГрадостроительныйПаспорт");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КарточкаПриАктивизацииОбласти(Элемент)
	
	// Восстанавливаем старые цвета фона
	Обл = Карточка.Область(ТекущаяСтрокаКарточки, 1, ТекущаяСтрокаКарточки, ТекущаяКолонкаКарточки-1);
	Обл.ЦветФона = WebЦвета.Белый;
	
	Если ТекущаяСтрокаКарточки > 0 Тогда
		Для й=1 По ТекущаяКолонкаКарточки - 1 Цикл
			Обл = Карточка.Область(ТекущаяСтрокаКарточки, й, ТекущаяСтрокаКарточки, й);
		    Обл.ЦветФона = СписокЦветов.Получить(й-1).Значение;
		КонецЦикла; 	
	КонецЕсли; 
	
	ТекущаяСтрокаКарточки = Элемент.ТекущаяОбласть.Верх;
	ТекущаяКолонкаКарточки = Элемент.ТекущаяОбласть.Лево;
	
	// Запоминаем цвета в список
	СписокЦветов.Очистить();
	Для й=1 По ТекущаяКолонкаКарточки - 1 Цикл
		Обл = Карточка.Область(ТекущаяСтрокаКарточки, й, ТекущаяСтрокаКарточки, й);
		СписокЦветов.Добавить(Обл.ЦветФона);
	КонецЦикла; 
	
	// выделяем
	Обл = Карточка.Область(ТекущаяСтрокаКарточки, 1, ТекущаяСтрокаКарточки, ТекущаяКолонкаКарточки-1);
	Обл.ЦветФона = WebЦвета.ЗамшаСветлый;
КонецПроцедуры


 

 


 

