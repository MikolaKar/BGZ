#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей шаблона процесса
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруШаблонаКомплексногоПроцесса() Экспорт
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Наименование");
	ПараметрыПроцесса.Вставить("Родитель");
	ПараметрыПроцесса.Вставить("Ответственный");
	ПараметрыПроцесса.Вставить("Комментарий");
	ПараметрыПроцесса.Вставить("ДобавлятьНаименованиеПредмета");
	ПараметрыПроцесса.Вставить("НаименованиеБизнесПроцесса");
	ПараметрыПроцесса.Вставить("Описание");
	ПараметрыПроцесса.Вставить("Важность");
	ПараметрыПроцесса.Вставить("Автор");
	ПараметрыПроцесса.Вставить("ШаблонВКомплексномПроцессе");
	ПараметрыПроцесса.Вставить("ВладелецШаблона");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("ТочкаМаршрута");
	Предметы.Колонки.Добавить("ИмяПредметаОснование");
	Предметы.Колонки.Добавить("ШаблонОснование");
	ПараметрыПроцесса.Вставить("Предметы", Предметы);
	
	РабочаяГруппаШаблона = Новый ТаблицаЗначений;
	РабочаяГруппаШаблона.Колонки.Добавить("Участник");
	РабочаяГруппаШаблона.Колонки.Добавить("ОсновнойОбъектАдресации");
	РабочаяГруппаШаблона.Колонки.Добавить("ДополнительныйОбъектАдресации");
	ПараметрыПроцесса.Вставить("РабочаяГруппа", РабочаяГруппаШаблона);
	
	НастрокиШаблона = Новый ТаблицаЗначений;
	НастрокиШаблона.Колонки.Добавить("ВидДокумента");
	Если Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
		НастрокиШаблона.Колонки.Добавить("Организация");
	КонецЕсли;
	НастрокиШаблона.Колонки.Добавить("Условие");
	НастрокиШаблона.Колонки.Добавить("ЗапрещеноИзменение");
	НастрокиШаблона.Колонки.Добавить("ИнтерактивныйЗапуск");
	НастрокиШаблона.Колонки.Добавить("ВидИнтерактивногоСобытия");
	ПараметрыПроцесса.Вставить("НастрокиШаблона", НастрокиШаблона);
	
	Действия = Новый ТаблицаЗначений;
	Действия.Колонки.Добавить("НомерДействия");
	Действия.Колонки.Добавить("ВидДействия");
	Действия.Колонки.Добавить("СтруктураДействия");
	Действия.Колонки.Добавить("ПорядокВыполнения");
	ПараметрыПроцесса.Вставить("Действия", Действия);
	
	ПорядокВыполненияДействий = Новый ТаблицаЗначений;
	ПорядокВыполненияДействий.Колонки.Добавить("НомерДействия");
	ПорядокВыполненияДействий.Колонки.Добавить("ПослеДействия");
	ПорядокВыполненияДействий.Колонки.Добавить("РезультатПредыдущегоДействия");
	ПорядокВыполненияДействий.Колонки.Добавить("Условие");
	ПорядокВыполненияДействий.Колонки.Добавить("ИмяПредметаУсловия");
	ПараметрыПроцесса.Вставить("ПорядокВыполненияДействий", ПорядокВыполненияДействий);
	
	ПараметрыПроцесса.Вставить("Контролер");
	ПараметрыПроцесса.Вставить("ОсновнойОбъектАдресацииКонтролера");
	ПараметрыПроцесса.Вставить("ДополнительныйОбъектАдресацииКонтролера");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланКонтролера");
	
	ПараметрыПроцесса.Вставить("ВариантМаршрутизации");
	
	Возврат ПараметрыПроцесса;
	
КонецФункции

// Создает шаблон процесса.
//
// Параметры:
//   СтруктураШаблона - Структура - структура полей шаблона комплексного процесса.
//
// Возвращаемый параметр:
//   СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов
//
Функция СоздатьШаблонКомплексногоПроцесса(СтруктураШаблона) Экспорт
	
	НачатьТранзакцию();
	
	НовыйШаблон = СоздатьЭлемент();
	ШаблоныБизнесПроцессов.ЗаполнитьШаблон(НовыйШаблон, СтруктураШаблона);
	
	СсылкаНаНовыйПроцесс = ПолучитьСсылку(Новый УникальныйИдентификатор);
	НовыйШаблон.УстановитьСсылкуНового(СсылкаНаНовыйПроцесс);
	
	ТаблицаДействий = СтруктураШаблона.Действия.Скопировать();
	ТаблицаДействий.Колонки.Добавить("ИдентификаторЭтапа");
	
	// Заполнение табличной части Этапы
	Для Каждого ДействиеШаблона Из ТаблицаДействий Цикл
		
		ВидДействия = ДействиеШаблона.ВидДействия;
		
		СтруктураДействия = ДействиеШаблона.СтруктураДействия;
		СтруктураДействия.ШаблонВКомплексномПроцессе = Истина;
		СтруктураДействия.ВладелецШаблона = СсылкаНаНовыйПроцесс;
		
		СсылкаНаДействие = СоздатьДействие(ВидДействия, СтруктураДействия);
		
		ШаблонОбъект = СсылкаНаДействие.ПолучитьОбъект();
		
		СтрокаЭтап = НовыйШаблон.Этапы.Добавить();
		СтрокаЭтап.ИдентификаторЭтапа = Новый УникальныйИдентификатор();
		СтрокаЭтап.ШаблонБизнесПроцесса = СсылкаНаДействие;
		СтрокаЭтап.ИсполнителиЭтапаСтрокой = ШаблонОбъект.ПолучитьСтроковоеПредставлениеИсполнителей();
		СтрокаЭтап.ПредшественникиВариантИспользования = ДействиеШаблона.ПорядокВыполнения;
		
		ДействиеШаблона.ИдентификаторЭтапа = СтрокаЭтап.ИдентификаторЭтапа;
		
	КонецЦикла;
	
	// Заполнение табличной части ПредшественникиЭтапов
	Если СтруктураШаблона.ВариантМаршрутизации = 
		Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
		ПустойИдентификатор = УникальныйИдентификаторПустой();
		
		ПорядокВыполненияДействий = СтруктураШаблона.ПорядокВыполненияДействий;
		
		Для Каждого ДействиеШаблона ИЗ ПорядокВыполненияДействий Цикл
			
			СтрокаПредшественникиЭтапов = НовыйШаблон.ПредшественникиЭтапов.Добавить();
			СтрокаПредшественникиЭтапов.ИдентификаторПоследователя = 
				ТаблицаДействий.Найти(ДействиеШаблона.НомерДействия, "НомерДействия").ИдентификаторЭтапа;
			
			Если ЗначениеЗаполнено(ДействиеШаблона.ПослеДействия) Тогда
				СтрокаПредшественникиЭтапов.ИдентификаторПредшественника =
					ТаблицаДействий.Найти(ДействиеШаблона.ПослеДействия, "НомерДействия").ИдентификаторЭтапа;
			Иначе
				СтрокаПредшественникиЭтапов.ИдентификаторПредшественника = ПустойИдентификатор;
			КонецЕсли;
			
			СтрокаПредшественникиЭтапов.УсловиеРассмотрения = ДействиеШаблона.РезультатПредыдущегоДействия;
			СтрокаПредшественникиЭтапов.УсловиеПерехода = ДействиеШаблона.Условие;
			
			СтрокаПредшественникиЭтапов.ИмяПредметаУсловия = 
				МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(ДействиеШаблона.ИмяПредметаУсловия);
			
		КонецЦикла;
		
	Иначе
		
		ИД_ПредыдущегоЭтапа = УникальныйИдентификаторПустой();
		
		Для Каждого СтрокаЭтап ИЗ НовыйШаблон.Этапы Цикл
					
			СтрокаПредшественникиЭтапов = НовыйШаблон.ПредшественникиЭтапов.Добавить();
			СтрокаПредшественникиЭтапов.ИдентификаторПоследователя = СтрокаЭтап.ИдентификаторЭтапа;
			СтрокаПредшественникиЭтапов.ИдентификаторПредшественника = ИД_ПредыдущегоЭтапа;
			СтрокаПредшественникиЭтапов.УсловиеРассмотрения = 
				Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
			
			ИД_ПредыдущегоЭтапа = СтрокаЭтап.ИдентификаторЭтапа;
		КонецЦикла;
		
	КонецЕсли;
	
	// До заполнение табличной части ПредметыЗадач с учетом добавленных
	// действий
	Если СтруктураШаблона.Предметы.Количество() > 0 Тогда
	
		Для Каждого ШаблонЭтапа ИЗ НовыйШаблон.Этапы Цикл
			
			ИмяПроцесса = Справочники[ШаблонЭтапа.ШаблонБизнесПроцесса.Метаданные().Имя].
				ИмяПроцесса(ШаблонЭтапа.ШаблонБизнесПроцесса);
				
			Если ИмяПроцесса = "КомплексныйПроцесс" Тогда
				ДействияШаблонаЭтапа = Новый Массив;
				ДействияШаблонаЭтапа.Добавить(Неопределено);
			Иначе
				ДействияШаблонаЭтапа = БизнесПроцессы[ИмяПроцесса].ТочкиМаршрута;
			КонецЕсли;
				
			Для Каждого ДействиеШаблонаЭтапа ИЗ ДействияШаблонаЭтапа Цикл
				
				Для Каждого Предмет Из СтруктураШаблона.Предметы Цикл
					СтрокаПредметыЗадач = НовыйШаблон.ПредметыЗадач.Добавить();
					СтрокаПредметыЗадач.ИдентификаторЭтапа = ШаблонЭтапа.ИдентификаторЭтапа;
					СтрокаПредметыЗадач.ШаблонБизнесПроцесса = ШаблонЭтапа.ШаблонБизнесПроцесса;
					СтрокаПредметыЗадач.ТочкаМаршрута = ДействиеШаблонаЭтапа;
					СтрокаПредметыЗадач.ИмяПредмета = МультипредметностьВызовСервера.
						ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредмета);
					
					Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") 
						И ДействиеШаблонаЭтапа = Предмет.ТочкаМаршрута Тогда
						СтрокаПредметыЗадач.ОбязательноеЗаполнение = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(НовыйШаблон);
	
	НовыйШаблон.Записать();
	
	// Передача подчиненным действиям.
	
	ШаблоныЭтапов = НовыйШаблон.Этапы.ВыгрузитьКолонку("ШаблонБизнесПроцесса");
	
	Для Каждого Предмет Из НовыйШаблон.Предметы Цикл
		
		СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		ЗаполнитьЗначенияСвойств(СтруктураПредмета, Предмет);
		
		МультипредметностьВызовСервера.ДобавитьПредметВШаблоныПроцесса(
			НовыйШаблон.Ссылка,
			ШаблоныЭтапов,
			НовыйШаблон.ПредметыЗадач,
			СтруктураПредмета);
		
	КонецЦикла;
	
	// Заполнение настроек шаблонов процессов
	НастрокиШаблона = СтруктураШаблона.НастрокиШаблона.Скопировать();
	НастрокиШаблона.Колонки.Добавить("ШаблонБизнесПроцесса");
	НастрокиШаблона.ЗаполнитьЗначения(НовыйШаблон.Ссылка, "ШаблонБизнесПроцесса");
	
	НаборЗаписей = РегистрыСведений.НастройкаШаблоновБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(НовыйШаблон.Ссылка);
	НаборЗаписей.Загрузить(НастрокиШаблона);
	НаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйШаблон.Ссылка;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "Карточка", "Карточка комплексного процесса", 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));

	КонецЕсли;
		
КонецПроцедуры

Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ИмяПроцесса(ШаблонСсылка) Экспорт
	
	Возврат "КомплексныйПроцесс";
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("ВладелецШаблона")
			И (ТипЗнч(Параметры.ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			ИЛИ ТипЗнч(Параметры.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) 
			ИЛИ Параметры.Свойство("Ключ")
			И (ТипЗнч(Параметры.Ключ.ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			ИЛИ ТипЗнч(Параметры.Ключ.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")) Тогда
			Если НЕ Параметры.Свойство("ВладелецШаблона") Тогда
				Параметры.Вставить("ВладелецШаблона", Параметры.Ключ.ВладелецШаблона);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
	  "Ответственный,
	  |Ссылка,
	  |ШаблонВКомплексномПроцессе,
	  |ВладелецШаблона";
	
КонецФункции
	
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа);	
	
КонецПроцедуры	

// Возвращает Истина, указывая тем самым что этот объект сам заполняет свои права 
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции	

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	ШаблоныБизнесПроцессов.ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДействие(ВидДействия, СтруктураДействия)
	
	СсылкаНаДействие = Неопределено;
	
	Если ВидДействия = "Исполнение" Тогда
		СсылкаНаДействие = Справочники.ШаблоныИсполнения.
			СоздатьШаблонИсполнения(СтруктураДействия);
	ИначеЕсли ВидДействия = "КомплексныйПроцесс" Тогда
		СсылкаНаДействие = Справочники.ШаблоныКомплексныхБизнесПроцессов.
			СоздатьШаблонКомплексногоПроцесса(СтруктураДействия);
	ИначеЕсли ВидДействия = "Ознакомление" Тогда
		СсылкаНаДействие = Справочники.ШаблоныОзнакомления.
			СоздатьШаблонОзнакомления(СтруктураДействия);
	ИначеЕсли ВидДействия = "Поручение" Тогда
		СсылкаНаДействие = Справочники.ШаблоныПоручения.
			СоздатьШаблонПоручения(СтруктураДействия);
	ИначеЕсли ВидДействия = "Приглашение" Тогда
		
	ИначеЕсли ВидДействия = "Рассмотрение" Тогда
		СсылкаНаДействие = Справочники.ШаблоныРассмотрения.
			СоздатьШаблонРассмотрения(СтруктураДействия);
	ИначеЕсли ВидДействия = "Регистрация" Тогда
		СсылкаНаДействие = Справочники.ШаблоныРегистрации.
			СоздатьШаблонРегистрации(СтруктураДействия);
	ИначеЕсли ВидДействия = "Согласование" Тогда
		СсылкаНаДействие = Справочники.ШаблоныСогласования.
			СоздатьШаблонСогласования(СтруктураДействия);
	ИначеЕсли ВидДействия = "Утверждение" Тогда
		СсылкаНаДействие = Справочники.ШаблоныУтверждения.
			СоздатьШаблонУтверждения(СтруктураДействия);
	КонецЕсли;
	
	Возврат СсылкаНаДействие;
	
КонецФункции

#КонецОбласти

#КонецЕсли
