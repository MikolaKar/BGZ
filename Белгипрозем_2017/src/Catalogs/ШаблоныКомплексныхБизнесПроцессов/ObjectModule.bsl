// Получает строковое представления срока выполнения
Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения() Экспорт
	
	МаксимальнаяДлительность = 0;
	ТочноеЗначение = Истина;
	Если ЗначениеЗаполнено(СрокИсполнения) ИЛИ ЗначениеЗаполнено(СрокИсполненияЧасов) Тогда
		МаксимальнаяДлительность =
			СрокИсполнения * 24 + СрокИсполненияЧасов + СрокОтложенногоСтарта / 3600;
	Иначе
		МаксимальнаяДлительность = ПолучитьДлительностьПроцесса();
		ТочноеЗначение = Ложь;
	КонецЕсли;
	
	Если МаксимальнаяДлительность > 0 Тогда
		ДлительностьДней = Цел(МаксимальнаяДлительность / 24);
		ДлительностьЧасов = МаксимальнаяДлительность - ДлительностьДней * 24; 
		ПодписьДней = "";
		ПодписьЧасов = "";
		
		ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ДлительностьДней);
		ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ДлительностьЧасов);
		
		Если ЗначениеЗаполнено(ДлительностьДней) Тогда
			ПодписьДней = Строка(ДлительностьДней) + " " + ПодписьДней;
		КонецЕсли;	
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ПодписьЧасов = Строка(ДлительностьЧасов) + " " + ПодписьЧасов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДлительностьДней) И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ДлительностьПодпись = ПодписьДней + НСтр("ru = ' и '") + ПодписьЧасов;
		ИначеЕсли ЗначениеЗаполнено(ДлительностьДней) ИЛИ ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ДлительностьПодпись = ?(ЗначениеЗаполнено(ДлительностьДней), ПодписьДней, ПодписьЧасов);
		КонецЕсли;
		
		Возврат ?(ТочноеЗначение, "", "~") + ДлительностьПодпись;
	Иначе
		Текст = НСтр("ru = 'Невозможно вычислить'");	
	КонецЕсли;

КонецФункции

// Получить строковое представление исполнителей процесса
Функция ПолучитьСтроковоеПредставлениеИсполнителей() Экспорт
	
	Возврат НСтр("ru = 'Определяются настройкой действия'");
	
КонецФункции

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
		
	Если Этапы.Количество() = 0 Тогда
		МассивПолей.Добавить("Этапы");
	КонецЕсли;
	
	Для Каждого Шаблон Из Этапы Цикл
		
		Если ЗначениеЗаполнено(Шаблон.ШаблонБизнесПроцесса) Тогда
			
			ШаблонОбъект = Шаблон.ШаблонБизнесПроцесса.ПолучитьОбъект();
			

			МассивПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				ВсеПоляСтрокой = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
				СтрокаПолей = Строка(Шаблон.ШаблонБизнесПроцесса) + ": " + НСтр("ru='Ошибка заполнения: '") + ВсеПоляСтрокой;
				МассивПолей.Добавить(СтрокаПолей);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат МассивПолей;
	
КонецФункции	

// Получает длительность всех действий в часах
Функция ПолучитьДлительностьПроцесса() Экспорт
	
	ДлительностьПодчиненныхПроцессов = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ПолучитьДлительностьПроцесса(ЭтотОбъект);
	
	ДлительностьПроцесса = ДлительностьПодчиненныхПроцессов + СрокОтложенногоСтарта / 3600;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) ИЛИ ЗначениеЗаполнено(СрокИсполненияЧасов) Тогда
		РезультатИсполнение = "";
		БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
			ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
			РезультатИсполнение,
			СрокИсполнения,
			СрокИсполненияЧасов);
		Результат = Результат 
			+ НСтр("ru = 'Срок исполнения'") + ": "
			+ РезультатИсполнение 
			+ Символы.ПС;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
				
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если БизнесСобытияВызовСервера.ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(Ссылка) Тогда
		
		МассивПолей = ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если МассивПолей.Количество() <> 0 Тогда
			
			СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
			
			Текст = 
				НСтр("ru = 'Этот шаблон используется для автоматического запуска процессов. Есть ошибки заполнения шаблона: '")
				+ СтрокаПолей;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"Объект.Ссылка",, 
				Отказ);
			
		КонецЕсли;		
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбъектКопирования.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	Для Каждого ЭтапОбъектаКопирования Из ОбъектКопирования.Этапы Цикл
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			Если ЭтапПроцесса.ИдентификаторЭтапа = ЭтапОбъектаКопирования.ИдентификаторЭтапа Тогда
				Если ЗначениеЗаполнено(ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
					НовыйШаблон = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
					НовыйШаблон.ИсходныйШаблон = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ИсходныйШаблон;
					НовыйШаблон.ВладелецШаблона = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПустаяСсылка();
					НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
					НовыйШаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
					НовыйШаблон.Записать();
					СтрокиЭтаповШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ЭтапПроцесса.ИдентификаторЭтапа));
					Для Каждого СтрокаЭтапаШаблона Из СтрокиЭтаповШаблона Цикл
						СтрокаЭтапаШаблона.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
					КонецЦикла;
					ЭтапПроцесса.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ПредшественникиЭтапов.Очистить();
	ВариантМаршрутизации = ОбъектКопирования.ВариантМаршрутизации;
	Для Каждого СтрокаПредшественник Из ОбъектКопирования.ПредшественникиЭтапов Цикл
		НоваяСтрока = ПредшественникиЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредшественник);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", Ссылка.ПометкаУдаления);
	
КонецПроцедуры

Процедура УстановитьПометкуУдаленияЭтапов(Установить)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
			Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().УстановитьПометкуУдаления(Установить);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Установка пометки удаления у шаблонов, которые были созданы, но не прикреплены к комплексному процессу.
// Например, создали шаблон комплексного процесса, добавили действие, а затем не сохранили шаблон комплексного процесса.
Процедура УдалитьНепривязанныеДействия()
	
	Запрос = Новый Запрос;
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.%1 КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ЭтапыПроцесса
		|		ПО (ЭтапыПроцесса.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныПроцессов.ВладелецШаблона = &ВладелецШаблона
		|	И ЭтапыПроцесса.Ссылка ЕСТЬ NULL ";
	ТипыШаблонов = ЭтотОбъект.Метаданные().ТабличныеЧасти.Этапы.Реквизиты.ШаблонБизнесПроцесса.Тип.Типы();
	Для Каждого Тип Из ТипыШаблонов Цикл
		ШаблонОбъект = Новый(Тип);
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапроса,
			ШаблонОбъект.Метаданные().Имя);
		Запрос.УстановитьПараметр("ВладелецШаблона", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонДляУдаления = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонДляУдаления.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Для Каждого Этап Из Этапы Цикл
		ВладелецШаблонаЭтапа = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Этап.ШаблонБизнесПроцесса, "ВладелецШаблона");
		Если ВладелецШаблонаЭтапа <> Ссылка Тогда
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.ВладелецШаблона = Ссылка;
			ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
			ШаблонОбъект.Записать();
		КонецЕсли;		
	КонецЦикла;
	
	ПометкаУдаленияСсылки = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	Если ПометкаУдаления <> ПометкаУдаленияСсылки Тогда
		УстановитьПометкуУдаленияЭтапов(ПометкаУдаления);
	КонецЕсли;
	
	УдалитьНепривязанныеДействия();
	
КонецПроцедуры
