
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Справочники.Пользователи.НайтиПоНаименованию("Бразинский Иван Владимирович");
	Проверяющий = Пользователи.ТекущийПользователь();
    Подразделение = РаботаСПользователями.ПолучитьПодразделение(Проверяющий);
    
    // признак ввода Акта со сканера 
    ПриемНаПроверку = Параметры.Свойство("НаПроверку") и Параметры.НаПроверку;
    
    Если Параметры.Свойство("Основание") и ЗначениеЗаполнено(Параметры.Основание) Тогда
        Объект.Владелец = Параметры.Основание;
    КонецЕсли; 
    
    МассивЗадач = мПроверкаДела.ПолучитьМассивЗадачПроверкиДела(Объект.Владелец, Проверяющий);
    Для й=0 По МассивЗадач.Количество()-1 Цикл
        Если МассивЗадач[й].ТочкаМаршрута.Имя = "Согласовать" Тогда
            ЗадачаСогласования = МассивЗадач[й];
        ИначеЕсли МассивЗадач[й].ТочкаМаршрута.Имя = "Ознакомиться" Тогда
            ЗадачаОзнакомления = МассивЗадач[й];	
        КонецЕсли; 
    КонецЦикла; 
    
    // Ввод нового
    Если Объект.Ссылка.Пустая() Тогда 
        
		// Значения по умолчанию
        Если ЗначениеЗаполнено(ЗадачаСогласования) Тогда
            Объект.УровеньПроверки = мПроверкаДела.ПолучитьУровеньПроверкиДелаПоПроцессу(ЗадачаСогласования.БизнесПроцесс);
            ДатаПринятияКИсполнению = ЗадачаСогласования.ДатаПринятияКИсполнению;
        КонецЕсли; 
        Объект.Состояние = Перечисления.М_СостоянияАктовПроверки.НаПроверке;
        Объект.ДатаАктаПроверки = ТекущаяДата();
        Объект.ВидПроверкиКачества = Перечисления.М_ВидыПроверкиКачества.Камеральная;
        Объект.НомерАктаПроверки = СформироватьНомерАктаПроверкиНаСервере();
        Объект.Оценка = 1;
        Объект.ОценкаИтоговая = 1;
		
    	Объект.Наименование = СокрЛП(Объект.НомерАктаПроверки) + " от " + Формат(Объект.ДатаАктаПроверки,"ДЛФ=D");
        
        // Проверяемый - первый исполнитель из этапа работ по делу
		Объект.Проверяемый = мПроверкаДела.ПолучитьИсполнителяДела(Объект.Владелец);
        
        // Проверяющий - автор документа
        СтрокаТаблицыПроверки = Объект.ПроверкиКачества.Добавить();
        ЗаполнитьСтрокуПроверки(СтрокаТаблицыПроверки);
    Иначе
        // Открытие существующего акта
        Если ПриемНаПроверку Тогда
            // Изменение уровня проверки в акте в соответствии с уровнем проверяющего
            Если ЗначениеЗаполнено(ЗадачаСогласования) Тогда
                ДатаПринятияКИсполнению = ЗадачаСогласования.ДатаПринятияКИсполнению;
                Объект.УровеньПроверки = мПроверкаДела.ПолучитьУровеньПроверкиДелаПоПроцессу(ЗадачаСогласования.БизнесПроцесс);
            КонецЕсли; 
            
            // Изменить состояние акта проверки для возможности исправления замечания
            Объект.Состояние = Перечисления.М_СостоянияАктовПроверки.НаПроверке;
           
            // Добавление строки Проверяющего
            СтрокаТаблицыПроверки = Объект.ПроверкиКачества.Добавить();
            ЗаполнитьСтрокуПроверки(СтрокаТаблицыПроверки);
        КонецЕсли; 
    КонецЕсли; 
	
    // для отбора замечаний по видам работ
    ВидРаботПоДоговору = ПолучитьВидРабот();
    
    // СтандартныеПодсистемы.Печать
    УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
    // Конец СтандартныеПодсистемы.Печать
    
    // Проверка доступа на редактирование
    Если Объект.Состояние = Перечисления.М_СостоянияАктовПроверки.Проверен Тогда
        // редактировать нельзя
        ЭтаФорма.ТолькоПросмотр = Истина;
    КонецЕсли; 
	
	СписокВозможныхПроверяющих = мПроверкаДела.ПолучитьСписокВозможныхПроверяющих(Подразделение);
	
	Если Не ЕстьПраваПроверяющего(Проверяющий) Тогда
		// редактировать нельзя
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли; 

    ЦветНетНеИсполненных  = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;	
    ЦветЕстьНеисполненные  = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
    
    НомерДела = Объект.Владелец.РегистрационныйНомер;
    РаботаетИсполнитель = Объект.Проверяемый = Проверяющий;

КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаСервере
Функция ЕстьПраваПроверяющего(ТекПользователь)
	Если СписокВозможныхПроверяющих.НайтиПоЗначению(ТекПользователь) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
КонецФункции 
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ВидРаботПоДоговору = ПолучитьВидРабот();
    РаскраситьНеисправленные();
	
	УправлениеКнопками();
    
    // Активируем последнюю строку Проверяющего
    ВсегоСтрок = Объект.ПроверкиКачества.Количество();
    Если ВсегоСтрок > 0 Тогда
        Элементы.ПроверкиКачества.ТекущаяСтрока = Объект.ПроверкиКачества[ВсегоСтрок-1].ПолучитьИдентификатор();
    КонецЕсли; 
    
КонецПроцедуры

#Область Шапка

&НаКлиенте
Процедура ДатаАктаПроверкиПриИзменении(Элемент)
    СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНомерАктаПроверки()
    Объект.НомерАктаПроверки = СформироватьНомерАктаПроверкиНаСервере();
КонецПроцедуры
    
&НаСервере
Функция СформироватьНомерАктаПроверкиНаСервере()
    НомерАктаПроверки = "";
    Если ЗначениеЗаполнено(Объект.Владелец) Тогда
        НомерАктаПроверки = Объект.Владелец.РегистрационныйНомер;
    КонецЕсли;  
    
    Если ЗначениеЗаполнено(Объект.ВидПроверкиКачества) Тогда
        Если Объект.ВидПроверкиКачества = Перечисления.М_ВидыПроверкиКачества.Камеральная Тогда
            НомерАктаПроверки = НомерАктаПроверки+"к";  // Камеральная
        Иначе
             НомерАктаПроверки = НомерАктаПроверки+"п"; // Полевая
       КонецЕсли; 
    КонецЕсли; 
    Возврат НомерАктаПроверки;
КонецФункции
    
&НаКлиенте
Процедура НомерАктаПроверкиПриИзменении(Элемент)
    СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование()
    Объект.Наименование = СокрЛП(Объект.НомерАктаПроверки) + " от " + Формат(Объект.ДатаАктаПроверки,"ДЛФ=D");
КонецПроцедуры // СформироватьНаименование()

&НаКлиенте
Процедура флПоказатьВсеЗамечанияПриИзменении(Элемент)
    ПоказатьЗамечания();
КонецПроцедуры

&НаКлиенте
Процедура ДелоПриИзменении(Элемент)
    СформироватьНомерАктаПроверки();
    
    // для отбора замечаний по видам работ
    ВидРаботПоДоговору = ПолучитьВидРабот();
КонецПроцедуры

&НаКлиенте
Процедура ВидПроверкиКачестваПриИзменении(Элемент)
    Объект.НомерАктаПроверки = СформироватьНомерАктаПроверкиНаСервере();
    СформироватьНаименование();
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьВидРабот()
    ВидРаботПоДоговорам = Справочники.мВидыРаботПоДоговорам.ПустаяСсылка();
    Влад = Объект.Владелец;
    Если ЗначениеЗаполнено(Влад) Тогда
        Этап = Влад.ЭтапДоговора;
        Если ЗначениеЗаполнено(Этап) Тогда
            ВидРабот = Этап.ВидРабот;
            Если ЗначениеЗаполнено(ВидРабот) Тогда
                ВидРаботПоДоговорам = ВидРабот.ВидРаботПоДоговорам;
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
    Возврат ВидРаботПоДоговорам;
КонецФункции // ПолучитьВидРабот()

&НаКлиенте
Функция ПосчитатьОценкуАктаПроверки() 
	// Изменять Оценки из Акта можно только когда Акт на проверке
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.НаПроверке") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// 2014 - просто минимальная оценка по замечаниям
	Объект.Оценка = 1; // по умолчанию
	
	Для каждого Стр Из Объект.ПроверкиКачества Цикл
		Если Стр.Оценка > 0 Тогда
			Объект.Оценка = Мин(Объект.Оценка, Стр.Оценка);
		КонецЕсли; 
	КонецЦикла; 
	
	Объект.ОценкаИтоговая = Объект.Оценка;
КонецФункции

&НаКлиенте
Процедура УстановитьОценкуПроверяющего(НомерПроверкиКачества)
    
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.НаПроверке") Тогда
		Возврат;
	КонецЕсли; 
		
	Если НомерПроверкиКачества = 0 Тогда
		// делаем расчет оценок по всем проверяющим
		Для каждого Стр Из Объект.ПроверкиКачества Цикл
			Стр.Оценка = ПосчитатьОценкуПроверяющего(Стр.НомерПроверкиКачества);
		КонецЦикла; 
	Иначе	
		// расчет по конкретному проверяющему
		СтрокаПроверки = Объект.ПроверкиКачества.НайтиСтроки(Новый Структура("НомерПроверкиКачества", НомерПроверкиКачества));
		Если СтрокаПроверки.Количество() > 0 Тогда
			СтрокаПроверки[0].Оценка = ПосчитатьОценкуПроверяющего(НомерПроверкиКачества);;   
		КонецЕсли; 
	КонецЕсли; 
	
	ПосчитатьОценкуАктаПроверки();
    
КонецПроцедуры // УстановитьОценкуПроверяющего()

&НаСервере
Функция ПосчитатьОценкуПроверяющего(НомерПроверкиКачества)
    ОценкаПроверяющего = 1; // по умолчанию
	
	СтрокиЗамечаний = Объект.Замечания.НайтиСтроки(Новый Структура("НомерПроверкиКачества", НомерПроверкиКачества));
	
	Для каждого Стр Из СтрокиЗамечаний Цикл
		Если Стр.Оценка > 0 Тогда
			ОценкаПроверяющего = Мин(ОценкаПроверяющего, Стр.Оценка);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ОценкаПроверяющего;	
КонецФункции // ПосчитатьОценкуПроверяющего()
 
&НаКлиенте
Процедура ПосчитатьНеисправленные();
	Объект.НеИсправленоЗамечаний = 0;
	СтрокиЗамечаний = Объект.Замечания;
	Для каждого Стр Из СтрокиЗамечаний Цикл
        Если Не Стр.Исправлено Тогда
            Объект.НеИсправленоЗамечаний = Объект.НеИсправленоЗамечаний + 1;    
        КонецЕсли;    
    КонецЦикла;
    РаскраситьНеисправленные();
КонецПроцедуры

&НаКлиенте
Процедура РаскраситьНеисправленные()
    Если Объект.НеИсправленоЗамечаний = 0 Тогда
        Элементы.НеИсправленоЗамечаний.ЦветФона  = ЦветНетНеИсполненных;	
    Иначе
        Элементы.НеИсправленоЗамечаний.ЦветФона  = ЦветЕстьНеисполненные;	
    КонецЕсли; 
КонецПроцедуры // РаскраситьНеисправленные()
 

// Возвращает ТЗ шкалу оценок в зависимости от количества оценок
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
&НаСервере
Функция ПолучитьШкалуОценок()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   М_ОценкаКоличестваЗамечанийСрезПоследних.ОценкаЗамечания КАК ОценкаЗамечания,
    |   М_ОценкаКоличестваЗамечанийСрезПоследних.КоличествоС КАК КоличествоС,
    |   М_ОценкаКоличестваЗамечанийСрезПоследних.КоличествоПо,
    |   М_ОценкаКоличестваЗамечанийСрезПоследних.Оценка
    |ИЗ
    |   РегистрСведений.М_ОценкаКоличестваЗамечаний.СрезПоследних(&ДатаСреза, ) КАК М_ОценкаКоличестваЗамечанийСрезПоследних
    |ГДЕ
    |   НЕ М_ОценкаКоличестваЗамечанийСрезПоследних.НеАктуально
    |
    |УПОРЯДОЧИТЬ ПО
    |   ОценкаЗамечания,
    |   КоличествоС УБЫВ";
    
    Запрос.УстановитьПараметр("ДатаСреза", Объект.ДатаАктаПроверки);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции // ПолучитьШкалуОценок()

#КонецОбласти 

#Область ПроверкиКачества

&НаКлиенте
Процедура ПроверкиКачестваПередНачаломИзменения(Элемент, Отказ)
    
    // проверим доступ
    Если Элемент.ТекущиеДанные.НомерСтроки < Объект.ПроверкиКачества.Количество() Тогда
        Предупреждение("Редактировать проверку нельзя, т.к. есть уже более поздние проверки!", 3);
        Отказ = Истина;
    КонецЕсли; 
    
    Если Не Отказ Тогда
    	Если ПроверитьПроверяющего(Элемент.ТекущиеДанные.Проверяющий) Тогда
            Предупреждение("Редактировать проверку имеет право только "+Элемент.ТекущиеДанные.Проверяющий+"!", 3);
            Отказ = Истина;
        КонецЕсли; 
    КонецЕсли; 
  КонецПроцедуры

&НаКлиенте
Процедура ПроверкиКачестваПриАктивизацииСтроки(Элемент)
   ПоказатьЗамечания(); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПроверки(СтрокаПроверки)
    Если Объект.Ссылка.Пустая() Тогда
        // Новый акт 
        Если ЗначениеЗаполнено(ДатаПринятияКИсполнению) Тогда
            СтрокаПроверки.ДатаНачала = ДатаПринятияКИсполнению;
        Иначе	
            СтрокаПроверки.ДатаНачала = ТекущаяДатаСеанса();
        КонецЕсли; 
        СтрокаПроверки.Проверяющий = Проверяющий;
        СтрокаПроверки.ЦиклПроверки = 1;
        СтрокаПроверки.Оценка = 1;
        СтрокаПроверки.НомерПроверкиКачества = 1;
        Возврат;
    КонецЕсли; 
    
    //Если ПриемНаПроверку Тогда
        // ввод через сканер - автомат. либо добавление строки вручную   
        // получим новый номер проверки качества и ЦиклПроверки для проверяющего
        НомерЦикла = 1;
        НомерПроверкиКачества = 0;
    	ПолучитьНомераЦиклаИПроверкиКачества(НомерЦикла, НомерПроверкиКачества);
        
        Если ЗначениеЗаполнено(ДатаПринятияКИсполнению) Тогда
            СтрокаПроверки.ДатаНачала = ДатаПринятияКИсполнению;
        Иначе	
            СтрокаПроверки.ДатаНачала = ТекущаяДатаСеанса();
        КонецЕсли; 
        
        СтрокаПроверки.Проверяющий = Проверяющий;
        СтрокаПроверки.ЦиклПроверки = НомерЦикла;
        СтрокаПроверки.Оценка = 1;
        СтрокаПроверки.НомерПроверкиКачества = НомерПроверкиКачества + 1;
    //Иначе
    //    // ручное добавление строки
    //    
    //    
    //КонецЕсли; 
    

КонецПроцедуры

&НаСервере
Процедура ПолучитьНомераЦиклаИПроверкиКачества(НомерЦикла, НомерПроверкиКачества)
    Для каждого Строка Из Объект.ПроверкиКачества Цикл
        Если Строка.Проверяющий = Проверяющий Тогда
            НомерЦикла = НомерЦикла + 1;
        КонецЕсли; 
        НомерПроверкиКачества = Макс(НомерПроверкиКачества, Строка.НомерПроверкиКачества);
    КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверкиКачестваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    Если НоваяСтрока Тогда
        ТекСтрока = Элемент.ТекущиеДанные;
        ЗаполнитьСтрокуПроверки(ТекСтрока);
    КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДатуСеанса()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаСервере
Процедура ПолучитьДатаПринятияКИсполнению()
    ДатаПринятияКИсполнению = Дата('00010101000000');
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ЗадачаИсполнителяПредметы.Ссылка.ДатаПринятияКИсполнению
        |ИЗ
        |   Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
        |ГДЕ
        |   ЗадачаИсполнителяПредметы.Предмет = &Предмет
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
        |   И ЗадачаИсполнителяПредметы.Ссылка.Исполнитель = &Исполнитель
        |   И ЗадачаИсполнителяПредметы.Ссылка.ПринятаКИсполнению";
    
    Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
    Запрос.УстановитьПараметр("Предмет", Объект.Владелец);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ДатаПринятияКИсполнению = ВыборкаДетальныеЗаписи.ДатаПринятияКИсполнению; 
        Прервать;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПроверяющего(ПроверяющийИзСтроки)
    ЗапретРедактирования = Ложь;
    //ТекущийПользователь = Пользователи.ТекущийПользователь();
    Если Проверяющий <> ПроверяющийИзСтроки Тогда
        ЗапретРедактирования = Истина;
    КонецЕсли; 
    Возврат ЗапретРедактирования;
КонецФункции // ПроверитьПроверяющего(Элемент.ТекущиеДанные.Проверяющий)()

&НаКлиенте
Процедура ПроверкиКачестваПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
    Если ПроверитьПроверяющего(ТекДанные.Проверяющий) Тогда
        Предупреждение("Удалить проверку имеет право только "+ТекДанные.Проверяющий+"!", 3);
        Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		// Удалить Замечания проверяющего
		Отбор = Новый Структура("НомерПроверкиКачества", ТекДанные.НомерПроверкиКачества);
		ИскСтроки = Объект.Замечания.НайтиСтроки(Отбор);
		Для каждого Стр Из ИскСтроки Цикл
			Объект.Замечания.Удалить(Стр);	
		КонецЦикла;  
		
		ПосчитатьНеисправленные();
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверкиКачестваПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
    Если НоваяСтрока Тогда
        Проверяющий = ПользователиКлиентСервер.ТекущийПользователь();
        // получим новый номер проверки качества и ЦиклПроверки для проверяющего
        НомерЦикла = 1;
        НомерПроверкиКачества = 0;
        Для каждого Строка Из Объект.ПроверкиКачества Цикл
            Если Строка.Проверяющий = Проверяющий Тогда
                НомерЦикла = НомерЦикла + 1;
            КонецЕсли; 
        	НомерПроверкиКачества = Макс(НомерПроверкиКачества, Строка.НомерПроверкиКачества);
        КонецЦикла; 
        
        ПолучитьДатаПринятияКИсполнению();
        
        // заполнение по умолчанию
        ТекСтрока = Элемент.ТекущиеДанные;
        Если ЗначениеЗаполнено(ДатаПринятияКИсполнению) Тогда
            ТекСтрока.ДатаНачала = ДатаПринятияКИсполнению;
        Иначе
            ТекСтрока.ДатаНачала = ПолучитьТекущуюДатуСеанса();
        КонецЕсли; 
        ТекСтрока.Проверяющий = Проверяющий;
        ТекСтрока.ЦиклПроверки = НомерЦикла;
        ТекСтрока.Оценка = 1;
        ТекСтрока.НомерПроверкиКачества = НомерПроверкиКачества + 1;
    КонецЕсли; 

	Если Не Отказ Тогда
		ПосчитатьОценкуАктаПроверки();
    КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область Замечания

&НаКлиенте
Процедура ПоказатьЗамечания()
    
    НомерПроверкиКачества = Неопределено;    
    Если Не ЭтаФорма["флПоказатьВсеЗамечания"] Тогда
        ТекСтрока = Элементы.ПроверкиКачества.ТекущиеДанные;
        Если ТекСтрока <> Неопределено Тогда
            НомерПроверкиКачества = ТекСтрока.НомерПроверкиКачества;
        КонецЕсли; 
    КонецЕсли; 
    
    Отбор = Новый ФиксированнаяСтруктура("НомерПроверкиКачества", НомерПроверкиКачества); 
    Элементы.Замечания.ОтборСтрок = Отбор;
    
    Объект.Замечания.Сортировать("Исправлено");
    ИскСтроки = Объект.Замечания.НайтиСтроки(Новый Структура("НомерПроверкиКачества", НомерПроверкиКачества));
    
    
    Если ИскСтроки.Количество() > 0 Тогда
        Элементы.Замечания.ТекущаяСтрока = ИскСтроки[0].ПолучитьИдентификатор();
    КонецЕсли; 

КонецПроцедуры // ПоказатьЗамечания()

&НаКлиенте
Процедура ЗамечанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = ПроверитьПраваНаЗамечания("ПередНачаломДобавления");
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    СтрокаПроверкиКачества = Элементы.ПроверкиКачества.ТекущиеДанные;
    Если СтрокаПроверкиКачества <> Неопределено Тогда
        
        // значение для синхронизации замечаний с проверками
        Если НоваяСтрока Тогда
            Элемент.ТекущиеДанные.НомерПроверкиКачества = СтрокаПроверкиКачества.НомерПроверкиКачества;
            Элемент.ТекущиеДанные.Проверяющий = СтрокаПроверкиКачества.Проверяющий;
        КонецЕсли;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекОценка = Элемент.ТекущиеДанные.Оценка;
		Если ТекОценка > 0 Тогда
			Отказ = ПроверитьПраваНаЗамечания("ПередУдалением");
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияЗамечаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//ТекДанные = Элементы.Замечания.ТекущиеДанные;
	//Если ТекДанные <> Неопределено Тогда
	//	Если ЗначениеЗаполнено(ТекДанные.Замечание) Тогда
	//		ПоследнееВыбранноеЗамечание = ТекДанные.Замечание;
	//	КонецЕсли; 
	//КонецЕсли; 
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОтборПоВидуРабот", ВидРаботПоДоговору);
	ПараметрыФормы.Вставить("ОтборПоВидуПроверки", Объект.ВидПроверкиКачества);
	//ПараметрыФормы.Вставить("ТекущаяСтрока", ПоследнееВыбранноеЗамечание);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.мКлассификаторЗамечаний.Форма.ФормаВыбораДляПроверки", ПараметрыФормы, Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекНомерПроверкиКачества = "";
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			ТекНомерПроверкиКачества = Элемент.ТекущиеДанные.НомерПроверкиКачества; 
		Иначе
			ТекДанные = Элементы.ПроверкиКачества.ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекНомерПроверкиКачества = ТекДанные.НомерПроверкиКачества; 
			КонецЕсли; 
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекНомерПроверкиКачества) Тогда
			УстановитьОценкуПроверяющего(ТекНомерПроверкиКачества);
		КонецЕсли; 
		ПоказатьЗамечания();
		ПосчитатьНеисправленные();
		УправлениеКнопками();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПослеУдаления(Элемент)
	ТекНомерПроверкиКачества = 0;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекНомерПроверкиКачества = Элемент.ТекущиеДанные.НомерПроверкиКачества; 
	Иначе
		ТекДанные = Элементы.ПроверкиКачества.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекНомерПроверкиКачества = ТекДанные.НомерПроверкиКачества; 
		КонецЕсли; 
	КонецЕсли; 
	//Если ЗначениеЗаполнено(ТекНомерПроверкиКачества) Тогда
	//	УстановитьОценкуПроверяющего(ТекНомерПроверкиКачества);
	//КонецЕсли; 
    ПосчитатьНеисправленные();
	УстановитьОценкуПроверяющего(ТекНомерПроверкиКачества);
	УправлениеКнопками();

КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПриАктивизацииСтроки(Элемент)
    ОбновитьЗамечаниеСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗамечаниеСтрокой()
    ЗамечаниеСтрокой = "";
    ТекСтрока = Элементы.Замечания.ТекущиеДанные;
    Если ТекСтрока <> Неопределено Тогда
        ЗамечаниеСтрокой = ТекСтрока.Содержание;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередНачаломИзменения(Элемент, Отказ)
	Отказ = ПроверитьПраваНаЗамечания("ПередНачаломИзменения");
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияЗамечаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
        СтандартнаяОбработка = Ложь;
        ТекДанные = Элементы.Замечания.ТекущиеДанные;
        ЗаполнитьЗначенияСвойств(ТекДанные, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("ЗамечаниеПроверяющего") Тогда
			ТекДанные.Содержание = ВыбранноеЗначение.ЗамечаниеПроверяющего;
		КонецЕсли; 
		
		//ПоследнееВыбранноеЗамечание = ТекДанные.Замечание;
        ОбновитьЗамечаниеСтрокой();
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗамечанияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		Отказ = ПроверитьПраваНаЗамечания("ПередОкончаниемРедактирования", Элемент);
	КонецЕсли; 
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Функция ПроверитьПраваНаЗамечания(ВидПроверки, Элемент = Неопределено)
	Отказ = Ложь;
	
	Если Объект.Состояние <> ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.НаПроверке") Тогда
		Предупреждение("Работать с замечаниями можно только при состоянии ""На проверке""!", 3);
		Отказ = Истина;
	КонецЕсли; 
	
    СтрокаПроверкиКачества = ЭтаФорма.Элементы.ПроверкиКачества.ТекущиеДанные;
	Если СтрокаПроверкиКачества <> Неопределено Тогда
		
		// Проверка Пользователя
		//ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ЭтоДелегат = мРазное.ПравДелегированы(СтрокаПроверкиКачества.Проверяющий);
		
		Если ВидПроверки = "ПередНачаломДобавления" Тогда
			Если СтрокаПроверкиКачества.НомерСтроки < Объект.ПроверкиКачества.Количество() Тогда
				Предупреждение("Добавлять замечания можно только к последней проверке качества!", 3);
				Отказ = Истина;
			КонецЕсли; 
		    Если Не Отказ Тогда
				Если СтрокаПроверкиКачества.Проверяющий <> Проверяющий И НЕ ЭтоДелегат Тогда
					Предупреждение("Добавлять замечания может только проверяющий!", 3);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ВидПроверки = "ПередНачаломИзменения" Тогда
			СтрокаЗамечания = Элементы.Замечания.ТекущиеДанные;
			Если Элементы.Замечания.ТекущийЭлемент.Имя = "ЗамечанияСодержание" Тогда
				Если Не ЗначениеЗаполнено(СтрокаЗамечания.Замечание) Тогда
					ТекстПредупреждения = "Надо выбрать замечание!";
					Предупреждение(ТекстПредупреждения, 3);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли;
			Если СтрокаЗамечания <> Неопределено Тогда
				Если СтрокаЗамечания.Оценка > 0 Тогда
					Если Не Отказ Тогда
						// Если и Проверяющий и Проверяющий в замечаниях в одном списке СписокВозможныхПроверяющих
						//  то править можно
						ПраваЕсть = Ложь;
						
						Если ЕстьПраваПроверяющего(Проверяющий) И ЕстьПраваПроверяющего(СтрокаЗамечания.Проверяющий)  Тогда
							// редактировать можно
							ПраваЕсть = Истина;
						КонецЕсли; 
						
						//Если СтрокаЗамечания.Проверяющий <> Проверяющий И НЕ ЭтоДелегат Тогда
						Если НЕ ПраваЕсть И НЕ ЭтоДелегат Тогда
							Предупреждение("Изменять замечания может только проверяющий!", 3);
							Отказ = Истина;
						КонецЕсли; 
					КонецЕсли; 
					Если Не Отказ Тогда
						Если Элементы.Замечания.ТекущийЭлемент.Имя <> "ЗамечанияИсправлено" Тогда
							Если СтрокаПроверкиКачества.НомерСтроки < Объект.ПроверкиКачества.Количество() Тогда
								Предупреждение("Редактировать свои замечания можно только в поле ""Исправлено""!", 3);
								Отказ = Истина;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ВидПроверки = "ПередУдалением" Тогда
			// проверим доступ
			//Если СтрокаПроверкиКачества.НомерСтроки < Объект.ПроверкиКачества.Количество() Тогда
			//	Предупреждение("Удалять замечания можно только в последней проверке качества!", 3);
			//	Отказ = Истина;
			//КонецЕсли; 
		    Если Не Отказ Тогда
				Если СтрокаПроверкиКачества.Проверяющий <> Проверяющий И НЕ ЭтоДелегат Тогда
					Предупреждение("Удалять замечания может только проверяющий!", 3);
					Отказ = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
		ИначеЕсли ВидПроверки = "ПередОкончаниемРедактирования" Тогда
			// Проверка оценки - не должна быть 0
			ТекДанные = Элемент.ТекущиеДанные;
			Если Не ЗначениеЗаполнено(ТекДанные.Оценка) или ТекДанные.Оценка = 0 Тогда
				Предупреждение("Необходимо выбрать замечание с оценкой!", 3);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
    Иначе
        Отказ = Истина;
	КонецЕсли; 
	Возврат Отказ
КонецФункции // ПроверитьПраваНаЗамечания()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Контроль дубля акта проверки
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   мАктыПроверки.Ссылка
        |ИЗ
        |   Справочник.мАктыПроверки КАК мАктыПроверки
        |ГДЕ
        |   мАктыПроверки.НомерАктаПроверки = &НомерАктаПроверки
        |   И НЕ мАктыПроверки.ПометкаУдаления
        |   И мАктыПроверки.Код <> &Код";
	
	Запрос.УстановитьПараметр("НомерАктаПроверки", ТекущийОбъект.НомерАктаПроверки);
	Запрос.УстановитьПараметр("Код", ТекущийОбъект.Код);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю();	
		Сообщение.Текст = "Акт проверки с таким номером уже есть!";
		Сообщение.Поле = "НомерАктаПроверки";//"+Элемент.ТекущаяСтрока+"].Замечание";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли; 
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Согласовано(Команда)
	
	Если ЕстьНеисправленныеЗамечания() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Согласовать нельзя, т.к. есть неисправленные замечания!";
		Сообщение.ПутьКДанным = "Замечания";
		Сообщение.Сообщить(); 
		//Сообщить("Согласовать нельзя, т.к. есть неисправленные замечания!");
		Возврат;
	КонецЕсли; 
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатСогласования", ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"));
	ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ЗадачаСогласования, ПараметрыВыполнения);
	Исключение
		Сообщить(Строка(ЗадачаСогласования) + " не выполнена!");
	КонецПопытки;
    
    // Запись состояния дела
    Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.Проверено");
    мПроверкаДела.ЗаписатьСостояниеДела(Объект.Владелец, Состояние, ТекущаяДата(), Подразделение, Проверяющий, Объект.УровеньПроверки);  
    
    ПоказатьОповещениеПользователя("Дело "+НомерДела+" проверено!");
	
	// Запись состояния Акта
	Если Объект.Оценка = 1 Тогда
		Объект.Состояние = ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.Проверен");
	Иначе
		Объект.Состояние = ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.НаКомиссии");
	КонецЕсли; 
	
	ЗаписатьВремяОкончанияПроверки();

	ЗаписатьИЗакрыть();

КонецПроцедуры

// Проверяет есть ли неисправленные замечания в форме
&НаКлиенте
Функция ЕстьНеисправленныеЗамечания()
	Есть = Ложь;
	Для каждого Стр Из Объект.Замечания Цикл
		Если Не Стр.Исправлено Тогда
			Есть = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Есть;
КонецФункции

// записать время окончания проверки
&НаКлиенте
Процедура ЗаписатьВремяОкончанияПроверки()
	// Если в последней строке проверки есть Проверяющий, то запись времени окончания,
	//  иначе добавление строки с проверяющим
	й = Объект.ПроверкиКачества.Количество()-1;
	//Пока й >= 0 Цикл
	//	Если Объект.ПроверкиКачества[й].Проверяющий = Проверяющий Тогда
	//		Объект.ПроверкиКачества[й].ДатаОкончания = ТекущаяДата();
	//		Модифицированность = Истина;
	//		Прервать;
	//	КонецЕсли; 
	//    й = й-1;
	//КонецЦикла; 
	
	Если Объект.ПроверкиКачества[й].Проверяющий = Проверяющий Тогда
		Объект.ПроверкиКачества[й].ДатаОкончания = ТекущаяДата();
		Модифицированность = Истина;
	Иначе
		СтрокаПроверки = Объект.ПроверкиКачества.Добавить();
		НомерЦикла = 1;
        НомерПроверкиКачества = 0;
    	ПолучитьНомераЦиклаИПроверкиКачества(НомерЦикла, НомерПроверкиКачества);
        
        Если ЗначениеЗаполнено(ДатаПринятияКИсполнению) Тогда
            СтрокаПроверки.ДатаНачала = ДатаПринятияКИсполнению;
        Иначе	
            СтрокаПроверки.ДатаНачала = ТекущаяДата();
        КонецЕсли; 
        
        СтрокаПроверки.Проверяющий = Проверяющий;
        СтрокаПроверки.ЦиклПроверки = НомерЦикла;
        СтрокаПроверки.Оценка = 1;
        СтрокаПроверки.НомерПроверкиКачества = НомерПроверкиКачества + 1;
		СтрокаПроверки.ДатаОкончания = ТекущаяДата();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовано(Команда)
    
 	ЗаписатьВремяОкончанияПроверки();
    
    Дело = Объект.Владелец;
    
    // Понизить уровень проверки
    ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(Дело, Объект.УровеньПроверки);
    ПредУровеньПроверки = мПроверкаДела.ПолучитьПредыдущийУровеньПроверки(ПараметрыЗапроса);
	ТекУровеньПроверки = Объект.УровеньПроверки;
    Объект.УровеньПроверки = ПредУровеньПроверки;
    Объект.Состояние = ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.НаИсправлении");
    
    Записать();
    
    // Запись состояния дела
    Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.ВозвратНаИсправление");
    мПроверкаДела.ЗаписатьСостояниеДела(Дело, Состояние, ТекущаяДата(), Подразделение, Проверяющий, ТекУровеньПроверки);  
    
    ПоказатьОповещениеПользователя("Дело "+НомерДела+" возвращено на исправление!");
    
    // Не согласовать задачу
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатСогласования", ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
	РезультатВыполнения = "";
    Для каждого Стр Из Объект.Замечания Цикл
        Если НЕ Стр.Исправлено Тогда
		    РезультатВыполнения = РезультатВыполнения + СокрЛП(Стр.Содержание) + Символы.ПС;
        КонецЕсли; 
	КонецЦикла; 
	ПараметрыВыполнения.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ЗадачаСогласования, ПараметрыВыполнения);
	Исключение
		Сообщить(Строка(ЗадачаСогласования) + " не выполнена!");
    КонецПопытки;
    
    // Принять к исполнению задачу ознакомиться
    Если ЗначениеЗаполнено(ЗадачаОзнакомления) Тогда
 		Если мПроверкаДела.ПринятьЗадачуКИсполнению(ЗадачаОзнакомления, Проверяющий) Тогда
			Оповестить("ЗадачаИзменена", ЗадачаОзнакомления);
			ПоказатьОповещениеПользователя("Задача "+ЗадачаОзнакомления+" принята к исполнению!");
		Иначе	
			ПоказатьОповещениеПользователя("Задача "+ЗадачаОзнакомления+" не была принята к исполнению!");
		КонецЕсли; 
    КонецЕсли; 
	
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПроверку(Команда)
    
    // Получить текущий уровень проверки
    // Получить след уровень
    // определить шаблон процесса
    // Запустить новый процесс на основании процесса согласовать
 	ЗаписатьВремяОкончанияПроверки();
    Записать();
    
    Дело = Объект.Владелец;
    
    // Принять задачу к исполнению
    Если мПроверкаДела.ПринятьЗадачуКИсполнению(ЗадачаСогласования, Проверяющий) Тогда
        Оповестить("ЗадачаИзменена", ЗадачаСогласования);
        ПоказатьОповещениеПользователя("Задача "+ЗадачаСогласования+" принята к исполнению!");
    Иначе	
        ПоказатьОповещениеПользователя("Задача "+ЗадачаСогласования+" не была принята к исполнению!");
    КонецЕсли; 
    
    // Запуск процесса на следующий уровень
    ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(Дело, Объект.УровеньПроверки);
    СледУровеньПроверки = мПроверкаДела.ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса);
     
	мПроверкаДела.СтартоватьПроцессПроверкиДела(Дело, СледУровеньПроверки, ЗадачаСогласования, Проверяющий);
    
    // Запись состояния дела
    Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.НаправленоНаПроверку");
    мПроверкаДела.ЗаписатьСостояниеДела(Дело, Состояние, ТекущаяДата(), Подразделение, Проверяющий, Объект.УровеньПроверки);  
    
    ПоказатьОповещениеПользователя("Дело "+НомерДела+" направлено на проверку!");
    
	Закрыть();
КонецПроцедуры

// Доступность и видимость кнопок
//
// НеСогласовано
// Видмость - всегда, когда есть предУровня, Доступность - когда есть неисправленные замечания.
//
// Согласовано - Видимость когда нет следующего уровня проверки, Доступность нет неисправленных замечаний
//
// ОтправитьНаПроверку - Видимость когда есть след уровень, Доступность когда нет неисправленных замечаний
//
// ПовторитьПроверку - Видимость и Доступность Есть неисправленные замечания и есть след уровень и задача Ознакомиться 
&НаКлиенте
Процедура УправлениеКнопками()
    Проверен = Ложь;
    Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.М_СостоянияАктовПроверки.Проверен") Тогда
        // редактировать нельзя
        Проверен = Истина;
    КонецЕсли; 
    
    Если ЭтаФорма.ТолькоПросмотр Тогда
        // Считаем как проверен,- редактировать нельзя
        Проверен = Истина;
    КонецЕсли; 
    
    Если Объект.УровеньПроверки = ПредопределенноеЗначение("Перечисление.мУровниПроверки.Исполнитель") Тогда
        // для определения след уровня надо знать подразделение Исполнителя
        ПодразделениеПроверяемого = РаботаСПользователями.ПолучитьПодразделение(Объект.Проверяемый); 
        ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(
        Объект.Владелец, Объект.УровеньПроверки, ПодразделениеПроверяемого);
    Иначе
        // Подразделение из Дела
        ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(
        Объект.Владелец, Объект.УровеньПроверки);
    КонецЕсли; 
    
	СледУровень = мПроверкаДела.ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса);
	ПредУровень = мПроверкаДела.ПолучитьПредыдущийУровеньПроверки(ПараметрыЗапроса);
	ЕстьСледУровень = ЗначениеЗаполнено(СледУровень);
	ЕстьПредУровень = ЗначениеЗаполнено(ПредУровень);
	
	МассивНеисправленных = ПолучитьМассивНеисправленныхЗамечаний();
	ЕстьНеисправленные = МассивНеисправленных.Количество() > 0;
	
	// НеСогласовано
	Элементы.НеСогласовано.Видимость = ЕстьПредУровень;
	Элементы.НеСогласовано.Доступность = ЕстьНеисправленные И НЕ Проверен;
	
	// Согласовано
	Элементы.Согласовано.Видимость = Не ЕстьСледУровень;
	Элементы.Согласовано.Доступность = Не ЕстьНеисправленные И НЕ Проверен;
	
	// ОтправитьНаПроверку
	Элементы.ОтправитьНаПроверку.Видимость = ЕстьСледУровень;
	Элементы.ОтправитьНаПроверку.Доступность = Не ЕстьНеисправленные И НЕ Проверен;
	
	// ПовторитьПроверку
	Если ЗначениеЗаполнено(ЗадачаОзнакомления) Тогда
		Элементы.ПовторитьПроверку.Видимость = ЕстьНеисправленные;
		Элементы.ПовторитьПроверку.Доступность = ЕстьНеисправленные И НЕ Проверен;
	Иначе	
		Элементы.ПовторитьПроверку.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБизнесПроцессЗадачи(ЗадачаСогласования)
	Возврат ЗадачаСогласования.БизнесПроцесс;	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивНеисправленныхЗамечаний()
	МассивЗамечаний = Новый Массив;
	// Проверить наличие неисправленных замечаний
    Отбор = Новый Структура("Исправлено", Ложь); 
    //Отбор = Новый Структура("Проверяющий, Исправлено", Проверяющий, Ложь); 
    ИскСтроки = Объект.Замечания.НайтиСтроки(Отбор);
	
	Для каждого Стр Из ИскСтроки Цикл
		МассивЗамечаний.Добавить(Стр.Содержание);
	КонецЦикла; 
	
	Возврат МассивЗамечаний;
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	Если Модифицированность Тогда
		Записать();
	КонецЕсли; 
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроверку(Команда)
	
 	ЗаписатьВремяОкончанияПроверки();
    Записать();
	
	Дело = Объект.Владелец;
    //РеквУровняПроверки = мПроверкаДела.ПолучитьРеквизитыУровняПроверкиДела(Дело);
    
    // Принять задачу к исполнению
    Если мПроверкаДела.ПринятьЗадачуКИсполнению(ЗадачаСогласования, Проверяющий) Тогда
        Оповестить("ЗадачаИзменена", ЗадачаСогласования);
        ПоказатьОповещениеПользователя("Задача "+ЗадачаСогласования+" принята к исполнению!");
    Иначе	
        ПоказатьОповещениеПользователя("Задача "+ЗадачаСогласования+" не была принята к исполнению!");
    КонецЕсли; 
    
    Если Объект.УровеньПроверки = ПредопределенноеЗначение("Перечисление.мУровниПроверки.Исполнитель") Тогда
        // для определения след уровня надо знать подразделение Исполнителя
        ПодразделениеПроверяемого = РаботаСПользователями.ПолучитьПодразделение(Объект.Проверяемый); 
        ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(
        Объект.Владелец, Объект.УровеньПроверки, ПодразделениеПроверяемого);
    Иначе
        // Подразделение из Акта проверки
        ПараметрыЗапроса = мПроверкаДела.ЗаполнитьПараметрыЗапросаУровняПроверки(
        Объект.Владелец, Объект.УровеньПроверки);
    КонецЕсли; 
	
    СледУровеньПроверки = мПроверкаДела.ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса);
     
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПовторитьСогласование", Истина);
	ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
	
	Попытка
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ЗадачаОзнакомления, ПараметрыВыполнения);
	Исключение
		Сообщить(Строка(ЗадачаСогласования) + " не выполнена!");
	КонецПопытки;
	
    //мПроверкаДела.СтартоватьПроцессПроверкиДела(Дело, СледУровеньПроверки, ЗадачаСогласования, Проверяющий);
    
    // Запись состояния дела
    Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.НаправленоНаПроверку");
    мПроверкаДела.ЗаписатьСостояниеДела(Дело, Состояние, ТекущаяДата(), Подразделение, Проверяющий, Объект.УровеньПроверки);  
    
    ПоказатьОповещениеПользователя("Дело "+НомерДела+" направлено на проверку!");
    Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкиКачестваПослеУдаления(Элемент)
	ПосчитатьОценкуАктаПроверки();
КонецПроцедуры
 
  
#КонецОбласти 



 
 
