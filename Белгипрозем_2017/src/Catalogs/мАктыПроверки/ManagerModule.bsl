////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
    // Печать Карточки объекта
    КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.мАктыПроверки";
	КомандаПечати.Идентификатор = "АктПроверки";
	КомандаПечати.Представление = НСтр("ru = 'Акт проверки'");
    КомандаПечати.Картинка = БиблиотекаКартинок.Печать;
    КомандаПечати.СписокФорм    = "ФормаСписка,ФормаЭлемента";
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПроверки");
    Если НужноПечататьМакет Тогда
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
        КоллекцияПечатныхФорм,
        "АктПроверки",
        НСтр("ru = 'Акт проверки'"),
        ПечатьАктПроверки(МассивОбъектов, ОбъектыПечати),
        ,
        "Справочник.мАктыПроверки.АктПроверки");
    КонецЕсли;
    
КонецПроцедуры

Функция ПечатьАктПроверки(МассивОбъектов, ОбъектыПечати) Экспорт
    // Создаем табличный документ и устанавливаем имя параметров печати.
    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_АктПроверки";
    ТабличныйДокумент.АвтоМасштаб = Истина;
    // Получаем запросом необходимые данные.
    Запрос = Новый Запрос();
    Запрос.Текст = "ВЫБРАТЬ
                   |    мАктыПроверки.Ссылка,
                   |    мАктыПроверки.ВерсияДанных,
                   |    мАктыПроверки.ПометкаУдаления,
                   |    мАктыПроверки.Владелец КАК Дело,
                   |    мАктыПроверки.Код,
                   |    мАктыПроверки.Наименование,
                   |    мАктыПроверки.ДатаАктаПроверки,
                   |    мАктыПроверки.НомерАктаПроверки,
                   |    мАктыПроверки.ВидПроверкиКачества,
                   |    мАктыПроверки.Оценка,
                   |    мАктыПроверки.ОценкаИтоговая,
                   |    мАктыПроверки.Проверяемый,
                   |    мАктыПроверки.Состояние,
                   |    мАктыПроверки.ПроверкиКачества.(
                   |        Ссылка,
                   |        НомерСтроки,
                   |        ДатаНачала,
                   |        ДатаОкончания,
                   |        Проверяющий,
                   |        Проверяющий.ПредставлениеВДокументах КАК ПроверяющийКратко,
                   |        ЦиклПроверки,
                   |        Оценка,
                   |        НомерПроверкиКачества
                   |    ),
                   |    мАктыПроверки.Замечания.(
                   |        Ссылка,
                   |        НомерСтроки,
                   |        Замечание,
                   |        Проверяющий,
                   |        Проверяющий.ПредставлениеВДокументах КАК ПроверяющийКратко,
                   |        Содержание,
                   |        Исправлено,
                   |        НомерПроверкиКачества,
                   |        Оценка
                   |    ),
                   |    мАктыПроверки.Владелец.ЭтапДоговора КАК ЭтапДоговора,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.ВидРабот КАК ВидРабот,
                   |    ВЫРАЗИТЬ(мАктыПроверки.Владелец.ЭтапДоговора.Месторасположение КАК СТРОКА(1000)) КАК Месторасположение,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.Подразделение КАК Подразделение,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.Договор КАК Договор,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.Договор.Корреспондент КАК Заказчик,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.Договор.РегистрационныйНомер КАК НомерДоговора,
                   |    мАктыПроверки.Владелец.ЭтапДоговора.Договор.ДатаРегистрации КАК ДатаДоговора,
                   |    мАктыПроверки.Владелец.Наименование КАК НаименованиеДела,
                   |    мАктыПроверки.Владелец.РегистрационныйНомер КАК НомерДела,
                   |    СведенияОПользователях.Должность КАК Должность
                   |ИЗ
                   |    Справочник.мАктыПроверки КАК мАктыПроверки
                   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
                   |        ПО мАктыПроверки.Проверяемый = СведенияОПользователях.Пользователь
                   |ГДЕ
                   |    мАктыПроверки.Ссылка В(&МассивОбъектов)";
    
    Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
    
    Шапка = Запрос.Выполнить().Выбрать();
    
    ОсновнойГород = Константы.ОсновнойГород.Получить();
    
    ПервыйДокумент = Истина;
    Пока Шапка.Следующий() Цикл
        Если Не ПервыйДокумент Тогда
            // Все документы нужно выводить на разных страницах.
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
        // В табличном документе необходимо задать имя области, в которую был 
        // выведен объект. Нужно для возможности печати покомплектно 
        //УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
        //НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		ТабличныйДокумент.ИспользуемоеИмяФайла = "Акт проверки №" + СокрЛП(Шапка.НомерАктаПроверки);
        
        Макет = УправлениеПечатью.ПолучитьМакет("Справочник.мАктыПроверки.АктПроверки");
        
        // Заголовок 
        ОбластьПараметры = Макет.ПолучитьОбласть("Заголовок"); 
        
        ОбластьПараметры.Параметры.ОсновнойГород = ОсновнойГород;

        ЗаполнитьЗначенияСвойств(ОбластьПараметры.Параметры, Шапка);
        
        // Дата сдачи на проверку - Дата начала из первой строки проверки
        Выборка = Шапка.ПроверкиКачества.Выбрать();
        Выборка.Следующий();
        ОбластьПараметры.Параметры.ДатаСдачиНаПроверку = Выборка.ДатаНачала;
        
        ТабличныйДокумент.Вывести(ОбластьПараметры);
        
        // Строки проверок акта
        ОбластьПараметры = Макет.ПолучитьОбласть("Строка");
        
        // Для вывода в подвале
        ДатаСостоянияАкта = Дата(1,1,1);
        ПоследнийПроверяющий = "";
        ПоследнийПроверяющийДолжность = "";
        ПоследнийПроверяющийПодразделение = "";
        
        Выборка = Шапка.ПроверкиКачества.Выбрать();
        Пока Выборка.Следующий() Цикл
            // для вывода в подвале
            ПроверяющийДолжность = РаботаСПользователями.ПолучитьДолжность(Выборка.Проверяющий);
            ДатаСостоянияАкта = Макс(Выборка.ДатаНачала, ДатаСостоянияАкта);
            ПоследнийПроверяющий = Выборка.ПроверяющийКратко;
            ПоследнийПроверяющийДолжность = ПроверяющийДолжность;
            ПоследнийПроверяющийПодразделение = РаботаСПользователями.ПолучитьПодразделение(Выборка.Проверяющий);
            
            ЗаполнитьЗначенияСвойств(ОбластьПараметры.Параметры, Выборка);
            
            // Время проверки
            ГрафикРаботыПроверяющего = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Выборка.Проверяющий);
            Если Выборка.ДатаНачала > Выборка.ДатаОкончания Тогда
                ДатаОкончания = Выборка.ДатаНачала + 3;
            Иначе	
                ДатаОкончания = Выборка.ДатаОкончания;
            КонецЕсли; 
            
            // Если день начала и окончания один и тот же, то надо брать другую функцию
            Если День(Выборка.ДатаНачала) = День(ДатаОкончания) Тогда
                Длительность = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(
                    ГрафикРаботыПроверяющего, Выборка.ДатаНачала, ДатаОкончания);
                Если Длительность > 0 Тогда
                    ВремяПроверки = ""+Окр(Длительность / 3600, 1)+"ч";    
                Иначе
                    ВремяПроверки = "";
                КонецЕсли;     
            Иначе	
                ДанныеВремени = ГрафикиРаботы.ПолучитьДлительностьПериода(
                ГрафикРаботыПроверяющего, Выборка.ДатаНачала, ДатаОкончания);
                ВремяПроверки = "";
                Если ДанныеВремени <> Неопределено И ДанныеВремени.КоличествоПолныхРабочихДней > 0 Тогда
                    ВремяПроверки = ВремяПроверки + ДанныеВремени.КоличествоПолныхРабочихДней + "дн.";
                КонецЕсли; 
                Если ДанныеВремени <> Неопределено И ДанныеВремени.КоличествоПолныхРабочихЧасов > 0 Тогда
                    ВремяПроверки = ВремяПроверки + ", " + ДанныеВремени.КоличествоПолныхРабочихЧасов + "ч";
                КонецЕсли; 
            КонецЕсли; 
            
            ОбластьПараметры.Параметры.ВремяПроверки = ВремяПроверки; 
            
            ОбластьПараметры.Параметры.ПроверяющийДолжность = ПроверяющийДолжность;
            ТабличныйДокумент.Вывести(ОбластьПараметры);
        КонецЦикла; 
        
        // Подвал акта
        ОбластьПараметры = Макет.ПолучитьОбласть("Подвал");
        ОбластьПараметры.Параметры.ОценкаАкта = Шапка.Оценка;
        ОбластьПараметры.Параметры.ОценкаИтоговая = Шапка.ОценкаИтоговая;
        ОбластьПараметры.Параметры.ДатаСостоянияАкта = ДатаСостоянияАкта;
        ОбластьПараметры.Параметры.ПоследнийПроверяющий = ПоследнийПроверяющий;
        ОбластьПараметры.Параметры.ПоследнийПроверяющийДолжность = ПоследнийПроверяющийДолжность;
        ОбластьПараметры.Параметры.ПоследнийПроверяющийПодразделение = ПоследнийПроверяющийПодразделение;
        
        СтруктураРасписки = мПроверкаДела.ПолучитьРаспискуПоДелу(Шапка.Дело);
        
        ЗаполнитьЗначенияСвойств(ОбластьПараметры.Параметры, СтруктураРасписки);
        
        ТаблицаАктов = мРаботаСДоговорами.ПолучитьАктыГотовностиДляЭтапаДоговора(Шапка.ЭтапДоговора);
        
        СтрокаАктов = "";
        РазделительАктов = "";
        Для каждого СтрокаАкта Из ТаблицаАктов Цикл
            Если Не СтрокаАктов = "" Тогда
                РазделительАктов = ", ";
            КонецЕсли; 
            
            СтрокаАктов = СтрокаАктов + РазделительАктов + "№ " + СтрокаАкта.НомерАкта + " от " + Формат(СтрокаАкта.ДатаАкта, "ДЛФ=D");
        
        КонецЦикла; 
        ОбластьПараметры.Параметры.СтрокаАктов = СтрокаАктов;
        
        ТабличныйДокумент.Вывести(ОбластьПараметры);
        
         // Корректурный лист
        ОбластьПараметры = Макет.ПолучитьОбласть("ЗаголовокКоррЛиста");
        //ЗаполнитьЗначенияСвойств(ОбластьПараметры.Параметры, Шапка);
        ТабличныйДокумент.Вывести(ОбластьПараметры);
        // Подвал акта
        ОбластьПараметры = Макет.ПолучитьОбласть("СтрокаКоррЛиста");
        
        Выборка = Шапка.Замечания.Выбрать();
        Пока Выборка.Следующий() Цикл
            ЗаполнитьЗначенияСвойств(ОбластьПараметры.Параметры, Выборка);
            ТабличныйДокумент.Вывести(ОбластьПараметры);
        КонецЦикла; 
        
   КонецЦикла;
   Возврат ТабличныйДокумент;
КонецФункции
