#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	ФизическоеЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ЮридическоеЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ИндивидуальныйПредприниматель = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	ЮрЛицоНеРезидент = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	
	СтароеЮрФизЛицо = Объект.ЮрФизЛицо;
	СтароеНаименование = Объект.Наименование;
	
	Если Параметры.Свойство("Представление") Тогда
		Объект.Наименование = Параметры.Представление;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	// Конец СтандартныеПодсистемы.Свойства
	 
	Если Параметры.Свойство("Адрес") Тогда
		
		ДобавленАдрес = Истина;
		
		// EmailАдресата
		Если ЗначениеЗаполнено(Параметры.Адрес) И Найти(Параметры.Адрес, "@") <> 0 Тогда
			НовСтр = Объект.КонтактнаяИнформация.Добавить();
			НовСтр.ЗначенияПолей = Параметры.Адрес;
			НовСтр.АдресЭП = Параметры.Адрес;
			НовСтр.Представление = Параметры.Адрес;
			НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКорреспондента;
			НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Параметры.Свойство("ЛичныйАдресат") Тогда
		
		ЛичныйАдресат = Параметры.ЛичныйАдресат;
		
		Объект.Наименование = ЛичныйАдресат.Наименование;
		Объект.Ответственный = ЛичныйАдресат.Пользователь;
		Объект.Комментарий = ЛичныйАдресат.Комментарий;
		
		НеиспользованныеПоля = "";
		
		Для Каждого КонтактИнфоАдресата Из ЛичныйАдресат.КонтактнаяИнформация Цикл
			
			ЕстьПолеТакогоВида = Ложь;
			Для Каждого КонтактИнфоКорреспондента Из Объект.КонтактнаяИнформация Цикл
				
				Если Строка(КонтактИнфоКорреспондента.Вид) = Строка(КонтактИнфоАдресата.Вид) Тогда
					ЕстьПолеТакогоВида = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если ЕстьПолеТакогоВида = Ложь Тогда
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.EmailАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.АдресЭП = КонтактИнфоАдресата.АдресЭП;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКорреспондента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					
				КонецЕсли;	
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.НомерТелефона = КонтактИнфоАдресата.НомерТелефона;
					НовСтр.НомерТелефонаБезКодов = КонтактИнфоАдресата.НомерТелефонаБезКодов;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					
				КонецЕсли;	
				
				Если КонтактИнфоАдресата.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАдресата Тогда
					
					НовСтр = Объект.КонтактнаяИнформация.Добавить();
					НовСтр.ЗначенияПолей = КонтактИнфоАдресата.ЗначенияПолей;
					НовСтр.Представление = КонтактИнфоАдресата.Представление;
					НовСтр.Страна = КонтактИнфоАдресата.Страна;
					НовСтр.Регион = КонтактИнфоАдресата.Регион;
					НовСтр.Город = КонтактИнфоАдресата.Город;
					НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента;
					НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					
				КонецЕсли;	
				
			Иначе	
				
				НеиспользованныеПоля = НеиспользованныеПоля + " "
					+ Строка(КонтактИнфоАдресата.Вид) + ": " + КонтактИнфоАдресата.ЗначенияПолей + 
					" " + КонтактИнфоАдресата.Представление;
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Объект.Комментарий = Объект.Комментарий + " " + НеиспользованныеПоля;
		
	КонецЕсли;	
	
	// Обработчик подсистемы "Контактная информация"
	Если Объект.ЮрФизЛицо = ФизическоеЛицо Тогда 
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда 
			Объект.КонтактнаяИнформация.Загрузить(Объект.ФизЛицо.КонтактнаяИнформация.Выгрузить());
		КонецЕсли;
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект.ФизЛицо, 
			"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	Иначе
		УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, 
			"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() И Объект.ЮрФизЛицо = ФизическоеЛицо Тогда 
		Элементы.СоздатьВыбратьФизЛицо.Видимость = Ложь;
		Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
	Иначе	
		Элементы.СоздатьВыбратьФизЛицо.Видимость = Истина;
		СоздатьВыбратьФизЛицо = ?(Объект.ФизЛицо.Пустая(), "СоздатьФизЛицо", "ВыбратьФизЛицо");
		
		Если СоздатьВыбратьФизЛицо = "СоздатьФизЛицо" Тогда 
			Элементы.ФизЛицо1.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ФизЛицо1.АвтоОтметкаНезаполненного = Истина;
			Элементы.ФизЛицо1.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьНаЗакладкеКонтактнойИнформации") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаКонтактнаяИнформация;
	КонецЕсли;	
	
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
//1С-Минск  
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма);
//Конец 1С-Минск
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	 
	Если (ИмяСобытия = "ИзмененоФизическоеЛицо") 
	   И (Параметр = Объект.ФизЛицо) 
	   И (Объект.ЮрФизЛицо = ФизическоеЛицо) Тогда 
	   
		ЗагрузитьКонтактнуюИнформацию();	  	
	КонецЕсли;		
	
	Если ИмяСобытия = "ЗаписатьОсновнойБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка
	Тогда 
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");	
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПолучатьФотографии = Ложь;
		Элементы.Фотография.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПолучатьФотографии Тогда
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Объект.Ссылка, 
			УникальныйИдентификатор, ЕстьКартинка);
	КонецЕсли;	
	
	Если ЕстьКартинка Тогда
		
		Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
		Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
		Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если Объект.ЮрФизЛицо = ФизическоеЛицо Тогда
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.ФизЛицо);
	Иначе
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	ТекстСообщения = "";
	
	Если Объект.ЮрФизЛицо = ЮридическоеЛицо Тогда 
		
		Если ЗначениеЗаполнено(Объект.ИНН) И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиямРБ(Объект.ИНН, Истина, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ);
			
		ИначеЕсли Не ЗначениеЗаполнено(Объект.ИНН) и Не мРазное.ЭтоТестирование() Тогда
			ТекстСообщения = "Надо обязательно заполнить УНП!";	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Объект.КПП) И Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ТекстСообщения) Тогда
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КПП",, Отказ)
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) И Не РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиямРБ(Объект.КодПоОКПО, Истина, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КодПоОКПО",, Отказ)
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ИндивидуальныйПредприниматель Тогда 
		
		Если ЗначениеЗаполнено(Объект.ИНН) И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиямРБ(Объект.ИНН, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ);
			
		ИначеЕсли Не ЗначениеЗаполнено(Объект.ИНН) и Не мРазное.ЭтоТестирование() Тогда
			ТекстСообщения = "Надо обязательно заполнить УНП!";	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) И Не РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиямРБ(Объект.КодПоОКПО, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КодПоОКПО",, Отказ)
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ФизическоеЛицо Тогда 	
		
		Если ЗначениеЗаполнено(Объект.ИНН) И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиямРБ(Объект.ИНН, Ложь, ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ИНН",, Отказ)
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если НЕ Отказ И Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Наименование) Тогда
		Попытка
			НайденныеОбъекты = ПроверитьУникальностьКорреспондента();
		Исключение
			Отказ = Истина;
			Инфо = ИнформацияОбОшибке();
			Если Инфо.Причина <> Неопределено Тогда
				ОписаниеОшибки = Инфо.Причина.Описание;
			Иначе
				ОписаниеОшибки = Инфо.Описание;
			КонецЕсли;

			ВызватьИсключение(ОписаниеОшибки);
		КонецПопытки;	
		Если Не ПараметрыЗаписи.Свойство("СозданиеНовогоДублирующегоКорреспондента") 
			И НайденныеОбъекты.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НайденныеОбъекты", НайденныеОбъекты); 
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжение",
				ЭтотОбъект,
				ПараметрыЗаписи);
			
			ОткрытьФорму(
				"Справочник.Корреспонденты.Форма.СписокДублейКорреспондентов", 
				ПараметрыФормы, 
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ТекущийОбъект.ЮрФизЛицо = ФизическоеЛицо Тогда 
		
		Если ТекущийОбъект.ФизЛицо.Пустая() И СоздатьВыбратьФизЛицо = "СоздатьФизЛицо" Тогда 
			ОбъектФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ОбъектФизЛицо.Наименование = ТекущийОбъект.Наименование;
			ОбъектФизЛицо.КонтактнаяИнформация.Загрузить(ТекущийОбъект.КонтактнаяИнформация.Выгрузить());
			ОбъектФизЛицо.Записать();
			ТекущийОбъект.ФизЛицо = ОбъектФизЛицо.Ссылка;
		Иначе
			ОбъектФизЛицо = ТекущийОбъект.ФизЛицо.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ОбъектФизЛицо.Ссылка);
			ОбъектФизЛицо.КонтактнаяИнформация.Загрузить(ТекущийОбъект.КонтактнаяИнформация.Выгрузить());
			ОбъектФизЛицо.Записать();
		КонецЕсли;
		
		Элементы.СоздатьВыбратьФизЛицо.Видимость = Ложь;
		Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущийОбъект.ЮрФизЛицо = ЮридическоеЛицо Или ТекущийОбъект.ЮрФизЛицо = ЮрЛицоНеРезидент Тогда 
		
		Если Не ТекущийОбъект.ФизЛицо.Пустая() Тогда 
			ОбъектФизЛицо = ТекущийОбъект.ФизЛицо.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ОбъектФизЛицо.Ссылка);
			ОбъектФизЛицо.УстановитьПометкуУдаления(Истина);
			ТекущийОбъект.ФизЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Ссылка.Пустая() 
	   И Объект.ФизЛицо.Пустая()
	   И СоздатьВыбратьФизЛицо = "ВыбратьФизЛицо"
	   И Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
	   
	   ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле  ""Физическое лицо"" не заполнено'"),,"Объект.ФизЛицо",,Отказ);
	   
	КонецЕсли;	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если Объект.ЮрФизЛицо <> СтароеЮрФизЛицо Тогда 
		
		ИзменитьКонтактнуюИнформацию();
		
		УстановитьВидимость();
	
		// Обработчик механизма "Свойства"
		ОбновитьЭлементыДополнительныхРеквизитов();
		
		СтароеЮрФизЛицо = Объект.ЮрФизЛицо;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыбратьФизЛицоПриИзменении(Элемент)
	
	Если СоздатьВыбратьФизЛицо = "СоздатьФизЛицо" Тогда 
		Элементы.ФизЛицо1.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ФизЛицо1.ОтметкаНезаполненного = Ложь;
		Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
		Объект.ФизЛицо = Неопределено;
	Иначе
		Элементы.ФизЛицо1.АвтоОтметкаНезаполненного = Истина;
		Элементы.ФизЛицо1.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПолноеНаименование)
		Или Объект.ЮрФизЛицо = ФизическоеЛицо и (Объект.ПолноеНаименование <> Объект.Наименование) Тогда 
		Объект.ПолноеНаименование = Объект.Наименование;
	КонецЕсли;
	
	//1С-Минск +
	Наим = ВРег(Объект.Наименование);
	Если Найти(Наим, "ФИЛИАЛ") > 0 ИЛИ
		Найти(Наим, "Ф-Л") > 0 ИЛИ
		Найти(Наим, "Ф.") > 0 Тогда
		Объект.мЯвляетсяФилиалом = Истина;
		мЯвляетсяФилиаломПриИзменении();
	КонецЕсли; 
	//1С-Минск - 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора основного счета необходимо записать корреспондента'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
  УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
  
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
  Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
  ОбновитьКонтактнуюИнформацию(Результат);
  
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
  Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтаФорма, Элемент.Имя);
  ОбновитьКонтактнуюИнформацию(Результат);
  
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
  Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтаФорма, Команда.Имя);
  ОбновитьКонтактнуюИнформацию(Результат);
  УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтаФорма, Результат);
  
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
  Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
  
КонецФункции

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	РаботаСФотографиями.ОчиститьИзображение(Объект.Ссылка, УникальныйИдентификатор);
	
	ЕстьКартинка = Ложь;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.ЮрФизЛицо = ФизическоеЛицо Тогда
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакФизЛицо;
		Элементы.Фотография.Видимость = Истина;
		
		Если Объект.ФизЛицо.Пустая() Тогда 
			Элементы.СоздатьВыбратьФизЛицо.Видимость = Истина;
			СоздатьВыбратьФизЛицо = "СоздатьФизЛицо";
			Элементы.ФизЛицо1.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ИндивидуальныйПредприниматель Тогда
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакИП;
		Элементы.Фотография.Видимость = Ложь;
	ИначеЕсли Объект.ЮрФизЛицо = ЮрЛицоНеРезидент Тогда	
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакНерезидент;
		Элементы.Фотография.Видимость = Ложь;
	Иначе
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакЮрЛицо;
		Элементы.Фотография.Видимость = Ложь;
	КонецЕсли;
	
	//1С-Минск +
	мЯвляетсяФилиаломПриИзменении();
	//Если ЗначениеЗаполнено(Объект.мКодФилиала)или(ЗначениеЗаполнено(Объект.мНаименованиеФилиала)) Тогда
	//	Элементы.мГруппаФилиал.Видимость = Истина;
	//	ЭтаФорма["мЯвляетсяФилиалом"] = Истина;
	//Иначе	
	//	Элементы.мГруппаФилиал.Видимость = Ложь;
	//	ЭтаФорма["мЯвляетсяФилиалом"] = Ложь;
	//КонецЕсли; 
	Если Объект.Ссылка.Пустая() Тогда
		Объект.мСтрана = ПредопределенноеЗначение("Справочник.СтраныМира.Беларусь");
	КонецЕсли; 
	//1С-Минск - 
	
КонецПроцедуры	

&НаСервере
Процедура ИзменитьКонтактнуюИнформацию()
	
	// Обработчик подсистемы "Контактная информация"
	Если Объект.ЮрФизЛицо = ФизическоеЛицо Тогда
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, Объект.ФизЛицо);
	Иначе
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, Объект);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьКонтактнуюИнформацию()
	
	Объект.КонтактнаяИнформация.Загрузить(Объект.ФизЛицо.КонтактнаяИнформация.Выгрузить());
	ИзменитьКонтактнуюИнформацию();	
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьУникальностьКорреспондента()
	
	Если мРазное.ЭтоТестирование() Тогда
		// Дубли не проверяем
		НайденныеОбъекты = Новый Массив;
		Возврат НайденныеОбъекты;	
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура("Код,Наименование",Неопределено,"=");
	
	Если ЗначениеЗаполнено(Объект.ПолноеНаименование) Тогда
		СтруктураПоиска.Вставить("ПолноеНаименование", "=");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		СтруктураПоиска.Вставить("ИНН", "=");
	КонецЕсли;
	
	НайденныеОбъекты = РаботаСДублямиЗначений.НайтиДубли(Объект,СтруктураПоиска);
		
	Возврат НайденныеОбъекты;	 
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Не Результат = Истина Тогда 	
		ОповеститьОЗаписиНового(Результат);
		Модифицированность = Ложь;
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;	
	ИначеЕсли Результат = Истина Тогда
		ПараметрыЗаписи.Вставить("СозданиеНовогоДублирующегоКорреспондента", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") 
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда
		ОписаниеПредупреждения = Новый ОписаниеОповещения(
			"ПослеЗаписиПродолжениеПослеПредупреждения",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеПредупреждения,
			НСтр("ru = 'Документы с данным корреспондентом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'"));
		Возврат;	
	КонецЕсли;	

	Оповестить("Запись_Корреспондент", , Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеПредупреждения(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ПараметрыОписания);	
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;	

	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			Параметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФотографиями.ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла, 
		УникальныйИдентификатор, 
		Объект.Ссылка, Объект.Наименование);

	ЕстьКартинка = Истина;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

#КонецОбласти

//1С-Минск+
&НаКлиенте
Процедура мНашБанковскийСчетНачалоВыбора()

	

КонецПроцедуры // мНашБанковскийСчетНачалоВыбора()

&НаКлиенте
Процедура мЯвляетсяФилиаломПриИзменении()
	Если Не Объект.мЯвляетсяФилиалом и ЗначениеЗаполнено(Объект.мКодФилиала) Тогда
		Ответ = Вопрос("Код филиала, наименование и вышестоящая организация будут очищены. 
		|Продолжать?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.мЯвляетсяФилиалом = Истина;
			Возврат;
		КонецЕсли; 
		Объект.мКодФилиала = "";
		Объект.мНаименованиеФилиала = "";
		Объект.мВышестоящаяОрганизация = "";
	КонецЕсли; 
	Элементы.мГруппаФилиал.Видимость = Объект.мЯвляетсяФилиалом;
КонецПроцедуры

&НаКлиенте
Процедура мВышестоящаяОрганизацияНачалоВыбора()
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНалогоплательщика(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Поле ""УНП"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	РеквизитыПроверки = ПроверитьНалогоплательщика(СокрЛП(Объект.ИНН));    
	
	Если РеквизитыПроверки = Неопределено Тогда
	    Сообщить("Не удалось провести проверку!");
		
	ИначеЕсли РеквизитыПроверки.Статус = Ложь Тогда
	    Сообщить("Корреспондент ликвидирован!");    
	Иначе
	    Сообщить("Корреспондент " + РеквизитыПроверки.Статус);
		
		// Заполнение полей
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Наименование = РеквизитыПроверки.КраткоеИмя;
			Объект.ПолноеНаименование = РеквизитыПроверки.ПолноеИмя;
			
			ЗаполнитьЭлементКонтактнойИнформации("ЮридическийАдресКорреспондента", РеквизитыПроверки.Адрес);
	    	Сообщить("Добавлен юр. адрес строкой. Заполните адреса в соответствии с классификатором!");
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, АдресСтрокой = Неопределено)
	
	Если АдресСтрокой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации[ИмяРеквизита]);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = АдресСтрокой;
	ДанныеСтроки.ЗначенияПолей = АдресСтрокой;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = АдресСтрокой;
	//ДанныеСтроки.Представление = СтруктураДанных.Представление;
	//ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	//ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНалогоплательщика(УНП) Экспорт
    
    Хост = "www.portal.nalog.gov.by";
    
    //УНП = УНПКорреспондента(Корреспондент);
    Ресурс = "grp/getData?unp=" + УНП; 
    
    Соединение = Новый HTTPСоединение(Хост);
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("host", Хост); 
    
    Запрос = Новый HTTPЗапрос(Ресурс, Заголовки); 
    
    Ответ = Неопределено;
    Попытка
        Ответ = Соединение.Получить(Запрос);        
    Исключение
        Возврат Неопределено;    
    КонецПопытки;    
    
    СведенияXML = Неопределено;
    Попытка
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
        СведенияXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
    Исключение
        Возврат Неопределено;
    КонецПопытки;
	
	Рекв = Неопределено;
	Попытка
		Если ТипЗнч(СведенияXML) = Тип("ОбъектXDTO") Тогда
			Если СведенияXML.Свойства().Получить("ROW") = Неопределено Тогда
				Возврат Неопределено;    
			Иначе
				Если ТипЗнч(СведенияXML.ROW) = Тип("ОбъектXDTO") Тогда
					Статус = СведенияXML.ROW.VKODS;
					КраткоеИмя = СведенияXML.ROW.VNAIMK;
					ПолноеИмя = СведенияXML.ROW.VNAIMP;
					Адрес = СведенияXML.ROW.VPADRES;
				Иначе                     
					Статус = СведенияXML.ROW[0].VKODS;
					КраткоеИмя = СведенияXML.ROW[0].VNAIMK;
					ПолноеИмя = СведенияXML.ROW[0].VNAIMP;
					Адрес = СведенияXML.ROW[0].VPADRES;
				КонецЕсли;
				Рекв = Новый Структура("Статус, КраткоеИмя, ПолноеИмя, Адрес"); 
				Рекв.Вставить("Статус", Статус); 
				Рекв.Вставить("КраткоеИмя", КраткоеИмя); 
				Рекв.Вставить("ПолноеИмя", ПолноеИмя); 
				Рекв.Вставить("Адрес", Адрес); 
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		//Сообщить("Ошибка: " + Строка(Корреспондент) + " " + УНП);
		Возврат Неопределено;         
	КонецПопытки;
    
	//Если СокрЛП(Статус) = "Ликвидирован" Тогда
	//    Сообщить(Строка(Корреспондент) + " " + Статус);
	//    Возврат Ложь;
	//Иначе
	//    Возврат Статус;
	//КонецЕсли;
	Возврат Рекв;    
КонецФункции

&НаСервереБезКонтекста
Функция УНПКорреспондента(Корреспондент)
	Возврат СокрЛП(Корреспондент.ИНН);
КонецФункции
//1С-Минск-
 