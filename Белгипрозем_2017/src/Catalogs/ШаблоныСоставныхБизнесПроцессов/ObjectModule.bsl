
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если БизнесСобытияВызовСервера.ЕстьЗаписиАвтоСтартаБизнесПроцессовДляШаблонаБизнесПроцессов(Ссылка) Тогда
		
		МассивПолей = ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если МассивПолей.Количество() <> 0 Тогда
			
			СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
			
			Текст = 
				НСтр("ru = 'Этот шаблон используется для автоматического запуска процессов. Есть ошибки заполнения шаблона: '")
				+ СтрокаПолей;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"Объект.Ссылка",, 
				Отказ);
			
		КонецЕсли;		
		
	КонецЕсли;			
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	СтруктураРеквизитов = Новый Структура;
	Для Каждого Строка Из Шаблоны Цикл
		СтруктураРеквизитов.Вставить(Строка.Реквизит, Строка.Шаблон);
	КонецЦикла;	
	
	Попытка
		Ошибки = БизнесПроцессы[ТипШаблона].ПроверитьШаблон(СтруктураРеквизитов);
	Исключение
		МассивПолей.Добавить(НСтр("ru='Неверный тип процесса'"));
		Возврат МассивПолей;	
	КонецПопытки;	
	
	ЕстьОшибки = Ложь;
	Для Каждого Ошибка Из Ошибки Цикл
		МассивПолей.Добавить(Ошибка.Представление);
		ЕстьОшибки = Истина;
	КонецЦикла;	
	
	Если ЕстьОшибки Тогда
		Возврат МассивПолей;
	КонецЕсли;	
	
	Для Каждого Шаблон Из Шаблоны Цикл
		
		Если ЗначениеЗаполнено(Шаблон.Шаблон) Тогда
			
			ШаблонОбъект = Шаблон.Шаблон.ПолучитьОбъект();
			
			МассивШаблона = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если Не МассивШаблона.Количество() <> 0 Тогда
				Для Каждого ИмяПоля Из МассивШаблона Цикл
					МассивПолей.Добавить(ИмяПоля);
				КонецЦикла;
				Возврат МассивПолей;	
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат МассивПолей;
	
КонецФункции	

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если Шаблоны.Количество() > 0 Тогда
		Результат = Результат + НСтр("ru = 'Этапы:'") + Символы.ПС;
		Для Каждого Шаблон Из Шаблоны Цикл
			Если ЗначениеЗаполнено(Шаблон.Шаблон) Тогда
				Результат = 
					Результат 
					+ Символы.Таб 
					+ Метаданные.БизнесПроцессы[ТипШаблона].Реквизиты[Шаблон.Реквизит].Синоним + ": " 
					+ Строка(Шаблон.Шаблон) 
					+ Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
					
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка комплексных процессов

Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения() Экспорт
	
	Результат = "";
	
	Длительность = ПолучитьДлительностьПроцесса();
	ДлительностьДней = Цел(Длительность / 24);
	ДлительностьЧасов = Длительность - ДлительностьДней * 24;
	
	ОбщийСрокИсполнения = 
		ДлительностьДней * 86400
		+ ДлительностьЧасов * 3600;
		
	ОбщийСрокИсполненияДни = Цел(ОбщийСрокИсполнения / 86400);
	ОбщийСрокИсполненияЧасы = 
		(ОбщийСрокИсполнения - ОбщийСрокИсполненияДни * 86400) / 3600;
	
	РезультатИсполнение = "";
	БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		РезультатИсполнение,
		ОбщийСрокИсполненияДни,
		ОбщийСрокИсполненияЧасы);

	Возврат РезультатИсполнение;
			
КонецФункции

Функция ПолучитьСтроковоеПредставлениеИсполнителей() Экспорт
	
	Результат = НСтр("ru = 'Определяются настройками действия'");		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДлительностьПроцесса() Экспорт
	
	Результат = 0;
	Для Каждого Действие Из Шаблоны Цикл
		Если ЗначениеЗаполнено(Действие.Шаблон) Тогда
			ШаблонОбъект = Действие.Шаблон.ПолучитьОбъект();
			Результат = Результат + ШаблонОбъект.ПолучитьДлительностьПроцесса();
		КонецЕсли;
	КонецЦикла;
	
	Результат = Результат + СрокОтложенногоСтарта / 3600;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ШаблоныСоставныхБизнесПроцессов.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;			
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры
