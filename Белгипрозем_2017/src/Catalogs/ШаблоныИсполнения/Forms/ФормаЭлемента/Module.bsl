
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
    // Инициализация формы механизмом комплексных процессов 
	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Исполнение (Создание)'");
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда 
			Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	Иначе
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Исполнение ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтаФорма, 
		ЗаголовокФормы);
		
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Элементы.Исполнители.АвтоОтметкаНезаполненного = Истина;
		Элементы.Важность.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;	
		
	// Инициализация сроков выполнения в зависимости от использования времени в сроках задач
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияЧас.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.Часов.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.ИсполнителиСрокИсполненияЧас.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.ОтложенныйСтартЧасы.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.ДекорацияОтложенныйСтартЧасы.Видимость = ИспользоватьВремяВСрокахЗадач;
	
	// Заполнение сроков отложенного старта
	ОтложенныйСтартДни = Цел(Объект.СрокОтложенногоСтарта/86400);
	ОтложенныйСтартЧасы = (Объект.СрокОтложенногоСтарта - ОтложенныйСтартДни * 86400)/3600;
	
	// Установка данных формы по умолчанию, если что-то не заполнено
	ПредыдущийВариантИсполнения = Объект.ВариантИсполнения;
	Если НЕ ЗначениеЗаполнено(Объект.ВариантИсполнения) Тогда
		Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		Для Каждого Исполнитель Из Объект.Исполнители Цикл
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантИсполнения) Тогда
		Объект.ВариантИсполнения = ВариантИсполненияПараллельно;
		Для Каждого Исполнитель Из Объект.Исполнители Цикл
			Исполнитель.ПорядокИсполнения = ПорядокИсполненияВместеСПредыдущим;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Контролер = Неопределено Тогда 
			Объект.Контролер = ПользователиПустаяСсылка;
		КонецЕсли;	
		Если Объект.Проверяющий = Неопределено Тогда 
			Объект.Проверяющий = ПользователиПустаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПустойБизнесПроцесс, "ГруппаДополнительныеРеквизиты");
		
	// Завершение инициализации формы
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = Объект.ИспользоватьУсловия;
	Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость = Объект.ИспользоватьУсловия;	
	ОбновитьФлагУстановкиОтветственного();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
		ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
		Элементы.ТрудозатратыПланПроверяющего.Заголовок = ЕдиницаТрудозатратСтр;
		Элементы.ТрудозатратыПланКонтролера.Заголовок = ЕдиницаТрудозатратСтр;
	КонецЕсли;
	
	Мультипредметность.ШаблонПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Заполняем строковое представление участников
	ПроверяющийСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Проверяющий,
		Объект.ОсновнойОбъектАдресацииПроверяющего,
		Объект.ДополнительныйОбъектАдресацииПроверяющего);
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
		
	// Заполняем параметры участников. Параметры используются в обработчиках соответствующих полей.
	ПараметрыПроверяющего =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Проверяющий",
			"ПроверяющийСтрокой",
			"ОсновнойОбъектАдресацииПроверяющего",
			"ДополнительныйОбъектАдресацииПроверяющего");
	ПараметрыКонтролера =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Контролер",
			"КонтролерСтрокой",
			"ОсновнойОбъектАдресацииКонтролера",
			"ДополнительныйОбъектАдресацииКонтролера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");

	// Заполнение сроков отложенного старта
	Объект.СрокОтложенногоСтарта = (ОтложенныйСтартЧасы * 3600) + (ОтложенныйСтартДни * 86400);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	Мультипредметность.ПроверитьТипыИНазначенныеИменаПредметовШаблона(Объект, Отказ);
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Исполнение ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
		
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеУсловийФормы(Объект);
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтаФорма);
	КонецЕсли;
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеУсловийФормы(Объект);
			
	// СтандартныеПодсистемы.Свойства
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Объект.Ссылка, ПустойБизнесПроцесс);
	ПустойБизнесПроцессОбъект =
		РеквизитФормыВЗначение("ПустойБизнесПроцесс", Тип("БизнесПроцессОбъект.Исполнение"));
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ПустойБизнесПроцессОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ПриИзмененииВариантаИсполнения(
		Объект.ВариантИсполнения,
		ПредыдущийВариантИсполнения,
		Элементы.ИсполнителиСрокИсполнения,
		Объект.Исполнители);
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля Проверяющий

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(Элемент,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Проверяющий,, Истина, Истина, ИменаПредметовДляФункций,
		Объект.ОсновнойОбъектАдресацииПроверяющего, Объект.ДополнительныйОбъектАдресацииПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(Элемент,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Контролер,,,Истина, ИменаПредметовДляФункций,
		Объект.ОсновнойОбъектАдресацииКонтролера, Объект.ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(
		ЭтаФорма,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура ИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	МультипредметностьКлиент.УстановкаУсловияМаршрутизации(ИменаПредметов, Элемент, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(Объект.Исполнители, Элементы.Исполнители, Объект.ВариантИсполнения);
		ТекущиеДанные.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
			ТекущиеДанные.ИмяПредметаУсловия, ТекущиеДанные.Условие);
		УстановитьДоступность();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(
		Элемент, 
		Элементы.Исполнители.ТекущиеДанные.Исполнитель,
		,,Истина, ИменаПредметовДляФункций,
		Элементы.Исполнители.ТекущиеДанные.ОсновнойОбъектАдресации,
		Элементы.Исполнители.ТекущиеДанные.ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПорядокИсполненияПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст, Истина, ИменаПредметовДляФункций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст, Истина, ИменаПредметовДляФункций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриИзменении(Элемент)
	
	МультипредметностьКлиент.ТочкиМаршрутаПриИзменении(ЭтаФорма, Объект, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьВверх(Элементы.Исполнители, Объект.Исполнители, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьВниз(Элементы.Исполнители, Объект.Исполнители, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	ИменаПредметовДляФункций = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	РаботаСПользователямиКлиент.ПодборИсполнителей(
		АдресВременногоХранилища, 
		ЭтаФорма,,, 
		ИспользоватьАвтоподстановки, 
		ИменаПредметовДляФункций);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		Элементы.Исполнители,
		Элементы.НазначитьОтветственным,
		Объект.Исполнители,
		Модифицированность);
		
	ЗаполнитьШаг(Объект.Исполнители);
	ОбновитьФлагУстановкиОтветственного();
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУсловия(Команда)
	
	Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость = 
		НЕ Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость;
	 
	Элементы.ИсполнителиИспользоватьУсловия.Пометка = 
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиОписаниеУсловия.Видимость;
		
	Объект.ИспользоватьУсловия = Элементы.ИсполнителиИспользоватьУсловия.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьРоль(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ИзменитьРольПредмета(ЭтаФорма, Объект, ВыбраннаяСтрока, Ложь);
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
		Элементы.ВариантИсполнения.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
		Элементы.ВариантИсполнения.Доступность = Ложь;
	КонецЕсли;	
	
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
		Элементы.ИсполнителиСрокИсполнения.Заголовок = НСтр("ru = 'Срок (дней)'");
		Элементы.ИсполнителиСрокИсполненияЧас.Заголовок = НСтр("ru = 'Срок (часов)'");
	ИначеЕсли Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполнения.Заголовок = НСтр("ru = 'Срок (дней)'");
		Элементы.ИсполнителиСрокИсполненияЧас.Заголовок = НСтр("ru = 'Срок (часов)'");
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполнения.Заголовок = НСтр("ru = 'Срок особый (дней)'");
		Элементы.ИсполнителиСрокИсполненияЧас.Заголовок = НСтр("ru = 'Срок особый (часов)'");
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	РаботаСБизнесПроцессами.ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, Объект.Исполнители);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагУстановкиОтветственного()
	
	ОтветственныйУстановлен = Ложь;
	Если Объект.Исполнители.Количество() > 0
		И Объект.Исполнители[0].Ответственный Тогда
		ОтветственныйУстановлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаг(Таблица)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Таблица);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если ТекущиеДанные.НомерСтроки > 2 ИЛИ ТекущиеДанные.НомерСтроки = 2 И НЕ ОтветственныйУстановлен Тогда
		Элементы.ПереместитьВверх.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 И НЕ ОтветственныйУстановлен 
		ИЛИ ТекущиеДанные.НомерСтроки > 1 И ТекущиеДанные.НомерСтроки < Объект.Исполнители.Количество() Тогда
		Элементы.ПереместитьВниз.Доступность = Истина;
	КонецЕсли;
	
	Если Элементы.Исполнители.ТекущиеДанные.НомерСтроки > 1 Тогда
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		Элементы.ТочкиМаршрута.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
		Элементы.ИсполнителиИспользоватьУсловия.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
