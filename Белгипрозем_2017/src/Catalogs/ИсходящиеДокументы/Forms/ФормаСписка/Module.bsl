////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ВидПросмотраПоВидамДокументов = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов;
	ВидПросмотраПоВопросамДеятельности = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности;
	ВидПросмотраПоКорреспондентам = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам;
	ВидПросмотраПоНоменклатуреДел = Перечисления.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел;
	ВидПросмотраПоДеламТомам = Перечисления.ВидыПросмотраСпискаОбъектов.ПоДеламТомам;
	ВидПросмотраПоКатегориям = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям;
	ВидПросмотраПоПроектам = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПроектам;
	ВидПросмотраСписком = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;

	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыборавидаДокумента("ИсходящийДокумент");
	Элементы.ОтборВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоПолучателю", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Получатель", Неопределено);
	Список.Параметры.УстановитьЗначениеПараметра("ВестиУчетСканКопийОригиналовДокументов", 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов"));
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Элементы.СостояниеСВД.Видимость = РаботаССВД.ДоступнаРаботаСЭДО();
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если Не ИспользоватьКатегорииДанных Тогда
		Элементы.ЕстьКатегории.Видимость = Ложь;
	КонецЕсли;
	
	Если Не РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование() Тогда
		Элементы.ПодписанЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьФайлыУИсходящихДокументов") Тогда
		Элементы.Файлы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ИсходящиеДокументы) Тогда
		Элементы.СоздатьДокумент.Видимость = Ложь;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	// Устанавливаем вид просмотра 
	ЗаполнитьСписокВыбораВидаПросмотра();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Проекты.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ТолькоМоиПроекты = Ложь;
	ПереключитьОтборПоПроектам();
	
	ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	ПредыдущийВидПросмотра = ВидПросмотра;
	ПереключитьВидПросмотра();
	
	// Кешируем количество доступных шаблонов внутренних документов
	КоличествоДоступныхШаблоновДокументов = ОбновитьКоличествоДоступныхШаблоновВыполнить();
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтаФорма, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаСтандартныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
//1С-Минск +
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма);
//1С-Минск -
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка(Список, Настройки);
	
	ТолькоМоиПроекты = Настройки["ТолькоМоиПроекты"];
	ПереключитьОтборПоПроектам();
	
	// Устанавливаем вид просмотра 
	ВидПросмотра = Настройки["ВидПросмотра"];
	
	// На случай снятия ФО устанавливаем просмотр по папкам
	Если ВидПросмотра = ВидПросмотраПоВидамДокументов И Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
		ВидПросмотра = ВидПросмотраСписком;
	ИначеЕсли ВидПросмотра = ВидПросмотраПоВопросамДеятельности И Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ВидПросмотра = ВидПросмотраСписком;	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоКорреспондентам И Не ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКорреспондентам") Тогда
		ВидПросмотра = ВидПросмотраСписком;	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоНоменклатуреДел И Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда
		ВидПросмотра = ВидПросмотраСписком;	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоКатегориям И Не ИспользоватьКатегорииДанных Тогда
		ВидПросмотра = ВидПросмотраСписком;
	ИначеЕсли ВидПросмотра = ВидПросмотраПоПроектам И Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ВидПросмотра = ВидПросмотраСписком;	
	КонецЕсли;
	
	ПредыдущийВидПросмотра = ВидПросмотра;

	ТекущийВидДокумента = Настройки["ТекущийВидДокумента"];
	ТекущийВопросДеятельности = Настройки["ТекущийВопросДеятельности"];
	ТекущийКорреспондент = Настройки["ТекущийКорреспондент"];
	ТекущийПроект = Настройки["ТекущийПроект"];
	
	ГодНоменклатурыДел = Настройки["ГодНоменклатурыДел"];
	ОрганизацияНоменклатурыДел = Настройки["ОрганизацияНоменклатурыДел"];
	
	ПереключитьВидПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюПодписать.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных И ВидПросмотра = ВидПросмотраПоКатегориям Тогда
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(
			Элементы.ДеревоКатегорий, 
			ДеревоКатегорий, 
			ВыбранныеКатегорииПриОткрытии, 
			ВыбранныеКатегории);
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		ПрименитьФильтрКатегорий();
	КонецЕсли;
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхШаблонов", 1200, Ложь);
	
	Если ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда 
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущаяНоменклатураДел <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел, НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда 
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущееДелоТом <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
//1С-Минск+
	М_УправлениеФормамиДОРБКлиент.ПриОткрытииФормыСписка(ЭтаФорма, Отказ);
	
	Если мРазное.ПолучитьИспользоватьОтборПоПодразделениям() Тогда
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПараметрыОтбора = Новый Соответствие();
			ПараметрыОтбора.Вставить("Подразделение", Подразделение);
			
			УстановитьОтборСписка(Список, ПараметрыОтбора);
		Иначе
			Если Не ДокументооборотПраваДоступа.ЕстьРоль("мИзменениеПодразделения") Тогда
				// установить отбор по подразделению
				ПараметрыОтбора = Новый Соответствие();
				ПараметрыОтбора.Вставить("Подразделение", РаботаСПользователями.ПолучитьПодразделение(ПользователиКлиентСервер.ТекущийПользователь()));
				
				УстановитьОтборСписка(Список, ПараметрыОтбора);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
//1С-Минск-
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИспользоватьКатегорииДанных 
		И ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		СписокРаскрытыхКатегорий.Очистить();
		РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
		СостояниеДереваИзменилось = Ложь;
		Если КатегорииПриОткрытии.Количество() <> СписокРаскрытыхКатегорий.Количество() 
			ИЛИ ВыбранныеКатегории.Количество() <> ВыбранныеКатегорииПриОткрытии.Количество() Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;
		
		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из КатегорииПриОткрытии Цикл
				СостояниеДереваИзменилось = 
					СписокРаскрытыхКатегорий.НайтиПоЗначению(Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из ВыбранныеКатегории Цикл
				СостояниеДереваИзменилось = 
					ВыбранныеКатегорииПриОткрытии.НайтиПоЗначению(Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущаяКатегория <> ТекущаяКатегорияПриОткрытии Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;
		
		Если СостояниеДереваИзменилось Тогда
			ЗаписатьПараметрыДереваКатегорий(
				СписокРаскрытыхКатегорий,
				ТекущаяКатегория,
				ВыбранныеКатегории,
				ОтборДанных,
				СУчетомПодкатегорий,
				ПоказыватьСписокОтмеченных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПараметрыДереваКатегорий(
			СписокРаскрытыхКатегорий,
			ТекущаяКатегория,
			ВыбранныеКатегории,
			ОтборДанных,
			СУчетомПодкатегорий,
			ПоказыватьСписокОтмеченных)
	
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "ОткрытыеКатегории", СписокРаскрытыхКатегорий);	
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "ТекущаяКатегория", ТекущаяКатегория);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "ВыбранныеКатегории", ВыбранныеКатегории);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "ОтборДанных", ОтборДанных);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "СУчетомПодкатегорий", СУчетомПодкатегорий);
	ХранилищеНастроекДанныхФорм.Сохранить("СписокИсходящихДокументов", "ПоказыватьСписокОтмеченных", ПоказыватьСписокОтмеченных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактироваласьКатегория"
		И (Источник.ВладелецФормы = Неопределено
		ИЛИ Источник.ВладелецФормы.Имя <> "ДеревоКатегорий") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	ИспользоватьФайлыУИсходящихДокументов = ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ИспользоватьФайлыУИсходящихДокументов;	
	Если Не ИспользоватьФайлыУИсходящихДокументов Тогда
		Возврат;
	КонецЕсли;	
	
	СписокКатегорий = Новый СписокЗначений;
	Если ВидПросмотра = ВидПросмотраПоКатегориям Тогда
		Если ВыбранныеКатегории.Количество() = 0 Тогда
			СписокКатегорий.Добавить(ТекущаяКатегория);
		Иначе
			Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
				СписокКатегорий.Добавить(ВыбраннаяКатегория.Значение);
			КонецЦикла
		КонецЕсли;	
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("СписокКатегорий", СписокКатегорий);
		
		ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра();
		Если ЗначенияЗаполнения <> Неопределено Тогда 
			ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элемент);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			МассивФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
			ПараметрыОткрытияФормы.Вставить("СписокКатегорий", СписокКатегорий);
			
			ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра();
			Если ЗначенияЗаполнения <> Неопределено Тогда 
				ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы, Элемент);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоВидамДокументов
		И Элементы.СтраницаВидыДокументов.Видимость 
		И ТекущийВидДокумента <> Элементы.ВидыДокументов.ТекущаяСтрока Тогда 
		
		Если Не ЗначениеЗаполнено(Элементы.ВидыДокументов.ТекущаяСтрока) Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		ТекущийВидДокумента = Элементы.ВидыДокументов.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоВопросамДеятельности
		И Элементы.СтраницаВопросыДеятельности.Видимость 
		И ТекущийВопросДеятельности <> Элементы.ВопросыДеятельности.ТекущаяСтрока Тогда 
		
		Если Не ЗначениеЗаполнено(Элементы.ВопросыДеятельности.ТекущаяСтрока) Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		ТекущийВопросДеятельности = Элементы.ВопросыДеятельности.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорреспондентыПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоКорреспондентам
		И Элементы.СтраницаКорреспонденты.Видимость
		И ТекущийКорреспондент <> Элементы.Корреспонденты.ТекущаяСтрока Тогда 
		
		Если Не ЗначениеЗаполнено(Элементы.Корреспонденты.ТекущаяСтрока) Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		ТекущийКорреспондент = Элементы.Корреспонденты.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоНоменклатуреДел
		И Элементы.СтраницаНоменклатураДел.Видимость Тогда 
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка Тогда 
				Возврат;
			КонецЕсли;
			
			ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоДеламТомам
		И Элементы.СтраницаДелаТома.Видимость Тогда 
		
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущееДелоТом = ТекущиеДанные.Ссылка Тогда 
				Возврат;
			КонецЕсли;
			
			ТекущееДелоТом = ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоПроектам
		И Элементы.СтраницаПроекты.Видимость 
		И ТекущийПроект <> Элементы.Проекты.ТекущаяСтрока Тогда 
		
		Если Не ЗначениеЗаполнено(Элементы.Проекты.ТекущаяСтрока) Тогда
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		Иначе	
			Элементы.СоздатьДокумент.Доступность = Истина;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
		КонецЕсли;	
		
		ТекущийПроект = Элементы.Проекты.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(Строка) <> Тип("Число") Тогда 
		Возврат;
	КонецЕсли;	
		
	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ЭлементДерева.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(Строка) <> Тип("Число") Тогда 
		Возврат;
	КонецЕсли;	
		
	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если ЭлементДерева.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "ВидДокумента", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВидДокумента", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "ВопросДеятельности", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВопросДеятельности", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, "Проект", Строка);
	
	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Проект", Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПолучательПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Получатель", Получатель);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ВидДокумента", ВидДокумента);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Организация", Организация);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("Проект", Проект);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	Параметрыотбора.Вставить("Состояние", Состояние);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНоменклатурыДелПриИзменении(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда  
		
		ЗаполнитьДеревоНоменклатурыДел();
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда  
		
		ЗаполнитьДеревоДелТомов();
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодНоменклатурыДелПриИзменении(Элемент)
	
	Если ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда  
		
		ЗаполнитьДеревоНоменклатурыДел();
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда  
		
		ЗаполнитьДеревоДелТомов();
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраПриИзменении(Элемент)
	
	Если ВидПросмотра = ПредыдущийВидПросмотра Тогда 
		Возврат;
	КонецЕсли;	
		
	ПереключитьВидПросмотра();
	
	ПредыдущийВидПросмотра = ВидПросмотра;	
	Если ВидПросмотра = ВидПросмотраПоКатегориям Тогда
		
		Если ИспользоватьКатегорииДанных Тогда 
			РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии, ВыбранныеКатегории);
			РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		КонецЕсли;	
			
	ИначеЕсли ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда 
		
		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущаяНоменклатураДел <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел, НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда 
		
		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Если ТекущееДелоТом <> Неопределено Тогда 
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома, Идентификатор);
			Если Идентификатор <> Неопределено Тогда 
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ВидПросмотра <> ВидПросмотраПоКатегориям Тогда 	
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПроектыПриИзменении(Элемент)
	
	ПереключитьОтборПоПроектам();
	
КонецПроцедуры

// дерево категорий

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	КонецЕсли;
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий = 1
		И ВыбранныеКатегории[0].Пометка = Ложь
		И ВыбранныеКатегории[0].Значение <> Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		ВыбранныеКатегории[0].Значение = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
		ВыбранныеКатегории[0].Представление = 
			РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбранныеКатегории[0].Значение);
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбранаПриИзменении(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана
		И Не ПроверитьПредельноеКоличествоОтмеченныхКатегорий() Тогда
		Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеКатегории.Количество() = 1
		И ВыбранныеКатегории[0].Значение = ТекущаяКатегория Тогда
		
		ВыбранныеКатегории[0].Пометка = Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана;
		Возврат;
		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ЗначениеЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ЗначениеКопирования");
	Если НЕ Копирование Тогда
		ЗначениеЗаполнения.Вставить("Родитель", Элемент.ТекущиеДанные.Ссылка);				
	Иначе
		ПараметрыФормы.ЗначениеКопирования = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.ЗначенияЗаполнения = ЗначениеЗаполнения;
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьДеревоКатегорий(Неопределено);
	ПрименитьФильтрКатегорий();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПеретаскиваниеПродолжение",
		ЭтотОбъект);

	РаботаСКатегориямиДанныхКлиент.ФормаСпискаОбъектовДеревоКатегорийПеретаскивание(
		ЭтаФорма, 
		ПараметрыПеретаскивания,
		Строка,
		СтандартнаяОбработка,
		ОписаниеОповещения)
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскиваниеПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);
	ПереключитьВидПросмотра();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПередУдалениемПродолжение",
		ЭтотОбъект);

	Отказ = Истина;
	РаботаСКатегориямиДанныхКлиент.ПометитьКатегориюНаУдаление(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка,
		Элементы.ДеревоКатегорий.ТекущиеДанные.ПометкаУдаления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);

КонецПроцедуры


&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка); 
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьДокументВыполнить()
	
	СоздатьНовыйДокумент(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран документ.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			, НСтр("ru = 'Подписать'"));
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗавершение",
		ЭтотОбъект);
		
	РаботаСЭПКлиент.СформироватьПодписьОбъекта(
		Элементы.Список.ТекущаяСтрока,
		УникальныйИдентификатор,
		МассивДанныхДляЗанесенияВРегистр,
		МассивАдресов,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	МассивАдресов = Результат.МассивАдресов;
	
	ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	РаботаСЭПКлиент.ИнформироватьОПодписании(МассивДанныхДляЗанесенияВРегистр, 
		Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов)
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКомплект(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСКомплектамиДокументовКлиент.ДобавитьВКомплект(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	Если Элементы.ДеревоКатегорий.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И ЗначениеЗаполнено(ТекущаяКатегория) Тогда		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяКатегория);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элементы.ДеревоКатегорий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СнятьВсеОтметкиСервер();
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомВсехОтмеченных(Команда)
	
	ОтборДанных = "ПоВсем";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомОднойИзОтмеченных(Команда)
	
	ОтборДанных = "ПоОднойИз";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомИерархии(Команда)
	
	СУчетомПодкатегорий = НЕ СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
	
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмеченныеКатегории(Команда)
	
	ПоказыватьСписокОтмеченных = НЕ ПоказыватьСписокОтмеченных;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКатегорий(Команда)
	
	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	ТекущаяКатегорияДляОткрытия = ТекущаяКатегория;
	ПостроитьДеревоКатегорий();
	
	ИдКатегории = Неопределено;
	РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоСсылке(ДеревоКатегорий.ПолучитьЭлементы(), ТекущаяКатегория, ИдКатегории);
	РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории);
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
	
	РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, СписокРаскрытыхКатегорий);
	РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегории);
	ТекущаяКатегория = ТекущаяКатегорияДляОткрытия;
	РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);	
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхШаблонов()
	
	КоличествоДоступныхШаблоновДокументов = ОбновитьКоличествоДоступныхШаблоновВыполнить();
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОбновитьКоличествоДоступныхШаблоновВыполнить()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ШаблоныДокументов.Ссылка
					|ИЗ
					|	Справочник.ШаблоныИсходящихДокументов КАК ШаблоныДокументов";
	Возврат Запрос.Выполнить().Выбрать().Количество();	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораВидаПросмотра()
	
	Элементы.ВидПросмотра.РежимВыбораИзСписка = Истина;
	Элементы.ВидПросмотра.СписокВыбора.Очистить();
	Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.Списком, НСтр("ru = 'Списком'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда 
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов, НСтр("ru = 'По видам документов'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности, НСтр("ru = 'По вопросам деятельности'"));
	КонецЕсли;
	
	Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам, НСтр("ru = 'По корреспондентам'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда 
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел, НСтр("ru = 'По номенклатуре дел'"));
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоДеламТомам, НСтр("ru = 'По делам (томам)'"));
		
		ОрганизацияНоменклатурыДел = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		ГодНоменклатурыДел = Год(ТекущаяДата());
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных Тогда
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям, НСтр("ru = 'По категориям'"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Элементы.ВидПросмотра.СписокВыбора.Добавить(Перечисления.ВидыПросмотраСпискаОбъектов.ПоПроектам, НСтр("ru = 'По проектам'"));
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, ИмяРеквизита, ЗначениеРеквизита, СтароеЗначение = Неопределено)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Если ИзменитьРеквизитДокументов(ПараметрыПеретаскивания.Значение, ИмяРеквизита, ЗначениеРеквизита, СтароеЗначение) = Истина Тогда
			Элементы.Список.Обновить();
			
			Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исходящий документ ""%1"" перенесен в ""%2""'"), ПараметрыПеретаскивания.Значение[0], ЗначениеРеквизита);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Исходящий документ перенесен.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исходящие документы (%1 шт.) перенесены в ""%2""'"), ПараметрыПеретаскивания.Значение.Количество(), ЗначениеРеквизита);
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Исходящие документы перенесены.'"),
					,
					ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, ИмяРеквизита, ЗначениеРеквизита)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") 
	   И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
		
		МассивФайлов = Новый Массив;
		Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
			МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
		КонецЦикла;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста 
Функция ИзменитьРеквизитДокументов(МассивДокументов, ИмяРеквизита, ЗначениеРеквизита, СтароеЗначение = Неопределено)
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "Корреспондент" Тогда 
		
		Если Не ЗначениеЗаполнено(СтароеЗначение) Тогда 
			Возврат Ложь;
		КонецЕсли;	
		
		// ничего менять не надо
		Если ЗначениеРеквизита = СтароеЗначение Тогда 
			Возврат Ложь;
		КонецЕсли;	
		
	Иначе	
		
		// ничего менять не надо
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(МассивДокументов[0], ИмяРеквизита) = ЗначениеРеквизита Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	НедоступныеДокументы = Новый Массив;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ДокументСсылка).Изменение Тогда 
			НедоступныеДокументы.Добавить(ДокументСсылка);
		КонецЕсли;
	КонецЦикла;	
	
	Если НедоступныеДокументы.Количество() > 0 Тогда 
		Если НедоступныеДокументы.Количество() = 1 Тогда 
			ДокументСсылка = НедоступныеДокументы[0];
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение документа ""%1"".'"),
				Строка(ДокументСсылка));
		Иначе
			ТекстСообщения = НСтр("ru = 'У вас нет права на изменение документов:'");
			Для Каждого ДокументСсылка Из НедоступныеДокументы Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + Строка(ДокументСсылка);
			КонецЦикла;
		КонецЕсли;	
		
		ВызватьИсключение ТекстСообщения; 
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка);
			
			Если ИмяРеквизита = "Корреспондент" Тогда 
				НайденнаяСтрока = ДокументОбъект.Получатели.Найти(СтароеЗначение, "Получатель");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.Получатель = ЗначениеРеквизита;
					НайденнаяСтрока.Адресат = Неопределено;
				КонецЕсли;	
			Иначе	
				ДокументОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
			
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	// получатель 
	Получатель = ПараметрыОтбора.Получить("Получатель");
	Если Получатель <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Получатель) Тогда
			Список.Параметры.УстановитьЗначениеПараметра("ОтборПоПолучателю", Ложь);
			Список.Параметры.УстановитьЗначениеПараметра("Получатель", Неопределено);
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("ОтборПоПолучателю", Истина);
			Список.Параметры.УстановитьЗначениеПараметра("Получатель", Получатель);
		КонецЕсли;
	КонецЕсли;
	
	// вид документа 
	ВидДокумента = ПараметрыОтбора.Получить("ВидДокумента");
	Если ВидДокумента <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"ВидДокумента");
		Иначе
			СписокВидов = Новый СписокЗначений;
			СписокВидов.Добавить(ВидДокумента);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"ВидДокумента",
				СписокВидов,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		КонецЕсли;
	КонецЕсли;
	
	// организация 
	Организация = ПараметрыОтбора.Получить("Организация");
	Если Организация <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Организация");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Организация",
				Организация);
		КонецЕсли;
	КонецЕсли;
	
	// проект 
	Проект = ПараметрыОтбора.Получить("Проект");
	Если Проект <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Проект) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Проект");
		Иначе
			СписокПроектов = Новый СписокЗначений;
			СписокПроектов.Добавить(Проект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Проект",
				Проект,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		КонецЕсли;
	КонецЕсли;
		
	// период 
	ПериодВыборки = ПараметрыОтбора.Получить("ПериодВыборки");
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = "ОтборПериод" Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПериодВыборки) Тогда 
			
			Если ЭлементОтбораДанных = Неопределено Тогда
				ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
				ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
				ГруппаОтборПериод.Использование = Истина;
				ГруппаОтборПериод.Представление = "ОтборПериод";
			Иначе
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Истина;
			КонецЕсли;	
			
			ГруппаДатаСортировки = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаДатаСортировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
			ГруппаДатаСортировки.Использование = Истина;
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;
			
			Если ГруппаДатаСортировки.Элементы.Количество() = 0 Тогда 
				ГруппаОтборПериод.Элементы.Удалить(ГруппаДатаСортировки);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементОтбораДанных <> Неопределено Тогда
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// состояние
	Состояние = ПараметрыОтбора.Получить("Состояние");
	Если Состояние <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Состояние) Тогда 
			Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Состояние"));
			Параметр.Использование = Ложь;
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("Состояние", Состояние);
		КонецЕсли;	
	КонецЕсли;
	
//1С-Минск+	
	// Подразделение 
	Подразделение = ПараметрыОтбора.Получить("Подразделение");
	Если Подразделение <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"Подразделение");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"Подразделение",
				Подразделение);
		КонецЕсли;
	КонецЕсли;
//1С-Минск-	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	Если ВидПросмотра = ВидПросмотраПоВидамДокументов Тогда 
		
		Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Элементы.ВидыДокументов.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоВопросамДеятельности Тогда 
		
		Список.Параметры.УстановитьЗначениеПараметра("ВопросДеятельности", Элементы.ВопросыДеятельности.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоКорреспондентам Тогда 
		
		Список.Параметры.УстановитьЗначениеПараметра("Корреспондент", Элементы.Корреспонденты.ТекущаяСтрока);
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоПроектам Тогда 
		
		Список.Параметры.УстановитьЗначениеПараметра("Проект", Элементы.Проекты.ТекущаяСтрока);		
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда 
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДел", ТекущиеДанные.Ссылка);
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДел", Неопределено);
		КонецЕсли;	
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда 
		
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Дело", ТекущиеДанные.Ссылка);
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("Дело", Неопределено);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОжидания()
	
	УстановитьПараметрыСписка();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	ПараметрыКомпоновки = Новый Структура("ВидДокумента, ВопросДеятельности, Корреспондент, Проект, НоменклатураДел, Дело");
	Для Каждого ИмяПараметра Из ПараметрыКомпоновки Цикл
		Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра.Ключ));
		Если Параметр <> Неопределено И Параметр.Использование Тогда 
			Параметр.Использование = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
	
	Элементы.Список.ПодчиненныеЭлементы.ВидДокумента.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.ВопросДеятельности.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.Получатели.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.Проект.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.НоменклатураДел.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.Дело.Видимость = Истина;
	Элементы.Список.ПодчиненныеЭлементы.ЕстьКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
    Элементы.СтраницыДеревоРазрезов.Видимость = Истина;
	Элементы.СоздатьДокумент.Доступность = Истина;
	Элементы.СписокКонтекстноеМенюСоздать.Доступность = Истина;
	
	Элементы.СтраницаКатегории.Видимость = Ложь;
	Элементы.СтраницаВидыДокументов.Видимость = Ложь;
	Элементы.СтраницаВопросыДеятельности.Видимость = Ложь;
	Элементы.СтраницаКорреспонденты.Видимость = Ложь;
	Элементы.СтраницаНоменклатураДел.Видимость = Ложь;
	Элементы.СтраницаДелаТома.Видимость = Ложь;
	Элементы.СтраницаПроекты.Видимость = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
		
		Элементы.СтраницыДеревоРазрезов.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям Тогда
		
		Если ИспользоватьКатегорииДанных Тогда	
			ВсеКатегорииПредопределенное = Справочники.КатегорииДанных.ВсеКатегории;
			КатегорииПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "ОткрытыеКатегории");
			ТекущаяКатегорияПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "ТекущаяКатегория");
			ТекущаяКатегория = ТекущаяКатегорияПриОткрытии;
			ВыбранныеКатегорииПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "ВыбранныеКатегории");
			Если ВыбранныеКатегорииПриОткрытии.Количество() = 1 И
				ВыбранныеКатегорииПриОткрытии[0].Значение = ТекущаяКатегория Тогда
				ВыбранныеКатегорииПриОткрытии.Очистить();
			КонецЕсли;
			ОтборДанных = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "ОтборДанных");	
			СУчетомПодкатегорий = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "СУчетомПодкатегорий");
			ПоказыватьСписокОтмеченных = ХранилищеНастроекДанныхФорм.Загрузить("СписокИсходящихДокументов", "ПоказыватьСписокОтмеченных");
			
			Если Не ЗначениеЗаполнено(ОтборДанных) Тогда
				ОтборДанных = "ПоВсем";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СУчетомПодкатегорий) Тогда
				СУчетомПодкатегорий = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПоказыватьСписокОтмеченных) Тогда
				ПоказыватьСписокОтмеченных = Ложь;
			КонецЕсли;
			Если ОтборДанных = "ПоВсем" Тогда
				Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
				Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
			Иначе
				Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
				Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
			КонецЕсли;
			
			Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
			Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
			Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
		КонецЕсли;
	
		ПостроитьДеревоКатегорий();
		Элементы.СтраницаКатегории.Видимость = Истина;
		
		УстановитьПараметрыВыбранныхКатегорий();
		РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);
		
		Элементы.Список.ПодчиненныеЭлементы.ЕстьКатегории.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов Тогда
		
		Элементы.СтраницаВидыДокументов.Видимость = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Неопределено);
		Элементы.ВидыДокументов.ТекущаяСтрока = ТекущийВидДокумента;
		ТекущийВидДокумента = Неопределено;
		
		Если Не ЗначениеЗаполнено(Элементы.ВидыДокументов.ТекущаяСтрока) Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.ВидДокумента.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности Тогда
		
		Элементы.СтраницаВопросыДеятельности.Видимость = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("ВопросДеятельности", Неопределено);
		Элементы.ВопросыДеятельности.ТекущаяСтрока = ТекущийВопросДеятельности;
		ТекущийВопросДеятельности = Неопределено;
		
		Если Не ЗначениеЗаполнено(Элементы.ВопросыДеятельности.ТекущаяСтрока) Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.ВопросДеятельности.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам Тогда
		
		Элементы.СтраницаКорреспонденты.Видимость = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("Корреспондент", Неопределено);
		Элементы.Корреспонденты.ТекущаяСтрока = ТекущийКорреспондент;
		ТекущийКорреспондент = Неопределено;
		
		Если Не ЗначениеЗаполнено(Элементы.Корреспонденты.ТекущаяСтрока) Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.Получатели.Видимость = Ложь;	
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПроектам Тогда
		
		Элементы.СтраницаПроекты.Видимость = Истина;
		Список.Параметры.УстановитьЗначениеПараметра("Проект", Неопределено);
		Элементы.Проекты.ТекущаяСтрока = ТекущийПроект;
		ТекущийПроект = Неопределено;
		
		Если Не ЗначениеЗаполнено(Элементы.Проекты.ТекущаяСтрока) Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.Проект.Видимость = Ложь;	
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел Тогда	
		
		ЗаполнитьДеревоНоменклатурыДел();
		Элементы.СтраницаНоменклатураДел.Видимость = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("НоменклатураДел", Неопределено);
		
		ТекущаяСтрока = Элементы.СписокНоменклатураДел.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.Список.ПодчиненныеЭлементы.НоменклатураДел.Видимость = Ложь;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоДеламТомам Тогда
		
		ЗаполнитьДеревоДелТомов();
		Элементы.СтраницаДелаТома.Видимость = Истина;
		
		Список.Параметры.УстановитьЗначениеПараметра("Дело", Неопределено);
		
		ТекущаяСтрока = Элементы.ДелаТома.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			Элементы.СоздатьДокумент.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		КонецЕсли;	
		
		Элементы.Список.ПодчиненныеЭлементы.Дело.Видимость = Ложь;
		
	Иначе
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		ПереключитьВидПросмотра();
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных = Истина 
		И ПредыдущийВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям 
		И ВидПросмотра <> Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям Тогда
		ЗаписатьПараметрыДереваКатегорий(
			СписокРаскрытыхКатегорий,
			ТекущаяКатегория,
			ВыбранныеКатегории,
			ОтборДанных,
			СУчетомПодкатегорий,
			ПоказыватьСписокОтмеченных);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
	
	Если Копирование Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДокумент);
		Открытьформу("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьНовыйДокументПродолжение",
		ЭтотОбъект);
	Если КоличествоДоступныхШаблоновДокументов > 0 Тогда
		РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
			ОписаниеОповещения,
			"ШаблоныИсходящихДокументов");
	Иначе
		Результат = "СоздатьПустойДокумент";
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра(); 
	Если ЗначенияЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "ИсходящиеДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат);
	Иначе
		ПараметрыФормы.Вставить("ШаблонДокумента", Результат.ШаблонДокумента);
	КонецЕсли;
	
	Если ВидПросмотра = ВидПросмотраПоКатегориям Тогда
		Если ВыбранныеКатегории.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("СписокКатегорий", ВыбранныеКатегории);	
		ИначеЕсли НЕ ТекущаяКатегория = Неопределено
			И НЕ ТекущаяКатегория.Пустая()
			И НЕ ТекущаяКатегория = ВсеКатегорииПредопределенное Тогда
			ПараметрыФормы.Вставить("ОднаКатегория", ТекущаяКатегория);
		КонецЕсли;
	КонецЕсли;
	
	Открытьформу("Справочник.ИсходящиеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияЗаполненияПоВидуПросмотра()
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ВидПросмотра = ВидПросмотраПоВидамДокументов Тогда
		
		ТекущиеДанные = Элементы.ВидыДокументов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("ВидДокумента", ТекущиеДанные.Ссылка);
		КонецЕсли;	
	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоВопросамДеятельности Тогда
	
		ТекущиеДанные = Элементы.ВопросыДеятельности.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("ВопросДеятельности", ТекущиеДанные.Ссылка);
		КонецЕсли;	
	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоКорреспондентам Тогда
	
		ТекущиеДанные = Элементы.Корреспонденты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("Получатель", ТекущиеДанные.Ссылка);
		КонецЕсли;	
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоПроектам Тогда
	
		ТекущиеДанные = Элементы.Проекты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если Не ТекущиеДанные.ЭтоГруппа Тогда 
			ЗначенияЗаполнения.Вставить("Проект", ТекущиеДанные.Ссылка);
		КонецЕсли;	
		
	ИначеЕсли ВидПросмотра = ВидПросмотраПоНоменклатуреДел Тогда
		
		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.НоменклатураДел") Тогда 
			ЗначенияЗаполнения.Вставить("НоменклатураДел", ТекущиеДанные.Ссылка);
		КонецЕсли;	
	
	ИначеЕсли ВидПросмотра = ВидПросмотраПоДеламТомам Тогда
	
		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;	
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
			ЗначенияЗаполнения.Вставить("Дело", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьДеревоНоменклатурыДел()
	
	Дерево = РеквизитФормыВЗначение("НоменклатураДел");
	Дерево.Строки.Очистить();
	
	Делопроизводство.ЗаполнитьДеревоНоменклатурыДел(Дерево, ГодНоменклатурыДел, ОрганизацияНоменклатурыДел);
	
	ЗначениеВРеквизитФормы(Дерево, "НоменклатураДел");
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДеревоДелТомов()
	
	Дерево = РеквизитФормыВЗначение("ДелаТома");
	Дерево.Строки.Очистить();
	
	Делопроизводство.ЗаполнитьДеревоДелТомов(Дерево, ГодНоменклатурыДел, ОрганизацияНоменклатурыДел);
	
	ЗначениеВРеквизитФормы(Дерево, "ДелаТома");
	
КонецПроцедуры	

&НаСервере
Процедура ПереключитьОтборПоПроектам()
	
	Проекты.Параметры.УстановитьЗначениеПараметра("ТолькоМоиПроекты", ТолькоМоиПроекты);
	
КонецПроцедуры


&НаСервере
Процедура СнятьВсеОтметкиСервер()
	
	СнятьВсеОтметкиВыполнить(ДеревоКатегорий.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиВыполнить(ЭлементыОдногоУровня)
	
	ВыбранныеКатегории.Очистить();
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		ЭлементУровня.Выбрана = Ложь;
		СнятьВсеОтметкиВыполнить(ЭлементУровня.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоКатегорий()
	
	Дерево = РеквизитФормыВЗначение("ДеревоКатегорий");
	Дерево = РаботаСКатегориямиДанных.ПостроитьДеревоКатегорий(Дерево,, Истина, Перечисления.ТипыОбъектов.ИсходящиеДокументы);	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКатегорий");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбранныхКатегорий()
	
	ВыбранныеКатегории.Очистить();
	ПолучитьВыбранныеКатегории();	
	ПолучитьКоличествоКатегорийДляПоиска();
    	
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если НЕ ЗначениеЗаполнено(ВыбраннаяКатегория.Значение) Тогда
			РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
			Список.Параметры.УстановитьЗначениеПараметра("НаличиеКатегорий", 0);	
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(Список, 10, ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрКатегорий()
	
	КлючеваяОперация = "ИсходящиеДокументыВыполнениеКомандыОтборПоКатегориям";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пожалуйста, подождите!%1Идет поиск данных по категориям...'"),
			Символы.ПС);
		Состояние(СтрокаСостояния);
	КонецЕсли;
	УстановитьПараметрыВыбранныхКатегорий();
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		Состояние();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории)
	
	Если ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя() <> Неопределено Тогда
		Элементы.ДеревоКатегорий.Развернуть(ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКоличествоКатегорийДляПоиска()
	
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
		
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	
	КоличествоКатегорийДляПоиска = КоличествоВыбранныхКатегорий;
	Если КоличествоВыбранныхКатегорий > 1 Тогда
		КоличествоКатегорийДляПоиска = КоличествоОтмеченныхКатегорий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельноеКоличествоОтмеченныхКатегорий()
	
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если ВыбраннаяКатегория.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОтмеченныхКатегорий = 10 Тогда
		ТекстПредупреждения = НСтр("ru = 'Одновременно может быть отмечено не более 10 категорий.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПолучитьВыбранныеКатегории()
	
	ПолучитьВыбранныеКатегорииВыполнить(ДеревоКатегорий.ПолучитьЭлементы(), ВыбранныеКатегории);
	
	ЕстьОтмеченныеКатегории = Ложь;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка = Истина Тогда
			ЕстьОтмеченныеКатегории = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченныеКатегории Тогда
		Для Каждого Элемент Из ВыбранныеКатегории Цикл
			Если Элемент.Пометка = Ложь Тогда
				ВыбранныеКатегории.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПолучитьКоличествоКатегорийДляПоиска();
	СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'");
	Если КоличествоКатегорийДляПоиска > 0 Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
	КонецЕсли;
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеКатегорииВыполнить(ЭлементыОдногоУровня, ВыбранныеКатегории)
	
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		Если ЭлементУровня.Выбрана Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Истина);
		ИначеЕсли ЭлементУровня.Ссылка = ТекущаяКатегория Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Ложь);			
		КонецЕсли;
		ПолучитьВыбранныеКатегорииВыполнить(ЭлементУровня.ПолучитьЭлементы(), ВыбранныеКатегории);
	КонецЦикла;
	
КонецПроцедуры

//1С-Минск+
&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Подразделение", Подразделение);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		ТекстПредупреждения = НСтр("ru = 'Не выбран документ.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма, ТекущиеДанные.Ссылка);
КонецПроцедуры

