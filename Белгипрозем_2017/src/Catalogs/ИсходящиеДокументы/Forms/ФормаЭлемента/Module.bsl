
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные");
	
	// подготовка элементов для отображения статуса СВД
	ИспользоватьСВД = РаботаССВД.ДоступнаРаботаСЭДО();
	Если ИспользоватьСВД Тогда
		
		// Добавление реквизитов в таблицу для отображения статуса СВД
		ДобавляемыеРеквизиты = Новый Массив;
		РеквизитСтатусСВД = Новый РеквизитФормы(
			"СтатусСВД",
			Новый ОписаниеТипов("Число"),
			"Объект.Получатели",
			"СВД");
		ДобавляемыеРеквизиты.Добавить(РеквизитСтатусСВД);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		// Добавление колонки в таблицу для отображения статуса
		ЭлементКолонка = Элементы.Добавить("СтатусСВД", Тип("ПолеФормы"), Элементы.Получатели);
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеКартинки;
		ЭлементКолонка.ПутьКДанным = "Объект.Получатели.СтатусСВД";
		ЭлементКолонка.КартинкаЗначений = БиблиотекаКартинок.СостояниеОперацииСВД;   
		ЭлементКолонка.Подсказка = НСтр("ru = 'Состояние процесса отправки документа по СВД'");
		ЭлементКолонка.Ширина = 1;
		ЭлементКолонка.ГиперссылкаЯчейки = Истина;
	КонецЕсли;
	
	// Кэшируемые значения
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КорреспондентПустаяСсылка = Справочники.Корреспонденты.ПустаяСсылка();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	КорреспондентПустаяСсылка = Справочники.Корреспонденты.ПустаяСсылка();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСоставДокументов")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВИсходящих") Тогда
		Элементы.ДекорацияХранение.Видимость = Ложь;
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
	Иначе
		Элементы.ДекорацияХранение.Видимость = Истина;
		Элементы.ГруппаХранение.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;
	
	//Заполнение данными из шаблона
	Если Параметры.ШаблонДокумента <> Неопределено И
		Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
		АвтозаполнениеШаблоновФайловСервер.СкопироватьФайлыИзШаблонаДокумента(Параметры.ШаблонДокумента, ФайлыДобавленные, Ложь);
		
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
		КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
		КоличествоФайлов = КоличествоФайловТаблицы;
		Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		ЗаполнитьСписокПолучателейИзШаблона(Параметры.ШаблонДокумента);
		
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			ЗаполнитьРеквизитыИзШаблона(Параметры.ШаблонДокумента);
		КонецЕсли;
		
		Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
		Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
		
	КонецЕсли;
	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	РольДелопроизводитель = РольДоступна("РегистрацияИсходящихДокументов") Или РольДоступна("ПолныеПрава");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию");
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	ДоступнаКомандаОтправкиСВД = ИспользоватьСВД;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.Проект);
		
		ВОтветНа = Неопределено;
		НачальноеВОтветНа = Неопределено;
		
		ПредметПереписки = Справочники.ВнутренниеДокументы.ПустаяСсылка();
		НачальныйПредметПереписки = ПредметПереписки;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		Элементы.КомментарийРеквизит.Видимость = Истина;
	
	Иначе
		
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
		
		ПрочитатьСвязи();
		
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
		Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
			ИспользоватьОбзорДокументов = Истина;
		Иначе
			ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
		КонецЕсли;
		
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
			Элементы.КомментарийРеквизит.Видимость = Ложь;
		Иначе
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
			Элементы.КомментарийРеквизит.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// получен ответ
	ЗаполнитьПолученОтвет();
	
	// получатели
	Для Каждого Строка Из Объект.Получатели Цикл
		Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
		Строка.ТребуетсяПодписьЭП = 
			СКорреспондентомНастроенОбменПоСВД(
				Строка.Получатель, 
				Объект.Организация, 
				Объект.ВидДокумента).ТребуетсяПодписьЭП;
				
		Если ЗначениеЗаполнено(Строка.Получатель) И ЗначениеЗаполнено(Строка.Адресат) Тогда
			Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", Строка.Получатель, Строка.Адресат);
		Иначе
			Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", Строка.Получатель);
		КонецЕсли;
	КонецЦикла;
	НесколькоПолучателей = (Объект.Получатели.Количество() > 1);
	Если Не НесколькоПолучателей И Объект.Получатели.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(
			ЭтаФорма,
			Объект.Получатели[0],
			"ПолучательТекст,
			|Получатель, 
			|ПолучательЮрЛицо, 
			|Адресат, 
			|ПолученОтвет, 
			|Отправлен, 
			|ДатаОтправки, 
			|СпособОтправки, 
			|ВходящийНомер, 
			|ВходящаяДата, 
			|ТребуетсяПодписьЭП");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Получатель) и Объект.Получатели.Количество() > 0 Тогда
		Объект.Получатель = Объект.Получатели[0].Получатель;	
	КонецЕсли; 	
	Если Не ЗначениеЗаполнено(Объект.Адресат) и Объект.Получатели.Количество() > 0 Тогда
		Объект.Адресат = Объект.Получатели[0].Адресат;	
	КонецЕсли; 	
	
	// Файлы
	ЗаполнитьСписокФайлов(Истина);
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();	
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // Копирование
		
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = Параметры.ДокументОснование.ПодписанЭП;
		Объект.ГотовКОтправке = Ложь;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;
		
		//копирование категорий
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ОснованиеДокумента) Тогда
			ВОтветНа = ОснованиеДокумента;
			ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(ОснованиеДокумента, Справочники.ТипыСвязей.ПредметПереписки);
			
			Если ЗначениеЗаполнено(ВОтветНа) Тогда 
				Если ЗначениеЗаполнено(ВОтветНа.РегистрационныйНомер) И ЗначениеЗаполнено(ВОтветНа.ДатаРегистрации) Тогда
					ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '№ %1 от %2'"), ВОтветНа.РегистрационныйНомер, Формат(ВОтветНа.ДатаРегистрации, "ДЛФ=D"));
				Иначе
					ВОтветНаСтрока = ВОтветНа.Заголовок;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("Массив") 
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда				
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ОснованиеДокумента) Тогда
			
			Параметры.ВнутреннийДокументОснование = ОснованиеДокумента;
			ДокументОснованиеПодписан = Параметры.ВнутреннийДокументОснование.ПодписанЭП;
			
			// Перенос файлов
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);
			
			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				КонецЦикла;
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
				КоличествоФайлов = КоличествоФайловТаблицы;
				Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
			КонецЕсли;
			
			// Заполнение предмета переписки
			ПредметПереписки = ОснованиеДокумента;
			
			// Заполнение "в ответ на"
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ВходящиеДокументы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
			|		ПО ВходящиеДокументы.Ссылка = СвязьПредметПереписки.Документ
			|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
			|ГДЕ
			|	СвязьПредметПереписки.СвязанныйДокумент = &ПредметПереписки
			|	И (НЕ ИСТИНА В
			|				(ВЫБРАТЬ
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.СвязиДокументов КАК СвязьОтправленОтвет
			|				ГДЕ
			|					СвязьОтправленОтвет.Документ = ВходящиеДокументы.Ссылка
			|					И СвязьОтправленОтвет.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтвет)))
			|	И (НЕ ВходящиеДокументы.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВходящиеДокументы.ДатаРегистрации УБЫВ";
			Запрос.УстановитьПараметр("ПредметПереписки", ПредметПереписки);
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда 
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ВОтветНа = Выборка.Ссылка;
				
				Если ЗначениеЗаполнено(ВОтветНа) Тогда 
					Если ЗначениеЗаполнено(ВОтветНа.РегистрационныйНомер) И ЗначениеЗаполнено(ВОтветНа.ДатаРегистрации) Тогда
						ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '№ %1 от %2'"), ВОтветНа.РегистрационныйНомер, Формат(ВОтветНа.ДатаРегистрации, "ДЛФ=D"));			
					Иначе
						ВОтветНаСтрока = ВОтветНа.Заголовок;
					КонецЕсли;	
				КонецЕсли;
						
			КонецЕсли;
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
			
			Параметры.ПисьмоОснование = ОснованиеДокумента;
			ПредметПерепискиВПисьме = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОснованиеДокумента, "Предмет");
			Если ЗначениеЗаполнено(ПредметПерепискиВПисьме)
				И ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ПредметПерепискиВПисьме) Тогда
				ПредметПереписки = ПредметПерепискиВПисьме;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
			
		КонецЕсли;
		
	//МиСофт+
	ИначеЕсли Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	//МиСофт-
	
	КонецЕсли;
	
	// выбор вида документа
	БыстрыйВыборВидаДокумента = Делопроизводство.ПолучитьРежимВыборавидаДокумента("ИсходящийДокумент");
	Элементы.ВидДокумента.БыстрыйВыбор = БыстрыйВыборВидаДокумента;
	
	// реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидИсходящегоДокумента", Объект.ВидДокумента));
	
	// доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	Элементы.Зарегистрировать.Видимость = РольДелопроизводитель;
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаСвойства");
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	МассивИмен = Справочники.ИсходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов();
	ПрефиксОбъекта = "Объект.";
	МассивИменСОбъектом = Новый Массив;
	
	Для Каждого ИмяПоля Из МассивИмен Цикл
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки <> 0  Тогда
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			МассивИменСОбъектом.Добавить(ИмяСОбъектом);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
			Если МассивИменСОбъектом.Найти(ЭлементФормы.ПутьКДанным) <> Неопределено Тогда
				КлючевыеПоляВТаблице.Добавить(ЭлементФормы.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование() = Ложь Тогда
		Элементы.ФайлыПодписан.Видимость = Ложь;
		Элементы.ФайлыЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	// Чтение категорий данных
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных");
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьШК Тогда
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект);
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) И Не РольДоступна("ПолныеПрава") Тогда 
		
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ПараметрШаблонДокумента, "ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы");
		ЗапретитьРедактироватьФайлы = РеквизитыШаблона.ЗапретитьРедактироватьФайлы; 
		ЗапретитьУдалятьФайлы  = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
		
		Если ЗапретитьУдалятьФайлы Тогда
			Элементы.ФайлыДобавленныеУдалить.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// создание связи
	Если Параметры.Свойство("УстановитьСвязь") Тогда 
		УстановитьСвязь = Параметры.УстановитьСвязь;
		
		Если Параметры.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Документ) Тогда 
			Документ = Параметры.Документ;
		КонецЕсли;
		
		Если Параметры.Свойство("СвязанныйДокумент") И ЗначениеЗаполнено(Параметры.СвязанныйДокумент) Тогда 
			СвязанныйДокумент = Параметры.СвязанныйДокумент;
		КонецЕсли;
		
		ТипСвязи = Параметры.ТипСвязи;
		
		// переадресация входящего документа
		Если ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументом
			И ТипЗнч(Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			
			Объект.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Переадресовано ""%1""'"), Документ.Заголовок);
				
			Результат = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);

			Если Результат.Количество() > 0 Тогда 
				Для Каждого Файл Из Результат Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				КонецЦикла;
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
				Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// заполнение полей
	Если Параметры.Свойство("Получатель") Тогда
		Объект.Получатель = Параметры.Получатель;
		Получатель = Параметры.Получатель;
	КонецЕсли;
	Если Параметры.Свойство("Адресат") Тогда
		Объект.Адресат = Параметры.Адресат;
		Адресат = Параметры.Адресат;
	КонецЕсли;
	Если Параметры.Свойство("ВОтветНа") Тогда
		ВОтветНа = Параметры.ВОтветНа;
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			Если ЗначениеЗаполнено(ВОтветНа.РегистрационныйНомер) И ЗначениеЗаполнено(ВОтветНа.ДатаРегистрации) Тогда
				ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '№ %1 от %2'"), ВОтветНа.РегистрационныйНомер, Формат(ВОтветНа.ДатаРегистрации, "ДЛФ=D"));			
			Иначе
				ВОтветНаСтрока = ВОтветНа.Заголовок;			
			КонецЕсли;	
		КонецЕсли;
					
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВОтветНа) Тогда
			Объект.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ответ на ""%1""'"), ВОтветНа.Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	НазваниеОрганизации = Константы.НаименованиеПредприятия.Получить();
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") 
		И ЗначениеЗаполнено(НазваниеОрганизации) Тогда
		Элементы.ДекорацияОрганизация.Видимость = Истина;
		Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
	Иначе
		Элементы.ДекорацияОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	// Визы согласования
	Элементы.ГруппаВизыСогласования.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленныеВизы") = Неопределено Тогда
		ПоказыватьУдаленныеВизы = Ложь;
		Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = Ложь;
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	//Заполнение данными из шаблона
	Если Параметры.ШаблонДокумента <> Неопределено И
		Параметры.ШаблонДокумента <> "СоздатьПустойДокумент" Тогда
		
		//Копирование дополнительных реквизитов
		Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
			Для Каждого Реквизит Из Параметры.ШаблонДокумента.ДополнительныеРеквизиты Цикл
				
				СтруктураПоиска = Новый Структура("Свойство", Реквизит.Реквизит);
				МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					НоваяСтрока = МассивСтрок[0];
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.ЗначениеРеквизита;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
		
		// Визы согласования
		РаботаСВизамиСогласования.ДобавитьИсполнителейСогласованияИзШаблона(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьПолей();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);
		
	ЗаполнитьШаблоныДляАвтоЗапуска();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
		
	// Отображения состояния в СВД
	Элементы.СостояниеПроцессаВСВД.Видимость = Ложь;
	
	Если ИспользоватьСВД Тогда
		Если Элементы.Получатели.Видимость = Истина И Объект.Получатели.Количество() >= 1 Тогда
			// Установка способа отправки, если это новый документ, а получатели уже указаны
			Если Объект.Ссылка.Пустая() Тогда
				Для каждого ОдинПолучатель Из Объект.Получатели Цикл
					Если ЗначениеЗаполнено(ОдинПолучатель.Получатель) Тогда
						НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(ОдинПолучатель.Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
						Если НастроенОбменПоСВД Тогда
							ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
						Иначе
							ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
			// Установка статусов СВД для каждого из корреспондентов
			ЗаполнитьСтатусыСВДВТаблицеПолучателей();
		ИначеЕсли Элементы.Получатели.Видимость = Ложь И Объект.Получатели.Количество() = 1 Тогда
			// Установка способа отправки, если это новый документ, а получатель уже указан
			Если Объект.Ссылка.Пустая() Тогда 
				НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
				Если НастроенОбменПоСВД Тогда
					СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
				Иначе
					СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			ПолучательДокумента = Объект.Получатели[0].Получатель;
			УстановитьСтатусСВДПолучателя(Получатель)
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьПолучателей();
	
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	ЗаполнитьСвязи();
	
	Если Не ЗначениеЗаполнено(КоличествоФайлов) Тогда
		КоличествоФайлов = КоличествоФайловТаблицы;
	КонецЕсли;
	
	//Текстовые поля формы
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел, МестоХранения"); 
		ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
			+ " " + СокрЛП(Объект.Дело);

		ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
				РеквизитыДела.МестоХранения),"")
			+Делопроизводство.ПолучитьСостояниеДела(Объект.Дело);
	КонецЕсли;	

    Если ЗначениеЗаполнено(Получатель) И ЗначениеЗаполнено(Адресат) Тогда
		ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Получатель, Адресат);
	Иначе
		ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Получатель);
	КонецЕсли;
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	// картинки состояний
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтаФорма);
	
	Если Объект.Ссылка.Пустая() Тогда 
		АктивизироватьЭлемент()
	КонецЕсли;

	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	Элементы.ГруппаЭтапы.Видимость = Объект.ВидДокумента.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	ВключитьАвтоотметкуИЗаполнитьПолеОтветственный();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		УстановитьДоступностьКомандФайлыДобавленные();
	КонецЕсли;	
	
	ПолучитьОбзорДокумента();
    
    //1С-Минск  
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма);
	//Конец 1С-Минск
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.ФайлыКонтекстноеМенюГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ТаблицаПодписей.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиент.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;

	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	Оповестить("ОбновитьСписокПоследних");
	ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭП()
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны. 
			|Копирование сведений об ЭП в новый документ сделает его недоступным для изменения. 
			|Скопировать в новый документ сведения об ЭП?'"),
			Строка(Параметры.ДокументОснование));
			
	ИначеЕсли Не Параметры.ВнутреннийДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
			
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны. 
			|Скопировать в новый документ сведения об ЭП присоединенных файлов?'"),
			Строка(Параметры.ВнутреннийДокументОснование));
	Иначе 
		Возврат
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросКопированияЭППродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭППродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
		УстановитьДоступностьПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Срок действия документа
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.Заголовок = НСтр("ru = 'Выбор связанного документа'") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Документ", ВыбранноеЗначение);
		ПараметрыОткрытия.Вставить("ЗаполнитьРеквизиты", Истина);
		ПараметрыОткрытия.Вставить("ДокументИсточникИзменения", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИзменятьСрокДействия", Истина);
		ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ИзменениеСрокаДействия", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущуюСтрокуФайла(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Свойство("ЕстьЗашифрованныеИлиЗанятыеФайлы") Тогда
					ЕстьЗашифрованныеИлиЗанятыеФайлы = Параметр.ЕстьЗашифрованныеИлиЗанятыеФайлы;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				Если Параметр.Свойство("ИзменилсяПризнакОригинала") И Параметр.ИзменилсяПризнакОригинала Тогда 
					ОбновитьСтрокуФайла(Параметр.Файл, Истина);
				Иначе	
					ОбновитьСтрокуФайла(Параметр.Файл);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
				И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
  				ЗаполнитьСписокВиз();
			КонецЕсли;
			
			СтатусВзаимодействие = 1;
			Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Есть выполняющиеся задачи'");
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс") 
			   И (ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
			  Или ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")) Тогда 
				  ВывестиКартинкуКонтроля();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессПрерван" Тогда 
		Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда
			СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
			УстановитьДоступностьПолей();
			
			Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
				И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
    			ЗаполнитьСписокВиз();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаСогласованияВыполнена" Тогда 
		Если Параметр.Свойство("Предмет") И Параметр.Предмет = Объект.Ссылка Тогда
			ЗаполнитьСписокВиз();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлЗашифрован" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлПодписан" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
		ОповеститьОбИзменении(Объект.Ссылка);
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда
		КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено 
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда 
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
				ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
			КонецЕсли;
			
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "НапечатанШтрихкод" И Параметр = Объект.Ссылка Тогда
		НеобходимоНапечататьШтрихкодПриСоздании = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьПредметПереписки" И Параметр = Объект.Ссылка Тогда 
		ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			ПредопределенноеЗначение("Справочник.ТипыСвязей.ПредметПереписки"));
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" Тогда
		
		Если Параметр.Документ = Объект.Ссылка Тогда
			ПрочитатьСвязи(Параметр.ТипыСвязей);
		КонецЕсли;
		
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
		
		// Установим курсор в нужную строку
		НашлиСтроку = Ложь; 
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			
			Если НашлиСтроку Тогда
				Прервать;
			КонецЕсли;
			
			ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл 
				
				Если Параметр.СвязанныйДокумент = ПодчиненнаяСтрока.СвязанныйДокумент 
					И Параметр.ТипыСвязей[0] = ПодчиненнаяСтрока.ТипСвязи Тогда
					Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
					НашлиСтроку = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЦикла;	

	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = Объект.Ссылка Тогда
		ЗаполнитьСвязи();
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученВОтветНаУстановлен" И Параметр.Документ = Объект.Ссылка Тогда
		Если НесколькоПолучателей Тогда
			
			ЗаполнитьПолученОтвет();
			
			Для Каждого Строка Из Объект.Получатели Цикл
				Если ЗначениеЗаполнено(Строка.ПолученОтвет) Тогда 
					Элементы.ПолучателиПолученОтвет.Видимость = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			Если Параметр.СвязанныйДокумент <> ПолученОтвет Тогда
				ПолученыОтветы = СвязиДокументов.ПолучитьСвязанныеДокументы(Объект.Ссылка, "ПолученОтвет");
				Если ПолученыОтветы.Количество() > 0 Тогда
					ПолученОтвет = ПолученыОтветы[0];
				КонецЕсли;
				Элементы.ПолученОтвет.Видимость = ЗначениеЗаполнено(ПолученОтвет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Визы согласования
	Если ИмяСобытия = "Запись_ВизыСогласования" И Параметр = Объект.Ссылка Тогда
		ПрочитатьГруппыНаСервере();
		ЗаполнитьСписокВиз();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МассивНастроекВыводаСтатусов = Справочники.ВидыСостоянийДокументовВСВД.ПолучитьДанныеДляВыводаСостояний();

	Если ИспользоватьСВД И НесколькоПолучателей Тогда
		Для Каждого Строка Из Объект.Получатели Цикл
			Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
			
			// Установка значения Ложь в "активные" реквизиты и "истина" в неактивные
			Для Каждого Статус Из МассивНастроекВыводаСтатусов Цикл 					
				Строка["СтатусСВД"] = 0;
			КонецЦикла;	
			
			// Установка действительных значений статусов
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
					|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
					|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Отправлен)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОДоставке)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОРегистрации)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОбОшибке)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
					|	КОНЕЦ КАК Состояние,
					|	ВЫБОР
					|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
					|			ТОГДА ВЫБОР
					|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
					|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
					|					ИНАЧЕ СообщенияСВД.Дата
					|				КОНЕЦ
					|		ИНАЧЕ СообщенияСВД.Дата
					|	КОНЕЦ КАК ДатаУстановки
					|ИЗ
					|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
					|ГДЕ
					|	СообщенияСВД.Адресат = &Получатель
					|	И СообщенияСВД.Документ = &Документ";
			Запрос.УстановитьПараметр("Получатель", Строка.Получатель);
			Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
			ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
				Строка["СтатусСВД"] = Статус.Значение.НомерВКоллекции;;
			КонецЦикла;
				
		КонецЦикла;	
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ПередЗаписьюКлиент(ПараметрыЗаписи, Отказ);
		
	Если НЕ Отказ Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИсходящиеДокументыВыполнениеКомандыЗаписать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НесколькоПолучателей Тогда 
		
		Если Объект.Получатели.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введено ни одной строки в список ""Получатели""'"),,"Получатели",
				"Объект", Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Получатели Цикл
			Если Не ЗначениеЗаполнено(Строка.Получатель) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""Получатели""'"),
					Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,"Объект.Получатели["+(Строка.НомерСтроки-1)+"].Получатель",,Отказ);
			КонецЕсли;	
		КонецЦикла;	
		
	Иначе
		Если Не ЗначениеЗаполнено(Получатель) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Получатель"" не заполнено'"),,,
				"ПолучательТекст", Отказ);
		КонецЕсли;	
	КонецЕсли;	

	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
		
	КонецЕсли;		
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, 
			"ИспользоватьЭтапыОбработкиДокумента");
		
		Если ИспользоватьЭтапыОбработкиДокумента Тогда 
			Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
				Если Строка.Пройден И Не ЗначениеЗаполнено(Строка.ДатаПрохождения) Тогда 
					НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для пройденного этапа ""%1"" не указана дата прохождения'"), Строка.Этап);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
						"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ДатаПрохождения",, Отказ);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	Если Не НесколькоПолучателей Тогда 
		ТекущийОбъект.Получатели.Очистить();
		ТекущийОбъект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущийОбъект.Получатели[0], ЭтаФорма, "Получатель, Адресат, Отправлен, ДатаОтправки, СпособОтправки, ВходящийНомер, ВходящаяДата");
	КонецЕсли;
	
    //{{1С-Минск
    ПолучитьСтоимостьОтправки();
    //}}1C-Минск
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура(
					"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
					Эл.Участник,
					Эл.ОсновнойОбъектАдресации,
					Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура(
					"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
					Эл.Участник,
					Эл.ОсновнойОбъектАдресации,
					Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.Проект, 
				ПользователиКлиентСервер.ТекущийПользователь(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;	
	КонецЕсли;	
	
	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
				
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		ЗарегистрироватьНаСервере(
			ТекущийОбъект, 
			СообщениеОбОшибке, 
			РегистрационныйНомер);
		
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			ПользователиКлиентСервер.ТекущийПользователь(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;	
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка связей
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(Параметры.ПисьмоОснование)
			И ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Параметры.ПисьмоОснование) Тогда
			СвязиДокументов.СоздатьСвязь(
				ТекущийОбъект.Ссылка,
				Параметры.ПисьмоОснование,
				Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо);
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьСвязьДляНумерации и ЗначениеЗаполнено(СвязанныйДокументДляНумерации) Тогда
		СвязиДокументов.СоздатьСвязь(
			ТекущийОбъект.Ссылка, 
			СвязанныйДокументДляНумерации, 
			ТипСвязиНумератора);
			
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	
	Если ВОтветНа <> НачальноеВОтветНа Тогда
		Если ЗначениеЗаполнено(НачальноеВОтветНа) Тогда
			Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(НачальноеВОтветНа) Тогда
				СвязиДокументов.УдалитьСвязь(ТекущийОбъект.Ссылка, НачальноеВОтветНа, Справочники.ТипыСвязей.ОтправленВОтветНа);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВОтветНа) Тогда
			Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ВОтветНа) Тогда
				СвязиДокументов.СоздатьСвязь(ТекущийОбъект.Ссылка, ВОтветНа, Справочники.ТипыСвязей.ОтправленВОтветНа);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредметПереписки) И НачальныйПредметПереписки <> ПредметПереписки Тогда 
		ОснованиеПереписки = ПредметПереписки;
	КонецЕсли;
	
	СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, НачальныйПредметПереписки, ПредметПереписки, Справочники.ТипыСвязей.ПредметПереписки);
	
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		
		Если Строка.НужноЗаписать Тогда
			
			СвязиДокументов.СоздатьСвязь(
				ТекущийОбъект.Ссылка, 
				Строка.СвязанныйДокумент, 
				Строка.ТипСвязи);
				
			Строка.НужноЗаписать = Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
			
			УстановленоСостояниеСогласован = Ложь;
			Для Каждого СтруктураСостояния Из ПараметрыЗаписи.МассивСостояний Цикл
				Если СтруктураСостояния.Состояние = Перечисления.СостоянияДокументов.Согласован 
					И СтруктураСостояния.Состояние <> СтруктураСостояния.НачальноеСостояние Тогда 
					УстановленоСостояниеСогласован = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УстановленоСостояниеСогласован Тогда 
				
				ЕстьНеСогласованные = РаботаСВизамиСогласования.ЕстьВизыНеСогласованные(ТекущийОбъект.Ссылка);
				Если ЕстьНеСогласованные Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с отрицательным результатом согласования'"),,
						"Состояние",,
					Отказ);
				КонецЕсли;
				
				ЕстьНаСогласовании = РаботаСВизамиСогласования.ЕстьВизыНаСогласовании(ТекущийОбъект.Ссылка);
				Если ЕстьНаСогласовании Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Нельзя указать состояние ""Согласовано"" так как есть визы с незаполненным результатом согласования'"),,
						"Состояние",,
					Отказ);
				КонецЕсли;
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;
	
	// Запись переданной связи
	Если УстановитьСвязь Тогда
		Если Не ЗначениеЗаполнено(Документ) Тогда 
			Документ = ТекущийОбъект.Ссылка;
		ИначеЕсли Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			СвязанныйДокумент = ТекущийОбъект.Ссылка;
		КонецЕсли;
		СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи);
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;
	
	ЗаполнитьСвязи();
	
	// Этапы обработки документов
	Делопроизводство.ЗаписатьЭтапы(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	// Подготовка документа к отправке по СВД
	Если ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияИсходящихДокументов") Тогда
		
		Если Объект.ГотовКОтправке И Не ЗначениеЗаполнено(Объект.РегистрационныйНомер)
			И Не (ПараметрыЗаписи.Свойство("Регистрация") И ПараметрыЗаписи.Регистрация = Истина) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо зарегистрировать документ перед отправкой по СВД.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ОбновитьСписокДокументовДляОтправкиПоСВД", Истина);
		
		НаборЗаписей = РегистрыСведений.ФайлыДокументовГотовыхКОтправкеПОСВД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
		НаборЗаписей.Записать();
		
		Если Объект.ГотовКОтправке Тогда
			
			ТаблицаФайлов = РеквизитФормыВЗначение("Файлы");
			ТаблицаПолучателей = РеквизитФормыВЗначение("Объект.Получатели");
			Для Каждого СтрокаФайл Из ТаблицаФайлов Цикл
				Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
					Если СтрокаПолучатель.СпособОтправки = Справочники.СпособыДоставки.СВД
						И Не СтрокаПолучатель.Отправлен Тогда
						НоваяЗапись = РегистрыСведений.ФайлыДокументовГотовыхКОтправкеПОСВД.СоздатьМенеджерЗаписи();
						НоваяЗапись.Документ = Объект.Ссылка;
						НоваяЗапись.Файл = СтрокаФайл.Ссылка;
						НоваяЗапись.Получатель = СтрокаПолучатель.Получатель;
						НоваяЗапись.Записать();
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		НеобходимоОповещениеОЗаписиНового = Истина;
	КонецЕсли;
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	
	// запись в журнал передачи
	Если СписокСтрокДляФиксацииПередачи.Количество() > 0 Тогда
		Для Каждого Строка Из Объект.Получатели Цикл	
			ДанныеСтроки = Новый Структура("Получатель, Адресат, Отправлен, ДатаОтправки");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
			Если СписокСтрокДляФиксацииПередачи[Объект.Получатели.Индекс(Строка)].НеобходимоЗафиксироватьПередачу Тогда
				ТекстСообщения = "";
				ОтразитьПередачуДокументаКорреспонденту(ДанныеСтроки, ТекстСообщения);
				Если ТекстСообщения <> "" Тогда 
					КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Журнал передачи.Ошибка фиксации'", КодОсновногоЯзыка),
						УровеньЖурналаРегистрации.Ошибка,,,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка фиксации в журнале передачи документа %1 получателю %2: %3'", КодОсновногоЯзыка),
							Строка(ТекущийОбъект.Ссылка), Строка(ДанныеСтроки.Получатель), ТекстСообщения));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивНастроекВыводаСтатусов = Справочники.ВидыСостоянийДокументовВСВД.ПолучитьДанныеДляВыводаСостояний();
	Если НесколькоПолучателей Тогда 
		Для Каждого Строка Из Объект.Получатели Цикл
			Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
			
			Если ЗначениеЗаполнено(Строка.Получатель) И ЗначениеЗаполнено(Строка.Адресат) Тогда
				Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Строка.Получатель, Строка.Адресат);
			Иначе
				Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Строка.Получатель);
			КонецЕсли;
						
			// Установка значения Ложь в "активные" реквизиты и "истина" в неактивные
			Если ИспользоватьСВД Тогда
				Для Каждого Статус Из МассивНастроекВыводаСтатусов Цикл 
					Строка["СтатусСВД"] = 0;
				КонецЦикла;	
			
				// Установка действительных значений статусов
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
					|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
					|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Отправлен)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОДоставке)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОРегистрации)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем)
					|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОбОшибке)
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
					|	КОНЕЦ КАК Состояние,
					|	ВЫБОР
					|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
					|			ТОГДА ВЫБОР
					|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
					|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
					|					ИНАЧЕ СообщенияСВД.Дата
					|				КОНЕЦ
					|		ИНАЧЕ СообщенияСВД.Дата
					|	КОНЕЦ КАК ДатаУстановки
					|ИЗ
					|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
					|ГДЕ
					|	СообщенияСВД.Адресат = &Получатель
					|	И СообщенияСВД.Документ = &Документ";
				Запрос.УстановитьПараметр("Получатель", Строка.Получатель);
				Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
				ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
				
				Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
					Строка["СтатусСВД"] = СтрокаТаблицыСостояний.Состояние.НомерКартинкиВКоллекции;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
	
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл

			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
            КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(
				ВладелецФайла,
				Источник.Описание,
				Источник.ПолноеНаименование,
				ХранитьВерсииНовыйФайл,
				"");
				
			Если ЗначениеЗаполнено(ФайлТаблицы.ШаблонОснованиеДляСоздания)
					И ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
				РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);//СозданПоШаблону
			КонецЕсли;	
				
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;	
				
				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(
					ТекущаяДата(),
					РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ТекущаяДата()),
					Приемник,
					Приемник.Наименование,
					Источник.ТекущаяВерсия.Размер,
					Источник.ТекущаяВерсия.Расширение,
					ХранилищеФайла,
					Источник.ТекущаяВерсия.ТекстХранилище,
					Истина,
					Источник.ТекущаяВерсия);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания();
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки, 
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);		
				КонецЕсли;
				
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <>  0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;	
				КонецЕсли;	
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					Если ФайлОбъект.ПодписанЭП Тогда
						ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					КонецЕсли;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					Для Каждого Строка Из Источник.СертификатыШифрования Цикл
						НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					КонецЦикла;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
				КонецЕсли;	
				
				Если Источник <> Неопределено Тогда					
					НастройкиАвтозаполнения = ПолучитьНастройкиАвтозаполненийШаблона(Приемник, Приемник.ШаблонОснованиеДляСоздания, Приемник.ВладелецФайла);
					Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов") Тогда
						Если НЕ ИзменениеФайловMSWordНаСервере		
							И Приемник.ТекущаяВерсияРасширение = "doc"
							И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
							И НЕ ЭтоВебКлиент Тогда
							НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
							НоваяСтрока.Файл = Приемник;
							НоваяСтрока.Автозаполнение = Истина;
							НоваяСтрока.Штрихкодирование = Ложь;
							НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
						Иначе
							РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(Ложь, Приемник, Истина);
						КонецЕсли;
					КонецЕсли;
					Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
						ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);
						
						Если (ИзменениеФайловMSWordНаСервере
							И Приемник.ТекущаяВерсияРасширение = "doc")
							ИЛИ Приемник.ТекущаяВерсияРасширение <> "doc" Тогда
							Если ДанныеОШтрихкоде <> Неопределено  
								И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
								Попытка 
									ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(Приемник.Ссылка,
										НСтр("ru = 'ВставитьИзображениеШтрихкода'"), 
										Ложь, 
										ДанныеОШтрихкоде.ДвоичныеДанныеИзображения, 
										ДанныеОШтрихкоде.ДвоичныеДанныеФайла,
										ДанныеОШтрихкоде.Расширение,
										ДанныеОШтрихкоде.ФайлРедактируется,
										ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
										ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
								Исключение
								КонецПопытки;		
							КонецЕсли;
                        КонецЕсли;
						          						
						Если (НЕ ИзменениеФайловMSWordНаСервере
							И Приемник.ТекущаяВерсияРасширение = "doc"
							ИЛИ Приемник.ТекущаяВерсияРасширение <> "doc")
							И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
							И НЕ ЭтоВебКлиент Тогда
							ПараметрыОтбора = Новый Структура("Файл", Приемник);
							НайденныеСтроки = ДанныеДляЗаполненияФайловНаКлиенте.НайтиСтроки(ПараметрыОтбора);
							
							Если НайденныеСтроки.Количество() > 0 Тогда
								НайденныеСтроки[0].Штрихкодирование = Истина;
								НайденныеСтроки[0].НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);
							Иначе
								НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
								НоваяСтрока.Файл = Приемник;
								НоваяСтрока.Автозаполнение = Ложь;
								НоваяСтрока.Штрихкодирование = Истина;
								НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
								НоваяСтрока.НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Источник = ТекущийФайлВСпискеДобавленных Тогда
					ТекущийФайлВСпискеДобавленных = Приемник;
				КонецЕсли;
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;	
	КонецЕсли;
	
	// Файлы
	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;	
	
	Если КопироватьПодписиЭП Тогда
		
		Если Параметры.ВнутреннийДокументОснование.Пустая() Тогда
			
			Источник = Параметры.ДокументОснование;
			Приемник = Объект.Ссылка;
			ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПодписанЭП = Истина;
			
			РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
			
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
		
	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;	
	
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьШК Тогда
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект);
	КонецЕсли;
	
	Если ИспользоватьСВД Тогда
		Для Каждого Строка Из Объект.Получатели Цикл
			Строка.ТребуетсяПодписьЭП = 
				СКорреспондентомНастроенОбменПоСВД(
					Строка.Получатель, 
					Объект.Организация, 
					Объект.ВидДокумента).ТребуетсяПодписьЭП;
		КонецЦикла;
	КонецЕсли;
	
	// Работа с визами
	РаботаСВизамиСогласования.ПослеЗаписиДокументаНаСервере(ЭтаФорма);
	ЗаполнитьСписокВиз();

	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();	
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
//		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);

	ЗаполнитьСвязи();
	ПолучитьОбзорДокумента();
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	Если ИспользоватьШК И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'"),
			Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтаФорма);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаПроцесса <> Истина Тогда
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаЗакрытиеКарточки, 
			Объект.Ссылка, 
			"ЗакрытиеКарточки",
			ЭтаФорма,
			Отказ,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ОтветПользователя, параметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		ПоказанВопросОВставкеШтрихкода = Истина;
		ЗаписатьИЗакрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьУдаленныеВизы"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
		Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = Настройки["ПоказыватьУдаленныеВизы"];
		ЗаполнитьСписокВиз();
	КонецЕсли;
		
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;
	
	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокФайлов(Истина);
		КонецЕсли;	

		Если ИспользоватьОбзорДокументов И Не Объект.Ссылка.Пустая() Тогда		
			Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		Иначе
			Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];		
		КонецЕсли;	
				
	КонецЕсли;
	
	Если Настройки["ПоказыватьТолькоОригиналыВСвязях"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		ЗаполнитьСвязи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СостояниеПроцессаВСВДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СостояниеПроцессаВСВД = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Получатель", Получатель);
	ПараметрыФормы.Вставить("НазваниеОтправителя", 
		?(ЗначениеЗаполнено(Объект.Организация), Строка(Объект.Организация), НазваниеОрганизации));
	ПараметрыФормы.Вставить("ОтправительСсылка", Объект.Организация);
	ОткрытьФорму("ОбщаяФорма.СостояниеДокументаВСВД", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Обзор" и ЭтаФорма.Модифицированность Тогда
		ПолучитьОбзорДокумента();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.БизнесПроцессыИЗадачиПоПредмету", Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
 	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;

КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
	КонецЕсли;	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	
	Если Найти(НавигационнаяСсылкаПоля, "message") > 0 Тогда 	
		
		АдресПочты = СокрЛП(СтрЗаменить(НавигационнаяСсылкаПоля, "message", ""));
		РаботаСПочтовымиСообщениямиКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(, АдресПочты
			,,,,,, Объект.Ссылка);

	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "status") > 0  Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДляПросмотра", ЗапретитьРучноеИзменениеСостоянияДокументов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьСтатус",
			ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "dossier") > 0 Тогда 	
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.Дело);
		ОткрытьФорму("Справочник.ДелаХраненияДокументов.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Найти(НавигационнаяСсылкаПоля, "holder") > 0 Тогда 	
		
		ДелопроизводствоКлиент.ОткрытьКарточкуПередачиДокумента(Объект.Ссылка, ЭтаФорма);
		
	Иначе	
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатус(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		ИзменитьСостояние(Объект.Ссылка, Результат);
		ОповеститьОбИзменении(Объект.Ссылка);			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

//////////////////////////////////////////////////////////////////////////////// 
// Изменение полей, влияющих на номер

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (КонецДня(Объект.СрокИсполнения) < Объект.ДатаРегистрации) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок ответа меньше даты регистрации документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
	КонецЕсли;	
	
	СрокИсполненияДней = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВидДокумента, "СрокИсполнения");
	Если ЗначениеЗаполнено(СрокИсполненияДней) И ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
		Если Объект.СрокИсполнения > Объект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок ответа превышает нормативный срок для данного вида документа!'"),,,
				"Объект.СрокИсполнения");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправленПриИзменении(Элемент)
	
	Если Отправлен Тогда
		ДатаОтправки = ТекущаяДата();
		Если Не ЗначениеЗаполнено(СпособОтправки) Тогда
			СпособОтправки = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособОтправки");
		КонецЕсли;
	Иначе
		ДатаОтправки = '00010101';
		СпособОтправки = Неопределено;
	КонецЕсли;
	
	Элементы.ДатаОтправки.Доступность = Отправлен;
	
	УстановитьВидимостьГотовКОтправке();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииДатыРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если БыстрыйВыборВидаДокумента Тогда 
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора("");
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ВидДокумента);
		
		ОткрытьФорму("Справочник.ВидыИсходящихДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ВидДокументаПолучитьДанныеВыбора(Текст);
	КонецЕсли;	
	
КонецПроцедуры

// Готовит данные выбора для поля ВидДокумента
&НаСервереБезКонтекста
Функция ВидДокументаПолучитьДанныеВыбора(Текст)
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	
	Отбор = Новый Структура("ЗапретитьСозданиеДокументовНеПоШаблону", Ложь);
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	
	ДанныеВыбора = Справочники.ВидыИсходящихДокументов.ПолучитьДанныеВыбора(ПараметрыВыбора);	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	Если ЗначениеЗаполнено(Нумератор) Тогда // ручное изменение номера
		Объект.ЧисловойНомер = -1; 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Установка способа отправки
	Если ИспользоватьСВД И Не Отправлен Тогда
		Если Элементы.Получатели.Видимость = Истина И Объект.Получатели.Количество() >= 1 Тогда
			Для каждого ОдинПолучатель Из Объект.Получатели Цикл
				Если ЗначениеЗаполнено(ОдинПолучатель.Получатель) Тогда
					НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(ОдинПолучатель.Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
					Если НастроенОбменПоСВД Тогда
						ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
					Иначе
						ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Элементы.Получатели.Видимость = Ложь И Объект.Получатели.Количество() = 1 Тогда
			НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
			Если НастроенОбменПоСВД Тогда
				СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
			Иначе
				СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		УстановитьВидимостьГотовКОтправке();
	КонецЕсли;
	
	ПолучитьИнструкции();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Выбор пользователей, корреспондентов и контактных лиц

&НаКлиенте
Процедура ПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Неопределено;
	//РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Подписал);
	Объект.Подписал = РаботаСПользователямиКлиент.ПолучитьПодписанта(Объект.Организация, Объект.ВидДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Подготовил) Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Подготовил);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Подготовил);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПолучательТекст) Тогда 
		Получатель = Неопределено;
		Адресат = Неопределено;
		ПолучательТекст = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборКорреспондентаКонтактноеЛицо", Новый Структура("Получатель, Режим", Получатель, "КорреспондентыИСпискиРассылки"), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстОчистка(Элемент, СтандартнаяОбработка)
		
	Получатель = Неопределено;
	Адресат = Неопределено;
	ПолучательТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Адресат) Тогда
		ПоказатьЗначение(, Адресат);
	ИначеЕсли ЗначениеЗаполнено(Получатель) Тогда
		ПоказатьЗначение(, Получатель);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиРассылкиПоКорреспондентам") Тогда 
		
		ЗаполнитьИсполнителейПоСпискуРассылки(ВыбранноеЗначение);
		Возврат;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Получатель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Получатель, ВыбранноеЗначение);
		Адресат = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Корреспонденты") Тогда 	
		
		ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", ВыбранноеЗначение);
		Получатель = ВыбранноеЗначение;
		Адресат = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Корреспондент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1, %2", ВыбранноеЗначение.Корреспондент, ВыбранноеЗначение.КонтактноеЛицо);
			Получатель = ВыбранноеЗначение.Корреспондент;
			Адресат = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1", ВыбранноеЗначение.Корреспондент);
			Получатель = ВыбранноеЗначение.Корреспондент;
			Адресат = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Текст = СокрЛП(ВыбранноеЗначение);
		
		Если Найти(Текст, ",") > 0 Тогда 
			ТекстПолучатель = Лев(Текст, Найти(Текст, ",") - 1); 
			ТекстАдресат = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(ТекстПолучатель))-1));
		Иначе
			ТекстПолучатель = Текст; 
			ТекстАдресат = "";
		КонецЕсли;
		
		Результат = Делопроизводство.НайтиКорреспондентаИКонтактноеЛицо(ТекстПолучатель, ТекстАдресат);
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Если ЗначениеЗаполнено(Результат.Корреспондент) И ЗначениеЗаполнено(Результат.КонтактноеЛицо) Тогда
				ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Результат.Корреспондент, Результат.КонтактноеЛицо);
				Получатель = Результат.Корреспондент;
				Адресат = Результат.КонтактноеЛицо;
			Иначе
				ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Результат.Корреспондент);
				Получатель = Результат.Корреспондент;
				Адресат = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	//актуализировать получателей в таблице получателей
	Если Не НесколькоПолучателей Тогда 
		Объект.Получатели.Очистить();
		Объект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(
			Объект.Получатели[0], 
			ЭтаФорма, 
			"Получатель, 
			|ПолучательЮрЛицо, 
			|Адресат, 
			|ПолученОтвет, 
			|Отправлен, 
			|ДатаОтправки, 
			|СпособОтправки, 
			|ВходящийНомер, 
			|ВходящаяДата,
			|ТребуетсяПодписьЭП");
	КонецЕсли;
	
	ДанныеПриИзмененииПолучателя = ПолучитьДанныеКорреспондентаИВозможностьОтправкиПоСВД(
		Объект,
		Получатель, 
		Объект.Организация, 
		Объект.ВидДокумента);
	
	ДанныеПолучателя = ДанныеПриИзмененииПолучателя.ДанныеПолучателя;
	ПолучательЮрЛицо = ДанныеПолучателя.КорреспондентЮрЛицо;
	
	Если ИспользоватьСВД Тогда
		НастроенОбменПоСВД = ДанныеПолучателя.НастроенОбменПоСВД;
		Если НастроенОбменПоСВД Тогда
			СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД")	
		Иначе
			СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
		КонецЕсли;
		ТребуетсяПодписьЭП = ДанныеПолучателя.ТребуетсяПодписьЭП;
	КонецЕсли;
	
	УстановитьВидимостьГотовКОтправке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Получатель) Тогда
			Если Найти(Текст, СокрЛП(Получатель)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Получатель))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Получатель);
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;
		Иначе
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Получатель) Тогда
			Если Найти(Текст, СокрЛП(Получатель)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Получатель))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Получатель);
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;	
		Иначе
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		КонецЕсли;	
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ПолучательТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с составом документа

&НаКлиенте
Процедура СоставСтрокаПриИзменении(Элемент)
	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СоставСтрока, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
    НачальныйСостав = СоставСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПоиска = НРег(Элемент.ТекстРедактирования);	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СтрокаПоиска, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
	
	// На случай возврата ошибки останавливаем вызов
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоЛистов", Объект.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Объект.КоличествоПриложений);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Объект.КоличествоЭкземпляров);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Объект.ЛистовВПриложениях);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставСтрокаНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.СоставДокумента", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
			
КонецПроцедуры
     
&НаКлиенте
Процедура СоставСтрокаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество() > 0 Тогда 
		Объект.КоличествоЛистов = Результат.КоличествоЛистов;
		Объект.КоличествоПриложений = Результат.КоличествоПриложений;
		Объект.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
		Объект.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
		
        ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиент.ПолучитьСтрокуСоставДокумента(Объект);
    НачальныйСостав = СоставСтрока;
		
КонецПроцедуры	
 
&НаКлиенте
Процедура СоставСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КоличествоЛистов = 0;
	Объект.КоличествоПриложений = 0;
	Объект.КоличествоЭкземпляров = 0;
	Объект.ЛистовВПриложениях = 0;

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Корреспонденты = Новый Массив;
	Для Каждого Строка Из Объект.Получатели Цикл
		Корреспонденты.Добавить(Строка.Получатель);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Корреспондент", 		Корреспонденты);
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
    //1С-Минск
	//ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
    //1С-Минск
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с делом документа

&НаКлиенте
Процедура ДелоТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДелоТекст) Тогда 
		Объект.Дело = Неопределено;
		ХранениеТекст = Неопределено;
	    ДелоТекст = Неопределено;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДелоТекстНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	Если Не ЗначениеЗаполнено(Объект.Дело) 
		И Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина) > 0 Тогда 
		
		ТекстВопроса = 
			НСтр("ru = 'По документу имеются невыполненные задачи.'") 
			+ Символы.ПС 
			+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Корреспонденты = Новый Массив;
		Для Каждого Строка Из Объект.Получатели Цикл
			Корреспонденты.Добавить(Строка.Получатель);
		КонецЦикла;	

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРегистрации", 		Объект.ДатаРегистрации);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
		ПараметрыФормы.Вставить("Корреспондент", 		Корреспонденты);
		ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
		ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.Дело);
		ПараметрыФормы.Вставить("НоменклатураДел", 		Объект.НоменклатураДел);
		ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);

		ДелопроизводствоКлиент.ВыбратьДело(Параметры.Элемент, ПараметрыФормы);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Дело = Неопределено;
	ХранениеТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДелоТекст) Тогда
		ПоказатьЗначение(, Объект.Дело);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Дело = ВыбранноеЗначение;
				
		Если ЗначениеЗаполнено(Дело) Тогда	
			
			Если Не ЗначениеЗаполнено(Объект.Дело) Тогда 
				КоличествоЗадач = Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина);
				Если КоличествоЗадач > 0 Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("Дело", Дело);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ДелоТекстОбработкаВыбораПродолжение",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = 
						НСтр("ru = 'По документу имеются невыполненные задачи.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Дело, "НоменклатураДел, МестоХранения"); 
			ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
				+ " " + СокрЛП(Дело);

			ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
					РеквизитыДела.МестоХранения), "")
				+ Делопроизводство.ПолучитьСостояниеДела(Дело);
		Иначе
			ХранениеТекст = Неопределено;
			ДелоТекст = Неопределено;
		КонецЕсли;	

		Объект.Дело = Дело;
        Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ХранениеТекст = Неопределено;
		ДелоТекст = Неопределено;
		Возврат;
	КонецЕсли;
	
	Дело = Параметры.Дело;
	РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Дело, "НоменклатураДел, МестоХранения"); 
	ДелоТекст = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДела.НоменклатураДел, "Индекс")) 
		+ " " + СокрЛП(Дело);

	ХранениеТекст = ?(ЗначениеЗаполнено(РеквизитыДела.МестоХранения),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дело находится: %1;'"), 
			РеквизитыДела.МестоХранения), "")
		+ Делопроизводство.ПолучитьСостояниеДела(Дело);	
		
	Объект.Дело = Дело;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с состоянием документа

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СостояниеТекстНачалоВыбораПродолжение",
		ЭтотОбъект);
		
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			ПараметрыЗаписи = Новый Структура("МассивСостояний", Результат);
			Если Не Записать(ПараметрыЗаписи) Тогда 
				Возврат;
			КонецЕсли;	
		Иначе
			ИзменитьСостояние(Объект.Ссылка, Результат);
			ОповеститьОбИзменении(Объект.Ссылка);			
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДляПросмотра", Истина);
	ОткрытьФорму("ОбщаяФорма.СостоянияДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;				
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПараметрыФормы = Новый Структура("ВнешнийРесурс", ТекущиеДанные.СвязаннаяСтрока);
		ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурса", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда 	
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Истина;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		
		НеПродолжатьСозданиеСвязи = Ложь;
		Если ОбязательныеТипыСвязей.Количество() <> 0 И
			ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
			НеПродолжатьСозданиеСвязи = Истина;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		Если НеПродолжатьСозданиеСвязи Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
	КонецЕсли;	
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе 
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель
	 Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить запись?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", Объект.Ссылка);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйДокумент", ТекущиеДанные.СвязанныйДокумент);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);	
		
		УдалитьСвязь(ПараметрыУдаления);
		
		ЗаполнитьСвязи();	
		
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Элементы.ДеревоСвязей.Развернуть(Строка.ПолучитьИдентификатор(), Истина)
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму("Справочник.ТипыСвязей.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.ДеревоСвязей);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	Иначе	
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Документ", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйДокумент", Элементы.ДеревоСвязей.ТекущиеДанные.СвязанныйДокумент);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", Элементы.ДеревоСвязей.ТекущиеДанные.СвязаннаяСтрока);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиДокументов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйДокумент = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйДокумент)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(Объект.Ссылка, СвязанныйДокумент) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("СвязанныйДокумент", СвязанныйДокумент);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиДокументов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "В ответ на"

&НаКлиенте
Процедура ВОтветНаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВОтветНа);
	
	Если Не НесколькоПолучателей Тогда 
		Если Не ЗначениеЗаполнено(Объект.Получатель) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Получатель""'"),,,"Объект.Получатель");
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Отправитель", Объект.Получатель));
		//Если Не ЗначениеЗаполнено(Получатель) Тогда
		//	ОчиститьСообщения();
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		НСтр("ru = 'Не заполнено поле ""Получатель""'"),,,"ПолучательТекст");
		//	Возврат;
		//КонецЕсли;
		//ПараметрыФормы.Вставить("Отбор", Новый Структура("Отправитель", Получатель));
	Иначе	
		МассивПолучателей = Новый Массив;
		Для каждого СтрокаПолучатель Из Объект.Получатели Цикл
			Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда 
				Если МассивПолучателей.Найти(СтрокаПолучатель.Получатель) = Неопределено Тогда
					МассивПолучателей.Добавить(СтрокаПолучатель.Получатель);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		
		Если Не ЗначениеЗаполнено(МассивПолучателей) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указано ни одного получателя в списке ""Получатели""'"),,,"Получатели.Получатель");
			Возврат;
		КонецЕсли;

		ПараметрыФормы.Вставить("Отбор", Новый Структура("Отправитель", МассивПолучателей));
	
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВходящиеДокументы.ФормаВыбора", ПараметрыФормы, Элементы.ВОтветНаСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	ПредметПереписки = Неопределено;
	ВОтветНа = Неопределено; 
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда
		ПоказатьЗначение(, ВОтветНа);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	ВОтветНа = ВыбранноеЗначение;
	Результат = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВОтветНа,
		"РегистрационныйНомер, ДатаРегистрации, Заголовок");
		
	Если ЗначениеЗаполнено(Результат.РегистрационныйНомер) И ЗначениеЗаполнено(Результат.ДатаРегистрации) Тогда
		ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '№ %1 от %2'"), Результат.РегистрационныйНомер, Формат(Результат.ДатаРегистрации, "ДЛФ=D"));			
	Иначе
		ВОтветНаСтрока = Результат.Заголовок;			
	КонецЕсли;		
	
//1С-Минск
    Если Не ЗначениеЗаполнено(ПредметПереписки) Тогда
    	ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(ВОтветНа, "ПредметПереписки");
    КонецЕсли; 
    //ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(ВОтветНа, "ПредметПереписки");
//Конец 1С-Минск 
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;		
		Отправитель = Неопределено;
	
		Если Не НесколькоПолучателей Тогда 
			Отправитель = Получатель;
		Иначе
			МассивПолучателей = Новый Массив;
			Для каждого СтрокаПолучатель Из Объект.Получатели Цикл
				Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда 
					Если МассивПолучателей.Найти(СтрокаПолучатель.Получатель) = Неопределено Тогда
						МассивПолучателей.Добавить(СтрокаПолучатель.Получатель);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  
			Отправитель = МассивПолучателей;
		КонецЕсли;

		ДанныеВыбора = ПолучитьВОтветНа(Текст, Отправитель);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;		
		Отправитель = Неопределено;
	
		Если Не НесколькоПолучателей Тогда 
			Отправитель = Получатель;
		Иначе
			МассивПолучателей = Новый Массив;
			Для каждого СтрокаПолучатель Из Объект.Получатели Цикл
				Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда 
					Если МассивПолучателей.Найти(СтрокаПолучатель.Получатель) = Неопределено Тогда
						МассивПолучателей.Добавить(СтрокаПолучатель.Получатель);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;  
			Отправитель = МассивПолучателей;
		КонецЕсли;

		ДанныеВыбора = ПолучитьВОтветНа(Текст, Отправитель);
	Иначе 
		ПредметПереписки = Неопределено;
		ВОтветНа = Неопределено; 
		ВОтветНаСтрока = Неопределено;  
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с визами согласования

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	РаботаСВизамиСогласованияКлиент.ДобавитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСВизамиСогласованияКлиент.ИзменитьВизу(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.ВизыСогласованияТаблица.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекущийПользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().АвторизованныйПользователь;
	ЭтоПолноправныйПользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСФайлами. ЭтоПолноправныйПользователь;
	
	ЗаполненныеВизы = Новый Массив;
	НезаполненныеВизы = Новый Массив;
	
	ТекстОшибки = "";
	Если Не ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки) Тогда 
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЗаполненныеВизы", ЗаполненныеВизы);
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияТаблицаПередУдалениемПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если ЗаполненныеВизы.Количество() > 0 Тогда 
		Если ЗаполненныеВизы.Количество() = 1 Тогда 
			ТекстВопроса = НСтр("ru = 'Виза с заполненным результатом будет помещена в историю согласования.'");
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с заполненным результатом будут помещены в историю согласования.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;

	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.ПоместитьВизыВИсторию(Параметры.ЗаполненныеВизы, ТекущийПользователь);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	
		
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НезаполненныеВизы", НезаполненныеВизы);
	СтруктураДанных.Вставить("ПерезаполнитьВизы", ПерезаполнитьВизы);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВизыСогласованияПродолжение",
		ЭтотОбъект,
		СтруктураДанных);	

	Если НезаполненныеВизы.Количество() > 0 Тогда 
		Если НезаполненныеВизы.Количество() = 1 Тогда
			ДанныеВизы = ВизыСогласованияТаблица.НайтиСтроки(Новый Структура("Ссылка", НезаполненныеВизы[0]))[0]; 
			Если ДанныеВизы.ПометкаУдаления Тогда
				ТекстВопроса = НСтр("ru = 'Удаленная виза будет восстановлена.'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Виза с незаполненным результатом согласования будет удалена.'");
			КонецЕсли;
		Иначе		
			ТекстВопроса = НСтр("ru = 'Визы с незаполненным результатом согласования будут удалены.
				|Удаленнные визы будут восстановлены.'");
		КонецЕсли;
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса,,"Продолжить");	
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВизыСогласованияПродолжение(Результат, Параметры) Экспорт 
	
	ПерезаполнитьВизы = Параметры.ПерезаполнитьВизы;
	НезаполненныеВизы = Параметры.НезаполненныеВизы;
	
	Если Результат = "Продолжить" Тогда 
		РаботаСВизамиСогласования.УдалитьВизы(НезаполненныеВизы);
		ПерезаполнитьВизы = Истина;
	КонецЕсли;	

	Если ПерезаполнитьВизы Тогда
		ЗаполнитьСписокВиз();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеВизы(Команда)
	
	ПоказыватьУдаленныеВизы = Не ПоказыватьУдаленныеВизы;
	Элементы.ВизыСогласованияТаблицаПоказыватьУдаленныеВизы.Пометка = ПоказыватьУдаленныеВизы;
	
    ЗаполнитьСписокВиз();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с инструкциями

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
		
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	
	КоличествоФайлов = Файлы.Количество();
	Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(Строка.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСозданиеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.ФайлыСоздание.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = Ложь;
	Если ВестиУчетСканКопийОригиналовДокументов Тогда
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда 
			
			Если Не ПараметрыДобавления.Свойство("ДобавлениеОригинала") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
					СостояниеТекст);
				
				СписокВариантовОтветов = Новый СписокЗначений;
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
				СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
				
				ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
				
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Элемент", Элемент);
				ПараметрыОбработчика.Вставить("Отказ", Отказ);
				ПараметрыОбработчика.Вставить("Копирование", Копирование);
				ПараметрыОбработчика.Вставить("Родитель", Родитель);
				ПараметрыОбработчика.Вставить("Группа", Группа);
				ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ФайлыПередНачаломДобавленияКлиентПродолжение",
					ЭтотОбъект,
					ПараметрыОбработчика);
				
				ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
					НСтр("ru = 'Добавление файла'"),
					Текст,
					"ДобавлениеОригинала",
					"ЗадаватьВопросПриДобавленииСканКопииОригинала",
					СписокВариантовОтветов,,
					ОписаниеОповещения);
				Возврат;
			Иначе
				ДобавлениеОригинала = ПараметрыДобавления.ДобавлениеОригинала;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если Элементы.Файлы.ТекущийЭлемент = Элементы.Оригинал Тогда 
			Возврат;
		КонецЕсли;	
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		Если Элементы.ФайлыСоздание.ТекущийЭлемент = Элементы.ОригиналСоздание Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.СозданПоШаблонуДокумента);
		Если Не РазрешеноУдаление Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();

КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.СозданИзШаблона Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОригиналПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));	
				
    Если ТекущиеДанные.Оригинал Тогда 
		Если Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ТекущиеДанные.Расширение) Тогда 
			ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
			|Вы действительно хотите отметить его как оригинал?'");
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Отметка оригинала'"));
		КонецЕсли;	
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
			Если ТекущиеДанные.Оригинал И Не ТекущиеДанные.ПометкаУдаления Тогда 
				УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
			Иначе
				Если Не Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ОтсутствуетОригинал = Истина;
					Для Каждого Строка Из Файлы Цикл
						Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
							ОтсутствуетОригинал = Ложь;
						КонецЕсли;	
					КонецЦикла;	
					Если ОтсутствуетОригинал Тогда 
						УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
			
		Если ДанныеФайла.РедактируетТекущийПользователь = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для просмотра файла запишите документ.'"));	
		Иначе	
			КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		КонецЕсли;	
		
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.ДобавленИзШаблона);
		Если Не РазрешеноУдаление Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = ФайлыДобавленные.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;

	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги											
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);										
					КоличествоФайлов = КоличествоФайлов+1;

				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиПолучательТекст") Тогда
		Элементы.ПолучателиПолучательТекст.ТолькоПросмотр = Не ТекущиеДанные.ПолучательЮрЛицо И ЗначениеЗаполнено(ТекущиеДанные.Получатель);
	КонецЕсли;
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиДатаОтправки") Тогда
		Элементы.ПолучателиДатаОтправки.ТолькоПросмотр = Не ТекущиеДанные.Отправлен;
	КонецЕсли;
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиСпособОтправки") Тогда
		Элементы.ПолучателиСпособОтправки.ТолькоПросмотр = ТекущиеДанные.Отправлен;
	КонецЕсли;
	Элементы.ПолучателиПолученОтвет.ТолькоПросмотр = Не ЗначениеЗаполнено(ТекущиеДанные.ПолученОтвет);
	
	УстановитьДоступностьТабличныхПолейПоЭП();
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ТекущиеДанные.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД")
		И Поле.Имя = "СтатусСВД"
		И ТекущиеДанные.СтатусСВД <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Получатель", Элемент.ТекущиеДанные.Получатель);
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("НазваниеОтправителя", 
			?(ЗначениеЗаполнено(Объект.Организация), Строка(Объект.Организация),НазваниеОрганизации));
		ПараметрыФормы.Вставить("ОтправительСсылка", Объект.Организация);
		ОткрытьФорму("ОбщаяФорма.СостояниеДокументаВСВД", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПолучательТекст) Тогда 
		ТекущиеДанные.Получатель = Неопределено;
		ТекущиеДанные.Адресат = Неопределено;	
		ТекущиеДанные.ПолучательТекст = Неопределено;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;                                                       
	ОткрытьФорму("ОбщаяФорма.ВыборКорреспондентаКонтактноеЛицо", Новый Структура("Получатель, Режим", ТекущиеДанные.Получатель, "КорреспондентыИСпискиРассылки"), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	ТекущиеДанные.Получатель = Неопределено;
	ТекущиеДанные.Адресат = Неопределено;
	ТекущиеДанные.ПолучательТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Адресат) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Адресат);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Получатель);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиРассылкиПоКорреспондентам") Тогда 
		ЭлементКоллекции = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		ЗаполнитьИсполнителейПоСпискуРассылки(ВыбранноеЗначение, Объект.Получатели.Индекс(ЭлементКоллекции));
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		ТекущиеДанные.Получатель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", ТекущиеДанные.Получатель, ВыбранноеЗначение);
		ТекущиеДанные.Адресат = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Корреспонденты") Тогда
		
		ТекущиеДанные.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		ТекущиеДанные.Получатель = ВыбранноеЗначение;
		ТекущиеДанные.Адресат = Неопределено;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Корреспондент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ТекущиеДанные.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", ВыбранноеЗначение.Корреспондент, ВыбранноеЗначение.КонтактноеЛицо);
			ТекущиеДанные.Получатель = ВыбранноеЗначение.Корреспондент;
			ТекущиеДанные.Адресат = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ТекущиеДанные.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", ВыбранноеЗначение.Корреспондент);
			ТекущиеДанные.Получатель = ВыбранноеЗначение.Корреспондент;
			ТекущиеДанные.Адресат = Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеПриИзмененииПолучателя = ПолучитьДанныеКорреспондентаИВозможностьОтправкиПоСВД(
		Объект,
		ТекущиеДанные.Получатель, 
		Объект.Организация, 
		Объект.ВидДокумента);
		
	ДанныеПолучателя = ДанныеПриИзмененииПолучателя.ДанныеПолучателя;
    ТекущиеДанные.ПолучательЮрЛицо = ДанныеПолучателя.КорреспондентЮрЛицо;
	
	Если ИспользоватьСВД
		И ДанныеПолучателя.НастроенОбменПоСВД Тогда
		Если ДанныеПолучателя.НастроенОбменПоСВД Тогда
			ТекущиеДанные.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
		Иначе
			ТекущиеДанные.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
		КонецЕсли;
		ТекущиеДанные.ТребуетсяПодписьЭП = ДанныеПолучателя.ТребуетсяПодписьЭП;
	КонецЕсли;
	
	ВыбранноеЗначение = ТекущиеДанные.ПолучательТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
			Если Найти(Текст, СокрЛП(ТекущиеДанные.Получатель)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(ТекущиеДанные.Получатель))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(
					ТекстПоиска, ТекущиеДанные.Получатель);
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;	
		Иначе
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Получатель) Тогда
			Если Найти(Текст, СокрЛП(ТекущиеДанные.Получатель)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(ТекущиеДанные.Получатель))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(
					ТекстПоиска, ТекущиеДанные.Получатель);
			Иначе
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
			КонецЕсли;	
		Иначе
			ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателя(Текст);
		КонецЕсли;	
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ПолучательТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОтправленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если ТекущиеДанные.Отправлен Тогда
		ТекущиеДанные.ДатаОтправки = ТекущаяДата();
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СпособОтправки) Тогда
			ТекущиеДанные.СпособОтправки = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособОтправки");
		КонецЕсли;	
	Иначе
		ТекущиеДанные.ДатаОтправки = '00010101';
		ТекущиеДанные.СпособОтправки = Неопределено;
	КонецЕсли;	
	
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиДатаОтправки") Тогда
		Элементы.ПолучателиДатаОтправки.ТолькоПросмотр = Не ТекущиеДанные.Отправлен;
	КонецЕсли;	
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиСпособОтправки") Тогда	
		Элементы.ПолучателиСпособОтправки.ТолькоПросмотр = Не ТекущиеДанные.Отправлен;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Объект = Неопределено
		ИЛИ ТекущиеДанные.Объект.Пустая() Тогда
		
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыОбработкиДокументов

&НаКлиенте
Процедура ЭтапыОбработкиДокументовПройденПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ТекущиеДанные.ДатаПрохождения = ТекущаяДата();
		ТекущиеДанные.Установил = ТекущийПользователь;
	Иначе
		ТекущиеДанные.ДатаПрохождения = '00010101';
		ТекущиеДанные.Установил = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОбработкиДокументовКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияЭтапаЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияЭтапаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭтапыОбработкиДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура МногоПолучателей(Команда)
	
	НесколькоПолучателей = Истина;
	
	Объект.Получатели.Очистить();
	Объект.Получатели.Добавить();
	ЗаполнитьЗначенияСвойств(Объект.Получатели[0], ЭтаФорма, "ПолучательТекст, Получатель, ПолучательЮрЛицо, Адресат, ПолученОтвет, Отправлен, ДатаОтправки, СпособОтправки, ВходящаяДата, ВходящийНомер, ТребуетсяПодписьЭП");
	
	УстановитьВидимостьПолучателей();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПолучатели;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинПолучатель(Команда)
	
	НесколькоПолучателей = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинПолучательПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Получатели.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все получатели, кроме первого, будут удалены. 
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинПолучательПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НесколькоПолучателей = Истина;
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Пока Объект.Получатели.Количество() > 1 Цикл
			Объект.Получатели.Удалить(1);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
	Если Объект.Получатели.Количество() > 0 Тогда 	
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.Получатели[0], "ПолучательТекст, Получатель, ПолучательЮрЛицо, Адресат, ПолученОтвет, Отправлен, ДатаОтправки, СпособОтправки, ВходящаяДата, ВходящийНомер, ТребуетсяПодписьЭП");
		
		Объект.Получатель = Объект.Получатели[0].Получатель;
		Объект.Адресат = Объект.Получатели[0].Адресат;
		
		Объект.Получатели.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьПолучателей();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;

КонецПроцедуры	

&НаКлиенте
Процедура Подписать(Команда)
	
	//МиСофт удалено
	
	Если ЕстьЗашифрованныеИлиЗанятыеФайлы Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ с зашифрованными или занятыми файлами.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьПродолжение",
		ЭтотОбъект);
		
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Подписать"" возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПродолжение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗавершение",
		ЭтотОбъект);
		
	РаботаСЭПКлиент.СформироватьПодписьОбъекта(
		Объект.Ссылка,
		УникальныйИдентификатор, 
		МассивДанныхДляЗанесенияВРегистр,
		МассивАдресов,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	МассивАдресов = Результат.МассивАдресов;
	
	ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов);
	
	РаботаСЭПКлиент.ИнформироватьОПодписании(МассивДанныхДляЗанесенияВРегистр, Объект.Ссылка);
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);

	Если НесколькоПолучателей Тогда
		Текст = НСтр("ru = 'Во время заполнения формы будут удалены все получатели.
			|Продолжить выполнение операции?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет, 0);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Ответ, Параметры)Экспорт 

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПоШаблонуПродолжениеПослеВыбораШаблона",
			ЭтотОбъект);
			
		РаботаСШаблонамиДокументовКлиент.ПоказатьФормуЗаполненияДокументаПоШаблону(
			ОписаниеОповещения,
			"ШаблоныИсходящихДокументов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжениеПослеВыбораШаблона(Результат, Параметры)Экспорт 

	Если Результат <> Неопределено И ТипЗнч(Результат) <> Тип("Строка") Тогда
		ЗаполнитьПоШаблонуВыполнить(Результат.ШаблонДокумента);	
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено доступных шаблонов исходящих документов.'"));		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьСрокДействияСвязанногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Учет изменения срока действия
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор связанного документа'"));
	ПараметрыОткрытия.Вставить("СвязанныйДокумент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ФормаСоздатьВидимость", Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьИерархию", Ложь);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, "ПодборСвязанногоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ИсторияВизСогласования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласования(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияПродолжение",
		ЭтотОбъект);	

	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Лист согласования"" возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияПродолжение(Результат, Параметры)Экспорт  

	Если Результат = КодВозвратаДиалога.Отмена Тогда  
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ИсходящиеДокументы",
		"ЛистСогласования",
		МассивДокументов,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВиз(Команда)
	
	ЗаполнитьСписокВиз();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
		
		Если СписокКатегорийДанных.Количество() = 0 Тогда 
			СтатусКатегории = 0;
			Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ЧисловойНомер = 0;
	ДатаРегистрации = Дата(1,1,1);
	РегистрационныйНомер = "";
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Регистрация", Истина);
	Попытка
		Записать(ПараметрыЗаписи);
	Исключение
		Если ЗначениеЗаполнено(ЧисловойНомер) Тогда
			КомпенсацияРегистрации();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорий()
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	КонецЕсли;

	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкод(Команда)
	
	ШтрихкодированиеКлиент.ВставитьШтрихкод(ЭтаФорма);

КонецПроцедуры   

&НаКлиенте
Процедура ВставитьРегистрационныйШтамп(Команда)

	ШтрихкодированиеКлиент.ВставитьРегистрационныйШтамп(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Документ еще не записан и не имеет связей.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ОткрытьФайл(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПараметрыФормы = Новый Структура("ВнешнийРесурс", ТекущиеДанные.СвязаннаяСтрока);
		ОткрытьФорму("РегистрСведений.СвязиДокументов.Форма.ФормаВнешнегоРесурса", ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйДокумент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйДокумент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОткрытьДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор);
			
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайловДляОткрытия(
			МассивФайлов, 
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Файлы

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		РаботаСФайламиКлиент.РедактироватьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
		ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		ЭтаФорма.УникальныйИдентификатор,
		ТекущиеДанные.ХранитьВерсии,
		ТекущиеДанные.РедактируетТекущийПользователь,
		ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		ТекущиеДанные.ХранитьВерсии,
		ТекущиеДанные.РедактируетТекущийПользователь,
		ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск", ПараметрыФормы,,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайлов(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеОперации", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСписокФайловПослеОперации(Результат, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлДаннымиДокумента(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			ТекущийФайл, 
			Истина, 
			УникальныйИдентификатор);
	#Иначе
		ДанныеВыполнения = ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл);
	#КонецЕсли
	
	Если ДанныеВыполнения.Результат Тогда
		Прочитать();
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'");
	Иначе
		ВызватьИсключение(ДанныеВыполнения.Описание);
	КонецЕсли;
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайлов();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Иначе	
		Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ПолучитьДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Рабочая группа

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуДокументаПродолжение",
		ЭтотОбъект);
		
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуДокументаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	РаботаСРабочимиГруппамиКлиент.ДокументПодобратьУчастниковРабочейГруппы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с электронной подписью

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнятьПроверкуЭПНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ВыполнятьПроверкуЭПНаСервере;
	
	ЕстьШифрованныеФайлы = РаботаСЭПКлиент.ЕстьШифрованныеФайлы(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей);
	
	Если ВыполнятьПроверкуЭПНаСервере И НЕ ЕстьШифрованныеФайлы Тогда
		ПроверитьНаСервере();
	Иначе
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
				, НСтр("ru = 'Проверить'"));
			Возврат;
		КонецЕсли;
		РаботаСЭПКлиент.Проверить(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор);
		ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)

	ВыполнятьПроверкуЭПНаСервере = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ВыполнятьПроверкуЭПНаСервере;

	ЕстьШифрованныеФайлы = РаботаСЭПКлиент.ЕстьШифрованныеФайлыСредиВсехПодписей(ТаблицаПодписей);

	Если ВыполнятьПроверкуЭПНаСервере И НЕ ЕстьШифрованныеФайлы Тогда
		ПроверитьВсеНаСервере();
	Иначе
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
				, НСтр("ru = 'Проверить все'"));
			Возврат;
		КонецЕсли;
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		ДанныеСтрок = РаботаСЭПКлиент.ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
		Для Каждого Строка Из ДанныеСтрок Цикл
			РаботаСЭПКлиент.ПроверитьОднуПодпись(Строка, МенеджерКриптографии, УникальныйИдентификатор);
		КонецЦикла;
		ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
		ОбновитьКартинкуЭП();
	КонецЕсли;

	ОповеститьОбИзменении(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ТаблицаПодписей.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ТаблицаПодписей.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеДляФайловПодписи, РасширениеДляФайловПодписи);
			
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
				
				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Подписать'"));
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("ПодписатьПослеФормированияПодписи", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.СформироватьПодписьФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПослеФормированияПодписи(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.Успех = Истина Тогда
		РаботаСФайламиВызовСервера.ЗанестиИнформациюОднойПодписи(Результат.ДанныеПодписи);
		
		ЭлектроннаяПодписьКлиент.ИнформироватьОПодписанииОбъекта(ПараметрыВыполнения.ДанныеФайла.Ссылка);
		Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ДанныеФайла.Владелец);
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиКлиент.ДобавитьПодписьИзФайла(Обработчик, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка);
	РаботаСФайламиКлиент.СохранитьСПодписью(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Зашифровать'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	

	ЗаполнитьСписокПодписей(); // т.к. параметр Зашифрован в таблице подписей изменился
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
			Неопределено,
			НСтр("ru = 'Расшифровать'"));
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.Расшифровать(
		Обработчик,
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.УказатьТрудозатраты,
		Ложь,
		ЭтаФорма); // Выполнена
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с инструкциями

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

// Заполняет список файлов в карточке документа
//
//	Параметры
//		ЗаполнитьПризнакОригинал - Булево - если Истина, то будет заполнен признак оригинала
//
&НаСервере
Процедура ЗаполнитьСписокФайлов(ЗаполнитьПризнакОригинал = Ложь)
	
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтаФорма, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

// Обновляет одну или несколько колонок в списке файлов
//
//	Параметры
//		Колонки - Строка - список колонок, которые нужно обновить
//
&НаСервере
Процедура ОбновитьКолонкиСпискаФайлов(Колонки)
	
	МассивФайлов = Файлы.Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТаблицаФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	Для Каждого Строка Из Файлы Цикл
		НайденнаяСтрока = ТаблицаФайлов.Найти(Строка.Ссылка, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, Колонки);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	Иначе	
		Элементы.ФайлыСоздание.ТекущаяСтрока = СтрокаИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный");
	
	Если ДоступноТолькоДобавлениеОригинала Или
		(ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(НайденнаяСтрока.Расширение) 
		И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, Объект.Ссылка);
	КонецЕсли;		
			
	Если НайденнаяСтрока.Оригинал 
		И Не НайденнаяСтрока.ПометкаУдаления
		И ОбязателенФайлОригинала 
		И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

// Обновляет данные одного файла в списке файлов документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

&НаСервере
Процедура АктивизироватьЭлемент()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
		Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
			Элементы.ВидДокумента.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Заголовок) Тогда
		Элементы.Заголовок.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Объект.Содержание) Тогда
		Элементы.Содержание.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Организация.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Подписал) Тогда
		Элементы.Подписал.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ПолучательТекст) Тогда
		Элементы.ПолучательТекст.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ИзменитьСостояние(Документ, МассивСостояний) 
	
	Для Каждого СтруктураСостояния Из МассивСостояний Цикл
		
		Если СтруктураСостояния.Состояние = СтруктураСостояния.НачальноеСостояние Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(Документ, СтруктураСостояния.Период, СтруктураСостояния.Состояние, СтруктураСостояния.Установил);
		Иначе
			Делопроизводство.ОчиститьСостояниеДокумента(Документ, СтруктураСостояния.НачальноеСостояние);
		КонецЕсли;
		
	КонецЦикла;	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Документ);
	
	// установка доступности
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Документ, ДоступныеПоля, НедоступныеПоля);
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоЗапрету();
	
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиОтправлен") Тогда
		Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда // документ зарегистрирован
			Элементы.ПолучателиОтправлен.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ПолучателиОтправлен.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
    ПолучитьИнструкции();
	ПолучитьОбзорДокумента();
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОбзорДокумента()
	
	Если Не ИспользоватьОбзорДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорИсходящегоДокумента(ЭтаФорма);
	
КонецПроцедуры 	

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеПриРегистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала(ПараметрыЗаписи) Экспорт

	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОСканКопииОригиналаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПеререгистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат);
	ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи(Результат, ПараметрыЗаписи) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		СвязанныйДокументДляНумерации = Неопределено;
		Возврат;
	КонецЕсли;
					
	Если ТипыВидыСвязанныхДокументовДляНумерации.Количество() = 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно указать связь ""%1"", так как связь данного типа не настроена для документов вида ""%2"".'"),
			ТипСвязиНумератора,
			Объект.ВидДокумента);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента",
		ЭтотОбъект,
		ПараметрыЗаписи);
	
	// Определение количества возможных типов связанного документа
	ТипСвязанногоДокументаСоставной = Ложь;
	ТипДляВыбора = ТипыВидыСвязанныхДокументовДляНумерации[0].Тип;
	Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
		Если СтрокаТипа.Тип <> ТипДляВыбора Тогда
			ТипСвязанногоДокументаСоставной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Открытие формы выбора связанного документа
	Если ТипСвязанногоДокументаСоставной Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДокументаДляСвязи", 
			Новый Структура("ТаблицаТипов", ТипыВидыСвязанныхДокументовДляНумерации),,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		// Заполнение отбора по виду документа
		МассивВидовДокументов = Новый Массив;
		Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
			
			Если ЗначениеЗаполнено(СтрокаТипа.Вид) Тогда 
				Если МассивВидовДокументов.Найти(СтрокаТипа.Вид) = Неопределено Тогда
					МассивВидовДокументов.Добавить(СтрокаТипа.Вид);
				КонецЕсли;
			Иначе
				// Настройка предусматривает любой вид документа, отбор не нужен
				МассивВидовДокументов.Очистить();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		Если МассивВидовДокументов.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДокумента", МассивВидовДокументов));
		КонецЕсли;
			
		Поз = Найти(ТипДляВыбора, ".");
		ИмяФормыВыбора = "Справочник." + Сред(ТипДляВыбора, Поз + 1) + ".ФормаВыбора";
		
		ОткрытьФорму(
			ИмяФормыВыбора, 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента(СвязанныйДокумент, ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанВопросОСозданииСвязи", Истина);
	Если Объект.Ссылка.Пустая() Тогда // связь будет добавлена при записи
		СвязанныйДокументДляНумерации = СвязанныйДокумент;
	Иначе // связь нужно добавить сейчас для корректного формирования номера
		СвязиДокументов.СоздатьСвязь(
			Объект.Ссылка, 
			СвязанныйДокумент, 
			ТипСвязиНумератора);
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеОтветаОВнесенииЗаписиВЖурналПередачи(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Параметры.НоваяСтрока.НеобходимоЗафиксироватьПередачу = Ложь;
	КонецЕсли;	
	ПараметрыЗаписи = Параметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("Передача" + Параметры.ИндексПолучателя, Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюКлиент(ПараметрыЗаписи, Отказ)
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ПредыдущийРегНомер = Объект.РегистрационныйНомер;
		ПредыдущаяДатаРегистрации = Объект.ДатаРегистрации;
		
		// Регистрация
		Если Не ДокументЗарегистрирован() Тогда 
			Если ОграничиватьДоступностьПолейПоСостоянию И
				Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеПриРегистрации") Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ДелопроизводствоКлиент.ПредупредитьПриРегистрации(ОбработчикОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если ОбязателенФайлОригинала Тогда 
				ОтсутствуетОригинал = Истина;
				Для Каждого Строка Из Файлы Цикл
					Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				Если ОтсутствуетОригинал Тогда 
					Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОСканКопииОригиналаДокумента") Тогда
						ОписаниеОповещения = Новый ОписаниеОповещения(
							"ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала",
							ЭтотОбъект,
							ПараметрыЗаписи);
						ПоказатьПредупреждение(
							ОписаниеОповещения, 
							НСтр("ru = 'Для документа требуется обязательное наличие скан-копии оригинала.
								|Вы можете добавить ее в список файлов после регистрации документа.'"));
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПеререгистрации") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				ДелопроизводствоКлиент.ПредупредитьПриПеререгистрации(ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("ОтправленВОтветНа", 	ВОтветНа);
		СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
		СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
		
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураПараметров);
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;	
		
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Нумератор) Тогда		
			
			Если Не ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеУказанияРегистрационногоНомера",
					ЭтотОбъект,
					ПараметрыЗаписи);
				РегистрационныйНомер = Объект.РегистрационныйНомер;
				ДелопроизводствоКлиент.ВвестиСтрокуСЗаголовком(
					РегистрационныйНомер, 
					НСтр("ru = 'Укажите регистрационный номер'"), 
					"", 
					30,
					ОписаниеОповещения); 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи",
					ЭтотОбъект,
					ПараметрыЗаписи);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для регистрации документа необходимо заполнить связь ""%1"". Заполнить сейчас?'"),
						ТипСвязиНумератора);
						
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		СколькоНеЗаполненоСвязей = 
			ОбязательныеТипыСвязей.Количество() - ОбязательныеСвязи.Количество();
			
		ОбязательныеСвязиПараметр = Новый Массив;
		Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				
				ПараметрыСвязи = Новый Структура("ТипСвязи, СсылкаНа",
					Строка.ТипСвязи, Строка.СсылкаНа);
				
				ОбязательныеСвязиПараметр.Добавить(ПараметрыСвязи);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ПараметрыОповещенияСвязей = Новый Структура("ОбязательныеСвязи, ПараметрыЗаписи", 
			ОбязательныеСвязиПараметр, ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи",
			ЭтотОбъект,
			ПараметрыОповещенияСвязей);
			
		Корреспондент = Неопределено;
		Если Объект.Получатели.Количество() = 1 Тогда
			Корреспондент = Объект.Получатели[0].Получатель;
		КонецЕсли;	
			
		ПараметрыОткрытияФормы = Новый Структура(
			"Документ, ОбязательныеСвязи, Корреспондент, Организация, Проект", 
			Объект.Ссылка, ОбязательныеСвязиПараметр,
			Корреспондент, Объект.Организация, Объект.Проект);	
			
		ИмяФормыСозданияСвязи = "";	
		Если СколькоНеЗаполненоСвязей = 1 Тогда
			
			СтрокаПараметров = ОбязательныеСвязиПараметр[0];
			Если ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВнутренниеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВнутренниеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ВходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ИсходящиеДокументы")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ИсходящиеДокументы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Файлы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Мероприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Проекты.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ВходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ИсходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			КонецЕсли;	
			
		Иначе	
			ИмяФормыСозданияСвязи = "РегистрСведений.СвязиДокументов.Форма.СозданиеОбязательныхСвязей";
		КонецЕсли;	
			
		ОткрытьФорму(ИмяФормыСозданияСвязи, 
			ПараметрыОткрытияФормы, ЭтаФорма,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;	
	
	ОчиститьСообщения();
	
	Если Не НесколькоПолучателей Тогда 
		Объект.Получатели.Очистить();
		Объект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(Объект.Получатели[0], ЭтаФорма, "Получатель, ПолучательЮрЛицо, Адресат, ПолученОтвет, Отправлен, ДатаОтправки, СпособОтправки, ВходящийНомер, ВходящаяДата, ТребуетсяПодписьЭП");
	КонецЕсли;
	
	// отразить передачу предмета переписки в журнале передачи
	Если ЗначениеЗаполнено(ПредметПереписки) Тогда 
		СпособОтраженияПередачиКорреспонденту = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПерсональныеНастройкиРаботыСДокументами.СпособОтраженияПередачиКорреспонденту;
		Если СпособОтраженияПередачиКорреспонденту <> ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.НеОтражать") Тогда 
			
			СписокСтрокДляФиксацииПередачи.Очистить();
			Для Каждого Строка Из Объект.Получатели Цикл
				НоваяСтрока = СписокСтрокДляФиксацииПередачи.Добавить();
				НоваяСтрока.ИндексПолучателя = Объект.Получатели.Индекс(Строка);
				НоваяСтрока.НеобходимоЗафиксироватьПередачу = Истина;
				ДанныеСтроки = Новый Структура("Получатель, Адресат, Отправлен, ДатаОтправки");
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
				
				Если Не НеобходимоОтразитьПередачуДокументаКорреспонденту(ДанныеСтроки) Тогда 
					НоваяСтрока.НеобходимоЗафиксироватьПередачу = Ложь;
					Продолжить;
				КонецЕсли;	
					
				Если СпособОтраженияПередачиКорреспонденту <> ПредопределенноеЗначение("Перечисление.СпособыОтраженияПередачиКонтрагенту.Автоматически")
					И Не ПараметрыЗаписи.Свойство("Передача" + Строка(НоваяСтрока.ИндексПолучателя)) Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("ИндексПолучателя", Строка(НоваяСтрока.ИндексПолучателя));
					ПараметрыОбработчика.Вставить("НоваяСтрока", НоваяСтрока);
					ПараметрыОбработчика.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПередЗаписьюПослеОтветаОВнесенииЗаписиВЖурналПередачи",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Внести запись в журнал передачи о передаче документа %1 контактному лицу %2?'"), Строка(ПредметПереписки), Строка(Строка.Адресат));
						
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да); 
					Отказ = Истина;
					Возврат;
				КонецЕсли;					
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ВыбранныеОбязательныеСвязи = Результат; // массив
		
		Для Каждого Строка Из ВыбранныеОбязательныеСвязи Цикл
		
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			Отбор.Вставить("СсылкаНа", Строка.СсылкаНа);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				Строки[0].СвязанныйДокумент = Строка.СвязанныйДокумент;
			ИначеЕсли Строки.Количество() = 0 Тогда
				
				НоваяСтрока = ОбязательныеСвязи.Добавить();
				НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
				НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
				НоваяСтрока.СвязанныйДокумент = Строка.СвязанныйДокумент;
				НоваяСтрока.НужноЗаписать = Истина;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		Записать(Параметры.ПараметрыЗаписи);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда 
		Оповестить("ДокументСоздан", Объект.Ссылка, ЭтаФорма);
		НовыйДокумент = Ложь;
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("ДокументИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(ВОтветНа) Тогда 
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Документ", ВОтветНа);
		ПараметрОповещения.Вставить("СвязанныйДокумент", Объект.Ссылка);
		
		Оповестить("ОтправленВОтветНаУстановлен", ПараметрОповещения, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;
	
	// оповестить об установке связи
	Если УстановитьСвязь Тогда 
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Документ", Документ);
		ПараметрОповещения.Вставить("СвязанныйДокумент", СвязанныйДокумент);
		ПараметрОповещения.Вставить("ТипСвязи", ТипСвязи);
		
		Оповестить("УстановленаСвязь", ПараметрОповещения, ЭтаФорма);
	КонецЕсли;
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;

	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
	#Если НЕ ВебКлиент Тогда
	//Выполнить автозаполнение файлов, которые должны заполняться на клиенте
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
			ДвоичныеДанныеЗаполненногоФайла = Неопределено;
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеШаблона,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.НастройкиЗамены,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанные);
			КонецЕсли;
			
			Если ФайлДляАвтоЗаполнения.Штрихкодирование
				И ФайлДляАвтоЗаполнения.НастройкиЗаполнения.Количество() > 1 Тогда
				ДанныеШК = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[1].Значение;
				Если Не ДанныеШК.Свойство("СообщениеОбОшибке") 
					ИЛИ Не ЗначениеЗаполнено(ДанныеШК.СообщениеОбОшибке) Тогда
					
					Если ДвоичныеДанныеЗаполненногоФайла = Неопределено Тогда
						ДвоичныеДанныеЗаполненногоФайла = ДанныеШК.ДвоичныеДанныеФайла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДвоичныеДанныеЗаполненногоФайла) Тогда 
						РезультатВставкиШтрихкода = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлДляАвтоЗаполнения.Файл,
						НСтр("ru = 'ВставитьИзображениеШтрихкода'"), 
						Истина, 
						ДанныеШК.ДвоичныеДанныеИзображения, 
						ДвоичныеДанныеЗаполненногоФайла,
						ДанныеШК.Расширение,
						ДанныеШК.ФайлРедактируется,
						ДанныеШК.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеШК.НастройкиШтрихкода.ВысотаШК,
						УникальныйИдентификатор,
						Ложь);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатВставкиШтрихкода) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанныеЗаполненногоФайла = РезультатВставкиШтрихкода;
			КонецЕсли;
			
			Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
				ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
				ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДанныеФайла.ТекущаяВерсия;
				МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);	
			КонецЕсли;
			
		КонецЦикла;
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
		
	КонецЕсли;
	#КонецЕсли
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленных) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленных);
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленных);
		ТекущийФайлВСпискеДобавленных = Неопределено;
	КонецЕсли;
	
	//Регистрация 
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ВыполняетсяРегистрация = Ложь;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ зарегистрирован:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
		ИнтерактивныйЗапускБизнесПроцессовКлиент.ВыполнитьИнтерактивныйЗапускБизнесПроцесса(
			ШаблоныДляАвтоЗапускаРегистрация, Объект.Ссылка, "Регистрация", ЭтаФорма, Ложь, Ложь);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ОбновитьСписокДокументовДляОтправкиПоСВД")
		И ПараметрыЗаписи.ОбновитьСписокДокументовДляОтправкиПоСВД Тогда
		
		Оповестить("ОбновитьСписокДокументовДляОтправкиПоСВД");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГруппыНаСервере()
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьСрокИсполнения(ТекущийОбъект)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСрокИсполненияВИсходящих", Новый Структура("ВидИсходящегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		СрокИсполненияДней = ТекущийОбъект.ВидДокумента.СрокИсполнения;
		Если Не ЗначениеЗаполнено(ТекущийОбъект.СрокИсполнения) И ЗначениеЗаполнено(СрокИсполненияДней) Тогда 
			ТекущийОбъект.СрокИсполнения = ТекущийОбъект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	Прочитать();
	УстановитьДоступностьПолей();
	ЗаполнитьСписокПодписей();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаДокумента()
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения, Ложь) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента");
		
		Объект.ВидДокумента = Неопределено;
		Возврат;
		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда // документ зарегистрирован
		УстановитьСрокИсполнения(Объект);
	КонецЕсли;
	
	// реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидИсходящегоДокумента", Объект.ВидДокумента));
	
	НеобходимоНапечататьШтрихкодПриСоздании = Объект.ВидДокумента.НеобходимаПечатьШтрихкода;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(Объект.ВидДокумента) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВИсходящих", 
		Новый Структура("ВидИсходящегоДокумента", Объект.ВидДокумента)) Тогда 
		Объект.Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
	// доступность реквизитов регистрации
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Обработчик механизма "Свойства"
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	
	Если ИспользоватьСВД Тогда
		Если Элементы.Получатели.Видимость = Истина	И Объект.Получатели.Количество() >= 1 Тогда
			// Установка способа отправки			
			Для каждого ОдинПолучатель Из Объект.Получатели Цикл
				Если ЗначениеЗаполнено(ОдинПолучатель.Получатель) Тогда
					НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(ОдинПолучатель.Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
					Если НастроенОбменПоСВД Тогда
						ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
					Иначе
						ОдинПолучатель.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
		ИначеЕсли Элементы.Получатели.Видимость = Ложь И Объект.Получатели.Количество() = 1 Тогда	
			// Установка способа отправки
			НастроенОбменПоСВД = СКорреспондентомНастроенОбменПоСВД(Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД;
			Если НастроенОбменПоСВД Тогда
				СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");	
			Иначе
				СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РабочаяГруппаТекст = Делопроизводство.СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента);
	РабочаяГруппаПодпись = Делопроизводство.СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(Объект.ВидДокумента);
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	ПолучитьИнструкции();
	
	// ЭтапыОбработкиДокумента
	Элементы.ГруппаЭтапы.Видимость = Объект.ВидДокумента.ИспользоватьЭтапыОбработкиДокумента;
	Делопроизводство.ПрочитатьЭтапы(ЭтаФорма);
	
	ВключитьАвтоотметкуИЗаполнитьПолеОтветственный();
	Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
	
КонецПроцедуры	

&НаСервере
Процедура ВключитьАвтоотметкуИЗаполнитьПолеОтветственный()
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
			ВидДокумента, "ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного Тогда	
			
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
				Объект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;	
			
		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДатыРегистрации()
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	
	Если Нумерация.ПроверитьСменуПериодаНумерации(Объект.ДатаРегистрации, НачальнаяДатаРегистрации, Нумератор) Тогда 
		ОсвободитьНомерДокумента(Объект, НачальнаяДатаРегистрации);
		СформироватьЧисловойНомерДокумента(Объект);
		СформироватьСтроковыйНомерДокумента(Объект);
		Если Не Записать() Тогда 
			ОсвободитьНомерДокумента(Объект, Объект.ДатаРегистрации);
		КонецЕсли;
	Иначе
		СформироватьСтроковыйНомерДокумента(Объект);
	КонецЕсли;	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьИсполнителейПоСпискуРассылки(СписокРассылки, НачальнаяСтрока = Неопределено)
	
	ПолучателиКоличество = СписокРассылки.Получатели.Количество();
	Если ПолучателиКоличество = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Инд = 0 По ПолучателиКоличество - 1 Цикл
		Если НачальнаяСтрока = Неопределено Тогда 
			НоваяСтрока = Объект.Получатели.Добавить();
		Иначе
			НоваяСтрока = Объект.Получатели.Вставить(НачальнаяСтрока + Инд);
		КонецЕсли;	
		НоваяСтрока.Получатель = СписокРассылки.Получатели[Инд].Получатель;
		НоваяСтрока.Адресат = СписокРассылки.Получатели[Инд].Адресат;
		НоваяСтрока.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(НоваяСтрока.Получатель);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Получатель) И ЗначениеЗаполнено(НоваяСтрока.Адресат) Тогда
			НоваяСтрока.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", НоваяСтрока.Получатель, НоваяСтрока.Адресат);
		Иначе
			НоваяСтрока.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", НоваяСтрока.Получатель);
		КонецЕсли;
	КонецЦикла;	
	Если НачальнаяСтрока <> Неопределено Тогда 
		Объект.Получатели.Удалить(НачальнаяСтрока + ПолучателиКоличество);
	КонецЕсли;	
	
	Если Не НесколькоПолучателей Тогда 
		
		Если Объект.Получатели.Количество() = 1 Тогда 
			ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.Получатели[0], "Получатель, ПолучательЮрЛицо, Адресат, ПолученОтвет, Отправлен, ДатаОтправки, СпособОтправки, ВходящийНомер, ВходящаяДата");
		Иначе	
			НесколькоПолучателей = Истина;
			УстановитьВидимостьПолучателей();
		КонецЕсли;
		
	КонецЕсли;	
	
	Для Каждого Строка Из Объект.Получатели Цикл
		Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
		Строка.ТребуетсяПодписьЭП = 
			СКорреспондентомНастроенОбменПоСВД(
				Строка.Получатель, 
				Объект.Организация, 
				Объект.ВидДокумента).ТребуетсяПодписьЭП;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
		
КонецПроцедуры

&НаСервере
Процедура ОтразитьПередачуДокументаКорреспонденту(Строка, ТекстСообщения = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА 
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.ТипЭкземпляра = &ТипЭкземпляра
	|	И ЖурналПередачиДокументов.НомерЭкземпляра = &НомерЭкземпляра
	|	И НЕ ЖурналПередачиДокументов.Возвращен";
	
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	Запрос.УстановитьПараметр("ТипЭкземпляра", Перечисления.ТипыЭкземпляров.Оригинал);
	Запрос.УстановитьПараметр("НомерЭкземпляра", 1);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оригинал документа ""%1"" уже отмечен как переданный. 
				|Отразите передачу документа вручную' "),
			ПредметПереписки);
		Возврат;	
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Строка.ДатаОтправки;
	МенеджерЗаписи.Документ = ПредметПереписки;
	МенеджерЗаписи.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал;
	МенеджерЗаписи.НомерЭкземпляра = 1;
	МенеджерЗаписи.Пользователь = Строка.Адресат;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолученОтвет()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПолученыОтветы = СвязиДокументов.ПолучитьСвязанныеДокументы(Объект.Ссылка, Справочники.ТипыСвязей.ПолученОтвет);
		
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Строка Из ПолученыОтветы Цикл
			
			Если Не ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Строка) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("Получатель", Строка.Отправитель);
			НайденныеСтроки = Объект.Получатели.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 1  Тогда 
				НайденныеСтроки[0].ПолученОтвет = Строка.Ссылка;
			Иначе
				ПараметрыОтбора = Новый Структура("Получатель, Адресат", Строка.Отправитель, Строка.Подписал);
				НайденныеСтроки = Объект.Получатели.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда 
					НайденныеСтроки[0].ПолученОтвет = Строка.Ссылка;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтроля()
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с визами

&НаСервере
Процедура ЗаполнитьСписокВиз()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		РаботаСВизамиСогласования.ЗаполнитьСписокВиз(ЭтаФорма, ПоказыватьУдаленныеВизы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ВыделитьЗаполненныеВизы(ВыделенныеСтроки, ЗаполненныеВизы, НезаполненныеВизы, ТекстОшибки)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеПоВизе = ВизыСогласованияТаблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеПоВизе.Автор <> ТекущийПользователь И Не ЭтоПолноправныйПользователь Тогда 
			ТекстОшибки = НСтр("ru = 'Удалить визу может только ее автор или администратор!'");
			Возврат Ложь;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.Источник) Тогда 
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Не ДанныеПоВизе.Источник.Выполнена Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана задачей, находящейся на выполнении!'");
				Возврат Ложь;
			КонецЕсли;	
			Если ТипЗнч(ДанныеПоВизе.Источник) = Тип("БизнесПроцессСсылка.Согласование") И Не ДанныеПоВизе.Источник.Завершен Тогда 
				ТекстОшибки = НСтр("ru = 'Нельзя удалить визу, которая создана процессом, находящемся на выполнении!'");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ДанныеПоВизе.РезультатСогласования) Тогда 
			ЗаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		Иначе
			НезаполненныеВизы.Добавить(ДанныеПоВизе.Ссылка);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВОтветНа(ВОтветНаСтрока, Отправитель)
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Лев(ВОтветНаСтрока, 1) = "№" Тогда
		ВОтветНаСтрока = СокрЛП(Прав(ВОтветНаСтрока, СтрДлина(ВОтветНаСтрока)-1));
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Отправитель) Или Не ЗначениеЗаполнено(ВОтветНаСтрока)Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
		
	// Заполнение "в ответ на". Поиск по номеру или наименованию
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеДокументы.Ссылка
	|ИЗ
    |	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
    |ГДЕ
    |	(ВходящиеДокументы.РегистрационныйНомер ПОДОБНО &СтрокаПоиска
	|			ИЛИ ВходящиеДокументы.Заголовок ПОДОБНО &СтрокаПоиска)";

	Запрос.Параметры.Вставить("СтрокаПоиска", ВОтветНаСтрока + "%");
	Запрос.Параметры.Вставить("Отправитель", Отправитель);
	
	Если ТипЗнч(Отправитель) = Тип("Массив") Тогда
		Запрос.Текст = Запрос.Текст+"
		|	И ВходящиеДокументы.Отправитель В (&Отправитель)";
	Иначе
		Запрос.Текст = Запрос.Текст+"
		|	И ВходящиеДокументы.Отправитель = &Отправитель";
	КонецЕсли;	
				
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;	
	
    Возврат ДанныеВыбора;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКорреспондента(Получатель, Организация, ВидДокумента)
	
	ДанныеПолучателя = Делопроизводство.ПолучитьДанныеКорреспондента(Получатель);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСВД") Тогда
		ДанныеНастройкиОбменаСВД = СКорреспондентомНастроенОбменПоСВД(Получатель, Организация, ВидДокумента);
		ДанныеПолучателя.Вставить("НастроенОбменПоСВД", ДанныеНастройкиОбменаСВД.НастроенОбменПоСВД);
		ДанныеПолучателя.Вставить("ТребуетсяПодписьЭП", ДанныеНастройкиОбменаСВД.ТребуетсяПодписьЭП); 
	КонецЕсли;
	
	Возврат ДанныеПолучателя;
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	Если Не БыстрыйВыборВидаДокумента Тогда 
		СохраняемыеЭлементы.Вставить("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(Адресат) Тогда 
		СохраняемыеЭлементы.Вставить("ПолучательТекст", 
			СокрЛП(Получатель) + ", " + СокрЛП(Адресат));
	Иначе 
		СохраняемыеЭлементы.Вставить("ПолучательТекст", Получатель);
	КонецЕсли;

	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Функция НеобходимоОтразитьПередачуДокументаКорреспонденту(Строка)
	
	Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не Строка.Отправлен Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	НайденнаяСтрока = Объект.Ссылка.Получатели.Найти(Строка.Адресат, "Адресат");
	Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Отправлен Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Пользователь = &КонтактноеЛицо
	|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	Запрос.УстановитьПараметр("КонтактноеЛицо", Строка.Адресат);
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
//Работа с рабочей группой

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с шаблонами

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	ШаблоныДляАвтоЗапускаЗакрытиеКарточки = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(Перечисления.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоИсходящегоДокумента, 
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);	
	ШаблоныДляАвтоЗапускаРегистрация = ИнтерактивныйЗапускБизнесПроцессов.ПолучитьШаблоныДляАвтоЗапуска(Перечисления.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияИсходящегоДокумента, 
		Объект.ВидДокумента, Объект.Организация, Объект.Ссылка);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИзШаблона(ШаблонДокумента)
	
	ИсходящийДокументОбъект = РеквизитФормыВЗначение("Объект");
	АвтозаполнениеШаблоновФайловСервер.СкопироватьРеквизитыДокументаИзШаблона(ИсходящийДокументОбъект, ШаблонДокумента);
	ЗначениеВРеквизитФормы(ИсходящийДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолучателейИзШаблона(ШаблонДокумента)
	
	ШаблонПолучатели = ШаблонДокумента.Получатели;
	
	Если ШаблонПолучатели.Количество() > 0 Тогда
		ИсходящийДокументОбъект = РеквизитФормыВЗначение("Объект"); 
				
		Для Каждого СтрокаПолучатель Из ШаблонПолучатели Цикл
			Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда 
				ИсходящийДокументОбъект.Получатели.Очистить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ШаблонПолучатели.Количество() = 1 Тогда  
			Если ЗначениеЗаполнено(ШаблонПолучатели[0].Получатель) Тогда 
				НоваяСтрока = ИсходящийДокументОбъект.Получатели.Добавить();
				НоваяСтрока.Адресат = ШаблонПолучатели[0].Адресат;
				НоваяСтрока.Получатель = ШаблонПолучатели[0].Получатель;
				НоваяСтрока.СпособОтправки = ШаблонПолучатели[0].СпособОтправки;
			
			// Заполнение способа адресации, если получатели в шаблоне не заданы, но они есть в документе
			ИначеЕсли ИсходящийДокументОбъект.Получатели.Количество() > 0 
				И ЗначениеЗаполнено(ШаблонПолучатели[0].СпособОтправки) Тогда 
				Для Каждого СтрокаПолучатель Из ИсходящийДокументОбъект.Получатели Цикл
					СтрокаПолучатель.СпособОтправки = ШаблонПолучатели[0].СпособОтправки;
				КонецЦикла;
				
			// Заполнение способа адресации, если в документе нет получателей
			ИначеЕсли ЗначениеЗаполнено(ШаблонПолучатели[0].СпособОтправки) Тогда 
				НоваяСтрока = ИсходящийДокументОбъект.Получатели.Добавить();
				НоваяСтрока.СпособОтправки = ШаблонПолучатели[0].СпособОтправки;
			КонецЕсли;	
		Иначе
			Для Каждого СтрокаПолучатель Из ШаблонПолучатели Цикл
				Если ЗначениеЗаполнено(СтрокаПолучатель.Получатель) Тогда 
					НоваяСтрока = ИсходящийДокументОбъект.Получатели.Добавить();
					НоваяСтрока.Адресат = СтрокаПолучатель.Адресат;
					НоваяСтрока.Получатель = СтрокаПолучатель.Получатель;
					НоваяСтрока.СпособОтправки = СтрокаПолучатель.СпособОтправки;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ИсходящийДокументОбъект, "Объект");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументИзШаблона(ШаблонДокумента)
	
	АвтозаполнениеШаблоновФайловСервер.СкопироватьФайлыИзШаблонаДокумента(ШаблонДокумента, ФайлыДобавленные, Истина);
	ЗаполнитьРеквизитыИзШаблона(ШаблонДокумента);
	ЗаполнитьСписокПолучателейИзШаблона(ШаблонДокумента);
	
	//получатели
	Для Каждого Строка Из Объект.Получатели Цикл
		Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
		
		Если ЗначениеЗаполнено(Строка.Получатель) И ЗначениеЗаполнено(Строка.Адресат) Тогда
			Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", Строка.Получатель, Строка.Адресат);
		Иначе
			Строка.ПолучательТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", Строка.Получатель);
		КонецЕсли;			
	КонецЦикла;	
	НесколькоПолучателей = (Объект.Получатели.Количество() > 1);
	Если Не НесколькоПолучателей И Объект.Получатели.Количество() > 0 Тогда 
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.Получатели[0], "ПолучательТекст, Получатель, ПолучательЮрЛицо, Адресат, ПолученОтвет, Отправлен, ДатаОтправки, СпособОтправки, ВходящийНомер, ВходящаяДата");
	КонецЕсли;	
	УстановитьВидимостьПолучателей();
	
	Для Каждого Строка Из Объект.Получатели Цикл
		Строка.ПолучательЮрЛицо = Делопроизводство.КорреспондентЮрЛицо(Строка.Получатель);
		Строка.ТребуетсяПодписьЭП = 
			СКорреспондентомНастроенОбменПоСВД(
				Строка.Получатель, 
				Объект.Организация, 
				Объект.ВидДокумента).ТребуетсяПодписьЭП;
	КонецЦикла;
			
	//список файлов
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	Элементы.ДекорацияФайлы.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвтозаполненийШаблона(Файл, Шаблон, Документ)   
	СтруктураВозврата = Новый Структура("ВыполнятьНаСервере, РасширениеШаблона,НастройкиЗамены, ДанныеФайла, ДвоичныеДанные");
	НаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ПеремДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка);
	
	СтруктураВозврата.ВыполнятьНаСервере = НаСервере;
	СтруктураВозврата.РасширениеШаблона = НРег(Файл.ТекущаяВерсияРасширение);
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Файл;
	КонецЕсли;
		
	СтруктураВозврата.НастройкиЗамены = АвтозаполнениеШаблоновФайловСервер.ПолучитьМассивАвтозаполненийШаблона(Файл, Шаблон, Документ);
	СтруктураВозврата.ДанныеФайла = ПеремДанныеФайла;
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();	
	ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование + "." + ТекущаяВерсия.Расширение;
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловСервер.ПолучитьДвоичныеДанныеФайла(Файл);
	
	СтруктураВозврата.ДвоичныеДанные = ДвоичныеДанныеФайла;

	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоШаблонуВыполнить(ШаблонДокумента)
	
	ЗаполнитьДокументИзШаблона(ШаблонДокумента);
	ПриИзмененииВидаДокумента();
	Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
    Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
	
	//Копирование дополнительных реквизитов
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Для Каждого Реквизит Из ШаблонДокумента.ДополнительныеРеквизиты Цикл
			
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Реквизит);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.ЗначениеРеквизита;
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	// Рабочие группы
	Объект.Шаблон = ШаблонДокумента;
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл)
	
	Возврат АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
		Ложь,
		ТекущийФайл, 
		Истина, 
		УникальныйИдентификатор);
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьТабличныхПолейПоЭП()
	
	Если Объект.ПодписанЭП Тогда
		Для Каждого ЭлементФормы Из Элементы Цикл
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				Если КлючевыеПоляВТаблице.НайтиПоЗначению(ЭлементФормы.Имя) <> Неопределено Тогда
					ЭлементФормы.ТолькоПросмотр = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступностьКомандыОтправкиПоСВД(Знач Объект)
	
	Результат = Ложь;
	
	ИспользоватьСВД = РаботаССВД.ДоступнаРаботаСЭДО();
	
	Если ИспользоватьСВД 
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Получатели.Количество() > 0 Тогда
		
		Для Каждого ОдинПолучатель Из Объект.Получатели Цикл
			Если СКорреспондентомНастроенОбменПоСВД(ОдинПолучатель.Получатель, Объект.Организация, Объект.ВидДокумента).НастроенОбменПоСВД 
				И ОдинПолучатель.СпособОтправки = Справочники.СпособыДоставки.СВД Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе	
		Префикс = "Создание";
	КонецЕсли;

	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюНапечатать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюСохранитьВместеСЭП"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьШтрихкод"+Префикс], Ложь);		
	
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
				
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюНапечатать"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыРедактировать"+Префикс], НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыЗанять"+Префикс], Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  Не Редактирует.Пустая() И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], РазрешеноРедактирование);
				
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["Файлы"+Префикс+"КонтекстноеМеню"].ПодчиненныеЭлементы["ФайлыКонтекстноеМенюРаспознать"+Префикс], РасширениеПоддерживается И Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюПодписатьФайл"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);

        УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюДобавитьЭПИзФайла"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюСохранитьВместеСЭП"+Префикс], ПодписанЭП);
				
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗашифровать"+Префикс], Редактирует.Пустая() И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьШтрихкод"+Префикс], Редактирует.Пустая());

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер));
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВставитьРегистрационныйНомер"+Префикс], ЗначениеЗаполнено(Объект.РегистрационныйНомер));

		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
        УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюЗаполнитьФайлДаннымиДокумента"+Префикс], ТекущиеДанные.СозданИзШаблона И Редактирует.Пустая());
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) И Делопроизводство.ИспользоватьВидыИсходящихДокументов() Тогда // не известен вид нумерации
		Элементы.РегистрационныйНомер.Доступность = Ложь;
		Элементы.ДатаРегистрации.Доступность = Ложь;
		Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Зарегистрировать'");
		Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Ложь;
		Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
			Элементы.РегистрационныйНомер.Доступность = Истина;
			Элементы.ДатаРегистрации.Доступность = Истина;
			Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Перерегистрировать'");
			Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Истина;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Истина;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Истина;

		Иначе
			Элементы.РегистрационныйНомер.Доступность = Ложь;
			Элементы.ДатаРегистрации.Доступность = Ложь;
			Команды.Зарегистрировать.Подсказка = НСтр("ru = 'Зарегистрировать'");
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Элементы.ФайлыКонтекстноеМенюВставитьРегистрационныйНомерСоздание.Доступность = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
		Элементы.Отправлен.Доступность = Истина;
		Элементы.ДатаОтправки.Доступность = Отправлен;
		
		Элементы.ПолучателиОтправлен.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Отправлен.Доступность = Ложь;
		Элементы.ДатаОтправки.Доступность = Ложь;
		
		Элементы.ПолучателиОтправлен.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	УстановитьДоступностьПоСостоянию();
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоПравам();
	УстановитьДоступностьПоЗапрету();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭП()
	
	УстановитьТолькоПросмотр = Объект.ПодписанЭП;
	
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	УстановитьДоступностьПоСостояниюНеРаботает = ДоступныПолныеПрава ИЛИ НЕ ИспользоватьСостоянияДокументов;
	
	// если не ПодписанЭП - делаем доступными ключевые поля - только для роли ПолныеПрава
	// - для неполных прав сработает УстановитьДоступностьПоСостоянию
	Если Объект.ПодписанЭП ИЛИ (НЕ Объект.ПодписанЭП И УстановитьДоступностьПоСостояниюНеРаботает) Тогда
		
		МассивИмен = Справочники.ИсходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов();
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Элем Из Элементы Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
		
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Объект.Ссылка, ДоступныеПоля, НедоступныеПоля);
	
	Если ДоступныеПоля = "" Или ДоступныеПоля.Свойство("ПолучателиОтправлен") Тогда
		Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда // документ зарегистрирован
			Элементы.ПолучателиОтправлен.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ПолучателиОтправлен.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьПолучателей()
	
	Если НесколькоПолучателей Тогда 
		Элементы.Получатели.Видимость = Истина;
		Элементы.ДекорацияКому.Видимость = Истина;
		Элементы.ГруппаКому.ОтображатьЗаголовок = Ложь;
		Элементы.ПолучательТекст.Видимость = Ложь;
		Элементы.Получатель.Видимость = Ложь;
		Элементы.Адресат.Видимость = Ложь;
		Элементы.Отправлен.Видимость = Ложь;
		Элементы.ДатаОтправки.Видимость = Ложь;
		Элементы.СпособОтправки.Видимость = Ложь;
		Элементы.ПолученОтвет.Видимость = Ложь;
		Элементы.ВходящийНомер.Видимость = Ложь;
		Элементы.ВходящаяДата.Видимость = Ложь;
		Элементы.МногоПолучателей.Видимость = Ложь;
		Элементы.ПолучателиПолученОтвет.Видимость = Ложь;
		Для Каждого Строка Из Объект.Получатели Цикл
			Если ЗначениеЗаполнено(Строка.ПолученОтвет) Тогда 
				Элементы.ПолучателиПолученОтвет.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИспользоватьСВД Тогда
			ЗаполнитьСтатусыСВДВТаблицеПолучателей();
		КонецЕсли;
	Иначе
		Элементы.Получатели.Видимость = Ложь;
		Элементы.ДекорацияКому.Видимость = Ложь;
		Элементы.ГруппаКому.ОтображатьЗаголовок = Истина;
		//Элементы.ПолучательТекст.Видимость = Истина;
		Элементы.Получатель.Видимость = Истина;
		Элементы.Адресат.Видимость = Истина;
		Элементы.Отправлен.Видимость = Истина;
		Элементы.ДатаОтправки.Видимость = Истина;
		Элементы.СпособОтправки.Видимость = Истина;
		Элементы.ВходящийНомер.Видимость = Истина;
		Элементы.ВходящаяДата.Видимость = Истина;
		Элементы.МногоПолучателей.Видимость = Истина;
		Элементы.ДатаОтправки.Доступность = Отправлен;
		Элементы.ПолученОтвет.Видимость = ЗначениеЗаполнено(ПолученОтвет);
		Если ИспользоватьСВД Тогда
			УстановитьСтатусСВДПолучателя(Получатель);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьГотовКОтправке();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГотовКОтправке()
	
	Элементы.ГотовКОтправке.Видимость = Ложь;
	
	Если НесколькоПолучателей Тогда 
		Для Каждого Строка Из Объект.Получатели Цикл
			Если Строка.СпособОтправки = Справочники.СпособыДоставки.СВД Тогда
				Элементы.ГотовКОтправке.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияИсходящихДокументов") Или Отправлен Тогда
			Объект.ГотовКОтправке = Ложь;
			Возврат;
		КонецЕсли;
		Элементы.ГотовКОтправке.Видимость = (СпособОтправки = Справочники.СпособыДоставки.СВД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.Зарегистрировать.Доступность = Ложь;
			Элементы.ВизыСогласованияТаблица.ИзменятьСоставСтрок = Ложь;
			Элементы.ВизыСогласованияТаблица.ИзменятьПорядокСтрок = Ложь;
			Элементы.Оригинал.ТолькоПросмотр = Истина;
			Элементы.ОригиналСоздание.ТолькоПросмотр = Истина;
		ИначеЕсли Не ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияИсходящихДокументов", Объект.Ссылка) Тогда
			Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
			Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Ставит доступность полям, уже заполненным в шаблоне.
&НаСервере
Процедура УстановитьДоступностьПоЗапрету()
	
	Если ЗначениеЗаполнено(Объект.Шаблон) И Не РольДоступна("ПолныеПрава") Тогда 
		
		УстановитьПривилегированныйРежим(Истина);
		Шаблон = Объект.Шаблон;
		
		ЗапретитьИзменятьРеквизитыИзШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона");
			
		Если ЗапретитьИзменятьРеквизитыИзШаблона Тогда
			
			Если ЗначениеЗаполнено(Шаблон.ВидДокумента) Тогда
				Элементы.ВидДокумента.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Организация) Тогда
				Элементы.Организация.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.ГрифДоступа) Тогда
				Элементы.ГрифДоступа.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.ВопросДеятельности) Тогда
				Элементы.ВопросДеятельности.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Проект) Тогда
				Элементы.Проект.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Ответственный) Тогда
				Элементы.Ответственный.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.НоменклатураДел) Тогда
				Элементы.НоменклатураДел.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Шаблон.Подписал) Тогда
				Элементы.Подписал.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Если Шаблон.Получатели.Количество() <> 0 Тогда
				Элементы.Получатели.ТолькоПросмотр = Истина;
				Элементы.ПолучательТекст.ТолькоПросмотр = Истина;
				Элементы.МногоПолучателей.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;		
	
КонецПроцедуры		

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивФайловДляОбновления)
	
	Для Каждого ЗаполненныйФайл Из МассивФайловДляОбновления Цикл
		АвтозаполнениеШаблоновФайловСервер.ОбновитьВерсиюИзДвоичныхДанных(ЗаполненныйФайл.ДвоичныеДанные, ЗаполненныйФайл.ТекущаяВерсия);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект)
	
	ОбязателенФайлОригинала = ВестиУчетСканКопийОригиналовДокументов 
		И ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "ОбязателенФайлОригинала");
		
	Если ОбязателенФайлОригинала И ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда 
		
		НайденныеСтроки = Файлы.НайтиСтроки(Новый Структура("Оригинал, ПометкаУдаления", Истина, Ложь));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Истина;
		Иначе
			Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
		КонецЕсли;	
		
	Иначе	
		Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)
	
	Если Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		Элементы.ГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаСервере
Процедура ЗаполнитьСвязи()
	
	Делопроизводство.ЗаполнитьДеревоСвязейДокумента(ЭтаФорма);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьКлюч(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиДокументов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура УдалитьСвязь(Параметры)
	
	НаборЗаписей = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Документ);
	НаборЗаписей.Отбор.ТипСвязи.Установить(Параметры.ТипСвязи);
	НаборЗаписей.Отбор.СвязанныйДокумент.Установить(Параметры.СвязанныйДокумент);
	НаборЗаписей.Отбор.СвязаннаяСтрока.Установить(Параметры.СвязаннаяСтрока);
	НаборЗаписей.Записать();

КонецПроцедуры

&НаСервере
Процедура ПрочитатьСвязи(ТипыСвязей = Неопределено)
	
	Если ТипыСвязей = Неопределено
		Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ОтправленВОтветНа) <> Неопределено Тогда
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ОтправленВОтветНа);
		НачальноеВОтветНа = ВОтветНа;
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			Если ЗначениеЗаполнено(ВОтветНа.РегистрационныйНомер) И ЗначениеЗаполнено(ВОтветНа.ДатаРегистрации) Тогда
				ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ %1 от %2'"), ВОтветНа.РегистрационныйНомер, Формат(ВОтветНа.ДатаРегистрации, "ДЛФ=D"));			
			Иначе
				ВОтветНаСтрока = ВОтветНа.Заголовок;			
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВОтветНа)
		И (ТипыСвязей = Неопределено
		Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо) <> Неопределено) Тогда
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо);
		НачальноеВОтветНа = ВОтветНа;
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда 
			Если ЗначениеЗаполнено(ВОтветНа.РегистрационныйНомер) И ЗначениеЗаполнено(ВОтветНа.ДатаРегистрации) Тогда
				ВОтветНаСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ %1 от %2'"), ВОтветНа.РегистрационныйНомер, Формат(ВОтветНа.ДатаРегистрации, "ДЛФ=D"));			
			Иначе
				ВОтветНаСтрока = ВОтветНа.Заголовок;			
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	Если ТипыСвязей = Неопределено
		Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПредметПереписки) <> Неопределено Тогда
		ПредметПереписки = СвязиДокументов.ПолучитьСвязанныйДокумент(
			Объект.Ссылка,
			Справочники.ТипыСвязей.ПредметПереписки);
		НачальныйПредметПереписки = ПредметПереписки;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма свойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронной подписью

&НаСервере
Процедура ОбновитьКартинкуЭП()
	
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьЭПСервер(МассивДанныхДляЗанесенияВРегистр, МассивАдресов)
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов, УникальныйИдентификатор);
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	РаботаСЭП.ЗаполнитьСписокПодписей(Объект.Ссылка, ТаблицаПодписей, 
		УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП,ПодписанЭП");
		
КонецПроцедуры
	
&НаСервере
Процедура ПроверитьНаСервере()
	
	РаботаСЭП.ПроверитьНаСервере(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор);
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеНаСервере()
	
	РаботаСЭП.ПроверитьВсеНаСервере(ТаблицаПодписей, УникальныйИдентификатор);
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если Элементы.ТаблицаПодписей.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок(Ложь);
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ТаблицаПодписей.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	РаботаСЭП.УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, 
		Элементы.ТаблицаПодписей.ВыделенныеСтроки,
		Объект.Ссылка, ТаблицаПодписей, УникальныйИдентификатор, Элементы.ГруппаЭП);
		
	Если РеквизитПодписанИзменен Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаПодписей(ТекущиеДанные)
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ТаблицаПодписей.ПолучитьЭлементы().Количество() <> 0);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая());
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Регистрация документа

&НаСервере
Процедура КомпенсацияРегистрации()
	
	ОсвободитьНомерДокумента(Объект, ДатаРегистрации, ЧисловойНомер);
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
КонецПроцедуры

&НаКлиенте
Функция ДокументЗарегистрирован()
	
	Возврат ЗначениеЗаполнено(Объект.РегистрационныйНомер);
	
КонецФункции	

// Устанавливает доступность команд для поля ФайлыДобавленные (видно при создании по шаблону)
&НаСервере
Процедура УстановитьДоступностьКомандФайлыДобавленные()
	
	СозданИзШаблона = Истина;
	РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданИзШаблона);
	РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданИзШаблона);
	
	Элементы.РедактироватьДобавленныйФайл.Доступность = РазрешеноРедактирование;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Доступность = РазрешеноРедактирование;
	Элементы.ФайлыДобавленныеУдалить.Доступность = РазрешеноУдаление;
	Элементы.ФайлыДобавленныеКонтекстноеМенюУдалить.Доступность = РазрешеноУдаление;
	
КонецПроцедуры

&НаСервере
Процедура ОсвободитьНомерДокумента(ТекущийОбъект, ДатаРегистрации = Неопределено, ЧисловойНомер = Неопределено)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		СтруктураПараметров.Вставить("ДатаРегистрации", ДатаРегистрации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧисловойНомер) Тогда 
		СтруктураПараметров.Вставить("ЧисловойНомер", ЧисловойНомер);
	КонецЕсли;
	
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЧисловойНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ОтправленВОтветНа", 	ВОтветНа);
	СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
	СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
	
	Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ТекущийОбъект.ЧисловойНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроковыйНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ОтправленВОтветНа", 	ВОтветНа);
	СтруктураПараметров.Вставить("ПредметПереписки",	ПредметПереписки);
	СтруктураПараметров.Вставить("СвязанныйДокумент", 	СвязанныйДокументДляНумерации);
	
	Если НесколькоПолучателей Тогда 
		Если ТекущийОбъект.Получатели.Количество() > 0 И ЗначениеЗаполнено(ТекущийОбъект.Получатели[0].Получатель) Тогда 
			СтруктураПараметров.Вставить("Получатель", ТекущийОбъект.Получатели[0].Получатель);
		Иначе
			СтруктураПараметров.Вставить("Получатель", КорреспондентПустаяСсылка);
		КонецЕсли;	
	Иначе
		СтруктураПараметров.Вставить("Получатель", Получатель);
	КонецЕсли;
	
	ОписанияОшибок = Новый СписокЗначений;
	Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ТекущийОбъект.РегистрационныйНомер, ОписанияОшибок);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
			"Объект");
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.РегистрационныйНомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Возврат Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВИсходящих", Новый Структура("ВидИсходящегоДокумента", ТекущийОбъект.ВидДокумента)) Тогда 
		Если Не ЗначениеЗаполнено(Объект.НоменклатураДел) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"),,"Объект.НоменклатураДел");
			Возврат Ложь;	
		КонецЕсли;	
	КонецЕсли;	
		
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"),,,"Файлы");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьНаСервере(ТекущийОбъект, СообщениеОбОшибке, РегистрационныйНомер = "")
	
	// Проверяем права доступа
	Если Не ДокументооборотПраваДоступа.ЕстьРоль("РегистрацияИсходящихДокументов", ТекущийОбъект) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Вашего уровня прав недостаточно для регистрации этого исходящего документа.
                                  |Обратитесь к администратору.'");

		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;	
	
	Если РегистрационныйНомер = "" Тогда // сформировать автоматически
		
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
		
		// сформируем текущий номер
		СформироватьЧисловойНомерДокумента(ТекущийОбъект);
		СформироватьСтроковыйНомерДокумента(ТекущийОбъект);
		
	Иначе
		ТекущийОбъект.РегистрационныйНомер = РегистрационныйНомер;
		ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
		НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // успешно сформирован номер
		ТекущийОбъект.Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	Иначе	
		ТекущийОбъект.ДатаРегистрации = '00010101';
		НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	КонецЕсли;	
	
	УстановитьСрокИсполнения(ТекущийОбъект);
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	
	РегистрационныйНомер = ТекущийОбъект.РегистрационныйНомер;
	ЧисловойНомер = ТекущийОбъект.ЧисловойНомер;
	ДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
	
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	
	ПротоколированиеРаботыПользователей.ЗаписатьРегистрациюДокумента(Объект.Ссылка, РегистрационныйНомер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с СВД

&НаСервере
Процедура УстановитьСтатусСВДПолучателя(ПолучательДокумента)
	
	//Получение идентификатора хронологически последней сессии обмена по СВД
	ИдентификаторСессии = РаботаССВД.ПолучитьИдентификаторПоследнейСессииСВД(Объект.Ссылка, ПолучательДокумента);
	Если ИдентификаторСессии <> Неопределено Тогда
		Элементы.СостояниеПроцессаВСВД.Видимость = Истина;
		ТаблицаСостояний = РаботаССВД.ПолучитьИсториюСтатусовСессииСВД(Объект.Ссылка, ПолучательДокумента, ИдентификаторСессии);
		СписокНастроекВыводаСтатусов = Справочники.ВидыСостоянийДокументовВСВД.ПолучитьДанныеДляВыводаСостояний();
		Для Каждого СтрокаТаблицы Из ТаблицаСостояний Цикл
			Для Каждого ЭлементСписка Из СписокНастроекВыводаСтатусов Цикл
				Если ЭлементСписка.Значение.Состояние = СтрокаТаблицы.Состояние Тогда
					СостояниеПроцессаВСВД = ЭлементСписка.Значение.НомерВКоллекции;
					Элементы.СостояниеПроцессаВСВД.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Текущее состояние в СВД: %1'"), Строка(ЭлементСписка.Значение.Состояние));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Элементы.СостояниеПроцессаВСВД.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСВДВТаблицеПолучателей()
	
	СписокНастроекВыводаСтатусов = Справочники.ВидыСостоянийДокументовВСВД.ПолучитьДанныеДляВыводаСостояний();
	// Получение статусов сессий для каждого из корреспондентов
	Для Каждого ПолучательСтрока Из Объект.Получатели Цикл
		// Установка значения "не участвует в обмене по СВД"
		ПолучательСтрока["СтатусСВД"] = 0;
		
		//Получение идентификатора хронологически последней сессии обмена по СВД
		ИдентификаторСессии = РаботаССВД.ПолучитьИдентификаторПоследнейСессииСВД(Объект.Ссылка, ПолучательСтрока.Получатель);
		Если ИдентификаторСессии = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Установка действительных значений статусов
		ТаблицаСостояний = РаботаССВД.ПолучитьИсториюСтатусовСессииСВД(Объект.Ссылка, ПолучательСтрока.Получатель, ИдентификаторСессии);
		Для каждого СтрокаТаблицыСостояний Из ТаблицаСостояний Цикл
			Для Каждого ЭлементСтатус Из СписокНастроекВыводаСтатусов Цикл
				Если СтрокаТаблицыСостояний.Состояние = ЭлементСтатус.Значение.Состояние Тогда
					ПолучательСтрока["СтатусСВД"] = ЭлементСтатус.Значение.НомерВКоллекции;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		 
	КонецЦикла;
    Элементы.СостояниеПроцессаВСВД.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКорреспондентаИВозможностьОтправкиПоСВД(Знач Объект, Получатель, Организация, ВидДокумента)
	
	СтруктураВозврата = Новый Структура;
	ДанныеПолучателя = ПолучитьДанныеКорреспондента(Получатель, Объект.Организация, Объект.ВидДокумента);
	ДоступностьОтправкиПоСВД = ПолучитьДоступностьКомандыОтправкиПоСВД(Объект);
	
	СтруктураВозврата.Вставить("ДанныеПолучателя", ДанныеПолучателя);
	СтруктураВозврата.Вставить("ДоступностьОтправкиПоСВД", ДоступностьОтправкиПоСВД);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция СКорреспондентомНастроенОбменПоСВД(Корреспондент, Организация, ВидДокумента)
	
	Результат = Новый Структура("НастроенОбменПоСВД, ТребуетсяПодписьЭП", Ложь, Ложь);
	Настройка = РаботаССВД.НайтиПравилоОтправкиСообщенийСВД(Организация, Корреспондент, ВидДокумента);
	Если Настройка <> Неопределено Тогда
		Если Настройка.Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
			Результат.НастроенОбменПоСВД = Истина;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
				Результат.ТребуетсяПодписьЭП = Истина;
			КонецЕсли;
		Иначе
			МенеджерЗаписиРегистра = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
			МенеджерЗаписиРегистра.Адресат = Корреспондент;
			МенеджерЗаписиРегистра.Транспорт = Настройка.Транспорт;
			МенеджерЗаписиРегистра.Прочитать();
			Если МенеджерЗаписиРегистра.Выбран() Тогда
				Результат.НастроенОбменПоСВД = Истина;
				Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")
					И Настройка.Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.Сообщение1СДокументооборот") Тогда
					Результат.ТребуетсяПодписьЭП = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// Работа с инструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 102);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УстановитьВидимостьГотовКОтправке();
	
КонецПроцедуры

//{{1С-Минск
&НаСервере
Процедура ПолучитьСтоимостьОтправки()
    Если Константы.М_Брест.Получить() Тогда
        // Установка Стоимости отправки если такой допреквизит есть для выбранного вида документа
        //   устанавливаем один раз, если значение установлено - то не изменять!
        Отбор = Новый Структура("Наименование", "Стоимость отправки");
        МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
        Если МассивСтрок.Количество() > 0 Тогда
            СтрокаСвойства = МассивСтрок[0];    
            ЕстьСтоимость = ЭтаФорма[СтрокаСвойства.ИмяРеквизитаЗначение];
            Если ЕстьСтоимость = 0 Тогда
                ЭтаФорма[СтрокаСвойства.ИмяРеквизитаЗначение] = Константы.М_СтоимостьОтправки.Получить() * Объект.Получатели.Количество();
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлНаУдаление(Файл, ЗначениеПометкиУдаления)
	
	ОбъектФайл = Файл.ПолучитьОбъект();
	ОбъектФайл.Заблокировать();
	ОбъектФайл.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
	ОбъектФайл.Разблокировать();
	
	Если Не ПоказыватьУдаленныеФайлы Тогда 
		ЗаполнитьСписокФайлов();
	КонецЕсли;	
	
КонецПроцедуры	

//{{1С-Минск
&НаКлиенте
Процедура НоменклатураДелПриИзменении(Элемент)
    // Если документ зарегистрирован - надо его перерегистрировать с новой номенклатурой
    ИзменитьРегистрационныйНомерНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьРегистрационныйНомерНаСервере()
    СформироватьСтроковыйНомерДокумента(Объект);
КонецПроцедуры // ИзменитьРегистрационныйНомерНаСервере()
#КонецОбласти

&НаКлиенте
Процедура ПодписалИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Подписал = РаботаСПользователямиКлиент.ПолучитьПодписанта(Объект.Организация, Объект.ВидДокумента, Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	Получатель = Объект.Получатель;
	
	//актуализировать получателей в таблице получателей
	Если Не НесколькоПолучателей Тогда 
		Объект.Получатели.Очистить();
		Объект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(
			Объект.Получатели[0], 
			ЭтаФорма, 
			"Получатель, 
			|ПолучательЮрЛицо, 
			|Адресат, 
			|ПолученОтвет, 
			|Отправлен, 
			|ДатаОтправки, 
			|СпособОтправки, 
			|ВходящийНомер, 
			|ВходящаяДата,
			|ТребуетсяПодписьЭП");
	КонецЕсли;
	
	ДанныеПриИзмененииПолучателя = ПолучитьДанныеКорреспондентаИВозможностьОтправкиПоСВД(
		Объект,
		Объект.Получатель, 
		Объект.Организация, 
		Объект.ВидДокумента);
	
	ДанныеПолучателя = ДанныеПриИзмененииПолучателя.ДанныеПолучателя;
	ПолучательЮрЛицо = ДанныеПолучателя.КорреспондентЮрЛицо;
	
	Если ИспользоватьСВД Тогда
		НастроенОбменПоСВД = ДанныеПолучателя.НастроенОбменПоСВД;
		Если НастроенОбменПоСВД Тогда
			СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД")	
		Иначе
			СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.ПустаяСсылка");
		КонецЕсли;
		ТребуетсяПодписьЭП = ДанныеПолучателя.ТребуетсяПодписьЭП;
	КонецЕсли;
	
	УстановитьВидимостьГотовКОтправке();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатПриИзменении(Элемент)
	Адресат = Объект.Адресат;
	
	//актуализировать получателей в таблице получателей
	Если Не НесколькоПолучателей Тогда 
		Объект.Получатели.Очистить();
		Объект.Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(
			Объект.Получатели[0], 
			ЭтаФорма, 
			"Получатель, 
			|ПолучательЮрЛицо, 
			|Адресат, 
			|ПолученОтвет, 
			|Отправлен, 
			|ДатаОтправки, 
			|СпособОтправки, 
			|ВходящийНомер, 
			|ВходящаяДата,
			|ТребуетсяПодписьЭП");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Получатель, Режим", Объект.Получатель, "ТолькоКорреспонденты");
	ПараметрыФормы.Вставить("СтрокаПоиска", Элемент.ТекстРедактирования);
	ОткрытьФорму("ОбщаяФорма.ВыборКорреспондентаКонтактноеЛицо", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Корреспондент) Тогда
			Объект.Получатель = ВыбранноеЗначение.Корреспондент;
			Получатель = ВыбранноеЗначение.Корреспондент;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			Объект.Адресат = ВыбранноеЗначение.КонтактноеЛицо;
			Адресат = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			Адресат = Неопределено;
			Объект.Адресат = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Корреспонденты") Тогда 	
		
		Объект.Получатель = ВыбранноеЗначение;
		Получатель = ВыбранноеЗначение;
		Объект.Адресат = Неопределено;
		Адресат = Неопределено;	
	КонецЕсли;
КонецПроцедуры

