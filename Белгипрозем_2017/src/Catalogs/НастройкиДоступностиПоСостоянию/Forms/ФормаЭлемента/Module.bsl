


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДляВсехВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
	
	Поставляемый = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда 
		ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
		Для Каждого ОписаниеНастройки Из ОписаниеНастроекДоступности Цикл
			Если ОписаниеНастройки.Идентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор()) Тогда 
				Поставляемый = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Элементы.УстановитьСтандартныеНастройки.Видимость = Поставляемый;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда 
			Объект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Объект.ВариантНастройкиДляВидовДокументов) Тогда 
			Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов;
		КонецЕсли;
		Если Объект.ИспользоватьДля.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Справочники.ГруппыПользователей.ВсеПользователи;
		КонецЕсли;
	КонецЕсли;	
	НачальныйТипДокумента = Объект.ТипДокумента;
	
	Если Объект.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы
	 Или Объект.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
		Элементы.НастройкиДоступностиПредставлениеПоляКоманды.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	КонецЕсли;	
	
	ЗаполнитьНастройкиДоступности();
	
	ЗаполнитьВидыДокументов(Объект.Ссылка);
	ВывестиКоличествоВидовДокументов(
		Элементы.ГруппаВидыДокументов.Заголовок,
		ВидыДокументов.Количество());
		
	Если Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов Тогда 
		Элементы.ВидыДокументов.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если НачальныйТипДокумента <> Объект.ТипДокумента И Объект.Предопределенный Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(	
				НСтр("ru = 'Нельзя изменить тип документа для предопределенной настройки доступности по состоянию.'"),,
				"Объект.ТипДокумента",,
				Отказ);
			Возврат;
		КонецЕсли;
		
		Если (НачальныйТипДокумента <> Объект.ТипДокумента) 
			И ВидыДокументов.Количество() > 0 
			И Не ПараметрыЗаписи.Свойство("ПоказанВопросОбИзмененияТипаДокумента") Тогда 
			
			ТекстВопроса = НСтр("ru = 'При изменении типа документа будут очищены назначенные виды документов.
				|Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПоказаВопросаОбИзмененияТипаДокумента",
					ЭтотОбъект,
					ПараметрыЗаписи);
	
			ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	КоличествоСтрок = Объект.ИспользоватьДля.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = Объект.ИспользоватьДля[КоличествоСтрок - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			Объект.ИспользоватьДля.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	КоличествоСтрок = ВидыДокументов.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = ВидыДокументов[КоличествоСтрок - Инд];
		Если Не ЗначениеЗаполнено(Строка.ВидДокумента) Тогда 
			ВидыДокументов.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПоказаВопросаОбИзмененияТипаДокумента(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;	
	
	ВидыДокументов.Очистить();

	ПараметрыЗаписи.Вставить("ПоказанВопросОбИзмененияТипаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройкиДоступности(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВидыДокументов(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НачальныйТипДокумента = Объект.ТипДокумента;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидыДокументов");
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НастройкиДоступностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = НастройкиДоступности.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.НастройкиДоступностиПредставлениеПоляКоманды Тогда 
		Возврат;
	КонецЕсли;	
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, "НастройкиДоступности", "");
	ДоступностьПоля = ТекущиеДанные[ИмяКолонки];
	
	ДоступностьПоля = ДоступностьПоля + 1;
	Если ДоступностьПоля > 2 Тогда 
		ДоступностьПоля = 0;
	КонецЕсли;	
	
	ТекущиеДанные[ИмяКолонки] = ДоступностьПоля;
	ТекущиеДанные[ИмяКолонки + "Строкой"] = ДоступностьСтрокой(ДоступностьПоля);;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ЗаполнитьНастройкиДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийУчастник = Элементы.ИспользоватьДля.ТекущиеДанные.Участник;
	Если ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.РолиИсполнителей")
	 Или ТипЗнч(ТекущийУчастник) = Тип("Строка") 
	 Или ТекущийУчастник = Неопределено Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выбор пользователей для использования настроек доступности'"));
		ПараметрыФормы.Вставить("ВыбиратьГруппуПользователей", Ложь);
		ПараметрыФормы.Вставить("ПоказыватьФункции", Истина);
		ПараметрыФормы.Вставить("ПоказыватьФункцииДокумента", Истина);
		ПараметрыФормы.Вставить("Исполнитель", ТекущийУчастник);
		ОткрытьФорму("ОбщаяФорма.ВыборИсполнителя", ПараметрыФормы, Элементы.ИспользоватьДля);
		
	ИначеЕсли ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийУчастник);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбора", ПараметрыФормы, Элементы.ИспользоватьДля);
		
	ИначеЕсли ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.ГруппыДоступа") Тогда 	
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущийУчастник);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ГруппыДоступа.ФормаВыбора", ПараметрыФормы, Элементы.ИспользоватьДля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ТекущийУчастник = Элементы.ИспользоватьДля.ТекущиеДанные.Участник;
	Если ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ТекущийУчастник) = Тип("СправочникСсылка.РолиИсполнителей")
	 Или ТипЗнч(ТекущийУчастник) = Тип("Строка") Тогда 
		
		Если ЗначениеЗаполнено(Текст) Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИспользоватьДляОбработкаВыбораСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ИспользоватьДляМассив = Новый Массив;
	Для каждого Строка Из Объект.ИспользоватьДля Цикл
		Участник = Новый Структура;
		Участник.Вставить("Исполнитель", Строка.Участник);
		Участник.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		Участник.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		ИспользоватьДляМассив.Добавить(Участник);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор пользователей, для использования настроек доступности'"));
	ПараметрыФормы.Вставить("ВыбранныеЗаголовок", НСтр("ru = 'Выбранные пользователи'"));
	ПараметрыФормы.Вставить("Выбранные", ИспользоватьДляМассив);
	ПараметрыФормы.Вставить("ПодбиратьГруппыПользователей", Истина);
	ПараметрыФормы.Вставить("ПоказыватьРоли", Истина);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли", Ложь);
	ПараметрыФормы.Вставить("БезВнешнихРолей", Истина);
	ПараметрыФормы.Вставить("ПоказыватьФункции", Ложь);
	ОткрытьФорму("ОбщаяФорма.ПодборИсполнителей", ПараметрыФормы, Элементы.ИспользоватьДля);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	Если Объект.НастройкиДоступности.Количество() > 0 Тогда 
		
		ТекстВопроса = НСтр("ru = 'Настройки доступности будут заполнены стандартными значениями.
			|Продолжить?'");
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьСтандартныеНастройкиПродолжение",
			ЭтотОбъект);

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройкиПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьНастройкиПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВариантыНастройкиДоступностиДляВидовДокументовПриИзменении(Элемент)
	
	Если Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов Тогда 
		
		Элементы.ВидыДокументов.Доступность = Ложь;
		ВидыДокументов.Очистить();
		
	Иначе
		Элементы.ВидыДокументов.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ВидДокумента = Неопределено Тогда
		Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВходящиеДокументы") Тогда 
			Элемент.ТекущиеДанные.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВходящихДокументов.ПустаяСсылка");
		ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ИсходящиеДокументы") Тогда 
			Элемент.ТекущиеДанные.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыИсходящихДокументов.ПустаяСсылка");
		ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВнутренниеДокументы") Тогда 
			Элемент.ТекущиеДанные.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВывестиКоличествоВидовДокументов(
		Элементы.ГруппаВидыДокументов.Заголовок,
		ВидыДокументов.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "";
	Если Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВходящиеДокументы") Тогда 
		ИмяФормыВыбора = "Справочник.ВидыВходящихДокументов.ФормаВыбора";
	ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ИсходящиеДокументы") Тогда 
		ИмяФормыВыбора = "Справочник.ВидыИсходящихДокументов.ФормаВыбора";
	ИначеЕсли Объект.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ВнутренниеДокументы") Тогда 
		ИмяФормыВыбора = "Справочник.ВидыВнутреннихДокументов.ФормаВыбора";
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ТекущиеДанные = Элементы.ВидыДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ВидДокумента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяФормыВыбора) Тогда 
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элемент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	
	НоваяСтрока = Объект.ИспользоватьДля.Добавить();
	НоваяСтрока.Участник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Элементы.ИспользоватьДля.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ИспользоватьДля.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуПользователей(Команда)
	
	НоваяСтрока = Объект.ИспользоватьДля.Добавить();
	НоваяСтрока.Участник = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка");
	Элементы.ИспользоватьДля.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ИспользоватьДля.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуДоступа(Команда)
	
	НоваяСтрока = Объект.ИспользоватьДля.Добавить();
	НоваяСтрока.Участник = ПредопределенноеЗначение("Справочник.ГруппыДоступа.ПустаяСсылка");
	Элементы.ИспользоватьДля.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ИспользоватьДля.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДоступностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДоступностиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьНастройкиДоступности()
	
	ТаблНастройкиДоступности = РеквизитФормыВЗначение("НастройкиДоступности");
	ТаблНастройкиДоступности.Очистить();
	
	ТаблицаИмен = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности(Объект.ТипДокумента);
	Для Каждого Строка Из ТаблицаИмен Цикл
		НоваяСтрока = ТаблНастройкиДоступности.Добавить();
		НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
		НоваяСтрока.ПредставлениеПоляКоманды = Строка.ПредставлениеПоляКоманды;
	КонецЦикла;	
	
	Для Каждого Строка Из Объект.НастройкиДоступности Цикл
		НайденнаяСтрока = ТаблНастройкиДоступности.Найти(Строка.ИмяПоляКоманды, "ИмяПоляКоманды");
		Если НайденнаяСтрока = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
    	Индекс = Перечисления.СостоянияДокументов.Индекс(Строка.Состояние);
    	Имя = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления[Индекс].Имя;

		НайденнаяСтрока[Имя] = Строка.Доступность;
		НайденнаяСтрока[Имя + "Строкой"] = ДоступностьСтрокой(Строка.Доступность);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ТаблНастройкиДоступности, "НастройкиДоступности");
	
	ВсеСостояния = Новый Структура(
	"Проект, 
	|НаСогласовании, 
	|Согласован, 
	|НеСогласован, 
	|НаУтверждении, 
	|Утвержден, 
	|НеУтвержден, 
	|НаРегистрации, 
	|Зарегистрирован, 
	|НеЗарегистрирован, 
	|НаРассмотрении, 
	|Рассмотрен, 
	|НаИсполнении, 
	|Исполнен");
	
	Если Объект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
		
		ДоступныеСостояния = Новый Структура(
		"НаРегистрации, 
		|Зарегистрирован, 
		|НеЗарегистрирован, 
		|НаРассмотрении, 
		|Рассмотрен, 
		|НаИсполнении, 
		|Исполнен");
		
	ИначеЕсли Объект.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
		
		ДоступныеСостояния = Новый Структура(
		"Проект, 
		|НаСогласовании, 
		|Согласован, 
		|НеСогласован, 
		|НаУтверждении, 
		|Утвержден, 
		|НеУтвержден, 
		|НаРегистрации, 
		|Зарегистрирован,
		|НеЗарегистрирован");
		
	ИначеЕсли Объект.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда 
		
		ДоступныеСостояния = Новый Структура(
		"Проект, 
		|НаСогласовании, 
		|Согласован, 
		|НеСогласован, 
		|НаУтверждении, 
		|Утвержден, 
		|НеУтвержден, 
		|НаРегистрации, 
		|Зарегистрирован, 
		|НеЗарегистрирован, 
		|НаРассмотрении, 
		|Рассмотрен, 
		|НаИсполнении, 
		|Исполнен");
		
	КонецЕсли;	
	
	Для Каждого Эл из ВсеСостояния Цикл
		Если ДоступныеСостояния.Свойство(Эл.Ключ) Тогда 
			Элементы["НастройкиДоступности" + Эл.Ключ].Видимость = Истина;
		Иначе	
			Элементы["НастройкиДоступности" + Эл.Ключ].Видимость = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступности(ТекущийОбъект)
	
	ТекущийОбъект.НастройкиДоступности.Очистить();
	
	ТаблНастройкиДоступности = РеквизитФормыВЗначение("НастройкиДоступности");
	Для Каждого Строка Из ТаблНастройкиДоступности Цикл
		
		Для Каждого Колонка Из ТаблНастройкиДоступности.Колонки Цикл
			Если Колонка.Имя = "ИмяПоляКоманды" 
			 Или Колонка.Имя = "ПредставлениеПоляКоманды" 
			 Или Найти(Колонка.Имя, "Строкой") > 0 Тогда 
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ТекущийОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
			НоваяСтрока.Доступность = Строка[Колонка.Имя];
			НоваяСтрока.Состояние = Перечисления.СостоянияДокументов[Колонка.Имя];
		КонецЦикла;	
			
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ИспользоватьДляОбработкаВыбораСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.ИспользоватьДля.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Участник = ВыбранноеЗначение.РольИсполнителя;
			ТекущиеДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ТекущиеДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Объект.ИспользоватьДля.Очистить();
		Для каждого Строка Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Строка.Исполнитель;
			НоваяСтрока.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
			НоваяСтрока.ДополнительныйОбъектАдресации =	Строка.ДополнительныйОбъектАдресации;
		КонецЦикла;
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		ТекущиеДанные = Элементы.ИспользоватьДля.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Участник = ВыбранноеЗначение;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию()
	
	Объект.НастройкиДоступности.Очистить();
	
	ТаблНастройкиДоступности = Неопределено;
	
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого ОписаниеНастройки Из ОписаниеНастроекДоступности Цикл
		Если ОписаниеНастройки.Идентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор()) Тогда 
			
			ТаблНастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
				Объект.ТипДокумента, ОписаниеНастройки.Роль);
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблНастройкиДоступности = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Объект.НастройкиДоступности.Загрузить(ТаблНастройкиДоступности);
	
	ЗаполнитьНастройкиДоступности();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВидыДокументов(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.НастройкиДоступностиДляВидовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаДоступностиПоСостоянию.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	ВидыДокументов.Очистить();
	Для Каждого Строка Из НаборЗаписей Цикл
		НоваяСтрока = ВидыДокументов.Добавить();
		НоваяСтрока.ВидДокумента = Строка.ВидДокумента;
	КонецЦикла;	
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаписатьВидыДокументов(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиДоступностиДляВидовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаДоступностиПоСостоянию.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ТаблВидыДокументов = РеквизитФормыВЗначение("ВидыДокументов");
	Для Каждого Строка Из ТаблВидыДокументов Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ВидДокумента = Строка.ВидДокумента;
		НоваяСтрока.НастройкаДоступностиПоСостоянию = Ссылка;
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры		

&НаКлиенте
Процедура ВидыДокументовПослеУдаления(Элемент)
	
	ВывестиКоличествоВидовДокументов(
		Элементы.ГруппаВидыДокументов.Заголовок,
		ВидыДокументов.Количество());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиКоличествоВидовДокументов(Заголовок, Количество)
	
	Если Количество > 0 Тогда 
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '3. Виды документов (%1)'"),
			Количество);
			
	Иначе
		
		Заголовок = НСтр("ru = '3. Виды документов'");
		
	КонецЕсли;	
	
КонецПроцедуры	

// Возвращает список значений, содержащий подходящих участников
//
Функция СформироватьДанныеВыбораУчастника(Текст, ВключатьАвтоподстановку = Ложь)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка,
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка,
		|	NULL
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование ПОДОБНО &Текст");
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда 
			ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Выборка.Подразделение) + ")");
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ВключатьАвтоподстановку Тогда 
		ДоступныеФункции = ШаблоныДокументов.ПолучитьСписокДоступныхФункций();
		Для Каждого ЭлементСписка Из ДоступныеФункции Цикл
			Если НРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) = НРег(Текст) Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступностьСтрокой(Доступность)
	
	Если Доступность = 0 Тогда
		Возврат НСтр("ru = ' '");
	ИначеЕсли Доступность = 1 Тогда
		Возврат НСтр("ru = 'Да'");
	ИначеЕсли Доступность = 2 Тогда
		Возврат НСтр("ru = 'Нет'");
	КонецЕсли;
	
КонецФункции

Процедура УстановитьУсловноеОформление()
	
	Колонки = Новый Структура(
	"Проект, 
	|НаСогласовании, 
	|Согласован, 
	|НеСогласован, 
	|НаУтверждении, 
	|Утвержден, 
	|НеУтвержден, 
	|НаРегистрации, 
	|Зарегистрирован, 
	|НеЗарегистрирован, 
	|НаРассмотрении, 
	|Рассмотрен, 
	|НаИсполнении, 
	|Исполнен");
	
	УсловноеОформлениеФормы = ЭтаФорма.УсловноеОформление;
	
	Для Каждого Колонка Из Колонки Цикл
		
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиДоступности."+Колонка.Ключ);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = 1;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.РазрешенноеПравоДоступа.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("НастройкиДоступности"+Колонка.Ключ);
		
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиДоступности."+Колонка.Ключ);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = 2;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЗапрещенноеПравоДоступа.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("НастройкиДоступности"+Колонка.Ключ);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры
