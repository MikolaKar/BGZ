
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Рассчитывает хэш-сумму объекта
// 
Функция РассчитатьХэш() Экспорт
	
	// Упорядочивание всех табличных частей
	Сравнение = Новый СравнениеЗначений;
	Корреспонденты.Сортировать("ГруппаДоступа Возр", Сравнение);
	Пользователи.Сортировать("Пользователь Возр, Ключ Возр", Сравнение);
	РабочаяГруппа.Сортировать("Участник Возр", Сравнение);
	ФизическиеЛица.Сортировать("ГруппаДоступа Возр", Сравнение);
	НастройкаПрав.Сортировать("Пользователь Возр, Право Возр", Сравнение);
	
	// Сборка хэш-строки
	ХэшСтрока = "";
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ВидОбъекта);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ВладелецОбъекта);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ВопросДеятельности);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ГрифДоступа);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Организация);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ДескрипторВладельца);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Проект);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, УчетнаяЗаписьПочты);
	
	// Добавление ТЧ Корреспонденты
	Для каждого Эл Из Корреспонденты Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ГруппаДоступа);
	КонецЦикла;
	
	// Добавление ТЧ ФизическиеЛица
	Для каждого Эл Из ФизическиеЛица Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ГруппаДоступа);
	КонецЦикла;
	
	// Добавление ТЧ РабочаяГруппа
	Для каждого Эл Из РабочаяГруппа Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Участник);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ОсновнойОбъектАдресации);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
	// Добавление ТЧ Пользователи
	Для каждого Эл Из Пользователи Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Ключ);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Пользователь);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ОсновнойОбъектАдресации);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
	// Добавление ТЧ НастройкаПрав
	Для каждого Эл Из НастройкаПрав Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Пользователь);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Право);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ПравоЗапрещено);
	КонецЦикла;
	
	// Вычисление хэш-значения
	Хэш = ДокументооборотПраваДоступаПовтИсп.ВычислитьХэшПоСтроке(ХэшСтрока);
	
КонецФункции	

// Добавляет сведения о пользователе в ТЧ Пользователи
Процедура ДобавитьПользователя(
	Ключ, 
	Пользователь, 
	ОсновнойОбъектАдресации = Неопределено, 
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;		
		
	Строка = Пользователи.Добавить();
	Строка.Ключ = Ключ;
	
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		Строка.Пользователь = Пользователь;
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		Строка.Пользователь = Пользователь;
		Строка.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неправильный тип пользователя.'");
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ХэшСтрока = ХэшСтрока + Значение;
		Возврат;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ХэшСтрока = ХэшСтрока + Строка(Значение);
		Возврат;
	КонецЕсли;
	
	Строка = Строка(Значение.УникальныйИдентификатор());
	ХэшСтрока = ХэшСтрока + Строка + " ";
	
КонецПроцедуры	

Процедура ПриЗаписи(Отказ)
	
	// Если это очистка устаревших дескрипторов, пересчет прав не нужен
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ДескрипторыДоступаОбъектов.РассчитатьПрава(Ссылка, Неопределено);
	
КонецПроцедуры

// Заполняет реквизит ЭтоПустойДескриптор
// 
Функция ЗаполнитьПризнакПустого() Экспорт
	
	ЭтоПустойДескриптор = 
		Не (ЗначениеЗаполнено(ВидОбъекта)
		ИЛИ ЗначениеЗаполнено(ВладелецОбъекта)
		ИЛИ ЗначениеЗаполнено(ВопросДеятельности)
		ИЛИ ЗначениеЗаполнено(ГрифДоступа)
		ИЛИ ЗначениеЗаполнено(Организация)
		ИЛИ ЗначениеЗаполнено(Проект)
		ИЛИ ЗначениеЗаполнено(УчетнаяЗаписьПочты)
		ИЛИ ЗначениеЗаполнено(ДескрипторВладельца)
		ИЛИ Корреспонденты.Количество() > 0
		ИЛИ Пользователи.Количество() > 0
		ИЛИ РабочаяГруппа.Количество() > 0
		ИЛИ ФизическиеЛица.Количество() > 0
		ИЛИ НастройкаПрав.Количество() > 0
		ИЛИ Группа = Истина
		ИЛИ ИдентификаторОбъектаМетаданных = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиВнутреннихДокументов")
		ИЛИ ИдентификаторОбъектаМетаданных = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиФайлов")
		ИЛИ ИдентификаторОбъектаМетаданных = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиПисем")
		ИЛИ ИдентификаторОбъектаМетаданных = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиМероприятий")
		ИЛИ ИдентификаторОбъектаМетаданных = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиФорума"));
		
КонецФункции

#КонецЕсли
