
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Выполняет расчет и перезапись прав доступа по указанному определителю
// Возвращает в массиве ПротоколРасчетаПрав перечень данных, которые 
// были использованы при расчете прав
//
Процедура ОбновитьПрава(
			ДескрипторДоступа,
			ПротоколРасчетаПрав = Неопределено,
			Немедленно = Неопределено,
			ОбновитьЗависимыеНемедленно = Ложь) Экспорт
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(ДескрипторДоступа);
		Возврат;
		
	КонецЕсли;
	
	РассчитатьПрава(ДескрипторДоступа.Ссылка, ПротоколРасчетаПрав);
	
	ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескриптору(
		ДескрипторДоступа.Ссылка, ОбновитьЗависимыеНемедленно);
	
КонецПроцедуры

// Выполняет расчет и запись прав
// 
// ДескрипторДоступа - ссылка на дескриптор
// 
Процедура РассчитатьПрава(ДескрипторДоступа, ПротоколРасчетаПрав) Экспорт
	
	РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДескрипторДоступа,
		"ИдентификаторОбъектаМетаданных, ЭтоПустойДескриптор, Группа, РабочаяГруппа");
	
	ИдентификаторОбъектаМетаданных = РеквизитыДескриптора.ИдентификаторОбъектаМетаданных;
	РеквизитыИдентификатора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ИдентификаторОбъектаМетаданных, "ЗначениеПустойСсылки, ПолноеИмя");
		
	Если РеквизитыИдентификатора.ЗначениеПустойСсылки <> Неопределено Тогда
		МенеджерОбъектаДоступа = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			РеквизитыИдентификатора.ЗначениеПустойСсылки);
	Иначе
		МенеджерОбъектаДоступа = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			РеквизитыИдентификатора.ПолноеИмя);
	КонецЕсли;

	ЕстьМетодЗаполнитьПраваДоступа = Ложь;
	Попытка
		ЕстьМетодЗаполнитьПраваДоступа = МенеджерОбъектаДоступа.ЕстьМетодЗаполнитьПраваДоступа();
	Исключение
		// У объекта может и не быть метода "ЕстьМетодЗаполнитьПраваДоступа"
	КонецПопытки;
	
	ПраваДоступа = Новый Соответствие;
	
	Если РеквизитыДескриптора.ЭтоПустойДескриптор Тогда
		
		// Пустой дескриптор заполняется правами для всех пользователей
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Ст = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
				Истина, Истина, Истина, Истина, Ложь);
			
			ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Выборка.Ссылка, Ст);
			
		КонецЦикла;
		
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Все пользователи'"));
		КонецЕсли;
		
	Иначе
	
		Если ЕстьМетодЗаполнитьПраваДоступа И Не РеквизитыДескриптора.Группа Тогда
			
			// Вызов метода объекта для расчета прав доступа
			МенеджерОбъектаДоступа.ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав);
			
		Иначе
		
	        ЗаполнитьПраваДоступаСтандартно(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав);
			
			// Сужаем права с учетом рабочей группы
			СоставРабочейГруппы = РазвернутьРабочуюГруппу(РеквизитыДескриптора.РабочаяГруппа.Выбрать());
			
			Если Не РеквизитыДескриптора.РабочаяГруппа.Пустой() Тогда
				
				// Добавление рабочей группы в протокол расчета прав
				Если ПротоколРасчетаПрав <> Неопределено Тогда
					ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Рабочая группа'"));
				КонецЕсли;	
				
				НовыеПраваДоступа = Новый Соответствие;
				Для Каждого Эл Из СоставРабочейГруппы Цикл
					ПраваУчастникаРГ = ПраваДоступа[Эл.Ключ];
					Если ПраваУчастникаРГ <> Неопределено Тогда
						ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(
							НовыеПраваДоступа, Эл.Ключ, ПраваУчастникаРГ)
					КонецЕсли;
				КонецЦикла;
				
				ПраваДоступа = НовыеПраваДоступа;
				
			КонецЕсли;
		КонецЕсли;
		
		// Добавление руководителей и делегатов в протокол расчета прав
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			
			Если Константы.ДобавлятьРуководителямДоступПодчиненных.Получить() Тогда
				ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Руководители (см. Структура предприятия)'"));
			КонецЕсли;
			
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Делегаты (см. Делегирование прав)'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступа.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Дескриптор.Установить(ДескрипторДоступа);
	
	Для каждого Эл Из ПраваДоступа Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Дескриптор = ДескрипторДоступа;
		Запись.Пользователь = Эл.Ключ;
		ЗаполнитьЗначенияСвойств(Запись, Эл.Значение);
	КонецЦикла;
	
    НаборЗаписей.Записать();

КонецПроцедуры	

// Создает и заполняет новый дескриптор доступа по указанному объекту
Функция СоздатьНовыйДескриптор(ОбъектДоступа) Экспорт
	
	Дескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьЭлемент();
	
	МетаданныеОбъектаДоступа = ОбъектДоступа.Метаданные();
	Дескриптор.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъектаДоступа);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъектаДоступа.ПолноеИмя());
	
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаДоступа) И ОбъектДоступа.ЭтоГруппа Тогда
		
		// Для групп справочников заполнение дескрипитора не требуется
		Дескриптор.Группа = Истина;
		
	Иначе	
		
		// Для ссылки дескриптор заполняется на основании описания, для объекта - на основании самого объекта
		ОписаниеОбъекта = Неопределено;
		Попытка
			
			ПустаяСсылка = Менеджер.ПустаяСсылка();
			
			Если ТипЗнч(ПустаяСсылка) = ТипЗнч(ОбъектДоступа) Тогда
				
				СведенияОПоляхДоступа = Менеджер.ПолучитьПоляДоступа();
				ОписаниеОбъекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				ОбъектДоступа,
				СведенияОПоляхДоступа);
				
			КонецЕсли; 
			
		Исключение
			// У объекта может и не быть метода "ПолучитьПоляДоступа"
		КонецПопытки; 
		
		Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
			Менеджер.ЗаполнитьДескрипторДоступа(ОписаниеОбъекта, Дескриптор);  
		Иначе
			Менеджер.ЗаполнитьДескрипторДоступа(ОбъектДоступа, Дескриптор);
		КонецЕсли;
		
	КонецЕсли;	
	
	Дескриптор.ЗаполнитьПризнакПустого();
	Дескриптор.РассчитатьХэш();
	
	Возврат Дескриптор;
	
КонецФункции	

// Находит существующий дескриптор доступа по переданному образцу.
// Если дескриптор не наден, то возвращает Неопределено.
Функция НайтиДескрипторПоОбразцу(Дескриптор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ВидОбъекта = &ВидОбъекта
		|	И ДескрипторыДоступаОбъектов.ВладелецОбъекта = &ВладелецОбъекта
		|	И ДескрипторыДоступаОбъектов.ВопросДеятельности = &ВопросДеятельности
		|	И ДескрипторыДоступаОбъектов.ГрифДоступа = &ГрифДоступа
		|	И ДескрипторыДоступаОбъектов.Группа = &Группа
		|	И ДескрипторыДоступаОбъектов.Организация = &Организация
		|	И ДескрипторыДоступаОбъектов.ДескрипторВладельца = &ДескрипторВладельца
		|	И ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ДескрипторыДоступаОбъектов.Проект = &Проект
		|	И ДескрипторыДоступаОбъектов.УчетнаяЗаписьПочты = &УчетнаяЗаписьПочты
		|	И ДескрипторыДоступаОбъектов.Хэш = &Хэш
		|	И ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор = &ЭтоПустойДескриптор";

	Запрос.УстановитьПараметр("ВидОбъекта", Дескриптор.ВидОбъекта);
	Запрос.УстановитьПараметр("ВладелецОбъекта", Дескриптор.ВладелецОбъекта);
	Запрос.УстановитьПараметр("ВопросДеятельности", Дескриптор.ВопросДеятельности);
	Запрос.УстановитьПараметр("ГрифДоступа", Дескриптор.ГрифДоступа);
	Запрос.УстановитьПараметр("Группа", Дескриптор.Группа);
	Запрос.УстановитьПараметр("Организация", Дескриптор.Организация);
	Запрос.УстановитьПараметр("ДескрипторВладельца", Дескриптор.ДескрипторВладельца);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", Дескриптор.ИдентификаторОбъектаМетаданных);
	Запрос.УстановитьПараметр("Проект", Дескриптор.Проект);
	Запрос.УстановитьПараметр("УчетнаяЗаписьПочты", Дескриптор.УчетнаяЗаписьПочты);
	Запрос.УстановитьПараметр("Хэш", Дескриптор.Хэш);
	Запрос.УстановитьПараметр("ЭтоПустойДескриптор", Дескриптор.ЭтоПустойДескриптор);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ДескрипторыОдинаковы(ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(), Дескриптор) Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

// Процедура проводит стандартный расчет прав по группам доступа 
// с учетом ограничений доступа, в том числе и по папкам.
// Процедура не накладывает ограничения по рабочей группе, 
// не добавляет руководителей и делегатов.
// 
// Параметры:
//  ДескрипторДоступа - ссылка на дескриптор
//  ПраваДоступа - соответствие, в которое будут помещены рассчитанные права
//  ПротоколРасчетаПрав - массив или Неопределено
// 
Процедура ЗаполнитьПраваДоступаСтандартно(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	// Получение групп доступа, соответствующих этому дескриптору
	ГруппыДоступа = ПолучитьГруппыДоступа(ДескрипторДоступа);
	ПраваПользователейГрупп = Новый Соответствие;
	
	// Обработка полученных групп доступа
	Для каждого ЭлементГруппа Из ГруппыДоступа Цикл
		
		Группа = ЭлементГруппа.Ссылка;
		РазрешениеДоступа = ПолучитьРазрешенияДоступа(ДескрипторДоступа, Группа);
		Если РазрешениеДоступа = Неопределено Тогда
			// Эта группа доступа не разрешает никакие права по этому дескриптору
			Продолжить;
		КонецЕсли;	
		
		// Добавление группы в протокол расчета прав
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(Группа);
		КонецЕсли;	
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыДоступаПользователи.Пользователь
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО ГруппыДоступаПользователи.Пользователь = Пользователи.Ссылка
			|ГДЕ
			|	ГруппыДоступаПользователи.Ссылка = &Группа
			|	И ЕСТЬNULL(Пользователи.ПометкаУдаления, ЛОЖЬ) <> ИСТИНА");
		
		Запрос.УстановитьПараметр("Группа", Группа);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Пользователь = Выборка.Пользователь;
			
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Ст = ПраваПользователейГрупп.Получить(Пользователь);
				Если Ст = Неопределено Тогда
					Ст = Новый Структура("Чтение, Изменение, Добавление",
						РазрешениеДоступа.Чтение, РазрешениеДоступа.Изменение, РазрешениеДоступа.Добавление);
				Иначе	
					Ст.Чтение = Ст.Чтение ИЛИ РазрешениеДоступа.Чтение;
					Ст.Добавление = Ст.Добавление ИЛИ РазрешениеДоступа.Добавление;
					Ст.Изменение = Ст.Изменение ИЛИ РазрешениеДоступа.Изменение;
				КонецЕсли;	
			
				ПраваПользователейГрупп.Вставить(Пользователь, Ст);
				
			ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Пользователь);
				
				Для Каждого Участник из СоставГруппы Цикл
					
					Ст = ПраваПользователейГрупп.Получить(Участник.Пользователь);
					Если Ст = Неопределено Тогда
						Ст = Новый Структура("Чтение, Изменение, Добавление",
							РазрешениеДоступа.Чтение, РазрешениеДоступа.Изменение, РазрешениеДоступа.Добавление);
					Иначе	
						Ст.Чтение = Ст.Чтение ИЛИ РазрешениеДоступа.Чтение;
						Ст.Добавление = Ст.Добавление ИЛИ РазрешениеДоступа.Добавление;
						Ст.Изменение = Ст.Изменение ИЛИ РазрешениеДоступа.Изменение;
					КонецЕсли;	
				
					ПраваПользователейГрупп.Вставить(Участник.Пользователь, Ст);
					
				КонецЦикла;	
				
			КонецЕсли;					
				
		КонецЦикла;	
		
	КонецЦикла; 
	
	// Обработка полученных групп доступа
	Для Каждого Эл Из ПраваПользователейГрупп Цикл
		
		Ст = Новый Структура("Чтение, Изменение, Добавление, Удаление, УправлениеПравами",
			Эл.Значение.Чтение,
			Эл.Значение.Изменение,
			Эл.Значение.Добавление,
			Эл.Значение.Изменение,  // Группы доступа не определяют это право
			Истина);  // Группы доступа не определяют это право
		
		ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Эл.Ключ, Ст);
		
	КонецЦикла;
	
	РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДескрипторДоступа,
		"ДескрипторВладельца, ИдентификаторОбъектаМетаданных.ПолноеИмя, УдалитьПапка");
	
	// Ограничение прав от владельца
	Если ЗначениеЗаполнено(РеквизитыДескриптора.ДескрипторВладельца) Тогда
		
		// Добавление папки в протокол расчета прав
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			
			ПолноеИмяМетаданныхОбъекта = РеквизитыДескриптора.ИдентификаторОбъектаМетаданныхПолноеИмя;
			
			Если ПолноеИмяМетаданныхОбъекта = "Справочник.ВнутренниеДокументы" Тогда
				ПротоколРасчетаПрав.Добавить("Папка внутренних документов");
			ИначеЕсли ПолноеИмяМетаданныхОбъекта = "Справочник.Мероприятия" Тогда
				ПротоколРасчетаПрав.Добавить("Папка мероприятий");
			КонецЕсли;
			
		КонецЕсли;	
		
		// Получение прав от владельца
		РазрешенныеПрава = Новый Соответствие;
		
		ИдентификаторМетаданныхВладельца = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			РеквизитыДескриптора.ДескрипторВладельца, "ИдентификаторОбъектаМетаданных");
		
		ПолноеИмяМетаданныхВладельца = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ИдентификаторМетаданныхВладельца, "ПолноеИмя");
			
		МенеджерВладельца = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданныхВладельца);
		МенеджерВладельца.ПолучитьРазрешенныеПраваОтВладельцаПоДескриптору(
			РеквизитыДескриптора.ДескрипторВладельца, РазрешенныеПрава);
		
		// Сужаем права с учетом владельца
		НовыеПраваДоступа = СузитьСоответствиеПравамиОтВладельца(
			ПраваДоступа,
			РазрешенныеПрава);
		
		ПраваДоступа = НовыеПраваДоступа;
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДескриптора.УдалитьПапка) Тогда // Старый дескриптор
		
		// Добавление папки в протокол расчета прав
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(РеквизитыДескриптора.УдалитьПапка);
		КонецЕсли;	
		
		// Получение прав от папки
		РазрешенныеПрава = Новый Соответствие;
		
		МенеджерПапки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитыДескриптора.УдалитьПапка);
		МенеджерПапки.ПолучитьПраваОтПапки(РеквизитыДескриптора.УдалитьПапка, РазрешенныеПрава);
		
		// Сужаем права с учетом папки
		НовыеПраваДоступа = СузитьСоответствиеПравамиОтВладельца(
			ПраваДоступа,
			РазрешенныеПрава);
		
		ПраваДоступа = НовыеПраваДоступа;
		
	КонецЕсли;
	
КонецПроцедуры

// Сужает исходное соответствие прав с учетом разрешающих прав от владельца
// Возвращает уже суженное соответствие прав доступа
// ПраваДоступа - исходное соответствие прав
// РазрешенныеПрава - массив разрешающих прав
//
Функция СузитьСоответствиеПравамиОтВладельца(
	ПраваДоступа, // исходный набор прав
	РазрешенныеПрава) Экспорт // разрешающие права от владельца
	
	НовыеПраваДоступа = Новый Соответствие;
	
	СписокПрав = Новый Массив;
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	
	Для каждого Эл Из ПраваДоступа Цикл
		
		ИсходныеПраваПользователя = Эл.Значение;
		РазрешенныеПраваПользователя = РазрешенныеПрава.Получить(Эл.Ключ);
		
		Для каждого Право Из СписокПрав Цикл
			Если РазрешенныеПраваПользователя = Неопределено Тогда
				ИсходныеПраваПользователя[Право] = Ложь;
			Иначе
				ИсходныеПраваПользователя[Право] = ИсходныеПраваПользователя[Право] И РазрешенныеПраваПользователя[Право];
			КонецЕсли;
		КонецЦикла;

		Если ИсходныеПраваПользователя.Чтение 
			Или ИсходныеПраваПользователя.Добавление 
			Или ИсходныеПраваПользователя.Изменение
			Или ИсходныеПраваПользователя.Удаление Тогда
			
			ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(НовыеПраваДоступа, Эл.Ключ, ИсходныеПраваПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыеПраваДоступа;
	
КонецФункции

// Удаляет неиспользуемые дескрипторы доступа
Процедура УдалитьНеиспользуемые() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Дескриптор
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ПО (ДескрипторыДоступаДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка)
		|			И (НЕ ДескрипторыДоступаДляОбъектов.Объект.ПометкаУдаления)
		|ГДЕ
		|	ДескрипторыДоступаДляОбъектов.Объект ЕСТЬ NULL
		|	И НЕ ДескрипторыДоступаОбъектов.ПометкаУдаления";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			Объект = ВыборкаДетальныеЗаписи.Дескриптор.ПолучитьОбъект();
			Объект.Заблокировать();
			Объект.УстановитьПометкуУдаления(Истина);
		Исключение
			// Объект может быть уже заблокирован
		КонецПопытки;	
		
	КонецЦикла;

КонецПроцедуры

// Возвращает соответствие 
// Ключ - Пользователь
// Значение - Истина
// Собирает элементы соответствия из участников рабочей группы,
// раскрывая группы пользователей и роли
// 
// Параметры:
//  ВыборкаРГ - выборка из результата запроса, содержащая рабочую группу дескриптора
// 
Функция РазвернутьРабочуюГруппу(ВыборкаРГ) Экспорт
	
	СоставРабочейГруппы = Новый Соответствие;
	
	Пока ВыборкаРГ.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаРГ.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СоставРабочейГруппы.Вставить(ВыборкаРГ.Участник, Истина);
			
		ИначеЕсли ТипЗнч(ВыборкаРГ.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			// Обход всех пользователей группы
			СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(ВыборкаРГ.Участник);
			
			Для каждого ЭлГруппы Из СоставГруппы Цикл
				
				СоставРабочейГруппы.Вставить(ЭлГруппы.Пользователь, Истина);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ВыборкаРГ.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда	
			
			// Обход всех исполнителей роли
			ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(
				ВыборкаРГ.Участник, ВыборкаРГ.ОсновнойОбъектАдресации, ВыборкаРГ.ДополнительныйОбъектАдресации);
			
			Для каждого ИсполнительРоли Из ИсполнителиРоли Цикл
				
				СоставРабочейГруппы.Вставить(ИсполнительРоли.Исполнитель, Истина);
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СоставРабочейГруппы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные методы

// Выполняет точное сравнение двух дескрипторов по всем табличным частям. 
// Возвращает Истина если дескрипторы одинаковы
Функция ДескрипторыОдинаковы(Дескриптор1, Дескриптор2)
	
	ТабличныеЧасти = Новый ТаблицаЗначений;
	ТабличныеЧасти.Колонки.Добавить("ИмяТабличнойЧасти");
	ТабличныеЧасти.Колонки.Добавить("ПоляДляПроверки");
	ТабличныеЧасти.Колонки.Добавить("КоличествоЗаписей");
	
	// Корреспонденты
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "Корреспонденты";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("ГруппаДоступа");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// Пользователи
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "Пользователи";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("Ключ");
	ПоляДляПроверки.Добавить("Пользователь");
	ПоляДляПроверки.Добавить("ОсновнойОбъектАдресации");
	ПоляДляПроверки.Добавить("ДополнительныйОбъектАдресации");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// ФизическиеЛица
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "ФизическиеЛица";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("ГруппаДоступа");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// РабочаяГруппа
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "РабочаяГруппа";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("Участник");
	ПоляДляПроверки.Добавить("ОсновнойОбъектАдресации");
	ПоляДляПроверки.Добавить("ДополнительныйОбъектАдресации");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// НастройкаПрав
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "НастройкаПрав";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("Пользователь");
	ПоляДляПроверки.Добавить("Право");
	ПоляДляПроверки.Добавить("ПравоЗапрещено");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// Сравнение количества записей
	Для Каждого ТЧ из ТабличныеЧасти Цикл
		ТЧ.КоличествоЗаписей = Дескриптор1[ТЧ.ИмяТабличнойЧасти].Количество();
		Если Дескриптор2[ТЧ.ИмяТабличнойЧасти].Количество() <> ТЧ.КоличествоЗаписей Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Поэлементное сравнение
	Для Каждого ТЧ из ТабличныеЧасти Цикл
		Если Не ТабличныеЧастиДескрипторовОдинаковы(Дескриптор1, Дескриптор2, 
			ТЧ.ИмяТабличнойЧасти, ТЧ.ПоляДляПроверки, ТЧ.КоличествоЗаписей) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

Функция ТабличныеЧастиДескрипторовОдинаковы(Дескриптор1, Дескриптор2, ИмяТабличнойЧасти, ПоляДляПроверки, КоличествоЗаписей)
	
	Для Сч = 0 По КоличествоЗаписей - 1 Цикл
		Для каждого ИмяПоля из ПоляДляПроверки Цикл
			
			Если Дескриптор1[ИмяТабличнойЧасти][Сч][ИмяПоля] <> Дескриптор2[ИмяТабличнойЧасти][Сч][ИмяПоля] Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает список групп доступа, которые подходят к этому дескриптору
Функция ПолучитьГруппыДоступа(ДескрипторДоступа)

	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК РолиПрофиля
		|		ПО (НЕ ГруппыДоступа.ПометкаУдаления)
		|			И (РолиПрофиля.Ссылка = ГруппыДоступа.Профиль)
		|			И (НЕ РолиПрофиля.Ссылка.ПометкаУдаления)
		|			И (НЕ РолиПрофиля.Роль.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ПО (ПраваРолей.Роль = РолиПрофиля.Роль)
		|			И (ПраваРолей.ОбъектМетаданных = &Таблица)");
		
	Запрос.УстановитьПараметр("Таблица", ДескрипторДоступа.ИдентификаторОбъектаМетаданных);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции	

Функция ПолучитьРазрешенияДоступа(ДескрипторДоступа, ГруппаДоступа)
	
	Если Не ДоступПоЗначениямРазрешен(ДескрипторДоступа, ГруппаДоступа) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	// Определение разрешений
	РазрешенияДоступа = Новый Структура("Чтение, Добавление, Изменение", Ложь, Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваГруппДоступаНаТаблицы.Добавление,
		|	ПраваГруппДоступаНаТаблицы.Изменение,
		|	ПраваГруппДоступаНаТаблицы.Удаление
		|ИЗ
		|	РегистрСведений.ПраваГруппДоступаНаТаблицы КАК ПраваГруппДоступаНаТаблицы
		|ГДЕ
		|	ПраваГруппДоступаНаТаблицы.ГруппаДоступа = &ГруппаДоступа
		|	И ПраваГруппДоступаНаТаблицы.Таблица = &Таблица";

	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.УстановитьПараметр("Таблица", ДескрипторДоступа.ИдентификаторОбъектаМетаданных);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РазрешенияДоступа.Чтение = Истина;
		РазрешенияДоступа.Добавление = РазрешенияДоступа.Добавление ИЛИ ВыборкаДетальныеЗаписи.Добавление;
		РазрешенияДоступа.Изменение = РазрешенияДоступа.Изменение ИЛИ ВыборкаДетальныеЗаписи.Изменение;
	КонецЦикла;

	Возврат РазрешенияДоступа;
	
КонецФункции	

// Определяет, есть ли разрешения группы по значениям доступа дескриптора
Функция ДоступПоЗначениямРазрешен(ДескрипторДоступа, ГруппаДоступа) Экспорт
	
	// Проверка всех значений доступа по И
	Результат = Истина;
	
	// Проверка определителя ВидОбъекта
	Если ЗначениеЗаполнено(ДескрипторДоступа.ВидОбъекта) Тогда
		
		Если ТипЗнч(ДескрипторДоступа.ВидОбъекта) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			
			Если Константы.ИспользоватьВидыВходящихДокументов.Получить() Тогда
				
				Результат = Результат И ДоступПоЗначениюРазрешен(
					ГруппаДоступа, 
					ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов, 
					ДескрипторДоступа.ВидОбъекта);
					
			КонецЕсли;		
				
		ИначеЕсли ТипЗнч(ДескрипторДоступа.ВидОбъекта) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			
			Если Константы.ИспользоватьВидыИсходящихДокументов.Получить() Тогда
				
				Результат = Результат И ДоступПоЗначениюРазрешен(
					ГруппаДоступа, 
					ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов, 
					ДескрипторДоступа.ВидОбъекта);
					
			КонецЕсли;		
				
		ИначеЕсли ТипЗнч(ДескрипторДоступа.ВидОбъекта) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			
			Если Константы.ИспользоватьВидыВнутреннихДокументов.Получить() Тогда
				
				Результат = Результат И ДоступПоЗначениюРазрешен(
					ГруппаДоступа, 
					ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов, 
					ДескрипторДоступа.ВидОбъекта);
					
			КонецЕсли;		
				
		ИначеЕсли ТипЗнч(ДескрипторДоступа.ВидОбъекта) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
			
			Если Константы.ИспользоватьУправлениеМероприятиями.Получить() Тогда
				
				Результат = Результат И ДоступПоЗначениюРазрешен(
					ГруппаДоступа, 
					ПланыВидовХарактеристик.ВидыДоступа.ВидыМероприятий, 
					ДескрипторДоступа.ВидОбъекта);
					
			КонецЕсли;		
				
		КонецЕсли;
			
		Если Результат = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// Проверка определителя ВопросДеятельности
	Если ЗначениеЗаполнено(ДескрипторДоступа.ВопросДеятельности) Тогда
		
		Если Константы.ИспользоватьВопросыДеятельности.Получить() Тогда
			
			Результат = Результат И ДоступПоЗначениюРазрешен(
				ГруппаДоступа, 
				ПланыВидовХарактеристик.ВидыДоступа.ВопросыДеятельности, 
				ДескрипторДоступа.ВопросДеятельности);
				
			Если Результат = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверка определителя ГрифДоступа
	Если ЗначениеЗаполнено(ДескрипторДоступа.ГрифДоступа) Тогда
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			
			Результат = Результат И ДоступПоЗначениюРазрешен(
				ГруппаДоступа, 
				ПланыВидовХарактеристик.ВидыДоступа.ГрифыДоступа, 
				ДескрипторДоступа.ГрифДоступа);
				
			Если Результат = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	// Проверка Физических лиц
	Для каждого Эл Из ДескрипторДоступа.ФизическиеЛица Цикл
		
		Если ЗначениеЗаполнено(Эл.ГруппаДоступа) Тогда
			Результат = Результат И ДоступПоЗначениюРазрешен(
				ГруппаДоступа, 
				ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаФизическихЛиц, 
				Эл.ГруппаДоступа);
				
			Если Результат = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	// Проверка определителя Организация
	Если ЗначениеЗаполнено(ДескрипторДоступа.Организация) Тогда
		
		Если Константы.ИспользоватьУчетПоОрганизациям.Получить() Тогда
			
			Результат = Результат И ДоступПоЗначениюРазрешен(
				ГруппаДоступа, 
				ПланыВидовХарактеристик.ВидыДоступа.Организации, 
				ДескрипторДоступа.Организация);
				
			Если Результат = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	// Проверка корреспондентов
	Для каждого Эл Из ДескрипторДоступа.Корреспонденты Цикл
		
		Если ЗначениеЗаполнено(Эл.ГруппаДоступа) Тогда
			Результат = Результат И ДоступПоЗначениюРазрешен(
				ГруппаДоступа, 
				ПланыВидовХарактеристик.ВидыДоступа.ГруппыДоступаКорреспондентов, 
				Эл.ГруппаДоступа);
				
			Если Результат = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ДоступПоЗначениюРазрешен(ГруппаДоступа, ВидДоступа, Значение)
	
	Разрешение = ДокументооборотПраваДоступаПовтИсп.ВидДоступаРазрешен(ГруппаДоступа, ВидДоступа);
	Если Разрешение = Неопределено Тогда
		// Эта группа доступа не накладывает никаких ограничений по
		// данному виду, следовательно доступ разрешен)
		Возврат Истина;
	КонецЕсли;	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
		|ГДЕ
		|	ГруппыДоступаЗначенияДоступа.Ссылка = &ГруппаДоступа
		|	И ГруппыДоступаЗначенияДоступа.ЗначениеДоступа = &ЗначениеДоступа");
	
	Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступа);
	Запрос.УстановитьПараметр("ЗначениеДоступа", Значение);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда // В ТЧ группы есть указанное значение доступа
		Если Разрешение = Истина Тогда // Разрешены все, кроме указанных
			Возврат Ложь;	
		Иначе // Запрещены все, кроме указанных
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Разрешение;
	
КонецФункции

// Заполняет права доступа пользователей в соответствии с ТЧ "НастройкаПрав"
// 
// ДескрипторДоступа - Ссылка на дескриптор
// 
Функция ЗаполнитьПраваПоНастройкамДескриптора(ДескрипторДоступа, ПраваДоступа, ПравилаОбработкиНастроек) Экспорт
	
	// Заполнение таблицы настроек с детализацией до пользователя
	ТаблицаНастроекДескриптора = Новый ТаблицаЗначений;
	ТаблицаНастроекДескриптора.Колонки.Добавить("Пользователь");
	ТаблицаНастроекДескриптора.Колонки.Добавить("Право");
	ТаблицаНастроекДескриптора.Колонки.Добавить("ПравоЗапрещено", Новый ОписаниеТипов("Булево"));
	
	ТипСпрПользователи = Тип("СправочникСсылка.Пользователи");
	ТипСпрГруппыПользователей = Тип("СправочникСсылка.ГруппыПользователей");
	
	НастройкиПравДескриптора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДескрипторДоступа, "НастройкаПрав");
	Настройка = НастройкиПравДескриптора.Выбрать();
	
	Пока Настройка.Следующий() Цикл
		
		ТипПользователя = ТипЗнч(Настройка.Пользователь);
		
		Если ТипПользователя = ТипСпрПользователи Тогда
			
			ПользовательУдален = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка.Пользователь, "ПометкаУдаления");
			Если ПользовательУдален = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНастроекДескриптора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка);
			
		ИначеЕсли ТипПользователя = ТипСпрГруппыПользователей Тогда
			
			СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Настройка.Пользователь);
			Для каждого ПользовательГруппы из СоставГруппы Цикл
				НоваяСтрока = ТаблицаНастроекДескриптора.Добавить();
				НоваяСтрока.Пользователь = ПользовательГруппы.Пользователь;
				НоваяСтрока.Право = Настройка.Право;
				НоваяСтрока.ПравоЗапрещено = Настройка.ПравоЗапрещено;
			КонецЦикла;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка полученной таблицы
	ТаблицаНастроекДескриптора.Свернуть("Пользователь, Право", "ПравоЗапрещено");
	Сравнение = Новый СравнениеЗначений;
	ТаблицаНастроекДескриптора.Сортировать("ПравоЗапрещено Возр, Пользователь", Сравнение);

	ТекущийПользователь = Неопределено;
	РассчитанныеПрава = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
										Ложь, Ложь, Ложь, Ложь, Ложь);
										
	Для Каждого СтрокаНастроек из ТаблицаНастроекДескриптора Цикл
		
		Если СтрокаНастроек.ПравоЗапрещено Тогда  // Все оставшиеся права запрещены
			Прервать;
		КонецЕсли;
		
		Если СтрокаНастроек.Пользователь <> ТекущийПользователь Тогда
			
			Если ТекущийПользователь <> Неопределено Тогда
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
				ЗаполнитьЗначенияСвойств(ПраваПользователя, РассчитанныеПрава);
				ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, ТекущийПользователь, ПраваПользователя);
				
				РассчитанныеПрава.Чтение = Ложь;
				РассчитанныеПрава.Добавление = Ложь;
				РассчитанныеПрава.Изменение = Ложь;
				РассчитанныеПрава.Удаление = Ложь;
				РассчитанныеПрава.УправлениеПравами = Ложь;

			КонецЕсли;
			
			ТекущийПользователь = СтрокаНастроек.Пользователь;
			
		КонецЕсли;
		
		РазрешенныеДействия = ПравилаОбработкиНастроек.Получить(СтрокаНастроек.Право);
		Если РазрешенныеДействия <> Неопределено Тогда
			Для Каждого Право из РазрешенныеДействия Цикл
				РассчитанныеПрава[Право] = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийПользователь <> Неопределено Тогда
		ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
		ЗаполнитьЗначенияСвойств(ПраваПользователя, РассчитанныеПрава);
		ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, ТекущийПользователь, ПраваПользователя);
	КонецЕсли;
	
КонецФункции

// Заполняет права доступа пользователей в соответствии с настройками папки
Функция ЗаполнитьПраваПоНастройкамПапки(Папка, ПраваДоступа, ПравилаОбработкиНастроек) Экспорт
	
	// Полчение настроек прав папки
	НастройкиПравПапки = ДокументооборотПраваДоступа.ПолучитьНастройкиПравПапки(Папка);
	
	// Заполнение таблицы настроек с детализацией до пользователя
	ТаблицаНастроекДескриптора = Новый ТаблицаЗначений;
	ТаблицаНастроекДескриптора.Колонки.Добавить("Пользователь");
	ТаблицаНастроекДескриптора.Колонки.Добавить("Право");
	ТаблицаНастроекДескриптора.Колонки.Добавить("ПравоЗапрещено", Новый ОписаниеТипов("Булево"));
	
	ТипСпрПользователи = Тип("СправочникСсылка.Пользователи");
	ТипСпрГруппыПользователей = Тип("СправочникСсылка.ГруппыПользователей");
	
	Для Каждого Настройка из НастройкиПравПапки Цикл
		
		ТипПользователя = ТипЗнч(Настройка.Пользователь);
		
		Если ТипПользователя = ТипСпрПользователи Тогда
			
			ПользовательУдален = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка.Пользователь, "ПометкаУдаления");
			Если ПользовательУдален = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНастроекДескриптора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка);
			
		ИначеЕсли ТипПользователя = ТипСпрГруппыПользователей Тогда
			
			СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Настройка.Пользователь);
			Для каждого ПользовательГруппы из СоставГруппы Цикл
				НоваяСтрока = ТаблицаНастроекДескриптора.Добавить();
				НоваяСтрока.Пользователь = ПользовательГруппы.Пользователь;
				НоваяСтрока.Право = Настройка.Право;
				НоваяСтрока.ПравоЗапрещено = Настройка.ПравоЗапрещено;
			КонецЦикла;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка полученной таблицы
	ТаблицаНастроекДескриптора.Свернуть("Пользователь, Право", "ПравоЗапрещено");
	Сравнение = Новый СравнениеЗначений;
	ТаблицаНастроекДескриптора.Сортировать("ПравоЗапрещено Возр, Пользователь", Сравнение);

	ТекущийПользователь = Неопределено;
	РассчитанныеПрава = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
										Ложь, Ложь, Ложь, Ложь, Ложь);
										
	Для Каждого СтрокаНастроек из ТаблицаНастроекДескриптора Цикл
		
		Если СтрокаНастроек.ПравоЗапрещено Тогда  // Все оставшиеся права запрещены
			Прервать;
		КонецЕсли;
		
		Если СтрокаНастроек.Пользователь <> ТекущийПользователь Тогда
			
			Если ТекущийПользователь <> Неопределено Тогда
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
				ЗаполнитьЗначенияСвойств(ПраваПользователя, РассчитанныеПрава);
				ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, ТекущийПользователь, ПраваПользователя);
				
				РассчитанныеПрава.Чтение = Ложь;
				РассчитанныеПрава.Добавление = Ложь;
				РассчитанныеПрава.Изменение = Ложь;
				РассчитанныеПрава.Удаление = Ложь;
				РассчитанныеПрава.УправлениеПравами = Ложь;

			КонецЕсли;
			
			ТекущийПользователь = СтрокаНастроек.Пользователь;
			
		КонецЕсли;
		
		РазрешенныеДействия = ПравилаОбработкиНастроек.Получить(СтрокаНастроек.Право);
		Если РазрешенныеДействия <> Неопределено Тогда
			Для Каждого Право из РазрешенныеДействия Цикл
				РассчитанныеПрава[Право] = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийПользователь <> Неопределено Тогда
		ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
		ЗаполнитьЗначенияСвойств(ПраваПользователя, РассчитанныеПрава);
		ДокументооборотПраваДоступа.ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, ТекущийПользователь, ПраваПользователя);
	КонецЕсли;	
	
КонецФункции

#КонецЕсли
