#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Владелец) Тогда
		Объект.Владелец = Параметры.Владелец;
    КонецЕсли; 
    
	Если ЗначениеЗаполнено(Параметры.Договор) Тогда
		Объект.Договор = Параметры.Договор;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Параметры.ВидРабот) Тогда
		Объект.ВидРабот = Параметры.ВидРабот;
    КонецЕсли; 
    
    // Заполнить Этап ДопСоглашения из Этапа договора
    
    Если Параметры.Свойство("ЭтапИсточник") Тогда
        ЭтапИсточник = Параметры.ЭтапИсточник;
        СписокСвойств = "НомерЭтапа, ВидРабот, ОбъектРабот,
    		|Месторасположение, Страна, Область, Район, Город, 
            |ЗначенияПолей, ИсточникФинансирования, ШаблонУсловийДоговора,
            |ДоляОбъекта, Подразделение";
        ЗаполнитьЗначенияСвойств(Объект, ЭтапИсточник, СписокСвойств);
	КонецЕсли; 
	
	УстановитьДоступКФорме();
	
	УстановитьВидКорреспондента();
	
	ЭтоНовый = Ложь;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда
		
		ЭтоНовый = Истина;
		ПересчитатьПлановыйСрокПриЗаписи = Истина;
		
		// Дата последней записи сметной стоимости
		Объект.ДатаПоследнейЗаписи = НачалоДня(ТекущаяДата());
		
		Элементы.ВидРабот.АктивизироватьПоУмолчанию = Истина;
		
		// Вид этапа
		Если ЭтоФизЛицо Тогда
			Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектФизЛицо;
		Иначе	
			Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектЮрЛицо;
		КонецЕсли; 
		
		// Договор
        Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
    		УстановитьДоговор();
        КонецЕсли; 
			
        // Номер этапа,
        КоличествоЭтапов = 0;
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			СуществующиеЭтапы = ПосчитатьКоличествоЭтапов();
			КоличествоЭтапов = СуществующиеЭтапы.Количество();
		КонецЕсли; 
		Объект.НомерЭтапа = КоличествоЭтапов + 1;
		
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			Заявка = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Владелец,	Справочники.ТипыСвязей.НаОснованииПоручения);
			
			Если Заявка <> Неопределено Тогда
				
				// Объект работ
				Объект.ОбъектРабот = Заявка.мОбъектРабот;
				ЗаполнитьМесторасположениеИзОбъекта();
				//позже заполним ДопУсловия для ЗП
				
				// Подразделение
				Объект.Подразделение = Заявка.Подразделение;
		
				// Месторасположение для физлиц
				Если ЭтоФизЛицо и Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектФизЛицо Тогда
					// выбираем из Заявки
					Результат = ПолучитьАдресЗемУчастка(Заявка);
                    Если ЗначениеЗаполнено(Результат) Тогда
                        Результат.Вставить("КонтактнаяИнформация", Результат.ЗначенияПолей);
						СохранитьРезультатВыбораАдреса(Результат);
					КонецЕсли;
				КонецЕсли; 
				
				// Исполнители
				СписокИсполнителей = мРаботаСДоговорами.ПолучитьИсполнителей(Заявка);
				Если ЗначениеЗаполнено(СписокИсполнителей) Тогда
					Объект.Исполнители.Очистить();
					Для каждого Исполнитель Из СписокИсполнителей Цикл
						Стр = Объект.Исполнители.Добавить();
						Стр.Исполнитель = Исполнитель.Значение;
                        Стр.КТУ = 1;
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		// Месторасположение и объект работ для юрлиц
		//Если Не ЭтоФизЛицо ИЛИ Объект.КакДоговорЮрЛица Тогда
		Если Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектЮрЛицо Тогда
            Если Не ЗначениеЗаполнено(Объект.Месторасположение) Тогда
                // выбираем из существующих этапов
                Если КоличествоЭтапов > 0 Тогда
                    // Месторасположение
                    СохранитьРезультатВыбораАдреса(СуществующиеЭтапы[0]);
                КонецЕсли; 
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Объект.ОбъектРабот) Тогда
				// выбираем из существующих этапов
				Если КоличествоЭтапов > 0 Тогда
					// Объект работ 
					Объект.ОбъектРабот = СуществующиеЭтапы[0].ОбъектРабот;
				КонецЕсли; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Объект.ОбъектРабот) Тогда
				ЗаполнитьМесторасположениеИзОбъекта();
				МесторасположениеПриВыбореСервер();
			КонецЕсли;
		КонецЕсли; 
		
		// Ставка НДС
		Объект.СтавкаНДС = Справочники.мСтавкиНДС.НДС_20;
        
        Если Не ЗначениеЗаполнено(Объект.ИсточникФинансирования) Тогда
            Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
                Объект.ИсточникФинансирования = Объект.КарточкаОбъектаРабот.ИсточникФинансирования;
            Иначе
                Объект.ИсточникФинансирования = Справочники.мИсточникиФинансирования.СобственныеСредства;
            КонецЕсли;
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(Объект.ДоляОбъекта) Тогда
            Объект.ДоляОбъекта = 1;
        КонецЕсли; 
		
		// Шаблон условий договора
        Если Не ЗначениеЗаполнено(Объект.ШаблонУсловийДоговора) Тогда
            Объект.ШаблонУсловийДоговора = Константы.М_ШаблонУсловияДоговораПоУмолчанию.Получить();
        КонецЕсли; 
        
        Объект.КоличествоДел = 1; // по умолчанию
		
		Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = Объект.Владелец.Подразделение;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗаполнитьНазваниеРодителяПодразделения();
	
	ЗначениеСтавкиНДС = Объект.СтавкаНДС.Ставка;
    БезНДС = Истина;
    Если ЗначениеСтавкиНДС > 0 Тогда
        БезНДС = Ложь;
    КонецЕсли; 
	Элементы.ОсвобождениеОтНДС.Видимость = БезНДС;

    Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
        Объект.ИсточникФинансирования = Объект.КарточкаОбъектаРабот.ИсточникФинансирования;
    КонецЕсли; 
    
    ЗаполнитьНаименованиеЭтапа();
    
    // Учет даты предоставления решения
    ВидимостьДатыПредоставленияРешения();
	
	// отобразить последний плановый срок
	Если Не Объект.Ссылка.Пустая() Тогда
		СтруктураСрока = ПрочитатьПлановыйСрок(Объект.Ссылка);
		ПлановыйСрокТекущий = СтруктураСрока.ПлановыйСрок;
		КомментарийПлановогоСрока = СтруктураСрока.Комментарий;
		ПлановыйСрокДляЗаписи = СтруктураСрока.ПлановыйСрок;
	КонецЕсли; 
	
	// Видимость реквизитов и доступ
	УправлениеДиалогом();
	
	УчетДоговоровРавенСмете = Ложь;
	
	СуммаДоговора = Объект.Владелец.Сумма;
	СтоимостьЭтапаПриОткрытии = Объект.СтоимостьСНДС;
	
	Если Не ЭтоНовый Тогда
		ЗаполнитьИсториюСтоимости();
	КонецЕсли; 
	
	// Основной этап договора
	Если Не Объект.Ссылка.Пустая() и Объект.НомерЭтапа > 1 Тогда
		ОсновнойЭтапДоговора = ОсновнойЭтапДоговора();
		Элементы.ПорядокВыполненияСовместно.Видимость = ЗначениеЗаполнено(ОсновнойЭтапДоговора); 
	КонецЕсли; 
	Если Объект.НомерЭтапа = 1 Тогда
		Элементы.ГруппаОсновнойЭтапДоговора.Видимость = Ложь;	
	КонецЕсли; 
	
	// Состояние
	Если ЭтоНовый Тогда
		Объект.Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеПодписания;
	КонецЕсли; 
	 
КонецПроцедуры

&НаСервере
Функция ОсновнойЭтапДоговора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСвязиЭтаповДоговоров.ОсновнойЭтапДоговора КАК ОсновнойЭтапДоговора
		|ИЗ
		|	РегистрСведений.мСвязиЭтаповДоговоров КАК мСвязиЭтаповДоговоров
		|ГДЕ
		|	мСвязиЭтаповДоговоров.ЭтапДоговора = &ЭтапДоговора
		|	И НЕ мСвязиЭтаповДоговоров.ОсновнойЭтапДоговора.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ОсновнойЭтапДоговора;
	КонецЕсли;
	
	Возврат Справочники.мЭтапыДоговоров.ПустаяСсылка();
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыСтоимости, Источник)
	
	////Если ИмяСобытия = "Записана смета" Тогда
	////	
	////    ПривестиВСоответствиеСоСметой(Источник, ПараметрыСтоимости);
	////    Модифицированность = Истина;
	////	
	////Иначе
	Если ИмяСобытия = "Записан Учет договоров" Тогда
		Если ПараметрыСтоимости.Свойство("ЭтапДоговора") Тогда
			Если ПараметрыСтоимости.ЭтапДоговора = Объект.Ссылка Тогда
				//   Заполнить этап из последнего УчетДоговоров
				СтруктураРекв = мРазноеКлиент.ПолучитьСтруктуруРеквизитовСметнойСтоимости();
				ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв);
				ЗаполнитьЗначенияСвойств(Объект, СтруктураРекв);
				//ЗаполнитьЗначенияСвойств(Объект, ПараметрыСтоимости);
				//Попытка
				//	Записать();
				//	ПослеЗаписи("");
					
					//Если Объект.СтоимостьСНДС <> СтоимостьЭтапаПриОткрытии Тогда
					//	СуммаДоговора = СуммаДоговора - СтоимостьЭтапаПриОткрытии + Объект.СтоимостьСНДС;
					//	Оповестить("Изменен этап договора", СуммаДоговора);
					//КонецЕсли; 
				//Исключение
				//
				//КонецПопытки; 
				//Прочитать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПроверятьОсвобождениеОтНДС = Истина;
	
	// Если для юрлица нет сметы, то может не быть и ставки НДС - не проверяем
	Если Не ЭтоФизЛицо ИЛИ Объект.КакДоговорЮрЛица Тогда
		Если Не ЗначениеЗаполнено(Объект.Смета) Тогда
			ПроверятьОсвобождениеОтНДС = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПроверятьОсвобождениеОтНДС Тогда
		Если мРаботаСоСметами.НеУказанПунктОсвобожденияОтНДС(Объект.СтавкаНДС, Объект.ОсвобождениеОтНДС) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле  = "ОсвобождениеОтНДС";
			Сообщение.Текст = "Не указан пункт Освобождения от НДС!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не СметнаяСтоимостьСоответствуетТЧ() и Не ЗаписьПриИзмененииСтоимости Тогда
		Сообщить("Сметная стоимость не соответствует табличной части!");
		Сообщить("Нажмите кнопку ""Изменить стоимость""!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не НеРассчитыватьПлановыйСрок Тогда
		Если ПересчитатьПлановыйСрокПриЗаписи Тогда
			// плановый срок должен пересчитываться только при изменении реквизитов формы.
			// Если идет запись перед изменением сметной стоимости, то не надо перессчитывать, а
			//  если после изменения - то надо.
			
			// Плановый срок пересчитывать не надо, если Объект.ПорядокВыполненияСовместно
			//   он берется из основного этапа договора
			
			Если Не Объект.ПорядокВыполненияСовместно Тогда
				ПересчитатьПлановыйСрок();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьПодразделениеЭтапаПоПервомуИсполнителю();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    Если Объект.Ссылка.Пустая() Тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
    Иначе
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
	КонецЕсли; 
	
	Если ЭтаФорма.ПлановыйСрокДляЗаписи <> ЭтаФорма.ПлановыйСрокТекущий Тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ПлановыйСрокДляЗаписи", ЭтаФорма.ПлановыйСрокДляЗаписи);
	КонецЕсли;
	
	Если УчетДоговоровРавенСмете Тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("УчетДоговоровРавенСмете", УчетДоговоровРавенСмете);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЭтаФорма.ОсновнойЭтапДоговора) Тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ОсновнойЭтапДоговора", ЭтаФорма.ОсновнойЭтапДоговора);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Запоминание исходных данных
	СтруктИзмРекв = ПолучитьСтруктуруИзменяемыхРеквизитов();
	Для каждого Эл Из СтруктИзмРекв Цикл
		ЭтаФорма["ПриОткрытии"+Эл.Ключ] = Объект[Эл.Ключ];	
	КонецЦикла;
	НачальнаяСмета = Объект.Смета;

    Элементы.НазваниеЦельПредоставления.Заголовок = ПолучитьНазваниеЦельПредоставления();
    ОбновитьИнформацияПакетДокументов();
    УстановитьВидимостьОсвобождениеОтНДС();
	
	УстановитьВидДляВыбораДляВидаРабот();
	
	Элементы.КакДоговорЮрЛица.Видимость = ЭтоФизЛицо; 
	Элементы.КакДоговорЮрЛица.Доступность = Ложь;
	
	УстановитьДоступностьКнопкиИзменитьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	//Оповестить("Изменен этап договора");

	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если Объект.СтоимостьСНДС <> СтоимостьЭтапаПриОткрытии Тогда
		СуммаДоговора = СуммаДоговора - СтоимостьЭтапаПриОткрытии + Объект.СтоимостьСНДС;
		Оповестить("Изменен этап договора", СуммаДоговора);
	КонецЕсли; 
	
	ПересчитатьПлановыйСрокПриЗаписи = Истина;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерЭтапаПриИзменении(Элемент)
	ЗаполнитьНаименованиеЭтапа();
    
    Если ЭтоДопСоглашение(Объект.Владелец) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НомерЭтапаПриИзмененииПродолжениеПослеВопросаОЗаполненииЭтапа",
			ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Заполнить этап данными из аналогичного этапа основоного договора?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
    
    КонецЕсли; 
КонецПроцедуры
&НаКлиенте
Процедура НомерЭтапаПриИзмененииПродолжениеПослеВопросаОЗаполненииЭтапа(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭтапДаннымиИзЭтапаОсновногоДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЭтапаПриИзменении(Элемент)
	УправлениеДиалогом();
	УстановитьВидДляВыбораДляВидаРабот();
КонецПроцедуры

&НаКлиенте
Процедура КакДоговорЮрЛицаПриИзменении(Элемент)
	УправлениеДиалогом();
	УстановитьВидДляВыбораДляВидаРабот();
КонецПроцедуры

// ВидРабот
&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	Если Объект.ВидРабот = ТекущийВидРабот Тогда
	    Возврат;
	КонецЕсли; 
	
	ТекущийВидРабот = Объект.ВидРабот;
	
	ЭтоУчетПроизводства = ЭтоУчетПроизводства(Объект.ВидРабот);
	
	ЗаполнитьНаименованиеЭтапа();
	
	НеРассчитыватьПлановыйСрок = СчитатьПлановыйСрок(Объект.ВидРабот);
	
	УправлениеДиалогом();			
	
	// при изменении ВидРабот необходимо в этапе установить соответствующий ВидДней
	Объект.ВидДней = мРаботаСДоговорами.ПолучитьВидДней(Объект.ВидРабот);
    
    РассчитатьДлительностьВыполненияРабот();
    
	Если ЭтоФизЛицо Тогда
		Если ЭтоНовый Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписиНового", ЭтаФорма);
			
			ПоказатьВопрос(Оповещение,"Для продолжения этап договора должен быть записан.
			|Записать?", РежимДиалогаВопрос.ДаНет); 
		Иначе
			Если НачалоДня(Объект.ДатаПоследнейЗаписи) = НачалоДня(ТекущаяДата()) Тогда
				//	Оп = Новый ОписаниеОповещения("ЗавершениеВопросаДатаВидРабот", ЭтаФорма);
				//	ПоказатьВопрос(Оп, "Все записи сметной стоимости с "+Формат(ДатаСметы, "ДФ=dd.MM.yyyy")+" будут удалены!
				//	| Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
				//СоздатьДокументУчетДоговоров("Новый");
				
				ДокиУдалены = УдалитьУчетыДоговоровСДаты(НачалоДня(ТекущаяДата()), Объект.Ссылка);
				Если Не ДокиУдалены Тогда
					//Сообщить("Отказ в записи этапа, т.к. не все документы Учет договоров были удалены после "+ДатаСметы);
					Сообщить("Не все документы Учет договоров были удалены после "+НачалоДня(ТекущаяДата()));
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				СоздатьДокументУчетДоговоров("Новый");
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ВидРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущийВидРабот = Объект.ВидРабот;
	УстановитьВидДляВыбораДляВидаРабот(Элемент);
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.мВидыРаботЮрЛица")) Тогда
		ВидЛиц = "ЮрЛиц";	
	Иначе
		ВидЛиц = "ФизЛиц";	
	КонецЕсли; 
	ДанныеВыбора = мРаботаСДоговорами.ПолучитьВидыРаботДляВыбора(ПараметрыОтбора, ВидЛиц);
КонецПроцедуры
&НаСервереБезКонтекста
Функция СчитатьПлановыйСрок(ВидРабот)
	Возврат ВидРабот.НеРассчитыватьПлановыйСрок;	
КонецФункции

&НаКлиенте
Процедура ОбъектРаботПриИзменении(Элемент)
	//РассчитатьСрокИсполнения();
	ЗаполнитьМесторасположениеИзОбъекта();
	МесторасположениеПриВыборе();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьНазваниеРодителяПодразделения();
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	УстановитьВидКорреспондента();
    
    УстановитьДоговор();
КонецПроцедуры

// Месторасположение
&НаКлиенте
Процедура МесторасположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Пар = Новый Структура; 
    
    СтрокаПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(Объект.ЗначенияПолей);
    //Пар.Вставить("ЗначенияПолей", ПолучитьЗначенияПолей(Объект.ЗначенияПолей));
    Пар.Вставить("ЗначенияПолей", СтрокаПолей);
	Пар.Вставить("ВидКонтактнойИнформации",      ПолучитьВидАдреса());
	Пар.Вставить("БылиВнесеныИзменения",         Ложь);
	Пар.Вставить("Представление",                Элемент.ТекстРедактирования);
	Пар.Вставить("РедактированиеТолькоВДиалоге", Истина);
	Пар.Вставить("АдресТолькоРоссийский",        Истина);
	Пар.Вставить("ОткрытаПоСценарию",        Истина);
	Пар.Вставить("Комментарий",        "");
    
    ТипАдреса = ПолучитьТипАдреса();
    ИмяОткрываемойФормы = КонтактнаяИнформацияКлиентСерверПовтИсп.ИмяФормыВводаКонтактнойИнформации(ТипАдреса);
    
	Результат = ОткрытьФормуМодально(ИмяОткрываемойФормы, Пар);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СохранитьРезультатВыбораАдреса(Результат);
	КонецЕсли; 
	МесторасположениеПриИзменении(Элемент);
    РассчитатьДлительностьВыполненияРабот();
КонецПроцедуры

&НаКлиенте
Процедура КарточкаОбъектаРаботПриИзменении(Элемент)
    ОбновитьИнформацияПакетДокументов();
	ОбновитьНазваниеЦельПредоставления();
	ИсточникФинансированияВКарточке = ПолучитьИсточникФинансирования(Объект.КарточкаОбъектаРабот);
	Если ЗначениеЗаполнено(ИсточникФинансированияВКарточке) Тогда
		Объект.ИсточникФинансирования = ИсточникФинансированияВКарточке;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВидРабот) Тогда
		Объект.ВидРабот = ПолучитьВидРаботИзКарточки(Объект.КарточкаОбъектаРабот);
	Иначе
		ВидРабот = ПолучитьВидРаботИзКарточки(Объект.КарточкаОбъектаРабот);
		Если ВидРабот <> Объект.ВидРабот Тогда
			Сообщить("Вид работ в карточке "+ВидРабот+" не совпадает с видом работ в этапе "+Объект.ВидРабот+"!", СтатусСообщения.ОченьВажное);
		КонецЕсли; 
	КонецЕсли; 
	// при изменении ВидРабот необходимо в этапе установить соответствующий ВидДней
	Объект.ВидДней = мРаботаСДоговорами.ПолучитьВидДней(Объект.ВидРабот);
    Объект.Наименование = "" + Строка(Объект.НомерЭтапа) + " " + Объект.ВидРабот;
    РассчитатьДлительностьВыполненияРабот();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУчастковПриИзменении(Элемент)
	РассчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриИзменении(Элемент)
    РассчитатьНДСЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьСНДС()
    Объект.СтоимостьСНДС = Объект.Стоимость + Объект.СуммаНДС;
	//РассчитатьДлительностьВыполненияРабот();	
КонецПроцедуры // РассчитатьСтоимостьСНДС()

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
    
    РеквСтавкиНДС = мРаботаСоСметами.ПолучитьРеквСтавкиНДС(Объект.СтавкаНДС);
    ЗначениеСтавкиНДС = РеквСтавкиНДС.Ставка;
    БезНДС = РеквСтавкиНДС.БезНДС;
    
	УстановитьВидимостьОсвобождениеОтНДС();
    
	РассчитатьНДСЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	РассчитатьСтоимостьСНДС();
КонецПроцедуры

&НаКлиенте
Процедура ПорядокВыполненияСовместноПриИзменении(Элемент)
	Если Объект.ПорядокВыполненияСовместно Тогда
		// Плановый срок должен совпадать со сроком основного этапа
		СтруктураСрока = ПрочитатьПлановыйСрок(ОсновнойЭтапДоговора);
		ПлановыйСрокДляЗаписи = СтруктураСрока.ПлановыйСрок;
		ПоказатьОповещениеПользователя("Плановый срок установлен как в основном этапе договора");
	КонецЕсли; 
	//    РассчитатьДлительностьВыполненияРабот();
КонецПроцедуры

// Месторасположение
&НаКлиенте
Процедура МесторасположениеПриВыборе()
    РассчитатьДлительностьВыполненияРабот();
	УстановитьДопУсловиеНормативаЗП();
КонецПроцедуры
&НаКлиенте
Процедура МесторасположениеПриИзменении(Элемент)
    МесторасположениеПриВыборе();
КонецПроцедуры
&НаКлиенте
Процедура МесторасположениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
    РассчитатьДлительностьВыполненияРабот();
КонецПроцедуры
&НаКлиенте
Процедура МесторасположениеОчистка(Элемент, СтандартнаяОбработка)
	Объект.ЗначенияПолей = "";
	Объект.Город = "";
	МесторасположениеПриВыборе();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьНазваниеЦельПредоставления();
КонецПроцедуры

&НаКлиенте
Процедура КарточкаОбъектаРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьКарточкуОбъектаРабот(Элемент);
КонецПроцедуры

// Смета
&НаКлиенте
Процедура СметаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачальнаяСмета = Объект.Смета;
КонецПроцедуры
&НаКлиенте
Процедура СметаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Текст) Тогда
		СметаПриИзменении("");
	КонецЕсли; 
КонецПроцедуры
&НаКлиенте
Процедура СметаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		
		// Нельзя выбирать смету, помеченную на удаление
		Если СметаПомеченаНаУдаление(Объект.Смета) Тогда
			Объект.Смета = НачальнаяСмета;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя выбирать смету, помеченную на удаление!'"), ,
			"Объект.Смета");
			Возврат;
		КонецЕсли;
		
		// Выбор сметы с датой меньше даты последней записи
		ДатаСметы = ПолучитьДатуСметы(Объект.Смета);
		Если ДатаСметы < Объект.ДатаПоследнейЗаписи Тогда
			Оп = Новый ОписаниеОповещения("ЗавершениеВопросаДатаСметы", ЭтаФорма);
			ПоказатьВопрос(Оп, "Все записи сметной стоимости с "+Формат(ДатаСметы, "ДФ=dd.MM.yyyy")+" будут удалены!
			| Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ОбработатьИзменениеСметы();
		КонецЕсли; 
		
		// изменение реквизитов этапа через ОбработкуОповещения
	Иначе
		// Смета в этапе была удалена
		ДатаСметы = ПолучитьДатуСметы(НачальнаяСмета);
		Если ДатаСметы <= Объект.ДатаПоследнейЗаписи Тогда
			Оп = Новый ОписаниеОповещения("ЗавершениеВопросаДатаСметы", ЭтаФорма);
			ПоказатьВопрос(Оп, "Все записи сметной стоимости с "+Формат(ДатаСметы, "ДФ=dd.MM.yyyy")+" будут удалены!
			| Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ОбработатьИзменениеСметы();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СметаОчистка(Элемент, СтандартнаяОбработка)
	////СтандартнаяОбработка = Ложь;
	////НачальнаяСмета = Объект.Смета;
	//
	//ДатаСметы = ПолучитьДатуСметы(НачальнаяСмета);
	//Если ДатаСметы <= Объект.ДатаПоследнейЗаписи Тогда
	//	Оп = Новый ОписаниеОповещения("ЗавершениеВопросаДатаСметы", ЭтаФорма);
	//	ПоказатьВопрос(Оп, "Все записи сметной стоимости с "+Формат(ДатаСметы, "ДФ=dd.MM.yyyy")+" будут удалены!
	//	| Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	//Иначе
	//	ОбработатьИзменениеСметы();
	//КонецЕсли; 
		
		
		
		
	//	// Нельзя удалять смету, если после нее были доки УчетДоговоров
	//Если Не мРаботаСоСметами.МожноУдалитьСмету(Объект.Смета) Тогда
	//	Сообщить("Нельзя удалить смету, если было изменение сметной стоимости после даты расчета сметы!");
	//	//Отказ = Истина;
	//	Возврат;
	//КонецЕсли; 
	//
	//Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтаФорма, Объект.Смета);
	//
	//ПоказатьВопрос(Оп, "Этап будет записан! Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонУсловийДоговораПриИзменении(Элемент)
    ВидимостьДатыПредоставленияРешения();
	РассчитатьДлительностьВыполненияРабот();
	Если Не ЭтоНовый Тогда
		ПересчитатьПлановыйСрок();
	КонецЕсли;
	РассчитатьСостояниеЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьВыполненияРаботПриИзменении(Элемент)
	Если Не ЭтоНовый Тогда
		ПересчитатьПлановыйСрок();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВидДнейПриИзменении(Элемент)
	Если Не ЭтоНовый Тогда
		ПересчитатьПлановыйСрок();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДатаПредоставленияРешенияПриИзменении(Элемент)
	Если Не ЭтоНовый Тогда
		ПересчитатьПлановыйСрок();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗапретИзмененияПлановогоСрокаПриИзменении(Элемент)
	Если Не ЭтоНовый Тогда
		ПересчитатьПлановыйСрок();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъектыРабот

&НаКлиенте
Процедура ОбъектыРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НеРассчитыватьПлановыйСрок = Истина;
		Записать();
	КонецЕсли; 
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
		ТекДанные.ВидРабот = Объект.ВидРабот;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРаботПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// отбор строк Исполнители
	Отбор = Новый ФиксированнаяСтруктура("ОбъектРабот", ТекДанные.ОбъектРабот);
	Элементы.Исполнители.ОтборСтрок = Отбор;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбъектыРаботПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
	Отбор = Новый Структура("ОбъектРабот", ТекДанные.ОбъектРабот);
	ИскСтроки = Объект.Исполнители.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Объект.Исполнители.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		ТекущаяСтрока = Элементы.Исполнители.ТекущиеДанные;		
		ТекущаяСтрока.КТУ = 1;
		Если Элементы.ОбъектРабот.Видимость Тогда
			ТекущаяСтрока.ОбъектРабот = Объект.ОбъектРабот;
		ИначеЕсли Элементы.ОбъектыРабот.Видимость Тогда	
			ТекДанныеОР = Элементы.ОбъектыРабот.ТекущиеДанные;
			Если ТекДанныеОР <> Неопределено Тогда
				ТекущаяСтрока.ОбъектРабот = ТекДанныеОР.ОбъектРабот;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗИС

&НаКлиенте
Процедура ЗИСЭтоЮрЛицоПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЮрФизЛицо = ?(ТекДанные.ЭтоЮрЛицо, 
		ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
		ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
		
	РеквЦены = ПолучитьРеквЦеныПрейскурантаЗИС(ТекущаяДата(), ЮрФизЛицо);
	ЗаполнитьЗначенияСвойств(ТекДанные, РеквЦены);
	
	РассчитатьСумму(ТекДанные);
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквЦеныПрейскурантаЗИС(ДатаСреза, ЮрФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мПрейскурантЗИССрезПоследних.Цена,
		|	мПрейскурантЗИССрезПоследних.СтавкаНДС
		|ИЗ
		|	РегистрСведений.мПрейскурантЗИС.СрезПоследних(&ДатаСреза, ЮрФизЛицо = &ЮрФизЛицо) КАК мПрейскурантЗИССрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	РеквЦены = Новый Структура("Цена, СтавкаНДС", 0, Справочники.мСтавкиНДС.ПустаяСсылка());
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквЦены, Выборка);
	КонецЕсли; 
	
	Возврат РеквЦены;
КонецФункции // ПолучитьРеквЦеныПрейскурантаЗИС()

&НаКлиенте
Процедура ЗИСКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗИСЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗИССуммаПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗИССтавкаНДСПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗИСНДСПриИзменении(Элемент)
	ТекДанные = Элементы.ЗИС.ТекущиеДанные;
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Геопортал 
&НаКлиенте
Процедура ГеопорталКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Геопортал.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГеопорталЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.Геопортал.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГеопорталСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.Геопортал.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГеопорталСтавкаНДСПриИзменении(Элемент)
	ТекДанные = Элементы.Геопортал.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ГеопорталНДСПриИзменении(Элемент)
	ТекДанные = Элементы.Геопортал.ТекущиеДанные;
	РассчитатьВсего(ТекДанные);
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Номенклатура

&НаКлиенте
Процедура ТКПКалькуляцияТКППриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	ТекДанные.Цена = ПолучитьЦенуКалькуляции(ТекДанные.Калькуляция);
	ТекДанные.Количество = ?(ТекДанные.Количество=0, 1, ТекДанные.Количество);
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуКалькуляции(Калькуляция)
	Если ЗначениеЗаполнено(Калькуляция) Тогда
		Возврат Калькуляция.Цена;
	КонецЕсли; 
	Возврат 0;	
КонецФункции // ПолучитьЦенуКалькуляцииТКП()

&НаКлиенте
Процедура ТКПКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТКПЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	ПересчитатьСтроку(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТКПСтавкаНДСПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТКПСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТКПНДСПриИзменении(Элемент)
	ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
	РассчитатьВсего(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТКППриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
КонецПроцедуры

&НаКлиенте
Процедура ТКПТКППриИзменении(Элемент)
	ТКПКалькуляцияТКППриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТКППередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ЗначениеЗаполнено(Объект.ВидРабот) Тогда
		Если ЭтоУчетПроизводства(Объект.ВидРабот) Тогда
			Если Объект.ВидРабот = ПредопределенноеЗначение("Справочник.мВидыРаботЮрЛица.ИзготовлениеИПоставкаТКП") Тогда
				ТекДанные = Элементы.ТаблицаТКП.ТекущиеДанные;
				Если Не ЗначениеЗаполнено(ТекДанные.Калькуляция) Тогда
					Сообщение = Новый СообщениеПользователю();
					
					Сообщение.Текст = "Не заполнено поле Калькуляция!";
					Сообщение.Поле = "ТаблицаТКП.Калькуляция";
					Сообщение.УстановитьДанные(ЭтаФорма);
					Сообщение.Сообщить();

				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУчетПроизводства(ВидРабот) 
	Возврат ВидРабот.УчетПроизводства;
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыТабличныхЧастей

&НаКлиенте
Процедура ПересчитатьСтроку(ТекДанные)
	РассчитатьСумму(ТекДанные);
	РассчитатьНДС(ТекДанные);
	РассчитатьВсего(ТекДанные);
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьСумму(ТекДанные)
	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДС(ТекДанные)
	Если ЗначениеЗаполнено(ТекДанные.СтавкаНДС) Тогда
		РеквНДС = ПолучитьРеквизитыСтавкиНДС(ТекДанные.СтавкаНДС);
		
		Если РеквНДС.ЗначениеСтавкиНДС <> Неопределено Тогда
			ТекДанные.НДС = Окр(ТекДанные.Сумма * РеквНДС.ЗначениеСтавкиНДС / 100, 2); 
		Иначе
			ТекДанные.НДС = 0; 
		КонецЕсли; 
		Если РеквНДС.БезНДС <> Неопределено И РеквНДС.БезНДС Тогда
			ТекДанные.ОсвобождениеОтНДС = "";
		КонецЕсли; 
	Иначе
		ТекДанные.НДС = 0; 
		ТекДанные.ОсвобождениеОтНДС = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсего(ТекДанные)
	ТекДанные.Всего = ТекДанные.Сумма + ТекДанные.НДС;
КонецПроцедуры
	
#КонецОбласти  

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Сметы

&НаКлиенте
Процедура СметыПередУдалением(Элемент, Отказ) 
	ТекДанные = Элементы.Сметы.ТекущиеДанные;
    ТекСмета = ТекДанные.Смета;
	
	// Нельзя удалять смету, если после нее были доки УчетДоговоров
	Если Не мРаботаСоСметами.МожноУдалитьСмету(ТекСмета) Тогда
		Сообщить("Нельзя удалить смету, если было изменение сметной стоимости после даты расчета сметы!");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВопроса", ЭтаФорма, ТекСмета);
	
	ПоказатьВопрос(Оп, "Этап будет записан! Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СметыПередУдалениемНаСервере(ТекСмета)
	 
	// Пометить на удаление УчетДоговоров с текущей сметой
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Ссылка КАК УчетДоговоров
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.Смета = &Смета
		|	И НЕ УчетДоговоров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Смета", ТекСмета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскДок = Выборка.УчетДоговоров.ПолучитьОбъект();
		ИскДок.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
    // Пометить на удаление смету
    СметаОбъект = ТекСмета.ПолучитьОбъект();
    СметаОбъект.УстановитьПометкуУдаления(Истина,);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура  ИзменитьСтоимость(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		// Для обхода проверки равенства сметной стоимости таб части,
		//  а также исключения расчета планового срока при записи
		ЗаписьПриИзмененииСтоимости = Истина;
		ПересчитатьПлановыйСрокПриЗаписи = Ложь;
		
		Записать();
		
		ЗаписьПриИзмененииСтоимости = Ложь;
		
		Если Модифицированность Тогда
			Сообщить("Этап не записан!");
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
    ПараметрыФормы = ПолучитьСтруктуруИзменяемыхРеквизитов();
	
	Если Объект.Номенклатура.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Стоимость", Объект.Номенклатура.Итог("Сумма"));		
		ПараметрыФормы.Вставить("СтавкаНДС", Объект.Номенклатура[0].СтавкаНДС);		
		ПараметрыФормы.Вставить("СуммаНДС", Объект.Номенклатура.Итог("НДС"));		
		ПараметрыФормы.Вставить("СтоимостьСНДС", Объект.Номенклатура.Итог("Всего"));
		
	ИначеЕсли Объект.Геопортал.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Стоимость", Объект.Геопортал.Итог("Сумма"));		
		ПараметрыФормы.Вставить("СтавкаНДС", Объект.Геопортал[0].СтавкаНДС);		
		ПараметрыФормы.Вставить("СуммаНДС", Объект.Геопортал.Итог("НДС"));		
		ПараметрыФормы.Вставить("СтоимостьСНДС", Объект.Геопортал.Итог("Всего"));
		
	ИначеЕсли Объект.ЗИС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("Стоимость", Объект.ЗИС.Итог("Сумма"));		
		ПараметрыФормы.Вставить("СтавкаНДС", Объект.ЗИС[0].СтавкаНДС);		
		ПараметрыФормы.Вставить("СуммаНДС", Объект.ЗИС.Итог("НДС"));		
		ПараметрыФормы.Вставить("СтоимостьСНДС", Объект.ЗИС.Итог("Всего"));
		
	ИначеЕсли Объект.ОбъектыРабот.Количество() > 0 Тогда
		ЗаполнитьПараметрыФормыПоСметам(Объект.Ссылка, ПараметрыФормы);
		
	Иначе	
		Для каждого Эл Из ПараметрыФормы Цикл
			ПараметрыФормы.Вставить(Эл.Ключ, Объект[Эл.Ключ]);		
		КонецЦикла; 
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);		
	
	Оп = Новый ОписаниеОповещения("ОбработатьЗакрытиеИзмененияСметнойСтоимости", ЭтаФорма, ПараметрыФормы);
    ОткрытьФорму("Справочник.мЭтапыДоговоров.Форма.ФормаИзмененияСметнойСтоимости", ПараметрыФормы, ,,,,Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДело(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПересчитатьПлановыйСрокПриЗаписи = Ложь;

        Записать();
    КонецЕсли;    
	
    ПараметрыФормы = Новый Структура();
    ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	// Если Договор-контроль, то дело должно быть Дело-услуги
	Если ЭтоДоговорКонтрольКачества(Объект.Владелец) Тогда
	    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ДелоУслуги"));
	Иначе
	    ПараметрыФормы.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.Дело"));
	КонецЕсли; 
    
    ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаОбъекта", ПараметрыФормы);    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСмету(Команда)
	ДатаПоследнейЗаписи = Объект.ДатаПоследнейЗаписи;
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаПоследнейЗаписи = ПолучитьДатуДоговора(Объект.Владелец);
 		ПересчитатьПлановыйСрокПриЗаписи = Ложь;
        Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПоследнейЗаписи) Тогда
		ДатаПоследнейЗаписи = ТекущаяДата();
	КонецЕсли; 
    
    ПараметрыЗаполнения = Новый Структура();
    ПараметрыЗаполнения.Вставить("Владелец", Объект.Владелец);
    ПараметрыЗаполнения.Вставить("Корреспондент", ПолучитьКорреспондента(Объект.Владелец));
    ПараметрыЗаполнения.Вставить("ЭтапДоговора", Объект.Ссылка);
    ПараметрыЗаполнения.Вставить("ОбъектРабот", Объект.ОбъектРабот);
    ПараметрыЗаполнения.Вставить("КарточкаОбъектаРабот", Объект.КарточкаОбъектаРабот);
    ПараметрыЗаполнения.Вставить("ДатаРасчетаСметы", ТекущаяДата());
    ПараметрыЗаполнения.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.мСостоянияСмет.Черновик"));
    ПараметрыЗаполнения.Вставить("НомерЭтапа", Объект.НомерЭтапа);
	//ПараметрыЗаполнения.Вставить("ИндексЦен", мРаботаСоСметами.ПолучитьИндексЦен(ТекущаяДата()));
    ПараметрыЗаполнения.Вставить("СтавкаНДС", Объект.СтавкаНДС);
    ПараметрыЗаполнения.Вставить("ОсвобождениеОтНДС", Объект.ОсвобождениеОтНДС);
    ПараметрыЗаполнения.Вставить("ДоляОбъекта", Объект.ДоляОбъекта);
    ПараметрыЗаполнения.Вставить("ДатаПоследнейЗаписи", ДатаПоследнейЗаписи);
    
    СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
   
	Оп = Новый ОписаниеОповещения("ОбработатьЗакрытиеСметы", ЭтаФорма, СтруктураПараметров);
    ОткрытьФорму("Справочник.мСметы.ФормаОбъекта", СтруктураПараметров, ,,,,Оп);
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДатуВозвратаАкта(Команда)
	ДатаВозвратаАкта = ТекущаяДата();
	Если ВвестиДату(ДатаВозвратаАкта, "Введите дату возврата", ЧастиДаты.Дата) Тогда
	
		
	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПлановыйСрок(Команда)
	ПересчитатьПлановыйСрок();	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьИзменениеСметнойСтоимости(Отказ)
	// Очистить все с ДатаПоследнейЗаписи
	ДокиУдалены = УдалитьУчетыДоговоровСДаты(Объект.ДатаПоследнейЗаписи, Объект.Ссылка);
	Если Не ДокиУдалены Тогда
		Сообщить("Отказ в записи этапа, т.к. не все документы Учет договоров были удалены после "+Объект.ДатаПоследнейЗаписи);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Установить новое значение
	// Запись нового УчетДоговоров
	ПараметрыУчетаДоговоров = мРаботаСДоговорами.ПодготовитьПараметрыУчетаДоговоров();
	мРаботаСДоговорами.ЗаполнитьПараметрыУчетаДоговоровИзЭтапа(ПараметрыУчетаДоговоров, Объект);
	ПараметрыУчетаДоговоров.Вставить("НеИзменятьЭтап", Истина);
	мРаботаСДоговорами.ЗаписатьНовыйУчетДоговоров(Объект.Ссылка, Объект.ДатаПоследнейЗаписи, Отказ, ПараметрыУчетаДоговоров);
	
	// Запись сметной стоимости
	НаборЗаписей = РегистрыСведений.мСметнаяСтоимость.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(НачалоДня(Объект.ДатаПоследнейЗаписи));
	НаборЗаписей.Отбор.ЭтапДоговора.Установить(Объект.Ссылка);
	
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Период = НачалоДня(Объект.ДатаПоследнейЗаписи);
	НовЗапись.ЭтапДоговора = Объект.Ссылка;
	НовЗапись.СтавкаНДС = Объект.СтавкаНДС;
	НовЗапись.ОсвобождениеОтНДС = Объект.ОсвобождениеОтНДС;
	НовЗапись.Сумма = Объект.СтоимостьСНДС;
	НовЗапись.НДС = Объект.СуммаНДС;
	НовЗапись.Цена = Объект.Цена;
	НовЗапись.КоличествоУчастков = Объект.КоличествоУчастков;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Функция УдалитьУчетыДоговоровСДаты(СДаты, ЭтапДоговора)
	УстановитьПривилегированныйРежим(Истина);
	ДокиУдалены = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Ссылка
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.Дата >= &Дата
		|	И УчетДоговоров.ЭтапДоговора = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(СДаты));
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Док = Выборка.Ссылка.ПолучитьОбъект();
		    Док.Удалить();
		Исключение
			ДокиУдалены = Ложь;	
		КонецПопытки; 
	КонецЦикла;
	Возврат ДокиУдалены;
КонецФункции
 
&НаСервере
Процедура ЗаполнитьИсториюСтоимости()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Смета КАК Смета,
		|	УчетДоговоров.КоличествоУчастков КАК КоличествоУчастков,
		|	УчетДоговоров.Цена КАК Цена,
		|	УчетДоговоров.Дата КАК Период,
		|	УчетДоговоров.Сумма КАК Стоимость,
		|	УчетДоговоров.Ссылка КАК УчетДоговоров,
		|	УчетДоговоров.НДС КАК СуммаНДС,
		|	УчетДоговоров.СтавкаНДС КАК СтавкаНДС,
		|	УчетДоговоров.ОсвобождениеОтНДС КАК ОсвобождениеОтНДС,
		|	УчетДоговоров.Комментарий
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.ЭтапДоговора = &ЭтапДоговора
		|	И УчетДоговоров.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетДоговоров.Дата";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", Объект.Ссылка);
	
	ТабИстории = Запрос.Выполнить().Выгрузить();
	ЗначениеВДанныеФормы(ТабИстории, ИсторияСметнойСтоимости);	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруИзменяемыхРеквизитов()
	Возврат Новый Структура("ДатаПоследнейЗаписи, Цена, КоличествоУчастков, Стоимость, СтавкаНДС, ОсвобождениеОтНДС, СуммаНДС, СтоимостьСНДС, Комментарий"); 
КонецФункции

// Возвращает последнюю запись планового срока по этапу
//
// Параметры:
//  ЭтапСсылка 
// Возвращаемое значение Структура:
//   ПлановыйСрок   - Плановый срок
//	 Комментарий - Строка, причина изменения
//
&НаСервере
Функция ПрочитатьПлановыйСрок(ЭтапДоговора)
	СтруктураВозврата = Новый Структура("ПлановыйСрок, Комментарий", '00010101000000', "");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	мДатыДоговоровСрезПоследних.Дата КАК ПлановыйСрок,
		|	мДатыДоговоровСрезПоследних.Комментарий,
		|	мДатыДоговоровСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.мДатыДоговоров.СрезПоследних(
		|			,
		|			ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПлановыйСрок)
		|				И ЭтапДоговора = &ЭтапДоговора) КАК мДатыДоговоровСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураВозврата; 
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДетальныеЗаписи);
	
	Возврат СтруктураВозврата;
КонецФункции 

&НаСервере
Процедура УстановитьДоступКФорме()
	// Пока не определены критерии когда закрывать доступ
	ЭтаФорма.Доступность = Истина;
КонецПроцедуры // УстановитьДоступКФорме()

&НаСервере
Функция ПолучитьАдресЗемУчастка(Заявка)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.ЗначенияПолей КАК СТРОКА(1000)) КАК ЗначенияПолей,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.ЗначенияПолей КАК СТРОКА(1000)) КАК КонтактнаяИнформация
		|ИЗ
		|	Справочник.ВходящиеДокументы.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	Запрос.УстановитьПараметр("Вид",    Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчастка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначенияПолей = ПолучитьЗначенияПолей(Выборка.ЗначенияПолей);
		
		Результат = Новый Структура;
		Результат.Вставить("ЗначенияПолей", ЗначенияПолей);
		Результат.Вставить("Представление", Выборка.Представление);
	
		Возврат Результат;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НетДвиженийПоЭтапу(Этап)
	Если Не ЗначениеЗаполнено(Этап) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РасчетыСПокупателями.Период) КАК Количество
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.ЭтапДоговора = &Этап";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество = 0;
	
КонецФункции
 
&НаСервере
Функция ПосчитатьКоличествоЭтапов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыДоговоров.Ссылка,
		|	ЭтапыДоговоров.ОбъектРабот,
		|	ЭтапыДоговоров.Месторасположение КАК Представление,
		|	ВЫРАЗИТЬ(ЭтапыДоговоров.ЗначенияПолей КАК СТРОКА(1000)) КАК ЗначенияПолей,
		|	ВЫРАЗИТЬ(ЭтапыДоговоров.ЗначенияПолей КАК СТРОКА(1000)) КАК КонтактнаяИнформация
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	НЕ ЭтапыДоговоров.ПометкаУдаления
		|	И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
		|	И ЭтапыДоговоров.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидКорреспондента()
	// для фильтрации объектов по владельцу
	Корреспондент = Объект.Владелец.Корреспондент;
	
    Если ЗначениеЗаполнено(Корреспондент) Тогда
        
		Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ЭтоФизЛицо = Истина;
		Иначе
			ЭтоФизЛицо = Ложь;
        КонецЕсли; 
        
        Элементы.ДляПечатиВДоговореФизЛиц.Видимость = ЭтоФизЛицо и НЕ Объект.КакДоговорЮрЛица;
	КонецЕсли; 
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьМесторасположениеИзОбъекта()
	Если ЗначениеЗаполнено(Объект.ОбъектРабот) Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот;
		СтруктураОтбора = Новый Структура("Вид", ВидАдреса);
		АдресЗУ = Объект.ОбъектРабот.КонтактнаяИнформация.Найти(ВидАдреса, "Вид");
		Если АдресЗУ <> Неопределено Тогда
			Текст = АдресЗУ.ЗначенияПолей;
			
			Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Текст) Тогда		
				ОбъектXDTO = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(Текст);
				АдресXDTO = ОбъектXDTO.Состав;
				Адрес = АдресXDTO.Состав;
				Объект.Месторасположение = ОбъектXDTO.Представление;
				Объект.Страна = АдресXDTO.Страна;
				Если Адрес.СвРайМО <> Неопределено Тогда
					Объект.Район = Адрес.СвРайМО.Район;
				КонецЕсли;	
				Объект.Сельсовет = Адрес.Город;
				Объект.Город = Адрес.НаселПункт;
				Объект.ЗначенияПолей = Текст;			
			Иначе		
				Если АдресЗУ <> Неопределено Тогда
					Объект.Страна = АдресЗУ.Страна;
					Объект.Область = АдресЗУ.Область;
					Объект.Район = АдресЗУ.Район;
					Объект.Сельсовет = АдресЗУ.Сельсовет;
					Объект.Город = АдресЗУ.Город;
					Объект.ЗначенияПолей = АдресЗУ.ЗначенияПолей;			
					Объект.Месторасположение = АдресЗУ.Представление;
				КонецЕсли; 
			КонецЕсли; 	
		КонецЕсли; 	
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазваниеРодителяПодразделения()
	Элементы.НазваниеРодителяПодразделения.Заголовок = "";
	Если Не Объект.Подразделение.Пустая() Тогда
		Если Не Объект.Подразделение.Родитель.Пустая() Тогда
		    Элементы.НазваниеРодителяПодразделения.Заголовок = Объект.Подразделение.Родитель.Наименование;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если Элемент.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.мВидыРаботЮрЛица")) Тогда
		ИмяФормыВыбора = "РегистрСведений.мАктуальныеВидыРаботЮрЛиц.Форма.ФормаСоздания";	
	Иначе
		ИмяФормыВыбора = "РегистрСведений.мАктуальныеВидыРаботФизЛиц.Форма.ФормаСоздания";	
	КонецЕсли; 
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОтбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидДляВыбораДляВидаРабот(ЭлементВидРабот = "")
	Если ЭлементВидРабот = "" Тогда
		ИскЭлемент = Элементы.Найти("ВидРабот");
	Иначе
		ИскЭлемент = ЭлементВидРабот;
	КонецЕсли; 
	
	МассивТипов=Новый Массив();
	//Если ЭтоФизЛицо и НЕ Объект.КакДоговорЮрЛица Тогда
	Если Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.мВидыЭтапов.ОдинОбъектФизЛицо") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.мВидыРаботФизЛица"));
	Иначе
		МассивТипов.Добавить(Тип("СправочникСсылка.мВидыРаботЮрЛица"));
	КонецЕсли;	
	ИскЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
КонецПроцедуры 
 
&НаСервере
Процедура УстановитьДоговор()
    Если мРаботаСДоговорами.ЭтоДопСоглашение(Объект.Владелец) Тогда
        Объект.Договор = мРаботаСДоговорами.ПолучитьДоговорСвязанногоДокумента(Объект.Владелец);
    Иначе
        Объект.Договор = Объект.Владелец;
    КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКорреспондента(Договор)
    Возврат Договор.Корреспондент;
КонецФункции // ПолучитьКорреспондента()

&НаСервере
Функция ПолучитьЗначенияПолей(СтрокаЗначенияПолей)
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаЗначенияПолей);
КонецФункции // ПолучитьЗначенияПолей()

&НаСервереБезКонтекста
Функция ПолучитьВидАдреса()
	Возврат Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчастка;
КонецФункции // ПолучитьЗначенияПолей()

&НаСервереБезКонтекста
Функция ПолучитьТипАдреса()
	Возврат Перечисления.ТипыКонтактнойИнформации.Адрес;
КонецФункции // ПолучитьЗначенияПолей()

// Результат - Структура или строка ТЗ 
&НаСервере
Процедура СохранитьРезультатВыбораАдреса(Результат)
	Объект.Месторасположение = Результат["Представление"];
    
    Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(Результат.КонтактнаяИнформация) Тогда
        Объект.ЗначенияПолей = Результат.КонтактнаяИнформация;
        
        XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(Объект.ЗначенияПолей, Объект.Месторасположение);
        Если XDTOКонтактная.Состав.Состав.Свойства().Получить("НаселенныйПункт") <> Неопределено Тогда
            Объект.Город = XDTOКонтактная.Состав.Состав.НаселенныйПункт;
        ИначеЕсли XDTOКонтактная.Состав.Состав.Свойства().Получить("НаселПункт") <> Неопределено Тогда
            Объект.Город = XDTOКонтактная.Состав.Состав.НаселПункт;
        КонецЕсли;
    Иначе
        Объект.ЗначенияПолей = Результат["ЗначенияПолей"];
    КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура ПривестиВСоответствиеСоСметой(РеквизитыСметы)
	
	//ЗаполнитьСтоимостьЭтапа();
	
	// Возможные варианты
	// Этап новый - Дата сметы может быть любой с даты регистрации договора
	// Иначе
	// Дата сметы раньше даты последнего изменения стоимости
	// Дата сметы совпадает с датой последнего изменения стоимости
	// Дата сметы позже даты последнего изменения стоимости
	
	
	Если ЭтоНовый Тогда
		ЗаполнитьРеквизитыЭтапаИзСметы(РеквизитыСметы);
	Иначе
		Если НачалоДня(РеквизитыСметы.ДатаПоследнейЗаписи) >= НачалоДня(Объект.ДатаПоследнейЗаписи) Тогда
			// РеквизитыСметы.ДатаПоследнейЗаписи это ДатаРасчетаСметы
			//  надо обновить документ УчетДоговоров
			
			ЗаполнитьРеквизитыЭтапаИзСметы(РеквизитыСметы);
			
			ПараметрыКоманды = ЗаполнитьПараметрыДляУчетаДоговоров("НеНовый");
			//ИскДок = ПолучитьУчетДоговоров(Объект.ДатаПоследнейЗаписи, Объект.Ссылка);
			ИскДок = ПолучитьУчетДоговоров(НачалоДня(РеквизитыСметы.ДатаПоследнейЗаписи), Объект.Ссылка);
			
			Если ИскДок = Неопределено Тогда
				// документа еще нет
				ПараметрыКоманды.Вставить("Дата", НачалоДня(РеквизитыСметы.ДатаПоследнейЗаписи));
				ПараметрыКоманды.Вставить("Действие", "Добавить новую");
			Иначе
				// документ уже есть - надо изменить
				ПараметрыКоманды.Вставить("Ключ", ИскДок);
				ПараметрыКоманды.Вставить("Дата", НачалоДня(РеквизитыСметы.ДатаПоследнейЗаписи));
				ПараметрыКоманды.Вставить("Действие", "Изменить");
			КонецЕсли; 
			
			ПараметрыКоманды.Вставить("ОткрыватьДокумент", Ложь);
			ПараметрыКоманды.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ПараметрыКоманды.Вставить("Оповещать", Ложь);
			ПараметрыКоманды.Вставить("НеИзменятьЭтап", Истина);
			
			ОткрытьДокументУчетДоговоров(ПараметрыКоманды);
		
		Иначе //Если РеквизитыСметы.ДатаПоследнейЗаписи < Объект.ДатаПоследнейЗаписи  Тогда
			// нельзя добавлять/изменять документ УчетДоговоров - такой ситуации не должно происходить
			//  должен быть контроль еще при записи сметы
			Объект.Смета = НачальнаяСмета;
			//Если Не ЗначениеЗаполнено(Источник) Тогда
			//	// Смета в этапе была очищена
			//	ЗаполнитьРеквизитыЭтапаИзСметы(Источник, РеквизитыСметы);
			//КонецЕсли; 
		КонецЕсли; 		
	КонецЕсли; 
	
    // изменение таб части Сметы
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		Отбор = Новый Структура("Смета", Объект.Смета); 
		МассивСтрок = Объект.Сметы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСмета = Объект.Сметы.Добавить();
			НоваяСмета.Смета = Объект.Смета;
			НоваяСмета.Актуальная = Истина;
		Иначе
			МассивСтрок[0].Актуальная = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	// Актуальной может быть только одна смета
	Если Объект.Сметы.Количество() > 1 Тогда
		Для каждого ТекСмета Из Объект.Сметы Цикл
			Если ТекСмета.Смета <> Объект.Смета Тогда
				ТекСмета.Актуальная = Ложь;
			КонецЕсли; 
		КонецЦикла;     
	КонецЕсли;
	
	//Записать();
    
КонецПроцедуры // ПривестиВСоответствиеСоСметой()

&НаКлиенте
Процедура ЗаполнитьРеквизитыЭтапаИзСметы(РеквизитыСметы)
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		//РеквизитыСметы = ПолучитьРеквизитыСметы(Источник);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыСметы, ,"ПометкаУдаления");
	Иначе
		Объект.Стоимость = 0;
		Объект.СуммаНДС = 0;
		Объект.СтоимостьСНДС = 0;
	КонецЕсли;
	БезНДС = СтавкаНДСНеОблагаетсяНДС(Объект.СтавкаНДС);
КонецПроцедуры // ЗаполнитьРеквизитыЭтапаИзСметы(Источник)

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСметы(Смета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметы.Ссылка КАК Смета,
		|	мСметы.Итого КАК Стоимость,
		|	мСметы.НДС КАК СуммаНДС,
		|	мСметы.КОплате КАК СтоимостьСНДС,
		|	мСметы.СтавкаНДС,
		|	мСметы.ОсвобождениеОтНДС,
		|	мСметы.ДоляОбъекта,
		|	мСметы.ДатаРасчетаСметы КАК ДатаПоследнейЗаписи,
		|	мСметы.СтавкаНДС.НеОблагается КАК БезНДС,
		|	мСметы.ПометкаУдаления,
		|	мСметы.Корреспондент
		|ИЗ
		|	Справочник.мСметы КАК мСметы
		|ГДЕ
		|	мСметы.Ссылка = &Смета";
	
	Запрос.УстановитьПараметр("Смета", Смета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	РеквизитыСметы = Новый Структура("Смета, Стоимость, СуммаНДС, СтоимостьСНДС, СтавкаНДС, ОсвобождениеОтНДС, ДоляОбъекта
	|,ДатаПоследнейЗаписи, БезНДС, ПометкаУдаления, Корреспондент"); 	
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСметы, Выборка);
	КонецЕсли;   
	
	Возврат РеквизитыСметы;
КонецФункции // ПолучитьРеквизитыСметы()

&НаСервереБезКонтекста
Функция СтавкаНДСНеОблагаетсяНДС(СтавкаНДС)
	Возврат СтавкаНДС.НеОблагается;
КонецФункции // СтавкаНДСНеОблагаетсяНДС()
 
&НаСервере
Процедура ЗаполнитьНаименованиеЭтапа()
    Объект.Наименование = "" + Строка(Формат(Объект.НомерЭтапа,"ЧГ=0")) + " " + Объект.ВидРабот;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДопСоглашение(СсылкаВнутреннийДокумент) 
    
    ЭтоДоп = Ложь;
    
    Если СсылкаВнутреннийДокумент.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДопСоглашения Тогда
        ЭтоДоп = Истина;
    КонецЕсли;  
	
	Возврат ЭтоДоп;
	
КонецФункции // ЭтоДопСоглашение(СсылкаВнутреннийДокумент)

&НаСервере
Процедура ЗаполнитьЭтапДаннымиИзЭтапаОсновногоДоговора()
    
	//ОсновнойДоговор = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Владелец, Справочники.ТипыСвязей.ОтноситсяКДоговору);
	//
	//Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
	//    
	//    ЭтапИсточник = мРаботаСДоговорами.ПолучитьЭтапДоговораПоНомеру(ОсновнойДоговор, Объект.НомерЭтапа); 
	//    
	//    Если ЭтапИсточник <> Неопределено Тогда
	//        ЗаполнитьЗначенияСвойств(Объект, ЭтапИсточник, ,"Код, Исполнители, Сметы, Смета, Владелец");
	//    КонецЕсли;
	//    
	//    // Сметную стоимость следует брать из РС, т.к. она могла быть изменена другими допсоглашениями
	//    РеквизитыСтоимости = мРаботаСДоговорами.ПолучитьСтоимостьЭтапаДоговора(ЭтапИсточник);
	//    
	//    ЗаполнитьЗначенияСвойств(Объект, РеквизитыСтоимости);
	//    
	//    // Обратный расчет стоимости и цены
	//    Объект.Стоимость = Объект.СтоимостьСНДС - Объект.СуммаНДС;
	//    Объект.Цена = ?(Объект.КоличествоУчастков > 0, Объект.Стоимость/Объект.КоличествоУчастков, Объект.Стоимость);
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьИсточникФинансирования(КарточкаОбъектаРабот)
	Возврат КарточкаОбъектаРабот.ИсточникФинансирования;
КонецФункции	
	
&НаКлиенте
Процедура ОбновитьНазваниеЦельПредоставления()
    Элементы.НазваниеЦельПредоставления.Заголовок = ПолучитьНазваниеЦельПредоставления();
КонецПроцедуры // ОбновитьНазваниеЦельПредоставления()

&НаСервере
Функция ПолучитьНазваниеЦельПредоставления()
    Представление = "Цель предоставления: ";
	Если ЭтоФизЛицо Тогда
		Цель = М_ПравилаАвтозаполненияШаблонов.ЦельПредоставленияЗемУчасткаФизЛицу(Объект.Владелец);
		Если Не ЗначениеЗаполнено(Цель) Тогда
			Цель = "<Не указана в договоре!>"; 
		КонецЕсли; 
	Иначе
		// Получаем из карточки
		Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
			Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот.ЦельПредоставления) Тогда
				Цель = Объект.КарточкаОбъектаРабот.ЦельПредоставления;
			Иначе
				Цель = "<Не заполнена в карточке!>";
			КонецЕсли; 
		Иначе
			Цель = "";	
		КонецЕсли; 
	КонецЕсли; 
    Возврат Представление+Цель;
КонецФункции // ПолучитьНазваниеЦельПредоставления(КарточкаОбъектаРабот)

&НаКлиенте
Процедура ОбновитьИнформацияПакетДокументов()
    Элементы.ИнформацияПакетДокументов.Заголовок = ПолучитьПредставлениеИнформацияПакетДокументов(Объект.КарточкаОбъектаРабот);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеИнформацияПакетДокументов(КарточкаОбъектаРабот)
    Представление = "Документы не предоставлены";
	Если ЗначениеЗаполнено(КарточкаОбъектаРабот) Тогда
		Если ЗначениеЗаполнено(КарточкаОбъектаРабот.ДатаПредоставленияДокументов) Тогда
			Представление = "Документы предоставлены: "+Формат(КарточкаОбъектаРабот.ДатаПредоставленияДокументов, "ДФ=dd.MM.yyyy") 
			+ " (" + КарточкаОбъектаРабот.ПакетДокументов+")";
		КонецЕсли; 
	КонецЕсли; 
    Возврат Представление;
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопкиИзменитьСтоимость()
	//Элементы.ИзменитьСтоимость.Доступность = Не ЗначениеЗаполнено(Объект.Смета);
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 102);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКарточкуОбъектаРабот(Элемент)

	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура("Владелец", Объект.ОбъектРабот); 
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("Заказчик", ПолучитьКорреспондента(Объект.Владелец));
	Поручение = мРаботаСДоговорами.ПолучитьЗаявкуДоговора(Объект.Владелец);
	ПараметрыФормы.Вставить("Поручение", Поручение);
	ПараметрыФормы.Вставить("ВидРабот", Объект.ВидРабот);
	
	ОткрытьФорму("Справочник.мКарточкиОбъектовРабот.Форма.ФормаВыбора",
		ПараметрыФормы, 
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		КарточкаОбъектаРаботПриИзменении("");
КонецПроцедуры // ВыбратьКарточкуОбъектаРабот()

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтавкиНДС(СтавкаНДС)
	РеквНДС = Новый Структура("ЗначениеСтавкиНДС, БезНДС", Неопределено, Неопределено); 
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		РеквНДС.Вставить("ЗначениеСтавкиНДС", СтавкаНДС.Ставка);
		РеквНДС.Вставить("БезНДС", СтавкаНДС.НеОблагается);
	КонецЕсли;
	Возврат РеквНДС;
КонецФункции // 

#КонецОбласти 

#Область РасчетСтоимости

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписиНового(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Записать();
	
	СоздатьДокументУчетДоговоров("Новый");

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУчетДоговоров(Режим)
	Если Режим = "Новый" Тогда
		ПараметрыКоманды = ЗаполнитьПараметрыДляУчетаДоговоров(Режим);
		ПараметрыКоманды.Вставить("Действие", "Добавить новую");
		ПараметрыКоманды.Вставить("ОткрыватьДокумент", Истина);
		ПараметрыКоманды.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ПараметрыКоманды.Вставить("Оповещать", Истина);
		
		ОткрытьДокументУчетДоговоров(ПараметрыКоманды);
	
	КонецЕсли; 
КонецПроцедуры // СоздатьДокументУчетДоговоров()
 
&НаКлиенте
Процедура РассчитатьДлительностьВыполненияРабот()
	
	Если Не ЗначениеЗаполнено(Объект.ВидРабот) Тогда
		//Сообщить("Необходимо выбрать Вид работ! Длительность работ не рассчитана!");
		Возврат;
	КонецЕсли; 
	
	КоличествоЗемлепользователей = 0;
	Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
		КоличествоЗемлепользователей = мРаботаСДоговорами.ПолучитьКоличествоЗемлепользователейИзКарточки(Объект.КарточкаОбъектаРабот);
	КонецЕсли; 
	
	//ПараметрыЗапроса = Новый Структура("ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей, ПорядокВыполненияСовместно", 
	//	Объект.ВидРабот, 
	//	ТекущаяДата(),
	//	Объект.Город, 
	//	КоличествоЗемлепользователей, 
	//	Объект.ПорядокВыполненияСовместно);
	ПараметрыЗапроса = Новый Структура("ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей", 
		Объект.ВидРабот, 
		ТекущаяДата(),
		Объект.Город, 
		КоличествоЗемлепользователей);
		
    СтруктураДней = РассчитатьДлительностьВыполненияРаботНаСервере(ПараметрыЗапроса);
	
	Объект.ДлительностьВыполненияРабот = СтруктураДней.Количество;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПлановыйСрок()
	Если Объект.ЗапретИзмененияПлановогоСрока Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыДляРасчета = Новый Структура();
	ПараметрыДляРасчета.Вставить("Длительность", Объект.ДлительностьВыполненияРабот); 
	ПараметрыДляРасчета.Вставить("ВидДней", Объект.ВидДней); 
	ПараметрыДляРасчета.Вставить("ДатаПредоставленияРешения", Объект.ДатаПредоставленияРешения);
	ПараметрыДляРасчета.Вставить("ЗапретИзмененияПлановогоСрока", Объект.ЗапретИзмененияПлановогоСрока);
	ПараметрыДляРасчета.Вставить("СтоимостьСНДС", Объект.СтоимостьСНДС);
	Условия = Объект.ШаблонУсловийДоговора;
	СтруктураУсловий = Новый Структура(); 
	СтруктураУсловий.Вставить("ПроцентПредоплаты", Условия.ПроцентПредоплаты);
	СтруктураУсловий.Вставить("УчетДатыПодписания", Условия.УчетДатыПодписания);
	СтруктураУсловий.Вставить("УчетДатыПредоставленияДокументов", Условия.УчетДатыПредоставленияДокументов);
	СтруктураУсловий.Вставить("УчетДатыВозвратаДоговора", Условия.УчетДатыВозвратаДоговора);
	СтруктураУсловий.Вставить("УчетДатыПредоплаты", Условия.УчетДатыПредоплаты);
	СтруктураУсловий.Вставить("УчетДатыВыполненияПредыдущегоЭтапа", Условия.УчетДатыВыполненияПредыдущегоЭтапа);
	СтруктураУсловий.Вставить("УчетДатыПредоставленияРешения", Условия.УчетДатыПредоставленияРешения);
	ПараметрыДляРасчета.Вставить("Условия", СтруктураУсловий);
	
	ПланируемыйСрок = мРаботаСДоговорами.РассчитатьПлановыйСрокВыполненияДоговора(Объект.Ссылка, , Истина, ПараметрыДляРасчета);
	Если ПланируемыйСрок <> Неопределено Тогда
		ПлановыйСрокДляЗаписи = ПланируемыйСрок;
	КонецЕсли; 

КонецПроцедуры 

&НаСервереБезКонтекста
Функция РассчитатьДлительностьВыполненияРаботНаСервере(ПараметрыЗапроса)
    СтруктураДней = Новый Структура("Количество, РабочиеДни", 0, Ложь);

	СтруктураДней = мРаботаСДоговорами.ПолучитьДлительностьРабот(ПараметрыЗапроса);
	
    Возврат СтруктураДней;
КонецФункции

&НаКлиенте
Процедура РассчитатьНДСЭтапа()
    Объект.СуммаНДС = Окр(Объект.Стоимость * ЗначениеСтавкиНДС / 100);
	РассчитатьСтоимостьСНДС();
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьСтоимость()
	Если ЭтоФизЛицо Тогда
		Объект.КоличествоУчастков = ?(Объект.КоличествоУчастков = 0, 1, Объект.КоличествоУчастков);
		Объект.Стоимость = Объект.Цена * Объект.КоличествоУчастков;
	КонецЕсли; 
	
	РассчитатьНДСЭтапа();
	
КонецПроцедуры

&НаСервере
Процедура МесторасположениеПриВыбореСервер()
	КоличествоЗемлепользователей = 0;
	Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
		КоличествоЗемлепользователей = мРаботаСДоговорами.ПолучитьКоличествоЗемлепользователейИзКарточки(Объект.КарточкаОбъектаРабот);
	КонецЕсли; 
	
	ПараметрыЗапроса = Новый Структура("ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей, ПорядокВыполненияСовместно", 
		Объект.ВидРабот, 
		ТекущаяДатаСеанса(),
		Объект.Город, 
		КоличествоЗемлепользователей, 
		Объект.ПорядокВыполненияСовместно);
		
	РассчитатьДлительностьВыполненияРаботНаСервере(ПараметрыЗапроса);
	УстановитьДопУсловиеНормативаЗПСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеСметы(Результат, СтруктураПараметров) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Смета = Результат;
		СметаПриИзменении("");
	КонецЕсли; 
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьДатуДоговора(Договор)
	Возврат Договор.ДатаРегистрации;
КонецФункции // ПолучитьДатуДоговора()

&НаСервереБезКонтекста
Функция ЭтоДоговорКонтрольКачества(Договор) 
	Возврат Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорКонтрольКачества;
КонецФункции
 
&НаКлиенте
Функция СметнаяСтоимостьСоответствуетТЧ()
	СтоимостьСоответствует = Истина;
	Если Объект.Номенклатура.Количество() > 0 Тогда
		Если Объект.СтоимостьСНДС <> Объект.Номенклатура.Итог("Всего") Тогда
			СтоимостьСоответствует = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Объект.Геопортал.Количество() > 0 Тогда
		Если Объект.СтоимостьСНДС <> Объект.Геопортал.Итог("Всего") Тогда
			СтоимостьСоответствует = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Объект.ЗИС.Количество() > 0 Тогда
		Если Объект.СтоимостьСНДС <> Объект.ЗИС.Итог("Всего") Тогда
			СтоимостьСоответствует = Ложь;
		КонецЕсли; 
	КонецЕсли;
	Возврат СтоимостьСоответствует;
КонецФункции

&НаКлиенте
Процедура ЗавершениеВопросаДатаСметы(Результат, ПараметрыВопроса) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Смета = НачальнаяСмета;
	Иначе
		ОбработатьИзменениеСметы();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСметы()
	//	Если смета изменилась, то Удалить УчетДоговоров с даты расчета сметы
	//  и записать новый,
	Если НачальнаяСмета = Объект.Смета Тогда
		Возврат;
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		ДатаСметы = ПолучитьДатуСметы(Объект.Смета);
		// запоминание нового значения сметы
		НачальнаяСмета = Объект.Смета;
	Иначе	
		ДатаСметы = ПолучитьДатуСметы(НачальнаяСмета);
	КонецЕсли; 
	
	ДокиУдалены = УдалитьУчетыДоговоровСДаты(ДатаСметы, Объект.Ссылка);
	Если Не ДокиУдалены Тогда
		//Сообщить("Отказ в записи этапа, т.к. не все документы Учет договоров были удалены после "+ДатаСметы);
		Сообщить("Не все документы Учет договоров были удалены после "+ДатаСметы);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		РеквСметы = ПолучитьРеквизитыСметы(Объект.Смета);
		//УдалитьУчетДоговоровНаДату(РеквСметы, Объект.Ссылка);
		
		// Запись нового УчетДоговоров
		РеквСметы.Вставить("НеИзменятьЭтап", Истина);
		РеквСметы.Вставить("ЭтапДоговора", Объект.Ссылка);
		РеквСметы.Вставить("Договор", Объект.Владелец);
		РеквСметы.Вставить("Смета", Объект.Смета);
		РеквСметы.Вставить("ОснованиеДоговор", Объект.Владелец);
		РеквСметы.Вставить("ОснованиеЭтапДоговора", Объект.Ссылка);
		РеквСметы.Вставить("Сумма", РеквСметы.СтоимостьСНДС);
		РеквСметы.Вставить("НДС", РеквСметы.СуммаНДС);
		РеквСметы.Вставить("Подразделение", Объект.Подразделение);
		РеквСметы.Вставить("Дата", РеквСметы.ДатаПоследнейЗаписи);
		
		мРаботаСДоговорами.ЗаписатьНовыйУчетДоговоров(Объект.Ссылка, РеквСметы.ДатаПоследнейЗаписи, Ложь, РеквСметы);
	КонецЕсли; 
	
	//   Заполнить этап из последнего УчетДоговоров
	СтруктураРекв = мРазноеКлиент.ПолучитьСтруктуруРеквизитовСметнойСтоимости();
	ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРекв);
	
	НачальнаяСмета = Объект.Смета;
	
	УстановитьДоступностьКнопкиИзменитьСтоимость();
	Записать();
	ЗаполнитьИсториюСтоимости();
КонецПроцедуры

&НаКлиенте
Процедура СметаПриИзменении1(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		
		// Нельзя выбирать смету, помеченную на удаление
		Если СметаПомеченаНаУдаление(Объект.Смета) Тогда
			Объект.Смета = НачальнаяСмета;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя выбирать смету, помеченную на удаление!'"), ,
			"Объект.Смета");
			Возврат;
		КонецЕсли;
		
		// нельзя выбирать смету с датой меньше даты последней записи
		Если ПолучитьДатуСметы(Объект.Смета) < Объект.ДатаПоследнейЗаписи Тогда
			Объект.Смета = НачальнаяСмета;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя выбирать смету с датой расчета раньше даты последней записи сметной стоимости!'"), ,
			"Объект.Смета");
			Возврат;
		КонецЕсли; 
		
		//	Если смета изменилась, то Удалить УчетДоговоров на дату расчета сметы
		//  и записать новый,
		Если НачальнаяСмета <> Объект.Смета Тогда
			РеквСметы = ПолучитьРеквизитыСметы(Объект.Смета);
			УдалитьУчетДоговоровНаДату(РеквСметы, Объект.Ссылка);
			
			// Запись нового УчетДоговоров
			РеквСметы.Вставить("НеИзменятьЭтап", Истина);
			РеквСметы.Вставить("ЭтапДоговора", Объект.Ссылка);
			РеквСметы.Вставить("Договор", Объект.Владелец);
			РеквСметы.Вставить("Смета", Объект.Смета);
			РеквСметы.Вставить("ОснованиеДоговор", Объект.Владелец);
			РеквСметы.Вставить("ОснованиеЭтапДоговора", Объект.Ссылка);
			РеквСметы.Вставить("Сумма", РеквСметы.СтоимостьСНДС);
			РеквСметы.Вставить("НДС", РеквСметы.СуммаНДС);
			РеквСметы.Вставить("Подразделение", Объект.Подразделение);
			РеквСметы.Вставить("Дата", РеквСметы.ДатаПоследнейЗаписи);
			
			мРаботаСДоговорами.ЗаписатьНовыйУчетДоговоров(Объект.Ссылка, РеквСметы.ДатаПоследнейЗаписи, Ложь, РеквСметы);
		
			//   Заполнить этап из последнего УчетДоговоров
			СтруктураРекв = мРазноеКлиент.ПолучитьСтруктуруРеквизитовСметнойСтоимости();
			ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураРекв);
		КонецЕсли; 
		
		// изменение реквизитов этапа через ОбработкуОповещения
	Иначе
		// Смета в этапе была удалена
		//   Заполнить этап из последнего УчетДоговоров
		СтруктураРекв = мРазноеКлиент.ПолучитьСтруктуруРеквизитовСметнойСтоимости();
		ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРекв);
	КонецЕсли; 
	
    // изменение таб части Сметы
	Если ЗначениеЗаполнено(Объект.Смета) Тогда
		Отбор = Новый Структура("Смета", Объект.Смета); 
		МассивСтрок = Объект.Сметы.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСмета = Объект.Сметы.Добавить();
			НоваяСмета.Смета = Объект.Смета;
			НоваяСмета.Актуальная = Истина;
		Иначе
			МассивСтрок[0].Актуальная = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	// Актуальной может быть только одна смета
	Если Объект.Сметы.Количество() > 1 Тогда
		Для каждого ТекСмета Из Объект.Сметы Цикл
			Если ТекСмета.Смета <> Объект.Смета Тогда
				ТекСмета.Актуальная = Ложь;
			КонецЕсли; 
		КонецЦикла;     
	КонецЕсли;
	
	УстановитьДоступностьКнопкиИзменитьСтоимость();
	Записать();
	ЗаполнитьИсториюСтоимости();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьУчетДоговоровНаДату(РеквСметы, ЭтапДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Ссылка
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.Дата МЕЖДУ &Дата1 И &Дата2
		|	И УчетДоговоров.ЭтапДоговора = &ЭтапДоговора
		|	И УчетДоговоров.Проведен";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(РеквСметы.ДатаПоследнейЗаписи));
	Запрос.УстановитьПараметр("Дата2", КонецДня(РеквСметы.ДатаПоследнейЗаписи));
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскДок = Выборка.Ссылка.ПолучитьОбъект();
		ИскДок.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СметаПомеченаНаУдаление(Смета)
	Возврат Смета.ПометкаУдаления;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуСметы(Смета)
	Возврат Смета.ДатаРасчетаСметы;	
КонецФункции

&НаСервере
Процедура ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетДоговоров.Дата КАК ДатаПоследнейЗаписи,
		|	УчетДоговоров.Сумма КАК СтоимостьСНДС,
		|	УчетДоговоров.НДС КАК СуммаНДС,
		|	УчетДоговоров.Сумма - УчетДоговоров.НДС КАК Стоимость,
		|	УчетДоговоров.СтавкаНДС,
		|	УчетДоговоров.Цена,
		|	УчетДоговоров.КоличествоУчастков,
		|	УчетДоговоров.ОсвобождениеОтНДС,
		|	УчетДоговоров.Смета
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.ЭтапДоговора = &ЭтапДоговора
		|	И УчетДоговоров.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	УчетДоговоров.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРекв, Выборка);
	КонецЕсли;
КонецПроцедуры 
 
&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВопроса(Результат, ТекСмета) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		// Вернем смету в таб часть
		Отбор = Новый Структура("Смета", ТекСмета);
		ИскСтроки = Объект.Сметы.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() = 0 Тогда
			Стр = Объект.Сметы.Добавить();
			Стр.Смета = Объект.Смета;
		Иначе
			Стр = ИскСтроки[0];
		КонецЕсли; 
		Стр.Актуальная = Истина;
		Объект.Смета = НачальнаяСмета;
        Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСмета) Тогда
		СметыПередУдалениемНаСервере(ТекСмета);
		Если Объект.Смета = ТекСмета Тогда
			Объект.Смета = "";
			СметаПриИзменении("");
			//Записать();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПараметрыФормыПоСметам(Ссылка, ПараметрыФормы)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровОбъектыРабот.Смета.Итого КАК Стоимость,
		|	мЭтапыДоговоровОбъектыРабот.Смета.НДС КАК СуммаНДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате КАК СтоимостьСНДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Справочник.мЭтапыДоговоров.ОбъектыРабот КАК мЭтапыДоговоровОбъектыРабот
		|ГДЕ
		|	мЭтапыДоговоровОбъектыРабот.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(Стоимость),
		|	СУММА(СуммаНДС),
		|	СУММА(СтоимостьСНДС),
		|	МАКСИМУМ(СтавкаНДС)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПараметрыФормы.Вставить("Стоимость", Выборка.Стоимость);		
		ПараметрыФормы.Вставить("СтавкаНДС", Выборка.СтавкаНДС);		
		ПараметрыФормы.Вставить("СуммаНДС", Выборка.СуммаНДС);		
		ПараметрыФормы.Вставить("СтоимостьСНДС", Выборка.СтоимостьСНДС);
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеИзмененияСметнойСтоимости(Результат, ПараметрыФормы) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЕстьИзменения = Ложь;
		Для каждого Эл Из Результат Цикл
			Если Эл.Значение <> ЭтаФорма["ПриОткрытии"+Эл.Ключ] Тогда
				ЕстьИзменения = Истина;	
				Объект[Эл.Ключ] = Эл.Значение;
			КонецЕсли; 
		КонецЦикла;
		Если ЕстьИзменения Тогда
			ЗаписатьИзменениеСметнойСтоимости(Ложь);
			Записать();
			ЗаполнитьИсториюСтоимости();
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПараметрыДляУчетаДоговоров(Режим)
	Если ЭтоУчетПроизводства Тогда
		// Заполнение этапа итогами
		ЦенаОбъекта = 0;
		КоличествоУчастков = 0;
		Стоимость = Объект.Номенклатура.Итог("Сумма");
		СуммаНДС = Объект.Номенклатура.Итог("НДС");
		СтоимостьСНДС = Объект.Номенклатура.Итог("Всего");
        Если ЗначениеЗаполнено(Объект.ДатаПоследнейЗаписи) Тогда
    		ДатаДок = НачалоДня(Объект.ДатаПоследнейЗаписи);
        Иначе
    		ДатаДок = НачалоДня(ТекущаяДата());
        КонецЕсли; 
		Объект.СтавкаНДС = Объект.Номенклатура[0].СтавкаНДС;
		Объект.ОсвобождениеОтНДС = Объект.Номенклатура[0].ОсвобождениеОтНДС;
	Иначе
		Если Режим = "Новый" Тогда
			Если ЭтоФизЛицо Тогда
				// расчет для физ лиц
				РеквСтоимости = мРаботаСДоговорами.ПолучитьРеквизитыСтоимостиРаботДляФизЛиц(Объект.ВидРабот, Объект.Владелец);
				Объект.СтавкаНДС = РеквСтоимости.СтавкаНДС;
				Объект.ОсвобождениеОтНДС = РеквСтоимости.ОсвобождениеОтНДС;
				
				ЦенаОбъекта = РеквСтоимости.Цена;
				КоличествоУчастков = 1;
				Стоимость = ЦенаОбъекта * КоличествоУчастков;
				СуммаНДС = Окр(Стоимость * РеквСтоимости.ЗначениеСтавкиНДС / 100, 2);
				СтоимостьСНДС = Стоимость + СуммаНДС;
				ДатаДок = НачалоДня(ТекущаяДата());
			Иначе
				// Берем данные из этапа
				ЦенаОбъекта = Объект.Цена;
				КоличествоУчастков = Объект.КоличествоУчастков;
				Стоимость = Объект.Стоимость;
				СуммаНДС = Объект.СуммаНДС;
				СтоимостьСНДС = Объект.СтоимостьСНДС;
				ДатаДок = НачалоДня(Объект.ДатаПоследнейЗаписи);
			КонецЕсли;
		Иначе
			// Берем данные из этапа
			ЦенаОбъекта = Объект.Цена;
			КоличествоУчастков = Объект.КоличествоУчастков;
			Стоимость = Объект.Стоимость;
			СуммаНДС = Объект.СуммаНДС;
			СтоимостьСНДС = Объект.СтоимостьСНДС;
			ДатаДок = НачалоДня(Объект.ДатаПоследнейЗаписи);
		КонецЕсли; 	
	КонецЕсли; 
		
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("КоличествоУчастков", КоличествоУчастков);
	ПараметрыКоманды.Вставить("Цена", ЦенаОбъекта);
	ПараметрыКоманды.Вставить("Дата", ДатаДок);
	ПараметрыКоманды.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	ПараметрыКоманды.Вставить("ОсвобождениеОтНДС", Объект.ОсвобождениеОтНДС);
	ПараметрыКоманды.Вставить("Стоимость", Стоимость);
	ПараметрыКоманды.Вставить("НДС", СуммаНДС);
	ПараметрыКоманды.Вставить("Сумма", СтоимостьСНДС);
	ПараметрыКоманды.Вставить("Договор", Объект.Владелец);
	ПараметрыКоманды.Вставить("ЭтапДоговора", Объект.Ссылка);
	ПараметрыКоманды.Вставить("ОснованиеЭтапДоговора", Объект.Ссылка);
	ПараметрыКоманды.Вставить("ОснованиеДоговор", Объект.Владелец);
	ПараметрыКоманды.Вставить("Смета", Объект.Смета);
	ПараметрыКоманды.Вставить("Подразделение", Объект.Подразделение);

	Возврат ПараметрыКоманды;

КонецФункции // ЗаполнитьПараметрыДляУчетаДоговоров()

&НаКлиенте
Процедура ОткрытьДокументУчетДоговоров(ПараметрыКоманды)
	Оп = Новый ОписаниеОповещения("ОбработатьЗакрытиеУчетДоговора", ЭтаФорма, ПараметрыКоманды);
	ОткрытьФорму("Документ.УчетДоговоров.Форма.ФормаДокумента", ПараметрыКоманды, ЭтаФорма, , , ,Оп, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	УчетДоговоровРавенСмете = Истина;
КонецПроцедуры // ОткрытьДокументУчетДоговоров()

&НаКлиенте
Процедура ОбработатьЗакрытиеУчетДоговора(Результат, ПараметрыКоманды) Экспорт
	//   Заполнить этап из последнего УчетДоговоров
	СтруктураРекв = мРазноеКлиент.ПолучитьСтруктуруРеквизитовСметнойСтоимости();
	ПолучитьПоследнююСтоимостьЭтапа(СтруктураРекв);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРекв);
КонецПроцедуры
 
&НаСервере
Функция ПолучитьУчетДоговоров(Дата, ЭтапДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Ссылка
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УчетДоговоров.Дата, ДЕНЬ) = &Дата
		|	И УчетДоговоров.ЭтапДоговора = &ЭтапДоговора
		|	И НЕ УчетДоговоров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции // ПолучитьУчетДоговоров(Дата, ЭтапДоговора)

&НаСервере
Функция ПолучитьСтоимостьРабот(ВидРабот, Договор)
	
	Стоимость = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорреспондентыДополнительныеРеквизиты.Значение,
		|	КорреспондентыДополнительныеРеквизиты.Ссылка КАК ФизЛицо
		|ПОМЕСТИТЬ КатегорияФизЛица
		|ИЗ
		|	Справочник.Корреспонденты.ДополнительныеРеквизиты КАК КорреспондентыДополнительныеРеквизиты
		|ГДЕ
		|	КорреспондентыДополнительныеРеквизиты.Свойство.Наименование ПОДОБНО ""%Категории физлиц%""
		|	И КорреспондентыДополнительныеРеквизиты.Ссылка = &Корреспондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК ФизЛицо,
		|	ЕСТЬNULL(КатегорияФизЛица.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяССылка)) КАК Категория
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ КатегорияФизЛица КАК КатегорияФизЛица
		|		ПО (КатегорияФизЛица.ФизЛицо = Корреспонденты.Ссылка)
		|ГДЕ
		|	Корреспонденты.Ссылка = &Корреспондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мПрейскурантСрезПоследних.Стоимость
		|ИЗ
		|	РегистрСведений.мПрейскурант.СрезПоследних(
		|			&Дата,
		|			ВидРаботФизЛица = &ВидРаботПоДоговору
		|				И КатегорияФизЛиц В
		|					(ВЫБРАТЬ
		|						Данные.Категория
		|					ИЗ
		|						Данные КАК Данные)) КАК мПрейскурантСрезПоследних";

	Запрос.УстановитьПараметр("ВидРаботПоДоговору", ВидРабот);
	Запрос.УстановитьПараметр("Дата", Договор.ДатаРегистрации);
	Запрос.УстановитьПараметр("Корреспондент", Договор.Корреспондент);

	Результат = Запрос.Выполнить().Выгрузить();

	Если Результат.Количество() > 0 Тогда
		Стоимость = Результат[0].Стоимость;
	КонецЕсли; 		
	
	Возврат Стоимость;

КонецФункции // ПолучитьСтоимостьРабот(ВидРабот, Дата)

&НаСервереБезКонтекста
Функция  ПолучитьВидРаботИзКарточки(КарточкаОбъектаРабот)
	Возврат КарточкаОбъектаРабот.ВидРабот;
КонецФункции	

&НаСервере
Процедура УстановитьДопУсловиеНормативаЗПСервер()
	
	Объект.ДопУсловиеНормативаЗП = "";
	
	ЭтоГород = мРаботаСДоговорами.ЭтоГород(Объект.Город);
	Если ЭтоГород Тогда
		Объект.ДопУсловиеНормативаЗП = ПредопределенноеЗначение("Справочник.мДопУсловияНормативаЗП.ПоГороду");
	КонецЕсли; 	
КонецПроцедуры // УстановитьДопУсловиеНормативаЗП()

&НаКлиенте
Процедура УстановитьДопУсловиеНормативаЗП()
	
	Объект.ДопУсловиеНормативаЗП = "";
	
	ЭтоГород = мРаботаСДоговорами.ЭтоГород(Объект.Город);
	Если ЭтоГород Тогда
		Объект.ДопУсловиеНормативаЗП = ПредопределенноеЗначение("Справочник.мДопУсловияНормативаЗП.ПоГороду");
	КонецЕсли; 	
КонецПроцедуры // УстановитьДопУсловиеНормативаЗП()

#КонецОбласти 

#Область УправлениеДиалогом

// Устанавливает видимость реквизитов диалога 
&НаСервере
Процедура УправлениеДиалогом()
	
	СкрытьРеквизиты(Объект.Владелец.ВидДокумента, Объект.ВидЭтапа, Объект.ВидРабот);
	ПоказатьРеквизиты(Объект.Владелец.ВидДокумента, Объект.ВидЭтапа, Объект.ВидРабот);
	
	// Размещение элементов
	Если Объект.ВидЭтапа = Перечисления.мВидыЭтапов.НесколькоОбъектовЮрЛицо Тогда
		Элементы.Переместить(Элементы.ГруппаИсполнители, Элементы.ЛеваяКолонка, );
		
	ИначеЕсли Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектЮрЛицо Тогда
		Элементы.Переместить(Элементы.ГруппаИсполнители, Элементы.ПраваяКолонка, );
		
	ИначеЕсли Объект.ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектФизЛицо Тогда
		Элементы.Переместить(Элементы.ГруппаИсполнители, Элементы.ПраваяКолонка, );
	КонецЕсли; 
	
	// Если есть движения по РН РасчетыСПокупателями, то запрет редактирования ДатаИсключенИзДоговора
	Элементы.ДатаИсключенИзДоговора.Доступность = НетДвиженийПоЭтапу(Объект.Ссылка);
	
КонецПроцедуры 

&НаСервере
Процедура ВидимостьДатыПредоставленияРешения()
    // если в Шаблоне условий договора отмечено УчетДатыПредоставленияРешения
    // тогда дату показываем на форме 
    //   иначе - прячем
    ПоказатьДату = Истина;
    Если Не ЗначениеЗаполнено(Объект.ШаблонУсловийДоговора) Тогда
        ПоказатьДату = Ложь;
	КонецЕсли;
	
    Если ПоказатьДату Тогда
	    ПоказатьДату = Объект.ШаблонУсловийДоговора.УчетДатыПредоставленияРешения;
		
		// сброс даты, если не нужен учет
		Если Не ПоказатьДату Тогда
			Если ЗначениеЗаполнено(Объект.ДатаПредоставленияРешения) Тогда
				Объект.ДатаПредоставленияРешения = '00010101000000';
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
    Элементы.ДатаПредоставленияРешения.Видимость = ПоказатьДату;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОсвобождениеОтНДС()
	Элементы.ОсвобождениеОтНДС.Видимость = БезНДС;
КонецПроцедуры

&НаСервере
Процедура СкрытьРеквизиты(ВидДокумента, ВидЭтапа, ВидРабот)
	МассивРеквизитов = МассивСкрываемыхРеквизитов(ВидДокумента, ВидЭтапа, ВидРабот);
	
	Для каждого Эл Из МассивРеквизитов Цикл
		Элементы[Эл].Видимость = Ложь;
	КонецЦикла; 
КонецПроцедуры

// Возвращает массив имен полей, которые надо скрыть в форме
//  Параметры
//  ВидДокумента - Вид договора 
//  ВидЭтапа
&НаСервере
Функция МассивСкрываемыхРеквизитов(ВидДокумента, ВидЭтапа, ВидРабот)
	Имена = "ГруппаСКнопкой, ГруппаДатыАкта, ГруппаГеопортал, ГруппаТКП, ГруппаЗИС, Договор";
	
	Если ВидЭтапа = Перечисления.мВидыЭтапов.НесколькоОбъектовЮрЛицо Тогда
		
		Имена = Имена + ", ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
		|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
		|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
		|ГруппаДлительность, ГруппаПлановыйСрок, ФормаСоздатьСмету, 
		|ИсторияСметнойСтоимостиГруппаЦена, ИсторияСметнойСтоимостиСмета";
		
	ИначеЕсли ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектЮрЛицо Тогда
		
		Имена = Имена + ", ДатаВозвратаАкта, ДатаПечатиАкта, ГруппаОбъектыРабот,
		|ИсторияСметнойСтоимостиГруппаЦена";
		
		Если ВидРабот = Справочники.мВидыРаботЮрЛица.УслугиПоКонтролюЗаКачеством Тогда
			
			Имена = Имена + ", ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
			|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
			|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
			|ГруппаДлительность, ГруппаПлановыйСрок";
			
		ИначеЕсли ЗначениеЗаполнено(ВидРабот) И ВидРабот.УчетПроизводства Тогда
			
			Имена = Имена + ", ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
			|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
			|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
			|ГруппаДлительность, ГруппаПлановыйСрок";
			
			Если ВидРабот = Справочники.мВидыРаботЮрЛица.ИзготовлениеИПоставкаТКП Тогда
				Имена = Имена + ", ТаблицаТКПКоличествоКвартал";
			КонецЕсли; 
		КонецЕсли; 
		
		Если ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорГеопортал  Тогда
			
			Имена = Имена + ", ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
			|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
			|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
			|ГруппаДлительность, ГруппаПлановыйСрок";
			
		ИначеЕсли ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорВнесениеЗИС Тогда
			
			Имена = Имена + ", ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
			|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
			|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
			|ГруппаДлительность, ГруппаПлановыйСрок";
		КонецЕсли; 
		
	ИначеЕсли ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектФизЛицо Тогда
		
		Имена = Имена + ", ОбъектРабот, ДатаВозвратаАкта, ДатаПечатиАкта, ФормаСоздатьСмету, ГруппаСметы,
		|ИнформацияПакетДокументов, КарточкаОбъектаРабот, ГруппаОбъектыРабот, ИсторияСметнойСтоимостиСмета";
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Если ВидРабот.НеРассчитыватьПлановыйСрок Тогда
			Имена = Имена + ", ГруппаДлительность, ГруппаПлановыйСрок, НовыйПлановыйСрок";
		Иначе	
			Имена = Имена + ", ДатаРегистрации"; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Имена, , , Истина);

КонецФункции

&НаСервере
Процедура ПоказатьРеквизиты(ВидДокумента, ВидЭтапа, ВидРабот)
	МассивРеквизитов = МассивПоказываемыхРеквизитов(ВидДокумента, ВидЭтапа, ВидРабот);
	
	Для каждого Эл Из МассивРеквизитов Цикл
		Элементы[Эл].Видимость = Истина;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция МассивПоказываемыхРеквизитов(ВидДокумента, ВидЭтапа, ВидРабот)
	Имена = "";
	
	Если ВидЭтапа = Перечисления.мВидыЭтапов.НесколькоОбъектовЮрЛицо Тогда
		Имена = "ГруппаОбъектыРабот";
		
	ИначеЕсли ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектЮрЛицо Тогда
		
		Если ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорГеопортал  Тогда
			
			Имена = "ГруппаГеопортал";
			
		ИначеЕсли ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорВнесениеЗИС Тогда
			
			Имена = "ГруппаЗИС";
		Иначе
			
			Если ЗначениеЗаполнено(ВидРабот) И ВидРабот.УчетПроизводства Тогда
				Имена = "ГруппаТКП";
				
				Если Объект.ВидРабот = Справочники.мВидыРаботЮрЛица.ИзготовлениеИПоставкаТКП Тогда
					Имена = Имена + ", ТКПКалькуляцияТКП, ТКПЦена";
					Элементы.ТКПЦена.ТолькоПросмотр = Истина;
				Иначе
					Имена = Имена + ", ТаблицаТКПКоличествоКвартал";
				КонецЕсли;
			Иначе
				Имена = "ОбъектРабот, Месторасположение, КарточкаОбъектаРабот, ДоляОбъекта,
				|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
				|ГруппаСметы, Срочность, ПорядокВыполненияСовместно, ИнформацияПакетДокументов,
				|ИсторияСметнойСтоимостиСмета, ФормаСоздатьСмету";
				
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ВидЭтапа = Перечисления.мВидыЭтапов.ОдинОбъектФизЛицо Тогда
		Имена = "Месторасположение, ДоляОбъекта,
		|ГруппаУсловия, НазваниеЦельПредоставления, КоличествоДел, ГруппаЭтаповДоговоров,
		|Срочность, ПорядокВыполненияСовместно,
		|ГруппаДлительность, ГруппаПлановыйСрок, ИсторияСметнойСтоимостиГруппаЦена";
		
		Если Константы.М_Гродно.Получить() Тогда
			Имена = Имена + ", ОбъектРабот";
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Если ВидРабот.НеРассчитыватьПлановыйСрок Тогда
			Имена = Имена + ?(Имена="", "", ", ") + "ДатаРегистрации";
		Иначе
			Имена = Имена + ?(Имена="", "", ", ") + "ГруппаДлительность, ГруппаПлановыйСрок, НовыйПлановыйСрок";
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Имена, , , Истина);
КонецФункции
 
&НаСервере
Процедура ПоказатьОбщиеРеквизиты()
	Элементы.ОбъектРабот.Видимость = Истина;
	Элементы.Месторасположение.Видимость = Истина;
	Элементы.КарточкаОбъектаРабот.Видимость = Истина;
	Элементы.ДоляОбъекта.Видимость = Истина;
	Элементы.ГруппаУсловия.Видимость = Истина;
	Элементы.НазваниеЦельПредоставления.Видимость = Истина;
	Элементы.КоличествоДел.Видимость = Истина;
	Элементы.ГруппаЭтаповДоговоров.Видимость = Истина;
	Элементы.Срочность.Видимость = Истина;
	Элементы.ПорядокВыполненияСовместно.Видимость = Истина;
	Элементы.ИнформацияПакетДокументов.Видимость = Истина;
	Элементы.ГруппаДлительность.Видимость = Истина;
	Элементы.ГруппаПлановыйСрок.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРаботСметаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
		ПараметрыСметы = Новый Структура();
		ПараметрыСметы.Вставить("ЭтапДоговора", Объект.Ссылка);
		ПараметрыСметы.Вставить("ОбъектРабот", ТекДанные.ОбъектРабот);
		ПараметрыСметы.Вставить("ВидРабот", ТекДанные.ВидРабот);
		ПараметрыСметы.Вставить("НомерСметы", ТекДанные.НомерСтроки);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьСозданиеСметы", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.мСметы.ФормаОбъекта", ПараметрыСметы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеСметы(Результат, Параметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
		ТекДанные.Смета = Результат;
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьПодразделениеЭтапаПоПервомуИсполнителю();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодразделениеЭтапаПоПервомуИсполнителю()
	Если Объект.Исполнители.Количество() > 0 Тогда
		ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(Объект.Исполнители[0].Исполнитель);
		Если Объект.Подразделение <> ПодразделениеИсполнителя Тогда
			Объект.Подразделение = ПодразделениеИсполнителя;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЭтапДоговораОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПорядокВыполненияСовместно.Видимость = Ложь;
	Объект.ПорядокВыполненияСовместно = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойЭтапДоговораПриИзменении(Элемент)
	Модифицированность = Истина;
	Элементы.ПорядокВыполненияСовместно.Видимость = ЗначениеЗаполнено(ОсновнойЭтапДоговора);
	Если ОсновнойЭтапДоговора = Объект.Ссылка Тогда
		Сообщить("Нельзя выбирать в качестве основного текущий этап. Выберите другой этап договора.");
		ОсновнойЭтапДоговора = Неопределено;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	Объект.РучноеИзменениеСостояния = ЗначениеЗаполнено(Объект.Состояние);	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСостояниеЭтапа()
	Если Не Объект.РучноеИзменениеСостояния Тогда
		Пар = мРаботаСДоговорами.ПараметрыДляРасчетаСостоянияЭтапаДоговора();
		Шаблон = Объект.ШаблонУсловийДоговора;
		Пар.Вставить("СостояниеДоговора", мРаботаСДоговорами.ПолучитьСостояниеДоговора(Объект.Владелец));
		Пар.Вставить("ЭтапДоговора", Объект.Ссылка);
		Если ЗначениеЗаполнено(Шаблон) Тогда
			Пар.Вставить("УчетДатыПредоставленияРешения", Шаблон.УчетДатыПредоставленияРешения);
			Пар.Вставить("УчетПредоплаты", Шаблон.УчетДатыПредоплаты); 
			Пар.Вставить("ПроцентПредоплаты", Шаблон.ПроцентПредоплаты); 
		КонецЕсли; 
		Пар.Вставить("ДатаПредоставленияРешения", Объект.ДатаПредоставленияРешения); 
		Пар.Вставить("СметнаяСтоимость", Объект.СтоимостьСНДС);
		Пар.Вставить("Оплата", 0);
		Пар.Вставить("ДанныеВПараметрах", Истина);

		Объект.Состояние = мРаботаСДоговорами.РассчитатьСостояниеЭтапаДоговора(Пар);	
	КонецЕсли; 
КонецПроцедуры
 


#КонецОбласти 