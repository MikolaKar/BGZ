#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПриКопировании(ОбъектКопирования)
	
	РегистрационныйНомер = "";
	ЧисловойНомер 	= 0;
	ДатаРегистрации	= '00010101';
	ДатаСоздания 	= ТекущаяДатаСеанса();
	Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
	
	ИсходящийНомер	= "";
	ИсходящаяДата	= '00010101';
	СрокИсполнения 	= '00010101';
	
	КоличествоЭкземпляров = 1;
	КоличествоЛистов 	 = 1;
	КоличествоПриложений = 0;
	ЛистовВПриложениях 	 = 0;
	Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
	
	ПодписанЭП = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если ЭтоНовый() Тогда
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации	= '00010101';
		ДатаСоздания 	= ТекущаяДатаСеанса();
		Зарегистрировал = ПользователиКлиентСервер.ТекущийПользователь();
		
		ИсходящийНомер	= "";
		ИсходящаяДата	= '00010101';
		ОтправленОтвет	= Справочники.ИсходящиеДокументы.ПустаяСсылка();
		ВОтветНа		= Справочники.ИсходящиеДокументы.ПустаяСсылка();
		СрокИсполнения 	= '00010101';
		
		КоличествоЭкземпляров = 1;
		КоличествоЛистов 	  = 1;
		КоличествоПриложений  = 0;
		ЛистовВПриложениях 	  = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		
		Резолюция 	   = "";
		АвторРезолюции = Справочники.Пользователи.ПустаяСсылка();
		ДатаРезолюции  = '00010101';
		
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СпособПолучения) Тогда 
			СпособПолучения = Делопроизводство.ПолучитьСпособДоставкиПоУмолчанию("СпособПолучения");
		КонецЕсли;
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВходящих", 
			Новый Структура("ВидВходящегоДокумента", ВидДокумента)) Тогда 
			Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		//заполнить данными из шаблона
		ОснованиеЗаполнения = ДанныеЗаполнения.Основание;
		СписокРеквизитовЗаполнения = "";
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		Для Каждого АтрибутШаблона Из ДанныеЗаполнения Цикл
			Если МетаданныеОбъекта.Реквизиты.Найти(АтрибутШаблона.Ключ) <> Неопределено
				И ЗначениеЗаполнено(АтрибутШаблона.Значение) Тогда
				Если ЗначениеЗаполнено(СписокРеквизитовЗаполнения) Тогда
					СписокРеквизитовЗаполнения = СписокРеквизитовЗаполнения + "," + АтрибутШаблона.Ключ;
				Иначе
					СписокРеквизитовЗаполнения = АтрибутШаблона.Ключ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СписокРеквизитовЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, СписокРеквизитовЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	// Ввод на основании исходящего документа.
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Если ОснованиеЗаполнения.Получатели.Количество() = 1 Тогда 
			Отправитель = ОснованиеЗаполнения.Получатели[0].Получатель;
			Подписал = ОснованиеЗаполнения.Получатели[0].Адресат;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВходящиеДокументы.Ссылка,
			|	ВходящиеДокументы.Отправитель,
			|	ВходящиеДокументы.Подписал
			|ИЗ
			|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументовВОтветНа
			|		ПО ВходящиеДокументы.Ссылка = СвязиДокументовВОтветНа.Документ
			|			И (СвязиДокументовВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
			|ГДЕ
			|	СвязиДокументовВОтветНа.СвязанныйДокумент = &ВОтветНа";
			Запрос.УстановитьПараметр("ВОтветНа", ОснованиеЗаполнения.Ссылка);
			
			Выборка = Запрос.Выполнить().Выгрузить();
			Для Каждого Строка Из ОснованиеЗаполнения.Получатели Цикл
				ПараметрыОтбора = Новый Структура("Отправитель, Подписал", Строка.Получатель, Строка.Адресат);
				Если Выборка.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
					Отправитель = Строка.Получатель;
					Подписал = Строка.Адресат;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Адресат = ОснованиеЗаполнения.Подписал;
		Подразделение = ОснованиеЗаполнения.Подразделение;
		ГрифДоступа = ОснованиеЗаполнения.ГрифДоступа;
		ВопросДеятельности = ОснованиеЗаполнения.ВопросДеятельности;
		Организация = ОснованиеЗаполнения.Организация;
		Проект = ОснованиеЗаполнения.Проект;
	
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("Массив")   
		И ОснованиеЗаполнения.Количество() > 0
		И ТипЗнч(ОснованиеЗаполнения[0]) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ОснованиеЗаполнения.Количество() = 1 И Не ЗначениеЗаполнено(Заголовок) Тогда			
			Заголовок = ОснованиеЗаполнения[0].ПолноеНаименование;			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не ЗначениеЗаполнено(Проект) Тогда
			Проекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОснованиеЗаполнения, "Проект");
			Проект = Проекты.Получить(ОснованиеЗаполнения[0]);
			Для Каждого Строка Из Проекты Цикл
				Если Строка.Значение <> Проект Тогда 
					Проект = Неопределено;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
			
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеЗаполнения) Тогда
		
		ОснованиеЗаполненияОбъект = ОснованиеЗаполнения.ПолучитьОбъект();
		
		Содержание = ОснованиеЗаполненияОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
		Заголовок = ОснованиеЗаполненияОбъект.Тема;
		Проект = ОснованиеЗаполненияОбъект.Проект;
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ОснованиеЗаполнения) Тогда
			СтруктураРезультата = ВстроеннаяПочтаСервер.ПолучитьКорреспондентаИКонтактноеЛицоПоСтрокеАдреса(ОснованиеЗаполненияОбъект.ОтправительАдресат.Адрес);
			Если СтруктураРезультата <> Неопределено Тогда
				Отправитель = СтруктураРезультата.Корреспондент;
			КонецЕсли;
		КонецЕсли;
		
// 1С-Минск		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Если СтрНайти(ОснованиеЗаполнения.ВидДокумента.Наименование, "Поручение") > 0 Тогда
			ВидДокумента = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию("Документы к поручению", Ложь);
		КонецЕсли; 
		Отправитель = ОснованиеЗаполнения.Отправитель;
		Подписал = ОснованиеЗаполнения.Подписал;
		ВопросДеятельности = ОснованиеЗаполнения.ВопросДеятельности;
		Подразделение = ОснованиеЗаполнения.Подразделение;
		Адресат = ОснованиеЗаполнения.Адресат;
// 1С-Минск		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Отправитель"));
	
	//МиСофт+ 08.04.2015
	ОбращениеФизЛица = ПолучитьФункциональнуюОпцию("УчитыватьКакОбращениеГраждан", Новый Структура("ВидВходящегоДокумента", ВидДокумента)) И ВидДокумента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Если Не ОбращениеФизЛица Тогда 
	//МиСофт- 08.04.2015
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВидОбращения"));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВходящих", Новый Структура("ВидВходящегоДокумента", ВидДокумента)) Тогда 
		Если ЗначениеЗаполнено(Сумма) Тогда 
			ПроверяемыеРеквизиты.Добавить("Валюта");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходящийНомер) И ЗначениеЗаполнено(ИсходящаяДата) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящийДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
		|ГДЕ
		|	ВходящийДокумент.ИсходящийНомер = &ИсходящийНомер
		|	И ВходящийДокумент.ИсходящаяДата = &ИсходящаяДата
		|	И ВходящийДокумент.Отправитель = &Отправитель
		|	И ВходящийДокумент.ВидДокумента = &ВидДокумента
		|	И (НЕ ВходящийДокумент.ПометкаУдаления)
		|	И ВходящийДокумент.Ссылка <> &Ссылка";
		
		Запрос.УстановитьПараметр("ИсходящийНомер", ИсходящийНомер);
		Запрос.УстановитьПараметр("ИсходящаяДата", ИсходящаяДата);
		Запрос.УстановитьПараметр("Отправитель", Отправитель);
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ №%1 от %2 отправителя ""%3"" уже зарегистрирован!'"),
				ИсходящийНомер,
				Формат(ИсходящаяДата, "ДФ=dd.MM.yyyy"),
				Строка(Отправитель));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"ИсходящийНомер",, 
				Отказ);
				
			РаботаССВД.ОбработатьОшибкуРегистрацииДокумента(Ссылка, ТекстСообщения);
				
		КонецЕсли;	
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		Если Не Делопроизводство.РегистрационныйНомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Делопроизводство.ПроверитьЗаполнениеДела(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено(Дело) Тогда 
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВидДокумента <> ВидДокумента)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВидыДокументов", ВидДокумента, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы с видом %1.'"),
					Строка(ВидДокумента)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (Ссылка.Дело <> Дело Или Ссылка.Отправитель <> Отправитель)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("Корреспонденты", Отправитель, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы по корреспонденту %1.'"),
					Строка(Отправитель)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (Ссылка.Дело <> Дело Или Ссылка.ВопросДеятельности <> ВопросДеятельности)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВопросыДеятельности", ВопросДеятельности, Дело) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дело не может содержать документы по вопросу деятельности %1.'"),
					Строка(ВопросДеятельности)),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Делопроизводство.ПроверкаСвязейПриИзмененииВидаДокумента(ЭтотОбъект, Отказ);
	
	Если ВидДокумента.ВестиУчетПоНоменклатуреДел Тогда
		Делопроизводство.ПроверитьСоответствиеНоменклатурыДел(ЭтотОбъект, Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, 
			"ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного И Не ЗначениеЗаполнено(Ответственный) Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа вида ""%1"" должен быть обязательно указан ответственный.'"),
					Строка(ВидДокумента)),
				ЭтотОбъект,
				"Ответственный",, 
				Отказ);
				
		КонецЕсли;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийРегистрационныйНомер = Неопределено;

	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	Иначе
		ПредыдущийРегистрационныйНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "РегистрационныйНомер");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПредыдущийРегистрационныйНомер", ПредыдущийРегистрационныйНомер);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежим() И ЗаписьПодписанногоОбъекта <> Истина Тогда
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СсылкаПодписан = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПодписанЭП");
			Если ПодписанЭП И СсылкаПодписан Тогда
				// тут проверяем ключевые поля - изменились ли
				МассивИмен = Справочники.ВходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов();
				РаботаСЭП.ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ЭтотОбъект, Ссылка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// Заполним наименование
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	// Пометка на удаление приложенных файлов
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда 
		
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) И Не ЗначениеЗаполнено(Дело.ДатаНачала) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		ДелоОбъект = Дело.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДелоОбъект.Ссылка);
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		ЭтотОбъект.ДополнительныеСвойства.Вставить(
			"ИзменилсяСписокПерсональныхДанных", ПерсональныеДанные.ИзменилсяСписокПерсональныхДанных(ЭтотОбъект));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не Ссылка.Пустая() Тогда 
		СсылкаПроект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Проект");
		ЭтотОбъект.ДополнительныеСвойства.Вставить("ИзменилсяПроект", СсылкаПроект <> Проект);
	КонецЕсли;
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ВходящиеДокументы.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	
	// Добавление автоматических участников из самого объекта
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		Если ДополнительныеСвойства.Свойство("ПолученПоСВД") И ДополнительныеСвойства.ПолученПоСВД Тогда
			МассивПользователей = ПолучитьВсехПользователейИмеющихПравоИзмененияВходящих();
			Для Каждого Пользователь Из МассивПользователей Цикл
				Строка = РабочаяГруппа.Добавить();
				Строка.Участник = Пользователь;
			КонецЦикла;
		Иначе
			ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа);
		КонецЕсли
		
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Обработка обязательного заполнения рабочих групп 
	Если РабочаяГруппа.Количество() = 0 Тогда
	
		Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Тогда
			//Если документ получен по СВД, то в его рабочую группу добавляются все, кто может зарегистрировать его
			Если ДополнительныеСвойства.Свойство("ПолученПоСВД") И ДополнительныеСвойства.ПолученПоСВД Тогда
				МассивПользователей = ПолучитьВсехПользователейИмеющихПравоИзмененияВходящих();
				Для Каждого Пользователь Из МассивПользователей Цикл
					Строка = РабочаяГруппа.Добавить();
					Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
				КонецЦикла;
			Иначе
				Строка = РабочаяГруппа.Добавить();
				Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;		
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ЭтотОбъект);
	Нумерация.ОсвободитьНомер(СтруктураПараметров);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка
		И ЗначениеЗаполнено(ОбменДанными.Отправитель)
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(ОбменДанными.Отправитель) Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеВходящегоДокумента);	
		Иначе	
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента);
		КонецЕсли;	
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;	
		
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ЗначениеЗаполнено(РегистрационныйНомер) И РегистрационныйНомер <> ДополнительныеСвойства.ПредыдущийРегистрационныйНомер Тогда
			Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущийРегистрационныйНомер) Тогда
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента);	
				//Мисофт+
				Если СпособПолучения.Наименование = "СВД" Тогда
					РаботаССВД.ОбработатьПовторнуюРегистрациюДокумента21(Ссылка);
				КонецЕсли;
				//Мисофт-
			Иначе	
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента);	
				//РаботаССВД.ОбработатьРегистрациюДокумента(Ссылка);
				//Мисофт+
				ДатаПримененияФормата = Константы.ДатаНачалаПримененияНовогоФорматаСМДО.Получить();
				Дата = ТекущаяДата(); 
				Если Дата >= ДатаПримененияФормата Тогда
					РаботаССВД.ОбработатьРегистрациюДокумента21(Ссылка);
				Иначе
					РаботаССВД.ОбработатьРегистрациюДокумента(Ссылка);
				КонецЕсли;
				//Мисофт-
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды")
		И ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый Тогда
		
		Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
		ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
		
	КонецЕсли;
	
	// Заполняем сведения о персональных данных во всех файлах
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		
		Если Не ОбменДанными.Загрузка 
			И ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяСписокПерсональныхДанных") 
			И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяСписокПерсональныхДанных Тогда
			
			ПерсональныеДанные.ЗаполнитьПерсональныеДанныеФайлов(Ссылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Заполнение проекта в файлах
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяПроект") 
		   И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяПроект Тогда
			РаботаСПроектами.ЗаполнитьПроектПодчиненныхФайлов(Ссылка);
		КонецЕсли;
	КонецЕсли;	
	
	// обновить связи документа
	СвязиДокументов.ОбновитьСвязиДокумента(Ссылка);
	
	// запись статуса проверки ЭП
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый Тогда
		
		Если РаботаСЭП.ПолучитьЭлектронныеПодписи(Ссылка).Количество() > 0 Тогда 
			РаботаСЭП.УстановитьСтатусПроверки(Ссылка, Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена);
		Иначе
			РаботаСЭП.УстановитьСтатусПроверки(Ссылка, Перечисления.СтатусПроверкиЭП.ПодписиНет);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИсходныеРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка,
			"ВидДокумента, Ответственный, Зарегистрировал");
			
		Если ИсходныеРеквизиты.ВидДокумента = ВидДокумента Тогда
			ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты);
		Иначе
			ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		КонецЕсли;	
		
	Иначе	
		
		ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты)
	
	// Добавление реквизита Ответственный
	Если ИсходныеРеквизиты.Ответственный <> Ответственный Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);		
	КонецЕсли;				
	
	// Добавление реквизита Зарегистрировал
	Если ИсходныеРеквизиты.Зарегистрировал <> Зарегистрировал Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);		
	КонецЕсли;							
	
КонецПроцедуры	

Процедура ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Зарегистрировал);
	
	// Добавление авторов виз согласования
	АвторыВиз = Справочники.ВизыСогласования.ПолучитьМассивАвторовВизПоДокументу(Ссылка);
	Для каждого Автор Из АвторыВиз Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			Автор.Исполнитель,
			Автор.ОсновнойОбъектАдресации,
			Автор.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Ссылка);
	
КонецПроцедуры

Функция ПолучитьВсехПользователейИмеющихПравоИзмененияВходящих()
	
	УстановитьПривилегированныйРежим(Истина);
	ОбъектМетаданныхРоль = Метаданные.Роли.ДобавлениеИзменениеВходящихДокументов;
	ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументооборотПользователиГруппДоступа.Пользователь
		|ИЗ
		|	РегистрСведений.ДокументооборотПользователиГруппДоступа КАК ДокументооборотПользователиГруппДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ДокументооборотПользователиГруппДоступа.ГруппаДоступа.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ ПрофилиГруппДоступаРоли.Роль = &Роль";
	
	Запрос.УстановитьПараметр("Роль", ИдентификаторРоли);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

#КонецЕсли