
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ДоступноИзменениеПользователей = Неопределено;
		ПользователиСлужебный.ПриОпределенииДоступностиИзмененияПользователей(ДоступноИзменениеПользователей);
		
		Если НЕ ДоступноИзменениеПользователей Тогда
			Если Объект.Ссылка.Пустая() Тогда
				ВызватьИсключение
					НСтр("ru = 'В демонстрационном режиме не поддерживается
					           |создание новых пользователей.'");
			КонецЕсли;
			ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.Видимость   = Ложь;
		Элементы.ПользовательИнфБазыАутентификацияOpenID.Видимость      = Ложь;
		Элементы.ПользовательИнфБазыАутентификацияСтандартная.Видимость = Ложь;
		Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.Видимость = Ложь;
		Элементы.СвойстваАутентификацииОС.Видимость  = Ложь;
		Элементы.ПользовательИнфБазыРежимЗапуска.Видимость = Ложь;
	КонецЕсли;
	
	Если ПользователиСлужебный.ЭтоУчебнаяПлатформа() Тогда
		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИнфБазыЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
			Элементы.ПользовательИнфБазыЯзык.СписокВыбора.Добавить(
				МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование = "";
			
			Если Пользователи.ЭтоПолноправныйПользователь(ЗначениеКопирования, Истина, Ложь) Тогда
				РазрешеноКопированиеПользователяИБ = УровеньДоступа.АдминистраторСистемы;
			ИначеЕсли Пользователи.ЭтоПолноправныйПользователь(ЗначениеКопирования, Ложь, Ложь) Тогда
				РазрешеноКопированиеПользователяИБ = УровеньДоступа.ПолныеПрава;
			Иначе
				РазрешеноКопированиеПользователяИБ = Истина;
			КонецЕсли;
			
			Если РазрешеноКопированиеПользователяИБ Тогда
				ПрочитатьПользователяИБ(
					ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			Иначе
				ПрочитатьПользователяИБ();
			КонецЕсли;
			
			Если Не УровеньДоступа.ПолныеПрава Тогда
				ВходВПрограммуРазрешен = Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.
			
			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();
			
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИнфБазыАутентификацияСтандартная = Истина;
				
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					ПользовательИнфБазыПоказыватьВСпискеВыбора = Ложь;
					ПользовательИнфБазыАутентификацияOpenID = Истина;
				КонецЕсли;
				
				Если УровеньДоступа.ПолныеПрава Тогда
					ВходВПрограммуРазрешен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ПользовательИБСуществует);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
	ТребуетсяСинхронизацияССервисом = Объект.Ссылка.Пустая();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "КонтактнаяИнформация");
		ПереопределитьРедактированиеКонтактнойИнформацииВСервисе();
	КонецЕсли;
	
	ОбщаяНастройкаФормы(Истина);
	
	// Заполнение подразделения и должности
	СведенияПользователей = РегистрыСведений.СведенияОПользователях.Получить(Новый Структура("Пользователь", Объект.Ссылка));
	Подразделение = СведенияПользователей.Подразделение;
	Должность = СведенияПользователей.Должность;
	ГрафикРаботы = СведенияПользователей.ГрафикРаботы;
	Ранг = СведенияПользователей.Ранг;
	РангПриОткрытии = Ранг;
	
	НельзяМенятьПоляСведений = Не ЗначениеЗаполнено(Подразделение);
	Элементы.Должность.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.Ранг.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ГрафикРаботы.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ФизЛицо.ТолькоПросмотр = НельзяМенятьПоляСведений;
	
	Если Не Константы.ОграничиватьДоступЧерезВебСерверы.Получить() Тогда
		Элементы.РазрешенныеВебСерверы.Видимость = Ложь;
	КонецЕсли;	
	
	Элементы.Ранг.СписокВыбора.Добавить(0, НСтр("ru='Не задан'"));
	Элементы.Ранг.СписокВыбора.Добавить(1, "*");
	Элементы.Ранг.СписокВыбора.Добавить(2, "**");
	Элементы.Ранг.СписокВыбора.Добавить(3, "***");
	Элементы.Ранг.СписокВыбора.Добавить(4, "****");
	
	// Право на редактирование фотографии
	ЕстьПравоРедактирования = Пользователи.ЭтоПолноправныйПользователь()
		Или (Объект.Ссылка = ПользователиКлиентСервер.ТекущийПользователь());
	
   	//1С-Минск  
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма);
	//Конец 1С-Минск
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	Элементы.ПользовательИнфБазыПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
		
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");	
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПолучатьФотографии = Ложь;
		Элементы.Фотография.Видимость = Ложь;
	КонецЕсли;	
	
	Если ПолучатьФотографии Тогда
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Объект.Ссылка, 
			УникальныйИдентификатор, ЕстьКартинка);
	КонецЕсли;	
		
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	
	ОбщаяНастройкаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ВходВПрограммуРазрешен Тогда
		ЗаголовокВопросов = НСтр("ru = 'Запись пользователя информационной базы'");
		
		Если ДействияВФорме.Роли = "Редактирование"
		   И ПользовательИнфБазыРоли.Количество() = 0 Тогда
			
			Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
					НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
					РежимДиалогаВопрос.ДаНет,
					,
					,
					ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Обработка записи первого администратора.
		Если НЕ ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекстВопроса = "";
			Если ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса) Тогда
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПервогоАдминистратора", ЭтотОбъект, ПараметрыЗаписи),
					ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
		И ТребуетсяСинхронизацияССервисом
		И ПарольПользователяСервиса = Неопределено Тогда
		
		Отказ = Истина;
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью", ЭтотОбъект, ПараметрыЗаписи),
			ЭтотОбъект,
			ПарольПользователяСервиса);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", ТребуетсяСинхронизацияССервисом);
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Удалить("ПодтверждениеПароля");
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДобавленНовыйПользовательИБ", Истина);
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВДокументах) Тогда
		Попытка
			ТекущийОбъект.ПредставлениеВДокументах = ВычислитьПредставлениеВДокументах(ТекущийОбъект);
		Исключение
			ТекущийОбъект.ПредставлениеВДокументах = ТекущийОбъект.Наименование;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВПереписке) Тогда
		ТекущийОбъект.ПредставлениеВПереписке = 
			?(ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВДокументах),
			ТекущийОбъект.ПредставлениеВДокументах,
			ТекущийОбъект.Наименование);
	КонецЕсли;
	
	РангСтрокой = ПользователиДокументооборот.ПолучитьСтрокуРанга(Ранг);
	ТекущийОбъект.ПредставлениеВПерепискеСРангом = ТекущийОбъект.ПредставлениеВПереписке;
	Если ЗначениеЗаполнено(РангСтрокой) Тогда
		ТекущийОбъект.ПредставлениеВПерепискеСРангом = ТекущийОбъект.ПредставлениеВПереписке + " " + РангСтрокой;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВычислитьПредставлениеВДокументах(ТекущийОбъект)
	
	ФИОПользователя = ТекущийОбъект.Наименование;
	Если (Найти(ФИОПользователя, ".") > 0) Тогда
		ПозицияПробела = Найти(ФИОПользователя," ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Инициалы = Сред(ФИОПользователя, 1, ПозицияПробела);
		
		Возврат СтрЗаменить(Инициалы + " " + Фамилия+" ", "  ", " ");
	ИначеЕсли СтрЧислоВхождений(СокрЛП(ФИОПользователя), " ") = 2 Тогда
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Фамилия = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Фамилия, "");
		ПозицияПробела = Найти(ФИОПользователя, " ");
		Имя = Сред(ФИОПользователя, 1, ПозицияПробела);
		ФИОПользователя = СтрЗаменить(ФИОПользователя, Имя, "");
		
		//Мисофт+
		Возврат СтрЗаменить(Лев(Имя, 1) + "." + Лев(ФИОПользователя, 1) + ". " + Фамилия + " ", "  ", " ");
		//Мисофт-
	Иначе
		Возврат ФИОПользователя;
	КонецЕсли
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
		
	ТребуетсяСинхронизацияССервисом = Ложь;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(
			ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;
	
	ОбщаяНастройкаФормы(, ПараметрыЗаписи);
	
	// Запись подразделения и должности
	Сведения = Новый Структура;
	Сведения.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Сведения.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	Сведения.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	Сведения.Вставить("Ранг", 0);
	
	ЗаписьРегистра = РегистрыСведений.СведенияОПользователях.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Пользователь = ТекущийОбъект.Ссылка;
	ЗаписьРегистра.Прочитать();
	
	ЕстьЗапись = ЗаписьРегистра.Выбран();
	Если ЕстьЗапись Тогда
		ЗаполнитьЗначенияСвойств(Сведения, ЗаписьРегистра);
	КонецЕсли;
	
	Если Сведения.Подразделение <> Подразделение
		Или Сведения.Должность <> Должность
		Или Сведения.ГрафикРаботы <> ГрафикРаботы
		Или Сведения.Ранг <> Ранг Тогда
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ЗаписьРегистра.Пользователь = ТекущийОбъект.Ссылка;
			ЗаписьРегистра.Подразделение = Подразделение;
			ЗаписьРегистра.Должность = Должность;
			ЗаписьРегистра.ГрафикРаботы = ГрафикРаботы;
			ЗаписьРегистра.Ранг = Ранг;
			ЗаписьРегистра.Записать();
		ИначеЕсли ЕстьЗапись Тогда
			ЗаписьРегистра.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
		Оповестить(
			"ОчищеноСопоставлениеСНесуществующимПользователемИБ",
			ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ,
			ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("Запись_ГруппыПользователей", Новый Структура, ГруппаНовогоПользователя);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;
	
	// Изменение подразделения
	Оповестить("ИзмененоПодразделениеПользователя", Объект.Ссылка, ЭтаФорма);
	Оповестить("Запись_Пользователь", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка подразделения и должности
	Если ЗначениеЗаполнено(Должность) Или ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		ПользователиСлужебный.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	
	ЗаполнитьПоляПоПользователюИБНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьИмяДляВхода(ЭтотОбъект, Истина);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Объект.Недействителен Тогда
		ВходВПрограммуРазрешен = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы разрешить вход в программу, требуется снять
			           |пометку на удаление с этого пользователя.'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИмяДляВхода(ЭтотОбъект);
	
	Если ВходВПрограммуРазрешен
	   И НЕ ПользовательИнфБазыАутентификацияOpenID
	   И НЕ ПользовательИнфБазыАутентификацияСтандартная
	   И НЕ ПользовательИнфБазыАутентификацияОС Тогда
	
		ПользовательИнфБазыАутентификацияСтандартная = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	Если Не УровеньДоступа.ПолныеПрава
	   И УровеньДоступа.УправлениеСписком
	   И Не ВходВПрограммуРазрешен Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'После записи вход в программу сможет разрешить только администратор.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияСтандартнаяПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПользовательИнфБазыПароль = Пароль;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПоказыватьВСпискеВыбораПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияOpenIDПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияОСПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС", , Элемент);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыИмяПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыЯзыкПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыРежимЗапускаПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Календарь(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Пользователь", Объект.Ссылка);
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ФормаКалендаря", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСинхронизацииСМобильнымКлиентом(Команда)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		ПараметрыФормы = Новый Структура("ТекущийПользователь", Объект.Ссылка);

		Открытьформу("Обработка.НастройкаСинхронизацииСМобильнымКлиентом.Форма.НастройкаПравилСинхронизации", 
			ПараметрыФормы, 
			ЭтаФорма);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации

&НаКлиенте
Процедура Подключаемый_EMailПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		
	МодульУправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид",
		ВидКонтактнойИнформацииEmailПользователя()))[0];
	
	Если ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]) Тогда
		Пароль = "" + Новый УникальныйИдентификатор + "qQ";
		ПодтверждениеПароля = Пароль;
		ПользовательИнфБазыПароль = Пароль;
	КонецЕсли;
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТелефонПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	МодульУправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_EMailНачалоВыбора(Элемент)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
	   И ПарольПользователяСервиса = Неопределено Тогда
	
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("Подключаемый_EMailНачалоВыбораЗавершение", ЭтотОбъект),
			ЭтотОбъект,
			ПарольПользователяСервиса);
	Иначе
		Подключаемый_EMailНачалоВыбораЗавершение("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_EMailНачалоВыбораЗавершение(НовыйПарольПользователяСервиса, Неопределен) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	
	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
	
	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Отбор)[0];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
	ПараметрыФормы.Вставить("СтараяПочта",  ЭтотОбъект[СтрокаEMail.ИмяРеквизита]);
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	Попытка
		
		ОткрытьФорму("Справочник.Пользователи.Форма.СменаПочты", ПараметрыФормы, ЭтотОбъект);
		
	Исключение
		
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	МодульУправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	Результат = МодульУправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(
		ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	Результат = МодульУправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(
		ЭтотОбъект, Элемент.Имя);
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	Результат = МодульУправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(
		ЭтотОбъект, Команда.Имя);
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
	МодульУправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
		
		Если Элементы.Роли.ТекущиеДанные.Имя = "ПолныеПрава" Тогда
			УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиСиноним.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НедоступныеДанныеЦвет);

КонецПроцедуры

&НаСервере
Процедура ОбщаяНастройкаФормы(ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;
	
	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	ОбработатьИнтерфейсРолей(
		"УстановитьТолькоПросмотрРолей",
		    ПользователиСлужебный.ЗапретРедактированияРолей()
		Или ДействияВФорме.Роли <> "Редактирование"
		Или Не УровеньДоступа.НастройкиДляВхода);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ДействияСПользователемСервиса = Неопределено;
		ПользователиСлужебный.ПриПолученииДействийСПользователемСервиса(
			ДействияСПользователемСервиса, Объект.Ссылка);
	КонецЕсли;
	
	// Настройка возможности просмотра.
	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	ВыводитьСписокРолей = ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость = ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение =
		?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
		УровеньДоступа.ПолныеПрава И Объект.Подготовлен И Не ПриЧтенииВходВПрограммуРазрешен;
	
	// Настройка возможности изменения.
	Если Объект.Служебный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";
	
	Элементы.Наименование.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	Элементы.Недействителен.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
	
	Элементы.ОсновныеСвойства.ТолькоПросмотр =
		Не (  ДействияВФорме.СвойстваПользователяИБ = "Редактирование"
		    И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	
	Элементы.ПользовательИнфБазыИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИнфБазыИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИнфБазыАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИнфБазыАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИнфБазыАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИнфБазыПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;
	
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИнфБазыРежимЗапуска.ТолькоПросмотр            = Не УровеньДоступа.УправлениеСписком;
	
	Элементы.Комментарий.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

// Продолжение обработчика события ПередЗаписью
&НаКлиенте
Процедура ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью(НовыйПарольПользователяСервиса, ПараметрыЗаписи) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	
	Попытка
		
		Записать(ПараметрыЗаписи);
		
	Исключение
		
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;
	
	КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		Если Форма.ПользовательИнфБазыИмя = КраткоеИмя Тогда
			Форма.ПользовательИнфБазыИмя = "";
		КонецЕсли;
	Иначе
		
		Если ПриИзмененииНаименования
		 Или Не ЗначениеЗаполнено(Форма.ПользовательИнфБазыИмя) Тогда
			
			Форма.ПользовательИнфБазыИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	Если ВходВПрограммуРазрешен
	   И НЕ ПользовательИнфБазыАутентификацияOpenID
	   И НЕ ПользовательИнфБазыАутентификацияСтандартная
	   И НЕ ПользовательИнфБазыАутентификацияОС Тогда
	
		ВходВПрограммуРазрешен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");
	
	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");
	
	Если Не УровеньДоступа.АдминистраторСистемы
	   И УровеньДоступа.ПолныеПрава
	   И Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка, Истина) Тогда
		
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	
	ИначеЕсли УровеньДоступа.АдминистраторСистемы
	      ИЛИ УровеньДоступа.ПолныеПрава Тогда
		
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	Иначе
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			// Ответственный за список пользователей и групп пользователей.
			// (Исполнитель распоряжений о приеме на работу и переводу,
			//  переназначению, созданию отделов, подразделений и рабочих групп).
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
			ДействияВФорме.СвойстваЭлемента       = "Редактирование";
			
			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДействияВФорме.Роли = "Редактирование";
			КонецЕсли;
			Если Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
				ДействияВФорме.Роли = "Просмотр";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.Пользователи\ПриОпределенииДействийВФорме");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);
	КонецЦикла;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
		
	ИначеЕсли ДействияВФорме.Роли = "Редактирование"
	        И ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	
	Если Найти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		
		ДействияВФорме.СвойстваПользователяИБ = "";
		
	Иначе // Поддержка обратной совместимости.
		Если Найти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
			
		ИначеЕсли Найти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
	Если Объект.Служебный Тогда
		Если ДействияВФорме.Роли = "Редактирование" Тогда
			ДействияВФорме.Роли = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			ДействияВФорме.КонтактнаяИнформация = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
			ДействияВФорме.СвойстваЭлемента = "Просмотр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если УровеньДоступа.АдминистраторСистемы
	 Или УровеньДоступа.ПолныеПрава Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИнфБазы");
		
		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;
		
		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИнфБазыПароль);
			Результат.Вставить("Язык",   ПользовательИнфБазыЯзык);
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора", ПользовательИнфБазыПоказыватьВСпискеВыбора);
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИнфБазыЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИнфБазыЯзык);
			Результат.Вставить("РежимЗапуска",            ПользовательИнфБазыРежимЗапуска);
			
			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИнфБазыПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИнфБазыАутентификацияСтандартная);
			Результат.Вставить("Имя",                       ПользовательИнфБазыИмя);
			Результат.Вставить("Пароль",                    ПользовательИнфБазыПароль);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИнфБазыАутентификацияOpenID);
			Результат.Вставить("АутентификацияОС",          ПользовательИнфБазыАутентификацияОС);
			Результат.Вставить("ПользовательОС",            ПользовательИнфБазыПользовательОС);
		КонецЕсли;
	КонецЕсли;
	Результат.Вставить("ПодтверждениеПароля", ПодтверждениеПароля);
	
	Если НЕ ДляПроверкиПервогоАдминистратора
	   И ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		
		РолиАдминистратора = Новый Массив;
		РолиАдминистратора.Добавить("ПолныеПрава");
		
		ИмяРолиАдминистратораСистемы = Пользователи.РольАдминистратораСистемы().Имя;
		Если РолиАдминистратора.Найти(ИмяРолиАдминистратораСистемы) = Неопределено Тогда
			РолиАдминистратора.Добавить(ИмяРолиАдминистратораСистемы);
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	
	ИначеЕсли УровеньДоступа.НастройкиДляВхода
	        И Не ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		
		ТекущиеРоли = ПользовательИнфБазыРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса = Неопределено)
	
	Возврат ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(
		ОписаниеПользователяИБ(Истина),
		ТекстВопроса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНеобходимостьСинхронизацииССервисом(Форма)
	
	Форма.ТребуетсяСинхронизацияССервисом = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПервогоАдминистратора(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поддержка контактной информации

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	МодульУправлениеКонтактнойИнформациейСервер =
		ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	Возврат МодульУправлениеКонтактнойИнформациейСервер.ОбновитьКонтактнуюИнформацию(
		ЭтотОбъект, Объект, Результат);
	
КонецФункции

&НаСервере
Процедура ПереопределитьРедактированиеКонтактнойИнформацииВСервисе()
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформация = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	СтрокаEMail = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].EmailПользователя))[0];
	ЭлементEMail = Элементы[СтрокаEMail.ИмяРеквизита];
	ЭлементEMail.УстановитьДействие("ПриИзменении", "Подключаемый_EMailПриИзменении");
	
	ЭлементEMail.КнопкаВыбора = Истина;
	ЭлементEMail.УстановитьДействие("НачалоВыбора", "Подключаемый_EMailНачалоВыбора");
	
	СтрокаТелефон = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя))[0];
	ЭлементТелефон = Элементы[СтрокаТелефон.ИмяРеквизита];
	ЭлементТелефон.УстановитьДействие("ПриИзменении", "Подключаемый_ТелефонПриИзменении");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидКонтактнойИнформацииEmailПользователя()
	
	ИмяПредопределенногоЗначения = "Справочник." + "ВидыКонтактнойИнформации" + ".EmailПользователя";
	
	Возврат ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка пользователя ИБ

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		Иначе
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора =
				НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
		КонецЕсли;
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	КонецЕсли;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	
	Возврат ОписаниеПользователяИБ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пароль              = "";
	ПодтверждениеПароля = "";
	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ПользовательИБОсновной   = Ложь;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(
		         Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ,
		         ПрочитанныеСвойства) Тогда
			
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
			КонецЕсли;
			
			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|РежимЗапуска,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИнфБазыЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(
		       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
		
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
		
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ")
		        И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			
			Если Пользователи.ПрочитатьПользователяИБ(
			       Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
				
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					Объект.Наименование = ПрочитанныеСвойства.ПолноеИмя;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБСуществует Тогда
			
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИнфБазыЯзык.Видимость, "", ",
				|Язык") + ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",
				|Роли"));
			
			Если ПрочитанныеСвойства.ПарольУстановлен Тогда
				Пароль              = "**********";
				ПодтверждениеПароля = "**********";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли",
		"ПользовательИнфБазы");
	
	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства = ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИнфБазыАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИнфБазыАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИнфБазыАутентификацияОС          = ХранимыеСвойства.АутентификацияОС;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);
	
	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование пользователя.
	
	ПоказатьНесоответствие = Истина;
	ПоказатьКомандыУстраненияРазличий = Ложь;
	
	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = ПользовательИнфБазыПолноеИмя;
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		
		УточнениеСвойств = Новый Массив;
		
		Если ПользовательИнфБазыПолноеИмя <> Объект.Наименование Тогда
			ПоказатьКомандыУстраненияРазличий =
				    ПоказатьКомандыУстраненияРазличий
				Или ДействияВФорме.СвойстваЭлемента = "Редактирование";
			
			УточнениеСвойств.Вставить(0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Полное имя ""%1""'"), ПользовательИнфБазыПолноеИмя));
		КонецЕсли;
		
		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств = "";
			ТекущаяСтрока = "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств = СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока = "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
					           |%1.'"), СтрокаУточненияСвойств)
				+ Символы.ПС
				+ ?(ПоказатьКомандыУстраненияРазличий,
					НСтр("ru = 'Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.'"),
					НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'"));
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;
	
	Элементы.СвойстваОбработкаНесоответствия.Видимость   = ПоказатьНесоответствие;
	Элементы.СвойстваКомандыУстраненияРазличий.Видимость = ПоказатьКомандыУстраненияРазличий;
	
	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ
		= НЕ ПользовательИБСуществует
		И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		Объект.Наименование = ПользовательИнфБазыПолноеИмя;
	КонецЕсли;
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Начальное заполнение, проверка заполнения, доступность свойств

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы       = Форма.Элементы;
	Объект         = Форма.Объект;
	ДействияВФорме = Форма.ДействияВФорме;
	УровеньДоступа = Форма.УровеньДоступа;
	ДействияСПользователемСервиса = Форма.ДействияСПользователемСервиса;
	
	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр =
		Не (  Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь
		    И (    УровеньДоступа.ПолныеПрава
		       Или УровеньДоступа.УправлениеСписком И Форма.ПриЧтенииВходВПрограммуРазрешен));
	
	Элементы.Пароль.ТолькоПросмотр =
		Не (    УровеньДоступа.НастройкиДляВхода
		    Или УровеньДоступа.ИзменениеТекущего
		      И Не Форма.ПользовательИнфБазыЗапрещеноИзменятьПароль);
	
	Элементы.ПодтверждениеПароля.ТолькоПросмотр = Элементы.Пароль.ТолькоПросмотр;
	
	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	ОбновитьИмяДляВхода(Форма);
	
	// Настройка доступности связанных элементов.
	Элементы.ВходВПрограммуРазрешен.Доступность = НЕ Объект.Недействителен;
	Элементы.ОсновныеСвойства.Доступность       = НЕ Объект.Недействителен;
	
	Элементы.Пароль.Доступность              = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПодтверждениеПароля.Доступность = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.Доступность
		= Форма.ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.Доступность
		= Форма.ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ПользовательИнфБазыПользовательОС.Доступность = Форма.ПользовательИнфБазыАутентификацияОС;
	
	// Уточнение настроек в модели сервиса.
	Если ДействияСПользователемСервиса <> Неопределено Тогда
		
		// Доступность редактирования КИ
		ДействияКИ = ДействияСПользователемСервиса.КонтактнаяИнформация;
		
		Для Каждого СтрокаКИ Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			ДействияВидаКИ = ДействияКИ.Получить(СтрокаКИ.Вид);
			Если ДействияВидаКИ = Неопределено Тогда
				// Возможность редактирования этого вида КИ не регулируется менеджером сервиса
				Продолжить;
			КонецЕсли;
			
			ЭлементКИ = Элементы[СтрокаКИ.ИмяРеквизита];
			
			Если СтрокаКИ.Вид = ВидКонтактнойИнформацииEmailПользователя() Тогда
				
				ЭлементКИ.ТолькоПросмотр = НЕ Объект.Ссылка.Пустая();
				
				ЭлементКИ.КнопкаВыбора = НЕ Объект.Ссылка.Пустая()
					И ДействияВидаКИ.Изменение;
					
				ЗаполненEMail = ЗначениеЗаполнено(Форма[СтрокаКИ.ИмяРеквизита]);
			Иначе
				ЭлементКИ.ТолькоПросмотр = ЭлементКИ.ТолькоПросмотр
					ИЛИ НЕ ДействияВидаКИ.Изменение;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.Ссылка.Пустая() И ЗаполненEMail Тогда
			МожноИзменятьПароль = Ложь;
		Иначе
			МожноИзменятьПароль = ДействияСПользователемСервиса.ИзменениеПароля;
		КонецЕсли;
		
		Элементы.Пароль.ТолькоПросмотр = Элементы.Пароль.ТолькоПросмотр
			ИЛИ НЕ МожноИзменятьПароль;
			
		Элементы.ПодтверждениеПароля.ТолькоПросмотр = Элементы.ПодтверждениеПароля.ТолькоПросмотр
			ИЛИ НЕ МожноИзменятьПароль;
		
		Элементы.ПользовательИнфБазыИмя1.ТолькоПросмотр = Элементы.ПользовательИнфБазыИмя1.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
			
		Элементы.ПользовательИнфБазыИмя2.ТолькоПросмотр = Элементы.ПользовательИнфБазыИмя2.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
			
		Элементы.Наименование.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр 
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеПолногоИмени;
			
		Элементы.ВходВПрограммуРазрешен.Доступность = Элементы.ВходВПрограммуРазрешен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
			
		Элементы.Недействителен.Доступность = Элементы.Недействителен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
			
		Форма.ЗапретИзмененияАдминистративногоДоступа =
			НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = Форма.НачальноеОписаниеПользователяИБ;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.Объект.Наименование);
		
		Если Форма.ПользовательИнфБазыИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИнфБазыИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИнфБазыАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИнфБазыПоказыватьВСпискеВыбора   <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИнфБазыЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.Пароль <> ""
	 ИЛИ Форма.ПодтверждениеПароля <> ""
	 ИЛИ Форма.ПользовательИнфБазыАутентификацияОС     <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИнфБазыПользовательОС       <> ""
	 ИЛИ Форма.ПользовательИнфБазыАутентификацияOpenID <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИнфБазыРежимЗапуска         <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИнфБазыЯзык                 <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИнфБазыРоли.Количество() <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИнфБазыРоли);
	ПараметрыДействия.Вставить("ЗапретИзмененияАдминистративногоДоступа",
		ЗапретИзмененияАдминистративногоДоступа);
	
	ТипПользователей = ?(ОбщегоНазначенияПовтИсп.РазделениеВключено(),
		Перечисления.ТипыПользователей.ПользовательОбластиДанных,
		Перечисления.ТипыПользователей.ПользовательЛокальногоРешения);
	ПараметрыДействия.Вставить("ТипПользователей", ТипПользователей);
	
	БылУстановленАдминистративныйДоступ = ПользовательИнфБазыРоли.НайтиСтроки(
		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	ПользователиСлужебный.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	
	УстановленАдминистративныйДоступ = ПользовательИнфБазыРоли.НайтиСтроки(
		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	Если УстановленАдминистративныйДоступ <> БылУстановленАдминистративныйДоступ Тогда
		УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеЗавершение", 
		ЭтотОбъект,
		ПараметрыОписания);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЕстьПравоРедактирования Тогда
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФотографиями.ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла, 
		УникальныйИдентификатор, 
		Объект.Ссылка, Объект.Наименование);

	ЕстьКартинка = Истина;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	РаботаСФотографиями.ОчиститьИзображение(Объект.Ссылка, УникальныйИдентификатор);
	
	ЕстьКартинка = Ложь;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	НельзяМенятьПоляСведений = Не ЗначениеЗаполнено(Подразделение);
	Элементы.Должность.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.Ранг.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ГрафикРаботы.ТолькоПросмотр = НельзяМенятьПоляСведений;
	Элементы.ФизЛицо.ТолькоПросмотр = НельзяМенятьПоляСведений;
	
КонецПроцедуры
