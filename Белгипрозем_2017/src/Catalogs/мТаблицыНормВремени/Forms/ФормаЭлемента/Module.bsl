
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЗаполнитьТаблицуНорм();
    НаДату = ТекущаяДатаСеанса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНорм()
    ТаблицаНорм.Очистить();
    
    // Создание массива удаляемых колонок
    МассивУдаляемыхРеквизитов = Новый Массив;
    // Создание удаляемых колонок
    Для каждого ОписаниеКолонки Из ЭтаФорма.Элементы.ТаблицаНорм.ПодчиненныеЭлементы Цикл
        Если Лев(ОписаниеКолонки.Имя, 1) = "_" Тогда
            МассивУдаляемыхРеквизитов.Добавить(ОписаниеКолонки.ПутьКДанным); 
        КонецЕсли; 
    КонецЦикла; 
    
    // Добавление и заполнение колонок в таблицу Норм
    МассивРеквизитов = Новый Массив;
    
    _ТаблицаКолонок = ПолучитьКолонкиТаблицы(Объект.Ссылка);
    ЗначениеВРеквизитФормы(_ТаблицаКолонок, "ТаблицаКолонок");
    
    // Создание колонок
    Для каждого ОписаниеКолонки Из _ТаблицаКолонок Цикл
        МассивРеквизитов.Добавить(Новый РеквизитФормы("_"+ОписаниеКолонки.НомерКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 5)), "ТаблицаНорм", ОписаниеКолонки.СсылкаКолонка)); 
        //МассивУдаляемыхРеквизитов.Добавить(Новый РеквизитФормы("_"+ОписаниеКолонки.НомерКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8, 3)), "ТаблицаНорм", ОписаниеКолонки.СсылкаКолонка)); 
    КонецЦикла; 
    //ИзменитьРеквизиты(МассивРеквизитов);
    ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
    
    Для Каждого ОписаниеКолонки Из _ТаблицаКолонок Цикл
        ИмяКолонки = "_" + ОписаниеКолонки.НомерКолонки;
        
        ИскСледКолонка = Неопределено;
        ИндексСтроки = _ТаблицаКолонок.Индекс(ОписаниеКолонки);
        Если ИндексСтроки < _ТаблицаКолонок.Количество()-1 Тогда
            НомерСледКолонки = _ТаблицаКолонок[ИндексСтроки + 1].НомерКолонки;
            ИскСледКолонка = Элементы.ТаблицаНорм.ПодчиненныеЭлементы.Найти("_" + НомерСледКолонки);
        КонецЕсли; 
        
        ИскКолонка = Элементы.ТаблицаНорм.ПодчиненныеЭлементы.Найти(ИмяКолонки);
        Если ИскКолонка = Неопределено Тогда
            Если ИскСледКолонка <> Неопределено Тогда
                // есть след колонка
                НовыйЭлемент = Элементы.Вставить(ИмяКолонки, Тип("ПолеФормы"), Элементы.ТаблицаНорм, ИскСледКолонка); 
            Иначе
                // Добавляем в конец
                НовыйЭлемент = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.ТаблицаНорм); 
            КонецЕсли; 
            НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
            НовыйЭлемент.ПутьКДанным = "ТаблицаНорм." + ИмяКолонки;
        КонецЕсли; 
    КонецЦикла;
    
    // Заполнение строк Таблицы норм
    _ТаблицаСтрок = ПолучитьСтрокиТаблицы(Объект.Ссылка);
    ЗначениеВРеквизитФормы(_ТаблицаСтрок, "ТаблицаСтрок");
    
    Для каждого СтрокаТаблицы Из _ТаблицаСтрок Цикл
        НоваяСтрока = ТаблицаНорм.Добавить();
        НоваяСтрока.НаименованиеРабот = СтрокаТаблицы.СсылкаСтрока;
    КонецЦикла; 
    
    // Заполнение таблицы норм из РС мНормыВремени
    ТаблицаЗначенийНорм = ПрочитатьНормыНаСервере(Объект.Ссылка);
    
    Для каждого СтрокаТаблицыНорм Из ТаблицаНорм Цикл
        СтрокаТаблицы = СтрокаТаблицыНорм.НаименованиеРабот;    
        Если СтрокаТаблицы.ИспользоватьУсловияКолонок Тогда
            // несколько значений
            Отбор = Новый Структура("СтрокаТаблицы", СтрокаТаблицы);
            ИскСтроки = ТаблицаЗначенийНорм.НайтиСтроки(Отбор);
            
            СтруктураСтроки = Новый Структура(); 
            Для каждого ИскСтрока Из ИскСтроки Цикл
                НомерКолонки = "_" + ИскСтрока.КолонкаТаблицы.НомерКолонки;
            	НормаВремени = ИскСтрока.НормаВремени;
                СтруктураСтроки.Вставить(НомерКолонки, НормаВремени);
            КонецЦикла; 
            ЗаполнитьЗначенияСвойств(СтрокаТаблицыНорм, СтруктураСтроки); 
            
         Иначе
            // Одно значение нормы для всех колонок
            ИскСтрока = ТаблицаЗначенийНорм.Найти(СтрокаТаблицы, "СтрокаТаблицы");
            Если ИскСтрока <> Неопределено Тогда
                СтрокаТаблицыНорм.ОбщееЗначениеНормы = ИскСтрока.НормаВремени;
            КонецЕсли; 
        КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры // ЗаполнитьТаблицуНорм()
 
&НаСервереБезКонтекста
Функция ПолучитьКолонкиТаблицы(СсылкаНаТаблицу)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мКолонкиТаблиц.Ссылка КАК СсылкаКолонка,
        |   мКолонкиТаблиц.НомерКолонки КАК НомерКолонки,
        |   мКолонкиТаблиц.Наименование
        |ИЗ
        |   Справочник.мКолонкиТаблиц КАК мКолонкиТаблиц
        |ГДЕ
        |   мКолонкиТаблиц.Владелец = &Владелец
        |   И НЕ мКолонкиТаблиц.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   НомерКолонки";

    Запрос.УстановитьПараметр("Владелец", СсылкаНаТаблицу);

    Результат = Запрос.Выполнить().Выгрузить();

    Возврат Результат;
КонецФункции // ПолучитьКолонкиТаблицы(Объект.Ссылка)

&НаСервереБезКонтекста
Функция ПолучитьСтрокиТаблицы(СсылкаНаТаблицу)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мСтрокиТаблиц.Ссылка КАК СсылкаСтрока,
        |   мСтрокиТаблиц.Наименование,
        |   мСтрокиТаблиц.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
        |   мСтрокиТаблиц.НомерПодСтроки
        |ИЗ
        |   Справочник.мСтрокиТаблиц КАК мСтрокиТаблиц
        |ГДЕ
        |   мСтрокиТаблиц.Владелец = &Владелец
        |   И НЕ мСтрокиТаблиц.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   мСтрокиТаблиц.НомерСтрокиТаблицы,
        |   мСтрокиТаблиц.НомерПодСтроки";

    Запрос.УстановитьПараметр("Владелец", СсылкаНаТаблицу);

    Результат = Запрос.Выполнить().Выгрузить();

    Возврат Результат;
КонецФункции // ПолучитьСтрокиТаблицы(Объект.Ссылка)()

&НаКлиенте
Процедура ЗаписатьНормы(Команда)
    ЗаписатьНормыНаСервере();
	ПоказатьОповещениеПользователя("Нормы записаны!");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНормыНаСервере()
    
    // Создание Тз для загрузки регистра
    Тз = Новый ТаблицаЗначений;
    РегмНормыВремени = Метаданные.РегистрыСведений.мНормыВремени;
    Тз.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
   	Для каждого СтрИзмерение Из РегмНормыВремени.Измерения Цикл
        Тз.Колонки.Добавить(СтрИзмерение.Имя, СтрИзмерение.Тип);
    КонецЦикла; 
    Для каждого СтрРесурс Из РегмНормыВремени.Ресурсы Цикл
        Тз.Колонки.Добавить(СтрРесурс.Имя, СтрРесурс.Тип);
    КонецЦикла; 
   
    ВариантРасчетаКаждыеПоследующие = Перечисления.ВариантыРасчетов.КаждыеПоследующие;
    ВариантРасчетаКаждыеПоследующиеВИнтервале = Перечисления.ВариантыРасчетов.КаждыеПоследующиеВИнтервале;
    
    ПредыдущаяСтрокаТаблицыНорм = "";
    
    Для каждого СтрокаТаблицыНорм Из ТаблицаНорм Цикл
        СтрокаТаблицы = СтрокаТаблицыНорм.НаименованиеРабот;    
        Если СтрокаТаблицы.ИспользоватьУсловияКолонок Тогда
            
            НачЗначПоСтроке = 0; 
            // Цикл по колонкам
            Для каждого ЭлементКолонка Из ТаблицаКолонок Цикл
                // инфа о колонке
                СсылкаКолонка = ЭлементКолонка.СсылкаКолонка;
                НомерКолонки = "_" + ЭлементКолонка.НомерКолонки;
                
                НоваяНорма = Тз.Добавить();
                НоваяНорма.Период = НаДату;
                НоваяНорма.ТаблицаНормВремени = Объект.Ссылка;
                НоваяНорма.СтрокаТаблицы = СтрокаТаблицы;
                НоваяНорма.КолонкаТаблицы = СсылкаКолонка;
                НоваяНорма.НормаВремени = СтрокаТаблицыНорм[НомерКолонки];
                
                Если СтрокаТаблицы.ВариантРасчета = ВариантРасчетаКаждыеПоследующие ИЛИ СтрокаТаблицы.ВариантРасчета = ВариантРасчетаКаждыеПоследующиеВИнтервале Тогда
                    Если СсылкаКолонка.ВариантРасчета = ВариантРасчетаКаждыеПоследующие Тогда
                        // в этом случае нач значение сохранять не нужно, т.к. будут рассчитываться интервалы по строкам и колонкам и умножаться на норму
                        
                    Иначе
                        // для расчета последующих по колонке надо сохранить начальное значение из предыдущей строки из этой же колонки
                        НоваяНорма.НормаВремениНачальная = ПредыдущаяСтрокаТаблицыНорм[НомерКолонки];
                    КонецЕсли; 
                Иначе
                    Если СсылкаКолонка.ВариантРасчета = ВариантРасчетаКаждыеПоследующие Тогда
                        НоваяНорма.НормаВремениНачальная = НачЗначПоСтроке;
                    КонецЕсли; 
                КонецЕсли; 
                
                // запоминаем на всякий случай для возможного расчета последующих в следующей колонке
                НачЗначПоСтроке = СтрокаТаблицыНорм[НомерКолонки];
                
            КонецЦикла;   
        	
        Иначе
            // Одно значение нормы для всех колонок
            НоваяНорма = Тз.Добавить();
            НоваяНорма.Период = НаДату;
            НоваяНорма.ТаблицаНормВремени = Объект.Ссылка;
            НоваяНорма.СтрокаТаблицы = СтрокаТаблицы;
            НоваяНорма.НормаВремени = СтрокаТаблицыНорм.ОбщееЗначениеНормы;
            
            Если СтрокаТаблицы.ВариантРасчета = ВариантРасчетаКаждыеПоследующие ИЛИ СтрокаТаблицы.ВариантРасчета = ВариантРасчетаКаждыеПоследующиеВИнтервале Тогда
                // для расчета последующих по строке надо сохранить начальное значение из предыдущей строки 
                НоваяНорма.НормаВремениНачальная = ПредыдущаяСтрокаТаблицыНорм.ОбщееЗначениеНормы;
            КонецЕсли; 
        КонецЕсли; 
        
        // сохраним ссылку на строку для возможной записи начальных значений норм для расчета норм последующих
        ПредыдущаяСтрокаТаблицыНорм = СтрокаТаблицыНорм;
    КонецЦикла; 
    
    мРаботаСоСметами.ЗаписатьНормыВремени(Тз);
    
КонецПроцедуры // ЗаписатьНормыНаСервере()

&НаСервереБезКонтекста
Функция ПрочитатьНормыНаСервере(СсылкаНаТаблицу)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мНормыВремени.СтрокаТаблицы,
        |   мНормыВремени.КолонкаТаблицы,
        |   мНормыВремени.НормаВремени
        |ИЗ
        |   РегистрСведений.мНормыВремени КАК мНормыВремени
        |ГДЕ
        |   мНормыВремени.СтрокаТаблицы.Владелец = &Владелец
        |   ИЛИ мНормыВремени.КолонкаТаблицы.Владелец = &Владелец";

    Запрос.УстановитьПараметр("Владелец", СсылкаНаТаблицу);

    Результат = Запрос.Выполнить().Выгрузить();

    Возврат Результат;
КонецФункции // ПрочитатьНормыНаСервере(СсылкаНаТаблицу)

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    Если ИмяСобытия = "Записана строка таблицы" ИЛИ ИмяСобытия = "Записана колонка таблицы" Тогда
        // надо обновить форму таблицы
        ЗаполнитьТаблицуНорм();
    КонецЕсли;     
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    УстановитьЕстьПолевыеРаботы();
    ЗаписатьНормыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЕстьПолевыеРаботы()
    Объект.ЕстьПолевыеРаботы = Ложь;
    Для каждого СтрСоставИсполнителей Из Объект.СоставИсполнителей Цикл
        Если СтрСоставИсполнителей.ПроцентКамеральных < 100 Тогда
            Объект.ЕстьПолевыеРаботы = Истина;
            Прервать;
        КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры

//&НаКлиенте
//Процедура ТаблицаНормИмяСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//    ЗначениеОтбора = Новый Структура("Владелец", Объект.Ссылка);
//    ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
//    ОткрытьФорму("Справочник.мСтрокиТаблиц.ФормаВыбора", ПараметрыВыбора);
//КонецПроцедуры




