#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Если Объект.Ссылка.Пустая() Тогда
        Объект.Состояние = Перечисления.мСостоянияСмет.ВДоговор;
        Объект.ДатаРасчетаСметы = ТекущаяДата();
        Объект.Составил = Пользователи.ТекущийПользователь();
		
		Объект.Проверил = ПолучитьНастройку("НастройкиСметы/СметаПроверил");
		Если Не ЗначениеЗаполнено(Объект.Проверил) Тогда
			Объект.Проверил = Пользователи.ТекущийПользователь();
		КонецЕсли; 
		
		Объект.Подписал = ПолучитьНастройку("НастройкиСметы/СметаПодписал");
		Если Не ЗначениеЗаполнено(Объект.Подписал) Тогда
			Объект.Подписал = Константы.РуководительПредприятия.Получить();
		КонецЕсли; 
		
		Объект.Рентабельность = ПолучитьНастройку("НастройкиСметы/Рентабельность");
		Если Не ЗначениеЗаполнено(Объект.Рентабельность) Тогда
			Объект.Рентабельность = Константы.мРентабельностьПоУмолчанию.Получить();
		КонецЕсли; 
		
		Если Параметры.Свойство("ЭтапДоговора") Тогда
			// Заполнение Сметы из ЭтапаДоговора с ГКИ
			Параметры.Свойство("ЭтапДоговора", Объект.ЭтапДоговора);
			Параметры.Свойство("ВидРабот", Объект.ВидРабот);
			Параметры.Свойство("ОбъектРабот", Объект.ОбъектРабот);
			ЭтоСозданиеСметыГКИ = Истина;
			
			Объект.Владелец = Объект.ЭтапДоговора.Владелец;
			Объект.НомерСметы = СокрЛП(Объект.Владелец.РегистрационныйНомер) + "/" + Параметры.НомерСметы;
			Объект.Корреспондент = Объект.Владелец.Корреспондент;
			
			Объект.СтавкаНДС = Справочники.мСтавкиНДС.НДС_20;		
		КонецЕсли; 
		
        ЗаполнитьНаименованиеСметы();
    КонецЕсли;
    Если ЗначениеЗаполнено(Объект.ШаблонСметы) Тогда
        СборникНормВремени = ПолучитьСборникНормВремени(Объект.ШаблонСметы);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИндексЦен) Тогда
		УстановитьИндексЦен();
	КонецЕсли; 
    
    // Для отбора шаблонов смет по виду карточки
    Если ЗначениеЗаполнено(Объект.КарточкаОбъектаРабот) Тогда
        ВидКарточки = Объект.КарточкаОбъектаРабот.ВидКарточки;
    КонецЕсли; 
    
    ФлагТрассировка = ЗначениеЗаполнено(Объект.Трассировка);

    // СтандартныеПодсистемы.Печать
    УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
    // Конец СтандартныеПодсистемы.Печать
	
	ТекущаяДатаРасчета = Объект.ДатаРасчетаСметы;
	
	// Получение минимальной даты, на которую можно изменять Сметную стоимость
	ДатаПоследнейЗаписи = '00010101000000';
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		СтруктураЗаполнения = Параметры.ЗначенияЗаполнения;
		Если СтруктураЗаполнения.Свойство("ДатаПоследнейЗаписи") Тогда
			ДатаПоследнейЗаписи = СтруктураЗаполнения.ДатаПоследнейЗаписи;
		КонецЕсли; 
	КонецЕсли;
	Если ДатаПоследнейЗаписи = '00010101000000' Тогда
		// берем из этапа
		Если ЗначениеЗаполнено(Объект.ЭтапДоговора) Тогда
			ДатаПоследнейЗаписи = Объект.ЭтапДоговора.ДатаПоследнейЗаписи;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Объект.Корреспонденты.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Корреспондент) Тогда
			НовСтрока = Объект.Корреспонденты.Добавить();
			НовСтрока.Корреспондент = Объект.Корреспондент;
		КонецЕсли; 
	КонецЕсли; 
	
	НесколькоКонтрагентов = Объект.Корреспонденты.Количество()>1;
	Элементы.ГруппаНесколькоЗаказчиков.Видимость = НесколькоКонтрагентов;
	Элементы.ГруппаОдинЗаказчик.Видимость = Не НесколькоКонтрагентов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    Элементы.ГруппаТрассировка.Видимость = ФлагТрассировка;
    СтавкаНДСПриИзменении(Неопределено);
    ПредыдущаяСтраница = "ГруппаИсходныеДанные";
	Если ЗначениеЗаполнено(ДатаПоследнейЗаписи) и Объект.ДатаРасчетаСметы < ДатаПоследнейЗаписи Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;	
		ПоказатьОповещениеПользователя("Разрешен только просмотр, т.к. дата расчета 
		|меньше последней записи сметной стоимости");
	КонецЕсли; 
	
	УстановитьВидимостьЭлементовПоВидуДоговора();
	УстановитьДоступностьИтогов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    Отказ = НеЗаполненПунктОсвобожденияОтНДС();
	Если Объект.Корреспонденты.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Корреспондент) Тогда
			НовСтрока = Объект.Корреспонденты.Добавить();
			НовСтрока.Корреспондент = Объект.Корреспондент;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Если ПараметрЗаписи = "" Тогда
	//	РеквизитыСметы = мРазноеКлиент.ПолучитьРеквизитыСметы(Объект.Ссылка); 
	//	//РеквизитыСметы = Новый Структура("ДатаПоследнейЗаписи", Объект.ДатаРасчетаСметы); 
	//    Оповестить("Записана смета", РеквизитыСметы, Объект.Ссылка);
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//// Обработчики
&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
    Если ПредыдущаяСтраница = "ГруппаИсходныеДанные" Тогда
        Если мРаботаСоСметами.НеУказанПунктОсвобожденияОтНДС(Объект.СтавкаНДС, Объект.ОсвобождениеОтНДС) Тогда
            ТекущаяСтраница = Элементы.ГруппаИсходныеДанные;
            Возврат;
        КонецЕсли; 
    КонецЕсли;
    ПредыдущаяСтраница = ТекущаяСтраница.Имя;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	УстановитьВидимостьЭлементовПоВидуДоговора();
КонецПроцедуры 

&НаКлиенте
Процедура НаГодПриИзменении(Элемент)
	УстановитьВидимостьЭлементовПоДействиюСметы();
КонецПроцедуры

&НаКлиенте
Процедура ЭтапДоговораПриИзменении(Элемент)
	Объект.ВидРабот = ВидРаботЭтапаДоговора(Объект.ЭтапДоговора);
КонецПроцедуры

&НаКлиенте
Процедура НомерСметыПриИзменении(Элемент)
    ЗаполнитьНаименованиеСметы();
    //Объект.Наименование = "СМЕТА № "+СокрЛП(Элемент.ТекстРедактирования)+ " на выполнение землеустроительных работ";
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСметыПриИзменении(Элемент)
    //Объект.Наименование = "СМЕТА № "+Объект.НомерСметы+" "+ПолучитьНаименованиеСметы(Объект.ШаблонСметы);
	Если Не мРаботаСоСметами.ШаблонСметыДействует(Объект.ШаблонСметы, Объект.ДатаРасчетаСметы) Тогда
		Сообщить("Выбран не действующий шаблон сметы!");	
	    Возврат;
	КонецЕсли; 
	
    СборникНормВремени = ПолучитьСборникНормВремени(Объект.ШаблонСметы);
    ЗаполнитьСтадииРаботНаСервере();
    ЗаполнитьПримечанияНаСервере();
	ЗаполнитьОснованиеСметы();
	УстановитьИндексЦен();
КонецПроцедуры
&НаКлиенте
Процедура ШаблонСметыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    
	ПараметрыФормы = Новый Структура("ВидКарточки", ПолучитьВидКарточки(Объект.КарточкаОбъектаРабот));
	ОткрытьФорму("Справочник.мШаблоныСмет.ФормаВыбора", ПараметрыФормы, Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура СборникНормВремениПриИзменении(Элемент)
	Если Не мРаботаСоСметами.СборникНормВремениДействует(СборникНормВремени, Объект.ДатаРасчетаСметы) Тогда
		Сообщить("Выбран не действующий сборник норм времени!");	
	КонецЕсли;
	ЗаполнитьОснованиеСметы();
	УстановитьИндексЦен();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
    
    РеквСтавкиНДС = мРаботаСоСметами.ПолучитьРеквСтавкиНДС(Объект.СтавкаНДС);
    ЗначениеСтавкиНДС = РеквСтавкиНДС.Ставка;
    БезНДС = РеквСтавкиНДС.БезНДС;
    
    Если Не БезНДС и ЗначениеЗаполнено(Объект.ОсвобождениеОтНДС) Тогда
        Объект.ОсвобождениеОтНДС = Неопределено;
    КонецЕсли; 
    
    Элементы.ОсвобождениеОтНДС.Видимость = БезНДС;
	
	РассчитатьНДС(); // в шапке
    
КонецПроцедуры

&НаКлиенте
Процедура КарточкаОбъектаРаботПриИзменении(Элемент)
	КарточкаПодготовлена = ПолучитьСостояниеКарточкиОбъектаРабот(Объект.КарточкаОбъектаРабот);
	Если Не КарточкаПодготовлена Тогда
		Если Вопрос("Состояние карточки: ""Проект"". Возможно, она не готова для применения в смете! Продолжить?"
			, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
		
			Возврат;	
		КонецЕсли; 
	КонецЕсли; 
    КарточкаОбъектаРаботПриИзмененииНаСервере(Объект.КарточкаОбъектаРабот);
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетаСметыПриИзменении(Элемент)
	Если Объект.ДатаРасчетаСметы < ДатаПоследнейЗаписи Тогда
		Оп = Новый ОписаниеОповещения("ЗавершениеВопросаДатаСметы", ЭтаФорма);
		ПоказатьВопрос(Оп, "Все записи сметной стоимости с "+Формат(Объект.ДатаРасчетаСметы, "ДФ=dd.MM.yyyy")+" будут удалены!
		| Продолжать?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Нельзя изменять себестоимость этапа ранее " + Формат(ДатаПоследнейЗаписи, "ДФ=dd.MM.yy");
		//Сообщение.Поле = "Объект.ДатаРасчетаСметы";
		////Сообщение.УстановитьДанные();
		//Сообщение.Сообщить(); 
		//
		//Объект.ДатаРасчетаСметы = ТекущаяДатаРасчета;
		//Возврат;
	Иначе
		ОбработатьИзменениеДатыСметы();
	КонецЕсли; 
КонецПроцедуры
&НаКлиенте
Процедура ЗавершениеВопросаДатаСметы(Результат, ПараметрыВопроса) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.ДатаРасчетаСметы = ТекущаяДатаРасчета;
	КонецЕсли; 
	
	ОбработатьИзменениеДатыСметы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалПриИзменении(Элемент)
	СохранитьВНастройках("НастройкиСметы/СметаПодписал", Объект.Подписал);
КонецПроцедуры

&НаКлиенте
Процедура ПроверилПриИзменении(Элемент)
	СохранитьВНастройках("НастройкиСметы/СметаПроверил", Объект.Проверил);
КонецПроцедуры

&НаКлиенте
Процедура РентабельностьПриИзменении(Элемент)
	СохранитьВНастройках("НастройкиСметы/Рентабельность", Объект.Рентабельность);
КонецПроцедуры

&НаКлиенте
Процедура ТрассировкаПриИзменении(Элемент)
    Элементы.ГруппаТрассировка.Видимость = ФлагТрассировка;
КонецПроцедуры

//// Методы
&НаСервереБезКонтекста
Функция ВидРаботЭтапаДоговора(ЭтапДоговора)
	Возврат ЭтапДоговора.ВидРабот;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСостояниеКарточкиОбъектаРабот(КарточкаОбъектаРабот)
	КарточкаПодготовлена = Ложь;
	
	Если КарточкаОбъектаРабот.Состояние = Перечисления.мСостоянияКарточекОбъектовРабот.Составлена Тогда
		КарточкаПодготовлена = Истина;
	КонецЕсли; 
	
	Возврат КарточкаПодготовлена;
КонецФункции // ПолучитьСостояниеКарточкиОбъектаРабот(КарточкаОбъектаРабот)
 
&НаКлиенте
Процедура ОбработатьИзменениеДатыСметы()
	УстановитьИндексЦен();
	ЗаполнитьНаименованиеСметы();
	ЗаполнитьОснованиеСметы();
КонецПроцедуры
 
&НаСервере
Процедура КарточкаОбъектаРаботПриИзмененииНаСервере(КарточкаОбъектаРабот)
    // получим параметры объекта в таблицу
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта,
        |   мКарточкиОбъектовРаботПараметрыОбъекта.Значение
        |ИЗ
        |   Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
        |ГДЕ
        |   мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка = &Ссылка";

    Запрос.УстановитьПараметр("Ссылка", КарточкаОбъектаРабот);

    РезультатЗапроса = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    ТаблицаПараметровОбъекта.Очистить();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СтрокаПараметров = ТаблицаПараметровОбъекта.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаПараметров, ВыборкаДетальныеЗаписи);
    КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъемРабот
//// Обработчики
&НаКлиенте
Процедура ОбъемРаботСтоимостьПриИзменении(Элемент)
    ОбъемРаботСтоимостьПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбъемРаботПослеУдаления(Элемент)
	РассчитатьИтогиСметы();
	УстановитьДоступностьИтогов();
КонецПроцедуры

&НаКлиенте
Процедура ОбъемРаботИспользоватьПриИзменении(Элемент)
	РассчитатьИтогиСметы();
КонецПроцедуры

//// Методы
&НаСервере
Процедура ОбъемРаботСтоимостьПриИзмененииНаСервере()
    Объект.Итого = Объект.ОбъемРабот.Итог("Стоимость");
    СтавкаНДСЧисло = Объект.СтавкаНДС.Ставка;
    Объект.Итого = Окр(Объект.Итого * Объект.ДоляОбъекта, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.НДС = Окр(Объект.Итого * СтавкаНДСЧисло / 100, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.КОплате = Объект.Итого + Объект.НДС;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Обработчик нажатия на "кнопку "ВыделитьВсеСтадииРабот"
// командной панели элемента управления "Стадии работ"
// Выделяет все стадии работ
//
&НаКлиенте
Процедура ВыделитьВсеСтадииРабот(Команда)
	
	Для Каждого СтадияРабот Из Объект.СтадииРабот Цикл
		СтадияРабот.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик нажатия на "кнопку "ОтменитьВыделитьВсеСтадииРабот"
// командной панели элемента управления "Стадии работ"
// Снимает выделение со всех Стадии работ в списке
//
&НаКлиенте
Процедура ОтменитьВыделитьВсеСтадииРабот(Команда)
	
	Для Каждого СтадияРабот Из Объект.СтадииРабот Цикл
		СтадияРабот.Использовать = Ложь;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПримечания(Команда)
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		ПоказатьОповещениеПользователя("Разрешен только просмотр, т.к. дата расчета 
		|меньше последней записи сметной стоимости");
		Возврат;
	КонецЕсли; 
    Если НеЗаполненПунктОсвобожденияОтНДС() Тогда
        Возврат;
    КонецЕсли; 
    ЗаполнитьПримечанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтадииРабот(Команда)
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		ПоказатьОповещениеПользователя("Разрешен только просмотр, т.к. дата расчета 
		|меньше последней записи сметной стоимости");
		Возврат;
	КонецЕсли; 
    Если НеЗаполненПунктОсвобожденияОтНДС() Тогда
        Возврат;
    КонецЕсли; 
    ЗаполнитьСтадииРаботНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбъемРабот(Команда)
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		ПоказатьОповещениеПользователя("Разрешен только просмотр, т.к. дата расчета 
		|меньше последней записи сметной стоимости");
		Возврат;
	КонецЕсли; 
    Если НеЗаполненПунктОсвобожденияОтНДС() Тогда
        Возврат;
    КонецЕсли; 
	
	ПараметрЗаписи = "Заполнение объема работ"; // для исключения оповещения
	Записать();
	ПараметрЗаписи = "";
    
    ЗаполнитьОбъемРаботНаСервере();
    Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрКарточкиИСметы(Команда)
    ПараметрыФормы = Новый Структура("Смета", Объект.Ссылка);
    ОткрытьФорму("Справочник.мСметы.Форма.СравнениеКарточкиИСметы", ПараметрыФормы,,,,,,);
КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов();
	//Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИсходныеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.ГруппаНесколькоЗаказчиков.Видимость = НесколькоКонтрагентов;	
	Элементы.ГруппаОдинЗаказчик.Видимость = Не НесколькоКонтрагентов;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОдинКорреспондент(Команда)
	
	КоличествоКонтрагентов = Объект.Корреспонденты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = Объект.Корреспонденты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Корреспондент) Тогда 
			Объект.Корреспонденты.Удалить(Строка); 
		КонецЕсли; 
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКорреспондентПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Корреспонденты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все заказчики, кроме первого, будут удалены. 
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);	
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ОдинКорреспондентПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Пока Объект.Корреспонденты.Количество() > 1 Цикл
			Объект.Корреспонденты.Удалить(1);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
	Если Объект.Корреспонденты.Количество() > 0 Тогда
		Строка = Объект.Корреспонденты[0];		
		Объект.Корреспондент = Строка.Корреспондент;
	Иначе	
		Объект.Корреспондент = Неопределено;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();

КонецПроцедуры	

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	Записать();
	Закрыть(Объект.Ссылка);
КонецПроцедуры




#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
    Если НеЗаполненПунктОсвобожденияОтНДС() Тогда
        Возврат;
    КонецЕсли; 
    
	Если Модифицированность Тогда
		ПараметрЗаписи = "Запись перед печатью";
		Записать();
		ПараметрЗаписи = "";
	КонецЕсли; 
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура СохранитьВНастройках(Имя, Значение)
	МассивСтруктур = Новый Массив;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	МассивСтруктур.Добавить (СформироватьНастройку(Имя, Значение, ИдентификаторКлиента));
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
КонецПроцедуры 
 
&НаКлиенте
Функция СформироватьНастройку(Имя, Значение, ИдентификаторКлиента)
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", Имя);
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Значение);
	Возврат Элемент;
	
КонецФункции	

&НаСервере
Функция ПолучитьНастройку(Имя)
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Имя, ИдентификаторКлиента);
КонецФункции 


#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоДействиюСметы()
	//Элементы.ВидРабот.Видимость = Объект.НаГод;
	//Элементы.ЭтапДоговора.Видимость = НЕ Объект.НаГод; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоВидуДоговора()
	Элементы.НаГод.Видимость = ЭтоДоговорГКИ(Объект.Владелец);
	//УстановитьВидимостьЭлементовПоДействиюСметы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИтогов()
	//НетРасчета = Объект.ОбъемРабот.Количество() = 0;
	//Элементы.ГруппаИтогоПоСмете.Доступность = НетРасчета;
	Элементы.ГруппаИтогоПоСмете.Доступность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьОснованиеСметы()
    Объект.ОснованиеСметы = ПолучитьОснованиеСметы(СборникНормВремени, Объект.ДатаРасчетаСметы);
КонецПроцедуры
 
&НаСервере
Процедура УстановитьИндексЦен()
    СтруктураИндексаЦен = мРаботаСоСметами.ПолучитьИндексЦен(СборникНормВремени, Объект.ДатаРасчетаСметы);
    Объект.ИндексЦен = СтруктураИндексаЦен.Значение;
    Объект.ТекстИндексЦен = "утвержден с "+Формат(СтруктураИндексаЦен.Период, "ДФ=dd.MM.yyyy")+"г. приказом "+СокрЛП(СтруктураИндексаЦен.Должность)+" № "+
        СокрЛП(СтруктураИндексаЦен.НомерПриказа)+" от "+Формат(СтруктураИндексаЦен.ДатаПриказа, "ДФ=dd.MM.yyyy") + "г.";
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтадииРаботНаСервере()
    Объект.СтадииРабот.Очистить();
    Если НЕ ЗначениеЗаполнено(Объект.ШаблонСметы) Тогда
        Возврат;
    КонецЕсли; 
        
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мШаблоныСметСтадииРабот.Использовать,
        |   мШаблоныСметСтадииРабот.СтадияРабот,
        |   мШаблоныСметСтадииРабот.Процент,
        |   мШаблоныСметСтадииРабот.ТаблицаНормВремени,
        |   мШаблоныСметСтадииРабот.НомерСтрокиТаблицы,
        |   мШаблоныСметСтадииРабот.СтадияРабот.Приоритет КАК СтадияРаботПриоритет,
        |   мШаблоныСметСтадииРабот.ПараметрОбъекта
        |ИЗ
        |   Справочник.мШаблоныСмет.СтадииРабот КАК мШаблоныСметСтадииРабот
        |ГДЕ
        |   мШаблоныСметСтадииРабот.Ссылка = &ШаблонСметы
        |
        |УПОРЯДОЧИТЬ ПО
        |   СтадияРаботПриоритет";

    Запрос.УстановитьПараметр("ШаблонСметы", Объект.ШаблонСметы);

    РезультатЗапроса = Запрос.Выполнить();
    
    ПараметрыОбъекта = ПолучитьПараметрыОбъекта(Объект.КарточкаОбъектаРабот);

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        НоваяСтадия = Объект.СтадииРабот.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтадия, ВыборкаДетальныеЗаписи);
        
        // Определение необходимости использования стадии работ
        Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПараметрОбъекта) Тогда
            
            НоваяСтадия.Использовать = Ложь;
            
            Для каждого СтрПар Из ПараметрыОбъекта Цикл
                Если СтрПар.ПараметрОбъекта = ВыборкаДетальныеЗаписи.ПараметрОбъекта ИЛИ 
                    СтрПар.ПараметрОбъекта.Родитель = ВыборкаДетальныеЗаписи.ПараметрОбъекта Тогда
                    
                    Если ТипЗнч(СтрПар.Значение) = Тип(Новый ОписаниеТипов("Булево")) Тогда
                        Если СтрПар.Значение Тогда
                            НоваяСтадия.Использовать = Истина;
                            Прервать;
                        КонецЕсли;
                        
                    ИначеЕсли ТипЗнч(СтрПар.Значение) = Тип(Новый ОписаниеТипов("Число")) Тогда 
                        Если СтрПар.Значение > 0 Тогда
                            НоваяСтадия.Использовать = Истина;
                            Прервать;
                        КонецЕсли; 
                    КонецЕсли; 
                КонецЕсли; 
            КонецЦикла; 
         КонецЕсли; 
    КонецЦикла;

КонецПроцедуры // ЗаполнитьСтадииРабот()

#КонецОбласти 

#Область МетодыРасчетаСметы
&НаСервереБезКонтекста
Функция ЭтоДоговорГКИ(Договор)
	Возврат Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорГКИ;	
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьСборникНормВремени(ШаблонСметы)
    Возврат ШаблонСметы.СборникНормВремени;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОбъекта(КарточкаОбъектаРабот)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта,
        |   мКарточкиОбъектовРаботПараметрыОбъекта.Значение
        |ИЗ
        |   Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
        |ГДЕ
        |   мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка = &КарточкаОбъектаРабот";
    
    Запрос.УстановитьПараметр("КарточкаОбъектаРабот", КарточкаОбъектаРабот);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    Возврат РезультатЗапроса;

КонецФункции

// Заполняет таб часть Примечания списком примечаний
//  которые могут быть использованы при расчете сметы
&НаСервере
Процедура ЗаполнитьПримечанияНаСервере()
    
    // Таблица для запроса
    ТзТаблиц = Объект.СтадииРабот.Выгрузить();
    ТзТаблиц.Колонки.Добавить("ЕстьПолевыеРаботы", Новый ОписаниеТипов("Булево"));
    ТзТаблиц.Колонки.Добавить("Сборник", Новый ОписаниеТипов("СправочникСсылка.мСборникиНормВремени"));
    ТзТаблиц.Очистить();
    
    Для каждого СтадияРабот Из Объект.СтадииРабот Цикл
        Если СтадияРабот.Использовать Тогда
            Если Найти(СтадияРабот.НомерСтрокиТаблицы, ",") > 0 Тогда
                // несколько строк в одной
                МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтадияРабот.НомерСтрокиТаблицы, ",");
                Для каждого Реквизит Из МассивСтрок Цикл
                    СтрокаТзТаблиц = ТзТаблиц.Добавить();
                    СтрокаТзТаблиц.ТаблицаНормВремени = СтадияРабот.ТаблицаНормВремени;
                    СтрокаТзТаблиц.НомерСтрокиТаблицы = СокрЛП(Реквизит);
                    СтрокаТзТаблиц.СтадияРабот = СтадияРабот.СтадияРабот;
                    СтрокаТзТаблиц.ЕстьПолевыеРаботы = СтадияРабот.ТаблицаНормВремени.ЕстьПолевыеРаботы;
                    СтрокаТзТаблиц.Сборник = СтадияРабот.ТаблицаНормВремени.Владелец;
                КонецЦикла; 
            Иначе
                СтрокаТзТаблиц = ТзТаблиц.Добавить();
                ЗаполнитьЗначенияСвойств(СтрокаТзТаблиц, СтадияРабот);
                СтрокаТзТаблиц.ЕстьПолевыеРаботы = СтадияРабот.ТаблицаНормВремени.ЕстьПолевыеРаботы;
                СтрокаТзТаблиц.Сборник = СтадияРабот.ТаблицаНормВремени.Владелец;
           КонецЕсли; 
        КонецЕсли; 
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ТзТаблиц.СтадияРабот,
        |   ТзТаблиц.ТаблицаНормВремени,
        |   ТзТаблиц.НомерСтрокиТаблицы,
        |   ТзТаблиц.ЕстьПолевыеРаботы,
        |   ТзТаблиц.Сборник
        |ПОМЕСТИТЬ тзТаблиц
        |ИЗ
        |   &ТзТаблиц КАК ТзТаблиц
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   мПримечанияНормВремени.Ссылка КАК Примечание,
        |   мПримечанияНормВремени.СсылкаНаСборник
        |ПОМЕСТИТЬ Свод
        |ИЗ
        |   тзТаблиц КАК тзТаблиц
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мПримечанияНормВремени КАК мПримечанияНормВремени
        |       ПО тзТаблиц.Сборник = мПримечанияНормВремени.Владелец
        |ГДЕ
        |   мПримечанияНормВремени.ДействуетНаВесьСборник
        |   И НЕ мПримечанияНормВремени.ПометкаУдаления
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   мПримечанияНормВремениТаблицыНормВремени.Ссылка,
        |   мПримечанияНормВремениТаблицыНормВремени.Ссылка.СсылкаНаСборник
        |ИЗ
        |   тзТаблиц КАК тзТаблиц
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мПримечанияНормВремени.ТаблицыНормВремени КАК мПримечанияНормВремениТаблицыНормВремени
        |       ПО тзТаблиц.Сборник = мПримечанияНормВремениТаблицыНормВремени.Ссылка.Владелец
        |           И (тзТаблиц.ТаблицаНормВремени = мПримечанияНормВремениТаблицыНормВремени.ТаблицаНормВремени
        |               И (мПримечанияНормВремениТаблицыНормВремени.НомерСтрокиТаблицы ПОДОБНО ""%,"" + тзТаблиц.НомерСтрокиТаблицы + "",%""
        |                   ИЛИ мПримечанияНормВремениТаблицыНормВремени.НомерСтрокиТаблицы = """"))
        |ГДЕ
        |   НЕ мПримечанияНормВремениТаблицыНормВремени.Ссылка.ПометкаУдаления
        |   И НЕ мПримечанияНормВремениТаблицыНормВремени.Ссылка.ДействуетНаВесьСборник
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   Свод.Примечание,
        |   Свод.Примечание.НеИспользоватьПоУмолчанию КАК НеИспользоватьПоУмолчанию,
        |   Свод.СсылкаНаСборник
        |ИЗ
        |   Свод КАК Свод";

    Запрос.УстановитьПараметр("ТзТаблиц", ТзТаблиц);
    
    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();

    Объект.Примечания.Очистить();
    
    Пока Выборка.Следующий() Цикл
        НовоеПрим = Объект.Примечания.Добавить();
        ЗаполнитьЗначенияСвойств(НовоеПрим, Выборка);
		Если Выборка.НеИспользоватьПоУмолчанию Тогда
	        НовоеПрим.Использовать = Ложь;
		Иначе	
	        НовоеПрим.Использовать = Истина;
		КонецЕсли; 
    КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъемРаботНаСервере()
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	СУММА(ВЫБОР
        |			КОГДА мСтоимостьНормоЧасаСрезПоследних.УсловияРабот = ЗНАЧЕНИЕ(Перечисление.мУсловияРабот.Камеральные)
        |				ТОГДА мСтоимостьНормоЧасаСрезПоследних.СтоимостьНормоЧаса
        |			ИНАЧЕ 0
        |		КОНЕЦ) КАК ТарифКамеральных,
        |	СУММА(ВЫБОР
        |			КОГДА мСтоимостьНормоЧасаСрезПоследних.УсловияРабот = ЗНАЧЕНИЕ(Перечисление.мУсловияРабот.Полевые)
        |				ТОГДА мСтоимостьНормоЧасаСрезПоследних.СтоимостьНормоЧаса
        |			ИНАЧЕ 0
        |		КОНЕЦ) КАК ТарифПолевых,
        |	мСтоимостьНормоЧасаСрезПоследних.Должность КАК Должность
        |ПОМЕСТИТЬ Тарифы
        |ИЗ
        |	РегистрСведений.мСтоимостьНормоЧаса.СрезПоследних(&ДатаСметы, Рентабельность = &Рентабельность) КАК мСтоимостьНормоЧасаСрезПоследних
        |
        |СГРУППИРОВАТЬ ПО
        |	мСтоимостьНормоЧасаСрезПоследних.Должность
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мЦеныДляСметСрезПоследних.ПараметрОбъекта,
        |	мЦеныДляСметСрезПоследних.Цена
        |ПОМЕСТИТЬ Цены
        |ИЗ
        |	РегистрСведений.мЦеныДляСмет.СрезПоследних(&ДатаСметы, ) КАК мЦеныДляСметСрезПоследних
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мСметыСтадииРабот.СтадияРабот,
        |	мСметыСтадииРабот.Процент,
        |	мСметыСтадииРабот.ТаблицаНормВремени,
        |	мСметыСтадииРабот.НомерСтрокиТаблицы,
        |	мСметыСтадииРабот.НомерСтроки
        |ПОМЕСТИТЬ СтадииРабот
        |ИЗ
        |	Справочник.мСметы.СтадииРабот КАК мСметыСтадииРабот
        |ГДЕ
        |	мСметыСтадииРабот.Ссылка = &Ссылка
        |	И мСметыСтадииРабот.Использовать
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	мТаблицыНормВремениСоставИсполнителей.Должность,
        |	ЕСТЬNULL(мТаблицыНормВремениСоставИсполнителей.КоличествоЧеловек, 0) КАК КоличествоЧеловек,
        |	ЕСТЬNULL(мТаблицыНормВремениСоставИсполнителей.ПроцентКамеральных, 0) КАК ПроцентКамеральных,
        |	100 - ЕСТЬNULL(мТаблицыНормВремениСоставИсполнителей.ПроцентКамеральных, 0) КАК ПроцентПолевых,
        |	ЕСТЬNULL(Тарифы.ТарифКамеральных, 0) КАК ТарифКамеральных,
        |	ЕСТЬNULL(Тарифы.ТарифПолевых, 0) КАК ТарифПолевых,
        |	мТаблицыНормВремениСоставИсполнителей.КоличествоЧеловек / 100 * (мТаблицыНормВремениСоставИсполнителей.ПроцентКамеральных * Тарифы.ТарифКамеральных + (100 - мТаблицыНормВремениСоставИсполнителей.ПроцентКамеральных) * Тарифы.ТарифПолевых) КАК СтоимостьНормоЧаса,
        |	СтадииРабот.ТаблицаНормВремени КАК ТаблицаНормВремени,
        |	СтадииРабот.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы
        |ИЗ
        |	СтадииРабот КАК СтадииРабот
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мТаблицыНормВремени.СоставИсполнителей КАК мТаблицыНормВремениСоставИсполнителей
        |			ЛЕВОЕ СОЕДИНЕНИЕ Тарифы КАК Тарифы
        |			ПО мТаблицыНормВремениСоставИсполнителей.Должность = Тарифы.Должность
        |		ПО СтадииРабот.ТаблицаНормВремени = мТаблицыНормВремениСоставИсполнителей.Ссылка
        |			И СтадииРабот.НомерСтрокиТаблицы = мТаблицыНормВремениСоставИсполнителей.НомерСтрокиТаблицы
        |ГДЕ
        |	СтадииРабот.ТаблицаНормВремени <> ЗНАЧЕНИЕ(Справочник.мТаблицыНормВремени.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта,
        |	мКарточкиОбъектовРаботПараметрыОбъекта.Значение
        |ПОМЕСТИТЬ ПараметрыОбъекта
        |ИЗ
        |	Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
        |ГДЕ
        |	мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка = &Карточка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мКолонкиТаблиц.Ссылка КАК СсылкаНаКолонку,
        |	мКолонкиТаблиц.Владелец.ПараметрОбъектаВКолонках КАК ПараметрОбъектаВКолонке,
        |	мКолонкиТаблиц.НижняяГраницаДиапазона КАК НГКолонки,
        |	мКолонкиТаблиц.ВерхняяГраницаДиапазона КАК ВГКолонки,
        |	мКолонкиТаблиц.ВариантРасчета КАК ВариантРасчетаКолонки,
        |	мКолонкиТаблиц.ДляПоследующих КАК ДляПоследующихВКолонке,
        |	мСтрокиТаблиц.Ссылка КАК СсылкаНаСтроку,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляУсловия,
        |	мСтрокиТаблиц.НижняяГраницаДиапазона КАК НГСтроки,
        |	мСтрокиТаблиц.ВерхняяГраницаДиапазона КАК ВГСтроки,
        |	мСтрокиТаблиц.ВариантРасчета КАК ВариантРасчетаСтроки,
        |	мСтрокиТаблиц.ДляПоследующих КАК ДляПоследующихВСтроке,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляКоличества,
        |	мСтрокиТаблиц.СсылкаНаСборник,
        |	СтадииРабот.НомерСтроки,
        |	СтадииРабот.Процент
        |ПОМЕСТИТЬ ТолькоКолонки
        |ИЗ
        |	СтадииРабот КАК СтадииРабот
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мСтрокиТаблиц КАК мСтрокиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мСтрокиТаблиц.Владелец
        |			И СтадииРабот.НомерСтрокиТаблицы = мСтрокиТаблиц.НомерСтрокиТаблицы
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мКолонкиТаблиц КАК мКолонкиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мКолонкиТаблиц.Владелец
        |ГДЕ
        |	мСтрокиТаблиц.ИспользоватьУсловияКолонок
        |	И НЕ мСтрокиТаблиц.ИспользоватьУсловияСтроки
        |	И НЕ мСтрокиТаблиц.ПометкаУдаления
        |	И НЕ мКолонкиТаблиц.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ТолькоКолонки.СсылкаНаКолонку,
        |	ТолькоКолонки.ПараметрОбъектаВКолонке КАК ПараметрКолонки,
        |	ЕСТЬNULL(ПараметрыКолонок.Значение, 0) КАК ЗначениеКолонки,
        |	ТолькоКолонки.СсылкаНаСтроку,
        |	ТолькоКолонки.ПараметрОбъектаВСтрокеДляКоличества КАК ПараметрСтрокиКоличество,
        |	ЕСТЬNULL(ПараметрыСтрок.Значение, 0) КАК ЗначениеСтрокиКоличество,
        |	ТолькоКолонки.НомерСтроки КАК НомерСтроки,
        |	ТолькоКолонки.Процент КАК Процент
        |ПОМЕСТИТЬ ТолькоКолонкиПлюс
        |ИЗ
        |	ТолькоКолонки КАК ТолькоКолонки
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыКолонок
        |		ПО ТолькоКолонки.ПараметрОбъектаВКолонке = ПараметрыКолонок.ПараметрОбъекта
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыСтрок
        |		ПО ТолькоКолонки.ПараметрОбъектаВСтрокеДляКоличества = ПараметрыСтрок.ПараметрОбъекта
        |ГДЕ
        |	ПараметрыКолонок.Значение <> 0
        |	И (ТолькоКолонки.НГКолонки <= ПараметрыКолонок.Значение
        |				И ПараметрыКолонок.Значение < ТолькоКолонки.ВГКолонки
        |			ИЛИ ТолькоКолонки.НГКолонки <= ПараметрыКолонок.Значение
        |				И (ТолькоКолонки.ВариантРасчетаКолонки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.Сверх)
        |					ИЛИ ТолькоКолонки.ВариантРасчетаКолонки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.КаждыеПоследующие)))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мСтрокиТаблиц.Ссылка КАК СсылкаНаСтроку,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляУсловия,
        |	мСтрокиТаблиц.НижняяГраницаДиапазона КАК НГСтроки,
        |	мСтрокиТаблиц.ВерхняяГраницаДиапазона КАК ВГСтроки,
        |	мСтрокиТаблиц.ВариантРасчета КАК ВариантРасчетаСтроки,
        |	мСтрокиТаблиц.ДляПоследующих КАК ДляПоследующихВСтроке,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляКоличества,
        |	мСтрокиТаблиц.СсылкаНаСборник,
        |	СтадииРабот.НомерСтроки,
        |	СтадииРабот.Процент
        |ПОМЕСТИТЬ Строки
        |ИЗ
        |	СтадииРабот КАК СтадииРабот
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мСтрокиТаблиц КАК мСтрокиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мСтрокиТаблиц.Владелец
        |			И СтадииРабот.НомерСтрокиТаблицы = мСтрокиТаблиц.НомерСтрокиТаблицы
        |ГДЕ
        |	НЕ мСтрокиТаблиц.ИспользоватьУсловияКолонок
        |	И мСтрокиТаблиц.ИспользоватьУсловияСтроки
        |	И НЕ мСтрокиТаблиц.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Строки.СсылкаНаСтроку,
        |	Строки.ПараметрОбъектаВСтрокеДляУсловия,
        |	ЕСТЬNULL(ПараметрыСтрок.Значение, 0) КАК ЗначениеСтрокиУсловие,
        |	Строки.ПараметрОбъектаВСтрокеДляКоличества КАК ПараметрОбъектаВСтрокеДляКоличества,
        |	Строки.НомерСтроки,
        |	Строки.Процент
        |ПОМЕСТИТЬ СтрокиДоп
        |ИЗ
        |	Строки КАК Строки
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыСтрок
        |		ПО Строки.ПараметрОбъектаВСтрокеДляУсловия = ПараметрыСтрок.ПараметрОбъекта
        |ГДЕ
        |	ПараметрыСтрок.Значение <> 0
        |	И (Строки.НГСтроки <= ПараметрыСтрок.Значение
        |				И ПараметрыСтрок.Значение < Строки.ВГСтроки
        |			ИЛИ ПараметрыСтрок.Значение >= Строки.НГСтроки
        |				И (Строки.ВариантРасчетаСтроки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.Сверх)
        |					ИЛИ Строки.ВариантРасчетаСтроки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.КаждыеПоследующие)))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СтрокиДоп.СсылкаНаСтроку,
        |	СтрокиДоп.ПараметрОбъектаВСтрокеДляУсловия,
        |	СтрокиДоп.ЗначениеСтрокиУсловие,
        |	СтрокиДоп.ПараметрОбъектаВСтрокеДляКоличества,
        |	ЕСТЬNULL(ПараметрыСтрок.Значение, 0) КАК ЗначениеСтрокиКоличество,
        |	СтрокиДоп.НомерСтроки,
        |	СтрокиДоп.Процент
        |ПОМЕСТИТЬ СтрокиПлюс
        |ИЗ
        |	СтрокиДоп КАК СтрокиДоп
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыСтрок
        |		ПО СтрокиДоп.ПараметрОбъектаВСтрокеДляКоличества = ПараметрыСтрок.ПараметрОбъекта
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мСтрокиТаблиц.Ссылка КАК СсылкаНаСтроку,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляКоличества,
        |	мСтрокиТаблиц.СсылкаНаСборник,
        |	СтадииРабот.НомерСтроки,
        |	СтадииРабот.Процент
        |ПОМЕСТИТЬ БезСтрокКолонок
        |ИЗ
        |	СтадииРабот КАК СтадииРабот
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мСтрокиТаблиц КАК мСтрокиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мСтрокиТаблиц.Владелец
        |			И СтадииРабот.НомерСтрокиТаблицы = мСтрокиТаблиц.НомерСтрокиТаблицы
        |ГДЕ
        |	НЕ мСтрокиТаблиц.ИспользоватьУсловияКолонок
        |	И НЕ мСтрокиТаблиц.ИспользоватьУсловияСтроки
        |	И НЕ мСтрокиТаблиц.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	БезСтрокКолонок.СсылкаНаСтроку,
        |	БезСтрокКолонок.ПараметрОбъектаВСтрокеДляКоличества,
        |	БезСтрокКолонок.СсылкаНаСборник,
        |	БезСтрокКолонок.НомерСтроки,
        |	БезСтрокКолонок.Процент,
        |	ЕСТЬNULL(ПараметрыОбъекта.Значение, 0) КАК ЗначениеСтрокиКоличество
        |ПОМЕСТИТЬ БезСтрокКолонокПлюс
        |ИЗ
        |	БезСтрокКолонок КАК БезСтрокКолонок
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыОбъекта
        |		ПО БезСтрокКолонок.ПараметрОбъектаВСтрокеДляКоличества = ПараметрыОбъекта.ПараметрОбъекта
        |ГДЕ
        |	(БезСтрокКолонок.ПараметрОбъектаВСтрокеДляКоличества = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыОбъектов.ПустаяСсылка)
        |			ИЛИ БезСтрокКолонок.ПараметрОбъектаВСтрокеДляКоличества <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыОбъектов.ПустаяСсылка)
        |				И (ТИПЗНАЧЕНИЯ(ПараметрыОбъекта.Значение) = ТИП(БУЛЕВО)
        |					ИЛИ ПараметрыОбъекта.Значение <> 0))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мКолонкиТаблиц.Ссылка КАК СсылкаНаКолонку,
        |	мКолонкиТаблиц.Владелец.ПараметрОбъектаВКолонках КАК ПараметрКолонки,
        |	мКолонкиТаблиц.НижняяГраницаДиапазона КАК НГКолонки,
        |	мКолонкиТаблиц.ВерхняяГраницаДиапазона КАК ВГКолонки,
        |	мКолонкиТаблиц.ВариантРасчета КАК ВариантРасчетаКолонки,
        |	мКолонкиТаблиц.ДляПоследующих КАК ДляПоследующихВКолонке,
        |	мСтрокиТаблиц.Ссылка КАК СсылкаНаСтроку,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляУсловия КАК ПараметрСтрокиУсловие,
        |	мСтрокиТаблиц.НижняяГраницаДиапазона КАК НГСтроки,
        |	мСтрокиТаблиц.ВерхняяГраницаДиапазона КАК ВГСтроки,
        |	мСтрокиТаблиц.ВариантРасчета КАК ВариантРасчетаСтроки,
        |	мСтрокиТаблиц.ДляПоследующих КАК ДляПоследующихВСтроке,
        |	мСтрокиТаблиц.ПараметрОбъектаВСтрокеДляКоличества КАК ПараметрСтрокиКоличество,
        |	мСтрокиТаблиц.СсылкаНаСборник,
        |	СтадииРабот.НомерСтроки,
        |	СтадииРабот.Процент
        |ПОМЕСТИТЬ СтрокиКолонки
        |ИЗ
        |	СтадииРабот КАК СтадииРабот
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мКолонкиТаблиц КАК мКолонкиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мКолонкиТаблиц.Владелец
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мСтрокиТаблиц КАК мСтрокиТаблиц
        |		ПО СтадииРабот.ТаблицаНормВремени = мСтрокиТаблиц.Владелец
        |			И СтадииРабот.НомерСтрокиТаблицы = мСтрокиТаблиц.НомерСтрокиТаблицы
        |ГДЕ
        |	мСтрокиТаблиц.ИспользоватьУсловияСтроки
        |	И мСтрокиТаблиц.ИспользоватьУсловияКолонок
        |	И НЕ мКолонкиТаблиц.ПометкаУдаления
        |	И НЕ мСтрокиТаблиц.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СтрокиКолонки.СсылкаНаКолонку КАК КолонкаТаблицы,
        |	СтрокиКолонки.ПараметрКолонки,
        |	ЕСТЬNULL(ПараметрыКолонок.Значение, 0) КАК ЗначениеКолонки,
        |	СтрокиКолонки.СсылкаНаСтроку КАК СтрокаТаблицы,
        |	СтрокиКолонки.ПараметрСтрокиУсловие,
        |	ЕСТЬNULL(ПараметрыСтрок.Значение, 0) КАК ЗначениеСтрокиУсловие,
        |	СтрокиКолонки.ПараметрСтрокиКоличество,
        |	СтрокиКолонки.НомерСтроки,
        |	СтрокиКолонки.Процент
        |ПОМЕСТИТЬ СтрокиКолонкиПлюсУ
        |ИЗ
        |	СтрокиКолонки КАК СтрокиКолонки
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыКолонок
        |		ПО СтрокиКолонки.ПараметрКолонки = ПараметрыКолонок.ПараметрОбъекта
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыСтрок
        |		ПО СтрокиКолонки.ПараметрСтрокиУсловие = ПараметрыСтрок.ПараметрОбъекта
        |ГДЕ
        |	ПараметрыСтрок.Значение <> 0
        |	И (СтрокиКолонки.НГСтроки <= ПараметрыСтрок.Значение
        |				И ПараметрыСтрок.Значение < СтрокиКолонки.ВГСтроки
        |			ИЛИ ПараметрыСтрок.Значение >= СтрокиКолонки.НГСтроки
        |				И (СтрокиКолонки.ВариантРасчетаСтроки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.Сверх)
        |					ИЛИ СтрокиКолонки.ВариантРасчетаСтроки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.КаждыеПоследующие)))
        |	И ПараметрыКолонок.Значение <> 0
        |	И (СтрокиКолонки.НГКолонки <= ПараметрыКолонок.Значение
        |				И ПараметрыКолонок.Значение < СтрокиКолонки.ВГКолонки
        |			ИЛИ СтрокиКолонки.НГКолонки <= ПараметрыКолонок.Значение
        |				И (СтрокиКолонки.ВариантРасчетаКолонки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.Сверх)
        |					ИЛИ СтрокиКолонки.ВариантРасчетаКолонки = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетов.КаждыеПоследующие)))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СтрокиКолонкиПлюсУ.КолонкаТаблицы КАК КолонкаТаблицы,
        |	СтрокиКолонкиПлюсУ.ПараметрКолонки КАК ПараметрКолонки,
        |	СтрокиКолонкиПлюсУ.ЗначениеКолонки КАК ЗначениеКолонки,
        |	СтрокиКолонкиПлюсУ.СтрокаТаблицы КАК СтрокаТаблицы,
        |	СтрокиКолонкиПлюсУ.ПараметрСтрокиУсловие КАК ПараметрСтрокиУсловие,
        |	СтрокиКолонкиПлюсУ.ЗначениеСтрокиУсловие КАК ЗначениеСтрокиУсловие,
        |	СтрокиКолонкиПлюсУ.ПараметрСтрокиКоличество КАК ПараметрСтрокиКоличество,
        |	ЕСТЬNULL(ПараметрыСтрок.Значение, 0) КАК ЗначениеСтрокиКоличество,
        |	СтрокиКолонкиПлюсУ.НомерСтроки КАК НомерСтроки,
        |	СтрокиКолонкиПлюсУ.Процент КАК Процент
        |ПОМЕСТИТЬ СтрокиКолонкиПлюс
        |ИЗ
        |	СтрокиКолонкиПлюсУ КАК СтрокиКолонкиПлюсУ
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыОбъекта КАК ПараметрыСтрок
        |		ПО СтрокиКолонкиПлюсУ.ПараметрСтрокиКоличество = ПараметрыСтрок.ПараметрОбъекта
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	NULL КАК СсылкаНаКолонку,
        |	NULL КАК ПараметрКолонки,
        |	NULL КАК ЗначениеКолонки,
        |	БезСтрокКолонокПлюс.СсылкаНаСтроку КАК СсылкаНаСтроку,
        |	NULL КАК ПараметрСтрокиУсловия,
        |	NULL КАК ЗначениеСтрокиУсловие,
        |	БезСтрокКолонокПлюс.ПараметрОбъектаВСтрокеДляКоличества КАК ПараметрСтрокиКоличество,
        |	БезСтрокКолонокПлюс.ЗначениеСтрокиКоличество КАК ЗначениеСтрокиКоличество,
        |	мНормыВремениСрезПоследних.НормаВремени КАК НормаВремени,
        |	мНормыВремениСрезПоследних.НормаВремениНачальная КАК НормаВремениНачальная,
        |	БезСтрокКолонокПлюс.НомерСтроки КАК НомерСтроки,
        |	БезСтрокКолонокПлюс.Процент КАК Процент
        |ПОМЕСТИТЬ Общий
        |ИЗ
        |	БезСтрокКолонокПлюс КАК БезСтрокКолонокПлюс
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мНормыВремени.СрезПоследних(
        |				&ДатаСметы,
        |				СтрокаТаблицы В
        |						(ВЫБРАТЬ
        |							БезСтрокКолонокПлюс.СсылкаНаСтроку
        |						ИЗ
        |							БезСтрокКолонокПлюс КАК БезСтрокКолонокПлюс)
        |					И КолонкаТаблицы = &ПустаяКолонкаТаблицы) КАК мНормыВремениСрезПоследних
        |		ПО БезСтрокКолонокПлюс.СсылкаНаСтроку = мНормыВремениСрезПоследних.СтрокаТаблицы
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	ТолькоКолонкиПлюс.СсылкаНаКолонку,
        |	ТолькоКолонкиПлюс.ПараметрКолонки,
        |	ТолькоКолонкиПлюс.ЗначениеКолонки,
        |	ТолькоКолонкиПлюс.СсылкаНаСтроку,
        |	NULL,
        |	NULL,
        |	ТолькоКолонкиПлюс.ПараметрСтрокиКоличество,
        |	ТолькоКолонкиПлюс.ЗначениеСтрокиКоличество,
        |	мНормыВремениСрезПоследних.НормаВремени,
        |	мНормыВремениСрезПоследних.НормаВремениНачальная,
        |	ТолькоКолонкиПлюс.НомерСтроки,
        |	ТолькоКолонкиПлюс.Процент
        |ИЗ
        |	ТолькоКолонкиПлюс КАК ТолькоКолонкиПлюс
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мНормыВремени.СрезПоследних(
        |				&ДатаСметы,
        |				КолонкаТаблицы В
        |						(ВЫБРАТЬ
        |							ТолькоКолонкиПлюс.СсылкаНаКолонку
        |						ИЗ
        |							ТолькоКолонкиПлюс КАК ТолькоКолонкиПлюс)
        |					И СтрокаТаблицы В
        |						(ВЫБРАТЬ
        |							ТолькоКолонкиПлюс.СсылкаНаСтроку
        |						ИЗ
        |							ТолькоКолонкиПлюс КАК ТолькоКолонкиПлюс)) КАК мНормыВремениСрезПоследних
        |		ПО ТолькоКолонкиПлюс.СсылкаНаСтроку = мНормыВремениСрезПоследних.СтрокаТаблицы
        |			И ТолькоКолонкиПлюс.СсылкаНаКолонку = мНормыВремениСрезПоследних.КолонкаТаблицы
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	NULL,
        |	NULL,
        |	NULL,
        |	СтрокиПлюс.СсылкаНаСтроку,
        |	СтрокиПлюс.ПараметрОбъектаВСтрокеДляУсловия,
        |	СтрокиПлюс.ЗначениеСтрокиУсловие,
        |	СтрокиПлюс.ПараметрОбъектаВСтрокеДляКоличества,
        |	СтрокиПлюс.ЗначениеСтрокиКоличество,
        |	мНормыВремениСрезПоследних.НормаВремени,
        |	мНормыВремениСрезПоследних.НормаВремениНачальная,
        |	СтрокиПлюс.НомерСтроки,
        |	СтрокиПлюс.Процент
        |ИЗ
        |	СтрокиПлюс КАК СтрокиПлюс
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мНормыВремени.СрезПоследних(
        |				&ДатаСметы,
        |				СтрокаТаблицы В
        |						(ВЫБРАТЬ
        |							СтрокиПлюс.СсылкаНаСтроку
        |						ИЗ
        |							СтрокиПлюс КАК СтрокиПлюс)
        |					И КолонкаТаблицы = &ПустаяКолонкаТаблицы) КАК мНормыВремениСрезПоследних
        |		ПО СтрокиПлюс.СсылкаНаСтроку = мНормыВремениСрезПоследних.СтрокаТаблицы
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |	СтрокиКолонкиПлюс.КолонкаТаблицы,
        |	СтрокиКолонкиПлюс.ПараметрКолонки,
        |	СтрокиКолонкиПлюс.ЗначениеКолонки,
        |	СтрокиКолонкиПлюс.СтрокаТаблицы,
        |	СтрокиКолонкиПлюс.ПараметрСтрокиУсловие,
        |	СтрокиКолонкиПлюс.ЗначениеСтрокиУсловие,
        |	СтрокиКолонкиПлюс.ПараметрСтрокиКоличество,
        |	СтрокиКолонкиПлюс.ЗначениеСтрокиКоличество,
        |	мНормыВремениСрезПоследних.НормаВремени,
        |	мНормыВремениСрезПоследних.НормаВремениНачальная,
        |	СтрокиКолонкиПлюс.НомерСтроки,
        |	СтрокиКолонкиПлюс.Процент
        |ИЗ
        |	СтрокиКолонкиПлюс КАК СтрокиКолонкиПлюс
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мНормыВремени.СрезПоследних(
        |				&ДатаСметы,
        |				СтрокаТаблицы В
        |						(ВЫБРАТЬ
        |							СтрокиКолонкиПлюс.СтрокаТаблицы
        |						ИЗ
        |							СтрокиКолонкиПлюс КАК СтрокиКолонкиПлюс)
        |					И КолонкаТаблицы В
        |						(ВЫБРАТЬ
        |							СтрокиКолонкиПлюс.КолонкаТаблицы
        |						ИЗ
        |							СтрокиКолонкиПлюс КАК СтрокиКолонкиПлюс)) КАК мНормыВремениСрезПоследних
        |		ПО СтрокиКолонкиПлюс.КолонкаТаблицы = мНормыВремениСрезПоследних.КолонкаТаблицы
        |			И СтрокиКолонкиПлюс.СтрокаТаблицы = мНормыВремениСрезПоследних.СтрокаТаблицы
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Общий.СсылкаНаКолонку КАК КолонкаТаблицы,
        |	Общий.ПараметрКолонки КАК ПараметрКолонки,
        |	ЕСТЬNULL(Общий.ЗначениеКолонки, 0) КАК ЗначениеКолонки,
        |	Общий.СсылкаНаСтроку КАК СтрокаТаблицы,
        |	Общий.ПараметрСтрокиУсловия КАК ПараметрСтрокиДляУсловия,
        |	ЕСТЬNULL(Общий.ЗначениеСтрокиУсловие, 0) КАК ЗначениеСтрокиДляУсловия,
        |	Общий.ПараметрСтрокиКоличество КАК ПараметрСтрокиДляКоличества,
        |	ЕСТЬNULL(Общий.ЗначениеСтрокиКоличество, 0) КАК ЗначениеСтрокиДляКоличества,
        |	ЕСТЬNULL(Общий.НормаВремени, 0) КАК НормаВремени,
        |	ЕСТЬNULL(Общий.НормаВремениНачальная, 0) КАК НормаВремениНачальная,
        |	ЕСТЬNULL(Цены.Цена, 0) КАК Цена,
        |	Общий.СсылкаНаСтроку.Владелец КАК ТаблицаНормВремени,
        |	Общий.СсылкаНаСтроку.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
        |	Общий.СсылкаНаСтроку.СтадияРабот КАК СтадияРабот,
        |	Общий.СсылкаНаСтроку.СсылкаНаСборник КАК СсылкаНаСборник,
        |	Общий.СсылкаНаСтроку.Коэффициент КАК Коэффициент,
        |	Общий.ПараметрСтрокиУсловия.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСтрокиДляУсловия,
        |	Общий.ПараметрСтрокиКоличество.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСтрокиДляКоличества,
        |	Общий.ПараметрКолонки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияКолонки,
        |	Общий.НомерСтроки КАК НомерСтроки,
        |	Общий.Процент КАК Процент
        |ИЗ
        |	Общий КАК Общий
        |		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
        |		ПО Общий.ПараметрСтрокиКоличество = Цены.ПараметрОбъекта
        |
        |УПОРЯДОЧИТЬ ПО
        |	НомерСтроки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ПараметрыОбъекта.ПараметрОбъекта,
        |	ПараметрыОбъекта.Значение
        |ИЗ
        |	ПараметрыОбъекта КАК ПараметрыОбъекта";

	
    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    Запрос.УстановитьПараметр("ДатаСметы", Объект.ДатаРасчетаСметы);
    Запрос.УстановитьПараметр("Карточка", Объект.КарточкаОбъектаРабот);
    Запрос.УстановитьПараметр("Рентабельность", Объект.Рентабельность);
    Запрос.УстановитьПараметр("ПустаяКолонкаТаблицы", Справочники.мКолонкиТаблиц.ПустаяСсылка());
    
    Результат = Запрос.ВыполнитьПакет();
  
	ТаблицаТарифыСтрок = Результат[3].Выгрузить();
	ТаблицаОбъемРабот = Результат[16].Выгрузить();
	ПараметрыОбъекта = Результат[17].Выгрузить();
    
    ТаблицаПримечаний = ПолучитьТаблицуПримечаний(ПараметрыОбъекта); // без полевых

    Объект.ОбъемРабот.Очистить();
    
    Объект.Итого = 0;
    
    Объект.Трассировка = "";
    ДобавитьСтрокуТрассировки("РАСЧЕТ СМЕТЫ "+Объект.НомерСметы+Символы.ПС);
    ДобавитьСтрокуТрассировки("  Индекс цен = "+Объект.ИндексЦен);
    
    Для каждого СтрТабл Из ТаблицаОбъемРабот Цикл
    
        СтрСметы = Объект.ОбъемРабот.Добавить();
        СтрСметы.Использовать = Истина;
        ЗаполнитьЗначенияСвойств(СтрСметы, СтрТабл);
        
        ДобавитьСтрокуТрассировки(""+Символы.ПС+СтрТабл.НомерСтроки+". "+СтрТабл.СтадияРабот);
        
        // Получение формулы расчета для текущей строки
        ПараметрыСтроки = РассчитатьСтрокуСметы(СтрТабл, ТаблицаТарифыСтрок, ТаблицаПримечаний);
        
        СтрСметы.РасчетСтоимости = ПараметрыСтроки.РасчетСтоимости;
        СтрСметы.СсылкаНаСборник = УбратьЛишниеЗапятые(ПараметрыСтроки.СсылкаНаСборник);
        СтрСметы.Стоимость = ПараметрыСтроки.Стоимость;
        СтрСметы.Продолжительность = ПараметрыСтроки.Продолжительность;
       
        Объект.Итого = Объект.Итого + СтрСметы.Стоимость;
	КонецЦикла; 
	
	//РассчитатьИтогиСметы();
    СтавкаНДСЧисло = Объект.СтавкаНДС.Ставка;
    Объект.Итого = Окр(Объект.Итого * Объект.ДоляОбъекта, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.НДС = Окр(Объект.Итого * СтавкаНДСЧисло / 100, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.КОплате = Объект.Итого + Объект.НДС;

    
	//Проверка Все ли стадии вошли в расчет сметы
	Для каждого Стадия Из Объект.СтадииРабот Цикл
		Если Не Стадия.Использовать Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура("СтадияРабот", Стадия.СтадияРабот); 
	    ИскСтроки = Объект.ОбъемРабот.НайтиСтроки(СтруктураОтбора);
		Если ИскСтроки.Количество() = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Стадия работ "+Стадия.НомерСтроки+" "+Стадия.СтадияРабот+" не вошла в расчет сметы!";
			//|Проверьте правильность заполнения карточки и настроки норм времени.";
			Сообщение.Сообщить(); 
			
			// Выясним, что не так
			// Проверка наличия Таблицы в стадии
			Если Не ЗначениеЗаполнено(Стадия.ТаблицаНормВремени) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не указана Таблица сборника в стадии работ!";
				Сообщение.Сообщить(); 
				Продолжить;
			КонецЕсли; 
			
			// Проверка параметра в колонках таблицы
			Если ЗначениеЗаполнено(Стадия.ТаблицаНормВремени.ПараметрОбъектаВКолонках) Тогда
				ПроверитьПараметр(Стадия.ТаблицаНормВремени.ПараметрОбъектаВКолонках, ПараметрыОбъекта);
			КонецЕсли; 
			
			// Проверка параметров в строках таблицы
			Если ЗначениеЗаполнено(Стадия.НомерСтрокиТаблицы) Тогда
				Отбор = Новый Структура("НомерСтрокиТаблицы", Стадия.НомерСтрокиТаблицы); 
				ВыборкаСтрок = Справочники.мСтрокиТаблиц.Выбрать(, Стадия.ТаблицаНормВремени, Отбор);
				Соответствия = Новый Соответствие;
				Пока ВыборкаСтрок.Следующий() Цикл
					ПроверитьПараметр(ВыборкаСтрок.ПараметрОбъектаВСтрокеДляКоличества, ПараметрыОбъекта, Соответствия);
					ПроверитьПараметр(ВыборкаСтрок.ПараметрОбъектаВСтрокеДляУсловия, ПараметрыОбъекта, Соответствия);
				КонецЦикла;
				
				//// Проверка тарифа
				//Отбор = Новый Структура("ТаблицаНормВремени, НомерСтрокиТаблицы", Стадия.ТаблицаНормВремени, Стадия.НомерСтрокиТаблицы);
				//ИскСтроки = ТаблицаТарифыСтрок.НайтиСтроки(Отбор);
				//Если ИскСтроки.Количество() = 0 Тогда
				//	Сообщение = Новый СообщениеПользователю;
				//	Сообщение.Текст = "Не указан тариф для табл. "+Стадия.ТаблицаНормВремени+" для строки "+Стадия.НомерСтрокиТаблицы+"!";
				//	Сообщение.Сообщить(); 
				//КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
    
КонецПроцедуры // ЗаполнитьОбъемРаботНаСервере()

&НаСервере
Процедура ПроверитьПараметр(ИскПараметр, ПараметрыОбъекта, Соответствия="") 
	Если ЗначениеЗаполнено(ИскПараметр) Тогда
		ИскСтрока = ПараметрыОбъекта.Найти(ИскПараметр, "ПараметрОбъекта"); 
		Если ИскСтрока = Неопределено ИЛИ Не ЗначениеЗаполнено(ИскСтрока.Значение) Тогда
			Если Соответствия = "" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Проверьте "+ИскПараметр+" в карточке!";
				Сообщение.Сообщить(); 
			Иначе
				БылоСообщение = Соответствия.Получить(ИскПараметр);
				Если БылоСообщение = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Проверьте "+ИскПараметр+" в карточке!";
					Сообщение.Сообщить(); 
					
					Соответствия.Вставить(ИскПараметр, ИскПараметр);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры 
&НаКлиенте
Процедура РассчитатьИтогиСметы()
	
	Объект.Итого = 0;
	Для каждого СтрСметы Из Объект.ОбъемРабот Цикл
		Если СтрСметы.Использовать Тогда
			Объект.Итого = Объект.Итого + СтрСметы.Стоимость;
		КонецЕсли; 
	КонецЦикла; 

    СтавкаНДСЧисло = ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
    Объект.Итого = Окр(Объект.Итого * Объект.ДоляОбъекта, ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.НДС = Окр(Объект.Итого * СтавкаНДСЧисло / 100, ЗнакОкр(Объект.ДатаРасчетаСметы));
    Объект.КОплате = Объект.Итого + Объект.НДС;

КонецПроцедуры // РассчитатьИтогиСметы()

&НаСервереБезКонтекста
Функция ЗнакОкр(Дата) Экспорт
	Если Дата < Дата(2016, 7, 1) Тогда
		Возврат 0;
	Иначе	
	    Возврат 2;
	КонецЕсли; 
КонецФункции // ЗнакОкр()


&НаСервереБезКонтекста
Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС)
	Возврат СтавкаНДС.Ставка;
КонецФункции // ПолучитьЗначениеСтавкиНДС()

&НаСервере
Функция УбратьЛишниеЗапятые(ТекстСтроки)
    СсылкаНаСборник = СтрЗаменить(ТекстСтроки, ", ,", ",");
    Если Прав(СсылкаНаСборник, 2) = ", " Тогда
        СсылкаНаСборник = Лев(СсылкаНаСборник, СтрДлина(СсылкаНаСборник)-2);
    КонецЕсли; 
    Возврат СсылкаНаСборник;	
КонецФункции

// Выводит значения параметров, используемых при выполнении расчета 
//
&НаСервере
Процедура ДобавитьСтрокуТрассировки(Текст)
    Если ФлагТрассировка Тогда
        Объект.Трассировка = Объект.Трассировка + Текст + Символы.ПС;
    КонецЕсли;
КонецПроцедуры // ДобавитьСтрокуТрассировки("СтадияРабот", СтрТабл)
 
// Получает список примечаний с детальной информацией для расчета
&НаСервере
Функция ПолучитьТаблицуПримечаний(ПараметрыОбъекта)
    
    МассивПримечаний = Новый Массив();
    Для каждого Примечание Из Объект.Примечания Цикл
    	Если Примечание.Использовать Тогда
        	МассивПримечаний.Добавить(Примечание.Примечание);
        КонецЕсли; 
    КонецЦикла; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мПримечанияНормВремени.Ссылка КАК Примечание,
        |   мПримечанияНормВремени.Владелец КАК СборникНормВремени,
        |   мПримечанияНормВремени.ДействуетНаВесьСборник,
        |   мПримечанияНормВремени.ПрименяетсяШкала,
        |   мПримечанияНормВремени.ПараметрОбъекта,
        |   мПримечанияНормВремени.Коэффициент,
        |   мПримечанияНормВремени.ИспользоватьКоэффициент,
        |   мПримечанияНормВремени.ИспользоватьКоличество,
        |   мПримечанияНормВремени.НормаВремени,
        |   мПримечанияНормВремени.СсылкаНаСборник,
        |   мПримечанияНормВремени.ДействуетТолькоНаПолевые,
        |   мПримечанияНормВремени.ИспользоватьПериодыДействия,
        |   мПримечанияНормВремени.НачалоДействия,
        |   мПримечанияНормВремени.ОкончаниеДействия,
        |   мПримечанияНормВремени.ДействуетДляЛинейныхОбъектов,
        |   0 КАК Значение,
        |   ЛОЖЬ КАК ЗначениеБулево,
        |   мПримечанияНормВремени.ШкалаПримечания.(
        |       Ссылка,
        |       НомерСтроки,
        |       НижняяГраницаДиапазона,
        |       ВерхняяГраницаДиапазона,
        |       ВариантРасчета,
        |       ДляПоследующих,
        |       Коэффициент,
        |       НачальноеЗначение,
        |       НормаВремени
        |   ),
        |   мПримечанияНормВремени.ТаблицыНормВремени.(
        |       Ссылка,
        |       НомерСтроки,
        |       ТаблицаНормВремени,
        |       НомерСтрокиТаблицы,
        |       СсылкаНаСборник,
        |       ПараметрОбъекта,
        |       0 КАК Значение,
        |       ЛОЖЬ КАК ЗначениеБулево
        |   )
        |ИЗ
        |   Справочник.мПримечанияНормВремени КАК мПримечанияНормВремени
        |ГДЕ
        |   мПримечанияНормВремени.Ссылка В(&МассивПримечаний)";

    Запрос.УстановитьПараметр("МассивПримечаний", МассивПримечаний);

    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    // Заполнение из карточки значений параметров примечания
    Для каждого Прим Из РезультатЗапроса Цикл
        // Если примечание действует на весь сборник, то анализировать таб часть ТаблицыНормВремени не надо 
        // Если заполнен параметр в шапке примечания - надо получить для него значение из карточки объекта
        Если Прим.ДействуетНаВесьСборник Тогда
            ЗначенияПараметра = ПолучитьЗначенияПараметраИзКарточки(Прим.ПараметрОбъекта, ПараметрыОбъекта);
            ЗаполнитьЗначенияСвойств(Прим, ЗначенияПараметра);
        Иначе
            Для каждого Пар Из Прим.ТаблицыНормВремени Цикл
                ЗначенияПараметра = ПолучитьЗначенияПараметраИзКарточки(Пар.ПараметрОбъекта, ПараметрыОбъекта);
                ЗаполнитьЗначенияСвойств(Пар, ЗначенияПараметра);
            КонецЦикла; 
        КонецЕсли; 
    КонецЦикла; 
    
    Возврат РезультатЗапроса;

КонецФункции // ПолучитьТаблицуПримечаний()

// Возвращает структуру значения параметра из карточки объекта
// Булево значение возвращается в ЗначениеБулево,
// Числовые просто в Значение
&НаСервере
Функция ПолучитьЗначенияПараметраИзКарточки(ПараметрОбъекта, ПараметрыОбъекта)
    
    СтруктураПараметра = Новый Структура("ЗначениеБулево, Значение", Ложь, 0);
    
    Если ЗначениеЗаполнено(ПараметрОбъекта) Тогда
        НайденнаяСтрока = ПараметрыОбъекта.Найти(ПараметрОбъекта, "ПараметрОбъекта");
        Если НайденнаяСтрока <> Неопределено Тогда
            Если ТипЗнч(НайденнаяСтрока.Значение) = Тип("Булево") Тогда
                СтруктураПараметра.Вставить("ЗначениеБулево", НайденнаяСтрока.Значение);
            Иначе
                СтруктураПараметра.Вставить("Значение", НайденнаяСтрока.Значение);
            КонецЕсли; 
        КонецЕсли;
    КонецЕсли; 
    
    Возврат СтруктураПараметра;
КонецФункции

// Возвращает рассчитанные параметры строки 
&НаСервере
Функция РассчитатьСтрокуСметыСЦеной(Выборка, ПараметрыСтроки)
	// Контроль нулевой цены
	Если Выборка.Цена = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдена цена для стадии работ " + Выборка.СтадияРабот+" Стоимость не посчитана.";
		Сообщение.Сообщить(); 	
	КонецЕсли; 
	
	Если ТипЗнч(Выборка.ЗначениеСтрокиДляКоличества) = Тип("Булево") Тогда
		Если Выборка.ЗначениеСтрокиДляКоличества Тогда
			Стоимость = Выборка.Цена;
			ДобавитьСтрокуТрассировки("  Стоимость = "+Стоимость);
		Иначе
			Стоимость = 0;
			Если ЗначениеЗаполнено(Выборка.ПараметрСтрокиДляУсловия) Тогда
				ПараметрСтроки = Выборка.ПараметрСтрокиДляУсловия;
			Иначе
				ПараметрСтроки = Выборка.ПараметрСтрокиДляКоличества;
			КонецЕсли; 
			ДобавитьСтрокуТрассировки("  Стадия работ не используется, т.к. "+ПараметрСтроки + " = Нет");
		КонецЕсли; 
		СтрокаСтоимость = Стоимость;
		
	Иначе
		// параметр - числовой
		Если Выборка.СтрокаТаблицы.ИспользоватьКоличество Тогда
			// Цену умножить на количество
			Стоимость = Выборка.Цена * Выборка.ЗначениеСтрокиДляКоличества;
			СтрокаСтоимость = ""+Выборка.Цена + "*" + Выборка.ЗначениеСтрокиДляКоличества;
			ДобавитьСтрокуТрассировки("  Стоимость = "+СтрокаСтоимость);
			
			// Контроль значения параметра для количества
			Если Выборка.ЗначениеСтрокиДляКоличества = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено количество для стадии работ " + Выборка.СтадияРабот +"!
				|Проверьте заполнение параметра " + Выборка.ПараметрСтрокиДляКоличества + " в карточке. Стоимость не посчитана.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
		Иначе
			// просто берем Цены
			Стоимость = Выборка.Цена;
			СтрокаСтоимость = Стоимость;
			ДобавитьСтрокуТрассировки("  Стоимость = "+Стоимость);
		КонецЕсли; 
	КонецЕсли; 
	
	ПараметрыСтроки.Вставить("РасчетСтоимости", СтрокаСтоимость);
	ПараметрыСтроки.Вставить("Стоимость", Окр(Стоимость, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы)));
	
	Возврат ПараметрыСтроки;
КонецФункции // РассчитатьСтрокуСметыСЦеной(Выборка)
 
&НаСервере
Функция РассчитатьСтрокуСметы(Выборка, ТаблицаТарифыСтрок, ТаблицаПримечаний)
    ПараметрыСтроки = Новый Структура("РасчетСтоимости, СсылкаНаСборник, Стоимость, Продолжительность", "", Выборка.СсылкаНаСборник, 0, 0); 
    
    Продолжительность = 0;
    СсылкаНаСборник = Выборка.СсылкаНаСборник;
    
    Если Выборка.СтрокаТаблицы.ИспользоватьЦены Тогда
        // Получать Норму времени не надо
        // Определять примечания не надо
		РассчитатьСтрокуСметыСЦеной(Выборка, ПараметрыСтроки);
		
		Возврат ПараметрыСтроки;
		
    КонецЕсли; 
    
    // Получение нормо-времени
    ПараметрыНормаВремени = ПолучитьПараметрыНормаВремени(Выборка, ТаблицаПримечаний, СсылкаНаСборник);
    
    СтрокаИтоговыйТариф = ПараметрыНормаВремени.СтрокаНормаВремени;
    ИтоговыйТариф = ПараметрыНормаВремени.НормаВремени;
    
    ПродолжительностьНормаВремени = ИтоговыйТариф;
    ПродолжительностьПолевых = 1;
    ПродолжительностьКамеральных = 1;
   
    // Получение тарифа
    Отбор = Новый Структура("ТаблицаНормВремени, НомерСтрокиТаблицы", Выборка.ТаблицаНормВремени, Выборка.НомерСтрокиТаблицы);
    СтрокиТарифа = ТаблицаТарифыСтрок.НайтиСтроки(Отбор);
    
    ТарифПолевых = 0;
    ТарифКамеральных = 0;
    СтрокаТарифПолевых = "";
    СтрокаТарифКамеральных = "";
    ПолевыхЧеловек = 0;
    КамеральныхЧеловек = 0;
    ПроцентПолевых = 0;
    ПроцентКамеральных = 0;
    
    КоличествоТарифов = 0;
    
    ЕстьПолевые = Ложь;
    ЕстьКамеральные = Ложь;
    
    Для каждого Тариф Из СтрокиТарифа Цикл
        Если Тариф.ПроцентПолевых > 0 Тогда
            _ТарифПолевых = Окр(Тариф.ТарифПолевых, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
            _СтрокаТарифПолевых = ""+Формат(_ТарифПолевых,"ЧГ=0");
            ПолевыхЧеловек = Тариф.КоличествоЧеловек;
            ПроцентПолевых = Тариф.ПроцентПолевых;
            КоличествоТарифов = КоличествоТарифов + 1;
            ЕстьПолевые = Истина;
          
            ДобавитьСтрокуТрассировки("  Тариф полевых = "+_ТарифПолевых+", чел. = "+ПолевыхЧеловек+", "+ПроцентПолевых+"%");
            
            //   Когда есть полевые и коэффициенты на них - то тариф надо расшифровать
            //   из примечаний выбираем только те, которые относятся к полевым работам,
            //   остальные будут учтены позже
                
            // Проверка коэфф. полевых примечаний
            Для каждого СтрПрим Из ТаблицаПримечаний Цикл
                Примечание = СтрПрим.Примечание;
                Если ПримечаниеДействуетТолькоНаПолевые(Примечание, Объект.ДатаРасчетаСметы) Тогда
                    СтруктураПримечания = ПримечаниеДействуетНаСтроку(СтрПрим, Выборка, ПроцентПолевых);
                    Если СтруктураПримечания.Действует Тогда
                        ПолучитьПараметрыПримечания(СтрПрим, Выборка, _СтрокаТарифПолевых, _ТарифПолевых, СсылкаНаСборник, ПродолжительностьПолевых, СтруктураПримечания);
                    КонецЕсли; 
                КонецЕсли;
            КонецЦикла;
            
            // Проверка численности полевых исполнителей 
            Если ПолевыхЧеловек > 1 Тогда
                _СтрокаТарифПолевых = _СтрокаТарифПолевых + "*" + ПолевыхЧеловек;
                _ТарифПолевых = _ТарифПолевых * ПолевыхЧеловек;
                ПродолжительностьПолевых = ПродолжительностьПолевых*ПолевыхЧеловек;
            КонецЕсли; 
            
            // Учет процентов полевых
            Если ПроцентПолевых < 100 Тогда
                _СтрокаТарифПолевых = _СтрокаТарифПолевых + "*" + ПроцентПолевых/100;
                _ТарифПолевых = Окр(_ТарифПолевых * ПроцентПолевых / 100, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
                ПродолжительностьПолевых = Окр(ПродолжительностьПолевых * ПроцентПолевых / 100, 3);
            КонецЕсли; 
            
            // Накапливаем полевые тарифы
            Если ЗначениеЗаполнено(СтрокаТарифПолевых) Тогда
                СтрокаТарифПолевых = СтрокаТарифПолевых + "+" + _СтрокаТарифПолевых;
            Иначе
                СтрокаТарифПолевых = _СтрокаТарифПолевых;
            КонецЕсли;
            ТарифПолевых = ТарифПолевых + _ТарифПолевых;
 			
			// Контроль ТарифПолевых
			Если _ТарифПолевых = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Тариф полевых = 0 для стадии работ " + Выборка.СтадияРабот +"!
				|Проверьте наличие тарифа для полевых работ.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
       КонецЕсли; 
        
        Если Тариф.ПроцентКамеральных > 0 Тогда
            _ТарифКамеральных = Окр(Тариф.ТарифКамеральных, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
            _СтрокаТарифКамеральных = ""+Формат(_ТарифКамеральных,"ЧГ=0");
            КамеральныхЧеловек = Тариф.КоличествоЧеловек;
            ПроцентКамеральных = Тариф.ПроцентКамеральных;
            КоличествоТарифов = КоличествоТарифов + 1;
            ЕстьКамеральные = Истина;
            
            ДобавитьСтрокуТрассировки("  Тариф камеральных = "+_ТарифКамеральных+", чел. = "+КамеральныхЧеловек+", "+ПроцентКамеральных+"%");
            
            // Проверка численности камеральных исполнителей
            Если КамеральныхЧеловек > 1 Тогда
                _СтрокаТарифКамеральных = _СтрокаТарифКамеральных + "*" + КамеральныхЧеловек;
                _ТарифКамеральных = _ТарифКамеральных * КамеральныхЧеловек;
                ПродолжительностьКамеральных = ПродолжительностьКамеральных*КамеральныхЧеловек;
            КонецЕсли;
            
            // Учет процентов
            Если ПроцентКамеральных < 100 Тогда
                _СтрокаТарифКамеральных = _СтрокаТарифКамеральных + "*" + ПроцентКамеральных/100;
                _ТарифКамеральных = Окр(_ТарифКамеральных * ПроцентКамеральных / 100, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
                ПродолжительностьКамеральных = Окр(ПродолжительностьКамеральных * ПроцентКамеральных / 100, 3);
            КонецЕсли; 
            
            // Накапливаем Камеральные тарифы
            Если ЗначениеЗаполнено(СтрокаТарифКамеральных) Тогда
                СтрокаТарифКамеральных = СтрокаТарифКамеральных + "+" + _СтрокаТарифКамеральных;
            Иначе
                СтрокаТарифКамеральных = _СтрокаТарифКамеральных;
            КонецЕсли;
            ТарифКамеральных = ТарифКамеральных + _ТарифКамеральных;
			
 			// Контроль ТарифКамеральных
			Если _ТарифКамеральных = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Тариф камеральных работ = 0 для стадии " + Выборка.СтадияРабот +"!
				|Проверьте наличие тарифа камеральных работ.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
      КонецЕсли; 
       
    КонецЦикла; 
    
    // Итоговый тариф
    Если ЕстьПолевые И ЕстьКамеральные Тогда
        // Тарифы складываем
        СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*("+СтрокаТарифПолевых + "+" + СтрокаТарифКамеральных +")";
        ИтоговыйТариф = ИтоговыйТариф *(ТарифПолевых + ТарифКамеральных);
        Продолжительность = ПродолжительностьНормаВремени *(ПродолжительностьПолевых + ПродолжительностьКамеральных);
        
    ИначеЕсли ЕстьПолевые Тогда
        Если КоличествоТарифов > 1 Тогда
            // Вывод со скобками
            СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*(" + СтрокаТарифПолевых+")";
            ИтоговыйТариф = ИтоговыйТариф * ТарифПолевых;
            Продолжительность = ПродолжительностьНормаВремени * ПродолжительностьПолевых;
        Иначе
            // Скобки не нужны
            СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*" + СтрокаТарифПолевых;
            ИтоговыйТариф = ИтоговыйТариф * ТарифПолевых;
            Продолжительность = ПродолжительностьНормаВремени * ПродолжительностьПолевых;
        КонецЕсли; 
        
    ИначеЕсли ЕстьКамеральные Тогда
        Если КоличествоТарифов > 1 Тогда
            // Вывод со скобками
            СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*("  + СтрокаТарифКамеральных+")";
            ИтоговыйТариф = ИтоговыйТариф * ТарифКамеральных;
            Продолжительность = ПродолжительностьНормаВремени * ПродолжительностьКамеральных;
        Иначе
            // Скобки не нужны
            СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*"  + СтрокаТарифКамеральных;
            ИтоговыйТариф = ИтоговыйТариф * ТарифКамеральных;
            Продолжительность = ПродолжительностьНормаВремени * ПродолжительностьКамеральных;
        КонецЕсли; 
    КонецЕсли; 
        
    // Индекс цен
	// Контроль Индекс цен
	Если Объект.ИндексЦен = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Индекс цен = 0!
		|Укажите индекс цен в смете.";
		Сообщение.Сообщить(); 	
	КонецЕсли; 
    СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*" + Объект.ИндексЦен;
    ИтоговыйТариф = ИтоговыйТариф * Объект.ИндексЦен;
    
   // Примечания 
    //   из примечаний выбираем только те, которые не относятся к полевым работам,
    //   и в которых используется коэффициент
	КолвоОкопкиМежевыхЗнаков = 0;
    Для каждого СтрПрим Из ТаблицаПримечаний Цикл
        Если СтрПрим.ИспользоватьКоэффициент Тогда
            _ПроцентПолевых = 0;
            СтруктураПримечания = ПримечаниеДействуетНаСтроку(СтрПрим, Выборка, _ПроцентПолевых);
                        
			Если СтруктураПримечания.Действует Тогда
				Если СтруктураПримечания.ПараметрПримечания.ИмяПредопределенныхДанных = "ОкопкаМежевыхЗнаков" Тогда
					КолвоОкопкиМежевыхЗнаков = СтруктураПримечания.ЗначениеПримечания;
					СтрокаТарифа = "";
					ЗначИтоговыйТариф = 1;
					ПолучитьПараметрыПримечания(СтрПрим, Выборка, СтрокаТарифа, ЗначИтоговыйТариф, СсылкаНаСборник, Продолжительность, СтруктураПримечания);
				Иначе
					ПолучитьПараметрыПримечания(СтрПрим, Выборка, СтрокаИтоговыйТариф, ИтоговыйТариф, СсылкаНаСборник, Продолжительность, СтруктураПримечания);
				КонецЕсли; 
            КонецЕсли;
        КонецЕсли; 
    КонецЦикла; // Примечания
    
    // Количество единиц измерения
    Если Выборка.СтрокаТаблицы.ИспользоватьКоличество Тогда
		Если Выборка.ЗначениеСтрокиДляКоличества > 0 Тогда
			Если Выборка.ПараметрСтрокиДляКоличества.ИмяПредопределенныхДанных = "ПостановкаМежевыхЗнаков"
				И КолвоОкопкиМежевыхЗнаков > 0 Тогда
				// Коэф примечания нужно взять только для КолвоОкопкиМежевыхЗнаков, 
				// и уменьшить общее колво для строки
			    КоличествоВСтроке = Выборка.ЗначениеСтрокиДляКоличества - КолвоОкопкиМежевыхЗнаков;
				СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*(" + КоличествоВСтроке + "+" + КолвоОкопкиМежевыхЗнаков+СтрокаТарифа+")";
				ИтоговыйТариф = ИтоговыйТариф * (КоличествоВСтроке + КолвоОкопкиМежевыхЗнаков * ЗначИтоговыйТариф); 
				Продолжительность = Продолжительность * КоличествоВСтроке; 
				ДобавитьСтрокуТрассировки("  Количество = "+КоличествоВСтроке +" ("+Выборка.СтрокаТаблицы+") с учетом прим. "+СтруктураПримечания.ПараметрПримечания);
			Иначе
				СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*" + Выборка.ЗначениеСтрокиДляКоличества;
				ИтоговыйТариф = ИтоговыйТариф * Выборка.ЗначениеСтрокиДляКоличества; 
				Продолжительность = Продолжительность * Выборка.ЗначениеСтрокиДляКоличества; 
				ДобавитьСтрокуТрассировки("  Количество = "+Выборка.ЗначениеСтрокиДляКоличества +" ("+Выборка.СтрокаТаблицы+")");
			КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
    
    // Процент по Стадии работ
    Если 0 < Выборка.Процент И Выборка.Процент < 100 Тогда
        КоэфСтадииРабот = Выборка.Процент / 100;
        СтрокаИтоговыйТариф = СтрокаИтоговыйТариф + "*" + КоэфСтадииРабот;
        ИтоговыйТариф = ИтоговыйТариф * КоэфСтадииРабот; 
        Продолжительность = Продолжительность * КоэфСтадииРабот; 
        ДобавитьСтрокуТрассировки("  Кф. стадии работ = " + КоэфСтадииРабот);
    КонецЕсли; 
    
    ПараметрыСтроки.Вставить("РасчетСтоимости", СтрокаИтоговыйТариф);
    ПараметрыСтроки.Вставить("Стоимость", Окр(ИтоговыйТариф, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы)));
    ПараметрыСтроки.Вставить("СсылкаНаСборник", СсылкаНаСборник);
    ПараметрыСтроки.Вставить("Продолжительность", Продолжительность);
    
    Возврат ПараметрыСтроки;
КонецФункции // РассчитатьСтрокуСметы()

//  в процессе изменяет параметры ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность
//
//  СтрПрим - строка ТаблицыЗначений, соответствует справочнику мПримечанияНормВремени
//  Выборка - строка ТаблицыЗначений, содержит всю информацию, необходимую для заполнения строки сметы
//
&НаСервере
Функция ПолучитьПараметрыПримечания(СтрПрим, Выборка, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность, СтруктураПримечания)
    
    ИспользоватьКоэффициент = СтрПрим.ИспользоватьКоэффициент;
    
    Если СтрПрим.ПрименяетсяШкала Тогда
        ОбработатьШкалуПримечания(СтрПрим, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность);    
    Иначе	
        ОбработатьПримечание(СтрПрим, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность);    
    КонецЕсли; 
    
 КонецФункции

&НаСервере
Функция ОбработатьШкалуПримечания(СтрПрим, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность)
    ШкалаПримечания = СтрПрим.ШкалаПримечания;
	
	// Контроль наличия шкалы
	Если ШкалаПримечания.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдена шкала условий для примечания " + СтрПрим.Примечание +"!
		|Проверьте заполнение параметра " + СтрПрим.ПараметрСтрокиДляКоличества + " в карточке. Стоимость не посчитана.";
		Сообщение.Сообщить(); 	
	КонецЕсли; 
	
    Для каждого СтрШкалы Из ШкалаПримечания Цикл
        Если СтрШкалы.ВариантРасчета = Перечисления.ВариантыРасчетов.Интервал Тогда
            
            ОбработатьШкалуВариантИнтервал(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность);
            
        ИначеЕсли СтрШкалы.ВариантРасчета = Перечисления.ВариантыРасчетов.Сверх Тогда
            
            ОбработатьШкалуВариантСверх(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность);
            
        ИначеЕсли СтрШкалы.ВариантРасчета = Перечисления.ВариантыРасчетов.КаждыеПоследующие Тогда
            
            ОбработатьШкалуВариантКаждыеПоследующие(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность);
            
        ИначеЕсли СтрШкалы.ВариантРасчета = Перечисления.ВариантыРасчетов.КаждыеПоследующиеВИнтервале Тогда
            
            ОбработатьШкалуВариантКаждыеПоследующиеВИнтервале(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность);
            
        КонецЕсли;     
    КонецЦикла; 
КонецФункции

&НаСервере
Процедура ОбработатьШкалуВариантИнтервал(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность)
    ЗначениеПараметра = СтруктураПримечания.ЗначениеПримечания;
    Если СтрШкалы.НижняяГраницаДиапазона <= ЗначениеПараметра И ЗначениеПараметра < СтрШкалы.ВерхняяГраницаДиапазона Тогда
		Если ИспользоватьКоэффициент Тогда
			Если СтрПрим.ДействуетДляЛинейныхОбъектов и НЕ ОбъектЛинейный() Тогда
				// Проверка действия на линейные объекты
				Возврат;
			КонецЕсли; 
            Если СтрШкалы.Коэффициент <> 1 Тогда
                ФормулаРасчета = ФормулаРасчета + "*" + СтрШкалы.Коэффициент;
                ЗначениеРасчета = ЗначениеРасчета * СтрШкалы.Коэффициент; 
                Продолжительность = Продолжительность * СтрШкалы.Коэффициент; 
                
                ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Кф = "+СтрШкалы.Коэффициент+" ("+СтрПрим.Примечание+")");
                // Получение ссылок на сборник цен надо добавлять только из примечаний
                СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
				
				// Контроль Коэффициент
				Если СтрШкалы.Коэффициент = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Коэффициент = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте коэффициент в примечании.";
					Сообщение.Сообщить(); 	
				КонецЕсли; 
		
            КонецЕсли; 
        Иначе
            Если СтрШкалы.НормаВремени <> 0 Тогда
                ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрШкалы.НормаВремени + ")";
                ЗначениеРасчета = ЗначениеРасчета + СтрШкалы.НормаВремени; 
                
                ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Норма вр. = "+СтрШкалы.НормаВремени+" ("+СтрПрим.Примечание+")");
                // Получение ссылок на сборник цен надо добавлять только из примечаний
                СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
			КонецЕсли;
			
			// Контроль Нормы времени
			Если СтрШкалы.НормаВремени = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Норма времени = 0 для примечания " + СтрПрим.Примечание +"!
				|Проверьте норму времени в примечании.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
        КонецЕсли;
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьШкалуВариантСверх(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность)
    ЗначениеПараметра = СтруктураПримечания.ЗначениеПримечания;
    Если СтрШкалы.НижняяГраницаДиапазона <= ЗначениеПараметра Тогда
        Если ИспользоватьКоэффициент Тогда
			
			Если СтрПрим.ДействуетДляЛинейныхОбъектов и НЕ ОбъектЛинейный() Тогда
				// Проверка действия на линейные объекты
				Возврат;
			КонецЕсли; 
			
            ФормулаРасчета = ФормулаРасчета + "*" + СтрШкалы.Коэффициент;
            ЗначениеРасчета = ЗначениеРасчета * СтрШкалы.Коэффициент; 
            Продолжительность = Продолжительность * СтрШкалы.Коэффициент; 
           
            ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Кф = "+СтрШкалы.Коэффициент+" ("+СтрПрим.Примечание+")");
			
			// Контроль Коэффициент
			Если СтрШкалы.Коэффициент = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Коэффициент = 0 для примечания " + СтрПрим.Примечание +"!
				|Проверьте коэффициент в примечании.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
		
        Иначе
            ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрШкалы.НормаВремени + ")";
            ЗначениеРасчета = ЗначениеРасчета + СтрШкалы.НормаВремени; 
            Продолжительность = Продолжительность + СтрШкалы.Коэффициент; 
            
            ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Норма вр. = "+СтрШкалы.НормаВремени+" ("+СтрПрим.Примечание+")");
			
			// Контроль Нормы времени
			Если СтрШкалы.НормаВремени = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Норма времени = 0 для примечания " + СтрПрим.Примечание +"!
				|Проверьте норму времени в примечании.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
        КонецЕсли;
        // Получение ссылок на сборник цен надо добавлять только из примечаний
        СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьШкалуВариантКаждыеПоследующие(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность)
    ЗначениеПараметра = СтруктураПримечания.ЗначениеПримечания;
    Если СтрШкалы.НижняяГраницаДиапазона <= ЗначениеПараметра Тогда
        КоличествоИнтервалов = ПолучитьКоличествоИнтервалов(ЗначениеПараметра, СтрШкалы.НижняяГраницаДиапазона, СтрШкалы.ДляПоследующих);                       
        
		Если КоличествоИнтервалов > 0 Тогда
			Если ИспользоватьКоэффициент Тогда
				Если СтрПрим.ДействуетДляЛинейныхОбъектов и НЕ ОбъектЛинейный() Тогда
					// Проверка действия на линейные объекты
					Возврат;
				КонецЕсли; 
			
				СтрокаИнтервалов = ?(КоличествоИнтервалов > 1, "("+СтрШкалы.НачальноеЗначение + "+" + КоличествоИнтервалов + "*" + СтрШкалы.Коэффициент + ")", 
				"("+СтрШкалы.НачальноеЗначение + "+" + СтрШкалы.Коэффициент + ")");
				
				ФормулаРасчета = ФормулаРасчета + "*" + СтрокаИнтервалов;
				ЗначениеРасчета = ЗначениеРасчета * (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.Коэффициент); 
                Продолжительность = Продолжительность * (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.Коэффициент); 
				
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Кф = "+СтрШкалы.Коэффициент+" ("+СтрПрим.Примечание+")");
				
				// Контроль Коэффициент
				Если СтрШкалы.Коэффициент = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Коэффициент = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте коэффициент в примечании.";
					Сообщение.Сообщить(); 	
				КонецЕсли; 
		
			Иначе
				СтрокаИнтервалов = ?(КоличествоИнтервалов > 1, "("+СтрШкалы.НачальноеЗначение + "+" + КоличествоИнтервалов + "*" + СтрШкалы.НормаВремени + ")", 
				"("+СтрШкалы.НачальноеЗначение + "+" + СтрШкалы.НормаВремени + ")");
				ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрокаИнтервалов + ")";
				ЗначениеРасчета = ЗначениеРасчета + (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.НормаВремени); 
				Продолжительность = Продолжительность + (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.НормаВремени); 
				
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Норма вр. = "+СтрШкалы.НормаВремени+" ("+СтрПрим.Примечание+")");
				
				// Контроль Нормы времени
				Если СтрШкалы.НормаВремени = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Норма времени = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте норму времени в примечании.";
					Сообщение.Сообщить(); 	
				КонецЕсли; 
			КонецЕсли;
			
			// Получение ссылок на сборник цен надо добавлять только из примечаний
			СсылкаНаСборник = СсылкаНаСборник + ", " + СтрПрим.СсылкаНаСборник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьШкалуВариантКаждыеПоследующиеВИнтервале(СтрПрим, СтрШкалы, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, ИспользоватьКоэффициент, Продолжительность)
    ЗначениеПараметра = СтруктураПримечания.ЗначениеПримечания;
    // расчет интервалов по строке 
	Если СтрШкалы.НижняяГраницаДиапазона <= ЗначениеПараметра И ЗначениеПараметра < СтрШкалы.ВерхняяГраницаДиапазона Тогда
		КоличествоИнтервалов = ПолучитьКоличествоИнтервалов(ЗначениеПараметра, СтрШкалы.НижняяГраницаДиапазона, СтрШкалы.ДляПоследующих);                       
		Если КоличествоИнтервалов > 0 Тогда
			// Для данного условия в строках коэффициенты умножаются, а в примечаниях - складываются
			Если ИспользоватьКоэффициент Тогда
				Если СтрПрим.ДействуетДляЛинейныхОбъектов и НЕ ОбъектЛинейный() Тогда
					// Проверка действия на линейные объекты
					Возврат;
				КонецЕсли; 
			
				СтрокаИнтервалов = ?(КоличествоИнтервалов > 1, "("+СтрШкалы.НачальноеЗначение + "+" + КоличествоИнтервалов + "*" + СтрШкалы.Коэффициент + ")", 
				"("+СтрШкалы.НачальноеЗначение + "+" + СтрШкалы.Коэффициент + ")");
				
				ФормулаРасчета = ФормулаРасчета + "*" + СтрокаИнтервалов;
				ЗначениеРасчета = ЗначениеРасчета * (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.Коэффициент); 
				Продолжительность = Продолжительность * (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.Коэффициент); 
				
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Кф = "+СтрШкалы.Коэффициент+" ("+СтрПрим.Примечание+")");
				
				// Контроль Коэффициент
				Если СтрШкалы.Коэффициент = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Коэффициент = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте коэффициент в примечании.";
					Сообщение.Сообщить(); 	
				КонецЕсли; 
		
			Иначе
				СтрокаИнтервалов = ?(КоличествоИнтервалов > 1, "("+СтрШкалы.НачальноеЗначение + "+" + КоличествоИнтервалов + "*" + СтрШкалы.НормаВремени + ")", 
				"("+СтрШкалы.НачальноеЗначение + "+" + СтрШкалы.НормаВремени + ")");
				ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрокаИнтервалов + ")";
				ЗначениеРасчета = ЗначениеРасчета + (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.НормаВремени); 
				Продолжительность = Продолжительность + (СтрШкалы.НачальноеЗначение + КоличествоИнтервалов * СтрШкалы.НормаВремени); 
				
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник + ", Норма вр. = "+СтрШкалы.НормаВремени+" ("+СтрПрим.Примечание+")");
				
				// Контроль Нормы времени
				Если СтрШкалы.НормаВремени = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Норма времени = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте норму времени в примечании.";
					Сообщение.Сообщить(); 	
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьПримечание(СтрПрим, СтруктураПримечания, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность)
    Параметр = СтруктураПримечания.ПараметрПримечания;
    // Возможно использование ПараметрОбъекта типа Булево
    Если ЗначениеЗаполнено(Параметр) Тогда
        ПримечаниеИспользовать = Ложь;
        Если Тип(Параметр.ТипЗначения) = Тип("Булево") Тогда
            // Истина - примечание применяем
            ПримечаниеИспользовать = СтруктураПримечания.ЗначениеПримечания;
			
        ИначеЕсли Тип(Параметр.ТипЗначения) = Тип("Число") Тогда
            // Примечание зависит от значения параметра объекта
            ПримечаниеИспользовать = ?(СтруктураПримечания.ЗначениеПримечания = 0, Ложь, Истина);
        КонецЕсли;
        
        Если ПримечаниеИспользовать Тогда
            ПолучитьРезультатПримечания(СтрПрим, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность, СтруктураПримечания);
        КонецЕсли; 
        
    Иначе
        // Примечание не зависит от значения параметра объекта
        ПолучитьРезультатПримечания(СтрПрим, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность, СтруктураПримечания);
    КонецЕсли; 
КонецФункции

&НаСервере
Процедура ПолучитьРезультатПримечания(СтрПрим, ФормулаРасчета, ЗначениеРасчета, СсылкаНаСборник, Продолжительность, СтруктураПримечания)

	Если СтрПрим.ИспользоватьКоэффициент Тогда
        // Коэффициент умножаем
        Если (СтрПрим.Коэффициент <> 1)и(СтрПрим.Коэффициент <> 0) Тогда
            ФормулаРасчета = ФормулаРасчета + "*" + СтрПрим.Коэффициент;
            ЗначениеРасчета = ЗначениеРасчета * СтрПрим.Коэффициент;
            Продолжительность = Продолжительность * СтрПрим.Коэффициент;
            ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник+", Кф = "+СтрПрим.Коэффициент+" ("+СтрПрим.Примечание+")");
            // Получение ссылок на сборник цен надо добавлять только из примечаний
            СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
		КонецЕсли; 
		
		// Контроль Коэффициент
		Если СтрПрим.Коэффициент = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Коэффициент = 0 для примечания " + СтрПрим.Примечание +"!
			|Проверьте коэффициент в примечании.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
		
    Иначе
        // НормаВремени плюсуем
		Если СтрПрим.НормаВремени <> 0 Тогда
			Если СтрПрим.ИспользоватьКоличество Тогда
				ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрПрим.НормаВремени + "*" + СтруктураПримечания.ЗначениеПримечания+ ")";
				ЗначениеРасчета = ЗначениеРасчета + СтрПрим.НормаВремени * СтруктураПримечания.ЗначениеПримечания;
				Продолжительность = Продолжительность + СтрПрим.НормаВремени * СтруктураПримечания.ЗначениеПримечания;
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник+", Норма вр. = "+СтрПрим.НормаВремени+" ("+СтрПрим.Примечание+"), Количество = " + СтруктураПримечания.ЗначениеПримечания);
				// Получение ссылок на сборник цен надо добавлять только из примечаний
				СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
				
				// Контроль количества по примечанию
				Если СтруктураПримечания.ЗначениеПримечания = 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Количество = 0 для примечания " + СтрПрим.Примечание +"!
					|Проверьте количество в карточке объекта для " + СтруктураПримечания.ПараметрПримечания;
					Сообщение.Сообщить(); 	
				КонецЕсли; 
				
			Иначе
				ФормулаРасчета = "(" + ФормулаРасчета + "+" + СтрПрим.НормаВремени + ")";
				ЗначениеРасчета = ЗначениеРасчета + СтрПрим.НормаВремени;
				Продолжительность = Продолжительность + СтрПрим.НормаВремени;
				ДобавитьСтрокуТрассировки("    Прим. = "+СтруктураПримечания.СсылкаНаСборник+", Норма вр. = "+СтрПрим.НормаВремени+" ("+СтрПрим.Примечание+")");
				// Получение ссылок на сборник цен надо добавлять только из примечаний
				СсылкаНаСборник = СсылкаНаСборник + ", " + СтруктураПримечания.СсылкаНаСборник;
			КонецЕсли;
		Иначе
			// Контроль НормаВремени
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Норма времени = 0 для примечания " + СтрПрим.Примечание +"!
			|Проверьте норму времени в примечании.";
			Сообщение.Сообщить(); 	
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

// Возвращает таблицуЗначений: Параметр и Значение Либо Неопределено
// //Возвращает числовое значение необходимого параметра для расчета в примечании
//
// 
// ЗначениеПараметра может быть типа Булево, либо Число - если Параметр объекта в примечании указан
// или Неопределено - Если Параметра нет в принципе
//
&НаСервере
Функция ПолучитьТзЗначенийПараметровДляПримечания(СтрПрим, Выборка, НаЧтоДействует)
    
    // Получим ПараметрОбъекта из примечания
    СписокПараметров = Новый СписокЗначений;
    
    Если СтрПрим.ДействуетНаВесьСборник Тогда
        Если ЗначениеЗаполнено(СтрПрим.ПараметрОбъекта) Тогда
            СписокПараметров.Добавить(СтрПрим.ПараметрОбъекта);
        КонецЕсли; 
    Иначе
        // ищем в таблицах действия, строки не контролируем
        Отбор = Новый Структура("ТаблицаНормВремени", Выборка.ТаблицаНормВремени);
        
        ТаблицаДействия = СтрПрим.ТаблицыНормВремени.НайтиСтроки(Отбор);
        
        Если ТаблицаДействия.Количество() > 0 Тогда
            Для каждого Таб Из ТаблицаДействия Цикл
                Если ЗначениеЗаполнено(Таб.ПараметрОбъекта) Тогда
                    СписокПараметров.Добавить(Таб.ПараметрОбъекта);
                КонецЕсли; 
            КонецЦикла; 
        КонецЕсли; 
    КонецЕсли; 
    
    Если СписокПараметров.Количество()=0 Тогда
        // параметров нет - значений тоже не будет
        Возврат Неопределено;
    КонецЕсли; 
    
    // Получаем значение из Карточки
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   мКарточкиОбъектовРаботПараметрыОбъекта.Значение,
    |   мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта
    |ИЗ
    |   Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
    |ГДЕ
    |   мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка = &Ссылка
    |   И мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта В(&ПараметрОбъекта)";
    
    Запрос.УстановитьПараметр("Ссылка", Объект.КарточкаОбъектаРабот);
    Запрос.УстановитьПараметр("ПараметрОбъекта", СписокПараметров);
    
    Результат = Запрос.Выполнить().Выгрузить();
    
    Если Результат.Количество() > 0 Тогда
        Возврат Результат;
    КонецЕсли; 
    
    Возврат Неопределено;

КонецФункции // ПолучитьТзЗначенийПараметровДляПримечания(СтрПрим, Выборка, НаЧтоДействует)

// Строка в таблице есть всегда, колонки может не быть
&НаСервере
Функция ПолучитьПараметрыНормаВремени(Выборка, ТаблицаПримечаний, СсылкаНаСборник)
    
    ТекущаяНормаВремени = Выборка.НормаВремени;
    СтрокаТекущаяНормаВремени = "";
    Продолжительность = Выборка.НормаВремени;
    
    Если ЗначениеЗаполнено(Выборка.КолонкаТаблицы) Тогда
        
        ЕстьВариантПоКолонке = ЗначениеЗаполнено(Выборка.КолонкаТаблицы.ВариантРасчета);
        ЕстьВариантПоСтроке = ЗначениеЗаполнено(Выборка.СтрокаТаблицы.ВариантРасчета);
        
        Если ЕстьВариантПоКолонке И ЕстьВариантПоСтроке Тогда
            // есть условие и по строке и по колонке
            
            ОбработатьВариантыПоКолонкеПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
            // берем значение нормо-времени, но с учетом коэф. ЕИ
            ПересчетДанныхПоЕдИзм(Выборка.ЕдиницаИзмеренияСтрокиДляУсловия, Выборка.ЗначениеСтрокиДляУсловия, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
            // берем значение нормо-времени, но с учетом коэф. ЕИ
            ПересчетДанныхПоЕдИзм(Выборка.ЕдиницаИзмеренияКолонки, Выборка.ЗначениеКолонки, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
        ИначеЕсли ЕстьВариантПоКолонке Тогда
            // есть условие только по колонке
            
            ОбработатьВариантыПоКолонке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
            // берем значение нормо-времени, но с учетом коэф. ЕИ
            ПересчетДанныхПоЕдИзм(Выборка.ЕдиницаИзмеренияКолонки, Выборка.ЗначениеКолонки, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
        Иначе
            
            ПолучитьНормуВремениПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
            // берем значение нормо-времени, но с учетом коэф. ЕИ
            //ПараметрыНормаВремени = 
            ПересчетДанныхПоЕдИзм(Выборка.ЕдиницаИзмеренияСтрокиДляУсловия, Выборка.ЗначениеСтрокиДляУсловия, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
            
        КонецЕсли; 
        
    Иначе
        // Колонки нет - обрабатывааем только строку
        ПолучитьНормуВремениПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
        
        // берем значение нормо-времени, но с учетом коэф. ЕИ
        //ПараметрыНормаВремени = 
        ПересчетДанныхПоЕдИзм(Выборка.ЕдиницаИзмеренияСтрокиДляУсловия, Выборка.ЗначениеСтрокиДляУсловия, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
        
    КонецЕсли; 
    
    // Примечания 
    //   из примечаний выбираем только те, которые не относятся к полевым работам, и у которых не используется коэффициент
    Для каждого СтрПрим Из ТаблицаПримечаний Цикл
        Если НЕ СтрПрим.ИспользоватьКоэффициент Тогда
            _ПроцентПолевых = 0;
            СтруктураПримечания = ПримечаниеДействуетНаСтроку(СтрПрим, Выборка, _ПроцентПолевых);
            Если СтруктураПримечания.Действует Тогда
                ПолучитьПараметрыПримечания(СтрПрим, Выборка, СтрокаТекущаяНормаВремени, ТекущаяНормаВремени, СсылкаНаСборник, Продолжительность, СтруктураПримечания);
            КонецЕсли;
        КонецЕсли; 
    КонецЦикла; // Примечания
    
    ДобавитьСтрокуТрассировки("  Расчет нормы вр. = "+СтрокаТекущаяНормаВремени + ".  Норма времени = "+ТекущаяНормаВремени);
    
    ПараметрыНормаВремени = Новый Структура("СтрокаНормаВремени, НормаВремени", СтрокаТекущаяНормаВремени, ТекущаяНормаВремени);
    
    Возврат ПараметрыНормаВремени;    
КонецФункции // ПолучитьПараметрыНормоЧаса()

&НаСервере
Процедура ОбработатьВариантыПоКолонке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)
    
    КаждыеПоследующие = Перечисления.ВариантыРасчетов.КаждыеПоследующие;
    
    Если Выборка.КолонкаТаблицы.ВариантРасчета = КаждыеПоследующие Тогда
        // расчет интервалов по колонке
        // просто берем значение нормо-времени, но с учетом коэф. ЕИ
        КоличествоИнтерваловПоКолонке = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеКолонки, Выборка.КолонкаТаблицы.НижняяГраницаДиапазона, Выборка.КолонкаТаблицы.ДляПоследующих);
        
        СтруктураНормы = ПолучитьТекущуюНормуВремени(Выборка, КоличествоИнтерваловПоКолонке);
        
        ТекущаяНормаВремени = СтруктураНормы.ТекущаяНормаВремени;
        СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + СтруктураНормы.СтрокаТекущаяНормаВремени;
        
    Иначе
        // просто берем значение нормо-времени по колонке
        ПолучитьНормуВремениПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
         
    КонецЕсли; 
    
КонецПроцедуры // ОбработатьВариантыПоКолонкеПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)

// Рассчитывает ТекущаяНормаВремени и
// формирует строку представления нормы времени
&НаСервере
Функция ПолучитьТекущуюНормуВремени(Выборка, КоличествоИнтервалов)
    
    ТекущаяНормаВремени = Выборка.НормаВремениНачальная + КоличествоИнтервалов * Выборка.НормаВремени;
    Если КоличествоИнтервалов > 1 Тогда
        СтрокаТекущаяНормаВремени = "(" + Выборка.НормаВремениНачальная + "+" + КоличествоИнтервалов + "*" + Выборка.НормаВремени + ")";
    ИначеЕсли КоличествоИнтервалов = 1 Тогда
        СтрокаТекущаяНормаВремени = "(" + Выборка.НормаВремениНачальная + "+" + Выборка.НормаВремени + ")";
    Иначе
        СтрокаТекущаяНормаВремени = Выборка.НормаВремениНачальная;
    КонецЕсли;
    
    Возврат Новый Структура("ТекущаяНормаВремени, СтрокаТекущаяНормаВремени", ТекущаяНормаВремени, СтрокаТекущаяНормаВремени); 
КонецФункции

&НаСервере
Процедура ОбработатьВариантыПоКолонкеПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)
    
    КаждыеПоследующие = Перечисления.ВариантыРасчетов.КаждыеПоследующие;
    
    Если Выборка.КолонкаТаблицы.ВариантРасчета = КаждыеПоследующие Тогда
        // расчет интервалов по колонке
        Если Выборка.СтрокаТаблицы.ВариантРасчета = КаждыеПоследующие Тогда    
            // расчет интервалов  
            КоличествоИнтерваловПоСтроке = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеСтрокиДляУсловия, Выборка.СтрокаТаблицы.НижняяГраницаДиапазона, Выборка.СтрокаТаблицы.ДляПоследующих);
            КоличествоИнтерваловПоКолонке = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеКолонки, Выборка.КолонкаТаблицы.НижняяГраницаДиапазона, Выборка.КолонкаТаблицы.ДляПоследующих);
			
			// Контроль Значений для расчета интервалов
			Если Выборка.ЗначениеСтрокиДляУсловия = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено значение для расчета количества интервалов для стадии работ " + Выборка.СтадияРабот+"
				| Значение параметра " + Выборка.ПараметрСтрокиДляУсловия + " не указано! Проверьте карточку.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			// Контроль Значений для расчета интервалов
			Если Выборка.ЗначениеКолонки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено значение для расчета количества интервалов для стадии работ " + Выборка.СтадияРабот+"
				| Значение параметра " + Выборка.ПараметрКолонки + " не указано! Проверьте карточку.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
           
            // Начальную норму времени и норму для последующих надо брать из предыдущей строки и колонки
            НормыПредЭлементов = ПолучитьНормыВремениПредЭлементов(Выборка);
            
            НачНормаСтроки = НормыПредЭлементов.НачНормаПоСтроке;
            НормаСтроки = НормыПредЭлементов.НормаПоСтроке;
            НачНормаКолонки = НормыПредЭлементов.НачНормаПоКолонке;
            НормаКолонки = НормыПредЭлементов.НормаПоКолонке;
			
			// Контроль норм времени
			Если НачНормаСтроки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено начальное значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
				| Таблица " + Выборка.ТаблицаНормВремени + " Строка "+Выборка.НомерСтрокиТаблицы+"! Проверьте таблицу в сборнике норм времени.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			Если НормаСтроки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
				| Таблица " + Выборка.ТаблицаНормВремени + " Строка "+Выборка.НомерСтрокиТаблицы+"! Проверьте таблицу в сборнике норм времени.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			Если НачНормаКолонки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено начальное значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
				| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			Если НормаКолонки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
				| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
            
            СтрокаИнтерваловПоСтроке = ?(КоличествоИнтерваловПоСтроке > 1, ""+КоличествоИнтерваловПоСтроке + "*", "");
            СтрокаИнтерваловПоКолонке = ?(КоличествоИнтерваловПоКолонке > 1, ""+КоличествоИнтерваловПоКолонке + "*", "");
            
            СтрокаТекущаяНормаВремени = "(" + НачНормаСтроки + "+" + СтрокаИнтерваловПоСтроке + НормаСтроки + 
            "+" + СтрокаИнтерваловПоКолонке + НормаКолонки + 
            "+" + СтрокаИнтерваловПоСтроке + СтрокаИнтерваловПоКолонке + Выборка.НормаВремени + ")";
            
            ТекущаяНормаВремени = НачНормаСтроки + КоличествоИнтерваловПоСтроке * НормаСтроки + КоличествоИнтерваловПоКолонке * НормаКолонки +
            КоличествоИнтерваловПоСтроке * КоличествоИнтерваловПоКолонке * Выборка.НормаВремени; 
            
        Иначе
            // просто берем значение нормо-времени, но с учетом коэф. ЕИ
            // расчет интервалов по колонке 
            КоличествоИнтерваловПоКолонке = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеКолонки, Выборка.КолонкаТаблицы.НижняяГраницаДиапазона, Выборка.КолонкаТаблицы.ДляПоследующих);
            
 			// Контроль Значений для расчета интервалов
			Если Выборка.ЗначениеКолонки = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено значение для расчета количества интервалов для стадии работ " + Выборка.СтадияРабот+"
				| Значение параметра " + Выборка.ПараметрКолонки + " не указано! Проверьте карточку.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			
			Если Выборка.НормаВремениНачальная = 0 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено начальное значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
				| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
				Сообщение.Сообщить(); 	
			КонецЕсли; 
			
			СтруктураНормы = ПолучитьТекущуюНормуВремени(Выборка, КоличествоИнтерваловПоКолонке);
            
            ТекущаяНормаВремени = СтруктураНормы.ТекущаяНормаВремени;
            СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + СтруктураНормы.СтрокаТекущаяНормаВремени;
        КонецЕсли;
        
    Иначе
        // просто берем значение нормо-времени по колонке
        ПолучитьНормуВремениПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени);
         
    КонецЕсли; 
    
КонецПроцедуры // ОбработатьВариантыПоКолонкеПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)

&НаСервере
Процедура ПолучитьНормуВремениПоСтроке(Выборка, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)
    
    КаждыеПоследующие = Перечисления.ВариантыРасчетов.КаждыеПоследующие;
    КаждыеПоследующиеВИнтервале = Перечисления.ВариантыРасчетов.КаждыеПоследующиеВИнтервале;
    
    Если Выборка.СтрокаТаблицы.ВариантРасчета = КаждыеПоследующие Тогда    
        // расчет интервалов по строке 
        КоличествоИнтервалов = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеСтрокиДляУсловия, Выборка.СтрокаТаблицы.НижняяГраницаДиапазона, Выборка.СтрокаТаблицы.ДляПоследующих);
        
		// Контроль Значений для расчета интервалов
		Если Выборка.ЗначениеСтрокиДляУсловия = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено значение для расчета количества интервалов для стадии работ " + Выборка.СтадияРабот+"
			| Значение параметра " + Выборка.ПараметрСтрокиДляУсловия + " не указано! Проверьте карточку.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
			
		// Контроль нормы времени
		Если Выборка.НормаВремениНачальная = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено начальное значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
			| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
			
        СтруктураНормы = ПолучитьТекущуюНормуВремени(Выборка, КоличествоИнтервалов);
        
        ТекущаяНормаВремени = СтруктураНормы.ТекущаяНормаВремени;
        СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + СтруктураНормы.СтрокаТекущаяНормаВремени;
                
    ИначеЕсли Выборка.СтрокаТаблицы.ВариантРасчета = КаждыеПоследующиеВИнтервале Тогда    
        // расчет интервалов по строке 
        КоличествоИнтервалов = ПолучитьКоличествоИнтервалов(Выборка.ЗначениеСтрокиДляУсловия, Выборка.СтрокаТаблицы.НижняяГраницаДиапазона, Выборка.СтрокаТаблицы.ДляПоследующих);
        
		// Контроль Значений для расчета интервалов
		Если Выборка.ЗначениеСтрокиДляУсловия = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено значение для расчета количества интервалов для стадии работ " + Выборка.СтадияРабот+"
			| Значение параметра " + Выборка.ПараметрСтрокиДляУсловия + " не указано! Проверьте карточку.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
			
		// Контроль нормы времени
		Если Выборка.НормаВремени = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
			| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
			
        // Для данного условия в строках коэффициенты умножаются, а в примечаниях - складываются
        Если КоличествоИнтервалов > 0 Тогда
            ТекущаяНормаВремени = Выборка.НормаВремени*Pow(Выборка.Коэффициент, КоличествоИнтервалов);
            СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + Выборка.НормаВремени + "*" + Выборка.Коэффициент +"^" + КоличествоИнтервалов;
        Иначе
            ТекущаяНормаВремени = Выборка.НормаВремени;
            СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + Выборка.НормаВремени;
        КонецЕсли; 
        
        //ДобавитьСтрокуТрассировки("  Расчет нормы вр. = " + Выборка.НормаВремени + "*(1+" + Выборка.Коэффициент +"^" + КоличествоИнтервалов + ")");
    Иначе
		// Контроль нормы времени
		Если Выборка.НормаВремени = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдено значение нормы времени для расчета стадии работ " + Выборка.СтадияРабот+"
			| Таблица " + Выборка.ТаблицаНормВремени + " Колонка "+Выборка.КолонкаТаблицы+"! Проверьте таблицу в сборнике норм времени.";
			Сообщение.Сообщить(); 	
		КонецЕсли; 
			
        ТекущаяНормаВремени = Выборка.НормаВремени;
        СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + Выборка.НормаВремени;
        
        //ДобавитьСтрокуТрассировки("Расчета нормы вр. нет");
    КонецЕсли;
КонецПроцедуры // ПолучитьНормуВремениПоСтроке()

&НаСервереБезКонтекста
Функция ПолучитьКоличествоИнтервалов(Значение, НижняяГраницаДиапазона, ДляПоследующих)
	КоличествоИнтервалов = 0;
	Если Значение >= НижняяГраницаДиапазона Тогда
		КоличествоИнтервалов = (Значение - НижняяГраницаДиапазона)/ДляПоследующих;
		Если Цел(КоличествоИнтервалов) < КоличествоИнтервалов Тогда
			КоличествоИнтервалов = Цел(КоличествоИнтервалов) + 1;
		КонецЕсли; 
	КонецЕсли; 
    Возврат КоличествоИнтервалов;
КонецФункции // ПолучитьКоличествоИнтервалов()
 
&НаСервере
Функция ПолучитьНормыВремениПредЭлементов(Выборка)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мНормыВремени.НормаВремени,
        |   мНормыВремени.НормаВремениНачальная
        |ИЗ
        |   РегистрСведений.мНормыВремени КАК мНормыВремени
        |ГДЕ
        |   мНормыВремени.СтрокаТаблицы = &СтрокаТаблицы1
        |   И мНормыВремени.КолонкаТаблицы = &КолонкаТаблицы1
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   мНормыВремени.НормаВремени,
        |   мНормыВремени.НормаВремениНачальная
        |ИЗ
        |   РегистрСведений.мНормыВремени КАК мНормыВремени
        |ГДЕ
        |   мНормыВремени.СтрокаТаблицы = &СтрокаТаблицы2
        |   И мНормыВремени.КолонкаТаблицы = &КолонкаТаблицы2";

    Запрос.УстановитьПараметр("КолонкаТаблицы1", Выборка.КолонкаТаблицы.ПредыдущийЭлемент);
    Запрос.УстановитьПараметр("СтрокаТаблицы1", Выборка.СтрокаТаблицы);
    Запрос.УстановитьПараметр("КолонкаТаблицы2", Выборка.КолонкаТаблицы);
    Запрос.УстановитьПараметр("СтрокаТаблицы2", Выборка.СтрокаТаблицы.ПредыдущийЭлемент);

    РезультатЗапроса = Запрос.ВыполнитьПакет();
    
    НормыВремениПоСтроке = РезультатЗапроса[0].Выбрать();
    НормыВремениПоКолонке = РезультатЗапроса[1].Выбрать();
    
    НормыПредЭлементов = Новый Структура;
	НормыПредЭлементов.Вставить("НачНормаПоСтроке", 0);
	НормыПредЭлементов.Вставить("НормаПоСтроке", 0);
	НормыПредЭлементов.Вставить("НачНормаПоКолонке", 0);
	НормыПредЭлементов.Вставить("НормаПоКолонке", 0);
    
    Если НормыВремениПоСтроке.Следующий() Тогда
        НормыПредЭлементов.Вставить("НачНормаПоСтроке", НормыВремениПоСтроке.НормаВремениНачальная);
        НормыПредЭлементов.Вставить("НормаПоСтроке", НормыВремениПоСтроке.НормаВремени);
    КонецЕсли; 
    Если НормыВремениПоКолонке.Следующий() Тогда
        НормыПредЭлементов.Вставить("НачНормаПоКолонке", НормыВремениПоКолонке.НормаВремениНачальная);
        НормыПредЭлементов.Вставить("НормаПоКолонке", НормыВремениПоКолонке.НормаВремени);
    КонецЕсли; 
    
    Возврат НормыПредЭлементов;	

КонецФункции // ПолучитьНормыВремениПредЭлементов()

&НаСервере
Функция ПересчетДанныхПоЕдИзм(ЕдиницаИзмерения, ЗначениеПараметра, ТекущаяНормаВремени, СтрокаТекущаяНормаВремени)
    
    Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
        Если ЕдиницаИзмерения.Коэффициент > 1 Тогда 
            
            // Норма времени рассчитывается пропорционально
            ТекущаяНормаВремени = Окр(ЗначениеПараметра / ЕдиницаИзмерения.Коэффициент * ТекущаяНормаВремени, мРазное.ЗнакОкр(Объект.ДатаРасчетаСметы));
            СтрокаТекущаяНормаВремени = СтрокаТекущаяНормаВремени + "*(" + ЗначениеПараметра + "/" + ЕдиницаИзмерения.Коэффициент  + ")";
            
            ДобавитьСтрокуТрассировки("  Учет Кф. ед. изм. = " + "(" + ЗначениеПараметра + "/" + ЕдиницаИзмерения.Коэффициент  + ")");
        КонецЕсли; 
    КонецЕсли; 
КонецФункции // ПересчетДанныхПоЕдИзм(ЕдиницаИзмерения, ЗначениеПараметра, НормоЧас)

// Возвращает
//  Истина - дейстует
//  ПараметрПримечания - Если заполнен в строках ТаблицыНормВремени, то возвращается из строки, иначе из шапки примечания
//
// Параметры
//  СтрПрим - строка ТаблицыЗначений, соответствует справочнику мПримечанияНормВремени
//  Выборка - строка ТаблицыЗначений, содержит всю информацию, необходимую для заполнения строки сметы
//  ПроцентПолевых - Число, если > 0, то показывает, что есть полевые работы 
//   
//  
&НаСервере
Функция ПримечаниеДействуетНаСтроку(СтрПрим, Выборка, ПроцентПолевых)
    СтруктураПримечания = Новый Структура(); 
    СтруктураПримечания.Вставить("Действует", Ложь);
    СтруктураПримечания.Вставить("ПараметрПримечания", СтрПрим.ПараметрОбъекта);
    СтруктураПримечания.Вставить("СсылкаНаСборник", СтрПрим.СсылкаНаСборник);
    СтруктураПримечания.Вставить("ЗначениеПримечания", Неопределено);
    
    Если СтрПрим.ДействуетНаВесьСборник Тогда
        // действует на весь сборник - Значение берем из шапки
         
        ЗаполнитьСтуктуруПримечания(СтруктураПримечания, УчестьДействиеПолевых(СтрПрим, ПроцентПолевых), СтрПрим);
        
    Иначе
        ТаблицыДействия = СтрПрим.ТаблицыНормВремени;
        
        // Ищем таблицу
        Отбор = Новый Структура("ТаблицаНормВремени", Выборка.ТаблицаНормВремени);
        
        ТаблицаДействия = ТаблицыДействия.НайтиСтроки(Отбор);
        
        Если ТаблицаДействия.Количество() > 0 Тогда
            // Таблица есть - проверить строку. Если НомерСтрокиТаблицы не заполнен, 
            //   это значит, что параметр действует на всю таблицу, иначе
            //   действует на перечисленные строки

            НомераСтрок = ТаблицаДействия[0].НомерСтрокиТаблицы;
            Если ЗначениеЗаполнено(НомераСтрок) Тогда
                Если Найти(НомераСтрок, ",") > 0 Тогда
                    // несколько строк в одной
                    МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомераСтрок, ",");
                    Если МассивСтрок.Найти(Выборка.НомерСтрокиТаблицы) <> Неопределено Тогда
                        ЗаполнитьСтуктуруПримечания(СтруктураПримечания, УчестьДействиеПолевых(СтрПрим, ПроцентПолевых), ТаблицаДействия[0]);
                    КонецЕсли; 
                Иначе
                    // одна строка
                    Если Выборка.НомерСтрокиТаблицы = НомераСтрок Тогда
                        ЗаполнитьСтуктуруПримечания(СтруктураПримечания, УчестьДействиеПолевых(СтрПрим, ПроцентПолевых), ТаблицаДействия[0]);
                    КонецЕсли; 
                КонецЕсли; 
            Иначе
                // Действует на таблицу
                ЗаполнитьСтуктуруПримечания(СтруктураПримечания, УчестьДействиеПолевых(СтрПрим, ПроцентПолевых), ТаблицаДействия[0]);
            КонецЕсли; 
        КонецЕсли; 
        
    КонецЕсли; 
	                 
    Возврат СтруктураПримечания;
КонецФункции // ПримечаниеДействуетНаСтроку()

&НаСервере
Функция ЗаполнитьСтуктуруПримечания(СтруктураПримечания, Действует, СтрокаТаб)
    СтруктураПримечания.Вставить("Действует", Действует);
    СтруктураПримечания.Вставить("ПараметрПримечания", СтрокаТаб.ПараметрОбъекта);
    СтруктураПримечания.Вставить("СсылкаНаСборник", СтрокаТаб.СсылкаНаСборник);
    Если ЗначениеЗаполнено(СтрокаТаб.ПараметрОбъекта) Тогда
        Если Тип(СтрокаТаб.ПараметрОбъекта.ТипЗначения) = Тип("Булево") Тогда
            СтруктураПримечания.Вставить("ЗначениеПримечания", СтрокаТаб.ЗначениеБулево);
        Иначе
            СтруктураПримечания.Вставить("ЗначениеПримечания", СтрокаТаб.Значение);
        КонецЕсли; 
    КонецЕсли;
КонецФункции

// При определении действия примечания Учитывает полевые работы
// Возвращает
//  Если полевые есть и примечание действует на полевые - Истина
//  Если полевых нет или есть частично и примечание не действует на полевые - Истина
//  в остальных случаях ложь
// Параметры
//  СтрПрим - строка ТаблицыЗначений, соответствует справочнику мПримечанияНормВремени
//  ПроцентПолевых - Число, если > 0, то показывает, что есть полевые работы 
//
&НаСервереБезКонтекста
Функция УчестьДействиеПолевых(СтрПрим, ПроцентПолевых)
    Действует = Ложь;
    
    Если СтрПрим.ДействуетТолькоНаПолевые Тогда
        // надо проверить, а есть ли полевые в таблице и строке?
        Если ПроцентПолевых > 0 Тогда
            Действует = Истина;
        КонецЕсли; 
    Иначе
        // Если в строке кроме полевых есть и камеральные работы - то должно действовать
        Если ПроцентПолевых < 100 Тогда
            Действует = Истина;
        КонецЕсли;
    КонецЕсли;
    
    Возврат Действует;	
КонецФункции

&НаСервере
Функция ПримечаниеДействуетТолькоНаПолевые(Примечание, ДатаРасчетаСметы)
    Действует = Ложь;
    Если Примечание.ДействуетТолькоНаПолевые Тогда
        Если Примечание.ИспользоватьПериодыДействия Тогда
            МесяцСметы = Месяц(ДатаРасчетаСметы);    
            ДеньСметы = День(ДатаРасчетаСметы);    
            НачМесяц = Число(Прав(Примечание.НачалоДействия, 2));
            НачДень = Число(Лев(Примечание.НачалоДействия, 2));
            КонМесяц = Число(Прав(Примечание.ОкончаниеДействия, 2));
            КонДень = Число(Лев(Примечание.ОкончаниеДействия, 2));
            Если (НачМесяц < МесяцСметы)ИЛИ((НачМесяц = МесяцСметы)И(НачДень <= ДеньСметы)) Тогда
                Действует = Истина;
            ИначеЕсли (МесяцСметы < КонМесяц)ИЛИ((МесяцСметы = КонМесяц)И(ДеньСметы <= КонДень)) Тогда
                Действует = Истина;	
            КонецЕсли; 
        Иначе
            Действует = Истина;	
        КонецЕсли; 
    КонецЕсли; 

    Возврат Действует;	

КонецФункции // ПримечаниеДействуетТолькоНаПолевые()

&НаСервере
Функция ПолучитьОснованиеСметы(СборникНормВремени, НаДату)
    Возврат "Смета составлена на основании норм времени на землеустроительные работы, утвержденных "+мРаботаСоСметами.ПолучитьСборникУтвержден(СборникНормВремени, НаДату)+
	" и стоимостей человеко-часа, утвержденных " + Константы.мЧеловекоЧасУтвержден.Получить();
КонецФункции

&НаКлиенте
Функция НеЗаполненПунктОсвобожденияОтНДС()
    Отказ = Ложь;
    Если мРаботаСоСметами.НеУказанПунктОсвобожденияОтНДС(Объект.СтавкаНДС, Объект.ОсвобождениеОтНДС) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Поле  = "ОсвобождениеОтНДС";
        Сообщение.Текст = "Не указан пункт Освобождения от НДС!";
        Сообщение.КлючДанных = Объект.Ссылка;
        Сообщение.ПутьКДанным = "Акты.НДС";
        Сообщение.Сообщить();
        Отказ = Истина;
    КонецЕсли; 
    Возврат Отказ;
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованиеСметы()
    Объект.Наименование = " Смета № " + СокрЛП(Объект.НомерСметы)+ " от "+ Формат(Объект.ДатаРасчетаСметы, "ДФ=dd.MM.yyyy") + " На выполнение землеустроительных работ";

    //Наименование = "" + СокрЛП(Объект.Владелец.РегистрационныйНомер) + " от "+ Формат(Объект.ДатаРасчетаСметы, "ДФ=dd.MM.yyyy");
    //
    //Если ЗначениеЗаполнено(Объект.ЭтапДоговора) Тогда
    //    Наименование = Наименование + " Смета № " + СокрЛП(Объект.НомерСметы);
    //    Наименование = Наименование + " " + мРаботаСоСметами.ПолучитьДваСлова(Объект.ЭтапДоговора.ВидРабот.Наименование);
    //КонецЕсли; 
    //Объект.Наименование = Наименование;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидКарточки(КарточкаОбъектаРабот)
    Возврат КарточкаОбъектаРабот.ВидКарточки	
КонецФункции

// Возвращает истину если объект линейный
&НаСервере
Функция ОбъектЛинейный()
	Линейный = Ложь;
	ВидОбъекта = Объект.ОбъектРабот.ВидОбъекта;
	Если ВидОбъекта = Перечисления.мВидыОбъектов.Линейный Тогда
		Линейный = Истина;
	ИначеЕсли ВидОбъекта = Перечисления.мВидыОбъектов.ЛинейноПлощадной Тогда
		Линейный = Истина;
	ИначеЕсли ВидОбъекта = Перечисления.мВидыОбъектов.ПлощадноЛинейный Тогда
		Линейный = Истина;
	КонецЕсли; 
	Возврат Линейный;
КонецФункции // ОбъектЛинейный()

&НаКлиенте
Процедура ИтогоПриИзменении(Элемент)
	РассчитатьНДС();
	РассчитатьВсего();
	РассчитатьОбъем();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНДС()
    СтавкаНДСЧисло = ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДС);
    Объект.НДС = Окр(Объект.Итого * СтавкаНДСЧисло / 100, ЗнакОкр(Объект.ДатаРасчетаСметы));
КонецПроцедуры
 
&НаКлиенте
Процедура РассчитатьВсего()
    Объект.КОплате = Объект.Итого + Объект.НДС;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъем()
    Объект.Объем = Объект.КОплате - Объект.НДС;
КонецПроцедуры

&НаКлиенте
Процедура НДСПриИзменении(Элемент)
	РассчитатьВсего();
	РассчитатьОбъем();
КонецПроцедуры

&НаКлиенте
Процедура КОплатеПриИзменении(Элемент)
	РассчитатьОбъем();
КонецПроцедуры
 
#КонецОбласти 










 
 



