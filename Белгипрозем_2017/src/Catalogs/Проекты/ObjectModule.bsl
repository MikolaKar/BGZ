
Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИсходныеРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
			"ВидПроекта, Руководитель, ПроектнаяКоманда");
		Если ИсходныеРеквизиты.ВидПроекта = ВидПроекта Тогда
			ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты);	
		Иначе
			ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);		
		КонецЕсли;
		
	Иначе	
		
		ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты)
	
	// Добавление реквизита Руководитель
	Если ИсходныеРеквизиты.Руководитель <> Руководитель Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Руководитель);		
	КонецЕсли;				
		
	// Обработка табличной части ПроектнаяКоманда
	ИсходнаяПроектнаяКоманда = ИсходныеРеквизиты.ПроектнаяКоманда.Выгрузить();
	Для каждого Эл Из ПроектнаяКоманда Цикл
		
		// Поиск в исходной табличной части 
		Найден = Ложь;
		Для каждого Эл2 Из ИсходнаяПроектнаяКоманда Цикл
			Если Эл.Исполнитель = Эл2.Исполнитель 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		// Добавление нового участника рабочей группы
		Если Не Найден Тогда  
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаНабора, 
				Эл.Исполнитель,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры	
	
Процедура ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Руководитель);
	
	// Добавление табличной части ПроектнаяКоманда
	Для каждого Строка Из ПроектнаяКоманда Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, 
			Строка.Исполнитель,
			Строка.ОсновнойОбъектАдресации,
			Строка.ДополнительныйОбъектАдресации);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		Руководитель = ПользователиКлиентСервер.ТекущийПользователь();
		ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
		Состояние = Перечисления.СостоянияПроектов.Инициирован;
		ЕдиницаТрудозатратЗадач = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
		ЕдиницаДлительностиЗадач = Константы.ОсновнаяЕдиницаДлительности.Получить();
		СписыватьЗатратыНаПроект = Истина;
		СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
		АвтоматическиРассчитыватьПланПроекта = Истина;
		
		Если Не ЗначениеЗаполнено(ВидПроекта) Тогда 
			ВидПроекта = РаботаСПроектами.ПолучитьВидПроектаПоУмолчанию();
		КонецЕсли;	
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;
	КонецЕсли;	
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		Наименование = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения, "Тема");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда 
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийТекущийПланНачало = ТекущийПланНачало;
	ПредыдущийТекущийПланОкончание = ТекущийПланОкончание;
	ПредыдущийСпособПланирования = СпособПланирования;
	ПредыдущийАвтоматическиРассчитыватьПланПроекта = АвтоматическиРассчитыватьПланПроекта;
	
	Если Не Ссылка.Пустая() Тогда
		ПредыдущиеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
			"ТекущийПланНачало,ТекущийПланОкончание,СпособПланирования,АвтоматическиРассчитыватьПланПроекта");
		ПредыдущийТекущийПланНачало = ПредыдущиеРеквизиты.ТекущийПланНачало;
		ПредыдущийТекущийПланОкончание = ПредыдущиеРеквизиты.ТекущийПланОкончание;
		ПредыдущийСпособПланирования = ПредыдущиеРеквизиты.СпособПланирования;
		ПредыдущийАвтоматическиРассчитыватьПланПроекта = ПредыдущиеРеквизиты.АвтоматическиРассчитыватьПланПроекта;
	КонецЕсли;
	
	Если (ПредыдущийТекущийПланНачало <> ТекущийПланНачало Или ПредыдущийСпособПланирования <> СпособПланирования) 
		И СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда
		ДополнительныеСвойства.Вставить("НужноОбновитьНачалоПроектныхЗадач", Истина);
	КонецЕсли;
	
	Если (ПредыдущийТекущийПланОкончание <> ТекущийПланОкончание Или ПредыдущийСпособПланирования <> СпособПланирования)
		И СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыОкончанияПроекта Тогда
		ДополнительныеСвойства.Вставить("НужноОбновитьОкончаниеПроектныхЗадач", Истина);
	КонецЕсли;
	
	Если ПредыдущийАвтоматическиРассчитыватьПланПроекта = Ложь И АвтоматическиРассчитыватьПланПроекта = Истина Тогда 
		ДополнительныеСвойства.Вставить("НужноОбновитьПланПроекта", Истина);
	КонецЕсли;	
	
	Если Не Ссылка.Пустая() Тогда 
		Если Руководитель <> ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Руководитель") Тогда 
			ДополнительныеСвойства.Вставить("ИзменилсяРуководитель", Истина);
		КонецЕсли;	
	КонецЕсли;	
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.Проекты.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	
	// Добавление автоматических участников из самого объекта
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа);
		
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		
		Для каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			
			// Поиск удаляемого участника в итоговой рабочей группе
			Для каждого Эл2 Из РабочаяГруппа Цикл
				
				Если Эл2.Участник = Эл.Участник 
					И Эл2.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации
					И Эл2.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации Тогда
					
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;	
				
		КонецЦикла;	
			
	КонецЕсли;		
	
	// Обработка обязательного заполнения рабочих групп 
	Если РабочаяГруппа.Количество() = 0 Тогда
	
		Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидПроекта) Тогда
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;	
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь); //ОбновитьПраваДоступа
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеПроекта);			
		Иначе
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеПроекта);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("НужноОбновитьНачалоПроектныхЗадач") Тогда
		ОбновитьНачалоПроектныхЗадач();
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("НужноОбновитьОкончаниеПроектныхЗадач") Тогда
		ОбновитьОкончаниеПроектныхЗадач();
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НужноОбновитьПланПроекта") Тогда
		РаботаСПроектами.РассчитатьПланВсегоПроекта(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНачалоПроектныхЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектныеЗадачи.Ссылка
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
	|		ПО ПроектныеЗадачи.Ссылка = ПроектныеЗадачиПредшественники.Ссылка
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Владелец
	|	И НЕ ПроектныеЗадачи.СуммарнаяЗадача
	|	И ПроектныеЗадачиПредшественники.Ссылка ЕСТЬ NULL 
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Предшественники = РаботаСПроектами.ПолучитьВсехПредшественников(Выборка.Ссылка, Ложь);
		Если Предшественники.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(Выборка.Ссылка);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТекущийПланНачало", ТекущийПланНачало);
		СтруктураДанных.Вставить("ТекущийПланОкончание", 
			РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
			ТекущийПланНачало, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
		РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
		
	КонецЦикла;
	РаботаСПроектами.РассчитатьПланВсегоПроекта(Ссылка);
	
КонецПроцедуры

Процедура ОбновитьОкончаниеПроектныхЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектныеЗадачи.Ссылка
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
	|		ПО ПроектныеЗадачи.Ссылка = ПроектныеЗадачиПредшественники.Предшественник
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Владелец
	|	И НЕ ПроектныеЗадачи.СуммарнаяЗадача
	|	И ПроектныеЗадачиПредшественники.Ссылка ЕСТЬ NULL 
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Последователи = РаботаСПроектами.ПолучитьВсехПоследователей(Выборка.Ссылка, Ложь);
		Если Последователи.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(Выборка.Ссылка);
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ТекущийПланОкончание", ТекущийПланОкончание);
		СтруктураДанных.Вставить("ТекущийПланНачало", 
			РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
			ТекущийПланОкончание, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
		РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
		
	КонецЦикла;
	РаботаСПроектами.РассчитатьПланВсегоПроекта(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ТекущийПланНачало) И ЗначениеЗаполнено(ТекущийПланОкончание) И ТекущийПланНачало > ТекущийПланОкончание Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания проекта меньше, чем дата начала.'"),
			ЭтотОбъект,
			"ТекущийПланОкончание",, 
			Отказ);
	КонецЕсли;
	
	КоличествоИсполнителей = ПроектнаяКоманда.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей - 2 Цикл
		Строка1 = ПроектнаяКоманда[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей - 1 Цикл
			Строка2 = ПроектнаяКоманда[Инд2];
			
			ТекстСообщения = "";
			Если Строка1.Исполнитель = Строка2.Исполнитель И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке проектной команды!'"),
					Строка(Строка1.Исполнитель));
				
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) 
					И ЗначениеЗаполнено(Строка1.ДополнительныйОбъектАдресации) Тогда 	
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке проектной команды!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации),
						Строка(Строка1.ДополнительныйОбъектАдресации));
					
				ИначеЕсли ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке проектной команды!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации));
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке проектной команды!'"), 
						Строка(Строка1.Исполнитель));
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			Если ТекстСообщения <> "" Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"ПроектнаяКоманда[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры
