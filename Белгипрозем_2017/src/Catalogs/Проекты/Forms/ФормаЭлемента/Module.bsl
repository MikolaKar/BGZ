

////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРабочуюДату(Дата, ПутьКДанным, Начало)
	
	Если ЗначениеЗаполнено(Дата) И Дата = НачалоДня(Дата) Тогда
		
		Если ИспользоватьГрафикиРаботы Тогда 
			
			Если ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда
				ГрафикПланирования = Объект.ГрафикРаботы;
			Иначе
				ГрафикПланирования = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			КонецЕсли;
			
			Если ГрафикиРаботы.ЭтоРабочийДень(Дата, ГрафикПланирования) Тогда
				Если Начало Тогда
					Дата = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикПланирования, Дата);
				Иначе
					Дата = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикПланирования, Дата);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Начало Тогда
				Дата = НачалоДня(Дата);
			Иначе
				Дата = КонецДня(Дата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме()
	
	Просмотр = Объект.РедактируетсяВСтороннейСистеме;
	Элементы.ТекущийПланНачало.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланОкончание.ТолькоПросмотр = Просмотр;
	Элементы.ГрафикРаботы.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаТрудозатратЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ЕдиницаДлительностиЗадач.ТолькоПросмотр = Просмотр;
	Элементы.ТекущийПланТрудозатраты.ТолькоПросмотр = Просмотр;
	Элементы.ПроектнаяКоманда.ТолькоПросмотр = Просмотр;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.ПроектнаяКоманда.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	ПроектнаяКоманда = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для Каждого Строка Из ПроектнаяКоманда Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);
		СтруктураОтбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		СтруктураОтбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		
		НайденныеСтроки = Объект.ПроектнаяКоманда.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ПроектнаяКоманда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	КоличествоСтрок = Объект.ПроектнаяКоманда.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		Строка = Объект.ПроектнаяКоманда[КоличествоСтрок - 1 - Инд];
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);
		СтруктураОтбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		СтруктураОтбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
			
		НайденныеСтроки = ПроектнаяКоманда.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Объект.ПроектнаяКоманда.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнфоНадписи()
	
	ОкончаниеПоДаннымЗадач = ОкончаниеПоДаннымЗадач(Объект.Ссылка);	
	Если НачалоДня(ОкончаниеПоДаннымЗадач) = НачалоДня(Объект.ТекущийПланОкончание) Тогда 
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ОкончаниеПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'"),
			Формат(ОкончаниеПоДаннымЗадач, "ДФ='дд.ММ.гггг'"));
	КонецЕсли;	
	
	ТрудозатратыПоДаннымЗадач = ТрудозатратыПоДаннымЗадач(Объект.Ссылка);
	Если ТрудозатратыПоДаннымЗадач = Объект.ТекущийПланТрудозатраты Тогда 
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = "";
	Иначе
		Элементы.ТрудозатратыПоДаннымЗадач.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(по данным задач: %1)'"),
			Формат(ТрудозатратыПоДаннымЗадач, "ЧЦ=10; ЧДЦ=2; ЧН=0"));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОкончаниеПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланОкончание;
	КонецЕсли;
	
	ДатаОкончанияПоПлану = РаботаСПроектами.ВычислитьТекущийПланОкончанияПроекта(ПроектСсылка);
	
	Возврат ДатаОкончанияПоПлану;
	
КонецФункции

&НаСервере
Функция ТрудозатратыПоДаннымЗадач(ПроектСсылка)
	
	Если Не ЗначениеЗаполнено(ПроектСсылка) Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ТекущийПланТрудозатраты) Тогда 
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	(НЕ ПроектныеЗадачи.ПометкаУдаления)
		|	И ПроектныеЗадачи.Владелец = &Владелец";
		
	Запрос.УстановитьПараметр("Владелец", ПроектСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Объект.ТекущийПланТрудозатраты;
	КонецЕсли;
	
	ТрудозатратыПоПлану = РаботаСПроектами.ВычислитьПлановыеТрудозатратыПроекта(ПроектСсылка);
	
	Возврат ТрудозатратыПоПлану;
	
КонецФункции

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

///////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	Параметры.ПисьмоОснование = Параметры.Основание;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Ссылка
			|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		ЕстьЗадачиПроекта = Не Запрос.Выполнить().Пустой();
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Установка даты начала
	ТекущаяДата = ТекущаяДатаСеанса();
	Если Объект.Ссылка.Пустая() Тогда	
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			
			Если ИспользоватьГрафикиРаботы Тогда 
				Объект.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
					Объект.ГрафикРаботы,
					ТекущаяДата - Секунда(ТекущаяДата));
			Иначе
				Объект.ТекущийПланНачало = НачалоДня(ТекущаяДата);
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.Состояние = Перечисления.СостоянияПроектов.Завершен Тогда
		ПроектЗавершен = Истина;	
	Иначе
		ПроектЗавершен = Ложь;
	КонецЕсли;
	НачальноеСостояние = Объект.Состояние;
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	// Копирование
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		// Копирование задач
		Если Параметры.Свойство("КопироватьЗадачи") И Параметры.КопироватьЗадачи Тогда
			КопироватьЗадачи = Истина;
			ПроектЗначениеКопирования = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Рабочие группы
	Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	РаботаСРабочимиГруппами.ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(ЭтаФорма);
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
	    ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);	
		
	ВывестиИнфоНадписи();
	
	Если Не Объект.ЗагруженИзMSProject Тогда
		Элементы.ГруппаЗагрузкаИзВнешнейСистемы.Видимость = Ложь;
	КонецЕсли;
	
	// Установка режима "Только просмотр" для проектов, которые редактируются в сторонней системе
	УстановитьТолькоЧтениеДляРедактированияВСтороннейСистеме();
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Заполнение рабочих групп
	РаботаСРабочимиГруппами.ДокументПриСозданииНаСервере(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ПроектнаяКоманда, "Исполнитель");

	Если Не ПараметрыЗаписи.Свойство("ПродолжитьЗаписьПослеОтветаНаВопрос") 
		И НачальноеСостояние <> Объект.Состояние 
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПроектов.Завершен") 
		И ЗначениеЗаполнено(Объект.Ссылка) 
		И РаботаСПроектами.ЕстьНезавершенныеПроектныеЗадачи(Объект.Ссылка) Тогда 
		ТекстВопроса = НСтр("ru = 'В проекте имеются незавершенные проектные задачи. Вы действительно хотите отметить проект как завершенный?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
		
	НачальноеСостояние = Объект.Состояние;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ПараметрыЗаписи.Вставить("ПродолжитьЗаписьПослеОтветаНаВопрос", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.ОсновнойОбъектАдресации = Эл2.ОсновнойОбъектАдресации 
				И Эл.ДополнительныйОбъектАдресации = Эл2.ДополнительныйОбъектАдресации Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
				Эл.Участник,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработка Категории
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
		
	ИначеЕсли (ИмяСобытия = "СозданаПроектнаяЗадача"
		ИЛИ ИмяСобытия = "ИзмененаПроектнаяЗадача")
		И Параметр.Проект = Объект.Ссылка Тогда 
		
		Прочитать();

	// Обработчик механизма "Свойства"
	ИначеЕсли УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	// Копирование задач
	Если КопироватьЗадачи Тогда
		
		СкопированныеЗадачи = Новый ТаблицаЗначений;
		СкопированныеЗадачи.Колонки.Добавить("НоваяСсылка");
		СкопированныеЗадачи.Колонки.Добавить("СтараяСсылка");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка,
		|	ПроектныеЗадачи.КодСДР,
		|	ПроектныеЗадачи.НомерЗадачиВУровне,
		|	ПроектныеЗадачи.СуммарнаяЗадача
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &ВладелецЗадачи
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("ВладелецЗадачи", ПроектЗначениеКопирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроектнаяЗадачаКопия = Выборка.Ссылка.Скопировать();
			ПроектнаяЗадачаКопия.Владелец = Объект.Ссылка;
			
			Если ЗначениеЗаполнено(ПроектнаяЗадачаКопия.Родитель) Тогда
				РодительСтрока = СкопированныеЗадачи.Найти(ПроектнаяЗадачаКопия.Родитель, "СтараяСсылка");
				ПроектнаяЗадачаКопия.Родитель = РодительСтрока.НоваяСсылка; 
			КонецЕсли;
			
			ПроектнаяЗадачаКопия.КодСДР = Выборка.КодСДР;
			ПроектнаяЗадачаКопия.НомерЗадачиВУровне = Выборка.НомерЗадачиВУровне;
			ПроектнаяЗадачаКопия.СуммарнаяЗадача = Выборка.СуммарнаяЗадача;
			ПроектнаяЗадачаКопия.Записать();
			
			СтруктураДанных = Новый Структура(
				"ТекущийПланНачало,ТекущийПланОкончание,
				|ТекущийПланДлительность,ТекущийПланЕдиницаДлительности,
				|НачалоФакт,ОкончаниеФакт,
				|ДлительностьФакт,ЕдиницаДлительностиФакт");
			ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(Выборка.Ссылка);	
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПроектнойЗадачи);
			РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ПроектнаяЗадачаКопия.Ссылка, СтруктураДанных);
			
			СкопированнаяЗадача = СкопированныеЗадачи.Добавить();
			СкопированнаяЗадача.НоваяСсылка = ПроектнаяЗадачаКопия.Ссылка;
			СкопированнаяЗадача.СтараяСсылка = Выборка.Ссылка;
			
		КонецЦикла;	
		
		Выборка = Справочники.ПроектныеЗадачи.Выбрать( , Объект.Ссылка);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Предшественники.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;	
				
			ВыборкаОбъект = Выборка.ПолучитьОбъект();
			Для Каждого Строка Из ВыборкаОбъект.Предшественники Цикл
				Если ЗначениеЗаполнено(Строка.Предшественник) Тогда 
					ПредшественникСтрока = СкопированныеЗадачи.Найти(Строка.Предшественник, "СтараяСсылка");
					Строка.Предшественник = ПредшественникСтрока.НоваяСсылка; 
				КонецЕсли;	
			КонецЦикла;	
			ВыборкаОбъект.Записать();
				
		КонецЦикла;	
		
		РаботаСПроектами.РассчитатьПланВсегоПроекта(Объект.Ссылка);
		КопироватьЗадачи = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение") 
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда
		ОписаниеПредупреждения = Новый ОписаниеОповещения(
			"ПослеЗаписиПродолжениеПослеПредупреждения",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ПоказатьПредупреждение(ОписаниеПредупреждения,
			НСтр("ru = 'Документы с данным проектом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'"));
		Возврат;	
	КонецЕсли;	

	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПродолжениеПослеПредупреждения(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);

	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

/////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СсылкаНаВнешнийФайлНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
		ЗапуститьПриложение(Объект.СсылкаНаВнешнийФайл);
	ИначеЕсли ТипЗнч(Объект.СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, Объект.СсылкаНаВнешнийФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзменении(Элемент)
	
	ПолучитьРабочуюДату(Объект.ТекущийПланОкончание, "Объект.ТекущийПланОкончание", Ложь);
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыПриИзменении(Элемент)
	
	ВывестиИнфоНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзменении(Элемент)
	
	ПолучитьРабочуюДату(Объект.ТекущийПланНачало, "Объект.ТекущийПланНачало", Истина);
		
КонецПроцедуры


&НаКлиенте
Процедура ПроектнаяКомандаИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель,,Истина,,,
		Элементы.ПроектнаяКоманда.ТекущиеДанные.ОсновнойОбъектАдресации, 
		Элементы.ПроектнаяКоманда.ТекущиеДанные.ДополнительныйОбъектАдресации,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущийДанные = Элементы.ПроектнаяКоманда.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
		
		ВыбранноеЗначение = ТекущийДанные.Исполнитель;
	Иначе  
		ТекущийДанные = Элементы.ПроектнаяКоманда.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст,,Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПроектнаяКоманда.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущиеДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектнаяКомандаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.ПроектнаяКоманда.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;	
	
КонецПроцедуры


///////////////////////////////////////
// КОМАНДЫ ФОРМЫ
                  
&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлан(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПланПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Для перехода к плану проект необходимо записать. Выполнить запись?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Ок);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Справочник.ПроектныеЗадачи.Форма.ФормаПланаПроекта", ПараметрыФормы);

КонецПроцедуры	

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ПроектЗавершен,
		ЭтаФорма);
		
КонецПроцедуры
			
&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПараметрыОповещения = Неопределено;
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		// установка связей
		СвязиДокументов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.ПисьмоОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProject(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьИзMSProjectПродолжение",
		ЭтотОбъект);	

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ОткрытьФорму("Обработка.ИмпортПроектаИзMicrosoftProject.Форма", ПараметрыФормы,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзMSProjectПродолжение(Результат, Параметры) Экспорт 
	
	Прочитать();

КонецПроцедуры	

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуПроекта(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуПроектаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуПроектаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуПроектаСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуПроектаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

 &НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСРабочимиГруппамиКлиент.ПроектПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ПроектРабочаяГруппаУчастникНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элементы.РабочаяГруппаТаблица,
		Ложь);
	
КонецПроцедуры

 &НаСервере
Процедура РабочаяГруппаТаблицаОбработкаВыбораСервер(ВыбранноеЗначение)
	РаботаСРабочимиГруппами.ДокументОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Копировать задачи проекта ""%1""?'"),
		Строка(Объект.Ссылка));
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СкопироватьПродолжение",
		ЭтотОбъект);	

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, КопироватьЗадачи", Объект.Ссылка, Истина);
		ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", Объект.Ссылка);
	    ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор участников проектной команды'"));
	ПараметрыФормы.Вставить("ВыбранныеЗаголовок", НСтр("ru = 'Выбранные участники проектной команды'"));
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ТолькоПростыеРоли", Ложь);
	ПараметрыФормы.Вставить("БезВнешнихРолей", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьФункции", Ложь);
	ПараметрыФормы.Вставить("ПодбиратьГруппыПользователей", Ложь);
	ПараметрыФормы.Вставить("ПоказыватьКорреспондентов", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПодборИсполнителей", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроектаПриИзменении(Элемент)
	
	ПриИзмененииВидПроекта();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПроекта()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ДокументПриИзмененииВидаДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ДокументПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

