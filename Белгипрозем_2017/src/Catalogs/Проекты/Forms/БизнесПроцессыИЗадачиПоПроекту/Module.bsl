
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
		
	ДобавитьЗадачиПоПроекту(Дерево, Параметры.Проект);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоЗадач);
	
	Дерево = РеквизитФормыВЗначение("ДеревоВспомогательныхЗадач");
	Дерево.Строки.Очистить();
		
	ДобавитьВспомогательныеЗадачиПоПроекту(Дерево, Параметры.Проект);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоВспомогательныхЗадач);
	
	УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы());
	
	УстановитьТекущуюСтрокуВспомогательныхЗадач(
		ДеревоВспомогательныхЗадач.ПолучитьЭлементы());	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекущуюСтроку(ЭлементыДерева)
	
	Если Элементы.Количество() > 0 Тогда
		Для каждого Эл Из ЭлементыДерева Цикл
			Если Эл.Ссылка = ТекущаяСтрокаВДереве Тогда
				Элементы.ДеревоЗадач.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
				Возврат;
			Иначе	
				УстановитьТекущуюСтроку(Эл.ПолучитьЭлементы());
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекущуюСтрокуВспомогательныхЗадач(ЭлементыДерева)
	
	Если Элементы.Количество() > 0 Тогда
		Для каждого Эл Из ЭлементыДерева Цикл
			Если Эл.Ссылка = ТекущаяСтрокаВДеревеВспомогательныхЗадач Тогда
				Элементы.ДеревоВспомогательныхЗадач.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
				Возврат;
			Иначе	
				УстановитьТекущуюСтрокуВспомогательныхЗадач(Эл.ПолучитьЭлементы());
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПоПроекту(Дерево, Проект)
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК Остановлен						
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.Проект = &Проект
			|   И БизнесПроцессы.ГлавнаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
			|   И БизнесПроцессы.ПометкаУдаления = Ложь
			|
			|УПОРЯДОЧИТЬ ПО
			|	БизнесПроцессы.Дата";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Проект", Проект);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = Дерево.Строки.Добавить();
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
			Строка.ПринятаКИсполнению = Истина;
			Строка.Тип = 0;
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Неопределено);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьВспомогательныеЗадачиПоПроекту(Дерево, Проект)
	
	// Получение списка предметов
	МассивПредметов = Новый Массив();
	МассивПредметов.Добавить(Проект);
	Выборка = Справочники.ПроектныеЗадачи.Выбрать(, Проект);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления Тогда
			МассивПредметов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК Остановлен						
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.Предметы.Предмет В (&СписокПредметов)
			|   И БизнесПроцессы.ГлавнаяЗадача = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
			|   И БизнесПроцессы.ПометкаУдаления = Ложь
			|
			|УПОРЯДОЧИТЬ ПО
			|	БизнесПроцессы.Дата";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		
		Запрос.УстановитьПараметр("СписокПредметов", МассивПредметов);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = Дерево.Строки.Добавить();
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
			Строка.ПринятаКИсполнению = Истина;
			Строка.Тип = 0;
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Неопределено);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК Остановлен						
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = Ветвь.Строки.Добавить();
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
			Строка.ПринятаКИсполнению = Истина;
			Строка.Тип = 0;
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, ЗадачаСсылка);
			
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(БизнесПроцессСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Наименование,
		|	Задачи.Исполнитель,
		|	Задачи.РольИсполнителя,
		|	Задачи.СрокИсполнения,
		|	Задачи.Выполнена,
		|	Задачи.ПринятаКИсполнению,
		|	ВЫБОР
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК Остановлен					
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоВедущаяЗадача(ВыборкаДетальныеЗаписи.Ссылка)
			И НЕ (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Исполнитель)
				ИЛИ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РольИсполнителя)) Тогда
				
			Продолжить;
		КонецЕсли;
		
		НайденнаяВетвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка", Истина);
		Если НайденнаяВетвь <> Неопределено Тогда
			Дерево.Строки.Удалить(НайденнаяВетвь);
		КонецЕсли;	
			
		Строка = Неопределено;
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе	
			Строка = Ветвь.Строки.Добавить();
		КонецЕсли;
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
		Строка.Тип = 1;
		Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
		Строка.Выполнена = ВыборкаДетальныеЗаписи.Выполнена;
		Строка.ПринятаКИсполнению = ВыборкаДетальныеЗаписи.ПринятаКИсполнению;
		Если ВыборкаДетальныеЗаписи.СрокИсполнения <> '00010101000000'
			И ВыборкаДетальныеЗаписи.СрокИсполнения < ТекущаяДата() Тогда
			Строка.Просрочена = Истина;
		КонецЕсли;				
		Если ВыборкаДетальныеЗаписи.Исполнитель.Пустая() Тогда
			Строка.Исполнитель = ВыборкаДетальныеЗаписи.РольИсполнителя;
		Иначе	
			Строка.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
		КонецЕсли;	
		
		ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюСтрокуДереваЗадач()
	
	Если ТекущаяСтрокаВДереве <> Неопределено Тогда
		Если ТипЗнч(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		Иначе	
			ПоказатьЗначение(, Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюСтрокуДереваВспомогательныхЗадач()
	
	Если ТекущаяСтрокаВДеревеВспомогательныхЗадач <> Неопределено Тогда
		Если ТипЗнч(Элементы.ДеревоВспомогательныхЗадач.ТекущиеДанные.Ссылка) 
			= Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(
				Элементы.ДеревоВспомогательныхЗадач.ТекущиеДанные.Ссылка);
		Иначе	
			ПоказатьЗначение(, Элементы.ДеревоВспомогательныхЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач = РаботаСБизнесПроцессами.ПолучитьИспользованиеДатыИВремениВСрокахЗадач();
	Элементы.ДеревоЗадачСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.ДеревоВспомогательныхЗадачСрокИсполнения.Формат = 
		?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	ЗаполнитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		ИЛИ ИмяСобытия = "БизнесПроцессИзменен" Тогда 
		ЗаполнитьДеревоЗадач();
		Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		Для каждого Строка ИЗ ДеревоВспомогательныхЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоВспомогательныхЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	Иначе	
		Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		Для каждого Строка ИЗ ДеревоВспомогательныхЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоВспомогательныхЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВспомогательныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьТекущуюСтрокуДереваВспомогательныхЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДереве = Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВспомогательныхЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоВспомогательныхЗадач.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДеревеВспомогательныхЗадач = Элементы.ДеревоВспомогательныхЗадач.ТекущиеДанные.Ссылка;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЗадач()
	
	ЗаполнитьДеревоЗадач();
	Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	Для Каждого Строка Из ДеревоВспомогательныхЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоВспомогательныхЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВспомогательнуюЗадачу(Команда)
	
	ОткрытьТекущуюСтрокуДереваВспомогательныхЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	МассивЗадач = Новый Массив;
	Для каждого Эл Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Строка = ДеревоЗадач.НайтиПоИдентификатору(Эл);
		МассивЗадач.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнениюВспомогательнуюЗадачу(Команда)
	
	МассивЗадач = Новый Массив;
	Для каждого Эл Из Элементы.ДеревоВспомогательныхЗадач.ВыделенныеСтроки Цикл
		Строка = ДеревоВспомогательныхЗадач.НайтиПоИдентификатору(Эл);
		МассивЗадач.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	ОбновитьДеревоЗадач();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	МассивЗадач = Новый Массив;
	Для каждого Эл Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Строка = ДеревоЗадач.НайтиПоИдентификатору(Эл);
		МассивЗадач.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнениюВспомогательнойЗадачи(Команда)
	
	МассивЗадач = Новый Массив;
	Для каждого Эл Из Элементы.ДеревоВспомогательныхЗадач.ВыделенныеСтроки Цикл
		Строка = ДеревоВспомогательныхЗадач.НайтиПоИдентификатору(Эл);
		МассивЗадач.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

