#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Автор, Документ, Папка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	// Заполнение дескриптора для элемента справочника
	ДескрипторДоступа.ВладелецОбъекта = ОбъектДоступа.Документ;
	ДескрипторПапки = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
		ОбъектДоступа.Папка);
	Если ЗначениеЗаполнено(ДескрипторПапки) Тогда
		ДескрипторДоступа.ДескрипторВладельца = ДескрипторПапки;
	КонецЕсли;
	
	ДескрипторДоступа.ДобавитьПользователя("Автор", ОбъектДоступа.Автор);
	
	// Рабочая группа
	РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектДоступа.Ссылка);
	Для каждого Эл Из РабочаяГруппа Цикл
		Строка = ДескрипторДоступа.РабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, указывая тем самы что этот объект сам заполняет свои права 
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДескрипторДоступа.ВладелецОбъекта) Тогда
		
		ТипВладельца = ТипЗнч(ДескрипторДоступа.ВладелецОбъекта);
		
		СоответствиеПравВладельца = Новый Соответствие;
		СоответствиеПравРаздела= Новый Соответствие;
		
		Если ТипВладельца = Тип("СправочникСсылка.Файлы") Тогда
			
			ВладелецФайла = ДескрипторДоступа.ВладелецОбъекта.ВладелецФайла;
			ДескрипторДоступаФайла = ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаФайлаПоВладельцу(
				ВладелецФайла);
			
			// Копирование прав файла
			Если ЗначениеЗаполнено(ДескрипторДоступаФайла) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПраваПоДескрипторамДоступа.Добавление,
					|	ПраваПоДескрипторамДоступа.Изменение,
					|	ПраваПоДескрипторамДоступа.Удаление,
					|	ПраваПоДескрипторамДоступа.УправлениеПравами,
					|	ПраваПоДескрипторамДоступа.Чтение,
					|	ПраваПоДескрипторамДоступа.Пользователь
					|ИЗ
					|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
					|ГДЕ
					|	ПраваПоДескрипторамДоступа.Дескриптор = &Дескриптор";
				
				Запрос.УстановитьПараметр("Дескриптор", ДескрипторДоступаФайла);
				Результат = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
					ЗаполнитьЗначенияСвойств(ПраваПользователя, ВыборкаДетальныеЗаписи);
					
					ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
						СоответствиеПравВладельца,
						ВыборкаДетальныеЗаписи.Пользователь,
						Неопределено,
						Неопределено,
						ПраваПользователя);
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипВладельца = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ПраваЗадачи = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъекту(
				ДескрипторДоступа.ВладелецОбъекта, Истина);
			
			Для Каждого СтрПрав Из ПраваЗадачи Цикл
				
				ПраваПользователя = Новый Структура(
					"Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
					Истина, Ложь, Ложь, Ложь, Ложь);
				
				ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
					СоответствиеПравВладельца,
					СтрПрав.Пользователь,
					Неопределено,
					Неопределено,
					ПраваПользователя);
				
			КонецЦикла;
			
		Иначе
			
			ДокументооборотПраваДоступа.СкопироватьПраваОбъекта(ДескрипторДоступа.ВладелецОбъекта, СоответствиеПравВладельца);
			
		КонецЕсли;
		
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваДоступаСтандартно(
			ДескрипторДоступа, 
			СоответствиеПравРаздела, 
			Неопределено);
		
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'По предмету обсуждения'"));
		КонецЕсли;
		
		// Право на чтение владельца даёт право читать и писать новые сообщения в тему.
		// Право на изменение и удаление в разделе, если есть право на чтение владельца,
		// даёт право на изменение и удаление темы.
		Для каждого Эл Из СоответствиеПравВладельца Цикл
			
			Если Эл.Значение.Чтение Тогда
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
				НайденноеЗначение = СоответствиеПравРаздела.Получить(Эл.Ключ);
				Если НайденноеЗначение <> Неопределено Тогда
					
					ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
					
				Иначе
					
					ПраваПользователя.Изменение = Ложь;
					ПраваПользователя.Удаление = Ложь;
					ПраваПользователя.УправлениеПравами = Ложь;
					
				КонецЕсли;
				
				ПраваПользователя.Чтение = Истина;
				ПраваПользователя.Добавление = Истина;
				
				ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
					ПраваДоступа,
					Эл.Ключ,
					Неопределено,
					Неопределено,
					ПраваПользователя);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавление автора темы
		Для каждого Эл Из ДескрипторДоступа.Пользователи Цикл
			
			Если Эл.Ключ = "Автор" Тогда
				
				НайденноеЗначение = ПраваДоступа.Получить(Эл.Пользователь);
				Если НайденноеЗначение <> Неопределено И НайденноеЗначение.Чтение Тогда
					
					ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
					ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
					ПраваПользователя.Изменение = Истина;
					ПраваПользователя.Удаление = Истина;
					
					ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
						ПраваДоступа,
						Эл.Пользователь,
						Неопределено,
						Неопределено,
						ПраваПользователя);
					
					Если ПротоколРасчетаПрав <> Неопределено Тогда
						ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Автор темы'"));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение(НСтр("ru = 'Неизвестный ключ пользователя.'"));
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваДоступаСтандартно(
			ДескрипторДоступа, 
			ПраваДоступа, 
			ПротоколРасчетаПрав);
		
		// Добавление рабочей группы или всех пользователей
		Если ДескрипторДоступа.РабочаяГруппа.Количество() > 0 Тогда
			
			НовыеПраваДоступа = Новый Соответствие;
			
			Для каждого Эл Из ДескрипторДоступа.РабочаяГруппа Цикл
				
				Если ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
					
					НайденноеЗначение = ПраваДоступа.Получить(Эл.Участник);
					Если НайденноеЗначение <> Неопределено Тогда
						
						ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
						ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
						
						ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
							НовыеПраваДоступа,
							Эл.Участник,
							Неопределено,
							Неопределено,
							ПраваПользователя);
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
					
					// Обходим всех пользователей группы
					СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Эл.Участник);
					Для каждого ЭлГруппы Из СоставГруппы Цикл
						
						НайденноеЗначение = ПраваДоступа.Получить(ЭлГруппы.Пользователь);
						Если НайденноеЗначение <> Неопределено Тогда
							
							ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
							ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
							
							ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
								НовыеПраваДоступа,
								ЭлГруппы.Пользователь,
								Неопределено,
								Неопределено,
								ПраваПользователя);
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда	
					
					// Обходим всех исполнителей роли
					ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(Эл.Участник, Эл.ОсновнойОбъектАдресации, Эл.ДополнительныйОбъектАдресации);
					Для каждого ИсполнительРоли Из ИсполнителиРоли Цикл
						
						НайденноеЗначение = ПраваДоступа.Получить(ИсполнительРоли.Исполнитель);
						Если НайденноеЗначение <> Неопределено Тогда
							
							ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
							ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
							
							ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
								НовыеПраваДоступа,
								ИсполнительРоли.Исполнитель,
								Неопределено,
								Неопределено,
								ПраваПользователя);
								
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПраваДоступа = НовыеПраваДоступа;
			
			// Добавление рабочей группы в протокол расчета прав
			Если ПротоколРасчетаПрав <> Неопределено Тогда
				ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Рабочая группа темы'"));
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавление автора темы
		Для каждого Эл Из ДескрипторДоступа.Пользователи Цикл
			
			Если Эл.Ключ = "Автор" Тогда
				
				НайденноеЗначение = ПраваДоступа.Получить(Эл.Пользователь);
				Если НайденноеЗначение <> Неопределено И НайденноеЗначение.Чтение Тогда
					
					ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
					ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
					ПраваПользователя.Изменение = Истина;
					ПраваПользователя.Удаление = Истина;
					
					ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
						ПраваДоступа,
						Эл.Пользователь,
						Неопределено,
						Неопределено,
						ПраваПользователя);
					
					Если ПротоколРасчетаПрав <> Неопределено Тогда
						ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Автор темы'"));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение(НСтр("ru = 'Неизвестный ключ пользователя.'"));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак достпности печати по-комплектно
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Карточка",
			"Тема обсуждения",
			ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Справочник.ТемыОбсуждений.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаСообщения";
	
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.ТемыОбсуждений.ПФ_MXL_Карточка");
	ОбластьШапкаТемы = Макет.ПолучитьОбласть("ШапкаТемы");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заполнение реквизитов темы обсуждения
		ОбластьШапкаТемы.Параметры.Название = Строка(ОбъектПечати) + " (" + ТипЗнч(ОбъектПечати) + ")" ;
		ОбластьШапкаТемы.Параметры.Автор = Строка(ОбъектПечати.Автор);
		ОбластьШапкаТемы.Параметры.Дата = ОбъектПечати.ДатаСоздания;
		ОбластьШапкаТемы.Параметры.Раздел = ОбъектПечати.Родитель;
		Если ЗначениеЗаполнено(ОбъектПечати.Документ) Тогда
			ОбластьШапкаТемы.Параметры.Предмет = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 (%2)",
					Строка(ОбъектПечати.Документ),
					ТипЗнч(ОбъектПечати.Документ));	
		Иначе
			ОбластьШапкаТемы.Параметры.Предмет = НСтр("ru = 'без предмета'");	
		КонецЕсли;
		ОбластьШапкаТемы.Параметры.ЭтоЗакрытаяТема = 
			?(ОбъектПечати.Закрытая, НСтр("ru = 'Это закрыта тема'"), НСтр("ru = 'Это открытая тема'"));
					
		ПервоеСообщениеТемы = РаботаСОбсуждениями.НайтиПервоеСообщениеТемы(ОбъектПечати);
		ОбластьШапкаТемы.Параметры.Текст = ПервоеСообщениеТемы.ТекстСообщения;
		
		ДвоичныеДанныеФото = ОбъектПечати.Автор.ФизЛицо.ФайлФотографии.Получить();
		Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
			КартинкаФото = Новый Картинка(ДвоичныеДанныеФото);
		Иначе
			КартинкаФото = БиблиотекаКартинок.ПользовательБезФото;
		КонецЕсли;
		ОбластьШапкаТемы.Рисунки.ФотоАвтора.Картинка = КартинкаФото;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТемы);
		
		// Заполнение рабочей группы темы
		РабочаяГруппаТемы = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектПечати);
		Если РабочаяГруппаТемы.Количество() > 0 Тогда
			ОбластьРабочаяГруппаШапка = Макет.ПолучитьОбласть("РабочаяГруппаШапка");
			ТабличныйДокумент.Вывести(ОбластьРабочаяГруппаШапка);
			Для Каждого УчастникРабочейГруппы Из РабочаяГруппаТемы Цикл
				ОбластьРабочаяГруппаУчастник = Макет.ПолучитьОбласть("РабочаяГруппаУчастник");
				Если ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Если ЗначениеЗаполнено(УчастникРабочейГруппы.ОсновнойОбъектАдресации)
						И ЗначениеЗаполнено(УчастникРабочейГруппы.ДополнительныйОбъектАдресации) Тогда
						ОбластьРабочаяГруппаУчастник.Параметры.УчастникРабочейГруппы =
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2, %3)",
								УчастникРабочейГруппы.Участник,
								УчастникРабочейГруппы.ОсновнойОбъектАдресации,
								УчастникРабочейГруппы.ДополнительныйОбъектАдресации);
					ИначеЕсли ЗначениеЗаполнено(УчастникРабочейГруппы.ОсновнойОбъектАдресации) Тогда
						ОбластьРабочаяГруппаУчастник.Параметры.УчастникРабочейГруппы =
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
								УчастникРабочейГруппы.Участник,
								УчастникРабочейГруппы.ОсновнойОбъектАдресации);		
					Иначе
						ОбластьРабочаяГруппаУчастник.Параметры.УчастникРабочейГруппы = УчастникРабочейГруппы.Участник;
					КонецЕсли;
				Иначе
					ОбластьРабочаяГруппаУчастник.Параметры.УчастникРабочейГруппы = УчастникРабочейГруппы.Участник;
				КонецЕсли;
				ОбластьРабочаяГруппаУчастник.Параметры.ТипУчастника = ТипЗнч(УчастникРабочейГруппы.Участник);
				ТабличныйДокумент.Вывести(ОбластьРабочаяГруппаУчастник);
			КонецЦикла;
		КонецЕсли;
		
		// Получение информации о последнем сообщении темы
		СведенияОТеме = РаботаСОбсуждениями.ПолучитьСведенияОТеме(ОбъектПечати);
	
		Если СведенияОТеме <> Неопределено Тогда
			КоличествоОтветов = СведенияОТеме.КоличествоСообщений;
			ДатаПоследнегоСообщения = СведенияОТеме.ДатаПоследнегоСообщения;
			АвторПоследнегоСообщения = СведенияОТеме.АвторПоследнегоСообщения;
			
			ОбластьПоследнееСообщение = Макет.ПолучитьОбласть("ПоследнееСообщение");
			ОбластьПоследнееСообщение.Параметры.АвторПоследнегоСообщения = АвторПоследнегоСообщения;
			ОбластьПоследнееСообщение.Параметры.ДатаПоследнегоСообщения = ДатаПоследнегоСообщения;
			ОбластьПоследнееСообщение.Параметры.ОтветовВсего = КоличествоОтветов;
						
			ЗапросПоследнееСообщение = Новый Запрос;
			ЗапросПоследнееСообщение.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СообщенияОбсуждений.ТекстСообщения
				|ИЗ
				|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
				|ГДЕ
				|	СообщенияОбсуждений.ВладелецСообщения = &Тема
				|
				|УПОРЯДОЧИТЬ ПО
				|	СообщенияОбсуждений.ДатаСоздания УБЫВ";
			ЗапросПоследнееСообщение.УстановитьПараметр("Тема", ОбъектПечати);
			Выборка = ЗапросПоследнееСообщение.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбластьПоследнееСообщение.Параметры.ТекстПоследнегоСообщения = Выборка.ТекстСообщения;
			Иначе
				ОбластьПоследнееСообщение.Параметры.ТекстПоследнегоСообщения = "";
			КонецЕсли;
			
			ДвоичныеДанныеФото = АвторПоследнегоСообщения.ФизЛицо.ФайлФотографии.Получить();
			Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
				КартинкаФото = Новый Картинка(ДвоичныеДанныеФото);
			Иначе
				КартинкаФото = БиблиотекаКартинок.ПользовательБезФото;
			КонецЕсли;
			ОбластьПоследнееСообщение.Рисунки.ФотоАвтораПоследнегоСообщения.Картинка = КартинкаФото;
			
			ТабличныйДокумент.Вывести(ОбластьПоследнееСообщение);
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОбъектПечати);
	КонецЦикла;		

	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

// Создаёт новую тему
Функция СоздатьНовуюТему(РеквизитыТемы, Автор = Неопределено, РабочаяГруппаДобавить = Неопределено, РабочаяГруппаУдалить = Неопределено) Экспорт
	
	НоваяТема = СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(НоваяТема, РеквизитыТемы);
	
	Наименование = РеквизитыТемы.Наименование;
	Если Не ЗначениеЗаполнено(НоваяТема.Наименование) И ЗначениеЗаполнено(НоваяТема.Документ) Тогда
		НоваяТема.Наименование = НСтр("ru = 'Обсуждение ""%1""'");
		НоваяТема.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НоваяТема.Наименование, НоваяТема.Документ);
	КонецЕсли;
	
	НоваяТема.ТемаДокумента = ЗначениеЗаполнено(РеквизитыТемы.Документ);
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	НоваяТема.Автор = Автор;
	
	Если ЗначениеЗаполнено(РабочаяГруппаДобавить) Тогда
		НоваяТема.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочаяГруппаУдалить) Тогда
		 НоваяТема.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	КонецЕсли;
	
	НоваяТема.Записать();
	
	Возврат НоваяТема.Ссылка;
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Тема'");
	
КонецФункции

// Возвращает структуру реквизитов темы форума.
//
// Возвращаемое значение:
//  Структура - Структура реквизитов темы форума.
//
Функция ПолучитьСтруктуруРеквизитов() Экспорт
	
	СтруктураРеквизитов = Новый Структура("Наименование, Документ, Папка, Закрытая");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает структуру полей темы обсуждений
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Закрытая
//     Документ
//     Автор
//     ДатаСоздания
//     ТемаДокумента
//
Функция ПолучитьСтруктуруТемыОбсуждений() Экспорт
	
	СтруктураТемыОбсуждения = Новый Структура;
	СтруктураТемыОбсуждения.Вставить("Наименование");
	СтруктураТемыОбсуждения.Вставить("Закрытая");
	СтруктураТемыОбсуждения.Вставить("Документ");
	СтруктураТемыОбсуждения.Вставить("Папка");
	СтруктураТемыОбсуждения.Вставить("Автор");
	СтруктураТемыОбсуждения.Вставить("ДатаСоздания");
	СтруктураТемыОбсуждения.Вставить("ТемаДокумента");
	СтруктураТемыОбсуждения.Вставить("ТекстСообщения");
	
	Возврат СтруктураТемыОбсуждения;
	
КонецФункции

// Создает и записывает в БД тему обсуждений
//
// Параметры:
//   СтруктураТемыОбсуждения - Структура - структура полей темы обсуждений.
//
// Возвращаемое значение:
//   СправочникСсылка.ТемыОбсуждений
//
Функция СоздатьТемуОбсуждений(СтруктураТемыОбсуждения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тема");
	Результат.Вставить("ПервоеСообщениеТемы");
	
	Попытка
		
		НачатьТранзакцию();
		
		НоваяТемаОбсуждений = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НоваяТемаОбсуждений, СтруктураТемыОбсуждения);
		НоваяТемаОбсуждений.Записать();
		
		СправочникСообщения = Справочники.СообщенияОбсуждений;
		НовоеСообщение = СправочникСообщения.СоздатьЭлемент();
		НовоеСообщение.ВладелецСообщения = НоваяТемаОбсуждений.Ссылка;
		НовоеСообщение.ПервоеСообщениеТемы = Истина;
		
		Если ЗначениеЗаполнено(СтруктураТемыОбсуждения.ТекстСообщения) Тогда
			НовоеСообщение.ТекстСообщения = СтруктураТемыОбсуждения.ТекстСообщения;
		Иначе
			НовоеСообщение.ТекстСообщения = НоваяТемаОбсуждений.Наименование;
		КонецЕсли;
		
		НовоеСообщение.Записать();
		
		Результат.Тема = НоваяТемаОбсуждений.Ссылка;
		Результат.ПервоеСообщениеТемы = НовоеСообщение.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли