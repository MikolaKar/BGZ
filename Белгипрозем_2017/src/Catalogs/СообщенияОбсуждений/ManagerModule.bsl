#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"ВладелецСообщения,
		|Автор";
	
КонецФункции

// Заполняет переданный дескриптор доступа
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	// Заполнение дескриптора для элемента справочника
	ДескрипторВладельца = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
		ОбъектДоступа.ВладелецСообщения);
	Если ЗначениеЗаполнено(ДескрипторВладельца) Тогда
		ДескрипторДоступа.ДескрипторВладельца = ДескрипторВладельца;
	КонецЕсли;
	
	ДескрипторДоступа.ДобавитьПользователя("Автор", ОбъектДоступа.Автор);
	
КонецПроцедуры

// Возвращает Истина, указывая тем самы что этот объект сам заполняет свои права 
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДескрипторДоступа.ДескрипторВладельца) Тогда
		
		СоответствиеПравВладельца = Новый Соответствие;
		СоответствиеПравРаздела = Новый Соответствие;
		
		СкопироватьПраваДескриптора(ДескрипторДоступа.ДескрипторВладельца, СоответствиеПравВладельца);
		
		Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПраваДоступаСтандартно(
			ДескрипторДоступа.ДескрипторВладельца,
			СоответствиеПравРаздела,
			Неопределено);
		
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'По теме сообщения'"));
		КонецЕсли;
		
		Для каждого Эл Из СоответствиеПравВладельца Цикл
			
			Если Эл.Значение.Чтение Тогда
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
				ПраваПользователя.Чтение = Эл.Значение.Чтение;
				ПраваПользователя.Добавление = Ложь;
				
				НайденноеЗначение = СоответствиеПравРаздела.Получить(Эл.Ключ);
				Если НайденноеЗначение <> Неопределено Тогда
					ПраваПользователя.Изменение = НайденноеЗначение.Изменение;
					ПраваПользователя.Удаление = НайденноеЗначение.Удаление;
					ПраваПользователя.УправлениеПравами = НайденноеЗначение.УправлениеПравами;
				Иначе
					ПраваПользователя.Изменение = Ложь;
					ПраваПользователя.Удаление = Ложь;
					ПраваПользователя.УправлениеПравами = Ложь;
				КонецЕсли;
				
				ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
					ПраваДоступа,
					Эл.Ключ,
					Неопределено,
					Неопределено,
					ПраваПользователя);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// Добавление автора сообщения
		Для каждого Эл Из ДескрипторДоступа.Пользователи Цикл
			
			Если Эл.Ключ = "Автор" Тогда
				
				НайденноеЗначение = СоответствиеПравВладельца.Получить(Эл.Пользователь);
				Если НайденноеЗначение <> Неопределено И НайденноеЗначение.Чтение Тогда
					
					ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
					ЗаполнитьЗначенияСвойств(ПраваПользователя, НайденноеЗначение);
					ПраваПользователя.Изменение = Истина;
					ПраваПользователя.Удаление = Истина;
					
					ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
						ПраваДоступа,
						Эл.Пользователь,
						Неопределено,
						Неопределено,
						ПраваПользователя);
					
					Если ПротоколРасчетаПрав <> Неопределено Тогда
						ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Автор сообщения'"));
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение(НСтр("ru = 'Неизвестный ключ пользователя.'"));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует права указанного дескриптора в указанные ПраваДоступа
Процедура СкопироватьПраваДескриптора(ДескрипторДоступа, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Эл из ПраваДоступа Цикл
		ВызватьИсключение НСтр("ru = 'Для копирования прав объекта указан не пустой набор прав.'");
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДескрипторДоступа) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПоДескрипторамДоступа.Добавление,
			|	ПраваПоДескрипторамДоступа.Изменение,
			|	ПраваПоДескрипторамДоступа.Удаление,
			|	ПраваПоДескрипторамДоступа.УправлениеПравами,
			|	ПраваПоДескрипторамДоступа.Чтение,
			|	ПраваПоДескрипторамДоступа.Пользователь
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Дескриптор = &Дескриптор";
		
		Запрос.УстановитьПараметр("Дескриптор", ДескрипторДоступа);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
			ПраваПользователя.Чтение = ВыборкаДетальныеЗаписи.Чтение;
			ПраваПользователя.Добавление = ВыборкаДетальныеЗаписи.Добавление;
			ПраваПользователя.Изменение = ВыборкаДетальныеЗаписи.Изменение;
			ПраваПользователя.Удаление = ВыборкаДетальныеЗаписи.Удаление;
			ПраваПользователя.УправлениеПравами = ВыборкаДетальныеЗаписи.УправлениеПравами;
			
			ПраваДоступа.Вставить(ВыборкаДетальныеЗаписи.Пользователь, ПраваПользователя);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак достпности печати по-комплектно
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Карточка",
			"Сообщение форума",
			ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Справочник.СообщенияОбсуждений.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаСообщения";
	
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.СообщенияОбсуждений.ПФ_MXL_Карточка");
	ОбластьКарточка = Макет.ПолучитьОбласть("Карточка");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьКарточка.Параметры.Автор = ОбъектПечати.Автор;
		ОбластьКарточка.Параметры.Дата = 
			?(ЗначениеЗаполнено(ОбъектПечати.ДатаИзменения), ОбъектПечати.ДатаИзменения, ОбъектПечати.ДатаСоздания);
		ОбластьКарточка.Параметры.Тема = Строка(ОбъектПечати.ВладелецСообщения);
		ОбластьКарточка.Параметры.Текст = ОбъектПечати.ТекстСообщения;
		
		ДвоичныеДанныеФото = ОбъектПечати.Автор.ФизЛицо.ФайлФотографии.Получить();
		Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
			КартинкаФото = Новый Картинка(ДвоичныеДанныеФото);
		Иначе
			КартинкаФото = БиблиотекаКартинок.ПользовательБезФото;
		КонецЕсли;
		
		ОбластьКарточка.Рисунки.Фото.Картинка = КартинкаФото;
        ТабличныйДокумент.Вывести(ОбластьКарточка);
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОбъектПечати);
	КонецЦикла;		

	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Сообщение'");
	
КонецФункции

#КонецОбласти

#КонецЕсли