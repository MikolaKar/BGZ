////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтаФорма.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;

	Элементы.СтраницыПодвал.ОтображениеСтраниц    = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Скроем не разделенные константы в разделенном режиме сервиса
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Элементы.ГруппаКонтекст.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83() Тогда
		Элементы.Сертификат.КнопкаСоздания = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СогласенСУсловиями = Истина;
	ЭлектронныеДокументыКлиентПереопределяемый.ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями);
	Если СогласенСУсловиями <> Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		ТекстПредупреждения = НСтр("ru = 'Для работы с помощником ввода соглашения через оператора Такском
                                    |необходимо установить расширение работы с криптографией.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Далее2.КнопкаПоУмолчанию = Истина;
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаСертификат) И Не БылЗаданВопросПриЗакрытии Тогда
		ТекстВопроса = НСтр("ru = 'При закрытии помощника данные не будут сохранены'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Закрыть");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Продолжить");
		Обработчик = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, СписокКнопок, 30, КодВозвратаДиалога.Нет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		БылЗаданВопросПриЗакрытии = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		УдалитьИзВременногоХранилища(СсылкаНаСертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = ВыбранноеЗначение;
		ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей
	
	// Механизм получения уникального идентификатора передает уникальный идентификатор
	// в виде строки в параметре оповещения с именем события
	// "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД"
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		ИдентификаторОрганизации = СокрЛП(Параметр);
		
		ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		Если Параметр = СертификатКриптографии Тогда
			ЗаполнитьРеквизитыСертификатаНаСервере(СертификатКриптографии);
			ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
			УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СброситьДанныеПоИдентификаторуОрганизации();
	НаименованиеСоглашения = Элементы.Организация.ТекстРедактирования;
	СброситьНастройкиСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатие(Элемент)
	
	ТекСертификат = СертификатКриптографии;
	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(ТекСертификат,
																					  Организация,
																					  "taxcomGetID",
																					  ИдентификаторОрганизации,
																					  ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	ТекСертификат = СертификатКриптографии;

	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(ТекСертификат,
																					  Организация,
																					  "taxcomPrivat",
																					  ИдентификаторОрганизации,
																					  ПарольПользователя,
																					  ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Назад(Команда)
	
	ОчиститьСообщения();
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиСоглашения Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата;
		Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.Далее2.КнопкаПоУмолчанию          = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДобавленияСертификата Тогда
		
		Обработчик = Новый ОписаниеОповещения("ТестСертификатаЗавершение", ЭтотОбъект);
		ТестСертификата(Обработчик);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТестСертификатаЗавершение(ТестВыполненУспешно, ПараметрыВыполнения) Экспорт
	
	Если НЕ ТестВыполненУспешно Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиСоглашения;
	Элементы.СтраницыПодвал.ТекущаяСтраница    = Элементы.СтраницаКнопкиГотово;
	Элементы.Готово.КнопкаПоУмолчанию          = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
  	Обработчик = Новый ОписаниеОповещения("ТестСоглашенияЗавершение", ЭтотОбъект);
	ТестСоглашения(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСоглашенияЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохранены = Истина;
	СохранитьПараметры(ДанныеСохранены);
	Если ДанныеСохранены Тогда
		ПоказатьОповещениеПользователя("Создание",
									   ПолучитьНавигационнуюСсылку(СсылкаНаСоглашение),
									   СсылкаНаСоглашение);
		Оповестить("ОбновитьСостояниеЭД");
		ПоказатьЗначение(, СсылкаНаСоглашение);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаКлиенте(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат не найден в хранилище личных.
                                    |Установите сертификат самостоятельно или обратитесь к администратору.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	СтруктураСертификата.Вставить("ДвоичныеДанныеСертификата", Сертификат.Выгрузить());
	
	Возврат СтруктураСертификата;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСертификатПоОтпечаткуНаКлиенте(Отпечаток)
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
	СсылкаНаСертификат = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВидимостьЭлементовСтраницыСертификата()
	
	ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата();
	
	Элементы.НаименованиеСертификата.ТолькоПросмотр   = Истина;
	Элементы.Фамилия.ТолькоПросмотр                   = Истина;
	Элементы.Имя.ТолькоПросмотр                       = Истина;
	Элементы.Отчество.ТолькоПросмотр                  = Истина;
	Элементы.ДолжностьПоСертификату.ТолькоПросмотр    = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиГиперссылокСтраницыСертификата()
	
	Если НЕ ОграничитьДоступКСертификату Тогда
		ТекстГиперссылкиПользователя = Нстр("ru = 'Доступен всем пользователям.'");
	Иначе
		ТекстГиперссылкиПользователя = Нстр("ru = 'Доступен пользователю:'") + " "
									+ ?(ЗначениеЗаполнено(Пользователь), Пользователь, Нстр("ru = '<Выбрать пользователя>'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСертификата(ОписаниеОповещения)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
			,
			"Организация",
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеСертификата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Наименование сертификата"),
			,
			"НаименованиеСертификата",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
			,
			"СертификатКриптографии",
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фамилия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Фамилия"),
			,
			"Фамилия",
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Имя) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Имя"),
			,
			"Имя",
			,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Должность"),
			,
			"ДолжностьПоСертификату",
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Для дальнейших операций необходим пароль сертификата.
	Представление = СертификатКриптографии;
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатКриптографии);

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	ПараметрыВыполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	Обработчик = Новый ОписаниеОповещения("ТестСертификатаПослеВводаПароляКСертификату", ЭтотОбъект, ПараметрыВыполнения);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьПарольКСертификатуАсинхронно(
		Представление,
		ПараметрыСертификата,
		НСтр("ru = 'Проверка сертификата'"),,
		Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСертификатаПослеВводаПароляКСертификату(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.ПарольПолучен Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Результат.СтруктураВозврата;
	ПараметрыСертификата = ПараметрыВыполнения.ПараметрыСертификата;
	
	ПараметрыСертификата.Вставить("ЗапомнитьПарольКСертификату", СтруктураВозврата.ЗапомнитьПарольКСертификату);
	ПараметрыСертификата.Вставить("ПарольПользователя",          СтруктураВозврата.ПарольПользователя);
	ПараметрыСертификата.Вставить("НастройкиКриптографии",       СтруктураВозврата.НастройкиКриптографии);
	
	ТекПарольПользователя = Неопределено;
	ТекПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	ЗапомнитьПарольКСертификату = ПараметрыСертификата.ЗапомнитьПарольКСертификату;
	
	Результат = ТестСертификатаНаКлиенте(ТекПарольПользователя);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Результат);
	
КонецПроцедуры
	
&НаСервере
Функция Отпечаток(СсылкаНаСертификат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСертификат, "Отпечаток");
	
КонецФункции

&НаКлиенте
Функция ТестСертификатаНаКлиенте(ТекущийПароль)
			
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на клиенте.'");
	
	Отпечаток = Отпечаток(СертификатКриптографии);
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	МенеджерКриптографииДляХранилища = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
	ХранилищеСертификатов = МенеджерКриптографииДляХранилища.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	НастройкиКриптографии = РаботаСЭП.ПрофильНастроекКриптографииПоСертификату(Отпечаток);
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь, НастройкиКриптографии);
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ТекущийПароль;
	
	Результат = Истина;
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на клиенте.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, 
																				 ТекстОшибки,
																				 КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	РезультатТеста = "";
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на клиенте.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		Результат = Ложь;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	// Блок проверки ЭП.
	РезультатТеста = "";
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭП на клиенте.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(Сертификат.Отпечаток, Сертификат);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, Сертификат.Отпечаток, ДвоичныеДанные);
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
																				 ОписаниеТеста,
																				 РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СброситьДанныеПоИдентификаторуОрганизации()
	
	Если Элементы.ИдентификаторОрганизации.Видимость = Ложь Тогда
		ИдентификаторОрганизации = "";
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиСертификата()
	
	НазначениеСертификата                             = "";
	НаименованиеСертификата                           = "";
	ДатаОкончания                                     = Дата(1,1,1);
	ОграничитьДоступКСертификату                      = Ложь;
	Пользователь                                      = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	Фамилия                                           = "";
	Имя                                               = "";
	Отчество                                          = "";
	ДолжностьПоСертификату                            = "";
	Элементы.Фамилия.ТолькоПросмотр                   = Ложь;
	Элементы.Имя.ТолькоПросмотр                       = Ложь;
	Элементы.Отчество.ТолькоПросмотр                  = Ложь;
	Элементы.ДолжностьПоСертификату.ТолькоПросмотр    = Ложь;
	
	Элементы.НаименованиеСертификата.ТолькоПросмотр   = Ложь;
	
	УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСоглашения(ОписаниеОповещения)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(НаименованиеСоглашения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Наименование соглашения"),
			,
			"НаименованиеСоглашения",
			,
			Отказ);
	КонецЕсли;
	
	Если Элементы.ИдентификаторОрганизации.Видимость И НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Идентификатор организации"),
			,
			"ИдентификаторОрганизации",
			,
			Отказ);
	ИначеЕсли Элементы.ИдентификаторОрганизации.Видимость И ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ИдентификаторОрганизации = СокрЛП(ИдентификаторОрганизации);
		ДлинаИдентификатора = СтрДлина(ИдентификаторОрганизации);
		Если ДлинаИдентификатора <> 46 Тогда
			ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения(
																	"Поле",
																	"КОРРЕКТНОСТЬ",
																	"Идентификатор организации",
																	,
																	,
																	Нстр("ru = 'Длина поля не равна 46.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
		
	Если Элементы.ИдентификаторОрганизации.Видимость = Ложь И НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо получить уникальный идентификатор участника обмена ЭД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Обработчик = Новый ОписаниеОповещения("ТестСвязиСТакскомЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ТестСвязиСТакском(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСТакскомЗавершение(ТестСвязиПройден, ПараметрыВыполнения) Экспорт
	
	Если НЕ ТестСвязиПройден Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения = Ложь)
	
	ЭлектроннаяПодпись.ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ФамилияИнициалыФизЛица(ФИОВладельца, Фамилия, Имя, Отчество)
	
	ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИОВладельца, Фамилия, Имя, Отчество);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСертификатаНаСервере(СертификатСсылка)
	
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатСсылка);
	
	ЗапомнитьПарольКСертификату  = РеквизитыСертификата.ЗапомнитьПарольКСертификату;
	НазначениеСертификата        = РеквизитыСертификата.Назначение;
	ОграничитьДоступКСертификату = РеквизитыСертификата.ОграничитьДоступКСертификату;
	ОрганизацияПоСертификату     = РеквизитыСертификата.Организация;
	ПарольПользователя           = РеквизитыСертификата.ПарольПользователя;
	НаименованиеСертификата      = РеквизитыСертификата.Наименование;
	Пользователь                 = РеквизитыСертификата.Пользователь;
	
	Фамилия                      = РеквизитыСертификата.Фамилия;
	Имя                          = РеквизитыСертификата.Имя;
	Отчество                     = РеквизитыСертификата.Отчество;
	ДолжностьПоСертификату       = РеквизитыСертификата.ДолжностьПоСертификату;
	
	ДатаОкончания                = РеквизитыСертификата.ДатаОкончания;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ОрганизацияПоСертификату;
	конецЕсли;
	СсылкаНаСертификат = ПоместитьВоВременноеХранилище(РеквизитыСертификата.ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметры(ДанныеСохранены)
	
	Попытка
		НачатьТранзакцию();
		
		НовыйСертификат = НовыйСертификатСсылка.ПолучитьОбъект();
		АктуальныеЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
		Для Каждого ЗначениеПеречисления Из АктуальныеЭД Цикл
			Если ЗначениеПеречисления = Перечисления.ВидыЭД.Ошибка
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.Подтверждение
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ДопДанные
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеПоручение
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросВыписки
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ШтампБанка
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.Квитанция
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросНочнойВыписки
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.АктВыполненныхРабот
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КаталогТоваров
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ВыпискаБанка Тогда
					Продолжить;
			КонецЕсли;
			
			Если НовыйСертификат.ВидыДокументов.Найти(ЗначениеПеречисления, "ВидДокумента") = Неопределено Тогда 
				НоваяСтрокаТЧ = НовыйСертификат.ВидыДокументов.Добавить();
				НоваяСтрокаТЧ.ВидДокумента = ЗначениеПеречисления;
				НоваяСтрокаТЧ.ИспользоватьДляПодписи =
					ЗначениеПеречисления = Перечисления.ВидыЭД.ИзвещениеОПолучении
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД;
			КонецЕсли;
		КонецЦикла;
		НовыйСертификат.Организация = Организация;
		НовыйСертификат.Записать();
			
		НовоеСоглашение = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
		НовоеСоглашение.ИдентификаторОрганизации = ИдентификаторОрганизации;
		НовоеСоглашение.Наименование             = НаименованиеСоглашения;
		НовоеСоглашение.Организация              = Организация;
		НоваяСтрока = НовоеСоглашение.СертификатыПодписейОрганизации.Добавить();
		НоваяСтрока.Сертификат = СертификатКриптографии;
		НовоеСоглашение.СпособОбменаЭД           = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		НовоеСоглашение.СтатусСоглашения         = Перечисления.СтатусыСоглашенийЭД.Действует;
		Если НовоеСоглашение.СоглашениеУникально() Тогда
			НовоеСоглашение.Записать();
		Иначе
			ОтменитьТранзакцию();
			ДанныеСохранены = Ложь;
			Возврат;
		КонецЕсли;
		СсылкаНаСоглашение = НовоеСоглашение.Ссылка;
		
		ЗафиксироватьТранзакцию();
		ОбновитьПовторноИспользуемыеЗначения();
	Исключение
		ОтменитьТранзакцию();
		ДанныеСохранены = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСТакском(ОписаниеОповещения)
	
	СертификатПодписи = СертификатКриптографии;
	ЭлектронныеДокументыСлужебныйКлиент.ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ПараметрыСертификата.Вставить("СертификатПодписи", СертификатПодписи);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыВыполнения.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	Обработчик = Новый ОписаниеОповещения("ТестСвязиСТакскомПослеПолученияПароляКСертификату", ЭтотОбъект, ПараметрыВыполнения);
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьПарольКСертификатуАсинхронно(
		СертификатКриптографии,
		ПараметрыСертификата,
		НСтр("ru = 'Авторизация на сервере Такском'"),, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСТакскомПослеПолученияПароляКСертификату(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.ПарольПолучен Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Результат.СтруктураВозврата;
	ПараметрыСертификата = ПараметрыВыполнения.ПараметрыСертификата;
	
	ПараметрыСертификата.Вставить("ЗапомнитьПарольКСертификату", СтруктураВозврата.ЗапомнитьПарольКСертификату);
	ПараметрыСертификата.Вставить("ПарольПользователя",          СтруктураВозврата.ПарольПользователя);
	ПараметрыСертификата.Вставить("НастройкиКриптографии",       СтруктураВозврата.НастройкиКриптографии);
	
	ТестПройден = ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(ПараметрыСертификата, Ложь);
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, ТестПройден);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СертификатыЭП") Тогда
		
		СброситьНастройкиСертификата();
		ОчиститьСообщения();
		
		СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(ВыбранноеЗначение);
		Отпечаток = СтруктураВозврата.Отпечаток;
		
		СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечаткуНаКлиенте(Отпечаток);
		Если СтруктураСертификата = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ПредставлениеСертификата = Организация;
		НаименованиеСертификата  = Организация;
		
		// Проверка сертификата на соответствие 63 ФЗ.
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
			
			НовыйСертификат = Новый СертификатКриптографии(СтруктураВозврата.ДвоичныеДанныеСертификата);
			Если Не НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ТекстСообщения = НСтр("ru = 'Сертификат не соответствует федеральному закону Российской Федерации от 6 апреля 2011 г. N 63-ФЗ ""Об электронной подписи"".
											|Рекомендуется перейти на квалифицированный сертификат ключа подписи (КСКП) по 63-ФЗ.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СертификатыЭП.ПустаяСсылка");
				Возврат;
				
			КонецЕсли;
			
			// Корректно работаем только с сертификатами для подписи стандартной структуры.
			Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
				И НовыйСертификат.Субъект.Свойство("T") И НовыйСертификат.Субъект.Свойство("ST") Тогда
				
				Если НовыйСертификат.Субъект.Свойство("SN") Тогда
					
					ШаблонФИОВладельца = НСтр("ru = '%1 %2'");
					ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
						НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
				ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
					
					ФИОВладельца = НовыйСертификат.Субъект.CN;
				КонецЕсли;
				ДолжностьПоСертификату = НовыйСертификат.Субъект.T;
				
				ФамилияИнициалыФизЛица(ФИОВладельца, Фамилия, Имя, Отчество);
				
				ПредставлениеСертификата = СтруктураСертификата.КомуВыдан;
				НаименованиеСертификата  = СтруктураСертификата.КомуВыдан;
				Пользователь = СтруктураВозврата.Пользователь;
				УстановитьДоступностьВидимостьЭлементовСтраницыСертификата();
			КонецЕсли;
		КонецЕсли;
		
		ШаблонНазначения = НСтр("ru = 'Кем выдан: %1
								|Действителен до: %2
								|
								|%3'");
		НовоеНазначение = "";
		ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
		НазначениеСертификата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначения,
			СтруктураСертификата.КемВыдан, СтруктураСертификата.ДействителенДо, НовоеНазначение);
		
		ПолучитьСертификатПоОтпечаткуНаКлиенте(Отпечаток);
		
		НовыйСертификатСсылка = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Фамилия) Тогда
		Элементы.Фамилия.Доступность = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Имя) Тогда
		Элементы.Имя.Доступность = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчество) Тогда
		Элементы.Отчество.Доступность = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
		Элементы.ДолжностьПоСертификату.Доступность  = Ложь;
	КонецЕсли;
	
КонецПроцедуры
