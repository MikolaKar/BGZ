#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлСсылка = Неопределено;
	Если Параметры.Свойство("ФайлСсылка") Тогда
		ФайлСсылка = Параметры.ФайлСсылка;
	КонецЕсли;
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Зашифровать ""%1""'"),
		Строка(ФайлСсылка));
		
	МассивСтруктурСертификатов = Параметры.МассивСтруктурСертификатов;
	Для Каждого СтруктураСертификата Из МассивСтруктурСертификатов Цикл
		НоваяСтрока = Сертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСертификата);
		ЭлектроннаяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение,
			НоваяСтрока.Назначение);
	КонецЦикла;
	
	// По умолчанию выбираем первый из установленных сертификатов пользователя.
	// Если не найдено ни одного сертификата, то будет выведено соответствующее сообщение
	// до открытия формы, после чего операция шифрования завершится.
	СертификатыПользователя = РаботаСЭП.ПолучитьСертификатыТекущегоПользователя();
	НеУстановленоНиОдногоСертификата = СертификатыПользователя.Количество() = 0;
	Если НеУстановленоНиОдногоСертификата Тогда
		Возврат;
	КонецЕсли;
	СертификатДляШифрования = СертификатыПользователя[0].Ссылка;
	ПолучитьНастройкиКриптографииДляШифрования();
	
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НеУстановленоНиОдногоСертификата Тогда
		ТекстПредупреждения = РаботаСЭПКлиентСервер.СообщениеОбОтсутствииУстановленныхСертификатов();
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["СертификатДляШифрования"] <> Неопределено Тогда
		ПолучитьНастройкиКриптографииДляШифрования();
	КонецЕсли;
	
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		
		ПолучитьИнструкции();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОбработкаВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	ТекущиеДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ОткрытьСертификатПоОтпечаткуИАдресу(
		ТекущиеДанные.Отпечаток, ТекущиеДанные.АдресСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатДляШифрованияПриИзменении(Элемент)
	
	ПолучитьНастройкиКриптографииДляШифрования();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиКриптографииДляШифрования()
	
	Если Не СертификатДляШифрования.Ссылка.Пустая() И Не СертификатДляШифрования.ПометкаУдаления Тогда
		СертификатДляШифрованияОтпечаток = СертификатДляШифрования.Отпечаток;
		Если Не ЗначениеЗаполнено(СертификатДляШифрованияОтпечаток) Тогда
			СертификатДляШифрования = Справочники.СертификатыЭП.ПустаяСсылка();
			Возврат;
		КонецЕсли;
		НастройкиКриптографииДляШифрования = Новый Структура(
			"ПровайдерЭП,
			|ПутьМодуляКриптографии,
			|ТипПровайдераЭП,
			|АлгоритмПодписи,
			|АлгоритмХеширования,
			|АлгоритмШифрования");
		ЗаполнитьЗначенияСвойств(НастройкиКриптографииДляШифрования,
			РаботаСЭП.ПрофильНастроекКриптографииПоСертификату(СертификатДляШифрованияОтпечаток));
		Если ЗначениеЗаполнено(СертификатДляШифрования.НазначениеКратко) Тогда
			НазначениеСертификата = СертификатДляШифрования.НазначениеКратко;
		Иначе
			НазначениеСертификата = СтрЗаменить(СокрЛП(СертификатДляШифрования.Назначение), Символы.ПС, ", ");
		КонецЕсли;
		СертификатДляШифрованияПредставлениеHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<html>
			|<body>
			|<style>
			|* { font-family: sans-serif; font-size: 8pt; }
			|body { padding: 0; margin: 8px; overflow: auto; }
			|table { border-collapse: collapse; }
			|table td { padding: 0 4px 0 0; border: 0; vertical-align: top; }
			|table td.col1 { vertical-align: top; color: #606060; width: 80px; }
			|</style>
			|<table>
			|<tr><td class=""col1"">%1:</td><td>%2</td></tr>
			|<tr><td class=""col1"">%3:</td><td>%4</td></tr>
			|<tr><td class=""col1"">%5:</td><td>%6</td></tr>
			|</table>
			|</body>
			|</html>",
			НСтр("ru = 'Кем выдан'"),
			СертификатДляШифрования.КемВыдан,
			НСтр("ru = 'Действует до'"),
			Формат(СертификатДляШифрования.ДатаОкончания, "ДФ=dd.MM.yyyy"),
			НСтр("ru = 'Назначение'"),
			НазначениеСертификата);
		// Выделяем сертификат в таблице.
		Для Каждого Сертификат Из Сертификаты Цикл
			Если Сертификат.Отпечаток = СертификатДляШифрованияОтпечаток Тогда
				Сертификат.ЛичныйСертификатШифрования = Истина;
				Сертификат.Пометка = Истина;
			Иначе
				Сертификат.ЛичныйСертификатШифрования = Ложь;
				Сертификат.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаВыбора()
	
	// Возвращаемое значение:
	//  Структура
	//   Сертификаты - массив объектов СертификатКриптографии - выбранный сертификат.
	//   НастройкиКриптографии - Структура или Неопределено, если нет связки с настройками криптографии.
	//                           Настройки криптографии для сертификата шифрования пользователя.
	//    ПровайдерЭП - Строка
	//    ПутьМодуляКриптографии - Строка
	//    ТипПровайдераЭП - Число
	//    АлгоритмПодписи - Строка
	//    АлгоритмХеширования - Строка
	//    АлгоритмШифрования - Строка
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСертификатов = Новый Массив;
	НастройкиКриптографии = Неопределено;
	
	НастройкиКриптографии = Новый Структура(
		"ПровайдерЭП,
		|ПутьМодуляКриптографии,
		|ТипПровайдераЭП,
		|АлгоритмПодписи,
		|АлгоритмХеширования,
		|АлгоритмШифрования");
	ЗаполнитьЗначенияСвойств(НастройкиКриптографии, НастройкиКриптографииДляШифрования);
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Если Сертификат.Пометка Тогда 
			Если ЗначениеЗаполнено(Сертификат.АдресСертификата) Тогда
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Сертификат.АдресСертификата);
				ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			Иначе
				ВыбранныйСертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
					Сертификат.Отпечаток);
			КонецЕсли;
			МассивСертификатов.Добавить(ВыбранныйСертификат);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСертификатов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран ни один сертификат.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Сертификаты", МассивСертификатов);
	СтруктураВозврата.Вставить("НастройкиКриптографии", НастройкиКриптографии);
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

#Область РаботаСИнструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 70, 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
