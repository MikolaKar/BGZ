#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СертификатДляПодписания")
		ИЛИ ТипЗнч(Параметры.СертификатДляПодписания) <> Тип("СправочникСсылка.СертификатыЭП") Тогда
		
		ВызватьИсключение НСтр("ru = 'Не найден сертификат для подписания.'");
	КонецЕсли;
	
	// Чтение данных сертификата.
	СертификатДляПодписания = Параметры.СертификатДляПодписания;
	СертификатДляПодписанияОтпечаток = СертификатДляПодписания.Отпечаток;
	СертификатДляПодписанияУсиленный = СертификатДляПодписания.Усиленный;
	СертификатДляПодписанияНастройкиКриптографии =
		РаботаСЭП.ПрофильНастроекКриптографииПоСертификату(СертификатДляПодписания.Отпечаток);
	Если ЗначениеЗаполнено(СертификатДляПодписания.НазначениеКратко) Тогда
		НазначениеСертификата = СертификатДляПодписания.НазначениеКратко;
	Иначе
		НазначениеСертификата = СтрЗаменить(СокрЛП(СертификатДляПодписания.Назначение),
			Символы.ПС, ", ");
	КонецЕсли;
	СертификатДляПодписанияПредставлениеHTML = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<html>
		|<body>
		|<style>
		|* { font-family: sans-serif; font-size: 8pt; }
		|body { padding: 0; margin: 8px; overflow: auto; }
		|table { border-collapse: collapse; }
		|table td { padding: 0 4px 0 0; border: 0; vertical-align: top; }
		|table td.col1 { vertical-align: top; color: #606060; width: 80px; }
		|</style>
		|<table>
		|<tr><td class=""col1"">%1:</td><td>%2</td></tr>
		|<tr><td class=""col1"">%3:</td><td>%4</td></tr>
		|<tr><td class=""col1"">%5:</td><td>%6</td></tr>
		|<tr><td class=""col1"">%7:</td><td>%8</td></tr>
		|</table>
		|</body>
		|</html>",
		НСтр("ru = 'Кому выдан'"),
		СертификатДляПодписания.КомуВыдан,
		НСтр("ru = 'Кем выдан'"),
		СертификатДляПодписания.КемВыдан,
		НСтр("ru = 'Действует до'"),
		Формат(СертификатДляПодписания.ДатаОкончания, "ДФ=dd.MM.yyyy"),
		НСтр("ru = 'Назначение'"),
		НазначениеСертификата);
		
	// Установка начальной видимости элементов.
	Элементы.Пароль.Видимость = Не СертификатДляПодписанияУсиленный;
	Элементы.ГруппаИнформацияДляУсиленных.Видимость = СертификатДляПодписанияУсиленный;
	
	// Обработка информационной надписи и заголовка формы.
	Элементы.ГруппаИнформация.Видимость = Параметры.Свойство("ИнформационнаяНадпись")
		И ЗначениеЗаполнено(Параметры.ИнформационнаяНадпись);
	Если Элементы.ГруппаИнформация.Видимость Тогда
		Элементы.ДекорацияИнформационнаяНадпись.Заголовок = Параметры.ИнформационнаяНадпись;
	КонецЕсли;
	ФайлСсылка = Неопределено;
	Если Параметры.Свойство("ОбъектСсылка") Тогда
		ФайлСсылка = Параметры.ОбъектСсылка;
	КонецЕсли;
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Подписать ""%1""'"),
		Строка(ФайлСсылка));
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	// Определение и вывод инструкций.
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		
		ПолучитьИнструкции();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОбработкаВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	ПоказатьЗначение(Неопределено, СертификатДляПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаВыбора()
	
	// Возвращаемое значение:
	//  Структура -
	//   Сертификат - СертификатКриптографии - выбранный сертификат.
	//   НастройкиКриптографии - Структура
	//    ПровайдерЭП - Строка
	//    ПутьМодуляКриптографии - Строка
	//    ТипПровайдераЭП - Число
	//    АлгоритмПодписи - Строка
	//    АлгоритмХеширования - Строка
	//    АлгоритмШифрования - Строка
	//   Пароль - Строка - Пароль к закрытому ключу.
	//   Комментарий - Комментарий к подписи.
	
	ВозвратПароль = Пароль;
	Если ПустаяСтрока(Пароль) И НЕ ПустаяСтрока(Элементы.Пароль.ТекстРедактирования) Тогда
		ВозвратПароль = Элементы.Пароль.ТекстРедактирования;
	КонецЕсли;
	
	ВыбранныйСертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(СертификатДляПодписанияОтпечаток);
	НастройкиКриптографии = Новый Структура(
		"ПровайдерЭП,
		|ПутьМодуляКриптографии,
		|ТипПровайдераЭП,
		|АлгоритмПодписи,
		|АлгоритмХеширования,
		|АлгоритмШифрования");
	ЗаполнитьЗначенияСвойств(НастройкиКриптографии, СертификатДляПодписанияНастройкиКриптографии);
	
	// Проверка сертификата перед подписанием
	Попытка
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПроверитьСертификат(ВыбранныйСертификат, МассивРежимовПроверки);
	Исключение
		ОшибкаИнфо = ИнформацияОбОшибке();
		
		ЗаписьОшибкиВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке сертификата'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ОшибкаИнфо));	
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
				|
				|Выберите другой сертификат или обратитесь к администратору.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			КраткоеПредставлениеОшибки(ОшибкаИнфо));
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Ошибка подписания'"));
		ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
		ОткрытьФорму("ОбщаяФорма.Сообщение", ПараметрыФормы, ЭтаФорма);
		
		Возврат;
	КонецПопытки;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Сертификат", ВыбранныйСертификат);
	СтруктураВозврата.Вставить("НастройкиКриптографии", НастройкиКриптографии);
	СтруктураВозврата.Вставить("Комментарий", Комментарий);
	
	Если СертификатДляПодписанияУсиленный Тогда
		СтруктураВозврата.Вставить("Пароль", "");
	Иначе
		СтруктураВозврата.Вставить("Пароль", ВозвратПароль);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		ЗаписатьВводимыеЗначения();
	КонецЕсли;
	
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписьОшибкиВЖурналРегистрации(ИмяСобытия, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекстОшибки);
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	СохраняемыеЭлементы.Вставить("Комментарий", Комментарий);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура ЗаписатьВводимыеЗначения()
	
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры	

#Область РаботаСИнструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 50, 80);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
