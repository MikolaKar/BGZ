#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Права доступа

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ПолучитьЗначенияРеквизитов()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Автор,
		|Пользователи";
	
КонецФункции

// Заполняет переданный дескриптор доступа
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ДобавитьПользователя("Автор", ОбъектДоступа.Автор);
	
	// Пользователи
	Если ТипЗнч(ОбъектДоступа) = Тип("Структура") Тогда
		Выборка = ОбъектДоступа.Пользователи.Выбрать();
		Пока Выборка.Следующий()Цикл
			ДескрипторДоступа.ДобавитьПользователя("Использующий", Выборка.ПользовательИлиГруппа);
		КонецЦикла;	
	Иначе
		Для Каждого Ответственный Из ОбъектДоступа.Пользователи Цикл
			ДескрипторДоступа.ДобавитьПользователя("Использующий", Ответственный.ПользовательИлиГруппа);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает Истина, указывая тем самым что этот объект сам заполняет свои права.
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на 
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него 
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	Для каждого Строка Из ДескрипторДоступа.Пользователи Цикл
		
		Если Строка.Ключ = "Автор" Тогда
			
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
											Истина, Истина, Истина, Истина, Ложь);
											
			ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
				ПраваДоступа,
				Строка.Пользователь,
				Строка.ОсновнойОбъектАдресации,
				Строка.ДополнительныйОбъектАдресации,
				ПраваПользователя);
				
		КонецЕсли;
		
		Если Строка.Ключ = "Использующий" Тогда
			
			Если ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
												Истина, Ложь, Ложь, Ложь, Ложь);
												
				ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
					ПраваДоступа,
					Строка.Пользователь,
					Неопределено,
					Неопределено,
					ПраваПользователя);
					
			ИначеЕсли ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
				// Раскрытие группы пользователей
				СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Строка.Пользователь);
				
				Для каждого ПользовательГруппы Из СоставГруппы Цикл
					
					ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
													Истина, Ложь, Ложь, Ложь, Ложь);
													
					ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
						ПраваДоступа,
						ПользовательГруппы.Пользователь,
						Неопределено,
						Неопределено,
						ПраваПользователя);
						
				КонецЦикла;	
			
			КонецЕсли;
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры

// Права доступа - конец

// Записать контакт
Функция ЗаписатьКонтакт(Контакт, Адрес, ГруппаИзбранного = Неопределено, Пользователь = Неопределено) Экспорт
	
	ГруппаДляДобавления = Неопределено;
	
	Если ГруппаИзбранного = Неопределено Тогда
		ГруппаДляДобавления = ПолучитьКорневуюГруппу(Пользователь);
	Иначе
		ГруппаДляДобавления = ГруппаИзбранного;
	КонецЕсли;	
	
	Если ГруппаДляДобавления.ОбщийСписокРассылки = Истина
		И ТипЗнч(Контакт) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Запрещено использовать личных адресатов(""%1"") в общих группах контактов.'"), Контакт);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;	
	
	ЗаблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
	ВыполненаБлокировка = Истина;
	ГруппаДляДобавленияОбъект = ГруппаДляДобавления.ПолучитьОбъект();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контакт", Контакт);
	НайденныеСтроки = ГруппаДляДобавленияОбъект.Контакты.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.КонтактнаяИнформация = Адрес Тогда
			РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	НоваяСтрока = ГруппаДляДобавленияОбъект.Контакты.Добавить();
	НоваяСтрока.Контакт = Контакт;
	НоваяСтрока.КонтактнаяИнформация = Адрес;
	
	НоваяСтрока.Представление = Строка(Контакт);
	
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	ГруппаДляДобавленияОбъект.Контакты.Сортировать("Контакт Возр");
	
	Попытка
		ГруппаДляДобавленияОбъект.Записать();	
	Исключение
		РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
		ВызватьИсключение;
	КонецПопытки;	
	
	РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
	Возврат Истина;
              
КонецФункции // ЗаписатьКонтакт()

// Удалить контакт
Процедура УдалитьКонтакт(Контакт, Адрес, ГруппаИзбранного) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ГруппаИзбранного);
	ВыполненаБлокировка = Истина;
	ГруппаИзбранногоОбъект = ГруппаИзбранного.ПолучитьОбъект();
	
	НайденнаяСтрока = ГруппаИзбранногоОбъект.Контакты.Найти(Контакт, "Контакт");
	Если НайденнаяСтрока <> Неопределено Тогда
		ГруппаИзбранногоОбъект.Контакты.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	Попытка
		ГруппаИзбранногоОбъект.Записать();	
	Исключение
		РазблокироватьДанныеДляРедактирования(ГруппаИзбранного);	
		ВызватьИсключение;
	КонецПопытки;	
	
	РазблокироватьДанныеДляРедактирования(ГруппаИзбранного);
              
КонецПроцедуры // УдалитьКонтакт()

// Получить корневую группу (с пустым Родителем)
Функция ПолучитьКорневуюГруппу(Автор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Автор = Неопределено Тогда
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
	// Найдем корневой элемент - если он есть
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГруппыКонтактовПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	ГруппыКонтактовПользователей.Автор = &Автор
		|	И ГруппыКонтактовПользователей.Родитель = &Родитель
		|	И ГруппыКонтактовПользователей.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Автор", Автор);	
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыКонтактовПользователей.ПустаяСсылка());
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	КорневаяГруппа = Неопределено;
	КорневаяГруппаОбъект = Неопределено;
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		КорневаяГруппаОбъект = Справочники.ГруппыКонтактовПользователей.СоздатьЭлемент();
		КорневаяГруппаОбъект.Автор = Автор;
		КорневаяГруппаОбъект.Наименование = НСтр("ru='Без группы'");
		КорневаяГруппаОбъект.Записать();	
		Возврат КорневаяГруппаОбъект.Ссылка;
	Иначе
		КорневаяГруппа = ТаблицаРезультатов[0].Ссылка;
		Возврат КорневаяГруппа;
	КонецЕсли;	
	
КонецФункции // ПолучитьКорневуюГруппу()

#КонецЕсли