
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Выбрать();
	
	Если ЗначениеЗаполнено(Диалог.Каталог) Тогда
		ПапкаДляЭкспорта = ФайловыеФункцииКлиент.НормализоватьКаталог(Диалог.Каталог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВебКлиент = Ложь;
	РасширениеРаботыСФайламиПодключено = Ложь;
	#Если ВебКлиент Тогда
		ВебКлиент = Истина;
	#КонецЕсли
	
	Если ВебКлиент Тогда 
		РасширениеРаботыСФайламиПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если Не РасширениеРаботыСФайламиПодключено Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("СписокОбъектов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	РасширениеДляЗашифрованныхФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭП", "РасширениеДляЗашифрованныхФайлов");
	Если ПустаяСтрока(РасширениеДляЗашифрованныхФайлов) Тогда
		РасширениеДляЗашифрованныхФайлов = "p7m";
	КонецЕсли;
	
	СформироватьСписокФайлов();
	ВыбраноФайлов = ПосчитатьКоличествоВыбранных(СписокФайловДляВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПосчитатьКоличествоВыбранных(Список)
	
	ВыбраноФайлов = 0;
	Для Каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Выгружать Тогда
			ВыбраноФайлов = ВыбраноФайлов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбраноФайлов;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(ПапкаДляЭкспорта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Папка для выгрузки"" не заполнено'"),, "ПапкаДляЭкспорта");
		Возврат;
	КонецЕсли;
	// Проверим - каталог выгрузки существует?
	КаталогВыгрузки = Новый Файл(ПапкаДляЭкспорта);
	
	Если не КаталогВыгрузки.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указанная папка не найдена'"),, "ПапкаДляЭкспорта");
		Возврат;			
	КонецЕсли;
					
	// А теперь начнем выгрузку
	БазовыйКаталогСохранения = ПапкаДляЭкспорта + "\";
	ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
	
	Если ВыгрузкаУспешна Тогда		
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохранение выбранных файлов в каталог на диске ""%1"" успешно завершено!'"),
			Строка(ПапкаДляЭкспорта)));
		ПоказатьПредупреждение(, НСтр("ru = 'Файлы успешно сохранены'"));			
		Закрыть();
	КонецЕсли;

КонецПроцедуры

// Функция, которая собственно и выгружает файлы на локальный диск
//
// Параметры:
//  ТаблицаФайлов - дерево значений с выгружаемыми файлами.
//  БазовыйКаталогСохранения - строка с именем папки, в которую сохраняются файлы.
//                 В ней воссоздается структура папок (как в дереве файлов)
//                 при необходимости.//
// Возвращаемое значение:
//  Истина       - можно продолжать выгрузку / выгрузка завершена успешно
//  Ложь         - действие завершено с ошибками / выгрузка завершена с ошибками
&НаКлиенте
Процедура ОбойтиСписокФайлов(ТаблицаФайлов, Знач БазовыйКаталогСохранения, ЕщеНеВстретилиВыгружаемуюПапку)
		
	Для Каждого ЗаписьФайла из ТаблицаФайлов Цикл
		
		Если НЕ ЗаписьФайла.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьФайла.ФайлВыгружен Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьФайла.ТекущаяВерсия <> NULL и ЗаписьФайла.ТекущаяВерсия.Пустая() Тогда
			// Это элемент справочника Файлы без ссылки на версию файла - пропустим
			Продолжить;
		КонецЕсли;
		
		// Сформируем путь к каталогу и пойдем дальше. Создавать каталоги будем
		БазовыйКаталогСохраненияФайла = БазовыйКаталогСохранения;
					
		// Проверим наличие базового каталога: если нет - создадим
		Папка = Новый Файл(БазовыйКаталогСохраненияФайла);
		Если Не Папка.Существует() Тогда
			Попытка
				СоздатьКаталог(БазовыйКаталогСохраненияФайла);
			Исключение
				// По какой-то причине каталог не создался ...
				ИнфоОшибка = ИнформацияОбОшибке();
				
				стрТекст =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				     НСтр("ru = 'Ошибка создания папки ""%1"".
				                |Причина: %2'"),
				     БазовыйКаталогСохраненияФайла,
				     ПодробноеПредставлениеОшибки(ИнфоОшибка) );
					 
				ПараметрыВыполнения = Новый Структура;
				ПараметрыВыполнения.Вставить("ЗаписьФайла", ЗаписьФайла);
				Обработчик = Новый ОписаниеОповещения("ПослеВопросаОшибкиСозданияПапки", ЭтотОбъект, ПараметрыВыполнения);	 
				ПоказатьВопрос(Обработчик, стрТекст, РежимДиалогаВопрос.ПрерватьПовторитьПропустить, , КодВозвратаДиалога.Повторить);
				Возврат;
				
			КонецПопытки;
		КонецЕсли;
					
		// Пишем файл в базовый каталог
		ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ЗаписьФайла.ПолноеНаименование, ЗаписьФайла.Расширение);
		Если ЗаписьФайла.Зашифрован Тогда
			ИмяФайлаСРасширением = ИмяФайлаСРасширением + "." + РасширениеДляЗашифрованныхФайлов; 
		КонецЕсли;	
		ПолноеИмяФайла = БазовыйКаталогСохраненияФайла + ИмяФайлаСРасширением;
		
		// Проверка возможности записи файла
		Результат = КодВозвратаДиалога.Отмена;
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		Если ФайлНаДиске.Существует() и ФайлНаДиске.ЭтоКаталог() Тогда
			ТекстВопроса =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			  НСтр("ru = 'Вместо файла ""%1""  существует папка с таким же именем. Повторить экспорт этого файла?'"),
			  ПолноеИмяФайла );
			  
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ЗаписьФайла", ЗаписьФайла);
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаОшибкиЗаписиФайла", ЭтотОбъект, ПараметрыВыполнения);	 
			  
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена, ,КодВозвратаДиалога.Отмена);
			Возврат;
			
		Иначе
			// Файла нет - идем дальше
			Результат = КодВозвратаДиалога.Повторить;
		КонецЕсли;
		
		Если Результат = КодВозвратаДиалога.Отмена Тогда
			// Игнорируем файл с именем как у папки
			Продолжить;
		КонецЕсли;
		
		Если ЗаписьФайла.ФайлВыгружен Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = КодВозвратаДиалога.Нет;
		
		// Если файл существует, то 
		Если ФайлНаДиске.Существует() Тогда
			Счетчик = 1;
			Пока Истина Цикл
				ИмяФайлаСРасширением = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ЗаписьФайла.ПолноеНаименование + " (" + Строка(Счетчик) + ")", ЗаписьФайла.Расширение);	
				ПолноеИмяФайла = БазовыйКаталогСохраненияФайла + ИмяФайлаСРасширением;
				ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
				Если НЕ ФайлНаДиске.Существует() Тогда
					Прервать;
				КонецЕсли;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			Результат = КодВозвратаДиалога.Да;
		Иначе
			// Файла нет, спрашивать не будем
			Результат = КодВозвратаДиалога.Да;
		КонецЕсли;
		
		// Если можно - запишем файл в файловую систему
		Если Результат = КодВозвратаДиалога.Да Тогда
			Попытка
				ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
				Если ФайлНаДиске.Существует() Тогда
					
					// Снимем флаг R|O для возможности удаления
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					
					// Всегда удалим и потом создадим заново
					УдалитьФайлы(ПолноеИмяФайла);
				КонецЕсли;
				
				РазмерВМб = ЗаписьФайла.Размер / (1024 * 1024);
				
				//// Обновим индикатор прогресса
				НадписьПодробнее =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сохраняется на диск файл ""%1"" (%2 Мб)...'"),
					ФайлНаДиске.Имя,
					ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
				Состояние(
					,
					,
					НадписьПодробнее, 
					БиблиотекаКартинок.Информация32);
				
				// Запишем файл заново
				стрАдрес = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ЗаписьФайла.ТекущаяВерсия, УникальныйИдентификатор);
				
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, стрАдрес);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПолучитьФайлы(ПередаваемыеФайлы,, ПолноеИмяФайла, Ложь);
				
				// для варианта с хранением файлов на диске (на сервере) удаляем файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(стрАдрес) Тогда
					УдалитьИзВременногоХранилища(стрАдрес);
				КонецЕсли;
				
				ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
				
				// Сделаем файл только для чтения
				ФайлНаДиске.УстановитьТолькоЧтение(Истина);
				
				ДатаСоздаваемогоФайлаНаДиске = ЗаписьФайла.ДатаМодификацииУниверсальная;
				ДатаСоздаваемогоФайлаНаДиске = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
				
				// Поставим время модификации - как в информационной базе
				ФайлНаДиске.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);
				ЗаписьФайла.ФайлВыгружен = Истина;
				
			Исключение
				
				// По какой-то случилась файловая ошибка при записи файла и изменении его атрибутов ...
				ИнфоОшибка = ИнформацияОбОшибке();
				стрТекст =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				  НСтр("ru = 'Ошибка записи файла ""%1"".
				             |Причина: %2'"),
				  ПолноеИмяФайла,
				  ПодробноеПредставлениеОшибки(ИнфоОшибка) );
				  
				ПараметрыВыполнения = Новый Структура;
				ПараметрыВыполнения.Вставить("ЗаписьФайла", ЗаписьФайла);
				Обработчик = Новый ОписаниеОповещения("ПослеВопросаОшибкиПолучитьФайл", ЭтотОбъект, ПараметрыВыполнения);	 
				  
				ПоказатьВопрос(Обработчик, стрТекст, РежимДиалогаВопрос.ПрерватьПовторитьПропустить, , КодВозвратаДиалога.Повторить);
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыгрузкаУспешна = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОшибкиПолучитьФайл(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Прервать Тогда
		
		// Просто выйдем с ошибкой
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Пропустить Тогда
		
		// Пропустим этот файл и пойдем дальше
		ПараметрыВыполнения.ЗаписьФайла.ФайлВыгружен = Истина;
		ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
	Иначе
		
		// Попробуем повторить получение файла
		ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОшибкиЗаписиФайла(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Повторить Тогда
		// Не повторяем попытку выгрузки
		ПараметрыВыполнения.ЗаписьФайла.ФайлВыгружен = Истина;
	КонецЕсли;
	
	ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОшибкиСозданияПапки(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Прервать Тогда
		// Просто выйдем с ошибкой 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Пропустить Тогда
		ПараметрыВыполнения.ЗаписьФайла.ФайлВыгружен = Истина;
		ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
	Иначе
		// Попробуем повторить создание папки
		ОбойтиСписокФайлов(СписокФайловДляВыбора, БазовыйКаталогСохранения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокФайлов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Файлы.ТекущаяВерсия,
	               |	Файлы.ПолноеНаименование КАК ПолноеНаименование,
	               |	Файлы.ТекущаяВерсия.Расширение КАК Расширение,
	               |	Файлы.ТекущаяВерсия.Размер КАК Размер,
	               |	Файлы.ТекущаяВерсия.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	               |	Файлы.Ссылка,
	               |	Файлы.ПометкаУдаления,
	               |	Файлы.Зашифрован,
	               |	Файлы.ВладелецФайла КАК Папка,
	               |	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ТипВладельца,
	               |	ИСТИНА КАК Выгружать,
	               |	ЛОЖЬ КАК ФайлВыгружен
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.Ссылка В(&МассивСсылок)
	               |	И Файлы.ТекущаяВерсия <> ЗНАЧЕНИЕ(Справочник.ВерсииФайлов.ПустаяСсылка)
	               |	И Файлы.ПометкаУдаления = ЛОЖЬ";
	Если ТипЗнч(Параметры.СписокОбъектов) = Тип("СписокЗначений") Тогда				   
		МассивСсылок = Параметры.СписокОбъектов.ВыгрузитьЗначения();
		Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Иначе
		Запрос.Параметры.Вставить("МассивСсылок", Параметры.СписокОбъектов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ЗначениеВДанныеФормы(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой), СписокФайловДляВыбора);

КонецПроцедуры

&НаКлиенте
Процедура СписокФайловДляВыбораВыгружатьПриИзменении(Элемент)
	ВыбраноФайлов = ПосчитатьКоличествоВыбранных(СписокФайловДляВыбора);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	
	Для Каждого Строка Из СписокФайловДляВыбора Цикл
		
		Строка.Выгружать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	
	Для Каждого Строка Из СписокФайловДляВыбора Цикл
		
		Строка.Выгружать = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры
