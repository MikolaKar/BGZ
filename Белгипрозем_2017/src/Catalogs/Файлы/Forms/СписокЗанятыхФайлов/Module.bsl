
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ЗаполнитьСписокФайлов();
		
		Если СписокФайлов.Количество() = 0 Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если БольшеНеПоказыватьЗанятыеФайлыПриЗакрытииПрограммы Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФайлов

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаФайл =
		СписокФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	
	РаботаСФайламиКлиент.Открыть(
		РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			СсылкаНаФайл, Неопределено, УникальныйИдентификатор), 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.Список.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Неопределено,
		Элементы.Список.ТекущиеДанные.Ссылка,
		УникальныйИдентификатор,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Истина, // РедактируетТекущийПользователь
		Элементы.Список.ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
		Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
		Неопределено,
		Элементы.Список.ТекущиеДанные.Ссылка,
		Элементы.Список.ТекущиеДанные.ХранитьВерсии,
		Истина, // РедактируетТекущийПользователь
		Элементы.Список.ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
		Неопределено,
		Элементы.Список.ТекущиеДанные.Ссылка, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(
		РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(
		Элементы.Список.ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(
		Элементы.Список.ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсе(Команда)
	
	РедактируемыеФайлы = Новый Массив;
	
	Для Каждого РедактируемыйФайл ИЗ СписокФайлов Цикл
		РедактируемыеФайлы.Добавить(РедактируемыйФайл.Ссылка);
	КонецЦикла;
	
	Обработчик = Новый ОписаниеОповещения("ОсвободитьВсеПродолжение", ЭтотОбъект);
	РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(Обработчик, РедактируемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьВсеПродолжение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизит СписокФайлов данным о редактируемых файлах
// текущим пользователем.
//
&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ИндексКартинки,
		|	Файлы.Описание,
		|	Файлы.Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Редактирует = &ТекущийПользователь";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	ТаблицаЗанятыхФайлов = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(ТаблицаЗанятыхФайлов, СписокФайлов);
	
КонецПроцедуры

#КонецОбласти
