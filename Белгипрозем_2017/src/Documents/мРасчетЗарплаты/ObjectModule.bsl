
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.мРасчетЗарплаты.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ВыполнитьПроведение(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
КонецПроцедуры

Процедура ВыполнитьПроведение(ДополнительныеСвойства, Движения, Отказ) 

	ДанныеДокумента = ДополнительныеСвойства.ТаблицыДляДвижений.ДанныеДокумента;
	НачисленоПоВД = ДополнительныеСвойства.ТаблицыДляДвижений.НачисленоПоВидамДеятельности;
	
	Если Отказ ИЛИ ДанныеДокумента.Количество() = 0 ИЛИ НачисленоПоВД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = СоздатьТЗ();
	ВидыНачислений = ПолучитьВидыНачислений();
	ВидНачОклад = ВидыНачислений.Оклад;
	
	Для каждого Стр Из ДанныеДокумента Цикл
		ПараметрыРаспределения = Новый Структура();
		ПараметрыРаспределения.Вставить("ТабДвиж", Таблица);
		ПараметрыРаспределения.Вставить("СтрокаДок", Стр);
		ПараметрыРаспределения.Вставить("ТабИсходная", НачисленоПоВД);
		
		Если Стр.ПроцентПремииЗаРуководство > 0 Тогда
			// Это начальник
		    ВидНач = ВидыНачислений.Премия;
			ПараметрыРаспределения.Вставить("ЭтоНачальник", Истина);
		Иначе
			// Это исполнитель
		    ВидНач = ВидыНачислений.Доплата;
			ПараметрыРаспределения.Вставить("ЭтоНачальник", Ложь);
		КонецЕсли;
		
		// сначала распределяем оклад
		ПараметрыРаспределения.Вставить("СуммаОбщая", Стр.ОкладПоФакту);
		ПараметрыРаспределения.Вставить("ВидНач", ВидНачОклад);
		
		Распределить(ПараметрыРаспределения);
		
		// распределение премии
		Если Стр.ПремияИтоговая > 0 Тогда
			ПараметрыРаспределения.Вставить("СуммаОбщая", Стр.ПремияИтоговая);
			ПараметрыРаспределения.Вставить("ВидНач", ВидНач);
			Распределить(ПараметрыРаспределения);
		КонецЕсли;
	КонецЦикла; 

	Движения.НачисленаЗП.Записывать = Истина;
	Движения.НачисленаЗП.Загрузить(Таблица);
	
КонецПроцедуры

// Распределяет сумму по видам деятельности
// для исполнителей распределение начисленных сумм происходит пропорционально
//  начисленной ЗП по видам деятельности
// для начальников - пропорционально начисленной ЗП исполнителям из их 
//  подразделения по видам деятельности 
Функция Распределить(ПараметрыРаспределения)
	
	СуммаОбщая = ПараметрыРаспределения.СуммаОбщая;
	СтрДок = ПараметрыРаспределения.СтрокаДок;
	Таблица = ПараметрыРаспределения.ТабДвиж;
	ВидНач = ПараметрыРаспределения.ВидНач;
	НачисленоПоВД = ПараметрыРаспределения.ТабИсходная;
	ЭтоНачальник = ПараметрыРаспределения.ЭтоНачальник;
	
	Остаток = СуммаОбщая;
	Если СуммаОбщая = 0 Тогда
		// нечего распределять
		Возврат 0;
	КонецЕсли;
	
	Если ЭтоНачальник Тогда
		Отбор = Новый Структура("Подразделение", СтрДок.Подразделение);
	Иначе
		Отбор = Новый Структура("Исполнитель", СтрДок.Пользователь);
	КонецЕсли; 
	
	ИскСтроки = НачисленоПоВД.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		// ничего не начислено                                        
	Иначе
		
		// для накопления Начислено в разрезе видов деятельности
		ТзНач = Новый ТаблицаЗначений;
		ТзНач.Колонки.Добавить("ВидДеятельности");
		ТзНач.Колонки.Добавить("Начислено");
		
		Для й=0 По ИскСтроки.Количество()-1 Цикл
			НовСтр = ТзНач.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ИскСтроки[й]) 
		КонецЦикла;
		
		ТзНач.Свернуть("ВидДеятельности", "Начислено");
		ВсегоНач = ТзНач.Итог("Начислено");
		
		Для й=0 По ТзНач.Количество()-1 Цикл
			Если й < ТзНач.Количество()-1 Тогда
				// пропорционально
				СуммаНач = Окр(СуммаОбщая/ВсегоНач*ТзНач[й].Начислено, 2);
			Иначе	
				// остаток
			    СуммаНач = Остаток;
			КонецЕсли; 

			СтрТаб = Таблица.Добавить();
			СтрТаб.Период = НачалоМесяца(СтрДок.Период);
			СтрТаб.Подразделение = СтрДок.Подразделение;
			СтрТаб.Исполнитель = СтрДок.Пользователь;
			СтрТаб.ВидНачисления = ВидНач;
			СтрТаб.ВидДеятельности = ТзНач[й].ВидДеятельности;
			СтрТаб.Сумма = СуммаНач;
			СтрТаб.Часы = СтрДок.ЧасовПоФакту;
			
			Остаток = Остаток - СуммаНач;
			Если Остаток <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат 0;
КонецФункции 

Функция СоздатьТЗ()

	ТЗ = новый ТаблицаЗначений;
	Тз.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Тз.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Тз.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("СправочникСсылка.мВидыНачислений"));
	Тз.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.мВидыЭкономическойДеятельности"));
	Тз.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
	Тз.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат ТЗ;

КонецФункции 

Функция ПолучитьВидыНачислений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мВидыНачислений.Ссылка КАК ВидНачисления,
		|	мВидыНачислений.ТипНачисления
		|ИЗ
		|	Справочник.мВидыНачислений КАК мВидыНачислений
		|ГДЕ
		|	НЕ мВидыНачислений.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураНачислений = Новый Структура(); 
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипНачисления = Перечисления.мТипыНачислений.Оклад Тогда
			СтруктураНачислений.Вставить("Оклад", Выборка.ВидНачисления);
		ИначеЕсли Выборка.ТипНачисления = Перечисления.мТипыНачислений.Доплата Тогда
			СтруктураНачислений.Вставить("Доплата", Выборка.ВидНачисления);	
		ИначеЕсли Выборка.ТипНачисления = Перечисления.мТипыНачислений.Премия Тогда
			СтруктураНачислений.Вставить("Премия", Выборка.ВидНачисления);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНачислений;

КонецФункции 

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
КонецПроцедуры
 