#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьОплаты();
	ЗаполнитьТабельныеНомера();
	
	// Поиск акта
	ПоискНомерАкта = "";
	Если Параметры.Свойство("НомерАкта") Тогда
		Отбор = Новый Структура("НомерАкта", Параметры.НомерАкта); 
		СтрокаАкта = Объект.Акты.НайтиСтроки(Отбор);
		//ТекущийЭтапДоговора = СтрокаАкта[0].ЭтапДоговора;
		//ТекущийДоговор = ТекущийЭтапДоговора.Владелец; 
		ПоискНомерАкта = СтрокаАкта[0].НомерАкта;
	КонецЕсли; 
    
    УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данные объекта уже заблокированы";
		Сообщение.Сообщить();
		ЭтаФорма.ТолькоПросмотр = Истина;	
	КонецПопытки; 
	
	СметыПоЭтапуПоказаны = Ложь;
	
	Если ЗначениеЗаполнено(ПоискНомерАкта) Тогда
		// позиционируемся на иск акте
		ИскАкт = Объект.Акты.НайтиСтроки(Новый Структура("НомерАкта", ПоискНомерАкта));
		Элементы.Акты.ТекущаяСтрока = ИскАкт[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ФлОстаток = Истина;
	
	Если Объект.Дата < '20151001000000' Тогда
		Элементы.ЗарплатаБазовоеНачисление.Видимость = Ложь;
	КонецЕсли; 
	
	УправлениеДиалогом();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РезультатПроверки", УпаковатьРезультатПроверки());
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//ЗаполнитьОплаты();
КонецПроцедуры




#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПечФормаДоговораНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборФайла(ПечФормаДоговора);
КонецПроцедуры

// Меню ДС
&НаКлиенте
Процедура МенюВыбораДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыборФайла(ВыбранноеЗначение);
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДС(Договор)
	Отбор = Новый Структура("Договор", Договор);
	ИскСтроки = ДСДоговоров.НайтиСтроки(Отбор);
    Если ИскСтроки.Количество() = 0 Тогда
        Если ДоговорыБезДС.НайтиПоЗначению(Договор) = Неопределено Тогда
    		ЗаполнитьДС(Договор);
        КонецЕсли; 
	КонецЕсли;
	ОтобразитьДС(Договор);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДС(Договор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиДокументов.СвязанныйДокумент КАК ДС
		|ПОМЕСТИТЬ Допы
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.ТипСвязи = &ТипСвязи
		|	И СвязиДокументов.Документ = &Договор
		|	И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК ФайлДС,
		|	&Договор КАК Договор
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В
		|			(ВЫБРАТЬ
		|				Допы.ДС
		|			ИЗ
		|				Допы КАК Допы)
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.ТекущаяВерсияРасширение = ""pdf""
		|	И Файлы.Наименование ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДополнительноеСоглашениеДоговораЗемлеустроительныхРабот);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.Имеет);
	Запрос.УстановитьПараметр("ИмяФайла", "Доп согл %");
	
	РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        ДоговорыБезДС.Добавить(Договор);
    Иначе  
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            НовСтр = ДСДоговоров.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
        КонецЦикла;
    КонецЕсли; 
	
КонецПроцедуры 
&НаКлиенте
Процедура ОтобразитьДС(Договор)
	Отбор = Новый Структура("Договор", Договор);
	ИскСтроки = ДСДоговоров.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		// Договоров нет
		Элементы.ИнфоДС.Видимость = Истина;
		Элементы.ПечФормаДС.Видимость = Ложь;
		Элементы.МенюВыбораДС.Видимость = Ложь;
		ИнфоДС = "ДС нет";
		
	ИначеЕсли ИскСтроки.Количество() = 1 Тогда
		Элементы.ИнфоДС.Видимость = Ложь;
		Элементы.ПечФормаДС.Видимость = Истина;
		Элементы.МенюВыбораДС.Видимость = Ложь;
		ПечФормаДС = ИскСтроки[0].ФайлДС;
		
	Иначе
		// Смет несколько
		Элементы.ИнфоДС.Видимость = Ложь;
		Элементы.ПечФормаДС.Видимость = Ложь;
		Элементы.МенюВыбораДС.Видимость = Истина;
		Элементы.МенюВыбораДС.СписокВыбора.Очистить();
		Элементы.МенюВыбораДС.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Для каждого Стр Из ИскСтроки Цикл
			Элементы.МенюВыбораДС.СписокВыбора.Добавить(Стр.ФайлДС, Строка(Стр.ФайлДС));
		КонецЦикла;
		МенюВыбораДС = Элементы.МенюВыбораДС.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПечФормаДСНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборФайла(ПечФормаДС);
КонецПроцедуры

// Меню Смет
&НаКлиенте
Процедура МенюВыбораСметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыборФайла(ВыбранноеЗначение);
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьСметыПоЭтапу(Этап)
	Отбор = Новый Структура("ЭтапДоговора", Этап);
	ИскСтроки = СметыПоЭтапу.НайтиСтроки(Отбор);
    Если ИскСтроки.Количество() = 0 Тогда
        Если ЭтапыБезСмет.НайтиПоЗначению(Этап) = Неопределено Тогда
    		ЗаполнитьСметыПоЭтапу(Этап);
        КонецЕсли; 
	КонецЕсли;
	ОтобразитьСметыПоЭтапу(Этап);
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьСметыПоЭтапу(Этап)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка Как ФайлСметы,
		|	&Этап как ЭтапДоговора
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Договор
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.ТекущаяВерсияРасширение = ""pdf""
		|	И Файлы.Наименование ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("Договор", Этап.Владелец);
	Запрос.УстановитьПараметр("ИмяФайла", "Смета "+Этап.НомерЭтапа+"-%");
	
	РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        ЭтапыБезСмет.Добавить(Этап);
    Иначе  
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            НовСтр = СметыПоЭтапу.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
        КонецЦикла;
    КонецЕсли; 
	
КонецПроцедуры 
&НаКлиенте
Процедура ОтобразитьСметыПоЭтапу(Этап)
	Отбор = Новый Структура("ЭтапДоговора", Этап);
	ИскСтроки = СметыПоЭтапу.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		// Смет нет
		Элементы.ИнфоСметы.Видимость = Истина;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
		ИнфоСметы = "Смет нет";
		
	ИначеЕсли ИскСтроки.Количество() = 1 Тогда
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Истина;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
		ПечФормаСметы = ИскСтроки[0].ФайлСметы;
		
	Иначе
		// Смет несколько
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Истина;
		Элементы.МенюВыбораСмет.СписокВыбора.Очистить();
		Элементы.МенюВыбораСмет.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Для каждого Стр Из ИскСтроки Цикл
			Элементы.МенюВыбораСмет.СписокВыбора.Добавить(Стр.ФайлСметы, Строка(Стр.ФайлСметы));
		КонецЦикла;
		МенюВыбораСмет = Элементы.МенюВыбораСмет.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПечФормаСметыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборФайла(ПечФормаСметы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Акты
//// Обработчики
&НаКлиенте
Процедура АктыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	
	СостояниеАкта = "";
	ВидАкта = "";
	УсловиеЭтапаДоговора = "";
	ОбъемРаботКРаспределению = 0;
	ОбъемРаботНеРаспределено = 0;
    Элементы.ОбъемРаботНеРаспределено.ЦветТекста = WebЦвета.Черный;
	Элементы.ГруппаОбъекты.Видимость = Ложь;
	Элементы.ЗарплатаОбъектРабот.Видимость = Ложь;
	
	Если ТекДанные = Неопределено Тогда
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
		Элементы.ИнфоДС.Видимость = Ложь;
		Элементы.ПечФормаДС.Видимость = Ложь;
		Элементы.МенюВыбораДС.Видимость = Ложь;
		
		// Сброс строк в зарплате
		Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора", "№в4;№");
		Элементы.Зарплата.ОтборСтрок = Отбор;
		
		Возврат;	
	КонецЕсли;
	
	КонтрольДанныхСтроки(ТекДанные);
	
	Если Не ЗначениеЗаполнено(ТекДанные.ЭтапДоговора) Тогда
		ТекущийАкт = "";
		ТекущийНомерАкта = "";
		ТекущийЭтапДоговора = "";
		ТекущийДоговор = "";
		
		// Сброс строк в зарплате
		Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора", "№в4;№");
		Элементы.Зарплата.ОтборСтрок = Отбор;
		
		Возврат;	
	КонецЕсли; 
	
	// Для контроля смены акта в строке
	ТекущийАкт = ТекДанные.Акт;
	ТекущийНомерАкта = ТекДанные.НомерАкта;
	ТекущийЭтапДоговора = ТекДанные.ЭтапДоговора;
	ТекущийДоговор = ТекДанные.Договор;
	
	НесколькоОбъектов = НесколькоОбъектовЭтапа(ТекДанные.ЭтапДоговора);
	
	УправлениеДиалогом();
	
	Если НесколькоОбъектов Тогда

		ПоказатьОбъектыРаботЭтапаДоговора(ТекДанные.ЭтапДоговора);
		
		РассчитатьОбъемРаботПоЭтапу(ТекДанные);
		
	Иначе
		РассчитатьОбъемРаботКРаспределению();
		
		// отбор строк зарплаты по этапу
		Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора, НомерАкта", ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		Элементы.Зарплата.ОтборСтрок = Отбор;
	КонецЕсли; 
	
	ОтобразитьДопИнформацию(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ФлПоровну = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АктыПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УдалитьЗарплатуПоАкту(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
	УдалитьОбъектыРаботПоЭтапу(ТекДанные.ЭтапДоговора);
	ОбъемРаботКРаспределению = 0;
	ОбъемРаботКРаспределениюПоОбъекту = 0;
КонецПроцедуры

&НаКлиенте
Процедура АктыАктПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтр = АктУжеЕсть(ТекДанные.Акт, ТекДанные.НомерСтроки);
	
	Если НомерСтр > 0 Тогда
		Сообщить("Акт " + ТекДанные.Акт + " уже есть в строке "+НомерСтр+" документа!");
		ТекДанные.Акт = ТекущийАкт;
		Возврат;
	КонецЕсли; 
	
	ТекДанные.ЭтапДоговора = ЭтапАкта(ТекДанные.Акт);
	ТекДанные.Договор = ДоговорЭтапа(ТекДанные.ЭтапДоговора);
	НесколькоОбъектов = НесколькоОбъектовЭтапа(ТекДанные.ЭтапДоговора); 
	
	ЗаполнитьОплаты(ТекДанные.Договор, ТекДанные.ЭтапДоговора, ТекДанные.Акт);
	
	// контроль суммы акта цветом
	КонтрольДанныхСтроки(ТекДанные);
	
	ЗаполнитьДатуАкта(ТекДанные);
	
	ТекущийЭтапДоговораДляОбъектов = ТекущийЭтапДоговора;
	
	// удаление зарплаты по бывшему акту
	Если ТекущийАкт <> ТекДанные.Акт Тогда
		УдалитьЗарплатуПоАкту(ТекущийЭтапДоговора, ТекущийНомерАкта);
		
		// Для последующего контроля смены акта в строке
		ТекущийАкт = ТекДанные.Акт;
		ТекущийНомерАкта = ТекДанные.НомерАкта;
		ТекущийЭтапДоговора = ТекДанные.ЭтапДоговора;
		ТекущийДоговор = ТекДанные.Договор;
	КонецЕсли;
	
	УправлениеДиалогом();
	
	Если НесколькоОбъектов Тогда
		
		// Удалить данные ОбъектовРабот по бывшему акту
		Если ТекущийЭтапДоговораДляОбъектов <> ТекДанные.ЭтапДоговора Тогда
			УдалитьОбъектыРаботПоЭтапу(ТекущийЭтапДоговораДляОбъектов);
		КонецЕсли;
		
		// запомнить выбранный этап
		ТекущийЭтапДоговораДляОбъектов = ТекДанные.ЭтапДоговора;
		
		// Перезаполнить объекты
		УдалитьОбъектыРаботПоЭтапу(ТекДанные.ЭтапДоговора);
		ЗаполнитьОбъектыРаботПоЭтапу(ТекДанные.ЭтапДоговора);
		
		// Перезаполнить исполнителей
		УдалитьЗарплатуПоАкту(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		ЗаполнитьИсполнителейПоЭтапу(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		ЗаполнитьНеОсновныхИсполнителейПоЭтапу(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		
		РассчитатьОбъемРаботПоЭтапу(ТекДанные);
		ЗаполнитьНормативы();
		РассчитатьЗарплатуПоЭтапу(ТекДанные);

	Иначе
		
		РассчитатьОбъемРаботКРаспределению();
	
		// заполнение зарплаты но новому акту
		ДобавитьИсполнителейПоНовомуАкту(ТекДанные);
		
		ЗаполнитьНормативы();
		
		ПересчитатьОбъемРаботИсполнителей();
		
		// отбор строк зарплаты по новому акту
		Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора, НомерАкта", ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		Элементы.Зарплата.ОтборСтрок = Отбор;
	КонецЕсли; 
	
	ОтобразитьДопИнформацию(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура АктыАктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Отбор = Новый Структура("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот")); 
	ПараметрыПолученияДанных.Вставить("Отбор", Отбор);
КонецПроцедуры

&НаКлиенте
Процедура АктыАктИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура АктыАктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


//// Методы

&НаКлиенте
Процедура ЗаполнитьДатуАкта(ТекДанные)
	Если ЗначениеЗаполнено(ТекДанные.ДатаАкта) Тогда
		Если НачалоМесяца(ТекДанные.ДатаАкта) <> НачалоМесяца(Объект.Дата) Тогда
			Сообщить("Дата акта не соответствует периоду актирования!");
			ТекДанные.ЧислоАкта = 0;
			ТекДанные.ДатаАкта = Дата(1, 1, 1);
		Иначе
			ТекДанные.ЧислоАкта = День(ТекДанные.ДатаАкта);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.ДатаДела) Тогда
		// Если Дело вышло в пред месяце, то акт должен быть первым рабочим днем тек месяца
		// Если Дело вышло в след месяце, то акт не должен актироваться
		Если ТекДанные.ДатаДела < НачалоМесяца(Объект.Дата) Тогда
			ДатаАкта = КалендарныеГрафики.БлижайшийРабочийДень(, НачалоМесяца(Объект.Дата));
			ТекДанные.ЧислоАкта = День(ДатаАкта);
		ИначеЕсли ТекДанные.ДатаДела > КонецМесяца(Объект.Дата) Тогда
			ТекДанные.ЧислоАкта = 0;
			ДатаАкта = Дата(1, 1, 1);
			Сообщить("Дата акта не определена, т.к. дело зарегистрировано в следующем периоде!");
		Иначе
			ТекДанные.ЧислоАкта = День(ТекДанные.ДатаДела);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ТекДанные.ЧислоАкта) Тогда
			АктыЧислоАктаПриИзменении("");	
		КонецЕсли; 
	Иначе
		// Даты дела нет - дату акта не заполнять
		ТекДанные.ЧислоАкта = 0;
		ТекДанные.ДатаАкта = Дата(1, 1, 1);
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Процедура КонтрольДанныхСтроки(ТекДанные)
	ЦветФонаШапкиТаблицы = ЦветФонаШапкиТаблицы();
	
	ИскЭл = Элементы.АктыСумма; 
	//ИскЭл.ЦветТекста = WebЦвета.Черный;
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.Сумма <> ТекДанные.СуммаЭтапаДоговора Тогда
		Если ТекДанные.ВидАкта = ПредопределенноеЗначение("Перечисление.мВидыАктовВыполненныхРабот.Обычный") Тогда
			ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
			//ИскЭл.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
	КонецЕсли; 
	
	ИскЭл = Элементы.АктыСуммаПрочих; 
	//ИскЭл.ЦветТекста = WebЦвета.Черный;
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.СуммаПрочих = 0 и Не ТекДанные.ЭтоФизЛицо Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
	КонецЕсли; 
	
	// Плановый срок
	//ИскЭл = Элемент.ПодчиненныеЭлементы.АктыГруппаДаты.ПодчиненныеЭлементы.АктыПлановыйСрок;
	Элементы.АктыПлановыйСрок.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ЗначениеЗаполнено(ТекДанные.ЭтапДоговора) Тогда
		Если Не ТекДанные.ПлановыйСрокНеНужен Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.ПлановыйСрок) Тогда
				Элементы.АктыПлановыйСрок.ЦветФонаЗаголовка = WebЦвета.Розовый;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Дело
	Элементы.АктыДатаДела.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ЗначениеЗаполнено(ТекДанные.ЭтапДоговора) Тогда
		Если ТекДанные.КоличествоДел > 0 Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.ДатаДела) Тогда
				Элементы.АктыДатаДела.ЦветФонаЗаголовка = WebЦвета.Розовый;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Оплата Договора
	ИскЭл = Элементы.АктыОплатаДоговора;
	//ИскЭл.ЦветТекста = WebЦвета.Черный;
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.ОплатаДоговора <> ТекДанные.СуммаДоговора Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
		//ИскЭл.ЦветТекста = WebЦвета.Красный;
	КонецЕсли; 
	
	// Оплата этапа
	ИскЭл = Элементы.АктыОплатаЭтапаДоговора;
	//ИскЭл.ЦветТекста = WebЦвета.Черный;
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.ОплатаЭтапаДоговора <> ТекДанные.СуммаЭтапаДоговора Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
		//ИскЭл.ЦветТекста = WebЦвета.Красный;
	КонецЕсли; 
	
	// Подписание договора
	ИскЭл = Элементы.АктыДоговор;
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.СостояниеДоговора <> ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Подписан") Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветФонаШапкиТаблицы()
	Возврат ЦветаСтиля.ЦветФонаШапкиТаблицы;	
КонецФункции
 

&НаСервереБезКонтекста
Функция СтоимостьЭтапаДоговора(ЭтапДоговора)
	Если ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат ЭтапДоговора.СтоимостьСНДС;	
	КонецЕсли;
	Возврат 0;
КонецФункции
 
&НаКлиенте
Процедура ПоказатьОбъектыРаботЭтапаДоговора(ЭтапДоговора)
	// Отбор Объектов по этапу
	ОтборФикс = Новый ФиксированнаяСтруктура("ЭтапДоговора", ЭтапДоговора);
	Элементы.ОбъектыРабот.ОтборСтрок = ОтборФикс;
	
	// если ничего не отобралось, то подгрузить объекты
	Отбор = Новый Структура("ЭтапДоговора", ЭтапДоговора);
	ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		ЗагрузитьОбъектыЭтапаДоговора(ЭтапДоговора);
		
		// вторая попытка показать объекты
		Элементы.ОбъектыРабот.ОтборСтрок = ОтборФикс;
	Иначе
		// Заполнить номера строк
		Сч = 0;
		Для каждого Стр Из ИскСтроки Цикл
			Сч = Сч+1;
			Стр.НомерПП = Сч;
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьОбъектыЭтапаДоговора(ЭтапДоговора)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровОбъектыРабот.Смета,
		|	мЭтапыДоговоровОбъектыРабот.ОбъектРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета.Объем КАК ОбъемРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета.НДС КАК НДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате КАК Сумма,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка КАК ЭтапДоговора
		|ПОМЕСТИТЬ Сметы
		|ИЗ
		|	Справочник.мЭтапыДоговоров.ОбъектыРабот КАК мЭтапыДоговоровОбъектыРабот
		|ГДЕ
		|	мЭтапыДоговоровОбъектыРабот.Ссылка = &ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мСметыОбъемРабот.Ссылка КАК Смета,
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.СтадияРабот.НеВходитВОбъемДляНачисленияЗП
		|				ТОГДА ВЫБОР
		|						КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|							ТОГДА ВЫРАЗИТЬ(мСметыОбъемРабот.Стоимость / 10000 КАК ЧИСЛО(17, 2))
		|						ИНАЧЕ мСметыОбъемРабот.Стоимость
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПрочих
		|ПОМЕСТИТЬ СметыСуммыПрочих
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.Ссылка В
		|			(ВЫБРАТЬ
		|				Сметы.Смета
		|			ИЗ
		|				Сметы КАК Сметы)
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сметы.Смета КАК Смета,
		|	Сметы.ОбъектРабот КАК ОбъектРабот,
		|	Сметы.НДС КАК НДС,
		|	Сметы.Сумма КАК Сумма,
		|	Сметы.ОбъемРабот КАК ОбъемРабот,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СметыСуммыПрочих.СуммаПрочих, 0) = 0
		|			ТОГДА Сметы.Сумма - Сметы.НДС - Сметы.ОбъемРабот
		|		ИНАЧЕ СметыСуммыПрочих.СуммаПрочих
		|	КОНЕЦ КАК СуммаПрочих,
		|	Сметы.ЭтапДоговора
		|ИЗ
		|	Сметы КАК Сметы
		|		ЛЕВОЕ СОЕДИНЕНИЕ СметыСуммыПрочих КАК СметыСуммыПрочих
		|		ПО Сметы.Смета = СметыСуммыПрочих.Смета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мЭтапыДоговоровИсполнители.Исполнитель,
		|	мЭтапыДоговоровИсполнители.КТУ,
		|	мЭтапыДоговоровИсполнители.Ссылка КАК ЭтапДоговора,
		|	мЭтапыДоговоровИсполнители.ОбъектРабот,
		|	мЭтапыДоговоровИсполнители.Исполнитель.ТабельныйНомер КАК ТабельныйНомер,
		|	СведенияОПользователях.Подразделение
		|ИЗ
		|	Справочник.мЭтапыДоговоров.Исполнители КАК мЭтапыДоговоровИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО мЭтапыДоговоровИсполнители.Исполнитель = СведенияОПользователях.Подразделение
		|ГДЕ
		|	мЭтапыДоговоровИсполнители.Ссылка = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Заполнение объектов
	Выборка = Результат[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стр = Объект.ОбъектыРабот.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
		Стр.НеРаспределено = Стр.ОбъемРабот;
	КонецЦикла;
	
	// заполнение исполнителей
	Выборка = Результат[3].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот, Исполнитель", ЭтапДоговора, Выборка.ОбъектРабот, Выборка.Исполнитель);
		ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			Стр = Объект.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Стр.НомерАкта = ТекущийНомерАкта;
			Стр.Коэффициент = 1;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНормативы()
	Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ТекущийЭтапДоговора, ТекущийНомерАкта);
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ТекущийЭтапДоговора);
	Для каждого Стр Из ИскСтроки Цикл
		ДанныеДляНорматива.Вставить("Исполнитель", Стр.Исполнитель);
		ДанныеДляНорматива.Вставить("ВидРабот", ВидРаботЭтапаДоговора(Стр.ЭтапДоговора));
		ДанныеДляНорматива.Вставить("Дата", Объект.Дата);
		
		Стр.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
	КонецЦикла; 
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ВидРаботЭтапаДоговора(ЭтапДоговора)
	Возврат ЭтапДоговора.ВидРабот;
КонецФункции  

// Возвращает номер строки с дублем акта
&НаКлиенте
Функция АктУжеЕсть(Акт, НомерСтроки)
	Отбор = Новый Структура("Акт", Акт);
	ИскСтроки = Объект.Акты.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 1 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Если Стр.НомерСтроки <> НомерСтроки Тогда
				Возврат Стр.НомерСтроки;
			КонецЕсли; 
		КонецЦикла; 	
	КонецЕсли; 
	Возврат 0;	
КонецФункции

&НаСервере
Процедура ЗаполнитьОплаты(МассивДоговоров = "", МассивЭтапов = "", МассивАктов = "")
	
	Запрос = Новый Запрос;
	
	Если МассивДоговоров = "" Тогда
		// по всем
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеАкты.Договор,
		|	мАктированиеАкты.ЭтапДоговора,
		|	мАктированиеАкты.Акт
		|Поместить Массивы
		|ИЗ
		|	Документ.мАктирование.Акты КАК мАктированиеАкты
		|ГДЕ
		|	мАктированиеАкты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&МассивДоговоров КАК Договор,
		|	&МассивЭтапов КАК ЭтапДоговора,
		|	&МассивАктов КАК Акт
		|Поместить Массивы";
		
		Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
		Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
		Запрос.УстановитьПараметр("МассивАктов", МассивАктов);
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОбороты.Договор,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
	|				ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(17, 2))
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминацииПосле
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаПриход
	|		КОНЕЦ) КАК Оплата
	|ПОМЕСТИТЬ Договоры
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			,
	|			,
	|			День,
	|			Договор В
	|				(ВЫБРАТЬ
	|					Массивы.Договор
	|				ИЗ
	|					Массивы КАК Массивы)) КАК РасчетыСПокупателямиОбороты
	|ГДЕ
	|	РасчетыСПокупателямиОбороты.СуммаПриход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПокупателямиОбороты.ЭтапДоговора,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
	|				ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(17, 2))
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминацииПосле
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаПриход
	|		КОНЕЦ) КАК Оплата
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			,
	|			,
	|			День,
	|			ЭтапДоговора В
	|				(ВЫБРАТЬ
	|					Массивы.ЭтапДоговора
	|				ИЗ
	|					Массивы КАК Массивы)) КАК РасчетыСПокупателямиОбороты
	|ГДЕ
	|	РасчетыСПокупателямиОбороты.СуммаПриход <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОбороты.ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаДела,
	|	ВнутренниеДокументы.ЭтапДоговора
	|ПОМЕСТИТЬ ДатыДел
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|ГДЕ
	|	ВнутренниеДокументы.ЭтапДоговора В
	|				(ВЫБРАТЬ
	|					Массивы.ЭтапДоговора
	|				ИЗ
	|					Массивы КАК Массивы)
	|	И ВнутренниеДокументы.ВидДокумента = &ВидДокументаДело
	|	И НЕ ВнутренниеДокументы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мРеквизитыАктовВыполненныхРабот.ВидАкта КАК ВидАкта,
	|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта,
	|	мРеквизитыАктовВыполненныхРабот.Владелец КАК Акт,
	|	мРеквизитыАктовВыполненныхРабот.Сумма КАК Сумма,
	|	мРеквизитыАктовВыполненныхРабот.СуммаНДС КАК НДС
	|ПОМЕСТИТЬ РеквизитыАктов
	|ИЗ
	|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
	|ГДЕ
	|	мРеквизитыАктовВыполненныхРабот.Владелец В
	|				(ВЫБРАТЬ
	|					Массивы.Акт
	|				ИЗ
	|					Массивы КАК Массивы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
	|				ТОГДА мСметыОбъемРабот.Стоимость / 10000
	|			ИНАЧЕ мСметыОбъемРабот.Стоимость
	|		КОНЕЦ) КАК СуммаПрочих,
	|	мСметыОбъемРабот.Ссылка.ЭтапДоговора
	|ПОМЕСТИТЬ СуммыПрочих
	|ИЗ
	|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
	|ГДЕ
	|	мСметыОбъемРабот.Ссылка В
	|			(ВЫБРАТЬ
	|					Массивы.ЭтапДоговора.Смета
	|				ИЗ
	|					Массивы КАК Массивы)
	|	И мСметыОбъемРабот.СтадияРабот.НеВходитВОбъемДляНачисленияЗП
	|
	|СГРУППИРОВАТЬ ПО
	|	мСметыОбъемРабот.Ссылка.ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(мДатыДоговоров.Период) КАК Период,
	|	мДатыДоговоров.ЭтапДоговора
	|ПОМЕСТИТЬ МаксДаты
	|ИЗ
	|	РегистрСведений.мДатыДоговоров КАК мДатыДоговоров
	|ГДЕ
	|	мДатыДоговоров.ВидДатыДоговора = &ВидДатыПлановыйСрок
	|	И мДатыДоговоров.ЭтапДоговора В
	|			(ВЫБРАТЬ
	|				Массивы.ЭтапДоговора
	|			ИЗ
	|				Массивы КАК Массивы)
	|
	|СГРУППИРОВАТЬ ПО
	|	мДатыДоговоров.ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мЗамечанияПоПроверкеАктов.Комментарий КАК Замечание,
	|	мЗамечанияПоПроверкеАктов.Акт КАК Акт
	|ПОМЕСТИТЬ Замечания
	|ИЗ
	|	РегистрСведений.мЗамечанияПоПроверкеАктов КАК мЗамечанияПоПроверкеАктов
	|ГДЕ
	|	мЗамечанияПоПроверкеАктов.Акт В
	|			(ВЫБРАТЬ
	|				Массивы.Акт
	|			ИЗ
	|				Массивы КАК Массивы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксДаты.ЭтапДоговора,
	|	мДатыДоговоров.Дата КАК ПлановыйСрок
	|ПОМЕСТИТЬ ПлановыеСроки
	|ИЗ
	|	МаксДаты КАК МаксДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мДатыДоговоров КАК мДатыДоговоров
	|		ПО МаксДаты.ЭтапДоговора = мДатыДоговоров.ЭтапДоговора
	|			И МаксДаты.Период = мДатыДоговоров.Период
	|ГДЕ
	|	мДатыДоговоров.ВидДатыДоговора = &ВидДатыПлановыйСрок
	|;
 	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   СУММА(ВЫБОР
    |           КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
    |               ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
    |           ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
    |       КОНЕЦ) КАК Сумма,
    |   мЭтапыДоговоров.Владелец КАК Договор
	|ПОМЕСТИТЬ СуммыДоговоров
    |ИЗ
    |   Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
    |ГДЕ
    |   мЭтапыДоговоров.Владелец В
	|				(ВЫБРАТЬ
	|					Массивы.Договор
	|				ИЗ
	|					Массивы КАК Массивы)
    |   И НЕ мЭтапыДоговоров.ПометкаУдаления
    |   И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
    |
    |СГРУППИРОВАТЬ ПО
    |   мЭтапыДоговоров.Владелец
    |;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Массивы.Договор КАК Договор,
	|	Массивы.Договор.Корреспондент.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ЕстьNULL(СуммыДоговоров.Сумма, 0) КАК СуммаДоговора,
	|	Массивы.ЭтапДоговора как ЭтапДоговора,
	|	Массивы.ЭтапДоговора.ВидРабот.УчетПроизводства как ЭтоПроизводство,
	|	ВЫБОР КОГДА Массивы.ЭтапДоговора.ДатаПоследнейЗаписи < &ДатаДеноминации ТОГДА
	|		Выразить(Массивы.ЭтапДоговора.СтоимостьСНДС как Число(17, 2))
	|	ИНАЧЕ
	|		Массивы.ЭтапДоговора.СтоимостьСНДС
	|	КОНЕЦ как СуммаЭтапаДоговора,
	|	Массивы.ЭтапДоговора.ВидРабот.НеРассчитыватьПлановыйСрок как ПлановыйСрокНеНужен,
	|	Массивы.ЭтапДоговора.КоличествоДел как КоличествоДел,
	|	Массивы.ЭтапДоговора.ШаблонУсловийДоговора как УсловиеЭтапаДоговора,
	|	Массивы.Акт как Акт,
	|	Массивы.Акт.РегистрационныйНомер как НомерАкта,
	|	Массивы.Акт.ДатаРегистрации как ДатаАкта,
	|	ЕстьNULL(ДатыДел.ДатаДела, &ПустаяДата) КАК ДатаДела,
	|	ЕстьNULL(ПлановыеСроки.ПлановыйСрок, &ПустаяДата) КАК ПлановыйСрок,
	|	ЕстьNULL(Договоры.Оплата, 0) КАК ОплатаДоговора,
	|	ЕстьNULL(Этапы.Оплата, 0) КАК ОплатаЭтапаДоговора,
	|	ЕстьNULL(мСостоянияДоговоров.Состояние, """") КАК СостояниеДоговора,
	|	ЕстьNULL(РеквизитыАктов.СостояниеАкта, """") КАК СостояниеАкта,
	|	ЕстьNULL(РеквизитыАктов.ВидАкта, """") КАК ВидАкта,
	|	ЕстьNULL(РеквизитыАктов.Сумма, 0) КАК Сумма,
	|	ЕстьNULL(РеквизитыАктов.НДС, 0) КАК НДС,
	|	ЕстьNULL(СуммыПрочих.СуммаПрочих, 0) КАК СуммаПрочих,
    |	Файлы.Ссылка КАК Файл,
	|	ВЫБОР КОГДА ЕстьNULL(Замечания.Замечание, &Проверен) = &Проверен Тогда &Проверен
	|	Иначе Замечания.Замечание 
	|	Конец КАК Замечание
	|ИЗ
	|	Массивы КАК Массивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыДоговоров КАК СуммыДоговоров
	|		ПО Массивы.Договор = СуммыДоговоров.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Договоры КАК Договоры
	|		ПО Массивы.Договор = Договоры.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыДел КАК ДатыДел
	|		ПО Массивы.ЭтапДоговора = ДатыДел.ЭтапДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыПрочих КАК СуммыПрочих
	|		ПО Массивы.ЭтапДоговора = СуммыПрочих.ЭтапДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеСроки КАК ПлановыеСроки
	|		ПО Массивы.ЭтапДоговора = ПлановыеСроки.ЭтапДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Замечания КАК Замечания
	|		ПО Массивы.Акт = Замечания.Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеквизитыАктов КАК РеквизитыАктов
	|		ПО Массивы.Акт = РеквизитыАктов.Акт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияДоговоров КАК мСостоянияДоговоров
	|		ПО Массивы.Договор = мСостоянияДоговоров.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО Массивы.Договор = Файлы.ВладелецФайла
	|			И НЕ Файлы.ПометкаУдаления
	|			И (Файлы.Наименование ПОДОБНО ""Дог %"")
	|			И (Файлы.ТекущаяВерсияРасширение = ""pdf"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Этапы КАК Этапы
	|		ПО Массивы.ЭтапДоговора = Этапы.ЭтапДоговора";
	
	АктПроверен = Справочники.мЗамечанияПроверкиАктов.Проверен;
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	Запрос.УстановитьПараметр("ДатаДеноминацииПосле", Дата(2016,7,2));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("Проверен", АктПроверен);
	Запрос.УстановитьПараметр("ВидДатыПлановыйСрок", Справочники.мВидыДатДоговоров.ПлановыйСрок);
	Запрос.УстановитьПараметр("ВидДокументаДело", Справочники.ВидыВнутреннихДокументов.Дело);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если МассивДоговоров = "" Тогда
		Для каждого Стр Из Объект.Акты Цикл
			Отбор = Новый Структура("Договор, ЭтапДоговора, Акт", Стр.Договор, Стр.ЭтапДоговора, Стр.Акт);
			ИскСтроки = РезультатЗапроса.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Стр, ИскСтроки[0],,"Договор, ЭтапДоговора, Акт, Сумма, НДС, СуммаПрочих, НомерАкта"); 
				Стр.Проверен = Стр.Замечание = АктПроверен;
				Если ИскСтроки[0].ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					Стр.ЭтоФизЛицо = Истина;
				Иначе	
				    Стр.ЭтоФизЛицо = Ложь;
				КонецЕсли; 
				ЭтоПроизводство = ИскСтроки[0].ЭтоПроизводство;
			КонецЕсли; 
		КонецЦикла; 
	Иначе	
		Отбор = Новый Структура("Договор, ЭтапДоговора, Акт", МассивДоговоров, МассивЭтапов, МассивАктов);
		ИскСтроки = РезультатЗапроса.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			СтрОб = Объект.Акты.НайтиСтроки(Отбор);
			Если СтрОб.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрОб[0], ИскСтроки[0],,"Договор, ЭтапДоговора, Акт"); 
				СтрОб[0].Проверен = СтрОб[0].Замечание = АктПроверен;
				Если ИскСтроки[0].ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					СтрОб[0].ЭтоФизЛицо = Истина;
				Иначе	
				    СтрОб[0].ЭтоФизЛицо = Ложь;
				КонецЕсли; 
				ЭтоПроизводство = ИскСтроки[0].ЭтоПроизводство;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтапАкта(Акт)
	Возврат Акт.ЭтапДоговора;	
КонецФункции
 
&НаСервереБезКонтекста
Функция ДоговорЭтапа(Этап)
	Возврат Этап.Владелец;	
КонецФункции

&НаСервереБезКонтекста
Функция НесколькоОбъектовЭтапа(Этап)
	Возврат Этап.ВидЭтапа = Перечисления.мВидыЭтапов.НесколькоОбъектовЮрЛицо;
КонецФункции

&НаКлиенте
Процедура АктыЧислоАктаПриИзменении(Элемент)
    ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ЧислоАкта) Тогда
	    ТекДанные.ДатаАкта = Дата(Год(Объект.Дата), Месяц(Объект.Дата), ТекДанные.ЧислоАкта);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДоговорГКИ(Договор)
	Возврат Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДоговорГКИ;	
КонецФункции

&НаКлиенте
Процедура ОтобразитьДопИнформацию(ТекДанные)
	// Отображение доп информации по договору
	ТекущийДоговор = ТекДанные.Договор;
	Если Не ЗначениеЗаполнено(ТекДанные.СостояниеДоговора) Тогда
		ТекДанные.СостояниеДоговора = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ТекущийДоговор);
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ТекДанные.Файл) Тогда
		ТекДанные.Файл = мРаботаСДоговорами.ПолучитьФайлДоговора(ТекущийДоговор);
	КонецЕсли; 
	ПечФормаДоговора = ТекДанные.Файл;
	СостояниеДоговора = ТекДанные.СостояниеДоговора;
	УстановитьФорматСостоянияДоговора();
	
	ПоказатьДС(ТекущийДоговор);
	
	// Отображение доп информации по этапу
	ПоказатьСметыПоЭтапу(ТекДанные.ЭтапДоговора);	
	
	// Отображение доп информации по акту
	СостояниеАкта = ТекДанные.СостояниеАкта;
	ВидАкта = ТекДанные.ВидАкта;
	УсловиеЭтапаДоговора = ТекДанные.УсловиеЭтапаДоговора;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматСостоянияДоговора()
	Если СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.НеПодписан")
		ИЛИ СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Расторгнут") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Красный;	
	ИначеЕсли СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Подписан") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.ТемноСиний; //"0000CD"; //ТемноСиний;
	ИначеЕсли СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Проект")
		ИЛИ СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.НаПодписании") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Зеленый; // "228B22"; //Зеленый;
	Иначе	
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Черный;	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура АктыПроверенПриИзменении(Элемент)
    ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные.Проверен Тогда
		ТекДанные.Замечание = ПредопределенноеЗначение("Справочник.мЗамечанияПроверкиАктов.Проверен");	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АктыЗамечаниеПриИзменении(Элемент)
    ТекДанные = Элементы.Акты.ТекущиеДанные;
	ТекДанные.Проверен = ТекДанные.Замечание = ПредопределенноеЗначение("Справочник.мЗамечанияПроверкиАктов.Проверен");
КонецПроцедуры

&НаКлиенте
Процедура АктыСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
    Ставка = ПолучитьСтавкуНДС(ТекДанные.ЭтапДоговора);
	ТекДанные.НДС = Окр(ТекДанные.Сумма * Ставка / (100+Ставка), 2);
	
	КонтрольДанныхСтроки(ТекДанные);
	
	РассчитатьОбъемРаботКРаспределению();
	
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура АктыНДСПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура АктыСуммаПрочихПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

// Возвращает ставку НДС 
//
// Параметры:
//  ЭтапДоговора 
// Возвращаемое значение:
//   Ставка   - число
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС(ЭтапДоговора)
	Возврат ЭтапДоговора.СтавкаНДС.Ставка;
КонецФункции // ПолучитьСтавкуНДС(ЭтапДоговора)
 
#КонецОбласти

#Область ОбработчикиКомандФормы
//// Обработчики
&НаКлиенте
Процедура НайтиАкт(Команда)
	НомерАкта = "";
	Оповещение = Новый ОписаниеОповещения("ПослеВводаПоискаНомераАкта", ЭтотОбъект, Параметры);
	ПоказатьВводЗначения(Оповещение,
	НомерАкта, "Укажите номер акта", Тип("Строка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПоискаНомераАкта(НомерАкта, Параметры) Экспорт
    Если НомерАкта <> Неопределено Тогда
		Отбор = Новый ФиксированнаяСтруктура("НомерАкта", НомерАкта); 
		Элементы.Акты.ОтборСтрок = Отбор;
    КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьДоговор(Команда)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекДанные.Договор);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтап(Команда)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.ЭтапДоговора) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекДанные.ЭтапДоговора);
	ОткрытьФорму("Справочник.мЭтапыДоговоров.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоиск(Команда)
	Отбор = Новый ФиксированнаяСтруктура("НомерАкта", Неопределено); 
	Элементы.Акты.ОтборСтрок = Отбор;
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПоЭтапу(Команда)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекущийОбъектРабот = Неопределено;
		Возврат;
	КонецЕсли; 
	
	//ТекущийОбъектРабот = ТекДанные.ОбъектРабот;

	// отбор строк зарплаты по этапу
	Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора", ТекДанные.ЭтапДоговора);
	Элементы.Зарплата.ОтборСтрок = Отбор;
КонецПроцедуры

//// Методы


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеДиалогом()
	Элементы.АктыКоличество.Видимость = ЭтоПроизводство;	
	
	Если НесколькоОбъектов Тогда
		// Видимость ОбъектовРабот
		Элементы.ГруппаОбъекты.Видимость = Истина;
		Элементы.ЗарплатаОбъектРабот.Видимость = Истина;
	Иначе
		Элементы.ГруппаОбъекты.Видимость = Ложь;
		Элементы.ЗарплатаОбъектРабот.Видимость = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПредыдущийАдресФайла = "";
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор); 
КонецПроцедуры	

&НаСервере
Функция УпаковатьРезультатПроверки()
	Соот = Новый Соответствие;	
	Для каждого Стр Из Объект.Акты Цикл
		Если ЗначениеЗаполнено(Стр.Акт) Тогда
			Соот.Вставить(Стр.Акт, Стр.Замечание);
		КонецЕсли; 
	КонецЦикла;
	Возврат Соот;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

    УсловноеОформление.Элементы.Очистить();
    
    // Если Оплата договора меньше Сметной стоимости - выделить красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.ОплатаДоговора");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.СуммаДоговора");
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("АктыОплатаДоговора"); 
    
    // Если Оплата этапа меньше Сметной стоимости - выделить красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.ОплатаЭтапаДоговора");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.СуммаЭтапаДоговора");
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("АктыОплатаЭтапаДоговора"); 
    
    // Если Сумма акта не равна этапу - выделить красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.Сумма");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.СуммаЭтапаДоговора");
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("АктыСумма");
	
    // Если Договор не подписан - выделить красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.СостояниеДоговора");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//ЭлементУсловия.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Акты.СуммаЭтапаДоговора");
    ЭлементУсловия.ПравоеЗначение = Перечисления.мСостоянияДоговоров.Подписан;
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("АктыДоговор");
	
	// Если сотруднику ничего не начислено - ФИО красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Зарплата.Начислено");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловия.ПравоеЗначение = 0;
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗарплатаИсполнитель");
	
	//ОбъемРаботНеРаспределеноПоОбъекту
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъемРаботНеРаспределеноПоОбъекту");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементУсловия.ПравоеЗначение = 0;
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъемРаботНеРаспределеноПоОбъекту");
	
	//ОбъемРаботНеРаспределено
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъемРаботНеРаспределено");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементУсловия.ПравоеЗначение = 0;
    
    ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъемРаботНеРаспределено");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОбъектыРабот
//// Обработчики
&НаКлиенте
Процедура ОбъектыРаботПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекущийОбъектРабот = Неопределено;
		Возврат;
	КонецЕсли; 
	
	ТекущийОбъектРабот = ТекДанные.ОбъектРабот;

	// отбор строк зарплаты по этапу, объекту
	Отбор = Новый ФиксированнаяСтруктура("ЭтапДоговора, ОбъектРабот", ТекДанные.ЭтапДоговора, ТекДанные.ОбъектРабот);
	Элементы.Зарплата.ОтборСтрок = Отбор;
	
    //РассчитатьОбъемРаботКРаспределениюПоОбъекту();
	ОбъемРаботКРаспределениюПоОбъекту = ТекДанные.ОбъемРабот;
	ОбъемРаботНеРаспределеноПоОбъекту = ТекДанные.НеРаспределено;
	
	
КонецПроцедуры

//// Методы
&НаКлиенте
Процедура УдалитьОбъектыРаботПоЭтапу(Этап)
	// надо почистить строки Объектов 
	Отбор = Новый Структура("ЭтапДоговора", Этап);
	ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Объект.ОбъектыРабот.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

// Заполняет ОбъектыРабот когда НесколькоОбъектов 
&НаСервере
Функция ЗаполнитьОбъектыРаботПоЭтапу(Этап)
	Выборка = мРаботаСДоговорами.ОбъектыРаботПоЭтапу(Этап);	
	
	// перед добавлением проверка на наличие
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", Этап, Выборка.ОбъектРабот);
		ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НовСтрока = Объект.ОбъектыРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			НовСтрока.НеРаспределено = НовСтрока.ОбъемРабот;
		КонецЕсли; 	
	КонецЦикла;
КонецФункции

&НаСервере
Функция ЗаполнитьОбъектыРаботПоЭтапу1(Этап)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровОбъектыРабот.ОбъектРабот КАК ОбъектРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета КАК Смета,
		|	мЭтапыДоговоровОбъектыРабот.Смета.НДС КАК НДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате КАК Сумма,
		|	мЭтапыДоговоровОбъектыРабот.Смета.Объем КАК ОбъемРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате - мЭтапыДоговоровОбъектыРабот.Смета.НДС - мЭтапыДоговоровОбъектыРабот.Смета.Объем КАК СуммаПрочих,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка КАК ЭтапДоговора
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	Справочник.мЭтапыДоговоров.ОбъектыРабот КАК мЭтапыДоговоровОбъектыРабот
		|ГДЕ
		|	НЕ мЭтапыДоговоровОбъектыРабот.ОбъектРабот.ПометкаУдаления
		|	И НЕ мЭтапыДоговоровОбъектыРабот.Смета.ПометкаУдаления
		|	И мЭтапыДоговоровОбъектыРабот.Ссылка = &Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора КАК ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот КАК ОбъектРабот,
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(мСметыОбъемРабот.Стоимость / 10000 КАК ЧИСЛО(17, 2))
		|			ИНАЧЕ мСметыОбъемРабот.Стоимость
		|		КОНЕЦ) КАК СуммаЗИС
		|ПОМЕСТИТЬ СуммыЗИС
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.СтадияРабот.Наименование = ""Внесение изменений в ЗИС""
		|	И мСметыОбъемРабот.Ссылка.ЭтапДоговора = &Этап
		|	И мСметыОбъемРабот.Стоимость > 0
		|	И мСметыОбъемРабот.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Смета
		|			ИЗ
		|				Объекты КАК Объекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мОбъектыРаботКонтактнаяИнформация.Ссылка КАК ОбъектРабот,
		|	мОбъектыРаботКонтактнаяИнформация.Представление,
		|	мОбъектыРаботКонтактнаяИнформация.Район,
		|	мОбъектыРаботКонтактнаяИнформация.Город
		|ПОМЕСТИТЬ Районы
		|ИЗ
		|	Справочник.мОбъектыРабот.КонтактнаяИнформация КАК мОбъектыРаботКонтактнаяИнформация
		|ГДЕ
		|	мОбъектыРаботКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.ОбъектРабот
		|			ИЗ
		|				Объекты КАК Объекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мРайоныПоСотрудникам.Сотрудник,
		|	СведенияОПользователях.Подразделение,
		|	Районы.ОбъектРабот
		|ПОМЕСТИТЬ НеОсновные
		|ИЗ
		|	РегистрСведений.мРайоныПоСотрудникам КАК мРайоныПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО мРайоныПоСотрудникам.Сотрудник = СведенияОПользователях.Пользователь,
		|	Районы КАК Районы
		|ГДЕ
		|	Районы.Представление ПОДОБНО ""%"" + мРайоныПоСотрудникам.Месторасположение + ""%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыЗИС.ЭтапДоговора КАК ЭтапДоговора,
		|	СуммыЗИС.ОбъектРабот КАК ОбъектРабот,
		|	ЕСТЬNULL(СуммыЗИС.СуммаЗИС, 0) КАК СуммаЗИС,
		|	ЕСТЬNULL(СуммыЗИС.СуммаЗИС, 0) КАК ОбъемРабот,
		|	1 КАК КТУ,
		|	ИСТИНА КАК НеОсновные,
		|	НеОсновные.Сотрудник КАК Исполнитель,
		|	НеОсновные.Сотрудник.ТабельныйНомер КАК ТабельныйНомер,
		|	НеОсновные.Подразделение
		|ИЗ
		|	НеОсновные КАК НеОсновные
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыЗИС КАК СуммыЗИС
		|		ПО НеОсновные.ОбъектРабот = СуммыЗИС.ОбъектРабот";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// перед добавлением проверка на наличие
	
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", Этап, Выборка.ОбъектРабот);
		ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НовСтрока = Объект.ОбъектыРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			НовСтрока.НеРаспределено = НовСтрока.ОбъемРабот;
		КонецЕсли; 	
	КонецЦикла;
КонецФункции

// Заполняет Исполнителей в Зарплата когда НесколькоОбъектов
&НаСервере
Функция ЗаполнитьНеОсновныхИсполнителейПоЭтапу(Этап, НомерАкта)
	Выборка = мРаботаСДоговорами.НеОсновныеИсполнителиПоЭтапу(Этап);
	
	// перед добавлением проверка на наличие
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот, Исполнитель, НомерАкта",
			Этап, Выборка.ОбъектРабот, Выборка.Исполнитель, НомерАкта);
		ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.НомерАкта = НомерАкта; //для синхронизации
			НоваяСтрока.КТУ = ?(НоваяСтрока.КТУ = 0, 1, НоваяСтрока.КТУ);
			
			// Изменение суммы объема работ для неосновных
			//  с 01.02.2017 составляет 50% от суммы в смете
			Если Объект.Дата >= Дата(2017, 2, 1) Тогда
				НоваяСтрока.ОбъемРабот = Окр(НоваяСтрока.ОбъемРабот/2, 2); 
			КонецЕсли; 
			
			Если Выборка.Подразделение <> Выборка.ПодразделениеЭтапа 
				И ВышестоящееПодразделение(Выборка.Подразделение) <> Выборка.ПодразделениеЭтапа Тогда
				НоваяСтрока.НеОсновноеПодразделение = Истина;
			Иначе	
				НоваяСтрока.НеОсновноеПодразделение = Ложь;
			КонецЕсли;
		КонецЕсли; 	
	КонецЦикла;
КонецФункции
 
// Заполняет Исполнителей в Зарплата когда НесколькоОбъектов
&НаСервере
Функция ЗаполнитьИсполнителейПоЭтапу(Этап, НомерАкта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровИсполнители.ОбъектРабот КАК ОбъектРабот,
		|	мЭтапыДоговоровИсполнители.Исполнитель КАК Исполнитель,
		|	мЭтапыДоговоровИсполнители.КТУ КАК КТУ,
		|	мЭтапыДоговоровИсполнители.Ссылка КАК ЭтапДоговора,
        |	0 КАК ОбъемРабот,
        |	Ложь КАК НеОсновные,
        |	мЭтапыДоговоровИсполнители.Ссылка.Подразделение КАК ПодразделениеЭтапа, 
        |	СведенияОПользователях.Подразделение КАК Подразделение,
        |	мЭтапыДоговоровИсполнители.Исполнитель.ТабельныйНомер КАК ТабельныйНомер
		|ИЗ
		|	Справочник.мЭтапыДоговоров.Исполнители КАК мЭтапыДоговоровИсполнители
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
        |		ПО мЭтапыДоговоровИсполнители.Исполнитель = СведенияОПользователях.Пользователь
		|ГДЕ
		|	мЭтапыДоговоровИсполнители.Ссылка = &Этап";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// перед добавлением проверка на наличие
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", Этап, Выборка.ОбъектРабот);
		ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Коэффициент = 1;
			НоваяСтрока.НомерАкта = НомерАкта; //для синхронизации
			НоваяСтрока.КТУ = ?(НоваяСтрока.КТУ = 0, 1, НоваяСтрока.КТУ);
			
			Если Выборка.Подразделение <> Выборка.ПодразделениеЭтапа 
				И ВышестоящееПодразделение(Выборка.Подразделение) <> Выборка.ПодразделениеЭтапа Тогда
				НоваяСтрока.НеОсновноеПодразделение = Истина;
			Иначе	
				НоваяСтрока.НеОсновноеПодразделение = Ложь;
			КонецЕсли;
		КонецЕсли; 	
	КонецЦикла;
КонецФункции

// ТекДанные - Строка Акты
&НаКлиенте
Процедура РассчитатьОбъемРаботПоЭтапу(ТекДанные)
	// Объем работ по этапу = сумме объемов по объектам
	
    ОбъемРаботКРаспределению = 0;
	Распределено = 0;
    
	// Если Несколько объектов, то суммы в строке надо скорректировать из итогов по объектам?
	ТекДанные.Сумма = 0;
	ТекДанные.НДС = 0;
	ТекДанные.СуммаПрочих = 0;
	
	// К распределению
	Отбор = Новый Структура("ЭтапДоговора", ТекДанные.ЭтапДоговора);
	ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
	Для каждого Стр Из ИскСтроки Цикл
		
		Если Стр.ОбъемРабот = 0 Тогда
			// может быть при открытии документа, надо рассчитать
		    Стр.ОбъемРабот = Стр.Сумма - Стр.НДС - Стр.СуммаПрочих; 
		КонецЕсли;
		
		ОбъемРаботКРаспределению = ОбъемРаботКРаспределению + Стр.ОбъемРабот;
		
		ТекДанные.Сумма = ТекДанные.Сумма + Стр.Сумма;
		ТекДанные.НДС = ТекДанные.НДС + Стр.НДС;
		ТекДанные.СуммаПрочих = ТекДанные.СуммаПрочих + Стр.СуммаПрочих;
		
		// Не распределено
		РаспределеноПоОбъекту = 0;
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ТекДанные.ЭтапДоговора, Стр.ОбъектРабот);
		ИскСтрокиЗП = Объект.Зарплата.НайтиСтроки(Отбор);
		Для каждого СтрЗП Из ИскСтрокиЗП Цикл
			РаспределеноПоОбъекту = РаспределеноПоОбъекту + СтрЗП.ОбъемРабот;
			Распределено = Распределено + СтрЗП.ОбъемРабот;
		КонецЦикла;
		
		// Не распределено по объекту
		Стр.НеРаспределено = Стр.ОбъемРабот - РаспределеноПоОбъекту;
		
	КонецЦикла; 
	
	ОбъемРаботНеРаспределено = ОбъемРаботКРаспределению - Распределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемРаботКРаспределениюПоОбъекту(ТекОбъектРабот)
	
    ОбъемРаботКРаспределениюПоОбъекту = 0;
	
	Если Не ЗначениеЗаполнено(ТекОбъектРабот) Тогда
		ОбъемРаботНеРаспределеноПоОбъекту = 0;
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура("ОбъектРабот", ТекОбъектРабот); 
	ИскСтроки = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
	
	Если ИскСтроки.Количество() > 0 Тогда
		ИскСтроки[0].ОбъемРабот = ИскСтроки[0].Сумма - ИскСтроки[0].НДС - ИскСтроки[0].СуммаПрочих;
		ОбъемРаботКРаспределениюПоОбъекту = ИскСтроки[0].ОбъемРабот;
		ОбъемРаботНеРаспределеноПоОбъекту = ОбъемРаботКРаспределениюПоОбъекту  - РаспределеноПоОбъекту(ИскСтроки[0]);
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Функция РаспределеноПоОбъекту(ТекДанные)
	Распределено = 0;
	//ТекДанные = Элементы.ОбъектыРабот.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
	//	Возврат Распределено;	
	//КонецЕсли; 
	
	Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ТекДанные.ЭтапДоговора, ТекДанные.ОбъектРабот);
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Распределено = Распределено + Стр.ОбъемРабот;           
		КонецЦикла;
	КонецЕсли;
	
	ТекДанные.НеРаспределено = ТекДанные.ОбъемРабот - Распределено;
	
	Возврат Распределено;
КонецФункции 

// Считаются только исполнители основного подразделения
&НаКлиенте
Процедура ПосчитатьИсполнителейИСуммуДляРаспределенияПоОбъекту(ЭтапДоговора, ОбъектРабот="")
		
    КолвоИсполнителейДляРаспределения = 0;
    СуммаДляРаспределенияПоОбъекту = 0;
	
	ТекОбъект = ?(ОбъектРабот="", ТекущийОбъектРабот, ОбъектРабот);
	
	Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ЭтапДоговора, ТекОбъект);
	
	СтрокаОбъекта = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
	Если СтрокаОбъекта.Количество() > 0 Тогда
    	СуммаДляРаспределенияПоОбъекту = СтрокаОбъекта[0].Сумма - СтрокаОбъекта[0].НДС - СтрокаОбъекта[0].СуммаПрочих;
	КонецЕсли; 
	
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		
	Для каждого ТекСтрока Из ИскСтроки Цикл
        Если ТекСтрока.НеОсновноеПодразделение Тогда
            // уменьшаем сумму к распределению на объем, отданный другим подразделениям
    	    СуммаДляРаспределенияПоОбъекту = СуммаДляРаспределенияПоОбъекту - ТекСтрока.ОбъемРабот;
        Иначе
            КолвоИсполнителейДляРаспределения = КолвоИсполнителейДляРаспределения + 1;
        КонецЕсли; 
	КонецЦикла;
КонецПроцедуры 

// ТекДанные - Строка Акты
&НаКлиенте
Процедура РассчитатьЗарплатуПоЭтапу(ТекДанные)
	
	// Рассчитывать надо по каждому объекту отдельно
	Отбор = Новый Структура("ЭтапДоговора", ТекДанные.ЭтапДоговора);
	ИскОбъекты = Объект.ОбъектыРабот.НайтиСтроки(Отбор);
		
	Для каждого СтрОбъект Из ИскОбъекты Цикл
		ПосчитатьИсполнителейИСуммуДляРаспределенияПоОбъекту(ТекДанные.ЭтапДоговора, СтрОбъект.ОбъектРабот);
		
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ТекДанные.ЭтапДоговора, СтрОбъект.ОбъектРабот);
		ИскЗП = Объект.Зарплата.НайтиСтроки(Отбор);
		
		//КолвоИсполнителейДляРаспределения = ИскЗП.Количество();
		
		// расчет объема пропорционально, на последнюю строку - остаток
		ОбщаяСуммаДляРаспределения = СуммаДляРаспределенияПоОбъекту;
		ОсталосьРаспределить = СуммаДляРаспределенияПоОбъекту;
		//ОбщаяСуммаДляРаспределения = ОбъемРаботКРаспределениюПоОбъекту;
		//ОсталосьРаспределить = ОбъемРаботКРаспределениюПоОбъекту;
		
		НомерПП = 0;
		ОсталосьРаспределитьКТУ = 1;
		
		Для каждого ТекСтрока Из ИскЗП Цикл
			
			// неосновные подразделения пропускаем - только расчет Начислено
			Если ТекСтрока.НеОсновноеПодразделение Тогда
				РассчитатьСуммуИсполнителя(ТекСтрока);
				Продолжить;
			КонецЕсли;
			
			НомерПП = НомерПП + 1;
			
			Если НомерПП = КолвоИсполнителейДляРаспределения Тогда
				ТекСтрока.ОбъемРабот = ОсталосьРаспределить;
				Если флПоровну Тогда
					ТекСТрока.КТУ = ОсталосьРаспределитьКТУ;
				КонецЕсли; 
			Иначе
				Если флПоровну Тогда
					// пропорционально
					Если КолвоИсполнителейДляРаспределения > 0 Тогда
						ТекСтрока.ОбъемРабот = Окр(ОбщаяСуммаДляРаспределения / КолвоИсполнителейДляРаспределения, 2);
						ТекСТрока.КТУ = Окр(1 / КолвоИсполнителейДляРаспределения, 4);
					КонецЕсли;
				Иначе
					// по КТУ
					ТекСтрока.ОбъемРабот = Окр(ОбщаяСуммаДляРаспределения * ТекСТрока.КТУ, 2);
				КонецЕсли; 
			КонецЕсли; 
			
			РассчитатьСуммуИсполнителя(ТекСтрока);
			
			ОсталосьРаспределить = ОсталосьРаспределить - ТекСтрока.ОбъемРабот;
			ОсталосьРаспределитьКТУ = ОсталосьРаспределитьКТУ - ТекСтрока.КТУ;
			ОсталосьРаспределить = ?(ОсталосьРаспределить < 0, 0, ОсталосьРаспределить);
			ОсталосьРаспределитьКТУ = ?(ОсталосьРаспределитьКТУ < 0, 0, ОсталосьРаспределитьКТУ);
		КонецЦикла;
		РассчитатьОбъемРаботКРаспределению();
		РассчитатьОбъемРаботКРаспределениюПоОбъекту(СтрОбъект.ОбъектРабот);
	КонецЦикла;
    
КонецПроцедуры 

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Зарплата
//// Обработчики
	
&НаКлиенте
Процедура ЗарплатаПриАктивизацииСтроки(Элемент)
	ТекущийКТУ = 0;
	ТекущийОбъемРабот = 0;
	ТекДанные = Элементы.Зарплата.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекущийКТУ = ТекДанные.КТУ;
	ТекущийОбъемРабот = ТекДанные.ОбъемРабот;
	
	КонтрольНачислено(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Зарплата.ТекущиеДанные;
        ТекДанные.ЭтапДоговора = Элементы.Акты.ТекущиеДанные.ЭтапДоговора;
        ТекДанные.НомерАкта = Элементы.Акты.ТекущиеДанные.НомерАкта;
		ТекДанные.ОбъектРабот = ТекущийОбъектРабот;
		ТекДанные.Коэффициент = 1;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаТабельныйНомерПриИзменении(Элемент)
    ТекДанные = Элементы.Зарплата.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Исполнитель = ПолучитьИсполнителяПоТабельныйНомер(ТекДанные.ТабельныйНомер);
	
	ИсполнительПриИзменении(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнительПриИзменении(Элемент)
	ТекДанные = Элементы.Зарплата.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИсполнительПриИзменении(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(ТекДанные)
	ТекДанныеАкта = Элементы.Акты.ТекущиеДанные;
	Если ТекДанныеАкта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТекДанныеАкта.Договор, ТекДанные.ЭтапДоговора);
	ДанныеДляНорматива.Вставить("Исполнитель", ТекДанные.Исполнитель);
	ДанныеДляНорматива.Вставить("ВидРабот", ВидРаботЭтапаДоговора(ТекДанные.ЭтапДоговора));
	ДанныеДляНорматива.Вставить("Дата", ТекДанныеАкта.ДатаАкта);
	//ДанныеДляНорматива.Вставить("Дата", Объект.Дата);
	
	ТекДанные.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
    ТекДанные.Подразделение = РаботаСПользователями.ПолучитьПодразделение(ТекДанные.Исполнитель);
	ОсновноеПодразделение = ПодразделениеЭтапаДоговора(ТекДанные.ЭтапДоговора);
	
	ТекДанные.НеОсновноеПодразделение = НеОсновноеПодразделение(ТекДанные.Подразделение, ОсновноеПодразделение);
	
	Если НесколькоОбъектов Тогда
		// Расчет по отдельному объекту
		ОбщийОбъемРаботНеРаспределено = ОбъемРаботНеРаспределеноПоОбъекту;
		ОбщаяСуммаДляРаспределения = СуммаДляРаспределенияПоОбъекту;
	Иначе
		ОбщийОбъемРаботНеРаспределено = ОбъемРаботНеРаспределено;
		ОбщаяСуммаДляРаспределения = СуммаДляРаспределения;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекДанные.Подразделение) Тогда
		Если ФлОстаток или Не флПоровну Тогда
			ТекДанные.ОбъемРабот = ?(ОбщийОбъемРаботНеРаспределено < 0, 0, ОбщийОбъемРаботНеРаспределено);
			ТекДанные.КТУ = НераспределеноКТУ();
		КонецЕсли; 
		Если флПоровну Тогда
			
			Если НесколькоОбъектов Тогда
				ПосчитатьИсполнителейИСуммуДляРаспределенияПоОбъекту(ТекДанные.ЭтапДоговора, ТекДанные.ОбъектРабот);	
			Иначе
				ПосчитатьИсполнителейИСуммуДляРаспределения(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);	
			КонецЕсли; 
			
			Если КолвоИсполнителейДляРаспределения > 0 Тогда
				ТекДанные.ОбъемРабот = Окр(ОбщаяСуммаДляРаспределения / КолвоИсполнителейДляРаспределения, 2);
				ТекДанные.КТУ = Окр(1 / КолвоИсполнителейДляРаспределения, 4);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	РассчитатьСуммуИсполнителя(ТекДанные);
	РассчитатьОбъемРаботКРаспределению();
	Если НесколькоОбъектов Тогда
		РассчитатьОбъемРаботКРаспределениюПоОбъекту(ТекДанные.ОбъектРабот);
	КонецЕсли; 

	ТекущийКТУ = ТекДанные.КТУ;
	ТекущийОбъемРабот = ТекДанные.ОбъемРабот;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаНормативПриИзменении(Элемент)
    ТекДанные = Элементы.Зарплата.ТекущиеДанные;
	РассчитатьСуммуИсполнителя(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКТУПриИзменении(Элемент)
    ТекДанные = Элементы.Зарплата.ТекущиеДанные;
    ТекДанные.ОбъемРабот = Окр(ПолучитьОбъемРаботКРаспределению(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта) * ТекДанные.КТУ, 2);

    РассчитатьОбъемРаботКРаспределению();
	Если НесколькоОбъектов Тогда
		РассчитатьОбъемРаботКРаспределениюПоОбъекту(ТекДанные.ОбъектРабот);
	КонецЕсли; 
    РассчитатьСуммуИсполнителя(ТекДанные);
	
	ТекущийКТУ = ТекДанные.КТУ;
	ТекущийОбъемРабот = ТекДанные.ОбъемРабот;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКоэффициентПриИзменении(Элемент)
    ТекДанные = Элементы.Зарплата.ТекущиеДанные;
    РассчитатьСуммуИсполнителя(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаОбъемРаботПриИзменении(Элемент)
    ТекДанные = Элементы.Зарплата.ТекущиеДанные;
	
	РассчитатьОбъемРаботКРаспределению();
	Если НесколькоОбъектов Тогда
		РассчитатьОбъемРаботКРаспределениюПоОбъекту(ТекДанные.ОбъектРабот);
	КонецЕсли; 
	
    РассчитатьСуммуИсполнителя(ТекДанные);
	
	// Пересчет КТУ
	ТекДанные.КТУ = ?(ТекущийОбъемРабот <> 0, ТекущийКТУ*ТекДанные.ОбъемРабот/ТекущийОбъемРабот, 0);
	
	// запоминание
	ТекущийКТУ = ТекДанные.КТУ;
	ТекущийОбъемРабот = ТекДанные.ОбъемРабот;
КонецПроцедуры

&НаКлиенте
Процедура ФлПоровнуПриИзменении(Элемент)
	Если флПоровну Тогда
		ФлОстаток = Ложь;
    	ПересчитатьОбъемРаботИсполнителей();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФлОстатокПриИзменении(Элемент)
	Если ФлОстаток Тогда
		флПоровну = Ложь;
	КонецЕсли; 
КонецПроцедуры

//// Методы
&НаКлиенте
Функция НераспределеноКТУ()
	Если НесколькоОбъектов Тогда
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ТекущийЭтапДоговора, ТекущийОбъектРабот);
	Иначе
		Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ТекущийЭтапДоговора, ТекущийНомерАкта);
	КонецЕсли;
	
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	
	РаспределеноКТУ = 0;
	Для каждого Стр Из ИскСтроки Цикл
		Если Стр.НеОсновноеПодразделение Тогда
			Продолжить;
		КонецЕсли; 
		РаспределеноКТУ = РаспределеноКТУ + Стр.КТУ;
	КонецЦикла; 
	Если РаспределеноКТУ >= 1 Тогда
		Возврат 0;
	Иначе
		Возврат 1 - РаспределеноКТУ;
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура КонтрольНачислено(ТекДанные)
	ЦветФонаШапкиТаблицы = ЦветФонаШапкиТаблицы();
	
	ИскЭл = Элементы.ЗарплатаНачислено; 
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.Начислено = 0 Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
	КонецЕсли; 
	
	ИскЭл = Элементы.ЗарплатаБазовоеНачисление; 
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.БазовоеНачисление = 0 Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
	КонецЕсли; 
	
	ИскЭл = Элементы.ЗарплатаИсполнитель; 
	ИскЭл.ЦветФонаЗаголовка = ЦветФонаШапкиТаблицы;
	Если ТекДанные.БазовоеНачисление = 0 или ТекДанные.Начислено = 0 Тогда
		ИскЭл.ЦветФонаЗаголовка = WebЦвета.Розовый;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗарплатуПоАкту(Этап, НомерАкта)
	// надо почистить строки зарплаты 
	Отбор = Новый Структура("ЭтапДоговора, НомерАкта", Этап, НомерАкта);
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Объект.Зарплата.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Процедура ДобавитьИсполнителейПоНовомуАкту(ТекДанные)
	// для устранения дублей исполнителей надо перед добавлением проверять их наличие в зарплате
	Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	
	ИспДляАкта = Новый Массив;
	Для каждого Стр Из ИскСтроки Цикл
		ИспДляАкта.Добавить(Стр.Исполнитель);
	КонецЦикла; 
	
	ДобавитьИсполнителейЭтапа(ТекДанные.ЭтапДоговора, ИспДляАкта, ТекДанные.НомерАкта);
	ДобавитьНеОсновныхИсполнителей(ТекДанные.ЭтапДоговора, ИспДляАкта, ТекДанные.НомерАкта);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсполнителейЭтапа(ЭтапДоговора, ИспДляАкта, НомерАкта)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ЭтапыДоговоровИсполнители.Исполнитель,
        |	ЭтапыДоговоровИсполнители.КТУ,
        |	0 КАК ОбъемРабот,
        |	Ложь КАК НеОсновные,
        |	ЭтапыДоговоровИсполнители.Ссылка КАК ЭтапДоговора, 
        |	СведенияОПользователях.Подразделение КАК Подразделение,
        |	ЭтапыДоговоровИсполнители.Исполнитель.ТабельныйНомер КАК ТабельныйНомер
        |ИЗ
        |	Справочник.мЭтапыДоговоров.Исполнители КАК ЭтапыДоговоровИсполнители
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
        |		ПО ЭтапыДоговоровИсполнители.Исполнитель = СведенияОПользователях.Пользователь
        |ГДЕ
        |	ЭтапыДоговоровИсполнители.Ссылка = &ЭтапДоговора";
        
    Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();
	
	ОбработатьВыборкуИсполнителей(Выборка, ИспДляАкта, НомерАкта);
    
КонецПроцедуры 

&НаСервере
Процедура ДобавитьНеОсновныхИсполнителей(ЭтапДоговора, ИспДляАкта, НомерАкта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мСметыОбъемРабот.Ссылка.ЭтапДоговора КАК ЭтапДоговора,
	|	СУММА(ВЫБОР
	|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
	|				ТОГДА Выразить(мСметыОбъемРабот.Стоимость / 10000 КАК Число(17, 2))
	|			ИНАЧЕ мСметыОбъемРабот.Стоимость
	|		КОНЕЦ) КАК СуммаЗИС
	|ПОМЕСТИТЬ СуммыЗИС
	|ИЗ
	|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
	|ГДЕ
	|	мСметыОбъемРабот.СтадияРабот.Наименование = ""Внесение изменений в ЗИС""
	|	И мСметыОбъемРабот.Ссылка = &СметаЭтапаДоговора
	|	И мСметыОбъемРабот.Стоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	мСметыОбъемРабот.Ссылка.ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мРайоныПоСотрудникам.Сотрудник,
	|	СведенияОПользователях.Подразделение
	|ПОМЕСТИТЬ НеОсновные
	|ИЗ
	|	РегистрСведений.мРайоныПоСотрудникам КАК мРайоныПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО мРайоныПоСотрудникам.Сотрудник = СведенияОПользователях.Пользователь
	|ГДЕ
	|	&Месторасположение ПОДОБНО ""%"" + мРайоныПоСотрудникам.Месторасположение + ""%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыЗИС.ЭтапДоговора КАК ЭтапДоговора,
	|	ЕстьNULL(СуммыЗИС.СуммаЗИС, 0) КАК ОбъемРабот,
	|	1 КАК КТУ,
	|	Истина КАК НеОсновные,
	|	НеОсновные.Сотрудник КАК Исполнитель,
	|	НеОсновные.Сотрудник.ТабельныйНомер КАК ТабельныйНомер,
	|	НеОсновные.Подразделение
	|ИЗ
	|	СуммыЗИС КАК СуммыЗИС,
	|	НеОсновные КАК НеОсновные";
	
	Запрос.УстановитьПараметр("Месторасположение", ЭтапДоговора.Месторасположение);
	Запрос.УстановитьПараметр("СметаЭтапаДоговора", ЭтапДоговора.Смета);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОбработатьВыборкуИсполнителей(Выборка, ИспДляАкта, НомерАкта);

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуИсполнителей(Выборка, ИспДляАкта, НомерАкта)
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИспДляАкта.Найти(Выборка.Исполнитель) <> Неопределено Тогда
			// Исполнитель уже есть
			Продолжить;
		КонецЕсли;
		
		Если Выборка.НеОсновные и Выборка.ОбъемРабот = 0 Тогда
			// У неосновных должна быть сумма внесения в ЗИС
			Продолжить;
		КонецЕсли; 
		
        НоваяСтрока = Объект.Зарплата.Добавить();    
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Изменение суммы объема работ для неосновных
		//  с 01.02.2017 составляет 50% от суммы в смете
		Если Объект.Дата >= Дата(2017, 2, 1) Тогда
			НоваяСтрока.ОбъемРабот = Окр(НоваяСтрока.ОбъемРабот/2, 2); 
		КонецЕсли; 
		
        НоваяСтрока.Коэффициент = 1;
        НоваяСтрока.НомерАкта = НомерАкта; //для синхронизации
		НоваяСтрока.КТУ = ?(НоваяСтрока.КТУ = 0, 1, НоваяСтрока.КТУ);
        
		ПодразделениеЭтапа = Выборка.ЭтапДоговора.Подразделение;
		Если Выборка.Подразделение <> ПодразделениеЭтапа И ВышестоящееПодразделение(Выборка.Подразделение) <> ПодразделениеЭтапа Тогда
			НоваяСтрока.НеОсновноеПодразделение = Истина;
		Иначе	
			НоваяСтрока.НеОсновноеПодразделение = Ложь;
		КонецЕсли;
		
		ИспДляАкта.Добавить(Выборка.Исполнитель);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабельныеНомера()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеЗарплата.Исполнитель,
		|	мАктированиеЗарплата.Исполнитель.ТабельныйНомер КАК ТабельныйНомер 
		|ИЗ
		|	Документ.мАктирование.Зарплата КАК мАктированиеЗарплата
		|ГДЕ
		|	мАктированиеЗарплата.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из Результат Цикл
		Отбор = Новый Структура("Исполнитель", Стр.Исполнитель);
		ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Для каждого СтрОб Из ИскСтроки Цикл
				СтрОб.ТабельныйНомер = Стр.ТабельныйНомер;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры


#КонецОбласти

#Область МетодыРасчетаЗарплатыПоАкту
&НаКлиенте
Процедура РассчитатьОбъемРаботКРаспределению()
    
    ОбъемРаботКРаспределению = 0;
    
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
    
    Если ТекДанные.Сумма = 0 Тогда
        Возврат;    
    КонецЕсли; 
    
    ОбъемРаботКРаспределению = ТекДанные.Сумма - ТекДанные.НДС - ТекДанные.СуммаПрочих;
	
	ОбъемРаботНеРаспределено = ОбъемРаботКРаспределению  - РассчитатьОбъемРаботРаспределено();
    
КонецПроцедуры 

&НаКлиенте
Функция РассчитатьОбъемРаботРаспределено()
	Распределено = 0;
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат Распределено;	
	КонецЕсли; 
	
	Отбор = Новый Структура("ЭтапДоговора", ТекДанные.ЭтапДоговора);
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			Распределено = Распределено + Стр.ОбъемРабот;           
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Распределено;
КонецФункции 

// Считаются только исполнители основного подразделения
&НаКлиенте
Процедура ПосчитатьИсполнителейИСуммуДляРаспределения(ЭтапДоговора, НомерАкта)
	
    КолвоИсполнителейДляРаспределения = 0;
    СуммаДляРаспределения = ОбъемРаботКРаспределению;
	
	Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ЭтапДоговора, НомерАкта);
	
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		
	Для каждого ТекСтрока Из ИскСтроки Цикл
        Если ТекСтрока.НеОсновноеПодразделение Тогда
            // уменьшаем сумму к распределению на объем, отданный другим подразделениям
    	    СуммаДляРаспределения = СуммаДляРаспределения - ТекСтрока.ОбъемРабот;
        Иначе
            КолвоИсполнителейДляРаспределения = КолвоИсполнителейДляРаспределения + 1;
        КонецЕсли; 
	КонецЦикла;
КонецПроцедуры 

// Объем, который отображается в форме надо еще уменьшить на суммы, которые отданы другим подразделениям
&НаКлиенте
Функция ПолучитьОбъемРаботКРаспределению(ЭтапДоговора, НомерАкта)
	Если НесколькоОбъектов Тогда
		КРаспределению = ОбъемРаботКРаспределениюПоОбъекту;
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ЭтапДоговора, ТекущийОбъектРабот);
	Иначе
		КРаспределению = ОбъемРаботКРаспределению;
		Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ЭтапДоговора, НомерАкта);
	КонецЕсли;
	
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
		
	Для каждого ТекСтрока Из ИскСтроки Цикл
        Если ТекСтрока.НеОсновноеПодразделение Тогда
    	    КРаспределению = КРаспределению - ТекСтрока.ОбъемРабот;
        КонецЕсли; 
    КонецЦикла; 
    Возврат КРаспределению;
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуИсполнителя(ТекДанные)
	ТекДанные.Начислено = Окр(ТекДанные.ОбъемРабот * ТекДанные.Норматив * ТекДанные.Коэффициент, 2);
	ТекДанные.БазовоеНачисление = Окр(ТекДанные.ОбъемРабот * ТекДанные.Норматив, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбъемРаботИсполнителей()
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПосчитатьИсполнителейИСуммуДляРаспределения(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    
    // расчет объема пропорционально, на последнюю строку - остаток
	Если НесколькоОбъектов Тогда
	    ОсталосьРаспределить = СуммаДляРаспределенияПоОбъекту;
		Отбор = Новый Структура("ЭтапДоговора, ОбъектРабот", ТекДанные.ЭтапДоговора, ТекущийОбъектРабот);
		ОбщаяСуммаДляРаспределения = СуммаДляРаспределенияПоОбъекту;
	Иначе
	    ОсталосьРаспределить = СуммаДляРаспределения;
		Отбор = Новый Структура("ЭтапДоговора, НомерАкта", ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
		ОбщаяСуммаДляРаспределения = СуммаДляРаспределения;
	КонецЕсли; 
	
	НомерПП = 0;
    ОсталосьРаспределитьКТУ = 1;
	
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	
	Для каждого ТекСтрока Из ИскСтроки Цикл
        // неосновные подразделения пропускаем - только расчет Начислено
		Если ТекСтрока.НеОсновноеПодразделение Тогда
			
			РассчитатьСуммуИсполнителя(ТекСтрока);

            Продолжить;
        КонецЕсли;
        
        НомерПП = НомерПП + 1;
        
        Если НомерПП = КолвоИсполнителейДляРаспределения Тогда
            ТекСтрока.ОбъемРабот = ОсталосьРаспределить;
			Если флПоровну Тогда
				ТекСТрока.КТУ = ОсталосьРаспределитьКТУ;
			КонецЕсли; 
		Иначе
			Если флПоровну Тогда
				// пропорционально
				Если КолвоИсполнителейДляРаспределения > 0 Тогда
					ТекСтрока.ОбъемРабот = Окр(ОбщаяСуммаДляРаспределения / КолвоИсполнителейДляРаспределения, 2);
					ТекСТрока.КТУ = Окр(1 / КолвоИсполнителейДляРаспределения, 4);
				КонецЕсли;
			Иначе
				// по КТУ
				ТекСтрока.ОбъемРабот = Окр(ОбщаяСуммаДляРаспределения * ТекСТрока.КТУ, 2);
			КонецЕсли; 
		КонецЕсли; 
		
		РассчитатьСуммуИсполнителя(ТекСтрока);

		ОсталосьРаспределить = ОсталосьРаспределить - ТекСтрока.ОбъемРабот;
        ОсталосьРаспределитьКТУ = ОсталосьРаспределитьКТУ - ТекСтрока.КТУ;
		ОсталосьРаспределить = ?(ОсталосьРаспределить < 0, 0, ОсталосьРаспределить);
        ОсталосьРаспределитьКТУ = ?(ОсталосьРаспределитьКТУ < 0, 0, ОсталосьРаспределитьКТУ);
		
    КонецЦикла;
    
	РассчитатьОбъемРаботКРаспределению();
	//РассчитатьОбъемРаботКРаспределениюПоОбъекту();
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьИсполнителяПоТабельныйНомер(ТабельныйНомер)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ТабельныйНомер = &ТабельныйНомер";

	Запрос.УстановитьПараметр("ТабельныйНомер", ТабельныйНомер);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции 

&НаСервереБезКонтекста
Функция ПодразделениеЭтапаДоговора(ЭтапДоговора)
	Возврат ЭтапДоговора.Подразделение;	
КонецФункции

&НаСервереБезКонтекста
Функция ВышестоящееПодразделение(Подразделение)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Подразделение.Родитель;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция НеОсновноеПодразделение(ПодразделениеИсполнителя, ПодразделениеЭтапа)
	Если ПодразделениеИсполнителя <> ПодразделениеЭтапа И ВышестоящееПодразделение(ПодразделениеИсполнителя) <> ПодразделениеЭтапа Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДопРеквДляНормативаЗП(Договор, ЭтапДоговора)
	СтруктураДопРекв = Новый Структура("ВидЗаказчика, ЦельПредоставления, ДопУсловие", "", "", "");
	
	Корреспондент = Договор.Корреспондент;
	
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидЗаказчика = мРаботаСоСметами.ПолучитьДопРеквизит("Корреспонденты", Корреспондент, "Вид заказчика физ. лицо");
		СтруктураДопРекв.Вставить("ВидЗаказчика", ВидЗаказчика);
		ИмяПВХ = "Цель предоставления зем. участка физлицам";
		ЦельПредоставления = мРаботаСоСметами.ПолучитьДопРеквизит("ВнутренниеДокументы", Договор, ИмяПВХ);
	Иначе
		ВидЗаказчика = мРаботаСоСметами.ПолучитьДопРеквизит("Корреспонденты", Корреспондент, "Вид заказчика юр. лицо");
		СтруктураДопРекв.Вставить("ВидЗаказчика", ВидЗаказчика);
		ИмяПВХ = "Цель предоставления зем. участка юрлицам";
		ЦельПредоставления = ЭтапДоговора.КарточкаобъектаРабот.ЦельПредоставления;
	КонецЕсли;
	СтруктураДопРекв.Вставить("ЦельПредоставления", ЦельПредоставления);
	
	ДопУсловие = ЭтапДоговора.ДопУсловиеНормативаЗП;
	СтруктураДопРекв.Вставить("ДопУсловие", ДопУсловие);
	
	Возврат СтруктураДопРекв;
	
КонецФункции


#КонецОбласти 



