#Область ПроцедурыФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Объект.Ссылка.Пустая() Тогда
        Объект.Ответственный = 	Пользователи.ТекущийПользователь();
    Иначе
        ЗаполнитьДоговорыИЭтапы();
	КонецЕсли; 
	
	// Поиск акта
	ПоискАкта = "";
	Если Параметры.Свойство("НомерСтроки") Тогда
		Отбор = Новый Структура("НомерСтроки", Параметры.НомерСтроки); 
		СтрокаАкта = Объект.Акты.НайтиСтроки(Отбор);
		ТекущийЭтапДоговора = СтрокаАкта[0].ЭтапДоговора;
	    ТекущийДоговор = ТекущийЭтапДоговора.Владелец; 
		ПоискАкта = СтрокаАкта[0].НомерАкта;
	КонецЕсли; 
    
    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаДеноминации", Дата(2016, 7, 1));	
    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаПослеДеноминации", Дата(2016, 7, 2));	
	Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", ТекущийЭтапДоговора);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаДеноминации", Дата(2016, 7, 1));	
    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаПослеДеноминации", Дата(2016, 7, 2));	
	Если Элементы.ЭтапыДоговоров.ТекущаяСтрока <> Неопределено Тогда
        ТекДанные = Элементы.ЭтапыДоговоров.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", ТекДанные.ЭтапДоговора);
		КонецЕсли; 
    Иначе
        Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", Неопределено);	
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
    	ЗарплатаИсполнителейЗаписьВОбъект(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    КонецЕсли; 
    //ЗарплатаИсполнителейЗаписьВОбъект();
    
    ТекДанные = Элементы.ЭтапыДоговоров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
	    ЗаписатьАкты(ТекДанные.ЭтапДоговора);
	КонецЕсли; 
	
	// дополнительная проверка
	ПроверитьЗаписиЗарплатыОчиститьОшибочные();
    
КонецПроцедуры



&НаКлиенте
Процедура ПроверитьЗаписиЗарплатыОчиститьОшибочные()
	// получаем заактированные акты
	АктыДока = Новый Соответствие;
	Для каждого Стр Из Объект.Акты Цикл
		АктыДока.Вставить(Стр.НомерАкта, Стр.НомерАкта);
	КонецЦикла; 
	
	// удаляем записи по актам, которых нет в Акты
	СтрокиЗарплаты = Объект.Зарплата;
	й = СтрокиЗарплаты.Количество()-1;
	Пока й >= 0 Цикл
		Если АктыДока.Получить(СтрокиЗарплаты[й].НомерАкта) = Неопределено Тогда
			СтрокиЗарплаты.Удалить(й);
		КонецЕсли; 	
		й=й-1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данные объекта уже заблокированы";
		Сообщение.Сообщить();
		ЭтаФорма.ТолькоПросмотр = Истина;	
	КонецПопытки; 
	
	СметыПоЭтапуПоказаны = Ложь;
	
	Если ЗначениеЗаполнено(ПоискАкта) Тогда
		// позиционируемся на договоре иск акта
		ИскДоговор = Договоры.НайтиСтроки(Новый Структура("Договор", ТекущийДоговор));
		Элементы.Договоры.ТекущаяСтрока = ИскДоговор[0].ПолучитьИдентификатор();
		
	Иначе	
		// Заполним информацией первый договор в списке
		Если Договоры.Количество() > 0 Тогда
			Элементы.Договоры.ТекущаяСтрока = Договоры[0].ПолучитьИдентификатор();
        КонецЕсли; 
	КонецЕсли;
	ФлОстаток = Истина;
	
	Если Объект.Дата < '20151001000000' Тогда
		Элементы.ЗарплатаБазовоеНачисление.Видимость = Ложь;
		Элементы.ЗарплатаИсполнителейБазовоеНачисление.Видимость = Ложь;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область РаботаСДоговором

&НаКлиенте
Процедура НайтиДоговор(Команда)

    НомерДоговора = "";
    Если ВвестиСтроку(НомерДоговора, "Введите номер договора для поиска") Тогда
        
        СписокНайденных = Новый СписокЗначений;
        
        Для каждого СтрДог Из Договоры Цикл
            Если Найти(СтрДог.НомерДоговора, НомерДоговора)>0 Тогда
                СписокНайденных.Добавить(СтрДог.ПолучитьИдентификатор(), СтрДог.НомерДоговора);
            КонецЕсли;
        КонецЦикла; 
        
        Если СписокНайденных.Количество() = 1 Тогда
            Элементы.Договоры.ТекущаяСтрока = СписокНайденных.Получить(0).Значение; 
            
        ИначеЕсли СписокНайденных.Количество() > 1 Тогда
            
            ВыбЭлемент = СписокНайденных.ВыбратьЭлемент(,);
            Если ВыбЭлемент = Неопределено Тогда
                Возврат;
            КонецЕсли;
            
            Элементы.Договоры.ТекущаяСтрока = ВыбЭлемент.Значение;
        Иначе
            Сообщить("Договора с номером "+НомерДоговора+" нет!");
        КонецЕсли; 
		
 	КонецЕсли; 
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорыИЭтапы(ПоДоговору = "", СтрДог = "")
	Если ПоДоговору = "" Тогда
		// По всем договорам из документа
		МассивДоговоров = ЗаполнитьДоговоры();
		ЗаполнитьЭтапы(МассивДоговоров, "Заполнить");
		ДозаполнитьДоговоры(МассивДоговоров);
	Иначе
		СтрДог = ЗаполнитьДоговор(ПоДоговору);
		ЗаполнитьЭтапы(ПоДоговору, "Добавить");
		ДозаполнитьДоговоры(ПоДоговору);
	КонецЕсли;
	
	ЗаполнитьКешРезультатовПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКешРезультатовПроверки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеАкты.Акт КАК Акт,
		|	ЕСТЬNULL(мЗамечанияПоПроверкеАктов.Комментарий, ЗНАЧЕНИЕ(Справочник.мЗамечанияПроверкиАктов.Проверен)) КАК Замечание
		|ИЗ
		|	Документ.мАктирование.Акты КАК мАктированиеАкты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мЗамечанияПоПроверкеАктов КАК мЗамечанияПоПроверкеАктов
		|		ПО мАктированиеАкты.Акт = мЗамечанияПоПроверкеАктов.Акт
		|ГДЕ
		|	мАктированиеАкты.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КешРезультатовПроверки.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Акт) Тогда
			СтрокаКеш = КешРезультатовПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКеш, Выборка);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьДоговоры(МассивДоговоров)
	Если ТипЗнч(МассивДоговоров) = Тип("Массив") Тогда
		Для каждого Дог Из МассивДоговоров Цикл
			ДозаполнитьДоговор(Дог);
		КонецЦикла; 
	Иначе	
		ДозаполнитьДоговор(МассивДоговоров);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьДоговор(Дог)
	Отбор = Новый Структура("Договор", Дог);
	ИскСтрока = Договоры.НайтиСтроки(Отбор);
	Если ИскСтрока.Количество() > 0 Тогда
		Тс = ИскСтрока[0];
		Тс.СметнаяСтоимость = 0;
		Тс.Оплата = 0;
		Тс.Возврат = 0;
		Тс.АктированоРаньше = 0;
		Тс.АктированоВсего = 0;
		Тс.Дебет = 0;
		Тс.Кредит = 0;
		
		ИскСтроки = ЭтапыДоговоров.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Для каждого Стр Из ИскСтроки Цикл
				Тс.СметнаяСтоимость = Тс.СметнаяСтоимость + Стр.СметнаяСтоимость;
				Тс.Оплата = Тс.Оплата + Стр.Оплата;
				Тс.Возврат = Тс.Возврат + Стр.Возврат;
				Тс.АктированоРаньше = Тс.АктированоРаньше + Стр.АктированоРаньше;
				Тс.АктированоВсего = Тс.АктированоВсего + Стр.АктированоВсего;
				Тс.Дебет = Тс.Дебет + Стр.Дебет;
				Тс.Кредит = Тс.Кредит + Стр.Кредит;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры
 
&НаСервере
Функция ЗаполнитьДоговоры()
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	мАктированиеАкты.Договор КАК Договор,
        |	мАктированиеАкты.Договор.Корреспондент КАК Корреспондент,
        |	мАктированиеАкты.Договор.Сумма КАК СметнаяСтоимость,
        |	мАктированиеАкты.Договор.ДатаРегистрации КАК ДатаДоговора,
        |	мАктированиеАкты.Договор.РегистрационныйНомер КАК НомерДоговора,
        |	мСостоянияДоговоровСрезПоследних.Состояние КАК СостояниеДоговора,
        |	Файлы.Ссылка КАК Файл
        |ИЗ
        |	Документ.мАктирование.Акты КАК мАктированиеАкты
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияДоговоров.СрезПоследних КАК мСостоянияДоговоровСрезПоследних
        |		ПО мАктированиеАкты.Договор = мСостоянияДоговоровСрезПоследних.Договор
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
        |		ПО мАктированиеАкты.Договор = Файлы.ВладелецФайла
        |			И (Файлы.Наименование ПОДОБНО ""Дог %"")
        |			И (Файлы.ТекущаяВерсияРасширение = ""pdf"")
        |ГДЕ
        |	мАктированиеАкты.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	мАктированиеАкты.Договор,
        |	мАктированиеАкты.Договор.Корреспондент,
        |	мАктированиеАкты.Договор.Сумма,
        |	мАктированиеАкты.Договор.ДатаРегистрации,
        |	мАктированиеАкты.Договор.РегистрационныйНомер,
        |	мСостоянияДоговоровСрезПоследних.Состояние,
        |	Файлы.Ссылка";

    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();

	Договоры.Очистить();
	МассивДоговоров = Новый Массив;
	
    Пока Выборка.Следующий() Цикл
        НовСтр = Договоры.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		НовСтр.НомерДоговора = ВРег(НовСтр.НомерДоговора);
		МассивДоговоров.Добавить(Выборка.Договор);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
	//Если Договоры.Количество() > 0 Тогда
	//	ТекущийДоговор = Договоры[0].Договор;
	//КонецЕсли; 
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьЭтапы(МассивДоговоров, Режим)
	ЗаполнитьЭтапыДоговоров(МассивДоговоров, Режим);	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоговор(ПоДоговору)
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Дог.Ссылка КАК Договор,
        |	Дог.Корреспондент КАК Корреспондент,
        |	Дог.Сумма КАК СметнаяСтоимость,
        |	Дог.ДатаРегистрации КАК ДатаДоговора,
        |	Дог.РегистрационныйНомер КАК НомерДоговора,
        |	мСостоянияДоговоровСрезПоследних.Состояние КАК СостояниеДоговора,
        |	Файлы.Ссылка КАК Файл
        |ИЗ
        |	Справочник.ВнутренниеДокументы КАК Дог
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияДоговоров.СрезПоследних КАК мСостоянияДоговоровСрезПоследних
        |		ПО Дог.Ссылка = мСостоянияДоговоровСрезПоследних.Договор
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
        |		ПО Дог.Ссылка = Файлы.ВладелецФайла
        |			И (Файлы.Наименование ПОДОБНО ""Дог%"")
        |			И (Файлы.ТекущаяВерсияРасширение = ""pdf"")
        |ГДЕ
        |	Дог.Ссылка = &Договор";

    Запрос.УстановитьПараметр("Договор", ПоДоговору);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();
	СтрДог = Новый Структура("Договор, Корреспондент, СметнаяСтоимость, ДатаДоговора,НомерДоговора, СостояниеДоговора, Файл"); 

	Если Выборка.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(СтрДог, Выборка);
		СтрДог.НомерДоговора = ВРег(СтрДог.НомерДоговора);
	КонецЕсли;
	Возврат СтрДог;
КонецФункции

&НаСервере
Процедура ДобавитьЭтапы(ПоДоговору)
	
КонецПроцедуры
 
 
&НаКлиенте
Процедура НомерДоговораПриИзменении(Элемент)
    ТС = Элементы.Договоры.ТекущиеДанные;
	
    СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(ТС.НомерДоговора);
    
    ВыбЭлемент = Неопределено;
    Если СписокДоговоров.Количество() > 1 Тогда
    	ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
    ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
    	ВыбЭлемент = СписокДоговоров.Получить(0);
    КонецЕсли; 
    Если ВыбЭлемент = Неопределено Тогда
    	Возврат;
    КонецЕсли;
    
    ТС.Договор = ВыбЭлемент.Значение;
    РеквДоговора = ПолучитьРеквизитыДоговора(ТС.Договор);
    ТС.НомерДоговора = РеквДоговора.РегистрационныйНомер;
    
    ТекущийДоговор = Тс.Договор;
	
	Если Не ЗначениеЗаполнено(Тс.Файл) Тогда
		Тс.Файл = мРаботаСДоговорами.ПолучитьФайлДоговора(ТекущийДоговор);
	КонецЕсли;
	ПечФормаДоговора = Тс.Файл;
	
	Если Не ЗначениеЗаполнено(Тс.СостояниеДоговора) Тогда
		Тс.СостояниеДоговора = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ТекущийДоговор);
	КонецЕсли;
	
	СостояниеДоговора = Тс.СостояниеДоговора;
	УстановитьФорматСостоянияДоговора();
    
	//ПриИзмененииДоговора(ТС.Договор);
    
	//Если ЭтапыДоговоров.Количество() > 0 Тогда
	//    УстановитьАктивныйЭтапДоговора(ТекущийДоговор);
	//КонецЕсли; 
    
    // Включить отображение оплат
    //ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматСостоянияДоговора()
	Если СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.НеПодписан")
		ИЛИ СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Расторгнут") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Красный;	
	ИначеЕсли СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Подписан") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.ТемноСиний; //"0000CD"; //ТемноСиний;
	ИначеЕсли СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.Проект")
		ИЛИ СостояниеДоговора = ПредопределенноеЗначение("Перечисление.мСостоянияДоговоров.НаПодписании") Тогда
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Зеленый; // "228B22"; //Зеленый;
	Иначе	
		Элементы.СостояниеДоговора.ЦветТекста = WebЦвета.Черный;	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДоговора(Договор)
    Если Не ЗначениеЗаполнено(Договор) Тогда
        Возврат;
    КонецЕсли; 
    
    // Заполнить таб часть ЭтапыДоговоров
    ЗаполнитьЭтапыДоговоров(Договор, "Добавить");
    
    ПосчитатьСальдоПоЭтапамДоговоров();
    
    //ЗаполнитьИнфуДоговора();
    
    УстановитьАктивныйЭтапДоговора(Договор);

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьИнфуДоговора()
    //Договоры.Очистить();
    Тс = Элементы.Договоры.ТекущиеДанные;
    //Нс.Договор = Договор;
    Рекв = ПолучитьРеквизитыДоговора(Тс.Договор);
    ЗаполнитьЗначенияСвойств(Тс, Рекв);
    
	Тс.СметнаяСтоимость = 0;
	Тс.Оплата = 0;
	Тс.Возврат = 0;
	Тс.АктированоРаньше = 0;
	Тс.АктированоВсего = 0;
	Тс.Дебет = 0;
	Тс.Кредит = 0;
	
    РеквЭтапаПолучены = Ложь;
	Отбор = Новый Структура("Договор", Тс.Договор);
	ИскСтроки = ЭтапыДоговоров.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			
			Если Не РеквЭтапаПолучены Тогда
				Рекв = ПолучитьРеквизитыЭтапа(Стр.ЭтапДоговора);
				ЗаполнитьЗначенияСвойств(Тс, Рекв);
				РеквЭтапаПолучены = Истина;
			КонецЕсли; 
			
			Тс.СметнаяСтоимость = Тс.СметнаяСтоимость + Стр.СметнаяСтоимость;
			Тс.Оплата = Тс.Оплата + Стр.Оплата;
			Тс.Возврат = Тс.Возврат + Стр.Возврат;
			Тс.АктированоРаньше = Тс.АктированоРаньше + Стр.АктированоРаньше;
			Тс.АктированоВсего = Тс.АктированоВсего + Стр.АктированоВсего;
			Тс.Дебет = Тс.Дебет + Стр.Дебет;
			Тс.Кредит = Тс.Кредит + Стр.Кредит;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДоговора(Договор)
    Рекв = Новый Структура;
    Рекв.Вставить("РегистрационныйНомер", Договор.РегистрационныйНомер);
    Рекв.Вставить("ДатаДоговора", Договор.ДатаРегистрации);
    Рекв.Вставить("СметнаяСтоимость", Договор.Сумма);
    Рекв.Вставить("Корреспондент", Договор.Корреспондент);
    
    Возврат Рекв;
КонецФункции // ПолучитьРеквизитыДоговора()

&НаКлиенте
Процедура ДоговорыПриАктивизацииСтроки(Элемент)
    Тс = Элементы.Договоры.ТекущиеДанные;
    Если Тс = Неопределено Тогда
        Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Тс.Договор) Тогда
        // Это ввод новой строки договора
        
        // вычистить экранные формы
        ЗарплатаИсполнителей.Очистить();
        Акты.Очистить();
		//ЭтапыДоговоров.Очистить();
		Элементы.ЭтапыДоговоров.ОтборСтрок = Новый ФиксированнаяСтруктура("Договор", ";%№№8"); 
	Иначе
		Элементы.ЭтапыДоговоров.ОтборСтрок = Новый ФиксированнаяСтруктура("Договор", Тс.Договор); 
        //ПриИзмененииДоговора(Тс.Договор);
		//УстановитьАктивныйЭтапДоговора(Тс.Договор);
	КонецЕсли; 
	
	ТекущийДоговор = Тс.Договор;
	Тс.СостояниеДоговора = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ТекущийДоговор);
	Если Не ЗначениеЗаполнено(Тс.Файл) Тогда
		Тс.Файл = мРаботаСДоговорами.ПолучитьФайлДоговора(ТекущийДоговор);
	КонецЕсли; 
	ПечФормаДоговора = Тс.Файл;
	СостояниеДоговора = Тс.СостояниеДоговора;
	УстановитьФорматСостоянияДоговора();
	
	// Включить отображение оплат
	//ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФайла(Файл)
	Возврат Файл.Наименование;	
КонецФункции
 

&НаКлиенте
Процедура ДоговорыПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить договор и очистить все связанные с ним данные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
    	Возврат;
	КонецЕсли; 
	
    // вычистить все таблицы объекта от договора
    ОчиститьТаблицыПоДоговору();
    
    // вычистить экранные формы
    ЗарплатаИсполнителей.Очистить();
    Акты.Очистить();
    ЭтапыДоговоров.Очистить();
	
	ТекущийЭтапДоговора = "";
	ТекущийДоговор = "";
    
    // Включить отображение оплат
    //ПодключитьОбработчикОжидания("ОбработкаОжидания",0.2,Истина); 
    
КонецПроцедуры
 
 &НаСервере
Процедура ОчиститьТаблицыПоДоговору()
    й = Объект.Зарплата.Количество();
    Пока й > 0 Цикл
        ТекСтрока = Объект.Зарплата[й-1];
        Если ТекСтрока.ЭтапДоговора.Владелец = ТекущийДоговор Тогда
            Объект.Зарплата.Удалить(ТекСтрока);
        КонецЕсли; 
    	й = й - 1;
    КонецЦикла; 
    
    й = Объект.Акты.Количество();
    Пока й > 0 Цикл
        ТекСтрока = Объект.Акты[й-1];
        Если ТекСтрока.Договор = ТекущийДоговор Тогда
            Объект.Акты.Удалить(ТекСтрока);
        КонецЕсли; 
    	й = й - 1;
	КонецЦикла;
	
	Отбор = Новый Структура("Договор", ТекущийДоговор); 
	ИскСтроки = ЭтапыДоговоров.НайтиСтроки(Отбор); 
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
			ЭтапыДоговоров.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ОчиститьЗарплатуПоДоговору()

&НаКлиенте
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	ТекущийНомерДоговора = "";
	Если ВвестиСтроку(ТекущийНомерДоговора, "Введите номер договора") Тогда
		
		Отбор = Новый Структура("НомерДоговора", ТекущийНомерДоговора);
		ИскСтрока = Договоры.НайтиСтроки(Отбор);
		Если ИскСтрока.Количество() > 0 Тогда
			Сообщить("Договор с номером "+ТекущийНомерДоговора+" уже есть в документе!");
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
        ТС = Элементы.Договоры.ТекущиеДанные;
        ТС.НомерДоговора = ТекущийНомерДоговора;
        НомерДоговораПриИзменении(Элемент);    	
    КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭтапамиДоговора

&НаКлиенте
Процедура УстановитьАктивныйЭтапДоговора(Договор)
	// Сначала фильтр по договору
	Элементы.ЭтапыДоговоров.ОтборСтрок = Новый ФиксированнаяСтруктура("Договор", Договор); 

	Если ЗначениеЗаполнено(ПоискАкта) Тогда
		Если ЗначениеЗаполнено(ТекущийЭтапДоговора) Тогда
			// позиционируемся на нем
			ИскЭтап = ЭтапыДоговоров.НайтиСтроки(Новый Структура("ЭтапДоговора", ТекущийЭтапДоговора));
			Элементы.ЭтапыДоговоров.ТекущаяСтрока = ИскЭтап[0].ПолучитьИдентификатор();
		КонецЕсли;	
	Иначе
		ТекущийЭтапДоговора = "";
		
		Если ЗначениеЗаполнено(Договор) Тогда
			
			//Если ЭтапыДоговоров.Количество()  > 0 Тогда
				// ищем первый, не заактированный этап
				Отбор = Новый Структура("Договор", Договор);
				ИскСтроки = ЭтапыДоговоров.НайтиСтроки(Отбор);
				
				Если ИскСтроки.Количество() > 0 Тогда
					ЭтапНайден = Ложь;
					Для каждого Стр Из ИскСтроки Цикл
						Если Стр.СметнаяСтоимость > Стр.АктированоВсего Тогда
							ЭтапНайден = Истина;
							
							ТекущийЭтапДоговора = Стр.ЭтапДоговора;
							
							Элементы.ЭтапыДоговоров.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
							
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					Если Не ЭтапНайден Тогда
						
						ТекущийЭтапДоговора = ЭтапыДоговоров[0].ЭтапДоговора;
						
						Элементы.ЭтапыДоговоров.ТекущаяСтрока = ЭтапыДоговоров[0].ПолучитьИдентификатор();
						
					КонецЕсли; 
				КонецЕсли; 
				
				//ЭтапНайден = Ложь;
				//Для каждого Этап Из ЭтапыДоговоров Цикл
				//	Если Этап.СметнаяСтоимость > Этап.АктированоВсего Тогда
				//		ЭтапНайден = Истина;
				//		
				//		ТекущийЭтапДоговора = Этап.ЭтапДоговора;
				//		
				//		Элементы.ЭтапыДоговоров.ТекущаяСтрока = Этап.ПолучитьИдентификатор();
				//		
				//		Прервать;
				//	КонецЕсли; 
				//КонецЦикла;
				//Если Не ЭтапНайден Тогда
				//	
				//	ТекущийЭтапДоговора = ЭтапыДоговоров[0].ЭтапДоговора;
				//	
				//	Элементы.ЭтапыДоговоров.ТекущаяСтрока = ЭтапыДоговоров[0].ПолучитьИдентификатор();
				//	
				//КонецЕсли; 
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЭтапа(ЭтапДоговора)
	Возврат ЭтапДоговора.НомерЭтапа;
КонецФункции // ПолучитьНомерЭтапа(Стр.ЭтапДоговора)

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыЭтапа(ЭтапДоговора)
    Рекв = Новый Структура;
    Рекв.Вставить("ОбъектРабот", ЭтапДоговора.ОбъектРабот);
    Рекв.Вставить("ИсточникФинансирования", ЭтапДоговора.ИсточникФинансирования);
    Рекв.Вставить("УсловияОплаты", ЭтапДоговора.ШаблонУсловийДоговора.Наименование);
    Рекв.Вставить("Договор", ЭтапДоговора.Владелец);
    Рекв.Вставить("Подразделение", ЭтапДоговора.Подразделение);

    Возврат Рекв;
КонецФункции // ПолучитьРеквизитыДоговора()

&НаСервере
Процедура ЗаполнитьЭтапыДоговоров(МассивДоговоров, Режим)
	
	ЗаполнитьЭтапыДоговоровНаСервере(МассивДоговоров, Режим);
	
    УстановитьУсловноеОформление();
    
КонецПроцедуры // ЗаполнитьЭтапыДоговоров(Договор)()
 
&НаСервере
Процедура ЗаполнитьЭтапыДоговоровНаСервере(МассивДоговоров, Режим)
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ЭтапыДоговоров.Владелец.Корреспондент КАК Корреспондент,
        |   ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |   ЭтапыДоговоров.НомерЭтапа КАК НомерЭтапа,
        |   ЭтапыДоговоров.ВидРабот КАК ВидРабот,
        |   ЭтапыДоговоров.Подразделение КАК Подразделение,
        |   ВЫБОР
        |       КОГДА ЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
        |           ТОГДА ВЫРАЗИТЬ(ЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
        |       ИНАЧЕ ЭтапыДоговоров.СтоимостьСНДС
        |   КОНЕЦ КАК СметнаяСтоимость,
        |   ВЫБОР
        |       КОГДА ЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
        |           ТОГДА ВЫРАЗИТЬ(ЭтапыДоговоров.СуммаНДС / 10000 КАК ЧИСЛО(17, 2))
        |       ИНАЧЕ ЭтапыДоговоров.СуммаНДС
        |   КОНЕЦ КАК НДСЭтапа
        |ПОМЕСТИТЬ ЭтапыДоговора
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
        |ГДЕ
        |   ЭтапыДоговоров.Владелец В(&МассивДоговоров)
        |   И НЕ ЭтапыДоговоров.ПометкаУдаления
        |   И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора КАК ЭтапДоговора,
        |   СУММА(ВЫБОР
        |           КОГДА РасчетыСПокупателямиОбороты.СуммаПриход > 0
        |               ТОГДА ВЫБОР
        |                       КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
        |                           ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(17, 2))
        |                       КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
        |                           ТОГДА 0
        |                       ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаПриход
        |                   КОНЕЦ
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК СуммаПриход,
        |   СУММА(ВЫБОР
        |           КОГДА РасчетыСПокупателямиОбороты.СуммаПриход < 0
        |               ТОГДА ВЫБОР
        |                       КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
        |                           ТОГДА ВЫРАЗИТЬ(-РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(17, 2))
        |                       КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
        |                           ТОГДА 0
        |                       ИНАЧЕ -РасчетыСПокупателямиОбороты.СуммаПриход
        |                   КОНЕЦ
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК СуммаРасход
        |ПОМЕСТИТЬ Оплаты
        |ИЗ
        |   РегистрНакопления.РасчетыСПокупателями.Обороты(, , Регистратор, ЭтапДоговора.Владелец В (&МассивДоговоров)) КАК РасчетыСПокупателямиОбороты
        |
        |СГРУППИРОВАТЬ ПО
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   УчетДоговоровОбороты.ЭтапДоговора КАК ЭтапДоговора,
        |   СУММА(ВЫБОР
        |           КОГДА УчетДоговоровОбороты.Регистратор <> &Док
        |               ТОГДА ВЫБОР
        |                       КОГДА УчетДоговоровОбороты.Период < &ДатаДеноминации
        |                           ТОГДА ВЫРАЗИТЬ(УчетДоговоровОбороты.СуммаРасход / 10000 КАК ЧИСЛО(17, 2))
        |                       КОГДА УчетДоговоровОбороты.Период < &ДатаПослеДеноминации
        |                           ТОГДА 0
        |                       ИНАЧЕ УчетДоговоровОбороты.СуммаРасход
        |                   КОНЕЦ
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК АктированоРаньше,
        |   СУММА(ВЫБОР
        |           КОГДА УчетДоговоровОбороты.Период < &ДатаДеноминации
        |               ТОГДА ВЫРАЗИТЬ(УчетДоговоровОбороты.СуммаРасход / 10000 КАК ЧИСЛО(17, 2))
        |           КОГДА УчетДоговоровОбороты.Период < &ДатаПослеДеноминации
        |               ТОГДА 0
        |           ИНАЧЕ УчетДоговоровОбороты.СуммаРасход
        |       КОНЕЦ) КАК АктированоВсего
        |ПОМЕСТИТЬ Акты
        |ИЗ
        |   РегистрНакопления.УчетДоговоров.Обороты(, , Регистратор, ЭтапДоговора.Владелец В (&МассивДоговоров)) КАК УчетДоговоровОбороты
        |
        |СГРУППИРОВАТЬ ПО
        |   УчетДоговоровОбороты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЭтапыДоговора.ЭтапДоговора КАК ЭтапДоговора,
        |   Оплаты.СуммаПриход КАК Оплата,
        |   Оплаты.СуммаРасход КАК Возврат,
        |   Акты.АктированоРаньше КАК АктированоРаньше,
        |   Акты.АктированоВсего КАК АктированоВсего
        |ПОМЕСТИТЬ Расчеты
        |ИЗ
        |   ЭтапыДоговора КАК ЭтапыДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
        |       ПО ЭтапыДоговора.ЭтапДоговора = Оплаты.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Акты КАК Акты
        |       ПО ЭтапыДоговора.ЭтапДоговора = Акты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора,
        |   МАКСИМУМ(ДатыДоговоровСрезПоследних.Период) КАК ДатаПродления
        |ПОМЕСТИТЬ МаксДаты
        |ИЗ
        |   РегистрСведений.мДатыДоговоров.СрезПоследних(
        |           ,
        |           ЭтапДоговора.Владелец В (&МассивДоговоров)
        |               И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПлановыйСрок)) КАК ДатыДоговоровСрезПоследних
        |
        |СГРУППИРОВАТЬ ПО
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ мДатыДоговоров.Период) КАК КоличествоЗаписей,
        |   мДатыДоговоров.ЭтапДоговора
        |ПОМЕСТИТЬ КоличествоЗаписейПлановогоСрока
        |ИЗ
        |   РегистрСведений.мДатыДоговоров КАК мДатыДоговоров
        |ГДЕ
        |   мДатыДоговоров.ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПлановыйСрок)
        |   И мДатыДоговоров.ЭтапДоговора.Владелец В(&МассивДоговоров)
        |
        |СГРУППИРОВАТЬ ПО
        |   мДатыДоговоров.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора,
        |   ДатыДоговоровСрезПоследних.Дата КАК ПлановыйСрок,
        |   КоличествоЗаписейПлановогоСрока.КоличествоЗаписей,
        |   МаксДаты.ДатаПродления
        |ПОМЕСТИТЬ ПлановыеСроки
        |ИЗ
        |   МаксДаты КАК МаксДаты
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.мДатыДоговоров.СрезПоследних(
        |               ,
        |               ЭтапДоговора.Владелец В (&МассивДоговоров)
        |                   И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПлановыйСрок)) КАК ДатыДоговоровСрезПоследних
        |       ПО МаксДаты.ЭтапДоговора = ДатыДоговоровСрезПоследних.ЭтапДоговора
        |           И МаксДаты.ДатаПродления = ДатыДоговоровСрезПоследних.Период
        |       ЛЕВОЕ СОЕДИНЕНИЕ КоличествоЗаписейПлановогоСрока КАК КоличествоЗаписейПлановогоСрока
        |       ПО МаксДаты.ЭтапДоговора = КоличествоЗаписейПлановогоСрока.ЭтапДоговора
        |
        |СГРУППИРОВАТЬ ПО
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора,
        |   ДатыДоговоровСрезПоследних.Дата,
        |   КоличествоЗаписейПлановогоСрока.КоличествоЗаписей,
        |   МаксДаты.ДатаПродления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЭтапыДоговора.ЭтапДоговора КАК ЭтапДоговора,
        |   ВнутренниеДокументы.Ссылка КАК Дело,
        |   ЕСТЬNULL(ВнутренниеДокументы.РегистрационныйНомер, """") КАК НомерДела,
        |   ВнутренниеДокументы.ДатаРегистрации КАК ДатаДела
        |ПОМЕСТИТЬ _Дела
        |ИЗ
        |   ЭтапыДоговора КАК ЭтапыДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
        |       ПО ЭтапыДоговора.ЭтапДоговора = ВнутренниеДокументы.ЭтапДоговора
        |ГДЕ
        |   ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.Дело)
        |   И НЕ ВнутренниеДокументы.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   _Дела.ЭтапДоговора,
        |   СвязиДокументов.СвязанныйДокумент КАК Комплект
        |ПОМЕСТИТЬ Комплекты
        |ИЗ
        |   _Дела КАК _Дела
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
        |       ПО _Дела.Дело = СвязиДокументов.Документ
        |ГДЕ
        |   СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ВходитВКомплект)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   _Дела.ЭтапДоговора,
        |   ЕСТЬNULL(Комплекты.Комплект, _Дела.Дело) КАК ОснованиеДляРасписки
        |ПОМЕСТИТЬ ОснованиеРасписки
        |ИЗ
        |   _Дела КАК _Дела
        |       ЛЕВОЕ СОЕДИНЕНИЕ Комплекты КАК Комплекты
        |       ПО _Дела.ЭтапДоговора = Комплекты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ОснованиеРасписки.ЭтапДоговора,
        |   ЕСТЬNULL(ИсходящиеДокументыПолучатели.ДатаОтправки, """") КАК ДатаОтправки,
        |   СвязиДокументов.СвязанныйДокумент КАК Расписка,
        |   СвязиДокументов.СвязанныйДокумент.ДатаРегистрации КАК ДатаРасписки
        |ПОМЕСТИТЬ Расписки
        |ИЗ
        |   ОснованиеРасписки КАК ОснованиеРасписки
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
        |           ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
        |           ПО СвязиДокументов.СвязанныйДокумент = ИсходящиеДокументыПолучатели.Ссылка
        |       ПО ОснованиеРасписки.ОснованиеДляРасписки = СвязиДокументов.Документ
        |ГДЕ
        |   СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПерепискаПоПредмету)
        |   И СвязиДокументов.СвязанныйДокумент.ВидДокумента.Наименование ПОДОБНО ""Расписка%""
        |   И НЕ СвязиДокументов.СвязанныйДокумент.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   _Дела.ЭтапДоговора,
        |   _Дела.НомерДела,
        |   Расписки.ДатаОтправки,
        |   Расписки.ДатаРасписки,
        |   _Дела.ДатаДела
        |ПОМЕСТИТЬ Дела
        |ИЗ
        |   _Дела КАК _Дела
        |       ЛЕВОЕ СОЕДИНЕНИЕ Расписки КАК Расписки
        |       ПО _Дела.ЭтапДоговора = Расписки.ЭтапДоговора
        |;
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЭтапыДоговора.Корреспондент,
        |   ЭтапыДоговора.ЭтапДоговора.Владелец КАК Договор,
        |   ЭтапыДоговора.ВидРабот,
        |   ЭтапыДоговора.ЭтапДоговора КАК ЭтапДоговора,
        |   ЭтапыДоговора.НомерЭтапа КАК НомерЭтапа,
        |   ЭтапыДоговора.ВидРабот КАК ВидРабот,
        |   ЭтапыДоговора.Подразделение,
        |   ЭтапыДоговора.СметнаяСтоимость КАК СметнаяСтоимость,
        |   ЭтапыДоговора.НДСЭтапа КАК НДСЭтапа,
        |   Расчеты.Оплата КАК Оплата,
        |   Расчеты.Возврат КАК Возврат,
        |   Расчеты.АктированоРаньше,
        |   Расчеты.АктированоВсего,
        |   Дела.НомерДела,
        |   Дела.ДатаОтправки,
        |   Дела.ДатаРасписки,
        |   Дела.ДатаДела,
        |   ПлановыеСроки.ПлановыйСрок КАК ПлановыйСрок,
        |   ПлановыеСроки.КоличествоЗаписей КАК КоличествоЗаписей,
        |   ВЫБОР
        |       КОГДА ПлановыеСроки.КоличествоЗаписей > 1
        |           ТОГДА ПлановыеСроки.ДатаПродления
        |       ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
        |   КОНЕЦ КАК ДатаПродления,
        |   ЭтапыДоговора.ЭтапДоговора.ОбъектРабот.Представление КАК ОбъектРабот,
        |   ЭтапыДоговора.ЭтапДоговора.ОбъектРабот.АдресЗемельногоУчастка КАК АдресЗемельногоУчастка,
        |   ВЫБОР
        |       КОГДА ЭтапыДоговора.Корреспондент.ЮрФизЛицо = &ФизЛицо
        |           ТОГДА ИСТИНА
        |       ИНАЧЕ ЛОЖЬ
        |   КОНЕЦ КАК ЭтоФизЛицо,
        |   ЭтапыДоговора.ЭтапДоговора.ШаблонУсловийДоговора.Представление КАК УсловиеЭтапаДоговора
        |ИЗ
        |   ЭтапыДоговора КАК ЭтапыДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Расчеты КАК Расчеты
        |       ПО ЭтапыДоговора.ЭтапДоговора = Расчеты.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Дела КАК Дела
        |       ПО ЭтапыДоговора.ЭтапДоговора = Дела.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеСроки КАК ПлановыеСроки
        |       ПО ЭтапыДоговора.ЭтапДоговора = ПлановыеСроки.ЭтапДоговора
        |
        |УПОРЯДОЧИТЬ ПО
        |   НомерЭтапа,
        |   Дела.ДатаОтправки УБЫВ";
    Запрос.УстановитьПараметр("Док", Объект.Ссылка);
    Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
    Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
    Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
    Запрос.УстановитьПараметр("ДатаПослеДеноминации", КонецДня(Дата(2016,7,1))+1);

    РезультатЗапроса = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    // Добавляем этапы
	Если Режим = "Заполнить" Тогда
	    ЭтапыДоговоров.Очистить();
	Иначе
		// Режим = "Добавить"
		// удаляем то, что есть
		Отбор = Новый Структура("Договор", МассивДоговоров); 
		ИскСтроки = ЭтапыДоговоров.НайтиСтроки(Отбор); 
		Если ИскСтроки.Количество() > 0 Тогда
			Для каждого Стр Из ИскСтроки Цикл
				ЭтапыДоговоров.Удалить(Стр);
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
    
    // для отсечения дублей этапов из-за наличия отправленных и неотправленных расписок дел 
    СписокВыведенныхЭтапов = Новый СписокЗначений;
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Если СписокВыведенныхЭтапов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ЭтапДоговора) = Неопределено Тогда
            НоваяСтрока = ЭтапыДоговоров.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
            НоваяСтрока.НомерДела = НоваяСтрока.НомерДела + ", " + Формат(ВыборкаДетальныеЗаписи.ДатаДела, "ДФ=dd.MM.yy");
			
			// Дата отправки = Дата регистрации расписки, при условии, что она отправлена. Иначе пусто.
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаОтправки) Тогда
				НоваяСтрока.ДатаОтправки = ВыборкаДетальныеЗаписи.ДатаРасписки;
			Иначе
				НоваяСтрока.ДатаОтправки = '00010101000000';
			КонецЕсли; 
                                                                              
            СписокВыведенныхЭтапов.Добавить(ВыборкаДетальныеЗаписи.ЭтапДоговора);
        КонецЕсли; 
    КонецЦикла;
    
    // получение файлов смет
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Файлы.Ссылка КАК ФайлСметы,
        |   ЭтапыДоговора.Владелец КАК Договор,
        |   ЭтапыДоговора.Ссылка КАК ЭтапДоговора
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК ЭтапыДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
        |       ПО ЭтапыДоговора.Владелец = Файлы.ВладелецФайла И
        //|ГДЕ
        |   Файлы.ВладелецФайла В(&МассивДоговоров)
        |   И НЕ Файлы.ПометкаУдаления
        |   И Файлы.ТекущаяВерсияРасширение = ""pdf""
        |   И Файлы.Наименование ПОДОБНО ""Смета%""
        |ГДЕ ЭтапыДоговора.Владелец В(&МассивДоговоров)";
    
    Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Выборка = РезультатЗапроса.Выбрать();
    
    СметыПоЭтапу.Очистить();
    ЭтапыБезСмет.Очистить();
    
    Пока Выборка.Следующий() Цикл
        Если ЗначениеЗаполнено(Выборка.ФайлСметы) Тогда
            Стр = СметыПоЭтапу.Добавить();
            ЗаполнитьЗначенияСвойств(Стр, Выборка);
        Иначе	
            ЭтапыБезСмет.Добавить(Выборка.ЭтапДоговора);
        КонецЕсли;     
    КонецЦикла;
    
КонецПроцедуры 

&НаКлиенте
Процедура ЭтапыДоговоровПриАктивизацииСтроки(Элемент)
    ТекСтрока = Элементы.ЭтапыДоговоров.ТекущиеДанные;
    Если ТекСтрока = Неопределено Тогда
        ОбъектРабот = "";
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
	    Возврат;
	КонецЕсли; 
	
	//СметыПоЭтапуПоказаны = Ложь;
	
	ПроверитьНеРаспределеноПоАкту();
    
    // Обновить надпись ОбъектРабот, УсловиеЭтапаДоговора
    //СтрНадписи = ПолучитьОбъектРабот(ТекСтрока.ЭтапДоговора);
    
    ОбъектРабот = ТекСтрока.ОбъектРабот;
    
    Если ТекСтрока.ЭтоФизЛицо тогда
        ОбъектРабот = ОбъектРабот + ", " + ТекСтрока.АдресЗемельногоУчастка;
    КонецЕсли;
    
    УсловиеЭтапаДоговора = ТекСтрока.УсловиеЭтапаДоговора;

    //ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрНадписи);
	
	// Показать сметы по этапу
	//Если Не СметыПоЭтапуПоказаны Тогда
		ПоказатьСметыПоЭтапу(ТекСтрока.ЭтапДоговора);	
	//	СметыПоЭтапуПоказаны = Истина;
	//КонецЕсли; 

	
    // Обновить акты в форме по новому этапу договора
	ЗаполнитьАкты(ТекСтрока.ЭтапДоговора);
		
    Если Не ЗначениеЗаполнено(ТекущийЭтапДоговора) Тогда
        ТекущийНомерЭтапа = ТекСтрока.НомерЭтапа;
        ТекущийЭтапДоговора = ТекСтрока.ЭтапДоговора;
    КонецЕсли;
        
	// выделить просроченный акт
	Если ТекСтрока.ДатаОтправки > ТекСтрока.ПлановыйСрок или 
		НЕ ЗначениеЗаполнено(ТекСтрока.ДатаОтправки) Тогда
		Элемент.ПодчиненныеЭлементы.ЭтапыДоговоровГруппаСроки.ПодчиненныеЭлементы.ЭтапыДоговоровПлановыйСрок.ЦветТекста = Новый Цвет(255, 0, 0); // красный
    КонецЕсли;
    
	// Включить отображение оплат
	//Если (ТекСтрока.Оплата <> 0) или (ТекСтрока.АктированоРаньше <> 0) Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
	//Иначе
	//    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаДеноминации", Дата(2016, 7, 1));	
	//    Оплаты.Параметры.УстановитьЗначениеПараметра("ДатаПослеДеноминации", Дата(2016, 7, 2));	
	//	Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", Неопределено);	
	//КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСметыПоЭтапу(Этап)
	Отбор = Новый Структура("ЭтапДоговора", Этап);
	ИскСтроки = СметыПоЭтапу.НайтиСтроки(Отбор);
    Если ИскСтроки.Количество() = 0 Тогда
        Если ЭтапыБезСмет.НайтиПоЗначению(Этап) = Неопределено Тогда
    		ЗаполнитьСметыПоЭтапу(Этап);
        КонецЕсли; 
	КонецЕсли;
	ОтобразитьСметыПоЭтапу(Этап);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСметыПоЭтапу(Этап)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка Как ФайлСметы,
		|	&Этап как ЭтапДоговора
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Договор
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.ТекущаяВерсияРасширение = ""pdf""
		|	И Файлы.Наименование ПОДОБНО &ИмяФайла";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("Договор", Этап.Владелец);
	Запрос.УстановитьПараметр("ИмяФайла", "Смета "+Этап.НомерЭтапа+"-%");
	
	РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        ЭтапыБезСмет.Добавить(Этап);
    Иначе  
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            НовСтр = СметыПоЭтапу.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
        КонецЦикла;
    КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтобразитьСметыПоЭтапу(Этап)
	Отбор = Новый Структура("ЭтапДоговора", Этап);
	ИскСтроки = СметыПоЭтапу.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		// Смет нет
		Элементы.ИнфоСметы.Видимость = Истина;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
		ИнфоСметы = "Смет нет";
	//	
	ИначеЕсли ИскСтроки.Количество() = 1 Тогда
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Истина;
		Элементы.МенюВыбораСмет.Видимость = Ложь;
		ПечФормаСметы = ИскСтроки[0].ФайлСметы;
	//	
	Иначе
		// Смет несколько
		Элементы.ИнфоСметы.Видимость = Ложь;
		Элементы.ПечФормаСметы.Видимость = Ложь;
		Элементы.МенюВыбораСмет.Видимость = Истина;
	//	
		//МенюВыбораСмет.Очистить();
		Элементы.МенюВыбораСмет.СписокВыбора.Очистить();
		//
		Для каждого Стр Из ИскСтроки Цикл
			Элементы.МенюВыбораСмет.СписокВыбора.Добавить(Стр.ФайлСметы, Строка(Стр.ФайлСметы));
		КонецЦикла;
		МенюВыбораСмет = Элементы.МенюВыбораСмет.СписокВыбора[0].Значение;
		
		//Элементы.МенюВыбораСмет.СписокВыбора.ПоказатьВыборЭлемента(
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Процедура СоздатьКомандыМенюВыбораСмет(Этап)
//	Отбор = Новый Структура("ЭтапДоговора", Этап);
//	ИскСтроки = СметыПоЭтапу.НайтиСтроки(Отбор);
//	Сч = 0;
//	Для каждого Стр Из ИскСтроки Цикл
//		Сч=Сч+1;
//		Если Элементы.Найти("_"+Сч) = Неопределено Тогда
//			НоваяКнопка = Элементы.Добавить("_"+Сч, Тип("КнопкаФормы"), Элементы.МенюВыбораСмет1);
//			НоваяКоманда = ЭтаФорма.Команды.Добавить("МенюВыбораСметНажатиеНаФайл" + Сч);
//			НоваяКоманда.Действие = "МенюВыбораСметНажатиеНаФайл";
//			НоваяКнопка.ИмяКоманды = "МенюВыбораСметНажатиеНаФайл" + Сч;
//			НоваяКнопка.Заголовок = Стр.ФайлСметы;
//		КонецЕсли; 
// 	КонецЦикла; 
//	
//КонецПроцедуры

&НаКлиенте
Процедура МенюВыбораСметНажатиеНаФайл(Команда)
	Сообщить(Команда.Имя);
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()

    УсловноеОформление.Элементы.Очистить();
    
    // Если Оплата меньше Сметной стоимости - выделить красным
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.Красный);
    ЭлементУсловия=ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("ЭтапыДоговоров.Оплата");
    Элементусловия.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше;
    ЭлементУсловия.ПравоеЗначение=Новый ПолеКомпоновкиДанных("ЭтапыДоговоров.СметнаяСтоимость");
    
    // далее добавляешь поля, которые нужно оформить
    ОформляемоеПоле=ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("ЭтапыДоговоровОплата"); 
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьСальдоПоЭтапамДоговоров()
    Для каждого ТекСтрока Из ЭтапыДоговоров Цикл
		Сальдо = ТекСтрока.Оплата - ТекСтрока.Возврат - ТекСтрока.АктированоВсего;
		Если Сальдо > 0 Тогда
			ТекСтрока.Кредит = Сальдо;
			ТекСтрока.Дебет = 0;
		Иначе	
			ТекСтрока.Кредит = 0;
			ТекСтрока.Дебет = -Сальдо;
		КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры // ПосчитатьСальдоПоЭтапамДоговоров()

&НаСервереБезКонтекста
Функция ПолучитьОбъектРабот(ЭтапДоговора)
    СтрНадписи = Новый Структура(); 
	Если ЭтапДоговора.ЭтоФизЛицо тогда
	//Если ЭтапДоговора.Владелец.ВидДокумента = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию("Договор с физ. лицами") тогда
		СтрНадписи.Вставить("ОбъектРабот", Строка(ЭтапДоговора.ОбъектРабот) + ", " + ЭтапДоговора.ОбъектРабот.АдресЗемельногоУчастка);
	Иначе
   		СтрНадписи.Вставить("ОбъектРабот", ЭтапДоговора.ОбъектРабот);
	КонецЕсли;
    СтрНадписи.Вставить("УсловиеЭтапаДоговора", ЭтапДоговора.ШаблонУсловийДоговора.Наименование);
    
    Возврат СтрНадписи;	
КонецФункции
 
#КонецОбласти

#Область РаботаСАктами

&НаКлиенте
Процедура АктыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
    // Номер акта берем из текущей строки
    ТекДанные = Элементы.Акты.ТекущиеДанные;
    ИндексСтроки = Элементы.Акты.ТекущаяСтрока - 1;
    
    // Если Этап договора без НДС, то и в акте НДС не должно быть
    Если НеНуженНДС(ТекДанные.ЭтапДоговора, ТекДанные.НДС) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Поле  = "Акты["+ИндексСтроки+"].НДС";
        Сообщение.Текст = "НДС в акте не нужен, т.к. его (НДС) нет в этапе договора!";
        //Сообщение.КлючДанных = Объект.Ссылка;
        //Сообщение.ПутьКДанным = "ЭтаФорма.Акты["+ИндексСтроки+"].НДС";
        Сообщение.Сообщить();
        Отказ = Истина;
        Возврат;
     КонецЕсли; 
    
	АктыЗаписьВОбъект(ТекДанные.НомерАкта, ТекДанные.ЭтапДоговора);
    
КонецПроцедуры

&НаСервере
Функция НеНуженНДС(ЭтапДоговора, НДС)
    НДСвАктеНеНужен = Ложь;
    Если ЭтапДоговора.СуммаНДС = 0 И НДС <> 0 Тогда
        НДСвАктеНеНужен = Истина;
    КонецЕсли; 
    Возврат НДСвАктеНеНужен;
КонецФункции

&НаСервере
Процедура АктыЗаписьВОбъект(НомерАкта, ЭтапДоговора)
	
	// прежде - очистка
	АктыУдалениеИзОбъекта(НомерАкта, ЭтапДоговора); 
	
	// потом - запись
    Для каждого Акт Из Акты Цикл
        // запоминаем отредактированные Акты
        Если Акт.НомерАкта <> НомерАкта  Тогда
            Продолжить;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Акт.ДатаАкта) и ЗначениеЗаполнено(Акт.Сумма) Тогда
            НовСтрока = Объект.Акты.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Акт);
        КонецЕсли; 
    КонецЦикла;  
    
    Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура АктыУдалениеИзОбъекта(НомерАкта, ЭтапДоговора="")
    
    Если ЗначениеЗаполнено(НомерАкта) и ЗначениеЗаполнено(ЭтапДоговора) Тогда
        
    	Отбор = Новый Структура("НомерАкта, ЭтапДоговора", НомерАкта, ЭтапДоговора);
        
    ИначеЕсли ЗначениеЗаполнено(НомерАкта) Тогда
        
    	Отбор = Новый Структура("НомерАкта", НомерАкта);
        
    Иначе
        Возврат;
    КонецЕсли; 
    
	СущСтроки = Объект.Акты.НайтиСтроки(Отбор);
	Для каждого СущСтрока Из СущСтроки Цикл
		Объект.Акты.Удалить(СущСтрока);
		Модифицированность = Истина;
	КонецЦикла; 
	
    
КонецПроцедуры

&НаКлиенте
Процедура АктыЧислоАктаПриИзменении(Элемент)
    Тс = Элементы.Акты.ТекущиеДанные;
    Тс.ДатаАкта = Дата(Год(Объект.Дата), Месяц(Объект.Дата), Тс.ЧислоАкта);
КонецПроцедуры

// Сохраняет акты по ТекущийЭтапДоговора
//  и заполняет по НовыйЭтапДоговора
&НаКлиенте
Процедура ЗаполнитьАкты(НовыйЭтапДоговора)
	//// сохранить то, что есть
	//ЗаписатьЗарплатаИсполнителей();
	//ЗаписатьАкты();
    
    Акты.Очистить();
    ОбъемРаботКРаспределению = 0;
    ОбъемРаботНеРаспределено = 0;
	
    Отбор = Новый Структура("ЭтапДоговора", НовыйЭтапДоговора);
    ИскСтроки = Объект.Акты.НайтиСтроки(Отбор);
	НомерЭтапа = ПолучитьНомерЭтапа(НовыйЭтапДоговора);
	
	Для каждого Стр Из ИскСтроки Цикл
        НовСтр = Акты.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, Стр);
        НовСтр.НомерЭтапа = НомерЭтапа;
	КонецЦикла; 
	
	Если Акты.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(ПоискАкта) Тогда
		    Отбор = Новый Структура("НомерАкта", ПоискАкта);
			ИскАкт = Акты.НайтиСтроки(Отбор);
			ЗаполнитьЗарплатаИсполнителей(ИскАкт[0].НомерАкта, ИскАкт[0].ЭтапДоговора);
			Элементы.Акты.ТекущаяСтрока = ИскАкт[0].ПолучитьИдентификатор();
			
			// Акт найден - сброс флага поиска
			ПоискАкта = "";
		Иначе
			// активируем первую строку
			ЗаполнитьЗарплатаИсполнителей(Акты[0].НомерАкта, Акты[0].ЭтапДоговора);
			Элементы.Акты.ТекущаяСтрока = Акты[0].ПолучитьИдентификатор();
		КонецЕсли; 
		
		// Рассчитать объем работ к распределению
		РассчитатьОбъемРаботКРаспределению();
	Иначе
		ЗарплатаИсполнителей.Очистить();
	КонецЕсли;
			
КонецПроцедуры // ЗаполнитьАкты()

// Записывает Акты по ТекущийЭтапДоговора
&НаСервере
Процедура ЗаписатьАкты(ЭтапДоговора)
    ИскЭтапДоговора = ЭтапДоговора; 
    Если Не ЗначениеЗаполнено(ИскЭтапДоговора) Тогда
        // получить Этап из Актов
        Для каждого СтрАкт Из Акты Цикл
            ИскЭтапДоговора = СтрАкт.ЭтапДоговора;
            Прервать;
        КонецЦикла; 
    КонецЕсли; 
    
	// удаляем существующие строки Актов
    Если ЗначениеЗаполнено(ИскЭтапДоговора) Тогда
		Отбор = Новый Структура("ЭтапДоговора", ИскЭтапДоговора);
		СущСтроки = Объект.Акты.НайтиСтроки(Отбор);
		Для каждого СущСтрока Из СущСтроки Цикл
			Объект.Акты.Удалить(СущСтрока);
		КонецЦикла; 
    КонецЕсли; 
     
    //// удаляем существующие строки Актов
    //Если ЗначениеЗаполнено(ТекущийЭтапДоговора) Тогда
    //	Отбор = Новый Структура("ЭтапДоговора", ТекущийЭтапДоговора);
    //	СущСтроки = Объект.Акты.НайтиСтроки(Отбор);
    //	Для каждого СущСтрока Из СущСтроки Цикл
    //		Объект.Акты.Удалить(СущСтрока);
    //	КонецЦикла; 
    //КонецЕсли; 
	
    Для каждого Акт Из Акты Цикл
        // запоминаем отредактированные Акты
        Если ЗначениеЗаполнено(Акт.НомерАкта) и ЗначениеЗаполнено(Акт.ДатаАкта) и ЗначениеЗаполнено(Акт.Сумма) Тогда
            НовСтрока = Объект.Акты.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Акт);
        КонецЕсли; 
    КонецЦикла;     
    
    //Акты.Очистить();
КонецПроцедуры // ЗаписатьАкты()

&НаКлиенте
Процедура ОбработатьАкты(ЭтапДоговора)
    // Запись отредактированных строк в документ по предшествовавшему ЭтапуДоговора
    //ЗаписатьАкты();
    
    // Заполнение новыми данными
	Акты.Очистить(); 
    
 	Отбор = Новый Структура("ЭтапДоговора", ЭтапДоговора);
    СущСтроки = Объект.Акты.НайтиСтроки(Отбор);
    Для каждого СущСтрока Из СущСтроки Цикл
        НовСтр = Акты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СущСтрока);
        //СтрАкт = Элементы.ЭтапыДоговоров.ТекущиеДанные;
        НовСтр.НомерЭтапа = ТекущийНомерЭтапа;
    КонецЦикла; 
    //РассчитатьОбъемРаботКРаспределению();
        
КонецПроцедуры // ()

&НаКлиенте
Процедура РассчитатьОбъемРаботКРаспределению()
    
    ОбъемРаботКРаспределению = 0;
    
    ТекСтрока = Элементы.Акты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
    
    Если ТекСтрока.Сумма = 0 Тогда
        Возврат;    
    КонецЕсли; 
    
    ОбъемРаботКРаспределению = ТекСтрока.Сумма - ТекСтрока.НДС - ТекСтрока.СуммаПрочих;
	
	РассчитатьОбъемРаботНеРаспределено();
    
КонецПроцедуры // РассчитатьОбъемРаботКРаспределению()

&НаКлиенте
Процедура РассчитатьОбъемРаботНеРаспределено()
    
	ОбъемРаботНеРаспределено = ОбъемРаботКРаспределению  - РассчитатьОбъемРаботРаспределено();
    
    Если ОбъемРаботНеРаспределено = 0 Тогда
        Элементы.ОбъемРаботНеРаспределено.ЦветТекста = WebЦвета.Черный;
    Иначе
        Элементы.ОбъемРаботНеРаспределено.ЦветТекста = WebЦвета.Красный;
    КонецЕсли; 
    
КонецПроцедуры // РассчитатьОбъемРаботНеРаспределено()

&НаКлиенте
Функция РассчитатьОбъемРаботРаспределено()
    Распределено = 0;
    Для каждого Стр Из ЗарплатаИсполнителей Цикл
        Распределено = Распределено + Стр.ОбъемРабот;           
	КонецЦикла;
	Возврат Распределено;
КонецФункции // РассчитатьОбъемРаботРаспределено()

&НаКлиенте
Процедура АктыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    СтрАкт = Элементы.ЭтапыДоговоров.ТекущиеДанные;
    Если СтрАкт = Неопределено Тогда
        Возврат;    
	КонецЕсли; 
	
	СостояниеАкта = "";
    
    ТекАкт = Элементы.Акты.ТекущиеДанные;
    
    // запомним для последующего контроля на изменение
    НомерАктаДоРедактирования = ТекАкт.НомерАкта;
    
	Если НоваяСтрока Тогда
		// Поиск Акта в базе
		Если Акты.Количество() = 1 Тогда
        	ТекАкт.НомерАкта = Элементы.Договоры.ТекущиеДанные.НомерДоговора + "/" + Формат(СтрАкт.НомерЭтапа, "ЧГ=0");
		Иначе
        	ТекАкт.НомерАкта = Элементы.Договоры.ТекущиеДанные.НомерДоговора + "/" + Формат(СтрАкт.НомерЭтапа, "ЧГ=0")+" "+Элементы.Акты.ТекущаяСтрока;
		КонецЕсли; 
		
		НомерАктаДоРедактирования = ТекАкт.НомерАкта;
		
		ТекАкт.ЭтапДоговора = СтрАкт.ЭтапДоговора;
		ТекущийЭтапДоговора = СтрАкт.ЭтапДоговора;
		ТекАкт.НомерЭтапа = СтрАкт.НомерЭтапа;
		ТекАкт.Договор = ТекущийДоговор;
		
		ДанныеАкта = ПолучитьДанныеАкта(ТекАкт.НомерАкта, СтрАкт.ЭтапДоговора);
		
		Если ТипЗнч(ДанныеАкта) = Тип("Структура") Тогда
    		ТекАкт.ДатаАкта = ДанныеАкта.ДатаАкта;
    		ТекАкт.НомерАкта = ДанныеАкта.НомерАкта;
			ТекАкт.Акт = ДанныеАкта.Акт;
			
			// Инфа по состоянию акта
			СостояниеАкта = ДанныеАкта.СостояниеАкта;
			ВидАкта = ДанныеАкта.ВидАкта;
			
			ТекАкт.Сумма = ДанныеАкта.Сумма;
			ТекАкт.НДС = ДанныеАкта.СуммаНДС;
			
		    Если ВидАкта <> ПредопределенноеЗначение("Перечисление.мВидыАктовВыполненныхРабот.Окончательный") Тогда
				// Сумму Прочих берем всю, иначе 0
				ТекАкт.СуммаПрочих = ПолучитьСуммуПрочих(СтрАкт.ЭтапДоговора);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеАкта) = Тип("СписокЗначений") Тогда
            ВыбЭлемент = ДанныеАкта.ВыбратьЭлемент(,);
            Если ВыбЭлемент = Неопределено Тогда
                Возврат;
            КонецЕсли;
            
            ДанныеАкта = ВыбЭлемент.Значение;
			
    		ТекАкт.ДатаАкта = ДанныеАкта.ДатаАкта;
    		ТекАкт.НомерАкта = ДанныеАкта.НомерАкта;
			ТекАкт.Акт = ДанныеАкта.Акт;
			
			// Инфа по состоянию акта
			СостояниеАкта = ДанныеАкта.СостояниеАкта;
			ВидАкта = ДанныеАкта.ВидАкта;
			
			ТекАкт.Сумма = ДанныеАкта.Сумма;
			ТекАкт.НДС = ДанныеАкта.СуммаНДС;
			
		    Если ВидАкта <> ПредопределенноеЗначение("Перечисление.мВидыАктовВыполненныхРабот.Окончательный") Тогда
				// Сумму Прочих берем всю, иначе 0
				ТекАкт.СуммаПрочих = ПолучитьСуммуПрочих(СтрАкт.ЭтапДоговора);
			КонецЕсли; 
		Иначе
			ТекАкт.Сумма = ЭтапНеЗаактированНаСумму();
			//ТекАкт.Сумма = СтрАкт.СметнаяСтоимость;
			Если ТекАкт.Сумма = СтрАкт.СметнаяСтоимость Тогда
				// 100%
				ТекАкт.НДС = СтрАкт.НДСЭтапа;
				ТекАкт.СуммаПрочих = ПолучитьСуммуПрочих(СтрАкт.ЭтапДоговора);
			Иначе
				// Пропорционально
				Если СтрАкт.СметнаяСтоимость > 0 Тогда
					Кф = ТекАкт.Сумма / СтрАкт.СметнаяСтоимость;
					ТекАкт.НДС = СтрАкт.НДСЭтапа * Кф;
					ТекАкт.СуммаПрочих = ПолучитьСуммуПрочих(СтрАкт.ЭтапДоговора) * Кф;
					Сообщить("Проверьте правильность суммы НДС и Прочих!",СтатусСообщения.Внимание);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		РассчитатьОбъемРаботКРаспределению();
		
		Если Акты.Количество() = 1 Тогда
			// номер автоматом только для первой строки акта по этапу, иначе при вводе второй удалятся исполнители по 
			//  такому же номеру акта!
			//ТекАкт.НомерАкта = Элементы.Договоры.ТекущиеДанные.НомерДоговора + "/" + СтрАкт.НомерЭтапа;
			
			// это первый акт по этапу - по нему можно подбросить исполнителей из объекта
			ЗаполнитьЗарплатаИсполнителей(ТекАкт.НомерАкта, ТекАкт.ЭтапДоговора);
			
			// Только для нового акта подброс исполнителей из Этапа договора
			МассивИсполнителей = Новый Массив;
			Для каждого Стр Из ЗарплатаИсполнителей Цикл
				МассивИсполнителей.Добавить(Стр.Исполнитель);
			КонецЦикла; 
			
			//НомерАктаДоРедактирования = ТекАкт.НомерАкта;
			
			ОтборЭтапДоговора = Новый Структура("ЭтапДоговора", ТекАкт.ЭтапДоговора);
			ДобавитьИсполнителейИзЭтапаРабот(МассивИсполнителей, ОтборЭтапДоговора);
			
			ДобавитьНеОсновныхИсполнителей(МассивИсполнителей, ТекАкт.ЭтапДоговора);
			
			ЗаполнитьНормативы();
			
			ПересчитатьОбъемРаботИсполнителей();
			
			ЗарплатаИсполнителейЗаписьВОбъект(ТекАкт.ЭтапДоговора , ТекАкт.НомерАкта);
			
			//Если НЕ ЗначениеЗаполнено(ТекАкт.Акт) Тогда
			    ЭтаФорма.ТекущийЭлемент = Элементы.АктыЧислоАкта;
			//КонецЕсли; 
		Иначе
			// надо менять номер акта
			// номер автоматом только для первой строки акта по этапу, иначе при вводе второй удалятся исполнители по 
			//  такому же номеру акта!
			//ТекАкт.НомерАкта = Элементы.Договоры.ТекущиеДанные.НомерДоговора + "/" + СтрАкт.НомерЭтапа+" "+Элементы.Акты.ТекущаяСтрока;
			
		    ЭтаФорма.ТекущийЭлемент = Элементы.АктыНомерАкта;
		КонецЕсли; 
    КонецЕсли;           
КонецПроцедуры

Функция ПолучитьРеквизитыАкта(Акт)
    Если Не ЗначениеЗаполнено(Акт) Тогда
	    Возврат Неопределено;   
    КонецЕсли; 
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Владелец.РегистрационныйНомер КАК НомерАкта,
		|	мРеквизитыАктовВыполненныхРабот.Владелец.ДатаРегистрации КАК ДатаАкта,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта,
		|	мРеквизитыАктовВыполненныхРабот.ВидАкта КАК ВидАкта,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА мРеквизитыАктовВыполненныхРабот.Владелец.ДатаРегистрации < &ДатаДеноминации
		|				И мРеквизитыАктовВыполненныхРабот.Владелец.ДатаРегистрации <> &ПустаяДата
		|			ТОГДА мРеквизитыАктовВыполненныхРабот.СуммаНДС / 10000
		|		ИНАЧЕ мРеквизитыАктовВыполненныхРабот.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА мРеквизитыАктовВыполненныхРабот.Владелец.ДатаРегистрации < &ДатаДеноминации
		|				И мРеквизитыАктовВыполненныхРабот.Владелец.ДатаРегистрации <> &ПустаяДата
		|			ТОГДА мРеквизитыАктовВыполненныхРабот.Сумма / 10000
		|		ИНАЧЕ мРеквизитыАктовВыполненныхРабот.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Акт";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Акт", Акт);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	
	Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура("НомерАкта, ДатаАкта, СостояниеАкта, ВидАкта, СтавкаНДС, СуммаНДС, Сумма");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		Возврат СтруктураВозврата;
   КонецЕсли; 
	
	Возврат Неопределено;   
КонецФункции

Функция ПолучитьРеквизитыАктаДляФормы(Акт)
    Если Не ЗначениеЗаполнено(Акт) Тогда
	    Возврат Неопределено;   
    КонецЕсли; 
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта,
		|	мРеквизитыАктовВыполненныхРабот.ВидАкта КАК ВидАкта
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Акт";
	
	Запрос.УстановитьПараметр("Акт", Акт);
	
	Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура("СостояниеАкта, ВидАкта");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		Возврат СтруктураВозврата;
   КонецЕсли; 
	
	Возврат Неопределено;   
КонецФункции
 
&НаСервере
Функция ПолучитьДанныеАкта(ИскНомерАкта, ЭтапДоговора) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Акт,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта,
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаАкта,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта,
		|	мРеквизитыАктовВыполненныхРабот.ВидАкта КАК ВидАкта,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ВнутренниеДокументы.ДатаРегистрации < &ДатаДеноминации
		|				И ВнутренниеДокументы.ДатаРегистрации <> &ПустаяДата
		|			ТОГДА мРеквизитыАктовВыполненныхРабот.СуммаНДС / 10000
		|		ИНАЧЕ мРеквизитыАктовВыполненныхРабот.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ВнутренниеДокументы.ДатаРегистрации < &ДатаДеноминации
		|				И ВнутренниеДокументы.ДатаРегистрации <> &ПустаяДата
		|			ТОГДА мРеквизитыАктовВыполненныхРабот.Сумма / 10000
		|		ИНАЧЕ мРеквизитыАктовВыполненныхРабот.Сумма
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ПО мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка
		|ГДЕ
		|	ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО &ИскНомерАкта
		|	И ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот)
		|	И мРеквизитыАктовВыполненныхРабот.СостояниеАкта <> &НеПодписан
		|	И мРеквизитыАктовВыполненныхРабот.СостояниеАкта <> &Черновик
		|	И НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И (ВнутренниеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|				И ВнутренниеДокументы.Корреспондент.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ИЛИ ВнутренниеДокументы.Корреспондент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо))
		|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления
		|	И ВнутренниеДокументы.ЭтапДоговора = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	Запрос.УстановитьПараметр("ИскНомерАкта", ИскНомерАкта+"%");
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	Запрос.УстановитьПараметр("НеПодписан", Перечисления.мСостоянияАктовВыполненныхРабот.НеПодписан);
	Запрос.УстановитьПараметр("Черновик", Перечисления.мСостоянияАктовВыполненныхРабот.Черновик);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КоличествоАктов = Результат.Количество();
	Если КоличествоАктов = 0 Тогда
		Возврат Неопределено;
		
	ИначеЕсли КоличествоАктов = 1 Тогда	
		СтруктураВозврата = Новый Структура("Акт, НомерАкта, ДатаАкта, СостояниеАкта, ВидАкта, СтавкаНДС, СуммаНДС, Сумма");
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат[0]);
		Возврат СтруктураВозврата;
	Иначе
		СписокАктов = Новый СписокЗначений;
		Для й=0 По КоличествоАктов-1 Цикл
			СтруктураВозврата = Новый Структура("Акт, НомерАкта, ДатаАкта, СостояниеАкта, ВидАкта, СтавкаНДС, СуммаНДС, Сумма");
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, Результат[й]);
			
			СписокАктов.Добавить(СтруктураВозврата, ""+Результат[й].НомерАкта+" от "+Результат[й].ДатаАкта); 
		КонецЦикла;
		Возврат СписокАктов;
	КонецЕсли; 
	
	Возврат Неопределено;   
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНормативы()
	Если ЗарплатаИсполнителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ЗарплатаИсполнителей[0].ЭтапДоговора);
	Для каждого Стр Из ЗарплатаИсполнителей Цикл
		ДанныеДляНорматива.Вставить("Исполнитель", Стр.Исполнитель);
		ДанныеДляНорматива.Вставить("ВидРабот", ПолучитьВидРаботЭтапаДоговора(Стр.ЭтапДоговора));
		ДанныеДляНорматива.Вставить("Дата", Объект.Дата);
		
		Стр.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
	КонецЦикла; 
КонецПроцедуры // ЗаполнитьНормативы()

&НаСервереБезКонтекста
Функция ПолучитьВидРаботЭтапаДоговора(ЭтапДоговора)
	Возврат ЭтапДоговора.ВидРабот;
КонецФункции // 

// Возвращает сумму, которая должна быть исключена из объема работ
//
// Параметры:
//  ЭтапДоговора  - ЭтапДоговора
//
// Возвращаемое значение:
//   Число
//
&НаСервере
Функция ПолучитьСуммуПрочих(ЭтапДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоров.Смета
		|ПОМЕСТИТЬ СметаЭтапа
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|ГДЕ
		|	мЭтапыДоговоров.Ссылка = &ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|				ТОГДА мСметыОбъемРабот.Стоимость / 10000
		|			ИНАЧЕ мСметыОбъемРабот.Стоимость
		|		КОНЕЦ) КАК СуммаПрочих,
		|	мСметыОбъемРабот.СтадияРабот
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.Ссылка В
		|			(ВЫБРАТЬ
		|				СметаЭтапа.Смета
		|			ИЗ
		|				СметаЭтапа КАК СметаЭтапа)
		|	И мСметыОбъемРабот.СтадияРабот.НеВходитВОбъемДляНачисленияЗП
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.СтадияРабот";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли; 
	
	Возврат Результат.Итог("СуммаПрочих");

КонецФункции // ПолучитьСуммуПрочих(ЭтапДоговора)

&НаКлиенте
Процедура АктыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Акты.ТекущиеДанные;
	
	СостояниеАкта = "";
	ВидАкта = "";
	РезультатПроверки = Неопределено;
	
	Если ТекСтрока = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	// заполнение информации об акте в форме
    Если ЗначениеЗаполнено(ТекСтрока.Акт) Тогда
        РеквизитыАкта = ПолучитьРеквизитыАктаДляФормы(ТекСтрока.Акт);
        ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыАкта, "СостояниеАкта, ВидАкта");
		РезультатПроверки = ПолучитьРезультатПроверки(ТекСтрока.Акт);
    КонецЕсли; 
    
    //ДанныеАкта = ПолучитьДанныеАкта(ТекСтрока.НомерАкта, ТекСтрока.ЭтапДоговора);
    //
    //Если ТипЗнч(ДанныеАкта) = Тип("Структура") Тогда
    //	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеАкта, "СостояниеАкта, ВидАкта", "Акт, ДатаАкта");
    //	
    //ИначеЕсли ТипЗнч(ДанныеАкта) = Тип("СписокЗначений") Тогда
    //	ВыбЭлемент = ДанныеАкта.ВыбратьЭлемент(,);
    //	Если ВыбЭлемент = Неопределено Тогда
    //		Возврат;
    //	КонецЕсли;
    //	
    //	ДанныеАкта = ВыбЭлемент.Значение;
    //	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеАкта, "СостояниеАкта, ВидАкта", "Акт, ДатаАкта");
    //КонецЕсли; 
		
    ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
    	ЗарплатаИсполнителейЗаписьВОбъект(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    КонецЕсли; 
    
    ЗаполнитьЗарплатаИсполнителей(ТекСтрока.НомерАкта, ТекСтрока.ЭтапДоговора);
		
    РассчитатьОбъемРаботКРаспределению();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатПроверки(Акт)
	// сначала из Кеш
	Отбор = Новый Структура("Акт", Акт);
	ИскСтроки = КешРезультатовПроверки.НайтиСтроки(Отбор);
	
	Если ИскСтроки.Количество() = 0 Тогда
		Результат = мРаботаСДоговорами.ЗамечаниеПроверкиАкта(Акт);
		СтрокаКеш = КешРезультатовПроверки.Добавить();
		СтрокаКеш.Акт = Акт;
		СтрокаКеш.Замечание = Результат;
	Иначе
		Результат = ИскСтроки[0].Замечание;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура АктыСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.Акты.ТекущиеДанные;
    Ставка = ПолучитьСтавкуНДС(ТекСтрока.ЭтапДоговора);
	ТекСтрока.НДС = Окр(ТекСтрока.Сумма * Ставка / (100+Ставка), ЗнакОкр(Объект.Дата));
    РассчитатьОбъемРаботКРаспределению();
	
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура АктыНДСПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура АктыСуммаПрочихПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

// Возвращает ставку НДС 
//
// Параметры:
//  ЭтапДоговора 
// Возвращаемое значение:
//   Ставка   - число
//
&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС(ЭтапДоговора)
	Возврат ЭтапДоговора.СтавкаНДС.Ставка;
КонецФункции // ПолучитьСтавкуНДС(ЭтапДоговора)

&НаКлиенте
Процедура АктыПередУдалением(Элемент, Отказ)
    ТекСтрока = Элементы.Акты.ТекущиеДанные;
    
	АктыПередУдалениемНаСервере(ТекСтрока.НомерАкта, ТекСтрока.ЭтапДоговора);
	
	ЗарплатаИсполнителей.Очистить();
    
КонецПроцедуры

&НаСервере
Процедура АктыПередУдалениемНаСервере(НомерАкта, ЭтапДоговора)
    
	// Удалить исполнителей по акту из объекта
    ЗарплатаИсполнителейУдалениеИзОбъекта(НомерАкта, ЭтапДоговора);
      
    // Удалить Акт из объекта
    АктыУдалениеИзОбъекта(НомерАкта);
    
КонецПроцедуры

&НаКлиенте
Процедура АктыНомерАктаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Акты.ТекущиеДанные;
	
	АктыНомерАктаПриИзмененииНаСервере(ТекСтрока.НомерАкта, ТекСтрока.ЭтапДоговора);
    
    НомерАктаДоРедактирования = ТекСтрока.НомерАкта;
    
КонецПроцедуры

&НаСервере
Процедура АктыНомерАктаПриИзмененииНаСервере(НовыйНомерАкта, ЭтапДоговора)
		
    // удалить из объекта со старым номером акта
    ЗарплатаИсполнителейУдалениеИзОбъекта(НомерАктаДоРедактирования, ЭтапДоговора);
    
    // Обновить номера в форме
    Для каждого Стр Из ЗарплатаИсполнителей Цикл
        
        Стр.НомерАкта = НовыйНомерАкта;
        
    КонецЦикла; 
    
    // Обновить в объекте
    ЗарплатаИсполнителейЗаписьВОбъект(ЭтапДоговора, НовыйНомерАкта);
    
    // Удалить Акт со старым номером из объекта
    АктыУдалениеИзОбъекта(НомерАктаДоРедактирования, ЭтапДоговора);
    
КонецПроцедуры

&НаКлиенте
Процедура АктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
    	ЗарплатаИсполнителейЗаписьВОбъект(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    КонецЕсли; 
//    ЗарплатаИсполнителейЗаписьВОбъект();
    
    // проверить общую сумму актирования
    Если ЭтапНеЗаактированНаСумму() = 0 Тогда
        Если Вопрос("Все работы по этапу заактированы! Вы уверены, что хотите продолжить?", РежимДиалогаВопрос.ДаНет)= КодВозвратаДиалога.Нет Тогда
            Отказ = Истина;
        КонецЕсли; 
    КонецЕсли; 
    
КонецПроцедуры

&НаКлиенте
Функция ЭтапНеЗаактированНаСумму()
    ЭтапЗаактирован = Ложь;
    ТекДанные = Элементы.ЭтапыДоговоров.ТекущиеДанные;
    СметнаяСтоимость = ТекДанные.СметнаяСтоимость;
    Заактировано = ТекДанные.АктированоРаньше;
    
    Для каждого Акт Из Акты Цикл
    	Заактировано = Заактировано + Акт.Сумма;
    КонецЦикла; 
    
    Если Заактировано >= СметнаяСтоимость Тогда
        ЭтапЗаактирован = Истина;
	КонецЕсли; 
	
	НеЗаактированоНаСумму = СметнаяСтоимость-Заактировано;
	НеЗаактированоНаСумму = Макс(НеЗаактированоНаСумму, 0);
	
    Возврат НеЗаактированоНаСумму;
КонецФункции

&НаКлиенте
Процедура ПроверитьНеРаспределеноПоАкту()
	ТекСтрока = Элементы.Акты.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
	    Возврат;
	КонецЕсли;
	
	Если ОбъемРаботНеРаспределено <> 0 Тогда
		Предупреждение("По акту " + ТекСтрока.НомерАкта + " не распределен объем работ!", 10);
	КонецЕсли; 

КонецПроцедуры // ПроверитьНеРаспределеноПоАкту()

&НаКлиенте
Процедура АктыАктПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    //ТекНомерАкта = ТекДанные.НомерАкта;
	
    РеквизитыАкта = ПолучитьРеквизитыАкта(ТекДанные.Акт);
    ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыАкта);
	РезультатПроверки = ПолучитьРезультатПроверки(ТекДанные.Акт);
    
    НомерВыбрАкта = ТекДанные.НомерАкта;
    
    //НомерВыбрАкта = ПолучитьНомерАкта(ТекДанные.Акт);
    //ДанныеАкта = ПолучитьДанныеАкта(НомерВыбрАкта, ТекДанные.ЭтапДоговора);
    //Если ТипЗнч(ДанныеАкта) = Тип("СписокЗначений") Тогда
    //	ПараметрыАкта = ДанныеАкта[0].Значение;
    //ИначеЕсли ТипЗнч(ДанныеАкта) = Тип("Структура") Тогда
    //	ПараметрыАкта = ДанныеАкта;	
    //Иначе
    //	Возврат;
    //КонецЕсли;  
    //ЗаполнитьЗначенияСвойств(ТекДанные, ПараметрыАкта);
	ТекДанные.ЧислоАкта = День(ТекДанные.ДатаАкта);
	
	// если изменился номер акта - изменить связанные таблицы зарплаты
	Если НомерВыбрАкта <> НомерАктаДоРедактирования Тогда
		АктыНомерАктаПриИзмененииНаСервере(НомерВыбрАкта, ТекДанные.ЭтапДоговора);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерАкта(Акт)
	Возврат Акт.РегистрационныйНомер;	
КонецФункции
 
&НаКлиенте
Процедура АктыАктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЭтапДоговора", ТекДанные.ЭтапДоговора);	
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область РаботаСИсполнителями

// Считаются только исполнители основного подразделения
&НаКлиенте
Процедура ПосчитатьИсполнителейИСуммуДляРаспределения()
	
    КолвоИсполнителейДляРаспределения = 0;
    СуммаДляРаспределения = ОбъемРаботКРаспределению;
    
    Для каждого ТекСтрока Из ЗарплатаИсполнителей Цикл
        Если ТекСтрока.НеОсновноеПодразделение Тогда
            // уменьшаем сумму к распределению на объем, отданный другим подразделениям
    	    СуммаДляРаспределения = СуммаДляРаспределения - ТекСтрока.ОбъемРабот;
        Иначе
            КолвоИсполнителейДляРаспределения = КолвоИсполнителейДляРаспределения + 1;
        КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ПосчитатьИсполнителейДляРаспределения()
 
&НаКлиенте
Процедура ПересчитатьОбъемРаботИсполнителей()
	
	ПосчитатьИсполнителейИСуммуДляРаспределения();
    
    // расчет объема пропорционально, на последнюю строку - остаток
    ОсталосьРаспределить = СуммаДляРаспределения;
    НомерПП = 0;
    ОсталосьРаспределитьКТУ = 1;
    Для каждого ТекСтрока Из ЗарплатаИсполнителей Цикл
        
        // неосновные подразделения пропускаем
		Если ТекСтрока.НеОсновноеПодразделение Тогда
			СтруктураСтроки = Новый Структура("Начислено, БазовоеНачисление, ОбъемРабот, Коэффициент, Норматив");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
			
			РассчитатьСуммуИсполнителя(СтруктураСтроки);
			
			ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);
            Продолжить;
        КонецЕсли;
        
        НомерПП = НомерПП + 1;
        
        Если НомерПП = КолвоИсполнителейДляРаспределения Тогда
            ТекСтрока.ОбъемРабот = ОсталосьРаспределить;
			Если флПоровну Тогда
				ТекСТрока.КТУ = ОсталосьРаспределитьКТУ;
			КонецЕсли; 
		Иначе
			Если флПоровну Тогда
				Если КолвоИсполнителейДляРаспределения > 0 Тогда
					ТекСтрока.ОбъемРабот = Окр(СуммаДляРаспределения / КолвоИсполнителейДляРаспределения, ЗнакОкр(Объект.Дата));
					ТекСТрока.КТУ = 1 / КолвоИсполнителейДляРаспределения;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураСтроки = Новый Структура("Начислено, БазовоеНачисление, ОбъемРабот, Коэффициент, Норматив");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		
		РассчитатьСуммуИсполнителя(СтруктураСтроки);

		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);

		ОсталосьРаспределить = ОсталосьРаспределить - ТекСтрока.ОбъемРабот;
        ОсталосьРаспределитьКТУ = ОсталосьРаспределитьКТУ - ТекСТрока.КТУ;
    КонецЦикла;
    
	РассчитатьОбъемРаботКРаспределению();
    ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
    	ЗарплатаИсполнителейЗаписьВОбъект(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    КонецЕсли; 
	//ЗарплатаИсполнителейЗаписьВОбъект();
	
КонецПроцедуры // ПересчитатьОбъемРаботИсполнителей()

// Заполняет ЗарплатаИсполнителей по НомерАкта
&НаКлиенте
Процедура ЗаполнитьЗарплатаИсполнителей(НомерАкта, ЭтапДоговора)

	ЗарплатаИсполнителей.Очистить(); 
    
    Если ЗначениеЗаполнено(НомерАкта) Тогда
        Отбор = Новый Структура("НомерАкта, ЭтапДоговора", НомерАкта, ЭтапДоговора);
        Начисления = Объект.Зарплата.НайтиСтроки(Отбор);
        Для каждого СтрокаНач Из Начисления Цикл
            СтрокаЗарплатаИсполнителей = ЗарплатаИсполнителей.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаЗарплатаИсполнителей, СтрокаНач);
            СтрокаЗарплатаИсполнителей.ТабельныйНомер = ПолучитьТабельныйНомерИсполнителя(СтрокаЗарплатаИсполнителей.Исполнитель);
			СтрокаЗарплатаИсполнителей.НомерАкта = НомерАкта;
 			СтрокаЗарплатаИсполнителей.ЭтапДоговора = ЭтапДоговора;
       КонецЦикла; 
    КонецЕсли; 
    
КонецПроцедуры // ЗаполнитьЗарплатаИсполнителей()

&НаСервере
Процедура ДобавитьИсполнителейИзЭтапаРабот(МассивИсполнителей, Отбор)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ЭтапыДоговоровИсполнители.Исполнитель,
        |	ЭтапыДоговоровИсполнители.КТУ,
        |	ЭтапыДоговоровИсполнители.Ссылка КАК ЭтапДоговора,
        |	СведенияОПользователях.Подразделение КАК Подразделение,
        |	ЭтапыДоговоровИсполнители.Исполнитель.ТабельныйНомер КАК ТабельныйНомер
        |ИЗ
        |	Справочник.мЭтапыДоговоров.Исполнители КАК ЭтапыДоговоровИсполнители
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
        |		ПО ЭтапыДоговоровИсполнители.Исполнитель = СведенияОПользователях.Пользователь
        |ГДЕ
        |	ЭтапыДоговоровИсполнители.Ссылка = &ЭтапДоговора
        |	И НЕ ЭтапыДоговоровИсполнители.Исполнитель В (&МассивИсполнителей)";
        
	//Запрос.УстановитьПараметр("ВидРабот", Отбор.ЭтапДоговора.ВидРабот);
	//Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
    Запрос.УстановитьПараметр("МассивИсполнителей", МассивИсполнителей);
    Запрос.УстановитьПараметр("ЭтапДоговора", Отбор.ЭтапДоговора);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();
    
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			Продолжить;
		КонецЕсли; 
        НоваяСтрока = ЗарплатаИсполнителей.Добавить();    
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        НоваяСтрока.Коэффициент = 1;
        НоваяСтрока.НомерАкта = НомерАктаДоРедактирования; //Элементы.Акты.ТекущиеДанные.НомерАкта;
        Если НоваяСтрока.КТУ = 0 Тогда
            НоваяСтрока.КТУ = 1;
        КонецЕсли; 
        
		//ОпределитьНеОсновноеПодразделение();
		
		ПодразделениеЭтапа = Отбор.ЭтапДоговора.Подразделение;
		Если Выборка.Подразделение <> ПодразделениеЭтапа И ПолучитьРодителяПодразделения(Выборка.Подразделение) <> ПодразделениеЭтапа Тогда
			НоваяСтрока.НеОсновноеПодразделение = Истина;
		Иначе	
			НоваяСтрока.НеОсновноеПодразделение = Ложь;
		КонецЕсли;
		
		МассивИсполнителей.Добавить(Выборка.Исполнитель);
	КонецЦикла;

КонецПроцедуры // ДобавитьИсполнителейИзЭтапаРабот()

&НаКлиенте
Процедура ЗарплатаИсполнителейОбъемРаботПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуИсполнителя(СтруктураСтроки = "")
	Если СтруктураСтроки = "" Тогда
		ТекСтрока = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ТекСтрока.Начислено = Окр(ТекСтрока.ОбъемРабот * ТекСтрока.Норматив * ТекСтрока.Коэффициент, ЗнакОкр(Объект.Дата));
		ТекСтрока.БазовоеНачисление = Окр(ТекСтрока.ОбъемРабот * ТекСтрока.Норматив, ЗнакОкр(Объект.Дата));
	Иначе
		СтруктураСтроки.Начислено = Окр(СтруктураСтроки.ОбъемРабот * СтруктураСтроки.Норматив * СтруктураСтроки.Коэффициент, ЗнакОкр(Объект.Дата));
		СтруктураСтроки.БазовоеНачисление = Окр(СтруктураСтроки.ОбъемРабот * СтруктураСтроки.Норматив, ЗнакОкр(Объект.Дата));
	КонецЕсли; 
КонецПроцедуры // РассчитатьСуммуИсполнителя()

&НаСервереБезКонтекста
Функция ЗнакОкр(Дата) Экспорт
	Если Дата < Дата(2016, 7, 1) Тогда
		Возврат 0;
	Иначе	
	    Возврат 2;
	КонецЕсли; 
КонецФункции // ЗнакОкр()

&НаКлиенте
Процедура ЗарплатаИсполнителейКТУПриИзменении(Элемент)
    ТекСтрока = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
    ТекСтрока.ОбъемРабот = Окр(ПолучитьОбъемРаботКРаспределению() * ТекСтрока.КТУ, ЗнакОкр(Объект.Дата));

    РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнителейНормативПриИзменении(Элемент)
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнителейКоэффициентПриИзменении(Элемент)
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

// Заполнение новой строки данными по умолчанию
&НаКлиенте
Процедура ЗарплатаИсполнителейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
        ТекДанные.ЭтапДоговора = Элементы.Акты.ТекущиеДанные.ЭтапДоговора;
        ТекДанные.НомерАкта = Элементы.Акты.ТекущиеДанные.НомерАкта;
		ТекДанные.Коэффициент = 1;
		Если ЗначениеЗаполнено(ТекДанные.Подразделение) Тогда
			Если ФлОстаток Тогда
				ТекДанные.ОбъемРабот = ОбъемРаботНеРаспределено;
				ТекДанные.КТУ = 1;
			КонецЕсли; 
			Если флПоровну Тогда
				ПосчитатьИсполнителейИСуммуДляРаспределения();	
				Если КолвоИсполнителейДляРаспределения > 0 Тогда
					ТекДанные.ОбъемРабот = Окр(СуммаДляРаспределения / КолвоИсполнителейДляРаспределения, ЗнакОкр(Объект.Дата));
					ТекДанные.КТУ = 1 / КолвоИсполнителейДляРаспределения;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		//РассчитатьОбъемРаботКРаспределению();
        РассчитатьСуммуИсполнителя();
    КонецЕсли; 
КонецПроцедуры

// Объем, который отображается в форме надо еще уменьшить на суммы, которые отданы другим подразделениям
&НаКлиенте
Функция ПолучитьОбъемРаботКРаспределению()
    КРаспределению = ОбъемРаботКРаспределению;
    Для каждого СтрЗарп Из ЗарплатаИсполнителей Цикл
        Если СтрЗарп.НеОсновноеПодразделение Тогда
    	    КРаспределению = КРаспределению - СтрЗарп.ОбъемРабот;
        КонецЕсли; 
    КонецЦикла; 
    Возврат КРаспределению;
КонецФункции

&НаКлиенте
Функция ПолучитьОстатокКТУ()
    ТекКТУ = 1;
    Для каждого СтрЗарп Из ЗарплатаИсполнителей Цикл
        Если СтрЗарп.НеОсновноеПодразделение Тогда
            Продолжить;
        КонецЕсли; 
    	ТекКТУ = ТекКТУ - СтрЗарп.КТУ;
    КонецЦикла; 
    Возврат ТекКТУ;
КонецФункции

&НаКлиенте
Процедура ЗарплатаИсполнителейИсполнительПриИзменении(Элемент)
    Тс = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ТекущийЭтапДоговора);
	ДанныеДляНорматива.Вставить("Исполнитель", Тс.Исполнитель);
	ДанныеДляНорматива.Вставить("ВидРабот", Элементы.ЭтапыДоговоров.ТекущиеДанные.ВидРабот);
	ДанныеДляНорматива.Вставить("Дата", Объект.Дата);
	
	Тс.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
    Тс.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Тс.Исполнитель);
    Тс.ТабельныйНомер = ПолучитьТабельныйНомерИсполнителя(Тс.Исполнитель);
    
    
	Если ЗначениеЗаполнено(Тс.Подразделение) Тогда
    	ОпределитьНеОсновноеПодразделение();
		Если ФлОстаток Тогда
			Тс.ОбъемРабот = ОбъемРаботНеРаспределено;
			Тс.КТУ = 1;
		КонецЕсли; 
		Если флПоровну Тогда
			ПосчитатьИсполнителейИСуммуДляРаспределения();	
			Если КолвоИсполнителейДляРаспределения > 0 Тогда
				Тс.ОбъемРабот = Окр(СуммаДляРаспределения / КолвоИсполнителейДляРаспределения, ЗнакОкр(Объект.Дата));
				Тс.КТУ = 1 / КолвоИсполнителейДляРаспределения;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Сообщить("Не заполнено подразделение у "+Тс.Исполнитель);
	КонецЕсли; 
	
	//Если Тс.НеОсновноеПодразделение Тогда
	//    Тс.КТУ = 1;
	//Иначе
	//    Тс.КТУ = ПолучитьОстатокКТУ();
	//КонецЕсли; 
	//
	//РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ТекущийЭтапДоговора)
	СтруктураДопРекв = Новый Структура("ВидЗаказчика, ЦельПредоставления, ДопУсловие", "", "", "");
	
	Корреспондент = ТекущийДоговор.Корреспондент;
	
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидЗаказчика = мРаботаСоСметами.ПолучитьДопРеквизит("Корреспонденты", Корреспондент, "Вид заказчика физ. лицо");
		СтруктураДопРекв.Вставить("ВидЗаказчика", ВидЗаказчика);
		ИмяПВХ = "Цель предоставления зем. участка физлицам";
		ЦельПредоставления = мРаботаСоСметами.ПолучитьДопРеквизит("ВнутренниеДокументы", ТекущийДоговор, ИмяПВХ);
	Иначе
		ВидЗаказчика = мРаботаСоСметами.ПолучитьДопРеквизит("Корреспонденты", Корреспондент, "Вид заказчика юр. лицо");
		СтруктураДопРекв.Вставить("ВидЗаказчика", ВидЗаказчика);
		ИмяПВХ = "Цель предоставления зем. участка юрлицам";
		ЦельПредоставления = ТекущийЭтапДоговора.КарточкаобъектаРабот.ЦельПредоставления;
	КонецЕсли;
	СтруктураДопРекв.Вставить("ЦельПредоставления", ЦельПредоставления);
	
	ДопУсловие = ТекущийЭтапДоговора.ДопУсловиеНормативаЗП;
	СтруктураДопРекв.Вставить("ДопУсловие", ДопУсловие);
	
	Возврат СтруктураДопРекв;
	
КонецФункции // ПолучитьДопРеквДляНормативаЗП()

&НаКлиенте
Процедура ЗарплатаИсполнителейТабельныйНомерПриИзменении(Элемент)
    Тс = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	Тс.Исполнитель = ПолучитьИсполнителяПоТабельныйНомер(Тс.ТабельныйНомер);
	
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ТекущийЭтапДоговора);
	ДанныеДляНорматива.Вставить("Исполнитель", Тс.Исполнитель);
	ДанныеДляНорматива.Вставить("ВидРабот", Элементы.ЭтапыДоговоров.ТекущиеДанные.ВидРабот);
	ДанныеДляНорматива.Вставить("Дата", Объект.Дата);
	
	Тс.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
    Тс.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Тс.Исполнитель);
	
    ОпределитьНеОсновноеПодразделение();
	
	Если ЗначениеЗаполнено(Тс.Подразделение) Тогда
		Если ФлОстаток Тогда
			Тс.ОбъемРабот = ОбъемРаботНеРаспределено;
			Тс.КТУ = 1;
		КонецЕсли; 
		Если флПоровну Тогда
			ПосчитатьИсполнителейИСуммуДляРаспределения();	
			Если КолвоИсполнителейДляРаспределения > 0 Тогда
				Тс.ОбъемРабот = Окр(СуммаДляРаспределения / КолвоИсполнителейДляРаспределения, ЗнакОкр(Объект.Дата));
				Тс.КТУ = 1 / КолвоИсполнителейДляРаспределения;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	//РассчитатьОбъемРаботКРаспределению();
	РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРодителяПодразделения(Подразделение)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Возврат Подразделение.Родитель;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсполнителяПоТабельныйНомер(ТабельныйНомер)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ТабельныйНомер = &ТабельныйНомер";

	Запрос.УстановитьПараметр("ТабельныйНомер", ТабельныйНомер);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции // ПолучитьИсполнителяПоТабельныйНомер(ТабельныйНомер)

&НаСервереБезКонтекста
Функция ПолучитьТабельныйНомерИсполнителя(Исполнитель)
	Возврат Исполнитель.ТабельныйНомер;
КонецФункции // ПолучитьТабельныйНомерИсполнителя()

&НаКлиенте
Процедура ЗарплатаИсполнителейПередУдалением(Элемент, Отказ)
	// надо удалить исполнителя из объекта
	ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	ЗарплатаИсполнителейУдалениеИзОбъекта(ТекДанные.НомерАкта, ТекДанные.Исполнитель);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнителейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
    
    // Номер акта берем из текущей строки
    ТекДанные = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	
	ЗарплатаИсполнителейЗаписьВОбъект(ТекДанные.ЭтапДоговора, ТекДанные.НомерАкта);
    
КонецПроцедуры

// Удаляет существующие строки Зарплата
&НаСервере
Процедура ЗарплатаИсполнителейУдалениеИзОбъекта(НомерАкта, ЭтапДоговора, Исполнитель="")
	
    Если ЗначениеЗаполнено(НомерАкта) и ЗначениеЗаполнено(ЭтапДоговора) и ЗначениеЗаполнено(Исполнитель) Тогда
        
    	Отбор = Новый Структура("НомерАкта, ЭтапДоговора, Исполнитель", НомерАкта, ЭтапДоговора, Исполнитель);
        
    ИначеЕсли ЗначениеЗаполнено(НомерАкта) и ЗначениеЗаполнено(ЭтапДоговора) Тогда
        
    	Отбор = Новый Структура("НомерАкта, ЭтапДоговора", НомерАкта, ЭтапДоговора);
        
    ИначеЕсли ЗначениеЗаполнено(НомерАкта) Тогда
        
    	Отбор = Новый Структура("НомерАкта", НомерАкта);
        
    Иначе
        Возврат;
    КонецЕсли; 
    
	СущСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	Для каждого СущСтрока Из СущСтроки Цикл
		Объект.Зарплата.Удалить(СущСтрока);
		Модифицированность = Истина;
    КонецЦикла; 
    
    
КонецПроцедуры

// Записывает существующие строки Зарплата
&НаСервере
Процедура ЗарплатаИсполнителейЗаписьВОбъект(ЭтапДоговора="", НомерАкта="")
	// Сохраняем всех исполнителей по акту и этапу
    
    Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда    
        // Получим номер акта из строк
        ЭтапДоговора = ПолучитьЭтапДоговораЗарплаты();
    КонецЕсли; 
    Если Не ЗначениеЗаполнено(НомерАкта) Тогда    
        // Получим номер акта из строк
        НомерАкта = ПолучитьНомерАктаЗарплаты();
    КонецЕсли; 
	
	// прежде - очистка
	ЗарплатаИсполнителейУдалениеИзОбъекта(НомерАкта, ЭтапДоговора, Неопределено); 
	
	// потом - запись
	Для каждого Стр Из ЗарплатаИсполнителей Цикл
        Если ЗначениеЗаполнено(Стр.Исполнитель) Тогда
            НовСтрока = Объект.Зарплата.Добавить();
            ЗаполнитьЗначенияСвойств(НовСтрока, Стр);
			Если Объект.Дата < '20151001000000' Тогда
				НовСтрока.БазовоеНачисление = 0;
			КонецЕсли; 
        КонецЕсли; 
    КонецЦикла; 
    
    Модифицированность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнителейПослеУдаления(Элемент)
	РассчитатьОбъемРаботКРаспределению();
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерАктаЗарплаты()
    НомерАкта = "";
    Для каждого Стр Из ЗарплатаИсполнителей Цикл
        Если ЗначениеЗаполнено(Стр.НомерАкта) Тогда
            НомерАкта = Стр.НомерАкта;
            Прервать;
        КонецЕсли; 
    КонецЦикла;
    Возврат НомерАкта;
КонецФункции

&НаСервере
Функция ПолучитьЭтапДоговораЗарплаты()
    ЭтапДоговора = "";
    Для каждого Стр Из ЗарплатаИсполнителей Цикл
        Если ЗначениеЗаполнено(Стр.ЭтапДоговора) Тогда
            ЭтапДоговора = Стр.ЭтапДоговора;
            Прервать;
        КонецЕсли; 
    КонецЦикла;
    Возврат ЭтапДоговора;
КонецФункции

&НаКлиенте
Процедура ЗарплатаИсполнителейПодразделениеПриИзменении(Элемент)
    ОпределитьНеОсновноеПодразделение();
	РассчитатьОбъемРаботКРаспределению();
	ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеОсновноеПодразделение()
    Тс = Элементы.ЗарплатаИсполнителей.ТекущиеДанные;
	ПодразделениеЭтапа = ПолучитьРеквизитыЭтапа(Элементы.ЭтапыДоговоров.ТекущиеДанные.ЭтапДоговора).Подразделение;
	Если Тс.Подразделение <> ПодразделениеЭтапа И ПолучитьРодителяПодразделения(Тс.Подразделение) <> ПодразделениеЭтапа Тогда
		Тс.НеОсновноеПодразделение = Истина;
	Иначе	
		Тс.НеОсновноеПодразделение = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    // По этапам, следующим за актированными, если у них есть условие УчетДатыВыполненияПредыдущегоЭтапа
    //   необходимо рассчитать плановый срок
    Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        | мЭтапыДоговоров.Ссылка КАК ЭтапДоговора
        |ИЗ
        |   Документ.мАктирование.Акты КАК мАктированиеАкты
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мУсловияДоговоров.СрезПоследних(
        |                   ,
        |                   ЭтапДоговора В
        |                       (ВЫБРАТЬ
        |                           мЭтапыДоговоров.Ссылка КАК СледЭтап
        |                       ИЗ
        |                           Документ.мАктирование.Акты КАК мАктированиеАкты
        |                               ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |                               ПО
        |                                   мАктированиеАкты.Договор = мЭтапыДоговоров.Владелец
        |                       ГДЕ
        |                           мАктированиеАкты.Ссылка = &Ссылка
        |                           И мАктированиеАкты.Сумма > 0
        |                           И мАктированиеАкты.ЭтапДоговора.НомерЭтапа + 1 = мЭтапыДоговоров.НомерЭтапа)) КАК мУсловияДоговоровСрезПоследних
        |           ПО мЭтапыДоговоров.Ссылка = мУсловияДоговоровСрезПоследних.ЭтапДоговора
        |       ПО мАктированиеАкты.Договор = мЭтапыДоговоров.Владелец
        |ГДЕ
        |   мАктированиеАкты.Ссылка = &Ссылка
        |   И мАктированиеАкты.Сумма > 0
        |   И мАктированиеАкты.ЭтапДоговора.НомерЭтапа + 1 = мЭтапыДоговоров.НомерЭтапа
        |   И мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа";
        
        Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        // Определение этапов договоров для расчета и записи планового срока
        ЭтапыДляРасчетаПлановогоСрока = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЭтапДоговора");
        
        ПлановыеСрокиЭтапов = мРаботаСДоговорами.РассчитатьПлановыеСрокиЭтапов(ЭтапыДляРасчетаПлановогоСрока);
        
        ВидДатыДоговора = Справочники.мВидыДатДоговоров.ПлановыйСрок;
 		Установил = Пользователи.ТекущийПользователь();
        
        НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Основание.Установить(ТекущийОбъект.Ссылка);
        НаборЗаписей.Отбор.ВидДатыДоговора.Установить(ВидДатыДоговора);
        
        Для каждого Стр Из ПлановыеСрокиЭтапов Цикл
            НовЗап = НаборЗаписей.Добавить();
            НовЗап.Период = ТекущийОбъект.Дата;
            НовЗап.ЭтапДоговора = Стр.ЭтапДоговора;
        	НовЗап.ВидДатыДоговора = ВидДатыДоговора;
            НовЗап.Основание = ТекущийОбъект.Ссылка;
            НовЗап.Дата = Стр.ПлановыйСрок;
 			НовЗап.Установил = Установил;
        КонецЦикла; 
        
        //НаборЗаписей.Загрузить(Таблица);
        НаборЗаписей.Записать();
        
        //Выборка = РезультатЗапроса.Выбрать();
        //
        //Пока Выборка.Следующий() Цикл
        //    ПлановыйСрок = мРаботаСДоговорами.РассчитатьПлановыйСрокВыполненияДоговора(Выборка.ЭтапДоговора);
        //    
        //    Если ПлановыйСрок <> Неопределено Тогда
        //	//Если ПлановыйСрок <> Дата(1,1,1) Тогда
        //        СтруктураРег = Новый Структура("Период, Корреспондент, Договор, ЭтапДоговора, ВидДатыДоговора, Основание, Дата"); 
        //        ЗаполнитьЗначенияСвойств(СтруктураРег, Выборка);
        //        
        //        СтруктураРег.Вставить("Период", ТекущаяДата());
        //        СтруктураРег.Вставить("ВидДатыДоговора", ВидДатыДоговора);
        //        СтруктураРег.Вставить("Дата", ПлановыйСрок);
        //        СтруктураРег.Вставить("Основание", ТекущийОбъект.Ссылка);
        //        
        //        СтруктураОтбора = Новый Структура;
        //        СтруктураОтбора.Вставить("ЭтапДоговора", Выборка.ЭтапДоговора);
        //        СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДатыДоговора);
        //        СтруктураОтбора.Вставить("Основание", ТекущийОбъект.Ссылка);
        //        
        //        мРаботаСДоговорами.ЗаписатьДатуДоговора(СтруктураРег, СтруктураОтбора, Ложь);
        //    КонецЕсли; 
        //КонецЦикла; 
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ФлОстатокПриИзменении(Элемент)
	Если ФлОстаток Тогда
		флПоровну = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура флПоровнуПриИзменении(Элемент)
	Если флПоровну Тогда
		ФлОстаток = Ложь;
    	ПересчитатьОбъемРаботИсполнителей();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Акты геопортала загружены" Тогда
        Договоры.Очистить();
        ЭтапыДоговоров.Очистить();
		ЭтаФорма.Прочитать();
        ЗаполнитьДоговоры();
        
    //ИначеЕсли ИмяСобытия = "Акт выбран" Тогда
    //	Отбор = Новый Структура("Акт", Параметр); 
    //	СтрокаАкта = Акты.НайтиСтроки(Отбор);
    //	ТекущийЭтапДоговора = СтрокаАкта[0].ЭтапДоговора;
    //    ТекущийДоговор = ТекущийЭтапДоговора.Владелец; 
    //	//ПоискАкта = СтрокаАкта[0].НомерАкта;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ЭтапЗаактирован()
    ЭтапЗаактирован = Ложь;
    ТекДанные = Элементы.ЭтапыДоговоров.ТекущиеДанные;
    СметнаяСтоимость = ТекДанные.СметнаяСтоимость;
    Заактировано = ТекДанные.АктированоРаньше;
    
    Для каждого Акт Из Акты Цикл
    	Заактировано = Заактировано + Акт.Сумма;
    КонецЦикла; 
    
    Если Заактировано >= СметнаяСтоимость Тогда
        ЭтапЗаактирован = Истина;
    КонецЕсли; 
    Возврат ЭтапЗаактирован;
КонецФункции

&НаКлиенте
Процедура ПерейтиКСледующемуАкту(Команда)
	Элементы.ФормаПерейтиКПредыдущемуАкту.Доступность = Истина;
	
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	НомерСтрокиАкта = ТекДанные.НомерСтроки;
	
	// Получение Акта из объекта
	Если ТекДанные.НомерСтроки < Объект.Акты.Количество() Тогда
		НомерСтрокиАкта = НомерСтрокиАкта + 1;
		
		УстановитьСтрокуАктивногоАкта(НомерСтрокиАкта);
	КонецЕсли;
	
	Если НомерСтрокиАкта = Объект.Акты.Количество() Тогда
		Элементы.ФормаПерейтиКСледующемуАкту.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПредыдущемуАкту(Команда)
	Элементы.ФормаПерейтиКСледующемуАкту.Доступность = Истина;
	
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	НомерСтрокиАкта = ТекДанные.НомерСтроки;
	
	Если НомерСтрокиАкта > 1 Тогда
		НомерСтрокиАкта = НомерСтрокиАкта - 1;
		
		УстановитьСтрокуАктивногоАкта(НомерСтрокиАкта);
	КонецЕсли; 
	
	Если НомерСтрокиАкта = 1 Тогда
		Элементы.ФормаПерейтиКПредыдущемуАкту.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуАктивногоАкта(НомерСтрокиАкта) 
	СтрокаАкта = Объект.Акты[НомерСтрокиАкта-1];
	
	Отбор = Новый Структура("Договор", СтрокаАкта.Договор); 
	МассивСтрок = Договоры.НайтиСтроки(Отбор);
	Элементы.Договоры.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	
	Отбор = Новый Структура("ЭтапДоговора", СтрокаАкта.ЭтапДоговора); 
	МассивСтрок = ЭтапыДоговоров.НайтиСтроки(Отбор);
	Элементы.ЭтапыДоговоров.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	
	Отбор = Новый Структура("Договор, ЭтапДоговора, НомерСтроки", 
	СтрокаАкта.Договор, СтрокаАкта.ЭтапДоговора, НомерСтрокиАкта); 
	МассивСтрок = Акты.НайтиСтроки(Отбор);
	Элементы.Акты.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеОсновныхИсполнителей(МассивИсполнителей, ЭтапДоговора)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора КАК ЭтапДоговора,
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|				ТОГДА мСметыОбъемРабот.Стоимость / 10000
		|			ИНАЧЕ мСметыОбъемРабот.Стоимость
		|		КОНЕЦ) КАК СуммаЗИС
		|ПОМЕСТИТЬ СуммыЗИС
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.СтадияРабот.Наименование = ""Внесение изменений в ЗИС""
		|	И мСметыОбъемРабот.Ссылка = &СметаЭтапаДоговора
		|	И мСметыОбъемРабот.Стоимость > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мРайоныПоСотрудникам.Сотрудник,
		|	СведенияОПользователях.Подразделение
		|ПОМЕСТИТЬ НеОсновные
		|ИЗ
		|	РегистрСведений.мРайоныПоСотрудникам КАК мРайоныПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО мРайоныПоСотрудникам.Сотрудник = СведенияОПользователях.Пользователь
		|ГДЕ
		|	&Месторасположение ПОДОБНО ""%"" + мРайоныПоСотрудникам.Месторасположение + ""%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыЗИС.ЭтапДоговора,
		|	ЕстьNULL(СуммыЗИС.СуммаЗИС, 0) КАК ОбъемРабот,
		|	НеОсновные.Сотрудник КАК Исполнитель,
		|	НеОсновные.Подразделение
		|ИЗ
		|	СуммыЗИС КАК СуммыЗИС,
		|	НеОсновные КАК НеОсновные";
	
	Запрос.УстановитьПараметр("Месторасположение", ЭтапДоговора.Месторасположение);
	//Запрос.УстановитьПараметр("МассивИсполнителей", МассивИсполнителей);
	Запрос.УстановитьПараметр("СметаЭтапаДоговора", ЭтапДоговора.Смета);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
   Выборка = РезультатЗапроса.Выбрать();
    
   Пока Выборка.Следующий() Цикл
	   Если Выборка.ОбъемРабот = 0 Тогда
		   Продолжить;
	   КонецЕсли; 
	   СтрокиИсп = ЗарплатаИсполнителей.НайтиСтроки(Новый Структура("Исполнитель", Выборка.Исполнитель));
	   
	   Если СтрокиИсп.Количество() = 0 Тогда
		   НоваяСтрока = ЗарплатаИсполнителей.Добавить();    
	   Иначе
	   	   НоваяСтрока = СтрокиИсп[0];
	   КонецЕсли; 
	   
	   ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	   НоваяСтрока.Коэффициент = 1;
	   НоваяСтрока.НомерАкта = НомерАктаДоРедактирования; //Элементы.Акты.ТекущиеДанные.НомерАкта;
	   Если НоваяСтрока.КТУ = 0 Тогда
		   НоваяСтрока.КТУ = 1;
	   КонецЕсли; 
	   
	   ПодразделениеЭтапа = ЭтапДоговора.Подразделение;
	   Если Выборка.Подразделение <> ПодразделениеЭтапа И ПолучитьРодителяПодразделения(Выборка.Подразделение) <> ПодразделениеЭтапа Тогда
		   НоваяСтрока.НеОсновноеПодразделение = Истина;
	   Иначе	
		   НоваяСтрока.НеОсновноеПодразделение = Ложь;
	   КонецЕсли;
	   
	   МассивИсполнителей.Добавить(Выборка.Исполнитель);
   КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечФормаДоговораНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборФайла(ПечФормаДоговора);
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПредыдущийАдресФайла = "";
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор); 
КонецПроцедуры	

&НаКлиенте
Процедура МенюВыбораСметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыборФайла(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоговор(Команда)
	ТекДанные = Элементы.Договоры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекДанные.Договор) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекДанные.Договор);
	ОткрытьФорму("Справочник.ВнутренниеДокументы.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не НоваяСтрока И Не ОтменаРедактирования Тогда
		Сообщить("Нельзя редактировать существующие строки!");
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоговор(Команда)
	ТекущийНомерДоговора = "";
	Если ВвестиСтроку(ТекущийНомерДоговора, "Введите номер договора") Тогда
		ТекущийНомерДоговора = ВРег(ТекущийНомерДоговора);
		Отбор = Новый Структура("НомерДоговора", ТекущийНомерДоговора);
		ИскСтрока = Договоры.НайтиСтроки(Отбор);
		Если ИскСтрока.Количество() > 0 Тогда
			Сообщить("Договор с номером "+ТекущийНомерДоговора+" уже есть в документе!");
			Элементы.Договоры.ТекущаяСтрока = ИскСтрока[0].ПолучитьИдентификатор();
		Иначе
			//ТС = Элементы.Договоры.ТекущиеДанные;
			
			СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(ТекущийНомерДоговора);
			
			ВыбЭлемент = Неопределено;
			Если СписокДоговоров.Количество() > 1 Тогда
				ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
			ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
				ВыбЭлемент = СписокДоговоров.Получить(0);
			КонецЕсли;
			
			Если ВыбЭлемент = Неопределено Тогда
				Сообщить("Договоров с номером похожим на "+ТекущийНомерДоговора+" нет!");
				Возврат;
			КонецЕсли;
			
			// повторить поиск, т.к. номер мог быть введен не полностью
			ВыбранныйДоговор = ВыбЭлемент.Значение;
			РеквДоговора = ПолучитьРеквизитыДоговора(ВыбранныйДоговор);
			
			Отбор = Новый Структура("НомерДоговора", РеквДоговора.РегистрационныйНомер);
			ИскСтрока = Договоры.НайтиСтроки(Отбор);
			Если ИскСтрока.Количество() > 0 Тогда
				Сообщить("Договор с номером "+РеквДоговора.РегистрационныйНомер+" уже есть в документе!");
				Элементы.Договоры.ТекущаяСтрока = ИскСтрока[0].ПолучитьИдентификатор();
			Иначе	
				
				ТС = Договоры.Добавить();
				ТС.Договор = ВыбранныйДоговор;
				
				СтрДог = Новый Структура; 
				ЗаполнитьДоговорыИЭтапы(ВыбранныйДоговор, СтрДог);
				ЗаполнитьЗначенияСвойств(ТС, СтрДог);

				//ЗаполнитьДоговор(ВыбранныйДоговор);
				
				ТС.НомерДоговора = РеквДоговора.РегистрационныйНомер;
				
				ТекущийДоговор = Тс.Договор;
				
				Если Не ЗначениеЗаполнено(Тс.Файл) Тогда
					Тс.Файл = мРаботаСДоговорами.ПолучитьФайлДоговора(ТекущийДоговор);
				КонецЕсли;
				ПечФормаДоговора = Тс.Файл;
				
				Если Не ЗначениеЗаполнено(Тс.СостояниеДоговора) Тогда
					Тс.СостояниеДоговора = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ТекущийДоговор);
				КонецЕсли;
				
				СостояниеДоговора = Тс.СостояниеДоговора;
				УстановитьФорматСостоянияДоговора();
				
				Элементы.Договоры.ТекущаяСтрока = ТС.ПолучитьИдентификатор();
				
				ПриИзмененииДоговора(ТС.Договор);
				
				//Если ЭтапыДоговоров.Количество() > 0 Тогда
				//    УстановитьАктивныйЭтапДоговора(ТекущийДоговор);
				//КонецЕсли; 
				
				// Включить отображение оплат
				//ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДоговор(Команда)
	ТекДанные = Элементы.Договоры.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Ответ = Вопрос("Удалить "+ТекДанные.Договор+" и очистить все связанные с ним данные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Отказ = Истина;
    	Возврат;
	КонецЕсли; 
	
    // вычистить все таблицы объекта от договора
    ОчиститьТаблицыПоДоговору();
    
    // вычистить экранные формы
    ЗарплатаИсполнителей.Очистить();
    Акты.Очистить();
    //ЭтапыДоговоров.Очистить();
	
	ТекущийЭтапДоговора = "";
	ТекущийДоговор = "";
    
    // Включить отображение оплат
    //ПодключитьОбработчикОжидания("ОбработкаОжидания",0.2,Истина); 
	
	Договоры.Удалить(ТекДанные);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроверкиПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Акт) Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура("Акт", ТекДанные.Акт);
	ИскСтроки = КешРезультатовПроверки.НайтиСтроки(Отбор);
	
	Если ИскСтроки.Количество() = 0 Тогда
		СтрокаКеш = КешРезультатовПроверки.Добавить();
		СтрокаКеш.Акт = ТекДанные.Акт;
		СтрокаКеш.Замечание = РезультатПроверки;
	Иначе
		ИскСтроки[0].Замечание = РезультатПроверки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция УпаковатьРезультатПроверки()
	Соот = Новый Соответствие;	
	Для каждого Стр Из КешРезультатовПроверки Цикл
		Соот.Вставить(Стр.Акт, Стр.Замечание);
	КонецЦикла;
	Возврат Соот;
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РезультатПроверки", УпаковатьРезультатПроверки());
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
    //Вставить содержимое обработчика
КонецПроцедуры
 

#КонецОбласти



