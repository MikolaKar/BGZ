
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.мАктирование.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗапасыСервер.ОтразитьУчетДоговоров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьНачислениеЗП(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОстаткиПроизводства(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьУчетПроизводства(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьУчетСмет(ДополнительныеСвойства, Движения, Отказ);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
    
	// Удаление дат договора
	мРаботаСДоговорами.УдалитьДатуДоговора(Ссылка, Отказ);
    
    ЗаписатьДатыВыполненияРабот(ДополнительныеСвойства, Отказ);
    
	ЗаписатьПлановыеСроки(Ссылка, Отказ);
	
	ЗаписатьИсполнителейВЭтапы(ДополнительныеСвойства, Отказ);
    
    ЗаписьИсполнителейЗаявки(ДополнительныеСвойства, Отказ);
	
	ЗаписатьДатуРегистрацииАктов(ДополнительныеСвойства, Отказ);
	
	ЗаписатьРезультатыПроверкиАктов(ДополнительныеСвойства, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
    
КонецПроцедуры

Процедура ЗаписатьПлановыеСроки(Ссылка, Отказ)

    // По этапам, следующим за актированными, если у них есть условие УчетДатыВыполненияПредыдущегоЭтапа
    //   необходимо рассчитать плановый срок
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	| мЭтапыДоговоров.Ссылка КАК ЭтапДоговора
	|ИЗ
	|   Документ.мАктирование.Акты КАК мАктированиеАкты
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|           ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мУсловияДоговоров.СрезПоследних(
	|                   ,
	|                   ЭтапДоговора В
	|                       (ВЫБРАТЬ
	|                           мЭтапыДоговоров.Ссылка КАК СледЭтап
	|                       ИЗ
	|                           Документ.мАктирование.Акты КАК мАктированиеАкты
	|                               ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|                               ПО
	|                                   мАктированиеАкты.Договор = мЭтапыДоговоров.Владелец
	|                       ГДЕ
	|                           мАктированиеАкты.Ссылка = &Ссылка
	|                           И мАктированиеАкты.Сумма > 0
	|                           И мАктированиеАкты.ЭтапДоговора.НомерЭтапа + 1 = мЭтапыДоговоров.НомерЭтапа)) КАК мУсловияДоговоровСрезПоследних
	|           ПО мЭтапыДоговоров.Ссылка = мУсловияДоговоровСрезПоследних.ЭтапДоговора
	|       ПО мАктированиеАкты.Договор = мЭтапыДоговоров.Владелец
	|ГДЕ
	|   мАктированиеАкты.Ссылка = &Ссылка
	|   И мАктированиеАкты.Сумма > 0
	|   И мАктированиеАкты.ЭтапДоговора.НомерЭтапа + 1 = мЭтапыДоговоров.НомерЭтапа
	|   И мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Определение этапов договоров для расчета и записи планового срока
	ЭтапыДляРасчетаПлановогоСрока = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЭтапДоговора");
	
	ПлановыеСрокиЭтапов = мРаботаСДоговорами.РассчитатьПлановыеСрокиЭтапов(ЭтапыДляРасчетаПлановогоСрока);
	
	ВидДатыДоговора = Справочники.мВидыДатДоговоров.ПлановыйСрок;
	Установил = Пользователи.ТекущийПользователь();
	
	НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Основание.Установить(Ссылка);
	НаборЗаписей.Отбор.ВидДатыДоговора.Установить(ВидДатыДоговора);
	
	Для каждого Стр Из ПлановыеСрокиЭтапов Цикл
		НовЗап = НаборЗаписей.Добавить();
		НовЗап.Период = Ссылка.Дата;
		НовЗап.ЭтапДоговора = Стр.ЭтапДоговора;
		НовЗап.ВидДатыДоговора = ВидДатыДоговора;
		НовЗап.Основание = Ссылка;
		НовЗап.Дата = Стр.ПлановыйСрок;
		НовЗап.Установил = Установил;
	КонецЦикла; 
	
	НаборЗаписей.Записать();
КонецПроцедуры

// Запись даты регистрации Акта
Процедура ЗаписатьДатуРегистрацииАктов(ДополнительныеСвойства, Отказ)
     
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДатыДоговоров;
	
	Для каждого СтрокаТаб Из Таблица Цикл
		Если Не СтрокаТаб.ЭтоФизЛицо Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаб.ДатаРегистрацииАкта <> СтрокаТаб.Дата Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.Акт) Тогда
				Акт = СтрокаТаб.Акт.ПолучитьОбъект();
			    Акт.ДатаРегистрации = СтрокаТаб.Дата;
				Акт.ОбменДанными.Загрузка = Истина;
				Попытка
					Акт.Записать();
				Исключение
				    Сообщить("Не удалось записать дату регистрации акта "+СтрокаТаб.НомерАкта+ "!
                   |" + ОписаниеОшибки());
					Отказ = Истина;
				КонецПопытки; 
			КонецЕсли; 
		КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры

// Запись даты выполнения работ
Процедура ЗаписатьДатыВыполненияРабот(ДополнительныеСвойства, Отказ)
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДатыДоговоров;
    НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Основание.Установить(Ссылка);
    НаборЗаписей.Загрузить(Таблица);
    НаборЗаписей.Записать();
КонецПроцедуры

// Запись исполнителей в Этапы договоров
Процедура ЗаписатьИсполнителейВЭтапы(ДополнительныеСвойства, Отказ)
	
	ДоговорГКИ = Справочники.ВидыВнутреннихДокументов.ДоговорГКИ;
    ТабИспЗП = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНачислениеЗП;
    ТабИспЭтапов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИсполнителейЭтапов;
	
	// Цикл по заактированным этапам
	ТаблицаУчетДоговоров = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями;
	ТаблицаУчетДоговоров.Свернуть("ЭтапДоговора, ВидДоговора",);
	
	Для каждого Стр Из ТаблицаУчетДоговоров Цикл
		// для накопления результатов
		НадоУдалить = Новый ТаблицаЗначений;
		НадоУдалить.Колонки.Добавить("Исполнитель");
		НадоУдалить.Колонки.Добавить("ОбъектРабот");
		НадоДобавить = Новый ТаблицаЗначений;
		НадоДобавить.Колонки.Добавить("Исполнитель");
		НадоДобавить.Колонки.Добавить("ОбъектРабот");
		
		ЭтоДоговорГКИ = Стр.ВидДоговора = ДоговорГКИ;
		
	    // таблицы для сравнения
        Отбор = Новый Структура("ЭтапДоговора", Стр.ЭтапДоговора);

		ИскСтрокиЗП = ТабИспЗП.НайтиСтроки(Отбор);
		ИскСтрокиЭт = ТабИспЭтапов.НайтиСтроки(Отбор);
		
		// варианты: 1) нет в обоих, 2)3) есть в одной, нет в другой, 4) есть в обоих
		КолСтрокЗП = ИскСтрокиЗП.Количество();
		КолСтрокЭт = ИскСтрокиЭт.Количество();
		
		Если КолСтрокЗП = 0 И КолСтрокЭт = 0  Тогда
			// ничего делать не надо
			Продолжить;
		
		ИначеЕсли КолСтрокЗП > 0 И КолСтрокЭт = 0  Тогда
			// надо добавлять в этап
			Этап = Стр.ЭтапДоговора.ПолучитьОбъект();
			Для каждого Эл Из ИскСтрокиЗП Цикл
				ОтборИсп = Новый Структура("Исполнитель", Эл.Исполнитель);
				ИскСтрИспЭт = Этап.Исполнители.НайтиСтроки(ОтборИсп);
				Если ИскСтрИспЭт.Количество() = 0 Тогда
					НовСтр = Этап.Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Эл);
					НовСтр.КТУ = 1;
				КонецЕсли; 
			КонецЦикла;
			
			Попытка
				Этап.Записать();
			Исключение
				Сообщить("Не удалось записать этап: "+Этап+" дог: "+Этап.Владелец);
				Отказ = Истина;
			КонецПопытки; 
			
		ИначеЕсли КолСтрокЗП = 0 И КолСтрокЭт > 0  Тогда
			// надо очищать этап
			Этап = Стр.ЭтапДоговора.ПолучитьОбъект();
		    Этап.Исполнители.Очистить();
			Попытка
				Этап.Записать();
			Исключение
				Сообщить("Не удалось записать этап: "+Этап+" дог: "+Этап.Владелец);
				Отказ = Истина;
			КонецПопытки; 
			
		Иначе
			// есть и там и там
			НадоЗаписатьЭтап = Ложь;
			
			// Проверка вхождения строк ЗП в Этапы
			Для каждого СтрЗП Из ИскСтрокиЗП Цикл
				Отбор.Вставить("Исполнитель", СтрЗП.Исполнитель);
				Если ЭтоДоговорГКИ Тогда
					Отбор.Вставить("ОбъектРабот", СтрЗП.ОбъектРабот);
				КонецЕсли;	
				
				// ищем среди строк исполнителей этапов
				ИскСтр = ТабИспЭтапов.НайтиСтроки(Отбор);
				ЕстьКол = ИскСтр.Количество();
				
				Если ЕстьКол = 0 Тогда
					// надо добавить в этап
					ДобСтр = НадоДобавить.Добавить();
					ЗаполнитьЗначенияСвойств(ДобСтр, СтрЗП);
					НадоЗаписатьЭтап = Истина;
				КонецЕсли; 
			КонецЦикла;
			
			//Проверка вхождения строк этапа в ЗП
			Для каждого СтрЭт Из ИскСтрокиЭт Цикл
				Отбор.Вставить("Исполнитель", СтрЭт.Исполнитель);
				Если ЭтоДоговорГКИ Тогда
					Отбор.Вставить("ОбъектРабот", СтрЭт.ОбъектРабот);
				КонецЕсли;
				
				// ищем среди строк исполнителей ЗП
				ИскСтр = ТабИспЗП.НайтиСтроки(Отбор);
				ЕстьКол = ИскСтр.Количество();
				
				Если ЕстьКол = 0 Тогда
					// надо удалить из этап
					ДобСтр = НадоУдалить.Добавить();
					ЗаполнитьЗначенияСвойств(ДобСтр, СтрЭт);
					НадоЗаписатьЭтап = Истина;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НадоЗаписатьЭтап Тогда
				Этап = Стр.ЭтапДоговора.ПолучитьОбъект();
				ТабИсп = Этап.Исполнители;
				
				// Удаление лишних
				Для каждого СтрУд Из НадоУдалить Цикл
					Отбор = Новый Структура; 
					Отбор.Вставить("Исполнитель", СтрУд.Исполнитель);
					Если ЭтоДоговорГКИ Тогда
						Отбор.Вставить("ОбъектРабот", СтрУд.ОбъектРабот);
					КонецЕсли;
					ИскСтрокиУд = ТабИсп.НайтиСтроки(Отбор);
				    Если ИскСтрокиУд.Количество() > 0 Тогда
						ТабИсп.Удалить(ИскСтрокиУд[0]);	
					КонецЕсли; 
				КонецЦикла; 
				
				// добавление
				Для каждого СтрДоб Из НадоДобавить Цикл
					НовСтр = ТабИсп.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрДоб);
					НовСтр.КТУ = 1;
				КонецЦикла; 
				
				Попытка
					Этап.Записать();
				Исключение
					Сообщить("Не удалось записать этап: "+Этап+" дог: "+Этап.Владелец);
					Отказ = Истина;
				КонецПопытки; 
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	//Если Сч = 1 Тогда
	//	// Если Подразделение исполнителя отличается от подразделения в этапе,
	//	//  надо изменить в этапе. Только для первого исполнителя в списке
	//	// это добавление первого исполнителя
	//	ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(ВыборкаИсп.Исполнитель);
	//	Если ПодразделениеИсполнителя <> ЭтапДоговора.Подразделение Тогда
	//		ЭтапДоговора.Подразделение = ПодразделениеИсполнителя;
	//	КонецЕсли; 
	//КонецЕсли; 
КонецПроцедуры

// Запись исполнителей в Этапы договоров
Процедура ЗаписатьИсполнителейВЭтапы_до(ДополнительныеСвойства, Отказ)
	
    // Запись исполнителей в Этапы договоров,
    ВыборкаИсполнителей = ДополнительныеСвойства.ТаблицыДляДвижений.ВыборкаИсполнителей;
    Выборка = ВыборкаИсполнителей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    ИсполнителиЭтапов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИсполнителейЭтапов;

	
    // Проверка надо ли записывать этап
	Пока Выборка.Следующий() Цикл
		
        НадоЗаписатьЭтап = Ложь;
        
        ИспЕсть = Новый Соответствие;
		
        Отбор = Новый Структура("ЭтапДоговора", Выборка.ЭтапДоговора);
		
		ИскСтроки = ИсполнителиЭтапов.НайтиСтроки(Отбор);
        Для каждого СтрИсп Из ИскСтроки Цикл
            ИспЕсть.Вставить(СтрИсп.Исполнитель, СтрИсп.Исполнитель);
        КонецЦикла; 
        
        ИспДобавленные = Новый Соответствие;
        
        ВыборкаИсп = Выборка.Выбрать();
        Пока ВыборкаИсп.Следующий() Цикл
            // Выборка по исполнителям    
            Если ИспЕсть.Получить(ВыборкаИсп.Исполнитель) = Неопределено Тогда
                // такого нет, возможно уже добавлен
                Если ИспДобавленные.Получить(ВыборкаИсп.Исполнитель) = Неопределено Тогда
                    // не добавлен - надо добавить
                    ИспДобавленные.Вставить(ВыборкаИсп.Исполнитель, ВыборкаИсп.Исполнитель);
                    НадоЗаписатьЭтап = Истина;
                КонецЕсли; 
            Иначе	
                // Есть в этапе
                ИспЕсть.Удалить(ВыборкаИсп.Исполнитель);
                // Считаем что добавлен, но записывать не надо
                Если ИспДобавленные.Получить(ВыборкаИсп.Исполнитель) = Неопределено Тогда
                    ИспДобавленные.Вставить(ВыборкаИсп.Исполнитель, ВыборкаИсп.Исполнитель);
                КонецЕсли; 
            КонецЕсли; 
        КонецЦикла; 
        
        Если НадоЗаписатьЭтап Тогда
            ВыборкаИсп.Сбросить();
			// Выборка по Этапу
			ЭтапДоговора = Выборка.ЭтапДоговора.ПолучитьОбъект();
			
			ЭтапДоговора.Исполнители.Очистить();
			ИспЕсть = Новый Соответствие;
			
			Сч = 0;
			
			//ВыборкаИсп = Выборка.Выбрать();
			Пока ВыборкаИсп.Следующий() Цикл
				// Выборка по исполнителям
				Если ИспЕсть.Получить(ВыборкаИсп.Исполнитель) = Неопределено Тогда
					// такого нет в этапе
					ИспЕсть.Вставить(ВыборкаИсп.Исполнитель, ВыборкаИсп.Исполнитель);
				Иначе	
					Продолжить;
				КонецЕсли; 
				//Если ИспДобавленные.Получить(ВыборкаИсп.Исполнитель) = Неопределено Тогда
				//     // такого нет в добавленных
				//     Продолжить;
				// КонецЕсли; 
				// 
				НовИсп = ЭтапДоговора.Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НовИсп, ВыборкаИсп);
				
				Сч = Сч+1;
				Если Сч = 1 Тогда
					// Если Подразделение исполнителя отличается от подразделения в этапе,
					//  надо изменить в этапе. Только для первого исполнителя в списке
					// это добавление первого исполнителя
					ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(ВыборкаИсп.Исполнитель);
					Если ПодразделениеИсполнителя <> ЭтапДоговора.Подразделение Тогда
						ЭтапДоговора.Подразделение = ПодразделениеИсполнителя;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			Попытка
				ЭтапДоговора.Записать();
			Исключение
				Сообщить("Не удалось записать Этап договора "+ЭтапДоговора.Код);
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
    КонецЦикла;
    
КонецПроцедуры

// Синхронизация ИсполнителейРабот и Исполнителей договоров
Процедура ЗаписьИсполнителейЗаявки(ДополнительныеСвойства, Отказ)
	
	Если Константы.М_Гродно.Получить() Тогда
		// Для Гродно записи нет
		Возврат;
	КонецЕсли; 
	
	ВыборкаИсполнителейПоДоговорам = ДополнительныеСвойства.ТаблицыДляДвижений.ВыборкаИсполнителейПоДоговорам;
	Выборка = ВыборкаИсполнителейПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТабДог = ВыборкаИсполнителейПоДоговорам.Выгрузить();
	ИскМассив = ТабДог.ВыгрузитьКолонку("Договор");
	ТзЗаявки = ПолучитьЗаявкиДоговоров(ИскМассив);
    
    // Получение исполнителей заявок
    МассивЗаявок = ТзЗаявки.ВыгрузитьКолонку("Заявка");
    ТзИсполнителей = ПолучитьИсполнителейЗаявок(МассивЗаявок);
    
    Пока Выборка.Следующий() Цикл
		// По договору
        
		Отбор = Новый Структура("Договор", Выборка.Договор);
		ИскСтроки = ТзЗаявки.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
            Продолжить;        
		КонецЕсли; 
		
		Заявка = ИскСтроки[0].Заявка;
        
		//Заявка = СвязиДокументов.ПолучитьСвязанныйДокумент(Выборка.Договор,
		//Справочники.ТипыСвязей.НаОснованииПоручения);
		//
		//Если Заявка = Неопределено Тогда
		//    Продолжить;        
		//КонецЕсли; 
        
        СписокИсполнителей = Новый СписокЗначений;
        
        Отбор = Новый Структура("Заявка", Заявка);
        ИскСтрИсп = ТзИсполнителей.НайтиСтроки(Отбор);
 		Если ИскСтрИсп.Количество() > 0 Тогда
            Для й=0 По ИскСтрИсп.Количество()-1 Цикл
                СписокИсполнителей.Добавить(ИскСтрИсп[й].Исполнитель);
            КонецЦикла; 
		КонецЕсли; 
        
        //СписокИсполнителей = мРаботаСДоговорами.ПолучитьИсполнителей(Заявка);
		СписокДобавленных = Новый СписокЗначений;
        
        ВыборкаИсп = Выборка.Выбрать();
		Пока ВыборкаИсп.Следующий() Цикл
			// По исполнителям
			
			// Поиск в существующих
            ЭлемСписка = СписокИсполнителей.НайтиПоЗначению(ВыборкаИсп.Исполнитель);
			Если ЭлемСписка = Неопределено Тогда
				
				// Поиск в добавленных
				ЭлемСписка = СписокДобавленных.НайтиПоЗначению(ВыборкаИсп.Исполнитель);
				Если ЭлемСписка = Неопределено Тогда
					
					Спр = Справочники.мИсполнителиРабот.СоздатьЭлемент();
					Спр.Владелец = Заявка;
					Спр.Пользователь = ВыборкаИсп.Исполнитель;
					Спр.Наименование = ВыборкаИсп.Исполнитель.ПредставлениеВДокументах;
					Спр.ОбменДанными.Загрузка = Истина;
					
					СписокДобавленных.Добавить(ВыборкаИсп.Исполнитель);
					Попытка
						Спр.Записать();
					Исключение
						Сообщить("Не удалось записать Исполнителя работ "+ВыборкаИсп.Исполнитель);
						Отказ = Истина;
					КонецПопытки;
				КонецЕсли;     
                
            Иначе
                // Исполнитель уже есть в справочнике - добавлять не надо, но из списка вычеркиваем
                СписокИсполнителей.Удалить(ЭлемСписка);
				// Считаем как добавленного
 				СписокДобавленных.Добавить(ВыборкаИсп.Исполнитель);
           КонецЕсли;     
        КонецЦикла;
        
        // Если в списке остались элементы, то надо Исполнителей пометить на удаление, как неиспользуемых
        Если СписокИсполнителей.Количество() > 0 Тогда
            Для каждого ЭлемСписка Из СписокИсполнителей Цикл
                мИсполнителиРабот = Справочники.мИсполнителиРабот;
                НайденнаяСсылка = мИсполнителиРабот.НайтиПоРеквизиту("Пользователь", ЭлемСписка.Значение, , Заявка);    
                Если Не НайденнаяСсылка = мИсполнителиРабот.ПустаяСсылка() Тогда
                    Исполнитель = НайденнаяСсылка.ПолучитьОбъект();
                    Исполнитель.ПометкаУдаления = Истина;
                    Исполнитель.ОбменДанными.Загрузка = Истина;
                   Попытка
                        Исполнитель.Записать();
                    Исключение
                        Сообщить("Не удалось пометить на удаление Исполнителя работ "+Исполнитель);
                        Отказ = Истина;
                    КонецПопытки;
                КонецЕсли;
            КонецЦикла; 
        КонецЕсли; 
    КонецЦикла;
КонецПроцедуры

Функция ПолучитьИсполнителейЗаявок(МассивЗаявок)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   мИсполнителиРабот.Владелец КАК Заявка,
        |   мИсполнителиРабот.Пользователь КАК Исполнитель
        |ИЗ
        |   Справочник.мИсполнителиРабот КАК мИсполнителиРабот
        |ГДЕ
        |   мИсполнителиРабот.Владелец В(&МассивЗаявок)
        |   И НЕ мИсполнителиРабот.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
    
    Результат = Запрос.Выполнить().Выгрузить();
    
    Возврат Результат;	

КонецФункции // ПолучитьИсполнителейЗаявок(МассивЗаявок)()
 
Функция ПолучитьЗаявкиДоговоров(ИскМассив)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиДокументов.СвязанныйДокумент КАК Заявка,
		|	СвязиДокументов.Документ КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ В(&ИскМассив)
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("ИскМассив", ИскМассив);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.НаОснованииПоручения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции // ПолучитьЗаявкиДоговоров()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Удаление даты договора
	мРаботаСДоговорами.УдалитьДатуДоговора(Ссылка, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.Акты.Очистить();
	ЭтотОбъект.Зарплата.Очистить();
КонецПроцедуры

Процедура ЗаписатьРезультатыПроверкиАктов(ДополнительныеСвойства, Отказ)
	Если ДополнительныеСвойства.Свойство("РезультатПроверки") Тогда
		Проверен = Справочники.мЗамечанияПроверкиАктов.Проверен;
		Соот = ДополнительныеСвойства.РезультатПроверки;
		Для каждого Стр Из Соот Цикл
			Если Стр.Значение = Проверен Тогда
				мРаботаСДоговорами.УдалитьЗамечаниеПроверкиАкта(Стр.Ключ);
			Иначе	
				мРаботаСДоговорами.ЗаписатьЗамечаниеПроверкиАкта(Стр.Ключ, Стр.Значение);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры
 
