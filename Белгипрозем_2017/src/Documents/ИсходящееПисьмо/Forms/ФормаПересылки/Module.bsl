////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Получаем переданный через параметр список пересылаемых писем
	ПересылаемыеПисьма.ЗагрузитьЗначения(Параметры.ПересылаемыеПисьма.ВыгрузитьЗначения());
	
	// Проверяем все ли учетные записи пересылаемых писем доступны для отправки
	// если все доступны, то поле "Учетная запись" не выводится
	ЗаписиДоступныДляОтправки = Истина;
	Для Каждого СтрокаСписка Из ПересылаемыеПисьма Цикл
		ПересылаемоеПисьмо = СтрокаСписка.Значение;
		Если Не ЗначениеЗаполнено(ПересылаемоеПисьмо.УчетнаяЗапись) 
		 Или ПересылаемоеПисьмо.УчетнаяЗапись.ОтветственныеЗаОбработкуПисем.Найти(ТекущийПользователь, "Пользователь") = Неопределено Тогда 
			ЗаписиДоступныДляОтправки = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЗаписиДоступныДляОтправки Тогда 
		Элементы.УчетнаяЗапись.Видимость = Ложь;
	Иначе
		Элементы.УчетнаяЗапись.Видимость = Истина;
		УчетнаяЗапись = ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки();
	КонецЕсли;	
	
	ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
	
	// вывод фотографий
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиПрограммы",
			"ОтображатьФотографииПерсональнаяНастройка",
			Истина);
	
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая
		Или ПриложениеЯвляетсяВебКлиентом Тогда
		ПолучатьФотографии = Ложь;
		Элементы.ГруппаСтраницыФотографии.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография);
	
	// Установка заголовка формы
	Автозаголовок = Ложь;
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пересылка писем (%1 шт)'"), 
		Формат(ПересылаемыеПисьма.Количество(), "ЧН=; ЧГ="));
	
	// Восстановление сохраненных списков выбора
	ИмяФормыДляХранилища = "Документ.ИсходящееПисьмо.Форма.ФормаДокумента";
	СписокВыбораКому = ХранилищеСистемныхНастроек.Загрузить(ИмяФормыДляХранилища, "ПолучателиПредставлениеКому");
	СписокВыбораКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормыДляХранилища, "ПолучателиПредставлениеКопия");
	СписокВыбораСкрытаяКопия = ХранилищеСистемныхНастроек.Загрузить(ИмяФормыДляХранилища, "ПолучателиПредставлениеСкрытаяКопия'");
	
	Если Получатели.Количество() = 0 Тогда
		Элементы.Получатели.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТекстПисьма.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	// Заполняем подпись по умолчанию
	Подпись = ПолучитьПодписьПриОтветеИПересылке();
	Если ЗначениеЗаполнено(Подпись) Тогда
		ТекстПисьма = Подпись;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмо(НовоеПисьмоОбъект, ЗначенияЗаполнения)
	
	Если Не ЗначенияЗаполнения.Свойство("Письмо") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение заполнения'");
	КонецЕсли;
	Письмо = ЗначенияЗаполнения.Письмо;
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письмо);
	
	СкопироватьВложения = Истина;
	Если СкопироватьВложения Тогда
		ВставитьФайлыИсходногоПисьмаСервер(Письмо, 
			НовоеПисьмоОбъект);
	КонецЕсли;
	
	ТекстИсходящегоПисьма = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
			Письмо,
			НовоеПисьмоОбъект.ТипТекста,
			НовоеПисьмоОбъект.Кодировка,
			НовоеПисьмоОбъект.ТипОтвета);
	
	НовоеПисьмоОбъект.ДополнительныеСвойства.ТекстПисьма = ТекстИсходящегоПисьма;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Получатели.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	Иначе
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТекст", 0.2, Истина);
	КонецЕсли;
	
	УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗаписиДоступныДляОтправки Тогда 
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указана учетная запись.
				|Рекомендуется в настройках почты установить учетную запись по умолчанию.'"),,
			"УчетнаяЗапись",,
			Отказ);
	КонецЕсли;
	КонецЕсли;
	
	МассивАдресатов = Новый Массив;
	
	Для каждого Получатель Из Получатели Цикл
		МассивАдресатов.Добавить(Получатель.Адресат);
	КонецЦикла;
	
	СписокУникальныхАдресов = Новый Массив;
	Для каждого Адресат Из МассивАдресатов Цикл
		
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Адресат, "Адрес");
		Если СписокУникальныхАдресов.Найти(Адрес) <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя отправить письмо. Почтовый адрес ""%1"" указан дважды.'"),
					Адрес),,
				"Получатели",,Отказ);
			
		КонецЕсли;
		
		Если Не РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Адрес) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя отправить письмо. Указан некорректный почтовый адрес получателя ""%1""'"),
					Адрес),,
				"Получатели",,Отказ);
			
		КонецЕсли;
		
		СписокУникальныхАдресов.Добавить(Адрес);
		
	КонецЦикла;
	
	Если СписокУникальныхАдресов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Необходимо указать хотя бы одного получателя.'"),,
				"Получатели",,Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКлиент()
	
	ОчиститьСообщения();
	
	#Если ВебКлиент Тогда
		Если ТекстПисьма <> Элементы.ТекстПисьма.ТекстРедактирования Тогда
			ТекстПисьма = Элементы.ТекстПисьма.ТекстРедактирования;
		КонецЕсли;
	#КонецЕсли
	
	Если ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов
		И Получатели.Количество() > 50 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание!
			|Письма будут пересланы %1 адресатам.
			|Вы уверены?'"),
			Строка(Получатели.Количество()));
		
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОтправитьКлиент", ЭтотОбъект);
		ОткрытьФорму(
			"Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Возврат;	
		
	КонецЕсли;
	
	ПродолжитьОтправитьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОтправитьКлиент(КодВозврата, Параметры) Экспорт

	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	БольшеНеЗадаватьЭтотВопрос = КодВозврата.БольшеНеЗадаватьЭтотВопрос;
	
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		
		ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов = Ложь;
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
			ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов);
		
	КонецЕсли;
		
	Если КодВозврата.Отправить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьОтправитьКлиент();

КонецПроцедуры	

&НаКлиенте
Процедура ПродолжитьОтправитьКлиент()
	
	Если ПереслатьНаСервере() Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Пересылка писем выполнена'"),,,
			БиблиотекаКартинок.Информация32);
		
		Оповестить("ПисьмаИзменены",, ЭтаФорма);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресатов(Команда)
	
	Элементы.Получатели.ДобавитьСтроку();
	ВыбратьИзАдреснойКниги();
	ОтменаРедактирования = Ложь;
	Элементы.Получатели.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзАдреснойКниги()
	
	ОчиститьСообщения();
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	МножественныйВыбор = Не ЗначениеЗаполнено(СтрокаДанных.Представление);
	
	СписокВыбранных = Новый СписокЗначений;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию", СтрокаДанных.ТипАдреса);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыОткрытия.Вставить("ТекущийКонтакт", СтрокаДанных.Контакт);
	
	// Открытие формы для редактирования списка адресатов
	ИмяОбщейФормы = "ОбщаяФорма.АдреснаяКнига";
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаДанных", СтрокаДанных);
	ДополнительныеПараметры.Вставить("МножественныйВыбор", МножественныйВыбор);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВыбратьИзАдреснойКниги", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	ОткрытьФорму(
		ИмяОбщейФормы, 
		ПараметрыОткрытия,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры	
	
&НаКлиенте
Процедура ЗавершениеВыбратьИзАдреснойКниги(Результат, Параметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Параметры.СтрокаДанных;
	МножественныйВыбор = Параметры.МножественныйВыбор;
	
	Модифицированность = Истина;
	
	// Заполнение адресатов
	Если Не МножественныйВыбор Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			СтрокаДанных.Адрес = Результат[0].Адрес;
			СтрокаДанных.Контакт = Результат[0].Контакт;
			СтрокаДанных.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(СтрокаДанных.Контакт),
				СтрокаДанных.Адрес);
			СтрокаДанных.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Результат[0].Адрес);			
		КонецЕсли;
		
	Иначе
		
		Индекс = 0;
		Для Индекс = 0 По Результат.Количество() - 1 Цикл
			Строка = Результат[Индекс];
			
			НоваяСтрока = Неопределено;
			Если Индекс = 0 Тогда
				НоваяСтрока = СтрокаДанных;
			Иначе
				НоваяСтрока = Получатели.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Представление = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
				Строка(Строка.Контакт),
				Строка.Адрес);
			
			НоваяСтрока.Адрес = Строка.Адрес;
			НоваяСтрока.Контакт = Строка.Контакт;
			НоваяСтрока.ТипАдреса = Строка.Группа;
			НоваяСтрока.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
				Строка.Адрес);			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичногоАдресата(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Элементы.Получатели.ТекущиеДанные.Адресат, "Адрес");
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
			
		АдресДляЗамены = Адрес;	
		
		ОткрытьФорму(
			"Справочник.ЛичныеАдресаты.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорреспондента(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Элементы.Получатели.ТекущиеДанные.Адресат, "Адрес");
		
		ПараметрыФормы = Новый Структура("Адрес, Представление", 
			Адрес,
			Представление);
			
		АдресДляЗамены = Адрес;
		
		ОткрытьФорму(
			"Справочник.Корреспонденты.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтактноеЛицо(Команда)
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено
		И Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеСоздатьКонтактноеЛицо", ЭтотОбъект);
		ОткрытьФорму(
			"Справочник.Корреспонденты.ФормаВыбора",,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;
		
КонецПроцедуры		

&НаКлиенте
Процедура ЗавершениеСоздатьКонтактноеЛицо(Корреспондент, Параметры) Экспорт

	Если ЗначениеЗаполнено(Корреспондент) Тогда
		
		Представление = ВстроеннаяПочтаКлиентСервер.ВыделитьПредставление(
			Элементы.Получатели.ТекущиеДанные.Представление);
		Адрес = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Элементы.Получатели.ТекущиеДанные.Адресат, 
			"Адрес");
		
		ПараметрыФормы = Новый Структура("Адрес, Представление, Корреспондент", 
			Адрес,
			Представление,
			Корреспондент);
			
		АдресДляЗамены = Адрес;
			
		ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ПОДМЕНЮ ВСТАВИТЬ

&НаКлиенте
Процедура ВставитьШаблонТекста(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВставитьШаблонТекста", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.ШаблоныТекстовПисем.Форма.ФормаВыбораШаблонаТекста",,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВставитьШаблонТекста(ШаблонТекста, Параметры) Экспорт

	Если ШаблонТекста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
		Элементы.ТекстПисьма.ВыделенныйТекст = Элементы.ТекстПисьма.ВыделенныйТекст + ШаблонТекста;
		ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьма;
	Иначе
		Элементы.ТекстПисьма.ВыделенныйТекст = ШаблонТекста;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекущуюДатуИВремя(Команда)
	
	ТекущаяДата = ПолучитьТекущуюДатуСеанса();
	Элементы.ТекстПисьма.ВыделенныйТекст = Элементы.ТекстПисьма.ВыделенныйТекст + Формат(ТекущаяДата, "ДЛФ=ДВ");
	Если ЭтаФорма.ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьма;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции


/////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ ПОЛУЧАТЕЛЕЙ

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
		
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Если Получатели.Количество() = Элементы.Получатели.ВыделенныеСтроки.Количество() Тогда
			
			Отказ = Истина;
			
			ЧислоУдаляемыхПолучателей = Получатели.Количество() - 1;
			
			Для Индекс = 0 По ЧислоУдаляемыхПолучателей - 1 Цикл
				Получатели.Удалить(ЧислоУдаляемыхПолучателей - Индекс);
			КонецЦикла;
			
			Если Получатели.Количество() = 1 Тогда
				Строка = Получатели[0];
				Строка.Адресат = "";
				Строка.Контакт = "";
				Строка.Представление = "";
			КонецЕсли;
			
			ТекущийПолучатель = Неопределено;
			ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	РежимДобавленияАдресата = Истина;
	
	Если Элементы.ПолучателиПредставление.ТолькоПросмотр Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.Контакт = Неопределено;
	СтрокаДанных.Адресат = Неопределено;
	СтрокаДанных.Адрес = "";

	НовыйТекст = Текст;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		ЭтоВебКлиент = Ложь;
		#Если ВебКлиент Тогда
			ЭтоВебКлиент = Истина;
		#КонецЕсли
		
		РезультатВыбора = Неопределено;
		ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, ЭтоВебКлиент);
		Если ДанныеВыбора.Количество() = 1 Тогда
			РезультатВыбора = ДанныеВыбора[0];
		ИначеЕсли ДанныеВыбора.Количество() > 1 Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("НовыйТекст", НовыйТекст);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЗавершениеПолучателиПредставлениеОкончаниеВводаТекста", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОписаниеОповещения, ДанныеВыбора, Элементы.Получатели);
			Возврат;
		КонецЕсли;
		
		Если РезультатВыбора <> Неопределено Тогда
			
			СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
			СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
			НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
			СтрокаДанных.Представление = НовыйТекст;
			СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
			Модифицированность = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжениеПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучателиПредставлениеОкончаниеВводаТекста(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		
		СтрокаДанных.Контакт = РезультатВыбора.Значение.Контакт;
		СтрокаДанных.Адресат = РезультатВыбора.Значение.Адресат;
		НовыйТекст = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат).Представление;
		СтрокаДанных.Представление = НовыйТекст;
		СтрокаДанных.Адрес = РезультатВыбора.Значение.Адрес;
		Модифицированность = Истина;
		Возврат;
		
	КонецЕсли;
	
	ПродолжениеПолучателиПредставлениеОкончаниеВводаТекста(Параметры.НовыйТекст);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПродолжениеПолучателиПредставлениеОкончаниеВводаТекста(НовыйТекст)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(НовыйТекст);
	
	Если ЗначениеЗаполнено(АдресИнфо.Адрес) Тогда
		ИмяАдресата = ?(ЗначениеЗаполнено(АдресИнфо.ОтображаемоеИмя), АдресИнфо.ОтображаемоеИмя, АдресИнфо.Адрес);
		СтрокаДанных.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресИнфо.Адрес, ИмяАдресата);
		ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(СтрокаДанных.Адресат);
		СтрокаДанных.Представление = ПредставлениеАдресата.Представление;
		СтрокаДанных.Контакт = ПредставлениеАдресата.Контакт;
		СтрокаДанных.Адрес = АдресИнфо.Адрес;
	Иначе
		СтрокаДанных.Представление = НовыйТекст;
	КонецЕсли;
	СтрокаДанных.РедактированиеЗавершено = Истина;
	
КонецПроцедуры	


&НаКлиенте
Процедура ПолучателиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.Адресат = ВыбранноеЗначение.Адресат;
		СтрокаДанных.Контакт = ВыбранноеЗначение.Контакт;
		СтрокаДанных.Представление = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Свойство("Адрес") Тогда
			СтрокаДанных.Адрес = ВыбранноеЗначение.Адрес;
		Иначе
			СтрокаДанных.Адрес = 
				ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаДанных.Адресат, "Адрес");
		КонецЕсли;
		СтрокаДанных.РедактированиеЗавершено = Истина;
		Модифицированность = Истина;
		
		ТекущийПолучатель = СтрокаДанных.Контакт;
		Если ЗначениеЗаполнено(ТекущийПолучатель) Тогда
			Если ПолучатьФотографии Тогда
				ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография);	
			КонецЕсли;	
		Иначе
			Фотография = "";
			ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница
				= ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Или СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ИмяЭлемента = Элемент.Имя;
	ТекстДляПолученияДанныхВыбора = "";
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ";");
	
	ПодстрокиДанныхОбъекта =
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДанных.Представление, ";");
	
	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1)
			Или ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	ЭтоВебКлиент = Ложь;
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ДанныеВыбора = ВстроеннаяПочтаСервер.ПолучитьДанныеВыбораДляЭлектронногоПисьма(Текст, ТекущийПользователь, ЭтоВебКлиент);
	
	Если ДанныеВыбора.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	Если ЗначениеЗаполнено(СтрокаДанных.Контакт) Тогда
		ПоказатьЗначение(,СтрокаДанных.Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИзАдреснойКниги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПредставлениеПриИзменении(Элемент)
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.РедактированиеЗавершено = Истина;
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломИзменения(Элемент, Отказ)
	
	АвтоматическиНачатоРедактированиеАдреса = Ложь;
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияАдресата Тогда
		Элемент.ТекущийЭлемент = Элементы.ПолучателиПредставление;
		РежимДобавленияАдресата = Ложь;
	КонецЕсли;
	
	СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
	СтрокаДанных.РедактированиеЗавершено = Ложь;
	КоличествоАдресатовДоДобавления = Получатели.Количество();
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");
		Иначе
			СтрокаДанных.ТипАдреса = НСтр("ru='Копия:'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.Получатели.ТекущаяСтрока <> Неопределено Тогда
		СтрокаДанных = Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
		СтрокаДанных.РедактированиеЗавершено = Истина;
	КонецЕсли;
	
	ВремяОкончанияРедактированияПолучателей = ТекущаяДата();
	
	Если АвтоматическиНачатоРедактированиеАдреса
		И ОтменаРедактирования
		И Получатели.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтроки(Элемент)
	
	ПолучателиПриАктивизацииСтрокиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриАктивизацииСтрокиВыполнить()
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		СохранениеДоступно = Не ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт)
			И ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Представление);
		УстановитьДоступностьКомандСохраненияКонтакта(СохранениеДоступно);
	Иначе
		УстановитьДоступностьКомандСохраненияКонтакта(Ложь);
	КонецЕсли;
	
	Если Элементы.Получатели.ТекущиеДанные <> Неопределено Тогда
		
		Контакт = Элементы.Получатели.ТекущиеДанные.Контакт;
		
		Если ТекущийПолучатель <> Контакт Тогда
			
			ТекущийПолучатель = Контакт;
			ПодключитьОбработчикОжидания("ОбновитьФотоПользователя", 0.2, Истина);
			
		КонецЕсли;
		
	Иначе
		
		Фотография = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСохраненияКонтакта(Доступность)
	
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьЛичногоАдресата.Доступность = Доступность;
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКорреспондента.Доступность = Доступность;
	 Элементы.ПолучателиПредставлениеКонтекстноеМенюСоздатьКонтактноеЛицо.Доступность = Доступность;
	 //Элементы.ФормаСоздатьЛичногоАдресата.Доступность = Доступность;
	 //Элементы.ФормаСоздатьКорреспондента.Доступность = Доступность;
	 //Элементы.ФормаСоздатьКонтактноеЛицо.Доступность = Доступность;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	// заполнение списка выбора адресатов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
		|	ИспользованиеАдресатовПользователями.Адресат,
		|	ЕСТЬNULL(СведенияОбАдресатах.Контакт, НЕОПРЕДЕЛЕНО) КАК Контакт,
		|	ЕСТЬNULL(СведенияОбАдресатах.Представление, АдресатыПочтовыхСообщений.Наименование) КАК Представление,
		|	АдресатыПочтовыхСообщений.Адрес,
		|	ЛичныеАдресаты.Пользователь
		|ИЗ
		|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений
		|		ПО ИспользованиеАдресатовПользователями.Адресат = АдресатыПочтовыхСообщений.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|			ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
		|		ПО ИспользованиеАдресатовПользователями.Адресат = СведенияОбАдресатах.АдресатСообщения
		|			И (СведенияОбАдресатах.Активна)
		|ГДЕ
		|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
		|	И (ЛичныеАдресаты.Пользователь ЕСТЬ NULL 
		|			ИЛИ ЛичныеАдресаты.Пользователь = &Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Элементы.ПолучателиПредставление.СписокВыбора.Очистить();
	Пока Выборка.Следующий() Цикл
		Значение = Новый Структура;
		Значение.Вставить("Адресат", Выборка.Адресат);
		Значение.Вставить("Адрес", Выборка.Адрес);		
		Значение.Вставить("Контакт", Выборка.Контакт);
		Значение.Вставить("Представление",  Выборка.Представление);
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			Элементы.ПолучателиПредставление.СписокВыбора.Добавить(Значение, Выборка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПолучателиПредставление.КнопкаВыпадающегоСписка =
		(Элементы.ПолучателиПредставление.СписокВыбора.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюПолучателиПисьмаСтрокой(Команда)
	
	ОчиститьИсториюВводаНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОТО ПОЛЬЗОВАТЕЛЯ

&НаКлиенте
Процедура ОбновитьФотоПользователя()
	
	Если Не ПолучатьФотографии Тогда
		Возврат;
	КонецЕсли;	
	
	ПоказатьФотоПользователя(ТекущийПолучатель, УникальныйИдентификатор, Фотография);	
		
КонецПроцедуры

&НаСервере
Процедура ПоказатьФотоПользователя(Контакт, УникальныйИдентификатор, Фотография)
	
	Если Не ПолучатьФотографии Тогда
		Возврат;
	КонецЕсли;	
	
	// фото пользователя
	Если ЭтоАдресВременногоХранилища(Фотография) Тогда
		УдалитьИзВременногоХранилища(Фотография);
	КонецЕсли;	
	
	Фотография = "";
	Если ЗначениеЗаполнено(Контакт) 
		И ТипЗнч(Контакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ЕстьКартинка = Ложь;
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Контакт, УникальныйИдентификатор, ЕстьКартинка);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фотография) Тогда
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
	Иначе	
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФотография;
	КонецЕсли;	
	
	// фото пользователя

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ФУНКЦИИ

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
	
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Получатели.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТекст()
	
	ТекущийЭлемент = Элементы.ТекстПисьма;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИсториюВводаНаСервере()
	
	НаборЗаписей = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Значение = ПользователиКлиентСервер.ТекущийПользователь();
	НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	
	НаборЗаписей.Записать();
	
	ЗаполнитьСписокВыбора();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫПОЛНЕНИЯ ПЕРЕСЫЛКИ

&НаСервере
Функция ПереслатьНаСервере() 

	НачатьТранзакцию();
	Попытка
	
		Для Каждого СтрокаСписка Из ПересылаемыеПисьма Цикл
			
			ИсходноеПисьмо = СтрокаСписка.Значение;
			
			// Создание исходящего письма на основании отправляемого
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Команда", "Переслать");
			ЗначенияЗаполнения.Вставить("Письмо", ИсходноеПисьмо);
			ОтправляемоеПисьмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
			ОтправляемоеПисьмо.Заполнить(ЗначенияЗаполнения);
			
			// Перенос вложений в отправляемое письмо 
			ТаблицаВложения = РеквизитФормыВЗначение("Вложения");
			ОтправляемоеПисьмо.ДополнительныеСвойства.Вставить("Вложения", ТаблицаВложения);
			ОтправляемоеПисьмо.ДополнительныеСвойства.Вставить("ТекстПисьма", "");
			ЗаполнитьНовоеПисьмо(ОтправляемоеПисьмо, ЗначенияЗаполнения); 
			
			// Замена учетной записи, если она указана вручную
			Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда 
				УчетнаяЗаписьПоУмолчанию = ВстроеннаяПочтаСервер.ПолучитьУчетнуюЗаписьДляОтправки();
				Если ОтправляемоеПисьмо.УчетнаяЗапись = УчетнаяЗаписьПоУмолчанию И ОтправляемоеПисьмо.УчетнаяЗапись <> УчетнаяЗапись Тогда 
					ОтправляемоеПисьмо.УчетнаяЗапись = УчетнаяЗапись;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ОтправляемоеПисьмо.УчетнаяЗапись) Тогда 
					ОтправляемоеПисьмо.УчетнаяЗапись = УчетнаяЗапись;
				КонецЕсли;
			КонецЕсли;
			
			// Замена подписи
			Подпись = ПолучитьПодписьПриОтветеИПересылке();
			ТекстОтправляемогоПисьма = ОтправляемоеПисьмо.ДополнительныеСвойства.ТекстПисьма;
			Если Лев(ТекстОтправляемогоПисьма, СтрДлина(Подпись)) = Подпись Тогда 
				Если ТекстПисьма <> Подпись Тогда 
					ТекстОтправляемогоПисьма = ТекстПисьма + Сред(ТекстОтправляемогоПисьма, СтрДлина(Подпись) + 1);
				КонецЕсли;	
			Иначе
				Если ЗначениеЗаполнено(ТекстПисьма) Тогда 
					Если Прав(ТекстПисьма, 1) = Символы.ПС Тогда
						ТекстОтправляемогоПисьма = ТекстПисьма + Символы.ПС + ТекстОтправляемогоПисьма;
					Иначе
						ТекстОтправляемогоПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + ТекстОтправляемогоПисьма;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			ОтправляемоеПисьмо.ДополнительныеСвойства.ТекстПисьма = ТекстОтправляемогоПисьма;	
			
			ОтправляемоеПисьмо.ПодготовленоКОтправке = ТекущаяДата();
			Отказ = Ложь;
			ПередЗаписьюПисьма(ОтправляемоеПисьмо, Отказ);
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			ОтправляемоеПисьмо.Записать();
			
			ЗаписатьВложения(ОтправляемоеПисьмо);
			РаботаСПрочтениями.УстановитьСвойствоПрочтен(ОтправляемоеПисьмо.Ссылка);
			
			СвязиДокументов.УстановитьСвязь(
				ОтправляемоеПисьмо.Ссылка,
				Неопределено,
				ИсходноеПисьмо,
				Справочники.ТипыСвязей.ПересылкаПисьма);
								
			ИдентификаторСеанса = Новый УникальныйИдентификатор;
			ПорядковыйНомерСобытия = 0;
				
			ВстроеннаяПочтаСервер.ЗаписатьПротоколДоставкиПочты(ОтправляемоеПисьмо.Ссылка, "", 
				Ложь, 
				Перечисления.ТипыСобытийДоставкиПочты.ИнтерактивнаяОтправкаПисьма,
				ОтправляемоеПисьмо.УчетнаяЗапись, ПорядковыйНомерСобытия, 
				ИдентификаторСеанса);
			
		КонецЦикла;	
		
		// Сохранение истории использования адресатов
		Если Получатели.Количество() <= 50 Тогда
			Для Каждого Строка Из Получатели Цикл
				Если ЗначениеЗаполнено(Строка.Адресат) Тогда
					МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Адресат = Строка.Адресат;
					МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
					МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьСписокВыбора();
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Групповая пересылка писем'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВставитьФайлыИсходногоПисьмаСервер(ИсходноеПисьмо, НовоеПисьмоОбъект)
	
	ТаблицаВложений = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ИсходноеПисьмо,
		Истина, // ФормироватьПредставлениеРазмера
		Ложь); // ВключатьПомеченныеНаУдаление
		
	Для Каждого ТаблицаВложенийСтрока Из ТаблицаВложений Цикл
		ВложенияСтрока = НовоеПисьмоОбъект.ДополнительныеСвойства.Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(
			ВложенияСтрока,
			ТаблицаВложенийСтрока,
			"Ссылка, ИмяФайла, Представление, ИндексКартинки, Размер, РазмерПредставление, ИДФайлаЭлектронногоПисьма");
		ВложенияСтрока.Расположение = "СсылкаНаФайл";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюПисьма(ТекущийОбъект, Отказ)
	
	ТекущийОбъект.ЕстьВложения = Ложь;
	Для каждого ВложенияСтрока Из ТекущийОбъект.ДополнительныеСвойства.Вложения Цикл
		Если Не ВложенияСтрока.ПометкаУдаления Тогда
			ТекущийОбъект.ЕстьВложения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПолучателиПисьма.Очистить();
	ТекущийОбъект.ПолучателиКопий.Очистить();
	ТекущийОбъект.ПолучателиСкрытыхКопий.Очистить();
	СчетчикСообщенийПользователю = 0;
	Для Счетчик = 0 По Получатели.Количество() - 1 Цикл
	
		Строка = Получатели[Счетчик];
		
		Если Не ЗначениеЗаполнено(Строка.Адресат) Тогда
			// Пытаемся получить адрес электронной почты.
			РазложенныйАдрес = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Строка.Представление);
				
			Если РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(РазложенныйАдрес.Адрес) Тогда
				Строка.Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(РазложенныйАдрес.Адрес, Строка.Представление);
			Иначе				
				Если СчетчикСообщенийПользователю < 20 Тогда
					// Если адрес так и не получилось выделить из строки, выводим сообщение в соответствующей строке таблицы.				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Некорректный адрес электронной почты ""%1""'"),
						Строка.Представление);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Получатели[" + Строка(Счетчик) + "].Представление",,
						Отказ);
					СчетчикСообщенийПользователю = СчетчикСообщенийПользователю + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.ТипАдреса = НСтр("ru='Кому:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиПисьма.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru='Копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиКопий.Добавить();
		КонецЕсли;
		Если Строка.ТипАдреса = НСтр("ru='Скрытая копия:'") Тогда
			НоваяСтрока = ТекущийОбъект.ПолучателиСкрытыхКопий.Добавить();
		КонецЕсли;
		НоваяСтрока.Адресат = Строка.Адресат;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(
			ТекущийОбъект.ПолучателиПисьма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения(ТекущийОбъект)
	
	Для каждого ВложениеСтрока Из ТекущийОбъект.ДополнительныеСвойства.Вложения Цикл
		
		Если ВложениеСтрока.Расположение = "СсылкаНаФайл" Тогда
			
			НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(ВложениеСтрока.Ссылка, ТекущийОбъект.Ссылка);
			Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(ВложениеСтрока.Ссылка.ТекущаяВерсия);
			Если ЗначениеЗаполнено(Кодировка) Тогда
				РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(НовыйФайл.ТекущаяВерсия, Кодировка);
			КонецЕсли;	
			
			Если Не ПустаяСтрока(ВложениеСтрока.ИДФайлаЭлектронногоПисьма) Тогда
				РегистрыСведений.ИдентификаторыПочтовыхВложений.УстановитьИдентификаторПочтовогоВложения(
					НовыйФайл, 
					ВложениеСтрока.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;
			
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			
			ВстроеннаяПочтаСервер.ДобавитьВложениеПисьмаИзВременногоХранилища(
				ТекущийОбъект.Ссылка, // Письмо
				ВложениеСтрока.Адрес, // АдресВременногоХранилища
				ВложениеСтрока.АдресИзвлеченногоТекста, // АдресВременногоХранилищаТекста
				ВложениеСтрока.Размер,
				ВложениеСтрока.ИмяФайла,
				ТекущаяДата(), // ВремяИзменения
				Неопределено); // Идентификатор - идентификатор картинки
				
			ВложениеСтрока.Расположение = "Файл";
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодписьПриОтветеИПересылке()
	
	ПодписьПриОтветеИПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
	
	Подпись = "";
	Если ТипЗнч(ПодписьПриОтветеИПересылке) = Тип("СправочникСсылка.ШаблоныТекстовПисем")
		И ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) Тогда
		
		Подпись = Справочники.ШаблоныТекстовПисем.ПолучитьТекстШаблона(ПодписьПриОтветеИПересылке);
		
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если Не ВебКлиент Тогда	
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографиюТекст", ЭтотОбъект);
		ВстроеннаяПочтаКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, ТекстПисьма);
	
	#КонецЕсли	
		
КонецПроцедуры

Процедура ЗавершениеПроверитьОрфографиюТекст(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		ТекстПисьма = Результат.ТекстПисьма;
	КонецЕсли;	
	
КонецПроцедуры