// УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ПолучитьЗначенияРеквизитов()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Папка, УчетнаяЗапись";
	
КонецФункции

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.УчетнаяЗаписьПочты = ОбъектДоступа.УчетнаяЗапись;
	ДескрипторПапки = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
		ОбъектДоступа.Папка);
	Если ЗначениеЗаполнено(ДескрипторПапки) Тогда
		ДескрипторДоступа.ДескрипторВладельца = ДескрипторПапки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, указывая тем самым что этот объект сам заполняет свои права
//
Функция ЕстьМетодЗаполнитьПраваДоступа() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа, вычисляя их на
// основании переданного дескриптора доступа.
// Если указан параметр ПротоколРасчетаПрав, то в него
// заносится список данных, которые были использованы для расчета прав.
Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	ВстроеннаяПочтаСервер.ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав);
	
КонецПроцедуры

// Вспомогательная функция для проверки наличия метода ЗаполнитьПраваДоступаДляФайлов()
//
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Конец УправлениеДоступом

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		Письмо = Параметры.Ключ;
		ПодготовленоКОтправке = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "ПодготовленоКОтправке");
		Если ЗначениеЗаполнено(ПодготовленоКОтправке) Тогда
			Попытка
				ПисьмоОбъект = Письмо.ПолучитьОбъект();
				ЗаблокироватьДанныеДляРедактирования(Письмо);
				ПисьмоОбъект.ПодготовленоКОтправке = Дата(1, 1, 1);
				ПисьмоОбъект.ОтправкаОтменена = Истина;
				ПисьмоОбъект.Записать();
				
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаДокумента";
				Параметры.Вставить("ОтправкаОтменена", Истина);
				
			Исключение
				// Письмо заблокировано другим пользователем или в данные момент отправляется,
				// поэтому обновлять реквизит ПодготовленоКОтправке не надо.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание")
		И ДелопроизводствоКлиентСервер.ЭтоКорреспондент(Параметры.Основание) Тогда
		СписокПочтовыхАдресов = ПолучитьСписокПочтовыхАдресовКорреспондента(Параметры.Основание);
		Если СписокПочтовыхАдресов.Количество() > 0 Тогда
			Параметры.Вставить("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
			Если СписокПочтовыхАдресов.Количество() > 1 Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаВыбораПочтовогоАдресаКорреспондента";
			Иначе
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаДокумента";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокПочтовыхАдресовКорреспондента(Корреспондент)
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорреспондентыКонтактнаяИнформация.Представление,
		|	КорреспондентыКонтактнаяИнформация.Ссылка,
		|	КорреспондентыКонтактнаяИнформация.Вид
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КорреспондентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)");
	Запрос.УстановитьПараметр("Ссылка", Корреспондент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			ПредставлениеАдреса = Выборка.Представление + ВКавычках(Выборка.Вид, "(", ")");
			СтруктураАдреса = Новый Структура("Адрес, Контакт, ОтображаемоеИмя");
			СтруктураАдреса.Адрес = Выборка.Представление;
			СтруктураАдреса.Контакт = Корреспондент;
			СтруктураАдреса.ОтображаемоеИмя = Строка(Корреспондент);
			Результат.Добавить(СтруктураАдреса, ПредставлениеАдреса, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст письма в виде HTML
Функция ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма) Экспорт
	
	ТекстHTML = "";
	
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить();
			
			Если ТекстHTML = Неопределено Тогда
				
				ТекстHTML = РеквизитыПисьма.ТекстХранилище.Получить();
				
				Если ТекстHTML = Неопределено Тогда
					
					ТекстHTML = "";
					
				Иначе
					
					РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
					
					РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
					
				КонецЕсли;
				
			Иначе
				
				РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		
		Если ТекстHTML = Неопределено Тогда
			
			ПростойТекст = РеквизитыПисьма.ТекстХранилище.Получить();
			
			Если ПростойТекст = Неопределено Тогда
				
				ТекстHTML = "";
				
			Иначе
				
				ТекстHTML = РаботаС_HTML.ПолучитьHTMLИзТекста(ПростойТекст, РеквизитыПисьма.Кодировка);
				
				РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Исходящее письмо'");
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Тема");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 от %2'"), Данные.Тема, Строка(Данные.Дата));
	
КонецПроцедуры
