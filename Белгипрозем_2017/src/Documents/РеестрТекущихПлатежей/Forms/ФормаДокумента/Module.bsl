&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузкаИзФайла = Ложь;
    Если Объект.Ссылка.Пустая() Тогда
        Объект.Ответственный = 	Пользователи.ТекущийПользователь();
		Объект.Организация = Константы.М_ОсновнаяОрганизация.Получить();
		Объект.НашБанковскийСчет = Объект.Организация.ОсновнойБанковскийСчет;
	Иначе
	    ЗаполнитьДоговоры();
    КонецЕсли; 
    
    ПодсчитатьНеРазнесено();
    
    // НаправлениеПлатежа по умолчанию
	Если Не ЗначениеЗаполнено(Объект.НаправлениеПлатежа) Тогда 
        Объект.НаправлениеПлатежа = Перечисления.М_НаправлениеПлатежа.Поступление;
    КонецЕсли; 
    
КонецПроцедуры

// Заполняет ТабЧасть Договоры на основании Объект.Этапы
&НаСервере
Процедура ЗаполнитьДоговоры()
    Договоры.Очистить();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	РеестрТекущихПлатежейЭтапы.Договор КАК Договор,
        |	РеестрТекущихПлатежейЭтапы.Договор.Корреспондент КАК Корреспондент,
        |	РеестрТекущихПлатежейЭтапы.Договор.Сумма КАК СметнаяСтоимость,
        |	РеестрТекущихПлатежейЭтапы.НомерПлатежногоДокумента КАК НомерПлатежногоДокумента,
        |	РеестрТекущихПлатежейЭтапы.НомерСтроки КАК НомерСтроки,
        |	РеестрТекущихПлатежейЭтапы.НомерСтрокиДоговора КАК НомерСтрокиДоговора,
        |	РеестрТекущихПлатежейЭтапы.ДатаПлатежногоДокумента,
        |	РеестрТекущихПлатежейЭтапы.СпособПлатежа КАК СпособПлатежа,
        |	РеестрТекущихПлатежейЭтапы.СуммаОплатыЭтапаДоговора КАК Оплата,
        |	РеестрТекущихПлатежейЭтапы.Договор.РегистрационныйНомер КАК НомерДоговора
        |ИЗ
        |	Документ.РеестрТекущихПлатежей.Этапы КАК РеестрТекущихПлатежейЭтапы
        |ГДЕ
        |	РеестрТекущихПлатежейЭтапы.Ссылка = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |	НомерСтрокиДоговора, НомерСтроки";

    Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

    Результат = Запрос.Выполнить().Выгрузить();
    
    Результат.Свернуть("Корреспондент, Договор, НомерПлатежногоДокумента, ДатаПлатежногоДокумента, НомерДоговора, СпособПлатежа, НомерСтрокиДоговора", "Оплата");
	
	НомерСтроки = 0;
    Для каждого Стр Из Результат Цикл
        НовСтр = Договоры.Добавить();
        ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла; 
	
	Если Договоры.Количество() > 0 Тогда
		ТекущийДоговор = Договоры[0].Договор;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ПодсчитатьНеРазнесено()
	НеРазнесено = Объект.СуммаПлатежей - Объект.Этапы.Итог("СуммаОплатыЭтапаДоговора");
КонецПроцедуры // ПодсчитатьНеРазнесено()

&НаСервере
Функция  СортировкаМассиваПузырькомПоПолю(МассивЭлементов,НаименованиеПоля) 
	// Количество просмотров массива - по количеству числа его элементов
	
	Для просмотр = 0 По МассивЭлементов.Количество()-1 Цикл
		// Собственно, просмотр массива
		МассивОтсортирован = Истина;
		Для индекс = 0 По МассивЭлементов.Количество()-2 Цикл
			// Сравнение элементов и их перестановка (если требуется)
			Если МассивЭлементов[индекс][НаименованиеПоля] > МассивЭлементов[индекс+1][НаименованиеПоля] Тогда
				СтаршийЭлемент = МассивЭлементов[индекс];
				МладшийЭлемент = МассивЭлементов[индекс+1];
				МассивЭлементов[индекс] = МладшийЭлемент;
				МассивЭлементов[индекс+1] = СтаршийЭлемент;
				МассивОтсортирован = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если МассивОтсортирован Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Возврат МассивЭлементов;
КонецФункции 

&НаСервере
Процедура РазнестиОплатуПоЭтапам(Договор, Сумма, НомерСтрокиДоговора)
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;

	ОсталосьРазнести = Число(Сумма);
    
    Отбор = Новый Структура("Договор, НомерСтрокиДоговора", Договор, НомерСтрокиДоговора); 
    
    ЭтапыДляРазнесения = СортировкаМассиваПузырькомПоПолю(Объект.Этапы.НайтиСтроки(Отбор), "НомерЭтапа");
    КоличествоЭтапов   = ЭтапыДляРазнесения.Количество();
    
    Если КоличествоЭтапов > 0 Тогда
        Сч = 0;
        Для каждого Этап Из ЭтапыДляРазнесения Цикл
            Сч = Сч + 1;
            Если Сч = КоличествоЭтапов Тогда
                // списание остатка
            	Этап.СуммаОплатыЭтапаДоговора = ОсталосьРазнести;
            Иначе
                // расчет списания
                НеОплачено = Этап.ЭтапДоговора.СтоимостьСНДС - Этап.ОплаченоРанее;
                Этап.СуммаОплатыЭтапаДоговора = Макс(0, Мин(ОсталосьРазнести, НеОплачено));
            КонецЕсли; 
            
            ОсталосьРазнести = ОсталосьРазнести - Этап.СуммаОплатыЭтапаДоговора;
        КонецЦикла; 
    КонецЕсли; 
	
КонецПроцедуры // РазнестиОплатуПоЭтапам()

&НаСервере
Процедура РазнестиВозвратПоЭтапам(Договор, Сумма, НомерСтрокиДоговора)
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;

	ОсталосьРазнести = Число(Сумма);
    
    Отбор = Новый Структура("Договор, НомерСтрокиДоговора", Договор, НомерСтрокиДоговора); 
    
    ЭтапыДляРазнесения = Объект.Этапы.НайтиСтроки(Отбор);
    
    КоличествоЭтапов = ЭтапыДляРазнесения.Количество();
    
    Если КоличествоЭтапов > 0 Тогда
        Сч = 0;
        Для каждого Этап Из ЭтапыДляРазнесения Цикл
            Сч = Сч + 1;
            Если Сч = КоличествоЭтапов Тогда
                // списание остатка
            	Этап.СуммаОплатыЭтапаДоговора = ОсталосьРазнести;
            Иначе
                // расчет списания
                МожноВернуть = Этап.ОплаченоРанее - Этап.Заактировано;
                Этап.СуммаОплатыЭтапаДоговора = Макс(0, Мин(ОсталосьРазнести, МожноВернуть));
            КонецЕсли; 
            
            ОсталосьРазнести = ОсталосьРазнести - Этап.СуммаОплатыЭтапаДоговора;
        КонецЦикла; 
    КонецЕсли; 
	
КонецПроцедуры // РазнестиВозвратПоЭтапам()

&НаСервере
Процедура ДобавитьЭтапыДоговора(СтруктураОплаты)
    ТаблицаЭтапов = СтруктураОплаты.Результат;
	Для каждого СтрТаб Из ТаблицаЭтапов Цикл
		СтрЭтап = Объект.Этапы.Добавить();
        ЗаполнитьЗначенияСвойств(СтрЭтап, СтрТаб);
		СтрЭтап.Договор = СтруктураОплаты.Договор;
		СтрЭтап.НомерПлатежногоДокумента = СтруктураОплаты.НомерПлатежногоДокумента;
		СтрЭтап.ДатаПлатежногоДокумента = СтруктураОплаты.ДатаПлатежногоДокумента;
		СтрЭтап.НомерСтрокиДоговора = СтруктураОплаты.НомерСтрокиДоговора;
		
		СтрЭтап.ОплаченоРанее = СтрЭтап.ОплаченоРанее + ПолучитьОплатуРанееПоДокументуПоЭтапу(СтрЭтап.ЭтапДоговора, СтрЭтап.НомерСтроки);
		
	КонецЦикла; 
КонецПроцедуры // ДобавитьЭтапыДоговора()

&НаСервере
Функция ПолучитьОплатуРанееПоДокументуПоЭтапу(ЭтапДоговора, НомерСтроки)
	ОплатаПоЭтапДоговора = 0;
	
	Для й = 1 По НомерСтроки-1 Цикл
		Если Объект.Этапы[й-1].ЭтапДоговора = ЭтапДоговора Тогда
			ОплатаПоЭтапДоговора = ОплатаПоЭтапДоговора + Объект.Этапы[й-1].СуммаОплатыЭтапаДоговора;
		КонецЕсли; 		
	КонецЦикла; 
	Возврат ОплатаПоЭтапДоговора;	
КонецФункции // ПолучитьОплатуРанееПоДокументу()

&НаКлиенте
Процедура ПоказатьЭтапыПоДоговоруТекущегоДокумента(МассивЭтапов="")
	
	СтруктураОтбор = Новый ФиксированнаяСтруктура("Договор, НомерСтрокиДоговора", "@#$*", "@#$*");
	ТекущиеДанные = Элементы.Договоры.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
		СтруктураЭтапов = Новый Структура(); 
		СтруктураЭтапов.Вставить("Договор", ТекущиеДанные.Договор); 
		СтруктураЭтапов.Вставить("НомерПлатежногоДокумента", ТекущиеДанные.НомерПлатежногоДокумента); 
		СтруктураЭтапов.Вставить("ДатаПлатежногоДокумента", ТекущиеДанные.ДатаПлатежногоДокумента); 
		СтруктураЭтапов.Вставить("НомерСтрокиДоговора", ТекущиеДанные.НомерСтрокиДоговора); 
		СтруктураЭтапов.Вставить("МассивЭтапов", МассивЭтапов); 
		
		Если МассивЭтапов <> "" Тогда
			ДобавитьНедостающиеЭтапы(СтруктураЭтапов);
		КонецЕсли; 
        
        // задаем фильтр
        Если ЗначениеЗаполнено(ТекущиеДанные.Договор) и ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиДоговора) Тогда
            СтруктураОтбор = Новый ФиксированнаяСтруктура("Договор, НомерСтрокиДоговора", 
                ТекущиеДанные.Договор, 
                ТекущиеДанные.НомерСтрокиДоговора);
        КонецЕсли;
    КонецЕсли; 
	
	Элементы.Этапы.ОтборСтрок = СтруктураОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНедостающиеЭтапы(СтруктураЭтапов)
	
    Договор = СтруктураЭтапов.Договор;
	НомерПлатежногоДокумента = СтруктураЭтапов.НомерПлатежногоДокумента;
	ДатаПлатежногоДокумента = СтруктураЭтапов.ДатаПлатежногоДокумента;
	НомерСтрокиДоговора = СтруктураЭтапов.НомерСтрокиДоговора;
	МассивЭтапов = СтруктураЭтапов.МассивЭтапов;
	
	Для каждого Стр Из МассивЭтапов Цикл
		
        НайденныеСтроки = Объект.Этапы.НайтиСтроки(Новый Структура("ЭтапДоговора, НомерПлатежногоДокумента", Стр.ЭтапДоговора, НомерПлатежногоДокумента));
        Если НайденныеСтроки.Количество() = 0 Тогда
            НоваяСтрока = Объект.Этапы.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
            
        	НоваяСтрока.Договор = Договор;
        	НоваяСтрока.НомерСтрокиДоговора = НомерСтрокиДоговора;
        	НоваяСтрока.НомерПлатежногоДокумента = НомерПлатежногоДокумента;
        	НоваяСтрока.ДатаПлатежногоДокумента = ДатаПлатежногоДокумента;
		Иначе
			// для существующих этапов запишем номер строки договора
			НайденныеСтроки[0].НомерСтрокиДоговора = НомерСтрокиДоговора;
			// и суммы
            НайденныеСтроки[0].Заактировано = Стр.Заактировано;
            НайденныеСтроки[0].ОплаченоРанееДругимиДокументами = Стр.ОплаченоРанееДругимиДокументами;
            НайденныеСтроки[0].Списано = Стр.Списано;
            НайденныеСтроки[0].СметнаяСтоимость = Стр.СметнаяСтоимость;
		КонецЕсли; 
		
		// Запоминаем новый номер строки договора для этапа
		Стр.Вставить("НомерСтрокиДоговора", НомерСтрокиДоговора);
		Стр.Вставить("НомерПлатежногоДокумента", НомерПлатежногоДокумента);
    КонецЦикла; 
    
    Объект.Этапы.Сортировать("НомерСтрокиДоговора, НомерЭтапа");
    
    ПосчитатьОплатыРанееПоЭтапам(МассивЭтапов);
    
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьОплатыРанееПоЭтапам(МассивЭтапов)
    Этапы = Объект.Этапы;
    Для каждого СтрЭтапа Из МассивЭтапов Цикл
        НайденныеСтроки = Этапы.НайтиСтроки(Новый Структура("ЭтапДоговора", СтрЭтапа.ЭтапДоговора));
        СтрокаДляЗаписи = Этапы.НайтиСтроки(Новый Структура("ЭтапДоговора, НомерСтрокиДоговора", СтрЭтапа.ЭтапДоговора, СтрЭтапа.НомерСтрокиДоговора));
        
        ОплаченоДругимиСтроками = 0;
        Если НайденныеСтроки.Количество() > 1 Тогда
            // в документе есть несколько платежей по одному и тому же этапу
            Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НомерПлатежногоДокумента <> СтрЭтапа.НомерПлатежногоДокумента 
					И НайденнаяСтрока.НомерСтрокиДоговора < СтрЭтапа.НомерСтрокиДоговора Тогда
                    ОплаченоДругимиСтроками = ОплаченоДругимиСтроками + НайденнаяСтрока.СуммаОплатыЭтапаДоговора;
                КонецЕсли; 
            КонецЦикла; 
        КонецЕсли; 
        
        СтрокаДляЗаписи[0].ОплаченоРанее = СтрЭтапа.ОплаченоРанееДругимиДокументами + ОплаченоДругимиСтроками;
    КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтапыПоДоговору(Договор, НомерСтрокиДоговора)
	Для й = -Объект.Этапы.Количество() + 1 По 0 Цикл
		Если Объект.Этапы[-й].Договор = Договор и Объект.Этапы[-й].НомерСтрокиДоговора = НомерСтрокиДоговора Тогда
			Объект.Этапы.Удалить(-й);
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры // УдалитьЭтапыПоДоговору()

&НаСервере
Процедура УдалитьЛишниеЭтапы(Договор, НомерСтрокиДоговора)
    
    Отбор = Новый Структура("Договор, НомерСтрокиДоговора", Договор, НомерСтрокиДоговора);
    НайденныеСтроки = Объект.Этапы.НайтиСтроки(Отбор);
    
    Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
        Объект.Этапы.Удалить(НайденнаяСтрока);
    КонецЦикла; 
    
КонецПроцедуры // УдалитьЛишниеЭтапы()

&НаКлиенте
Процедура ЭтапыСуммаОплатыЭтапаДоговораПриИзменении(Элемент)
	 ОтобразитьНеРазнесеноПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНеРазнесеноПоСтроке()
	
	ТекДанные = Элементы.Договоры.ТекущиеДанные;
    Отбор = Новый Структура("Договор, НомерСтрокиДоговора", ТекДанные.Договор, ТекДанные.НомерСтрокиДоговора);

	РазнесеноПоЭтапам = РазнесеноПоЭтапамИзОплатыДоговора(Отбор);
	
	Если РазнесеноПоЭтапам <> ТекДанные.Оплата Тогда
		Элементы.НеРазнесеноПоСтроке.Заголовок = "Строка "+ТекДанные.НомерСтрокиДоговора+". Не разнесено";
		Элементы.НеРазнесеноПоСтроке.Видимость = Истина;
		НеРазнесеноПоСтроке = ТекДанные.Оплата - РазнесеноПоЭтапам;
	Иначе	
		Элементы.НеРазнесеноПоСтроке.Заголовок = "";
		Элементы.НеРазнесеноПоСтроке.Видимость = Ложь;
		НеРазнесеноПоСтроке = 0;
	КонецЕсли; 
КонецПроцедуры // ОтобразитьНеРазнесеноПоСтроке()

&НаКлиенте
Функция РазнесеноПоЭтапамИзОплатыДоговора(Отбор)
	СтрокиЭтапов = Объект.Этапы.НайтиСтроки(Отбор);
	Разнесено = 0;
	Если СтрокиЭтапов.Количество() > 0 Тогда
		Для каждого Стр Из СтрокиЭтапов Цикл
			Разнесено = Разнесено + Стр.СуммаОплатыЭтапаДоговора;
		КонецЦикла; 
	КонецЕсли; 

    Возврат Разнесено;
КонецФункции // РазнесеноПоЭтапамИзОплатыДоговора()

&НаКлиенте
Процедура СтрокиРазнесеныПравильно(Отказ)
    Для каждого Стр Из Договоры Цикл
        Стр.Разнесено = 0;
    КонецЦикла; 
    
    Для каждого Стр Из Объект.Этапы Цикл
        Если Стр.СуммаОплатыЭтапаДоговора <> 0 Тогда
            Отбор = Новый Структура("НомерСтрокиДоговора", Стр.НомерСтрокиДоговора);
        	СтрДог = Договоры.НайтиСтроки(Отбор);
            СтрДог[0].Разнесено = СтрДог[0].Разнесено + Стр.СуммаОплатыЭтапаДоговора;
        КонецЕсли; 
    КонецЦикла; 
    
	Для каждого Стр Из Договоры Цикл
		Если Стр.Разнесено <> Стр.Оплата Тогда
			Отказ = Истина;
			
			Разница = Стр.Оплата - Стр.Разнесено;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка "+Стр.НомерСтрокиДоговора+". Не разнесено: " + Разница;
			ИндексСтроки = Стр.НомерСтрокиДоговора-1;
			Сообщение.Поле = "Договоры["+ИндексСтроки+"].Оплата";     
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры // СтрокиРазнесеныПравильно(Отказ)
 
&НаКлиенте
Процедура СостояниеРасчетов(Команда)
    ТекСтрока = Элементы.Договоры.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ПользовательскиеНастройки = ПолучитьПользовательскиеНастройки(ТекСтрока.Корреспондент);
		ПараметрыФормы = Новый Структура("СформироватьПриОткрытии, КлючВарианта, ПользовательскиеНастройки", 
		Истина, "Основной", ПользовательскиеНастройки);
	КонецЕсли; 
	ОткрытьФорму("Отчет.мСостояниеРасчетов.Форма", ПараметрыФормы, ,ТекСтрока.Корреспондент);	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользовательскиеНастройки(Корреспондент)
	мСостояниеРасчетов = Отчеты.мСостояниеРасчетов.Создать();
	СКД = мСостояниеРасчетов.СхемаКомпоновкиДанных;
	
	Настройки = СКД.НастройкиПоУмолчанию;
	
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Период.Использование = Истина;
	Период.Значение.ДатаОкончания = Объект.Дата;
	
	КонецПериода = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	КонецПериода.Значение = Объект.Дата;
	КонецПериода.Использование = Истина;
	
	_Корреспондент = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
	Новый ПараметрКомпоновкиДанных("Корреспондент"));
	_Корреспондент.Значение = Корреспондент;
	_Корреспондент.Использование = Истина;
	
	Возврат Настройки;
КонецФункции // ПолучитьФиксированныеНастройки()

&НаКлиенте
Процедура СуммаПлатежейПриИзменении(Элемент)
	ПодсчитатьНеРазнесено();
КонецПроцедуры

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ИзменитьНомерПлатежногоДокументаВЭтапах(Договор, НовыйНомер, НомерСтрокиДоговора)
    Если ЗначениеЗаполнено(ТекущийНомерПлатежногоДокумента) Тогда
        Если ТекущийНомерПлатежногоДокумента<>НовыйНомер Тогда
            Отбор = Новый Структура("Договор, НомерСтрокиДоговора", Договор, НомерСтрокиДоговора);
            Этапы = Объект.Этапы.НайтиСтроки(Отбор);
            Для каждого Этап Из Этапы Цикл
                
                Этап.НомерПлатежногоДокумента = НовыйНомер;
                
            КонецЦикла;  
            ТекущийНомерПлатежногоДокумента = НовыйНомер;
        КонецЕсли; 
    КонецЕсли; 
    
КонецПроцедуры // ИзменитьНомерПлатежногоДокументаВЭтапах()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПриАктивизацииСтроки(Элемент)
    Тс = Элементы.Договоры.ТекущиеДанные;
    Если Тс = Неопределено Тогда
        Возврат;
    КонецЕсли; 
    
	Если Не ЗначениеЗаполнено(Тс.Договор) Тогда
        // Это ввод новой строки договора
        ТекущийДоговор = "";
        
	Иначе 
		ОбновитьИнформациюПоДоговору(Тс);
     КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ОбновитьИнформациюПоДоговору(ТекСтрока)
	Если ТекущийДоговор <> ТекСтрока.Договор ИЛИ ТекущийНомерПлатежногоДокумента <> ТекСтрока.НомерПлатежногоДокумента  Тогда
		ТекущийДоговор = ТекСтрока.Договор;
		ТекущийНомерПлатежногоДокумента = ТекСтрока.НомерПлатежногоДокумента;
		
		// получим оплаты и заактировано по договору, без учета тек. документа
		СтруктураРезультата = ПолучитьОплаченоЗаактированоПоДоговору(ТекСтрока.Договор, Объект.Ссылка);
		
		// ... с учетом тек.документа
		ТекСтрока.ОплаченоРанее = СтруктураРезультата.ОплаченоРанееДругимиДокументами + ПолучитьОплатуРанееПоДокументуПоДоговору(ТекСтрока.Договор, ТекСтрока.НомерСтрокиДоговора);
		ТекСтрока.Заактировано = СтруктураРезультата.Заактировано;
		ТекСтрока.СметнаяСтоимость = СтруктураРезультата.СметнаяСтоимость;
		
		ПоказатьЭтапыПоДоговоруТекущегоДокумента(СтруктураРезультата.Этапы);
		ЭтапыСуммаОплатыЭтапаДоговораПриИзменении(Неопределено);
	КонецЕсли; 
КонецФункции

// Возвращается заполненная СтруктураРезультата по договору 
&НаСервере
Функция ПолучитьОплаченоЗаактированоПоДоговору(Договор, Регистратор)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
		|			ТОГДА ВЫРАЗИТЬ(ЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
		|		ИНАЧЕ ЭтапыДоговоров.СтоимостьСНДС
		|	КОНЕЦ КАК СметнаяСтоимость,
		|	ЭтапыДоговоров.НомерЭтапа КАК НомерЭтапа,
		|	ЭтапыДоговоров.Ссылка КАК ЭтапДоговора
		|ПОМЕСТИТЬ Этапы
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	ЭтапыДоговоров.Владелец = &Договор
		|	И НЕ ЭтапыДоговоров.ПометкаУдаления
		|	И ЭтапыДоговоров.ДатаИсключенИзДоговора = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) / 10000 КАК ЧИСЛО(17, 2))
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0)
		|		КОНЕЦ) КАК ОплаченоРанее,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			&НачПер,
		|			&КонПер,
		|			Регистратор,
		|			ЭтапДоговора В
		|				(ВЫБРАТЬ
		|					Этапы.ЭтапДоговора
		|				ИЗ
		|					Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
		|ГДЕ
		|	РасчетыСПокупателямиОбороты.Регистратор <> &Регистратор
		|	И РасчетыСПокупателямиОбороты.Регистратор.Дата < &ДатаРегистратора
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0) / 10000 КАК ЧИСЛО(17, 2))
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0)
		|		КОНЕЦ) КАК Списано,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|ПОМЕСТИТЬ Списания
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			&НачПер,
		|			&КонПер,
		|			Регистратор,
		|			ЭтапДоговора В
		|				(ВЫБРАТЬ
		|					Этапы.ЭтапДоговора
		|				ИЗ
		|					Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
		|ГДЕ
		|	РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.мСписаниеЗадолженности
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0) / 10000 КАК ЧИСЛО(17, 2))
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0)
		|		КОНЕЦ) КАК Заактировано,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			&НачПер,
		|			&КонПер,
		|			Регистратор,
		|			ЭтапДоговора В
		|				(ВЫБРАТЬ
		|					Этапы.ЭтапДоговора
		|				ИЗ
		|					Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
		|ГДЕ
		|	НЕ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.мСписаниеЗадолженности
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Этапы.СметнаяСтоимость,
		|	Этапы.НомерЭтапа,
		|	Этапы.ЭтапДоговора,
		|	ЕСТЬNULL(Оплаты.ОплаченоРанее, 0) КАК ОплаченоРанееДругимиДокументами,
		|	ЕСТЬNULL(Списания.Списано, 0) КАК Списано,
		|	ЕСТЬNULL(Акты.Заактировано, 0) КАК Заактировано
		|ИЗ
		|	Этапы КАК Этапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
		|		ПО Этапы.ЭтапДоговора = Оплаты.ЭтапДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Списания КАК Списания
		|		ПО Этапы.ЭтапДоговора = Списания.ЭтапДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ Акты КАК Акты
		|		ПО Этапы.ЭтапДоговора = Акты.ЭтапДоговора";

	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("НачПер", '00010101000000');
	Запрос.УстановитьПараметр("КонПер", ТекущаяДата());
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	ДатаРегистратора = ?(Регистратор.Дата = '00010101000000', ТекущаяДата(), Регистратор.Дата);
	Запрос.УстановитьПараметр("ДатаРегистратора", ДатаРегистратора);
    Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
    Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016,7,2));

	Результат = Запрос.Выполнить().Выгрузить();
	
    СтруктураРезультата = Новый Структура("ОплаченоРанееДругимиДокументами, Заактировано, СметнаяСтоимость, Этапы"); 
	
    Если Результат.Количество() > 0 Тогда
        СтруктураРезультата.ОплаченоРанееДругимиДокументами = Результат.Итог("ОплаченоРанееДругимиДокументами")-Результат.Итог("Списано");
        СтруктураРезультата.Заактировано = Результат.Итог("Заактировано");
        СтруктураРезультата.СметнаяСтоимость = Результат.Итог("СметнаяСтоимость");
		
		// в разрезе этапов
		МассивЭтапов = Новый Массив;
		Для каждого Стр Из Результат Цикл
		    СтруктураЭтапа = Новый Структура();
			СтруктураЭтапа.Вставить("ЭтапДоговора");
			СтруктураЭтапа.Вставить("НомерЭтапа");
			СтруктураЭтапа.Вставить("ОплаченоРанееДругимиДокументами");
			СтруктураЭтапа.Вставить("Заактировано");
			СтруктураЭтапа.Вставить("Списано");
			СтруктураЭтапа.Вставить("СметнаяСтоимость");
			ЗаполнитьЗначенияСвойств(СтруктураЭтапа, Стр);
			МассивЭтапов.Добавить(СтруктураЭтапа);
		КонецЦикла; 
		СтруктураРезультата.Вставить("Этапы", МассивЭтапов);
		
	КонецЕсли; 
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиенте
Процедура ДоговорыНомерДоговораПриИзменении(Элемент)
    ТС = Элементы.Договоры.ТекущиеДанные;
	
    // Получаем договор
	СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(ТС.НомерДоговора);
    
	ВыбЭлемент = Неопределено;
	Если СписокДоговоров.Количество() > 1 Тогда
		ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
	ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
		ВыбЭлемент = СписокДоговоров.Получить(0);
	КонецЕсли; 
	
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТС.Договор) Тогда
		Если ТС.Договор <> ВыбЭлемент.Значение Тогда
			// Выбран другой договор	
			УдалитьЭтапыПоДоговору(ТС.Договор, ТС.НомерСтрокиДоговора);
		КонецЕсли; 
	КонецЕсли; 
	
    ТС.Договор = ВыбЭлемент.Значение;
    
	ЗаполнитьДоговорЭтапы(ТС.Договор, ТС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоговорЭтапы(Договор, Знач ТС)
    
    Перем РеквДоговора, РеквСтроки;
    
	Если ЗначениеЗаполнено(ТС.Договор) Тогда
		Если ТС.Договор <> Договор Тогда
			// Выбран другой договор	
			УдалитьЭтапыПоДоговору(ТС.Договор, ТС.НомерСтрокиДоговора);
		КонецЕсли; 
	КонецЕсли; 
	
	РеквДоговора = ПолучитьРеквизитыДоговора(Договор);
    
    ТС.НомерДоговора = РеквДоговора.РегистрационныйНомер;
    ТС.Корреспондент = РеквДоговора.Корреспондент;
    ТС.Договор = Договор;
	ТекущийДоговор = Договор;
    
    РеквСтроки = ЗаполнитьСтрокуДоговора(Договор, ТС.НомерПлатежногоДокумента, ТС.ДатаПлатежногоДокумента, ТС.НомерСтрокиДоговора);
    
    ЗаполнитьЗначенияСвойств(ТС, РеквСтроки, , "СпособПлатежа");
	
	Если Не ЗначениеЗаполнено(ТС.СпособПлатежа) Тогда
		ТС.СпособПлатежа = РеквСтроки.СпособПлатежа;	
	КонецЕсли; 
    
    ПоказатьЭтапыПоДоговоруТекущегоДокумента();
	
	ОбновитьИнформациюПоДоговору(Тс);

	ДоговорыОплатаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыДоговорПриИзменении(Элемент)
	ТС = Элементы.Договоры.ТекущиеДанные;
	Если ТекущийДоговор <> ТС.Договор Тогда
		УдалитьЭтапыПоДоговору(ТекущийДоговор, ТС.НомерСтрокиДоговора);
		ТекущийДоговор = ТС.Договор; 
	КонецЕсли; 
	ЗаполнитьДоговорЭтапы(ТС.Договор, ТС);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДоговора(Договор)
    Рекв = Новый Структура;
    Рекв.Вставить("РегистрационныйНомер", Договор.РегистрационныйНомер);
    Рекв.Вставить("ДатаДоговора", Договор.ДатаРегистрации);
    Рекв.Вставить("СметнаяСтоимость", Договор.Сумма);
    Рекв.Вставить("Корреспондент", Договор.Корреспондент);
    
    Возврат Рекв;
КонецФункции // ПолучитьРеквизитыДоговора()

&НаКлиенте
Процедура ДоговорыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    ТекСтрока = Элементы.Договоры.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекСтрока.ДатаПлатежногоДокумента = Объект.Дата;
		ТекСтрока.НомерСтрокиДоговора = Договоры.Количество();
    КонецЕсли; 
    Если Копирование Тогда
        ТекСтрока.НомерПлатежногоДокумента = "";
        ТекущийНомерПлатежногоДокумента = "";
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыОплатаПриИзменении(Элемент)
    
    ТекДанные = Элементы.Договоры.ТекущиеДанные;
    
	Если ТекДанные <> Неопределено Тогда
		Если Объект.НаправлениеПлатежа = ПредопределенноеЗначение("Перечисление.М_НаправлениеПлатежа.Поступление")  Тогда
			РазнестиОплатуПоЭтапам(ТекДанные.Договор, ТекДанные.Оплата, ТекДанные.НомерСтрокиДоговора);
		Иначе
			РазнестиВозвратПоЭтапам(ТекДанные.Договор, ТекДанные.Оплата, ТекДанные.НомерСтрокиДоговора);
			ПроверитьСуммуВозврата(ТекДанные.Договор);
		КонецЕсли; 
		
		ПодсчитатьНеРазнесено();
		
		ОтобразитьНеРазнесеноПоСтроке();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПроверитьСуммуВозврата(Договор)
    Отбор = Новый Структура("Договор", Договор);
    НайденныеЭтапы = Объект.Этапы.НайтиСтроки(Отбор);
    Для каждого СтрЭтапа Из НайденныеЭтапы Цикл
    
    	МожноВернуть = СтрЭтапа.ОплаченоРанее - СтрЭтапа.Заактировано;
        
        Если МожноВернуть < СтрЭтапа.СуммаОплатыЭтапаДоговора Тогда
            Сообщить("По дог. "+Договор+" этап "+СтрЭтапа.ЭтапДоговора+" возвращаем ("+СтрЭтапа.СуммаОплатыЭтапаДоговора+") больше, чем можно ("+МожноВернуть+")!", СтатусСообщения.ОченьВажное);
        КонецЕсли; 
    КонецЦикла; 
КонецПроцедуры
 
&НаСервере
Функция ЗаполнитьСтрокуДоговора(Договор, НомерПлатежногоДокумента, ДатаПлатежногоДокумента, НомерСтрокиДоговора)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЭтапыДоговоров.Наименование КАК Наименование,
        |   ВЫБОР
        |       КОГДА ЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
        |           ТОГДА ЭтапыДоговоров.СтоимостьСНДС / 10000
        |       ИНАЧЕ ЭтапыДоговоров.СтоимостьСНДС
        |   КОНЕЦ КАК СметнаяСтоимость,
        |   ЭтапыДоговоров.НомерЭтапа КАК НомерЭтапа,
        |   ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |   ЭтапыДоговоров.Месторасположение КАК Месторасположение
        |ПОМЕСТИТЬ Этапы
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
        |ГДЕ
        |   ЭтапыДоговоров.Владелец = &Договор
        |   И НЕ ЭтапыДоговоров.ПометкаУдаления
        |   И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
        |;
        |
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|   СУММА(ВЫБОР
		//|           КОГДА УчетДоговоровОбороты.Период < &ДатаДеноминации
		//|               ТОГДА ЕСТЬNULL(УчетДоговоровОбороты.СуммаПриход, 0) / 10000
		//|           КОГДА УчетДоговоровОбороты.Период < &ДатаПослеДеноминации
		//|               ТОГДА 0
		//|           ИНАЧЕ ЕСТЬNULL(УчетДоговоровОбороты.СуммаПриход, 0)
		//|       КОНЕЦ) КАК СметнаяСтоимость,
		//|   УчетДоговоровОбороты.ЭтапДоговора
		//|ПОМЕСТИТЬ Стоимость
		//|ИЗ
		//|   РегистрНакопления.УчетДоговоров.Обороты(
		//|           &НачПер,
		//|           &КонПер,
		//|           Регистратор,
		//|           Договор = &Договор
		//|               И ЭтапДоговора В
		//|                   (ВЫБРАТЬ
		//|                       Этапы.ЭтапДоговора
		//|                   ИЗ
		//|                       Этапы КАК Этапы)) КАК УчетДоговоровОбороты
		//|
		//|СГРУППИРОВАТЬ ПО
		//|   УчетДоговоровОбороты.ЭтапДоговора
		//|;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВЫБОР
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
        |               ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) / 10000
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
        |               ТОГДА 0
        |           ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0)
        |       КОНЕЦ) КАК ОплаченоРанее,
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |ПОМЕСТИТЬ Оплаты
        |ИЗ
        |   РегистрНакопления.РасчетыСПокупателями.Обороты(
        |           &НачПер,
        |           &КонПер,
        |           Регистратор,
        |           Договор = &Договор
        |               И Корреспондент = &Корреспондент
        |               И ЭтапДоговора В
        |                   (ВЫБРАТЬ
        |                       Этапы.ЭтапДоговора
        |                   ИЗ
        |                       Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
        |ГДЕ
        |   РасчетыСПокупателямиОбороты.Регистратор.Дата < &ДатаРегистратора
        |
        |СГРУППИРОВАТЬ ПО
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВЫБОР
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
        |               ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0) / 10000
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
        |               ТОГДА 0
        |           ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаРасход, 0)
        |       КОНЕЦ) КАК Заактировано,
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |ПОМЕСТИТЬ Акты
        |ИЗ
        |   РегистрНакопления.РасчетыСПокупателями.Обороты(
        |           &НачПер,
        |           &КонПер,
        |           Регистратор,
        |           Договор = &Договор
        |               И ЭтапДоговора В
        |                   (ВЫБРАТЬ
        |                       Этапы.ЭтапДоговора
        |                   ИЗ
        |                       Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
        |
		|ГДЕ
		|	НЕ РасчетыСПокупателямиОбороты.Регистратор ССЫЛКА Документ.мСписаниеЗадолженности
		|
        |СГРУППИРОВАТЬ ПО
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Этапы.Наименование,
        |   Этапы.НомерЭтапа,
        |   Этапы.ЭтапДоговора,
        |   Этапы.Месторасположение,
        |   ЕСТЬNULL(Оплаты.ОплаченоРанее, 0) КАК ОплаченоРанее,
        |   ЕСТЬNULL(Акты.Заактировано, 0) КАК Заактировано,
        |   ЕСТЬNULL(Этапы.СметнаяСтоимость, 0) КАК СметнаяСтоимость
		//|   ЕСТЬNULL(Стоимость.СметнаяСтоимость, Этапы.СметнаяСтоимость) КАК СметнаяСтоимость
        |ИЗ
        |   Этапы КАК Этапы
		//|       ЛЕВОЕ СОЕДИНЕНИЕ Стоимость КАК Стоимость
		//|       ПО Этапы.ЭтапДоговора = Стоимость.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
        |       ПО Этапы.ЭтапДоговора = Оплаты.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Акты КАК Акты
        |       ПО Этапы.ЭтапДоговора = Акты.ЭтапДоговора";

	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Корреспондент", Договор.Корреспондент);
	Запрос.УстановитьПараметр("НачПер", '00010101000000');
	Запрос.УстановитьПараметр("КонПер", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	Запрос.УстановитьПараметр("ДатаРегистратора", Объект.Дата);

	Результат = Запрос.Выполнить().Выгрузить();
	
    РеквСтроки = Новый Структура();
    РеквСтроки.Вставить("Корреспондент", Договор.Корреспондент);
    ЮрФизЛицо = Договор.Корреспондент.ЮрФизЛицо;
    Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
        РеквСтроки.Вставить("СпособПлатежа", Справочники.мСпособыПлатежей.КассаБанка);
    Иначе
        РеквСтроки.Вставить("СпособПлатежа", Справочники.мСпособыПлатежей.РасчетныйСчет);
    КонецЕсли; 
    РеквСтроки.Вставить("НомерДоговора", Договор.РегистрационныйНомер);
    РеквСтроки.Вставить("СметнаяСтоимость", 0);
    РеквСтроки.Вставить("СуммаОплатыДоговора", 0);
    РеквСтроки.Вставить("ОплаченоРанее", Результат.Итог("ОплаченоРанее"));
    РеквСтроки.Вставить("Заактировано", 0);
    РеквСтроки.Вставить("НомерСтрокиДоговора", НомерСтрокиДоговора);
    РеквСтроки.Вставить("Месторасположение", Неопределено);   
    
    Если Результат.Количество() > 0 Тогда
        
        // Проверим были ли уже платежи в текущем документе по этому договору, 
        //  если были, то учтем их
		
		ОплатаРанееВДоке = ПолучитьОплатуРанееПоДокументуПоДоговору(Договор, НомерСтрокиДоговора);
		
		ОплаченоРанее = Результат.Итог("ОплаченоРанее") + ОплатаРанееВДоке;
        
        СтруктураОплаты = Новый Структура();
        
        СтруктураОплаты.Вставить("Результат", Результат);
        СтруктураОплаты.Вставить("Договор", Договор);
        СтруктураОплаты.Вставить("НомерПлатежногоДокумента", НомерПлатежногоДокумента);
        СтруктураОплаты.Вставить("ДатаПлатежногоДокумента", ДатаПлатежногоДокумента);
        СтруктураОплаты.Вставить("ОплаченоРанееПоДоговору", ОплаченоРанее);
	    СтруктураОплаты.Вставить("НомерСтрокиДоговора", НомерСтрокиДоговора);
             
		РеквСтроки = Новый Структура();
		РеквСтроки.Вставить("Корреспондент", Договор.Корреспондент);
        ЮрФизЛицо = Договор.Корреспондент.ЮрФизЛицо;
        Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		    РеквСтроки.Вставить("СпособПлатежа", Справочники.мСпособыПлатежей.КассаБанка);
        Иначе
		    РеквСтроки.Вставить("СпособПлатежа", Справочники.мСпособыПлатежей.РасчетныйСчет);
        КонецЕсли; 
		РеквСтроки.Вставить("НомерДоговора", Договор.РегистрационныйНомер);
		РеквСтроки.Вставить("СметнаяСтоимость", Результат.Итог("СметнаяСтоимость"));
		Если Объект.НаправлениеПлатежа = ПредопределенноеЗначение("Перечисление.М_НаправлениеПлатежа.Поступление")  Тогда
    		РеквСтроки.Вставить("Оплата", Результат.Итог("СметнаяСтоимость") - ОплаченоРанее);
		Иначе
			РеквСтроки.Вставить("Оплата", Макс(Результат.Итог("ОплаченоРанее") - Результат.Итог("Заактировано"), 0));
		КонецЕсли; 
		РеквСтроки.Вставить("ОплаченоРанее", ОплаченоРанее);
		РеквСтроки.Вставить("Заактировано", Результат.Итог("Заактировано"));
		РеквСтроки.Вставить("Месторасположение", Результат[0].Месторасположение);
		РеквСтроки.Вставить("НомерСтрокиДоговора", НомерСтрокиДоговора);
        
		// Обновляем/добавляем этапы договора
		УдалитьЭтапыПоДоговору(Договор, НомерСтрокиДоговора);
		ДобавитьЭтапыДоговора(СтруктураОплаты);
		Модифицированность = Истина;
    КонецЕсли; 
    Возврат РеквСтроки;
КонецФункции //ЗаполнитьСтрокуДоговора()

&НаСервере
Функция ПолучитьОплатуРанееПоДокументуПоДоговору(Договор, НомерСтрокиДоговора)
	ОплатаПоДоговору = 0;
	
	Для й = 1 По НомерСтрокиДоговора-1 Цикл
		Если Договоры[й-1].Договор = Договор Тогда
			ОплатаПоДоговору = ОплатаПоДоговору + Договоры[й-1].Оплата;
		КонецЕсли; 		
	КонецЦикла; 
	Возврат ОплатаПоДоговору;	
КонецФункции // ПолучитьОплатуРанееПоДокументу()
 
&НаКлиенте
Процедура ДоговорыНомерПлатежногоДокументаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Договоры.ТекущиеДанные;
    Договор = ТекущиеДанные.Договор;
    НомерСтрокиДоговора = ТекущиеДанные.НомерСтрокиДоговора;
    Если ЗначениеЗаполнено(Договор) Тогда
        // Это изменение номера платежки - надо изменить его в этапах
        ИзменитьНомерПлатежногоДокументаВЭтапах(Договор, Элемент.ТекстРедактирования, НомерСтрокиДоговора);
        ПоказатьЭтапыПоДоговоруТекущегоДокумента();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтапыБезОплаты()
    й = Объект.Этапы.Количество();
    Пока й > 0 Цикл
        ТекСтрока = Объект.Этапы[й-1];
        Если ТекСтрока.СуммаОплатыЭтапаДоговора = 0 Тогда
            Объект.Этапы.Удалить(ТекСтрока);
        КонецЕсли; 
    	й = й - 1;
    КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	СтрокиРазнесеныПравильно(Отказ);
	УдалитьЭтапыБезОплаты();
    ЗаполнитьСпособыПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыКорреспондентПриИзменении(Элемент)
	ТС = Элементы.Договоры.ТекущиеДанные;
	НомерПлатежногоДокумента = ТС.НомерПлатежногоДокумента;
	
	СписокДоговоров = ПолучитьСписокДоговоровПоКорреспонденту(ТС.Корреспондент);
	
	ВыбЭлемент = Неопределено;
	Если СписокДоговоров.Количество() > 1 Тогда
		ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
	ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
		ВыбЭлемент = СписокДоговоров.Получить(0);
	КонецЕсли; 
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ЗаполнитьДоговорЭтапы(ВыбЭлемент.Значение, ТС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоговоровПоКорреспонденту(Корреспондент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВнутренниеДокументы.Ссылка КАК Договор,
        |   ВнутренниеДокументы.Корреспондент,
        |   ВнутренниеДокументы.ДатаРегистрации КАК ДатаРегистрации,
        |   ВнутренниеДокументы.РегистрационныйНомер
        |ИЗ
        |   Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
        |ГДЕ
        |   ВнутренниеДокументы.Корреспондент = &Корреспондент
        |   И ВнутренниеДокументы.ВидДокумента В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот))
        |
        |СГРУППИРОВАТЬ ПО
        |   ВнутренниеДокументы.Ссылка,
        |   ВнутренниеДокументы.Корреспондент,
        |   ВнутренниеДокументы.ДатаРегистрации,
        |   ВнутренниеДокументы.РегистрационныйНомер
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаРегистрации УБЫВ";

	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.УстановитьПараметр("НачПер", '00010101000000');
	Запрос.УстановитьПараметр("КонПер", ТекущаяДата());

	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокДоговоров = Новый СписокЗначений;
	
	Для каждого Строка Из Результат Цикл
	
		Представление = "" + Формат(Строка.ДатаРегистрации, "ДЛФ=D") + " Рег. № " + Строка.РегистрационныйНомер;
		Значение = Строка.Договор;
		СписокДоговоров.Добавить(Значение, Представление);
	КонецЦикла; 
	
	Возврат СписокДоговоров;
	
КонецФункции // ПолучитьСписокДоговоровПоКорреспонденту()

&НаКлиенте
Процедура ДоговорыПередУдалением(Элемент, Отказ)
    ТС = Элементы.Договоры.ТекущиеДанные;
    Если Не Отказ Тогда
    	УдалитьЛишниеЭтапы(ТС.Договор, ТС.НомерСтрокиДоговора);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособыПлатежа()
    Для каждого СтрДоговора Из Договоры Цикл
        Если ЗначениеЗаполнено(СтрДоговора.СпособПлатежа) Тогда
            Отбор = Новый Структура("Договор, НомерСтрокиДоговора", СтрДоговора.Договор, СтрДоговора.НомерСтрокиДоговора); 
            
			ЭтапыДляЗаполнения = Объект.Этапы.НайтиСтроки(Отбор);
			
			Для каждого Этап Из ЭтапыДляЗаполнения Цикл
				Этап.СпособПлатежа = СтрДоговора.СпособПлатежа;
			КонецЦикла; 
			//ЗаполнитьСпособыПлатежаНаСервере(Отбор, СтрДоговора.СпособПлатежа);
        КонецЕсли; 
    КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпособыПлатежаНаСервере(Отбор, СпособПлатежа)
    
    ЭтапыДляЗаполнения = Объект.Этапы.НайтиСтроки(Отбор);
    
    Для каждого Этап Из ЭтапыДляЗаполнения Цикл
        Этап.СпособПлатежа = СпособПлатежа;
    КонецЦикла; 
КонецПроцедуры //ЗаполнитьСпособыПлатежаНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//Документы.РеестрТекущихПлатежей.РассчитатьЗаписатьПлановыйСрок(ТекущийОбъект, ТекущийОбъект.ДополнительныеСвойства); 
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПослеУдаления(Элемент)
	ПеренумероватьСтроки();
	ТекущийДоговор = "";
	ТекущийНомерПлатежногоДокумента = "";
	
	// Обновить инфу по договору
	ДоговорыПриАктивизацииСтроки(Элемент);
	Модифицированность = Истина;
 КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСтроки()
	НомерСтроки = 0;
	Для каждого Стр Из Договоры Цикл
		
		// Найти этапы с тек номером строки
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(Новый Структура("Договор, НомерСтрокиДоговора", Стр.Договор, Стр.НомерСтрокиДоговора));
		
		// получение нового номера
		НомерСтроки = НомерСтроки + 1;
		Стр.НомерСтрокиДоговора = НомерСтроки;
		
		// Запись нового номера в этапы
		Для каждого СтрЭтапа Из НайденныеСтроки Цикл
			СтрЭтапа.НомерСтрокиДоговора = НомерСтроки;
		КонецЦикла; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
 Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	 Если ИмяСобытия = "Файл ЕРИП прочитан" Тогда
		 ЗагрузкаИзФайла = Истина;
	 	 РазнестиПлатежи(Параметр);
	 КонецЕсли; 
 КонецПроцедуры
  
// Выполняет разноску платежей, полученных из ЕРИП
//
// Параметры:
//  <МассивПлатежей>  - <Массив> - Структура 
//  "НомерСообщения", 
//  "НомерПлатежа", 
//  "ДатаПлатежа", 
//  "НомерЗаписи", 
//  "НомерДоговора", 
//  "ФИО", 
//  "Адрес", 
//  "СуммаОплаты", Число
//  "СпособПлатежа"
//  "ИмяФайла"
&НаКлиенте
Процедура РазнестиПлатежи(МассивПлатежей)
	
	// Проверка даты
	Если МассивПлатежей.Количество() > 0 Тогда
		ДатаПлатежа = НачалоДня(МассивПлатежей[0].ДатаПлатежа);
		Если ДатаПлатежа <> НачалоДня(Объект.Дата) Тогда
			Сообщить("Дата документа "+Формат(НачалоДня(Объект.Дата), "ДФ=dd.MM.yyyy")+" не совпадает с датой оплат "+Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy")+".");
			Возврат;
		КонецЕсли; 
	Иначе
		Сообщить("Отсутствуют платежи для разноски!");
		Возврат;
	КонецЕсли; 
	
	// Исключение повторной загрузки
	НомерПлатежа = СокрЛП(МассивПлатежей[0].НомерПлатежа);
	ДлинаНомераПлатежа = СтрДлина(НомерПлатежа);
	ОтветБыл = Ложь;
	БылоУдалениеСтрок = Ложь;
	
    й = Договоры.Количество();
    Пока й > 0 Цикл
        ТекСтрока = Договоры[й-1];
		Если Лев(ТекСтрока.НомерПлатежногоДокумента, ДлинаНомераПлатежа) = НомерПлатежа Тогда
			Если Не ОтветБыл Тогда
				Ответ = Вопрос("Данные уже загружались! Повторить загрузку?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет); 		
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли; 
			
				ОтветБыл = Истина;
			КонецЕсли; 
		    Договоры.Удалить(ТекСтрока);
			БылоУдалениеСтрок = Истина;
		КонецЕсли; 	
		
    	й = й - 1;
	КонецЦикла; 
	
	Если БылоУдалениеСтрок Тогда
		ПеренумероватьСтроки();	
	КонецЕсли; 
	
	// Способ платежа 
	Если МассивПлатежей[0].СпособПлатежа = "Касса банка" Тогда	
		СпособПлатежа = ПредопределенноеЗначение("Справочник.мСпособыПлатежей.КассаБанка");	
	Иначе
		СпособПлатежа = ПолучитьСпособПлатежа(МассивПлатежей[0].СпособПлатежа);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособПлатежа) Тогда
		Сообщить("Способ платежа не определен!");
	КонецЕсли; 
	
	НомерСтрокиДоговора = Договоры.Количество();
	
	Для каждого Стр Из МассивПлатежей Цикл
		НомерСтрокиДоговора = НомерСтрокиДоговора + 1;
		
		СтрДог = Договоры.Добавить();
		СтрДог.НомерСтрокиДоговора = НомерСтрокиДоговора;
		СтрДог.НомерПлатежногоДокумента = Стр.НомерПлатежа + "_" + Стр.НомерЗаписи;
		СтрДог.ДатаПлатежногоДокумента = Стр.ДатаПлатежа;
		СтрДог.НомерДоговора = СокрЛП(Стр.НомерДоговора);
		СтрДог.СпособПлатежа = СпособПлатежа;
		СтрДог.Оплата = Стр.СуммаОплаты;
		СтрДог.НомерСтрокиДоговора = Договоры.Количество();
		
		СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(СтрДог.НомерДоговора);
		
		Заказчик = ВРег(СокрЛП(Стр.ФИО));
		
		//ПервыйПробел = СтрНайти(Стр.ФИО, " ");
		//ФамилияЗаказчика = СокрЛП(Лев(Стр.ФИО, ПервыйПробел));
		//ФамилияЗаказчика = Лев(ФамилияЗаказчика, 1)+НРег(Сред(ФамилияЗаказчика, 2));
		
		ВыбЭлемент = Неопределено;
		Если СписокДоговоров.Количество() > 1 Тогда
			// попытка найти по ФИО заказчика
			Для каждого СтрЗак Из СписокДоговоров Цикл
				Представление = ВРег(СтрЗак.Представление);
				Если СтрНайти(Представление, Заказчик) > 0 Тогда
					ВыбЭлемент = СтрЗак;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ВыбЭлемент = Неопределено Тогда
				Сообщить("Не найден договор "+СтрДог.НомерДоговора+" "+Стр.ФИО+"!");
			КонецЕсли;
			
		ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
			ВыбЭлемент = СписокДоговоров.Получить(0);
			// Проверка ФИО заказчика
			Представление = ВРег(ВыбЭлемент.Представление);
			Если СтрНайти(Представление, Заказчик) = 0 Тогда
				Сообщить("Не совпадает фамилия заказчика в договоре "+ВыбЭлемент.Представление+" и в платеже " + Стр.ФИО);
				ВыбЭлемент = Неопределено;
			КонецЕсли; 
		Иначе
			Сообщить("Не найден договор "+СтрДог.НомерДоговора+" "+Стр.ФИО+"!");
		КонецЕсли; 
		
		Если ВыбЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрДог.Договор = ВыбЭлемент.Значение;
		
		РеквДоговора = ПолучитьРеквизитыДоговора(СтрДог.Договор);
		СтрДог.Корреспондент = РеквДоговора.Корреспондент;
		
		РеквСтроки = ЗаполнитьСтрокуДоговора(СтрДог.Договор, СтрДог.НомерПлатежногоДокумента, СтрДог.ДатаПлатежногоДокумента, СтрДог.НомерСтрокиДоговора);
		
		СтрДог.Оплата = Стр.СуммаОплаты;
		РазнестиОплатуПоЭтапам(СтрДог.Договор, СтрДог.Оплата, СтрДог.НомерСтрокиДоговора);
	КонецЦикла; 
	
КонецПроцедуры // РазнестиПлатежи()

&НаСервере
Функция ПолучитьСпособПлатежа(ИмяСпособа)
	ИскСпособПлатежа = Справочники.мСпособыПлатежей.НайтиПоНаименованию(ИмяСпособа);
	Возврат ИскСпособПлатежа;
КонецФункции // ПолучитьСпособПлатежа()

&НаКлиенте
Процедура ЗагрузитьИзЕРИП(Команда)
	ПараметрыФормы = Новый Структура("ДатаПлатежей, НашБанковскийСчет",
		НачалоДня(Объект.Дата),
		Объект.НашБанковскийСчет);
	ОткрытьФорму("Обработка.мОбменДаннымиЕРИП.Форма.Форма", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Копирование;
КонецПроцедуры
 
&НаКлиенте
Процедура Печать(Команда)
	
	ТабДок = ЗаполнитьФормуНаСервере();
	
	ТабДок.Автомасштаб = Истина;
	ТабДок.Показать();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФормуНаСервере()
	ТабДок = Новый ТабличныйДокумент;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Макет");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовок.Параметры.НазваниеДокумента = "Реестр текущих платежей № "+Объект.Дата+" от "+Формат(Объект.Дата, "ДФ=dd.MM.yyyy")+". "+Объект.НаправлениеПлатежа;
	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапка);
	
	Для каждого стр из Договоры Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Стр);
		
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ОбластьПодвал.Параметры.Оплата = Договоры.Итог("Оплата");
	ОбластьПодвал.Параметры.Ответственный = Пользователи.ТекущийПользователь();
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
КонецФункции // ПолучитьМакетНаСервере()

&НаКлиенте
Процедура ДоговорыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыДатаПлатежногоДокументаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Договоры.ТекущиеДанные;
    Договор = ТекущиеДанные.Договор;
    НомерСтрокиДоговора = ТекущиеДанные.НомерСтрокиДоговора;
    Если ЗначениеЗаполнено(Договор) Тогда
        // Это изменение даты платежки - надо изменить ее в этапах
		Отбор = Новый Структура("Договор, НомерСтрокиДоговора", Договор, НомерСтрокиДоговора);
		Этапы = Объект.Этапы.НайтиСтроки(Отбор);
		Для каждого Этап Из Этапы Цикл
			Этап.ДатаПлатежногоДокумента = ТекущиеДанные.ДатаПлатежногоДокумента;
		КонецЦикла;  
    КонецЕсли;
КонецПроцедуры
