
#Область ПрограммныйИнтерфейс

Функция Put(Message)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда

		Возврат СформироватьСообщениеОбОшибкеПодключения(
			НСтр("ru='Работа с мобильными клиентами выключена'"));

	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПодключениеВозможно = ОбменСМобильными.ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь);

	Если НЕ ПодключениеВозможно Тогда

		Возврат СформироватьСообщениеОбОшибкеПодключения(
			НСтр("ru='Вам не разрешен доступ к программе с использованием мобильного клиента. Обратитесь к администратору'"));

	КонецЕсли;

	// Получение мобильного клиента по коду.
	// Если клиент подключается в первый раз, то выполняется его регистрация на сервере.
	МобильныйКлиент = ПланыОбмена.Мобильный.ПолучитьУзелОбмена(
		message.mobileClientCode,
		ТекущийПользователь);

	ТекущаяВерсия = РегистрыСведений.СведенияОМобильныхКлиентах.ПолучитьВерсию(МобильныйКлиент);

	// Запись сведений о мобильном клиенте, которые он сообщил о себе.
	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(
			МобильныйКлиент, ТекущаяДатаСеанса(), Message.mobileClientInfo, "1.4.2");

	Если ЗначениеЗаполнено(ТекущаяВерсия) И ТекущаяВерсия <> "1.4.2" Тогда
		// Если клиент обновил клиента у себя и первый раз подключается новой версией клиента,
		//	то ему необходимо передать необходимые новые настройки и данные, которыми ранее не обменивались.
		ОбменСМобильными_142.ВыполнитьРегистрациюДанныхПриОбновленииКлиента(МобильныйКлиент);
	КонецЕсли;

	// Помещение сообщения от клиента во входящую очередь для последующей обработки на сервере.
	ОбменСМобильными.ЗаписатьВходящееСообщение(МобильныйКлиент, Message);
	
	// Запуск фоновой обработки сообщения от клиента.
	ЗапуститьОбработкуВходящихИФормированиеИсходящегоСообщенияОбмена(МобильныйКлиент);

	Если Message.needToReturnData Тогда
		// Возврат клиенту первой части первого сообщения в исходящей очереди 
		// 	или информации о том, что сообщение еще готовится.
		ИдПоследнегоЗагруженногоКлиентомСообщения = Message.lastMessageId;
		НомерПоследнейЗагруженнойКлиентомЧастиСообщения = Message.lastMessagePartNumber;
		Ответ = СобратьОтветКлиенту(
			МобильныйКлиент, 
			ИдПоследнегоЗагруженногоКлиентомСообщения, 
			НомерПоследнейЗагруженнойКлиентомЧастиСообщения);
	Иначе
		// Если клиенту в ответ не нужно отправлять данные, то отправляется только подтверждение приема.
		Ответ = ОбменСМобильными_142.СоздатьОбъект("OkResponse");
	КонецЕсли;

	Возврат Ответ;

КонецФункции

Функция Get(request)

	УстановитьПривилегированныйРежим(Истина);

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда

		Возврат СформироватьСообщениеОбОшибкеПодключения(
			НСтр("ru='Работа с мобильными клиентами выключена'"));

	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ПодключениеВозможно = ОбменСМобильными.ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь);

	Если НЕ ПодключениеВозможно Тогда

		Возврат СформироватьСообщениеОбОшибкеПодключения(
			НСтр("ru='Вам не разрешен доступ к программе с использованием мобильного клиента. 
			|Обратитесь к администратору'"));

	КонецЕсли;

	// Валидация мобильного клиента
	УзелОбмена = ПланыОбмена.Мобильный.НайтиПоКоду(request.mobileClientCode);
	Если УзелОбмена.Пустая() Тогда

		Возврат СформироватьСообщениеОбОшибкеПодключения(
			НСтр("ru='При синхронизациия произошла ошибка: выполнено подключение неизвестным устройством'"));

	КонецЕсли;

	ИдПоследнегоЗагруженногоКлиентомСообщения       = request.lastMessageId;
	НомерПоследнейЗагруженнойКлиентомЧастиСообщения = request.lastMessagePartNumber;

	Возврат СобратьОтветКлиенту(
		УзелОбмена,
		ИдПоследнегоЗагруженногоКлиентомСообщения, 
		НомерПоследнейЗагруженнойКлиентомЧастиСообщения);

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция СформироватьСообщениеОбОшибкеПодключения(ТекстСообщения)

	Ответ = ОбменСМобильными_142.СоздатьОбъект("LogRecord");
	Ответ.description = ТекстСообщения;
	Ответ.recordType  = "Error";

	Возврат Ответ;

КонецФункции

Процедура ЗапуститьОбработкуВходящихИФормированиеИсходящегоСообщенияОбмена(МобильныйКлиент)

	// Создание в очереди сообщений нового сообщения с процентом готовности 0.
	// Это сообщение будет наполнять запускаемое фоновое задание
	ИсходящееСообщение = ОбменСМобильными.СоздатьНовоеСообщение(МобильныйКлиент);

	// В клиент-серверном варианте и в файловом 8.3 сообщение принимается и готовится в фоновом задании.
	// Это позволяет избежать таймаутов на стороне мобильного клиента, т.к. сообщение может долго приниматься и готовиться.

	СтруктураОтбора = Новый Структура("Наименование", МобильныйКлиент.Код);
	МассивЗаданий   = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = Ложь;
	Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ЕстьАктивноеЗадание = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если Не ЕстьАктивноеЗадание Тогда

		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(МобильныйКлиент);
		МассивПараметров.Добавить(ИсходящееСообщение);

		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"ОбменСМобильными_142.ОбработатьСообщенияИСформироватьПакетОбмена", 
			МассивПараметров, 
			Новый УникальныйИдентификатор(),// уникальный идентификатор фонового задания
			МобильныйКлиент.Код);			// наименование фонового задания

	КонецЕсли;

КонецПроцедуры

Функция СобратьОтветКлиенту(
	МобильныйКлиент, 
	ИдентификаторПринятогоСообщения, 
	НомерПринятойЧасти)

	УстановитьПривилегированныйРежим(Истина);

	// Если клиент передал информацию о ранее принятом сообщении, то проверим, полностью ли передано сообщение.
	// Если сообщение передано полностью, то пометим его на удаление и укажем, что необходимо передавать первую часть
	//	очередного сообщения в очереди.
	Если ИдентификаторПринятогоСообщения <> Неопределено Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторПринятогоСообщения));
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СообщенияИнтегрированныхСистем.Ссылка
			|ИЗ
			|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
			|ГДЕ
			|	СообщенияИнтегрированныхСистем.ПометкаУдаления = ЛОЖЬ
			|	И СообщенияИнтегрированныхСистем.ИдентификаторСообщения = &ИдентификаторСообщения
			|	И СообщенияИнтегрированныхСистем.Входящее = ЛОЖЬ";

		ВыборкаПринятыеСообщения = Запрос.Выполнить().Выбрать();
		Если ВыборкаПринятыеСообщения.Следующий() Тогда

			ПринятоеСообщение = ВыборкаПринятыеСообщения.Ссылка;
			Если НомерПринятойЧасти = ПринятоеСообщение.ДанныеСообщения.Получить().Количество() Тогда

				ПринятоеСообщениеОбъект = ПринятоеСообщение.ПолучитьОбъект();
				ПринятоеСообщениеОбъект.УстановитьПометкуУдаления(Истина);

				РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьДатуПередачиКлиенту(
					ПринятоеСообщение,
					ТекущаяДатаСеанса());

				ИдентификаторПринятогоСообщения = Неопределено;

			КонецЕсли;

		Иначе
			ИдентификаторПринятогоСообщения = Неопределено;
		КонецЕсли;

	КонецЕсли;
	
	// Выборка сообщений во входящей очереди сообщений, начиная с самого старого
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка,
		|	СообщенияИнтегрированныхСистем.ДатаСоздания
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОчередиСообщенийИнтегрированныхСистем КАК ОчередиСообщенийИнтегрированныхСистем
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|			ПО ОчередиСообщенийИнтегрированныхСистем.Ссылка = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийИнтегрированныхСистем.Ссылка
		|ГДЕ
		|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И НЕ СообщенияИнтегрированныхСистем.ПометкаУдаления
		|   И НЕ СообщенияИнтегрированныхСистем.Входящее
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";

	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоСообщенийВОчереди = Выборка.Количество();
	СчетчикСообщений            = 0;

	Пока Выборка.Следующий() Цикл
		СчетчикСообщений = СчетчикСообщений + 1;
		СообщениеСсылка = Выборка.Ссылка;

		// Получение процента готовности сообщения обмена
		ПроцентГотовности = 
			РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.ПолучитьПроцентГотовностиСообщения(СообщениеСсылка);

		Если ПроцентГотовности < 100 Тогда

			// Если сообщение еще готовится - проверим, выполняется ли соответствующее фоновое задание
			СтруктураОтбора     = Новый Структура("Наименование", МобильныйКлиент.Код);
			МассивЗаданий       = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			ЕстьАктивноеЗадание = Ложь;

			Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда

					ЕстьАктивноеЗадание = Истина;

					Попытка
						// Подождем, вдруг фоновое задание завершится.
						// Если так, то сервер сразу начнет возвращать части сообщения.
						ФоновоеЗадание.ОжидатьЗавершения(3);
					Исключение
					КонецПопытки;

					Прервать;

				КонецЕсли;

			КонецЦикла;

			// Если по еще не готовому сообщению выполняется фоновое задание, которое его готовит, то возвращается процент 
			//	готовности этого сообщения обмена.

			Если ЕстьАктивноеЗадание Тогда
				Ответ = ОбменСМобильными_142.СоздатьОбъект("ExchangeResponse");

				Ответ.messageId           = Новый УникальныйИдентификатор();
				Ответ.messagePartNumber   = -1;
				Ответ.messagePartData     = Неопределено;
				Ответ.morePartsAvailable  = Ложь;
				Ответ.messagesQueueLength = КоличествоСообщенийВОчереди;
				Ответ.currentMessageCompletionPercentage = Окр(ПроцентГотовности/2);

				Возврат Ответ;

			Иначе

				// Если активного задания нет, помечаем сообщение из очереди и переходим к передаче следующего сообщения
				СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
				СообщениеОбъект.УстановитьПометкуУдаления(Истина);

				Продолжить;

			КонецЕсли;

		Иначе
			// Если сообщение готово, то оно передается на клиента по частям
			ДанныеСообщения = СообщениеСсылка.ДанныеСообщения;
			МассивЧастей    = ДанныеСообщения.Получить();
			Если МассивЧастей = Неопределено 
				Или ТипЗнч(МассивЧастей) <> Тип("Массив")
				Или МассивЧастей.Количество() = 0 Тогда
				СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
				СообщениеОбъект.Удалить();
				Продолжить;
			КонецЕсли;

			КоличествоЧастей = МассивЧастей.Количество();

			// Дошли до подготовленного сообщения обмена - необходимо передать очередную часть сообщения
			Если ИдентификаторПринятогоСообщения = Неопределено Тогда

				// Если информации о ранее загруженных частях нет, то передается первая часть первого сообщения
				Ответ = ОбменСМобильными_142.СоздатьОбъект("ExchangeResponse");

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части
				Ответ.messageId = Новый УникальныйИдентификатор(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.messagePartNumber  = 1;
				Ответ.messagePartData    = МассивЧастей[0];
				Ответ.morePartsAvailable = КоличествоЧастей > 1 
											Или СчетчикСообщений < КоличествоСообщенийВОчереди;

				Ответ.messagesQueueLength = КоличествоСообщенийВОчереди;

				Если КоличествоЧастей = 1 Тогда
					Ответ.currentMessageCompletionPercentage = Окр(ПроцентГотовности);
				Иначе
					Ответ.currentMessageCompletionPercentage = 50 + Окр(50*(1/КоличествоЧастей));
				КонецЕсли;

				Возврат Ответ;

			Иначе

				// Передается следующая за принятой часть сообщения
				Если Выборка.ДатаСоздания > ПринятоеСообщение.ДатаСоздания
					Или НомерПринятойЧасти > КоличествоЧастей Тогда
					НомерПринятойЧасти = 0;
				КонецЕсли;

				Ответ = ОбменСМобильными_142.СоздатьОбъект("ExchangeResponse");

				// Идентификатор части сообщения состоит из идентификатора сообщения и порядкового номера части
				Ответ.messageId = Новый УникальныйИдентификатор(СообщениеСсылка.ИдентификаторСообщения);
				Ответ.messagePartNumber  = НомерПринятойЧасти + 1;
				Ответ.messagePartData    = МассивЧастей[НомерПринятойЧасти];
				Ответ.morePartsAvailable = НомерПринятойЧасти < КоличествоЧастей
											Или СчетчикСообщений < КоличествоСообщенийВОчереди;
				Ответ.messagesQueueLength = КоличествоСообщенийВОчереди;

				Если КоличествоЧастей = 1 Тогда
					Ответ.currentMessageCompletionPercentage = Окр(ПроцентГотовности);
				Иначе
					Ответ.currentMessageCompletionPercentage = 50 + Окр(50*((НомерПринятойЧасти+1)/КоличествоЧастей));
				КонецЕсли;

				Возврат Ответ;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Ответ = ОбменСМобильными_142.СоздатьОбъект("OkResponse");

	Возврат Ответ;

КонецФункции

#КонецОбласти

