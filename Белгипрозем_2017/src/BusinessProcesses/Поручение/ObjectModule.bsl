#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатыПроверки.Очистить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		Проверяющий = ПользователиКлиентСервер.ТекущийПользователь();
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнители[0];
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Тема");
			Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнить ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Выполнить'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Даже в случае обмена данными делаем проверку на запись завершенного
	Если Не ЗадачаИсточник.Пустая() Тогда
		БылЗавершен = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭтотОбъект.Ссылка, "Завершен");
		Если Завершен = Истина И БылЗавершен = Ложь Тогда
			ВнешниеПорученияВызовСервера.ВыполнитьЗадачуИсточник(ЭтотОбъект);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
		Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
			НоваяСтрока = РезультатыПроверки.Добавить();
			НоваяСтрока.ЗадачаИсполнителя = ДополнительныеСвойства.ТекущаяЗадача.Ссылка;
			НоваяСтрока.ОтправленоНаДоработку = ДополнительныеСвойства.ОтправленоНаДоработку;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;	
	
	// Обработка рабочей группы	
	РаботаСБизнесПроцессами.СформироватьРабочуюГруппу(ЭтотОбъект);
	
	БылСтартован = Ложь;
	СтарыйКонтролер = Неопределено;
	СтарыйОсновнойОбъектАдресацииКонтролера = Неопределено;
	СтарыйДополнительныйОбъектАдресацииКонтролера = Неопределено;
	Если Не Ссылка.Пустая() Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
			"Стартован, Контролер, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера");
			
		БылСтартован = ЗначенияРеквизитов.Стартован;
		СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
		СтарыйОсновнойОбъектАдресацииКонтролера = ЗначенияРеквизитов.ОсновнойОбъектАдресацииКонтролера;
		СтарыйДополнительныйОбъектАдресацииКонтролера = ЗначенияРеквизитов.ДополнительныйОбъектАдресацииКонтролера;	
	КонецЕсли;
	ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
	ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
	ДополнительныеСвойства.Вставить("СтарыйОсновнойОбъектАдресацииКонтролера", СтарыйОсновнойОбъектАдресацииКонтролера);
	ДополнительныеСвойства.Вставить("СтарыйДополнительныйОбъектАдресацииКонтролера", СтарыйДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"ИсполнительСтрокой", Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") И Проверяющий.ВнешняяРоль Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
			ЭтотОбъект,,
			"ПроверяющийСтрокой",
			Отказ);
	КонецЕсли;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	ПроверитьЭтапыЗаполняемыхПредметов(Отказ);
	
	// Проверка прав доступа участников процесса на предмет
	Если МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
		
		ПредметыДляПроверки = Мультипредметность.ПредметыДляДействийПроцесса(ЭтотОбъект);
		
		ВнешняяТранзакция = ТранзакцияАктивна();
		
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(ЭтотОбъект, ПредметыДляПроверки);
		
		// Проверка прав на предмет
		Если ПредметыДляПроверки.Количество() > 0 Тогда
			МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
				ЭтотОбъект, ПредметыДляПроверки, Отказ);
		КонецЕсли;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	Если БизнесПроцессыИЗадачиПереопределяемый.ИспользоватьВнешниеЗадачиИБизнесПроцессы() Тогда
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Исполнитель) И Исполнитель.ВнешняяРоль Тогда
			ВнешнееПоручение = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ВыполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Наименование   = Наименование;
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		// Прошлая задача исполнителя
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Поручение.ТочкаМаршрута.Выполнить)
		|	И ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.Дата < &ДатаЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	Ссылка);
		Запрос.УстановитьПараметр("ДатаЗадачи", 	Задача.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Контроль.УстановитьНовыйИсточникВСтрокеКонтроля(Ссылка, Выборка.ЗадачаИсполнителя, ЗадачаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиПереопределяемый.ИспользоватьВнешниеЗадачиИБизнесПроцессы() Тогда
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Исполнитель.ВнешняяРоль = Истина Тогда
			
			СтрокаHTML = "";
			Для каждого СтрокаПредмета из Предметы Цикл
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					СтрокаHTML = СтрокаHTML + ВнешниеЗадачиВызовСервера.ПолучитьСодержание(СтрокаПредмета.Предмет) + "<br>";
				КонецЕсли;
			КонецЦикла;
			
			СодержаниеПредмета = Новый ХранилищеЗначения(СтрокаHTML, Новый СжатиеДанных());
			Записать();
			
			// Заполняем список файлов
			МассивФайлов = Новый Массив;
			Для каждого СтрокаПредмета из Предметы Цикл
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ФайлыПредметов = ВнешниеЗадачиВызовСервера.ПолучитьСписокФайлов(СтрокаПредмета.Предмет);
					Для каждого ФайлПредмета из ФайлыПредметов Цикл
						Если МассивФайлов.Найти(ФайлПредмета) = Неопределено Тогда
							МассивФайлов.Добавить(ФайлПредмета);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если МассивФайлов.Количество() <> 0 Тогда
				Для каждого Эл Из МассивФайлов Цикл
					НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(Эл, Ссылка);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда 
		Возврат;
	КонецЕсли;	
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Наименование   = НСтр("ru = 'Проверить'") + ": " + Наименование;
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Проверяющий;
	Иначе
		Задача.РольИсполнителя = Проверяющий;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;
	
	// автор
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Автор = Исполнитель;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И ЗадачаИсполнителя.Дата < &ДатаЗадачи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ";	
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
		Запрос.УстановитьПараметр("ДатаЗадачи", 	Задача.Дата);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Задача.Автор = Выборка.Исполнитель;
		КонецЕсли;
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Функция СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса)
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Наименование   = НСтр("ru = 'Контролировать'") + ": " + Наименование;
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	Задача.Записать();
	
	Возврат Задача;
КонецФункции

Процедура КонтролироватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяЗадача = СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса);
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура ВернутьНаДоработкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	РезультатыПроверкиКоличество = РезультатыПроверки.Количество();
	Если РезультатыПроверкиКоличество > 0 Тогда 
		Результат = РезультатыПроверки[РезультатыПроверкиКоличество - 1].ОтправленоНаДоработку;
	Иначе	
		Результат = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Контролер) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура ПроверитьЭтапыЗаполняемыхПредметов(Отказ)
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать
				И Не ЗначениеЗаполнено(Контролер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Контролер для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"КонтролерСтрокой",
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить
				И Не ЗначениеЗаполнено(Проверяющий) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Проверяющий для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"ПроверяющийСтрокой",
					Отказ);
	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыйИсполнитель = СтарыеУчастникиПроцесса.Исполнитель;
	СтарыйОсновнойОбъектАдресации = СтарыеУчастникиПроцесса.ОсновнойОбъектАдресации;
	СтарыйДополнительныйОбъектАдресации = СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресации;
	
	СтарыйПроверяющий = СтарыеУчастникиПроцесса.Проверяющий;
	СтарыйОсновнойОбъектАдресацииПроверяющего = 
		СтарыеУчастникиПроцесса.ОсновнойОбъектАдресацииПроверяющего;
	СтарыйДополнительныйОбъектАдресацииПроверяющего = 
		СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	
	СтарыйКонтролер = СтарыеУчастникиПроцесса.Контролер;
	СтарыйОсновнойОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ОсновнойОбъектАдресацииКонтролера;
	СтарыйДополнительныйОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	
	ИзмененИсполнитель = СтарыйИсполнитель <> Исполнитель
		ИЛИ СтарыйОсновнойОбъектАдресации <> ОсновнойОбъектАдресации
		ИЛИ СтарыйДополнительныйОбъектАдресации <> ДополнительныйОбъектАдресации;
		
	ИзмененПроверяющий = СтарыйПроверяющий <> Проверяющий
		ИЛИ СтарыйОсновнойОбъектАдресацииПроверяющего <> ОсновнойОбъектАдресацииПроверяющего
		ИЛИ СтарыйДополнительныйОбъектАдресацииПроверяющего <> ДополнительныйОбъектАдресацииПроверяющего;
		
	ИзмененКонтролер = СтарыйКонтролер <> Контролер
		ИЛИ СтарыйОсновнойОбъектАдресацииКонтролера <> ОсновнойОбъектАдресацииКонтролера
		ИЛИ СтарыйДополнительныйОбъектАдресацииКонтролера <> ДополнительныйОбъектАдресацииКонтролера;
		
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ЗадачаКонтролера = Неопределено;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
				ЗадачаОбъект.Наименование = НСтр("ru = 'Проверить'") + ": " + Наименование;
				
				// автор
				Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					ЗадачаОбъект.Автор = Исполнитель;
				Иначе	
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
					|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
					|ИЗ
					|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|ГДЕ
					|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
					|	И ЗадачаИсполнителя.Выполнена
					|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
					|	И ЗадачаИсполнителя.Дата < &ДатаЗадачи
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЗадачаИсполнителя.Дата УБЫВ";	
					
					Запрос.УстановитьПараметр("БизнесПроцесс", 	Ссылка);
					Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
					Запрос.УстановитьПараметр("ДатаЗадачи", 	ЗадачаОбъект.Дата);
					
					Результат = Запрос.Выполнить();
					Если Не Результат.Пустой() Тогда 
						Выборка = Результат.Выбрать();
						Выборка.Следующий();
						ЗадачаОбъект.Автор = Выборка.Исполнитель;
					КонецЕсли;
				КонецЕсли;
				
				// проверяющий
				Если ИзмененПроверяющий Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Проверяющий;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
						ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Проверяющий;
						ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда 
				ЗадачаКонтролера = ЗадачаОбъект;
				
				ЗадачаОбъект.Наименование = НСтр("ru = 'Контролировать'") + ": " + Наименование;
				ЗадачаОбъект.Автор = Автор;
				
				// контролер
				Если ИзмененКонтролер Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Контролер;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
						ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Контролер;
						ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				ЗадачаОбъект.Наименование = Наименование;
				ЗадачаОбъект.Автор = Автор;
				
				// исполнитель
				Если ИзмененИсполнитель Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Исполнитель;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
						ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Исполнитель;
						ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			ЗадачаОбъект.Описание = Описание;
			ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
			ЗадачаОбъект.Важность = Важность;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			Если ПараметрыЗаписи.Свойство("ПереносСрока") 
				И ПараметрыЗаписи.ПереносСрока Тогда
				Если ТипЗнч(ПараметрыЗаписи.Предмет) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И ПараметрыЗаписи.Предмет = ЗадачаОбъект.БизнесПроцесс Тогда
					ПараметрыЗаписи.СтарыйСрок = ЗадачаОбъект.Ссылка.СрокИсполнения;
					ПараметрыЗаписи.НовыйСрок = ЗадачаОбъект.СрокИсполнения;
				КонецЕсли;
				ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ЗадачаОбъект, ПараметрыЗаписи);
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
			Если ЗначениеЗаполнено(Контролер) И ЗадачаКонтролера = Неопределено Тогда
				СоздатьЗадачуНаКонтролера(БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать);
				Записать();
			КонецЕсли;		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контролер) И ЗадачаКонтролера <> Неопределено Тогда
			ЗадачаКонтролера.ИсключенаИзПроцесса = Истина;
			ЗадачаКонтролера.ВыполнитьЗадачу();
			ЗадачаКонтролера.УстановитьПометкуУдаления(Истина);			
			Записать();
		КонецЕсли;			
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")
		 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
		 
			Исполнитель = АвтоподстановкаИсполнитель;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 	
			
			Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
			ОсновнойОбъектАдресации = АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'"),
				ШаблонБизнесПроцесса.Исполнитель,
				НСтр("ru = 'Исполнитель'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
		ОсновнойОбъектАдресации = ШаблонБизнесПроцесса.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресации = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресации;
	КонецЕсли;	
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда 
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
		 
			Контролер = АвтоподстановкаКонтролер;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Структура") Тогда 	
			
			Контролер = АвтоподстановкаКонтролер.РольИсполнителя;
			ОсновнойОбъектАдресацииКонтролера = АвтоподстановкаКонтролер.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресацииКонтролера = АвтоподстановкаКонтролер.ДополнительныйОбъектАдресации;	
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'"));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
		ОсновнойОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииКонтролера;
		ДополнительныйОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	// заполнение проверяющего
	Если ТипЗнч(ШаблонБизнесПроцесса.Проверяющий) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Проверяющий) Тогда 
		АвтоподстановкаПроверяющий = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Проверяющий, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
		 
			Проверяющий = АвтоподстановкаПроверяющий;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаПроверяющий) = Тип("Структура") Тогда 	
			
			Проверяющий = АвтоподстановкаПроверяющий.РольИсполнителя;
			ОсновнойОбъектАдресацииПроверяющего = АвтоподстановкаПроверяющий.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресацииПроверяющего = АвтоподстановкаПроверяющий.ДополнительныйОбъектАдресации;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаПроверяющий) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'"),
				ШаблонБизнесПроцесса.Проверяющий,
				НСтр("ru = 'Проверяющий'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	Иначе
		Проверяющий = ШаблонБизнесПроцесса.Проверяющий;
		ОсновнойОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииПроверяющего;
		ДополнительныйОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;
	
	// срок исполнения
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Исполнитель);
	Иначе	
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) 
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы, Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения,
					ШаблонБизнесПроцесса.СрокИсполненияЧас);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600
					+ ШаблонБизнесПроцесса.СрокИсполненияЧас*3600;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы,
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600;
			КонецЕсли;	
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;	
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланПроверяющего = ШаблонБизнесПроцесса.ТрудозатратыПланПроверяющего;
		ТрудозатратыПланКонтролера = ШаблонБизнесПроцесса.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда
		Проверяющий = АвторСобытия;
	КонецЕсли;	
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
		НСтр("ru = 'Выполнить'"), Предметы);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПоУмолчанию Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда 
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[0];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
			Исполнитель = СтрокаИсполнитель.Исполнитель;
			ОсновнойОбъектАдресации = СтрокаИсполнитель.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
			ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;	
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(Проверяющий) И ПроектнаяЗадача.Исполнители.Количество() > 1 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[1];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
			Проверяющий = СтрокаИсполнитель.Исполнитель;
			ОсновнойОбъектАдресацииПроверяющего = СтрокаИсполнитель.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресацииПроверяющего = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
			ТрудозатратыПланПроверяющего = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контролер) И ПроектнаяЗадача.Исполнители.Количество() > 2 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[2];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
			Контролер = СтрокаИсполнитель.Исполнитель;
			ОсновнойОбъектАдресацииКонтролера = СтрокаИсполнитель.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресацииКонтролера = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
			ТрудозатратыПланКонтролера = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда
		
		Если РезультатыПроверки.Количество() <> 0 Тогда
			Результат = НСтр("ru = 'Задача была возвращена на доработку'");
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
		
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыПроверки.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				Если НайденнаяСтрока.ОтправленоНаДоработку Тогда
					Результат = НСТР("ru = 'Результат проверки: Отправлено на доработку'");
				Иначе	
					Результат = НСТР("ru = 'Результат проверки: Проверено'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Автор;
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	
	// Перенос общего срока
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		РазностьСрокаИсполнения = СрокИсполнения - Дата;
		ШаблонОбъект.СрокИсполнения = Цел(РазностьСрокаИсполнения/(3600*24));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			ШаблонОбъект.СрокИсполненияЧас = Цел((РазностьСрокаИсполнения - ШаблонОбъект.СрокИсполнения*3600*24)/3600);
		КонецЕсли;
	КонецЕсли;
	
	// Перенос исполнителя
	ШаблонОбъект.Исполнитель = Исполнитель;
	ШаблонОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
	ШаблонОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	
	// Перенос проверяющего
	ШаблонОбъект.Проверяющий = Проверяющий;
	ШаблонОбъект.ОсновнойОбъектАдресацииПроверяющего = ОсновнойОбъектАдресацииПроверяющего;
	ШаблонОбъект.ДополнительныйОбъектАдресацииПроверяющего = ДополнительныйОбъектАдресацииПроверяющего;
	
	// Перенос контролера
	ШаблонОбъект.Контролер = Контролер;
	ШаблонОбъект.ОсновнойОбъектАдресацииКонтролера = ОсновнойОбъектАдресацииКонтролера;
	ШаблонОбъект.ДополнительныйОбъектАдресацииКонтролера = ДополнительныйОбъектАдресацииКонтролера;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();	
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	Записать();
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		МассивПолей.Добавить("Наименование");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

#КонецЕсли
