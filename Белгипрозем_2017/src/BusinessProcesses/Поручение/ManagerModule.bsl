#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей Процесса
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Описание
//     Исполнитель
//     ОсновнойОбъектАдресации
//     ИспользуетсяСОбъектамиАдресации
//     ДополнительныйОбъектАдресации
//     СрокИсполнения
//     Важность
//     Проверяющий
//     ОсновнойОбъектАдресацииПроверяющего
//     ДополнительныйОбъектАдресацииПроверяющего
//     Контролер
//     ОсновнойОбъектАдресацииКонтролера
//     ДополнительныйОбъектАдресацииКонтролера
//     Автор
//     Предметы
//
Функция ПолучитьСтруктуруПроцесса() Экспорт
	
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Наименование");
	ПараметрыПроцесса.Вставить("Описание");
	ПараметрыПроцесса.Вставить("Исполнитель");
	ПараметрыПроцесса.Вставить("ОсновнойОбъектАдресации");
	ПараметрыПроцесса.Вставить("ДополнительныйОбъектАдресации");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланИсполнителя");
	ПараметрыПроцесса.Вставить("СрокИсполнения");
	ПараметрыПроцесса.Вставить("Важность");
	ПараметрыПроцесса.Вставить("Проверяющий");
	ПараметрыПроцесса.Вставить("ОсновнойОбъектАдресацииПроверяющего");
	ПараметрыПроцесса.Вставить("ДополнительныйОбъектАдресацииПроверяющего");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланПроверяющего");
	ПараметрыПроцесса.Вставить("Контролер");
	ПараметрыПроцесса.Вставить("ОсновнойОбъектАдресацииКонтролера");
	ПараметрыПроцесса.Вставить("ДополнительныйОбъектАдресацииКонтролера");
	ПараметрыПроцесса.Вставить("ТрудозатратыПланКонтролера");
	ПараметрыПроцесса.Вставить("Проект");
	ПараметрыПроцесса.Вставить("ПроектнаяЗадача");
	ПараметрыПроцесса.Вставить("Автор");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("Предмет");
	
	ПараметрыПроцесса.Вставить("Предметы", Предметы);
	
	Возврат ПараметрыПроцесса;
	
КонецФункции

// Создает, записывает, при необходимости стартует бизнес процесс.
//
// Параметры:
//   СтруктураПроцесса - Структура - структура полей процесса.
//
Процедура СоздатьПроцесс(СтруктураПроцесса, ЗапуститьПроцесс = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	НовыйПроцесс = СоздатьБизнесПроцесс();
	НовыйПроцесс.Заполнить(Новый Структура);
	ЗаполнитьЗначенияСвойств(НовыйПроцесс, СтруктураПроцесса,, "Предметы");
	
	Предметы = Новый ТаблицаЗначений;
	Предметы.Колонки.Добавить("РольПредмета");
	Предметы.Колонки.Добавить("ИмяПредмета");
	Предметы.Колонки.Добавить("ИмяПредметаОснование");
	Предметы.Колонки.Добавить("Предмет");
	Предметы.Колонки.Добавить("ШаблонОснование");
	Предметы.Колонки.Добавить("ТипОпределен");
	
	Для Каждого Предмет Из СтруктураПроцесса.Предметы Цикл
		
		НоваяСтрокаПредмет = Предметы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПредмет, Предмет);
		НоваяСтрокаПредмет.ИмяПредмета = МультипредметностьВызовСервера.
		ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(НоваяСтрокаПредмет.Предмет);
		
	КонецЦикла;
	
	Мультипредметность.ПередатьПредметыПроцессу(НовыйПроцесс, Предметы);
	
	НовыйПроцесс.Записать();
	
	Если ЗапуститьПроцесс Тогда
		
		Если НЕ НовыйПроцесс.ПроверитьЗаполнение() Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось запустить процесс.'");
			
		КонецЕсли;
		
		НовыйПроцесс.Старт();
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"Исполнитель,
		|ОсновнойОбъектАдресации,
		|ДополнительныйОбъектАдресации,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|СрокИсполнения");
		
	Исполнитель = РеквизитыПроцесса.Исполнитель;
	ОсновнойОбъектАдресации = РеквизитыПроцесса.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = РеквизитыПроцесса.ДополнительныйОбъектАдресации;
	Проверяющий = РеквизитыПроцесса.Проверяющий;
	ОсновнойОбъектАдресацииПроверяющего = РеквизитыПроцесса.ОсновнойОбъектАдресацииПроверяющего;
	ДополнительныйОбъектАдресацииПроверяющего = РеквизитыПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	Контролер = РеквизитыПроцесса.Контролер;
	ОсновнойОбъектАдресацииКонтролера = РеквизитыПроцесса.ОсновнойОбъектАдресацииКонтролера;
	ДополнительныйОбъектАдресацииКонтролера = РеквизитыПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	СрокИсполнения = РеквизитыПроцесса.СрокИсполнения;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, НСтр("ru = 'Срок:'"), Формат(СрокИсполнения, ФорматСрока), "");
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресации, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресации, "");
		КонецЕсли;
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Проверяющий: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Проверяющий, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииПроверяющего) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресацииПроверяющего, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресацииПроверяющего) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресацииПроверяющего, "");
		КонецЕсли;
	КонецЕсли;
	
	// Контролер
	Если ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресацииКонтролера, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресацииКонтролера, "");
		КонецЕсли;
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<p>";
	Цвет_ЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.Цвет_ЗакрытыеНеактуальныеЗаписи();
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1>%2</A>",
		"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Поручение",
		НСтр("ru = 'Все задачи'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДляОбщейФормы_ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру свойств, для последующей обработки в форме
// ОбщаяФорма.ЗадачиПоБизнесПроцессу
//
// Возвращаемое значение:
//   - Структура - описывает элементы формы и их свойства.
//
Функция СвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	НастройкиПолей = Новый Структура;
	
	НомерИтерации = Новый Структура;
	НомерИтерации.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("НомерИтерации", НомерИтерации);
	
	Возврат НастройкиПолей;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда 
		
		ЭтоВнешняяЗадача = Ложь;
		// Проверяем бизнес-процесс
		БизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗадачаСсылка, "БизнесПроцесс");
		Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
			
			ВнешнееПоручение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцесс, "ВнешнееПоручение");
			Если ВнешнееПоручение Тогда
				ЭтоВнешняяЗадача = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// Проверяем роль исполнителя
		Роль = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗадачаСсылка, "РольИсполнителя");
		
		Если Роль <> Неопределено И Роль.ВнешняяРоль = Истина Тогда
			ЭтоВнешняяЗадача = Истина;
		КонецЕсли;	
		
		Если ЭтоВнешняяЗадача Тогда
			ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаВнешнейЗадачиИсполнителя";
		Иначе		
			ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиИсполнителя";
		КонецЕсли;	
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
		
		ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиПроверяющего";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда 
		
		ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
		
		ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
		НоваяСтрока = ПоручениеОбъект.РезультатыПроверки.Добавить();
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ОтправленоНаДоработку = Ложь;
		ПоручениеОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры	

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда 
		
		Если ПараметрыВыполнения.Свойство("ОтправленоНаДоработку") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ПоручениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
			
			ПоручениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			ПоручениеОбъект.ДополнительныеСвойства.Вставить(
				"ОтправленоНаДоработку", ПараметрыВыполнения.ОтправленоНаДоработку);
			ПоручениеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ПоручениеОбъект.Ссылка);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Исполнитель = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресации = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресации = Неопределено;
		Иначе
			БизнесПроцессОбъект.Исполнитель = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Проверяющий = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего = Неопределено;
		Иначе
			БизнесПроцессОбъект.Проверяющий = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда  
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Контролер = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииКонтролера = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера = Неопределено;
		Иначе
			БизнесПроцессОбъект.Контролер = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииКонтролера = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "Карточка", "Поручение", ПечатьКарточки(МассивОбъектов, ОбъектыПечати),,
				"БизнесПроцесс.Поручение.ПФ_MXL_Карточка");

	КонецЕсли;
		
КонецПроцедуры

Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаПоручения";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поручение.Автор,
	|	Поручение.Важность,
	|	Поручение.Дата,
	|	Поручение.Исполнитель,
	|	Поручение.Наименование,
	|	Поручение.Номер,
	|	Поручение.Описание,
	|	Поручение.СрокИсполнения,
	|	Поручение.Ссылка,
	|	Поручение.ОсновнойОбъектАдресации,
	|	Поручение.ДополнительныйОбъектАдресации,
	|	Поручение.Контролер,
	|	Поручение.Проверяющий,
	|	Поручение.Предметы.(
	|		ИмяПредмета,
	|		Предмет
	|	)
	|ИЗ
	|	БизнесПроцесс.Поручение КАК Поручение
	|ГДЕ
	|	Поручение.Ссылка В(&МассивОбъектов)";
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Выборка = Запрос.Выполнить().Выбрать();

	Макет = УправлениеПечатью.ПолучитьМакет("БизнесПроцесс.Поручение.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	ПервыйДокумент = Истина;
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		ОбластьЗаголовок.Параметры.Номер = Выборка.Номер;
		ОбластьЗаголовок.Параметры.Дата = Формат(Выборка.Дата, "ДЛФ=D");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапка.Параметры.Заполнить(Выборка);
		ВыборкаПредметы = Выборка.Предметы.Выбрать();
		СтрокаПредметов = "";
		КоличествоПредметов = 0;
		Пока ВыборкаПредметы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПредметы.Предмет) Тогда
				СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"", "," + Символы.ПС) 
					+ ОбщегоНазначенияДокументооборот.ПредметСтрокой(ВыборкаПредметы.Предмет, ВыборкаПредметы.ИмяПредмета);
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли
		КонецЦикла;
		
		ОбластьШапка.Параметры.ПредметЗаголовок = ?(КоличествоПредметов > 1, НСтр("ru='Предметы'"), НСтр("ru='Предмет'"));
		ОбластьШапка.Параметры.Предмет = ?(ЗначениеЗаполнено(СтрокаПредметов), СтрокаПредметов, "не задан");
		ОбластьШапка.Параметры.Проверяющий = ?(ЗначениеЗаполнено(Выборка.Проверяющий), Выборка.Проверяющий, "-");
		ОбластьШапка.Параметры.Контролер = ?(ЗначениеЗаполнено(Выборка.Контролер), Выборка.Контролер, "-");
		
		ОбластьШапка.Параметры.СрокИсполнения = Формат(Выборка.СрокИсполнения, ФорматДаты); 
		ОбластьШапка.Параметры.Дата = Формат(Выборка.Дата, ФорматДаты); 
		Если ЗначениеЗаполнено(Выборка.ДополнительныйОбъектАдресации) Тогда 
			ОбластьШапка.Параметры.Исполнитель = Строка(Выборка.Исполнитель) + " ("+Строка(Выборка.ОсновнойОбъектАдресации)+", "+Строка(Выборка.ДополнительныйОбъектАдресации)+")";
		ИначеЕсли ЗначениеЗаполнено(Выборка.ОсновнойОбъектАдресации) Тогда 
			ОбластьШапка.Параметры.Исполнитель = Строка(Выборка.Исполнитель) + " ("+Строка(Выборка.ОсновнойОбъектАдресации)+")";
		КонецЕсли;	
		ТабличныйДокумент.Вывести(ОбластьШапка);

		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВедущийБизнесПроцесс, "Автор, Контролер, Проверяющий");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		МассивПользователей.Добавить(Реквизиты.Контролер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		МассивПользователей.Добавить(Реквизиты.Проверяющий);
	КонецЕсли;
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"Автор,
			|Исполнитель,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера,
			|Проверяющий,
			|ОсновнойОбъектАдресацииПроверяющего,
			|ДополнительныйОбъектАдресацииПроверяющего");
		
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресации", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресации", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииПроверяющего", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииПроверяющего", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Исполнитель,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресации,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресации);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииКонтролера,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииКонтролера);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииПроверяющего,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииПроверяющего);
		
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);	
		
КонецПроцедуры

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныПоручения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для выдачи простого задания одному сотруднику с возможностью одновременного контроля и проверки результата выполнения.'");
	
КонецФункции

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое представление срока выполнения процесса
Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения(Ссылка) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокИсполнения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СрокИсполнения");
	
	СтрокаФормата = "ДФ=dd.MM.yyyy";
	Если ИспользоватьВремяВСрокахЗадач Тогда
		СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм'";	
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат Формат(СрокИсполнения, СтрокаФормата);
	КонецЕсли;
	
	Возврат НСтр("ru = 'Срок не указан'");
	
КонецФункции

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
//	автоматический перенос сроков при согласовании заявки на перенос автором (истина),
//	или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ГлавнаяЗадача, ВедущаяЗадача");
	ПроцессВедущейЗадачи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыПроцесса.ВедущаяЗадача, "БизнесПроцесс");
	ЭтотПроцессВложенВКомплексный = Ложь;
	
	// Если это процесс в рамках комплексного, то изменение его срока должно вестись из карточки процесса вручную.
	Если ТипЗнч(ПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Завершен");
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Процесс, 
		"Автор, 
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресацииКонтролера;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресацииКонтролера;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Проверяющий;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресацииПроверяющего;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресацииПроверяющего;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессСсылка, 
		"Автор, 
		| Исполнитель,
		| Контролер, 
		| Проверяющий, 
		| ДополнительныйОбъектАдресации,
		| ОсновнойОбъектАдресации,
		| ДополнительныйОбъектАдресацииКонтролера, 
		| ДополнительныйОбъектАдресацииПроверяющего, 
		| ОсновнойОбъектАдресацииКонтролера, 
		| ОсновнойОбъектАдресацииПроверяющего");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнитель
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Исполнитель);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресации);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресации);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииКонтролера);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииКонтролера);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Проверяющий);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииПроверяющего);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииПроверяющего);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеСобытияФормат,
						Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
						Строка(Задача.Исполнитель));
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Поручение.ТочкиМаршрута;
	
	Действие = "";
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Выполнить Тогда
		
		Действие = НСтр("ru = 'Поручение выполнено'");
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Проверить Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ПоручениеРезультатыПроверки.ОтправленоНаДоработку
			|ИЗ
			|	БизнесПроцесс.Поручение.РезультатыПроверки КАК ПоручениеРезультатыПроверки
			|ГДЕ
			|	ПоручениеРезультатыПроверки.ЗадачаИсполнителя = &ЗадачаИсполнителя");
			
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", Задача.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.ОтправленоНаДоработку Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				Действие = НСтр("ru = 'Поручение возвращено на доработку'");
			Иначе
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				Действие = НСтр("ru = 'Поручение завершено'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(Задача.РезультатВыполнения), ":" + Символы.ПС, ".")
						  + Задача.РезультатВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Исполнитель
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнитель", "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации", 
		Ложь));
		
	// Проверяющий
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проверяющий", "ОсновнойОбъектАдресацииПроверяющего", "ДополнительныйОбъектАдресацииПроверяющего",
		Истина));
		
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер", "ОсновнойОбъектАдресацииКонтролера", "ДополнительныйОбъектАдресацииКонтролера",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект", Неопределено, Неопределено,
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.Поручение.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Возврат "";

КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Поручение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Выполнить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Выполнено'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'"));
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Завершить поручение'"));
			
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Вернуть на доработку'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Участники = Новый Структура(
		"Автор,
		|Исполнитель,
		|ОсновнойОбъектАдресации,
		|ДополнительныйОбъектАдресации,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего");
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс,
			"Автор,
			|Исполнитель,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера,
			|Проверяющий,
			|ОсновнойОбъектАдресацииПроверяющего,
			|ДополнительныйОбъектАдресацииПроверяющего");
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

#КонецЕсли
