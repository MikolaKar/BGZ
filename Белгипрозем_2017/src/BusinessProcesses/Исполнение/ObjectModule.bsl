#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	НомерИтерации = 0;
	РезультатыИсполнения.Очистить();
	РезультатыПроверки.Очистить();
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.ЗадачаИсполнителя = Неопределено;
		Строка.Пройден = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		Проверяющий = ПользователиКлиентСервер.ТекущийПользователь();
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;		
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ВходящиеДокументы") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		Описание = "";
		Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(ДанныеЗаполнения);
		Если Резолюции.Количество() > 0 Тогда
			Описание = Резолюции[0].ТекстРезолюции;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
			ТипыПредметов = Новый Массив;
			ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
			ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
			
			ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
			Если ОбрабатываемыеПредметы.Количество() > 0 Тогда
				Описание = "";
				Для каждого Предмет из ОбрабатываемыеПредметы Цикл
					Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Предмет);
					Если Резолюции.Количество() > 0 Тогда
						Описание = ?(ПустаяСтрока(Описание),"",Символы.ПС + Символы.ПС) 
							+ Резолюции[0].ТекстРезолюции;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		//1С-Минск +
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		//1С-Минск -		
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
				Строка = Исполнители.Добавить();
				Строка.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗаписиИсполнения") Тогда
			ЗаписиИсполнения = ДанныеЗаполнения.ЗаписиИсполнения;
			
			Для Каждого Запись Из ЗаписиИсполнения Цикл
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
			КонецЦикла;	
			
			Проверяющий = ЗаписиИсполнения[0].Проверяющий;
			ОсновнойОбъектАдресацииПроверяющего = ЗаписиИсполнения[0].ОсновнойОбъектАдресацииПроверяющего;
			ДополнительныйОбъектАдресацииПроверяющего = ЗаписиИсполнения[0].ДополнительныйОбъектАдресацииПроверяющего;
		КонецЕсли;
		
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Тема");
			Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Исполнить ""%1""'"),
			Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
	    МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Исполнить'"));
	КонецЕсли;

	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
		Если Не ЗначениеЗаполнено(СрокИсполнения) И ЗначениеЗаполнено(Предмет.СрокИсполнения) Тогда 
			СрокИсполнения = КонецДня(Предмет.СрокИсполнения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.ЗаполнитьБизнесПроцессПоМероприятию(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокИсполнения");
	КонецЕсли;
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") И Проверяющий.ВнешняяРоль Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
			ЭтотОбъект,,
			"ПроверяющийСтрокой",
			Отказ);
	КонецЕсли;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	ПроверитьЭтапыЗаполняемыхПредметов(Отказ);
	
	// Проверка исполнителей на дубли при смешанном и параллельном варианте исполнения
	Если ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		
		ТаблицаИсполнителейДляПроверки = Исполнители.Выгрузить();
		ТаблицаИсполнителейДляПроверки.Колонки.Добавить("Шаг");
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ТаблицаИсполнителейДляПроверки);
		
	КонецЕсли;
	
	// Проверка прав доступа участников процесса на предмет
	Если МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
		
		ПредметыДляПроверки = Мультипредметность.ПредметыДляДействийПроцесса(ЭтотОбъект);
		
		ВнешняяТранзакция = ТранзакцияАктивна();
		
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(ЭтотОбъект, ПредметыДляПроверки);
		
		// Проверка прав на предмет
		Если ПредметыДляПроверки.Количество() > 0 Тогда
			МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
				ЭтотОбъект, ПредметыДляПроверки, Отказ);
		КонецЕсли;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
		Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
			Если ДополнительныеСвойства.Свойство("Исполнители") Тогда
				ПараметрыОтбора = Новый Структура("ЗадачаПроверяющего", ДополнительныеСвойства.ТекущаяЗадача);
				НайденныеСтроки = РезультатыПроверки.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из  НайденныеСтроки Цикл
					РезультатыПроверки.Удалить(НайденнаяСтрока);
				КонецЦикла;
				Для Каждого Строка Из ДополнительныеСвойства.Исполнители Цикл
					НоваяСтрока = РезультатыПроверки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
		
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, МассивТипов, Истина);
		
		Если ПометкаУдаления Тогда
			Для Каждого Предмет Из ПредметыДляУстановки Цикл
				ПриОткрепленииПредмета(Предмет);
			КонецЦикла;
		Иначе
			ВосстановитьСостояниеПредметов();
		КонецЕсли;	
		
	КонецЕсли;
	
	ПредыдущееСостояние = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Состояние");
	Если Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
		И Состояние <> ПредыдущееСостояние Тогда
		КомпенсироватьСостояниеПредметов();
	КонецЕсли;
	
	// Обработка рабочей группы	
	РаботаСБизнесПроцессами.СформироватьРабочуюГруппу(ЭтотОбъект);
	
	БылСтартован = Ложь;
	СтарыйКонтролер = Неопределено;
	СтарыйОсновнойОбъектАдресацииКонтролера = Неопределено;
	СтарыйДополнительныйОбъектАдресацииКонтролера = Неопределено;
	Если Не Ссылка.Пустая() Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
			"Стартован, Контролер, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера");
			
		БылСтартован = ЗначенияРеквизитов.Стартован;
		СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
		СтарыйОсновнойОбъектАдресацииКонтролера = ЗначенияРеквизитов.ОсновнойОбъектАдресацииКонтролера;
		СтарыйДополнительныйОбъектАдресацииКонтролера = ЗначенияРеквизитов.ДополнительныйОбъектАдресацииКонтролера;	
	КонецЕсли;
	ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
	ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
	ДополнительныеСвойства.Вставить("СтарыйОсновнойОбъектАдресацииКонтролера", СтарыйОсновнойОбъектАдресацииКонтролера);
	ДополнительныеСвойства.Вставить("СтарыйДополнительныйОбъектАдресацииКонтролера", СтарыйДополнительныйОбъектАдресацииКонтролера);
	
	Для Каждого Строка Из Исполнители Цикл
		Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаИтерацииОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьСостояниеПредметовНаИсполнении();
	
	НомерИтерации = НомерИтерации + 1;
	Для Каждого Строка Из Исполнители Цикл
		Строка.Пройден = Ложь;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

Процедура ОтветственноеИсполнениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Если РезультатыПроверки.Количество() > 0 Тогда // возврат на доработку
		
		Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
			
			Если (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) И СтрокаПроверки.ОтправленоНаДоработку Тогда 
				
				Если НЕ СтрокаПроверки.ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
					Продолжить;
				КонецЕсли;
				Строка = Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.Дата  = ТекущаяДатаСеанса();
				Задача.Автор = Автор;
				Задача.Исполнитель = СтрокаПроверки.ЗадачаИсполнителя.Исполнитель;
				Задача.Важность = Важность;
				
				Если Строка <> Неопределено Тогда 
					
					Если ЗначениеЗаполнено(Строка.Описание) и ЗначениеЗаполнено(Описание) Тогда
						Задача.Описание = Описание + Символы.ПС + Строка.Описание;
					ИначеЕсли ЗначениеЗаполнено(Строка.Описание) Тогда
						Задача.Описание = Строка.Описание;
					Иначе  
						Задача.Описание = Описание;
					КонецЕсли;
					
					Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
						Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
					Иначе
						Дни = Строка.ДлительностьИсполненияДни;
						Часы = 0;
						Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
							Часы = Строка.ДлительностьИсполненияЧасы;
						КонецЕсли;
						Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
							График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
							Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
								График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Задача.Исполнитель);
							КонецЕсли;
							ТекущаяДатаСеанса = ТекущаяДатаСеанса(); 
							Дата = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
								График.Календарь, 
								ТекущаяДатаСеанса,
								Дни);
							Дата = Дата + Часы * 3600 + (ТекущаяДатаСеанса - НачалоДня(ТекущаяДатаСеанса));
							Задача.СрокИсполнения = Дата;	
						Иначе
							Задача.СрокИсполнения = ТекущаяДатаСеанса()
								+ Дни * 24 * 3600
								+ Часы * 3600;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Задача.Описание = СтрокаПроверки.ЗадачаИсполнителя.Описание;
					Задача.СрокИсполнения = СтрокаПроверки.ЗадачаИсполнителя.СрокИсполнения;
				КонецЕсли;
				
				Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
				
				Задача.Наименование   = Наименование + Нстр("ru = ' (ответственный исполнитель)'");
				Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
				Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
				
				Задача.Проект = Проект;
				Задача.ПроектнаяЗадача = ПроектнаяЗадача;
				
				РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
				ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
				Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
				ФормируемыеЗадачи.Добавить(Задача);
				
				Если Строка <> Неопределено Тогда 
					Строка.ЗадачаИсполнителя = ЗадачаСсылка;
					Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
				КонецЕсли;
				
				НоваяСтрока = РезультатыИсполнения.Добавить();
				НоваяСтрока.НомерИтерации 	  = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
				НоваяСтрока.ИдентификаторИсполнителя = СтрокаПроверки.ИдентификаторИсполнителя;
				
				УстановитьПривилегированныйРежим(Истина);
				Записать();
				Прервать;
			КонецЕсли;	   
			
		КонецЦикла;
		
	Иначе	
		
		Для Каждого Строка Из Исполнители Цикл
			
			Если Не Строка.Ответственный Тогда
				Продолжить;
			КонецЕсли;	
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.Дата  	= ТекущаяДатаСеанса();
			Задача.Автор 	= Автор;			
			Задача.Важность = Важность;
			
			Если ЗначениеЗаполнено(Строка.Описание) и ЗначениеЗаполнено(Описание) Тогда
				Задача.Описание = Описание + Символы.ПС + Строка.Описание;
			ИначеЕсли ЗначениеЗаполнено(Строка.Описание) Тогда
				Задача.Описание = Строка.Описание;
			Иначе  
				Задача.Описание = Описание;
			КонецЕсли;	
			
			Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
			Иначе	
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			Задача.Наименование   = Наименование + Нстр("ru = ' (ответственный исполнитель)'");
			
			Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
				Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
			Иначе
				Дни = Строка.ДлительностьИсполненияДни;
				Часы = 0;
				Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
					Часы = Строка.ДлительностьИсполненияЧасы;
				КонецЕсли;
				Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
					График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
					Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
						График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Задача.Исполнитель);
					КонецЕсли;
					ТекущаяДатаСеанса = ТекущаяДатаСеанса();
					Дата = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
						График.Календарь, 
						ТекущаяДатаСеанса,
						Дни);
					Дата = Дата + Часы * 3600 + (ТекущаяДатаСеанса - НачалоДня(ТекущаяДатаСеанса));
					Задача.СрокИсполнения = Дата;	
				Иначе
					Задача.СрокИсполнения = ТекущаяДатаСеанса()
						+ Дни * 24 * 3600
						+ Часы * 3600;
				КонецЕсли;
			КонецЕсли;
			Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
			
			Задача.Проект = Проект;
			Задача.ПроектнаяЗадача = ПроектнаяЗадача;
			
			РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
			ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
			Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
			ФормируемыеЗадачи.Добавить(Задача);
			
			Строка.ЗадачаИсполнителя = ЗадачаСсылка;
			Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
			
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации 	  = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
			НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
			
			УстановитьПривилегированныйРежим(Истина);
			Записать();
			
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Новый Массив;
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ Строка.Ответственный Тогда
				МассивСтрок.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		ИндексДобавленного = 0;
		Для Каждого СтрокаМассива Из Строки Цикл 
			Если НЕ СтрокаМассива.Ответственный Тогда
				МассивСтрок.Добавить(СтрокаМассива);
				ИндексДобавленного = Строки.Найти(СтрокаМассива);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ИндексДобавленного < Строки.ВГраница() Тогда
			Для Инд = ИндексДобавленного + 1 По Строки.ВГраница() Цикл
				Если Строки[Инд].ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 
					Если МассивСтрок.Найти(Строки[Инд]) = Неопределено Тогда
						МассивСтрок.Добавить(Строки[Инд]);
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Строка Из МассивСтрок Цикл
		Если Строка.Ответственный Тогда
			Продолжить;
		КонецЕсли;
		
		Задача = СоздатьЗадачу(Строка, ТочкаМаршрутаБизнесПроцесса);
		
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
		
		РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыИсполнения.Добавить();
		НоваяСтрока.НомерИтерации 	  = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
	КонецЦикла;
			
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда 
		Возврат;
	КонецЕсли;	
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача,, Истина);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	Если Не ПустаяСтрока(ПредметыСтрокой) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверить исполнение %1'"), 
			ПредметыСтрокой);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверить: %1'"), 
			Наименование);
	КонецЕсли;	
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Проверяющий;
	Иначе
		Задача.РольИсполнителя = Проверяющий;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	СтруктураИсполнитель = Новый Структура;
	СтруктураИсполнитель.Вставить("Исполнитель", Проверяющий);
	СтруктураИсполнитель.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресацииПроверяющего);
	СтруктураИсполнитель.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресацииПроверяющего);
	
	Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, СтруктураИсполнитель, ЗадачаСсылка);
	
	ПараметрыОтбора = Новый Структура("НомерИтерации", НомерИтерации);
	НайденныеСтроки = РезультатыИсполнения.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = РезультатыПроверки.Добавить();
		НоваяСтрока.ЗадачаИсполнителя 	= НайденнаяСтрока.ЗадачаИсполнителя;
		НоваяСтрока.ЗадачаПроверяющего 	= ЗадачаСсылка;
		НоваяСтрока.НомерИтерации 		= НомерИтерации;
		НоваяСтрока.ИдентификаторИсполнителя = НайденнаяСтрока.ИдентификаторИсполнителя;
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Функция СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача,, Истина);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать исполнение %1'"), 
			ПредметыСтрокой);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать: %1'"), 
			Наименование);
	КонецЕсли;
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	Задача.Записать();
	
	Возврат Задача;
	
КонецФункции

Процедура КонтролироватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяЗадача = СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса);
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура ВернутьНаДоработкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	ПараметрыОтбора = Новый Структура("НомерИтерации, ОтправленоНаДоработку", НомерИтерации, Истина);
	Результат = (РезультатыПроверки.НайтиСтроки(ПараметрыОтбора).Количество() > 0);
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Контролер) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	ЗаписатьСостояниеПредметовИсполнен();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура ПроверитьЭтапыЗаполняемыхПредметов(Отказ)
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать 
				И Не ЗначениеЗаполнено(Контролер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Контролер для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"КонтролерСтрокой",
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить 
				И Не ЗначениеЗаполнено(Проверяющий) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Проверяющий для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"ПроверяющийСтрокой",
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение 
				И Исполнители.Найти(Истина, "Ответственный") = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Ответственный исполнитель для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,
					"Исполнители",, 
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить 
				И Исполнители.Найти(Ложь, "Ответственный") = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Исполнитель для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,
					"Исполнители",, 
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
						
		
Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	Если ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		Описание = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(ЗадачаСсылка.БизнесПроцесс);
	ИначеЕсли ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
		  Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда 
		Описание = ЗадачаСсылка.БизнесПроцесс.Резолюция;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры

Функция СоздатьЗадачу(Строка, ТочкаМаршрутаБизнесПроцесса)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность = Важность;
	
	Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(Строка.Описание) Тогда
		Задача.Описание = Описание + Символы.ПС + Строка.Описание;
	ИначеЕсли ЗначениеЗаполнено(Строка.Описание) Тогда
		Задача.Описание = Строка.Описание;
	Иначе  
		Задача.Описание = Описание;
	КонецЕсли;	

	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Если ЗначениеЗаполнено(Строка.НаименованиеЗадачи) Тогда
		ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Ложь, Ложь);
		Если НЕ ПустаяСтрока(ПредметыСтрокой) Тогда 
			Задача.Наименование = Строка.НаименованиеЗадачи + " (" + ПредметыСтрокой + ")";
		Иначе	
			Задача.Наименование = Строка.НаименованиеЗадачи;
		КонецЕсли;
	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
	Иначе	
		Задача.РольИсполнителя = Строка.Исполнитель;
		Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		Задача.СрокИсполнения = ?(ЗначениеЗаполнено(Строка.СрокИсполнения), Строка.СрокИсполнения, СрокИсполнения);
	Иначе
		Дни = Строка.ДлительностьИсполненияДни;
		Часы = 0;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			Часы = Строка.ДлительностьИсполненияЧасы;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			Если ТипЗнч(Задача.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Задача.Исполнитель);
			КонецЕсли;
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Дата = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
				График.Календарь, 
				ТекущаяДатаСеанса,
				Дни);
			Дата = Дата + Часы * 3600 + (ТекущаяДатаСеанса - НачалоДня(ТекущаяДатаСеанса));
			Задача.СрокИсполнения = Дата;	
		Иначе
			Задача.СрокИсполнения = ТекущаяДатаСеанса()
				+ Дни * 24 * 3600
				+ Часы * 3600;
		КонецЕсли;
	КонецЕсли;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	Возврат Задача;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	СтарыйПроверяющий = СтарыеУчастникиПроцесса.Проверяющий;
	СтарыйОсновнойОбъектАдресацииПроверяющего = 
		СтарыеУчастникиПроцесса.ОсновнойОбъектАдресацииПроверяющего;
	СтарыйДополнительныйОбъектАдресацииПроверяющего = 
		СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
		
	СтарыйКонтролер = СтарыеУчастникиПроцесса.Контролер;
	СтарыйОсновнойОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ОсновнойОбъектАдресацииКонтролера;
	СтарыйДополнительныйОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	
	ИзмененПроверяющий = СтарыйПроверяющий <> Проверяющий
		ИЛИ СтарыйОсновнойОбъектАдресацииПроверяющего <> ОсновнойОбъектАдресацииПроверяющего
		ИЛИ СтарыйДополнительныйОбъектАдресацииПроверяющего <> ДополнительныйОбъектАдресацииПроверяющего;
		
	ИзмененКонтролер = СтарыйКонтролер <> Контролер
		ИЛИ СтарыйОсновнойОбъектАдресацииКонтролера <> ОсновнойОбъектАдресацииКонтролера
		ИЛИ СтарыйДополнительныйОбъектАдресацииКонтролера <> ДополнительныйОбъектАдресацииКонтролера;
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗадачаКонтролера = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЗадачаОбъект, , Истина);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Ложь, Ложь);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
				ЗадачаКонтролера = ЗадачаОбъект;
				
				Если НЕ ПустаяСтрока(ПредметыСтрокой) Тогда 
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать исполнение %1'"),
						ПредметыСтрокой);
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать: %1'"),
						Наименование);
				КонецЕсли;
					
				ЗадачаОбъект.Описание = Описание;
				ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
				
				Если ИзмененКонтролер Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
						ЗадачаОбъект.Исполнитель = Контролер;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
						ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
					Иначе	
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Контролер;
						ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
				Если Не ПустаяСтрока(ПредметыСтрокой) Тогда 
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверить исполнение %1'"),
						ПредметыСтрокой);
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проверить: %1'"), 
						Наименование);
				КонецЕсли;	
				
				ЗадачаОбъект.Описание = Описание;
				ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
				
				Если ИзмененПроверяющий Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
						ЗадачаОбъект.Исполнитель = Проверяющий;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
						ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
					Иначе	
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Проверяющий;
						ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииПроверяющего;
						ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииПроверяющего;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
				ЗадачаОбъект.Наименование = Наименование + НСтр("ru = ' (ответственный исполнитель)'");
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗадачаОбъект.Наименование = ?(ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеЗадачи), НайденнаяСтрока.НаименованиеЗадачи, Наименование);
					
					Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(НайденнаяСтрока.Описание) Тогда
						ЗадачаОбъект.Описание = Описание + Символы.ПС + НайденнаяСтрока.Описание;
					ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрока.Описание) Тогда
						ЗадачаОбъект.Описание = НайденнаяСтрока.Описание;
					Иначе
						ЗадачаОбъект.Описание = Описание;
					КонецЕсли;
					
					ЗадачаОбъект.СрокИсполнения = ?(ЗначениеЗаполнено(НайденнаяСтрока.СрокИсполнения), НайденнаяСтрока.СрокИсполнения, СрокИсполнения);
				КонецЕсли;
			Иначе	
				ЗадачаОбъект.Наименование = Наименование;
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗадачаОбъект.Наименование = ?(ЗначениеЗаполнено(НайденнаяСтрока.НаименованиеЗадачи), НайденнаяСтрока.НаименованиеЗадачи, Наименование);
					
					Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(НайденнаяСтрока.Описание) Тогда
						ЗадачаОбъект.Описание = Описание + Символы.ПС + НайденнаяСтрока.Описание;
					ИначеЕсли ЗначениеЗаполнено(НайденнаяСтрока.Описание) Тогда
						ЗадачаОбъект.Описание = НайденнаяСтрока.Описание;
					Иначе
						ЗадачаОбъект.Описание = Описание;
					КонецЕсли;
					
					ЗадачаОбъект.СрокИсполнения = ?(ЗначениеЗаполнено(НайденнаяСтрока.СрокИсполнения), НайденнаяСтрока.СрокИсполнения, СрокИсполнения);
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор 	  = Автор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			Если ПараметрыЗаписи.Свойство("ПереносСрока") 
				И ПараметрыЗаписи.ПереносСрока Тогда
				Если ТипЗнч(ПараметрыЗаписи.Предмет) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И ПараметрыЗаписи.Предмет = ЗадачаОбъект.БизнесПроцесс Тогда
					ПараметрыЗаписи.СтарыйСрок = ЗадачаОбъект.Ссылка.СрокИсполнения;
					ПараметрыЗаписи.НовыйСрок = ЗадачаОбъект.СрокИсполнения;
				КонецЕсли;
				ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ЗадачаОбъект, ПараметрыЗаписи);
			КонецЕсли;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		// обновление исполнителей
		ДобавленныеСтроки = Новый Массив;
		УдаленныеСтроки   = Новый Массив;
		ИзмененныеСтроки  = Новый Массив;
		
		КоличествоСтрок = СтарыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				СтарыеИсполнители.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;	
		
		НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = НовыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Тогда
				НовыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 0 По КоличествоСтрок-1 Цикл
			Строка = НовыеИсполнители[Инд];
			
			Если Инд > 0 Тогда 
				ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
			Иначе
				ПредыдущаяСтрока = Неопределено;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				
				Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
					ДобавленныеСтроки.Добавить(Строка);
				ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно 
						И Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 	
					
					Если ПредыдущаяСтрока = Неопределено 
						Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя) 
						Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда 
					
						ДобавленныеСтроки.Добавить(Строка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из НовыеИсполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
			
			НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель 
				Или Строка.ОсновнойОбъектАдресации <> НайденнаяСтрока.ОсновнойОбъектАдресации
				Или Строка.ДополнительныйОбъектАдресации <> НайденнаяСтрока.ДополнительныйОбъектАдресации Тогда 
				ИзмененныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из СтарыеИсполнители Цикл
			НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		    Если НайденнаяСтрока = Неопределено Тогда 
				УдаленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		// добавленные строки
		Для Каждого Строка Из ДобавленныеСтроки Цикл
						
			Задача = СоздатьЗадачу(Строка, БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			Задача.Записать();
			
			НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			КонецЕсли;
			
			Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
				Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			НоваяСтрока = РезультатыИсполнения.Добавить();
			НоваяСтрока.НомерИтерации = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
			
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда 
			Записать();
		КонецЕсли;
		
		// измененные строки
		Для Каждого Строка Из ИзмененныеСтроки Цикл	
			Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
			
			Если Задача.ПринятаКИсполнению Тогда
				Задача.ПринятаКИсполнению = Ложь;
				Задача.ДатаПринятияКИсполнению = '00010101';
			КонецЕсли;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
				Задача.РольИсполнителя = Неопределено;
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			Иначе	
				Задача.Исполнитель = Неопределено;
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			Задача.Записать();
		КонецЦикла;

		// удаленные строки
		Если УдаленныеСтроки.Количество() > 0 Тогда 
		
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
				Задача.ИсключенаИзПроцесса = Истина;
				Задача.ВыполнитьЗадачу();
				Задача.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			Прочитать();
			
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				НайденнаяСтрока = РезультатыИсполнения.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатыИсполнения.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
			Записать();
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
			Если ЗначениеЗаполнено(Контролер) И ЗадачаКонтролера = Неопределено Тогда
				СоздатьЗадачуНаКонтролера(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
				Записать();
			КонецЕсли;
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Контролер) И ЗадачаКонтролера <> Неопределено Тогда
			ЗадачаКонтролера.ИсключенаИзПроцесса = Истина;
			ЗадачаКонтролера.ВыполнитьЗадачу();
			ЗадачаКонтролера.УстановитьПометкуУдаления(Истина);
			Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры  

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	ВариантИсполнения = ШаблонБизнесПроцесса.ВариантИсполнения;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;	
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
			
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Если Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Если Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						НеобходимоПеренестиНачалоСледующегоШага = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")
			 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
				
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
				НоваяСтрока.Описание = Строка.Описание;
				НоваяСтрока.Ответственный = Строка.Ответственный;
				НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
				НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
				НоваяСтрока.ДлительностьИсполненияДни = Строка.СрокИсполнения;
				НоваяСтрока.ДлительностьИсполненияЧасы = Строка.СрокИсполненияЧас;
				
				// трудозатраты
				Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
					НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
				НоваяСтрока.ОсновнойОбъектАдресации = АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации;
				НоваяСтрока.Описание = Строка.Описание;
				НоваяСтрока.Ответственный = Строка.Ответственный;
				НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
				НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
				НоваяСтрока.ДлительностьИсполненияДни = Строка.СрокИсполнения;
				НоваяСтрока.ДлительностьИсполненияЧасы = Строка.СрокИсполненияЧас;
				
				// трудозатраты
				Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
					НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") 
					  Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.РолиИсполнителей"))
						И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						НоваяСтрока = Исполнители.Добавить();
						НоваяСтрока.Исполнитель = ЭлементМассива;
						НоваяСтрока.Описание = Строка.Описание;
						НоваяСтрока.Ответственный = Строка.Ответственный;
						НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
						НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
						НоваяСтрока.ДлительностьИсполненияДни = Строка.СрокИсполнения;
						НоваяСтрока.ДлительностьИсполненияЧасы = Строка.СрокИсполненияЧас;
												
						// трудозатраты
						Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
							НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						
						НоваяСтрока = Исполнители.Добавить();
						НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
						НоваяСтрока.ОсновнойОбъектАдресации = ЭлементМассива.ОсновнойОбъектАдресации;
						НоваяСтрока.ДополнительныйОбъектАдресации = ЭлементМассива.ДополнительныйОбъектАдресации;
						НоваяСтрока.Описание = Строка.Описание;
						НоваяСтрока.Ответственный = Строка.Ответственный;
						НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
						НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
						НоваяСтрока.ДлительностьИсполненияДни = Строка.СрокИсполнения;
						НоваяСтрока.ДлительностьИсполненияЧасы = Строка.СрокИсполненияЧас;
												
						// трудозатраты
						Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
							НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		Иначе
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "СрокИсполнения");
			НоваяСтрока.ДлительностьИсполненияДни = Строка.СрокИсполнения;
			НоваяСтрока.ДлительностьИсполненияЧасы = Строка.СрокИсполненияЧас;
							
			// трудозатраты
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
				НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И НоваяСтрока.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокИсполнения	= Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	// Вычисление сроков исполнения
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		Для Каждого Строка Из Исполнители Цикл
			ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Строка.Исполнитель);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
				Если ЗначениеЗаполнено(Строка.ДлительностьИсполненияДни) Или ЗначениеЗаполнено(Строка.ДлительностьИсполненияЧасы) Тогда 
					Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
						Строка.СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
							ГрафикРаботы, 
							?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДатаСеанса()) + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
							Строка.ДлительностьИсполненияДни, 
							Строка.ДлительностьИсполненияЧасы);
					Иначе
						Строка.СрокИсполнения = Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
							+ Строка.ДлительностьИсполненияДни * 24 * 3600 
							+ Строка.ДлительностьИсполненияЧасы * 3600;
					КонецЕсли;	
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Строка.ДлительностьИсполненияДни) Тогда 
					Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
						Строка.СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
							ГрафикРаботы, 
							?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДатаСеанса()) + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0), 
							Строка.ДлительностьИсполненияДни);
					Иначе
						Строка.СрокИсполнения = 
							Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
							+ Строка.ДлительностьИсполненияДни*24*3600;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда 
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи") Тогда 
			Контролер = АвтоподстановкаКонтролер;
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
		ОсновнойОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииКонтролера;
		ДополнительныйОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;
	
	// заполнение проверяющего
	Если ТипЗнч(ШаблонБизнесПроцесса.Проверяющий) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Проверяющий) Тогда 
		АвтоподстановкаПроверяющий = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Проверяющий, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.Пользователи") Тогда 
			Проверяющий = АвтоподстановкаПроверяющий;
		ИначеЕсли ТипЗнч(АвтоподстановкаПроверяющий) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Проверяющий,
				НСтр("ru = 'Проверяющий'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Проверяющий = ШаблонБизнесПроцесса.Проверяющий;
		ОсновнойОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииПроверяющего;
		ДополнительныйОбъектАдресацииПроверяющего = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	КонецЕсли;
	
	// общий срок исполнения
	ТаблГрафикиРаботы = Новый ТаблицаЗначений;
	ТаблГрафикиРаботы.Колонки.Добавить("ГрафикРаботы");
	
	Для Каждого Строка Из Исполнители Цикл
		Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
			Продолжить;
		КонецЕсли;
			
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Строка.Исполнитель);
		Иначе	
			ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		КонецЕсли;
		
		НоваяСтрока = ТаблГрафикиРаботы.Добавить();
		НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
	КонецЦикла;
	
	ТаблГрафикиРаботы.Свернуть("ГрафикРаботы");
	Если ТаблГрафикиРаботы.Количество() = 1 Тогда 
		ГрафикРаботы = ТаблГрафикиРаботы[0].ГрафикРаботы;
	Иначе
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) 
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы,
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения,
					ШаблонБизнесПроцесса.СрокИсполненияЧас);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600
					+ ШаблонБизнесПроцесса.СрокИсполненияЧас*3600;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы,
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600;
			КонецЕсли;	
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;	
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланПроверяющего = ШаблонБизнесПроцесса.ТрудозатратыПланПроверяющего;
		ТрудозатратыПланКонтролера = ШаблонБизнесПроцесса.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда
		Проверяющий = АвторСобытия;
	КонецЕсли;	
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
		НСтр("ru = 'Исполнить'"), Предметы);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПоУмолчанию Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда 
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = СтрокаИсполнитель.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
				НоваяСтрока.ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ЗаполнитьПоРассмотрению(Рассмотрение) Экспорт
	
	Если ТипЗнч(Рассмотрение.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		Автор = Рассмотрение.Исполнитель;
	Иначе
		Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
	Наименование = Рассмотрение.НаименованиеИсполнения;
	СрокИсполнения = Рассмотрение.СрокИсполненияОбщий;
	Описание = Рассмотрение.ОписаниеИсполнения;
	Важность = Рассмотрение.ВажностьИсполнения;
	
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, Рассмотрение);
	
	Проверяющий = Рассмотрение.ПроверяющийИсполнения;
	ОсновнойОбъектАдресацииПроверяющего = Рассмотрение.ОсновнойОбъектАдресацииПроверяющего;
	ДополнительныйОбъектАдресацииПроверяющего = Рассмотрение.ДополнительныйОбъектАдресацииПроверяющего;
	ТрудозатратыПланПроверяющего = Рассмотрение.ТрудозатратыПланПроверяющего;
	
	Контролер = Рассмотрение.КонтролерИсполнения;
	ОсновнойОбъектАдресацииКонтролера = Рассмотрение.ОсновнойОбъектАдресацииКонтролера;
	ДополнительныйОбъектАдресацииКонтролера = Рассмотрение.ДополнительныйОбъектАдресацииКонтролера;
	ТрудозатратыПланКонтролера = Рассмотрение.ТрудозатратыПланКонтролера;
	
	ВариантИсполнения = Рассмотрение.ВариантИсполнения;
	
	Исполнители.Загрузить(Рассмотрение.ИсполнителиИсполнения.Выгрузить());
	
КонецПроцедуры	

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостояниеПредметов()
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда 
		ЗаписатьСостояниеПредметовНаИсполнении();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда 
		ЗаписатьСостояниеПредметовИсполнен();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСостояниеПредметовИсполнен()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, МассивТипов, Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение);
	КонецЕсли;
	
	Если ПредметыДляУстановки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаИсполнения = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыИсполнения.ЗадачаИсполнителя
	|ПОМЕСТИТЬ РезультатыЗадач
	|ИЗ
	|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК РезультатыИсполнения
	|ГДЕ
	|	РезультатыИсполнения.Ссылка = &Ссылка
	|	И РезультатыИсполнения.НомерИтерации = &НомерИтерации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезультатыПроверки.ЗадачаПроверяющего
	|ИЗ
	|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК РезультатыПроверки
	|ГДЕ
	|	РезультатыПроверки.Ссылка = &Ссылка
	|	И РезультатыПроверки.НомерИтерации = &НомерИтерации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(РезультатыЗадач.ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
	|ИЗ
	|	РезультатыЗадач КАК РезультатыЗадач";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДатаИсполнения = Выборка.ДатаИсполнения;
	КонецЕсли;
	
	// Устанавливаем состояние, только если по предмету нет других активных исполнений
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
	|ГДЕ
	|	ИсполнениеПредметы.Ссылка <> &Ссылка
	|	И ИсполнениеПредметы.Предмет = &Предмет
	|	И ИсполнениеПредметы.РольПредмета = Значение(Перечисление.РолиПредметов.Основной)
	|	И ИсполнениеПредметы.Ссылка.Стартован
	|	И НЕ ИсполнениеПредметы.Ссылка.Завершен
	|	И НЕ ИсполнениеПредметы.Ссылка.ПометкаУдаления
	|	И НЕ ИсполнениеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Запрос.УстановитьПараметр("Предмет", Предмет);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Делопроизводство.ЗаписатьСостояниеДокумента(
				Предмет, ДатаИсполнения, Перечисления.СостоянияДокументов.Исполнен, Ссылка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаписатьСостояниеПредметовНаИсполнении()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыПредметов = Новый Массив;
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт);
	КонецЕсли;
	
	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, ДатаНачала, Перечисления.СостоянияДокументов.НаИсполнении, Ссылка);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает признак наличия метода ПриПрикрепленииПредмета
// 
Функция ЕстьМетодПриПрикрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при прикреплении предмета к стартованному БП
//
Процедура ПриПрикрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ВходящиеДокументы") 
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ, ДатаНачала, Перечисления.СостоянияДокументов.НаИсполнении, Ссылка);
			
	КонецЕсли;

КонецПроцедуры

// Возвращает признак наличия метода ПриОткрепленииПредмета
// 
Функция ЕстьМетодПриОткрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Делопроизводство.УдалитьСостояниеДокумента(Документ, Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Компенсирует состояние документа при прерывании БП
//
Процедура КомпенсироватьСостояниеПредметов() Экспорт
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда 
			Делопроизводство.УдалитьСостояниеДокумента(Предмет, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбходЗавершенПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Результат = Истина;
		
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно 
		ИЛИ ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Если РезультатыПроверки.Количество() = 0 Тогда

			Результат = Ложь;
			ПараметрыОтбора = Новый Структура("Пройден", Ложь);
			НеПройденныеИсполнения= Исполнители.НайтиСтроки(ПараметрыОтбора);
			Если НеПройденныеИсполнения.Количество() = 0 Тогда 
				Результат = Истина;
				Возврат;
			Иначе
				Результат = Истина;
				Для Каждого Исполнитель Из НеПройденныеИсполнения Цикл
					Результат = Результат И ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
				Если (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) И СтрокаПроверки.ОтправленоНаДоработку Тогда 
					Если СтрокаПроверки.ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
						Продолжить;
					КонецЕсли;
					Строка = Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если Строка <> Неопределено Тогда
						Результат = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;   
			КонецЦикла;	
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ВариантИсполнения) Тогда 
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не заполнен вариант исполнения процесса: %1'"), Строка(Ссылка));
	
	КонецЕсли;		

КонецПроцедуры

Процедура ИсполнитьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда
		
		НомерИтерацииЗадачи = Неопределено;
		НайденнаяСтрока = РезультатыИсполнения.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации =
			РезультатыИсполнения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была возвращена на доработку'");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		Если Задача.Выполнена Тогда
			
			ЕстьВозвраты = Ложь;
			
			СтрокиПроверки = РезультатыПроверки.НайтиСтроки(Новый Структура("ЗадачаПроверяющего", Задача));
			Для Каждого Строка Из СтрокиПроверки Цикл
				Если Строка.ОтправленоНаДоработку Тогда
					ЕстьВозвраты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьВозвраты Тогда
				Результат = НСтр("ru = 'Результат проверки: Отправлено на доработку'");
			Иначе
				Результат = НСтр("ru = 'Результат проверки: Проверено'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.ВариантИсполнения = ВариантИсполнения;
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос общего срока
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		РазностьСрокаИсполнения = СрокИсполнения - Дата;
		ШаблонОбъект.СрокИсполнения = Цел(РазностьСрокаИсполнения/(3600*24));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			ШаблонОбъект.СрокИсполненияЧас = Цел((РазностьСрокаИсполнения - ШаблонОбъект.СрокИсполнения*3600*24)/3600);
		КонецЕсли;
	КонецЕсли;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, Описание, 
			|Ответственный, НаименованиеЗадачи, ПорядокИсполнения");
			
		// Установка срока исполнения для исполнителя в шаблоне	
		Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
			РазностьСрокаИсполнения = Исполнитель.СрокИсполнения - Дата;
			ИсполнительШаблона.СрокИсполнения = Цел(РазностьСрокаИсполнения/(3600*24));
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
				ИсполнительШаблона.СрокИсполненияЧас = Цел((РазностьСрокаИсполнения - ИсполнительШаблона.СрокИсполнения*3600*24)/3600);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	// Перенос проверяющего
	ШаблонОбъект.Проверяющий = Проверяющий;
	ШаблонОбъект.ОсновнойОбъектАдресацииПроверяющего = ОсновнойОбъектАдресацииПроверяющего;
	ШаблонОбъект.ДополнительныйОбъектАдресацииПроверяющего = ДополнительныйОбъектАдресацииПроверяющего;
	
	// Перенос контролера
	ШаблонОбъект.Контролер = Контролер;	
	ШаблонОбъект.ОсновнойОбъектАдресацииКонтролера = ОсновнойОбъектАдресацииКонтролера;
	ШаблонОбъект.ДополнительныйОбъектАдресацииКонтролера = ДополнительныйОбъектАдресацииКонтролера;
		
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	Записать();
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

#КонецЕсли