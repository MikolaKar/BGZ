
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	Если Объект.Ссылка.Пустая() И Объект.Контролер = Неопределено Тогда 
		Объект.Контролер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ПредыдущийВариантИсполнения = Объект.ВариантИсполнения;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ВестиУчетПереносаСроков = ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач");
	Элементы.СрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ИсполнителиСрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Если Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = Ложь;
		Элементы.ИсполнителиСрокВычисляемый.Формат = НСтр("ru = 'ДФ=''dd.MM.yyyy'''");
	КонецЕсли;
	
	Элементы.ИзменитьСрокПроцесса.Видимость = Параметры.Свойство("ЗаявкаНаПеренос", ЗаявкаНаПереносСрока)
		И ЗначениеЗаполнено(ЗаявкаНаПереносСрока);
	Если Объект.Стартован Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		Если Объект.Завершен Тогда
			Длительность = ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, ДатаНачалаОтсчета);
		Иначе
			Длительность = ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), ДатаНачалаОтсчета);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДанныеПроекта();
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители);
	
	// установка фактических сроков исполнения
	Если Объект.Стартован
		И (Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно) Тогда
		
		Для Каждого Исполнитель Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				Исполнитель.СрокИсполнения = Исполнитель.ЗадачаИсполнителя.СрокИсполнения;
			КонецЕсли;
		КонецЦикла;
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностей(Объект.Исполнители, ДатаНачалаОтсчета);	
	КонецЕсли;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ОтложенныйСтартБизнесПроцессовСервер.
		ЗаполнитьРеквизитНастройкаОтложенногоСтартаВФормеПроцесса(ЭтаФорма);
		
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
		
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();

	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	ОбновитьФлагУстановкиОтветственного();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Заполняем строковое представление участников
	ПроверяющийСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Проверяющий,
		Объект.ОсновнойОбъектАдресацииПроверяющего,
		Объект.ДополнительныйОбъектАдресацииПроверяющего);
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
		
	// Заполняем параметры участников. Параметры используются в обработчиках соответствующих полей.
	ПараметрыПроверяющего =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Проверяющий",
			"ПроверяющийСтрокой",
			"ОсновнойОбъектАдресацииПроверяющего",
			"ДополнительныйОбъектАдресацииПроверяющего");
	ПараметрыКонтролера =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Контролер",
			"КонтролерСтрокой",
			"ОсновнойОбъектАдресацииКонтролера",
			"ДополнительныйОбъектАдресацииКонтролера");
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Если Объект.Ссылка.Пустая() И Не Копирование Тогда
		Если ШаблоныПоПредметам.Количество() > 1 Тогда 
			РезультатВыбора = ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныИсполнения", ШаблоныПоПредметам);
			Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			
			ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
			УстановитьДоступностьПоШаблону();
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьШаг(Объект.Исполнители);
	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьШаг(Объект.Исполнители);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "БизнесПроцесс") = Объект.Ссылка Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ОтмененоВыполнениеЗадачи"
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр, "БизнесПроцесс") = Объект.Ссылка Тогда
		ОбновитьСрокиЗадач(Истина, Истина);
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли ИмяСобытия = "Процесс_ИзменениеСрока" И Параметр.Предмет = Объект.Ссылка Тогда
		Объект.СрокИсполнения = Параметр.НовыйСрок;
		Модифицированность = Истина;
		Записать(Параметр);
	ИначеЕсли ИмяСобытия = "Задача_ИзменениеСрока" 
		И Параметр.Предмет = Элементы.Исполнители.ТекущиеДанные.ЗадачаИсполнителя Тогда
		Элементы.Исполнители.ТекущиеДанные.СрокИсполнения = Параметр.НовыйСрок;
		Модифицированность = Истина;
		Если Объект.ВариантИсполнения <> ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
			ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
			РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностейИСроков(Объект.Исполнители, ДатаНачалаОтсчета, Элементы.Исполнители.ТекущаяСтрока);
		КонецЕсли;
		Записать(Параметр);
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" Тогда
		ОбновитьСрокиЗадач(Истина, Истина);
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	КонецЕсли;
		
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" 
		И Параметр.БизнесПроцесс = Объект.Ссылка Тогда
		НастройкаОтложенногоСтарта = Параметр;
		ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" 
		И Параметр.Предмет = Объект.Ссылка
		И Параметр.Свойство("Контролер") 
		И Параметр.Контролер <> Объект.Контролер Тогда 
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессами.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	
	// Заполняем строковое представление участников
	ПроверяющийСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Проверяющий,
		Объект.ОсновнойОбъектАдресацииПроверяющего,
		Объект.ДополнительныйОбъектАдресацииПроверяющего);
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
		
	// Заполняем параметры участников. Параметры используются в обработчиках соответствующих полей.
	ПараметрыПроверяющего =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Проверяющий",
			"ПроверяющийСтрокой",
			"ОсновнойОбъектАдресацииПроверяющего",
			"ДополнительныйОбъектАдресацииПроверяющего");
	ПараметрыКонтролера =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Контролер",
			"КонтролерСтрокой",
			"ОсновнойОбъектАдресацииКонтролера",
			"ДополнительныйОбъектАдресацииКонтролера");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт ИЛИ Объект.Стартован Тогда
		
		Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
			ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
		КонецЕсли;
		
		МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
		
		РаботаСБизнесПроцессамиКлиент.ПроверитьКорректностьЗаполнения(
			Объект.Ссылка,
			Объект.Исполнители, 
			Объект.СрокИсполнения, 
			Объект.ВариантИсполнения, 
			"Объект.СрокИсполнения",
			"Объект.Исполнители",
			Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.Стартован 
			И ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполнения, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
			Если Отказ Тогда
				Возврат;	
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСБизнесПроцессамиКлиент.ПроверитьСрокВыполненияПроцессаПередСтартом(
			Объект, ЭтаФорма, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Если старт процесса выполняется не после ответа на вопрос о сроке исполнения для одного из исполнителей,
		//	то выполняется проверка правильности указания сроков дл исполнителей.
		//	Если пользователь уже ответил на вопрос, то проверка пропускается.
		Если Не ПараметрыЗаписи.Свойство("СтартоватьЕслиСрокИсполнителяМеньшеТекущего") Тогда
			Исполнители = "";
			Для Каждого Строка Из Объект.Исполнители Цикл
				Если ЗначениеЗаполнено(Строка.СрокИсполнения) И Строка.СрокИсполнения < НачалоДня(Объект.Дата) Тогда 
					Исполнители = Исполнители + Строка(Строка.Исполнитель) + ", ";
				КонецЕсли;	
			КонецЦикла;
			Если Исполнители <> "" Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Срок исполнения для %1 меньше даты создания процесса. 
						|Выполнить запуск процесса?'"),
					Лев(Исполнители, СтрДлина(Исполнители) - 1));
				Оп = Новый ОписаниеОповещения("ПередЗаписьюПриСтартеЗавершениеВопросаОСрокеИсполнителя", ЭтотОбъект, ПараметрыЗаписи);
				ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет); 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Стартован И Модифицированность Тогда
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		И НЕ Объект.Стартован
		И Модифицированность
		И ЗначениеЗаполнено(НастройкаОтложенногоСтарта)
		И НастройкаОтложенногоСтарта.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту") Тогда
			
		ПараметрыЗаписи.Вставить("ИзменениеОтложенногоПроцесса", Истина);
		ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СрокИсполненияПроцесса = МинимальныйСрокИсполненияПроцесса();
		ОтложенныйСтартБизнесПроцессовКлиент.ПроверитьСоответствиеСрокаИсполненияПроцессаИДатыОтложенногоСтарта(
			Отказ, ЭтаФорма, НастройкаОтложенногоСтарта, ПараметрыЗаписи, СрокИсполненияПроцесса);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИсполнениеВыполнениеКомандыСтартовать");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик закрытия формы с вопросом о необходимости старта процесса, если общий срок меньше текущей даты.
// Параметры:
//	Результат - КодВозвратаДиалога - результат ответа пользователя
//	Параметры - Структура - параметры, переданные в обработчик перед открытием вопроса. В данном случае это 
//							параметры записи формы
&НаКлиенте
Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке(Результат, Параметры) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке(
		Результат, Параметры, ЭтаФорма);
	
КонецПроцедуры

// Обработчик закрытия формы с вопросом о необходимости старта процесса, 
//	если срок для какого-то исполнителя меньше текущей даты.
// Параметры:
//	Результат - КодВозвратаДиалога - результат ответа пользователя
//	Параметры - Структура - параметры, переданные в обработчик перед открытием вопроса. В данном случае это 
//							параметры записи формы
&НаКлиенте
Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОСрокеИсполнителя(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил положительно, то сохраняем результат его ответа и заново
		//	запускаем процесс записи карточки процесса с параметром "старт"
		Параметры.Вставить("СтартоватьЕслиСрокИсполнителяМеньшеТекущего", Истина);
		Если Записать(Параметры) Тогда
			Закрыть();
		КонецЕсли;	
	Иначе	
		// Если пользователь ответил отрицательно на данный вопрос, то сбросим его ответ на все предыдущие вопросы,
		//	чтобы при следующем старте процесса все вопросы начались заново.
		Параметры.Удалить("СтартоватьПриЗанятыхФайлахДокументов");
		Параметры.Удалить("СтартоватьПриЗанятыхФайлах");
		Параметры.Удалить("СтартоватьЕслиОбщийСрокМеньшеТекущего");
		Параметры.Удалить("СтартоватьЕслиСрокИсполнителяМеньшеТекущего");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессами.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессами.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(Объект.Ссылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
		// проверка заполнения полей
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно И Не ЗначениеЗаполнено(Строка.ПорядокИсполнения) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено поле ""Порядок исполнения"" в строке %1 списка исполнителей!'"), Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
				"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].ПорядокСогласования",, Отказ);

		КонецЕсли;
	КонецЦикла;
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
	Если ПараметрыЗаписи.Свойство("ПереносСрока") И ПараметрыЗаписи.ПереносСрока Тогда
		ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ТекущийОбъект, ПараметрыЗаписи);	
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ОповеститьОбИзменении(СтрокаПредмета.Предмет);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	ЗаполнитьШаг(Объект.Исполнители);
	
	// Если пользователь отвечал на вопрос при старте процесса, то дальнейший 
	//	старт процесса выполняется неинтерактивно. В этом случае необходимо показать окно оповещения
	//	и добавить ссылку на процесс в историю.
	Если ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлахДокументов")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлах")
		Или ПараметрыЗаписи.Свойство("СтартоватьЕслиОбщийСрокМеньшеТекущего")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
		Или ПараметрыЗаписи.Свойство("ЗаписатьБезСоответствияСрокаИсполненияПроцессаИДатыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("СтартоватьЕслиСрокИсполнителяМеньшеТекущего") Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Старт'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	Элементы.ИсполнителиСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно"))
		И ЗначениеЗаполнено(Объект.СрокИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПричинаПрерыванияНажатие(Элемент)
		
	КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	СтарыйВариантИсполнения = ПредыдущийВариантИсполнения;
	
	РаботаСБизнесПроцессамиКлиент.ПриИзмененииВариантаИсполнения(
		Объект.ВариантИсполнения,
		ПредыдущийВариантИсполнения,
		Элементы.ИсполнителиСрокИсполнения,
		Объект.Исполнители);
		
	Если СтарыйВариантИсполнения <> Объект.ВариантИсполнения
		И СтарыйВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностей(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЗаполнитьПоПроектнойЗадачеНаСервере(Объект.ПроектнаяЗадача);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтартОтложенТекстНажатие(Элемент)
	
	ОтложенныйСтартБизнесПроцессовКлиент.ПоказатьПричинуОтменыОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля Проверяющий

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(Элемент,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Проверяющий,,Истина,,,
		Объект.ОсновнойОбъектАдресацииПроверяющего, Объект.ДополнительныйОбъектАдресацииПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыПроверяющего);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(Элемент,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Контролер,,,,, 
		Объект.ОсновнойОбъектАдресацииКонтролера, Объект.ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыОписаниеПриИзменении_Продолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор(),, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПредметыПредметПриИзменении();
	Иначе
		ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОбновитьДоступностьКомандПеремещения();
	Элементы.ИсполнителиСрокВычисляемый.ТолькоПросмотр = 
			ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
			И НЕ ТекущиеДанные.Пройден;
	Если ВестиУчетПереносаСроков Тогда
		Элементы.ИсполнителиИзменитьСрокЗадачи.Доступность = 
			ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
			И НЕ ТекущиеДанные.Пройден;
		Элементы.ИсполнителиСрокИсполнения.ТолькоПросмотр = 
			ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
			И НЕ ТекущиеДанные.Пройден;
		Элементы.ИсполнителиСрокИсполненияВремя.Доступность = Элементы.ИсполнителиСрокИсполнения.Доступность;
		Элементы.ИсполнителиСрокИсполненияВремя.ТолькоПросмотр = Элементы.ИсполнителиСрокИсполнения.ТолькоПросмотр;
		Элементы.ИсполнителиСрокВычисляемый.ТолькоПросмотр = Истина;
	КонецЕсли;

	Элементы.ИсполнителиДлительностьИсполненияДни.ТолькоПросмотр = Ложь;
	Элементы.ИсполнителиДлительностьИсполненияЧасы.ТолькоПросмотр = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
		И Не ТекущиеДанные.Пройден Тогда
		Элементы.ИсполнителиДлительностьИсполненияДни.ТолькоПросмотр = Истина;
		Элементы.ИсполнителиДлительностьИсполненияЧасы.ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ВсеПройдены = Истина;
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Не Строка.Пройден И ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) И НЕ РезультатВыполненияПроверялся(Объект, Строка.ЗадачаИсполнителя) Тогда 
			ВсеПройдены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ВсеПройдены И Объект.Стартован Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Все исполнители завершили свои задачи, добавление нового исполнителя невозможно!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
			Или Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
			Отказ = Истина;
			НоваяСтрока = Объект.Исполнители.Добавить();
			НоваяСтрока.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			НоваяСтрока.ДлительностьИсполненияДни = 1;
			НоваяСтрока.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего");
			ЗаполнитьШаг(Объект.Исполнители);
			ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
			РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
			Элементы.Исполнители.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ТекущиеДанные.Пройден Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение исполнителя невозможно!'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ВыделенныеСтроки = Элементы.Исполнители.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 1 Тогда 
			ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
			
			Если ДанныеСтроки.Пройден Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, удаление исполнителя невозможно!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				Если ДанныеСтроки.Пройден Тогда 
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Задача исполнителя %1 уже завершена, удаление исполнителя невозможно!'"),
						Строка(ДанныеСтроки.Исполнитель));
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		Если ВыделенныеСтроки.Количество() = Объект.Исполнители.Количество() Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'В списке исполнителей не останется ни одного исполнителя, удаление невозможно!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
			Элемент.ТекущиеДанные.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего");
		Иначе
			Элемент.ТекущиеДанные.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим");
		КонецЕсли;
		ЗаполнитьШаг(Объект.Исполнители);
		РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
			Объект.Исполнители,
			Элементы.Исполнители,
			Объект.ВариантИсполнения);
		ПриИзмененииСтрокТаблицыИсполнителей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		ПриИзмененииСтрокТаблицыИсполнителей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	Если Объект.Исполнители.Количество() = 1
		И ОтветственныйУстановлен Тогда
		РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
			Элементы.Исполнители,
			Элементы.НазначитьОтветственным,
			Объект.Исполнители,
			Модифицированность);
	КонецЕсли;
	
	ЗаполнитьШаг(Объект.Исполнители);
	ПриИзмененииСтрокТаблицыИсполнителей();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Объект.Стартован Тогда 
	
		РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ТекущиеДанные.Исполнитель,,,,,
			ТекущиеДанные.ОсновнойОбъектАдресации, 
			ТекущиеДанные.ДополнительныйОбъектАдресации);
		
	Иначе
		
		АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
		РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		 Возврат;
	КонецЕсли;	 
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	ТекущиеДанные.ОсновнойОбъектАдресации = Неопределено;
	ТекущиеДанные.ДополнительныйОбъектАдресации = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка исполнения невозможно!'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка исполнения невозможно!'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДлительностьИсполненияДниПриИзменении(Элемент)
	
	ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
	РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДлительностьИсполненияЧасыПриИзменении(Элемент)
	
	ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
	РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокВычисляемыйПриИзменении(Элемент)
	
	ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
	РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностейИСроков(Объект.Исполнители, ДатаНачалаОтсчета, Элементы.Исполнители.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные.СрокИсполнения = НачалоДня(ТекущиеДанные.СрокИсполнения) 
		И ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения) Тогда
		ТекущиеДанные.СрокИсполнения = КонецДня(ТекущиеДанные.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения) и ТекущиеДанные.СрокИсполнения < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		
		ЧасДаты = Час(ТекущиеДанные.СрокИсполнения);
		МинутаДаты = Минута(ТекущиеДанные.СрокИсполнения);
		СекундаДаты = Секунда(ТекущиеДанные.СрокИсполнения);
		
		ТекущиеДанные.СрокИсполнения = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
	ПометитьНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Стартован Тогда 
		Если ТекущиеДанные.Пройден 
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) И НЕ РезультатВыполненияПроверялся(Объект, ТекущиеДанные.ЗадачаИсполнителя)  
			ИЛИ ЗначениеЗаполнено(Объект.Исполнители[ТекущиеДанные.НомерСтроки-2].ЗадачаИсполнителя)
			И НЕ РезультатВыполненияПроверялся(Объект, Объект.Исполнители[ТекущиеДанные.НомерСтроки-2].ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача предыдущего исполнителя уже сформирована, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;		
	КонецЕсли;

    РаботаСБизнесПроцессамиКлиент.ПереместитьВверх(Элементы.Исполнители, Объект.Исполнители, Модифицированность);
	ОбновитьДоступностьКомандПеремещения();
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Стартован Тогда 
		Если ТекущиеДанные.Пройден 
			ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) И НЕ РезультатВыполненияПроверялся(Объект, ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка исполнителей невозможно!'"));


			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьВниз(Элементы.Исполнители, Объект.Исполнители, Модифицированность);
	ОбновитьДоступностьКомандПеремещения();
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		Элементы.Исполнители,
		Элементы.НазначитьОтветственным,
		Объект.Исполнители,
		Модифицированность);
	ЗаполнитьШаг(Объект.Исполнители);
	ОбновитьФлагУстановкиОтветственного();
	ОбновитьДоступностьКомандПеремещения();
	ОчиститьСообщения();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);	
	ШаблоныПоПредметам.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныИсполнения", Ложь));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныИсполнения", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		УстановитьДоступностьПоШаблону();
		Модифицированность = Истина;
	КонецЕсли;
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводОписанияЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура("ОписаниеЗадачи", Элементы.Исполнители.ТекущиеДанные.Описание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииВводаОписанияЗадачи", ЭтотОбъект);
	ОткрытьФорму(
		"БизнесПроцесс.Исполнение.Форма.ВводОписанияЗадачиИсполнителя",
		ПараметрыФормы, 
		Элементы.Исполнители,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик завершения ввода описания задачи исполнителя в отдельной форме.
&НаКлиенте
Процедура ПриЗавершенииВводаОписанияЗадачи(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Элементы.Исполнители.ТекущиеДанные.Описание = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтложенныйСтарт(Команда)
	
	СрокИсполненияПроцесса = МинимальныйСрокИсполненияПроцесса();
	КомандыРаботыСБизнесПроцессамиКлиент.НастроитьОтложенныйСтарт(ЭтаФорма, СрокИсполненияПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокПроцесса(Команда)
	
	ПереносСроковВыполненияЗадачКлиент.ОткрытьФормуПереносаСрокаПроцесса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Элементы.Исполнители.ТекущиеДанные.ЗадачаИсполнителя);
	ПараметрыФормы.Вставить("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
	ОткрытьФорму(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаПереносСрокаЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновной(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения
		("ДобавитьОсновнойПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновнойПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязательноЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатВыполненияПроверялся(Объект, ЗадачаИсполнителя)
	
	РезультатВыполненияПроверялся = Ложь;
	Для каждого СтрокаРезультатВыполнения Из Объект.РезультатыПроверки Цикл
		Если СтрокаРезультатВыполнения.ЗадачаИсполнителя = ЗадачаИсполнителя Тогда
			РезультатВыполненияПроверялся = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатВыполненияПроверялся;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.ИсполнителиСрокИсполнения.Видимость = Ложь;
	Элементы.ИсполнителиСрокИсполненияВремя.Видимость = Ложь;
	Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Ложь;
	Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = Ложь;
	Элементы.ИсполнителиСрокВычисляемый.Видимость = Ложь;
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.ИсполнителиСрокВычисляемый.Видимость = Истина;
	ИначеЕсли Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.ИсполнителиСрокВычисляемый.Видимость = Истина;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиСрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	КонецЕсли;

	Элементы.ИсполнителиСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно)
		И ЗначениеЗаполнено(Объект.СрокИсполнения);
		
	ПереносСроковВыполненияЗадач.УстановкаДоступностиЭлементовФормы(Объект, Элементы);
	
	Если Объект.Стартован Тогда 
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.ЗаполнитьПоШаблону.Доступность = Ложь;
		Элементы.ВариантИсполнения.ТолькоПросмотр = Истина;
		Элементы.НазначитьОтветственным.Доступность = Ложь;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	Если Объект.Завершен
		ИЛИ Не ПравоНаИзменение Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.Проверяющий.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
		Элементы.Контролер.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = НЕ Объект.Стартован
			И НЕ Элементы.Исполнители.ТолькоПросмотр;
		Элементы.ВариантИсполнения.Доступность = НЕ Объект.Стартован
			И НЕ Элементы.Исполнители.ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.Длительность.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
 	ОбновитьФлагУстановкиОтветственного();
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессами.ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект)
	
	Если Не Объект.Стартован Тогда
		#Если Сервер Тогда
			Возврат ТекущаяДатаСеанса();
		#Иначе
			Возврат ТекущаяДата();
		#КонецЕсли
	КонецЕсли;
	
	Результат = Объект.ДатаНачала;
	Для Каждого РезультатПроверки Из Объект.РезультатыПроверки Цикл
		ДатаПроверки = РезультатПроверки.ЗадачаПроверяющего.ДатаИсполнения;
		Если ДатаПроверки > Результат Тогда
			Результат = ДатаПроверки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	РаботаСБизнесПроцессами.ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, Объект.Исполнители);	
	Шаг = 1;
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		Исполнитель.Шаг = Шаг;
		Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			Исполнитель.Шаг = Шаг;
			Шаг = Шаг + 1;
			Если Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияДни)
				И Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияЧасы) Тогда
				Исполнитель.ДлительностьИсполненияДни = 1;
			КонецЕсли;
		ИначеЕсли Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			Исполнитель.Шаг = Шаг;
		КонецЕсли;
	КонецЦикла;
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно	
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Шаблон, ЭтаФорма);
	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители); 
	УстановитьДоступность();
	
	// Заполняем строковое представление участников
	ПроверяющийСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Проверяющий,
		Объект.ОсновнойОбъектАдресацииПроверяющего,
		Объект.ДополнительныйОбъектАдресацииПроверяющего);
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПроектнойЗадачеНаСервере(ПроектнаяЗадача) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоПроектнойЗадаче(ПроектнаяЗадача);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.Контролер) Тогда 
		Элементы.Контролер.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Контролер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Элементы.Контролер.ТолькоПросмотр = Элементы.Контролер.ТолькоПросмотр ИЛИ ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Объект.Проверяющий) Тогда 
		Элементы.Проверяющий.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Проверяющий.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Элементы.Проверяющий.ТолькоПросмотр = Элементы.Проверяющий.ТолькоПросмотр ИЛИ ТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда 
		Элементы.СрокИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполнения.ТолькоПросмотр = Ложь;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		Элементы.Исполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВверх.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВниз.Доступность = ДоступностьПоШаблону;
		Элементы.НазначитьОтветственным.Доступность = ДоступностьПоШаблону;
		Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Доступность = ДоступностьПоШаблону;
		Элементы.ВариантИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Подобрать.Доступность = Истина;
		Элементы.ПереместитьВверх.Доступность = Истина;
		Элементы.ПереместитьВниз.Доступность = Истина;
		Элементы.НазначитьОтветственным.Доступность = Истина;
		Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Доступность = Истина;
		Элементы.ВариантИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаг(Таблица)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Таблица);	
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагУстановкиОтветственного()
	
	ОтветственныйУстановлен = Ложь;
	Если Объект.Исполнители.Количество() > 0
		И Объект.Исполнители[0].Ответственный Тогда
		ОтветственныйУстановлен = Истина;
	КонецЕсли;
	
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	Если Элементы.Исполнители.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	Элементы.НазначитьОтветственным.Пометка = Ложь;
	Элементы.НазначитьОтветственным.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = Объект.Исполнители.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветственныйУстановлен Тогда
		ВерхняяГраница = 2;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 3;
	Иначе
		ВерхняяГраница = 1;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 2;
	КонецЕсли;
	
	НижняяГраница = КоличествоИсполнителей;
	
	Если КоличествоИсполнителей >= МинимальноеЧислоИсполнителейДляИзмененияПорядка Тогда
		
		Если ТекущиеДанные.НомерСтроки < ВерхняяГраница Тогда
		ИначеЕсли ТекущиеДанные.НомерСтроки = ВерхняяГраница Тогда
			Элементы.ПереместитьВниз.Доступность = Истина;
		ИначеЕсли ТекущиеДанные.НомерСтроки = НижняяГраница Тогда
			Элементы.ПереместитьВверх.Доступность = Истина;
		Иначе
			Элементы.ПереместитьВверх.Доступность = Истина;
			Элементы.ПереместитьВниз.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Элементы.НазначитьОтветственным.Доступность = 
		ТекущиеДанные.НомерСтроки = 1 
		И КоличествоИсполнителей > 1
		И НЕ Объект.Стартован;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = Объект.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = Объект.Проект.ЕдиницаТрудозатратЗадач;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);
	Элементы.ИсполнителиТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
	Элементы.ТрудозатратыПланПроверяющего.Заголовок = ЕдиницаТрудозатратСтр;
	Элементы.ТрудозатратыПланКонтролера.Заголовок = ЕдиницаТрудозатратСтр;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСрокиЗадач(ВыполнитьЧтение = Ложь, ВыполнитьЗапись = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыполнитьЧтение Тогда 
		Прочитать();
	КонецЕсли;
	
    РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Объект.Исполнители);
	
	// установка фактических сроков исполнения
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
		Для Каждого Исполнитель Из Объект.Исполнители Цикл
			Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				Исполнитель.СрокИсполнения = Исполнитель.ЗадачаИсполнителя.СрокИсполнения;
			КонецЕсли;
		КонецЦикла;
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностей(Объект.Исполнители, ДатаНачалаОтсчета);	
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(Ссылка)
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
	Отказ, ПараметрыЗаписи, ОткрытьФормуНастройкиОтложенногоСтарта = Ложь) Экспорт
	
	РаботаСБизнесПроцессамиКлиент.ПроверитьКорректностьЗаполнения(
		Объект.Ссылка,
		Объект.Исполнители, 
		Объект.СрокИсполнения, 
		Объект.ВариантИсполнения, 
		"Объект.СрокИсполнения",
		"Объект.Исполнители",
		Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовКлиент.ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
		Отказ, ПараметрыЗаписи, ЭтаФорма, ОткрытьФормуНастройкиОтложенногоСтарта);
	
КонецПроцедуры

// Получает минимальный срок исполнения процесса
//
// Возвращаемое значение:
//   - Дата
//
&НаКлиенте
Функция МинимальныйСрокИсполненияПроцесса()
	
	МинимальныйСрок = Объект.СрокИсполнения;
	
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		
		Если НЕ ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(МинимальныйСрок) Тогда
			МинимальныйСрок = Исполнитель.СрокИсполнения;
		ИначеЕсли Исполнитель.СрокИсполнения < МинимальныйСрок Тогда
			МинимальныйСрок = Исполнитель.СрокИсполнения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальныйСрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса() Экспорт
	
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
	Элементы.Проверяющий.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.Контролер.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Прочитать();
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	ПолучитьИнструкции();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 120);
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура("Проверяющий, Контролер", 
										  Объект.Проверяющий, Объект.Контролер);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

// Выполняет действия при добавлении/удалении строк таблицы Исполнители
//
&НаКлиенте
Процедура ПриИзмененииСтрокТаблицыИсполнителей()
	
	КоличествоИсполнителей = Объект.Исполнители.Количество();
	
	// Установка доступности кнопки НазначитьОтветственным
	Элементы.НазначитьОтветственным.Доступность = Ложь;
	Если Объект.Исполнители.Количество() > 1
		И Элементы.Исполнители.ТекущиеДанные <> Неопределено
		И Элементы.Исполнители.ТекущиеДанные.НомерСтроки = 1 Тогда
		Элементы.НазначитьОтветственным.Доступность = НЕ Объект.Стартован;
	КонецЕсли;

	ОтветственныйУстановлен = Ложь;
	Если Объект.Исполнители.Количество() > 0
		И Объект.Исполнители[0].Ответственный Тогда
		ОтветственныйУстановлен = Истина;
	КонецЕсли;

	// Расчет сроков для таблицы Исполнители
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ Объект.ВариантИсполнения =  ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ДатаНачалаОтсчета = ПолучитьДатуНачалаОтсчетаПриВычисленииСроков(Объект);
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ДатаНачалаОтсчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
