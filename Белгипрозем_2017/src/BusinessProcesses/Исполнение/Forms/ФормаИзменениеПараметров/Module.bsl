

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыВыбор(Объект.Предметы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДоступность()
			
	Элементы.ИсполнителиСрокИсполнения.Видимость = Ложь;
	Элементы.ИсполнителиСрокИсполненияВремя.Видимость = Ложь;
	Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Ложь;
	Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = Ложь;
	Элементы.ИсполнителиСрокВычисляемый.Видимость = Ложь;

	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = Истина;
		Элементы.ИсполнителиСрокВычисляемый.Видимость = Истина;
	ИначеЕсли Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиДлительностьИсполненияЧасы.Видимость = Истина;
		Элементы.ИсполнителиСрокВычисляемый.Видимость = Истина;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиСрокИсполненияВремя.Видимость = Истина;
	КонецЕсли;
	Элементы.ИсполнителиСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно)
		И ЗначениеЗаполнено(Объект.СрокИсполнения);
	Если Объект.Исполнители.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = НЕ Элементы.Исполнители.ТолькоПросмотр;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	ОбновитьФлагУстановкиОтветственного();
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	РаботаСБизнесПроцессами.ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, Объект.Исполнители);	
	Шаг = 1;
	Для Каждого Исполнитель Из Объект.Исполнители Цикл
		Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			Исполнитель.Шаг = Шаг;
			Шаг = Шаг + 1;
			Если Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияДни)
				И Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияЧасы) Тогда
				Исполнитель.ДлительностьИсполненияДни = 1;
			КонецЕсли;
		ИначеЕсли Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			Исполнитель.Шаг = Шаг;
		КонецЕсли;
	КонецЦикла;
	Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно	
		ИЛИ Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда 
		Элементы.СрокИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполнения.ТолькоПросмотр = Ложь;
		Элементы.СрокИсполненияВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		Элементы.Исполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВверх.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВниз.Доступность = ДоступностьПоШаблону;
		Элементы.НазначитьОтветственным.Доступность = ДоступностьПоШаблону;
		Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Доступность = ДоступностьПоШаблону;
		Элементы.ВариантИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Подобрать.Доступность = Истина;
		Элементы.ПереместитьВверх.Доступность = Истина;
		Элементы.ПереместитьВниз.Доступность = Истина;
		Элементы.НазначитьОтветственным.Доступность = Истина;
		Элементы.ИсполнителиКонтекстноеМенюВводОписанияЗадачи.Доступность = Истина;
		Элементы.ВариантИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаг(Таблица)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Таблица);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагУстановкиОтветственного()
	
	ОтветственныйУстановлен = Ложь;
	Если Объект.Исполнители.Количество() > 0
		И Объект.Исполнители[0].Ответственный Тогда
		ОтветственныйУстановлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	Если Элементы.Исполнители.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если ТекущиеДанные.НомерСтроки > 2 ИЛИ ТекущиеДанные.НомерСтроки = 2 И НЕ ОтветственныйУстановлен Тогда
		Элементы.ПереместитьВверх.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 И НЕ ОтветственныйУстановлен 
		ИЛИ ТекущиеДанные.НомерСтроки > 1 И ТекущиеДанные.НомерСтроки < Объект.Исполнители.Количество() Тогда
		Элементы.ПереместитьВниз.Доступность = Истина;
	КонецЕсли;

	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;	
	Элементы.НазначитьОтветственным.Доступность = ТекущиеДанные.НомерСтроки = 1;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	Если Объект.Ссылка.Пустая() И Объект.Контролер = Неопределено Тогда 
		Объект.Контролер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
		
	ПредыдущийВариантИсполнения = Объект.ВариантИсполнения;
		
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ИсполнителиСрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	// Заполнение исполнителей из результатов проверки
	БуферИсполнителей = Новый Массив;
	ПараметрыОтбора = Новый Структура("НомерИтерации", Объект.НомерИтерации);
	НайденныеСтроки = Объект.РезультатыПроверки.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из  НайденныеСтроки Цикл
		Если НайденнаяСтрока.ОтправленоНаДоработку Тогда
			ПараметрыОтбораИсполнителей = Новый Структура("ЗадачаИсполнителя", НайденнаяСтрока.ЗадачаИсполнителя);
			НайденныеИсполнители = Объект.Исполнители.НайтиСтроки(ПараметрыОтбораИсполнителей);
			Для Каждого НайденныйИсполнитель Из НайденныеИсполнители Цикл
				БуферИсполнителей.Добавить(НайденныйИсполнитель);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Исполнители.Очистить();
	
	Для каждого ИсполнительБуфера Из БуферИсполнителей Цикл
		НоваяСтрока = Объект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсполнительБуфера);
	КонецЦикла;
	
	ОбновитьФлагУстановкиОтветственного();
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьШаг(Объект.Исполнители);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// проверка заполнения полей
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Объект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно И Не ЗначениеЗаполнено(Строка.ПорядокИсполнения) Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено поле ""Порядок исполнения"" в строке %1 списка исполнителей!'"), Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
				"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].ПорядокСогласования",, Отказ);

		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 2
		И Объект.Исполнители[0].Ответственный Тогда
		Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ЗаполнитьШаг(Объект.Исполнители);
	ОбновитьДоступностьКомандПеремещения();
	Модифицированность = Истина;
	
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 
		И ТекущиеДанные.Ответственный Тогда
		Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.НомерСтроки = Объект.Исполнители.Количество() Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ЗаполнитьШаг(Объект.Исполнители);
	ОбновитьДоступностьКомандПеремещения();
	Модифицированность = Истина;
	
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Если ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры <> Неопределено 
		И ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Свойство(
			"УникальныйИдентификаторФормыИзмененияПараметров") Тогда
		
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.
			УникальныйИдентификаторФормыИзмененияПараметров = УникальныйИдентификатор;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		Объект.Исполнители, "Исполнитель");
	ОчиститьСообщения();
	
	Если ЗаписатьНаСервереВПривилегированномРежиме() Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			Закрыть(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервереВПривилегированномРежиме()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Записать();
	
КонецФункции

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.Исполнители.ТекущиеДанные.Исполнитель,,,,,
		Элементы.Исполнители.ТекущиеДанные.ОсновнойОбъектАдресации, Элементы.Исполнители.ТекущиеДанные.ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки > 1 И НЕ ТекущиеДанные.Ответственный Тогда
		Текст = НСтр("ru = 'Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Строка.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда 
			Строка.Ответственный = Не Строка.Ответственный;
		ИначеЕсли Строка.Ответственный Тогда
			Строка.Ответственный = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	ЗаполнитьШаг(Объект.Исполнители);
	Модифицированность = Истина;
	ОчиститьСообщения();
	ОбновитьФлагУстановкиОтветственного();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
    ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
			
	Если НоваяСтрока Тогда 
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) 
		И Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	Элементы.ИсполнителиСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно"))
		И ЗначениеЗаполнено(Объект.СрокИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные.СрокИсполнения = НачалоДня(ТекущиеДанные.СрокИсполнения) Тогда
		ТекущиеДанные.СрокИсполнения = КонецДня(ТекущиеДанные.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения) и ТекущиеДанные.СрокИсполнения < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		
		ЧасДаты = Час(ТекущиеДанные.СрокИсполнения);
		МинутаДаты = Минута(ТекущиеДанные.СрокИсполнения);
		СекундаДаты = Секунда(ТекущиеДанные.СрокИсполнения);
		
		ТекущиеДанные.СрокИсполнения = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	СтарыйВариантИсполнения = ПредыдущийВариантИсполнения;
	
	РаботаСБизнесПроцессамиКлиент.ПриИзмененииВариантаИсполнения(
		Объект.ВариантИсполнения,
		ПредыдущийВариантИсполнения,
		Элементы.ИсполнителиСрокИсполнения,
		Объект.Исполнители);
		
	Если СтарыйВариантИсполнения <> Объект.ВариантИсполнения
		И СтарыйВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностей(Объект.Исполнители, ТекущаяДата());
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	Если Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно")
		ИЛИ Объект.ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДлительностьИсполненияДниПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДлительностьИсполненияЧасыПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(Объект.Исполнители, ТекущаяДата());
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриИзменении(Элемент)
	
	ЗаполнитьШаг(Объект.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводОписанияЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура("ОписаниеЗадачи", Элементы.Исполнители.ТекущиеДанные.Описание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеПослеВводаОписанияЗадачиИсполнителя",
		ЭтотОбъект);
		
	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ВводОписанияЗадачиИсполнителя", ПараметрыФормы,
		Элементы.Исполнители,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеПослеВводаОписанияЗадачиИсполнителя(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Элементы.Исполнители.ТекущиеДанные.Описание = Результат;
	КонецЕсли;
	
КонецПроцедуры
