#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВариантИсполнения,
		|Исполнители,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|СрокИсполнения");
		
	ВариантИсполнения = РеквизитыПроцесса.ВариантИсполнения;
	Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Проверяющий = РеквизитыПроцесса.Проверяющий;
	ОсновнойОбъектАдресацииПроверяющего = РеквизитыПроцесса.ОсновнойОбъектАдресацииПроверяющего;
	ДополнительныйОбъектАдресацииПроверяющего = РеквизитыПроцесса.ДополнительныйОбъектАдресацииПроверяющего;
	Контролер = РеквизитыПроцесса.Контролер;
	ОсновнойОбъектАдресацииКонтролера = РеквизитыПроцесса.ОсновнойОбъектАдресацииКонтролера;
	ДополнительныйОбъектАдресацииКонтролера = РеквизитыПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	СрокИсполнения = РеквизитыПроцесса.СрокИсполнения;
	
	Цвет_ЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.Цвет_ЗакрытыеНеактуальныеЗаписи();
	
	СмешанныйВариантИсполнения = 
			ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, НСтр("ru = 'Общий срок:'"), Формат(СрокИсполнения, ФорматСрока), "");
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Исполнители.Количество() > 0 Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если СмешанныйВариантИсполнения Тогда
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Шаг'"));
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""70"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Исполнители Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			Если СмешанныйВариантИсполнения Тогда
				
				Если Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НомерШага = НомерШага + 1;
				КонецЕсли;
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
				HTMLТекст = HTMLТекст + "</td>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			
			Если Исполнитель.Ответственный Тогда
				HTMLТекст = HTMLТекст + "<B>";
			КонецЕсли;
			
			ЦветТекста = "";
			Если Исполнитель.Пройден
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + Цвет_ЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = Цвет_ЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.Исполнитель, ЦветТекста);
			
			Если ЗначениеЗаполнено(Исполнитель.ОсновнойОбъектАдресации) Тогда
				HTMLТекст = HTMLТекст + ", ";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.ОсновнойОбъектАдресации, ЦветТекста);
			КонецЕсли;
			Если ЗначениеЗаполнено(Исполнитель.ДополнительныйОбъектАдресации) Тогда
				HTMLТекст = HTMLТекст + ", ";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.ДополнительныйОбъектАдресации, ЦветТекста);
			КонецЕсли;
			
			Если Исполнитель.Пройден 
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			
			Если Исполнитель.Ответственный Тогда
				HTMLТекст = HTMLТекст + "</B>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""70"">";
			Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Формат(Исполнитель.СрокИсполнения, ФорматСрока), "");
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(ВариантИсполнения) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Направлять: %1'");
			ПредставлениеРеквизитаНаправлять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРеквизитаНаправлять,
				Строка(ВариантИсполнения));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРеквизитаНаправлять, Цвет_ЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Исполнение",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Проверяющий: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Проверяющий, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииПроверяющего) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресацииПроверяющего, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресацииПроверяющего) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресацииПроверяющего, "");
		КонецЕсли;
	КонецЕсли;
	
	// Контролер
	Если ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресацииКонтролера, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресацииКонтролера, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиИсполнителя";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя";	
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиКонтролера";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
		ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиПроверяющего";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры	

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		Если ПараметрыВыполнения.Свойство("ОтправленоНаДоработку") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			СтруктуруОтбора = Новый Структура;
			СтруктуруОтбора.Вставить("НомерИтерации", БизнесПроцессОбъект.НомерИтерации);
			
			СтрокиДляОбработки = БизнесПроцессОбъект.РезультатыПроверки.НайтиСтроки(СтруктуруОтбора);
			
			Для Каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
				
				СтрокаДляОбработки.ОтправленоНаДоработку = Истина;
				СтрокаДляОбработки.КомментарийПроверяющего = ПараметрыВыполнения.РезультатВыполнения;
				
			КонецЦикла;
			
			БизнесПроцессОбъект.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Исполнить
	 Или ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда 
	 
	    БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		СтруктураПоиска = Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка);
		НайденныеСтроки = БизнесПроцессОбъект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
				НайденнаяСтрока.Исполнитель = Реквизиты.Исполнитель;
				НайденнаяСтрока.ОсновнойОбъектАдресации = Неопределено;
				НайденнаяСтрока.ДополнительныйОбъектАдресации = Неопределено;
			Иначе
				НайденнаяСтрока.Исполнитель = Реквизиты.РольИсполнителя;
				НайденнаяСтрока.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресации;
				НайденнаяСтрока.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			БизнесПроцессОбъект.Записать();
		КонецЕсли;	
	 
 	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Проверяющий = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего = Неопределено;
		Иначе
			БизнесПроцессОбъект.Проверяющий = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
	 
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда  
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Контролер = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииКонтролера = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера = Неопределено;
		Иначе
			БизнесПроцессОбъект.Контролер = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресацииКонтролера = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВедущийБизнесПроцесс, 
		"Автор, 
		| Контролер, 
		| Проверяющий, 
		| ОсновнойОбъектАдресацииКонтролера, 
		| ДополнительныйОбъектАдресацииКонтролера, 
		| ОсновнойОбъектАдресацииПроверяющего, 
		| ДополнительныйОбъектАдресацииПроверяющего");
		
	// Автор	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	// Контролер
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		Если ТипЗнч(Реквизиты.Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Реквизиты.Контролер);
		Иначе
			Ст = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Реквизиты.Контролер,
				Реквизиты.ОсновнойОбъектАдресацииКонтролера,
				Реквизиты.ДополнительныйОбъектАдресацииКонтролера);
				
			МассивПользователей.Добавить(Ст);	
		КонецЕсли;	
	КонецЕсли;
	
	// Проверяющий
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		Если ТипЗнч(Реквизиты.Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Реквизиты.Проверяющий);
		Иначе
			Ст = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Реквизиты.Проверяющий,
				Реквизиты.ОсновнойОбъектАдресацииПроверяющего,
				Реквизиты.ДополнительныйОбъектАдресацииПроверяющего);
				
			МассивПользователей.Добавить(Ст);	
		КонецЕсли;	
	КонецЕсли;
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"Автор,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера,
			|Проверяющий,
			|ОсновнойОбъектАдресацииПроверяющего,
			|ДополнительныйОбъектАдресацииПроверяющего");
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииПроверяющего", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииПроверяющего", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииКонтролера,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииКонтролера);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииПроверяющего,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииПроверяющего);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
		ТаблицаНабора, БизнесПроцесс, "Исполнители");
		
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);
		
КонецПроцедуры

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныИсполнения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для выдачи простых поручений нескольким сотрудникам с возможностью определения порядка, настройки контроля и проверки результата выполнения.'");
	
КонецФункции

// Возвращает текстовое представление срока выполнения процесса
Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения(Ссылка) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокИсполнения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СрокИсполнения");
	
	СтрокаФормата = "ДФ=dd.MM.yyyy";
	Если ИспользоватьВремяВСрокахЗадач Тогда
		СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм'";	
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат Формат(СрокИсполнения, СтрокаФормата);
	КонецЕсли;
	
	Возврат НСтр("ru = 'Срок не указан'");
	
КонецФункции

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
//	автоматический перенос сроков при согласовании заявки на перенос автором (истина),
//	или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ВариантИсполнения, ГлавнаяЗадача, ВедущаяЗадача");
	ПроцессВедущейЗадачи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыПроцесса.ВедущаяЗадача, "БизнесПроцесс");
	ЭтотПроцессВложенВКомплексный = Ложь;
	
	// Если это процесс в рамках комплексного, то изменение его срока должно вестись из карточки процесса вручную.
	Если ТипЗнч(ПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если это параллельное исполнение, то изменение срока возможно провести автоматически из карточки
	//	задачи рассмотрения заявки на перенос срока.
	Если РеквизитыПроцесса.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		Возврат Истина;	
	КонецЕсли;
	
	// Во всех других случаях оставляется только ручное изменение срока через карточку процесса
	Возврат Ложь;
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Завершен");
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Процесс, 
		"Автор, 
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресацииКонтролера;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресацииКонтролера;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Проверяющий;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресацииПроверяющего;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресацииПроверяющего;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
			
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессСсылка, 
		"Автор, 
		| Контролер, 
		| Проверяющий, 
		| ДополнительныйОбъектАдресацииКонтролера, 
		| ДополнительныйОбъектАдресацииПроверяющего, 
		| ОсновнойОбъектАдресацииКонтролера, 
		| ОсновнойОбъектАдресацииПроверяющего");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииКонтролера);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииКонтролера);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.Проверяющий) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Проверяющий);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииПроверяющего);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииПроверяющего);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Исполнители
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Исполнители.Исполнитель,
		|	Исполнители.ОсновнойОбъектАдресации,
		|	Исполнители.ДополнительныйОбъектАдресации
		|ИЗ
		|	БизнесПроцесс.Исполнение.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПроцессСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", Выборка.Исполнитель);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Выборка.ОсновнойОбъектАдресации);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Выборка.ДополнительныйОбъектАдресации);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЦикла;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеСобытияФормат,
						Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
						Строка(Задача.Исполнитель));
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Исполнение.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Исполнить
		 Или ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОтветственноеИсполнение Тогда
		 
		Действие = НСтр("ru = 'Задача выполнена'");
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Проверить Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ЗадачиИсполнителей.Исполнитель,
			|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку,
			|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК Комментарий
			|ИЗ
			|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсполнителей
			|		ПО ИсполнениеРезультатыПроверки.ЗадачаИсполнителя = ЗадачиИсполнителей.Ссылка
			|ГДЕ
			|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего
			|	И ИсполнениеРезультатыПроверки.ОтправленоНаДоработку");
			
		Запрос.УстановитьПараметр("ЗадачаПроверяющего", Задача.Ссылка);
			
		ЕстьВозвраты = Ложь;
		ТекстРезультатаВыполнения = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоКомментариев = Выборка.Количество();
		й = 0;
		Пока Выборка.Следующий() Цикл
			
			й = й + 1;
			
			Если Выборка.ОтправленоНаДоработку Тогда
				ЕстьВозвраты = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстРезультатаВыполнения) Тогда
				ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Символы.ПС;
			КонецЕсли;
			
			Если КоличествоКомментариев > 1 Тогда
				ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Строка(й) + ". " 
											+ Строка(Выборка.Исполнитель) + ": ";
			КонецЕсли;
			
			ТекстРезультатаВыполнения = ТекстРезультатаВыполнения + Выборка.Комментарий;
								  
		КонецЦикла;
		
		Если ЕстьВозвраты Тогда
			РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
			Если КоличествоКомментариев > 1 Тогда
				Действие = НСтр("ru = 'Задачи возвращены на доработку'");
			Иначе
				Действие = НСтр("ru = 'Задача возвращена на доработку'");
			КонецЕсли;
		Иначе
			РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
			Действие = НСтр("ru = 'Задача завершена'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ":" + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Исполнители
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнители", "Исполнитель", "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации", 
		Ложь));
		
	// Проверяющий
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проверяющий", "ОсновнойОбъектАдресацииПроверяющего", "ДополнительныйОбъектАдресацииПроверяющего",
		Истина));
		
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер", "ОсновнойОбъектАдресацииКонтролера", "ДополнительныйОбъектАдресацииКонтролера",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект", Неопределено, Неопределено,
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Результат = "";
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ПроцессСсылка, , Истина);

	Если Не ЗначениеЗаполнено(Предметы) Тогда
		Возврат "";
	КонецЕсли;

	ПредметыСИзмененнымСостоянием = Новый Массив();
	
	Для каждого Предмет Из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			СостоянияДокумента = Делопроизводство.ПолучитьСостоянияДокумента(Предмет, ПроцессСсылка);
			Если ЗначениеЗаполнено(СостоянияДокумента) Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхПредметов = ПредметыСИзмененнымСостоянием.Количество();
	Если КоличествоИзмененныхПредметов = 0 Тогда
		Возврат "";
	КонецЕсли;

	Если КоличествоИзмененныхПредметов = 1 Тогда
		НаименованиеПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ПредметыСИзмененнымСостоянием[0], 
			"Наименование");
			
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У документа ""%1"" будет очищено состояние исполнения.'"),
			НаименованиеПредмета);
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У документов (%1) будет очищено состояние исполнения.'"),
			КоличествоИзмененныхПредметов);
	КонецЕсли;

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.Исполнение.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Исполнение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	ОписаниеРезультата = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Исполнить
		ИЛИ ТочкаМаршрута = ТочкиМаршрута.ОтветственноеИсполнение Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Исполнено'"));
			
		Результат.ИспользоватьКомментарий = Истина;
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Контролировать Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'"));
			
		Результат.ИспользоватьКомментарий = Ложь;
			
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Завершить'"));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Вернуть'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Участники = Новый Структура(
		"Автор,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Проверяющий,
		|ОсновнойОбъектАдресацииПроверяющего,
		|ДополнительныйОбъектАдресацииПроверяющего,
		|Исполнители");
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс,
			"Автор,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера,
			|Проверяющий,
			|ОсновнойОбъектАдресацииПроверяющего,
			|ДополнительныйОбъектАдресацииПроверяющего,
			|Исполнители");
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке,, "Исполнители");
		Участники.Исполнители = РеквизитыПроцессаПоСсылке.Исполнители.Выгрузить();
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс,, "Исполнители");
		Участники.Исполнители = Процесс.Исполнители.Выгрузить();
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

//////////////////////////////////////////////////////////
// Вспомогательные функции для общей формы ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт 
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру свойств, для последующей обработки в форме
// ОбщаяФорма.ЗадачиПоБизнесПроцессу
//
// Возвращаемое значение:
//   - Структура - описывает элементы формы и их свойства.
//
Функция СвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	НастройкиПолей = Новый Структура;
	
	НомерИтерации = Новый Структура;
	НомерИтерации.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("НомерИтерации", НомерИтерации);
	
	Возврат НастройкиПолей;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецЕсли