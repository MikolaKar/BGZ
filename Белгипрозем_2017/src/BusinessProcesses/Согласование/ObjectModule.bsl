#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыСогласования.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатСогласования = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
				Строка = Исполнители.Добавить();
				Строка.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Тема");
			Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Согласовать ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Согласовать'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		РаботаСВизамиСогласования.ЗаполнитьИсполнителейИзАктивныхВиз(ЭтотОбъект);
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.ЗаполнитьБизнесПроцессПоМероприятию(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокСогласования");
	КонецЕсли;	
	
	Для Каждого Строка Из Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Строка.Исполнитель.ВнешняяРоль Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
				ЭтотОбъект,
				"Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	КоличествоИсполнителей = Исполнители.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;

		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"),
					Строка(Строка2.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка2.ДополнительныйОбъектАдресации) Тогда 	
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке согласующих!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации),
						Строка(Строка2.ДополнительныйОбъектАдресации));
				ИначеЕсли ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке согласующих!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации)	);	
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"), 
						Строка(Строка2.Исполнитель));
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	// Проверка прав доступа участников процесса на предмет
	Если МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
		
		ПредметыДляПроверки = Мультипредметность.ПредметыДляДействийПроцесса(ЭтотОбъект);
		
		ВнешняяТранзакция = ТранзакцияАктивна();
		
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(ЭтотОбъект, ПредметыДляПроверки);
		
		// Проверка прав на предмет
		Если ПредметыДляПроверки.Количество() > 0 Тогда
			МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
				ЭтотОбъект, ПредметыДляПроверки, Отказ);
		КонецЕсли;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
		Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			НайденнаяСтрока = РезультатыСогласования.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
			НайденнаяСтрока.РезультатСогласования = ДополнительныеСвойства.РезультатСогласования;
		ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
			ПовторитьСогласование = ДополнительныеСвойства.ПовторитьСогласование;
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
			НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ДополнительныеСвойства.ПовторитьСогласование;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
		Если ПометкаУдаления Тогда 
			Для Каждого Предмет Из ПредметыДляУстановки Цикл
				ПриОткрепленииПредмета(Предмет);
			КонецЦикла;
		Иначе
			ВосстановитьСостояниеПредметов();
			ВосстановитьВизыБизнесПроцесса();
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущееСостояние = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Состояние");
	Если Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
		И Состояние <> ПредыдущееСостояние Тогда
		КомпенсироватьСостояниеПредметов();
	КонецЕсли;
	
	// срок исполнения датой
	ИспользоватьДатуИВремя = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	СрокИсполненияДатой = '00010101';
	Если Не Стартован Тогда 
		СрокИсполненияДатой = '00010101';
	ИначеЕсли Завершен Тогда 
		СрокИсполненияДатой = ДатаЗавершения;
	Иначе
		
		БизнесПроцессСтруктура = РаботаСБизнесПроцессамиКлиентСервер.ПолучитьДанныеПроцессаСогласование(ЭтотОбъект, Истина);
		МассивИсполнителей = БизнесПроцессСтруктура.МассивИсполнителей;
		
		Если ДополнительныеСвойства.Свойство("ДатаНачалаИтерации") Тогда 
			ДатаНачалаИтерации = ДополнительныеСвойства.ДатаНачалаИтерации;
		Иначе
			ДатаНачалаИтерации = '00010101';
		КонецЕсли;	
		
		РаботаСБизнесПроцессами.РассчитатьСрокиСогласованияДатой(МассивИсполнителей, БизнесПроцессСтруктура, ДатаНачалаИтерации);
		
		Для Каждого Строка Из МассивИсполнителей Цикл
			Если Не ЗначениеЗаполнено(Строка.СрокИсполненияДатой) Тогда 
				СрокИсполненияДатой = '00010101';
				Прервать;
			ИначеЕсли Строка.СрокИсполненияДатой > СрокИсполненияДатой Тогда 
				СрокИсполненияДатой = Строка.СрокИсполненияДатой;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	
	// Обработка рабочей группы	
	РаботаСБизнесПроцессами.СформироватьРабочуюГруппу(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// Работа с визами согласования.
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
		Для Каждого Предмет Из ПредметыДляУстановки Цикл
			Результат = РаботаСВизамиСогласования.ПроверитьПересечениеВизИИсполнителей(Предмет, Исполнители);
			Если Результат = "пересогласовать" Тогда 
				РаботаСВизамиСогласования.ПоместитьЗакрытиеВизыДокументаВИсторию(Предмет); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Для Каждого Предмет из ПредметыДляУстановки Цикл
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ТекущаяДатаСеанса(), 
			Перечисления.СостоянияДокументов.НаСогласовании, 
			Ссылка);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка);
	КонецЕсли;
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьСогласование = Ложь;
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
	КонецЦикла;	
	Записать();
	
	РаботаСВизамиСогласования.ОбработатьВизыПриНачалеИтерации(Ссылка);
	
КонецПроцедуры

Процедура СогласоватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Новый Массив;
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда 
				Продолжить;
			КонецЕсли;	
				
			МассивСтрок.Добавить(Строка);
			Прервать;
		КонецЦикла;	
	
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Если Строки.Количество() > 0 Тогда 
			МассивСтрок.Добавить(Строки[0]);
		КонецЕсли;	
		
		Для Инд = 1 По Строки.ВГраница() Цикл
			Если Строки[Инд].ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 
				МассивСтрок.Добавить(Строки[Инд]);
			Иначе	
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуСогласовать(Задача, Строка);
		
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
		
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыСогласования.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ДатаНачалаИтерации", ФормируемыеЗадачи[0].Дата);

	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура СогласоватьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		Записать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура УсловиеОбходЗавершен(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Результат = Истина;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
				
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				ЕстьНеСогласовано = Истина;
			КонецЕсли;	
		КонецЦикла;	
	
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Или ЕстьНеСогласовано Тогда 
			Результат = Истина;
			Возврат;
		КонецЕсли;	
			
		Результат = Ложь;
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		
		Если (Исполнители.Найти(Ложь, "Пройден") = Неопределено) Тогда 
			Результат = Истина;
			Возврат;
		КонецЕсли;	
			
		ЕстьНеСогласовано = Ложь;
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего И ЕстьНеСогласовано Тогда 
				Результат = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗначениеРезультата = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если ЗначениеРезультата = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если ЗначениеРезультата.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				ЕстьНеСогласовано = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Результат = Ложь;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен вариант согласования процесса ""%1""'"), 
			Строка(Ссылка));
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат согласования
	Если РезультатыСогласования.Количество() > 0 Тогда
		
		РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		Для Каждого Элемент Из РезультатыСогласования Цикл
			Если Элемент.НомерИтерации = НомерИтерации Тогда
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Элемент.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	Записать();
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина); 
	
	Если ОбрабатываемыеДокументы.Количество() > 0 Тогда
		
		ДатаИсполнения = ТекущаяДатаСеанса();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|ГДЕ
		|	РезультатыСогласования.Ссылка = &Ссылка
		|	И РезультатыСогласования.НомерИтерации = &НомерИтерации";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ДатаИсполнения = Выборка.ДатаИсполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	
	Для Каждого Предмет Из ОбрабатываемыеДокументы Цикл
		Если РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
		Иначе	
			СостояниеДокумента = Перечисления.СостоянияДокументов.Согласован;
		КонецЕсли;
		
		Если ИспользоватьВизыСогласования Тогда 
			// удаление виз исполнителей, до которых не дошло согласование
			УдаляемыеВизы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессу(Предмет, Ссылка);
			РаботаСВизамиСогласования.УдалитьВизы(УдаляемыеВизы);
			
			Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Предмет);
			ЕстьСНезаполненнымРезультатом = Ложь;
			Для Каждого Виза Из Визы Цикл
				Если Не ЗначениеЗаполнено(Виза.РезультатСогласования) И Виза.Источник <> Ссылка Тогда 
					ЕстьСНезаполненнымРезультатом = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЕстьНесогласованные = Ложь;
			Для Каждого Виза Из Визы Цикл
				Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					ЕстьНесогласованные = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСНезаполненнымРезультатом Тогда 
				СостояниеДокумента = Перечисления.СостоянияДокументов.НаСогласовании;
			ИначеЕсли ЕстьНесогласованные Тогда 
				СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
			КонецЕсли;
		Иначе 
			// Устанавливаем состояние, только если по предмету нет других активных согласований
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
			|ГДЕ
			|	СогласованиеПредметы.Ссылка <> &Ссылка
			|	И СогласованиеПредметы.Предмет = &Предмет
			|	И СогласованиеПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|	И СогласованиеПредметы.Ссылка.Стартован
			|	И НЕ СогласованиеПредметы.Ссылка.Завершен
			|	И НЕ СогласованиеПредметы.Ссылка.ПометкаУдаления
			|	И НЕ СогласованиеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
			|	И ИСТИНА В
			|			(ВЫБРАТЬ
			|				ИСТИНА
			|			ИЗ
			|				Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|			ГДЕ
			|				ЗадачаИсполнителя.БизнесПроцесс = СогласованиеПредметы.Ссылка
			|				И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать)
			|				И НЕ ЗадачаИсполнителя.Выполнена
			|				И НЕ ЗадачаИсполнителя.ПометкаУдаления)";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("Предмет", Предмет);
			Выборка = Запрос.Выполнить().Выбрать();
		
			Если Выборка.Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Предмет, 
			ДатаИсполнения, 
			СостояниеДокумента, 
			Ссылка);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект, БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если "Согласовано" и это вложенный процесс, 
	//	то задача Ознакомления создается в обработчике ПриЗавершении, 
	//	чтобы не препятствовать завершению процесса.
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
		И ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		БизнесПроцессВедущейЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			
		Если ТипЗнч(БизнесПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	Записать();
	
КонецПроцедуры

Процедура ПовторитьСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьСогласование;
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// Если "Согласовано" и это вложенный процесс, 
	//	то задача Ознакомления создается в обработчике ПриЗавершении, 
	//	чтобы не препятствовать завершению процесса.
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
		И ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		БизнесПроцессВедущейЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			
		Если ТипЗнч(БизнесПроцессВедущейЗадачи) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Возврат;
		КонецЕсли;
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуОзнакомиться(Задача);
		Задача.Записать();
		
		НоваяСтрока = РезультатыОзнакомлений.Добавить();
		НоваяСтрока.НомерИтерации 	  = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры	

Процедура ЗаполнитьЗадачуСогласовать(Задача, Строка)
	
	Задача.Дата 	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	Задача.Наименование  = Наименование;
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Задача.Исполнитель);
	Иначе	
		Задача.РольИсполнителя = Строка.Исполнитель;
		Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
		ГрафикРаботы = ПолучитьГрафикРаботыРоли(Строка.Исполнитель);
	КонецЕсли;	
	
	Задача.СрокИсполнения = '00010101';
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если РазныеСроки Тогда 
		СрокИсполненияДляРасчета = Строка.СрокИсполнения;
		ВремяИсполненияДляРасчета = ?(ИспользоватьДатуИВремяВСрокахЗадач, Строка.СрокИсполненияЧас, 0);
	Иначе 	
        СрокИсполненияДляРасчета = СрокИсполнения;
		ВремяИсполненияДляРасчета = ?(ИспользоватьДатуИВремяВСрокахЗадач, СрокИсполненияЧас, 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияДляРасчета) Или ЗначениеЗаполнено(ВремяИсполненияДляРасчета) Тогда 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
			Задача.СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
				ГрафикРаботы, Задача.Дата, СрокИсполненияДляРасчета, ВремяИсполненияДляРасчета);
		Иначе
			Задача.СрокИсполнения = Задача.Дата + СрокИсполненияДляРасчета*24*3600 
				+ ВремяИсполненияДляРасчета*3600;
		КонецЕсли;
	КонецЕсли;

	Если Не ИспользоватьДатуИВремяВСрокахЗадач И ЗначениеЗаполнено(Задача.СрокИсполнения)Тогда 
		Задача.СрокИсполнения = КонецДня(Задача.СрокИсполнения);
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
//1С-Минск
	Если мПроверкаДела.УровеньШаблонаПроверкиДелаРавенМаксимальному(Задача.БизнесПроцесс) Тогда
		Задача.мМаксУровеньПроверкиДел = Истина;
	КонецЕсли; 	
//1С-Минск
КонецПроцедуры

Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
		
	Задача.Исполнитель 	  = Автор;
	Задача.СрокИсполнения = '00010101'; 
		
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект,,Истина);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	Если ЗначениеЗаполнено(СтрокаПредметов) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом согласования %1'"),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом согласования: %1'"), 
			Наименование);
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры	

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	НачатьТранзакцию();
	Попытка
		
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И НЕ Задачи.ПометкаУдаления
		|	И НЕ Задачи.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда 
				СрокИсполненияЗадачи = '00010101';
				
				МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект,,Истина);
				ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
				
				Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования %1'"),
						ПредметыСтрокой);
				Иначе
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом согласования: %1'"),
						Наименование);
				КонецЕсли;
			Иначе	
				НаименованиеЗадачи = Наименование;
				СрокИсполненияЗадачи = '00010101';
				
				СрокИсполненияДляРасчета = 0; 
				ВремяИсполненияДляРасчета = 0;

				Если РазныеСроки Тогда 
					НайденнаяСтрока = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
					Если НайденнаяСтрока = Неопределено Тогда 
						НайденнаяСтрока = СтарыеИсполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
					КонецЕсли;
					
					Если НайденнаяСтрока <> Неопределено Тогда 
						СрокИсполненияДляРасчета = НайденнаяСтрока.СрокИсполнения;
						ВремяИсполненияДляРасчета = ?(ИспользоватьДатуИВремяВСрокахЗадач, НайденнаяСтрока.СрокИсполненияЧас, 0);
					КонецЕсли;	
				Иначе 
					СрокИсполненияДляРасчета = СрокИсполнения;
					ВремяИсполненияДляРасчета = ?(ИспользоватьДатуИВремяВСрокахЗадач, СрокИсполненияЧас, 0);
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СрокИсполненияДляРасчета) Или ЗначениеЗаполнено(ВремяИсполненияДляРасчета) Тогда 
					Если ИспользоватьГрафикиРаботы Тогда 
						Если ТипЗнч(ЗадачаОбъект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
							ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(ЗадачаОбъект.Исполнитель);
						Иначе	
							ГрафикРаботы = ПолучитьГрафикРаботыРоли(ЗадачаОбъект.Исполнитель);
						КонецЕсли;

						СрокИсполненияЗадачи = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
							ГрафикРаботы, ЗадачаОбъект.Дата, СрокИсполненияДляРасчета, ВремяИсполненияДляРасчета);
					Иначе
						СрокИсполненияЗадачи = ЗадачаОбъект.Дата 
							+ СрокИсполненияДляРасчета*24*3600 
							+ ВремяИсполненияДляРасчета*3600;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ИспользоватьДатуИВремяВСрокахЗадач И ЗначениеЗаполнено(СрокИсполненияЗадачи) Тогда 
					СрокИсполненияЗадачи = КонецДня(СрокИсполненияЗадачи);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи И
				 ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачи И
				 ЗадачаОбъект.Важность = Важность И
				 ЗадачаОбъект.Описание = Описание И
				 ЗадачаОбъект.Автор = Автор 
			Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.Наименование 	= НаименованиеЗадачи;
			ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачи;
			ЗадачаОбъект.Важность 		= Важность;
			ЗадачаОбъект.Описание 		= Описание;
			ЗадачаОбъект.Автор 	  		= Автор;
			Если ПараметрыЗаписи.Свойство("ПереносСрока") И ПараметрыЗаписи.ПереносСрока Тогда
				Если (ТипЗнч(ПараметрыЗаписи.Предмет) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И ПараметрыЗаписи.Предмет = ЗадачаОбъект.БизнесПроцесс)
					Или (ПараметрыЗаписи.Предмет = ЗадачаОбъект.Ссылка
					И ПараметрыЗаписи.Свойство("НоваяДлительностьДни")) Тогда
					ПараметрыЗаписи.СтарыйСрок = ЗадачаОбъект.Ссылка.СрокИсполнения;
					ПараметрыЗаписи.НовыйСрок = ЗадачаОбъект.СрокИсполнения;
				КонецЕсли;
				ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ЗадачаОбъект, ПараметрыЗаписи);
			КонецЕсли;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		// обновление исполнителей
		ДобавленныеСтроки = Новый Массив;
		УдаленныеСтроки   = Новый Массив;
		ИзмененныеСтроки  = Новый Массив;
		
		КоличествоСтрок = СтарыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				СтарыеИсполнители.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;	
		
		НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = НовыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Тогда
				НовыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 0 По КоличествоСтрок-1 Цикл
			Строка = НовыеИсполнители[Инд];
			
			Если Инд > 0 Тогда 
				ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
			Иначе
				ПредыдущаяСтрока = Неопределено;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				
				Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
					ДобавленныеСтроки.Добавить(Строка);
				ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно 
						И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 	
					
					Если ПредыдущаяСтрока = Неопределено 
					 Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя) 
					 Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда 
					
						ДобавленныеСтроки.Добавить(Строка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Для Каждого Строка Из НовыеИсполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
			
			НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель 
				Или Строка.ОсновнойОбъектАдресации <> НайденнаяСтрока.ОсновнойОбъектАдресации
				Или Строка.ДополнительныйОбъектАдресации <> НайденнаяСтрока.ДополнительныйОбъектАдресации Тогда 
				ИзмененныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из СтарыеИсполнители Цикл
			НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		    Если НайденнаяСтрока = Неопределено Тогда 
				УдаленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		// добавленные строки
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗаполнитьЗадачуСогласовать(Задача, Строка);
			Задача.Записать();
			
			НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			КонецЕсли;
			
			НоваяСтрока = РезультатыСогласования.Добавить();
			НоваяСтрока.НомерИтерации = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда 
			Записать();
		КонецЕсли;
		
		// измененные строки
		Для Каждого Строка Из ИзмененныеСтроки Цикл	
			Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
			
			
			Если Задача.ПринятаКИсполнению Тогда
				Задача.ПринятаКИсполнению = Ложь;
				Задача.ДатаПринятияКИсполнению = '00010101';
			КонецЕсли;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
				Задача.РольИсполнителя = Неопределено;
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			Иначе	
				Задача.Исполнитель = Неопределено;
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;	
			
			Задача.Записать();
		КонецЦикла;

		// удаленные строки
		Если УдаленныеСтроки.Количество() > 0 Тогда 
		
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
				Задача.ИсключенаИзПроцесса = Истина;
				Задача.ВыполнитьЗадачу();
				Задача.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
			Прочитать();
			
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				НайденнаяСтрока = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатыСогласования.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;	
			Записать();
			
		КонецЕсли;
		
		// обновление виз
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
		
		Для каждого Предмет Из ОбрабатываемыеПредметы Цикл
			
			Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессу(Предмет, Ссылка);
			РаботаСВизамиСогласования.УдалитьВизы(Визы);
		
			Для Каждого Строка Из ЭтотОбъект.Исполнители Цикл
				Если ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтруктураИсполнителя = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
					СтруктураИсполнителя.Исполнитель = Строка.Исполнитель;
					СтруктураИсполнителя.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
					СтруктураИсполнителя.ОсновнойОбъектАдресации = Неопределено;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации = Неопределено;
				Иначе
					СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
					СтруктураИсполнителя.РольИсполнителя = Строка.Исполнитель;
					СтруктураИсполнителя.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
					СтруктураИсполнителя.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
				КонецЕсли;
				
				РаботаСВизамиСогласования.СоздатьВизуПоБизнесПроцессу(Предмет, Ссылка, СтруктураИсполнителя);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.РазныеСроки) Тогда 
		РазныеСроки = ШаблонБизнесПроцесса.РазныеСроки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) 
	   И ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) 
	   И ИспользоватьДатуИВремяВСрокахЗадач Тогда 
	   
	   	СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
		СрокИсполненияЧас = ШаблонБизнесПроцесса.СрокИсполненияЧас;
		
   	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
		
		СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
		СрокИсполненияЧас = 0;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) И ИспользоватьДатуИВремяВСрокахЗадач Тогда 
		
		СрокИсполнения = 0;
		СрокИсполненияЧас = ШаблонБизнесПроцесса.СрокИсполненияЧас;
		
	КонецЕсли;
	
	ВариантСогласования = ШаблонБизнесПроцесса.ВариантСогласования;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")  
	   И ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
	 	ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП;
		
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
		ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
		
		Если ПредметыПодписыватьЭП.Количество() = 0 Тогда
			ПодписыватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
			
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						НеобходимоПеренестиНачалоСледующегоШага = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
		
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
						Строка.СрокИсполненияЧас, 0);
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 	
				
				СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
					АвтоподстановкаИсполнитель, Неопределено, Неопределено);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
						Строка.СрокИсполненияЧас, 0);
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
					АвтоподстановкаИсполнитель.РольИсполнителя, 
					АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации, 
					АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					НоваяСтрока.ОсновнойОбъектАдресации = АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации;
					НоваяСтрока.ДополнительныйОбъектАдресации = АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
						Строка.СрокИсполненияЧас, 0);
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
								Строка.СрокИсполненияЧас, 0);
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;		
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
							ЭлементМассива, Неопределено, Неопределено);
						
						Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
								Строка.СрокИсполненияЧас, 0);
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						
						СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
							ЭлементМассива.РольИсполнителя, 
							ЭлементМассива.ОсновнойОбъектАдресации, 
							ЭлементМассива.ДополнительныйОбъектАдресации);
						
						Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							НоваяСтрока.ОсновнойОбъектАдресации = ЭлементМассива.ОсновнойОбъектАдресации;
							НоваяСтрока.ДополнительныйОбъектАдресации = ЭлементМассива.ДополнительныйОбъектАдресации;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
								Строка.СрокИсполненияЧас, 0);
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
		    СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Исполнитель", Строка.Исполнитель);
			СтруктураОтбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
			СтруктураОтбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
			СтруктураОтбора.Вставить("СрокИсполнения", Строка.СрокИсполнения);
			СтруктураОтбора.Вставить("СрокИсполненияЧас", Строка.СрокИсполненияЧас);
            СтруктураОтбора.Вставить("ТрудозатратыПланИсполнителя", Строка.ТрудозатратыПланИсполнителя);

			НайденныеСтроки = Исполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И НоваяСтрока.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокСогласования	= Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	// трудозатраты
	Если ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
		НСтр("ru = 'Согласовать'"), Предметы);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПоУмолчанию Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) И Не ЗначениеЗаполнено(СрокИсполненияЧас) 
		И Не ЗначениеЗаполнено(СрокИсполненияДатой) Тогда  
		Если ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.День  
		 Или ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Неделя 
		 Или ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Месяц Тогда 
		 
			СрокИсполненияДн = РаботаСПроектами.ПересчитатьДлительность(
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности,
				Перечисления.ЕдиницыДлительности.День,
				ГрафикРаботы);
				
			Если СрокИсполненияДн = Цел(СрокИсполненияДн) Тогда 
				СрокИсполнения = СрокИсполненияДн;
			Иначе	
				 СрокИсполнения = Цел(СрокИсполненияДн);
				
				 СрокИсполненияЧас = 
				 	РаботаСПроектами.ПересчитатьДлительность(
						ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
						ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности,
						Перечисления.ЕдиницыДлительности.Час,
						ГрафикРаботы) - 
					РаботаСПроектами.ПересчитатьДлительность(
						СрокИсполнения, 
						Перечисления.ЕдиницыДлительности.День,
						Перечисления.ЕдиницыДлительности.Час,
						ГрафикРаботы);
			КонецЕсли;	
				
		Иначе
				
			Если ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Час Тогда 
				СрокИсполненияЧасов = ДанныеПроектнойЗадачи.ТекущийПланДлительность;
			ИначеЕсли ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности = Перечисления.ЕдиницыДлительности.Минута Тогда 
				СрокИсполненияЧасов = ДанныеПроектнойЗадачи.ТекущийПланДлительность / 60; 
			КонецЕсли;
			
			Если СрокИсполненияЧасов < 24 Тогда 
				СрокИсполненияЧас = Цел(СрокИсполненияЧасов);
			Иначе
				СрокИсполнения = Цел(
					РаботаСПроектами.ПересчитатьДлительность(
						СрокИсполненияЧасов, 
						Перечисления.ЕдиницыДлительности.Час,
						Перечисления.ЕдиницыДлительности.День,
						ГрафикРаботы));
					
				СрокИсполненияЧас = СрокИсполненияЧасов - 
					РаботаСПроектами.ПересчитатьДлительность(
						СрокИсполнения, 
						Перечисления.ЕдиницыДлительности.День,
						Перечисления.ЕдиницыДлительности.Час,
						ГрафикРаботы);
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
			    Если Исполнители.Найти(СтрокаИсполнитель.Исполнитель) = Неопределено Тогда
				 	НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
					НоваяСтрока.ОсновнойОбъектАдресации = СтрокаИсполнитель.ОсновнойОбъектАдресации;
					НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры	

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостояниеПредметов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ОбрабатываемыеПредметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СогласованиеРезультатыСогласования.НомерИтерации,
		|	МИНИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.Дата) КАК ПерваяЗадача,
		|	МАКСИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ПоследняяЗадача
		|ИЗ
		|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
		|ГДЕ
		|	СогласованиеРезультатыСогласования.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СогласованиеРезультатыСогласования.НомерИтерации";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ДатыЗадач = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Предмет из ОбрабатываемыеПредметы Цикл
		Для Инд = 1 По НомерИтерации Цикл
			СтрокаДаты = ДатыЗадач.Найти(Инд, "НомерИтерации");
			
			Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет, 
					СтрокаДаты.ПерваяЗадача, 
					Перечисления.СостоянияДокументов.НаСогласовании, 
				Ссылка);
			
			ЗадачиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", Инд));
			
			ИтерацияЗавершена = Истина;
			Для Каждого Строка Из ЗадачиИтерации Цикл
				Если Не Строка.ЗадачаИсполнителя.Выполнена Тогда 
					ИтерацияЗавершена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ИтерацияЗавершена Тогда 
				
				СостояниеИтерации = Перечисления.СостоянияДокументов.Согласован;
				Для Каждого Строка Из ЗадачиИтерации Цикл
					Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
						СостояниеИтерации = Перечисления.СостоянияДокументов.НеСогласован;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет, 
					СтрокаДаты.ПоследняяЗадача, 
					СостояниеИтерации, 
					Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак наличия метода ПриОткрепленииПредмета
// 
Функция ЕстьМетодПриОткрепленииПредмета() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Делопроизводство.УдалитьСостояниеДокумента(Документ, Ссылка);
	КонецЕсли;	
	
	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Истина);
	
КонецПроцедуры

// Компенсирует состояние документа при прерывании БП
//
Процедура КомпенсироватьСостояниеПредметов() Экспорт
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыДокументов, Истина);
	
	Если ПредметыДляУстановки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из ПредметыДляУстановки  Цикл
		Делопроизводство.УдалитьСостояниеДокумента(Предмет, Ссылка);
	КонецЦикла;
	
	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Истина);
	
КонецПроцедуры

Процедура ВосстановитьВизыБизнесПроцесса() 

	РаботаСВизамиСогласования.ОтметитьУдаленнымиВизыПоБизнесПроцессу(Ссылка, Ложь);
	
КонецПроцедуры	

// Выбирает всех пользователей из регистра ИсполнителиЗадач по роли
Функция ПолучитьПользователейРоли(Роль)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсполнителиЗадач.Исполнитель
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Запрос.УстановитьПараметр("РольИсполнителя", Роль);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

// Получает график работы для роли - по пользователям, которые входят в роль
Функция ПолучитьГрафикРаботыРоли(Роль)
	
	Таблица = ПолучитьПользователейРоли(Роль);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Константы.ОсновнойГрафикРаботы.Получить();
	ИначеЕсли Таблица.Количество() = 1 Тогда	
		Возврат ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[0].Исполнитель);
	Иначе // больше 1	
		
		ГрафикПервогоПользователя = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[0].Исполнитель);
		
		Для Пер = 1 По Таблица.Количество() - 1 Цикл
			График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Таблица[Пер].Исполнитель);
			Если График <> ГрафикПервогоПользователя Тогда
				Возврат Константы.ОсновнойГрафикРаботы.Получить();
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат ГрафикПервогоПользователя;
		
	КонецЕсли;	
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		// Результат предыдущего согласования
		НомерИтерацииЗадачи = Неопределено;
		
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была направлена на повторное согласование'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Результат согласования
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			Если НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано'");
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'");
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Не согласовано'");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		// Результат согласования
		НомерИтерацииЗадачи = Неопределено;
		РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.Согласовано;
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.НеСогласовано;
				Прервать;
			КонецЕсли;
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано'");
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'");
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Не согласовано'");
		КонецЕсли;
		
		// Результат ознакомления
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				Если НайденнаяСтрока.ОтправленоНаПовторноеСогласование Тогда
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Отправлено на повторное согласование'");
				Иначе
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Ознакомился'");
				КонецЕсли;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					РезультатОзнакомления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.ВариантСогласования = ВариантСогласования;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос общего срока
	Если ЗначениеЗаполнено(СрокИсполнения) ИЛИ ЗначениеЗаполнено(СрокИсполненияЧас) Тогда
		ШаблонОбъект.СрокИсполнения = СрокИсполнения;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			ШаблонОбъект.СрокИсполненияЧас = СрокИсполненияЧас;
		КонецЕсли;
	КонецЕсли;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, ПорядокСогласования");
	КонецЦикла;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	Записать();
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецЕсли