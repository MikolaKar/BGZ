#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВариантСогласования,
		|РазныеСроки,
		|Исполнители,
		|СрокИсполнения,
		|СрокИсполненияЧас");
		
	ВариантСогласования = РеквизитыПроцесса.ВариантСогласования;
	РазныеСроки = РеквизитыПроцесса.РазныеСроки;
	Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	СрокИсполнения = РеквизитыПроцесса.СрокИсполнения;
	СрокИсполненияЧас = РеквизитыПроцесса.СрокИсполненияЧас;
	
	Цвет_ЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.Цвет_ЗакрытыеНеактуальныеЗаписи();
	
	СмешанныйВариантИсполнения = 
			ВариантСогласования = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно");
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(СрокИсполнения)
			Или (ИспользоватьДатуИВремяВСрокахЗадач И ЗначениеЗаполнено(СрокИсполненияЧас)))
		И Не РазныеСроки Тогда
		
		ПредставлениеСрока = 
			?(ЗначениеЗаполнено(СрокИсполнения), Строка(СрокИсполнения) + НСтр("ru = ' дней'"),"")
			+ ?(ИспользоватьДатуИВремяВСрокахЗадач
				И ЗначениеЗаполнено(СрокИсполненияЧас), Строка(СрокИсполненияЧас) + НСтр("ru = ' часов'"),"");
		
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, НСтр("ru = 'Срок исполнения (общий):'"), ПредставлениеСрока, "");
			
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Исполнители.Количество() > 0 Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если СмешанныйВариантИсполнения Тогда
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Шаг'"));
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'С кем согласовать'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		Если РазныеСроки Тогда
		
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Дней'"));
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Часов'"));
			HTMLТекст = HTMLТекст + "</td>";
			
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Исполнители Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			Если СмешанныйВариантИсполнения Тогда
				
				Если Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НомерШага = НомерШага + 1;
				КонецЕсли;
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
				HTMLТекст = HTMLТекст + "</td>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			
			ЦветТекста = "";
			Если Исполнитель.Пройден
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + Цвет_ЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = Цвет_ЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.Исполнитель, ЦветТекста);
			
			Если ЗначениеЗаполнено(Исполнитель.ОсновнойОбъектАдресации) Тогда
				HTMLТекст = HTMLТекст + ", ";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.ОсновнойОбъектАдресации, ЦветТекста);
			КонецЕсли;
			Если ЗначениеЗаполнено(Исполнитель.ДополнительныйОбъектАдресации) Тогда
				HTMLТекст = HTMLТекст + ", ";
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.ДополнительныйОбъектАдресации, ЦветТекста);
			КонецЕсли;
			
			Если Исполнитель.Пройден 
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</td>";
			
			Если РазныеСроки Тогда
			
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.СрокИсполнения, "");
				КонецЕсли;
				HTMLТекст = HTMLТекст + "</td>";
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				Если ЗначениеЗаполнено(Исполнитель.СрокИсполненияЧас) Тогда
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.СрокИсполненияЧас, "");
				КонецЕсли;
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(ВариантСогласования) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Направлять: %1'");
			ПредставлениеРеквизитаНаправлять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРеквизитаНаправлять,
				Строка(ВариантСогласования));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРеквизитаНаправлять, Цвет_ЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Согласование",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПодсистемаПечать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласования") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "ЛистСогласования", "Лист согласования", ЛистСогласования(МассивОбъектов, ОбъектыПечати),,
				"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");

	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласованияИзЗадачи") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
            "ЛистСогласованияИзЗадачи", "Лист согласования", ЛистСогласованияИзЗадачи(МассивОбъектов, ОбъектыПечати),,
				"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
			
	КонецЕсли;
		
КонецПроцедуры

Функция ЛистСогласования(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Исполнители.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Исполнители.ЗадачаИсполнителя = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА Исполнители.Исполнитель
		|		ИНАЧЕ Исполнители.ЗадачаИсполнителя.ТекущийИсполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА Исполнители.ЗадачаИсполнителя = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА Исполнители.ОсновнойОбъектАдресации
		|		ИНАЧЕ Исполнители.ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации
		|	КОНЕЦ КАК ОсновнойОбъектАдресации,
		|	ВЫБОР
		|		КОГДА Исполнители.ЗадачаИсполнителя = ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)
		|			ТОГДА Исполнители.ДополнительныйОбъектАдресации
		|		ИНАЧЕ Исполнители.ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации
		|	КОНЕЦ КАК ДополнительныйОбъектАдресации,
		|	ВЫБОР
		|		КОГДА Исполнители.Исполнитель ССЫЛКА Справочник.РолиИсполнителей
		|			ТОГДА Исполнители.Исполнитель
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РольИсполнителя,
		|	Исполнители.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	Исполнители.Ссылка.НомерИтерации КАК НомерИтерации
		|ПОМЕСТИТЬ Согласующие
		|ИЗ
		|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Согласующие.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Согласующие.Исполнитель) = ТИП(Справочник.Пользователи)
		|			ТОГДА Согласующие.Исполнитель
		|		КОГДА Согласующие.ДополнительныйОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + Согласующие.Исполнитель.Наименование + "" ("" + Согласующие.ОсновнойОбъектАдресации.Наименование + "", "" + Согласующие.ДополнительныйОбъектАдресации.Наименование + "")""
		|		КОГДА Согласующие.ОсновнойОбъектАдресации <> НЕОПРЕДЕЛЕНО
		|			ТОГДА """" + Согласующие.Исполнитель.Наименование + "" ("" + Согласующие.ОсновнойОбъектАдресации.Наименование + "")""
		|		ИНАЧЕ """" + Согласующие.Исполнитель.Наименование
		|	КОНЕЦ КАК Исполнитель,
		|	СведенияОПользователях.Должность.Представление КАК Должность,
		|	Согласующие.РольИсполнителя,
		|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения
		|ИЗ
		|	Согласующие КАК Согласующие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО Согласующие.Исполнитель = СведенияОПользователях.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|		ПО Согласующие.Ссылка = РезультатыСогласования.Ссылка
		|			И Согласующие.ЗадачаИсполнителя = РезультатыСогласования.ЗадачаИсполнителя
		|			И Согласующие.НомерИтерации = РезультатыСогласования.НомерИтерации
		|ИТОГИ ПО
		|	Ссылка";
		
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.ПолучитьМакет("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");

	ПервыйДокумент = Истина;
	
	Для Каждого СтрДерева Из Дерево.Строки Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Предметы = Мультипредметность.ПолучитьПредметыПроцесса(СтрДерева.Ссылка);
		СтрокаПредметов = "";
		Для Каждого Строка Из Предметы Цикл
			СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"","," + Символы.ПС)
				+ Строка.Предмет.Метаданные().ПредставлениеОбъекта + " """ + Строка(Строка.Предмет) + """";
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаПредметов) Тогда
			ОбластьШапка.Параметры.Предмет = СтрокаПредметов;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;	
 		
		ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
		
		Для Каждого СтрИсполнитель Из СтрДерева.Строки Цикл
			ОбластьИсполнители.Параметры.Заполнить(СтрИсполнитель);
			
			Если ЗначениеЗаполнено(СтрИсполнитель.Исполнитель) Тогда
				ОбластьИсполнители.Параметры.Исполнитель = СтрИсполнитель.Исполнитель;
				
				Если ЗначениеЗаполнено(СтрИсполнитель.РольИсполнителя) Тогда 
					ОтборСтрок = Новый Структура("Исполнитель", СтрИсполнитель.Исполнитель);
					НайденныеСтроки = СтрДерева.Строки.НайтиСтроки(ОтборСтрок);
					Если НайденныеСтроки.Количество() > 1 Тогда // есть одинаковые исполнители
						ОбластьИсполнители.Параметры.Должность = СтрИсполнитель.РольИсполнителя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрИсполнитель.РезультатСогласования) Тогда 
				ОбластьИсполнители.Параметры.ДатаИсполнения = Неопределено;
				ОбластьИсполнители.Параметры.РезультатВыполнения = Неопределено;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьИсполнители);
		КонецЦикла;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрДерева.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЛистСогласованияИзЗадачи(ЗадачаИсполнителя, ОбъектыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РезультатыСогласования.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА РезультатыСогласования.ЗадачаИсполнителя.Исполнитель
	|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации <> &Неопределено
	|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование + "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "", "" + РезультатыСогласования.ЗадачаИсполнителя.ДополнительныйОбъектАдресации.Наименование + "")""
	|		КОГДА РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации <> &Неопределено
	|			ТОГДА """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование + "" ("" + РезультатыСогласования.ЗадачаИсполнителя.ОсновнойОбъектАдресации.Наименование + "")""
	|		ИНАЧЕ """" + РезультатыСогласования.ЗадачаИсполнителя.РольИсполнителя.Наименование
	|	КОНЕЦ КАК Исполнитель,
	|	РезультатыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	РезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
	|	СведенияОПользователях.Должность.Представление КАК Должность,
	|	РезультатыСогласования.ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения
	|ИЗ
	|	БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО РезультатыСогласования.ЗадачаИсполнителя.Исполнитель = СведенияОПользователях.Пользователь
	|ГДЕ
	|	РезультатыСогласования.Ссылка = &БизнесПроцесс
	|	И РезультатыСогласования.НомерИтерации = &НомерИтерации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИсполнения
	|ИТОГИ ПО
	|	Ссылка";
	
	НайденнаяСтрока = ЗадачаИсполнителя.БизнесПроцесс.РезультатыОзнакомлений.Найти(ЗадачаИсполнителя, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерации = НайденнаяСтрока.НомерИтерации;
	Иначе
		НомерИтерации = ЗадачаИсполнителя.БизнесПроцесс.НомерИтерации;
	КонецЕсли;	
	
	Запрос.Параметры.Вставить("БизнесПроцесс", ЗадачаИсполнителя.БизнесПроцесс);
	Запрос.Параметры.Вставить("НомерИтерации", НомерИтерации);
	Запрос.Параметры.Вставить("Неопределено", Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет = БизнесПроцессы.Согласование.ПолучитьМакет("ПФ_MXL_ЛистСогласования");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");

	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		Предметы = Мультипредметность.ПолучитьПредметыПроцесса(Выборка.Ссылка);
		СтрокаПредметов = "";
		Для Каждого Строка Из Предметы Цикл
			СтрокаПредметов = СтрокаПредметов + ?(ПустаяСтрока(СтрокаПредметов),"","," + Символы.ПС)
				+ Строка.Предмет.Метаданные().ПредставлениеОбъекта + " """ + Строка(Строка.Предмет) + """";
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаПредметов) Тогда
			ОбластьШапка.Параметры.Предмет = СтрокаПредметов;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;	
 		
		ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
		ВыборкаИсполнители = Выборка.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			ОбластьИсполнители.Параметры.Заполнить(ВыборкаИсполнители);
			ТабличныйДокумент.Вывести(ОбластьИсполнители);
		КонецЦикла;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

#КонецОбласти

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда 
		ИмяФормы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда 
		ИмяФормы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// устанавливаем значения по умолчанию для пакетного выполнения задач
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		 
		СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
		НайденнаяСтрока = СогласованиеОбъект.РезультатыСогласования.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		СогласованиеОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = Ложь;
		СогласованиеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры	

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	// устанавливаем значения по умолчанию для пакетного выполнения задач
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		 
		Если ПараметрыВыполнения.Свойство("РезультатСогласования") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			Если Не ПараметрыВыполнения.Свойство("УникальныйИдентификаторФормыИзмененияПараметров") Тогда
				ПараметрыВыполнения.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Новый УникальныйИдентификатор());
			КонецЕсли;
			ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка,, ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			СогласованиеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			СогласованиеОбъект.ДополнительныеСвойства.Вставить(
				"РезультатСогласования", ПараметрыВыполнения.РезультатСогласования);
			СогласованиеОбъект.Записать();
			
			Если ПараметрыВыполнения.Свойство("ПодписиКВизамСогласования")
				И ТипЗнч(ПараметрыВыполнения.ПодписиКВизамСогласования) = Тип("СписокЗначений") Тогда
				
				ПодписиКВизамСогласования = ПараметрыВыполнения.ПодписиКВизамСогласования;
				
				Для Каждого Элемент Из ПодписиКВизамСогласования Цикл
					
					ПодписанныеДанные = Элемент.Значение;
					
					Виза = РаботаСВизамиСогласования.ПолучитьВизуПоЗадаче(
						ПодписанныеДанные.ОбъектСсылка.Документ, ЗадачаСсылка);
					
					Если Виза = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектВизы = Виза.ПолучитьОбъект();
					
					РаботаСЭП.ЗанестиИнформациюОПодписи(
						ОбъектВизы.Ссылка,
						ПодписанныеДанные.НоваяПодписьДвоичныеДанные, 
						ПодписанныеДанные.Отпечаток,
						ПодписанныеДанные.ДатаПодписи,
						ПодписанныеДанные.Комментарий, 
						ПодписанныеДанные.ИмяФайлаПодписи,
						ПодписанныеДанные.КомуВыданСертификат,
						ПодписанныеДанные.ДвоичныеДанныеСертификата);
					
					ОбъектВизы.Подписана = Истина;
					ОбъектВизы.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка, ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		
		Если ПараметрыВыполнения.Свойство("ПовторитьСогласование") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			СогласованиеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			Если Не ПараметрыВыполнения.Свойство("УникальныйИдентификаторФормыИзмененияПараметров") Тогда
				ПараметрыВыполнения.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Новый УникальныйИдентификатор());
			КонецЕсли;
			ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка,, ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			СогласованиеОбъект.ПовторитьСогласование = ПараметрыВыполнения.ПовторитьСогласование;
			НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(
				ЗадачаСсылка, "ЗадачаИсполнителя");
			НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ПараметрыВыполнения.ПовторитьСогласование;
			СогласованиеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка, ПараметрыВыполнения.УникальныйИдентификаторФормыИзмененияПараметров);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Тогда 
	 
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		СтруктураПоиска = Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка);
		НайденныеСтроки = БизнесПроцессОбъект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
				НайденнаяСтрока.Исполнитель = Реквизиты.Исполнитель;
				НайденнаяСтрока.ОсновнойОбъектАдресации = Неопределено;
				НайденнаяСтрока.ДополнительныйОбъектАдресации = Неопределено;
			Иначе
				НайденнаяСтрока.Исполнитель = Реквизиты.РольИсполнителя;
				НайденнаяСтрока.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресации;
				НайденнаяСтрока.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			// проверка дублей
			Исполнители = БизнесПроцессОбъект.Исполнители.Выгрузить();
			Исполнители.Свернуть("Исполнитель,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации");
			Если Исполнители.Количество() < БизнесПроцессОбъект.Исполнители.Количество() Тогда 
				ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" уже находится в списке исполнителей процесса!'"),
					Строка(Реквизиты.Исполнитель));
			КонецЕсли;
			
			БизнесПроцессОбъект.Записать();
		КонецЕсли;	
	 
 	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда 
		
		Если Не ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			ВызватьИсключение НСтр("ru = 'Задачу автора процесса нельзя перенаправить на роль исполнителя.'");
		КонецЕсли;	
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		БизнесПроцессОбъект.Автор = Реквизиты.Исполнитель;
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(БизнесПроцесс, "Автор");
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, БизнесПроцесс, "Исполнители");
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);
	
КонецПроцедуры

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныСогласования";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Предназначен для согласования документа с одним или несколькими лицами (коллегами).'");
	
КонецФункции

// Возвращает текстовое представление срока выполнения процесса
Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения(Ссылка) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокИсполнения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СрокИсполненияДатой");
	
	СтрокаФормата = "ДФ=dd.MM.yyyy";
	Если ИспользоватьВремяВСрокахЗадач Тогда
		СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм'";	
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат Формат(СрокИсполнения, СтрокаФормата);
	КонецЕсли;
	
	Возврат НСтр("ru = 'Срок не указан'");
	
КонецФункции

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
//	автоматический перенос сроков при согласовании заявки на перенос автором (истина),
//	или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Ссылка, 
		"Завершен, РезультатСогласования");
	Возврат РеквизитыПроцесса.Завершен 
		И (РеквизитыПроцесса.РезультатСогласования = 
			Перечисления.РезультатыСогласования.Согласовано
			Или РеквизитыПроцесса.РезультатСогласования = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
	
КонецФункции

// Проверяет, что процесс завершился удачно с замечаниями
Функция ПроцессЗавершилсяУдачноСЗамечаниями(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Ссылка, 
		"Завершен, РезультатСогласования");
	Возврат РеквизитыПроцесса.Завершен 
		И РеквизитыПроцесса.РезультатСогласования = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
	
КонецФункции
		
// Проверяет, что процесс завершился удачно без замечаний
Функция ПроцессЗавершилсяУдачноБезЗамечаний(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Ссылка, 
		"Завершен, РезультатСогласования");
	Возврат РеквизитыПроцесса.Завершен 
		И РеквизитыПроцесса.РезультатСогласования = 
			Перечисления.РезультатыСогласования.Согласовано;
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	РезультатСогласования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "РезультатСогласования");
	
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Процесс, "Автор, Проект");
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	// Автор
	Автор = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроцессСсылка, "Автор");
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнители
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Исполнители.Исполнитель,
		|	Исполнители.ОсновнойОбъектАдресации,
		|	Исполнители.ДополнительныйОбъектАдресации
		|ИЗ
		|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПроцессСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", Выборка.Исполнитель);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Выборка.ОсновнойОбъектАдресации);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Выборка.ДополнительныйОбъектАдресации);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЦикла;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеСобытияФормат,
						Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
						Строка(Задача.Исполнитель));
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Согласование.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Согласовать Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СогласованиеРезультатыСогласования.РезультатСогласования
			|ИЗ
			|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
			|ГДЕ
			|	СогласованиеРезультатыСогласования.ЗадачаИсполнителя = &ЗадачаИсполнителя");
			
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", Задача.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				Действие = НСтр("ru = 'Не согласовано'");
			ИначеЕсли Выборка.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				Действие = НСтр("ru = 'Согласовано'");
			ИначеЕсли Выборка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
				Действие = НСтр("ru = 'Согласовано с замечаниями'");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СогласованиеРезультатыОзнакомлений.ОтправленоНаПовторноеСогласование
			|ИЗ
			|	БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК СогласованиеРезультатыОзнакомлений
			|ГДЕ
			|	СогласованиеРезультатыОзнакомлений.ЗадачаИсполнителя = &ЗадачаИсполнителя");
			
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", Задача.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ОтправленоНаПовторноеСогласование Тогда
				Действие = НСтр("ru = 'Отправлено на повторное согласование'");
			Иначе
				Действие = НСтр("ru = 'Ознакомлен(а) с результатами согласования'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ": " + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Исполнители
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнители", "Исполнитель", "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации", 
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Результат = "";
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ПроцессСсылка, , Истина);

	Если Не ЗначениеЗаполнено(Предметы) Тогда
		Возврат "";
	КонецЕсли;

	ПредметыСИзмененнымСостоянием = Новый Массив();
	
	КоличествоВизУстановленныхПроцессом = 0;
	КоличествоСостоянийУстановленныхПроцессом = 0;
	
	Для каждого Предмет Из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			СостоянияДокумента = Делопроизводство.ПолучитьСостоянияДокумента(Предмет, ПроцессСсылка);
			Если ЗначениеЗаполнено(СостоянияДокумента) Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
				КоличествоСостоянийУстановленныхПроцессом = КоличествоСостоянийУстановленныхПроцессом +
					СостоянияДокумента.Количество();
			КонецЕсли;
		КонецЕсли;
		
		Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыПоБизнесПроцессуИЗадачам(
			Предмет, 
			ПроцессСсылка);
			
		Если Визы.Количество() > 0 Тогда
			Если ПредметыСИзмененнымСостоянием.Найти(Предмет) = Неопределено Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
			КонецЕсли;
			КоличествоВизУстановленныхПроцессом = КоличествоВизУстановленныхПроцессом
				+ Визы.Количество();
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхПредметов = ПредметыСИзмененнымСостоянием.Количество();
	Если КоличествоИзмененныхПредметов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НаименованиеПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		ПредметыСИзмененнымСостоянием[0], 
		"Наименование");
	
	Если КоличествоСостоянийУстановленныхПроцессом > 0
		И КоличествоВизУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние согласования и 
					 |будут удалены визы согласования, созданные в рамках этого процесса (%2).'"),
				НаименованиеПредмета,
				КоличествоВизУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние согласования и 
					 |будут удалены визы согласования, созданные в рамках этого процесса (%2).'"),
				КоличествоИзмененныхПредметов,
				КоличествоВизУстановленныхПроцессом);
		КонецЕсли;
		
	ИначеЕсли КоличествоСостоянийУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние согласования.'"),
				НаименованиеПредмета);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние согласования.'"),
				КоличествоИзмененныхПредметов);
		КонецЕсли;
	Иначе
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будут удалены визы согласования, 
					 |созданные в рамках этого процесса (%2).'"),
				НаименованиеПредмета,
				КоличествоВизУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будут удалены визы согласования, 
					 |созданные в рамках этого процесса (%2).'"),
				КоличествоИзмененныхПредметов,
				КоличествоВизУстановленныхПроцессом);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.Согласование.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Согласование - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Согласовано'"));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Не согласовано'"));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями,
			НСтр("ru = 'Согласовано с замечаниями'"));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		НаименованиеПоложительногоРезультата = НСтр("ru = 'Ознакомился'");
		НаименованиеОтрицательногоРезультата = "";
		
		РезультатВыполнения = РезультатВыполненияПроцесса(БизнесПроцессСсылка);
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			НаименованиеПоложительногоРезультата = НСтр("ru = 'Завершить согласование'");
			НаименованиеОтрицательногоРезультата = НСтр("ru = 'Повторить согласование'");
		КонецЕсли;
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НаименованиеПоложительногоРезультата);
		
		Если ЗначениеЗаполнено(НаименованиеОтрицательногоРезультата) Тогда
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
				НаименованиеОтрицательногоРезультата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры


// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Участники = Новый Структура(
		"Автор,
		|Исполнители");
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
			"Автор, Исполнители");
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке,, "Исполнители");
		Участники.Исполнители = РеквизитыПроцессаПоСсылке.Исполнители.Выгрузить();
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс,, "Исполнители");
		Участники.Исполнители = Процесс.Исполнители.Выгрузить();
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

//////////////////////////////////////////////////////////
// Вспомогательные функции для общей формы ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Дополняет текст запроса динамического списка. Процедуры используется
// только для общей формы ЗадачиПоБизнесПроцессу.
//
Процедура ДополнитьТекстЗапросСпискаЗадач(ТекстЗапроса) Экспорт
	
	// Замена получения поля НомерИтерации
	ТекстПоляНомерИтерации = "NULL КАК НомерИтерации";
	ТекстЗаменыПоляНомерИтерации = "
		|	ВЫБОР
		|		КОГДА ЗадачаЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться)
		|			ТОГДА РезультатыОзнакомлений.НомерИтерации
		|		ИНАЧЕ РезультатыСогласования.НомерИтерации
		|	КОНЕЦ КАК НомерИтерации";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоляНомерИтерации, ТекстЗаменыПоляНомерИтерации);
	
	// Добавление дополнительных таблиц для вычисления НомераИтерации
	ТекстТаблиц = "
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО (ФлагиОбъектов.Объект = ЗадачаЗадачаИсполнителя.Ссылка)
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект";
	ТекстЗаменыТаблиц = "
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО (ФлагиОбъектов.Объект = ЗадачаЗадачаИсполнителя.Ссылка)
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыСогласования КАК РезультатыСогласования
		|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыСогласования.ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование.РезультатыОзнакомлений КАК РезультатыОзнакомлений
		|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыОзнакомлений.ЗадачаИсполнителя";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстТаблиц, ТекстЗаменыТаблиц);
	
КонецПроцедуры

#КонецЕсли