
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ВестиУчетПереносаСроков = ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач");
	Элементы.ИзменитьСрок.Видимость = Параметры.Свойство("ЗаявкаНаПеренос", ЗаявкаНаПереносСрока)
		И ЗначениеЗаполнено(ЗаявкаНаПереносСрока);
		
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
		
	ПолучитьДанныеПроекта();
		
	ВариантСогласованияПараллельно = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	ВариантСогласованияПоследовательно = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
	ВариантСогласованияСмешанно = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно;
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	ПорядокСогласованияВместеСПредыдущим = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
	ПорядокСогласованияПослеПредыдущего = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
	
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, Объект.ДатаНачала);
		Иначе
			Длительность = ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), Объект.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПодписыватьЭП.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ОтложенныйСтартБизнесПроцессовСервер.
		ЗаполнитьРеквизитНастройкаОтложенногоСтартаВФормеПроцесса(ЭтаФорма);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	УстановитьДоступностьПоШаблону();
	УстановитьДоступность();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	Элементы.ИсполнителиСрокИсполненияДатой.Формат = 
		?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	ЗаполнитьШагСервер();
	ВыполнитьРасчетСроковСервер();
	Если Объект.Завершен 
	 Или Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда 
		Элементы.ИсполнителиСрокИсполненияДатой.Видимость = Ложь;
	КонецЕсли;
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
//1С-Минск+
	М_УправлениеФормамиДОРБСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
//1С-Минск-
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Если Объект.Ссылка.Пустая() И Не Копирование Тогда 
		Если ШаблоныПоПредметам.Количество() > 1 Тогда 
			РезультатВыбора = ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныСогласования", ШаблоныПоПредметам);
			Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
		
			ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
			УстановитьДоступностьПоШаблону();
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		ЗаполнитьШагКлиент();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "БизнесПроцесс") = Объект.Ссылка Тогда
		Прочитать();	
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ОтмененоВыполнениеЗадачи")
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Параметр, "БизнесПроцесс") = Объект.Ссылка Тогда 
			Прочитать();
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "ИзмененСоставСогласующих" И Параметр = Объект.Ссылка Тогда 
		Прочитать();
	ИначеЕсли УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли ИмяСобытия = "Процесс_ИзменениеСрока" И Параметр.Предмет = Объект.Ссылка Тогда
		Объект.СрокИсполнения = Параметр.НоваяДлительностьДни;
		Объект.СрокИсполненияЧас = Параметр.НоваяДлительностьЧасы;
		Модифицированность = Истина;
		Записать(Параметр);
	ИначеЕсли ИмяСобытия = "Задача_ИзменениеСрока" 
		И Параметр.Предмет = Элементы.Исполнители.ТекущиеДанные.ЗадачаИсполнителя Тогда
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		
		ТекущиеДанные.СрокИсполненияДатой = Параметр.НовыйСрок;
		Модифицированность = Истина;
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("СрокИсполненияДатой", ТекущиеДанные.СрокИсполненияДатой);
		ДанныеСтроки.Вставить("ДлительностьДней", ТекущиеДанные.СрокИсполнения);
		ДанныеСтроки.Вставить("ДлительностьЧасов", ТекущиеДанные.СрокИсполненияЧас);
		ДанныеСтроки.Вставить("ЗадачаИсполнителя", ТекущиеДанные.ЗадачаИсполнителя);
		ДанныеСтроки.Вставить("Исполнитель", ТекущиеДанные.Исполнитель);
		
		РаботаСБизнесПроцессами.РассчитатьДлительностиСогласованияПоДате(ДанныеСтроки);
		
		ТекущиеДанные.СрокИсполнения = ДанныеСтроки.ДлительностьДней;
		ТекущиеДанные.СрокИсполненияЧас = ДанныеСтроки.ДлительностьЧасов;
		
		Записать(Параметр);
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	КонецЕсли;
		
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" 
		И Параметр.БизнесПроцесс = Объект.Ссылка Тогда
		
		НастройкаОтложенногоСтарта = Параметр;
		
		ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессами.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	
	ЗаполнитьШагСервер();
	
	ВыполнитьРасчетСроковСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Исполнители, "Исполнитель");

	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
		
		РаботаСБизнесПроцессамиКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
		
		РаботаСВизамиСогласованияКлиент.ПередСтартомБизнесПроцесса(
			Объект,
			Отказ,
			УникальныйИдентификатор,
			ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.Стартован И Модифицированность Тогда 
		
		Если ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				ОжидаемыйСрокСогласования, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
		
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		И НЕ Объект.Стартован
		И Модифицированность
		И ЗначениеЗаполнено(НастройкаОтложенногоСтарта)
		И НастройкаОтложенногоСтарта.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту") Тогда
			
		ПараметрыЗаписи.Вставить("ИзменениеОтложенногоПроцесса", Истина);
		ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СогласованиеВыполнениеКомандыСтартовать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессами.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессами.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Объект.Ссылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		
		// проверка заполнения полей
		Для Каждого Строка Из Объект.Исполнители Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле ""С кем согласовать"" в строке %1 списка ""Лист согласования""!'"), Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, 
					"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, Отказ);
			КонецЕсли;
			
			Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно И Не ЗначениеЗаполнено(Строка.ПорядокСогласования) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле ""Порядок согласования"" в строке %1 списка ""Лист согласования""!'"), Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
					"Объект.Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].ПорядокСогласования",, Отказ);
			КонецЕсли;	
			
		КонецЦикла;
		
		// проверка дублей
		КоличествоИсполнителей = Объект.Исполнители.Количество();
		Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
			Строка1 = Объект.Исполнители[Инд1];
			Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
				Продолжить;
			КонецЕсли;

			Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
				Строка2 = Объект.Исполнители[Инд2];
				
				Если Строка1.Исполнитель = Строка2.Исполнитель И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"), 
						Строка(Строка2.Исполнитель));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Объект.Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
						Отказ);
					
				ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
					И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
					И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
					И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
					
					Если ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка2.ДополнительныйОбъектАдресации) Тогда 	
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке согласующих!'"),
							Строка(Строка2.Исполнитель),
							Строка(Строка2.ОсновнойОбъектАдресации),
							Строка(Строка2.ДополнительныйОбъектАдресации));
							
					ИначеЕсли ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) Тогда 
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке согласующих!'"),
							Строка(Строка2.Исполнитель),
							Строка(Строка2.ОсновнойОбъектАдресации));
							
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке согласующих!'"), 
							Строка(Строка2.Исполнитель));
							
					КонецЕсли;	
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						"Объект.Исполнители[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
						Отказ);
					
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
		
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);

	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	ЗаполнитьШагСервер();
	ВыполнитьРасчетСроковСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе	
			
			Если Объект.Предметы.Количество() = 0 Тогда 
			
				ИнформацияОЗапуске = Новый Структура;
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
			Иначе
			
				Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
				
					ИнформацияОЗапуске = Новый Структура;
					ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
					ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
					Если ВестиУчетПоПроектам Тогда
						ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
						ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
					КонецЕсли;
					Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
					Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ОповеститьОбИзменении(СтрокаПредмета.Предмет);
					КонецЕсли;
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	// Если пользователь отвечал на вопрос при старте процесса, то дальнейший 
	//	старт процесса выполняется неинтерактивно. В этом случае необходимо показать окно оповещения
	//	и добавить ссылку на процесс в историю.
	Если ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлахДокументов")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлах")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
		Или ПараметрыЗаписи.Свойство("ЗаписатьБезСоответствияСрокаИсполненияПроцессаИДатыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриОшибкахВПроектах") Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Старт'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияЧасПриИзменении(Элемент)
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьПользователя(Элемент, Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантСогласованияПриИзменении(Элемент)
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда 
		Для Каждого Строка Из Объект.Исполнители Цикл
			Если ПредыдущийВариантСогласования = ВариантСогласованияПоследовательно Тогда 
				Строка.ПорядокСогласования = ПорядокСогласованияПослеПредыдущего;
			ИначеЕсли ПредыдущийВариантСогласования = ВариантСогласованияПараллельно Тогда 
				Строка.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;	
		КонецЦикла;	
		ЗаполнитьШагКлиент();
	КонецЕсли;	
	ПредыдущийВариантСогласования = Объект.ВариантСогласования;
	
	УстановитьДоступность();
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка согласования невозможно!'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка согласования невозможно!'"));
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСогласованияПриИзменении(Элемент)
	
	ЗаполнитьШагКлиент();
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПричинаПрерыванияНажатие(Элемент)
		
	КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЗаполнитьПоПроектнойЗадачеНаСервере(Объект.ПроектнаяЗадача);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтартОтложенТекстНажатие(Элемент)
	
	ОтложенныйСтартБизнесПроцессовКлиент.ПоказатьПричинуОтменыОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьДоступностьКомандПеремещения();
	
	Если ВестиУчетПереносаСроков Тогда
		Элементы.ИсполнителиИзменитьСрокЗадачи.Доступность = 
			ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
			И НЕ ТекущиеДанные.Пройден;
	КонецЕсли;

	Элементы.ИсполнителиСрокИсполнения.ТолькоПросмотр = Ложь;
	Элементы.ИсполнителиСрокИсполненияЧас.ТолькоПросмотр = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя)
		И Не ТекущиеДанные.Пройден Тогда
		Элементы.ИсполнителиСрокИсполнения.ТолькоПросмотр = Истина;
		Элементы.ИсполнителиСрокИсполненияЧас.ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Объект.Стартован Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	

	ВсеПройдены = Истина;
	Для Каждого Строка Из Объект.Исполнители Цикл
		Если Не Строка.Пройден И ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
			ВсеПройдены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ВсеПройдены Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Все исполнители завершили свои задачи, добавление нового исполнителя невозможно!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
		Если ТекущиеДанные.Пройден Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение исполнителя невозможно!'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Объект.Стартован Тогда 
		
		ВыделенныеСтроки = Элементы.Исполнители.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 1 Тогда 
			ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
			
			Если ДанныеСтроки.Пройден Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, удаление исполнителя невозможно!'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.Исполнители.НайтиПоИдентификатору(ИдентификаторСтроки);
				
				Если ДанныеСтроки.Пройден Тогда 
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Задача исполнителя %1 уже завершена, удаление исполнителя невозможно!'"),
						Строка(ДанныеСтроки.Исполнитель));
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		Если ВыделенныеСтроки.Количество() = Объект.Исполнители.Количество() Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'В списке согласующих не останется ни одного исполнителя, удаление невозможно!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		
		ТекущаяСтрока = Объект.Исполнители.НайтиПоИдентификатору(Элементы.Исполнители.ТекущаяСтрока);
		ИндексСтроки = Объект.Исполнители.Индекс(ТекущаяСтрока);
		
		Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда 
			Если ИндексСтроки > 0 Тогда 
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = Объект.Исполнители[ИндексСтроки-1].ПорядокСогласования;
			Иначе
				Элементы.Исполнители.ТекущиеДанные.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
			КонецЕсли;	
			ЗаполнитьШагКлиент();
		КонецЕсли;	
			
		Если Объект.РазныеСроки Тогда 
			Если ИндексСтроки > 0 Тогда 
				Элементы.Исполнители.ТекущиеДанные.СрокИсполнения = Объект.Исполнители[ИндексСтроки-1].СрокИсполнения;
				Элементы.Исполнители.ТекущиеДанные.СрокИсполненияЧас = Объект.Исполнители[ИндексСтроки-1].СрокИсполненияЧас;
				ВыполнитьРасчетСроковКлиент();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ЗаполнитьШагКлиент();
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ИсполнительПриИзмененииЗавершение", ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Объект.Стартован Тогда 
	
		РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ТекущиеДанные.Исполнитель,,Истина,,,
			ТекущиеДанные.ОсновнойОбъектАдресации, 
			ТекущиеДанные.ДополнительныйОбъектАдресации);
		
	Иначе
		
		АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
		РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.Исполнители.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		 Возврат;
	КонецЕсли;	 
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
	ТекущиеДанные.ОсновнойОбъектАдресации = Неопределено;
	ТекущиеДанные.ДополнительныйОбъектАдресации = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПриИзменении(Элемент)
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияЧасПриИзменении(Элемент)
	
	ВыполнитьРасчетСроковКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыОписаниеПриИзменении_Продолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор(),, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПредметыПредметПриИзменении();
	Иначе
		ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ТипыПредметов = Новый Массив;
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
	ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов, Истина);
	Элементы.ПодписыватьЭП.Доступность = (ПредметыПодписыватьЭП.Количество() > 0);
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	ПолучитьИнструкции();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
	ПометитьНаУдалениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Прочитать();
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновной(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения
		("ДобавитьОсновнойПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Истина, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновнойПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязательноЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);	
	ШаблоныПоПредметам.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныСогласования", Ложь));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныСогласования", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		УстановитьДоступностьПоШаблону();
		УстановитьДоступность();
		ЗаполнитьШагКлиент();
		ВыполнитьРасчетСроковКлиент();
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрок(Команда)
	
	ПереносСроковВыполненияЗадачКлиент.ОткрытьФормуПереносаСрокаПроцесса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокЗадачи(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Элементы.Исполнители.ТекущиеДанные.ЗадачаИсполнителя);
	ПараметрыФормы.Вставить("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
	ОткрытьФорму(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаПереносСрокаЗадачи",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Стартован Тогда 
		
		Если ТекущиеДанные.Пройден Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Объект.Исполнители[ТекущиеДанные.НомерСтроки-2].ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача предыдущего исполнителя уже сформирована, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;	
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	
	ЗаполнитьШагКлиент();
	
	ВыполнитьРасчетСроковКлиент();
	
	УстановитьДоступностьКомандПеремещения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.Исполнители.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Стартован Тогда 
		
		Если ТекущиеДанные.Пройден Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже завершена, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗадачаИсполнителя) Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Задача текущего исполнителя уже сформирована, изменение порядка исполнителей невозможно!'"));
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Объект.Исполнители.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	
	ЗаполнитьШагКлиент();
	
	ВыполнитьРасчетСроковКлиент();
	
	УстановитьДоступностьКомандПеремещения();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазныеСроки(Команда)
	
	Объект.РазныеСроки = Не Объект.РазныеСроки;
	
	Если Объект.РазныеСроки Тогда 
		Для Каждого Исполнитель Из Объект.Исполнители Цикл 
			Исполнитель.СрокИсполнения = Объект.СрокИсполнения;
			Исполнитель.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, Объект.СрокИсполненияЧас, 0);
			Исполнитель.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
				Объект.ТрудозатратыПланИсполнителя, 0);
		КонецЦикла;	
	Иначе	
		Если Объект.Исполнители.Количество() > 0 Тогда 
			СтрокаИсполнитель = Объект.Исполнители[0];
			
			Объект.СрокИсполнения = СтрокаИсполнитель.СрокИсполнения;
			Объект.СрокИсполненияЧас = ?(ИспользоватьДатуИВремяВСрокахЗадач, СтрокаИсполнитель.СрокИсполненияЧас, 0);
			Объект.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
				СтрокаИсполнитель.ТрудозатратыПланИсполнителя, 0);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьРасчетСроковКлиент();
	
	УстановитьДоступность();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтложенныйСтарт(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.НастроитьОтложенныйСтарт(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает доступность команд ПереместитьВверх и ПереместитьВниз в зависимости от
// положения строки.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандПеремещения()
	
	Если Элементы.Исполнители.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если ТекущиеДанные.НомерСтроки >= 2 Тогда
		Элементы.ПереместитьВверх.Доступность = Истина;
	КонецЕсли;
	
	КоличествоИсполнителей = Объект.Исполнители.Количество();
	
	Если ТекущиеДанные.НомерСтроки = 1 И КоличествоИсполнителей > 1
		ИЛИ ТекущиеДанные.НомерСтроки > 1 И ТекущиеДанные.НомерСтроки < КоличествоИсполнителей Тогда
		Элементы.ПереместитьВниз.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
	Отказ, ПараметрыЗаписи, ОткрытьФормуНастройкиОтложенногоСтарта = Ложь) Экспорт
	
	РаботаСВизамиСогласованияКлиент.ПередСтартомБизнесПроцесса(
		Объект,
		Отказ,
		УникальныйИдентификатор,
		ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовКлиент.ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
		Отказ, ПараметрыЗаписи, ЭтаФорма, ОткрытьФормуНастройкиОтложенногоСтарта);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетСроковКлиент()
	
	Если Объект.Исполнители.Количество() = 0 Тогда 
		ОжидаемыйСрокСогласования = '00010101';
		Возврат;
	КонецЕсли;	
	
	Если Не Объект.РазныеСроки 
		И Не ЗначениеЗаполнено(Объект.СрокИсполнения)
		И Не ЗначениеЗаполнено(Объект.СрокИсполненияЧас) Тогда 
		Для Каждого Строка Из Объект.Исполнители Цикл
			Строка.СрокИсполненияДатой = '00010101';
		КонецЦикла;	
		ОжидаемыйСрокСогласования = '00010101';
		Возврат;
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиСогласованияДатой(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ВыполнитьРасчетСроковСервер()
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиСогласованияДатой(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)

	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		
		ТекущиеИсполнители = Объект.Исполнители.Выгрузить();
		НовыеИсполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Объект.Исполнители.Очистить();
		Для Каждого СтрокаНовыйИсполнитель Из НовыеИсполнители Цикл
			
			СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				СтрокаНовыйИсполнитель.Исполнитель, 
				СтрокаНовыйИсполнитель.ОсновнойОбъектАдресации, 
				СтрокаНовыйИсполнитель.ДополнительныйОбъектАдресации);
				
			НайденныеСтроки = ТекущиеИсполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				НоваяСтрока = Объект.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = НайденныеСтроки[0].Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = НайденныеСтроки[0].ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = НайденныеСтроки[0].ДополнительныйОбъектАдресации;
				НоваяСтрока.ПорядокСогласования = НайденныеСтроки[0].ПорядокСогласования;
			Иначе
				НоваяСтрока = Объект.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаНовыйИсполнитель.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = СтрокаНовыйИсполнитель.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаНовыйИсполнитель.ДополнительныйОбъектАдресации;
				
				ИндексСтроки = Объект.Исполнители.Индекс(НоваяСтрока);
				Если ИндексСтроки > 0 Тогда 
					НоваяСтрока.ПорядокСогласования = Объект.Исполнители[ИндексСтроки-1].ПорядокСогласования;
				Иначе
					НоваяСтрока.ПорядокСогласования = ПорядокСогласованияВместеСПредыдущим;
				КонецЕсли;	
			КонецЕсли;	
			ЗаполнитьШагСервер();
			
		КонецЦикла;	
		
	Иначе	
		Объект.Исполнители.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	КонецЕсли;	
	
	ВыполнитьРасчетСроковСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Шаблон, ЭтаФорма);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	
	ЗаполнитьШагСервер();
	ВыполнитьРасчетСроковСервер();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПроектнойЗадачеНаСервере(ПроектнаяЗадача) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессОбъект.ЗаполнитьПоПроектнойЗадаче(ПроектнаяЗадача);
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШагКлиент()
	
	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда  
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШагСогласования(Объект.Исполнители);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьШагСервер()

	Если Объект.ВариантСогласования = ВариантСогласованияСмешанно Тогда  
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШагСогласования(Объект.Исполнители);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = Объект.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = Объект.Проект.ЕдиницаТрудозатратЗадач;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);	
	Элементы.ТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
	Элементы.ТрудозатратыПланАвтора.Заголовок = ЕдиницаТрудозатратСтр;
	Элементы.ИсполнителиТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступность()
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	Если Объект.Завершен
		ИЛИ Не ПравоНаИзменение Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	ПереносСроковВыполненияЗадач.УстановкаДоступностиЭлементовФормы(Объект, Элементы);
	
	Если Объект.Стартован Тогда
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.ВариантСогласования.ТолькоПросмотр = Истина;
		Элементы.ЗаполнитьПоШаблону.Доступность = Ложь;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
	КонецЕсли;	
	
	ТипыПредметов = Новый Массив;
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
	ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыПредметов, Истина);
	Элементы.ПодписыватьЭП.Доступность = (ПредметыПодписыватьЭП.Количество() > 0);
	
	Элементы.ГруппаИнфо.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГруппаПодписи.Видимость = Не Объект.Ссылка.Пустая();
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Элементы.ПереместитьВверх.Видимость = Ложь;
		Элементы.ПереместитьВниз.Видимость = Ложь;
	Иначе	
		Элементы.ПереместитьВверх.Видимость = Истина;
		Элементы.ПереместитьВниз.Видимость = Истина;
	КонецЕсли;	
	
	Если Объект.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокСогласования.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	Иначе
		Элементы.ПорядокСогласования.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;	
	
	// результат согласования
	Инд = Объект.РезультатыОзнакомлений.Количество() - 1;
	Если Инд >= 0 Тогда 
		Если Объект.НомерИтерации = Объект.РезультатыОзнакомлений[Инд].НомерИтерации Тогда 
			
			ПараметрыОтбора = Новый Структура("НомерИтерации, РезультатСогласования", Объект.НомерИтерации, Перечисления.РезультатыСогласования.НеСогласовано);
			РезультатНеСогласовано = Объект.РезультатыСогласования.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый Структура("НомерИтерации, РезультатСогласования", Объект.НомерИтерации, Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			РезультатСогласованоСЗамечаниями = Объект.РезультатыСогласования.НайтиСтроки(ПараметрыОтбора);
			
			Если РезультатНеСогласовано.Количество() > 0 Тогда 
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Не согласовано'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			ИначеЕсли РезультатСогласованоСЗамечаниями.Количество() > 0 Тогда 
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Согласовано с замечаниями'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Иначе
				Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'Согласовано'");
				Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
			
		Иначе	
			Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'На согласовании'");
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;	
	Иначе
		Элементы.РезультатСогласования.Заголовок = НСтр("ru = 'На согласовании'");
		Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	// Работа со сроками согласования
	
	Элементы.РазныеСроки.Доступность = НЕ Элементы.Исполнители.ТолькоПросмотр;
	
	Если Объект.РазныеСроки Тогда 
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиСрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.СрокИсполнения.Видимость = Ложь;
		Элементы.Дней.Видимость = Ложь;
		Элементы.СрокИсполненияЧас.Видимость = Ложь;
		Элементы.Часов.Видимость = Ложь;
		Элементы.РазныеСроки.Пометка = Истина;
		Элементы.ДекорацияТрудозатраты.Видимость = Ложь;
		Элементы.ТрудозатратыПланИсполнителя.Видимость = Ложь;
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
		Элементы.ФормаИзменитьСрок.Видимость = Ложь;
		Элементы.ИсполнителиИзменитьСрокЗадачи.Видимость = Истина;
	Иначе 
		Элементы.ИсполнителиСрокИсполнения.Видимость = Ложь;
		Элементы.ИсполнителиСрокИсполненияЧас.Видимость = Ложь;
		Элементы.СрокИсполнения.Видимость = Истина;
		Элементы.Дней.Видимость = Истина;
		Элементы.СрокИсполненияЧас.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.Часов.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.РазныеСроки.Пометка = Ложь;		              
		Элементы.ДекорацияТрудозатраты.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;	
		Элементы.ТрудозатратыПланИсполнителя.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
		Элементы.ИсполнителиТрудозатратыПланИсполнителя.Видимость = Ложь;
		Элементы.ФормаИзменитьСрок.Видимость = Истина;
		Элементы.ИсполнителиИзменитьСрокЗадачи.Видимость = Ложь; 
	КонецЕсли;

	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессами.ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда 
		Элементы.СрокИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокИсполненияЧас.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполнения.ТолькоПросмотр = Ложь;
		Элементы.СрокИсполненияЧас.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		Элементы.Исполнители.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.Подобрать.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВверх.Доступность = ДоступностьПоШаблону;
		Элементы.ПереместитьВниз.Доступность = ДоступностьПоШаблону;
		Элементы.РазныеСроки.Доступность = ДоступностьПоШаблону;
		Элементы.ВариантСогласования.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Подобрать.Доступность = Истина;
		Элементы.ВариантСогласования.ТолькоПросмотр = Ложь;
		Элементы.ПереместитьВверх.Доступность = Истина;
		Элементы.ПереместитьВниз.Доступность = Истина;
		Элементы.РазныеСроки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.Исполнители.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(Ссылка)
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса() Экспорт
	
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 80, 110);
	
КонецПроцедуры

#КонецОбласти
