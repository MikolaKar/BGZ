#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	НомерИтерации = 0;
	РезультатыПриглашения.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатПриглашения = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НомерИтерации = 0;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
				Строка = Исполнители.Добавить();
				Строка.Исполнитель = Исполнитель;
			КонецЦикла;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Тема");
			Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Письмо, "Проект");
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Принять участие в ""%1""'"),
				Тема);
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Мероприятие = Неопределено;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной 
		   И (УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) 
		   Или УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие)) Тогда 
		   
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Принять участие в ""%1""'"), 
					Строка(Мероприятие));
				
			Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
			Исполнители.Загрузить(Участники);
			
			ДатаНачалаМероприятия = Мероприятие.ДатаНачала;
			ДатаОкончанияМероприятия = Мероприятие.ДатаОкончания;
			МестоПроведения = Мероприятие.МестоПроведения;
			
			СрокИсполнения = ДатаНачалаМероприятия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(
			ЭтотОбъект, НСтр("ru = 'Принять участие в'") + " ");
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И Строка.Исполнитель.ВнешняяРоль Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Внешняя роль не может быть использована в данном поле!'"),
				ЭтотОбъект,
				"Исполнители[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	КоличествоИсполнителей = Исполнители.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка1.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка1.ДополнительныйОбъектАдресации) Тогда 	
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1 (%2, %3)"" указан дважды в списке участников!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации),
						Строка(Строка1.ДополнительныйОбъектАдресации));
				ИначеЕсли ЗначениеЗаполнено(Строка1.ОсновнойОбъектАдресации) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Участник ""%1 (%2)"" указан дважды в списке участников!'"),
						Строка(Строка1.Исполнитель),
						Строка(Строка1.ОсновнойОбъектАдресации)	);	
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке участников!'"), 
						Строка(Строка1.Исполнитель));
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"Исполнители[" + Формат(Строка1.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
	// Проверка прав доступа участников процесса на предмет
	Если МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
		
		ПредметыДляПроверки = Мультипредметность.ПредметыДляДействийПроцесса(ЭтотОбъект);
		
		ВнешняяТранзакция = ТранзакцияАктивна();
		
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(ЭтотОбъект, ПредметыДляПроверки);
		
		// Проверка прав на предмет
		Если ПредметыДляПроверки.Количество() > 0 Тогда
			МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
				ЭтотОбъект, ПредметыДляПроверки, Отказ);
		КонецЕсли;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
		
		Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
			НайденнаяСтрока = РезультатыПриглашения.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
			НайденнаяСтрока.РезультатПриглашения = ДополнительныеСвойства.РезультатПриглашения;
			
			ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ДополнительныеСвойства.ТекущаяЗадача, , Истина);
			Для Каждого Предмет Из ПредметыДляУстановки Цикл
				Мероприятие = Неопределено;
				
				Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
					Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
					
					СтруктураПоиска = Новый Структура;
					
					СтруктураПоиска.Вставить("Исполнитель", ?(ЗначениеЗаполнено(ДополнительныеСвойства.ТекущаяЗадача.Исполнитель),
					ДополнительныеСвойства.ТекущаяЗадача.Исполнитель, ДополнительныеСвойства.ТекущаяЗадача.РольИсполнителя));
					СтруктураПоиска.Вставить("ОсновнойОбъектАдресации", ДополнительныеСвойства.ТекущаяЗадача.ОсновнойОбъектАдресации);
					СтруктураПоиска.Вставить("ДополнительныйОбъектАдресации", ДополнительныеСвойства.ТекущаяЗадача.ДополнительныйОбъектАдресации);
					
					Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
					
					НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда 
						НайденнаяСтрока = НайденныеСтроки[0];
						
						ЗначенияКлюча = Новый Структура;
						ЗначенияКлюча.Вставить("Мероприятие", Мероприятие);
						ЗначенияКлюча.Вставить("Исполнитель", НайденнаяСтрока.Исполнитель);
						ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", НайденнаяСтрока.ОсновнойОбъектАдресации);
						ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", НайденнаяСтрока.ДополнительныйОбъектАдресации);
						
						КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
						ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
						
						МенеджерЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
						МенеджерЗаписи.Прочитать();
						
						Если ДополнительныеСвойства.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
							МенеджерЗаписи.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
						ИначеЕсли ДополнительныеСвойства.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
							МенеджерЗаписи.СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
						КонецЕсли;
						МенеджерЗаписи.Записать();
						
						КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
						РазблокироватьДанныеДляРедактирования(КлючЗаписи);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
			Если ДополнительныеСвойства.Свойство("ПовторитьПриглашение") И ДополнительныеСвойства.ПовторитьПриглашение Тогда
				ПовторитьПриглашение = Истина;
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.ОтправленоПовторноеПриглашение = Истина;
				
			ИначеЕсли ДополнительныеСвойства.Свойство("ПодтвердитьПриглашение") И ДополнительныеСвойства.ПодтвердитьПриглашение Тогда
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача.Ссылка, "ЗадачаИсполнителя");
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
				
				УдаленныеСтрокиИсполнителей = Новый Массив;
				Для Каждого Строка Из РезультатыПриглашения Цикл
					Если Строка.НомерИтерации <> НомерИтерации Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Строка.РезультатПриглашения <> Перечисления.РезультатыПриглашения.НеПринято Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Строка.ЯвкаОбязательна Тогда 
						Продолжить;
					КонецЕсли;	
					
					Строка.НеУчитывать = Истина;
					
					НайденнаяСтрока = Исполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если НайденнаяСтрока <> Неопределено Тогда 
						СтруктураИсполнитель = Новый Структура;
						СтруктураИсполнитель.Вставить("Исполнитель", НайденнаяСтрока.Исполнитель);
						СтруктураИсполнитель.Вставить("ОсновнойОбъектАдресации", НайденнаяСтрока.ОсновнойОбъектАдресации);
						СтруктураИсполнитель.Вставить("ДополнительныйОбъектАдресации", НайденнаяСтрока.ДополнительныйОбъектАдресации);
						УдаленныеСтрокиИсполнителей.Добавить(СтруктураИсполнитель);
						Исполнители.Удалить(НайденнаяСтрока);
					КонецЕсли;
					
				КонецЦикла;
				
				ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ДополнительныеСвойства.ТекущаяЗадача, , Истина);
				Для Каждого Предмет Из ПредметыДляУстановки Цикл
					Мероприятие = Неопределено;
					УдаленныеЗаписи = Новый Массив;
					Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
						Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
						
						НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
						НаборЗаписей.Прочитать();
						Участники = НаборЗаписей.Выгрузить();
						
						Для Каждого СтрокаУчастник Из Участники Цикл
							ЗначенияКлюча = Новый Структура;
							ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
							ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
							ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", СтрокаУчастник.ОсновнойОбъектАдресации);
							ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", СтрокаУчастник.ДополнительныйОбъектАдресации);
							
							КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
							ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
						КонецЦикла;
						
						Для Каждого Строка Из УдаленныеСтрокиИсполнителей Цикл
							
							НайденныеСтроки = Участники.НайтиСтроки(Строка);
							Если НайденныеСтроки.Количество() > 0 Тогда 
								Для Каждого Запись Из НаборЗаписей Цикл
									Если Запись.Исполнитель = Строка.Исполнитель
										И Запись.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации
										И Запись.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации Тогда
										УдаленныеЗаписи.Добавить(Запись);
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
						КонецЦикла;
						
						Для Каждого УдаленнаяЗапись Из УдаленныеЗаписи Цикл
							НаборЗаписей.Удалить(УдаленнаяЗапись);
						КонецЦикла;
						
						НаборЗаписей.Записать();
						
						Для Каждого СтрокаУчастник Из Участники Цикл
							ЗначенияКлюча = Новый Структура;
							ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
							ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
							ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", СтрокаУчастник.ОсновнойОбъектАдресации);
							ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", СтрокаУчастник.ДополнительныйОбъектАдресации);
							
							КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
							РазблокироватьДанныеДляРедактирования(КлючЗаписи);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РаботаСБизнесПроцессами.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, , Истина);
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
		Если ПометкаУдаления Тогда 
			Для Каждого Предмет Из ПредметыДляУстановки Цикл
				ПриОткрепленииПредмета(Предмет);
			КонецЦикла;
		Иначе
			ВосстановитьСостоянияПредметов();
		КонецЕсли;	
	КонецЕсли;
	
	// Обработка рабочей группы	
	РаботаСБизнесПроцессами.СформироватьРабочуюГруппу(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачала = ТекущаяДатаСеанса();
	Записать();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредметыДляУстановки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, , Истина);
	
	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Мероприятие = Неопределено;
		Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
			Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
			
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие, 
				ТекущаяДатаСеанса(), 
				Перечисления.СостоянияМероприятий.ПриглашенияОтправлены, 
				Ссылка);
			
			НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
			НаборЗаписей.Прочитать();
			Участники = НаборЗаписей.Выгрузить();
			
			Для Каждого СтрокаУчастник Из Участники Цикл
				ЗначенияКлюча = Новый Структура;
				ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
				ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
				ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", СтрокаУчастник.ОсновнойОбъектАдресации);
				ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", СтрокаУчастник.ДополнительныйОбъектАдресации);
				
				КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЦикла;
			
			Для Каждого Строка Из Исполнители Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Исполнитель", Строка.Исполнитель);
				СтруктураПоиска.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
				СтруктураПоиска.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
				
				НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда 
					
					Для Каждого Запись Из НаборЗаписей Цикл
						
						Если Запись.Исполнитель = Строка.Исполнитель
							И Запись.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации
							И Запись.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации Тогда
							
							Запись.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
					НоваяЗапись.Мероприятие = Мероприятие;
					НоваяЗапись.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено;
					НоваяЗапись.Порядок = Строка.НомерСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
			Для Каждого СтрокаУчастник Из Участники Цикл
				ЗначенияКлюча = Новый Структура;
				ЗначенияКлюча.Вставить("Мероприятие", СтрокаУчастник.Мероприятие);
				ЗначенияКлюча.Вставить("Исполнитель", СтрокаУчастник.Исполнитель);
				ЗначенияКлюча.Вставить("ОсновнойОбъектАдресации", СтрокаУчастник.ОсновнойОбъектАдресации);
				ЗначенияКлюча.Вставить("ДополнительныйОбъектАдресации", СтрокаУчастник.ДополнительныйОбъектАдресации);
				
				КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
				РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьПриглашение = Ложь;
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	Записать();
	
КонецПроцедуры

Процедура ПригласитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого Строка Из Исполнители Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуПригласить(Задача, Строка);
	
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
		ФормируемыеЗадачи.Добавить(Задача);
		
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроля(Ссылка, Строка.ЗадачаИсполнителя, ЗадачаСсылка);
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		
		НоваяСтрока = РезультатыПриглашения.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Процедура ПригласитьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат приглашения
	Если РезультатыПриглашения.Количество() > 0 Тогда
		РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
		СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		
		ЕстьПринятые = Ложь;
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
				ЕстьПринятые = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Если Не ЕстьПринятые Тогда 
			РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
		Иначе	
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Если Строка.ЯвкаОбязательна Тогда 
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
						Прервать;
					Иначе
						РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	
		Записать();
	КонецЕсли;	
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		Мероприятие = Неопределено;
	
		Если УправлениеМероприятиями.ЭтоМероприятие(Предмет, Мероприятие) 
		 Или УправлениеМероприятиями.ЭтоМатериалМероприятия(Предмет, Мероприятие) Тогда 
		 
			Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
			 Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда 
				СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПриглашенияПриняты;
			Иначе	
				СостояниеМероприятия = Перечисления.СостоянияМероприятий.ПриглашенияНеПриняты;
			КонецЕсли;	
			
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие, 
				ТекущаяДатаСеанса(), 
				СостояниеМероприятия, 
				Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// для вложенного бп
	Если ЗначениеЗаполнено(ВедущаяЗадача)
		И РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
		
		БизнесПроцессВедущейЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			
		Если ТипЗнч(БизнесПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьЗадачуОзнакомиться(ФормируемыеЗадачи);
	
КонецПроцедуры

Процедура СоздатьЗадачуОзнакомиться(ФормируемыеЗадачи = Неопределено, ЗаписатьЗадачу = Ложь)
	
	Если ФормируемыеЗадачи = Неопределено Тогда
		ФормируемыеЗадачи = Новый Массив;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	Если ЗаписатьЗадачу Тогда
		Задача.Записать();
	КонецЕсли;
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	Записать();
	
КонецПроцедуры

Процедура ПовторитьПриглашениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьПриглашение;
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ОповеститьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		БизнесПроцессВедущейЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			
		Если ТипЗнч(БизнесПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьЗадачиОповестить(ФормируемыеЗадачи);
	
КонецПроцедуры

// Создает задачи для точки маршрута Оповестить и помещает задачи параметр ФормируемыеЗадачи.
//
// Параметры:
//   ФормируемыеЗадачи - массив созданных задач
//          - ЗадачаОбъекта
//   ЗаписатьЗадачи - Булево - если передается Истина, то задачи будут записаны при создании.
//
Процедура СоздатьЗадачиОповестить(ФормируемыеЗадачи = Неопределено, ЗаписатьЗадачи = Ложь)
	
	Если ФормируемыеЗадачи = Неопределено Тогда
		ФормируемыеЗадачи = Новый Массив;
	КонецЕсли;
	
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Или
		РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда 
		
		Для Каждого Строка Из РезультатыПриглашения Цикл
			Если Строка.НомерИтерации = НомерИтерации Тогда 
				Если Строка.НеУчитывать Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Продолжить;
				КонецЕсли;	
				
				СтрокаИсполнителя = Исполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если СтрокаИсполнителя = Неопределено Тогда 
					СтрокаИсполнителя = Строка.ЗадачаИсполнителя;
				КонецЕсли;	
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ЗаполнитьЗадачуОповестить(Задача, СтрокаИсполнителя);
				
				Если ЗаписатьЗадачи Тогда
					Задача.Записать();
				КонецЕсли;
				
				ФормируемыеЗадачи.Добавить(Задача);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	// для вложенного бп
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		БизнесПроцессВедущейЗадачи =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
			
		Если ТипЗнч(БизнесПроцессВедущейЗадачи) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
			СоздатьЗадачуОзнакомиться(, Истина);
		КонецЕсли;
		
		СоздатьЗадачиОповестить(, Истина);
		
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ЭтотОбъект);
	
КонецПроцедуры	

Процедура ЗаполнитьЗадачуПригласить(Задача, Строка)
	
	Задача.Дата 	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);
	
	Задача.Наименование = Наименование;
	Если Строка.ЯвкаОбязательна Тогда 
		Задача.Наименование = Задача.Наименование + НСтр("ru = ' (явка обязательна)'");
	КонецЕсли;
	
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить;
	Задача.СрокИсполнения = СрокИсполнения;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		
	ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
		Задача.РольИсполнителя = Строка.Исполнитель;
		Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
		
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться);
	
	Задача.Исполнитель 	  = Автор;
	Задача.СрокИсполнения = '00010101'; 
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект,,Истина);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	Если ЗначениеЗаполнено(СтрокаПредметов) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения %1'"),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения: %1'"), 
			Наименование);
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры	

Процедура ЗаполнитьЗадачуОповестить(Задача, Строка)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
		
	ИначеЕсли ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
		Задача.РольИсполнителя = Строка.Исполнитель;
		Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
		
	КонецЕсли;
	
	Задача.СрокИсполнения = '00010101'; 
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить;
	
	МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект,,Истина);
	СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
	
	Если ЗначениеЗаполнено(СтрокаПредметов) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения %1'"),
			СтрокаПредметов);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ознакомиться с результатом приглашения: %1'"), 
			Наименование);
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры	

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			МассивПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЭтотОбъект,, Истина);
			СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПредметов, Истина, Ложь);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда 
				Если ЗначениеЗаполнено(СтрокаПредметов) Тогда 
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом приглашения %1'"),
						СтрокаПредметов);
				Иначе
					НаименованиеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ознакомиться с результатом приглашения: %1'"),
						Наименование);
				КонецЕсли;
				СрокИсполненияЗадачи = '00010101';	
			Иначе	
				НаименованиеЗадачи = Наименование;
				СрокИсполненияЗадачи = СрокИсполнения;
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи И
				 ЗадачаОбъект.СрокИсполнения = СрокИсполнения И
				 ЗадачаОбъект.Важность = Важность И
				 ЗадачаОбъект.Описание = Описание И
				 ЗадачаОбъект.Автор = Автор 
			Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.Наименование 	= НаименованиеЗадачи;
			ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачи;
			ЗадачаОбъект.Важность 		= Важность;
			ЗадачаОбъект.Описание 		= Описание;
			ЗадачаОбъект.Автор 	  		= Автор;
			Если ПараметрыЗаписи.Свойство("ПереносСрока") 
				И ПараметрыЗаписи.ПереносСрока Тогда
				Если ТипЗнч(ПараметрыЗаписи.Предмет) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
					И ПараметрыЗаписи.Предмет = ЗадачаОбъект.БизнесПроцесс Тогда
					ПараметрыЗаписи.СтарыйСрок = ЗадачаОбъект.Ссылка.СрокИсполнения;
					ПараметрыЗаписи.НовыйСрок = ЗадачаОбъект.СрокИсполнения;
				КонецЕсли;
				ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ЗадачаОбъект, ПараметрыЗаписи);
			КонецЕсли;
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		
		// обновление исполнителей
		ДобавленныеСтроки = Новый Массив;
		УдаленныеСтроки   = Новый Массив;
		ИзмененныеСтроки  = Новый Массив;
		
		КоличествоСтрок = СтарыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				СтарыеИсполнители.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;	
		
		НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = НовыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Тогда
				НовыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 0 По КоличествоСтрок-1 Цикл
			Строка = НовыеИсполнители[Инд];
			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				ДобавленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из НовыеИсполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
			
			НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель 
				Или Строка.ОсновнойОбъектАдресации <> НайденнаяСтрока.ОсновнойОбъектАдресации
				Или Строка.ДополнительныйОбъектАдресации <> НайденнаяСтрока.ДополнительныйОбъектАдресации Тогда 
				ИзмененныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из СтарыеИсполнители Цикл
			НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		    Если НайденнаяСтрока = Неопределено Тогда 
				УдаленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		// добавленные строки
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ЗаполнитьЗадачуПригласить(Задача, Строка);
			Задача.Записать();
			
			НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			КонецЕсли;
			
			НоваяСтрока = РезультатыПриглашения.Добавить();
			НоваяСтрока.НомерИтерации = НомерИтерации;
			НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
			
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда 
			Записать();
		КонецЕсли;
		
		// измененные строки
		Для Каждого Строка Из ИзмененныеСтроки Цикл	
			Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
			
			Если Задача.ПринятаКИсполнению Тогда
				Задача.ПринятаКИсполнению = Ложь;
				Задача.ДатаПринятияКИсполнению = '00010101';
			КонецЕсли;
			
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				Задача.Исполнитель = Строка.Исполнитель;
				Задача.РольИсполнителя = Неопределено;
				Задача.ОсновнойОбъектАдресации = Неопределено;
				Задача.ДополнительныйОбъектАдресации = Неопределено;
			Иначе	
				Задача.Исполнитель = Неопределено;
				Задача.РольИсполнителя = Строка.Исполнитель;
				Задача.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
				Задача.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
			КонецЕсли;	
			
			Задача.Записать();
		КонецЦикла;

		// удаленные строки
		Если УдаленныеСтроки.Количество() > 0 Тогда 
		
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("ОтключитьЗаполнениеДополнительныхДанныхПоЗадаче", Истина);
				Задача.ИсключенаИзПроцесса = Истина;
				Задача.ВыполнитьЗадачу();
				Задача.УстановитьПометкуУдаления(Истина);
			КонецЦикла;	
			Прочитать();
			
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				НайденнаяСтрока = РезультатыПриглашения.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					РезультатыПриглашения.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;	
			Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("Строка") И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(Строка.Исполнитель, ЭтотОбъект);
		
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
					АвтоподстановкаИсполнитель, Неопределено, Неопределено);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
					АвтоподстановкаИсполнитель.РольИсполнителя, 
					АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации, 
					АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					НоваяСтрока.ОсновнойОбъектАдресации = АвтоподстановкаИсполнитель.ОсновнойОбъектАдресации;
					НоваяСтрока.ДополнительныйОбъектАдресации = АвтоподстановкаИсполнитель.ДополнительныйОбъектАдресации;
					НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(ЭлементМассива)	Тогда 
						
						ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
							ЭлементМассива, Неопределено, Неопределено);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 	
						
						ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
							ЭлементМассива.РольИсполнителя, 
							ЭлементМассива.ОсновнойОбъектАдресации, 
							ЭлементМассива.ДополнительныйОбъектАдресации);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							НоваяСтрока.ОсновнойОбъектАдресации = ЭлементМассива.ОсновнойОбъектАдресации;
							НоваяСтрока.ДополнительныйОбъектАдресации = ЭлементМассива.ДополнительныйОбъектАдресации;
							НоваяСтрока.ЯвкаОбязательна = Строка.ЯвкаОбязательна;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
			СтруктураОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Строка.Исполнитель,
				Строка.ОсновнойОбъектАдресации,
				Строка.ДополнительныйОбъектАдресации);
		
			НайденныеСтроки = Исполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	// срок исполнения
	ТаблГрафикиРаботы = Новый ТаблицаЗначений;
	ТаблГрафикиРаботы.Колонки.Добавить("ГрафикРаботы");
	
	Для Каждого Строка Из Исполнители Цикл
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Строка.Исполнитель);
		Иначе	
			ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		КонецЕсли;
		
		НоваяСтрока = ТаблГрафикиРаботы.Добавить();
		НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
	КонецЦикла;
	
	ТаблГрафикиРаботы.Свернуть("ГрафикРаботы");
	Если ТаблГрафикиРаботы.Количество() = 1 Тогда 
		ГрафикРаботы = ТаблГрафикиРаботы[0].ГрафикРаботы;
	Иначе
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) 
		 Или ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧас) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы,
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения,
					ШаблонБизнесПроцесса.СрокИсполненияЧас);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600
					+ ШаблонБизнесПроцесса.СрокИсполненияЧас*3600;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда 
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикРаботы,
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0),
					ШаблонБизнесПроцесса.СрокИсполнения);
			Иначе
				СрокИсполнения = 
					Дата + ?(ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе, ШаблонБизнесПроцесса.СрокОтложенногоСтарта, 0)
					+ ШаблонБизнесПроцесса.СрокИсполнения*24*3600;
			КонецЕсли;	
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланАвтора = ШаблонБизнесПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
		
	НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
		НСтр("ru = 'Принять участие в'") + " ", Предметы);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПоУмолчанию Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда 
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	КонецЕсли;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
				НоваяСтрока.ОсновнойОбъектАдресации = СтрокаИсполнитель.ОсновнойОбъектАдресации;
				НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаИсполнитель.ДополнительныйОбъектАдресации;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры	

// Восстанавливает состояние предмета БП при отмене удаления
//
Процедура ВосстановитьСостоянияПредметов()
	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Если Не ЗначениеЗаполнено(Предмет) Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СогласованиеРезультатыСогласования.НомерИтерации,
	//|	МИНИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.Дата) КАК ПерваяЗадача,
	//|	МАКСИМУМ(СогласованиеРезультатыСогласования.ЗадачаИсполнителя.ДатаИсполнения) КАК ПоследняяЗадача
	//|ИЗ
	//|	БизнесПроцесс.Согласование.РезультатыСогласования КАК СогласованиеРезультатыСогласования
	//|ГДЕ
	//|	СогласованиеРезультатыСогласования.Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СогласованиеРезультатыСогласования.НомерИтерации";
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//ДатыЗадач = Запрос.Выполнить().Выгрузить();
	//
	//Для Инд = 1 По НомерИтерации Цикл
	//	СтрокаДаты = ДатыЗадач.Найти(Инд, "НомерИтерации");
	//	
	//	Делопроизводство.ЗаписатьСостояниеДокумента(
	//		Предмет, 
	//		СтрокаДаты.ПерваяЗадача, 
	//		Перечисления.СостоянияДокументов.НаСогласовании, 
	//		Ссылка);
	//	
	//	ЗадачиИтерации = РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", Инд));
	//	
	//	ИтерацияЗавершена = Истина;
	//	Для Каждого Строка Из ЗадачиИтерации Цикл
	//		Если Не Строка.ЗадачаИсполнителя.Выполнена Тогда 
	//			ИтерацияЗавершена = Ложь;
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЦикла;	
	//	
	//	Если ИтерацияЗавершена Тогда 
	//		
	//		СостояниеИтерации = Перечисления.СостоянияДокументов.Согласован;
	//		Для Каждого Строка Из ЗадачиИтерации Цикл
	//			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
	//				СостояниеИтерации = Перечисления.СостоянияДокументов.НеСогласован;
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;	
	//		
	//		Делопроизводство.ЗаписатьСостояниеДокумента(
	//			Предмет, 
	//			СтрокаДаты.ПоследняяЗадача, 
	//			СостояниеИтерации, 
	//			Ссылка);
	//		
	//	КонецЕсли;	
	//	
	//КонецЦикла;	
	
КонецПроцедуры

// Вызывается при откреплении предмета от стартованного БП
//
Процедура ПриОткрепленииПредмета(Документ = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		
		// Результат предыдущего приглашения
		НомерИтерации = Неопределено;
		НайденнаяСтрока = РезультатыПриглашения.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			РезультатПриглашенияЗадачи = НайденнаяСтрока.РезультатПриглашения;
			НомерИтерации = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации =
			РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Приглашение было прислано повторно'");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Результат приглашения
		Если РезультатПриглашенияЗадачи = Перечисления.РезультатыПриглашения.Принято Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				НСтр("ru = 'Результат приглашения: Принято'"));
		ИначеЕсли РезультатПриглашенияЗадачи = Перечисления.РезультатыПриглашения.НеПринято Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				НСтр("ru = 'Результат приглашения: Не принято'"));
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		
		// Результат принятия приглашений
		НомерИтерации = Неопределено;
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		ЕстьПринятые = Ложь;
		РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
		СтрокиИтерации =
			РезультатыПриглашения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
				ЕстьПринятые = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПринятые Тогда 
			РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
		Иначе	
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
					Если Строка.ЯвкаОбязательна Тогда 
						РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
						Прервать;
					Иначе
						РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = НСтр("ru = 'Результат принятия приглашений:'") + " ";
		Если РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Все приглашения приняты'");
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Есть приглашения, не принятые участниками без обязательной явки'");
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Есть приглашения, не принятые участниками с обязательной явкой'");
		ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
			Результат = Результат + НСтр("ru = 'Приглашения не приняты всеми участниками'");
		КонецЕсли;
		
		// Результат рассылки приглашений
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				Результат = Результат + Символы.ПС + НСтр("ru = 'Результат рассылки приглашений:'") + " ";
				
				Если НайденнаяСтрока.ОтправленоПовторноеПриглашение Тогда
					Результат = Результат  + НСтр("ru = 'Приглашения разосланы повторно'");
				ИначеЕсли РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
					ИЛИ РезультатПриглашенияПоЗадачам = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
					Результат = Результат + НСтр("ru = 'Приглашения подтверждены'");
				Иначе
					Результат = Результат + НСтр("ru = 'Приглашения отменены'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда
		
		Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
			Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда 
			Результат = НСтр("ru = 'Результат рассылки приглашений: Приглашения подтверждены'");
		Иначе
			Результат = НСтр("ru = 'Результат рассылки приглашений: Приглашения отменены'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос общего срока
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		РазностьСрокаИсполнения = СрокИсполнения - Дата;
		ШаблонОбъект.СрокИсполнения = Цел(РазностьСрокаИсполнения/(3600*24));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			ШаблонОбъект.СрокИсполненияЧас = Цел((РазностьСрокаИсполнения - ШаблонОбъект.СрокИсполнения*3600*24)/3600);
		КонецЕсли;
	КонецЕсли;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, ЯвкаОбязательна");
	КонецЦикла;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();	
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	Записать();
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	ОтложенныйСтартБизнесПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецЕсли
