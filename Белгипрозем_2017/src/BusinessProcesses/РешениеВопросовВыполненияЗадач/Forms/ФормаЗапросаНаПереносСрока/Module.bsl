
////////////////////////////////////////
////   Функции общего назначения	////
////////////////////////////////////////

&НаСервере
Процедура ПосчитатьКоличествоСуществующихВопросов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РешениеВопросовВыполненияЗадач.Ссылка) КАК Колво
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &ПредметРассмотрения
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса <> &ВидВопроса";
			
	Запрос.УстановитьПараметр("ПредметРассмотрения", Объект.ПредметРассмотрения);
	Запрос.УстановитьПараметр("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда	
		Элементы.ГруппаВопросыПоЗадаче.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Другие вопросы по задаче (%1)'"),
			Формат(Выборка.Колво, "ЧН="));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РешениеВопросовВыполненияЗадач.Ссылка) КАК Колво
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &ПредметРассмотрения
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса = &ВидВопроса";
			
	Запрос.УстановитьПараметр("ПредметРассмотрения", Объект.ПредметРассмотрения);
	Запрос.УстановитьПараметр("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда	
		Элементы.ГруппаПереносыСроков.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запросы на перенос срока (%1)'"),
			Формат(Выборка.Колво, "ЧН="));;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокПриИзменении()
	
	Если ЗначениеЗаполнено(Объект.НовыйСрок) Тогда
		ДлительностьПереноса = 
			ПереносСроковВыполненияЗадач.ПолучитьПодписьДлительностьПереноса(
				Объект.Автор, 
				СтарыйСрок, 
				Объект.НовыйСрок);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////
////    Обработка событий формы		////
////////////////////////////////////////

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверка на наличие обязательных параметров
	Если НЕ Параметры.Свойство("Задача") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СрокИсполненияЗадачи = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Задача, "СрокИсполнения");
	
	Если Не ЗначениеЗаполнено(СрокИсполненияЗадачи) Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru = 'Нельзя согласовать перенос срока по задаче, у которой не установлен срок исполнения.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если Параметры.Задача.Выполнена Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru = 'Нельзя согласовать перенос срока завершенной задачи.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// Инициализация объекта-вопроса
	Объект.ПредметРассмотрения = Параметры.Задача;
	Объект.ИнициаторПроцесса = Объект.ПредметРассмотрения.Автор;
	Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Объект.НовыйСрок = СрокИсполненияЗадачи + 86400;
	
	Мультипредметность.ПередатьПредметыПроцессу(Объект, Объект.ПредметРассмотрения.БизнесПроцесс);
	
	Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока;
	Объект.ГлавнаяЗадача = Параметры.Задача;
	Если ТекущаяДатаСеанса() > Объект.ПредметРассмотрения.СрокИсполнения Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			Объект.СрокИсполнения = КонецДня(ТекущаяДатаСеанса() + 3600*24);
		Иначе
			ГрафикАвтораЗадачи = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Объект.ИнициаторПроцесса);
			Объект.СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
				ГрафикАвтораЗадачи, 
				ТекущаяДатаСеанса(), 
				1);
		КонецЕсли;
	Иначе
		Объект.СрокИсполнения = Объект.ПредметРассмотрения.СрокИсполнения;
	КонецЕсли;
	
	// Инициализация формы
	АвтоЗаголовок = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		Заголовок = НСтр("ru = 'Новый запрос на перенос срока'");
		Объект.Проект = Объект.ПредметРассмотрения.Проект;
		Объект.ПроектнаяЗадача = Объект.ПредметРассмотрения.ПроектнаяЗадача;
	КонецЕсли;
	СтарыйСрок = Объект.ПредметРассмотрения.СрокИсполнения;
	
	ДлительностьПереноса = 
			ПереносСроковВыполненияЗадач.ПолучитьПодписьДлительностьПереноса(
				Объект.Автор, 
				СтарыйСрок, 
				Объект.НовыйСрок);
	
	// Установка видимости элементов управления сроками в зависимости от использования времени в сроках задач
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокОтветаВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.СтарыйСрокВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
	Элементы.НовыйСрокВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
	
	// Инициализация списка существующих вопросов по задаче и запросов на перенос сроков
	ВопросыПоЗадаче.Параметры.УстановитьЗначениеПараметра("ПредметРассмотрения", Объект.ПредметРассмотрения);
	ВопросыПоЗадаче.Параметры.УстановитьЗначениеПараметра("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	ПереносыСроков.Параметры.УстановитьЗначениеПараметра("ПредметРассмотрения", Объект.ПредметРассмотрения);
	ПереносыСроков.Параметры.УстановитьЗначениеПараметра("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	
	// Подсчет количества уже существующих вопросов по задаче
	ПосчитатьКоличествоСуществующихВопросов();
	ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока();
		
	// Инициализация списка файлов
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.ссылка);
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	ПосчитатьКоличествоСуществующихВопросов();
	ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока();
	Элементы.ВопросыПоЗадаче.ТекущаяСтрока = ТекущийОбъект.ссылка;
	
	// Обновление заголовка формы после записи
	Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вопрос: %1'"),
			Объект.Описание);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Элементы.Файлы.Обновить();
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Элементы.Файлы.ТекущаяСтрока = Параметр.Файл;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец") Тогда
			ВладелецФайла = Параметр.Владелец;
		Иначе	
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "ВладелецФайла");
		КонецЕсли;		
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			Элементы.Файлы.Обновить();
			Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
			ОбновитьДоступностьКомандСпискаФайлов();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	// Проверка на правильность указания нового срока
	Если НЕ ЗначениеЗаполнено(Объект.НовыйСрок) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не введен новый срок выполнения.'"),
			,
			"Объект.НовыйСрок",
			,
			Отказ);
	КонецЕсли;
				
	// Проверка заполнения обоснования на перенос
	Если НЕ ЗначениеЗаполнено(Объект.Описание) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано основание для переноса срока.'"),
			,
			"Объект.Описание",
			,
			Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//// В реквизит РезультатВыполнения помещается запись с формулировкой вопроса
	//СтрокаФормата = "ДФ=dd.MM.yyyy.";
	//Если ИспользоватьВремяВСрокахЗадач Тогда
	//	СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм.'";
	//КонецЕсли;
	//ОписаниеЗапроса = 
	//		НСтр("ru = 'Прошу перенести срок исполнения на '")
	//		+ Формат(Объект.НовыйСрок, СтрокаФормата)
	//		+ Символы.ПС
	//		+ НСтр("ru = 'Причина переноса: '") 
	//		+ Объект.Описание;
	//Объект.РезультатВыполнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	НСтр("ru = '%1, %2:%3%4'"),
	//	Строка(Объект.Автор),
	//	Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм'"),
	//	Символы.ПС,
	//	ОписаниеЗапроса);
		
	// Пока процесс решения вопроса не стартован, каждая его запись будет сдвигать дату создания		
	Если (НЕ ПараметрыЗаписи.Свойство("Старт") ИЛИ НЕ ПараметрыЗаписи.Старт)
		И НЕ Объект.Стартован Тогда
		Объект.Дата = ТекущаяДата();       	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("СозданНовыйВопросВыполненияЗадачи", Объект.ПредметРассмотрения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
КонецПроцедуры

////////////////////////////////////////////////////
////	Обработка событий элементов и команд	////
////////////////////////////////////////////////////

&НаКлиенте
Процедура СрокОтветаВремяПриИзменении(Элемент)
	
	// Если в поле "Срок ответа" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Дата>. Это значение исправляется.
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) и Объект.СрокИсполнения < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(Объект.СрокИсполнения);
		МинутаДаты = Минута(Объект.СрокИсполнения);
		СекундаДаты = Секунда(Объект.СрокИсполнения);
		Объект.СрокИсполнения = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОтветаПриИзменении(Элемент)
	
	Если НЕ ИспользоватьВремяВСрокахЗадач Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	НовыйСрокПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	НовыйСрокПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////
////		Работа с файлами		////
////////////////////////////////////////

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);	
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
		ВыбраннаяСтрока, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'"),
			                 КраткоеПредставлениеОшибки(Инфо)));
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока,
		ЭтаФорма.УникальныйИдентификатор,
		Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
		Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Файлы.ТекущиеДанные.Редактирует);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока,
		Элементы.Файлы.ТекущиеДанные.ХранитьВерсии,
		Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь,
		Элементы.Файлы.ТекущиеДанные.Редактирует);	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ПредметРассмотрения);
	
КонецПроцедуры
