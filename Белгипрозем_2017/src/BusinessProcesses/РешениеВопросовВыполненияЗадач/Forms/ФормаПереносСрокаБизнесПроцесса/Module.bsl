
&НаКлиенте
Процедура КоличествоПереносовСроковНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("БизнесПроцесс", БизнесПроцесс);
	ОткрытьФорму(
		"РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач.Форма.ФормаСпискаПоПроцессу", 
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрок(Команда)
	
	// Проверка заполнения обязательных полей
	Отказ = Ложь;
	Если Элементы.ГруппаСроки.ТекущаяСтраница = Элементы.ГруппаСрокиДатами Тогда
		Если  НЕ ЗначениеЗаполнено(НовыйСрок) Тогда
			Текст = НСтр("ru = 'Поле ""Новый срок"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"НовыйСрок",
				,
				Отказ);
		КонецЕсли;
		Если СтарыйСрок = НовыйСрок Тогда
			Текст = НСтр("ru = 'Новый срок должен отличаться от старого.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"НовыйСрок",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	Если Элементы.ГруппаСроки.ТекущаяСтраница = Элементы.ГруппаСрокиПериодами Тогда
		Если  НЕ ЗначениеЗаполнено(НоваяДлительностьДни)
			И НЕ ЗначениеЗаполнено(НоваяДлительностьЧасы) Тогда
			Текст = НСтр("ru = 'Поле ""Новый срок"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"НоваяДлительностьДни",
				,
				Отказ);
		КонецЕсли;
		Если СтараяДлительностьДни * 24 + СтараяДлительностьЧасы = 
			НоваяДлительностьДни * 24 + НоваяДлительностьЧасы Тогда
			Текст = НСтр("ru = 'Новый срок должен отличаться от старого.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"НоваяДлительностьДни",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Текст = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"Комментарий",
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПереносСрока", Истина);
	ПараметрыОповещения.Вставить("БизнесПроцессПереноса", ЗаявкаНаПереносСрока);
	ПараметрыОповещения.Вставить("КомментарийАвтора", Комментарий);
	ПараметрыОповещения.Вставить("Пользователь", ТекущийПользователь);
	ПараметрыОповещения.Вставить("СтарыйСрок", СтарыйСрок);
	ПараметрыОповещения.Вставить("СтараяДлительностьДни", СтараяДлительностьДни);
	ПараметрыОповещения.Вставить("СтараяДлительностьЧасы", СтараяДлительностьЧасы);
	ПараметрыОповещения.Вставить("НовыйСрок", НовыйСрок);
	ПараметрыОповещения.Вставить("НоваяДлительностьДни", НоваяДлительностьДни);
	ПараметрыОповещения.Вставить("НоваяДлительностьЧасы", НоваяДлительностьЧасы);
	ПараметрыОповещения.Вставить("Предмет", БизнесПроцесс);
	Закрыть(ПараметрыОповещения);
	Оповестить("Процесс_ИзменениеСрока", ПараметрыОповещения);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Перенос срока исполнения:'"),
		ПолучитьНавигационнуюСсылку(БизнесПроцесс),
		Строка(БизнесПроцесс),
		БиблиотекаКартинок.Информация32);
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.БизнесПроцесс) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
	Параметры.Свойство("Идентификатор", ИдентификаторВызвавшейФормы);
	БизнесПроцесс = Параметры.БизнесПроцесс;
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
	
	НаименованиеБизнесПроцессаГиперссылка = БизнесПроцесс.Наименование;
	
	Если БизнесПроцесс.Метаданные().Реквизиты.СрокИсполнения.Тип.СодержитТип(Тип("Число")) Тогда
		Элементы.ГруппаСроки.ТекущаяСтраница = Элементы.ГруппаСрокиПериодами;
		СтараяДлительностьДни = БизнесПроцесс.СрокИсполнения;
		СтараяДлительностьЧасы = БизнесПроцесс.СрокИсполненияЧас;
		НадписьСтарыйСрок = "";
		БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
			ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
			НадписьСтарыйСрок,
			СтараяДлительностьДни,
			СтараяДлительностьЧасы);
		Элементы.ДекорацияСтарыйСрок.Заголовок = НадписьСтарыйСрок;
	Иначе
		Элементы.ГруппаСроки.ТекущаяСтраница = Элементы.ГруппаСрокиДатами;
		СтарыйСрок = БизнесПроцесс.Ссылка.СрокИсполнения;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		Элементы.НовыйСрокВремя.Видимость = Ложь;
		Элементы.СтарыйСрок.Формат = "ДФ='dd.MM.yyyy'";
		Элементы.ЗадачиСрокИсполнения.Формат = "ДФ='dd.MM.yyyy'";
		Элементы.ЗадачиСрокИсполнения.Ширина = 5;
		Элементы.НоваяДлительностьЧасы.Видимость = Ложь;
		Элементы.ДекорацияЧасов.Видимость = Ложь;
	КонецЕсли;
	
	ВывестиКоличествоПереносовПоПроцессу();
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКоличествоПереносовПоПроцессу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК Колво
		|ИЗ
		|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		|ГДЕ ПереносыСроковВыполненияПроцессовИЗадач.Предмет = &БизнесПроцесс";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Колво > 0 Тогда
		КоличествоПереносовСроков = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'История переносов (%1)'"), 
			Строка(Выборка.Колво));
		Возврат;
	КонецЕсли;
	
	Элементы.КоличествоПереносовСроков.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.СписокЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Элементы.СписокЗадач.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Ложь);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриИзмененииНовогоСрока(ИзмененаДата)
	
	// Если в поле "Новый срок" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Время>. Это значение исправляется.
	Если ЗначениеЗаполнено(НовыйСрок) и НовыйСрок < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(НовыйСрок);
		МинутаДаты = Минута(НовыйСрок);
		СекундаДаты = Секунда(НовыйСрок);
		НовыйСрок = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
	Если ИзмененаДата И НовыйСрок < КонецДня(НовыйСрок)
		ИЛИ НЕ ИспользоватьВремяВСрокахЗадач Тогда
		НовыйСрок = КонецДня(НовыйСрок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСрок) Тогда
		ДлительностьПереноса = 
			ПереносСроковВыполненияЗадач.ПолучитьПодписьДлительностьПереноса(
				ТекущийПользователь, 
				СтарыйСрок, 
				НовыйСрок);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры
