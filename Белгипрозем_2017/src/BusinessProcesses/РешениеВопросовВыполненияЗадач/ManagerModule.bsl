#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является 
// 
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

// Конец УправлениеДоступом

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Если ПараметрыВыполнения.Свойство("ОтправитьНаУточнение") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ПроцессОбъект.Ссылка);
			
			ПроцессОбъект.ОтправитьНаУточнение = ПараметрыВыполнения.ОтправитьНаУточнение;
			ПроцессОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ПроцессОбъект.Ссылка);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Если ПараметрыВыполнения.Свойство("ПереносСрока") Тогда
			БизнесПроцессПредметаРассмотрения = ПараметрыВыполнения.БизнесПроцессПредметаРассмотрения;
			ПредметРассмотрения = ПараметрыВыполнения.ПредметРассмотрения;
			НовыйСрок = ПараметрыВыполнения.НовыйСрок;
			СтарыйСрок = ПараметрыВыполнения.СтарыйСрок;
			ТребуетсяРучноеИзменениеСрока = ПараметрыВыполнения.ТребуетсяРучноеИзменениеСрока;
			
			Если НЕ ТребуетсяРучноеИзменениеСрока Тогда
				// Вставка дополнительных свойств в бизнес-процесс для сохранения события переноса срока
				ДанныеДляЗаписиСобытияПереносаСрока = Новый Структура;
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить(
					"БизнесПроцессПереноса", БизнесПроцессСсылка);
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить(
					"КомментарийАвтора", ПараметрыВыполнения.РезультатВыполнения);
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить(
					"Пользователь", 
					ПользователиКлиентСервер.ТекущийПользователь());
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить("СтарыйСрок", СтарыйСрок);
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить("НовыйСрок", НовыйСрок);
				ДанныеДляЗаписиСобытияПереносаСрока.Вставить("Предмет", ПредметРассмотрения);
				
				// Обновление срока в процессе задачи-предмета рассмотрения
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессПредметаРассмотрения);
				БизнесПроцессОбъект = БизнесПроцессПредметаРассмотрения.ПолучитьОбъект();
				Если ТипЗнч(БизнесПроцессОбъект.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
					// Если запрос произошел в процессе Исполнение, то срок устанавливается персонально у задачи
					Для каждого Исполнитель Из БизнесПроцессОбъект.Исполнители Цикл
						Если Исполнитель.ЗадачаИсполнителя = ПредметРассмотрения Тогда
							Исполнитель.СрокИсполнения = НовыйСрок;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если БизнесПроцессОбъект.СрокИсполнения < НовыйСрок
						И ЗначениеЗаполнено(БизнесПроцессОбъект.СрокИсполнения) Тогда
						БизнесПроцессОбъект.СрокИсполнения = НовыйСрок;	
						// Запись события переноса срока процесса
					КонецЕсли;
					ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(
							БизнесПроцессОбъект, 
							ДанныеДляЗаписиСобытияПереносаСрока);
				Иначе
					БизнесПроцессОбъект.СрокИсполнения = НовыйСрок;
						
					// Запись события переноса срока процесса
					ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(
						БизнесПроцессОбъект, 
						ДанныеДляЗаписиСобытияПереносаСрока);
				КонецЕсли;		
					
				// Запись измененного процесса
				БизнесПроцессОбъект.Записать();
				ПротоколированиеРаботыПользователей.ЗаписатьИзменение(БизнесПроцессПредметаРассмотрения);
				
				// Обновление невыполненных задач
				СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(БизнесПроцессОбъект);
				БизнесПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
					СтарыеУчастникиПроцесса, 
					ДанныеДляЗаписиСобытияПереносаСрока);
				
				// Обновление бизнес-процесса переноса
				
				Если ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
					
					НовыйСрокПоСсылке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "НовыйСрок");
					
					Если НовыйСрокПоСсылке <> НовыйСрок Тогда
						ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСсылка);
						ПроцессПереносаОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
						ПроцессПереносаОбъект.НовыйСрок = НовыйСрок;
						ПроцессПереносаОбъект.Записать();
						РазблокироватьДанныеДляРедактирования(БизнесПроцессСсылка);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму().
//                 Ключ "ПараметрыФормы" содержит параметры формы.
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Если ЗадачаСсылка.БизнесПроцесс.ВидВопроса =
			Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаРассмотренияПереносаСрока";
		Иначе
			ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаЗадачиАвтора";
		КонецЕсли;
	ИначеЕсли ТочкаМаршрутаСсылка =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаЗадачиИсполнителя";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

Функция ТипШаблона() Экспорт
	
	Возврат "";
	
КонецФункции

Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		Если Не Параметры.Свойство("Ключ")
			И Не Параметры.Свойство("ВидВопроса") Тогда
			ВыбраннаяФорма = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаНовогоВопроса";
		ИначеЕсли Параметры.Свойство("ВидВопроса") 
			И Параметры.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ВыбраннаяФорма = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаЗапросаНаПереносСрока";
		Иначе
			ВыбраннаяФорма = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаБизнесПроцесса";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
// автоматический перенос сроков при согласовании заявки на перенос автором (истина),
// или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"Автор,
			|ИнициаторПроцесса,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации");
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ИнициаторПроцесса", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресации", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресации", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.ИнициаторПроцесса,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресации,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресации);
		
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);	
		
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Процесс, 
		"Автор,
		|ИнициаторПроцесса,
		|ОсновнойОбъектАдресации,
		|ДополнительныйОбъектАдресации,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(Реквизиты.ИнициаторПроцесса) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.ИнициаторПроцесса;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресации;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресации; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессСсылка, 
		"Автор, 
		| ИнициаторПроцесса,
		| ОсновнойОбъектАдресации,
		| ДополнительныйОбъектАдресации");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Инициатор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ИнициаторПроцесса);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресации);
	ДанныеУчастника.Вставить(
		"ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресации);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеСобытияФормат,
						Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
						Строка(Задача.Исполнитель));
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.РассмотрениеИнициатором Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Задача.БизнесПроцесс, 
			"ВидВопроса, ПредметРассмотрения");
		
		Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			
			КоличествоПереносовСрока = ПереносСроковВыполненияЗадач.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
				РеквизитыПроцесса.ПредметРассмотрения, Задача.БизнесПроцесс, Истина);
			
			Если КоличествоПереносовСрока > 0 Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
					СтрокаФорматирования = "ДФ='dd.MM.yyyy ЧЧ:мм'";
				Иначе
					СтрокаФорматирования = "ДФ=dd.MM.yyyy";
				КонецЕсли;
				
				АктуальныйСрок = Формат(
					ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыПроцесса.ПредметРассмотрения, "СрокИсполнения"),
					СтрокаФорматирования);
				
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				Действие = НСтр("ru = 'Срок перенесен на '") + АктуальныйСрок;
				
			Иначе
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				Действие = НСтр("ru = 'Срок не перенесен'");
			КонецЕсли;
		Иначе
			Действие = НСтр("ru = 'Вопрос рассмотрен'");
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОзнакомлениеСРезультатомРассмотрения Тогда
		
		ОтправитьНаУточнение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача.БизнесПроцесс, "ОтправитьНаУточнение");
		Если ОтправитьНаУточнение Тогда
			Действие = НСтр("ru = 'Уточнение'");
		Иначе
			Действие = НСтр("ru = 'Вопрос закрыт'");
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ": " + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Инициатор процесса
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"ИнициаторПроцесса", "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации", 
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект", Неопределено, Неопределено,
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Возврат "";

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Корреспонденты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы"));
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - бизнес
//							 процесс по которому назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Рассмотрено'"));
		Результат.ИспользоватьКомментарий = Истина;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Закрыть вопрос'"));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Уточнить'"));
		Результат.ИспользоватьКомментарий = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// Вспомогательные функции для общей формы ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт 
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру свойств, для последующей обработки в форме
// ОбщаяФорма.ЗадачиПоБизнесПроцессу
//
// Возвращаемое значение:
//   - Структура - описывает элементы формы и их свойства.
//
Функция СвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	НастройкиПолей = Новый Структура;
	
	НомерИтерации = Новый Структура;
	НомерИтерации.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("НомерИтерации", НомерИтерации);
	
	КомандаПринятьКИсполнению = Новый Структура;
	КомандаПринятьКИсполнению.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("ФормаПринятьКИсполнению", КомандаПринятьКИсполнению);
	
	КомандаОтменитьПринятиеКИсполнению = Новый Структура;
	КомандаОтменитьПринятиеКИсполнению.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("ФормаОтменитьПринятиеКИсполнению", КомандаОтменитьПринятиеКИсполнению);
	
	Возврат НастройкиПолей;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецЕсли
