#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДатаСеанса();
	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Стартован
		И НЕ ЗначениеЗаполнено(ИнициаторПроцесса) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Кому"" не заполнено'"), ЭтотОбъект, "ИнициаторПроцесса", , Отказ);
			
		Возврат;
		
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
		Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = 
			БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
			ОтправитьНаУточнение = ДополнительныеСвойства.ОтправитьНаУточнение;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	ПометкаИБ = Ссылка.ПометкаУдаления;
	Если ПометкаУдаления <> ПометкаИБ И Не Ссылка.Пустая() Тогда
		// Отбираем файлы и пытаемся поставить им пометку удаления
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.Ссылка,
			|	Файлы.Редактирует
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.Редактирует.Пустая() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вопрос %1 нельзя удалить, т.к. к нему прикреплен файл ""%2"", занятый для редактирования.'"),
					Строка(Ссылка),
					Строка(Выборка.Ссылка));
			КонецЕсли;
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;
	Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перенос срока по задаче: %1'"),
			Строка(ПредметРассмотрения));
	Иначе
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Рассмотрение вопроса: %1'"),
			Описание);
	КонецЕсли;
		
	Мультипредметность.ЗаполнитьПредметыТочекДействийПроцесса(ЭтотОбъект);
	
	// Обработка рабочей группы
	РаботаСБизнесПроцессами.СформироватьРабочуюГруппу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

// Обработчики событий карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура РассмотрениеИнициаторомПередСозданиемЗадач(
	ТочкаМаршрутаБизнесПроцесса,
	ФормируемыеЗадачи,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДатаСеанса();
	Задача.Автор = Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Согласовать перенос срока по задаче: %1'"),
			Строка(ПредметРассмотрения));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рассмотреть вопрос: %1'"),
			Описание);
	КонецЕсли;
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = ИнициаторПроцесса;
	Иначе
		Задача.РольИсполнителя = ИнициаторПроцесса;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);

	Итерация = Итерация + 1;
	НоваяСтрока = ЦиклыРассмотрения.Добавить();
	НоваяСтрока.Цикл = Итерация;
	НоваяСтрока.Задача = ЗадачаСсылка;
	
	Записать();
	
КонецПроцедуры

Процедура РассмотрениеИнициаторомПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаПояснениеПереносаСрока = "";
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
		СтрокаПояснениеПереносаСрока = "";
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			Если Задача.РезультатВыполнения = НСтр("ru = 'Согласовано'") Тогда
				СтрокаПояснениеПереносаСрока = НСтр("ru = ' (срок перенесен)'");
			Иначе
				СтрокаПояснениеПереносаСрока = НСтр("ru = ' (срок не перенесен)'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПринятоеРешение = Задача.РезультатВыполнения;
	
	Записать();
	
КонецПроцедуры

Процедура ОзнакомлениеСРезультатомРассмотренияПередСозданиемЗадач(
	ТочкаМаршрутаБизнесПроцесса,
	ФормируемыеЗадачи,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Автор = ИнициаторПроцесса;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.Выполнена
			|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
			|	И ЗадачаИсполнителя.Дата < &ДатаЗадачи
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗадачаИсполнителя.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 
			БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором);
		Запрос.УстановитьПараметр("ДатаЗадачи", Задача.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Задача.Автор = Выборка.Исполнитель;
	КонецЕсли;
	
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ознакомиться: перенос срока по задаче ""%1""'"),
			Строка(ПредметРассмотрения));
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ознакомиться с ответом на вопрос: %1'"),
			Описание);
	КонецЕсли;
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Исполнитель = Автор;
	ФормируемыеЗадачи.Добавить(Задача);
	РаботаСБизнесПроцессами.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
		
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	НоваяСтрока = ЦиклыРассмотрения.Добавить();
	НоваяСтрока.Цикл = Итерация;
	НоваяСтрока.Задача = ЗадачаСсылка;
	
	Записать();
	
КонецПроцедуры

Процедура ОзнакомлениеСРезультатомРассмотренияПриВыполнении(
	ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ПринятоеРешение = Задача.РезультатВыполнения;
	
	Записать();
	
КонецПроцедуры

Процедура УсловиеТребуетсяУточнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ОтправитьНаУточнение;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет значения реквизитов невыполненных задач
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
			ЗадачаОбъект.Описание = Описание;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.
				РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
				
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Рассмотреть вопрос: %1'"),
					Описание);
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.
				РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
				
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ознакомиться с ответом на вопрос: %1'"),
					Описание);
				
			КонецЕсли;
			
			Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") Тогда 
				ЗадачаОбъект.Исполнитель = ИнициаторПроцесса;
				ЗадачаОбъект.РольИсполнителя = Неопределено;
				ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
				ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
			Иначе
				ЗадачаОбъект.Исполнитель = Неопределено;
				ЗадачаОбъект.РольИсполнителя = ИнициаторПроцесса;
				ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
				ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	Возврат МассивПолей;
	
КонецФункции

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.
		РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		
		НайденнаяСтрока = ЦиклыРассмотрения.Найти(Задача, "Задача");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Если НайденнаяСтрока.Цикл > 1 Тогда
				Результат = НСТР("ru = 'Был задан уточняющий вопрос'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.
		РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		
		Если Задача.Выполнена Тогда
			Если ОтправитьНаУточнение Тогда
				Результат = НСТР("ru = 'Результат ознакомления с ответом: Задан уточняющий вопрос'");
			Иначе
				Результат = НСТР("ru = 'Результат ознакомления с ответом: Вопрос закрыт'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ИнициаторПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"ИнициаторПроцессаСтрокой", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли