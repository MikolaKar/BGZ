#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"СрокИсполнения,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Этапы,
		|ВариантМаршрутизации");
		
	СрокИсполнения = РеквизитыПроцесса.СрокИсполнения;
	Контролер = РеквизитыПроцесса.Контролер;
	ОсновнойОбъектАдресацииКонтролера = РеквизитыПроцесса.ОсновнойОбъектАдресацииКонтролера;
	ДополнительныйОбъектАдресацииКонтролера = РеквизитыПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	Этапы = РеквизитыПроцесса.Этапы.Выгрузить();
	ВариантМаршрутизации = РеквизитыПроцесса.ВариантМаршрутизации;
	
	Цвет_ЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.Цвет_ЗакрытыеНеактуальныеЗаписи();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, НСтр("ru = 'Срок:'"), Формат(СрокИсполнения, ФорматСрока), "");
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Этапы.Количество() > 0 Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = '№'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Действие'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого СтрЭтапа Из Этапы Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, СтрЭтапа.НомерСтроки, "");
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			ЦветТекста = "";
			Если СтрЭтапа.ЗадачаВыполнена
				Или Не ЗначениеЗаполнено(СтрЭтапа.ЗапущенныйБизнесПроцесс) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + Цвет_ЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = Цвет_ЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрЭтапа.ЗапущенныйБизнесПроцесс) Тогда
				Действие = СтрЭтапа.ЗапущенныйБизнесПроцесс;
			Иначе
				Действие = СтрЭтапа.ШаблонБизнесПроцесса;
			КонецЕсли;
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Действие, ЦветТекста);
			Если СтрЭтапа.ЗадачаВыполнена
				Или Не ЗначениеЗаполнено(СтрЭтапа.ЗапущенныйБизнесПроцесс) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписе под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(ВариантМаршрутизации) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Порядок: %1'");
			ПредставлениеРеквизитаНаправлять = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРеквизитаНаправлять,
				Строка(ВариантМаршрутизации));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеРеквизитаНаправлять, Цвет_ЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_КомплексныйПроцесс",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	// Контролер
	Если ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресацииКонтролера, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресацииКонтролера) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресацииКонтролера, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
		
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер Тогда
		ИмяФормы = "БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаЗадачиКонтролера";		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Если ТочкаМаршрутаСсылка <> БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс Тогда
		Результат.Вставить("ИмяФормы", ИмяФормы);
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
				
	Возврат МассивПользователей;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
    // Устанавливаем признак доступности печати по-комплектно
    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
    Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда

        // Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Карточка", "Карточка комплексного процесса", 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПечатьКарточки(
				МассивОбъектов, 
				ОбъектыПечати, 
				ПараметрыПечати));

	КонецЕсли;
		
КонецПроцедуры

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Предназначен для автоматизации сложных процессов. Состоит из произвольного количества запланированных действий (типовых процессов), которые выполняются по заранее настроенному порядку и при определенных условиях.'");
	
КонецФункции

Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныКомплексныхБизнесПроцессов";
	
КонецФункции

Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения(Ссылка) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	РеквизитСрок = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СрокИсполнения"); 
	
	СтрокаФормата = "ДФ=dd.MM.yyyy";
	Если ИспользоватьВремяВСрокахЗадач Тогда
		СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм'";	
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитСрок) Тогда
		Возврат Формат(РеквизитСрок, СтрокаФормата);	
	КонецЕсли;
	Возврат НСтр("ru = 'Срок не указан'");
	
КонецФункции

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
//	автоматический перенос сроков при согласовании заявки на перенос автором (истина),
//	или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, что процесс завершился удачно
// Параметры:
//	Ссылка - ссылка на комплексный процесс
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Завершен");
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	ЗавершилсяУдачно = ПроцессЗавершилсяУдачно(Ссылка);
	
	Если ЗавершилсяУдачно Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"Автор,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера");
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииКонтролера", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииКонтролера,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииКонтролера);
		
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);
		
КонецПроцедуры	

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Процесс, 
		"Автор, 
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		ДанныеУчастника.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресацииКонтролера;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресацииКонтролера;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;		
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессСсылка, 
		"Автор, 
		| Контролер, 
		| ДополнительныйОбъектАдресацииКонтролера, 
		| ОсновнойОбъектАдресацииКонтролера");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииКонтролера);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииКонтролера);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер", "ОсновнойОбъектАдресацииКонтролера", "ДополнительныйОбъектАдресацииКонтролера",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект", Неопределено, Неопределено,
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Возврат "";

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.КомплексныйПроцесс - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
			ЗадачаСсылка,
			БизнесПроцессСсылка,
			ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Контролер Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Снять с контроля'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Участники = Новый Структура(
		"Автор,
		|Контролер,
		|ОсновнойОбъектАдресацииКонтролера,
		|ДополнительныйОбъектАдресацииКонтролера");
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс,
			"Автор,
			|Контролер,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера");
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
		
	Возврат Участники;
	
КонецФункции

//////////////////////////////////////////////////////////
// Вспомогательные функции для общей формы ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт 
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецЕсли
