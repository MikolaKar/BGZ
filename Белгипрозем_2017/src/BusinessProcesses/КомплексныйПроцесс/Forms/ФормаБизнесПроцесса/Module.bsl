
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	Если Объект.Ссылка.Пустая() И Объект.Контролер = Неопределено Тогда 
		Объект.Контролер = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	ИспользоватьАвтоподстановки = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		Если НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
			Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВариантМаршрутизации) Тогда
			Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
		КонецЕсли;
	КонецЕсли;
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если Объект.Ссылка.Пустая() И Не Копирование Тогда 
		
		Если Параметры.Свойство("Предметы") И Параметры.Свойство("Шаблон") Тогда
			
			Мультипредметность.ПередатьПредметыПроцессу(Объект, Параметры.Предметы, Ложь, Истина);
			ЗаполнитьПоШаблонуНаСервере(Параметры.Шаблон);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	ОтложенныйСтартБизнесПроцессовСервер.
		ЗаполнитьРеквизитНастройкаОтложенногоСтартаВФормеПроцесса(ЭтаФорма);
		
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	УстановитьДоступность();
	УстановитьДоступностьПоШаблону();

	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(
		ЭтаФорма, 
		Объект.Ссылка.Пустая());
	
	ПолучитьДанныеПроекта();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтаФорма, Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Вычисления права на объект
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка).Изменение;
	КонецЕсли;
	
	// Заполняем строковое представление участников
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
		
	// Заполняем параметры участников. Параметры используются в обработчиках соответствующих полей.
	ПараметрыКонтролера =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Контролер",
			"КонтролерСтрокой",
			"ОсновнойОбъектАдресацииКонтролера",
			"ДополнительныйОбъектАдресацииКонтролера");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтаФорма, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтаФорма, Параметр.Файл);
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" 
		И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник, "БизнесПроцесс") = Объект.Ссылка Тогда
		Прочитать();	
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаВыполнена" 
		ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		ОбработатьЗавершениеЗадачи(Параметр);
	ИначеЕсли ИмяСобытия = "СозданиеДействия" Тогда
		Если ЭтаФорма = Источник Или Параметр.ВладелецШаблона <> Объект.Ссылка Тогда
			Возврат;
		КонецЕсли;
		ОбщийСрокУстановленВручную = Ложь;
		ИдентификаторЭтапа = ПрименитьНастройкиДействия(Параметр);
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
		ПодключитьОбработчикОжидания("ОбновитьОписаниеПредметов",0.1, Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ВыборШаблонаДействия" Тогда
		Если Объект.Ссылка <> Параметр.ВладелецШаблона Тогда
			Возврат;
		КонецЕсли;
		ПараметрыВозврата = СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(Параметр.ШаблонБП, Параметр.ВладелецШаблона);
		Если ПараметрыВозврата.ЗаполненыНеобходимыеДляСтартаПоля Тогда
			ИдентификаторЭтапа = ПараметрыВозврата.ИдентификаторЭтапа;
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
			Модифицированность = Истина;
		Иначе
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ПараметрыВозврата.Шаблон);
			ПараметрыФормы.Вставить("ВладелецШаблона", Параметр.ВладелецШаблона);
			ПараметрыФормы.Вставить("ИдентификаторЭтапа", ТекущийЭтап);
			ПараметрыФормы.Вставить("Предметы", Параметр.Предметы);
			ОткрытьФорму(ПараметрыВозврата.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НастройкаПорядкаВыполнения" Тогда
		Если Объект.Ссылка <> Параметр.ВладелецЭтапа Тогда
			Возврат;
		КонецЕсли;
		ОбщийСрокУстановленВручную = Ложь;
		ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
		ДанныеЭтапа.ПредшественникиВариантИспользования = Параметр.ПредшественникиВариантИспользования;
		РаботаСКомплекснымиБизнесПроцессамиКлиент.УстановитьПредшественниковЭтапа(Объект, ТекущийЭтап, Параметр.Предшественники);
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
		ПоместитьДлительностьНаФорму();
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Процесс_ИзменениеСрока" И Параметр.Предмет = Объект.Ссылка Тогда
		Объект.СрокИсполнения = Параметр.НовыйСрок;
		Модифицированность = Истина;
		Записать(Параметр);
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	ИначеЕсли УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		// Подсистема "Свойства"
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Проверка на допустимость запуска только что настроенного действия.
	// Если для него выполнены все условия запуска и комплексный процесс запущен,
	// взводится флаг необходимости выполнить попытку запуска новых действий.
	Если Объект.Стартован
		И (ИмяСобытия = "СозданиеДействия" 
		ИЛИ ИмяСобытия = "НастройкаПорядкаВыполнения") Тогда
		ПроверитьЗапускДействий = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" 
		И Параметр.БизнесПроцесс = Объект.Ссылка Тогда
		НастройкаОтложенногоСтарта = Параметр;
		ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" 
		И Параметр.Предмет = Объект.Ссылка
		И Параметр.Свойство("Контролер") 
		И Параметр.Контролер <> Объект.Контролер Тогда 
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма, Ложь);
	
	РаботаСБизнесПроцессами.ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, ЭтаФорма);
	
	// Заполняем строковое представление участников
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
		
	// Заполняем параметры участников. Параметры используются в обработчиках соответствующих полей.
	ПараметрыКонтролера =
		РаботаСБизнесПроцессамиКлиентСервер.ПолучитьСтруктуруПараметровУчастника(
			"Контролер",
			"КонтролерСтрокой",
			"ОсновнойОбъектАдресацииКонтролера",
			"ДополнительныйОбъектАдресацииКонтролера");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтапыКУдалению.Количество() > 0 Тогда
		УдалитьЭтапы();
		ЭтапыКУдалению.Очистить();
	КонецЕсли;
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт ИЛИ Объект.Стартован Тогда
		
		Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
			ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
		КонецЕсли;
		
		ПроверитьЗаполнениеПроцессаПередСтартом(Отказ);
		
		Если Объект.Стартован 
			И ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполнения, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Стартован
		И Модифицированность 
		И Не (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт) Тогда
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		И НЕ Объект.Стартован
		И Модифицированность
		И ЗначениеЗаполнено(НастройкаОтложенногоСтарта)
		И НастройкаОтложенногоСтарта.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту") Тогда
			
		ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(Отказ, Неопределено);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессами.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи
	// Проверка правильности указания трудозатрат участников процесса
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессами.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(ТекущийОбъект);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Не ТекущийОбъект.Стартован И ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		ПроверитьЗаполнениеПроцессаПередСтартомНаСервере(ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	Если ПроверитьЗапускДействий Тогда
		НовыеПроцессы = Новый Массив();
		ТекущийОбъект.СтартоватьНовыеДействия(
			НовыеПроцессы, 
			БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс, 
			Истина);
		ПроверитьЗапускДействий = Ложь;
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Объект.Ссылка, ПараметрыЗаписи);
	
	Объект.Этапы.Очистить();

	Для Каждого Этап Из ТекущийОбъект.Этапы Цикл
		ВладелецШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Этап.ШаблонБизнесПроцесса, "ВладелецШаблона");
		Если ВладелецШаблона <> ТекущийОбъект.Ссылка Тогда
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.ВладелецШаблона = ТекущийОбъект.Ссылка;
			ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
			ШаблонОбъект.Записать();
		КонецЕсли;
		
		НоваяСтрока = Объект.Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Этап);
		
	КонецЦикла;
		
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма, Ложь);
	
	Если ПараметрыЗаписи.Свойство("ПереносСрока") И ПараметрыЗаписи.ПереносСрока Тогда
		ПереносСроковВыполненияЗадач.СделатьЗаписьОПереносеСрока(ТекущийОбъект, ПараметрыЗаписи);	
	КонецЕсли;
	
	УстановитьДоступность();
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтаФорма, Объект);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ОповеститьОбИзменении(СтрокаПредмета.Предмет);
				КонецЕсли;
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Если пользователь отвечал на вопрос при старте процесса, то дальнейший 
	//	старт процесса выполняется неинтерактивно. В этом случае необходимо показать окно оповещения
	//	и добавить ссылку на процесс в историю.
	Если ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлахДокументов")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлах")
		Или ПараметрыЗаписи.Свойство("СтартоватьЕслиОбщийСрокМеньшеТекущего")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
		Или ПараметрыЗаписи.Свойство("ЗаписатьБезСоответствияСрокаИсполненияПроцессаИДатыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("ПроверкаПередОткрытиемФормыОтложенногоСтарта")
		Или ПараметрыЗаписи.Свойство("СтартоватьПриОшибкахВПроектах") Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Старт'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтаФорма, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтаФорма, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыОписаниеПриИзменении_Продолжение",
		ЭтотОбъект);
	
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ТекущаяСтрока.ПолучитьИдентификатор(),, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПредметыПредметПриИзменении();
	Иначе
		ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьОсновной(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения
		("ДобавитьОсновнойПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОсновнойПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбязательноЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьЭтапы()
	
	Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл 
		РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьЭтап(
			ЭтаФорма, 
			ЭтапКУдалению.Значение.ЗадачаЭтапа, 
			ЭтапКУдалению.Значение.ИдентификаторЭтапа);
	КонецЦикла;		
		
	ЭтапыУдалениеСервер();	
	
КонецПроцедуры


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	Если Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Высокая")
		ИЛИ Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Низкая") Тогда
		УстановитьВажностьВсехЭтапов(Объект.Важность);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантМаршрутизацииПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СрокИсполнения", Объект.СрокИсполнения);
	ПараметрыФормы.Вставить("Стартован", Объект.Стартован);
	Если Объект.Стартован Тогда
		ПараметрыФормы.Вставить("ДатаНачалаОтсчета", Объект.ДатаНачала);
	Иначе
		ПараметрыФормы.Вставить("ДатаНачалаОтсчета", Объект.Дата);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОписаниеСрока", ПояснениеОбщегоСрока);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("СрокИсполненияНачалоВыбораПродолжение", ЭтотОбъект);
		
	ОткрытьФорму(
		"БизнесПроцесс.КомплексныйПроцесс.Форма.ФормаВводКонтрольногоСрока",
		ПараметрыФормы,
		Элемент,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияНачалоВыбораПродолжение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено 
		И ТипЗнч(Результат) = Тип("Структура") 
		И Объект.СрокИсполнения <> Результат.СрокИсполнения Тогда
		
		ОбщийСрокУстановленВручную = Истина;
		Объект.СрокИсполнения = Результат.СрокИсполнения;
		ПояснениеОбщегоСрока = Результат.Описание;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияСтартОтложенТекстНажатие(Элемент)
	
	ОтложенныйСтартБизнесПроцессовКлиент.ПоказатьПричинуОтменыОтложенногоСтарта(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(Элемент,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Объект.Контролер,,,,, 
		Объект.ОсновнойОбъектАдресацииКонтролера, Объект.ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(Элемент, СтандартнаяОбработка,
		ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтаФорма, ПараметрыКонтролера);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ЭТАПЫ"

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя <> "ЭтапыПредшественникиЭтапаСтрокой" Тогда
		ИзменитьДействиеКлиент();
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуНастройкиПредшественниковЭтапа(Объект, Элемент.ТекущиеДанные, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьДействиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
    Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтаФорма, 
		Объект.Ссылка, 
		Объект.Предметы);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	НаЭтапЕстьСсылки = Ложь;
	Для Каждого Строка Из Объект.ПредшественникиЭтапов Цикл
		Если Строка.ИдентификаторПредшественника = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			НаЭтапЕстьСсылки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НаЭтапЕстьСсылки Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание! От данного действия зависит порядок выполнения других действий.
						|Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	Иначе	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	КонецЕсли;
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не удалять'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыПередУдалениемПродолжение", ЭтотОбъект, ДанныеЭтапа);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, Режим, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалениемПродолжение(Ответ, ДанныеЭтапа) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураУдаляемогоЭтапа = Новый Структура();
	СтруктураУдаляемогоЭтапа.Вставить("ЗадачаЭтапа", ДанныеЭтапа.ЗадачаЭтапа);
	СтруктураУдаляемогоЭтапа.Вставить("ИдентификаторЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	Элементы.Этапы.ТекущиеДанные.Удален = Истина;
	ЭтапыКУдалению.Добавить(СтруктураУдаляемогоЭтапа);
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
	Для Счетчик = 1 по Объект.Этапы.Количество() - 1 Цикл
		Этап = Объект.Этапы[Счетчик]; 
		Если Не ПустаяСтрока(Этап.ПредшественникиЭтапаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
		
		НовыйПредшественникПодобран = Ложь;
		Для Индекс = 1 по Счетчик Цикл
			ДействительныйИндекс = Счетчик - Индекс;
			Если Не Объект.Этапы[ДействительныйИндекс].Удален Тогда
				НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
				НовыйПредшественникПодобран = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НовыйПредшественникПодобран Тогда
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
		КонецЕсли;
		
		НоваяСтрока.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения");
	КонецЦикла;
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПослеУдаления(Элемент)
	
	ПослеУдаленияДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВычислитьОписаниеПредшественников(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
		 
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда
		Элементы.НастроитьДействие.Доступность = Ложь;
		Элементы.КонтекстноеМенюНастроитьДействие.Доступность = Ложь;
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	Если ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа Тогда
		Возврат;
	КонецЕсли;
	          	
	Если Объект.Завершен Или Не ДоступностьПоШаблону Тогда
		Элементы.ГруппаКоманднаяПанельСписка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
			
	Элементы.ЭтапыУдалить.Доступность = НЕ ЗначениеЗаполнено(ДанныеЭтапа.ЗапущенныйБизнесПроцесс);
	Элементы.ЭтапыКонтекстноеМенюУдалить.Доступность = НЕ ЗначениеЗаполнено(ДанныеЭтапа.ЗапущенныйБизнесПроцесс);	
	Элементы.НастроитьДействие.Доступность = НЕ (ЗначениеЗаполнено(ДанныеЭтапа.ЗапущенныйБизнесПроцесс) И НЕ ДанныеЭтапа.ЗадачаВыполнена);
	Элементы.КонтекстноеМенюНастроитьДействие.Доступность = Элементы.НастроитьДействие.Доступность;
	Элементы.ЭтапыПредшественникиЭтапаСтрокой.ТолькоПросмотр = Не Элементы.НастроитьДействие.Доступность;
	Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Элементы.НастроитьДействие.Доступность;
	ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
	ПометитьНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура ДекорацияПричинаПрерыванияНажатие(Элемент)
		
	КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныКомплексныхБизнесПроцессов", , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	ШаблонСсылка = СохранитьКакШаблонСервер();
	Если ЗначениеЗаполнено(ШаблонСсылка) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан шаблон процесса.'"), 
			ПолучитьНавигационнуюСсылку(ШаблонСсылка),
			Строка(ШаблонСсылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействие(Команда)

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтаФорма, 
		Объект.Ссылка, 
		Объект.Предметы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтложенныйСтарт(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.НастроитьОтложенныйСтарт(ЭтаФорма, Объект.СрокИсполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПослеУдаленияДействия()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
	Отказ, ПараметрыЗаписи, ОткрытьФормуНастройкиОтложенногоСтарта = Ложь) Экспорт
	
	ПроверитьЗаполнениеПроцессаПередСтартом(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОтложенныйСтартНаСервере(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытьФормуНастройкиОтложенногоСтарта Тогда
		
		Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		
		СрокИсполнения = '00010101';
		ПараметрыЗаписи.Свойство("СрокИсполнения", СрокИсполнения);
		
		ОтложенныйСтартБизнесПроцессовКлиент.НастроитьОтложенныйСтарт(
			Объект.Ссылка, СрокИсполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭтапыУдалениеСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	БизнесПроцессОбъект.ЗаполнитьЭтапыПоШаблону(Шаблон);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	УстановитьДоступность();
	УстановитьДоступностьПоШаблону();
	
	// Заполняем строковое представление участников
	КонтролерСтрокой = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Объект.Контролер,
		Объект.ОсновнойОбъектАдресацииКонтролера,
		Объект.ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	Если Объект.Завершен
		ИЛИ Не ПравоНаИзменение Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Доступность = Ложь;
		Элементы.ФормаПрервать.Доступность = Ложь;
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Ложь;
		Элементы.ВариантМаршрутизации.Доступность = Ложь;
		Элементы.Контролер.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.ГруппаОстановлен.Видимость = Ложь;
	Элементы.ГруппаПрерван.Видимость = Ложь;
	Элементы.ГруппаИнфо.Видимость = Объект.Стартован;
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Если Объект.Стартован Тогда
		Элементы.ФормаЗаполнитьПоШаблону.Доступность = Ложь;
		Элементы.ЭтапыПереместитьВверх.Доступность = Ложь;
		Элементы.ЭтапыПереместитьВниз.Доступность = Ложь;
		Элементы.ЭтапыКонтекстноеМенюПереместитьВверх.Доступность = Ложь;
		Элементы.ЭтапыКонтекстноеМенюПереместитьВниз.Доступность = Ложь;		
		Элементы.ГруппаОстановлен.Видимость = Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
		Элементы.ГруппаПрерван.Видимость = Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;		
		Элементы.ВариантМаршрутизации.Доступность = Ложь;
		
		Если Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			РаботаСБизнесПроцессами.ОтобразитьНаФормеПричинуПрерывания(ЭтаФорма);
		КонецЕсли;
		
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		
	Иначе
		Элементы.ФормаОстановить.Видимость = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Элементы.ФормаПрервать.Видимость = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда
		Элементы.ФормаОстановить.Видимость = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Элементы.ФормаПрервать.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессами.ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.Контролер) Тогда 
		Элементы.Контролер.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Контролер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Элементы.Контролер.ТолькоПросмотр = Элементы.Контролер.ТолькоПросмотр ИЛИ ТолькоПросмотр;
		
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда 
		Элементы.СрокИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Этапы.Количество() > 0 Тогда
		Элементы.Этапы.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.ЭтапыДобавить.Доступность = ДоступностьПоШаблону;
		Элементы.ЭтапыКонтекстноеМенюДобавить.Доступность = ДоступностьПоШаблону;
		Элементы.НастроитьДействие.Доступность = ДоступностьПоШаблону;
		Элементы.КонтекстноеМенюНастроитьДействие.Доступность = ДоступностьПоШаблону;
		Элементы.ВариантМаршрутизации.ТолькоПросмотр = Не ДоступностьПоШаблону
	Иначе
		Элементы.Этапы.ТолькоПросмотр = Ложь;
	КонецЕсли;
		
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеЗадачи(Задача)
	
	Прочитать();
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(ШаблонБП, ВладелецШаблона) 

	Если ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		// Развернем автоподстановки из шаблона в реальных исполнителей
		ИмяПроцесса = Справочники[ШаблонБП.Метаданные().Имя].ИмяПроцесса(ШаблонБП);
		БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		
		БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Автор = Объект.Автор;
		
		Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБП, БизнесПроцессОбъект);
		
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
			БизнесПроцессОбъект.ЗаполнитьЭтапыПоШаблону(ШаблонБП);
		КонецЕсли;
		
		Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Объект.Предметы);
		
		БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонБП);
		
		ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
		
		ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
		
	Иначе
		
		ШаблонДляВставкиОбъект = ШаблонБП.Скопировать();
		
	КонецЕсли;
	
	ШаблонДляВставкиОбъект.ИсходныйШаблон = ШаблонБП;
	ШаблонДляВставкиОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
	
	Если ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
		ИЛИ ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		ШаблонДляВставкиОбъект.Важность = ВладелецШаблона.Важность;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонДляВставкиОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяФормыДляОткрытия = ШаблонДляВставки.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
	ДанныеВозврата = Новый Структура;
	Данныевозврата.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
	ДанныеВозврата.Вставить("Шаблон", ШаблонДляВставкиОбъект.Ссылка);
	
	ЗаполненыНеобходимыеПоля = УШаблонаДействияЗаполненыВсеНеобходимыеПоля(ШаблонДляВставкиОбъект);
	ДанныеВозврата.Вставить("ЗаполненыНеобходимыеДляСтартаПоля", ЗаполненыНеобходимыеПоля);
	Если ЗаполненыНеобходимыеПоля Тогда
		ПараметрыНастройкиДействия = Новый Структура();
		ПараметрыНастройкиДействия.Вставить("ШаблонБП", ШаблонДляВставкиОбъект.Ссылка);
		ПараметрыНастройкиДействия.Вставить("ВладелецШаблона", Объект.Ссылка);
		ИдентификаторЭтапа = ПрименитьНастройкиДействия(ПараметрыНастройкиДействия);
		ДанныеВозврата.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа); 
	КонецЕсли;
		
	Возврат ДанныеВозврата;
	
КонецФункции

&НаСервере
Функция СохранитьКакШаблонСервер()
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект");
	Объект.Шаблон = ПроцессОбъект.СоздатьШаблонПоПроцессу(Объект.Шаблон);	
	Возврат Объект.Шаблон;
	
КонецФункции

&НаСервере
Процедура УстановитьВажностьВсехЭтапов(ВажностьЭтапов)
	
	Для Каждого Этап Из Объект.Этапы Цикл
		ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонОбъект.Важность = ВажностьЭтапов;
		ШаблонОбъект.Записать();
	КонецЦикла;
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыДляОткрытияДействия(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаСервере
Функция ПрименитьНастройкиДействия(Параметр)
	
	Результат = РаботаСКомплекснымиБизнесПроцессамиСервер.ПрименитьНастройкиДействия(ЭтаФорма, Параметр);	
	ВариантМаршрутизацииПриИзмененииСервер();
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура ПоместитьДлительностьНаФорму()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ПоместитьДлительностьНаФорму(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ВариантМаршрутизацииПриИзмененииСервер()
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РаботаСКомплекснымиБизнесПроцессамиСервер.ВариантМаршрутизацииПриИзменении(ОбъектФормы, ЭтапыКУдалению);
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	Для Каждого Этап Из Объект.Этапы Цикл
		Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
			Если Этап.ИдентификаторЭтапа = ЭтапКУдалению.Значение.ИдентификаторЭтапа Тогда
				Этап.Удален = истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = Объект.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = Объект.Проект.ЕдиницаТрудозатратЗадач;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);
	Элементы.ТрудозатратыПланКонтролера.Заголовок = ЕдиницаТрудозатратСтр;
	
КонецПроцедуры	

&НаКлиенте
Процедура ИзменитьДействиеКлиент()
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗапущенныйБизнесПроцесс) И НЕ ТекущиеДанные.ЗадачаВыполнена Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ПараметрыФормы.Вставить("ЗаявкаНаПеренос", ЗаявкаНаПереносСрока);
		ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗапущенныйБизнесПроцесс) И ТекущиеДанные.ЗадачаВыполнена Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);	
	Иначе
		ВыполнитьНастройкуДействия(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуДействия(ТекущиеДанные)
	
	ИмяФормыДляОткрытия = ПолучитьИмяФормыДляНастройкиДействия(ТекущиеДанные.ШаблонБизнесПроцесса);
	Если Не ЗначениеЗаполнено(ИмяФормыДляОткрытия) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ШаблонБизнесПроцесса);
	Если ЗначениеЗаполнено(Объект.Автор) Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Не ДоступностьПоШаблону И ЗначениеЗаполнено(Объект.Шаблон));
	КонецЕсли;
	Предметы = Новый Массив;
	Для Каждого СтрокаПредмет Из Объект.Предметы Цикл
		Предметы.Добавить(СтрокаПредмет.Предмет);
	КонецЦикла;
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы);
	КонецЕсли;
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста	
Функция УШаблонаДействияЗаполненыВсеНеобходимыеПоля(ШаблонОбъект) 
	
	Возврат ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта().Количество() = 0;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяФормыДляНастройкиДействия(Действие)
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		Возврат "Справочник.ШаблоныИсполнения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		Возврат "Справочник.ШаблоныКомплексныхБизнесПроцессов.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Возврат "Справочник.ШаблоныОзнакомления.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		Возврат "Справочник.ШаблоныПоручения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		Возврат "Справочник.ШаблоныПриглашения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Возврат "Справочник.ШаблоныРассмотрения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Возврат "Справочник.ШаблоныРегистрации.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Возврат "Справочник.ШаблоныСогласования.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		Возврат "Справочник.ШаблоныСоставныхБизнесПроцессов.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Возврат "Справочник.ШаблоныУтверждения.ФормаОбъекта";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОписаниеПредметов()
	
	МультипредметностьКлиент.ОбновитьОписаниеПредметов(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса() Экспорт
	
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
	Элементы.Контролер.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере()
	
	Прочитать();
	РаботаСБизнесПроцессами.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ЭтаФорма);
	
КонецПроцедуры

// Вспомогательная процедура команды НастроитьОтложенныйСтарт.
// Используется для группировки серверных вызовов и проверки
// заполнения объекта.
//
// Параметры
//  - Отказ  - Булево - принимает значение Истина, если имеются ошибки заполнения.
//
&НаСервере
Процедура НастроитьОтложенныйСтартНаСервере(Отказ)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект", Тип("БизнесПроцессОбъект.КомплексныйПроцесс")); 
	
	ПроверитьЗаполнениеПроцессаПередСтартомНаСервере(ПроцессОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура("Контролер", Объект.Контролер);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки заполнения процесса перед стартом

// Проверяет заполнение процесса перед стартом на клиенте.
//
// Параметры:
//  - Отказ  - Булево - принимает значение Истина, если имеются ошибки заполнения.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаПередСтартом(Отказ)
	
	МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтаФорма, Отказ);
	// Проверка на корректность заполнения перед стартом
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Текст = НСтр("ru = 'Не заполнено поле ""Наименование"".'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"Объект.Наименование",
			,
			Отказ);
	КонецЕсли;
	Если Объект.Этапы.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Не указано ни одного действия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"Объект.Этапы",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение процесса перед стартом на сервере.
//
// Параметры:
//  - ТекущийОбъект - процесс объект
//  - Отказ - Булево - принимает значение Истина, если имеются ошибки заполнения.
//  - ТолькоПроверка - Булево - если передается значение Истина, то происходит только проверка
//
&НаСервере
Процедура ПроверитьЗаполнениеПроцессаПередСтартомНаСервере(ТекущийОбъект, Отказ)
	
	МассивЭтаповДляЗапуска = Новый Массив();
	Для каждого ЭтапБизнесПроцесса Из ТекущийОбъект.Этапы Цикл
		Если ТекущийОбъект.ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Истина) Тогда
			МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
		КонецЕсли;
	КонецЦикла;
	Если МассивЭтаповДляЗапуска.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Старт процесса прерван. Не найдено ни одного действия, подходящего для старта. Необходимо проверить условия и порядок выполнения действий и повторить попытку.'");
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДействие(Команда)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьНастройкуДействия(ТекущиеДанные);
	
КонецПроцедуры
	
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
  Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
    РезультатВыполнения = Неопределено;
    ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
    ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
  КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
  ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 120);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

