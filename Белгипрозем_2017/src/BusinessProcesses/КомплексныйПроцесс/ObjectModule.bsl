#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//////////////////////////////////////
// Общего назначения

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса, ЗаполнятьЭтапы = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		УстановитьСсылкуНового(БизнесПроцессы.КомплексныйПроцесс.ПолучитьСсылку(Новый УникальныйИдентификатор()));
	КонецЕсли;
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("Строка") И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда 
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи") Тогда 
			Контролер = АвтоподстановкаКонтролер;
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
		ОсновнойОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ОсновнойОбъектАдресацииКонтролера;
		ДополнительныйОбъектАдресацииКонтролера = ШаблонБизнесПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;	
	
	Для Каждого ПредшественникЭтапаШаблона Из ШаблонБизнесПроцесса.ПредшественникиЭтапов Цикл
		ЗаполнитьЗначенияСвойств(ПредшественникиЭтапов.Добавить(), ПредшественникЭтапаШаблона);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Если ВариантМаршрутизации <> ШаблонБизнесПроцесса.ВариантМаршрутизации Тогда
		ВариантМаршрутизации = ШаблонБизнесПроцесса.ВариантМаршрутизации;
	КонецЕсли;
	
	Шаблон = ШаблонБизнесПроцесса;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнитьПоШаблону(ЭтотОбъект, ШаблонБизнесПроцесса);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьЭтапыПоШаблону(ШаблонБизнесПроцесса);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

Процедура УстановитьПометкуУдаленияЭтапов(Установить)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
			Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().УстановитьПометкуУдаления(Установить);
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
				|		ПО КомплексныйПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
				|ГДЕ
				|	КомплексныйПроцесс.Ссылка = &ПараметрСсылка";
			Запрос.УстановитьПараметр("ПараметрСсылка", Ссылка);	
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МассивБизнесПроцессов = ПолучитьБизнесПроцессыПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
				Для Каждого БизнесПроцесс Из МассивБизнесПроцессов Цикл
					БизнесПроцесс.ПолучитьОбъект().УстановитьПометкуУдаления(Установить);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьНепривязанныеШаблоны()
	
	// Установка пометки удаления у шаблонов, которые были созданы, но не прикреплены к комплексному процессу.
	// Например, создали комплексный процесс, добавили действие, а затем не сохранили комплексный процесс.
	Запрос = Новый Запрос;
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.%1 КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК ЭтапыПроцесса
		|		ПО (ЭтапыПроцесса.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныПроцессов.ВладелецШаблона = &ВладелецШаблона
		|	И ЭтапыПроцесса.Ссылка ЕСТЬ NULL ";
	ТипыШаблонов = ЭтотОбъект.Метаданные().ТабличныеЧасти.Этапы.Реквизиты.ШаблонБизнесПроцесса.Тип.Типы();
	Для Каждого Тип Из ТипыШаблонов Цикл
		ШаблонОбъект = Новый(Тип);
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапроса,
			ШаблонОбъект.Метаданные().Имя);
		Запрос.УстановитьПараметр("ВладелецШаблона", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонДляУдаления = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонДляУдаления.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Формирует описание процесса из общего описания вышестоящего комплексного процесса 
// и описания этого процесса.
// Параметры:
//	ОбщееОписание - строка. Описание вышестоящего комплексного процесса.
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	Записать();
	
КонецПроцедуры

// Создает шаблон по данному комплексному процессу. Если указана ссылка на шаблон,
// то выполняется обновление объекта по переданной ссылке, если нет - создается новый 
// шаблон комплексного процесса.
// Параметры:
//	ШаблонСсылка - ссылка на шаблон комплексного процесса.
Функция СоздатьШаблонПоПроцессу(ШаблонСсылка = Неопределено) Экспорт
	
	// перенос реквизитов в шаблон
	Если ШаблонСсылка = Неопределено ИЛИ ШаблонСсылка.Пустая() Тогда
		ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
		ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	Иначе
		ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();
	КонецЕсли;
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Контролер = Контролер;
	ШаблонОбъект.ОсновнойОбъектАдресацииКонтролера = ОсновнойОбъектАдресацииКонтролера;
	ШаблонОбъект.ДополнительныйОбъектАдресацииКонтролера = ДополнительныйОбъектАдресацииКонтролера;
	ШаблонОбъект.ВариантМаршрутизации = ВариантМаршрутизации;
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	РазностьОбщегоСрока = СрокИсполнения - Дата;
	ШаблонОбъект.СрокИсполнения = Цел(РазностьОбщегоСрока/(3600*24));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		ШаблонОбъект.СрокИсполненияЧасов = Цел((РазностьОбщегоСрока - ШаблонОбъект.СрокИсполнения*3600*24)/3600);
	КонецЕсли;

	ШаблонОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	
	// перенос этапов в шаблон
	ШаблонОбъект.Этапы.Очистить();
	Для Каждого Этап Из Этапы Цикл
		НовыйЭтап = ШаблонОбъект.Этапы.Добавить();
		НовыйЭтап.ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
		
		НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
		НовыйШаблон.Записать();
		
		НовыйЭтап.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
		
		СтрокиПредметовЗадач = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
			Этап.ИдентификаторЭтапа, Этап.ШаблонБизнесПроцесса));
		Для Каждого Строка Из СтрокиПредметовЗадач Цикл
			Строка.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
		КонецЦикла;
		
		НовыйЭтап.ИсполнителиЭтапаСтрокой = Этап.ИсполнителиЭтапаСтрокой;
		НовыйЭтап.ПредшественникиЭтапаСтрокой = Этап.ПредшественникиЭтапаСтрокой;
		НовыйЭтап.ПредшественникиВариантИспользования = Этап.ПредшественникиВариантИспользования;
	КонецЦикла;
	
	// перенос настройки порядка выполнения
	ШаблонОбъект.ПредшественникиЭтапов.Очистить();
	Для Каждого ЗаписьПорядка Из ПредшественникиЭтапов Цикл
		НоваяЗапись = ШаблонОбъект.ПредшественникиЭтапов.Добавить();
		НоваяЗапись.ИдентификаторПредшественника = ЗаписьПорядка.ИдентификаторПредшественника;
		НоваяЗапись.ИдентификаторПоследователя = ЗаписьПорядка.ИдентификаторПоследователя;
		НоваяЗапись.УсловиеПерехода = ЗаписьПорядка.УсловиеПерехода;
	КонецЦикла;
	
	ШаблонОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	ШаблонОбъект.Записать();
	
	// установка реквизита ВладелецШаблона у настроек действий на шагах
	Для Каждого Этап Из ШаблонОбъект.Этапы Цикл
		НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		НовыйШаблон.ВладелецШаблона = ШаблонОбъект.Ссылка;
		НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
		НовыйШаблон.Записать();		
	КонецЦикла;
	
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Возвращает длительность процесса
Функция ПолучитьДлительностьПроцесса() Экспорт
	
	Возврат РаботаСКомплекснымиБизнесПроцессамиСервер.ПолучитьДлительностьПроцесса(ЭтотОбъект);
	
КонецФункции

// Выполняет поиск доступных для запуска действий и стартует их
// Параметры:
//	ФормируемыеБизнесПроцессы - массив объектов созданных процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразуПослеСоздания - флаг, показывающий, что процессы необходимо стартовать сразу после создания
//
//	Флаг "СтартоватьСразуПослеСоздания" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания, ПослеПроцесса = Неопределено) Экспорт
		
	Попытка
		ВнешняяТранзакция = Истина;
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ВнешняяТранзакция = Ложь;
		КонецЕсли;
		
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(ПослеПроцесса);
		
		//для каждого этапа, который запускается, удалить признак перехода по нему
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				Если Предшественник.ИдентификаторПредшественника = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Ложь;
				КонецЕсли;
				Если Предшественник.ИдентификаторПоследователя = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			ЭтапДляЗапуска.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
		КонецЦикла;
				
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Попытка
				СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Пока Инфо.Причина <> Неопределено Цикл
					Инфо = Инфо.Причина;
				КонецЦикла;
				Описание = Инфо.Описание;
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Эта задача не может быть выполнена.%1%2'"),
					Символы.ПС,
					Описание);
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЦикла;
		
		Записать();
			
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки	
	
КонецПроцедуры

Функция ПолучитьБизнесПроцессыПоЗадаче(ЗадачаСсылка)
	
	МассивБП = Новый Массив;
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ВедущаяЗадача = &Задача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивБП.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивБП;
	
КонецФункции

// Обновляет реквизиты невыполненных задач
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт
	
	СтарыйКонтролер = СтарыеУчастникиПроцесса.Контролер;
	СтарыйОсновнойОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ОсновнойОбъектАдресацииКонтролера;
	СтарыйДополнительныйОбъектАдресацииКонтролера = 
		СтарыеУчастникиПроцесса.ДополнительныйОбъектАдресацииКонтролера;
	
	ИзмененКонтролер = СтарыйКонтролер <> Контролер
		ИЛИ СтарыйОсновнойОбъектАдресацииКонтролера <> ОсновнойОбъектАдресацииКонтролера
		ИЛИ СтарыйДополнительныйОбъектАдресацииКонтролера <> ДополнительныйОбъектАдресацииКонтролера;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДанныеБизнесПроцессов.ВедущаяЗадача = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ДанныеБизнесПроцессов.БизнесПроцесс ЕСТЬ NULL 
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
        ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер Тогда
			ЗадачаОбъект.Автор 	= Автор;
			ЗадачаОбъект.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать'") + ": ", Описание);
			ЗадачаОбъект.Важность = Важность;
			
			ЗадачаОбъект.БизнесПроцесс  = ЭтотОбъект.Ссылка;
			
			СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЗадачаОбъект,, Истина);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
			
			Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контролировать ход процесса: %1'"),
					ПредметыСтрокой);
			Иначе
				ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контролировать: %1'"),
				 	Наименование);
			КонецЕсли;
			
			Если ИзмененКонтролер Тогда
				
				Если ЗадачаОбъект.ПринятаКИсполнению Тогда
					ЗадачаОбъект.ПринятаКИсполнению = Ложь;
					ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
					ЗадачаОбъект.Исполнитель = Контролер;
					ЗадачаОбъект.РольИсполнителя = Неопределено;
					ЗадачаОбъект.ОсновнойОбъектАдресации = Неопределено;
					ЗадачаОбъект.ДополнительныйОбъектАдресации = Неопределено;
				Иначе
					ЗадачаОбъект.Исполнитель = Неопределено;
					ЗадачаОбъект.РольИсполнителя = Контролер;
					ЗадачаОбъект.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
					ЗадачаОбъект.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
				КонецЕсли;
			КонецЕсли;
			
			РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ИзменениеРеквизитовНевыполненныхЗадач(
				ПараметрыЗаписи,
				ЭтотОбъект,
				ЗадачаОбъект);
				
			ЗадачаОбъект.Записать();

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнениеПроцессаПоЗадаче(
		ЭтотОбъект,
		ЗадачаСсылка);
	
КонецПроцедуры	

// Формирует строку из имен полей через запятую
Функция МассивПолейВСтроку(МассивПолей)
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьЭтапыПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Этапы.Очистить();
	ПредшественникиЭтапов.Очистить();
	
	Для Каждого ЭтапШаблона Из ШаблонБизнесПроцесса.Этапы Цикл
		НовыйЭтап = Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапШаблона);
		Если НЕ ЗначениеЗаполнено(ЭтапШаблона.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
			// копирование общего шаблона в настройку действия этапа комплексного процесса
			// разворачивание автоподстановок
			ИмяПроцесса = Справочники[ЭтапШаблона.ШаблонБизнесПроцесса.Метаданные().Имя].ИмяПроцесса(ЭтапШаблона.ШаблонБизнесПроцесса);
			
			БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
			БизнесПроцессОбъект.Автор = Автор;
			БизнесПроцессОбъект.Заполнить(Новый Структура());
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса, БизнесПроцессОбъект);
			Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
				БизнесПроцессОбъект.ЗаполнитьЭтапыПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
			КонецЕсли;
			Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ЭтотОбъект, Истина);
			БизнесПроцессОбъект.ЗаполнитьПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
			
			ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
			ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
			ШаблонДляВставкиОбъект.ИсходныйШаблон = ЭтапШаблона.ШаблонБизнесПроцесса;
			ШаблонДляВставкиОбъект.ВладелецШаблона = Ссылка;
			ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
			ШаблонДляВставкиОбъект.Записать();
			
			СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
				НовыйЭтап.ИдентификаторЭтапа, НовыйЭтап.ШаблонБизнесПроцесса));
			Для Каждого Строка Из СтрокиПредметовЗадач Цикл
				Строка.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
			КонецЦикла;
			
			НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
		Иначе
			ШаблонДействияОбъект = ЭтапШаблона.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
			ШаблонДействияОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
			ШаблонДействияОбъект.ВладелецШаблона = Ссылка;
			ШаблонДействияОбъект.ШаблонВКомплексномПроцессе = Истина;
			ШаблонДействияОбъект.Записать();
			
			СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
				НовыйЭтап.ИдентификаторЭтапа, НовыйЭтап.ШаблонБизнесПроцесса));
			Для Каждого Строка Из СтрокиПредметовЗадач Цикл
				Строка.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
			КонецЦикла;
			
			НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтапыДляЗапуска(ПослеПроцесса)
	
	МассивЭтаповДляЗапуска = Новый Массив();
	
	Если ПослеПроцесса = Неопределено Тогда
		
		Для Каждого ЭтапБизнесПроцесса Из Этапы Цикл
			
			Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
				МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			
			Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> ПослеПроцесса Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				
				Если Предшественник.ИдентификаторПредшественника <> ЭтапПроцесса.ИдентификаторЭтапа Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтапБизнесПроцесса = ПолучитьЭтапПоИдентификатору(Предшественник.ИдентификаторПоследователя);
				
				Если ЭтапБизнесПроцесса = Неопределено Тогда 
					
					Если ВариантМаршрутизации <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
						Продолжить;
					КонецЕсли;
					
					Индекс = Этапы.Индекс(ЭтапПроцесса);
					
					Если НЕ (Индекс < Этапы.Количество() - 1
							И ЗапускЭтапаПроцессаВозможен(Этапы[Индекс+1], Ложь)) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					МассивЭтаповДляЗапуска.Добавить(Этапы[Индекс+1]);
					
				Иначе
					
					Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
						МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЭтаповДляЗапуска;
	
КонецФункции

/////////////////////////////////////
// Обработка событий процесса

Процедура ВложенныйПроцессПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, Ложь);	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
			ЗаполнитьЭтапыПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);	
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Обработка'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КонтролерПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = ?(ЗначениеЗаполнено(Описание), НСтр("ru = 'Контролировать'") + ": ", Описание);
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	Задача.Важность = Важность;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача,, Истина);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда 
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать ход процесса: %1'"),
			ПредметыСтрокой);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать: %1'"),
		 	Наименование);
	КонецЕсли;	
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
		Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресацииКонтролера;
		Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресацииКонтролера;
	КонецЕсли;	
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.КонтролерПередСозданиемЗадач(ЭтотОбъект, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	// Проверка настроек отложенного старта подпроцессов.
	// Для первого этапа должен быть хотя бы один подпроцесс без настройки отложенного старта.
	МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(Неопределено);
	Если МассивЭтаповДляЗапуска.Количество() > 0 Тогда
		СписокЭтапов = Новый СписокЗначений;
		
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			СписокЭтапов.Добавить(ЭтапДляЗапуска.ШаблонБизнесПроцесса);
		КонецЦикла;
		
		СписокШаблонов = 
			ОтложенныйСтартБизнесПроцессовСервер.СписокШаблоновСНастройкамиОтложенногоСтарта(СписокЭтапов);
		
		Если СписокШаблонов.Количество() = СписокЭтапов.Количество() Тогда
			ОписаниеОшибки = 
				НСтр("ru = 'На первом этапе комплексного процесса должен быть хотя бы один процесс без отложенного старта.'");
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ОписаниеОшибки;
			СообщениеПользователю.Поле = "Этапы";
			СообщениеПользователю.УстановитьДанные(ЭтотОбъект);
			СообщениеПользователю.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = ТекущаяДатаСеанса();
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	ПроверитьЭтапыЗаполняемыхПредметов(Отказ);
	
	Для Каждого Этап Из Этапы Цикл
		
		МассивПолей = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если МассивПолей.Количество() <> 0 Тогда
			
			СтрокаНезаполненныеПоля = МассивПолейВСтроку(МассивПолей);
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При настройке этапа %1 ""%2"" не заполнены необходимые для запуска поля: %3'"),
					Этап.НомерСтроки,
					Строка(Этап.ШаблонБизнесПроцесса),
					СтрокаНезаполненныеПоля),
				ЭтотОбъект,
				"Этапы",, 
				Отказ);
		КонецЕсли;
				
	КонецЦикла;
		
	// Проверка прав на предметы
	Если МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
		ПредметыДляПроверки = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект);
		
		ВнешняяТранзакция = ТранзакцияАктивна();
		
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(ЭтотОбъект, ПредметыДляПроверки);
		
		// Проверка прав на предмет
		Если ПредметыДляПроверки.Количество() > 0 Тогда
			МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
				ЭтотОбъект, ПредметыДляПроверки, Отказ);
		КонецЕсли;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ЭтапОбъектаКопирования Из ОбъектКопирования.Этапы Цикл
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			Если ЭтапПроцесса.ИдентификаторЭтапа = ЭтапОбъектаКопирования.ИдентификаторЭтапа Тогда
				Если ЗначениеЗаполнено(ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
					НовыйШаблон = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
					НовыйШаблон.ИсходныйШаблон = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ИсходныйШаблон;
					НовыйШаблон.ВладелецШаблона = БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка();
					НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
					НовыйШаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
					НовыйШаблон.Записать();
					СтрокиЭтаповШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ЭтапПроцесса.ИдентификаторЭтапа));
					Для Каждого СтрокаЭтапаШаблона Из СтрокиЭтаповШаблона Цикл
						СтрокаЭтапаШаблона.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
						СтрокаЭтапаШаблона.ДоступноУдаление = Ложь;
					КонецЦикла;
					ЭтапПроцесса.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
				КонецЕсли;
				ЭтапПроцесса.ЗапущенныйБизнесПроцесс = Неопределено;
				ЭтапПроцесса.ЗадачаВыполнена = Ложь;
			КонецЕсли;
			ЭтапПроцесса.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
		КонецЦикла;
		Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
			Предшественник.УсловныйПереходБылВыполнен = Ложь;
		КонецЦикла;
	КонецЦикла;
	ПредшественникиЭтапов.Очистить();
	ВариантМаршрутизации = ОбъектКопирования.ВариантМаршрутизации;
	Для Каждого СтрокаПредшественник Из ОбъектКопирования.ПредшественникиЭтапов Цикл
		НоваяСтрока = ПредшественникиЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредшественник);
		НоваяСтрока.УсловныйПереходБылВыполнен = Ложь;
	КонецЦикла;
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
			СтрокаПредмета.Предмет = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВложенныйПроцессПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если текущая задача является задачей ожидания для фоновой маршрутизации
	// комплексного процесса, то не требуется обновлять таблицу Этапы.
	// Задача является задаче ожидания, если у нее нет исполнителя, и она не является ведущей у других процессов.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов") Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, "Исполнитель, РольИсполнителя");
		Если РеквизитыЗадачи.Исполнитель = Справочники.Пользователи.ПустаяСсылка()
			И РеквизитыЗадачи.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка()
			И НЕ РаботаСКомплекснымиБизнесПроцессамиСервер.ЭтоВедущаяЗадача(Задача) Тогда
			
				Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
			И Этап.ЗапущенныйБизнесПроцесс.Завершен Тогда
			Этап.ЗадачаВыполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	Записать();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредшественникиЭтапов.Количество() = 0 И Этапы.Количество() > 0  Тогда
		НоваяСтрока = ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Этапы[0].ИдентификаторЭтапа;
		НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
		НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
		Этапы[0].ПредшественникиЭтапаСтрокой = НСтр("ru = 'При старте процесса'");
		Этапы[0].ПредшественникиВариантИспользования = "ОдинИзПредшественников";
	КонецЕсли;
		
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ПередЗаписью(ЭтотОбъект);
	
	РеквизитыСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Ссылка, "ПометкаУдаления, Проект, ПроектнаяЗадача, Стартован, Предметы");
		
	// Проверка факта добавления новых предметов
	ДобавленыНовыеПредметы = Ложь;
		
	Если РеквизитыСсылки.Стартован = Истина Тогда
		
		ПредметыПроцессаПоСсылке = РеквизитыСсылки.Предметы.Выгрузить();
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РольПредмета", Неопределено);
		СтруктураПоиска.Вставить("ИмяПредмета", Неопределено);
		СтруктураПоиска.Вставить("ИмяПредметаОснование", Неопределено);
		СтруктураПоиска.Вставить("Предмет", Неопределено);
		СтруктураПоиска.Вставить("ШаблонОснование", Неопределено);
		
		КоличествоЭтапов = Предметы.Количество();
		
		i = 1;
		
		Пока i < КоличествоЭтапов И НЕ ДобавленыНовыеПредметы Цикл
			
			Предмет = Предметы[КоличествоЭтапов - i];
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Предмет);
			
			НайденныеСтроки = ПредметыПроцессаПоСсылке.НайтиСтроки(СтруктураПоиска);
			
			ДобавленыНовыеПредметы = НайденныеСтроки.Количество() = 0;
			
			i = i + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	ДополнительныеСвойства.Вставить("ПредыдущийПроект", РеквизитыСсылки.Проект);
	ДополнительныеСвойства.Вставить("ПредыдущаяПроектнаяЗадача", РеквизитыСсылки.ПроектнаяЗадача);
	ДополнительныеСвойства.Вставить("Стартован", РеквизитыСсылки.Стартован);
	ДополнительныеСвойства.Вставить("ДобавленыНовыеПредметы", ДобавленыНовыеПредметы);
	
	БылСтартован = Ложь;
	СтарыйКонтролер = Неопределено;
	СтарыйОсновнойОбъектАдресацииКонтролера = Неопределено;
	СтарыйДополнительныйОбъектАдресацииКонтролера = Неопределено;
	Если Не Ссылка.Пустая() Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, 
			"Стартован, Контролер, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера");
			
		БылСтартован = ЗначенияРеквизитов.Стартован;
		СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
		СтарыйОсновнойОбъектАдресацииКонтролера = ЗначенияРеквизитов.ОсновнойОбъектАдресацииКонтролера;
		СтарыйДополнительныйОбъектАдресацииКонтролера = ЗначенияРеквизитов.ДополнительныйОбъектАдресацииКонтролера;	
	КонецЕсли;
	ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
	ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
	ДополнительныеСвойства.Вставить("СтарыйОсновнойОбъектАдресацииКонтролера", СтарыйОсновнойОбъектАдресацииКонтролера);
	ДополнительныеСвойства.Вставить("СтарыйДополнительныйОбъектАдресацииКонтролера", СтарыйДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Стартован = Истина
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") = Истина Тогда
		Если ДополнительныеСвойства.ПредыдущийПроект <> Проект
			Или ДополнительныеСвойства.ПредыдущаяПроектнаяЗадача <> ПроектнаяЗадача Тогда
			
			РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы();
			
		КонецЕсли;
	КонецЕсли;
	
	// Добавление новых предметов в подчиненные действия.
	Если ДополнительныеСвойства.ДобавленыНовыеПредметы Тогда
		
		//ТаблицаПредметов = Предметы.Выгрузить();
		
		Для Каждого Этап ИЗ Этапы Цикл
			Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
				И НЕ Этап.ЗадачаВыполнена Тогда
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Этап.ЗапущенныйБизнесПроцесс);
					
					ПредметыДляЭтапа = ПредметыДляЭтапа(Этап);
					
					ПроцессОбъектПоЭтапу = Этап.ЗапущенныйБизнесПроцесс.ПолучитьОбъект();
					Мультипредметность.ПередатьПредметыПроцессу(
					ПроцессОбъектПоЭтапу, ПредметыДляЭтапа, Истина);
					
					ПроцессОбъектПоЭтапу.Записать();
					
				Исключение
					
					ТекстОшибки = НСтр("ru = 'При обновлении предметов в подчиненном процессе %1 произошла ошибка.'");
						
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						Этап.ЗапущенныйБизнесПроцесс);
						
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Этап Из Этапы Цикл
		ВладелецШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Этап.ШаблонБизнесПроцесса, "ВладелецШаблона");
		Если ВладелецШаблона <> Ссылка Тогда
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.ВладелецШаблона = Ссылка;
			ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
			ШаблонОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ПометкаУдаленияСсылки = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	Если ПометкаУдаления <> ПометкаУдаленияСсылки Тогда
		УстановитьПометкуУдаленияЭтапов(ПометкаУдаления);
	КонецЕсли;
	
	УдалитьНепривязанныеШаблоны();
	
	ОтложенныйСтартБизнесПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Функция ПредметыДляЭтапа(Этап)
	
	ПредметыДляЭтапа = Предметы.Выгрузить();
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрПредметДляЭтапа Из ПредметыДляЭтапа Цикл
		
		УдалитьСтроку = Истина;
		
		Для Каждого СтрПердметЗадачи Из ПредметыЗадач Цикл
			
			Если СтрПредметДляЭтапа.ИмяПредмета = СтрПердметЗадачи.ИмяПредмета
				И Этап.ИдентификаторЭтапа = СтрПердметЗадачи.ИдентификаторЭтапа
				И Этап.ШаблонБизнесПроцесса = СтрПердметЗадачи.ШаблонБизнесПроцесса Тогда
				
				УдалитьСтроку = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если УдалитьСтроку Тогда
			СтрокиКУдалению.Добавить(СтрПредметДляЭтапа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ПредметыДляЭтапа.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ПредметыДляЭтапа;
	
КонецФункции

////////////////////////////////////
// Организация работы процесса

Процедура ПроверитьЭтапыЗаполняемыхПредметов(Отказ)
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер
				И Не ЗначениеЗаполнено(Контролер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Контролер для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"КонтролерСтрокой",
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура для создания процессов в рамках комплексного процесса
// Параметры:
//	ЭтапДляЗапуска - строка табличной части Этапы
//	ФормируемыеБизнесПроцессы - массив созданных объектов бизнес-процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразу - флаг, показывающий, что созданный процесс необходимо немедленно стартовать
//
//	Флаг "СтартоватьСразу" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса) Тогда
		
		ОтложенныйСтарт = ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.СрокОтложенногоСтарта);
		
		СтруктураПредметов = Мультипредметность.ПолучитьДанныеЗаполненияПредметовЭтапа(ЭтотОбъект, ЭтапДляЗапуска);
		// создается бизнес-процесс по шаблону
		Если НЕ ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.Автор) Тогда
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов,
				Автор);
		Иначе
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов);
		КонецЕсли;
				
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.ДополнитьОписание(Описание);
		БизнесПроцесс.Проект = Проект;
		БизнесПроцесс.ПроектнаяЗадача = ПроектнаяЗадача;
		ЭтапДляЗапуска.ЗадачаВыполнена = Ложь;
		
		// Если необходимо стартовать процесс сразу, то для него вручную создается ведущая задача
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			ВедущаяЗадачаДействия = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ВедущаяЗадачаДействия.Дата = ТекущаяДатаСеанса();
			ВедущаяЗадачаДействия.БизнесПроцесс = Ссылка;
			ВедущаяЗадачаДействия.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
			РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоЭтапуЗаполнениеВедущейЗадачи(
				ЭтотОбъект, ВедущаяЗадачаДействия);
			
			ВедущаяЗадачаДействия.Записать();
			БизнесПроцесс.ВедущаяЗадача = ВедущаяЗадачаДействия.Ссылка;
		КонецЕсли;
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоЭтапуДоЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
			
		Если НЕ МультипредметностьПереопределяемый.
				ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ЭтотОбъект) Тогда
			
			МультипредметностьПереопределяемый.
				ОтключитьПроверкуПравУчастниковБизнесПроцессаНаПредметы(БизнесПроцесс);
		КонецЕсли;
		
		БизнесПроцесс.Записать();
		
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоЭтапуПослеЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
			
		СписокПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если СписокПолей.Количество() > 0
			И (СписокПолей.Найти("Исполнитель") <> Неопределено 
			Или СписокПолей.Найти("Исполнители") <> Неопределено) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не определены исполнители следующего шага процесса (""%1"").
					|Обратитесь к автору процесса или к администратору.'"),
				БизнесПроцесс.Наименование);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Если необходимо стартовать процесс сразу, то выполняется его старт
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			
			Настройка = 
				РегистрыСведений.НастройкаОтложенногоСтартаБизнесПроцессов.ПолучитьНастройкуПроцесса(
					БизнесПроцесс.Ссылка);
			
			Если ЗначениеЗаполнено(Настройка) Тогда
				БизнесПроцесс.ОтложенныйСтарт();
			Иначе
				
				Попытка
					БизнесПроцесс.Старт();
				Исключение
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось стартовать следующее действие ""%1"" комплексного процесса.
							|Обратитесь к автору процесса или к администратору'"),
						БизнесПроцесс.Наименование);
					
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс = БизнесПроцесс.Ссылка;
		
		// Созданный процесс добавляется в массив - для предоставления возможности
		// запуска процесса платформенной механикой
		Если НЕ ОтложенныйСтарт Тогда
			ФормируемыеБизнесПроцессы.Добавить(БизнесПроцесс);
		КонецЕсли;
		
		Записать();
		
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(Шаблон, Идентификатор, СтруктураПредметов, Автор = Неопределено)
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
	БизнесПроцесс = БизнесПроцессы[ИмяТипаПроцесса].СоздатьБизнесПроцесс();
	Если Автор <> Неопределено Тогда 
		БизнесПроцесс.Автор = Автор;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
	ПараметрыЗаполнения.Вставить("Предметы", СтруктураПредметов.Предметы);
	БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
	
	Возврат БизнесПроцесс;
	
КонецФункции

Функция ЗапускЭтапаПроцессаВозможен(ЭтапПроцесса, ТолькоПроверка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) 
		И НЕ ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияПереходаВыполнены = УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка);
	Если СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапПроцесса) Тогда	
		Возврат НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) И УсловияПереходаВыполнены;
	Иначе
		Возврат УсловияПереходаВыполнены;
	КонецЕсли;
		
КонецФункции

Функция УсловиеПереходаВыполнено(ПроверяемыйЭтап, УсловиеРассмотрения, УсловиеПерехода, ИмяПредметаУсловия)
	
	Если ЗначениеЗаполнено(ПроверяемыйЭтап) Тогда
		Если УсловиеРассмотренияВыполнено(ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс, УсловиеРассмотрения) Тогда
			СтрокиПроверки = ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
			Если СтрокиПроверки.Количество() > 0 Тогда
				Предмет = СтрокиПроверки[0].Предмет;
			Иначе 
				Предмет = Неопределено;
			КонецЕсли;
			
			Возврат РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, УсловиеПерехода);
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		СтрокиПроверки = Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
		Если СтрокиПроверки.Количество() > 0 Тогда
			Предмет = СтрокиПроверки[0].Предмет;
		Иначе 
			Предмет = Неопределено;
		КонецЕсли;
		
		Возврат РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Предмет, УсловиеПерехода);
		
	КонецЕсли;
		
КонецФункции

Функция УсловиеРассмотренияВыполнено(БизнесПроцессСсылка, УсловиеРассмотрения)
	
	Результат = Ложь;
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцессСсылка);
	Если УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения Тогда
		Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцессСсылка, "Завершен");
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения Тогда
		Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцессСсылка, "Завершен")
			И НЕ МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения Тогда
	    Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноСЗамечаниями(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноБезЗамечаний(БизнесПроцессСсылка);
	ИначеЕсли Не ЗначениеЗаполнено(УсловиеРассмотрения) Тогда
		Результат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцессСсылка, "Завершен");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ЕстьЗапущенныеЭтапы()

	Для Каждого Этап Из Этапы Цикл
		Если ПоЭтапуЕстьЗапущенныеПроцессы(Этап) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПоЭтапуЕстьЗапущенныеПроцессы(ЭтапПроцесса)
	
	Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> Неопределено
		И ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Стартован = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Проверяет, что для переданного этапа выполнены все условия для старта
// Параметры:
//	ЭтапПроцесса - строка табличной части Этапы
//	ТолькоПроверка - флаг, показывающий, что необходимо выполнить только проверку 
//	без установки отметок о проверке
Функция УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка)
	
	Результат = Ложь;   
	Если УЭтапаЕстьПредшественники(ЭтапПроцесса.ИдентификаторЭтапа) Тогда // у этапа есть предшественники
		// Формируем массив предшественников данного этапа
		ПредшественникиЭтапа = Новый Массив;
		Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
				ДанныеПредшественника = Новый Структура;
				ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
				ДанныеПредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
				ДанныеПредшественника.Вставить("УсловныйПереходБылВыполнен", Предшественник.УсловныйПереходБылВыполнен);
				ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
				ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
				ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
			КонецЕсли;
		КонецЦикла;
		
		// В зависимости от варианта завершения предшественников 
		// устанавливается начальное значение результата проверки.
		Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
			Результат = Истина;
		ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Проверяем результат завершения каждого из предшественников и 
		// формируем итоговое значение результата проверки.
		Для Каждого ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
			ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(ПредшественникЭтапа.ИдентификаторПредшественника);
			Если ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() И НЕ ЕстьЗапущенныеЭтапы() Тогда
				Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
					Результат = Результат И УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
					Результат = Результат ИЛИ УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				КонецЕсли; 
			Иначе
				Если ЭтапПредшественник <> Неопределено Тогда
					ПереходОтПредшественникаВозможен = 
						// переход от предшественника еще не был выполнен
						НЕ ПредшественникЭтапа.УсловныйПереходБылВыполнен
						// по предшественнику запущен процесс
						И ЗначениеЗаполнено(ЭтапПредшественник.ЗапущенныйБизнесПроцесс)
						// действие-предшественник завершилось
						И ЭтапПредшественник.ЗапущенныйБизнесПроцесс.Завершен
						// выполнено условие перехода от предшественника к данному этапу
						И УсловиеПереходаВыполнено(
							ЭтапПредшественник, 
							ПредшественникЭтапа.УсловиеРассмотрения, 
							ПредшественникЭтапа.УсловиеПерехода, 
							ПредшественникЭтапа.ИмяПредметаУсловия);
					// Если текущее действие ожидает завершения всех предшественников 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И ПереходОтПредшественникаВозможен;
							
					// Если текущее действие ожидает завершения одного из предшественников 
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ ПереходОтПредшественникаВозможен;
						Если Результат Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Не ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
					Результат = Стартован;
					Если Результат Тогда
						Прервать;
					КонецЕсли;
				ИначеЕсли ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И 
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если ТолькоПроверка = Ложь, то у предшественников устанавливается 
		// признак выполненного перехода к текущему этапу
		Если НЕ ТолькоПроверка И Результат Тогда
			Для каждого  ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
				Для каждого ЗаписьОПереходе Из ПредшественникиЭтапов Цикл
					Если ЗаписьОПереходе.ИдентификаторПредшественника = ПредшественникЭтапа.ИдентификаторПредшественника
						И ЗаписьОПереходе.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
						ЗаписьОПереходе.УсловныйПереходБылВыполнен = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Записать();
		КонецЕсли;
	Иначе // у действия нет предшественников, оно выполняется в порядке очереди
		ИндексЭтапа = ЭтапПроцесса.НомерСтроки - 1;
		// Для каждого из действий, расположенных выше по таблице, 
		// выполняется проверка возможности переда к данному действию
		Для Индекс = 0 по ИндексЭтапа Цикл
			ИндексПроверяемогоПредшественника = ИндексЭтапа - Индекс;
			Если ИндексПроверяемогоПредшественника = ИндексЭтапа Тогда
				Продолжить;
			КонецЕсли;
			ПроверяемыйПредшественник = Этапы[ИндексПроверяемогоПредшественника];
			// Если от расположенного выше в таблице действия не был выполнен переход
			// к следующему по порядку действию и это действие завершилось успешно,
			// формируется положительный результат проверки
			Если НЕ ПроверяемыйПредшественник.БезусловныйПереходКСледующемуБылВыполнен
				И ЗначениеЗаполнено(ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс)
				И ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс.Завершен
				И УсловиеРассмотренияВыполнено(
					ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс, 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения) Тогда
				
				Результат = Истина;
				
				// Если ТолькоПроверка = Ложь, у действия устанавливается признак перехода 
				// к следующему по порядку действию
				Если НЕ ТолькоПроверка Тогда
					Для Инд = 0 по ПроверяемыйПредшественник.НомерСтроки - 1 Цикл
						Этапы[Инд].БезусловныйПереходКСледующемуБылВыполнен = Истина;	
					КонецЦикла;
					Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭтапПоИдентификатору(ИдентификаторЭтапа)
	
	Для Каждого Этап Из Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			Возврат Этап;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УЭтапаЕстьПредшественники(ИдентификаторЭтапа)
	
	Для каждого Предшественник Из ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапБизнесПроцесса)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторПоследователя", ЭтапБизнесПроцесса.ИдентификаторЭтапа);
	НайденныеСтроки = ПредшественникиЭтапов.НайтиСтроки(ПараметрыОтбора);
	КоличествоНайденного = НайденныеСтроки.Количество();
	Если КоличествоНайденного = 1 Тогда
		Если НайденныеСтроки[0].ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Для Каждого Этап Из Этапы Цикл
		
		Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса) Тогда
			
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			
			МассивПолейШаблона = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолейШаблона.Количество() = 0 Тогда
				Для Каждого ИмяПоля Из МассивПолейШаблона Цикл
					МассивПолей.Добавить(ИмяПоля);
				КонецЦикла;	
				Возврат МассивПолей;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат МассивПолей;
	
КонецФункции	

Процедура РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.ВедущаяЗадача.ТочкаМаршрута = &ТочкаМаршрута
		|	И ДанныеБизнесПроцессов.ВедущаяЗадача.БизнесПроцесс = &ПроцессСсылка
		|	И ДанныеБизнесПроцессов.ДатаЗавершения = &ДатаЗавершения";
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс);
	Запрос.УстановитьПараметр("ДатаЗавершения", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПроцессСсылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Проект = Проект;
		ПроцессОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
		ПроцессОбъект.Записать();
		
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(ПроцессОбъект);
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Контролер) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
		НСтр("ru = 'Обработка'"), Предметы);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПоУмолчанию Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	ОтложенныйСтартБизнесПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

#КонецЕсли
