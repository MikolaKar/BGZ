
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ИсторияЦикловДатаИсполнения);
	РаботаСБизнесПроцессами.УстановитьФорматДаты(Элементы.ИсторияИсполнителяДатаИсполнения);
	
	ЗадачаСсылка = Параметры.ЗадачаСсылка;
	БизнесПроцесс = ЗадачаСсылка.БизнесПроцесс;
	
	// предметы
	ПредметыЗадачи = Мультипредметность.ПолучитьПредметыЗадачи(ЗадачаСсылка, Истина);
	Предметы.Загрузить(ПредметыЗадачи);
	Если Предметы.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыПредметовИсторияЦиклов.Видимость = Ложь;
		Элементы.ГруппаСтраницыПредметовИсторияИсполнителя.Видимость = Ложь;
	ИначеЕсли Предметы.Количество() > 1 Тогда
		Элементы.ДекорацияЕщеИсторияИсполнителя.Видимость = Истина;
		Элементы.ДекорацияЕщеИсторияЦиклов.Видимость = Истина;
		
		ПрописьЧисла          = ЧислоПрописью(Предметы.Количество() - 1, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"));
		ПрописьЧислаИПредмета =
			ЧислоПрописью(Предметы.Количество() - 1, "Л = ru_RU", НСтр("ru = 'предмет,предмета,предметов,,,,,,0'"));
		ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(Предметы.Количество() - 1, "ЧГ=") + " ");
		
		Элементы.ДекорацияЕщеИсторияЦиклов.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияЕщеИсторияЦиклов.Заголовок,ЧислоИПредмет);
		Элементы.ДекорацияЕщеИсторияИсполнителя.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ДекорацияЕщеИсторияИсполнителя.Заголовок,ЧислоИПредмет);
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		СтрокаПредмета.Картинка = МультипредметностьКлиентСервер.ИндексКартинкиРолиПредмета(
			СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
		СтрокаПредмета.Описание = ОбщегоНазначенияДокументооборот.ПредметСтрокой(СтрокаПредмета.Предмет);
	КонецЦикла;
	
	Элементы.ПредметыИсторияЦиклов.ТекущаяСтрока = 0;
	Элементы.ПредметыИсторияИсполнителя.ТекущаяСтрока = 0;
	
	ТочкиМаршрута = Новый Массив;
	ТочкиМаршрута.Добавить(БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать);
	
	Если ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда 
		
		НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;	
		
		ИсторияЦиклов.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", ТочкиМаршрута);
		ИсторияЦиклов.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
		ИсторияЦиклов.Параметры.УстановитьЗначениеПараметра("НомерИтерации", НомерИтерации);
		
		Элементы.ГруппаИсторияЦиклов.Видимость = Истина;
		Элементы.ГруппаИсторияИсполнителя.Видимость = Ложь;
		
	ИначеЕсли ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда 
		
		НайденнаяСтрока = БизнесПроцесс.РезультатыРегистрации.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерации = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;	
		
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра("ТочкиМаршрута", ТочкиМаршрута);
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
		Если ЗадачаСсылка.Выполнена Тогда 
			ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра("НомерИтерации", НомерИтерации); 
		Иначе
			ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра("НомерИтерации", НомерИтерации - 1);
		КонецЕсли;	
		  
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра("Исполнитель", ЗадачаСсылка.Исполнитель);
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра(
			"РольИсполнителя",
			ЗадачаСсылка.РольИсполнителя);
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра(
			"ОсновнойОбъектАдресации",
			ЗадачаСсылка.ОсновнойОбъектАдресации);
		ИсторияИсполнителя.Параметры.УстановитьЗначениеПараметра(
			"ДополнительныйОбъектАдресации",
			ЗадачаСсылка.ДополнительныйОбъектАдресации);
		
		Элементы.ГруппаИсторияЦиклов.Видимость = Ложь;
		Элементы.ГруппаИсторияИсполнителя.Видимость = Истина;
		
		Если ЗначениеЗаполнено(ЗадачаСсылка.РольИсполнителя) Тогда 
			Заголовок = Заголовок 
				+ " (" + Строка(ЗадачаСсылка.РольИсполнителя) 
				+ ?(ЗначениеЗаполнено(ЗадачаСсылка.ОсновнойОбъектАдресации),
					", " + Строка(ЗадачаСсылка.ОсновнойОбъектАдресации), "")
				+ ?(ЗначениеЗаполнено(ЗадачаСсылка.ДополнительныйОбъектАдресации),
					", " + Строка(ЗадачаСсылка.ДополнительныйОбъектАдресации), "")
				+ " )";
		Иначе
			Заголовок = Заголовок + " (" + Строка(ЗадачаСсылка.Исполнитель) + " )";
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Предметы[0];
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ТекущиеДанные.Предмет);
		Иначе	
			ПоказатьЗначение(,ТекущиеДанные.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕщеНажатие(Элемент)
	
	Элементы["ГруппаСтраницыПредметов" + СтрЗаменить(Элемент.Имя,"ДекорацияЕще","")].ТекущаяСтраница =
		Элементы["ГруппаПредметы"+ СтрЗаменить(Элемент.Имя,"ДекорацияЕще","")];
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыВыбор(Предметы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Строка = Предметы.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если Строка.Предмет <> Неопределено и НЕ Строка.Предмет.Пустая() Тогда
		Если ТипЗнч(Строка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Строка.Предмет);
		Иначе
			ПоказатьЗначение(,Строка.Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЦикловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИсполнителяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры
