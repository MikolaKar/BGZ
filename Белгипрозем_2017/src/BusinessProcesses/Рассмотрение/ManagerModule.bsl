#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"Исполнитель,
		|ОсновнойОбъектАдресации,
		|ДополнительныйОбъектАдресации,
		|СрокИсполнения");
		
	Исполнитель = РеквизитыПроцесса.Исполнитель;
	ОсновнойОбъектАдресации = РеквизитыПроцесса.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = РеквизитыПроцесса.ДополнительныйОбъектАдресации;
	СрокИсполнения = РеквизитыПроцесса.СрокИсполнения;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст, НСтр("ru = 'Срок:'"), Формат(СрокИсполнения, ФорматСрока), "");
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель, "");
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ОсновнойОбъектАдресации, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
			HTMLТекст = HTMLТекст + ", ";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ДополнительныйОбъектАдресации, "");
		КонецЕсли;
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<p>";
	Цвет_ЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.Цвет_ЗакрытыеНеактуальныеЗаписи();
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1>%2</A>",
		"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Рассмотрение",
		НСтр("ru = 'Все задачи'"));
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

// Возвращает Истина, указывая тем самым что этот объект сам заполняет права 
// доступа для файлов, владельцем которых является
Функция ЕстьМетодЗаполнитьПраваДоступаДляФайлов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметр ПраваДоступа правами доступа к файлам, владельцем 
// которых является указанный Процесс
//
Процедура ЗаполнитьПраваДоступаДляФайлов(Процесс, ПраваДоступа) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа);
	
КонецПроцедуры

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя";
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиОзнакомиться";
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры	

// Вызывается при выполнении задачи из формы списка Мои задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполнения(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		Если ПараметрыВыполнения.Свойство("ВариантРассмотрения") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
			
			// сформируем дополнительные свойства для передачи данных объекту
			РеквизитыЗаполнения = "ВариантРассмотрения, ОписаниеИсполнения, ОписаниеОзнакомления";
			
			ДанныеЗаполнения = Новый Структура(РеквизитыЗаполнения);
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ПараметрыВыполнения);
			ДанныеЗаполнения.ОписаниеИсполнения = ПараметрыВыполнения.РезультатВыполнения;
			ДанныеЗаполнения.ОписаниеОзнакомления = ПараметрыВыполнения.РезультатВыполнения;
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("РезультатВыполнения", ПараметрыВыполнения.РезультатВыполнения);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
			
			РассмотрениеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		Если ПараметрыВыполнения.Свойство("ВариантОбработкиРезолюции") Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
			
			// сформируем дополнительные свойства для передачи данных объекту
			РеквизитыЗаполнения = "ВариантОбработкиРезолюции";
			
			ДанныеЗаполнения = Новый Структура(РеквизитыЗаполнения);

			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ПараметрыВыполнения);
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			РассмотрениеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Исполнитель = Реквизиты.Исполнитель;
			БизнесПроцессОбъект.ОсновнойОбъектАдресации = Неопределено;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресации = Неопределено;
		Иначе
			БизнесПроцессОбъект.Исполнитель = Реквизиты.РольИсполнителя;
			БизнесПроцессОбъект.ОсновнойОбъектАдресации = Реквизиты.ОсновнойОбъектАдресации;
			БизнесПроцессОбъект.ДополнительныйОбъектАдресации = Реквизиты.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда 
		
		Если Не ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			ВызватьИсключение НСтр("ru = 'Задачу автора процесса нельзя перенаправить на роль исполнителя.'");
		КонецЕсли;	
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		БизнесПроцессОбъект.Автор = Реквизиты.Исполнитель;
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"Автор,
			|Исполнитель,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации,
			|КонтролерИсполнения,
			|ОсновнойОбъектАдресацииКонтролера,
			|ДополнительныйОбъектАдресацииКонтролера,
			|ПроверяющийИсполнения,
			|ОсновнойОбъектАдресацииПроверяющего,
			|ДополнительныйОбъектАдресацииПроверяющего");
		
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресации", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресации", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"КонтролерИсполнения", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииКонтролера", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ПроверяющийИсполнения", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ОсновнойОбъектАдресацииПроверяющего", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ДополнительныйОбъектАдресацииПроверяющего", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, БизнесПроцесс);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Исполнитель,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресации,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресации);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.КонтролерИсполнения,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииКонтролера,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииКонтролера);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.ПроверяющийИсполнения,
		БизнесПроцессРеквизиты.ОсновнойОбъектАдресацииПроверяющего,
		БизнесПроцессРеквизиты.ДополнительныйОбъектАдресацииПроверяющего);
		
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, БизнесПроцесс, "ИсполнителиИсполнения");
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, БизнесПроцесс.Ссылка);
	
КонецПроцедуры

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныРассмотрения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для автоматизации рассмотрения документов руководителем автора процесса. Руководитель оставляет резолюцию по итогам рассмотрения.'");
	
КонецФункции

// Показывает, может ли процесс использоваться в качестве части комплексного процесса
Функция МожетИспользоватьсяВКомплексномПроцессе() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое представление срока выполнения процесса
Функция ПолучитьСтроковоеПредставлениеСрокаВыполнения(Ссылка) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СрокИсполнения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "СрокИсполнения");
	
	СтрокаФормата = "ДФ=dd.MM.yyyy";
	Если ИспользоватьВремяВСрокахЗадач Тогда
		СтрокаФормата = "ДФ='dd.MM.yyyy ЧЧ:мм'";	
	КонецЕсли;
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Возврат Формат(СрокИсполнения, СтрокаФормата);
	КонецЕсли;
	
	Возврат НСтр("ru = 'Срок не указан'");
	
КонецФункции

// Возвращает флаг, сигнализирующий о том, возможен ли для процессов данного типа
//	автоматический перенос сроков при согласовании заявки на перенос автором (истина),
//	или для переноса срока автору процесса необходимо будет зайти в карточку процесса (ложь)
Функция ВозможноАвтоматическоеИзменениеОбщегоСрока(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ГлавнаяЗадача, ВедущаяЗадача");
	ПроцессВедущейЗадачи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыПроцесса.ВедущаяЗадача, "БизнесПроцесс");
	ЭтотПроцессВложенВКомплексный = Ложь;
	
	// Если это процесс в рамках комплексного, то изменение его срока должно вестись из карточки процесса вручную.
	Если ТипЗнч(ПроцессВедущейЗадачи) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Результат = Ложь;
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "Завершен");
	Результат = РеквизитыПроцесса.Завершен;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Процесс, "Автор, Проект");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
		ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено; 
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ДанныеУчастника.Участник = РуководительПроекта;
			ДанныеУчастника.ОсновнойОбъектАдресации = Неопределено;
			ДанныеУчастника.ДополнительныйОбъектАдресации = Неопределено;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессСсылка, 
		"Автор, 
		| Исполнитель,
		| КонтролерИсполнения, 
		| ПроверяющийИсполнения, 
		| ДополнительныйОбъектАдресации,
		| ОсновнойОбъектАдресации,
		| ДополнительныйОбъектАдресацииКонтролера, 
		| ДополнительныйОбъектАдресацииПроверяющего, 
		| ОсновнойОбъектАдресацииКонтролера, 
		| ОсновнойОбъектАдресацииПроверяющего");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнитель
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Исполнитель);
	ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресации);
	ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресации);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.КонтролерИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.КонтролерИсполнения);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииКонтролера);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииКонтролера);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.ПроверяющийИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ПроверяющийИсполнения);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", КлючевыеУчастники.ОсновнойОбъектАдресацииПроверяющего);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", КлючевыеУчастники.ДополнительныйОбъектАдресацииПроверяющего);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  ОписаниеСобытия - описание события выполненной задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, ОписаниеСобытияДляИстории");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ОписаниеСобытияФормат = "%1, %2. ";
	ОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ОписаниеСобытияФормат,
						Формат(Задача.ДатаИсполнения, "ДФ='dd.MM.yyyy HH:mm'"),
						Строка(Задача.Исполнитель));
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута;
	
	Действие = "";
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
		
		ВариантРассмотрения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача.БизнесПроцесс, "ВариантРассмотрения");
		
		Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции Тогда
			Действие = НСтр("ru = 'Введен текст резолюции'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
			Действие = НСтр("ru = 'Направлено на исполнение'");
			ТекстРезультатаВыполнения = "";
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
			Действие = НСтр("ru = 'Направлено на ознакомление'");
			ТекстРезультатаВыполнения = "";
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
		Действие = НСтр("ru = 'Ознакомлен(а)'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ОписаниеСобытия = ОписаниеСобытия + Действие
						  + ?(ЗначениеЗаполнено(ТекстРезультатаВыполнения), ": " + Символы.ПС, ".")
						  + ТекстРезультатаВыполнения;
	Иначе
		ОписаниеСобытия = "";
	КонецЕсли;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.ОписаниеСобытияДляИстории = ОписаниеСобытия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ИмяОсновногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на осн. объект адресации.
//   ИмяДополнительногоОбъектаАдресации - имя реквизита шапки или ТЧ, в котором хранится ссылка на доп. объект адресации.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор", Неопределено, Неопределено, 
		Истина));
	
	// Исполнитель
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнитель", "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации", 
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, ИмяОсновногоОбъектаАдресации, ИмяДополнительногоОбъектаАдресации,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект", Неопределено, Неопределено,
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает текст компенсации предмета, показываемый пользователю при прерывании
// бизнес-процесса.
//
Функция ТекстКомпенсацииПредмета(ПроцессСсылка) Экспорт
	
	Результат = "";
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ПроцессСсылка, , Истина);

	Если Не ЗначениеЗаполнено(Предметы) Тогда
		Возврат "";
	КонецЕсли;

	ПредметыСИзмененнымСостоянием = Новый Массив();
	
	КоличествоРезолюцийУстановленныхПроцессом = 0;
	КоличествоСостоянийУстановленныхПроцессом = 0;
	
	Для каждого Предмет Из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			СостоянияДокумента = Делопроизводство.ПолучитьСостоянияДокумента(Предмет, ПроцессСсылка);
			Если ЗначениеЗаполнено(СостоянияДокумента) Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
				КоличествоСостоянийУстановленныхПроцессом = КоличествоСостоянийУстановленныхПроцессом +
					СостоянияДокумента.Количество();
			КонецЕсли;
		КонецЕсли;
		
		АвторыРезолюций = ПолучитьРезолюцииПоБизнесПроцессу(Предмет, ПроцессСсылка);
			
		Если АвторыРезолюций <> Неопределено И АвторыРезолюций.Количество() > 0 Тогда
			Если ПредметыСИзмененнымСостоянием.Найти(Предмет) = Неопределено Тогда
				ПредметыСИзмененнымСостоянием.Добавить(Предмет);
			КонецЕсли;
			КоличествоРезолюцийУстановленныхПроцессом = КоличествоРезолюцийУстановленныхПроцессом
				+ АвторыРезолюций.Количество();
		КонецЕсли;
	КонецЦикла;
	
	КоличествоИзмененныхПредметов = ПредметыСИзмененнымСостоянием.Количество();
	Если КоличествоИзмененныхПредметов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	НаименованиеПредмета = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		ПредметыСИзмененнымСостоянием[0], 
		"Наименование");
	
	Если КоличествоСостоянийУстановленныхПроцессом > 0
		И КоличествоРезолюцийУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние рассмотрения
					 |и будут удалены резолюции (%2), созданные в рамках этого процесса.'"),
				НаименованиеПредмета,
				КоличествоРезолюцийУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние рассмотрения
					 |и будут удалены резолюции (%2), созданные в рамках этого процесса.'"),
				КоличествоИзмененныхПредметов,
				КоличествоРезолюцийУстановленныхПроцессом);
		КонецЕсли;
		
	ИначеЕсли КоличествоСостоянийУстановленныхПроцессом > 0 Тогда
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будет очищено состояние рассмотрения.'"),
				НаименованиеПредмета);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будет очищено состояние рассмотрения.'"),
				КоличествоИзмененныхПредметов);
		КонецЕсли;
	Иначе
		
		Если КоличествоИзмененныхПредметов = 1 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документа ""%1"" будут удалены резолюции (%2), созданные в рамках этого процесса.'"),
				НаименованиеПредмета,
				КоличествоРезолюцийУстановленныхПроцессом);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У документов (%1) будут удалены резолюции (%2), созданные в рамках этого процесса.'"),
				КоличествоИзмененныхПредметов,
				КоличествоРезолюцийУстановленныхПроцессом);
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Возвращает авторов резолюций Документа установленные БизнесПроцессом
//
// Возвращаемое значение:
//  Массив - массив авторов резолюций
//
Функция ПолучитьРезолюцииПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ВходящиеДокументы")
		И ТипЗнч(Документ) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Резолюции.АвторРезолюции КАК АвторРезолюции
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Источник = &Рассмотрение
		|	И Резолюции.Документ = &Ссылка";

	Запрос.УстановитьПараметр("Рассмотрение", БизнесПроцесс);
	Запрос.УстановитьПараметр("Ссылка", Документ);

	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("АвторРезолюции");

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ПолучитьТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВнутренниеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Корреспонденты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.СообщенияОбсуждений")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ТемыОбсуждений"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы")); 
	
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо")); 
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо")); 
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	 - ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//					  варинаты ответов.
//	 - БизнесПроцессСсылка - БизнесПроцессСсылка.Рассмотрение - бизнес процесс по которому
//							 назначена задача.
//	 - ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					   бизнес-процесс.
//
// Возвращаемые параметры:
//	 - Структура
//		 - СписокВариантовОтветов - СписокЗначений - список значений типа
//									ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//									с заполненным представлением; в нем содержатся варианты
//									ответов.
//		 - ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//									 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Представление = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Представление = НСтр("ru = 'Рассмотрено'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Представление = НСтр("ru = 'Обработано'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			Представление);
	КонецЕсли;
	
	Результат.ИспользоватьКомментарий = Истина;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиСервер.ОбработкаПолученияПредставления(
		Данные, Представление, СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Участники = Новый Структура(
		"Автор,
		|Исполнитель,
		|ОсновнойОбъектАдресации,
		|ДополнительныйОбъектАдресации");
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
			"Автор,
			|Исполнитель,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации");
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

//////////////////////////////////////////////////////////
// Вспомогательные функции для общей формы ЗадачиПоБизнесПроцессу

// Проверяет наличие функции СвойстваЭлементовФормыЗадачиПоБизнесПроцессу в
// текущем модуле.
//
Функция ЕстьМетодСвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру свойств, для последующей обработки в форме
// ОбщаяФорма.ЗадачиПоБизнесПроцессу
//
// Возвращаемое значение:
//   - Структура - описывает элементы формы и их свойства.
//
Функция СвойстваЭлементовФормыЗадачиПоБизнесПроцессу() Экспорт
	
	НастройкиПолей = Новый Структура;
	
	НомерИтерации = Новый Структура;
	НомерИтерации.Вставить("Видимость", Ложь);
	НастройкиПолей.Вставить("НомерИтерации", НомерИтерации);
	
	Возврат НастройкиПолей;
	
КонецФункции

// Проверяет наличие процедуры ДополнитьТекстЗапросСпискаЗадач в
// текущем модуле.
//
Функция ЕстьМетодДополнитьТекстЗапросСпискаЗадач() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецЕсли
