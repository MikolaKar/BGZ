
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПоместитьИсполнителейВоВременноеХранилище()

	Если Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаНаИсполнение Тогда 
	
		Возврат ПоместитьВоВременноеХранилище(ИсполнителиИсполнения.Выгрузить(), УникальныйИдентификатор);
	
	ИначеЕсли Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаОзнакомление Тогда 
		
		Возврат ПоместитьВоВременноеХранилище(ИсполнителиОзнакомления.Выгрузить(), УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	Если Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаНаИсполнение Тогда  
	
		РаботаСБизнесПроцессами.ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, ИсполнителиИсполнения);	
		Шаг = 1;
		Для Каждого Исполнитель Из ИсполнителиИсполнения Цикл
			Исполнитель.Шаг = Шаг;
			Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
				Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
				Исполнитель.Шаг = Шаг;
				Шаг = Шаг + 1;
				Если Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияДни)
					И Не ЗначениеЗаполнено(Исполнитель.ДлительностьИсполненияЧасы) Тогда
					Исполнитель.ДлительностьИсполненияДни = 1;
				КонецЕсли;
			ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
				Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
				Исполнитель.Шаг = Шаг;
			КонецЕсли;
		КонецЦикла;
		Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно	
			ИЛИ ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
			РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(ИсполнителиИсполнения, Объект.ДатаНачала);
		КонецЕсли;	
	
	ИначеЕсли Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаОзнакомление Тогда
		
		ИсполнителиОзнакомления.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуИсполнения()
	
	СтруктураПредметов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
	
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонИсполнения,
		Объект.БизнесПроцесс,
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
		
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда 
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда 
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияОбщий) Тогда 
		Элементы.СрокИсполненияОбщий.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокИсполненияОбщийВремя.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокИсполненияОбщий.ТолькоПросмотр = Ложь;
		Элементы.СрокИсполненияОбщийВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 0 Тогда
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.ПодобратьИсполнение.Доступность = ДоступностьПоШаблону;
	Иначе
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьИсполнение.Доступность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуОзнакомления()
	
	СтруктураПредметов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
	
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонОзнакомления, 
		Объект.БизнесПроцесс, 
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(СрокОзнакомления) Тогда 
		Элементы.СрокОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.СрокОзнакомленияВремя.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.СрокОзнакомления.ТолькоПросмотр = Ложь;
		Элементы.СрокОзнакомленияВремя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиОзнакомления.Количество() > 0 Тогда
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблону;
		Элементы.ПодобратьОзнакомление.Доступность = ДоступностьПоШаблону;
	Иначе
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьОзнакомление.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаг(Таблица)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(Таблица, Истина);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ИсполнителиИсполненияСрокИсполнения.Видимость = Ложь;
	Элементы.ИсполнителиИсполненияСрокИсполненияВремя.Видимость = Ложь;
	Элементы.ИсполнителиИсполненияДлительностьИсполненияДни.Видимость = Ложь;
	Элементы.ИсполнителиИсполненияДлительностьИсполненияЧасы.Видимость = Ложь;
	Элементы.ИсполнителиИсполненияСрокВычисляемый.Видимость = Ложь;
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
		Элементы.ИсполнителиИсполненияДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиИсполненияДлительностьИсполненияЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.ИсполнителиИсполненияСрокВычисляемый.Видимость = Истина;
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиИсполненияДлительностьИсполненияДни.Видимость = Истина;
		Элементы.ИсполнителиИсполненияДлительностьИсполненияЧасы.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
		Элементы.ИсполнителиИсполненияСрокВычисляемый.Видимость = Истина;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
		Элементы.ИсполнителиИсполненияСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиИсполненияСрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	КонецЕсли;
	
	Элементы.ИсполнителиИсполненияСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно)
		И ЗначениеЗаполнено(СрокИсполненияОбщий);
	ОбновитьФлагУстановкиОтветственного();
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		ИЛИ ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(ИсполнителиИсполнения, Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагУстановкиОтветственного()

	ОтветственныйУстановлен = Ложь;
	Если ИсполнителиИсполнения.Количество() > 0
		И ИсполнителиИсполнения[0].Ответственный Тогда
		ОтветственныйУстановлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если ТекущиеДанные.НомерСтроки > 2 ИЛИ ТекущиеДанные.НомерСтроки = 2 И НЕ ОтветственныйУстановлен Тогда
		Элементы.ПереместитьВверх.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 И НЕ ОтветственныйУстановлен 
		ИЛИ ТекущиеДанные.НомерСтроки > 1 И ТекущиеДанные.НомерСтроки < ИсполнителиИсполнения.Количество() Тогда
		Элементы.ПереместитьВниз.Доступность = Истина;
	КонецЕсли;

	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Элементы.НазначитьОтветственным.Доступность = (ТекущиеДанные.НомерСтроки = 1);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = Объект.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = Объект.Проект.ЕдиницаТрудозатратЗадач;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаТрудозатратСтр = ВРег(Лев(ЕдиницаТрудозатрат, 1)) + Сред(ЕдиницаТрудозатрат, 2);
	Элементы.ИсполнителиИсполненияТрудозатратыПланИсполнителя.Заголовок = ЕдиницаТрудозатратСтр;
	Элементы.ТрудозатратыПланПроверяющего.Заголовок = ЕдиницаТрудозатратСтр;
	
	Элементы.ТрудозатратыПланИсполнителяОзнакомления.Заголовок = ЕдиницаТрудозатратСтр;
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьТекстРезолюции()
	
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
		
		РезультатВыполнения = "";
		Если ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
			РезультатВыполнения = РезультатВыполнения + НаименованиеИсполнения + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеИсполнения) Тогда 
			РезультатВыполнения = РезультатВыполнения + ОписаниеИсполнения + Символы.ПС;
		КонецЕсли;	
		Если ЗначениеЗаполнено(СрокИсполненияОбщий) Тогда
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Срок'") + ": " + Формат(СрокИсполненияОбщий, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВажностьИсполнения) И ВажностьИсполнения <> Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
			Важности = Новый Соответствие;
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Высокая, НСтр("ru = 'высокая'"));
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Обычная, НСтр("ru = 'обычная'"));
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Низкая,  НСтр("ru = 'низкая'"));
			
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Важность'") + ": " + Важности.Получить(ВажностьИсполнения) + Символы.ПС;
		КонецЕсли;
		Если ИсполнителиИсполнения.Количество() > 0 Тогда 
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Исполнители'") + ": " + Символы.ПС;
		КонецЕсли;	
		Для Каждого Строка Из ИсполнителиИсполнения Цикл
			РезультатВыполнения = РезультатВыполнения + Строка(Строка.Исполнитель);
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
				РезультатВыполнения = РезультатВыполнения + " " + Формат(Строка.СрокИсполнения, "ДФ=dd.MM.yyyy");
			КонецЕсли;	
			РезультатВыполнения = РезультатВыполнения + " " + Строка.Описание + Символы.ПС;
		КонецЦикла;	
		Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда 
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Контролер'") + ": " + Строка(КонтролерИсполнения) + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда 
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Проверить'") + ": " + Строка(ПроверяющийИсполнения) + Символы.ПС;
		КонецЕсли;	
		
		Объект.РезультатВыполнения = РезультатВыполнения;
		
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
		
		РезультатВыполнения = "";
		Если ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			РезультатВыполнения = РезультатВыполнения + НаименованиеОзнакомления + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеОзнакомления) Тогда 
			РезультатВыполнения = РезультатВыполнения + ОписаниеОзнакомления + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокОзнакомления) Тогда
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Срок'") + ": " + Формат(СрокОзнакомления, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВажностьОзнакомления) И ВажностьОзнакомления <> Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
			Важности = Новый Соответствие;
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Высокая, НСтр("ru = 'высокая'"));
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Обычная, НСтр("ru = 'обычная'"));
			Важности.Вставить(Перечисления.ВариантыВажностиЗадачи.Низкая,  НСтр("ru = 'низкая'"));
			
			РезультатВыполнения = РезультатВыполнения + НСтр("ru = 'Важность") + ": " + Важности.Получить(ВажностьОзнакомления) + Символы.ПС;
		КонецЕсли;
		Для Каждого Строка Из ИсполнителиОзнакомления Цикл
			РезультатВыполнения = РезультатВыполнения + Строка(Строка.Исполнитель);
		КонецЦикла;	
		
		Объект.РезультатВыполнения = РезультатВыполнения;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗадачаИзменена", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачуКИсполнению(ЭтаФорма, ТекущийПользователь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессами.ФормаЗадачиПриСозданииНаСервере(ЭтаФорма, Объект, 
		Элементы.СрокИсполнения, Элементы.ДатаИсполнения);
		
	Если Объект.Выполнена Тогда
		Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Рассмотрено.'");
	КонецЕсли;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
	
	БизнесПроцессыИЗадачиВызовСервера.ЗаписатьСобытиеОткрытаКарточкаИОбращениеКОбъекту(Объект.Ссылка);
	
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект.Ссылка);
	Если Не ПраваПоОбъекту.Изменение Тогда
		ТолькоПросмотр = Истина;
		Элементы.Выполнено.Доступность = Ложь;
		Элементы.ДобавитьПредмет.Доступность = Ложь;
		Элементы.ДеревоПриложений.ТолькоПросмотр = Истина;
		Элементы.Перенаправить.Доступность = Ложь;
		Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
		Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
		Или Объект.Выполнена Тогда
		Элементы.ДобавитьПредмет.Доступность = Ложь;
		Элементы.ДеревоПриложений.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ВариантРассмотренияВвестиТекстРезолюции = Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции;
	ВариантРассмотренияНаправитьНаИсполнение = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение;
	ВариантРассмотренияНаправитьНаОзнакомление = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполненияОбщийВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.СрокОзнакомленияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ИсполнителиИсполненияСрокИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Если Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.ИсполнителиИсполненияДлительностьИсполненияЧасы.Видимость = Ложь;
		Элементы.ИсполнителиИсполненияСрокВычисляемый.Формат = НСтр("ru = 'ДФ=''dd.MM.yyyy'''");
	КонецЕсли;
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ДекорацияТрудозатратыОзнакомления.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.БизнесПроцесс,
		"ВариантРассмотрения, 
		|ШаблонИсполнения, ШаблонОзнакомления,
		|НаименованиеИсполнения, НаименованиеОзнакомления,
		|ОписаниеИсполнения, ОписаниеОзнакомления, ВажностьИсполнения, ВажностьОзнакомления, 
		|СрокИсполненияОбщий, СрокОзнакомления, ТрудозатратыПланИсполнителяОзнакомления, 
		|КонтролерИсполнения, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера, 
		|ПроверяющийИсполнения, ОсновнойОбъектАдресацииПроверяющего, ДополнительныйОбъектАдресацииПроверяющего, ТрудозатратыПланПроверяющего");
	ИсполнителиИсполнения.Загрузить(Объект.БизнесПроцесс.ИсполнителиИсполнения.Выгрузить());
	ИсполнителиОзнакомления.Загрузить(Объект.БизнесПроцесс.ИсполнителиОзнакомления.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		ВажностьИсполнения = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		ВажностьОзнакомления = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СрокИсполненияДляПодчиненныхПроцессов = Неопределено;
	Если Не ЗначениеЗаполнено(СрокИсполненияОбщий)
		Или Не ЗначениеЗаполнено(СрокОзнакомления) Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыДокументов, Истина);
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Если ЗначениеЗаполнено(Предмет.СрокИсполнения) Тогда 
				СрокИсполненияДляПодчиненныхПроцессов = КонецДня(Предмет.СрокИсполнения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияДляПодчиненныхПроцессов) Тогда
		Если Не ЗначениеЗаполнено(СрокИсполненияОбщий) Тогда
			СрокИсполненияОбщий = СрокИсполненияДляПодчиненныхПроцессов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СрокОзнакомления) Тогда
			СрокОзнакомления = СрокИсполненияДляПодчиненныхПроцессов;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ПолучитьДанныеПроекта();
	
	Если ВариантРассмотрения = ВариантРассмотренияВвестиТекстРезолюции Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаРезолюция;
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаИсполнение Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаНаИсполнение;
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаОзнакомление Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаОзнакомление;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВариантИсполнения) Тогда
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		Для Каждого Исполнитель Из ИсполнителиИсполнения Цикл
			Исполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		КонецЦикла;
	КонецЕсли;
	ПредыдущийВариантИсполнения = ВариантИсполнения;
	
	УстановитьДоступностьПоШаблонуИсполнения();
	УстановитьДоступностьПоШаблонуОзнакомления();
	ОбновитьФлагУстановкиОтветственного();
	
	РаботаСПроектами.ЗаполнитьТрудозатратыПланСтрокой(ЭтаФорма, 
		Объект.БизнесПроцесс.ТрудозатратыПланИсполнителя);
		
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Определение необходимости подписания резолюций ЭП
	ПодписатьРезолюцииЭП = Ложь;	
	Для Каждого Предмет Из Объект.Предметы Цикл
		
		Если ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
			ИЛИ ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			
			ВидДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет.Предмет, "ВидДокумента");
			ПодписыватьРезолюцииЭП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВидДокумента, 
				"ПодписыватьРезолюцииЭП");
				
			Если ТипЗнч(ПодписыватьРезолюцииЭП) = Тип("Булево") И ПодписыватьРезолюцииЭП Тогда
				
				ПодписатьРезолюцииЭП = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодписатьРезолюцииЭП Тогда
		Команды.Выполнено.Заголовок = НСтр("ru = 'Рассмотрено (ЭП)'");
		Команды.Выполнено.Подсказка = НСтр("ru = 'При нажатии кнопки ""Рассмотрено"" потребуется выбрать сертификат для подписи и ввести пароль'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	УстановитьПривилегированныйРежим(Истина);
	РассмотрениеОбъект = ТекущийОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
	
	// сформируем дополнительные свойства для передачи данных объекту
	РеквизитыЗаполнения = "ВариантРассмотрения, 
	|ШаблонИсполнения, ШаблонОзнакомления,
	|НаименованиеИсполнения, НаименованиеОзнакомления,
	|ОписаниеИсполнения, ОписаниеОзнакомления,
	|СрокИсполненияОбщий, СрокОзнакомления, ТрудозатратыПланИсполнителяОзнакомления,
	|ВажностьИсполнения, ВажностьОзнакомления,
	|КонтролерИсполнения, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера, 
	|ПроверяющийИсполнения, ОсновнойОбъектАдресацииПроверяющего, ДополнительныйОбъектАдресацииПроверяющего, ТрудозатратыПланПроверяющего,
	|ВариантИсполнения";
	
	ДанныеЗаполнения = Новый Структура(РеквизитыЗаполнения);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЭтаФорма);
	
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача",ТекущийОбъект.Ссылка);
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ИсполнителиИсполнения",ИсполнителиИсполнения.Выгрузить());
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ИсполнителиОзнакомления",ИсполнителиОзнакомления.Выгрузить());
	РассмотрениеОбъект.ДополнительныеСвойства.Вставить("РезультатВыполнения",ТекущийОбъект.РезультатВыполнения);
	
	Если ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") Тогда
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу",ПараметрыЗаписи.ВыполнитьЗадачу);
	КонецЕсли;

	РассмотрениеОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(РассмотрениеОбъект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьШаг(ИсполнителиИсполнения);	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРеквизитыНевыполненныхЗадач" И Параметр = Объект.БизнесПроцесс И Не Объект.Выполнена Тогда 
		
		ДатаИсполнения = Объект.ДатаИсполнения;
		Прочитать();
		Объект.ДатаИсполнения = ДатаИсполнения;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "Изменение_ФактическиеТрудозатратыЗадачи" И Параметр = Объект.Ссылка Тогда
		
		ТрудозатратыФакт = РаботаСБизнесПроцессами.ПолучитьФактическиеТрудозатратыПоЗадаче(Объект.Ссылка);	
		
	ИначеЕсли ИмяСобытия = "ФайлЗанятДляРедактирования" Тогда
		
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		
		МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(
			Объект.Ссылка, Объект.БизнесПроцесс, Параметр.Файл, УникальныйИдентификатор);
			
		Прочитать();
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "ПерейтиКРезультатуРассмотренияЗадачи"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ЗадачаСсылка")
		И Объект.Ссылка = Параметр.ЗадачаСсылка
		И Параметр.Свойство("ВариантРассмотрения") Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультатРассмотрения;
		ВариантРассмотрения = Параметр.ВариантРассмотрения;
		
		ВариантРассмотренияПриИзменении(Элементы.ВариантРассмотрения);
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И Источник <> ЭтаФорма
		И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		
		РаботаСФлагамиОбъектовКлиентСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "СозданНовыйВопросВыполненияЗадачи" И Параметр = Объект.Ссылка Тогда
		
		БизнесПроцессыИЗадачиКлиентСервер.ЗаполнитьЗаголовокДекорацииЗадатьВопросАвтору(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма Тогда
		
		ПрочитатьДанныеЗадачиВФорму = Ложь;
		
		Если ТипЗнч(Параметр) = Тип("Массив") Тогда
			ПрочитатьДанныеЗадачиВФорму = Параметр.Найти(Объект.Ссылка) <> Неопределено;
		Иначе
			ПрочитатьДанныеЗадачиВФорму = (Параметр = Объект.Ссылка);
		КонецЕсли;
		
		Если ПрочитатьДанныеЗадачиВФорму Тогда
			Прочитать();
		КонецЕсли;
		
		КомандыРаботыСБизнесПроцессамиКлиент.ОбновитьДоступностьКомандПринятияКИсполнению(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" И Источник = Объект.Ссылка Тогда
		Закрыть();
		
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПриложений(ТекущееИмяПредметаВДереве = Неопределено)
	
	ТекущаяСсылкаВДереве = Неопределено;
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено И ТекущееИмяПредметаВДереве = Неопределено Тогда
		ТекущаяСсылкаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
		ТекущееИмяПредметаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.ИмяПредмета;
	КонецЕсли;
	
	Если Элементы.Найти("ДеревоПриложений") <> Неопределено  Тогда
		ОбновитьДеревоПриложенийСервер();
	КонецЕсли;
	
	Если ТекущаяСсылкаВДереве <> Неопределено ИЛИ ТекущееИмяПредметаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве);
	КонецЕсли;
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПриложенийСервер()
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоПриложений(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗадачаВыполнена")
		И ТекущийОбъект.ДополнительныеСвойства.ЗадачаВыполнена
		И ПодписатьРезолюцииЭП
		И ТипЗнч(ПодписиКРезолюциямПредметов) = Тип("Структура") Тогда
			
		Для Каждого Предмет Из Объект.Предметы Цикл
			
			Предмет = Предмет.Предмет;
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
				
				Резолюции = РаботаСРезолюциями.ПолучитьРезолюциюПоДате(Предмет, Объект.ДатаИсполнения);
				Если Резолюции.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбъектРезолюции = Резолюции[0].Ссылка.ПолучитьОбъект();
				
				Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Предмет_%1_%2'"),
					СтрЗаменить(Строка(Предмет.УникальныйИдентификатор()), "-", ""),
					Формат(Объект.ДатаИсполнения, "ДФ=yyyyMMddHHmmss"));
					
				Если Не ПодписиКРезолюциямПредметов.Свойство(Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПодписи = ПодписиКРезолюциямПредметов[Ключ];
				
				РаботаСЭП.ЗанестиИнформациюОПодписи(
					ОбъектРезолюции.Ссылка,
					ДанныеПодписи.НоваяПодписьДвоичныеДанные, 
					ДанныеПодписи.Отпечаток,
					ДанныеПодписи.ДатаПодписи,
					ДанныеПодписи.Комментарий, 
					ДанныеПодписи.ИмяФайлаПодписи,
					ДанныеПодписи.КомуВыданСертификат,
					ДанныеПодписи.ДвоичныеДанныеСертификата);
				ОбъектРезолюции.Подписана = Истина;
				ОбъектРезолюции.Записать();
							
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессами.ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(ЭтаФорма);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСФлагамиОбъектовСервер.СохранитьФлагОбъектаИзФормы(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Мультипредметность.ИзмененыПредметыЗадачи(Объект.Ссылка) Тогда
			ОбновитьДеревоПриложенийСервер();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(ЭтаФорма);
	
	Если Не Объект.Выполнена Тогда
		Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РаботаСФлагамиОбъектовСервер.ОтобразитьФлагВФормеОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьШаг(ИсполнителиИсполнения);	
	Оповестить("ОбновитьСписокПоследних");
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДекорацияЗадатьВопросАвторуНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	
	Если Элементы.ДекорацияЗадатьВопросАвтору.Заголовок = НСтр("ru = 'Задать вопрос...'") Тогда
		
		ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта",
			ПараметрыФормы);
		
	Иначе
		
		ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ВопросыВыполненияЗадачи",
			ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидВопроса", ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.ПереносСрока"));

	ОткрытьФорму("БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПричинаПрерыванияНажатие(Элемент)
		
	КомандыРаботыСБизнесПроцессамиКлиент.ПоказатьПричинуПрерывания(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ОчиститьСообщения();
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить(Команда)
	
	Если Записать() Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Выполнено(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиИсполнения, "Исполнитель");
	ЗаполнитьШаг(ИсполнителиИсполнения);
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиОзнакомления, "Исполнитель");
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьНомерСтрокиВТаблицеИсполнителей(
		ИсполнителиОзнакомления);
	
	Если ВариантРассмотрения = ВариантРассмотренияВвестиТекстРезолюции Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.РезультатВыполнения) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Резолюция"" не заполнено'"),,
				"Объект.РезультатВыполнения",,Отказ);
		КонецЕсли;
		
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаИсполнение Тогда 
		
		Если ПустаяСтрока(НаименованиеИсполнения) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
				"НаименованиеИсполнения",,Отказ);
		КонецЕсли;	
		
		Если ИсполнителиИсполнения.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
				"ИсполнителиИсполнения",,Отказ);
		КонецЕсли;	
		
		Для Каждого Строка Из ИсполнителиИсполнения Цикл
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
					ИсполнителиИсполнения.Индекс(Строка)+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,"ИсполнителиИсполнения["+ИсполнителиИсполнения.Индекс(Строка)+"].Исполнитель",,Отказ);
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаОзнакомление Тогда 
		
		Если ПустаяСтрока(НаименованиеОзнакомления) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
				"НаименованиеОзнакомления",,Отказ);
		КонецЕсли;
		
		Если ИсполнителиОзнакомления.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
				"ИсполнителиОзнакомления",,Отказ);
		КонецЕсли;
		
		Для Каждого Строка Из ИсполнителиОзнакомления Цикл
			Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
					ИсполнителиОзнакомления.Индекс(Строка)+1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,"ИсполнителиОзнакомления["+ИсполнителиОзнакомления.Индекс(Строка)+"].Исполнитель",,Отказ);
			КонецЕсли;	
		КонецЦикла;	
		
		// Проверка исполнителей на дубли
		РаботаСБизнесПроцессамиКлиентСервер.ПроверитьНаДублиТаблицуИсполнителей(
			ИсполнителиОзнакомления, "ИсполнителиОзнакомления", Отказ, Ложь);
		
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеПроверкиНаЗанятыеФайлы",
		ЭтотОбъект);
	
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Объект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеПроверкиНаЗанятыеФайлы(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РассмотрениеВыполнениеКомандыВыполнено");	
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ВыполнитьЗадачу", Истина);
	
	СформироватьТекстРезолюции();
	
	ПодписиКРезолюциямПредметов = Новый Структура;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеПодписанияРезолюций",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);

	Если ПодписатьРезолюцииЭП Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
			Возврат;
		КонецЕсли;
		
		МассивРезолюций = Новый Массив;
		МассивРезолюцийДляПодписания = Новый Массив;
		МассивАдресов = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		
		Для Каждого Предмет Из Объект.Предметы Цикл
			Если ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				СтруктураРезолюцииДляПодписания.Документ = Предмет.Предмет;
				СтруктураРезолюцииДляПодписания.ДатаРезолюции = Объект.ДатаИсполнения;
				СтруктураРезолюцииДляПодписания.АвторРезолюции = Объект.Исполнитель;
				СтруктураРезолюцииДляПодписания.ВнесРезолюцию = Объект.Исполнитель;
				СтруктураРезолюцииДляПодписания.ТекстРезолюции = Объект.РезультатВыполнения;
				
				МассивРезолюцийДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
				
				СтруктураРезолюции = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				ЗаполнитьЗначенияСвойств(СтруктураРезолюции, СтруктураРезолюцииДляПодписания);
				СтруктураРезолюции.Вставить("Наименование", РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(
					Предмет.Предмет));
					
				МассивРезолюций.Добавить(СтруктураРезолюции);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРезолюцийДляПодписания.Количество() > 0 Тогда
			
			ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подписать резолюции предметов'");
			
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивРезолюцийДляПодписания, 
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов, , 
				ЗаголовокФормыВыбораСертификата, ОписаниеОповещения);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОповещения = Новый Структура;
		РезультатОповещения.Вставить("Флаг", Истина);
		РезультатОповещения.Вставить("МассивДанныхДляЗанесенияВРегистр", Новый Массив);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеПодписанияРезолюций(Результат, Параметры) Экспорт
	
	Если Не Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из МассивДанныхДляЗанесенияВРегистр Цикл
		Резолюция = ДанныеДляЗанесенияВРегистр.ОбъектСсылка;
		Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Предмет_%1_%2'"),
			СтрЗаменить(Строка(Резолюция.Документ.УникальныйИдентификатор()), "-", ""),
			Формат(Резолюция.ДатаРезолюции, "ДФ=yyyyMMddHHmmss"));
		ПодписиКРезолюциямПредметов.Вставить(Ключ, ДанныеДляЗанесенияВРегистр);
	КонецЦикла;
	
	Если Не Записать(Параметры.ПараметрыЗаписи) Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеВводаВремени",
		ЭтотОбъект);
	
	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(ОпцияИспользоватьУчетВремени,
		Объект.ДатаИсполнения, Объект.Ссылка, ВключенХронометраж, 
		ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВидыРабот, СпособУказанияВремени, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеВводаВремени(Результат, Параметры) Экспорт
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", Объект.Ссылка);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОткрытьИсполнителя(Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.Перенаправить(ЭтаФорма);
	
КонецПроцедуры

// исполнители
&НаКлиенте
Процедура ИсполнителиИсполненияПослеУдаления(Элемент)
	
	ЗаполнитьШаг(ИсполнителиИсполнения);
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда 
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(ИсполнителиИсполнения, Элементы.ИсполнителиИсполнения, ВариантИсполнения, Истина);
		УстановитьДоступность();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		
		Элементы.ИсполнителиОзнакомления.ТекущиеДанные.Исполнитель = ПользователиПустаяСсылка;
		
		КоличествоИсполнителей = 
			ИсполнителиОзнакомления.Количество();
		Если КоличествоИсполнителей = 1 Тогда
			НомерТекущейСтроки = 1;
		Иначе
			НомерПредыдущейСтроки = 
				ИсполнителиОзнакомления[КоличествоИсполнителей - 2].НомерСтроки;
				
			НомерТекущейСтроки = НомерПредыдущейСтроки + 1;
				
		КонецЕсли;
			
		Элементы.ИсполнителиОзнакомления.ТекущиеДанные.НомерСтроки = НомерТекущейСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

// ИсполнительОзнакомления
&НаКлиенте
Процедура ИсполнительОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.ИсполнителиОзнакомления.ТекущиеДанные.Исполнитель,,,,,
		Элементы.ИсполнителиОзнакомления.ТекущиеДанные.ОсновнойОбъектАдресации, 
		Элементы.ИсполнителиОзнакомления.ТекущиеДанные.ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.ИсполнителиОзнакомления.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.ИсполнителиОзнакомления.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.ИсполнителиОзнакомления.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
    РаботаСБизнесПроцессамиКлиент.ПереместитьВверх(Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, Модифицированность, Истина);
	ОбновитьДоступностьКомандПеремещения();
	
	Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(ИсполнителиИсполнения, Дата(1,1,1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.ПереместитьВниз(Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, Модифицированность, Истина);
	ОбновитьДоступностьКомандПеремещения();
	
	Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно")
		ИЛИ ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(ИсполнителиИсполнения, Дата(1,1,1));
	КонецЕсли;
	
КонецПроцедуры

// ИсполнительИсполнения
&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, Элементы.ИсполнителиИсполнения.ТекущиеДанные.Исполнитель,,,,,
		Элементы.ИсполнителиИсполнения.ТекущиеДанные.ОсновнойОбъектАдресации, 
		Элементы.ИсполнителиИсполнения.ТекущиеДанные.ДополнительныйОбъектАдресации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущийДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
		ТекущийДанные.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		ТекущийДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ТекущийДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ТекущийДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
		ТекущийДанные.ОсновнойОбъектАдресации = Неопределено;
		ТекущийДанные.ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияПриИзменении(Элемент)
	
	ТекущийДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ТекущийДанные,
		"Исполнитель",
		"ОсновнойОбъектАдресации",
		"ДополнительныйОбъектАдресации",
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		Элементы.ИсполнителиИсполнения,
		Элементы.НазначитьОтветственным,
		ИсполнителиИсполнения,
		Модифицированность);
	ЗаполнитьШаг(ИсполнителиИсполнения);
	ОбновитьФлагУстановкиОтветственного();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

// контролер
&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, КонтролерИсполнения,,,,,
		ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		КонтролерИсполнения = ВыбранноеЗначение.РольИсполнителя;
		ОсновнойОбъектАдресацииКонтролера = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресацииКонтролера = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ОсновнойОбъектАдресацииКонтролера = Неопределено;
		ДополнительныйОбъектАдресацииКонтролера = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ЭтаФорма,
		"КонтролерИсполнения",
		"ОсновнойОбъектАдресацииКонтролера",
		"ДополнительныйОбъектАдресацииКонтролера",
		ЭтаФорма);
		
КонецПроцедуры

// проверяющий
&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		ЭтаФорма,
		"ПроверяющийИсполнения",
		"ОсновнойОбъектАдресацииПроверяющего",
		"ДополнительныйОбъектАдресацииПроверяющего",
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПользователямиКлиент.ВыбратьИсполнителя(Элемент, ПроверяющийИсполнения,,Истина,,,,
		ОсновнойОбъектАдресацииПроверяющего, ДополнительныйОбъектАдресацииПроверяющего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПроверяющийИсполнения = ВыбранноеЗначение.РольИсполнителя;
		ОсновнойОбъектАдресацииПроверяющего = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресацииПроверяющего = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Модифицированность = Истина;
	Иначе  
		ОсновнойОбъектАдресацииПроверяющего = Неопределено;
		ДополнительныйОбъектАдресацииПроверяющего = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// подбор
&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище();
	РаботаСПользователямиКлиент.ПодборИсполнителей(АдресВременногоХранилища, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРассмотренияПриИзменении(Элемент)
	
	Если ВариантРассмотрения = ВариантРассмотренияВвестиТекстРезолюции Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаРезолюция;
		
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаИсполнение Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаНаИсполнение;
		
		Если Не ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
			НаименованиеИсполнения = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Исполнить'"), Объект.Предметы); 
		КонецЕсли;
		
	ИначеЕсли ВариантРассмотрения = ВариантРассмотренияНаправитьНаОзнакомление Тогда 
		Элементы.ГруппаСтраницыРезультатов.ТекущаяСтраница = Элементы.ГруппаОзнакомление;
		
		Если Не ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			НаименованиеОзнакомления = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Ознакомиться'"), Объект.Предметы); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// заполнить по шаблону
&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнение(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	ШаблоныИсполнения.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныИсполнения"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуИсполнениеПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныИсполнения", ШаблоныИсполнения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьИсполнениеПоШаблонуНаСервере(РезультатВыбора);
		УстановитьДоступностьПоШаблонуИсполнения();
		Модифицированность = Истина;	
	КонецЕсли;
	ЗаполнитьШаг(ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомление(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	ШаблоныОзнакомления.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныОзнакомления"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуОзнакомлениеПродолжение",
		ЭтотОбъект);
		
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныОзнакомления", ШаблоныОзнакомления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомлениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьОзнакомлениеПоШаблонуНаСервере(РезультатВыбора);
		УстановитьДоступностьПоШаблонуОзнакомления();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнениеПоШаблонуНаСервере(Шаблон)
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Заполнить(Новый Структура());
	
	Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		ИсполнениеОбъект.Автор = Объект.Исполнитель;
	Иначе
		ИсполнениеОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Мультипредметность.ПередатьПредметыПроцессу(ИсполнениеОбъект, Объект.Предметы);
	
	ИсполнениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Наименование) Тогда 
		НаименованиеИсполнения = ИсполнениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Описание) Тогда 
		ОписаниеИсполнения = ИсполнениеОбъект.Описание;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокИсполнения) Тогда 
		СрокИсполненияОбщий = ИсполнениеОбъект.СрокИсполнения;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Важность) Тогда 
		ВажностьИсполнения = ИсполнениеОбъект.Важность;
	КонецЕсли;
	
	КонтролерИсполнения = ИсполнениеОбъект.Контролер;
	ОсновнойОбъектАдресацииКонтролера = ИсполнениеОбъект.ОсновнойОбъектАдресацииКонтролера;
	ДополнительныйОбъектАдресацииКонтролера = ИсполнениеОбъект.ДополнительныйОбъектАдресацииКонтролера;
	
	ПроверяющийИсполнения = ИсполнениеОбъект.Проверяющий;
	ОсновнойОбъектАдресацииПроверяющего = ИсполнениеОбъект.ОсновнойОбъектАдресацииПроверяющего;
	ДополнительныйОбъектАдресацииПроверяющего = ИсполнениеОбъект.ДополнительныйОбъектАдресацииПроверяющего;
	
	ИсполнителиИсполнения.Загрузить(ИсполнениеОбъект.Исполнители.Выгрузить());
	ШаблонИсполнения = Шаблон;
	
	ВариантИсполнения = ИсполнениеОбъект.ВариантИсполнения;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОзнакомлениеПоШаблонуНаСервере(Шаблон)
	
	ОзнакомлениеОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Заполнить(Новый Структура());
	
	Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		ОзнакомлениеОбъект.Автор = Объект.Исполнитель;
	Иначе
		ОзнакомлениеОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Мультипредметность.ПередатьПредметыПроцессу(ОзнакомлениеОбъект, Объект.Предметы);
	
	ОзнакомлениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Наименование) Тогда 
		НаименованиеОзнакомления = ОзнакомлениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Описание) Тогда 
		ОписаниеОзнакомления = ОзнакомлениеОбъект.Описание;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.СрокИсполнения) Тогда 
		СрокОзнакомления = ОзнакомлениеОбъект.СрокИсполнения;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Важность) Тогда 
		ВажностьОзнакомления = ОзнакомлениеОбъект.Важность;
	КонецЕсли;
	
	ИсполнителиОзнакомления.Загрузить(ОзнакомлениеОбъект.Исполнители.Выгрузить());
	ШаблонОзнакомления = Шаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияОбщийПриИзменении(Элемент)
	
	Если СрокИсполненияОбщий = НачалоДня(СрокИсполненияОбщий) Тогда
		СрокИсполненияОбщий = КонецДня(СрокИсполненияОбщий);
	КонецЕсли;
	Элементы.ИсполнителиИсполненияСрокИсполнения.АвтоОтметкаНезаполненного = 
		НЕ (ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно"))
		И ЗначениеЗаполнено(СрокИсполненияОбщий);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияСрокИсполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные.СрокИсполнения = НачалоДня(ТекущиеДанные.СрокИсполнения) Тогда
		ТекущиеДанные.СрокИсполнения = КонецДня(ТекущиеДанные.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОзнакомленияПриИзменении(Элемент)
	
	Если СрокОзнакомления = НачалоДня(СрокОзнакомления) Тогда
		СрокОзнакомления = КонецДня(СрокОзнакомления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ПоказатьЗначение(, Объект.БизнесПроцесс);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	Если Объект.Выполнена Тогда
		ДатаОтчета = Объект.ДатаИсполнения;
	КонецЕсли;	
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Объект.Выполнена,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	СтарыйВариантИсполнения = ПредыдущийВариантИсполнения;
	
	РаботаСБизнесПроцессамиКлиент.ПриИзмененииВариантаИсполнения(
		ВариантИсполнения,
		ПредыдущийВариантИсполнения,
		Элементы.ИсполнителиИсполненияСрокИсполнения,
		ИсполнителиИсполнения);
		
	Если СтарыйВариантИсполнения <> ВариантИсполнения
		И СтарыйВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетДлительностей(ИсполнителиИсполнения, Объект.ДатаНачала);
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриИзменении(Элемент)
	
	ЗаполнитьШаг(ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	ЗаполнитьШаг(ИсполнителиИсполнения);
	Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно")
		ИЛИ ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
		РаботаСБизнесПроцессамиКлиентСервер.ВыполнитьРасчетСроков(ИсполнителиИсполнения, Дата(1,1,1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияСрокИсполненияВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения) и ТекущиеДанные.СрокИсполнения < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		
		ЧасДаты = Час(ТекущиеДанные.СрокИсполнения);
		МинутаДаты = Минута(ТекущиеДанные.СрокИсполнения);
		СекундаДаты = Секунда(ТекущиеДанные.СрокИсполнения);
		
		ТекущиеДанные.СрокИсполнения = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиИсполнения, "Исполнитель");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиОзнакомления, "Исполнитель");
	
	Если ВариантРассмотрения = ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение") Тогда
		
		РаботаСБизнесПроцессамиКлиент.ПроверитьКорректностьЗаполнения(
			Объект.Ссылка,
			ИсполнителиИсполнения, 
			СрокИсполненияОбщий, 
			ВариантИсполнения, 
			"СрокИсполненияОбщий",
			"ИсполнителиИсполнения",
			Отказ);	
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГОМ

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		БиблиотекаКартинок.КрасныйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		БиблиотекаКартинок.СинийФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		БиблиотекаКартинок.ЖелтыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		БиблиотекаКартинок.ЗеленыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		БиблиотекаКартинок.ОранжевыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		БиблиотекаКартинок.ЛиловыйФлаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагВФормеОбъекта(
		ЭтаФорма,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.ПустаяСсылка"),
		БиблиотекаКартинок.ПустойФлаг);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
		РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЛЯ РАБОТЫ С ПРИЛОЖЕНИЯМИ 

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоПриложений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ПараметрыОбработчикаОповещения = Новый Структура();
		ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДеревоПриложенийВыборПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчикаОповещения);         
			
		Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(ЭтаФорма, СообщениеОбОшибке, 
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка, СтандартнаяОбработка, ОписаниеОповещения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,, "ДеревоПриложений");
			Возврат;
		КонецЕсли;
	Иначе
		РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
			ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийВыборПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ТолькоПросмотр Или Элементы.ДеревоПриложений.ТолькоПросмотр Или Объект.Выполнена Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.БизнесПроцесс;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДеревоПриложенийДобавлениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ДеревоПриложенийУдалениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиенте()

	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	НовыйИмяПредмета = Неопределено;
	
	ПараметрыОбработчикаОповещения = Новый Структура();
	ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийВыборПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(ЭтаФорма, СообщениеОбОшибке, НовыйИмяПредмета,,,ОписаниеОповещения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийДобавлениеНаКлиентеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиенте()
	
	ВыделенныеСтрокиПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыделеннаяСтр);
		ВыделенныеСтрокиПредметов.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийУдалениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ВыделенныеСтрокиПредметов);
		
	МультипредметностьКлиент.ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиентеПродолжение(Результат, ВыделенныеСтрокиПредметов) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	
	ИменаУдаляемыхПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из ВыделенныеСтрокиПредметов Цикл
		Если ВыделеннаяСтр.ДоступноУдаление Тогда
			ИменаУдаляемыхПредметов.Добавить(ВыделеннаяСтр.ИмяПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаУдаляемыхПредметов.Количество() = 0 Тогда
		
		КоличествоВыделенныхСтрок = ВыделенныеСтрокиПредметов.Количество();
		Если КоличествоВыделенныхСтрок = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Удалить текущий предмет можно только в карточке процесса.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Удалить выделенные предметы можно только в карточке процесса.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	Если Не МультипредметностьКлиент.УдалитьПредметыЗадачи(ЭтаФорма, СообщениеОбОшибке, ИменаУдаляемыхПредметов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПриложений();
	УстановитьПредметСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура Редактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ДеревоПриложенийДобавлениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ДеревоПриложенийУдалениеНаКлиенте();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьПредметСервер()
	
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДеревоПриложений(Команда)
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ОткрытьКарточкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНаКлиенте()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	Иначе
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ПараметрыОбработчикаОповещения = Новый Структура;
		ПараметрыОбработчикаОповещения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьКарточкуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчикаОповещения);
			
		Если Не МультипредметностьКлиент.ДобавитьПредметЗадачи(
			ЭтаФорма,
			СообщениеОбОшибке, 
			ТекущиеДанные.ИмяПредмета,
			ТекущиеДанные.Ссылка,,
			ОписаниеОповещения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,, "ДеревоПриложений");
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНаКлиентеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоПриложений();
		УстановитьПредметСервер();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтображатьУдаленныеПриложения(Команда)
	
	ОтображатьУдаленныеПриложения = Не ОтображатьУдаленныеПриложения;
	Элементы.ДеревоПриложенийКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленныеПриложения;
	
	ТекущаяСсылкаВДереве = Неопределено;
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСсылкаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
	КонецЕсли;	
	
	ОтображатьУдаленныеПриложенияСервер();
	
	Если ТекущаяСсылкаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСсылкаВДереве);
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений);
		
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеПриложенияСервер()
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоПриложений(ЭтаФорма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяФормы,
		"ОтображатьУдаленныеПриложения",
		ОтображатьУдаленныеПриложения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 95, 125);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры


