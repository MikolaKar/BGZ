
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет комплексный процесс в очередь для последующей обработки рег. заданием
// ФоноваяМаршрутизацияКомплексныхПроцессов
//
// Параметры:
//   КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс - комплексный процесс для
//                        обработки.
//   ЗавершившеесяДействие - БизнесПроцессСсылка.<тип процесса> - завершившееся действие,
//                          после которого следует запустить следующие действия комплексного
//                          процесса.
//   ЗадачаОжидания - ЗадачаСсылка.ЗадачаИсполнителя - служебная задача комплексного процесса,
//                    которая используется для того, чтобы комплексный процесс не завершался
//                    после выполнения завершившегося действия.
//
Процедура ДобавитьПроцесс(КомплексныйПроцесс, ЗавершившеесяДействие, ЗадачаОжидания) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.
		СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КомплексныйПроцесс = КомплексныйПроцесс;
	МенеджерЗаписи.ЗавершившеесяДействие = ЗавершившеесяДействие;
	МенеджерЗаписи.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МенеджерЗаписи.ЗадачаОжидания = ЗадачаОжидания;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет комплексный процесс из очереди для последующей обработки рег. заданием
// ФоноваяМаршрутизацияКомплексныхПроцессов
//
//   КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс - комплексный процесс для
//                        обработки.
//   ЗавершившеесяДействие - БизнесПроцессСсылка.<тип процесса> - завершившееся действие,
//                          после которого следует запустить следующие действия комплексного
//                          процесса.
//
Процедура УдалитьПроцесс(КомплексныйПроцесс, ЗавершившеесяДействие) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.
		СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КомплексныйПроцесс = КомплексныйПроцесс;
	МенеджерЗаписи.ЗавершившеесяДействие = ЗавершившеесяДействие;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Добавляет текст ошибки и увеличивает число попыток для записи в очереди
// по комплексному процессу
// 
// Параметры:
//   КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс - комплексный процесс для
//                        обработки.
//   ЗавершившеесяДействие - БизнесПроцессСсылка.<тип процесса> - завершившееся действие,
//                          после которого следует запустить следующие действия комплексного
//                          процесса.
//   ТекстОшибки - Строка - текст ошибки.
//
Процедура ДобавитьИнформациюОНеудачнойОбработкеПроцесса(
	КомплексныйПроцесс, ЗавершившеесяДействие, ТекстОшибки) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.
		СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КомплексныйПроцесс = КомплексныйПроцесс;
	МенеджерЗаписи.ЗавершившеесяДействие = ЗавершившеесяДействие;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ТекстОшибки = ТекстОшибки;
	МенеджерЗаписи.КоличествоПопытокОбработки = МенеджерЗаписи.КоличествоПопытокОбработки + 1;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Сбрасывает количество попыток и текст ошибки у переданных записей очереди.
//
// Параметры:
//   - КомплексныеПроцесс - Массив - массив с описанием записей в очереди
//                             - Структура - описание записи в очереди
//                                   - КомплексныйПроцесс
//                                   - ЗавершившеесяДействие
//
Процедура ПродолжитьВыполнениеПроцессов(КомплексныеПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КомплексныйПроцесс ИЗ КомплексныеПроцесс Цикл
		
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("КомплексныйПроцесс", КомплексныйПроцесс.КомплексныйПроцесс);
		ПараметрыКлюча.Вставить("ЗавершившеесяДействие", КомплексныйПроцесс.ЗавершившеесяДействие);
		
		КлючЗаписи = СоздатьКлючЗаписи(ПараметрыКлюча);
		Если КлючЗаписи.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, КомплексныйПроцесс);
		Запись.Прочитать();
		Запись.КоличествоПопытокОбработки = 0;
		Запись.ТекстОшибки = "";
		Запись.Записать();
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

