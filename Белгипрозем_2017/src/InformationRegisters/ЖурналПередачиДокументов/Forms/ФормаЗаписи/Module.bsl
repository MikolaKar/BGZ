
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.ДатаВозврата.ТолькоПросмотр = Не Запись.Возвращен;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиПросроченоДней()
	
	ТекущаяДата = ТекущаяДата();
	Если НачалоДня(ТекущаяДата) > НачалоДня(Запись.СрокВозврата) И ЗначениеЗаполнено(Запись.СрокВозврата) И Не Запись.Возвращен Тогда 
		ПросроченоДней = (НачалоДня(ТекущаяДата) - НачалоДня(Запись.СрокВозврата)) / (24 * 3600);
		Элементы.ДекорацияПросрочка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(просрочено %1 %2)'"), 
			Формат(ПросроченоДней, "ЧН=; ЧГ="), 
			ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ПросроченоДней));
	Иначе
		Элементы.ДекорацияПросрочка.Заголовок = "";
	КонецЕсли;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
// 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПоказатьДержателяДокумента") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Период КАК Период,
		|	ЖурналПередачиДокументов.Документ КАК Документ,
		|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
		Запрос.УстановитьПараметр("Документ", Параметры.ПоказатьДержателяДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			МенеджерЗаписи = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Документ 		= Выборка.Документ;
			МенеджерЗаписи.ТипЭкземпляра 	= Выборка.ТипЭкземпляра;
			МенеджерЗаписи.Период 			= Выборка.Период;
			МенеджерЗаписи.НомерЭкземпляра 	= Выборка.НомерЭкземпляра;
			МенеджерЗаписи.Прочитать();
			
			ЗначениеВРеквизитФормы(МенеджерЗаписи, "Запись");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) Тогда 
		Элементы.Пользователь.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.ТипДокумента.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Запись.Период = ТекущаяДатаСеанса();
		Запись.СрокВозврата = '00010101';
		Запись.Возвращен = Ложь;
		Запись.ДатаВозврата = '00010101';
	КонецЕсли;	
	
	ИмяТипаДокумента = "";
	Если ЗначениеЗаполнено(Запись.Документ) Тогда
		ИмяТипаДокумента = Строка(ТипЗнч(Запись.Документ));
	Иначе
		Элементы.Документ.ТолькоПросмотр = Истина;
		Элементы.Документ.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;	
	
	СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(Метаданные.РегистрыСведений.ЖурналПередачиДокументов.Измерения.Документ.Тип.Типы());
	Для Каждого ЭлементСписка Из СписокТипов Цикл
		Элементы.ТипДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Если ИмяТипаДокумента = ЭлементСписка.Представление Тогда
			ТипДокумента = ЭлементСписка.Значение;
			Элементы.Документ.ТолькоПросмотр = ПустаяСтрока(ТипДокумента);
			Элементы.Документ.АвтоОтметкаНезаполненного = Не ПустаяСтрока(ТипДокумента);
		КонецЕсли;
	КонецЦикла;	
	
    // Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	//{{1С-Минск
	Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
		Параметры.ЗначенияЗаполнения.Свойство("Пользователь", Запись.Пользователь);
	КонецЕсли; 
    ДобавитьРеквизитТипПользователя();    
    //}}1C-Минск
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступность();
	
	ВывестиПросроченоДней();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Запись.Возвращен Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналПередачиДокументовСрезПоследних.Пользователь,
	|	ЖурналПередачиДокументовСрезПоследних.Возвращен
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов.СрезПоследних(
	|			&Период,
	|			Документ = &Документ
	|				И НомерЭкземпляра = &НомерЭкземпляра
	|				И ТипЭкземпляра = &ТипЭкземпляра) КАК ЖурналПередачиДокументовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", 			Новый Граница(Запись.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Документ", 			Запись.Документ);
	Запрос.УстановитьПараметр("НомерЭкземпляра", 	Запись.НомерЭкземпляра);
	Запрос.УстановитьПараметр("ТипЭкземпляра", 		Запись.ТипЭкземпляра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Возвращен Тогда
			Если ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
				Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Выборка.Пользователь).Чтение Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Невозможно отразить передачу документа, так как он не был возвращен контактным лицом %1'"),
						Строка(Выборка.Пользователь));
				Иначе
					ТекстСообщения = НСтр("ru = 'Невозможно отразить передачу документа, так как он не был возвращен другим лицом'");
				КонецЕсли;	
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно отразить передачу документа, так как он не был возвращен пользователем %1'"),
					Строка(Выборка.Пользователь));
			КонецЕсли;	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Запись.Документ",, Отказ);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////// 
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
// 

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Запись.Документ);
	ОткрытьФорму(ТипДокумента + ".ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборПользователяКонтактноеЛицо", Новый Структура("ТекущаяСтрока", Запись.Пользователь), Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.Возвращен Тогда 
		ПроверяемыеРеквизиты.Добавить("ДатаВозврата");
	КонецЕсли;	
	
	ПроверяемыеРеквизиты.Добавить("ТипДокумента");
	
	Если Запись.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал
	   И ЗначениеЗаполнено(Запись.Документ)
	   И Запись.НомерЭкземпляра > Запись.Документ.КоличествоЭкземпляров 
	   И Запись.Документ.КоличествоЭкземпляров > 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указанный номер экземпляра превышает количество экземпляров документа'"),,
			"Запись.НомерЭкземпляра",,
			Отказ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Запись.СрокВозврата) И КонецДня(Запись.СрокВозврата) < Запись.Период Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Срок возврата меньше даты передачи'"),,
			"Запись.СрокВозврата",,
			Отказ);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Запись.ДатаВозврата) И КонецДня(Запись.ДатаВозврата) < Запись.Период Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата возврата меньше даты передачи'"),,
			"Запись.ДатаВозврата",,
			Отказ);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенПриИзменении(Элемент)
	
	Если Запись.Возвращен Тогда
		Запись.ДатаВозврата = ТекущаяДата();
	Иначе
		Запись.ДатаВозврата = '00010101';
	КонецЕсли;	
	
	УстановитьДоступность();
	
	ВывестиПросроченоДней();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененЖурналПередачи", Запись.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	Элементы.Документ.ТолькоПросмотр = ПустаяСтрока(ТипДокумента);
	Элементы.Документ.АвтоОтметкаНезаполненного = Не ПустаяСтрока(ТипДокумента);
	Элементы.Документ.ОтметкаНезаполненного = Не ПустаяСтрока(ТипДокумента) И Не ЗначениеЗаполнено(Запись.Документ);
	
	Если НЕ ЗначениеЗаполнено(Запись.Документ) Тогда
		Запись.Документ = Неопределено;
	Иначе	
		ИмяТипаДокумента = Строка(ТипЗнч(Запись.Документ));
		Для Каждого ЭлементСписка Из Элементы.ТипДокумента.СписокВыбора Цикл
			// Документ имеет тот же тип, что ТипДокумента - очищать не надо
			Если ЭлементСписка.Значение = ТипДокумента И ЭлементСписка.Представление = ИмяТипаДокумента Тогда
				Возврат;
			КонецЕсли;	
		КонецЦикла	
	КонецЕсли;	
	
	Запись.Документ = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокВозвратаПриИзменении(Элемент)
	
	ВывестиПросроченоДней();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателяДляЖурналаПередачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораПолучателяДляЖурналаПередачи(Текст);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 75, 105);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

//{{1С-Минск
// Добавляет реквизит тип пользователя на форму
//
&НаСервере
Процедура ДобавитьРеквизитТипПользователя()
    МассивРекв = Новый Массив;
    МассивРекв.Добавить(Новый РеквизитФормы("ТипПользователя",
        Новый ОписаниеТипов("Строка"),
        ,
        "Тип получателя",
        Ложь));
    ИзменитьРеквизиты(МассивРекв);
    
    Элемент = Элементы.Добавить("ТипПользователя", Тип("ПолеФормы"), Элементы.ГруппаКому);
    Элементы.Переместить(Элемент, Элементы.ГруппаКому, Элементы.Пользователь);
    Элемент.Вид = ВидПоляФормы.ПолеВвода;
    Элемент.ПутьКДанным = "ТипПользователя";
    Элемент.УстановитьДействие("ПриИзменении", "ТипПользователяПриИзменении");
    Элемент.КнопкаВыпадающегоСписка = Истина;
    Элемент.КнопкаСпискаВыбора = Истина;
    Элемент.СписокВыбора.Очистить();
    Элемент.СписокВыбора.Добавить("Пользователь", "Пользователь");
    Элемент.СписокВыбора.Добавить("Контактное лицо", "Контактное лицо");
    Элемент.АктивизироватьПоУмолчанию = Истина;
    
    Если ЗначениеЗаполнено(Запись.Пользователь) Тогда
		ИмяТипаПользователя = Строка(ТипЗнч(Запись.Пользователь));
		Если ИмяТипаПользователя = "Пользователь" Тогда
			ЭтаФорма.ТипПользователя = "Пользователь";
		Иначе
			ЭтаФорма.ТипПользователя = "Контактное лицо";
		КонецЕсли; 
    КонецЕсли;	

КонецПроцедуры // ДобавитьРеквизитТипПользователя()
 
&НаКлиенте
Процедура ТипПользователяПриИзменении(Элемент)
	СписокКонтактныхЛиц = ЗаполнитьПользователя(Элемент.ТекстРедактирования);
    
    ВыбЭлемент = Неопределено;
    Если СписокКонтактныхЛиц.Количество() > 1 Тогда
        ВыбЭлемент = СписокКонтактныхЛиц.ВыбратьЭлемент(,);
    ИначеЕсли СписокКонтактныхЛиц.Количество() = 1 Тогда
        ВыбЭлемент = СписокКонтактныхЛиц.Получить(0);
    КонецЕсли; 
    Если ВыбЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Запись.Пользователь = ВыбЭлемент.Значение;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПользователя(Режим)
    
    СписокКонтактныхЛиц = Новый СписокЗначений;
    
    Если Режим = "Пользователь" Тогда
        СписокКонтактныхЛиц.Добавить(Запись.Документ.Подразделение.Руководитель);
	    //Запись.Пользователь = Запись.Документ.Подразделение.Руководитель;
	Иначе 
		ТипЗначенияДокумент = ТипЗнч(Запись.Документ);
		Корреспондент = Неопределено;
		Если ТипЗначенияДокумент = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		    Корреспондент = Запись.Документ.Отправитель;
		ИначеЕсли ТипЗначенияДокумент = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		    Корреспондент = Запись.Документ.Корреспондент;
		ИначеЕсли ТипЗначенияДокумент = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		    Корреспондент = Запись.Документ.Получатели[0].Получатель;
		КонецЕсли; 
		
		СписокКонтактныхЛиц = ПолучитьСписокКонтактныхЛиц(Корреспондент);
		
    КонецЕсли; 
    
    Возврат СписокКонтактныхЛиц;
КонецФункции // ЗаполнитьПользователя()

&НаСервере
Функция ПолучитьСписокКонтактныхЛиц(Корреспондент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактныеЛица.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И НЕ КонтактныеЛица.ПометкаУдаления";

	Запрос.УстановитьПараметр("Владелец", Корреспондент);

	Результат = Запрос.Выполнить().Выгрузить();

	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	СписокКонтактныхЛиц.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокКонтактныхЛиц;

КонецФункции // ПолучитьСписокКонтактныхЛиц()
//}}1C-Минск