
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Добавляет указанный объект в очередь отложенного обновления прав
//
// Параметры:
//  Объект - Ссылка - ссылка на объект, который необходимо записать в очередь.
//  ДатаВремя - Дата - Необязательный. Используется для сортровки при обработке очереди.
//  ОбновлениеЗависимыхПрав - Булево - Необязательный. Признак, указывающий, что нужно обработать - сам Объект, или объекты, зависимые от него.
//  Приоритет - Число, Неопределено - Необязательный. Приоритет очереди, в которую нужно добавить объект. По умолчанию Неопределено.
//
Процедура Добавить(Объект, ДатаВремя = Неопределено, ОбновлениеЗависимыхПрав = Ложь, Приоритет = Неопределено) Экспорт
	
	Если ДатаВремя = Неопределено Тогда
		ДатаВремя = ТекущаяДата();
		ДатаВМиллиСекундах = ОбщегоНазначенияДокументооборот.ТекущаяДатаВМиллисекундах();
	Иначе
		ДатаВМиллисекундах = ОбщегоНазначенияДокументооборот.ДатаВМиллисекундах(ДатаВремя);
	КонецЕсли;
	
	Если Приоритет = Неопределено Тогда
		Приоритет = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект.Ссылка;
	МенеджерЗаписи.Приоритет = Приоритет;
	МенеджерЗаписи.ОбновлениеЗависимыхПрав = ОбновлениеЗависимыхПрав;
	МенеджерЗаписи.Дата = ДатаВремя;
	МенеджерЗаписи.ДатаВМиллиСекундах = ДатаВМиллиСекундах;
	
	// Запись с замещением для правильного выстраивания очереди
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет указанный объект из очереди отложенного обновления прав
//
// Параметры:
//  Объект - Ссылка - ссылка на объект, который необходимо удалить из очереди.
//  ОбновлениеЗависимыхПрав - Булево - Необязательный. Будет удалена запись с этим значением поля ОбновлениеЗависимыхПрав.
//
Процедура Удалить(Объект, ОбновлениеЗависимыхПрав = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.Приоритет,
		|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Объект = &Объект
		|	И ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав = &ОбновлениеЗависимыхПрав";

	Если ЗначениеЗаполнено(Объект) Тогда 
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Иначе	
		Запрос.УстановитьПараметр("Объект", Объект);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ОбновлениеЗависимыхПрав", ОбновлениеЗависимыхПрав);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет порцию прав из очереди
//
// Параметры:
//  РазмерПорции - Число - количество записей, которые необходимо обработать.
//
// Возвращаемое значение:
//  Число - количество обарботанных записей очереди.
//
Функция ОбработатьПорцию(РазмерПорции = 10) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %1
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВМиллиСекундах,
		|	Объект,
		|	ОбновлениеЗависимыхПрав";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", Строка(РазмерПорции));
	Запрос.УстановитьПараметр("Приоритет", ПараметрыСеанса.ПриоритетОчередиОбновленияПрав);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Количество = ВыборкаДетальныеЗаписи.Количество();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбработатьЭлементОчереди(
			ВыборкаДетальныеЗаписи.Объект, ВыборкаДетальныеЗаписи.ОбновлениеЗависимыхПрав);
		
	КонецЦикла;
	
	Возврат Количество;

КонецФункции	

// Обрабатывает обновление прав по указанному элементу очереди и удаляет его 
// из очереди обновления
Процедура ОбработатьЭлементОчереди(Ссылка, ОбновитьЗависимые) Экспорт
	
	СтарыйПриоритет = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ТипЭлемента = ТипЗнч(Ссылка);
	
	Попытка 
		
		Если ОбновитьЗависимые Тогда
			
			Если ЭтоДескриптор(ТипЭлемента) Тогда
				ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескриптору(
					Ссылка, 
					Истина); // Немедленно
			Иначе
				ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоОбъекту(
					Ссылка, 
					Истина); // Немедленно
			КонецЕсли;
				
		Иначе 
		
			Если ЭтоДескриптор(ТипЭлемента) Тогда
				
				ДокументооборотПраваДоступа.ОбновитьПраваДоступаПоДескриптору(
					Ссылка,
					Истина,  // Немедленно
					Истина); // ОбновитьЗависимыеНемедленно
					
			ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2;
				ДокументооборотПраваДоступа.ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(
					Ссылка, 
					Истина); // Немедленно
					
			ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Пользователи") Тогда
				
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2;
				ДокументооборотПраваДоступа.ОбновитьПраваПоПользователю(
					Ссылка, 
					Истина); // Немедленно
					
			ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Корреспонденты") Тогда
				
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2;
				ДокументооборотПраваДоступа.ОбновитьПраваПоКорреспонденту(
					Ссылка, 
					Истина); // Немедленно
					
			ИначеЕсли ДокументооборотПраваДоступа.ЭтоПапка(ТипЭлемента)
				И ТипЭлемента <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
				
				// Отложенное переопределение дескрипторов содержимого папок
				ДокументооборотПраваДоступа.ПереопределитьДескрипторыЗависимыхОбъектов(Ссылка);
				
			Иначе
				
				ВызватьИсключение НСтр("Неизвестная запись очереди обновления прав.");
				
			КонецЕсли;	

		КонецЕсли;
	
	Исключение		
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права доступа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;	
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = СтарыйПриоритет;

	// Удаление элемента очереди	
	Удалить(Ссылка, ОбновитьЗависимые);
	
КонецПроцедуры	

// Очищает всю очередь - удаляет все записи
Процедура Очистить() Экспорт
	
	Набор = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

// Возвращает Истина если указанный объект (например, дескриптор)
// стоит в очереди на обработку
Функция ОбъектВОчереди(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Объект = &Объект
		|	И ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав = ЛОЖЬ";

	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	ЕстьЗаписи = Не Результат.Пустой();
	
	Возврат ЕстьЗаписи;
	
КонецФункции	

// Возвращает размер очереди
Функция РазмерОчереди(Приоритет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Приоритет = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) Как ЧислоЗаписей
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) Как ЧислоЗаписей
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
			|ГДЕ	
			|	ОчередьОбновленияПравДоступа.Приоритет = &Приоритет";
			
		Запрос.УстановитьПараметр("Приоритет", Приоритет);	
	КонецЕсли;

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ЧислоЗаписей;
	КонецЕсли;

	Возврат 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
Функция ЭтоДескриптор(ТипЭлемента)
	
	Если ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаРегистров") 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДескрипторыДоступаФайлов") Тогда
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

#КонецЕсли
