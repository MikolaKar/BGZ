////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Читает записи календаря связанные с предметом
Функция ПолучитьСвязанныеЗаписиКалендаря(Предмет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязанныеЗаписиКалендаря.ЗаписьКалендаря КАК Ссылка,
		|	СвязанныеЗаписиКалендаря.Пользователь КАК Пользователь,
		|	ЗаписиРабочегоКалендаря.Состояние
		|ИЗ
		|	РегистрСведений.СвязанныеЗаписиКалендаря КАК СвязанныеЗаписиКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ПО СвязанныеЗаписиКалендаря.ЗаписьКалендаря = ЗаписиРабочегоКалендаря.Ссылка
		|ГДЕ
		|	СвязанныеЗаписиКалендаря.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает связанную запись календаря
Процедура СоздатьСвязаннуюЗаписьКалендаря(Предмет, Пользователь, ЗаписьКалендаря) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СвязанныеЗаписиКалендаря.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Предмет = Предмет;
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.ЗаписьКалендаря <> ЗаписьКалендаря Тогда
		
		МенеджерЗаписи.Предмет = Предмет;
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.ЗаписьКалендаря = ЗаписьКалендаря;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает связанный предмет с записью календаря
Функция ПолучитьСвязанныйПредметИПользователя(ЗаписьКалендаря) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязанныеЗаписиКалендаря.Предмет,
		|	СвязанныеЗаписиКалендаря.Пользователь
		|ИЗ
		|	РегистрСведений.СвязанныеЗаписиКалендаря КАК СвязанныеЗаписиКалендаря
		|ГДЕ
		|	СвязанныеЗаписиКалендаря.ЗаписьКалендаря = &ЗаписьКалендаря");
	Запрос.УстановитьПараметр("ЗаписьКалендаря", ЗаписьКалендаря);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	СтруктураРезультата = Новый Структура("Предмет, Пользователь");
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Возвращает массив исключений занятости
Функция ПолучитьИсключенияЗанятости(ИсключенияЗанятости) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИсключенийЗанятости = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ИсключенияЗанятости) Тогда
		Возврат МассивИсключенийЗанятости;
	КонецЕсли;
	
	Если ТипЗнч(ИсключенияЗанятости) = Тип("Массив") Тогда
		МассивПредметовИсключенийЗанятости = ИсключенияЗанятости;
	Иначе
		МассивПредметовИсключенийЗанятости = Новый Массив;
		МассивПредметовИсключенийЗанятости.Добавить(ИсключенияЗанятости);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязанныеЗаписиКалендаря.ЗаписьКалендаря
		|ИЗ
		|	РегистрСведений.СвязанныеЗаписиКалендаря КАК СвязанныеЗаписиКалендаря
		|ГДЕ
		|	СвязанныеЗаписиКалендаря.Предмет В (&ИсключенияЗанятости)");
	Запрос.УстановитьПараметр("ИсключенияЗанятости", МассивПредметовИсключенийЗанятости);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат МассивИсключенийЗанятости;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивИсключенийЗанятости.Добавить(Выборка.ЗаписьКалендаря);
	КонецЦикла;
	
	Возврат МассивИсключенийЗанятости;
	
КонецФункции
