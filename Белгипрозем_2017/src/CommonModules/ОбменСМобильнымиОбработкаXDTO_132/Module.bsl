
#Область ПрограммныйИнтерфейс

// Выполняет обработку одного объекта XDTO.
// Параметры:
//	ОбъектXDTO - XDTO, данные которого необходимо обработать и поместить в базу
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	ПисьмаКОтправке - массив ссылок на письма, которые необходимо отправить после обработки всех XDTO сообщения
Процедура ОбработатьXDTO(ОбъектXDTO, МобильныйКлиент, ПисьмаКОтправке, СвязиКУстановке) Экспорт
	
	Если ОбъектXDTO.Тип().Имя = "AddNewDevice" Тогда
		ПодключитьНовоеУстройство(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "UnplugDevice" Тогда
		ОтключитьУстройство(МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ObjectDeletion" Тогда
		ОбработатьУдалениеОбъекта(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ObjectReadState" Тогда
		ОбработатьУстановкуСостоянияПрочтенности(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "OutgoingMail" Тогда
		ЗаписатьИсходящееПисьмо(ОбъектXDTO, ПисьмаКОтправке, СвязиКУстановке);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "Addressee" Тогда
		ЗаписатьАдресатаПочтовыхСообщений(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ObjectInFolder" Тогда
		ЗаписатьОбъектВПапке(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "File" Тогда
		ЗаписатьФайл(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "MailFolderSynchronizationSettings" Тогда
		ЗаписатьНастройкиСинхронизацииПапок(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "DataExpirationSettings" Тогда
		ЗаписатьНастройкиУстареванияДанных(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "MaxFileSizeToDownloadSetting" Тогда
		ЗаписатьНастройкуМаксимальныйРазмерФайла(ОбъектXDTO, МобильныйКлиент);	
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "TaskExecution" Тогда
		ЗаписатьРезультатВыполненияЗадачи(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "GetFile" Тогда
		ПередатьОдинФайл(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ExecutionProcess" Тогда
		ЗаписатьПроцессИсполнение(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "TaskRedirection" Тогда
		ЗаписатьПеренаправлениеЗадачи(ОбъектXDTO, МобильныйКлиент);	
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "CalendarEvent" Тогда
		ЗаписатьЗаписьРабочегоКалендаря(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ProblemReportFromUser" Тогда
		ОбработатьСообщениеОПроблемеОтПользователя(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "JournalRecord" Тогда
		ДобавитьЗаписьВПротокол(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "ProcessStateChange" Тогда
		ИзменитьСостояниеПроцесса(ОбъектXDTO);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "MailTextTemplate" Тогда
		ЗаписатьШаблонТекстаПисьма(ОбъектXDTO, МобильныйКлиент);
		
	ИначеЕсли ОбъектXDTO.Тип().Имя = "MailFooterSettings" Тогда
		ЗаписатьНастройкиПодписейКПисьмам(ОбъектXDTO, МобильныйКлиент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьФайл(ОбъектXDTO)
	
	Если Найти(ОбъектXDTO.name, ОбъектXDTO.extension) > 0 Тогда
		ОбъектXDTO.name = СтрЗаменить(ОбъектXDTO.name, "." + ОбъектXDTO.extension, "");
	КонецЕсли;
			
	ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(ОбъектXDTO.id);
	Попытка
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		Если ФайлОбъект <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	ВладелецФайла = Неопределено;
	Если ОбъектXDTO.ownerType = "IncomingMail" Тогда
		ВладелецФайла = Документы.ВходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.ownerId);	
	ИначеЕсли ОбъектXDTO.ownerType = "OutgoingMail" Тогда
		ВладелецФайла = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.ownerId);
	КонецЕсли;
	
	Если ВладелецФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ОбъектXDTO.fileData.Получить();
	Если Не ОбъектXDTO.headerOnly И ДанныеФайла <> Неопределено Тогда	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ОбъектXDTO.extension);
		ОбъектXDTO.fileData.Получить().Записать(ИмяВременногоФайла);
					
		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(
			ВладелецФайла,
			ИмяВременногоФайла,
			ОбъектXDTO.name,
			ОбъектXDTO.id,
			Истина);
		
		УдалитьФайлы(ИмяВременногоФайла);
	ИначеЕсли ЗначениеЗаполнено(ОбъектXDTO.baseFileId) Тогда
		ИсходныйФайл = Справочники.Файлы.ПолучитьСсылку(ОбъектXDTO.baseFileId);
		РаботаСФайламиВызовСервера.СкопироватьФайл(ИсходныйФайл, ВладелецФайла,, ОбъектXDTO.id);
	КонецЕсли;
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ФайлСсылка));
	
КонецПроцедуры

Процедура ПодключитьНовоеУстройство(ОбъектXDTO, МобильныйКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подключения нового клиента'"),
		Ложь,
		МобильныйКлиент);
	
	КодМобильногоКлиента = ОбъектXDTO.mobileClientCode;
	ИнформацияОКлиенте = ОбъектXDTO.deviceInfo;
	
	УзелОбмена = ПланыОбмена.Мобильный.ЭтотУзел().ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(УзелОбмена.Код) Тогда
		УзелОбмена.Код="001";
		УзелОбмена.Наименование=НСтр("ru='Центральный'");
		УзелОбмена.Записать();
	КонецЕсли;
	
	УзелОбмена = ПланыОбмена.Мобильный.НайтиПоКоду(КодМобильногоКлиента); 
	Если Не УзелОбмена.Пустая() Тогда
		УзелОбъект = УзелОбмена.ПолучитьОбъект();
		УзелОбъект.Код = КодМобильногоКлиента;
		УзелОбъект.Пользователь = МобильныйКлиент.Пользователь;
		УзелОбъект.ДатаСоздания = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
		УзелОбмена = УзелОбъект.Ссылка;
	КонецЕсли;	
	
	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(
		УзелОбмена, ТекущаяДатаСеанса(), ИнформацияОКлиенте, "1.3.2");

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		МобильныйКлиент.Пользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов,
		ОбъектXDTO.maxFileSizeToDownloadSetting.fileSize);

	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		МобильныйКлиент.Пользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки,
		ОбъектXDTO.dataExpirationSettings.dataExpirationPeriod);
		
	ПапкиПисемДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			МобильныйКлиент.Пользователь, 
			Истина);

	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПапкиПисемДляСинхронизации);

	УстановитьПривилегированныйРежим(Ложь);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подготовки почты для первой загрузки'"),
		Ложь,
		МобильныйКлиент);
	РезультатПочта = ОбменСМобильнымиРегистрацияИзменений.ЗарегистрироватьПочтуДляПервичнойЗагрузки(УзелОбмена);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подготовки задач для первой загрузки'"),
		Ложь,
		МобильныйКлиент);
	РезультатЗадачи = ОбменСМобильнымиРегистрацияИзменений.ЗарегистрироватьЗадачиДляПервичнойЗагрузки(УзелОбмена);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подготовки календаря для первой загрузки'"),
		Ложь,
		МобильныйКлиент);
	РезультатКалендарь = ОбменСМобильнымиРегистрацияИзменений.ЗарегистрироватьКалендарьДляПервичнойЗагрузки(УзелОбмена);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Данные для первой загрузки подготовлены'"),
		Ложь,
		МобильныйКлиент);

КонецПроцедуры

Процедура ОтключитьУстройство(МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);
	МобильныйКлиент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

КонецПроцедуры

Процедура ОбработатьУдалениеОбъекта(ОбъектXDTO, МобильныйКлиент)
		
	ОбъектСсылка = Неопределено;
	Если ОбъектXDTO.objectType = "IncomingMail" Тогда
		ОбъектСсылка = Документы.ВходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.id);
	ИначеЕсли ОбъектXDTO.objectType = "OutgoingMail" Тогда
		ОбъектСсылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.id);
	ИначеЕсли ОбъектXDTO.objectType = "CalendarEvent" Тогда
		ОбъектСсылка = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(ОбъектXDTO.id);
	ИначеЕсли ОбъектXDTO.objectType = "MailTextTemplate" Тогда
		ОбъектСсылка = Справочники.ШаблоныТекстовПисем.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Попытка
			ОбъектКУдалению = ОбъектСсылка.ПолучитьОбъект();
			ОбъектКУдалению.УстановитьПометкуУдаления(Истина);
			ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ОбъектСсылка);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСсылка));
		Исключение
			// Объекта может не быть на сервере или может быть недоступен по правам
			// Это нормальная ситуация, поэтому в протокол записывается сообщение с уровнем "Информация",
			// которое не передается клиенту обратно.
			Инфо = ИнформацияОбОшибке();
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при удалении объекта:
					|тип: %1
					|ид: %2
					|%3'"),
				ОбъектXDTO.objectType,
				Строка(ОбъектXDTO.id),
				ПодробноеПредставлениеОшибки(Инфо));
			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
				Сообщение, 
				Ложь, 
				МобильныйКлиент);	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьУстановкуСостоянияПрочтенности(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСсылка = Неопределено;
	Если ОбъектXDTO.objectType = "IncomingMail" Тогда
		ОбъектСсылка = Документы.ВходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.id);	
	ИначеЕсли ОбъектXDTO.objectType = "OutgoingMail" Тогда
		ОбъектСсылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.id);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		РаботаСПрочтениями.УстановитьСвойствоПрочтен(ОбъектСсылка, ОбъектXDTO.wasRead);
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ОбъектСсылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ОбъектСсылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИсходящееПисьмо(ОбъектXDTO, ПисьмаКОтправке, СвязиКУстановке)
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	Ссылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.id);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееПисьмо.Ссылка
		|ИЗ
		|	Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
		|ГДЕ
		|	ИсходящееПисьмо.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Письмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
		Письмо.УстановитьСсылкуНового(Ссылка);
	Иначе
		ОбъектНайденНаСервере = Истина;
		Письмо = Ссылка.ПолучитьОбъект();
		Если Письмо.ВерсияДанных <> ОбъектXDTO.dataVersion И значениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
			ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Письмо.Ссылка);
			ТекстПредупреждения = 
				"warning:" + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исходящее письмо ""%1"" не было передано, т.к. оно было изменено на сервере. Письмо на данном устройстве заменено версией письма с сервера.'"),
					ОбъектXDTO.subject);
			ВызватьИсключение (ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;

	Если Письмо.ДатаОтправки > Дата(1,1,1) Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// заполнение реквизитов письма      
	Письмо.Важность = Перечисления.ВажностьПисем[ОбъектXDTO.importance];
	Письмо.Автор = ТекущийПользователь;
	Письмо.Дата = ОбъектXDTO.creationDate;
	Письмо.ЕстьВложения = ОбъектXDTO.hasAttachment;
	Письмо.ОтправительКонтакт = ТекущийПользователь;
	Письмо.Тема = ОбъектXDTO.subject;
		
	Письмо.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(ОбъектXDTO.accountId);		
				
	Письмо.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
   	Письмо.ТекстХранилище = ОбъектXDTO.body;
	
	// заполнение получателей письма
	Письмо.ПолучателиПисьма.Очистить();
	Письмо.ПолучателиКопий.Очистить();
	Письмо.ПолучателиСкрытыхКопий.Очистить();					
	Для Каждого Получатель Из ОбъектXDTO.to Цикл
		НоваяСтрока = Письмо.ПолучателиПисьма.Добавить();
		НоваяСтрока.Адресат = Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Получатель.id);
	КонецЦикла;						

	Для Каждого Получатель Из ОбъектXDTO.cc Цикл
		НоваяСтрока = Письмо.ПолучателиКопий.Добавить();
		НоваяСтрока.Адресат = Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Получатель.id);
	КонецЦикла;

	Для Каждого Получатель Из ОбъектXDTO.bcc Цикл
		НоваяСтрока = Письмо.ПолучателиСкрытыхКопий.Добавить();
		НоваяСтрока.Адресат = Справочники.АдресатыПочтовыхСообщений.ПолучитьСсылку(Получатель.id);
	КонецЦикла;
	
	Письмо.ПолучателиПисьмаСтрокой =
		ВстроеннаяПочтаСервер.ТаблицаПолучателейВСтроку(Письмо.ПолучателиПисьма);
		
	ПисьмоОснованиеСсылка = Неопределено;
	// заполнение реквизитов для истории переписки
	Если ЗначениеЗаполнено(ОбъектXDTO.baseMailId) Тогда
		ПисьмоОснованиеСсылка = Неопределено;
		Если ОбъектXDTO.baseMailType = "IncomingMail" Тогда
			ПисьмоОснованиеСсылка = Документы.ВходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.baseMailId);
		ИначеЕсли ОбъектXDTO.baseMailType = "OutgoingMail" Тогда
			ПисьмоОснованиеСсылка = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.baseMailId);
		КонецЕсли;
		
		Если ПисьмоОснованиеСсылка <> Неопределено Тогда
			ТипОтвета = Перечисления.ТипыОтвета[ОбъектXDTO.answerType];
			Письмо.ТипОтвета = ТипОтвета;
			Письмо.ПисьмоОснование = ПисьмоОснованиеСсылка;
		КонецЕсли;	
	КонецЕсли;
	
	Письмо.Записать();
	
	// Если письмо было отправлено на мобильном клиенте, то запоминаем это.
	// Такие письма будут отправлены после полной обработки сообщения от мобильного клиента.
	Если ЗначениеЗаполнено(ОбъектXDTO.readyToBeSent) Тогда
		ПисьмоКОтправке = Новый Структура();
		ПисьмоКОтправке.Вставить("Ссылка", Письмо.Ссылка);
		ПисьмоКОтправке.Вставить("ПодготовленоКОтправке", ОбъектXDTO.readyToBeSent);
		ПисьмаКОтправке.Добавить(ПисьмоКОтправке);
	КонецЕсли;
	
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Ссылка);
	
	// установка связей для истории переписки
	Если ПисьмоОснованиеСсылка <> Неопределено Тогда
		ТипОтвета = Перечисления.ТипыОтвета[ОбъектXDTO.answerType];
		Если ТипОтвета = Перечисления.ТипыОтвета.ОтветНаПисьмо Тогда
			СвязьКУстановке = Новый Структура();
			СвязьКУстановке.Вставить("Объект", Письмо.Ссылка);
			СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
			СвязьКУстановке.Вставить("ТипСвязи", Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо);
			СвязиКУстановке.Добавить(СвязьКУстановке);
		ИначеЕсли ТипОтвета = Перечисления.ТипыОтвета.ПересылкаПисьма Тогда
			СвязьКУстановке = Новый Структура();
			СвязьКУстановке.Вставить("Объект", Письмо.Ссылка);
			СвязьКУстановке.Вставить("СвязанныйОбъект", ПисьмоОснованиеСсылка);
			СвязьКУстановке.Вставить("ТипСвязи", Справочники.ТипыСвязей.ПересланоПисьмом);
			СвязиКУстановке.Добавить(СвязьКУстановке);
		КонецЕсли;		
	КонецЕсли;
		
	Если Письмо.ПолучателиПисьма.Количество() + Письмо.ПолучателиКопий.Количество() <= 50 Тогда
		Для Каждого Строка Из Письмо.ПолучателиПисьма Цикл
			Если ЗначениеЗаполнено(Строка.Адресат) Тогда
				МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Адресат = Строка.Адресат;
				МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
				МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из Письмо.ПолучателиКопий Цикл
			Если ЗначениеЗаполнено(Строка.Адресат) Тогда
				МенеджерЗаписи = РегистрыСведений.ИспользованиеАдресатовПользователями.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Адресат = Строка.Адресат;
				МенеджерЗаписи.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
				МенеджерЗаписи.ДатаПоследнегоИспользования = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Письмо.Ссылка, Истина);
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Письмо.Ссылка);
	КонецЕсли;
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Письмо.Ссылка));
	
КонецПроцедуры

Процедура ЗаписатьАдресатаПочтовыхСообщений(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Адресат = ВстроеннаяПочтаСервер.ПолучитьПочтовогоАдресата(
		ОбъектXDTO.address, 
		ОбъектXDTO.presentation,
		ОбъектXDTO.id);	
	
КонецПроцедуры

Процедура ЗаписатьОбъектВПапке(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбъектXDTO.folderType = "MailFolder" Тогда
		Папка = Справочники.ПапкиПисем.ПолучитьСсылку(ОбъектXDTO.folderId);
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В объекте MailFolder папка не может иметь тип ""%1""'"),
			ОбъектXDTO.folderType);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ОбъектXDTO.objectType = "IncomingMail" Тогда
		Объект = Документы.ВходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.objectId);
	ИначеЕсли ОбъектXDTO.objectType = "OutgoingMail" Тогда
		Объект = Документы.ИсходящееПисьмо.ПолучитьСсылку(ОбъектXDTO.objectId);
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В объекте MailFolder объект не может иметь тип ""%1""'"),
			ОбъектXDTO.objectType);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	ВстроеннаяПочтаСервер.ПоместитьПисьмоВПапку(Объект, Папка, СообщениеОбОшибке);
	ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Объект.Ссылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Объект.Ссылка));
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройкиУстареванияДанных(ОбъектXDTO, МобильныйКлиент)
		
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		МобильныйКлиент.Пользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных,
		ОбъектXDTO.dataExpirationPeriod);
		
КонецПроцедуры

Процедура ЗаписатьРезультатВыполненияЗадачи(ОбъектXDTO, МобильныйКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ОбъектXDTO.id);
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	Если ЗадачаОбъект = Неопределено Тогда
		ТекстПредупреждения = 
			"warning:" + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Результат выполнения одной из задач не был передан, т.к. задача была удалена на сервере.'"),
				ЗадачаОбъект.Наименование);
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибкуПоОбъекту(
			НСтр("ru = 'Ошибка при выполнении задачи. Объект не найден на сервере.'"),
			"Task",
			ОбъектXDTO.id,
			Ложь,
			МобильныйКлиент);
			
		ВызватьИсключение (ТекстПредупреждения);
	ИНачеЕсли ЗадачаОбъект.ВерсияДанных <> ОбъектXDTO.dataVersion И ЗначениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаОбъект.Ссылка);
		ТекстПредупреждения = 
			"warning:" + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Результат выполнения задачи ""%1"" не был передан, т.к. задача ранее уже была изменена на сервере.'"),
				ЗадачаОбъект.Наименование);
		ВызватьИсключение (ТекстПредупреждения);
	КонецЕсли;
	ЗадачаОбъект.РезультатВыполнения = ОбъектXDTO.comment;
	
	Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Если ОбъектXDTO.result = 1 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
		ИначеЕсли ОбъектXDTO.result = 2 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
		ИначеЕсли ОбъектXDTO.result = 3 Тогда
			РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
		КонецЕсли;
		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		СогласованиеОбъект.ДополнительныеСвойства.Вставить("РезультатСогласования", РезультатСогласования);		
		СогласованиеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		СогласованиеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(СогласованиеОбъект.Ссылка);
		СогласованиеОбъект.ПовторитьСогласование = ОбъектXDTO.result = "ExecutedPositive";
		НайденнаяСтрока = СогласованиеОбъект.РезультатыОзнакомлений.Найти(Задача, "ЗадачаИсполнителя");
		НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ОбъектXDTO.result = "ExecutedPositive";
		СогласованиеОбъект.Записать();		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Если ОбъектXDTO.result = 1 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
		ИначеЕсли ОбъектXDTO.result = 2 Тогда
			РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
		КонецЕсли;
		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("РезультатУтверждения", РезультатУтверждения);
		УтверждениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		УтверждениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		УтверждениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача",Задача);
		УтверждениеОбъект.ДополнительныеСвойства.Вставить(
			"ПовторитьУтверждение", ОбъектXDTO.result = "ReturnedBackToConfirmer");
		УтверждениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();

		// сформируем дополнительные свойства для передачи данных объекту
		РеквизитыЗаполнения = "ВариантРассмотрения";
		ДанныеЗаполнения = Новый Структура();
		Если ОбъектXDTO.result = 1 Тогда
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		Иначе
			ДанныеЗаполнения.Вставить("ВариантРассмотрения", Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение);
			РассмотрениеОбъект.ВедущаяЗадача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("РезультатВыполнения", ОбъектXDTO.comment);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		РассмотрениеОбъект.Записать();

		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		РассмотрениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции", Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);	
		РассмотрениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();

	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда	
		ВозвратНаДоработку = ОбъектXDTO.result = 2;
		
		Если ВозвратНаДоработку Тогда
			Исполнители = Новый ТаблицаЗначений;
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ИсполнениеРезультатыПроверки.НомерИтерации КАК НомерИтерации,
				|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
				|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку,
				|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК КомментарийПроверяющего,
				|	ВЫБОР
				|		КОГДА ИсполнениеРезультатыПроверки.ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ОтвИсполнение
				|ИЗ
				|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
				|ГДЕ
				|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего";
			
			Запрос.УстановитьПараметр("ЗадачаПроверяющего", Задача);
			Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
			Исполнители = Запрос.Выполнить().Выгрузить();
			
			ИсполнениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
			Для каждого Исполнитель Из Исполнители Цикл
				Исполнитель.ОтправленоНаДоработку = Истина;
				Исполнитель.КомментарийПроверяющего = ОбъектXDTO.comment;
			КонецЦикла;
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
			ИсполнениеОбъект.ДополнительныеСвойства.Вставить("Исполнители", Исполнители);
			ИсполнениеОбъект.Записать();
		КонецЕсли;
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
		ВозвратНаДоработку = ОбъектXDTO.result = 2;
		
		ПоручениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПоручениеОбъект.ДополнительныеСвойства.Вставить("ОтправленоНаДоработку", ВозвратНаДоработку);
		ПоручениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли Задачаобъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Если ОбъектXDTO.result = 1 Тогда
			РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано;
		Иначе
			РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
		КонецЕсли;
		
		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("РезультатРегистрации", РезультатРегистрации);
		РегистрацияОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		ПовторитьРегистрацию = Истина;
		Если ОбъектXDTO.result = 1 Тогда
			ПовторитьРегистрацию = Ложь;
		КонецЕсли;
		
		РегистрацияОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		РегистрацияОбъект.ДополнительныеСвойства.Вставить("ПовторитьРегистрацию", ПовторитьРегистрацию);
		РегистрацияОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		
		РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято;
		Если ОбъектXDTO.result = 1 Тогда
			РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято;
		КонецЕсли;
		
		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("РезультатПриглашения", РезультатПриглашения);
		ПриглашениеОбъект.Записать();
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		Если ОбъектXDTO.result = 1 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПодтвердитьПриглашение", Истина);			
			
		ИначеЕсли ОбъектXDTO.result = 2 Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПовторитьПриглашение", Истина);
			
		Иначе
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ОтложитьПриглашение", Истина);
			
		КонецЕсли;
		ПриглашениеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда	
		ПриглашениеОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
		ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		ПриглашениеОбъект.Записать();
		ЗадачаОбъект.ВыполнитьЗадачу();
		
	КонецЕсли;
	
	Если ЗадачаОбъект.Выполнена Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачаОбъект.Ссылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаОбъект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройкуМаксимальныйРазмерФайла(ОбъектXDTO, МобильныйКлиент)
	
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		МобильныйКлиент.Пользователь,
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов,
		ОбъектXDTO.fileSize);
	
КонецПроцедуры

Процедура ЗаписатьНастройкиСинхронизацииПапок(ОбъектXDTO, МобильныйКлиент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПапкиДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			ПользователиКлиентСервер.ТекущийПользователь());
		
	ПереданныеПапки = Новый Массив;
	Для Каждого ИдПапки Из ОбъектXDTO.folderIds Цикл
		ПапкаСсылка = Справочники.ПапкиПисем.ПолучитьСсылку(ИдПапки);
		ПереданныеПапки.Добавить(ПапкаСсылка);
	КонецЦикла;
	
	// Поиск удаленных папок
	УдаленныеПапки = Новый Массив;
	Для Каждого СтараяПапка Из ПапкиДляСинхронизации Цикл
		Если ПереданныеПапки.Найти(СтараяПапка) = Неопределено Тогда
			УдаленныеПапки.Добавить(СтараяПапка);	
		КонецЕсли;
	КонецЦикла;
	
	// Поиск добавленных папок
	ДобавленныеПапки = Новый Массив;
	Для Каждого НоваяПапка Из ПереданныеПапки Цикл
		Если ПапкиДляСинхронизации.Найти(НоваяПапка) = Неопределено Тогда
			ДобавленныеПапки.Добавить(НоваяПапка);
		КонецЕсли;	
	КонецЦикла;
		
	// Сохранение принятого от клиента списка синхронизируемых папок
	РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ЗаписатьПапки(ПереданныеПапки);
	
	// Если список синхронизируемых папок изменился, то отметим этот факт, чтобы изменения передались на другие
	//	мобильные клиенты текущего пользователя
	Если УдаленныеПапки.Количество() > 0 Или ДобавленныеПапки.Количество() > 0 Тогда
		РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
			МобильныйКлиент.Пользователь,
			Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПеренаправлениеЗадачи(ОбъектXDTO, МобильныйКлиент)
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ОбъектXDTO.taskId);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.ВерсияДанных
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка = Задачи.Ссылка
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка
		|	И Задачи.ВерсияДанных = &ВерсияДанных";
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Запрос.УстановитьПараметр("ВерсияДанных", ОбъектXDTO.dataVersion);
	Запрос.УстановитьПараметр("Исполнитель", МобильныйКлиент.Пользователь); 

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ЗадачаСсылка.ВерсияДанных <> ОбъектXDTO.dataVersion Тогда
			ТекстПредупреждения = 
				"warning:" + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, т.к. ранее задача была изменена на сервере.'"),
					ЗадачаСсылка.Наименование);
		ИначеЕсли ЗадачаСсылка.Выполнена Тогда
			ТекстПредупреждения = 
				"warning:" + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, т.к. ранее задача была выполнена.'"),
					ЗадачаСсылка.Наименование);
		Иначе
			ТекстПредупреждения = 
				"warning:" + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенаправление задачи ""%1"" не было передано, т.к. ранее задача уже была перенаправлена.'"),
					ЗадачаСсылка.Наименование);	
		КонецЕсли;			
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);		
		ВызватьИсключение (ТекстПредупреждения);
	КонецЕсли;
	
	Если ОбъектXDTO.newPerformerType = "User" Тогда
		НовыйИсполнитель = Справочники.Пользователи.ПолучитьСсылку(ОбъектXDTO.newPerformerId);
	ИначеЕсли ОбъектXDTO.newPerformerType = "Role" Тогда
		НовыйИсполнитель = Справочники.РолиИсполнителей.ПолучитьСсылку(ОбъектXDTO.newPerformerId);
	Иначе
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
		Возврат;
	КонецЕсли;

	Попытка
		ПроверитьВозможностьПереадресацииЗадачи(ЗадачаСсылка, НовыйИсполнитель);		
	Исключение
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
		ВызватьИсключение;
	КонецПопытки;

	ПереадресацияПользователю = ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.Пользователи");

	СтруктураПеренаправления = Новый Структура;
	СтруктураПеренаправления.Вставить("Исполнитель", ?(ПереадресацияПользователю, НовыйИсполнитель, Неопределено));
	СтруктураПеренаправления.Вставить("РольИсполнителя", ?(ПереадресацияПользователю, НовыйИсполнитель, Неопределено));
	СтруктураПеренаправления.Вставить("ОсновнойОбъектАдресации", Неопределено);
	СтруктураПеренаправления.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	СтруктураПеренаправления.Вставить("Комментарий", ОбъектXDTO.comment);
	
	Попытка
		БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(ЗадачаСсылка, СтруктураПеренаправления, Новый УникальныйИдентификатор());
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'warning:Не удалось перенаправить задачу ""%1"" на ""%2"". %3. Задача возвращена.'"),
			Строка(ЗадачаСсылка),
			Строка(НовыйИсполнитель),
			Инфо.Описание);
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ЗадачаСсылка);
		ВызватьИсключение(ТекстСообщения);
	КонецПопытки;
	
	ПротоколированиеРаботыПользователей.ЗаписатьПеренаправлениеЗадачи(ЗадачаСсылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ЗадачаСсылка));
	
КонецПроцедуры

Функция ПроверитьВозможностьПереадресацииЗадачи(Задача, НовыйИсполнитель)
	
	Если ТипЗнч(НовыйИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
		И Не БизнесПроцессыИЗадачиСервер.ЕстьИсполнителиРоли(НовыйИсполнитель, Неопределено, Неопределено) Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'error:Задача ""%1"" не перенаправлена. На указанную роль ""%2"" не назначено ни одного исполнителя.'"),
			Строка(Задача),
			Строка(НовыйИсполнитель));
		ВызватьИсключение (ТекстИсключения);
		
	КонецЕсли;
	
	// Проверка прав доступа участников процесса на предмет
	Если Задача.Предметы.Количество() > 0 Тогда
		
		СформированаРабочаяГруппа = Ложь;
		
		Для Каждого Элемент Из Задача.Предметы Цикл
			
			Предмет = Элемент.Предмет;
			
			// Формирование рабочей группы перед проверкой прав
			Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
				
				РабочаяГруппаСлепок = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Предмет);
				РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Предмет);
				Строка = РабочаяГруппа.Добавить();
				Строка.Участник = НовыйИсполнитель;
				Строка.ОсновнойОбъектАдресации = Неопределено;
				Строка.ДополнительныйОбъектАдресации = Неопределено;
				
				// Сохранение обновленной рабочей группы
				СформированаРабочаяГруппа = Истина; 
				РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(Предмет, РабочаяГруппа, Истина);
				
			КонецЕсли;	
			
			// Проверка прав на предмет
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") 
			   И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет,"ВладелецФайла") = Задача.БизнесПроцесс Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не БизнесПроцессыИЗадачиПереопределяемый.ЕстьПравоДоступаУчастникаБизнесПроцесса(
				Неопределено,
				Предмет,
				"Чтение",
				НовыйИсполнитель,
				Неопределено,
				Неопределено,
				"Исполнитель") Тогда

				Сообщения = ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					Если СформированаРабочаяГруппа Тогда
						СформированаРабочаяГруппа = Ложь;
						ОтменитьТранзакцию();
					КонецЕсли;	
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'warning:Задача ""%1"" не перенаправлена. %2. Задача возвращена.'"),
						Строка(Задача),
						Сообщение.Текст);
					
					ВызватьИсключение(ТекстСообщения);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		// Отмена транзакции, в рамках которой была создана рабочая группа для 
		// проверки прав
		Если СформированаРабочаяГруппа Тогда
			РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(Предмет, РабочаяГруппаСлепок, Ложь);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецФункции

Процедура ПередатьОдинФайл(ОбъектXDTO, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	Сообщение          = ОбменСМобильными.СоздатьНовоеСообщение(МобильныйКлиент);
	ФайлСсылка         = Справочники.Файлы.ПолучитьСсылку(ОбъектXDTO.id);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ПользовательУзла   = МобильныйКлиент.Пользователь;
	ПараметрыСинхронизации  = ОбменСМобильными.ПолучитьПараметрыСинхронизации(ПользовательУзла);

	Попытка

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();

		ВозвращаемыеОбъектыXDTO = Новый Соответствие;
		ОбменСМобильнымиФормированиеXDTO_132.ПолучитьXDTOИзОбъекта(
					МобильныйКлиент, 
					ФайлСсылка, 
					ВозвращаемыеОбъектыXDTO,
					ПараметрыСинхронизации,,,
					Истина);

		ОбменСМобильными.ВыгрузитьМассивXDTOВСообщение(
			ИмяВременногоФайла,
			ЗаписьXML,
			ВозвращаемыеОбъектыXDTO,
			Сообщение,
			МобильныйКлиент);

		ЗаписьXML.Закрыть();

		УдалитьФайлы(ИмяВременногоФайла);

		ВызватьИсключение "СтопДальнейшейОбработки";

	Исключение

		Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда
			ЗаписьXML.Закрыть();
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

Процедура ЗаписатьПроцессИсполнение(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	// Получение ссылки на письмо или создание нового документа
	ОбъектНайденНаСервере = Ложь;
	Ссылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(ОбъектXDTO.id);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Процесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		Процесс.УстановитьСсылкуНового(Ссылка);
	Иначе
		ОбъектНайденНаСервере = Истина;
		Процесс = Ссылка.ПолучитьОбъект();
		Если Процесс.ВерсияДанных <> ОбъектXDTO.dataVersion И ЗначениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
			ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);			
			ТекстПредупреждения = 
				"warning:" + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. Настройка процесса на данном устройстве заменена версией с сервера.'"),
					ОбъектXDTO.name);
			ВызватьИсключение (ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
		
	СсылкаНаГлавнуюЗадачу = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ОбъектXDTO.mainTaskId);
	ГлавнаяЗадачаОбъект = СсылкаНаГлавнуюЗадачу.ПолучитьОбъект();
	Если ГлавнаяЗадачаОбъект <> Неопределено Тогда
		Процесс.ГлавнаяЗадача = СсылкаНаГлавнуюЗадачу;
		Для Каждого ПредметЗадачи Из ГлавнаяЗадачаОбъект.Предметы Цикл
			НоваяСтрока = Процесс.Предметы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПредметЗадачи);
		КонецЦикла;
		ТочкиМаршрута = Новый Массив;
		ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
		ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
		ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить);
		ТочкиМаршрута.Добавить(БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
		Для Каждого ПредметЗадачи Из Процесс.Предметы Цикл
			Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
				НоваяСтрока = Процесс.ПредметыЗадач.Добавить();
				НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
				НоваяСтрока.ИмяПредмета = ПредметЗадачи.ИмяПредмета;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Процесс.Наименование = ОбъектXDTO.name;
	Процесс.Описание = ОбъектXDTO.description;
	Процесс.Автор = ТекущийПользователь;
	Процесс.Проверяющий = ТекущийПользователь;
	
	Процесс.СрокИсполнения = ОбъектXDTO.deadline;
	Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	Если ОбъектXDTO.importance = "low" Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая;		
	ИначеЕсли ОбъектXDTO.importance = "high" Тогда
		Процесс.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;	
	КонецЕсли;
	
	Процесс.Дата = ОбъектXDTO.creationDate;
	Если Процесс.Дата = Дата(1,1,1) Тогда
		Процесс.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	СтарыеУчастникиПроцесса = Процесс.Исполнители;
	Процесс.Исполнители.Очистить();
	Для Каждого XDTOИсполнитель Из ОбъектXDTO.performers Цикл
		Если XDTOИсполнитель.Тип().Имя = "User" Тогда
			Исполнитель = Справочники.Пользователи.ПолучитьСсылку(XDTOИсполнитель.id);
		ИначеЕсли XDTOИсполнитель.Тип().Имя = "Role" Тогда
			Исполнитель = Справочники.РолиИсполнителей.ПолучитьСсылку(XDTOИсполнитель.id);
		КонецЕсли;
		
		Если Исполнитель <> Неопределено Тогда
			НоваяСтрока = Процесс.Исполнители.Добавить();
			НоваяСтрока.Исполнитель = Исполнитель;
		КонецЕсли;
	КонецЦикла;
	
	Процесс.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	
	Если Процесс.Стартован И Не Процесс.Ссылка.Пустая() Тогда
		Процесс.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Процесс.Ссылка);
	КонецЕсли;
	
	Процесс.Записать();
	Если Не ОбъектНайденНаСервере Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьСоздание(Процесс.Ссылка, Истина);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));
	Иначе
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(Процесс.Ссылка);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));
	КонецЕсли;
	
	Если ОбъектXDTO.startDate > Дата(1,1,1) И Не Процесс.Стартован Тогда
		Процесс.Старт();
		ПараметрыЗаписи = Новый Структура("Старт", Истина);
		ПротоколированиеРаботыПользователей.ЗаписатьСтартБизнесПроцесса(Процесс.Ссылка, ПараметрыЗаписи);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Процесс.Ссылка));
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьЗаписьРабочегоКалендаря(ОбъектXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ссылки на запись календаря или создание новой
	Ссылка = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(ОбъектXDTO.id);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Заполнить(Неопределено);
	Иначе
		Если Объект.ВерсияДанных <> ОбъектXDTO.dataVersion И значениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
			ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Объект.Ссылка);
			ТекстПредупреждения = 
				"warning:" +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запись календаря ""%1"" не была передана, т.к. она была изменена на сервере. Запись календаря на данном устройстве заменена версией записи с сервера.'"),
					ОбъектXDTO.description);
			ВызватьИсключение (ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Описание      = ОбъектXDTO.description;
	Объект.ВесьДень      = ОбъектXDTO.daylong;
	Объект.ДатаНачала    = ОбъектXDTO.startDate;
	Объект.ДатаОкончания = ОбъектXDTO.endDate;
	Объект.Состояние     = ОбменСМобильными.ПолучитьСостояниеЗаписиПоПредставлению(ОбъектXDTO.status);
	Объект.ТипЗаписиКалендаря = ОбменСМобильными.ПолучитьСостояниеТипаЗаписиКалендаряПоПредставлению(ОбъектXDTO.type);

	Если ОбъектXDTO.type = "recurrence" Тогда
		
		Объект.ДатаНачалаПовторения       = ОбъектXDTO.recurrenceStartDate;
		Объект.ДатаОкончанияПовторения    = ОбъектXDTO.recurrenceEndDate;
		Объект.ИнтервалПовторения         = ОбъектXDTO.interval;
		Объект.ПовторениеПоДнямМесяца     = ОбъектXDTO.byMonthDay;
		Объект.ПовторениеПоМесяцам        = ОбъектXDTO.byMonth;
		Объект.КоличествоПовторов         = ОбъектXDTO.count;
		Объект.ЧастотаПовторения          = ОбменСМобильными.ПолучитьЧастотуПоПредставлению(ОбъектXDTO.frequency);
		Объект.ПравилоОкончанияПовторения = ОбменСМобильными.ПолучитьПравилоОкончанияПовторенияПоПредставлению(ОбъектXDTO.endRule);

		Объект.ПовторениеПоДням.Очистить();
		Для Каждого XDTOДеньПовторения Из ОбъектXDTO.byDay Цикл
			НоваяСтрока = Объект.ПовторениеПоДням.Добавить();
			НоваяСтрока.ДеньНедели     = XDTOДеньПовторения.day;
			НоваяСтрока.НомерВхождения = XDTOДеньПовторения.occurrence;
		КонецЦикла;

		Объект.ИсключенияПовторения.Очистить();
		Для Каждого XDTOИсключениеПовторения Из ОбъектXDTO.recurrenceException Цикл
			НоваяСтрока = Объект.ИсключенияПовторения.Добавить();
			НоваяСтрока.ДатаИсключения   = XDTOИсключениеПовторения.date;
			НоваяСтрока.ЗаписьИсключения = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСсылку(XDTOИсключениеПовторения.id);
		КонецЦикла;

	КонецЕсли;

	Объект.Записать();

	Цвет = ОбменСМобильными.ПолучитьЦветПоПредставлению(ОбъектXDTO.color);

	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Цвет, Объект.Ссылка);
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Объект.Ссылка));

КонецПроцедуры

Процедура ОбработатьСообщениеОПроблемеОтПользователя(ОбъектXDTO, МобильныйКлиент)
	
	// Добавление клиентских записей в протокол работы
	Для Каждого ЗаписьПротокола Из ОбъектXDTO.journalRecords Цикл
		ДобавитьЗаписьВПротокол(ЗаписьПротокола, МобильныйКлиент);
	КонецЦикла;
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьСообщениеОПроблемеОтПользователя(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сообщение о проблеме: %1'"),
			ОбъектXDTO.description),
			Ложь,
			МобильныйКлиент);
	
	// Отправка уведомления ответственным за разбор сообщений	
	
	УстановитьПривилегированныйРежим(Истина);
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Ошибка мобильного клиента (от %1):
			|%2'"),
		Строка(МобильныйКлиент.Пользователь),
		ОбъектXDTO.description);
	Описание = Описание + Символы.ПС + Символы.ПС;
	Описание = 
		Описание + 
		НСтр("ru = 'Информация:
			|Протокол работы мобильного клиента этого пользователя можно посмотреть в разделе ""Настройка и администрирование""'");
			
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолучателиОповещенийОПроблемахРаботыПрограммы.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы КАК ПолучателиОповещенийОПроблемахРаботыПрограммы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь";
	
	МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	
	БизнесПроцесс.Автор = МобильныйКлиент.Пользователь;
	Если Не ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
		БизнесПроцесс.Автор = МассивПользователей[0];
	КонецЕсли;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		Строка = БизнесПроцесс.Исполнители.Добавить();
		Строка.Исполнитель = Пользователь;
	КонецЦикла;
	
	БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Ошибка мобильного клиента (от %1)'"),
		Строка(МобильныйКлиент.Пользователь));
	
	БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	БизнесПроцесс.Описание = Описание;	
	БизнесПроцесс.Записать();
	БизнесПроцесс.Старт();	
	
КонецПроцедуры

Процедура ДобавитьЗаписьВПротокол(ОбъектXDTO, МобильныйКлиент)
		
	ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Информация;
	Если ОбъектXDTO.recordType = "Warning" Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Предупреждение;
	ИначеЕсли ОбъектXDTO.recordType = "Error" Тогда
		ТипСобытия = Перечисления.ТипыСобытийПротоколаРаботыСМобильнымКлиентом.Ошибка;
	КонецЕсли;
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьЗаписьВПротоколСКлиента(
		МобильныйКлиент,
		Число(ОбъектXDTO.recordMSecs),
		ОбъектXDTO.recordDate,
		ОбъектXDTO.objectId,
		ОбъектXDTO.description,
		ОбъектXDTO.objectType,
		ТипСобытия);	
	
	КонецПроцедуры

Процедура ИзменитьСостояниеПроцесса(ОбъектXDTO)
	
	Если ОбъектXDTO.type = "ExecutionProcess" Тогда
		ПроцессСсылка = БизнесПроцессы.Исполнение.ПолучитьСсылку(ОбъектXDTO.processId);
	Иначе
		Возврат;
	КонецЕсли;
	
	ПроцессОбъект = ПроцессСсылка.ПолучитьОбъект();
	Если ПроцессОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ПроцессОбъект.ВерсияДанных <> ОбъектXDTO.dataVersion И ЗначениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);
		ТекстПредупреждения = 
			"warning:" + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было изменено на сервере. Настройка процесса на данном устройстве заменена версией с сервера.'"),
				ПроцессОбъект.Наименование);
		ВызватьИсключение (ТекстПредупреждения);
	КонецЕсли;
	
	Попытка
		ПроцессОбъект.Заблокировать();
	Исключение
		ТекстПредупреждения = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исполнение ""%1"" не было передано, т.к. оно было заблокировано другим пользователем на сервере.'"),
				ПроцессОбъект.Наименование);
		ВызватьИсключение (ТекстПредупреждения);
	КонецПопытки;
	
	Если ОбъектXDTO.newState = "Active" И ПроцессОбъект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ПроцессОбъект.Записать();	
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);
	КонецЕсли;
	
	Если ОбъектXDTO.newState = "Stopped" И ПроцессОбъект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
		ПроцессОбъект.Записать();
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);
	КонецЕсли;
	
	Если ОбъектXDTO.newState = "Terminated" И ПроцессОбъект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		ПротоколированиеРаботыПользователей.ЗаписатьПрерываниеБизнесПроцесса(ПроцессОбъект.Ссылка);
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
		ПроцессОбъект.ПричинаПрерывания = ОбъектXDTO.comment;
		ПроцессОбъект.Записать();
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ПроцессОбъект.Ссылка);
	КонецЕсли;
	ПроцессОбъект.Разблокировать();
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПроцессОбъект.Ссылка));
	
КонецПроцедуры	

Процедура ЗаписатьШаблонТекстаПисьма(ОбъектXDTO, МобильныйКлиент)
	
	ШаблонСсылка = Справочники.ШаблоныТекстовПисем.ПолучитьСсылку(ОбъектXDTO.id);	
	ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();
	Если ШаблонОбъект = Неопределено Тогда
		ШаблонОбъект = Справочники.ШаблоныТекстовПисем.СоздатьЭлемент();
		ШаблонОбъект.УстановитьСсылкуНового(ШаблонСсылка);
	КонецЕсли;
	
	Если ШаблонОбъект.ВерсияДанных <> ОбъектXDTO.dataVersion И ЗначениеЗаполнено(ОбъектXDTO.dataVersion) Тогда
		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(ШаблонОбъект.Ссылка);
		ТекстПредупреждения = 
			"warning:" + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Шаблон ""%1"" не был передан, т.к. он был изменен на сервере. Шаблон на данном устройстве заменен версией с сервера.'"),
				ШаблонОбъект.Наименование);
		ВызватьИсключение (ТекстПредупреждения);
	КонецЕсли;
	
	ШаблонОбъект.Наименование = ОбъектXDTO.name;
	ШаблонОбъект.Шаблон = ОбъектXDTO.text;
	ШаблонОбъект.Владелец = МобильныйКлиент.Пользователь;
	ШаблонОбъект.Записать();
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ШаблонОбъект.Ссылка));
	
КонецПроцедуры

Процедура ЗаписатьНастройкиПодписейКПисьмам(ОбъектXDTO, МобильныйКлиент)
	
	Пользователь = МобильныйКлиент.Пользователь;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		Пользователь.ИдентификаторПользователяИБ);
		
	Если ПользовательИБ = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОбъектXDTO.newMailFooterId <> УникальныйИдентификаторПустой() Тогда
		ПодписьНовыхПисем = Справочники.ШаблоныТекстовПисем.ПолучитьСсылку(
			ОбъектXDTO.newMailFooterId);
	Иначе			
		ПодписьНовыхПисем = Справочники.ШаблоныТекстовПисем.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВстроеннаяПочта",
		"ПодписьДляНовыхПисем",
		ПодписьНовыхПисем,
		, 
		ПользовательИБ.Имя);
	
	Если ОбъектXDTO.responseMailFooterId <> УникальныйИдентификаторПустой() Тогда
		ПодписьОтветныхПисем = Справочники.ШаблоныТекстовПисем.ПолучитьСсылку(
			ОбъектXDTO.responseMailFooterId);	
	Иначе			
		ПодписьОтветныхПисем = Справочники.ШаблоныТекстовПисем.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВстроеннаяПочта",
		"ПодписьПриОтветеИПересылке",
		ПодписьОтветныхПисем,
		, 
		ПользовательИБ.Имя);
		
КонецПроцедуры

#КонецОбласти
