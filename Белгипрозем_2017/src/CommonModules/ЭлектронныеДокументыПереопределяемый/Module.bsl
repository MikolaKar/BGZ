////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
		
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Получатели[0].Получатель;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Отправитель;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	// Электронные документы
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Корреспонденты");
	СоответствиеСправочников.Вставить("Банки",       "КлассификаторБанковРФ");
	// Конец электронные документы
	
	СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	
КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соответствия - имя переменной, используемой в коде библиотеки;
//  Значение соответствия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных", "ИсходящиеДокументы");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных", "ВходящиеДокументы");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаРегистрации");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "ДатаРегистрации");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета", "НомерСчета");
	
КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	

КонецПроцедуры

// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Возврат Результат;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ТЧ_Соглашения.ВерсияФормата,
	|	ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
	|		NULL КАК ВерсияРегламентаЭДО,
	|		NULL КАК ВерсияФормата,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|	ГДЕ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД,
	|		NULL,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|		И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|				ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭД.Ссылка,
	|		&ВидЭД,
	|		ИСТИНА,
	|		NULL,
	|		&НаправлениеЭД,
	|		СоглашенияОбИспользованииЭД.Организация,
	|		СоглашенияОбИспользованииЭД.Контрагент,
	|		СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭД.ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭД.СпособОбменаЭД,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|	ГДЕ
	|		СоглашенияОбИспользованииЭД.Ссылка = &СоглашениеЭД
	|		И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И (&ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
	|				ИЛИ &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Покупатель)
	|				ИЛИ &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	|				ИЛИ &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	|				ИЛИ &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
	|				ИЛИ &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
	|		И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашениеЧерезОЭДО.Ссылка,
	|		&ВидЭД,
	|		ИСТИНА,
	|		NULL,
	|		&НаправлениеЭД,
	|		СоглашениеЧерезОЭДО.Организация,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|		СоглашениеЧерезОЭДО.ИдентификаторОрганизации,
	|		СоглашениеЧерезОЭДО.СпособОбменаЭД,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|			ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|	ГДЕ
	|		СоглашениеЧерезОЭДО.Ссылка = &СоглашениеЭД
	|		И НЕ СоглашениеЧерезОЭДО.ПометкаУдаления
	|		И СоглашениеЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|		И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникСертификатов.Ссылка КАК Ссылка,
	|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	|	СправочникСертификатов.Ссылка.Организация КАК Организация,
	|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
	|	ВЫБОР
	|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
	|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыЭП.ВидыДокументов КАК СправочникСертификатов
	|ГДЕ
	|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
	|	И НЕ СправочникСертификатов.Ссылка.Отозван
	|	И СправочникСертификатов.ИспользоватьДляПодписи
	|	И СправочникСертификатов.ВидДокумента = &ВидЭД
	|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
	|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ВТ_ТЧ_Соглашения.ВерсияФормата,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ВТ_ТЧ_Соглашения.ПрограммаБанка
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток,
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ТЧ_Соглашения.Приоритет,
	|	ТЧ_Соглашения.ВерсияФормата,
	|	ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ТЧ_Соглашения.Ссылка.ПрограммаБанка КАК ПрограммаБанка
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
	|		NULL КАК ВерсияРегламентаЭДО,
	|		NULL КАК ВерсияФормата,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|		0 КАК Приоритет
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|	ГДЕ
	|		НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И ВЫБОР
	|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	|							И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	|						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|						И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
	|				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД,
	|		NULL,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета,
	|		0
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И ВЫБОР
	|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|				ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашениеЧерезОЭДО.Ссылка,
	|		&ВидЭД,
	|		ИСТИНА,
	|		NULL,
	|		&НаправлениеЭД,
	|		СоглашениеЧерезОЭДО.Организация,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|		СоглашениеЧерезОЭДО.ИдентификаторОрганизации,
	|		СоглашениеЧерезОЭДО.СпособОбменаЭД,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
	|		NULL,
	|		NULL,
	|		1
	|	ИЗ
	|		РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|			ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|	ГДЕ
	|		НЕ СоглашениеЧерезОЭДО.ПометкаУдаления
	|		И СоглашениеЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|		И СоглашениеЧерезОЭДО.Организация = &Организация
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|		И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникСертификатов.Ссылка КАК Ссылка,
	|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	|	СправочникСертификатов.Ссылка.Организация КАК Организация,
	|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
	|	ВЫБОР
	|		КОГДА СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату
	|			ТОГДА СправочникСертификатов.Ссылка.ПарольПользователя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыЭП.ВидыДокументов КАК СправочникСертификатов
	|ГДЕ
	|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
	|	И (СправочникСертификатов.Ссылка.Организация = &Организация
	|			ИЛИ ВЫБОР
	|				КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|					ТОГДА СправочникСертификатов.Ссылка.Организация = &Контрагент
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|	И НЕ СправочникСертификатов.Ссылка.Отозван
	|	И ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СправочникСертификатов.ВидДокумента = &ВидЭД
	|		КОНЕЦ
	|	И СправочникСертификатов.ИспользоватьДляПодписи
	|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
	|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
	|	ВТ_ТЧ_Соглашения.ВерсияФормата,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
	|	ВТ_ТЧ_Соглашения.ПрограммаБанка
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
	|					И ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка КАК Соглашение,
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  СтруктураКлючевыхРеквизитов - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Справочник.ИсходящиеДокументы" Тогда
		СтрокаРеквизитовОбъекта = ("Заголовок, Содержание, Организация");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом данных ФНС

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТОРГ12ПокупательФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
КонецПроцедуры

// Устаревшие: Работа со структурой данных ФНС

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТорг12ПродавецФНС.
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТОРГ12ПокупательФНС.
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ИсполнительФНС.
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ЗаказчикФНС.
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшие: Работа со структурой данных CML

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКаталогуТоваровCML.
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоПрайсЛисту.
//Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчету.
// Подготавливает данные для электронного документа типа Счет формата CML 4.02
//  
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// Устаревшая процедура 
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоЗаказуТоваров.
// 
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтветуНаЗаказ.
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// УСТАРЕВШАЯ ПРОЦЕДУРА
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара. 
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовыйЭлемент = Неопределено;
	
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ТипОбъекта = "Валюты" Тогда
		
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "Код", ИдОбъекта);
		
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		
		Если ДополнительныеРеквизиты.Свойство("ИНН") Тогда
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		
		Если ДополнительныеРеквизиты.Свойство("КПП") Тогда
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(?(ТипОбъекта = "Контрагенты", "Корреспонденты", ТипОбъекта), "Наименование", ПараметрПоиска);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "БанковскиеСчетаОрганизаций" Тогда
		
		Владелец = "";
		Если ЗначениеЗаполнено(ДополнительныеРеквизиты) И ТипЗнч(ДополнительныеРеквизиты) = Тип("Структура") Тогда
			Владелец = ДополнительныеРеквизиты.Владелец;
		КонецЕсли;
		
		ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);

		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		
		Результат = "";
		
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		
		Результат = "";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ТипОбъекта = "Контрагенты" Тогда
		ТипОбъекта = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник." + ТипОбъекта + " КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) Тогда
		ТекстЗапроса = ТекстЗапроса + " И Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Корреспонденты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);
	Контрагент.Записать();
	
	Результат = Контрагент.Ссылка;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
//  ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// ИдКонтрагента - строка - значение ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.СообщенияЭДО
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если Метаданные.Перечисления.Найти(ИмяПеречисления) = Неопределено Тогда
		НайденноеЗначение = ПредставлениеПеречисления;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(Врег(ЭлПеречисления.Синоним), Врег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(Врег(ЭлПеречисления.Имя), Врег(ПредставлениеПеречисления)) > 0 Тогда
			
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Участник,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Код КАК ВнешнийКод,
		|	УчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
		|	Контрагенты.Наименование КАК НаименованиеДляСообщенияПользователю
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты КАК Контрагенты
		|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
		|ГДЕ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
		|	И УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, Фамилия, Имя, Отчество");

	Если ЗначениеЗаполнено(ЮрФизЛицо)
	   И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Корреспонденты")) Тогда
		
		Сведения.Вставить("ЮрФизЛицо", ЮрФизЛицо.ЮрФизЛицо);
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо.ПолноеНаименование);
		Сведения.Вставить("ОфициальноеНаименование", ЮрФизЛицо.Наименование);
		Сведения.Вставить("ИНН", ЮрФизЛицо.ИНН);
		Сведения.Вставить("КПП", ЮрФизЛицо.КПП);
		Сведения.Вставить("КодПоОКПО", ЮрФизЛицо.КодПоОКПО);
		
		Если ЮрФизЛицо.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель")
		 ИЛИ ЮрФизЛицо.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		 	Фамилия = ""; Имя = ""; Отчество = "";
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ЮрФизЛицо.Наименование, Фамилия, Имя, Отчество);
			Сведения.Вставить("Фамилия", 	Фамилия);
			Сведения.Вставить("Имя", 		Имя);
			Сведения.Вставить("Отчество", 	Отчество);
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат Сведения;
	
КонецФункции

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Сведения = "";
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	НазваниеРегиона = "";
	
	Возврат НазваниеРегиона;
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	Возврат АдресЭП;
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - документссылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект) Экспорт
	
	Результат = "";
	
	Возврат Результат;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Возврат Таблица;
	
КонецФункции

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника СообщенияЭДО.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат "";
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Возврат "";
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Возврат 0;
	
КонецФункции

// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат ЭтоФизЛицо;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат ЭтоФизЛицо;
	КонецЕсли;
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника СообщенияЭДО
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.СообщенияЭДО - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВходящиеДокументы") 
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент)
		|	И НЕ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)";
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			РедактированиеРазрешено = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = Истина;
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = Истина;
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Результат = Истина;
	
	Результат = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на настройку параметров электронных документов.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Результат = Истина;
	
	Результат = Пользователи.РолиДоступны("НастройкаПараметровЭД") ИЛИ Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
				Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			Иначе // для обычной формы
				Если НЕ Форма.ЭлементыФормы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.ЭлементыФормы.ТекстСостоянияЭД;
				КонецЕсли;
				
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И ТипЗнч(НайденныйЭлементФормы) = Тип("Надпись") Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь) Тогда
			Если НЕ Форма.Элементы.Найти("ГруппаСостояниеЭД") = Неопределено Тогда
				Форма.Элементы.ГруппаСостояниеЭД.Видимость = Ложь;
			ИначеЕсли НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				Форма.Элементы.СостояниеЭД.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Переопределяет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
КонецПроцедуры

// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
КонецПроцедуры

// Заполняет соответствие кодов реквизитов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие, исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Возврат Таблица;
	
КонецФункции

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Параметры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		СписокВозврата.Добавить(Справочники.ИсходящиеДокументы.ПустаяСсылка(),
			Метаданные.Справочники.ИсходящиеДокументы.Представление());
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Корреспонденты.ПустаяСсылка(),
			Метаданные.Справочники.Корреспонденты.Представление());
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	ЗаполнитьЗначенияСвойств(
			СтруктураВозврата,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ИНН, КПП, ЮрФизЛицо"));
	СтруктураВозврата.НаименованиеПолное = СтруктураВозврата.Наименование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена с банками

// Используется для включения подсистемы Сбербанк в прикладном решении.
//
// Параметры:
//  ФлагИспользования - <Булево> - необходимо присвоить параметру Истина, если используется подсистема Сбербанк.
//
Процедура ПроверитьИспользованиеПодсистемыСбербанк(ФлагИспользования) Экспорт
	
	ФлагИспользования = Ложь;
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - <СправочникСсылка.Организации> - отбор по организации.
//  Банк - <СправочникСсылка.КлассификаторБанковРФ> - отбор по банку.
//  МассивНомеровБанковскихСчетов - массив возврата, в элементах строки с номерами счетов
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
       |	БанковскиеСчета.НомерСчета КАК НомерСчета
       |ИЗ
       |	Справочник.БанковскиеСчета КАК БанковскиеСчета
       |ГДЕ
       |	БанковскиеСчета.Банк = &Банк
       |	И БанковскиеСчета.Владелец = &Организация
       |	И НЕ БанковскиеСчета.ПометкаУдаления
       |
       |УПОРЯДОЧИТЬ ПО
       |	НомерСчета";
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	ТабРез = Запрос.Выполнить().Выгрузить();
	МассивНомеровБанковскихСчетов = ТабРез.ВыгрузитьКолонку("НомерСчета");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

/////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

/////////////////////////////////////////////////////////////////////////////////
// Прочие функции

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

//Функция СтрРазделить(Знач Строка, Разделитель)
//	
//	Результат = Новый Массив;
//	Если ПустаяСтрока(Строка) Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	НачПозицияПервогоЭлемента = Найти(Строка, "{");
//	КонПозицияПервогоЭлемента = Найти(Строка, "}");
//	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
//		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
//		Результат.Добавить(СокрЛП(ПервыйЭлемент));
//		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
//	КонецЕсли;
//	
//	Пока Истина Цикл
//		Позиция = Найти(Строка,Разделитель);
//		Если Позиция = 0 Тогда
//			Прервать;
//		КонецЕсли;
//		
//		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
//		Строка = СокрЛП(Сред(Строка,Позиция + 1));
//	КонецЦикла;
//	
//	Результат.Добавить(СокрЛП(Строка));
//	
//	Возврат Результат;
//	
//КонецФункции 

///////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает контрагента в ИБ по структуре параметров.
//
// Параметры:
//  ПараметрыКонтрагента - Структура параметров нового контрагента,
//  НовыйКонтрагент - Ссылка, ссылка на элемент справочника Контрагенты.
//
Процедура СоздатьКонтрагентаВБД(ПараметрыКонтрагента, НовыйКонтрагент) Экспорт
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с исходящими документами

// Создает произвольный документ из исходящего и определенного подчиненного файла.
//
Процедура СоздатьПроизвольныйЭД(Документ, Файл, Получатель) Экспорт
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	СоглашениеЭД = Неопределено;
	
	Если Не ЕстьСоглашение(ДокументОбъект, СоглашениеЭД) Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено соглашение обмена ЭД'");
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Документ, , Истина);
	
	НоваяСсылка = Справочники.СообщенияЭДО.ПолучитьСсылку();
	
	СообщениеЭДО = Справочники.СообщенияЭДО.СоздатьЭлемент();
	СообщениеЭДО.УстановитьСсылкуНового(НоваяСсылка);
	СообщениеЭДО.Документ = Документ;
	СообщениеЭДО.УникальныйИД = НоваяСсылка.УникальныйИдентификатор();
	СообщениеЭДО.НомерЭД = СообщениеЭДО.УникальныйИД;
	СообщениеЭДО.УникальныйИДВнешний = Документ.Ссылка.УникальныйИдентификатор();
	СообщениеЭДО.ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД");
	СообщениеЭДО.ДатаСоздания = ТекущаяДатаСеанса();
	СообщениеЭДО.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
	СообщениеЭДО.ДатаДокументаОтправителя = Документ.ДатаСоздания;
	СообщениеЭДО.Наименование = Файл.ПолноеНаименование;
	СообщениеЭДО.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД");
	СообщениеЭДО.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке;
	СообщениеЭДО.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
	СообщениеЭДО.Контрагент = Получатель;
	СообщениеЭДО.Организация = Документ.Организация;
	СообщениеЭДО.СоглашениеЭД = СоглашениеЭД;
	СообщениеЭДО.Записать();
	
	НовыйФайл = РаботаСФайламиВызовСервера.СкопироватьФайл(Файл, НоваяСсылка);
	
	ДобавленныеФайлы = Новый Массив;
	ДобавленныеФайлы.Добавить(СообщениеЭДО.Ссылка);
	ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы, Ложь);
	
КонецПроцедуры

Функция ЕстьСоглашение(ОбъектДокумент, СоглашениеЭД) Экспорт
	
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент.Ссылка);
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		СоглашениеЭД = НастройкиЭД.СоглашениеЭД;
		Возврат Истина;
	Иначе
		СоглашениеЭД = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с входящими документами

Функция НайтиСоздатьВходящийДокументИзПроизвольногоЭД(ДанныеДляЗагрузки, СсылкаНаВладельца = Неопределено) Экспорт
	
	Текст = "";
	
	Попытка
		
		Если ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.ВходящиеДокументы")
			И ЗначениеЗаполнено(СсылкаНаВладельца.СпособПолучения) Тогда
			Текст = НСтр("ru = 'Документ уже получен.'");
			ВызватьИсключение(Текст);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
			СсылкаНаДокумент = Справочники.ВходящиеДокументы.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СсылкаНаВладельца));
			Если СсылкаНаДокумент.ПолучитьОбъект() = Неопределено Тогда
				Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
				Документ.УстановитьСсылкуНового(СсылкаНаДокумент);
			Иначе
				Документ = СсылкаНаДокумент.ПолучитьОбъект();
				Если ЗначениеЗаполнено(Документ.ДатаРегистрации) Тогда 
					Текст = НСтр("ru = 'Операция возможна только для незарегистрированных документов.'");
					ВызватьИсключение(Текст);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДляЗагрузки) Тогда
			Документ.Заполнить(ДанныеДляЗагрузки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Документ, ДанныеДляЗагрузки);

		Документ.Заголовок = Строка(ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД"));
		Документ.Отправитель = ДанныеДляЗагрузки.Контрагент;
		Документ.ДатаСоздания = ДанныеДляЗагрузки.ДатаПолучения;
		Документ.СпособПолучения = ПредопределенноеЗначение("Справочник.СпособыДоставки.СВД");
		
		Документ.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);	

		Документ.Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Документ.Ссылка, 
			ДанныеДляЗагрузки.ДатаПолучения, 
			Перечисления.СостоянияДокументов.НаРегистрации, 
			Пользователи.ТекущийПользователь());
		
		// Запись информации о том, что документ получен по СВД.
		МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Документ.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Объект = Документ.Ссылка;
		КонецЕсли;
		МенеджерЗаписи.ПолученПоСВД = Истина;
		МенеджерЗаписи.Записать();
		
		// Отправка документа на проверку
		МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
		МенеджерЗаписиРегистра.Прочитать();
		Если Не МенеджерЗаписиРегистра.Выбран() Тогда
			МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
			МенеджерЗаписиРегистра.Проверен = Ложь;
			МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
			МенеджерЗаписиРегистра.Записать();
		КонецЕсли;
		
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнение документа на основе ЭД. %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, Документ.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Документ.Ссылка;
	
КонецФункции

Процедура ДокументОтправленПоСВД(ДокументСсылка) Экспорт
	
	// Запись информации о том, что документ отправлен по СВД.
	МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ДокументСсылка;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Объект = ДокументСсылка;
	КонецЕсли;
	МенеджерЗаписи.СостояниеСВД = ПредопределенноеЗначение("Справочник.ВидыСостоянийДокументовВСВД.Отправлен");
	МенеджерЗаписи.Записать();
	
КонецПроцедуры
