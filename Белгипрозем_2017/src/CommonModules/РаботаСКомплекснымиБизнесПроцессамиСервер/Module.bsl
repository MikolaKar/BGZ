
// Удаляет шаблон действия в комплексном процессе или шаблоне комплексного процесса
// Параметры:
//	ШаблонБизнесПроцесса - ссылка на удаляемый шаблон процесса
Процедура УдалитьШаблонДействияЭтапаПроцесса(ШаблонБизнесПроцесса) Экспорт
	
	Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ШаблонБизнесПроцесса).Удаление Тогда
		Текст = НСтр("ru = 'Недостаточно прав для удаления действия комплексного процесса'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
		ВладелецШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ШаблонБизнесПроцесса, "ВладелецШаблона");
		ШаблонОбъект = ШаблонБизнесПроцесса.ПолучитьОбъект();
		Если ТипЗнч(ВладелецШаблона) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			ШаблонОбъект.Удалить();
		ИначеЕсли ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВладелецШаблона, "Стартован") Тогда
				ШаблонОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ШаблонОбъект.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик печати
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаКомплексногоПроцесса";
	// Запомним номер строки с которой начали выводить текущий документ
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Макет = ПолучитьОбщийМакет("КарточкаКомплексногоПроцесса");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОбщаяШапка = Макет.ПолучитьОбласть("ОбщаяШапка");
	ОбластьДанныеПроцесса = Макет.ПолучитьОбласть("ДанныеПроцесса");
	ОбластьЭтапыШапка = Макет.ПолучитьОбласть("ЭтапыШапка");
	ОбластьЭтапыСтрока = Макет.ПолучитьОбласть("ЭтапыСтрока");
	ОбъектПечати = МассивОбъектов;	
	
	ОбластьЗаголовок.Параметры.Заголовок = ОбъектПечати.Наименование;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	ОбластьОбщаяШапка.Параметры.НаименованиеЗадачи = ОбъектПечати.Наименование;
	ОбластьОбщаяШапка.Параметры.Описание = ОбъектПечати.Описание;
	ОбластьОбщаяШапка.Параметры.Контролер = ОбъектПечати.Контролер;
	ОбластьОбщаяШапка.Параметры.Важность = ОбъектПечати.Важность;
	ТабличныйДокумент.Вывести(ОбластьОбщаяШапка);
	
	Если ТипЗнч(ОбъектПечати) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ОбластьДанныеПроцесса.Параметры.ДатаПроцесса = ОбъектПечати.Дата;
		ОбластьДанныеПроцесса.Параметры.Запущен = ОбъектПечати.Стартован;
		ОбластьДанныеПроцесса.Параметры.Завершен  = ОбъектПечати.Завершен;
		ОбластьДанныеПроцесса.Параметры.ДатаЗавершения = ОбъектПечати.ДатаЗавершения;
		ТабличныйДокумент.Вывести(ОбластьДанныеПроцесса);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЭтапыШапка);
		
	Для Каждого Этап Из ОбъектПечати.Этапы Цикл
		
		СтрокаСрок = "";
		Попытка
			БизнесПроцессыИЗадачиКлиентСервер.ПолучитьСрокИсполненияПрописью(
				ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
				СтрокаСрок,
				Этап.ШаблонБизнесПроцесса.СрокИсполнения,
				Этап.ШаблонБизнесПроцесса.СрокИсполненияЧас);
		Исключение
			СтрокаСрок = "";		
		КонецПопытки;
		ОбластьЭтапыСтрока.Параметры.Номер = Этап.НомерСтроки;
		Если Найти(ОбластьЭтапыСтрока.Параметры.ИмяЭтапа, "-") > 0
			И СтрДлина(ОбластьЭтапыСтрока.Параметры.ИмяЭтапа) = 36 Тогда
			ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Метаданные().Синоним;
		Иначе
			ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Наименование;
		КонецЕсли;
		Если Этап.ШаблонБизнесПроцесса.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
			ОбластьЭтапыСтрока.Параметры.ОписаниеЭтапа = Этап.ШаблонБизнесПроцесса.Описание;
		КонецЕсли;
		ОбластьЭтапыСтрока.Параметры.Срок = СтрокаСрок;
		ОбластьЭтапыСтрока.Параметры.ИсполнителиЭтапа = Этап.ИсполнителиЭтапаСтрокой;
		ОбластьЭтапыСтрока.Параметры.ПредшественникиЭтапа = Этап.ПредшественникиЭтапаСтрокой;
		ТабличныйДокумент.Вывести(ОбластьЭтапыСтрока);
	КонецЦикла;	
	
	// В табличном документе зададим имя области в которую был 
	// выведен объект. Нужно для возможности печати по-комплектно.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОбъектПечати);
		
	Возврат ТабличныйДокумент;
	
КонецФункции

// Получает длительность процесса или шаблона комплексного процесса в часах
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
// Возвращает:
//	Длительность действий процесса в часах. Вычисляется как длительность самой
//	продолжительной последовательности действий комплексного процесса.
Функция ПолучитьДлительностьПроцесса(Знач ПроцессШаблонОбъект) Экспорт
	
	Если ПроцессШаблонОбъект.Этапы.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	// Массив путей будет содержать все возможные пути в графе переходов между действиями
	// в предположении, что все циклы проходятся в таблице переходов только один раз.
	// У каждого из путей будет вычислена длительность. В результате будет выбран путь
	// с самой большой длительностью. Это необязательно будет самый длинный по числу
	// действий путь.
	МассивПутей = Новый Массив;
	
	// Получаем все пути длиной в 1 шаг, которые можно найти от точки старта
   	ИдентификаторПервогоЭтапа = ПроцессШаблонОбъект.Этапы[0].ИдентификаторЭтапа;
	
	// Если первой действие выполняется в порядке очереди, считаем его стартовым
	Если ЭтапВыполняетсяВПорядкеОчереди(ПроцессШаблонОбъект, ИдентификаторПервогоЭтапа) Тогда
		ДанныеПути = Новый Структура("Путь, Длина");
		ДанныеШагаПути = Новый Структура("Идентификатор, Длительность");
		Путь = Новый Массив;
		ДанныеШагаПути.Идентификатор = ИдентификаторПервогоЭтапа;
		ДанныеШагаПути.Длительность = ПолучитьДлительностьЭтапа(ПроцессШаблонОбъект, ИдентификаторПервогоЭтапа);
		Путь.Добавить(ДанныеШагаПути);
		ДанныеПути.Путь = Путь;
		ДанныеПути.Длина = ДанныеШагаПути.Длительность;
		МассивПутей.Добавить(ДанныеПути);	
	КонецЕсли;
	
	// Стартовыми также являются те действия, у которых в предшественниках значится старт процесса
	Для Каждого ЗаписьОПереходе Из ПроцессШаблонОбъект.ПредшественникиЭтапов Цикл
		Если ЗаписьОПереходе.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
			ДанныеШагаПути = Новый Структура("Идентификатор, Длительность");
			Путь = Новый Массив;
			ДанныеШагаПути.Идентификатор = ЗаписьОПереходе.ИдентификаторПоследователя;
			ДанныеШагаПути.Длительность = ПолучитьДлительностьЭтапа(ПроцессШаблонОбъект, ЗаписьОПереходе.ИдентификаторПоследователя);
			Путь.Добавить(ДанныеШагаПути);
			
			ДанныеПути = Новый Структура("Путь, Длина");
			ДанныеПути.Путь = Путь;
			ДанныеПути.Длина = ДанныеШагаПути.Длительность;
			
			МассивПутей.Добавить(ДанныеПути);
		КонецЕсли;
	КонецЦикла;

	// Получаем все пути длиной в СчетчикДлин шагов.
	// Так как считаем, что все циклы в комплексном процессе проходится только один раз,
	// достаточно найти все пути длиной до количества действий комплексного процесса.
	КоличествоЭтапов = ПроцессШаблонОбъект.Этапы.Количество();
	Для СчетчикДлин = 2 по КоличествоЭтапов Цикл
		ПолучитьНовыеПути(ПроцессШаблонОбъект, МассивПутей, СчетчикДлин);	
	КонецЦикла;
	
	// Среди всех найденных путей вычисляем тот, который имеет самую большую длительность
	МаксимальнаяДлительность = 0;
	Для Каждого Путь Из МассивПутей Цикл
		Если Путь.Длина > МаксимальнаяДлительность  Тогда
			МаксимальнаяДлительность = Путь.Длина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальнаяДлительность;
	
КонецФункции

// Выполняет поиск путей в таблице действий комплексного процесса и 
// добавляет найденные пути в массив найденных путей
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	МассивПутей - массив найденных путей в таблице действий
//	ДлинаПути - требуемая длина путей. Выполняется поиск путей с заданной длиной.
Функция ПолучитьНовыеПути(Знач Объект, МассивПутей, ДлинаПути)
	
	КоличествоПутей = МассивПутей.Количество() - 1;
	// Перебираем все имеющиеся на данный момент пути в таблице действий
	Для Счетчик = 0 По КоличествоПутей Цикл
		ОдинПуть = МассивПутей[Счетчик];
		// Если путь имеет длину, на 1 меньшую, чем требуемая длина ДлинаПути,
		// на его основе пытаемся построить путь длиной ДлинаПути
		Если ОдинПуть.Путь.Количество() + 1 = ДлинаПути Тогда
			// Находим последний этап пути, от которого будем продолжать путь
			ПоследнийШагПути = ОдинПуть.Путь[ОдинПуть.Путь.Количество() - 1].Идентификатор;
			ИскатьЭтапВПорядкеОчереди = Истина;
			Для Каждого ЗаписьОПереходе Из Объект.ПредшественникиЭтапов Цикл
				Если ЗаписьОПереходе.ИдентификаторПредшественника = ПоследнийШагПути Тогда
					ИскатьЭтапВПорядкеОчереди = Ложь;
					// Если этап, на который можно перейти, ранее не встречался в пути, добавляем его,
					// увеличивая тем самым длину пути на 1 до требуемого значения ДлинаПути
					Если КоличествоУпоминанийЭтапаВПути(ОдинПуть.Путь, ЗаписьОПереходе.ИдентификаторПоследователя) = 0 Тогда
						ДанныеПути = Новый Структура("Путь, Длина");		
						Путь = Новый Массив;
						Для Каждого УчастникПути Из ОдинПуть.Путь Цикл
							Путь.Добавить(УчастникПути);	
						КонецЦикла;
						ДанныеШагаПути = Новый Структура("Идентификатор, Длительность");
						ДанныеШагаПути.Идентификатор = ЗаписьОПереходе.ИдентификаторПоследователя;
						ДанныеШагаПути.Длительность = ПолучитьДлительностьЭтапа(Объект, ЗаписьОПереходе.ИдентификаторПоследователя);
						Путь.Добавить(ДанныеШагаПути);
						ДанныеПути.Путь = Путь;
						ДанныеПути.Длина = ОдинПуть.Длина + ПолучитьДлительностьЭтапа(Объект, ЗаписьОПереходе.ИдентификаторПоследователя);
						МассивПутей.Добавить(ДанныеПути);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ИскатьЭтапВПорядкеОчереди Тогда
				Для каждого Этап Из Объект.Этапы Цикл
					Если Этап.ИдентификаторЭтапа = ПоследнийШагПути Тогда
						Если Этап.НомерСтроки < Объект.Этапы.Количество() Тогда
							ПроверяемыйЭтап = Объект.Этапы[Этап.НомерСтроки];
							Если ЭтапВыполняетсяВПорядкеОчереди(Объект, ПроверяемыйЭтап.ИдентификаторЭтапа) Тогда
								Если КоличествоУпоминанийЭтапаВПути(ОдинПуть.Путь, ПроверяемыйЭтап.ИдентификаторЭтапа) = 0 Тогда
									ДанныеПути = Новый Структура("Путь, Длина");		
									Путь = Новый Массив;
									Для Каждого УчастникПути Из ОдинПуть.Путь Цикл
										Путь.Добавить(УчастникПути);	
									КонецЦикла;
									ДанныеШагаПути = Новый Структура("Идентификатор, Длительность");
									ДанныеШагаПути.Идентификатор =ПроверяемыйЭтап.ИдентификаторЭтапа;
									ДанныеШагаПути.Длительность = ПолучитьДлительностьЭтапа(Объект, ПроверяемыйЭтап.ИдентификаторЭтапа);
									Путь.Добавить(ДанныеШагаПути);
									ДанныеПути.Путь = Путь;
									ДанныеПути.Длина = ОдинПуть.Длина + ПолучитьДлительностьЭтапа(Объект, ПроверяемыйЭтап.ИдентификаторЭтапа);
									МассивПутей.Добавить(ДанныеПути);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьДлительностьЭтапа(ПроцессШаблонОбъект, ИдентификаторЭтапа)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = 0;
	Для Каждого Этап Из ПроцессШаблонОбъект.Этапы Цикл
		Если Этап.ИдентификаторЭтапа <> ИдентификаторЭтапа Тогда
			Продолжить;
		КонецЕсли;
		ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		Если ШаблонОбъект = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Результат = ШаблонОбъект.ПолучитьДлительностьПроцесса();		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоУпоминанийЭтапаВПути(Путь, ИдентификаторЭтапа)
	
	КоличествоУпоминаний = 0;
	Для Каждого ШагПути Из Путь Цикл
		Если ШагПути.Идентификатор = ИдентификаторЭтапа Тогда
			КоличествоУпоминаний = КоличествоУпоминаний + 1;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоУпоминаний;
	
КонецФункции

Функция ЭтапВыполняетсяВПорядкеОчереди(Знач Объект, ИдентификаторЭтапа)
	
	Для Каждого ЗаписьОПереходе Из Объект.ПредшественникиЭтапов Цикл
		Если ЗаписьОПереходе.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Инициирует активизацию очередных действий при завершении действия комплексного процесса
//
// Параметры:
//	Источник - ссылка на ЗадачуИсполнителя
//	Отказ - признак отказа от обработки события
//
Процедура ЗадачаКомплексногоПроцессаПриВыполнении(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТочкаМаршрутаВложенныйПроцесс = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс;
	
	Если ТипЗнч(Источник.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") 
		И Источник.ТочкаМаршрута = ТочкаМаршрутаВложенныйПроцесс Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДочерниеБизнесПроцессы.ДочернийПроцесс
			|ИЗ
			|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
			|ГДЕ
			|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
		Запрос.УстановитьПараметр("СвязующаяЗадача", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая()
				И ПолучитьФункциональнуюОпцию("ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов") Тогда
				
				ВедущаяЗадачаДействия = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				ВедущаяЗадачаДействия.Дата = ТекущаяДатаСеанса();
				ВедущаяЗадачаДействия.ДатаНачала = ТекущаяДатаСеанса();
				ВедущаяЗадачаДействия.БизнесПроцесс = Источник.БизнесПроцесс;
				ВедущаяЗадачаДействия.ТочкаМаршрута = ТочкаМаршрутаВложенныйПроцесс;
				ВедущаяЗадачаДействия.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ожидание маршрутизации процесса ""%1"" после выполнения ""%2""'"),
					Строка(Источник.БизнесПроцесс),
					Строка(Выборка.ДочернийПроцесс));
				ВедущаяЗадачаДействия.Записать();
				
				РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.ДобавитьПроцесс(
					Источник.БизнесПроцесс,
					Выборка.ДочернийПроцесс,
					ВедущаяЗадачаДействия.Ссылка);
				
			Иначе
				НовыеПроцессы = Новый Массив();
				КомплексныйПроцессОбъект = Источник.БизнесПроцесс.ПолучитьОбъект();
				КомплексныйПроцессОбъект.СтартоватьНовыеДействия(
					НовыеПроцессы, 
					ТочкаМаршрутаВложенныйПроцесс, 
					Истина, 
					Выборка.ДочернийПроцесс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Общие действия при создании формы шаблона процесса (любого). Выполняет инициализацию 
// и настройку внешнего вида формы в зависимости от того, настраивается ли действие комплексного процесса
// или работа ведется с общими шаблонами бизнес-процессов.
// Параметры:
//	Форма - форма элемента шаблона бизнес-процесса
//	ЗаголовокФормы - строка, заголовок формы
Процедура КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(Знач Форма, ЗаголовокФормы) Экспорт
	
	Форма.ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
		
	Если ЗначениеЗаполнено(Форма.Параметры.ВладелецШаблона) Тогда
		Форма.Объект.ВладелецШаблона = Форма.Параметры.ВладелецШаблона;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Форма.Владелец = Форма.Параметры.ВладелецШаблона;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецШаблонаВерхнегоУровня = Форма.Объект.ВладелецШаблона;
	
	Если ЗначениеЗаполнено(ВладелецШаблонаВерхнегоУровня)
		И ТипЗнч(ВладелецШаблонаВерхнегоУровня) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ВладелецВладельца = ВладелецШаблонаВерхнегоУровня.ВладелецШаблона;
		СчетчикУровней = 1;
		Пока ЗначениеЗаполнено(ВладелецВладельца) И СчетчикУровней < 10 Цикл
			ВладелецШаблонаВерхнегоУровня = ВладелецВладельца;
			СчетчикУровней = СчетчикУровней + 1;
			Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				ВладелецВладельца = ВладелецШаблонаВерхнегоУровня.ВладелецШаблона;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВКомплексномПроцессе = Ложь;
	ВШаблонеКомплексногоПроцесса = Ложь;
	Форма.Объект.ШаблонВКомплексномПроцессе = Ложь;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ВКомплексномПроцессе = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ВШаблонеКомплексногоПроцесса = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Форма.ИспользоватьАвтоподстановки = Истина;
	
	// Инициализация карточки, если шаблон используется в комплексном процессе
	Если ВКомплексномПроцессе
		И НЕ ЗначениеЗаполнено(Форма.Объект.Автор)
		И Форма.Объект.Ссылка.Пустая() Тогда
		
		Форма.Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если ВКомплексномПроцессе Или ВШаблонеКомплексногоПроцесса Тогда
		
		Если ВШаблонеКомплексногоПроцесса Тогда
			Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			Если Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Форма.Элементы.Исполнитель.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Проверяющий") <> Неопределено Тогда
				Форма.Элементы.Проверяющий.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Контролер") <> Неопределено Тогда
				Форма.Элементы.Контролер.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
		Иначе
			Если ТипЗнч(Форма.Объект.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Автор;
			Иначе
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
				Форма.Элементы.ДобавлятьНаименованиеПредмета.Видимость = Ложь;
				Если Форма.Объект.Ссылка.Пустая() Тогда
					Форма.Объект.ДобавлятьНаименованиеПредмета = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Форма.Элементы.Найти("ИсполнителиИспользоватьУсловия") <> Неопределено Тогда
				Форма.Элементы.ИсполнителиИспользоватьУсловия.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		// Настройка использования автоподстановок
		Форма.ИспользоватьАвтоподстановки = Ложь;
		Если ВШаблонеКомплексногоПроцесса
			И НЕ ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона.ВладелецШаблона) Тогда
			Форма.ИспользоватьАвтоподстановки = Истина;
		КонецЕсли;
		
		// Установка заголовка формы. Если шаблон используется в
		//	комплексном процессе, то заголовок устанавливается вручную.
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = ЗаголовокФормы;
		
		Если ВКомплексномПроцессе И ЗначениеЗаполнено(ВладелецШаблонаВерхнегоУровня) Тогда
			
			ОбъектВладелецШаблонаВерхнегоУровня = ВладелецШаблонаВерхнегоУровня.ПолучитьОбъект();
			
			Если ОбъектВладелецШаблонаВерхнегоУровня.Завершен
				ИЛИ (Форма.Параметры.Свойство("ТолькоПросмотр") И Форма.Параметры.ТолькоПросмотр = Истина)
				ИЛИ НЕ ШаблоныБизнесПроцессов.ДоступностьПоШаблону(ОбъектВладелецШаблонаВерхнегоУровня) Тогда
				
				Форма.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(ОбъектВладелецШаблонаВерхнегоУровня.Предметы, Истина, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			Если ЗначениеЗаполнено(СтрокаПредметов) И Форма.Объект.Ссылка.Пустая() Тогда
				Форма.Объект.НаименованиеБизнесПроцесса = 
					СокрЛП(Форма.Объект.НаименованиеБизнесПроцесса) + " " + СтрокаПредметов;
			КонецЕсли;
		КонецЕсли;
	Конецесли;

	// Установка видимости разделов формы, если шаблон используется в комплексном процессе
	Форма.Элементы.СтраницаОШаблоне.Видимость = НЕ Форма.Объект.ШаблонВКомплексномПроцессе;
	
	Если Форма.Параметры.Свойство("ПредметыПроцесса") Тогда
		Форма.Предметы.ЗагрузитьЗначения(Форма.Параметры.ПредметыПроцесса);
		Если ДоступностьПоШаблону(Форма) = Истина Тогда
			Форма.ТолькоПросмотр = Ложь;				
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ТолькоПросмотр Тогда
		Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
			Форма.Элементы.Предметы.ТолькоПросмотр = Истина;
			Если Форма.Элементы.Найти("Добавить") <> Неопределено Тогда
				Форма.Элементы.Добавить.Доступность = Ложь;
				Для Каждого Элемент Из Форма.Элементы.Добавить.ПодчиненныеЭлементы Цикл
					Элемент.Доступность = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Форма.Элементы.Найти("ПредметыИзменитьПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыИзменитьПредмет.Доступность = Ложь;
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ПредметыЗадач") <> Неопределено Тогда
			Форма.Элементы.ПредметыЗадач.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступностьПоШаблону(Форма) 
	
	Шаблон = Форма.Объект.ИсходныйШаблон;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДокументы = Новый Массив;
	Для Каждого Предмет Из Форма.Предметы Цикл
		Если ТипыДокументов.Найти(ТипЗнч(Предмет.Значение)) <> Неопределено Тогда
			ПредметыДокументы.Добавить(Предмет.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредметыДокументы.Количество() = 0 Тогда    
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеДанные.ВидДокумента,
		|	ВсеДанные.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
		|		ВнутренниеДокументы.Организация КАК Организация
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВходящиеДокументы.ВидДокумента,
		|		ВходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсходящиеДокументы.ВидДокумента,
		|		ИсходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ГДЕ
		|		ИсходящиеДокументы.Ссылка В(&ПредметыДокументы)) КАК ВсеДанные";
	
	Запрос.УстановитьПараметр("ПредметыДокументы", ПредметыДокументы);
	
	Результат = Запрос.Выполнить();
	
	ВидыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидыДокументов)
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон";
	
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Организации = Новый Массив;
			Организации.Добавить(Справочники.Организации.ПустаяСсылка());
			Запрос.УстановитьПараметр("Организации", Организации);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьЗапрещеноИзменение = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗапрещеноИзменение Тогда 
			ЕстьЗапрещеноИзменение = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьЗапрещеноИзменение Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции	

// Применяет настройки действия комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
//	ИдентификаторЭтапа - уникальный идентификатор действия, для которого устанавливаются настройки
//	ПараметрыОповещения - структура, содержащая параметры действия
//		ШаблонБП - ссылка на шаблон бизнес-процесса
//		ВладелецШаблона - ссылка на комплексный процесс или шаблон комплексного процесса
// Возвращает:
//	УникальныйИдентификатор - идентификатор действия, для которого были применены настройки
Функция ПрименитьНастройкиДействия(Форма, ПараметрыОповещения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ПараметрыОповещения) <> Тип("Структура") Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск настроек действия в табличной части
	Шаблон = ПараметрыОповещения.ШаблонБП;
	ИдентификаторЭтапа = Неопределено;
	РабочийЭтап = Неопределено;
	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ШаблонБизнесПроцесса = Шаблон Тогда
			ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
			РабочийЭтап = Этап;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки действия не найдены - создается новая запись
	Если ИдентификаторЭтапа = Неопределено Тогда
		РабочийЭтап = Форма.Объект.Этапы.Добавить();
		РабочийЭтап.ИдентификаторЭтапа = Новый УникальныйИдентификатор();
		РабочийЭтап.ПредшественникиВариантИспользования = "ВсеПредшественники";
		
		Если Форма.Объект.Этапы.Количество() = 1 Тогда
			// Если добавляется первое действие, то его предшественник - старт процесса
			НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
			НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
			НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
		ИначеЕсли Форма.Объект.Этапы.Количество() > 1 Тогда
			// Если все действия выполняются параллельно, то в предшественники записывается старт процесса
			Если Форма.Объект.ВариантМаршрутизации = 
				Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда  
				
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
				
			// Если все действия выполняются по очереди последовательно, каждый этап является предшественником
			//	следующего.
			ИначеЕсли Форма.Объект.ВариантМаршрутизации = 
				Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
				
				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = 
					Форма.Объект.Этапы[КоличествоЭтапов-2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
					
			// Если в комплексном процессе используется смешанная маршрутизация, то в предшественники
			// записывается действие, расположенной в таблице действий перед добавленным действием.
			Иначе
				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = 
					Форма.Объект.Этапы[КоличествоЭтапов - 2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;	
			
			КонецЕсли;
		КонецЕсли;
		
		// Установка текущей строки списка действий на только что добавленную настройку
		ИндексЭтапа = Форма.Объект.Этапы.Индекс(РабочийЭтап);
		Форма.Элементы.Этапы.ТекущаяСтрока = ИндексЭтапа;
	КонецЕсли;
	
	Если РабочийЭтап = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Шаблон.ВладелецШаблона) Тогда
		ШаблонДляВставки = Шаблон.ПолучитьОбъект().Скопировать();
		ШаблонДляВставки.ИсходныйШаблон = Шаблон;
		ШаблонДляВставки.ВладелецШаблона = ПараметрыОповещения.ВладелецШаблона;
		РабочийШаблон = ШаблонДляВставки.Ссылка;
	Иначе
		РабочийШаблон = Шаблон;
	КонецЕсли;
	
	РабочийЭтап.ШаблонБизнесПроцесса = РабочийШаблон;
	
	Если РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая
		ИЛИ РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		ШаблонДляВставкиОбъект = РабочийЭтап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонДляВставкиОбъект.Важность = РабочийШаблон.ВладелецШаблона.Важность;
		ШаблонДляВставкиОбъект.Записать();
	КонецЕсли;
	
	ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(РабочийЭтап.ШаблонБизнесПроцесса);
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПроцессСсылка.Метаданные().ПолноеИмя());
	ДоступныеРоли = Менеджер.ПолучитьДоступныеРолиПредметов();
	Если ДоступныеРоли.Найти(Перечисления.РолиПредметов.Заполняемый) = Неопределено Тогда
		ДоступноЗаполнение = Ложь;
	Иначе
		ДоступноЗаполнение = Истина;
	КонецЕсли;
	
	Если ПараметрыОповещения.Свойство("Предметы") Тогда
		ПредметыШаблона = ПараметрыОповещения.Предметы;
	Иначе
		ПредметыШаблона = Мультипредметность.ПолучитьПредметыШаблона(РабочийЭтап.ШаблонБизнесПроцесса);
	КонецЕсли;
	
	ШаблоныЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из Форма.Объект.Этапы Цикл
		ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
	КонецЦикла;
	
	Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета) Или СтрокаПредмета.ИсходноеИмяПредмета = СтрокаПредмета.ИмяПредмета Тогда
			Если Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета)).Количество() = 0 Тогда
				НоваяСтрока = Неопределено;
				МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма, Форма.Объект, СтрокаПредмета, НоваяСтрока);
				СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета",СтрокаПредмета.ИмяПредмета));
				Для Каждого Строка Из СтрокиКУдалению Цикл
					Форма.Объект.ПредметыЗадач.Удалить(Строка);
				КонецЦикла;                                                                              
				МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(НоваяСтрока);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета) И СтрокаПредмета.ИсходноеИмяПредмета <> СтрокаПредмета.ИмяПредмета Тогда
			СтрокиПредметаДляИзменения = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
			Если СтрокиПредметаДляИзменения.Количество() > 0 Тогда
				СтрокиДубли = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
				Если СтрокиДубли.Количество() > 0 Тогда
					Форма.Объект.Предметы.Удалить(СтрокиПредметаДляИзменения[0]); 
					УдаляемыеСтроки = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						Форма.Объект.ПредметыЗадач.Удалить(УдаляемаяСтрока);
					КонецЦикла;
					МультипредметностьВызовСервера.УдалитьПредметИзШаблоновПроцесса(Форма.Объект.Ссылка, ШаблоныЭтапов, СтрокаПредмета.ИсходноеИмяПредмета);
				Иначе
					Если ЗначениеЗаполнено(СтрокиПредметаДляИзменения[0].Предмет) Тогда
						ИсходныйПредмет = СтрокиПредметаДляИзменения[0].Предмет;
					Иначе
						ИсходныйПредмет = Неопределено;
					КонецЕсли;
					МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма, Форма.Объект, СтрокаПредмета, СтрокиПредметаДляИзменения[0]);
					Если ЗначениеЗаполнено(ИсходныйПредмет) Тогда
						СтрокиПредметаДляИзменения[0].Предмет = ИсходныйПредмет;
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(СтрокиПредметаДляИзменения[0], Форма.Объект.ПредметыЗадач, Истина);
					Иначе
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(СтрокиПредметаДляИзменения[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПредметыЗадачШаблона = Мультипредметность.ПолучитьПредметыЗадачШаблона(РабочийЭтап.ШаблонБизнесПроцесса);
	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа",РабочийЭтап.ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	
	Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(РабочийЭтап.ШаблонБизнесПроцесса) Тогда
		Если Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса",
			РабочийЭтап.ИдентификаторЭтапа, РабочийЭтап.ШаблонБизнесПроцесса)).Количество() = 0 Тогда
			НоваяСтрока = Форма.ДействияПроцесса.Добавить();
			НоваяСтрока.ИдентификаторЭтапа = РабочийЭтап.ИдентификаторЭтапа;
			НоваяСтрока.ШаблонБизнесПроцесса = РабочийЭтап.ШаблонБизнесПроцесса;
			НоваяСтрока.ТочкаМаршрута = Неопределено;
			НоваяСтрока.ДоступноЗаполнение = Ложь;
		КонецЕсли;
		// Перезаполним строки предметов задач в соответствие с данными этапа
		Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
			СтрокиПредмета = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",СтрокаПредмета.ИмяПредмета));
			Если СтрокиПредмета.Количество() > 0 Тогда
				НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = РабочийЭтап.ИдентификаторЭтапа;
				НоваяСтрока.ШаблонБизнесПроцесса = РабочийЭтап.ШаблонБизнесПроцесса;
				НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Иначе
			
		Для Каждого ДействиеПроцесса Из ДействияПроцесса Цикл
			Если Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ТочкаМаршрута", 
				РабочийЭтап.ИдентификаторЭтапа, РабочийЭтап.ШаблонБизнесПроцесса, ДействиеПроцесса)).Количество() = 0 Тогда
				НоваяСтрока = Форма.ДействияПроцесса.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = РабочийЭтап.ИдентификаторЭтапа;
				НоваяСтрока.ШаблонБизнесПроцесса = РабочийЭтап.ШаблонБизнесПроцесса;
				НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
				НоваяСтрока.ДоступноЗаполнение = ДоступноЗаполнение;
			КонецЕсли;
			
			// Перезаполним строки предметов задач в соответствие с данными этапа
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				СтрокиЭтапаШаблона = ПредметыЗадачШаблона.НайтиСтроки(Новый Структура(
					"ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета, ДействиеПроцесса));
				Если СтрокиЭтапаШаблона.Количество() > 0 Тогда
					НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
					НоваяСтрока.ИдентификаторЭтапа = РабочийЭтап.ИдентификаторЭтапа;
					НоваяСтрока.ШаблонБизнесПроцесса = РабочийЭтап.ШаблонБизнесПроцесса;
					НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
					НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
					НоваяСтрока.ОбязательноеЗаполнение = СтрокиЭтапаШаблона[0].ОбязательноеЗаполнение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим предметы для точки маршртура "Контролировать"
	Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
		Отбор = Новый Структура("ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета, 
			БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер);
			
		Если Форма.Объект.ПредметыЗадач.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
			НоваяСтрока.ТочкаМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Контролер;
			НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
		КонецЕсли;
	КонецЦикла;
	
	// Обновим шаблоны этапов по таблице предметы задач
	ИтоговыеРолиПредметовЭтапов = Новый Массив;
	
	Для Каждого СтрокаПредмет Из Форма.Объект.Предметы Цикл
		
		СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		ЗаполнитьЗначенияСвойств(СтруктураПредмета, СтрокаПредмет);
		
		РолиПредметовЭтапов = Новый Массив;
		
		МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
			Форма.Объект.Ссылка,
			ШаблоныЭтапов,
			Форма.Объект.ПредметыЗадач,
			СтруктураПредмета,
			РолиПредметовЭтапов);
		
		ИтоговыеРолиПредметовЭтапов = РолиПредметовЭтапов;
		
	КонецЦикла;
	
	Форма.РолиПредметовЭтапов.Очистить();
	Для Каждого Строка Из ИтоговыеРолиПредметовЭтапов Цикл
		НоваяСтрока = Форма.РолиПредметовЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Модифицированность = Истина;
	ЗаполнитьВычисляемыеПоляЭтапов(Форма);
	Возврат РабочийЭтап.ИдентификаторЭтапа;
		
КонецФункции

// Заполняет вычисляемые текстовые поля списка действий комплексного процесса на форме
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
Процедура ЗаполнитьВычисляемыеПоляЭтапов(Форма, РассчитыватьСрок = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого РабочийЭтап Из Форма.Объект.Этапы Цикл
		РабочийШаблон = РабочийЭтап.ШаблонБизнесПроцесса;
		Если Не ЗначениеЗаполнено(РабочийШаблон) Тогда
			Продолжить;
		КонецЕсли;
		ШаблонОбъект = РабочийШаблон.ПолучитьОбъект();
		Если ШаблонОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяТипа = "";
		Попытка
			ИмяТипа = Метаданные.БизнесПроцессы[Справочники[РабочийШаблон.Метаданные().Имя].ИмяПроцесса(РабочийШаблон)].Синоним + ": ";
		Исключение
			//в модуле менеджера процесса не определена функция ИмяПроцесса()
		КонецПопытки;
		
		РабочийЭтап.ЗадачаЭтапа = ИмяТипа + РабочийШаблон.НаименованиеБизнесПроцесса;
		РабочийЭтап.ИсполнителиЭтапаСтрокой = ШаблонОбъект.ПолучитьСтроковоеПредставлениеИсполнителей();
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			РабочийЭтап.ИсполнителиПредставление = РабочийЭтап.ИсполнителиЭтапаСтрокой;
		КонецЕсли;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
			И ЗначениеЗаполнено(РабочийЭтап.ЗапущенныйБизнесПроцесс) 
			И Не РабочийЭтап.ЗадачаВыполнена Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РабочийЭтап.ЗапущенныйБизнесПроцесс);
			
			СрокИсполненияПроцесса = Менеджер.ПолучитьСтроковоеПредставлениеСрокаВыполнения(РабочийЭтап.ЗапущенныйБизнесПроцесс);
			СрокИсполненияШаблонаПроцесса = ШаблонОбъект.ПолучитьСтроковоеПредставлениеСрокаВыполнения();
			РабочийЭтап.Срок = СрокИсполненияПроцесса;
			Если СрокИсполненияПроцесса <> СрокИсполненияШаблонаПроцесса Тогда
				РабочийЭтап.Срок = РабочийЭтап.Срок + " (" + СрокИсполненияШаблонаПроцесса + ")"; 
			КонецЕсли;
			
			Если ТипЗнч(РабочийЭтап.ЗапущенныйБизнесПроцесс) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
				И ТипЗнч(РабочийЭтап.ЗапущенныйБизнеспроцесс) <> Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
				И ТипЗнч(РабочийЭтап.ЗапущенныйБизнеспроцесс) <> Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
				И ТипЗнч(РабочийЭтап.ЗапущенныйБизнеспроцесс) <> Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
								
				МассивЗадач = РаботаСБизнесПроцессами.ПолучитьМассивЗадачПоБизнесПроцессу(
					РабочийЭтап.ЗапущенныйБизнесПроцесс,
					Истина);
				РабочийЭтап.ИсполнителиПредставление = "";
				Для Каждого Задача Из МассивЗадач Цикл
					Если ЗначениеЗаполнено(Задача.Ссылка.Исполнитель) Тогда
						РабочийЭтап.ИсполнителиПредставление = 
							РабочийЭтап.ИсполнителиПредставление + Строка(Задача.Ссылка.Исполнитель) + "; ";
					ИначеЕсли ЗначениеЗаполнено(Задача.Ссылка.РольИсполнителя) Тогда
						РабочийЭтап.ИсполнителиПредставление = 
							РабочийЭтап.ИсполнителиПредставление + Строка(Задача.Ссылка.РольИсполнителя) + "; ";
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
		Иначе
			РабочийЭтап.Срок = ШаблонОбъект.ПолучитьСтроковоеПредставлениеСрокаВыполнения();
		КонецЕсли;
		РабочийЭтап.ИсходныйШаблон = РабочийШаблон.ИсходныйШаблон;
		Если РабочийШаблон.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
			РабочийЭтап.ОписаниеДействия = РабочийШаблон.Описание;
			РабочийЭтап.ЕстьОписание = СтрДлина(РабочийЭтап.ОписаниеДействия) > 0;
		КонецЕсли;
		РабочийЭтап.Важность = 1;
		Если РабочийШаблон.Метаданные().Реквизиты.Найти("Важность") <> Неопределено Тогда
			Если РабочийШаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
				РабочийЭтап.Важность = 2;
			ИначеЕсли РабочийШаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная Тогда
				РабочийЭтап.Важность = 1;
			ИначеЕсли РабочийШаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
				РабочийЭтап.Важность = 0;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			РабочийЭтап.Просрочен = Ложь;
			Если ЗначениеЗаполнено(РабочийЭтап.ЗапущенныйБизнесПроцесс) 
				И Не РабочийЭтап.ЗадачаВыполнена Тогда
				
				Если РабочийЭтап.ЗапущенныйБизнесПроцесс.Метаданные().Реквизиты.Найти("СрокИсполненияДатой") <> Неопределено Тогда
					РабочийЭтап.Просрочен = 
						РабочийЭтап.ЗапущенныйБизнесПроцесс.СрокИсполненияДатой < ТекущаяДатаСеанса()
						И РабочийЭтап.ЗапущенныйБизнесПроцесс.СрокИсполненияДатой > Дата(1,1,1);
				ИначеЕсли РабочийЭтап.ЗапущенныйБизнесПроцесс.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда
					РабочийЭтап.Просрочен = 
						РабочийЭтап.ЗапущенныйБизнесПроцесс.СрокИсполнения < ТекущаяДатаСеанса()
						И РабочийЭтап.ЗапущенныйБизнесПроцесс.СрокИсполнения > Дата(1,1,1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантМаршрутизацииПриИзменении(Форма.Объект, Форма.ЭтапыКУдалению);
	
	Если РассчитыватьСрок Тогда
		ПоместитьДлительностьНаФорму(Форма);
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПоказатьСрокБезРасчета(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСрокБезРасчета(Форма)
	
	Если Форма.Объект.Этапы.Количество() = 0 Тогда
		Форма.Элементы.ГруппаЗначениеОбщегоСрока.ТекущаяСтраница = Форма.Элементы.ГруппаНетДействий;
		Возврат;
	КонецЕсли;
	Форма.Элементы.ГруппаЗначениеОбщегоСрока.ТекущаяСтраница = Форма.Элементы.ГруппаЕстьДействия;
	Если Не ЗначениеЗаполнено(Форма.Объект.СрокИсполнения) Тогда
		Форма.ПояснениеОбщегоСрока = НСтр("ru = 'не определён.'");
		Возврат;
	КонецЕсли;
	
	Длительность = Форма.Объект.СрокИсполнения - ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Форма.Объект.Дата) Тогда
		Длительность = Форма.Объект.СрокИсполнения - Форма.Объект.Дата;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.ДатаНачала) Тогда
		Длительность = Форма.Объект.СрокИсполнения - Форма.Объект.ДатаНачала;
	КонецЕсли;
	Длительность = Длительность/3600;
	
	ДлительностьДней = Цел(Длительность / 24);
	ДлительностьЧасов = ?(Форма.ИспользоватьВремяВСрокахЗадач,
		Длительность - ДлительностьДней * 24,
		0);	
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Если ИспользоватьГрафикиРаботы Тогда
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		Длительность = ГрафикиРаботы.ПолучитьДлительностьПериода(ГрафикРаботы, ТекущаяДатаСеанса(), Форма.Объект.СрокИсполнения);
		Если ЗначениеЗаполнено(Форма.Объект.Дата) Тогда
			Длительность = ГрафикиРаботы.ПолучитьДлительностьПериода(ГрафикРаботы, Форма.Объект.Дата, Форма.Объект.СрокИсполнения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.ДатаНачала) Тогда
			Длительность = ГрафикиРаботы.ПолучитьДлительностьПериода(ГрафикРаботы, Форма.Объект.ДатаНачала, Форма.Объект.СрокИсполнения);
		КонецЕсли;
		ДлительностьДней = 0;
		ДлительностьЧасов = 0;
		Если ТипЗнч(Длительность) = Тип("Структура") Тогда
			ДлительностьДней = Длительность.КоличествоПолныхРабочихДней;
			ДлительностьЧасов = Длительность.КоличествоПолныхРабочихЧасов;
		КонецЕсли;
	КонецЕсли;
		
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ДлительностьДней);
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ДлительностьЧасов);
	Если ЗначениеЗаполнено(ДлительностьДней) Тогда
		ПодписьДней = Формат(ДлительностьДней, "ЧДЦ=; ЧГ=") + " " + ПодписьДней;
	КонецЕсли;	
	Если Форма.ИспользоватьВремяВСрокахЗадач И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
		ПодписьЧасов = Формат(ДлительностьЧасов, "ЧДЦ=; ЧГ=") + " " + ПодписьЧасов;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДлительностьДней) И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
		ДлительностьПодпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 и %2'"),
			ПодписьДней,
			ПодписьЧасов);
	ИначеЕсли ЗначениеЗаполнено(ДлительностьДней) ИЛИ ЗначениеЗаполнено(ДлительностьЧасов) Тогда
		ДлительностьПодпись = ?(ЗначениеЗаполнено(ДлительностьДней), ПодписьДней, ПодписьЧасов);
	Иначе
		ДлительностьПодпись = НСтр("ru = '0 дней'");
	КонецЕсли;	
	
	Если ИспользоватьГрафикиРаботы Тогда
		ДлительностьПодпись = ДлительностьПодпись + НСтр("ru = ' (с учетом графиков работы)'");
	КонецЕсли;
	
	Форма.ПояснениеОбщегоСрока = ДлительностьПодпись;

КонецПроцедуры

// Выводит на форму процесса или шаблона процесса итоговую длительность процесса
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
Процедура ПоместитьДлительностьНаФорму(Форма) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	УстановитьПривилегированныйРежим(Истина);
	РеквизитОбъект = Форма.РеквизитФормыВЗначение("Объект");
	Форма.МаксимальнаяДлительность =
		РаботаСКомплекснымиБизнесПроцессамиСервер.ПолучитьДлительностьПроцесса(РеквизитОбъект);
	
	//Помещаем информацию о примерном сроке окончания процесса на форму
	Если Форма.МаксимальнаяДлительность > 0 Тогда
		ДлительностьДней = Цел(Форма.МаксимальнаяДлительность / 24);
		ДлительностьЧасов = ?(Форма.ИспользоватьВремяВСрокахЗадач,
			Форма.МаксимальнаяДлительность - ДлительностьДней * 24,
			0);
		ПодписьДней = "";
		ПодписьЧасов = "";
		
		ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ДлительностьДней);
		ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ДлительностьЧасов);
		
		Если ЗначениеЗаполнено(ДлительностьДней) Тогда
			ПодписьДней = Формат(ДлительностьДней, "ЧДЦ=; ЧГ=") + " " + ПодписьДней;
		КонецЕсли;	
		
		Если Форма.ИспользоватьВремяВСрокахЗадач И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ПодписьЧасов = Формат(ДлительностьЧасов, "ЧДЦ=; ЧГ=") + " " + ПодписьЧасов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДлительностьДней) И ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ДлительностьПодпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 и %2'"),
				ПодписьДней,
				ПодписьЧасов);
		ИначеЕсли ЗначениеЗаполнено(ДлительностьДней) ИЛИ ЗначениеЗаполнено(ДлительностьЧасов) Тогда
			ДлительностьПодпись = ?(ЗначениеЗаполнено(ДлительностьДней), ПодписьДней, ПодписьЧасов);
		КонецЕсли;
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда 
			Форма.Объект.СрокИсполнения = ДлительностьДней;
			Форма.Объект.СрокИсполненияЧасов = ДлительностьЧасов;
			Форма.ПояснениеОбщегоСрока = "";
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			ОбщаяДлительность = (ДлительностьДней * 24 + ДлительностьЧасов)	* 3600;
			ИспользоватьГрафики = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
			Если ИспользоватьГрафики Тогда
				ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			КонецЕсли;
			Если НЕ Форма.Объект.Стартован Тогда
				Если ИспользоватьГрафики Тогда
					ДатаИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
						ГрафикРаботы, 
						ТекущаяДата(), 
						ДлительностьДней, 
						ДлительностьЧасов);
				Иначе
					ДатаИсполнения = ТекущаяДатаСеанса() + ОбщаяДлительность;		
				КонецЕсли;
				Если НЕ Форма.ОбщийСрокУстановленВручную Тогда
					Форма.Объект.СрокИсполнения = ДатаИсполнения;
				КонецЕсли;
			Иначе
				Если ИспользоватьГрафики Тогда
					ДатаИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
						ГрафикРаботы, 
						Форма.Объект.ДатаНачала, 
						ДлительностьДней, 
						ДлительностьЧасов);
				Иначе
					ДатаИсполнения = Форма.Объект.ДатаНачала + ОбщаяДлительность;	
				КонецЕсли;
				Если НЕ Форма.ОбщийСрокУстановленВручную Тогда
					Форма.Объект.СрокИсполнения = ДатаИсполнения;
				КонецЕсли;
			Конецесли;
			Если НЕ Форма.ОбщийСрокУстановленВручную Тогда
				СтрокаФорматирования = "ДФ=dd.MM.yyyy";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
					СтрокаФорматирования = "ДФ='dd.MM.yyyy ЧЧ:мм'";
				КонецЕсли;
				Форма.Элементы.СрокИсполнения.ФорматРедактирования = СтрокаФорматирования;
				Если ИспользоватьГрафики Тогда
					ДлительностьПодпись = ДлительностьПодпись + НСтр("ru = ' (с учетом графиков работы)'");
				Иначе
					ДлительностьПодпись = ДлительностьПодпись;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Форма.ОбщийСрокУстановленВручную Тогда
			Текст = ДлительностьПодпись;
			Форма.ПояснениеОбщегоСрока = Текст;	
			Форма.Элементы.ГруппаЗначениеОбщегоСрока.ТекущаяСтраница = Форма.Элементы.ГруппаЕстьДействия;
		КонецЕсли;
	ИначеЕсли Форма.Объект.Этапы.Количество() > 0 Тогда
		Текст = НСтр("ru = 'не определён.'");
		Форма.ПояснениеОбщегоСрока = Текст;
		Форма.Элементы.ГруппаЗначениеОбщегоСрока.ТекущаяСтраница = Форма.Элементы.ГруппаЕстьДействия;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда 
			Форма.Объект.СрокИсполнения = 0;
			Форма.Объект.СрокИсполненияЧасов = 0;
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Если ЗначениеЗаполнено(Форма.Объект.СрокИсполнения) Тогда
				Форма.ПояснениеОбщегоСрока = НСтр("ru = 'определен вручную.'");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.Объект.Этапы.Количество() = 0 Тогда
		Форма.Элементы.ГруппаЗначениеОбщегоСрока.ТекущаяСтраница = Форма.Элементы.ГруппаНетДействий;	
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события переключения варианта маршрутизации комплексного процесса.
// Переключает внешний вид списка действий комплексного процесса.
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВариантМаршрутизацииПриИзменении(Объект, ЭтапыКУдалению) Экспорт
	
	ЭтоПроцесс = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ЭтоПроцесс = Истина;
	КонецЕсли;
	
	ПредшественникиЭтаповДоИзмененения = Объект.ПредшественникиЭтапов.Выгрузить();
	ОтборПоВыполненнымУсловнымПереходам = Новый Структура;
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПоследователя", УникальныйИдентификаторПустой());
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПредшественника", УникальныйИдентификаторПустой());
	Если ЭтоПроцесс Тогда
		ОтборПоВыполненнымУсловнымПереходам.Вставить("УсловныйПереходБылВыполнен", Истина);
	КонецЕсли;
	
	Если Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		// У каждого этапа предшественником устанавливается старт процесса
		Объект.ПредшественникиЭтапов.Очистить();
		Для Каждого Этап Из Объект.Этапы Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Этап.ИдентификаторЭтапа;
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
			
			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока,,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзмененения.
					НайтиСтроки(ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		// Предшественники очищаются - этапы будут выполняться в порядке очереди
		Объект.ПредшественникиЭтапов.Очистить();
		КоличествоЭтапов = Объект.Этапы.Количество();
		Для Счетчик = 0 по Объект.Этапы.Количество() - 1 Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
			НовыйПредшественникПодобран = Ложь;
			Для Индекс = 1 по Счетчик Цикл
				ДействительныйИндекс = Счетчик - Индекс;
				ЭтапЕСтьСредиУдаленных = Ложь;
				Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
					Если ЭтапКУдалению.Значение.ИдентификаторЭтапа = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа Тогда
						ЭтапЕСтьСредиУдаленных = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтапЕСтьСредиУдаленных Тогда
					НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
					НовыйПредшественникПодобран = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НовыйПредшественникПодобран Тогда
				НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
			КонецЕсли;
			НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
			
			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока,,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзмененения.
					НайтиСтроки(ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам,
					НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление этапа в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, на которой выполняется удаление
//	НаименованиеЗадачи - наименование задачи удаляемого этапа
//	ИдентификаторЭтапа - уникальный идентификатор удаляемого этапа
// Возвращает:
//	Истина - удаление выполнено
//	Ложь - удаление не выполнено
Функция УдалитьЭтап(Форма, НаименованиеЗадачи, ИдентификаторЭтапа) Экспорт
		
	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	СтрокиКУдалению = Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.ДействияПроцесса.Удалить(Строка);
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ТочкиМаршрута") <> Неопределено Тогда
		ТочкиМаршрута = Форма.ТочкиМаршрута.ПолучитьЭлементы();
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из ТочкиМаршрута Цикл
			Если Строка.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			ТочкиМаршрута.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			УдалитьВсехПредшественниковЭтапа(Форма.Объект, ИдентификаторЭтапа);
			Пока ЭтапЕстьСредиПредшественников(Форма.Объект, ИдентификаторЭтапа) Цикл
				Для Каждого Предшественник Из Форма.Объект.ПредшественникиЭтапов Цикл
					Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
						Форма.Объект.ПредшественникиЭтапов.Удалить(Предшественник);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//Удаление шаблона бизнес-процесса
			РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьШаблонДействияЭтапаПроцесса(Этап.ШаблонБизнесПроцесса);
			Форма.Объект.Этапы.Удалить(Этап);
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЭтапЕстьСредиПредшественников(Знач Объект, ИдентификаторЭтапа)
	
	Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
		
КонецФункции

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа)
	
	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа)
	
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьФактНастройкиКомплексногоПроцесса(ВладелецШаблона) Экспорт
	
	Если ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(ВладелецШаблона.ВладелецШаблона) Тогда
		Возврат ПолучитьФактНастройкиКомплексногоПроцесса(ВладелецШаблона.ВладелецШаблона)
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Обработчик регламентного задания ФоноваяМаршрутизацияКомплексныхПроцессов
//
Процедура ФоноваяМаршрутизацияКомплексныхПроцессов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов") Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КомплексныйПроцесс,
		|	ОчередьМаршрутизацииКомплексныхПроцессов.ЗавершившеесяДействие,
		|	ОчередьМаршрутизацииКомплексныхПроцессов.ЗадачаОжидания,
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КоличествоПопытокОбработки
		|ИЗ
		|	РегистрСведений.ОчередьМаршрутизацииКомплексныхПроцессов КАК ОчередьМаршрутизацииКомплексныхПроцессов
		|ГДЕ
		|	ОчередьМаршрутизацииКомплексныхПроцессов.КоличествоПопытокОбработки < 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьМаршрутизацииКомплексныхПроцессов.МоментВремени";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.КомплексныйПроцесс);
			Исключение
				ОтменитьТранзакцию();
				Продолжить;
			КонецПопытки;
			
			КомплексныйПроцессОбъект = Выборка.КомплексныйПроцесс.ПолучитьОбъект();
			
			МультипредметностьПереопределяемый.
				ОтключитьПроверкуПравУчастниковБизнесПроцессаНаПредметы(КомплексныйПроцессОбъект);
			
			НовыеПроцессы = Новый Массив;
			
			КомплексныйПроцессОбъект.СтартоватьНовыеДействия(
				НовыеПроцессы, 
				БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс, 
				Истина, 
				Выборка.ЗавершившеесяДействие);
				
			РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.УдалитьПроцесс(
				Выборка.КомплексныйПроцесс, Выборка.ЗавершившеесяДействие);
				
			ЗадачаОжидания = Выборка.ЗадачаОжидания;
			ЗадачаОжиданияОбъект = ЗадачаОжидания.ПолучитьОбъект();
			ЗадачаОжиданияОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОжиданияОбъект.ВыполнитьЗадачу();
			ЗадачаОжиданияОбъект.Удалить();
				
			РазблокироватьДанныеДляРедактирования(Выборка.КомплексныйПроцесс);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Если Выборка.КоличествоПопытокОбработки = 2 Тогда
				
				ТекстУведомления = НСтр(
					"ru = 'При фоновой маршрутизации процесса ""%1"" произошла ошибка:
					|%2'");
				
				ТекстУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстУведомления,
					Выборка.КомплексныйПроцесс,
					ОписаниеОшибки);
				
				АвторКомплексногоПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Выборка.КомплексныйПроцесс, "Автор");
				
				РаботаСУведомлениямиПрограммыСервер.ДобавитьУведомление(
					ТекущаяДатаСеанса(),
					ТекстУведомления,
					Перечисления.ВидыУведомленийПрограммы.Ошибка,
					АвторКомплексногоПроцесса,
					Выборка.КомплексныйПроцесс);
					
			КонецЕсли;
			
			РегистрыСведений.ОчередьМаршрутизацииКомплексныхПроцессов.
				ДобавитьИнформациюОНеудачнойОбработкеПроцесса(Выборка.КомплексныйПроцесс,
				Выборка.ЗавершившеесяДействие,
				ОписаниеОшибки);
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, является ли задача ведущей.
//
// Параметры:
//  Задача  - ЗадачаСсылка.ЗадачаИсполнителя - проверяемая задача
//
// Возвращаемое значение:
//   Булево   - принимает значение Истина, если задача ведущая.
//
Функция ЭтоВедущаяЗадача(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
	Запрос.УстановитьПараметр("СвязующаяЗадача", Задача);
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции