////////////////////////////////////////////////////////////////////////////////
// Подсистема "Адресный классификатор".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версии адресных объектов, записанные при последнем обновлении.
// Если записи об адресном объекте нет - возвращается дата 01.09.2008
// 
// Возвращаемое значение
//    СписокЗначений - в ключе помещается номер адресного объекта, в значении - дата выпуска версии.
//
Функция ВерсииАдресныхОбъектов() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Регион.КодАдресногоОбъектаВКоде КАК АдресныйОбъект
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|ГДЕ
		|	Регион.ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде=Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|УПОРЯДОЧИТЬ ПО
		|	АдресныйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Версии.АдресныйОбъект    КАК АдресныйОбъект,
		|	Версии.ДатаВыпускаВерсии КАК ДатаВыпускаВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектовАдресногоКлассификатора КАК Версии
		|");
	
	РезультатЗапроса= Запрос.ВыполнитьПакет();
	
	АдресныеОбъекты = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("АдресныйОбъект");
	УстановленныеВерсии = РезультатЗапроса[1].Выгрузить();
	
	Результат = Новый СписокЗначений;
	
	Для Каждого АдресныйОбъект Из АдресныеОбъекты Цикл
		ДобавитьВерсиюВСписок(Формат(АдресныйОбъект, "ЧЦ=2; ЧВН=; ЧГ=0"), УстановленныеВерсии, Результат);
	КонецЦикла;
	
	Если Результат.Количество() > 0 Тогда
		ДобавитьВерсиюВСписок("AL", УстановленныеВерсии, Результат);
		ДобавитьВерсиюВСписок("SO", УстановленныеВерсии, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура для загрузки данных в КЛАДР
//
// Параметры:
//    КодАдресногоОбъекта  - Строка - код адресного объекта в формате NN
//    ПутьКДаннымНаСервере - Строка - путь к каталогу на сервере, в котором хранятся файлы кладр
//    ЗагрузкаСВеб         - Булево - если Истина, данные загружаются с веб сервера 1С
//
Процедура ЗагрузитьКлассификаторПоАдресномуОбъекту(Знач КодАдресногоОбъекта, ПутьКДаннымНаСервере, ЗагрузкаСВеб) Экспорт
	
	КодАдресногоОбъекта = Лев(КодАдресногоОбъекта, 2);
	
	АльтернативныеНазвания = Новый ТаблицаЗначений;
	АльтернативныеНазвания.Колонки.Добавить("Код");
	АльтернативныеНазвания.Колонки.Добавить("Наименование");
	АльтернативныеНазвания.Колонки.Добавить("Сокращение");
	АльтернативныеНазвания.Колонки.Добавить("Индекс");
	
	АдресныеСведения = Новый ТаблицаЗначений;
	АдресныеСведения.Колонки.Добавить("Код");
	АдресныеСведения.Колонки.Добавить("КодАдресногоОбъектаВКоде");
	АдресныеСведения.Колонки.Добавить("Наименование");
	АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
	АдресныеСведения.Колонки.Добавить("Сокращение");
	АдресныеСведения.Колонки.Добавить("Индекс");
	АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
	АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
	АдресныеСведения.Колонки.Добавить("КодГородаВКоде");
	АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");
	АдресныеСведения.Колонки.Добавить("КодУлицыВКоде");
	АдресныеСведения.Колонки.Добавить("ПризнакАктуальности");
	
	ИндексПоКоду = АдресныеСведения.Индексы.Добавить("Код");
	
	// Имена файлов приведены к верхнему регистру
	
	ИмяФайлаАльтернативныхНазваний = ? (ЗагрузкаСВеб, "ALTN", "ALTNAMES");
    
    //{{1С-Минск
    //Постфикс                       = ? (ЗагрузкаСВеб, КодАдресногоОбъекта, "");
    
    НомерАО = Число(КодАдресногоОбъекта);
    Постфикс = НомерАО;
    Если НомерАО = 5 Тогда 
        Постфикс = 1;
    ИначеЕсли НомерАО < 6 Тогда
        Постфикс = НомерАО + 1;
    КонецЕсли;	
    
    // Загрузим районы, сельсоветы, населенные пункты
    ЗагрузитьАдресныеСведенияРБ(КодАдресногоОбъекта, 
    ПутьКДаннымНаСервере + "CITY", АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб,);
    // Загрузим улицы
    ЗагрузитьАдресныеСведенияРБ(КодАдресногоОбъекта,
    ПутьКДаннымНаСервере + "NNUL" + Постфикс, АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб,5);
    //}}1C-Минск
	
	СобытиеЖурналаРегистрации = СобытиеЖурналаРегистрации() + ".Загрузка из файлов";
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начата загрузка адресного классификатора по региону %1 из каталога ""%2""'"), 
			КодАдресногоОбъекта, ПутьКДаннымНаСервере));
    
    //1С-Минск
    //ЗагрузитьАдресныеСведения(КодАдресногоОбъекта, 
    //	ПутьКДаннымНаСервере + "KLADR" + Постфикс, АдресныеСведения, АльтернативныеНазвания);
    //
    //ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
    //	ПутьКДаннымНаСервере + "STREET" + Постфикс, АдресныеСведения, АльтернативныеНазвания, 5);
    //
    //ЗагрузитьАдресныеСведения(КодАдресногоОбъекта,
    //	ПутьКДаннымНаСервере + "DOMA" + Постфикс, АдресныеСведения, АльтернативныеНазвания, 6);
    //
    //ЗаполнитьАльтернативныеНазвания(ПутьКДаннымНаСервере + ИмяФайлаАльтернативныхНазваний + Постфикс, 
    //	АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб);
    //Конец 1С-Минск
	
	// Записываем классификатор с выравниванием кода
	АдресныеСведения.Индексы.Удалить(ИндексПоКоду);
    Для Каждого Элемент Из АдресныеСведения Цикл
        //1С-Минск
		Элемент.Код = Лев(Формат(Число(Элемент.Код), "ЧГ=0") + "000000000000000000000", 20);
		//Элемент.Код = Лев(Строка(Элемент.Код) + "000000000000000000000", 21);
        
        //Конец 1С-Минск
	КонецЦикла;
	
	НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Использование = Истина;
	НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Значение = Число(КодАдресногоОбъекта);
	НаборАдресныхСведений.Загрузить(АдресныеСведения);
	НаборАдресныхСведений.Записать();
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загружен адресный классификатор по региону %1, %2 записей.'"), 
			КодАдресногоОбъекта, АдресныеСведения.Количество()));
КонецПроцедуры

// Процедура очищает адресные сведений по переданным адресным объектам.
// 
// Параметры:
//    МассивАдресныхОбъектов - Массив - каждый элемент - строка, номер адресного объекта в формате NN
//
Процедура УдалитьАдресныеСведения(Знач МассивАдресныхОбъектов) Экспорт
	
	Для Каждого КодАдресногоОбъекта Из МассивАдресныхОбъектов Цикл
		НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Использование = Истина;
		НаборАдресныхСведений.Отбор.КодАдресногоОбъектаВКоде.Значение = Число(КодАдресногоОбъекта);
		НаборАдресныхСведений.Записать();
		УстановитьВерсиюКлассификатора(КодАдресногоОбъекта);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает число адресных объектов по которым заполнены адресные сведения
//
// Возвращаемое значение:
//    Число заполненных адресных объектов.
//
Функция ЧислоЗаполненныхАдресныхОбъектов() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Регион.КодАдресногоОбъектаВКоде) КАК КоличествоЗагруженных
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Регион
		|ГДЕ
		|	Регион.ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень2
		|		ГДЕ 
		|			Уровень2.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень3
		|		ГДЕ 
		|			Уровень3.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень4
		|		ГДЕ 
		|			Уровень4.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень5
		|		ГДЕ 
		|			Уровень5.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|
		|		ОБЪЕДИНИТЬ ВСЕ 
		|		ВЫБРАТЬ ПЕРВЫЕ 1 
		|			1 
		|		ИЗ 
		|			РегистрСведений.АдресныйКлассификатор КАК Уровень6
		|		ГДЕ 
		|			Уровень6.КодАдресногоОбъектаВКоде = Регион.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗагруженных;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает структуру, содержащую информацию по адресному объекту
// 
// Параметры
//    КодАдресногоОбъекта - Строка - номер адресного объекта от 1 до 89 + 99 в формате NN
//
// Возвращаемое значение
//    Структура, с ключами:
//        КодАдресногоОбъекта - Строка - код адресного объекта.
//        Наименование        - Строка - наименование адресного объекта.
//        Сокращение          - Строка - сокращение адресного объекта.
//        Индекс              - Строка - индекс.
//
Функция ИнформацияПоАдресномуОбъекту(КодАдресногоОбъекта) Экспорт
	
	КлассификаторАдресныхОбъектовXML = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторАдресныхОбъектовXML).Данные;
	
	Результат = Новый Структура("КодАдресногоОбъекта, Наименование, Сокращение, Индекс");
	
	Если КодАдресногоОбъекта = "AL" Тогда
		// 
		Результат.КодАдресногоОбъекта = "AL";
		Результат.Наименование        = НСтр("ru = 'Альтернативные названия'");
		Результат.Сокращение          = "";
		Результат.Индекс              = "";
		//
	ИначеЕсли КодАдресногоОбъекта = "SO" Тогда
		// 
		Результат.КодАдресногоОбъекта = "SO";
		Результат.Наименование        = НСтр("ru = 'Адресные сокращения'");
		Результат.Сокращение          = "";
		Результат.Индекс              = "";
	Иначе
		Для Каждого АдресныйОбъект Из КлассификаторТаблица Цикл
			Если Лев(АдресныйОбъект.Code, 2) = КодАдресногоОбъекта Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Результат.КодАдресногоОбъекта = АдресныйОбъект.Code;
		Результат.Наименование        = АдресныйОбъект.Name;
		Результат.Сокращение          = АдресныйОбъект.Socr;
		Результат.Индекс              = АдресныйОбъект.Index;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Найти по индексу записи в адресном классификаторе.
//
// Параметры:
//    Индекс - Строка - индекс, по которому будет производиться поиск 
//
// Возвращаемое значение:
//    Структура с полями:
//        Количество          - Число - количество найденных вариантов
//        НайденныйРегион     - Строка - если найден один регион
//        НайденныйРайон      - Строка - если найден один район
//        ПризнакАктуальности - Число - признак актуальности если найден один вариант
//        АдресВХранилище     - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Функция НайтиЗаписиПоИндексу(Индекс) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПризнакАктуальности", 0);
	Результат.Вставить("НайденныйРегион",     "");
	Результат.Вставить("НайденныйРайон",      "");
	Результат.Вставить("Количество",          0);
	
	// Проверим правильность ввода индекса
	Если СтрДлина(Индекс) <> 6 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 1.Найдем записи по индексу, а также записи родительских элементов, и сохраним всё во временных таблицах 
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|
		|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Индекс = &Индекс
		|ИНДЕКСИРОВАТЬ ПО 
		|	КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде
		|";
	Запрос.УстановитьПараметр("Индекс", Индекс);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получим списки регионов и районов
	ЗапросРегионов = Новый Запрос;
	ЗапросРегионов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРегионов.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регионы.КодРегиона          КАК КодРегиона,
		|	Регионы.Наименование        КАК Наименование,
		|	Регионы.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	Регионы КАК Регионы
		|";
	ВыборкаРегионов = ЗапросРегионов.Выполнить().Выбрать();
	
	ЗапросРайонов = Новый Запрос;
	ЗапросРайонов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРайонов.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Районы.КодРайона           КАК КодРайона,
		|	Районы.Наименование        КАК Наименование,
		|	Районы.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	Районы КАК Районы
		|";
	ВыборкаРайонов = ЗапросРайонов.Выполнить().Выбрать();
	
	// 3.Анализируем количество регионов и районов и на основании этого принимаем решение
	// Если не найдены регионы или районы - значит нет ни одного подходящего адреса - можно завершить поиск
	Если ВыборкаРегионов.Количество() = 0 Тогда
		Возврат Результат;
		// Если найдено несколько регионов, то пользователю нужно будет указывать при выборе также регион и район
	ИначеЕсли ВыборкаРегионов.Количество() > 1 Тогда
		ДетализацияДоУровня = 1;
		Результат.НайденныйРегион = "";
		Результат.НайденныйРайон = "";
		// Если найдено несколько районов, то пользователю нужно будет указывать при выборе также район
	ИначеЕсли ВыборкаРайонов.Количество() <> 1 Тогда // ВыборкаРегионов.Количество() = 1
		ДетализацияДоУровня = 2;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		Результат.НайденныйРайон = "";
		// Если же найден только один регион и один район - то их выбирать не нужно
	ИначеЕсли ВыборкаРайонов.Количество() = 1 Тогда
		ДетализацияДоУровня = 3;
		ВыборкаРегионов.Следующий();
		Результат.НайденныйРегион = ВыборкаРегионов.Наименование;
		ВыборкаРайонов.Следующий();
		Результат.НайденныйРайон = ВыборкаРайонов.Наименование;
	КонецЕсли;
	
	// 4.Формируем список найденных адресов, с соответствующей детализацией
	ЗапросАдресов = Новый Запрос;
	ЗапросАдресов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросАдресов.Текст = "
		|ВЫБРАТЬ
		|	Адреса.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	Адреса.Код                  КАК Код,
		|	Адреса.ПризнакАктуальности  КАК ПризнакАктуальности,
		|
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Регионы.Наименование, """")          КАК Регион,
		|	""""                                          КАК Описание
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.Код = НаселенныеПункты.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Города КАК Города
		|ПО 
		|	Адреса.Код = Города.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.Код = Районы.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Регионы КАК Регионы
		|ПО 
		|	Адреса.Код = Регионы.Код
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.Код = Улицы.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Улица,
		|	Код
		|";
	ВыборкаАдресов = ЗапросАдресов.Выполнить().Выбрать();
	
	// 5.Если найден один адрес - то в результат сохраняем компоненты адреса
	// Если же найдено несколько адресов то составляем таблицу адресов, 
	// формируя подробное описание адреса в зависимости от уровня детализации
	Количество = ВыборкаАдресов.Количество();
	Результат.Вставить("Количество", Количество);
	Если Количество = 1 Тогда
		ВыборкаАдресов.Следующий();
		Результат.Вставить("Регион", ВыборкаАдресов.Регион);
		Результат.Вставить("Район",  ВыборкаАдресов.Район);
		Результат.Вставить("Город",  ВыборкаАдресов.Город);
		Результат.Вставить("НаселенныйПункт", ВыборкаАдресов.НаселенныйПункт);
		Результат.Вставить("Улица",  ВыборкаАдресов.Улица);
		Результат.Вставить("ПризнакАктуальности", ВыборкаАдресов.ПризнакАктуальности);
		
	ИначеЕсли Количество > 1 Тогда
		НайденныеЗаписиПоИндексу = Новый ТаблицаЗначений;
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Улица",    Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("Код",      Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ПризнакАктуальности",  Новый ОписаниеТипов("Число"));
		НайденныеЗаписиПоИндексу.Колонки.Добавить("ТипАдресногоЭлемента", Новый ОписаниеТипов("Число"));
		
		Пока ВыборкаАдресов.Следующий() Цикл
			// Не добавляем повторы улиц для домов
			Если ВыборкаАдресов.ТипАдресногоЭлемента = 6 
			     И НайденныеЗаписиПоИндексу.Найти(ВыборкаАдресов.Улица, "Улица")<>Неопределено
			Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НайденныеЗаписиПоИндексу.Добавить();
			НоваяСтрока.Код = ВыборкаАдресов.Код;
			НоваяСтрока.ПризнакАктуальности = ВыборкаАдресов.ПризнакАктуальности;
			НоваяСтрока.ТипАдресногоЭлемента = ВыборкаАдресов.ТипАдресногоЭлемента;
			НоваяСтрока.Улица = ?(ВыборкаАдресов.ТипАдресногоЭлемента > 4, ВыборкаАдресов.Улица, НСтр("ru='< Без улицы >'"));
	
			НоваяСтрока.Описание = СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня,
				ВыборкаАдресов.Регион, ВыборкаАдресов.Район, ВыборкаАдресов.Город, ВыборкаАдресов.НаселенныйПункт);
		КонецЦикла;
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(НайденныеЗаписиПоИндексу, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресВХранилище", АдресВХранилище);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//    КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//    Результат - структура с полями, в которую выгружается результат поиска:
//        ПризнакАктуальности - Число - признак актуальности найденного адреса
//        Регион              - Строка - наименование найденного региона
//        Район               - Строка - наименование найденного района
//        Город               - Строка - наименование найденного города
//        НаселенныйПункт     - Строка - наименование найденного населенного пункта
//        Улица               - Строка - наименование найденной улицы
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// 1.Раскладываем адрес и элементы адреса по временным таблицам
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.Код                  КАК Код,
		|
//{{1С-Минск
		|	ВЫБОР КОГДА АдресныйКлассификатор.ТипАдресногоЭлемента < 4 ТОГДА
		|	    АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение
		|	ИНАЧЕ
		|	    АдресныйКлассификатор.Сокращение  + "" "" + АдресныйКлассификатор.Наименование
		|	КОНЕЦ КАК Наименование,
		//|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
//}}1C-Минск
		|
		|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде            КАК КодУлицыВКоде
		|ПОМЕСТИТЬ 
		|	Адреса
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &КодАдресногоЭлемента
		|";
	Запрос.УстановитьПараметр("КодАдресногоЭлемента", КодАдресногоЭлемента);
	Запрос.Выполнить();
	РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц);
	
	// 2.Получаем наименование элементов адреса из временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Адреса.Код                                    КАК Код,
		|	ЕСТЬNULL(Регионы.Наименование, """")          КАК Регион,
		|	ЕСТЬNULL(Районы.Наименование, """")           КАК Район,
		|	ЕСТЬNULL(Города.Наименование, """")           КАК Город,
		|	ЕСТЬNULL(НаселенныеПункты.Наименование, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(Улицы.Наименование, """")            КАК Улица,
		|	Адреса.ПризнакАктуальности                    КАК ПризнакАктуальности
		|ИЗ
		|	Адреса КАК Адреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Регионы КАК Регионы
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = Регионы.КодАдресногоОбъектаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Районы КАК Районы
		|ПО 
		|	Адреса.КодРайонаВКоде = Районы.КодРайонаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Города КАК Города
		|ПО 
		|	Адреса.КодГородаВКоде = Города.КодГородаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НаселенныеПункты КАК НаселенныеПункты
		|ПО 
		|	Адреса.КодНаселенногоПунктаВКоде = НаселенныеПункты.КодНаселенногоПунктаВКоде
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	Улицы КАК Улицы
		|ПО 
		|	Адреса.КодУлицыВКоде = Улицы.КодУлицыВКоде
		|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// 3.Выводим полученные данные в результат
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Вставить("Регион", "");
		Результат.Вставить("Район", "");
		Результат.Вставить("Город", "");
		Результат.Вставить("НаселенныйПункт", "");
		Результат.Вставить("Улица", "");
		Результат.Вставить("ПризнакАктуальности", 0);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Вставить("Регион", Выборка.Регион);
		Результат.Вставить("Район", Выборка.Район);
		Результат.Вставить("Город", Выборка.Город);
		Результат.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
		Результат.Вставить("Улица", Выборка.Улица);
		Результат.Вставить("ПризнакАктуальности", Выборка.ПризнакАктуальности);
	КонецЕсли;
	
КонецПроцедуры

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//    КодАдресногоЭлемента - Число  - код адресного элемента, по которому ищутся компоненты адреса 
//    Дом                  - Строка - номер дома, если требуется
//    Корпус               - Строка - номер корпуса, если требуется
//    Квартира             - Строка - номер квартиры, если требуется
//
// Возвращаемое значение:
//    Структура - с полями:
//      * Индекс          - Строка - индекс адреса по переданным параметрам
//      * Регион          - Строка - регион по переданному коду
//      * Район           - Строка - район по переданному коду
//      * Город           - Строка - город по переданному коду
//      * НаселенныйПункт - Строка - населенный пункт по переданному коду
//      * Улица           - Строка - улица по переданному коду
//      * Дом             - Строка - переданный номер дома
//      * Корпус          - Строка - переданный номер корпуса
//      * Квартира        - Строка - переданный номер квартиры
//
Функция СтруктураАдреса(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	СтруктураАдреса = Новый Структура();
	ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, СтруктураАдреса);
	
	// Получение индекса по коду
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.Код = &Код
		|";
	Запрос.УстановитьПараметр("Код", КодАдресногоЭлемента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Индекс = ИндексАдреса(СтруктураАдреса.Регион, 
			СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица, 
			Дом, Корпус);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Индекс = Выборка.Индекс;
	КонецЕсли;
	СтруктураАдреса.Вставить("Индекс", Индекс);
	
	СтруктураАдреса.Вставить("Дом", Дом);
	СтруктураАдреса.Вставить("Корпус", Корпус);
	СтруктураАдреса.Вставить("Квартира", Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

// Определяет индекс по переданным региону, району, городу, населенному пункту, улице, дому и корпусу.
//
// Параметры: 
//    НазваниеРегиона           - название региона с сокращением
//    НазваниеРайона            - название района с сокращением
//    НазваниеГорода            - название города с сокращением
//    НазваниеНаселенногоПункта - название населенного пункта с сокращением
//    Улица                     - название улицы с сокращением
//    НомерДома                 - номер дома, для которого необходимо получить индекс
//    НомерКорпуса              - номер корпуса
//    РодительИндекса           - переменная, в которой сохраняется структура найденного адресного элемента
//
// Возвращаемое значение:
//    Строка - шестизначный почтовый индекс
//
Функция ИндексАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	РодительИндекса = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	Индекс = "";
	Загружен = СтруктураЗагруженныхЭлементовАдреса(
		НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1, РодительИндекса);
	Если Регион.Код > 0 Тогда
		РодительИндекса = Регион;
		Если Не ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	// Если регионы загружены, но указанный регион не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Регион.Код = 0 И Загружен.Регион И Не ПустаяСтрока(НазваниеРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительИндекса);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если Не ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	// Если районы загружены, но указанный район не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Район.Код = 0 И Загружен.Район И Не ПустаяСтрока(НазваниеРайона) Тогда
		Возврат "";
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительИндекса);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если Не ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	// Если города загружены, но указанный город не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли Город.Код = 0 И Загружен.Город И Не ПустаяСтрока(НазваниеГорода) Тогда
		Возврат "";
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительИндекса);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если Не ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	// Если населенные пункты загружены, но указанный населенный пункт не найден, 
	// значит он некорректен, возвращаем пустой индекс
	ИначеЕсли НаселенныйПункт.Код = 0 И Загружен.НаселенныйПункт И Не ПустаяСтрока(НазваниеНаселенногоПункта) Тогда
		Возврат "";
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительИндекса);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если Не ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	Иначе
		// Если улицы загружены, но указанная улица не найдена, 
		// значит она некорректна, возвращаем пустой индекс
		Если Загружен.Улица И Не ПустаяСтрока(НазваниеУлицы) Тогда
			Возврат "";
		Иначе
			// Если улица не указана - то пытаемся вместо неё подставить что-нибудь
			// из более высокого уровня
			Если НаселенныйПункт.Код > 0 Тогда
				Улица = НаселенныйПункт;
			ИначеЕсли Город.Код > 0 Тогда
				Улица = Город;
			ИначеЕсли Район.Код > 0 Тогда
				Улица = Район;
			КонецЕсли;
			ИндексДомаКорпуса = ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
			Если Не ПустаяСтрока(ИндексДомаКорпуса) Тогда
				Индекс = ИндексДомаКорпуса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры:
//    Текст               - Строка - введенный пользователем текст в адресном элементе ввода
//    Регион              - Строка - ранее введенное название региона
//    Район               - Строка - ранее введенное название района
//    Город               - Строка - ранее введенное название города
//    НаселенныйПункт     - Строка - ранее введенное название населенного пункта
//    УровеньЭлемента     - Число  - идентификатор адресного элемента ввода:
//                                   1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//    ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
//    СписокЗначений или Неопределено
//
Функция АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности = 0) Экспорт
	
	СтруктураОграничений = ПолучитьСтруктуруОграниченийПоАдресу(
		Регион, Район, Город, НаселенныйПункт, "", УровеньЭлемента);
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Текст, СтруктураОграничений, 51);
	
	Количество = РезультатЗапроса.Количество();
	Если (Количество = 0) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ПолноеНаименование = СокрЛП(СтрокаРезультата.Наименование) + " " + СокрЛП(СтрокаРезультата.Сокращение);
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Значение", ПолноеНаименование);
		СтруктураРезультата.Вставить("ПометкаУдаления", (СтрокаРезультата.ПризнакАктуальности <> 0));
		Если СтруктураРезультата.ПометкаУдаления Тогда
			ТекстПредупреждения = НСтр("ru='""%ПолноеНаименование%"" не актуален.'");
			ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПолноеНаименование%", ПолноеНаименование);
			СтруктураРезультата.Вставить("Предупреждение", ТекстПредупреждения);
		КонецЕсли;
		Результат.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие адреса КЛАДР по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу, при этом выводит все поля по каждому найденному элементу адреса
//
// Параметры: 
//    УказанныйИндекс           - Строка - индекс
//    НазваниеРегиона           - Строка - название региона(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//    НомерДома                 - Строка - номер дома, для которого необходимо получить индекс
//    НомерКорпуса              - Строка - номер корпуса
//
// Возвращаемое значение:
//    Структура с полями:
//        Индекс          - Структура - структура полей найденного индекса
//        Регион          - Структура - структура полей найденного региона
//        Район           - Структура - структура полей найденного района
//        Город           - Структура - структура полей найденного города
//        НаселенныйПункт - Структура - структура полей найденного населенного пункта
//        Улица           - Структура - структура полей найденной улицы
//        Дом             - Структура - структура полей найденного дома
//        ЕстьОшибки      - Булево    - найдены ли ошибки при проверке
//        СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента
//                                      а в качестве значения - подробный текст ошибки.
//
Функция ПроверитьСоответствиеАдресаКЛАДРу(Знач УказанныйИндекс = "", Знач НазваниеРегиона = "", Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Знач НомерДома = "", Знач НомерКорпуса = "") Экспорт
	
	// Проверяем основные адресные элементы
	Родитель = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	Если Регион.Код > 0 Тогда
		Родитель = Регион;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
	Если Район.Код > 0 Тогда
		Родитель = Район;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
	Если Город.Код > 0 Тогда
		Родитель = Город;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
	Если НаселенныйПункт.Код > 0 Тогда
		Родитель = НаселенныйПункт;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
	Если Улица.Код > 0 Тогда
		Родитель = Улица;
	КонецЕсли;
	
	Индекс = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	НомерИндекса = ИндексАдреса(
		НазваниеРегиона, 
		НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома, НомерКорпуса, Индекс
	);
	
	// Восстанавливаем населенный пункт, который мог потеряться
	Если ПустаяСтрока(НазваниеНаселенногоПункта) И НаселенныйПункт.Код = 0 И Улица.Код <> 0 Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
			|	АдресныйКлассификатор.Код                       КАК Код,
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
			|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
			|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
			|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
			|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде,
			|	АдресныйКлассификатор.Наименование              КАК Наименование,
			|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
			|	АдресныйКлассификатор.Индекс                    КАК Индекс,
			|	АдресныйКлассификатор.АльтернативныеНазвания    КАК АльтернативныеНазвания,
			|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	  АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
			|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
			|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 4
			|
			|	// Полное использование индекса
			|	И АдресныйКлассификатор.КодУлицыВКоде = 0
			|");
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Родитель.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Родитель.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Родитель.КодНаселенногоПунктаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НаселенныйПункт = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				НаселенныйПункт.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем город, который мог потеряться
	Если ПустаяСтрока(НазваниеГорода) И Город.Код = 0 И НаселенныйПункт.Код <> 0 Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
			|	АдресныйКлассификатор.Код                       КАК Код,
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
			|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
			|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
			|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
			|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде,
			|	АдресныйКлассификатор.Наименование              КАК Наименование,
			|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
			|	АдресныйКлассификатор.Индекс                    КАК Индекс,
			|	АдресныйКлассификатор.АльтернативныеНазвания    КАК АльтернативныеНазвания,
			|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
			|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
			|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 3
			|
			|	// Полное использование индекса
			|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = 0
			|	И АдресныйКлассификатор.КодУлицыВКоде = 0
			|");
		
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Родитель.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде", Родитель.КодГородаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Город = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Город.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем район, который мог потеряться
	Если ПустаяСтрока(НазваниеРайона) И Район.Код = 0 И Город.Код <> 0 Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
			|	АдресныйКлассификатор.Код КАК                   Код,
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
			|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
			|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
			|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
			|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде,
			|	АдресныйКлассификатор.Наименование              КАК Наименование,
			|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
			|	АдресныйКлассификатор.Индекс                    КАК Индекс,
			|	АдресныйКлассификатор.АльтернативныеНазвания    КАК АльтернативныеНазвания,
			|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
			|	И АдресныйКлассификатор.ТипАдресногоЭлемента = 2
			|
			|	// Полное использование индекса
			|	И АдресныйКлассификатор.КодГородаВКоде = 0
			|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = 0
			|	И АдресныйКлассификатор.КодУлицыВКоде = 0
			|");
		
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Родитель.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде", Родитель.КодРайонаВКоде);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Район = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				Район.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сохраняем в структуру
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("Регион", Регион);
	СтруктураПроверки.Вставить("Район", Район);
	СтруктураПроверки.Вставить("Город", Город);
	СтруктураПроверки.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураПроверки.Вставить("Улица", Улица);
	СтруктураПроверки.Вставить("Индекс", Индекс);
	
	// А теперь записываем ошибки
	ЕстьОшибки = Ложь;
	СтруктураОшибок = Новый Структура;
	Если Не ПустаяСтрока(НазваниеРегиона) И Регион.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Регион ""%НазваниеРегиона%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеРегиона%", НазваниеРегиона);
		СтруктураОшибок.Вставить("Регион", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеРайона) И Район.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Район ""%НазваниеРайона%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеРайона%", НазваниеРайона);
		СтруктураОшибок.Вставить("Район", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеГорода) И Город.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Город ""%НазваниеГорода%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеГорода%", НазваниеГорода);
		СтруктураОшибок.Вставить("Город", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеНаселенногоПункта) И НаселенныйПункт.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Населенный пункт ""%НазваниеНаселенногоПункта%"" не найден в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеНаселенногоПункта%", НазваниеНаселенногоПункта);
		СтруктураОшибок.Вставить("НаселенныйПункт", СообщениеОбОшибке);
	КонецЕсли;
	Если Не ПустаяСтрока(НазваниеУлицы) И Улица.Код = 0 Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Улица ""%НазваниеУлицы%"" не найдена в адресном классификаторе.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НазваниеУлицы%", НазваниеУлицы);
		СтруктураОшибок.Вставить("Улица", СообщениеОбОшибке);
	КонецЕсли;
	
	// Теперь проверяем номер дома и корпуса
	Если Не (ПустаяСтрока(НомерДома) И ПустаяСтрока(НомерКорпуса)) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	АдресныйКлассификатор.Наименование КАК Наименование,
			|	АдресныйКлассификатор.Код          КАК Код,
			|	АдресныйКлассификатор.Индекс       КАК Индекс
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
			|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
			|	И АдресныйКлассификатор.КодРайонаВКоде            = &КодРайонаВКоде
			|	И АдресныйКлассификатор.КодГородаВКоде            = &КодГородаВКоде
			|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|	И АдресныйКлассификатор.КодУлицыВКоде             = &КодУлицыВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Улица.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Улица.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Улица.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде",             Улица.КодУлицыВКоде);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьДома = (Выборка.Количество() > 0);
		КодДома = 0;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
				Интервал = Врег(СокрЛП(Выборка.Наименование));
				
				Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал) Тогда
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
					КодДома = Выборка.Код;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
					КодДома = Выборка.Код;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодДома = 0 Тогда
			Дом = Новый Структура("Код, Наименование, Сокращение, ТипАдресногоЭлемента, Индекс,
				|КодАдресногоОбъектаВКоде, КодРайонаВКоде, КодГородаВКоде, КодНаселенногоПунктаВКоде, КодУлицыВКоде,
				|ПризнакАктульности",
				0, "", "", 0, "", 0, 0, 0, 0, 0, 0);
	
		Иначе
			Запрос.Текст = "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	АдресныйКлассификатор.Код                       КАК Код,
				|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде  КАК КодАдресногоОбъектаВКоде,
				|	АдресныйКлассификатор.Наименование              КАК Наименование,
				|	АдресныйКлассификатор.Сокращение                КАК Сокращение,
				|	АдресныйКлассификатор.Индекс                    КАК Индекс,
				|	АдресныйКлассификатор.ТипАдресногоЭлемента      КАК ТипАдресногоЭлемента,
				|	АдресныйКлассификатор.КодРайонаВКоде            КАК КодРайонаВКоде,
				|	АдресныйКлассификатор.КодГородаВКоде            КАК КодГородаВКоде,
				|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
				|	АдресныйКлассификатор.КодУлицыВКоде             КАК КодУлицыВКоде,
				|	АдресныйКлассификатор.ПризнакАктуальности       КАК ПризнакАктуальности
				|ИЗ
				|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
				|ГДЕ
				|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
				|	И АдресныйКлассификатор.Код = &КодДома
				|";
			Запрос.УстановитьПараметр("КодДома", КодДома);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Дом = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
			Иначе
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Дом = Новый Структура;
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					Дом.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		СтруктураПроверки.Вставить("Дом", Дом);
		
		// Дополнительная проверка на упакованные дома с данными ФИАС
		Если КодДома=0 Тогда
			ДополнительнаяПроверка = ДанныеЗданияПоДомуИКорпусу(Улица, НомерДома, НомерКорпуса);
			Если ДополнительнаяПроверка.ЕстьЗдания Тогда
				Если ДополнительнаяПроверка.Код<>Неопределено Тогда // Нашли
					КодДома = ДополнительнаяПроверка.Код;
				КонецЕсли;
			Иначе
				ЕстьДома = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Если по улице нет домов в КЛАДР - считаем, что ошибки нет
		// Если же по улице есть дома, и код дома не найден - то ошибка.
		Если КодДома = 0 И ЕстьДома Тогда
			ЕстьОшибки = Истина;
			Если ПустаяСтрока(НомерДома) Тогда
				СообщениеОбОшибке = НСтр("ru='Корпус (строение и т.п.) ""%НомерКорпуса%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерКорпуса%", НомерКорпуса);
				СтруктураОшибок.Вставить("Корпус", СообщениеОбОшибке);
			ИначеЕсли ПустаяСтрока(НомерКорпуса) ТОгда
				СообщениеОбОшибке = НСтр("ru='Дом (владение и.т.п.) ""%НомерДома%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерДома%", НомерДома);
				СтруктураОшибок.Вставить("Дом", СообщениеОбОшибке);
			Иначе
				СообщениеОбОшибке = НСтр("ru='Дом (владение и.т.п.) ""%НомерДома%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерДома%", НомерДома);
				СтруктураОшибок.Вставить("Дом", СообщениеОбОшибке);
				СообщениеОбОшибке = НСтр("ru='Корпус (строение и т.п.) ""%НомерКорпуса%"" не найден в адресном классификаторе.'");
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерКорпуса%", НомерКорпуса);
				СтруктураОшибок.Вставить("Корпус", СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка индекса
	Если Не ПустаяСтрока(УказанныйИндекс) Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	АдресныйКлассификатор.Индекс КАК Индекс
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			|ГДЕ
			|	АдресныйКлассификатор.Индекс = &УказанныйИндекс
			|");
		Запрос.УстановитьПараметр("УказанныйИндекс", УказанныйИндекс);
		Если Запрос.Выполнить().Пустой() Тогда
			СтруктураОшибок.Вставить("Индекс", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Индекс ""%1"" не найден в адресном классификаторе.'"), УказанныйИндекс));
			ЕстьОшибки = Истина;
			
		ИначеЕсли НомерИндекса <> УказанныйИндекс Тогда
			СтруктураОшибок.Вставить("Индекс", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Индекс ""%1"" не соответствует введенному адресу.'"), УказанныйИндекс));
			ЕстьОшибки = Истина;
			
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураПроверки.Вставить("ЕстьОшибки", ЕстьОшибки);
	СтруктураПроверки.Вставить("СтруктураОшибок", СтруктураОшибок);
	Возврат СтруктураПроверки;
КонецФункции

// Проверяет - загружен ли адресный элемент в базу.
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//    Уровень                   - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//    Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Функция АдресныйЭлементЗагружен(Знач НазваниеРегиона, Знач НазваниеРайона = "", Знач НазваниеГорода = "", Знач НазваниеНаселенногоПункта = "", Знач НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Родитель = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1,  Родитель);
	
	Если Уровень > 1 Тогда
		Если Регион.Код > 0 Тогда
			Родитель = Регион;
		КонецЕсли;
		Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, Родитель);
		
		Если Уровень > 2 Тогда
			Если Район.Код > 0 Тогда
				Родитель = Район;
			КонецЕсли;
			Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, Родитель);
			
			Если Уровень > 3 Тогда
				Если Город.Код > 0 Тогда
					Родитель = Город;
				КонецЕсли;
				НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, Родитель);
				
				Если Уровень > 4 Тогда
					Если НаселенныйПункт.Код > 0 Тогда
						Родитель = НаселенныйПункт;
					КонецЕсли;
					Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, Родитель);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Если не указан уровень или указан 1й уровень, то проверяем существование всех уровней
	Если Уровень=1 Тогда
		Запрос.Текст = "
			|               ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=2 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=3 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=4 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=5 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 Код ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ ТипАдресногоЭлемента=6 И КодАдресногоОбъектаВКоде=&КодАдресногоОбъектаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 2й уровень, то проверяем существование районов в регионе
	ИначеЕсли Уровень = 2 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 2
			|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		
	// Если указан 3й уровень, то проверяем существование городов в районе
	ИначеЕсли Уровень = 3 Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 3
		|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И КодРайонаВКоде           = &КодРайонаВКоде
		|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",           Район.КодРайонаВКоде);
		
	// Если указан 4й уровень, то проверяем существование населенных пунктов в городе
	ИначеЕсли Уровень = 4 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 4
			|	И КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде           = &КодРайонаВКоде
			|	И КодГородаВКоде           = &КодГородаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",           Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",           Город.КодГородаВКоде);
		
	// Если указан 5й уровень, то проверяем существование улиц в населенном пункте
	ИначеЕсли Уровень = 5 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 5
			|	И КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде            = &КодРайонаВКоде
			|	И КодГородаВКоде            = &КодГородаВКоде
			|	И КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		
	// Если указан 6й уровень, то проверяем существование домов на улице
	ИначеЕсли Уровень = 6 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Код
			|ИЗ
			|	РегистрСведений.АдресныйКлассификатор
			|ГДЕ
			|	ТипАдресногоЭлемента = 6
			|	И КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
			|	И КодРайонаВКоде            = &КодРайонаВКоде
			|	И КодГородаВКоде            = &КодГородаВКоде
			|	И КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
			|	И КодУлицыВКоде             = &КодУлицыВКоде
			|";
		Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Регион.КодАдресногоОбъектаВКоде);
		Запрос.УстановитьПараметр("КодРайонаВКоде",            Район.КодРайонаВКоде);
		Запрос.УстановитьПараметр("КодГородаВКоде",            Город.КодГородаВКоде);
		Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", НаселенныйПункт.КодНаселенногоПунктаВКоде);
		Запрос.УстановитьПараметр("КодУлицыВКоде",             Улица.КодУлицыВКоде);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// По полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//    СтрокаЭлемента     - Строка - строка элемента.
//    АдресноеСокращение - Строка - адресное сокращение.
//
// Возвращаемое значение:
//    Строка - имя и адресное сокращение.
//
Функция ИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВсеСокращения.Сокращение)               КАК КоличествоСокращений,
		|	ЕСТЬNULL(СУММА(ПоискСокращения.ФлагСокращения), 0) КАК ФлагСокращения
		|ИЗ 
		|	РегистрСведений.АдресныеСокращения КАК ВсеСокращения
		|ЛЕВОЕ СОЕДИНЕНИЕ (
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ФлагСокращения
		|	ИЗ
		|		РегистрСведений.АдресныеСокращения
		|) КАК ПоискСокращения
		|ПО 
		|	Сокращение = &Сокращение
		|");
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	
	Результат = Запрос.Выполнить().Выгрузить()[0];
	Если Результат.КоличествоСокращений > 0 И Результат.ФлагСокращения = 0 Тогда
		// Сокращения загружены, но нужного нет
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
	Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
КонецФункции

// По переданным элементам адреса указывает, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры: 
//    НазваниеРегиона           - Строка - название региона(с сокращением)
//    НазваниеРайона            - Строка - название района(с сокращением)
//    НазваниеГорода            - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы             - Строка - название улицы(с сокращением)
//
// Возвращаемое значение:
//    Структура с полями:
//         Регион          - Булево - регион загружен
//         Район           - Булево - район загружен
//         Город           - Булево - город загружен
//         НаселенныйПункт - Булево - населенный пункт загружен
//         Улица           - Булево - улица загружена
//
Функция СтруктураЗагруженныхЭлементовАдреса(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода,
	Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт

	СтруктураЗагруженных = Новый Структура("Регион, Район, Город, НаселенныйПункт, Улица, Дом",
		АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 1),
		АдресныйЭлементЗагружен(НазваниеРегиона, , , , , 2),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, , , , 3),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, , , 4),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, , 5),
		АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, 6));
	
	Возврат СтруктураЗагруженных;
КонецФункции

// Возвращает наименование региона по коду.
//
// Параметры:
//    КодРегиона - Число - код региона.
//
// Возвращаемое значение:
//    Строка - наименование региона.
//
Функция НаименованиеРегионаПоКоду(КодРегиона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента",     1);
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодРегиона);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение   КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НазваниеЭлемента = СокрЛП(Выборка.Наименование + " " + Выборка.Сокращение);
	Возврат НазваниеЭлемента;
	
КонецФункции

// Возвращает код региона по наименованию.
//
// Параметры:
//    Регион - Строка - наименование региона.
//
// Возвращаемое значение:
//    Число - код региона.
//
Функция КодРегионаПоНаименованию(Регион) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование
		|");
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	Запрос.УстановитьПараметр("Наименование",         Регион);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат "";
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Код;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные функции, вызываемые из формы выбора адресного классификатора

// Возвращает структуру ограничений по переданным параметрам со значениями адресных полей.
//
// Параметры: 
//    НазваниеРегиона           - название региона с сокращением
//    НазваниеРайона            - название района с сокращением
//    НазваниеГорода            - название города с сокращением
//    НазваниеНаселенногоПункта - название населенного пункта с сокращением
//    НазваниеУлицы             - название улицы с сокращением
//    КодРодителя               - Число - код родительского элемента
//    Уровень                   - Число - текущий уровень элемента
//
// Возвращаемое значение:
//    Структура со следующими полями:
//        КодАдресногоОбъектаВКоде  - Строка - код региона для ограничения
//        КодРайонаВКоде            - Строка - код района для ограничения
//        КодГородаВКоде            - Строка - код города для ограничения
//        КодНаселенногоПунктаВКоде - Строка - код населенного пункта для ограничения
//        КодУлицыВКод              - Строка - код улицы для ограничения
//        ТипАдресногоЭлемента      - Число - текущий уровень элемента
//
Функция ВернутьСтруктуруОграниченийПоРодителю(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, КодРодителя, Уровень) Экспорт
	
	СтруктураОграничений = Новый Структура();
	
	РодительскийЭлемент = ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(
		НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	
	УровеньРодителя = РодительскийЭлемент.ТипАдресногоЭлемента;
	КодРодителя     = РодительскийЭлемент.Код;
	
	СтруктураОграничений.Вставить("ТипАдресногоЭлемента", Уровень);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодАдресногоОбъектаВКоде", 1, РодительскийЭлемент.КодАдресногоОбъектаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодРайонаВКоде", 2, РодительскийЭлемент.КодРайонаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодГородаВКоде", 3, РодительскийЭлемент.КодГородаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодНаселенногоПунктаВКоде", 4, РодительскийЭлемент.КодНаселенногоПунктаВКоде);
	
	ДобавитьКодВСтруктуру(Уровень, УровеньРодителя, СтруктураОграничений,
		"КодУлицыВКоде", 5, ?(Уровень<5, 0, РодительскийЭлемент.КодУлицыВКоде));
	
	Возврат СтруктураОграничений;
КонецФункции

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры: 
//    НазваниеРегиона           - название региона с сокращением
//    НазваниеРайона            - название района с сокращением
//    НазваниеГорода            - название города с сокращением
//    НазваниеНаселенногоПункта - название населенного пункта с сокращением
//    НазваниеУлицы             - название улицы с сокращением
//
// Возвращаемое значение:
//    Структура полей по найденому адресному элементу (см. функцию "АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()")
//
Функция ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы) Экспорт
	
	РодительскийЭлемент = АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	
	Регион = ПолучитьАдресныйЭлемент(НазваниеРегиона, 1, РодительскийЭлемент);
	Если Регион.Код > 0 Тогда
		РодительскийЭлемент = Регион;
	КонецЕсли;
	
	Район = ПолучитьАдресныйЭлемент(НазваниеРайона, 2, РодительскийЭлемент);
	Если Район.Код > 0 Тогда
		РодительскийЭлемент = Район;
	КонецЕсли;
	
	Город = ПолучитьАдресныйЭлемент(НазваниеГорода, 3, РодительскийЭлемент);
	Если Город.Код > 0 Тогда
		РодительскийЭлемент = Город;
	КонецЕсли;
	
	НаселенныйПункт = ПолучитьАдресныйЭлемент(НазваниеНаселенногоПункта, 4, РодительскийЭлемент);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительскийЭлемент = НаселенныйПункт;
	КонецЕсли;
	
	Улица = ПолучитьАдресныйЭлемент(НазваниеУлицы, 5, РодительскийЭлемент);
	Если Улица.Код > 0 Тогда
		РодительскийЭлемент = Улица;
	КонецЕсли;
	
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()
	Иначе
		Возврат РодительскийЭлемент;
	КонецЕсли;
	
КонецФункции

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//    Регион          - строка - строка, куда будет помещено строковое представление "родительского" региона.
//    Район           - строка - строка, куда будет помещено строковое представление "родительского" района.
//    Город           - строка - строка, куда будет помещено строковое представление "родительского" города.
//    НаселенныйПункт - строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//    Улица           - строка - строка, куда будет помещено строковое представление "родительской" улицы.
//    Дом             - строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//    Корпус          - строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//    Квартира        - строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//    Уровень         - Число - уровень адресного элемента.
//
Процедура ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень) Экспорт
	
	// Очистка адресного элемента и всего, что ниже него по иерархии
	Если Уровень = 1 Тогда
		Район           = "";
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 2 Тогда
		Город           = "";
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
	
	ИначеЕсли Уровень = 3 Тогда
		НаселенныйПункт = "";
		Улица           = "";
		Дом             = "";
		Корпус          = "";
		Квартира        = "";
		
	ИначеЕсли Уровень = 4 Тогда
		Улица    = "";
		Дом      = "";
		Корпус   = "";
		Квартира = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции

// Устарела. Следует использовать ВерсииАдресныхОбъектов.
//
Функция ПолучитьВерсииАдресныхОбъектов() Экспорт
	
	Возврат ВерсииАдресныхОбъектов();
	
КонецФункции

// Устарела. Следует использовать СтруктураАдреса.
//
Функция ПолучитьСтруктуруАдреса(КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	Возврат СтруктураАдреса(КодАдресногоЭлемента, Дом, Корпус, Квартира);
	
КонецФункции

// Устарела. Следует использовать ИндексАдреса.
//
Функция ПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, 
	Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса, РодительИндекса = Неопределено) Экспорт

	Возврат ИндексАдреса(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, 
		НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса);
	
КонецФункции

// Устарела. Следует использовать ИмяИАдресноеСокращение.
//
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Возврат ИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	
КонецФункции

// Устарела. Следует использовать НаименованиеРегионаПоКоду.
//
Функция ПолучитьНаименованиеРегионаПоКоду(КодРегиона) Экспорт
	
	Возврат НаименованиеРегионаПоКоду(КодРегиона);
	
КонецФункции

// Устарела. Следует использовать КодРегионаПоНаименованию.
//
Функция ПолучитьКодРегионаПоНаименованию(Регион) Экспорт
	
	Возврат КодРегионаПоНаименованию(Регион);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"АдресныйКлассификатор");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам"].Добавить(
		"АдресныйКлассификатор");
		
КонецПроцедуры

// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
// при создании информационной базы или обновлении программы.
//
// Параметры:
//  ЗапросыРазрешений - Массив - список значений, возвращенных функцией
//                      РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов().
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка обновления
	ЗапросыРазрешений.Добавить(
		РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(РазрешенияБезопасностиПроверкиОбновления()));
	
КонецПроцедуры

// Возвращает базовое имя события для регистрации в журнале событий
//
Функция СобытиеЖурналаРегистрации() Экспорт
	Возврат НСтр("ru='Адресный классификатор'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() );
КонецФункции

// Набор разрешений профилей безопасности для проверки наличия обновления КЛАДР на сайте 1С
//
// Возвращаемое значение:
//     Массив - необходимые разрешения
// 
Функция РазрешенияБезопасностиПроверкиОбновления() Экспорт
	
	АдресФайлаВерсий = ОбщегоНазначенияКлиентСервер.СтруктураURI(
		АдресныйКлассификаторКлиентСервер.ПутьКФайлуОписаниюДанныхКЛАДР()
	);
	
	Протокол = ВРег(АдресФайлаВерсий.Схема);
	Адрес    = АдресФайлаВерсий.Хост;
	Порт     = АдресФайлаВерсий.Порт;
	Описание = НСтр("ru = 'Проверка обновления адресного классификатора.'");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить( 
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание)
	);
	
	Возврат Разрешения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение и обновление ИБ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//    Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления 
//                                    общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "1.0.1.1";
		Обработчик.Процедура = "АдресныйКлассификатор.ЗагрузитьАдресныеОбъектыПервогоУровня";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "АдресныйКлассификатор.РазложитьАдресныеОбъектыПоЭлементам";
	Обработчик.ОбщиеДанные = Истина;
КонецПроцедуры

// Загружает адресные объекты первого уровня по макету
//
Процедура ЗагрузитьАдресныеОбъектыПервогоУровня() Экспорт
	
	//1С-Минск
	//КлассификаторАдресныхОбъектовXML = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("КлассификаторАдресныхОбъектовБеларуси").ПолучитьТекст();
	////КлассификаторАдресныхОбъектовXML = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст();
	//
	//КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторАдресныхОбъектовXML).Данные;
	//
	//НаборЗаписей = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.ТипАдресногоЭлемента.Установить(1);
	//
	//Для Каждого АдресныйОбъект Из КлассификаторТаблица Цикл
	//	МенеджерЗаписи = НаборЗаписей.Добавить();

	//	МенеджерЗаписи.Код                      = АдресныйОбъект.Code;
	//	МенеджерЗаписи.ТипАдресногоЭлемента     = 1;
	//	МенеджерЗаписи.Наименование             = АдресныйОбъект.Name;
	//	МенеджерЗаписи.Сокращение               = АдресныйОбъект.Socr;
	//	МенеджерЗаписи.Индекс                   = АдресныйОбъект.Index;
	//	МенеджерЗаписи.КодАдресногоОбъектаВКоде = Лев(АдресныйОбъект.Code,2);
	//КонецЦикла;
	//
	//НаборЗаписей.Записать();
    //Конец 1С-Минск
	
КонецПроцедуры

// Раскладывает коды адресных объектов на регион, район, город, населенный пункт, город, улицу и признак актуальности
//
Процедура РазложитьАдресныеОбъектыПоЭлементам() Экспорт
	
	// Обходим все записи регистра АдресныйКлассификатор и добавляем неактуальные адреса в массив
	МассивНеактуальныхАдресов = Новый Массив;
	Выборка = РегистрыСведений.АдресныйКлассификатор.Выбрать(,"<Нет>");
	Пока Выборка.Следующий() Цикл
		СтруктураАдреса = РазобратьАдресныйОбъектПоЭлементам(Выборка.Код, Выборка.ТипАдресногоЭлемента);
		Если СтруктураАдреса.ПризнакАктуальности <> 0 Тогда
			СтруктураАдреса.Вставить("Код", Выборка.Код);
			СтруктураАдреса.Вставить("ТипАдресногоЭлемента", Выборка.ТипАдресногоЭлемента);
			МассивНеактуальныхАдресов.Добавить(СтруктураАдреса);
		КонецЕсли;
	КонецЦикла;
	
	// Исправляем записи с неактуальными адресами	
	Для Каждого СтруктураАдреса Из МассивНеактуальныхАдресов Цикл
		// Читаем для изменения запись с неактуальным адресом
		МенеджерЗаписи = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипАдресногоЭлемента = СтруктураАдреса.ТипАдресногоЭлемента;
		МенеджерЗаписи.Код = СтруктураАдреса.Код;
		МенеджерЗаписи.Прочитать();
		// Записываем запись с исправлением неактуального адреса
		МенеджерЗаписи.ТипАдресногоЭлемента = СтруктураАдреса.ТипАдресногоЭлемента;
		МенеджерЗаписи.Код = СтруктураАдреса.Код;
		МенеджерЗаписи.КодАдресногоОбъектаВКоде = СтруктураАдреса.КодАдресногоОбъектаВКоде;
		МенеджерЗаписи.КодРайонаВКоде = СтруктураАдреса.КодРайонаВКоде;
		МенеджерЗаписи.КодГородаВКоде = СтруктураАдреса.КодГородаВКоде;
		МенеджерЗаписи.КодНаселенногоПунктаВКоде = СтруктураАдреса.КодНаселенногоПунктаВКоде;
		МенеджерЗаписи.КодУлицыВКоде = СтруктураАдреса.КодУлицыВКоде;
		МенеджерЗаписи.ПризнакАктуальности = СтруктураАдреса.ПризнакАктуальности;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок сервисных функций, используются при загрузке адресного классификатора

// Загружает адресные сокращения в регистр АдресныеСокращения.
//
// Параметры:
//    ПутьКДаннымНаСервере - путь к каталогу в котором находится файл socrbase.dbf
//
// Возвращаемое значение
//    Булево - истина - сведения успешно записаны, ложь - ошибка при подготовке записи сведений в регистр
//
Функция ЗагрузитьАдресныеСокращения(ПутьКДаннымНаСервере) Экспорт
	
	ФайлАдресныхСокращений = ПутьКДаннымНаСервере +  "SOCRBASE.DBF";
	
	ТаблицаАдресныеСокращения = Новый ТаблицаЗначений;
	ТаблицаАдресныеСокращения.Колонки.Добавить("Код");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Уровень");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Наименование");
	ТаблицаАдресныеСокращения.Колонки.Добавить("Сокращение");
	
	АдресныеСокращения = РегистрыСведений.АдресныеСокращения;
	
	НаборЗаписей = АдресныеСокращения.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	xB = Новый XBase(ФайлАдресныхСокращений);
	xB.Кодировка = КодировкаXBase.OEM;
	
	// Контроль уникальности кодов в файле классификатора
	КонтрольСоответствие = Новый Соответствие;
	ЕстьОшибки = Ложь;
	Если xB.Открыта() Тогда
		Пока Не xB.ВКонце() Цикл
			КодУникальности = Число(xB.level) * 10000 + Число(xB.kod_t_st);
			Если КонтрольСоответствие[КодУникальности] = НеОпределено Тогда
				КонтрольСоответствие[КодУникальности] = 0;
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Код           = xB.kod_t_st;
				НоваяЗапись.Уровень       = xB.level;
				НоваяЗапись.Наименование  = xB.socrname;
				НоваяЗапись.Сокращение    = xB.scname;
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
			xB.Следующая();
			
		КонецЦикла;
		xB.ЗакрытьФайл();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СтрокаОшибки = НСтр("ru = 'В файле адресного классификатора %1 есть ошибки уникальности кодов'");
		ПараметрыВСтроке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, "socrbase.dbf");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ПараметрыВСтроке);
	КонецЕсли;
	НаборЗаписей.Записать();
	
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Процедура загружает из файлов КЛАДР в регистр сведений данные по адресному объекту.
//
// Параметры:
//    ПараметрыЗагрузки - Структура - параметры для загрузки.
//    АдресХранилища    - Строка    - адрес внутреннего хранилища.
//
Процедура ЗагрузкаАдресныхСведенийИзФайловКЛАДРВРегистрСведений(ПараметрыЗагрузки, АдресХранилища) Экспорт
	
	СтатусВыполнения = Истина;
	СообщениеПользователю = "";
	
	СтруктураВозврата = Новый Структура("СтатусВыполнения, СообщениеПользователю, ПутьКДанным, ПутьКДаннымНаСервере");
	
	СтруктураВозврата.ПутьКДаннымНаСервере	= ПараметрыЗагрузки.ПутьКДаннымНаСервере;
	
	Попытка
		
		Если ПараметрыЗагрузки.ИсточникДанныхДляЗагрузки = 1 Тогда
			ДоступныеВерсии = ПараметрыЗагрузки.ДоступныеВерсии;
		Иначе
			ДоступныеВерсии = Новый Соответствие;
			Для Каждого АдресныйОбъект Из ПараметрыЗагрузки.АдресныеОбъекты Цикл
				ДоступныеВерсии.Вставить(АдресныйОбъект, ПараметрыЗагрузки.ВерсияЗагружаемогоКЛАДР);
			КонецЦикла;
		КонецЕсли;
		
		ВерсииХранимыхСведений = ВерсииАдресныхОбъектов();
		ТекущиеВерсии = Новый Соответствие;
		Для Каждого ЭлементСписка Из ВерсииХранимыхСведений Цикл
			ТекущиеВерсии.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЦикла;
		НовыеВерсииАдресныхОбъектов = Новый Соответствие;
		
		Для Каждого АдресныйОбъект Из ПараметрыЗагрузки.АдресныеОбъекты Цикл
			
			Если АдресныйОбъект = "AL" Тогда
				// Альтернативные названия загружаются с регионом
				Продолжить;
			ИначеЕсли АдресныйОбъект = "SO" Тогда
				// Адресные сокращения загружаются отдельно (ниже)
				Продолжить;
			КонецЕсли;
			
			АдресныеСведения = ИнформацияПоАдресномуОбъекту(АдресныйОбъект);
			ТекущаяВерсия   = ?(ТекущиеВерсии[АдресныйОбъект]   = Неопределено, '00000000', ТекущиеВерсии[АдресныйОбъект]);
			ДоступнаяВерсия = ?(ДоступныеВерсии[АдресныйОбъект] = Неопределено, '00000000', ДоступныеВерсии[АдресныйОбъект]);
			// Пропускаем загрузку, если адресные сведения уже актуальны.
			Если ДоступнаяВерсия <= ТекущаяВерсия Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеВерсииАдресныхОбъектов.Вставить(АдресныйОбъект, ДоступнаяВерсия);
			
			ЗагрузитьКлассификаторПоАдресномуОбъекту(АдресныйОбъект, 
				ПараметрыЗагрузки.ПутьКДаннымНаСервере, ПараметрыЗагрузки.ИсточникДанныхДляЗагрузки = 1);
			
		КонецЦикла;
        
        //1С-Минск
        //ТекущаяВерсия   = ?(ТекущиеВерсии["SO"]   = Неопределено, '00000000', ТекущиеВерсии["SO"]);
        //ДоступнаяВерсия = ?(ДоступныеВерсии["SO"] = Неопределено, '00000000', ДоступныеВерсии["SO"]);
        //Если ДоступнаяВерсия > ТекущаяВерсия Тогда
        //	ЗагрузитьАдресныеСокращения(ПараметрыЗагрузки.ПутьКДаннымНаСервере);
        //	НовыеВерсииАдресныхОбъектов.Вставить("SO", ДоступнаяВерсия);
        //КонецЕсли;
        //Конец 1С-Минск
		
		ОбновитьВерсииАдресныхСведений(НовыеВерсииАдресныхОбъектов);
	Исключение
		ТекстСообщенияОшибки = НСтр("ru = 'Ошибка при загрузке адресных сведений'");
		СообщениеПользователю = ТекстСообщенияОшибки + ": " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураВозврата.СообщениеПользователю = СообщениеПользователю;
		СтруктураВозврата.СтатусВыполнения      = Ложь;
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
		Возврат;
		
	КонецПопытки;
	
	СтруктураВозврата.СтатусВыполнения      = СтатусВыполнения;
	СтруктураВозврата.СообщениеПользователю = СообщениеПользователю;
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями сведений по адресным объектам

// Устанавливает версию адресного объекта в регистре
//
// Параметры:
//    НомерАО                          - строка - код адресного объекта в формате NN
//    Наименование                     - наименование адресного объекта
//    ВерсияСведенийПоАдресномуОбъекту - дата - версия адресного объекта
//
Процедура УстановитьВерсиюКлассификатора(Знач НомерАО, Знач Наименование = "", Знач ВерсияСведенийПоАдресномуОбъекту = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ВерсииОбъектовАдресногоКлассификатора.СоздатьМенеджерЗаписи();
	
	Если ПустаяСтрока(ВерсияСведенийПоАдресномуОбъекту) Тогда
		МенеджерЗаписи.АдресныйОбъект = НомерАО;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	Иначе
		МенеджерЗаписи.АдресныйОбъект = НомерАО;
		МенеджерЗаписи.ДатаВыпускаВерсии = ВерсияСведенийПоАдресномуОбъекту;
		МенеджерЗаписи.Наименование = Наименование;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Считывает с диска файл версий адресных объектов и возвращает версии сведений по адресным объектам
//
// Параметры:
//    ТекстXML - Строка - строка, содержащая текст XML.
//
// Возвращаемое значение:
//    Соответствие, в котором ключ - строка адресного объекта, значение - дата актуальности адресного объекта.
//
Функция ПолучитьВерсииАдресныхСведений(Знач ТекстXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ЧтениеXML.Прочитать();
	
	Результат = Новый Соответствие;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.ИмяАтрибута(0) = "code"
			     Или ЧтениеXML.ИмяАтрибута(0) = "name"
			Тогда
				ДатаВыпуска = ПолучитьАтрибут(ЧтениеXML, "date");
				Результат.Вставить(ВРег(ЧтениеXML.ЗначениеАтрибута(0)), ДатаВыпуска);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Возврат Результат;
	
КонецФункции

// Сохраняет файл архива из двоичных данных на сервере по переданному имени в переданном каталоге, и распаковывает его.
//
// Параметры:
//    ДвоичныеДанные         - ДвоичныеДанные -данные файла
//    ИмяФайлаАрхива         - строка - имя файла
//    ПутьККаталогуНаСервере - путь к каталогу, в который требуется положить распакованный файл
//
Процедура СохранитьФайлНаСервереИРаспаковать(Знач ДвоичныеДанные, ИмяФайлаАрхива, ПутьККаталогуНаСервере) Экспорт
	
	Если ПутьККаталогуНаСервере = Неопределено Тогда
		ПутьККаталогуНаСервере = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
		СоздатьКаталог(ПутьККаталогуНаСервере);
	КонецЕсли;
	
	ДвоичныеДанные.Записать(ПутьККаталогуНаСервере + ИмяФайлаАрхива);
	
	ЧтениеZIP = Новый ЧтениеZipФайла(ПутьККаталогуНаСервере + ИмяФайлаАрхива);
	ЧтениеZIP.ИзвлечьВсе(ПутьККаталогуНаСервере, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	УдалитьФайлы(ПутьККаталогуНаСервере, ИмяФайлаАрхива);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аутентификация на пользовательском сайте 1С

// Получает параметры аутентификации пользователя (логин и пароль) на пользовательском сайте 1с.
//
// Возвращаемое значение:
//    Булево - Истина - параметры аутентификации заполнены, Ложь - хотя бы один из параметров не заполнен
//
Функция ПолучитьПараметрыАутентификации(КодПользователя, Пароль) Экспорт
	
	КодПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"АутентификацияНаПользовательскомСайте",  "КодПользователя", "");
	
	Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"АутентификацияНаПользовательскомСайте", "Пароль", "");
	
	Возврат Не ПустаяСтрока(КодПользователя) И Не ПустаяСтрока(Пароль);
КонецФункции

// Сохраняет код пользователя и пароль в системном хранилище настроек ИБ
//
// Параметры
// 	КодПользователя - Строка - код пользователя, или логин, для доступа к пользовательскому сайту 1с
// 	Пароль - Строка - пароль
//
Процедура СохранитьПараметрыАутентификации(КодПользователя, Пароль) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"АутентификацияНаПользовательскомСайте", "КодПользователя", КодПользователя);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"АутентификацияНаПользовательскомСайте", "Пароль", Пароль);
	
КонецПроцедуры

// Обновляет версии адресных сведений.
//
// Параметры:
//    НовыеВерсии - Соответствие - новые версии.
//
Процедура ОбновитьВерсииАдресныхСведений(НовыеВерсии) Экспорт
	
	Для Каждого ОписаниеВерсии Из НовыеВерсии Цикл
		АдресныеСведения = ИнформацияПоАдресномуОбъекту(ОписаниеВерсии.Ключ);
		УстановитьВерсиюКлассификатора(ОписаниеВерсии.Ключ,
			АдресныеСведения.Наименование + " " + АдресныеСведения.Сокращение,
			ОписаниеВерсии.Значение);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Функция получает уровень адресного элемента (всего 6 уровней) в иерархической системе классификации по его коду
// формат кода:
// _2__3___3___3___4____4____
// |СС|РРР|ГГГ|ППП|УУУУ|ДДДД|
// 
// чем глубже уровень иерархии тем более младшие разряды являются заполненными
//
// Параметры:
//    Код - строка - код, взятый из поля записи CODE файла данных
// 
// Возвращаемое значение:
//    Число [1-6]
Функция ПолучитьТипАдресногоЭлементаПоКоду(Знач Код)
	
	Размерность = СтрДлина(Код);
	
	// для кодов с размерностью 13 или 17 необходимо уменьшить код
	// на 2 разряда - символы актуальности адресного объекта
	Если Размерность = 13 ИЛИ Размерность = 17 Тогда
		Размерность = Размерность - 2;
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)-2));
	ИначеЕсли Размерность = 19 Тогда
		КодЧисло = Число(Сред(Код, 1, СтрДлина(Код)));
	КонецЕсли;
	
	// Проверяем заполненность разрядов ДДДД
	Если Размерность = 19 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 6;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов УУУУ
	Если Размерность = 15 Тогда
		
		Остаток = КодЧисло % 10000;
		Если Остаток <> 0 Тогда
			Возврат 5;
		КонецЕсли;
		
		КодЧисло = КодЧисло / 10000;
		
	КонецЕсли;
	
	// Проверяем заполненность разрядов ППП
	Остаток = КодЧисло % 1000;
	Если Остаток <> 0 Тогда
		Возврат 4;
	КонецЕсли;
	
	// Проверяем заполненность разрядов ГГГ
	Остаток = КодЧисло % 1000000;
	Если Остаток <> 0 Тогда
		Возврат 3;
	КонецЕсли;
	
	// Проверяем заполненность разрядов РРР
	Остаток = КодЧисло % 1000000000;
	Если Остаток <> 0 Тогда
		Возврат 2;
	КонецЕсли;
	
	// Верхний уровень иерархии - единица
	
	Возврат 1;
	
КонецФункции

// Читает значение атрибута по имени из указанного объекта, приводит значение к указанному примитивному типу
//
// Параметры:
//    ЧтениеXML - объект типа ЧтениеXML, спозиционированный на начале элемента, атрибут которого требуется получить
//    Тип       - Значение типа Тип. Тип атрибута
//    Имя       - Строка. Имя атрибута
//
// Возвращаемое значение:
//    Строка - значение атрибута полученное по имени и приведенное к указанному типу
//
Функция ПолучитьАтрибут(Знач ЧтениеXML, Знач Имя)
	
	ЗначениеСтрока = СокрЛП(ЧтениеXML.ПолучитьАтрибут(Имя));
	
	Если Имя = "date" Тогда
		Возврат Дата(Сред(ЗначениеСтрока, 7, 4) + Сред(ЗначениеСтрока, 4, 2) + Лев(ЗначениеСтрока, 2));
	ИначеЕсли Имя = "code" Тогда
		Возврат Лев(ЗначениеСтрока, 2);
	КонецЕсли;
	
КонецФункции

// Добавляет версию в список.
//
// Параметры:
//    АдресныйОбъект - Число - адресный объект.
//    Версии         - Массив - массив версий.
//    Список         - СписокЗначений.
//
Процедура ДобавитьВерсиюВСписок(АдресныйОбъект, Версии, Список)
	
	ЭлементСписка = Список.Добавить();
	ЭлементСписка.Представление = АдресныйОбъект;
	
	ОписаниеВерсии = Версии.Найти(АдресныйОбъект, "АдресныйОбъект");
	Если ОписаниеВерсии = Неопределено Тогда
		ЭлементСписка.Значение = '00000000';
	Иначе
		ЭлементСписка.Значение = ОписаниеВерсии.ДатаВыпускаВерсии;
	КонецЕсли;
	
КонецПроцедуры

// По коду и типу адресного элемента получает коды его составных частей
//
// Параметры:
//    КодАдресногоЭлемента - строка или число - номер адресного объекта
//    ТипАдресногоЭлемента - число - уровень адресного объекта.
//
// Возвращаемое значение:
//    Структура с полями:
//        КодАдресногоОбъектаВКоде  - число - код элемента региона
//        КодРайонаВКоде            - число - код элемента района
//        КодГородаВКоде            - число - код элемента города
//        КодНаселенногоПунктаВКоде - число - код элемента населенного пункта
//        КодУлицыВКоде             - число - код элемента улицы
//        ПризнакАктуальности       - число - код элемента признака актуальности
//
Функция РазобратьАдресныйОбъектПоЭлементам(КодАдресногоЭлемента, ТипАдресногоЭлемента)
	
	Если ТипЗнч(КодАдресногоЭлемента) = Тип("Число") Тогда
		КодСтрокой = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Иначе
		КодСтрокой = КодАдресногоЭлемента;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("КодАдресногоОбъектаВКоде", Число(Лев(КодСтрокой, 2)));
	
	Если ТипАдресногоЭлемента > 1 Тогда
		СтруктураАдреса.Вставить("КодРайонаВКоде", Число(Сред(КодСтрокой, 3, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодРайонаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 2 Тогда
		СтруктураАдреса.Вставить("КодГородаВКоде", Число(Сред(КодСтрокой, 6, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодГородаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 3 Тогда
		СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", Число(Сред(КодСтрокой, 9, 3)));
	Иначе
		СтруктураАдреса.Вставить("КодНаселенногоПунктаВКоде", 0);
	КонецЕсли;
	
	Если ТипАдресногоЭлемента > 4 Тогда
		СтруктураАдреса.Вставить("КодУлицыВКоде", Число(Сред(КодСтрокой, 12, 4)));
		СтруктураАдреса.Вставить("ПризнакАктуальности", Число(Сред(КодСтрокой, 16, 2)));
	Иначе
		СтруктураАдреса.Вставить("КодУлицыВКоде", 0);
		СтруктураАдреса.Вставить("ПризнакАктуальности", Число(Сред(КодСтрокой, 12, 2)));
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Раскладывает данные во временные таблицы Регионы, Районы, Города, НаселенныеПункты, Улицы/
// Получаемые таблицы соответствуют адресам,полученным из временной таблицы Адреса в менеджере временных таблиц
//
// Параметры:
//    МенеджерВременныхТаблиц - менеджер временных таблиц, в котором уже должна быть временная таблица Адреса
//
Процедура РазложитьЭлементыАдресаВоВременныеТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодРегиона,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Регионы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодРайона,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Районы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 2
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодГорода,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Города
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 3
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодНаселенногоПункта,
//{{1С-Минск
        |	АдресныйКлассификатор.Сокращение + "" "" + АдресныйКлассификатор.Наименование КАК Наименование,
        //|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
////}}1C-Минск
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	НаселенныеПункты
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 4
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Адреса.Код КАК Код,
		|	АдресныйКлассификатор.Код КАК КодУлицы,
//{{1С-Минск
        |	АдресныйКлассификатор.Сокращение + "" "" + АдресныйКлассификатор.Наименование КАК Наименование,
        //|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
//}}1C-Минск
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности,
		|	Адреса.КодУлицыВКоде КАК КодУлицыВКоде,
		|	Адреса.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	Адреса.КодГородаВКоде КАК КодГородаВКоде,
		|	Адреса.КодРайонаВКоде КАК КодРайонаВКоде,
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ 
		|	Улицы
		|ИЗ
		|	Адреса КАК Адреса
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ПО 
		|	Адреса.КодАдресногоОбъектаВКоде = АдресныйКлассификатор.КодАдресногоОбъектаВКоде
		|	И Адреса.КодРайонаВКоде = АдресныйКлассификатор.КодРайонаВКоде
		|	И Адреса.КодГородаВКоде = АдресныйКлассификатор.КодГородаВКоде
		|	И Адреса.КодНаселенногоПунктаВКоде = АдресныйКлассификатор.КодНаселенногоПунктаВКоде
		|	И Адреса.КодУлицыВКоде = АдресныйКлассификатор.КодУлицыВКоде
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 5
		|");

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

// Функция ищет требуемый адресный элемент по названию и типу и возвращает первый найденный. 
// В качестве дополнения может быть задан элемент "родитель"
//
// Параметры:
//    НазваниеЭлемента - Строка    - Название адресного элемента с сокращением
//    ТипЭлемента      - Число     - Тип искомого адресного элемента (1 - регион, 2 - район и т.п.)
//    ЭлементРодитель  - Структура - Описывает родительский элемент
//
// Возвращаемое значение:
//    Найденная структура классификатора или пустая структура в случае неудачи
//
Функция ПолучитьАдресныйЭлемент(Знач НазваниеЭлемента, ТипЭлемента, ЭлементРодитель)
	
	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
	
	// смотрим есть ли в имени адресное сокращение этого уровня
	// если есть, то ищем по наименованию и адресному сокращению
	АдресноеСокращение = "";
    //{{1С-Минск
    Если ТипЭлемента <> 4 Тогда
    	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращение(НазваниеЭлемента, АдресноеСокращение);
    Иначе
    	НазваниеЭлемента = ПолучитьИмяИАдресноеСокращениеУлицыИНаселенногоПункта(НазваниеЭлемента, АдресноеСокращение);
    КонецЕсли;     
   //}}1C-Минск
	
	Запрос = Новый Запрос();
	
	ОграничениеПоКоду = "";
	Если ЭлементРодитель.Код > 0 Тогда // проверка на соответствие подчинению родителю
		
		Если ЭлементРодитель.ТипАдресногоЭлемента <= 5 Тогда
			
			Если ЭлементРодитель.КодАдресногоОбъектаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС
				+ " И (АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде)";
				Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", ЭлементРодитель.КодАдресногоОбъектаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодРайонаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде)";
				Запрос.УстановитьПараметр("КодРайонаВКоде", ЭлементРодитель.КодРайонаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодГородаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде)";
				Запрос.УстановитьПараметр("КодГородаВКоде", ЭлементРодитель.КодГородаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодНаселенногоПунктаВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде)";
				Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", ЭлементРодитель.КодНаселенногоПунктаВКоде);
			КонецЕсли;
			
			Если ЭлементРодитель.КодУлицыВКоде <> 0 Тогда
				ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС 
				+ "  И (АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде)";
				Запрос.УстановитьПараметр("КодУлицыВКоде", ЭлементРодитель.КодУлицыВКоде);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ограничение на адресное сокращение
	Если АдресноеСокращение <> "" Тогда
		ОграничениеПоКоду = ОграничениеПоКоду + Символы.ПС + "  И (АдресныйКлассификатор.Сокращение = &АдресноеСокращение)";
		Запрос.УстановитьПараметр("АдресноеСокращение", АдресноеСокращение);
	КонецЕсли;
	
	Запрос.Текст = " 
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код КАК Код,
		|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение,
		|	АдресныйКлассификатор.Индекс КАК Индекс,
		|	АдресныйКлассификатор.ТипАдресногоЭлемента КАК ТипАдресногоЭлемента,
		|	АдресныйКлассификатор.КодРайонаВКоде КАК КодРайонаВКоде,
		|	АдресныйКлассификатор.КодГородаВКоде КАК КодГородаВКоде,
		|	АдресныйКлассификатор.КодНаселенногоПунктаВКоде КАК КодНаселенногоПунктаВКоде,
		|	АдресныйКлассификатор.КодУлицыВКоде КАК КодУлицыВКоде,
		|	АдресныйКлассификатор.ПризнакАктуальности КАК ПризнакАктуальности
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
		|	И АдресныйКлассификатор.Наименование = &Наименование "
		+ ОграничениеПоКоду;
	
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	РезультирующаяСтруктура = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РезультирующаяСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Возврат РезультирующаяСтруктура;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы со строками

// Строит запрос автоподбора для регистра
//
// Параметры:
//    Текст               - Строка - строка запроса.
//    СтруктураПараметров - Структура - структура параметров.
//    КоличествоЭлементов - Число - количество первых элементов.
//
// Возвращаемое значение:
//    ТаблицаЗначений - результат выполнения запроса.
//
Функция ПолучитьРезультатЗапросаАвтоподбораДляРегистра(Знач Текст, СтруктураПараметров, КоличествоЭлементов)
	
	Объект = Метаданные.РегистрыСведений.АдресныйКлассификатор;
	
	СтрокаОтборовПоСтруктуре = "";
	
	Запрос = СоздатьЗапросДляСпискаАвтоподбора(Текст, СтрокаОтборовПоСтруктуре, СтруктураПараметров, "ТаблицаРегистра");
	
	СтрокаПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Строка(КоличествоЭлементов) + " ТаблицаРегистра.* ";
	
	Запрос.Текст = СтрокаПолей + " ИЗ РегистрСведений.АдресныйКлассификатор КАК ТаблицаРегистра ГДЕ ";
	
	// формируем ограничения по полям для поиска
	ОграничениеПоПолю = " (ТаблицаРегистра.Наименование ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~"") ";
	
	Запрос.Текст = Запрос.Текст + " ( " + ОграничениеПоПолю + " ) " + СтрокаОтборовПоСтруктуре;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Создает объект запрос, устанавливает у него параметр ТекстАвтоПодбора и убирает лишние символы в строке поиска.
//
// Параметры:
//    СтрокаПоиска             - Строка - строка поиска в запросе.
//    СтрокаОтборовПоСтруктуре - Строка - стирка отборов по структуре.
//    СтруктураПараметров      - Структура - структура параметров для запроса.
//    ИмяТаблицыОграничений    - Строка - имя таблицы ограничений.
//
// Возвращаемое значение:
//    Строка - текст вопроса.
//
Функция СоздатьЗапросДляСпискаАвтоподбора(СтрокаПоиска, СтрокаОтборовПоСтруктуре, СтруктураПараметров, ИмяТаблицыОграничений)
	
	Запрос = Новый Запрос;
	СтрокаПоиска = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаПоиска);
	Запрос.УстановитьПараметр("ТекстАвтоПодбора", (СтрокаПоиска + "%"));
	
	// Устанавливает ограничения
	СтрокаОтборовПоСтруктуре = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		Ключ 	 = ЭлементСтруктуры.Ключ;
		Значение = ЭлементСтруктуры.Значение;

		Запрос.УстановитьПараметр(Ключ, Значение);
		СтрокаОтборовПоСтруктуре = СтрокаОтборовПоСтруктуре + " И " + ИмяТаблицыОграничений + "." + Ключ + " В (&"+ Ключ + ")";
	КонецЦикла; 
	
	Возврат Запрос;
КонецФункции

// Формируется строка описания адреса по переданным элементам адреса
//
// Параметры:
//    ДетализацияДоУровня - Число - детализация уровня адресного объекта.
//    Регион              - Строка - регион.
//    Район               - Строка - район.
//    Город               - Строка - город.
//    НаселенныйПункт     - Строка - населенный пункт.
//    Улица               - Строка - название улицы.
//
// Возвращаемое значение:
//    Строка - описание.
//
Функция СформироватьОписаниеИзАдресныхЭлементов(ДетализацияДоУровня, Регион = "", Район = "", Город = "", 
	НаселенныйПункт = "", Улица = "")
	
	Описание = Улица;
	
	Если ДетализацияДоУровня <= 4 Тогда // Улица, Населенный пункт
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = НаселенныйПункт;
		ИначеЕсли ПустаяСтрока(НаселенныйПункт) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + НаселенныйПункт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 3 Тогда // Улица, Населенный пункт, Город
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Город) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Город;
		ИначеЕсли ПустаяСтрока(Город) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Город;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня <= 2 Тогда // Улица, Населенный пункт, Город, Район
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Район) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Район;
		ИначеЕсли ПустаяСтрока(Район) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Район;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДетализацияДоУровня = 1 Тогда // Улица, Населенный пункт, Город, Район, Регион
		
		Если ПустаяСтрока(Описание) И ПустаяСтрока(Регион) Тогда
			Описание = "";
		ИначеЕсли ПустаяСтрока(Описание) Тогда
			Описание = Регион;
		ИначеЕсли ПустаяСтрока(Регион) Тогда
			Описание = Описание;
		Иначе
			Описание = Описание + ", " + Регион;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с адресным кодом

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//    Номер              - Число, Строка - Номер дома с корпусом
//    Интервал           - Строка        - Интервал чисел (домов)
//    ТочноеСоответствие - Булево        - Номер дома должен точно соответствовать номеру в интервале
//                                         или допускается наличие дробей и произвольных букв после номера дома
//
// Возвращаемое значение:
//    Булево - Истина - если заданное число входит в диапазон, Ложь - если не входит
//
Функция ВходитВИнтервал(Знач Номер, Интервал, ТочноеСоответствие)
	
	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер, Ложь) Тогда
		// Проверяем вхождение конкретного номера дома в интервал (отбрасывая букву "К" - означающую "корпус")
		НомерБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Номер, " ", "")), "К", "");
		ИнтервалБезЛишнихСимволов = СтрЗаменить(ВРЕГ(СтрЗаменить("" + Интервал, " ", "")), "К", "");
		НомерВходитВИнтервал = (НомерБезЛишнихСимволов = ИнтервалБезЛишнихСимволов);
		Если НомерВходитВИнтервал Тогда
			Возврат Истина;
			// Если номер был числом, но не найден в интервале, то этот номер действительно не входит в интервал
		ИначеЕсли ТипЗнч(Номер) = Тип("Число") Тогда
			Возврат Ложь;
			// Если же строковый номер не найден в интервале, то попробуем отбросить то что следовало 
			// за числовой частью номер и проверить вхождение числовой части номера дома в интервал.
		Иначе
			Если ТочноеСоответствие Тогда
				Возврат Ложь;
			Иначе
				// Обрезаем то, что следует за косой чертой
				Если Найти(Номер, "\") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "\") - 1);
				ИначеЕсли Найти(Номер, "/") > 0 Тогда
					Номер = Лев(Номер, Найти(Номер, "/") - 1);
				КонецЕсли;
				Номер = ОставитьТолькоЦифрыВСтроке(Номер, "К");
				Интервал = СтрЗаменить(Интервал, "К", "");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ТочноеСоответствие Тогда
			//Обрезаются возможные значения "ДВЛД"(домовладение) и "ВЛД"(владение).
			Если Найти(Интервал, "ДВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ДВЛД", "");
			ИначеЕсли Найти(Интервал, "ВЛД") <> 0 Тогда
				Интервал = СтрЗаменить(Интервал, "ВЛД", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Номер = Число(Номер);
	
	ТолькоЧислоИнтервал = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь);
	
	Если ТолькоЧислоИнтервал Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И ТолькоЧислоИнтервал Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		ЛеваяЧасть = Лев(Интервал, Позиция - 1);
		ПраваяЧасть = Сред(Интервал, Позиция + 1);
		МинЗначение  = Число(ОставитьТолькоЦифрыВСтроке(ЛеваяЧасть));
		МаксЗначение = Число(ОставитьТолькоЦифрыВСтроке(ПраваяЧасть));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Интервал) Тогда
		// случай когда интервал был равен Ч или Н
		Попали = 1;
		
	Иначе
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Интервал, Ложь) Тогда
			Если Номер = Число(ОставитьТолькоЦифрыВСтроке(Интервал)) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Попали = 1) И (
		((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
		((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
		(Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//    Номер              - Число, Строка - Номер дома с корпусом
//    Интервал           - Строка        - Интервал чисел (домов)
//    ТочноеСоответствие - Булево        - Номер дома должен точно соответствовать номеру в интервале
//                                         или допускается наличие дробей и произвольных букв после номера дома
// Возвращаемое значение:
//    Булево - Истина - если заданное число входит в диапазон, Ложь- если не входит
//
Функция НомерДомаВИнтервале(Номер, Знач Интервал, ТочноеСоответствие = Ложь)
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл
		
		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат ВходитВИнтервал(Номер, Интервал, ТочноеСоответствие);
		Иначе
			Если ВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1)), ТочноеСоответствие) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//    Улица        - элемент справочника адресный классификатор с требуемой улицей
//    НомерДома    - номер дома, для которого необходимо получить индекс
//    НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//    Строка - шестизначный почтовый индекс
//
Функция ПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса)

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Индекс КАК Индекс
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде
		|");
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", Улица.КодАдресногоОбъектаВКоде);
	Запрос.УстановитьПараметр("КодРайонаВКоде", Улица.КодРайонаВКоде);
	Запрос.УстановитьПараметр("КодГородаВКоде", Улица.КодГородаВКоде);
	Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
	Запрос.УстановитьПараметр("КодУлицыВКоде", Улица.КодУлицыВКоде);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИндексДома = "";
	
	// Сначала ищем по точному соответствию
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
			Интервал = Врег(СокрЛП(Выборка.Наименование));
			
			Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Истина) Тогда
				ИндексДома = Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
				+ СокрЛП(НомерКорпуса), Интервал, Истина)) Тогда
				Возврат Выборка.Индекс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// А если не нашлось, то ищем по неточному соответствию
	Если ПустаяСтрока(ИндексДома) Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ПустаяСтрока(Выборка.Индекс) Тогда
				Интервал = Врег(СокрЛП(Выборка.Наименование));
				
				Если НомерДомаВИнтервале(СокрЛП(НомерДома), Интервал, Ложь) Тогда
					ИндексДома = Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				ИначеЕсли (НомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") 
					+ СокрЛП(НомерКорпуса), Интервал, Ложь)) Тогда
					Возврат Выборка.Индекс;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ИндексДома) Тогда
			Возврат Улица.Индекс;
		Иначе
			Возврат ИндексДома;
		КонецЕсли;
		
	Иначе
		Возврат ИндексДома;
	КонецЕсли;	
	
КонецФункции

// Функция по адресу возвращает структуру ограничений
//
// Параметры:
//    ПолеРегиона           - Строка - регион.
//    ПолеРайона            - Строка - район.
//    ПолеГорода            - Строка - город.
//    ПолеНаселенногоПункта - Строка - населенный пункт.
//    ИмяУлицы              - Строка - улица.
//    УровеньЭлемента       - Число - уровень адресного элемента.
//
// Возвращаемое значение:
//    Структура - структура ограничений.
//
Функция ПолучитьСтруктуруОграниченийПоАдресу(ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, УровеньЭлемента) 
	
	Если УровеньЭлемента > 1 Тогда
		
		КодРодителя = Неопределено;
		СтруктураОграничений = ВернутьСтруктуруОграниченийПоРодителю(
			ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, ИмяУлицы, 
			КодРодителя, УровеньЭлемента);
		
	Иначе
		СтруктураОграничений = Новый Структура();
		СтруктураОграничений.Вставить("ТипАдресногоЭлемента", УровеньЭлемента);
	КонецЕсли;
	
	Возврат СтруктураОграничений;
КонецФункции

// Процедура добавляет не нулевое значение кода в структуру
// 
// Параметры:
//    УровеньРодителя - Число - уровень родителя.
//    ДанныеСтруктуры - Структура - структура, в которую необходимо добавить данные.
//    ИмяЭлемента - Строка - имя элемента.
//    УровеньЭлемента - Число - уровень элемента.
//    КодЭлемента - Число - код элемента.
//
Процедура ДобавитьКодВСтруктуру(МаксимальныйУровень, УровеньРодителя, ДанныеСтруктуры, ИмяЭлемента, УровеньЭлемента, КодЭлемента)
	
	Если КодЭлемента<>0 Или УровеньРодителя>=УровеньЭлемента Тогда
		// Однозначно надо
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
	ИначеЕсли КодЭлемента=0 И МаксимальныйУровень>УровеньЭлемента Тогда
		ДанныеСтруктуры.Вставить(ИмяЭлемента, КодЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция оставляет в строке только цифры, отбрасывая все следующие за цифрами буквы и другие символы,
// причём если строка начинается с буквы - то считаем, что 
//
// Параметры:
//    РазбираемаяСтрока   - Строка - строка, из которой будут отбрасываться все не цифровые символы
//    ПропускаемыеСимволы - Строка - символы, которые при разборе можно пропустить, на любых других разбор прекращается.
//                          Например, при разборе "К25СТР1", если пропускаемые символы:
//                          "" - то возвратится "0", 
//                          "К" - возвратится "25",
//                          "КСТР" - возвратится "251"
// Возвращаемое значение:
//    Строка - строка, состоящая только из цифр, полученных из исходной строки
//
Функция ОставитьТолькоЦифрыВСтроке(РазбираемаяСтрока, ПропускаемыеСимволы = "")
	
	Цифры = "1234567890";
	ЦифроваяЧасть = "";
	Для НомерСимвола = 1 По СтрДлина(РазбираемаяСтрока) Цикл
		ТекущийСимвол = Сред(РазбираемаяСтрока, НомерСимвола, 1);
		Если Найти(Цифры, ТекущийСимвол) Тогда
			ЦифроваяЧасть = ЦифроваяЧасть + ТекущийСимвол;
		Иначе
			Если Найти(ПропускаемыеСимволы, ТекущийСимвол) = Неопределено Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если пустую строку попробовать преобразовать в число - то будет ошибка,
	// поэтому в данном случае вместо пустой строки возвращаем строку с нулем.
	Если ЦифроваяЧасть = "" Тогда
		ЦифроваяЧасть = "0";
	КонецЕсли;
	
	Возврат ЦифроваяЧасть;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Фоновое задание загрузки данных КЛАДР
// 

// Распаковывает по необходимости и загружает в регистр файлы кладр, запускает фоновое
//
// Параметры:
//     ОбъектыДляЗагрузки     - Массив - регионы для загрузки
//     ПереданныеФайлы        - Массив - описание переданных файлов
//     ИсточникДанных         - Число  - описание файлов: 1 - zip с сайта, 2 - exe с ИТС, 3 - dbf с диска
//     ИдентификаторХранилища - УникальныйИдентификатор - для привязки к форме
//
Функция ОбработатьФайлыКЛАДР(Знач ОбъектыЗагрузки, Знач ПереданныеФайлы, Знач ИсточникДанных, Знач ИдентификаторХранилища) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектыЗагрузки", ОбъектыЗагрузки);
	Параметры.Вставить("ИсточникДанных",  ИсточникДанных);
	
	// Всегда через фоновое
	
	// Описание файлов передаем в фоновое задание как двоичные данные - другая сессия
	Параметры.Вставить("ПереданныеФайлы", ДвоичныеДанныеФайловКЛАДР(ПереданныеФайлы));
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторХранилища,
		"АдресныйКлассификатор.ФоноваяЗагрузкаФайловКЛАДР", Параметры, 
		НСтр("ru = 'Загрузка адресного классификатора'"));
		
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("РезультатЗагрузки", ПолучитьИзВременногоХранилища(АдресХранилища));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДвоичныеДанныеФайловКЛАДР(Знач ПереданныеФайлы)
	Результат = Новый Массив;
	
	Для Каждого Элемент Из ПереданныеФайлы Цикл
		Описание = Новый Структура("Имя", Элемент.Имя);
		Описание.Вставить("Хранение", ПолучитьИзВременногоХранилища(Элемент.Хранение));
		Результат.Добавить(Описание);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ФоноваяЗагрузкаФайловКЛАДР(Знач Параметры, Знач АдресХранилища) Экспорт

	ОбъектыЗагрузки = Параметры.ОбъектыЗагрузки;
	ИсточникДанных  = Параметры.ИсточникДанных;
	
	ПереданныеФайлы = Параметры.ПереданныеФайлы;
	Если ТипЗнч(ПереданныеФайлы)=Тип("Строка") Тогда
		ПереданныеФайлы = ПолучитьИзВременногоХранилища(ПереданныеФайлы);
	КонецЕсли;
	
	Если ИсточникДанных = 1 Тогда
		КаталогФайлов = ИзвлечьФайлыКЛАДРСайт(ПереданныеФайлы);
		
	ИначеЕсли ИсточникДанных = 2 Тогда
		КаталогФайлов = ИзвлечьФайлыКЛАДРИТС(ПереданныеФайлы);
		
	ИначеЕсли ИсточникДанных = 3 Тогда
		КаталогФайлов = ИзвлечьФайлыКЛАДРДиск(ПереданныеФайлы);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Не поддерживаемый источник данных КЛАДР'");
	КонецЕсли;
	
	// После извлечения ожидаем, что все имена файлов - в верхнем регистре
	
	// Определяем версию того, что грузим
    
    //1С-Минск
	ФайлыВерсии = НайтиФайлы(КаталогФайлов, "CITY.DBF", Ложь);
	//ФайлыВерсии = НайтиФайлы(КаталогФайлов, "KLADR.DBF", Ложь);    
    //Конец 1С-Минск
    
	Если ФайлыВерсии.Количество() = 0 Тогда
		ЗагружаемаяВерсия = ТекущаяДатаСеанса();
	Иначе
		ЗагружаемаяВерсия = ФайлыВерсии[0].ПолучитьВремяИзменения();
	КонецЕсли;
	
	ДоступныеВерсии = Новый Соответствие;
	Для Каждого ОбъектЗагрузки Из ОбъектыЗагрузки Цикл
		ДоступныеВерсии.Вставить(ОбъектЗагрузки, ЗагружаемаяВерсия);
	КонецЦикла;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресныеОбъекты",           ОбъектыЗагрузки);
	ПараметрыЗагрузки.Вставить("ПутьКДаннымНаСервере",      КаталогФайлов);
	ПараметрыЗагрузки.Вставить("ВерсияЗагружаемогоКЛАДР",   ЗагружаемаяВерсия);
	ПараметрыЗагрузки.Вставить("ИсточникДанныхДляЗагрузки", ИсточникДанных);
	ПараметрыЗагрузки.Вставить("ДоступныеВерсии",           ДоступныеВерсии);
	
	ЗагрузкаАдресныхСведенийИзФайловКЛАДРВРегистрСведений(ПараметрыЗагрузки, АдресХранилища);
	
	// И чистим за собой
	УдалитьВременныеФайлы(КаталогФайлов);
КонецПроцедуры

Процедура УдалитьВременныеФайлы(Путь)
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		// Будут удалены при перезапуске сеанса, обработка не требуется
	КонецПопытки;
КонецПроцедуры

Функция ИзвлечьФайлыКЛАДРСайт(Знач ПереданныеФайлы)
	// С сайта приходят ZIP, внутри которых DBF по регионам
	
	СерверныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(СерверныйКаталог);
	
	Для Каждого Описание Из ПереданныеФайлы Цикл
		Файл = Новый Файл(Описание.Имя);
		Если Врег(Файл.Расширение) <> ".ZIP" Тогда
			Продолжить;
		КонецЕсли;
		ИмяАрхива = СерверныйКаталог + Файл.Имя;
		
		Данные = ?(ТипЗнч(Описание.Хранение) = Тип("Строка"), ПолучитьИзВременногоХранилища(Описание.Хранение), Описание.Хранение);
		Данные.Записать(ИмяАрхива);
		
		Архив = Новый ЧтениеZipФайла(ИмяАрхива);
		
		Для Каждого ЭлементАрхива Из Архив.Элементы Цикл
			
			Расширение = Врег(ЭлементАрхива.Расширение);
			Если Расширение = "DBF" Тогда
				Архив.Извлечь(ЭлементАрхива, СерверныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				
				// Имена распакованных файлов должны быть всегда в верхнем регистре
				Для Каждого РаспакованныйФайл Из НайтиФайлы(СерверныйКаталог, ЭлементАрхива.Имя, Ложь) Цикл
					РезультирующееИмя = ВРег(РаспакованныйФайл.Имя);
					Если РаспакованныйФайл.Имя <> РезультирующееИмя Тогда
						ПереместитьФайл(РаспакованныйФайл.ПолноеИмя, РаспакованныйФайл.Путь + РезультирующееИмя)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Архив.Закрыть();
		УдалитьВременныеФайлы(ИмяАрхива);
	КонецЦикла;
		
	Возврат СерверныйКаталог;
КонецФункции

Функция ИзвлечьФайлыКЛАДРИТС(Знач ПереданныеФайлы)
	// С ИТC приходят файлы *.exe, представляющие собой самораспаковывающийся RAR
	// Сейчас они распаковываются на клиенте и здесь мы получаем dbf
	
	СерверныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(СерверныйКаталог);
	
	Для Каждого Описание Из ПереданныеФайлы Цикл
		Файл = Новый Файл(Описание.Имя);
		Расширение = Врег(Файл.Расширение);
		
		Если Расширение = ".DBF" Тогда
			// Имена файлов должны быть всегда в верхнем  регистре
			ИмяАрхива = СерверныйКаталог + ВРег(Файл.Имя);
			
			Данные = ?(ТипЗнч(Описание.Хранение) = Тип("Строка"), ПолучитьИзВременногоХранилища(Описание.Хранение), Описание.Хранение);
			Данные.Записать(ИмяАрхива);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СерверныйКаталог;
КонецФункции

Функция ИзвлечьФайлыКЛАДРДиск(Знач ПереданныеФайлы)
	// На диске находятся файлы dbf, можно грузить сразу
	
	СерверныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(СерверныйКаталог);
	
	Для Каждого Описание Из ПереданныеФайлы Цикл
		Файл = Новый Файл(Описание.Имя);
		Расширение = Врег(Файл.Расширение);
		
		Если Расширение = ".DBF" Тогда
			// Имена файлов должны быть всегда в верхнем  регистре
			ИмяФайла = СерверныйКаталог + ВРег(Файл.Имя);
		
			Данные = ?(ТипЗнч(Описание.Хранение) = Тип("Строка"), ПолучитьИзВременногоХранилища(Описание.Хранение), Описание.Хранение);
			Данные.Записать(ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СерверныйКаталог;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Учет изменений КЛАДР в упаковке домов по данным ФИАС
// 

// Поиск данных по номеру дома и корпуса. Предназначено для совместимости старых проверок.
// 
// Параметры:
//     Улица        - Структура с описанием улицы (коды частей адреса)
//     НомерДома    - Строка или число с номером дома (владения, домовладения)
//     НомерКорпуса - Строка или число с номером корпуса (строения, литеры, сооружения, участка)
//
// Возвращаемое значение - структура с полями:
//     ЕстьЗдания - Булево - признак того, что на улице есть дома
//     Индекс     - Строка - почтовый индекс дома. Неопределено, если дом не найден
//     Код        - Строка - код адресного классификатора дома. Неопределено, если дом не найден
//
Функция ДанныеЗданияПоДомуИКорпусу(Знач Улица, Знач НомерДома, Знач НомерКорпуса)
	
	ВсеВарианты = ВариантыНомеровЗданийУлицы(Улица);
	Результат = Новый Структура("ЕстьЗдания, Код, Индекс", ВсеВарианты.Количество()>0);
	Если Не Результат.ЕстьЗдания Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВсеВарианты.Сортировать("ЭтоДиапазон, Описание");
	
	// Перебираем все варианты совместимости:
	//     номер дома может означать Дом, Владение, Домовладение
	//     номер корпуса - Корпус, Строение, Литер, Сооружение, Участок
	
	ВариантыДома    = Новый Структура("Дом, Владение, Домовладение");
	ВариантыКорпуса = Новый Структура("Корпус, Строение, Литер, Сооружение, Участок");
	
	Если ТипЗнч(НомерДома)=Тип("Число") Тогда
		НомерДомаСтрокой = Формат(НомерДома, "ЧГ=");
	Иначе
		НомерДомаСтрокой = ВРег(СокрЛП(СтрЗаменить(НомерДома, " ", "")));
	КонецЕсли;
	
	Если ТипЗнч(НомерДома)=Тип("Число") Тогда
		НомерКорпусаСтрокой = Формат(НомерКорпуса, "ЧГ=");
	Иначе
		НомерКорпусаСтрокой = ВРег(СокрЛП(СтрЗаменить(НомерКорпуса, " ", "")));
	КонецЕсли;
	
	Для Каждого Вариант Из ВсеВарианты Цикл
		
		Для Каждого КлючЗначениеДом Из ВариантыДома Цикл
			Для Каждого КлючЗначениеКорпус Из ВариантыКорпуса Цикл
				Здание = Новый Структура;
				Здание.Вставить(КлючЗначениеДом.Ключ, НомерДомаСтрокой);
				Здание.Вставить(КлючЗначениеКорпус.Ключ, НомерКорпусаСтрокой);
		
				Если Вариант.ЭтоДиапазон Тогда 
					Если ЗданиеВходитВДиапазон(Здание, Вариант.Описание) Тогда
						Результат.Индекс = Вариант.Индекс;
						Результат.Код    = Вариант.Код;
						Возврат Результат;
					КонецЕсли;
				Иначе
					Если ЗданиеВходитВОписание(Здание, Вариант.Описание, Ложь) Тогда
						Результат.Индекс = Вариант.Индекс;
						Результат.Код    = Вариант.Код;
						Возврат Результат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Определяет все описания домов на улице, разбитых до конечного определения или диапазона
//
// Параметры:
//     Улица - Структура - поля адресного объекта-улицы, для которой запрашиваются все дома
//
// Возвращаемое значение - ТаблицаЗначений с колонками
//     Описание     - Строка - описание дома или диапазона
//     ЭтоДиапазон  - Булево - признак того, что описание содержит диапазон
//     Индекс       - Строка - почтовый индекс
//     Код          - Строка - код адресного классификатора, соответствующий описанию
//
Функция ВариантыНомеровЗданийУлицы(Знач Улица)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование        КАК Описание,
		|	АдресныйКлассификатор.Код                 КАК Код,
		|	АдресныйКлассификатор.Индекс              КАК Индекс,
		|	ЛОЖЬ                                      КАК ЭтоДиапазон
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 6
		|	И АдресныйКлассификатор.ПризнакАктуальности      = 0
		|
		|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде  = &КодАдресногоОбъектаВКоде
		|	И АдресныйКлассификатор.КодРайонаВКоде            = &КодРайонаВКоде
		|	И АдресныйКлассификатор.КодГородаВКоде            = &КодГородаВКоде
		|	И АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде
		|	И АдресныйКлассификатор.КодУлицыВКоде             = &КодУлицыВКоде
		|");
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде",  Улица.КодАдресногоОбъектаВКоде);
	Запрос.УстановитьПараметр("КодРайонаВКоде",            Улица.КодРайонаВКоде);
	Запрос.УстановитьПараметр("КодГородаВКоде",            Улица.КодГородаВКоде);
	Запрос.УстановитьПараметр("КодНаселенногоПунктаВКоде", Улица.КодНаселенногоПунктаВКоде);
	Запрос.УстановитьПараметр("КодУлицыВКоде",             Улица.КодУлицыВКоде);
	
	Результат = Запрос.Выполнить().Выгрузить();

	Позиция = Результат.Количество() - 1;
	Пока Позиция>=0 Цикл
		Строка = Результат[Позиция];
		Позиция = Позиция - 1;
		
		// Разбиваем на детальные описания
		ВариантыОписаний = ВРег(СтрЗаменить( СокрЛП(СтрЗаменить(Строка.Описание, ",", Символы.ПС)), " ", ""));
		
		Для НомерСтроки=1 По СтрЧислоСтрок(ВариантыОписаний) Цикл
			Описание = СтрПолучитьСтроку(ВариантыОписаний, НомерСтроки);
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Описание    = Описание;
			НоваяСтрока.Код         = Строка.Код;
			НоваяСтрока.Индекс      = Строка.Индекс;
			НоваяСтрока.ЭтоДиапазон = ЭтоДиапазон(Описание);
		КонецЦикла;
		
		Результат.Удалить(Строка);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверяет на вхождение дом в диапазон
// 
// Параметры:
//     Дом      - Структура - описание дома, содержит реквизиты Дом, Корпус
//     Описание - Строка    - одиночное описание диапазон
//
// Возвращаемые значение - Булево - признак вхождения
//
Функция ЗданиеВходитВДиапазон(Знач Здание, Знач Описание)
	
	ПозицияДефиса = Найти(Описание, "-");
	Если ПозицияДефиса=0 И Описание<>"Н" И Описание<>"Ч" Тогда
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	// Выделяем числовую часть номера
	НомерДома = ЧисловаяЧастьНомера( ОсновнойНомерЗдания(Здание) );
	Если НомерДома=0 Тогда
		// Нет основного номера дома
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаОписания = СтрДлина(Описание);
	ТекСимвол = Лев(Описание, 1);
	Если ТекСимвол="Н" Тогда
		// Нечетный
		Если НомерДома%2=0 Тогда
			// Четный номер не может входить в нечетный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания=1 Тогда
			// Все нечетные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ТекСимвол="Ч" Тогда
		// Четный
		Если НомерДома%2=1 Тогда
			// Нечетный номер не может входить в четный диапазон
			Возврат Ложь;
		ИначеЕсли ДлинаОписания=1 Тогда
			// Все четные
			Возврат Истина;
		КонецЕсли;
		Позиция = 2;
		
	ИначеЕсли ЭтоЦифра(ТекСимвол) Тогда
		// Обычный
		Позиция = 1;
		
	Иначе
		// Это не диапазон
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем начало
	НачДиапазона = 0;
	Пока Позиция<ПозицияДефиса Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол="(" Тогда
			// Возможное начало диапазона
			Продолжить;
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
		КонецЕсли;
		НачДиапазона = НачДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Позиция = Позиция + 1;
	// Ищем конец
	КонДиапазона = 0;
	Пока Позиция<=ДлинаОписания Цикл
		ТекСимвол = Сред(Описание, Позиция, 1);
		Позиция = Позиция + 1;
		Если ТекСимвол=")" Тогда
			// Возможный конец диапазона
			Прервать;
		ИначеЕсли Не ЭтоЦифра(ТекСимвол) Тогда
			// Это неправильный диапазон
			Возврат Ложь;
		КонецЕсли;
		КонДиапазона = КонДиапазона * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
		
	Если НачДиапазона>КонДиапазона Тогда
		// Это неправильный диапазон
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерДома>=НачДиапазона И НомерДома<=КонДиапазона;
КонецФункции

// Проверяет на соответствие дома описанию
//
// Параметры:
//     Здание             - Структура - описание дома, содержит реквизиты Дом, Корпус и т.п.
//     Описание           - Строка    - одиночное описание здания
//     ПолноеСоответствие - Булево    - флаг точного поиска. Если указано Ложь, то поиск происходит только по 
//                                      заполненным полям параметра Здание, например под описание
//                                      "Дом 2 корпус 1 строение 6" подойдут "Дом 2 корпус 1" и "Дом 2"
//
// Возвращаемые значение - Булево - признак вхождения
//
Функция ЗданиеВходитВОписание(Знач Здание, Знач Описание, Знач ПолноеСоответствие=Истина)
	
	// Разбираем в структуру
	ЧастиОписания = СтруктураОписанияЗдания(Описание);
	Если ЧастиОписания=Неопределено Тогда
		// Ошибка разбора строки
		Возврат Ложь;
	КонецЕсли;
	
	// Сравниваем по частям 
	Результат = Истина;
	
	// То, что передали, должно быть в найденном всегда
	Для Каждого КлючЗначение Из Здание Цикл
		Значение = КлючЗначение.Значение;
		Ключ     = КлючЗначение.Ключ;
		Если Не ПустаяСтрока(Значение) И ЧастиОписания[Ключ]<>Значение Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если ПолноеСоответствие Тогда
		// Все, что нашли, должно полностью совпадать с переданным
		Для Каждого КлючЗначение Из ЧастиОписания Цикл
			Значение = КлючЗначение.Значение;
			Ключ     = КлючЗначение.Ключ;
			Если Не ПустаяСтрока(Значение) Тогда
				Если Не Здание.Свойство(Ключ) Или Здание[Ключ]<>Значение Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// Разбирает строковое описание отдельного здания КЛАДР
//
// Параметры:
//     Описание - Строка - описание одиночного здания КЛАДР 
//
// Возвращаемое значение:
//     Структура    - Ключ - идентификатор, значение - номер здания.
//                    Набор идентификаторов определяется по данным таблицы-результата ТипыЧастейЗдания
//
//     Неопределено - если описание не удалось распознать.
//
Функция СтруктураОписанияЗдания(Знач Описание)
	Текст = Описание;
	Результат = Новый Структура;
	
	// Все дополнительны части здания
	ТипыЧастейЗдания = ТипыЧастейЗдания();
	Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
		Результат.Вставить(ТипЧасти.Идентификатор);
	КонецЦикла;
	
	Идентификатор = "Дом";	// по умолчанию для возможно пустого первого
	Результат.Вставить(Идентификатор);
	
	ЕстьЕщеЧасти = Истина;
	
	Пока ЕстьЕщеЧасти Цикл
		// Тип текущей части
		Позиция = 1;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			Если Лев(Текст, ТипЧасти.Длина)=ТипЧасти.Префикс Тогда
				Идентификатор = ТипЧасти.Идентификатор;
				Позиция       = 1 + ТипЧасти.Длина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Текст = Сред(Текст, Позиция);
		
		// Значение части
		Позиция = 0;
		Для Каждого ТипЧасти Из ТипыЧастейЗдания Цикл
			// Ищем ближайший следующий тип, после которого должно быть значение
			ТестПозиции = Найти(Текст, ТипЧасти.Префикс);
			Если ТестПозиции>0                                                  // Нашли
				И (Позиция=0 Или ТестПозиции<Позиция)                           // Ближайший
				И Не ПустаяСтрока(Сред(Текст, ТестПозиции + ТипЧасти.Длина, 1)) // Со значением
			Тогда
				Позиция = ТестПозиции;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьЕщеЧасти = Позиция>0;
		Если ЕстьЕщеЧасти Тогда
			Значение = Лев(Текст, Позиция-1);
			Текст = Сред(Текст, Позиция);
		Иначе
			Значение = Текст;
		КонецЕсли;
		
		Результат[Идентификатор] = СтрЗаменить(Значение, "_", "-");
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

// Разбирает строковое описание диапазона КЛАДР
//
// Параметры:
//     Описание - Строка - описание диапазона домов КЛАДР 
//
// Возвращаемое значение:
//    Структура с полями:
//        Четные   - Булево - Истина, если диапазон включает в себя четные дома.
//        Нечетные - Булево - Истина, если диапазон включает в себя нечетные дома.
//        Состав   - Строка - Номера домов через дефис. Пустая строка, если в диапазоне все дома
//
//    Неопределено, если описание не удалось распознать.
//
Функция СтруктураОписанияДиапазона(Знач Описание)
	Если Не ЭтоДиапазон(Описание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("Четные, Нечетные", Ложь, Ложь);
	
	ПервыйСимвол = Лев(Описание, 1);
	Если ПервыйСимвол="Н" Тогда
		Результат.Нечетные = Истина;
		Текст = Сред(Описание, 2);
	ИначеЕсли ПервыйСимвол="Ч" Тогда
		Результат.Четные = Истина;
		Текст = Сред(Описание, 2);
	Иначе
		Результат.Нечетные = Истина;
		Результат.Четные   = Истина;
		Текст = Описание;
	КонецЕсли;
	
	Результат.Вставить("Состав", СокрЛП(СтрЗаменить(СтрЗаменить(Текст, "(", ""), ")", "")) );
	
	Возврат Результат;
КонецФункции

// Выделяем числовую часть номера дома
//
// Параметры:
//     Номер - Строка, Число - полный номер дома
//
// Возвращаемое значение -число с числовой частью номера. Если числовой части нет, то возвращается ноль
//
Функция ЧисловаяЧастьНомера(Знач Номер)
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Если ТипЧисло.СодержитТип(ТипЗнч(Номер)) Тогда
		Возврат Номер;
	КонецЕсли;
	
	НомерДома = 0;
	Для Позиция=1 По СтрДлина(Номер) Цикл
		ТекСимвол = Сред(Номер, Позиция, 1);
		Если Не ЭтоЦифра(ТекСимвол) Тогда
			Прервать;
		КонецЕсли;
		НомерДома = НомерДома * 10 + ТипЧисло.ПривестиЗначение(ТекСимвол);
	КонецЦикла;
	
	Возврат НомерДома;
КонецФункции

// Определяет тип символа
//
// Параметры:
//     Символ- Строка - анализируемый символ
//
// Возвращаемое значение:
//     Булево - Истина, если переданный символ является цифрой
//
Функция ЭтоЦифра(Знач Символ)
	Возврат Найти("0123456789", Символ)>0;
КонецФункции

// Вычисляет основной номер здания выбором из заполненного дом, владение, домовладение
//
// Параметры:
//     Здание - структура - анализируемое здание с полями Дом, Домовладение, Владение
//
// Возвращаемое значение - строка с основным номером здания 
//
Функция ОсновнойНомерЗдания(Знач Здание)
	Результат = "";
	
	Если Здание.Свойство("Дом") Тогда
		Результат = Здание.Дом;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) И Здание.Свойство("Владение") Тогда
		Результат = Здание.Владение;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) И Здание.Свойство("Домовладение") Тогда
		Результат = Здание.Домовладение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что переданное описание - диапазон домов
//
// Параметры:
//     Описание - Строка - рассматриваемое описание диапазона
//                Диапазоном  упрощенно считаем или буквы "Н" и "Ч" - все нечетные и четные соответственно
//                или строку с дефисом
//
// Возвращаемое значение - Булево - Истина, если переданная строка может быть рассмотрена как диапазон домов
///
Функция ЭтоДиапазон(Знач Описание)
	Возврат Описание="Н" 
	    Или Описание="Ч"
		Или Найти(Описание, "-")>0
КонецФункции

// Формирует таблицу префиксов-разделителей данных КЛАДР, типов зданий 
// Имеет неявную связь с КонтактнаяИнформацияКлиентСерверПовтИсп.ТипыОбъектовАдресацииАдресаРФ()
//
// Возвращаемое значение - ТаблицаЗначений с колонками:
//         Префикс       - Строка - префикс-разделитель
//         Идентификатор - Строка - идентификатор для структуры
//         Длина         - Число  - длина префикса
//
Функция ТипыЧастейЗдания()
	Результат = 
		НоваяСтрокаТаблицы("ВЛД",        "Владение",
		НоваяСтрокаТаблицы("ДВЛД",       "Домовладение",
		НоваяСтрокаТаблицы("КОРПУС",     "Корпус",
		НоваяСтрокаТаблицы("К",          "Корпус",
		НоваяСтрокаТаблицы("СТР",        "Строение",
		НоваяСтрокаТаблицы("СТРОЕНИЕ",   "Строение",
		НоваяСтрокаТаблицы("ЛИТЕР",      "Литер",
		НоваяСтрокаТаблицы("СООРУЖЕНИЕ", "Сооружение",
		НоваяСтрокаТаблицы("УЧАСТОК",    "Участок",
		"Префикс, Идентификатор, Длина")))))))));
		
	Результат.Индексы.Добавить("Идентификатор");
	Результат.Сортировать("Длина УБЫВ, Префикс");
	Возврат Результат;
КонецФункции
Функция НоваяСтрокаТаблицы(Знач Префикс, Знач Идентификатор, Знач Таблица)
	Если ТипЗнч(Таблица)=Тип("Строка") Тогда
		Результат = Новый ТаблицаЗначений;
		Для Каждого КлючЗначение Из Новый Структура(Таблица) Цикл
			Результат.Колонки.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	Иначе 
		Результат = Таблица;
	КонецЕсли; 
	
	Строка = Результат.Добавить();
	Строка.Префикс       = Префикс;
	Строка.Идентификатор = Идентификатор;
	Строка.Длина         = СтрДлина(Префикс);
	
	Возврат Результат;
КонецФункции

// Возвращает расшифровку всех зданий улиц
//
// Параметры:
//     Улица - Структура - поля адресного объекта-улицы, для которой запрашиваются все дома
//
// Возвращаемое значение - ТаблицаЗначений с колонками
//     ЭтоДиапазон - Булево    - признак того, что описание содержит диапазон
//     Значение    - Структура - расшифровка данных. Неопределено, если данные не разобраны.
//     Описание    - Строка    - исходное описание
//     Индекс      - Строка    - почтовый индекс
//     Код         - Строка    - код адресного классификатора, соответствующий описанию
//
Функция РасшифровкаВсехЗданийУлицы(Знач Улица) Экспорт
	Результат = ВариантыНомеровЗданийУлицы(Улица);
	Результат.Колонки.Добавить("Значение");
	
	Для Каждого Вариант Из Результат Цикл
		Если Вариант.ЭтоДиапазон Тогда
			Вариант.Значение = СтруктураОписанияДиапазона(Вариант.Описание);
		Иначе
			Вариант.Значение = СтруктураОписанияЗдания(Вариант.Описание);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Сортировать("ЭтоДиапазон, Индекс");
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Данные для подсистемы КонтактнаяИнформация -разрыв связей подсистем
//

// Возвращает строку для поиска в операторе ПОДОБНО
Функция ЗамаскироватьСпецсимволы(Текст)
	Результат = Текст;
	Спецсимвол = "\";
	Служебные  = "%_[]^" + Спецсимвол;
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗапросДесериализацияАдресаПоПредставлениюКЛАДР(Знач ИсточникСтранМира = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	ДанныеАдреса.Позиция0     КАК Позиция0,
		|	ДанныеАдреса.Позиция      КАК Позиция,
		|	ДанныеАдреса.Значение     КАК Значение,
		|	ДанныеАдреса.Наименование КАК Наименование,
		|	ДанныеАдреса.Сокращение   КАК Сокращение,
		|	ДанныеАдреса.Начало       КАК Начало,
		|	ДанныеАдреса.Длина        КАК Длина
		|ПОМЕСТИТЬ 
		|	ДанныеАдреса
		|ИЗ
		|	&ДанныеАдреса КАК ДанныеАдреса
		|ИНДЕКСИРОВАТЬ ПО
		|	Позиция0, Позиция, Наименование, Сокращение
		|;//////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ 
		|	РаспознанныеДанные.Позиция      КАК Позиция,
		|	РаспознанныеДанные.Значение     КАК Значение,
		|	РаспознанныеДанные.Наименование КАК Наименование,
		|	РаспознанныеДанные.Сокращение   КАК Сокращение,
		|	РаспознанныеДанные.Начало       КАК Начало,
		|	РаспознанныеДанные.Длина        КАК Длина,
		|	ЛОЖЬ                            КАК Обработано,
		|
		|	РаспознанныеДанные.УровеньПоКлассификатору КАК УровеньПоКлассификатору,
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.УровеньПоКлассификатору ЕСТЬ NULL ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА 
		|	КОНЕЦ КАК НайденоПоКлассификатору,
		|
		|	РаспознанныеДанные.УровеньПоСокращениям КАК УровеньПоСокращениям,
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.УровеньПоСокращениям ЕСТЬ NULL ТОГДА ЛОЖЬ 
		|		ИНАЧЕ ИСТИНА 
		|	КОНЕЦ КАК НайденоПоСокращениям,
		|
		|	ВЫБОР
		|		КОГДА НЕ РаспознанныеДанные.МинимумСтранМира ЕСТЬ NULL ТОГДА ИСТИНА
		|		КОГДА РаспознанныеДанные.Значение В (&СтраныКлассификатора) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоСтранамМира,
		|
		|	ВЫБОР 
		|		КОГДА РаспознанныеДанные.Значение = &НаименованиеРоссии ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоСтранаРоссия,
		|	
		|	ВЫБОР
		|		КОГДА РаспознанныеДанные.Наименование ПОДОБНО ""[0-9][0-9][0-9][0-9][0-9][0-9]"" ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НайденоПоИндексу
		|
		|ИЗ (
		|	ВЫБРАТЬ 
		|		ДанныеАдреса.Позиция      КАК Позиция,
		|		ДанныеАдреса.Значение     КАК Значение,
		|		ДанныеАдреса.Наименование КАК Наименование,
		|		ДанныеАдреса.Сокращение   КАК Сокращение,
		|
		|		ДанныеАдреса.Начало       КАК Начало,
		|		ДанныеАдреса.Длина        КАК Длина,
		|
		|		МИНИМУМ(АдресныйКлассификатор.ТипАдресногоЭлемента) КАК УровеньПоКлассификатору,
		|		МИНИМУМ(АдресныеСокращения.Уровень)                 КАК УровеньПоСокращениям,
		|	
		|		МИНИМУМ(СтраныМира.Наименование) КАК МинимумСтранМира
		|
		|	ИЗ 
		|		ДанныеАдреса КАК ДанныеАдреса
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|	ПО
		|		АдресныйКлассификатор.Наименование = ДанныеАдреса.Наименование
		|		И АдресныйКлассификатор.Сокращение = ДанныеАдреса.Сокращение
		|		И АдресныйКлассификатор.ТипАдресногоЭлемента <= 5
		|		И АдресныйКлассификатор.ТипАдресногоЭлемента >= ДанныеАдреса.Позиция0
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АдресныеСокращения КАК АдресныеСокращения
		|	ПО
		|		АдресныеСокращения.Сокращение = ДанныеАдреса.Сокращение
		|		И АдресныеСокращения.Уровень <= 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		" + ?(ИсточникСтранМира = Неопределено, "( ВЫБРАТЬ &НаименованиеРоссии КАК Наименование )", ИсточникСтранМира) + " КАК СтраныМира
		|	ПО
		|		СтраныМира.Наименование = ДанныеАдреса.Значение
		|	СГРУППИРОВАТЬ ПО 
		|		ДанныеАдреса.Позиция,
		|		ДанныеАдреса.Значение,
		|		ДанныеАдреса.Наименование,
		|		ДанныеАдреса.Сокращение,
		|		ДанныеАдреса.Начало,
		|		ДанныеАдреса.Длина
		|) КАК РаспознанныеДанные
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныеДанные.Позиция УБЫВ
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросРезультатыАвтоПодбораНаселенногоПунктаКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде
		|ПОМЕСТИТЬ
		|	ТаблицаЗагруженныхРегионов
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК ЗагруженныеРегионыВнутр
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И 1 В (
		|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
		|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = ЗагруженныеРегионыВнутр.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
		|	)
		|ИНДЕКСИРОВАТЬ ПО
		|	КодАдресногоОбъектаВКоде
		|;//////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ 
		|	ВЫБОР 
		|		КОГДА ЗагруженныеРегионы.КодАдресногоОбъектаВКоде ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МожноЗагружатьРегион,
		|	ОтобранныеАдреса.*
		|
		|ИЗ (
		|
		|ВЫБРАТЬ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|
		|	Адреса.Индекс                 КАК Индекс, 
		|	Адреса.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|
		|	Адреса.КодАдресногоОбъектаВКоде КАК КодАдресногоОбъектаВКоде,
		|
		|	Адреса.Код КАК Код,
		|	Адреса.Наименование КАК АдресаНаименование,
		|	Адреса.Сокращение   КАК АдресаСокращение,
		|
		|	ВЫБОР
		|		КОГДА Адреса.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\"" ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПоложениеВСтроке,
		|
		|	ВЫБОР 
		|		КОГДА Адреса.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Регионы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Районы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Города.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА НаселенныеПункты.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Регионы.Сокращение              КАК РегионыСокращение,
		|	Регионы.Наименование            КАК РегионыНаименование,
		|	Районы.Сокращение               КАК РайоныСокращение,
		|	Районы.Наименование             КАК РайоныНаименование,
		|	Города.Сокращение               КАК ГородаСокращение,
		|	Города.Наименование             КАК ГородаНаименование,
		|	НаселенныеПункты.Сокращение     КАК НаселенныеПунктыСокращение,
		|	НаселенныеПункты.Наименование   КАК НаселенныеПунктыНаименование
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Регионы.ПризнакАктуальности = 0","") + "
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|   РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Районы.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Города.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО	
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И НаселенныеПункты.ПризнакАктуальности = 0","") + "
		|
		|ГДЕ
		|	Адреса.ТипАдресногоЭлемента <= 4
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Адреса.ПризнакАктуальности = 0","") + "
		|
		|	И (
		|		// В начале строки
		|		Адреса.Наименование ПОДОБНО &НачалоТекста СПЕЦСИМВОЛ ""\""
		|		ИЛИ
		|		// В начале слова
		|		Адреса.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\""
		|	)
		|
		|) ОтобранныеАдреса
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗагруженныхРегионов КАК ЗагруженныеРегионы
		|
		|ПО
		|	ЗагруженныеРегионы.КодАдресногоОбъектаВКоде = ОтобранныеАдреса.КодАдресногоОбъектаВКоде
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ОтобранныеАдреса.ПоложениеВСтроке,
		|
		|	  ЕСТЬNULL(ОтобранныеАдреса.АдресаНаименование, """")           + ЕСТЬNULL(ОтобранныеАдреса.АдресаСокращение, """")
		|	+ ЕСТЬNULL(ОтобранныеАдреса.НаселенныеПунктыНаименование, """") + ЕСТЬNULL(ОтобранныеАдреса.НаселенныеПунктыСокращение, """")
		|	+ ЕСТЬNULL(ОтобранныеАдреса.ГородаНаименование, """")           + ЕСТЬNULL(ОтобранныеАдреса.ГородаСокращение, """")
		|	+ ЕСТЬNULL(ОтобранныеАдреса.РайоныНаименование, """")           + ЕСТЬNULL(ОтобранныеАдреса.РайоныСокращение, """")
		|	+ ЕСТЬNULL(ОтобранныеАдреса.РегионыНаименование, """")          + ЕСТЬNULL(ОтобранныеАдреса.РегионыСокращение, """")
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросРезультатыАвтоПодбораУлицыКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Улицы.Индекс                 КАК Индекс,
		|	Улицы.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|
		|	Улицы.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Улицы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Улицы.Наименование КАК Наименование,
		|	Улицы.Сокращение   КАК Сокращение
		|	
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО
		|	Улицы.ТипАдресногоЭлемента = 5
		|	И Улицы.КодАдресногоОбъектаВКоде  = НаселенныйПункт.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = НаселенныйПункт.КодРайонаВКоде 
		|	И Улицы.КодГородаВКоде            = НаселенныйПункт.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
		|   " + ?(СкрыватьНеактуальныеАдреса, "И Улицы.ПризнакАктуальности = 0","") + "
		|
		|ГДЕ
		|	НаселенныйПункт.Код = &Код
		|	И (
		|		Улицы.Наименование ПОДОБНО &НачалоСтроки СПЕЦСИМВОЛ ""\""
		|		ИЛИ 
		|		Улицы.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\""
		|	)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Неактуален,
		|	ЕСТЬNULL(Улицы.Наименование, """") + ЕСТЬNULL(Улицы.Сокращение, """")
		|");
		
	Возврат Запрос;
КонецФункции

// Парсинг из строки текста
Функция ЗапросНаселенныеПунктыПоПредставлениюКЛАДР(Знач ЧастиАдреса, Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
	ДополнительныхСтрокПоиска = ЧастиАдреса.ВГраница();
	
	Запрос = Новый Запрос;
	ОграничительСверху = "яяяяя";
//{{1С-Минск
    // первый элемент описывает населенный пункт - меняем местами Наименование и Сокращение
	Сокращение = ЧастиАдреса[0].Наименование;
	Наименование   = ЧастиАдреса[0].Сокращение;
    //Наименование = ЧастиАдреса[0].Наименование;
    //Сокращение   = ЧастиАдреса[0].Сокращение;
//}}1C-Минск

	Если ДополнительныхСтрокПоиска = 0 И ПустаяСтрока(Сокращение) Тогда
		УсловиеНаименования = "(Адреса.Наименование >= &НаименованиеПоиска0 И Адреса.Наименование < &ОграничительПоиска0)";
	Иначе
		УсловиеНаименования = "(Адреса.Наименование = &НаименованиеПоиска0 И Адреса.Сокращение = &СокращениеПоиска0)";
	КонецЕсли;
	Запрос.УстановитьПараметр("НаименованиеПоиска0", Наименование);
	Запрос.УстановитьПараметр("ОграничительПоиска0", "" + Наименование + ОграничительСверху);
	Запрос.УстановитьПараметр("СокращениеПоиска0",   Сокращение);
	
	Для Позиция = 1 По ДополнительныхСтрокПоиска Цикл
		НомерПозиции = Формат(Позиция, "ЧН=; ЧГ=");
		ИмяПараметраНаименование = "НаименованиеПоиска" + НомерПозиции;
		ИмяПараметраСокращение   = "СокращениеПоиска"   + НомерПозиции;
		ИмяПараметраОграничитель = "ОграничительПоиска" + НомерПозиции;
		
		Наименование = ЧастиАдреса[Позиция].Наименование;
		Сокращение   = ЧастиАдреса[Позиция].Сокращение;
		Если ПустаяСтрока(Сокращение) Тогда
			УсловиеНаименования = УсловиеНаименования + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|И (
				|	    (НаселенныеПункты.Наименование >= &%1 И НаселенныеПункты.Наименование < &%2)
				|	ИЛИ (Города.Наименование  >= &%1 И Города.Наименование < &%2)
				|	ИЛИ (Районы.Наименование  >= &%1 И Районы.Наименование < &%2)
				|	ИЛИ (Регионы.Наименование >= &%1 И Регионы.Наименование < &%2)
				|)",
				ИмяПараметраНаименование, ИмяПараметраОграничитель);
		Иначе
			УсловиеНаименования = УсловиеНаименования + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
				|И (
				|	    (НаселенныеПункты.Наименование = &%1 И НаселенныеПункты.Сокращение = &%2)
				|	ИЛИ (Города.Наименование  = &%1 И Города.Сокращение = &%2)
				|	ИЛИ (Районы.Наименование  = &%1 И Районы.Сокращение = &%2)
				|	ИЛИ (Регионы.Наименование = &%1 И Регионы.Сокращение = &%2)
				|)",
				ИмяПараметраНаименование, ИмяПараметраСокращение);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметраНаименование, Наименование);
		Запрос.УстановитьПараметр(ИмяПараметраОграничитель, Наименование + ОграничительСверху);
		Запрос.УстановитьПараметр(ИмяПараметраСокращение,   Сокращение);
	КонецЦикла;
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Адреса.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Адреса.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Регионы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Районы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА Города.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		КОГДА НаселенныеПункты.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Регионы.Код          КАК РегионыКод,
		|	Регионы.Сокращение   КАК РегионыСокращение,
//{{1С-Минск
		|	ВЫБОР КОГДА Регионы.Наименование = ""Минск"" ТОГДА """"
		|	      ИНАЧЕ Регионы.Наименование        
		|	КОНЕЦ КАК РегионыНаименование,        
        //|	Регионы.Наименование КАК РегионыНаименование,
//}}1C-Минск
		|
		|	Районы.Код          КАК РайоныКод,
		|	Районы.Сокращение   КАК РайоныСокращение,
		|	Районы.Наименование КАК РайоныНаименование,
		|
		|	Города.Код          КАК ГородаКод,
		|	Города.Сокращение   КАК ГородаСокращение,
		|	Города.Наименование КАК ГородаНаименование,
		|
		|	НаселенныеПункты.Код          КАК НаселенныеПунктыКод,
		|	НаселенныеПункты.Сокращение   КАК НаселенныеПунктыСокращение,
		|	НаселенныеПункты.Наименование КАК НаселенныеПунктыНаименование
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Регионы.ПризнакАктуальности = 0","") + "
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Районы.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Города.ПризнакАктуальности = 0","") + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО	
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|	" + ?(СкрыватьНеактуальныеАдреса, "И НаселенныеПункты.ПризнакАктуальности = 0","") + "
		|
		|ГДЕ
		|	Адреса.ТипАдресногоЭлемента <= 4
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Адреса.ПризнакАктуальности = 0","") + "
		|	И (" + УсловиеНаименования + ")
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Адреса.ПризнакАктуальности,  // Актуальные - вперед
		|
		|	  ЕСТЬNULL(Адреса.Наименование, """")           + ЕСТЬNULL(Адреса.Сокращение, """")
		|	+ ЕСТЬNULL(НаселенныеПункты.Наименование, """") + ЕСТЬNULL(НаселенныеПункты.Сокращение, """")
		|	+ ЕСТЬNULL(Города.Наименование, """")           + ЕСТЬNULL(Города.Сокращение, """")
		|	+ ЕСТЬNULL(Районы.Наименование, """")           + ЕСТЬNULL(Районы.Сокращение, """")
		|	+ ЕСТЬNULL(Регионы.Наименование, """")          + ЕСТЬNULL(Регионы.Сокращение, """")
		|";

	Возврат Запрос;
КонецФункции

// Парсинг из строки текста
Функция ЗапросУлицыПоПредставлениюКЛАДР(Знач ЧастиАдреса, Знач ВыбиратьСтрок, Знач СкрыватьНеактуальныеАдреса) Экспорт
	
//{{1С-Минск
    // первый элемент описывает улицу - меняем местами Наименование и Сокращение
    НаименованиеПоиска = ЧастиАдреса[0].Сокращение;
	СокращениеПоиска   = ЧастиАдреса[0].Наименование;
    //НаименованиеПоиска = ЧастиАдреса[0].Наименование;
    //СокращениеПоиска   = ЧастиАдреса[0].Сокращение;
//}}1C-Минск

	Если ПустаяСтрока(СокращениеПоиска) Тогда
		УсловиеНаименования = "Улицы.Наименование ПОДОБНО &НачалоСтроки СПЕЦСИМВОЛ ""\"" ИЛИ  Улицы.Наименование ПОДОБНО &НачалоСлова СПЕЦСИМВОЛ ""\"" ";
	Иначе
		УсловиеНаименования = "Улицы.Наименование = &НаименованиеПоиска И Улицы.Сокращение = &СокращениеПоиска"
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|	Улицы.Код КАК Код,
		|
		|	ВЫБОР 
		|		КОГДА Улицы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	Улицы.Наименование КАК Наименование,
		|	Улицы.Сокращение   КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныйПункт
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО
		|	Улицы.ТипАдресногоЭлемента = 5
		|	И Улицы.КодАдресногоОбъектаВКоде  = НаселенныйПункт.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = НаселенныйПункт.КодРайонаВКоде
		|	И Улицы.КодГородаВКоде            = НаселенныйПункт.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде
		|
		|ГДЕ
		|	НаселенныйПункт.Код = &КодНаселенногоПункта
		|	" + ?(СкрыватьНеактуальныеАдреса, "И Улицы.ПризнакАктуальности = 0","") + "
		|	И (" + УсловиеНаименования + ")
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Улицы.ПризнакАктуальности,
		|
		|	ЕСТЬNULL(Улицы.Наименование, """") + ЕСТЬNULL(Улицы.Сокращение, """")
		|");
		
	// Частично известные параметры
	Запрос.УстановитьПараметр("НаименованиеПоиска", НаименованиеПоиска);
	Запрос.УстановитьПараметр("СокращениеПоиска",   СокращениеПоиска);
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокРеквизитовНаселенныйПунктКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НаселенныеПункты.Код          КАК НаселенныеПунктыКод,
		|	НаселенныеПункты.Наименование КАК НаселенныеПунктыНаименование,
		|	НаселенныеПункты.Сокращение   КАК НаселенныеПунктыСокращение,
		|	Города.Код                    КАК ГородаКод,
		|	Города.Наименование           КАК ГородаНаименование,
		|	Города.Сокращение             КАК ГородаСокращение,
		|	Районы.Код                    КАК РайоныКод,
		|	Районы.Наименование           КАК РайоныНаименование,
		|	Районы.Сокращение             КАК РайоныСокращение,
		|	Регионы.Код                   КАК РегионыКод,
		|	Регионы.Наименование          КАК РегионыНаименование,
		|	Регионы.Сокращение            КАК РегионыСокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО
		|	Регионы.ТипАдресногоЭлемента = 1
		|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	 
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО
		|	Районы.ТипАдресногоЭлемента = 2
		|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО
		|	Города.ТипАдресногоЭлемента = 3
		|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
		|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|
		|ГДЕ
		|	Адреса.Код = &Код
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокРеквизитовУлицаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Улицы.Код          КАК УлицыКод,
		|	Улицы.Наименование КАК УлицыНаименование,
		|	Улицы.Сокращение   КАК УлицыСокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ГДЕ
		|	Улицы.Код = &Код
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросСписокАнализаЭлементаАдресаКЛАДР(Знач ЧастиАдреса, Знач Уровень, Знач Наименование, Знач Сокращение, Знач ПоискПоПодобию, Знач ВыбиратьСтрок) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ=") + "
		|
		|	Адреса.Код                    КАК Код,
		|	Адреса.Индекс                 КАК Индекс,
		|	Адреса.АльтернативныеНазвания КАК АльтернативныеНазвания,
		|	Адреса.ПризнакАктуальности    КАК ПризнакАктуальности,
		|	Адреса.Наименование           КАК АдресаНаименование,
		|	Адреса.Сокращение             КАК АдресаСокращение,
		|
		|	ВЫБОР 
		|		КОГДА Адреса.ПризнакАктуальности > 0 ТОГДА ИСТИНА 
		|		ИНАЧЕ ЛОЖЬ 
		|	КОНЕЦ КАК Неактуален,
		|
		|	" + ?(Уровень = 1, "
		|	ВЫБОР КОГДА РегионЗагружен.Код ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
		|	", "
		|	ЛОЖЬ
		|	") + " КАК МожноЗагружатьРегион
		|
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК Адреса
		|");
	
	// Добавляем информацию о загруженности региона
	Если Уровень = 1 Тогда
		Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.АдресныйКлассификатор КАК РегионЗагружен
			|ПО
			|	РегионЗагружен.КодАдресногоОбъектаВКоде = Адреса.КодАдресногоОбъектаВКоде
			|	И РегионЗагружен.ТипАдресногоЭлемента = 1
			|	И 1 В (
			|		               ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 2
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 3
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 4
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 5
			|		ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.АдресныйКлассификатор ГДЕ КодАдресногоОбъектаВКоде = РегионЗагружен.КодАдресногоОбъектаВКоде И ТипАдресногоЭлемента = 6
			|   )
			|";
	КонецЕсли;
	Если Уровень > 1 Тогда
		// Район, опираемся на регион
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Регионы
			|ПО
			|	Регионы.ТипАдресногоЭлемента = 1
			|	И Регионы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Регионы.КодРайонаВКоде            = 0
			|	И Регионы.КодГородаВКоде            = 0
			|	И Регионы.КодНаселенногоПунктаВКоде = 0
			|	И Регионы.КодУлицыВКоде             = 0
			|	И Регионы.Наименование = &Регион
			|	И Регионы.Сокращение   = &РегионСокращение
			|";
		Запрос.УстановитьПараметр("Регион",           ЧастиАдреса.Регион.Наименование);
		Запрос.УстановитьПараметр("РегионСокращение", ЧастиАдреса.Регион.Сокращение);
	КонецЕсли;
	Если Уровень > 2 И (Не ПустаяСтрока(ЧастиАдреса.Район.Наименование)) Тогда
		// Город, опираемся на район + регион, район возможно пуст
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Районы
			|ПО
			|	Районы.ТипАдресногоЭлемента = 2
			|	И Районы.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Районы.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И Районы.КодГородаВКоде            = 0
			|	И Районы.КодНаселенногоПунктаВКоде = 0
			|	И Районы.КодУлицыВКоде             = 0
			|	И Районы.Наименование = &Район
			|	И Районы.Сокращение   = &РайонСокращение
			|";
		Запрос.УстановитьПараметр("Район",            ЧастиАдреса.Район.Наименование);
		Запрос.УстановитьПараметр("РайонСокращение",  ЧастиАдреса.Район.Сокращение);
	КонецЕсли;
	Если Уровень > 3 И (Не ПустаяСтрока(ЧастиАдреса.Город.Наименование)) Тогда
		// Населенный пункт, опираемся на регион + район + город, район возможно пуст, город возможно пуст
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК Города
			|ПО
			|	Города.ТипАдресногоЭлемента = 3
			|	И Города.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И Города.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И Города.КодГородаВКоде            = Адреса.КодГородаВКоде
			|	И Города.КодНаселенногоПунктаВКоде = 0
			|	И Города.КодУлицыВКоде            = 0
			|	И Города.Наименование = &Город
			|	И Города.Сокращение   = &ГородСокращение
			|";
		Запрос.УстановитьПараметр("Город",           ЧастиАдреса.Город.Наименование);
		Запрос.УстановитьПараметр("ГородСокращение", ЧастиАдреса.Город.Сокращение);
	КонецЕсли;
	Если Уровень > 4 И (Не ПустаяСтрока(ЧастиАдреса.НаселенныйПункт.Наименование)) Тогда
		// Улица, опираемся на регион + район + город + населенный пункт, возможно пустые
		Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
			|ПО
			|	НаселенныеПункты.ТипАдресногоЭлемента = 4
			|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = Адреса.КодАдресногоОбъектаВКоде
			|	И НаселенныеПункты.КодРайонаВКоде            = Адреса.КодРайонаВКоде
			|	И НаселенныеПункты.КодГородаВКоде            = Адреса.КодГородаВКоде
			|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = Адреса.КодНаселенногоПунктаВКоде
			|	И НаселенныеПункты.КодУлицыВКоде             = 0
			|
			|	И НаселенныеПункты.Наименование = &НаселенныйПункт
			|	И НаселенныеПункты.Сокращение   = &НаселенныйПунктСокращение
			|";
		Запрос.УстановитьПараметр("НаселенныйПункт",           ЧастиАдреса.НаселенныйПункт.Наименование);
		Запрос.УстановитьПараметр("НаселенныйПунктСокращение", ЧастиАдреса.НаселенныйПункт.Сокращение);
	КонецЕсли;
	
	Если ПустаяСтрока(Сокращение) Тогда
		УсловиеСокращения = "";
	Иначе
		Если ПоискПоПодобию Тогда
			УсловиеСокращения = "И Адреса.Сокращение ПОДОБНО &Сокращение СПЕЦСИМВОЛ ""\"" ";
			Запрос.УстановитьПараметр("Сокращение", ЗамаскироватьСпецсимволы(Сокращение) + "%");
		Иначе
			УсловиеСокращения = "И Адреса.Сокращение = &Сокращение";
			Запрос.УстановитьПараметр("Сокращение", Сокращение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискПоПодобию Тогда
		УсловиеНаименования = "И Адреса.Наименование ПОДОБНО &Наименование СПЕЦСИМВОЛ ""\"" ";
		Запрос.УстановитьПараметр("Наименование", ЗамаскироватьСпецсимволы(Наименование) + "%");
	Иначе
		УсловиеНаименования = "И Адреса.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Наименование);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Адреса.ТипАдресногоЭлемента = &Уровень
		|	" + УсловиеНаименования + "
		|	" + УсловиеСокращения + "
		|УПОРЯДОЧИТЬ ПО 
		|	Адреса.ПризнакАктуальности,
		|
		|	Адреса.Наименование
		|";
		
	Возврат Запрос;
КонецФункции

Функция ЗапросАдресаПоИндексуКЛАДР(Знач ВыбиратьСтрок, Знач СкрыватьНеактуальные) Экспорт
	ФрагментПервые = ?(ВыбиратьСтрок > 0, "ПЕРВЫЕ " + Формат(ВыбиратьСтрок, "ЧН=; ЧГ="), "");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ " + ФрагментПервые + "
		|
		|	ВЫБОР 
		|		КОГДА ПочтовыеИндексы.ПризнакАктуальности <> 0 ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Неактуален,
		|
		|	ПочтовыеИндексы.Индекс КАК Индекс,
		|	
		|	// Синтетический код объекта, к которому относится индекс - СС РРР ГГГ ППП УУУУ АА ДДДД
		|	1000000 * ВЫРАЗИТЬ( ПочтовыеИндексы.Код /1000000 - 0.5 КАК ЧИСЛО(21,0)) КАК Код,
		|	
		|	// Остальные колонки - вспомогательные, будут удалены из результата
		|
		|	Улицы.Наименование КАК УлицаНаименование,
		|	Улицы.Сокращение   КАК УлицаСокращение,
		|	Улицы.Наименование + "" "" + Улицы.Сокращение КАК ПредставлениеУлица,
		|
		|	НаселенныеПункты.Наименование КАК НаселенныйПунктНаименование,
		|	НаселенныеПункты.Сокращение   КАК НаселенныйПунктСокращение,
		|	НаселенныеПункты.Наименование + "" "" + НаселенныеПункты.Сокращение КАК ПредставлениеНаселенныйПункт,
		|	
		|	Города.Наименование КАК ГородНаименование,
		|	Города.Сокращение   КАК ГородСокращение,
		|	Города.Наименование + "" "" + Города.Сокращение КАК ПредставлениеГород,
		|	
		|	Районы.Наименование КАК РайонНаименование,
		|	Районы.Сокращение   КАК РайонСокращение,
		|	Районы.Наименование + "" "" + Районы.Сокращение КАК ПредставлениеРайон,
		|	
		|	Регионы.Наименование КАК РегионНаименование,
		|	Регионы.Сокращение   КАК РегионСокращение,
		|	Регионы.Наименование + "" "" + Регионы.Сокращение КАК ПредставлениеРегион
		|	
		|ПОМЕСТИТЬ 
		|	АдресаПоПочтовымИндексам
		|
		|ИЗ	
		|	РегистрСведений.АдресныйКлассификатор КАК ПочтовыеИндексы
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Улицы
		|ПО	
		|	Улицы.ТипАдресногоЭлемента = 5
		|	" + ?(СкрыватьНеактуальные, "И Улицы.ПризнакАктуальности = 0","") + "
		|	И Улицы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Улицы.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Улицы.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И Улицы.КодНаселенногоПунктаВКоде = ПочтовыеИндексы.КодНаселенногоПунктаВКоде
		|	И Улицы.КодУлицыВКоде             = ПочтовыеИндексы.КодУлицыВКоде
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК НаселенныеПункты
		|ПО	
		|	НаселенныеПункты.ТипАдресногоЭлемента = 4
		|	" + ?(СкрыватьНеактуальные, "И НаселенныеПункты.ПризнакАктуальности = 0","") + "
		|	И НаселенныеПункты.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И НаселенныеПункты.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И НаселенныеПункты.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И НаселенныеПункты.КодНаселенногоПунктаВКоде = ПочтовыеИндексы.КодНаселенногоПунктаВКоде
		|	И НаселенныеПункты.КодУлицыВКоде             = 0
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Города
		|ПО	
		|	Города.ТипАдресногоЭлемента = 3
		|	" + ?(СкрыватьНеактуальные, "И Города.ПризнакАктуальности = 0","") + "
		|	И Города.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Города.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Города.КодГородаВКоде            = ПочтовыеИндексы.КодГородаВКоде 
		|	И Города.КодНаселенногоПунктаВКоде = 0
		|	И Города.КодУлицыВКоде             = 0
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Районы
		|ПО	
		|	Районы.ТипАдресногоЭлемента = 2
		|	" + ?(СкрыватьНеактуальные, "И Районы.ПризнакАктуальности = 0","") + "
		|	И Районы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Районы.КодРайонаВКоде            = ПочтовыеИндексы.КодРайонаВКоде 
		|	И Районы.КодГородаВКоде            = 0
		|	И Районы.КодНаселенногоПунктаВКоде = 0
		|	И Районы.КодУлицыВКоде             = 0
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АдресныйКлассификатор КАК Регионы
		|ПО	
		|	Регионы.ТипАдресногоЭлемента = 1
		|	" + ?(СкрыватьНеактуальные, "И Регионы.ПризнакАктуальности = 0","") + "
		|	И Регионы.КодАдресногоОбъектаВКоде  = ПочтовыеИндексы.КодАдресногоОбъектаВКоде
		|	И Регионы.КодРайонаВКоде            = 0
		|	И Регионы.КодГородаВКоде            = 0
		|	И Регионы.КодНаселенногоПунктаВКоде = 0
		|	И Регионы.КодУлицыВКоде             = 0
		|	
		|ГДЕ
		|	ПочтовыеИндексы.Индекс = &ПочтовыйИндекс
		|	" + ?(СкрыватьНеактуальные, "И ПочтовыеИндексы.ПризнакАктуальности = 0","") + "
		|
		|" + ?(ПустаяСтрока(ФрагментПервые), "", "
		|УПОРЯДОЧИТЬ ПО
		|	Индекс, 
		|	УлицаНаименование, УлицаСокращение,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение,
		|	ГородНаименование, ГородСокращение,
		|	РайонНаименование, РайонСокращение,
		|	РегионНаименование, РегионСокращение
		|") + "
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|
		|// Основной результат
		|ВЫБРАТЬ 
		|	Неактуален, Индекс, Код,
		|	УлицаНаименование, УлицаСокращение, ПредставлениеУлица,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение, ПредставлениеНаселенныйПункт,
		|	ГородНаименование, ГородСокращение, ПредставлениеГород,
		|	РайонНаименование, РайонСокращение, ПредставлениеРайон,
		|	РегионНаименование, РегионСокращение, ПредставлениеРегион
		|ИЗ 
		|	АдресаПоПочтовымИндексам
		|УПОРЯДОЧИТЬ ПО
		|	Индекс, 
		|	УлицаНаименование, УлицаСокращение,
		|	НаселенныйПунктНаименование, НаселенныйПунктСокращение,
		|	ГородНаименование, ГородСокращение,
		|	РайонНаименование, РайонСокращение,
		|	РегионНаименование, РегионСокращение
		|;///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|
		|// Вспомогательный результат
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА КоличествоУлица = 1 ТОГДА МинимумНаименованиеУлица ИНАЧЕ """" КОНЕЦ КАК УлицаНаименование,
		|	ВЫБОР КОГДА КоличествоУлица = 1 ТОГДА МинимумСокращениеУлица   ИНАЧЕ """" КОНЕЦ КАК УлицаСокращение,
		|
		|	ВЫБОР КОГДА КоличествоНаселенныйПункт = 1 ТОГДА МинимумНаименованиеНаселенныйПункт ИНАЧЕ """" КОНЕЦ КАК НаселенныйПунктНаименование,
		|	ВЫБОР КОГДА КоличествоНаселенныйПункт = 1 ТОГДА МинимумСокращениеНаселенныйПункт   ИНАЧЕ """" КОНЕЦ КАК НаселенныйПунктСокращение,
		|
		|	ВЫБОР КОГДА КоличествоГород = 1 ТОГДА МинимумНаименованиеГород ИНАЧЕ """" КОНЕЦ КАК ГородНаименование,
		|	ВЫБОР КОГДА КоличествоГород = 1 ТОГДА МинимумСокращениеГород   ИНАЧЕ """" КОНЕЦ КАК ГородСокращение,
		|
		|	ВЫБОР КОГДА КоличествоРайон = 1 ТОГДА МинимумНаименованиеРайон ИНАЧЕ """" КОНЕЦ КАК РайонНаименование,
		|	ВЫБОР КОГДА КоличествоРайон = 1 ТОГДА МинимумСокращениеРайон   ИНАЧЕ """" КОНЕЦ КАК РайонСокращение,
		|
		|	ВЫБОР КОГДА КоличествоРегион = 1 ТОГДА МинимумНаименованиеРегион ИНАЧЕ """" КОНЕЦ КАК РегионНаименование,
		|	ВЫБОР КОГДА КоличествоРегион = 1 ТОГДА МинимумСокращениеРегион   ИНАЧЕ """" КОНЕЦ КАК РегионСокращение
		|
		|ИЗ (
		|	ВЫБРАТЬ 
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеУлица, """")) КАК КоличествоУлица,
		|		МИНИМУМ(УлицаНаименование)                               КАК МинимумНаименованиеУлица,
		|		МИНИМУМ(УлицаСокращение)                                 КАК МинимумСокращениеУлица,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеНаселенныйПункт, """")) КАК КоличествоНаселенныйПункт,
		|		МИНИМУМ(НаселенныйПунктНаименование)                               КАК МинимумНаименованиеНаселенныйПункт,
		|		МИНИМУМ(НаселенныйПунктСокращение)                                 КАК МинимумСокращениеНаселенныйПункт,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеГород, """")) КАК КоличествоГород,
		|		МИНИМУМ(ГородНаименование)                               КАК МинимумНаименованиеГород,
		|		МИНИМУМ(ГородСокращение)                                 КАК МинимумСокращениеГород,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеРайон, """")) КАК КоличествоРайон,
		|		МИНИМУМ(РайонНаименование)                               КАК МинимумНаименованиеРайон,
		|		МИНИМУМ(РайонСокращение)                                 КАК МинимумСокращениеРайон,
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ПредставлениеРегион, """")) КАК КоличествоРегион,
		|		МИНИМУМ(РегионНаименование)                               КАК МинимумНаименованиеРегион,
		|		МИНИМУМ(РегионСокращение)                                 КАК МинимумСокращениеРегион
		|	ИЗ
		|		АдресаПоПочтовымИндексам
		|) Подзапрос
		|");
	
	Возврат Запрос;
КонецФункции

Функция ЗапросКодРегионаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КодАдресногоОбъектаВКоде КАК Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|
		|	И Наименование = &Наименование
		|	И Сокращение   = &Сокращение
		|");

	Возврат Запрос;
КонецФункции

Функция ЗапросРегионКодаКЛАДР() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Наименование + "" "" + Сокращение КАК Регион
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодАдресногоОбъектаВКоде  = &Код
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|");
		
	Возврат Запрос;
КонецФункции

Функция ЗапросВсеРегионыКЛАДР() Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	КодАдресногоОбъектаВКоде          КАК Код,
		|	Наименование                      КАК Наименование,
		|	Сокращение                        КАК Сокращение,
		|	Наименование + "" "" + Сокращение КАК Представление
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = 1
		|	И КодРайонаВКоде            = 0
		|	И КодГородаВКоде            = 0
		|	И КодНаселенногоПунктаВКоде = 0
		|	И КодУлицыВКоде             = 0
		|");
	
	Возврат Запрос;
КонецФункции

Функция ПолучитьИмяИАдресноеСокращениеУлицыИНаселенногоПункта(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПервПробела = Найти(Буфер, " ");
	
	Если ПозицияПервПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
 	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(ВсеСокращения.Сокращение)>0 
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СокращенияЗагружены,
		|	ВЫБОР
		|		КОГДА 1 В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.АдресныеСокращения
		|			ГДЕ
		|				Сокращение = &Сокращение
		|		)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СокращениеНайдено
		|ИЗ 
		|	РегистрСведений.АдресныеСокращения КАК ВсеСокращения
		|");
	Запрос.УстановитьПараметр("Сокращение", Лев(СтрокаЭлемента, ПозицияПервПробела-1));
	
	Результат = Запрос.Выполнить().Выгрузить()[0];
	Если Результат.СокращенияЗагружены И Не Результат.СокращениеНайдено Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Если ПустаяСтрока(Сред(СтрокаЭлемента, ПозицияПервПробела + 1)) Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	АдресноеСокращение = Лев(СтрокаЭлемента, ПозицияПервПробела - 1);
	Возврат Сред(СтрокаЭлемента, ПозицияПервПробела + 1);
КонецФункции

//}}1C-Минск
// Функция для заполнения данных с 2-го по 5-й уровень классификации:
// 2-й - районы республики.
// 3-й   сельсоветы .
// 4-й   города и поселки городского типа, сельские населенные пункты
// 5-й   улицы городов, поселков городского типа и сельских населенных пунктов.
//
// Параметры:
//    КодАдресногоОбъекта    - строка (2 символа) - строковое представление номера адресного объекта
//    ПутьКДаннымНаСервере   - Строка - путь к каталогу на сервере, в котором хранятся файлы кладр. 
//                             Путь заканчивается слешем (обратным или прямым)
//    АдресныеСведения       - ТаблицаЗначений - таблица, которая заполняется загружаемыми элементами
//    АльтернативныеНазвания - ТаблицаЗначений
//    ЗагрузкаСВеб           - Булево. Признак того, нужно ли строить индекс и позиционироваться на 1й элемент региона
//    ТипАдресногоЭлемента   - Число - уровень адресного объекта.
//
// Возвращаемое значение:
//    Булево - Истина, если адресные сведения загружены, Ложь - Иначе.
//
Функция ЗагрузитьАдресныеСведенияРБ(КодАдресногоОбъекта, ПутьКДаннымНаСервере, АдресныеСведения, АльтернативныеНазвания, ЗагрузкаСВеб, Знач ТипАдресногоЭлемента=Неопределено)
    Перем ФайлИндексаКлассификатора;
    
    ФайлАдресногоКлассификатора = ПутьКДаннымНаСервере +  ".DBF";
     
    //xB = Новый XBase(ФайлАдресногоКлассификатора, ФайлИндексаКлассификатора, Истина);
    xB = Новый XBase(ФайлАдресногоКлассификатора, , Истина);
    xB.Кодировка = КодировкаXBase.OEM;
    
    // Если мы загружаем улицы или дома, то тип адресного элемента
    Если ТипАдресногоЭлемента <> Неопределено Тогда
        ТипАдресногоЭлементаУстановлен = Истина;
    Иначе
        ТипАдресногоЭлементаУстановлен = Ложь;
    КонецЕсли;
    
    Если АдресныеСведения.Колонки.Найти("СОАТО") = Неопределено Тогда
        // Для упрощения поиска населенных пунктов при загрузке улиц 
        АдресныеСведения.Колонки.Добавить("СОАТО");
    КонецЕсли;
    
    Если Не xB.Открыта() Тогда
        Возврат Ложь;
    КонецЕсли;
    
    _Контроль = Новый Соответствие;

    ЕстьОшибки = Ложь;
    
    ПолныйКодМинска = "50000000010000000000";
    
    //Если Не ЗагрузкаСВеб Тогда
    //	xB.ТекущийИндекс = xB.Индексы.Найти("IDXCODE");
    //	xB.Найти (КодАдресногоОбъекта, "=");
    //КонецЕсли;
    
    Пока Не xB.ВКонце() Цикл
        СОАТО = xB.SOATO;
        
        Если Не ТипАдресногоЭлементаУстановлен Тогда
            // Загрузка населенных пунктов из CITY
            
            // Отсекаем устаревшие коды СОАТО
            ДатаЛиквидации = Дата(xB.DATEL);
            Если ЗначениеЗаполнено(ДатаЛиквидации) Тогда
                xB.Следующая();
                Продолжить;
            КонецЕсли;  
            
            Если СтрДлина(СокрЛП(СОАТО))<10 Тогда
                xB.Следующая();
                Продолжить;
            КонецЕсли; 
            
            Код = СОАТО + "0000000000";
            
            
            //Код = ПреобразоватьСОАТОвКод(СОАТО, xB);
            
            Если _Контроль[Код] = НеОпределено Тогда
                _Контроль[Код] = 0;
                
                Если "0"+Лев(Код, 1) <> КодАдресногоОбъекта Тогда
                    xB.Следующая();
                    Продолжить;
                КонецЕсли;
                
                // Создаем область
                Если _Контроль[КодАдресногоОбъекта] = Неопределено Тогда
                    
                    _Контроль[КодАдресногоОбъекта] = 0;
                    
                    НоваяСтрока = АдресныеСведения.Добавить();
                    НоваяСтрока.Код = Число(Лев(Код, 1)+"0000000000000000000");
                    
                    НоваяСтрока.ТипАдресногоЭлемента      = 1;
                    НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 1));
                    НоваяСтрока.КодРайонаВКоде            = 0;
                    НоваяСтрока.КодГородаВКоде            = 0; // Сельсовет
                    НоваяСтрока.КодНаселенногоПунктаВКоде = 0;
                    НоваяСтрока.КодУлицыВКоде             = 0;
                    НоваяСтрока.ПризнакАктуальности       = 0;
                    
                    Сокращение   = "обл.";
                    Если КодАдресногоОбъекта = "01" Тогда
                        НоваяСтрока.Наименование = "Брестская";
                    ИначеЕсли КодАдресногоОбъекта = "02" Тогда
                        НоваяСтрока.Наименование = "Витебская";
                    ИначеЕсли КодАдресногоОбъекта = "03" Тогда
                        НоваяСтрока.Наименование = "Гомельская";
                    ИначеЕсли КодАдресногоОбъекта = "04" Тогда
                        НоваяСтрока.Наименование = "Гродненская";
                    ИначеЕсли КодАдресногоОбъекта = "05" Тогда  // фиктивная область
                        НоваяСтрока.Наименование = "Минск";
                        Сокращение   = "";
                    ИначеЕсли КодАдресногоОбъекта = "06" Тогда
                        НоваяСтрока.Наименование = "Минская";
                    ИначеЕсли КодАдресногоОбъекта = "07" Тогда
                        НоваяСтрока.Наименование = "Могилевская";
                    КонецЕсли; 
                    НоваяСтрока.Сокращение   = Сокращение;
                КонецЕсли; 
                
                 // Создаем район
                НаименованиеРайона = СокрЛП(xB.RAION);
                ЕстьРайон = ?(ЗначениеЗаполнено(НаименованиеРайона), Истина, Ложь);
                Сокращение   = "р-н";
                
                Если Сред(Код, 2, 1) = "4" Тогда
                    Если ЕстьРайон Тогда
                        // Это город в качестве района
                        Сокращение   = "";
                        ЕстьРайон = Ложь;
                    КонецЕсли; 
                КонецЕсли; 
                
                ПолныйКодРайона = Сред(Код, 1, 4) + "0000000000000000";
                Если _Контроль[ПолныйКодРайона] = Неопределено Тогда
                    
                    Если ЕстьРайон Тогда
                        _Контроль[ПолныйКодРайона] = 0;
                        
                        НоваяСтрока = АдресныеСведения.Добавить();
                        НоваяСтрока.Код = Число(ПолныйКодРайона);
                        
                        НоваяСтрока.ТипАдресногоЭлемента      = 2;
                        НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 1));
                        НоваяСтрока.КодРайонаВКоде            = Число(Сред(Код, 2, 3));
                        НоваяСтрока.КодГородаВКоде            = 0; // Сельсовет
                        НоваяСтрока.КодНаселенногоПунктаВКоде = 0;
                        НоваяСтрока.КодУлицыВКоде             = 0;
                        НоваяСтрока.ПризнакАктуальности       = 0;
                        
                        НоваяСтрока.Наименование = НаименованиеРайона;
                        НоваяСтрока.Сокращение   = Сокращение;
                    КонецЕсли;
                КонецЕсли;
                
                // Создаем Сельсовет
                НаименованиеСельсовета = СокрЛП(xB.SOVET);
                ЕстьСельсовет = ?(ЗначениеЗаполнено(НаименованиеСельсовета), Истина, Ложь);
                
                ПолныйКодСельсовета = Сред(Код, 1, 7) + "0000000000000";
                Если _Контроль[ПолныйКодСельсовета] = Неопределено Тогда
                    
                    Если ЕстьСельсовет Тогда
                        _Контроль[ПолныйКодСельсовета] = 0;
                        
                        НоваяСтрока = АдресныеСведения.Добавить();
                        НоваяСтрока.Код = Число(ПолныйКодСельсовета);
                        
                        НоваяСтрока.ТипАдресногоЭлемента      = 3;
                        НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 1));
                        НоваяСтрока.КодРайонаВКоде            = Число(Сред(Код, 2, 3));
                        НоваяСтрока.КодГородаВКоде            = Число(Сред(Код, 5, 3)); // Сельсовет берем с видом
                        НоваяСтрока.КодНаселенногоПунктаВКоде = 0;
                        НоваяСтрока.КодУлицыВКоде             = 0;
                        НоваяСтрока.ПризнакАктуальности       = 0;
                        
                        НоваяСтрока.Наименование = НаименованиеСельсовета;
                        Если Найти(НаименованиеСельсовета, "Совет") = 0 Тогда
                            НоваяСтрока.Сокращение   = "с/с";
                        КонецЕсли; 
                   КонецЕсли;
                КонецЕсли;
                
                // Создаем Населенный пункт
                // Собираем полный код
                ПолныйКодНаселенногоПункта = Сред(Код, 1, 1); // Область
                ПолныйКодНаселенногоПункта = ПолныйКодНаселенногоПункта + ?(ЕстьРайон, Сред(Код, 2, 3), "000");
                ПолныйКодНаселенногоПункта = ПолныйКодНаселенногоПункта + ?(ЕстьСельсовет, Сред(Код, 5, 3), "000");
                
                НадоУчестьРайон = Истина;
                Если Сред(Код, 2, 1)= "4" Тогда
                    Если Сред(Код, 5, 1)= "5" Тогда
                        // Населенный Пункт в 6-7 разрядах, и город к которому он относится в 3-4
                        КодНаселенногоПунктаВКоде = Число(Сред(Код, 6, 2));       
                    Иначе
                        // Населенный Пункт в 3-4 разрядах
                        КодНаселенногоПунктаВКоде = Число(Сред(Код, 3, 2));       
                        НадоУчестьРайон = Ложь;
                    КонецЕсли;
                ИначеЕсли Сред(Код, 5, 1)= "5" Тогда
                    // Населенный Пункт в 6-7 разрядах
                    КодНаселенногоПунктаВКоде = Число(Сред(Код, 6, 2));       
                Иначе
                    Если Сред(Код, 1, 1)="5" Тогда
                        // Это Минск
                        КодНаселенногоПунктаВКоде = 1;
                        НадоУчестьРайон = Ложь;
                    Иначе	
                        // Населенный Пункт в 8-10 разрядах
                        КодНаселенногоПунктаВКоде = Число(Сред(Код, 8, 3));       
                    КонецЕсли; 
                КонецЕсли; 
                Если НадоУчестьРайон Тогда
                    // райцентр
                    КодНаселенногоПунктаВКоде = Число(Сред(Код, 2, 3))+КодНаселенногоПунктаВКоде;
                КонецЕсли; 

                ЛидирующиеНули = "";
                Если КодНаселенногоПунктаВКоде < 10 Тогда
                    ЛидирующиеНули = "00";
                ИначеЕсли КодНаселенногоПунктаВКоде < 100 Тогда
                    ЛидирующиеНули = "0";	
                КонецЕсли; 
                ПолныйКодНаселенногоПункта = ПолныйКодНаселенногоПункта + ЛидирующиеНули + КодНаселенногоПунктаВКоде;
                ПолныйКодНаселенногоПункта = ПолныйКодНаселенногоПункта + "0000000000";
                
                
                //ПолныйКодНаселенногоПункта = Сред(Код, 1, 10) + "0000000000";
                //Если Сред(Код, 1, 1)="5" Тогда
                //    // Это Минск - вносим изменения в полный код
                //    ПолныйКодНаселенногоПункта = ПолныйКодМинска;       
                //КонецЕсли; 

                Если _Контроль[ПолныйКодНаселенногоПункта] = Неопределено Тогда
                    
                    _Контроль[ПолныйКодНаселенногоПункта] = 0;
                    
                    НоваяСтрока = АдресныеСведения.Добавить();
                    
                    НоваяСтрока.ТипАдресногоЭлемента      = 4;
                    НоваяСтрока.КодАдресногоОбъектаВКоде  = Число(Сред(Код, 1, 1));
                    НоваяСтрока.КодРайонаВКоде            = ?(ЕстьРайон, Число(Сред(Код, 2, 3)), 0);
                    НоваяСтрока.КодГородаВКоде            = ?(ЕстьСельсовет, Число(Сред(Код, 5, 3)), 0); // Сельсовет берем с видом
                     
                    НоваяСтрока.КодНаселенногоПунктаВКоде = КодНаселенногоПунктаВКоде;

                     
                    НоваяСтрока.Код = Число(ПолныйКодНаселенногоПункта);
                    
                    НоваяСтрока.КодУлицыВКоде             = 0;
                    НоваяСтрока.ПризнакАктуальности       = 0;
                    
                    // СОАТО запоминаем только для Населенных пунктов, что бы потом их можно было найти для загрузки улиц
                    НоваяСтрока.СОАТО       = СОАТО;
                   
                    НоваяСтрока.Наименование = СокрЛП(xB.NAME);
                    
                    ТипНаселенногоПункта = НРег(СокрЛП(xB.TIP));
                    Если Прав(ТипНаселенногоПункта,1) <> "." Тогда
                        Если ТипНаселенногоПункта <> "кп" Тогда
                            ТипНаселенногоПункта = ТипНаселенногоПункта + ".";
                        КонецЕсли;
                    КонецЕсли;
                    НоваяСтрока.Сокращение   = ТипНаселенногоПункта;
                КонецЕсли;
            Иначе
                ЕстьОшибки = Истина;
            КонецЕсли;
            
        Иначе
            // Загрузка улиц из NNUL*
            
            Код = Число(СОАТО)*10000000000 + Число(xB.KUL)*1000000;
            //
            //КодСтрокой = Формат(Код,"ЧГ=0");
            //ПолныйКодНаселенногоПункта = Число(Сред(КодСтрокой, 1, 10))*10000000000;
            //Если Сред(ПолныйКодНаселенногоПункта, 1, 1)="5" Тогда
            //    // Это Минск - вносим изменения в полный код
            //    ПолныйКодНаселенногоПункта = Число(ПолныйКодМинска);       
            //КонецЕсли; 
            СтрокаНаселенногоПункта = АдресныеСведения.Найти(СОАТО, "СОАТО");
            
            Если СтрокаНаселенногоПункта<>Неопределено Тогда
                Если _Контроль[Код] = Неопределено Тогда
                    // для исключения дублей улиц
                    _Контроль[Код] = 0;
                    НоваяСтрока = АдресныеСведения.Добавить();
                    НоваяСтрока.Код = СтрокаНаселенногоПункта.Код + Число(xB.KUL)*1000000;
                    
                    НоваяСтрока.ТипАдресногоЭлемента      = 5;
                    НоваяСтрока.КодАдресногоОбъектаВКоде  = СтрокаНаселенногоПункта.КодАдресногоОбъектаВКоде;
                    НоваяСтрока.КодРайонаВКоде            = СтрокаНаселенногоПункта.КодРайонаВКоде;
                    НоваяСтрока.КодГородаВКоде            = СтрокаНаселенногоПункта.КодГородаВКоде; // Сельсовет
                    НоваяСтрока.КодНаселенногоПунктаВКоде = СтрокаНаселенногоПункта.КодНаселенногоПунктаВКоде;
                    НоваяСтрока.КодУлицыВКоде             = Число(xB.KUL);
                    НоваяСтрока.ПризнакАктуальности       = 0;
                    
                    НоваяСтрока.Наименование = СокрЛП(xB.ULICA);
                    НоваяСтрока.Сокращение   = НРЕГ(СокрЛП(xB.NTU));
                    
               КонецЕсли; 
            Иначе	
                ЕстьОшибки = Истина;
            КонецЕсли;
            
        КонецЕсли;
        
        xB.Следующая();
        
    КонецЦикла;
    
    xB.ЗакрытьФайл();
    
    Если ЕстьОшибки Тогда
        СтрокаОшибки = НСтр("ru = 'В файле адресного классификатора %1 есть ошибки уникальности кодов'");
        ПараметрыВСтроке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, ПутьКДаннымНаСервере);
        ЗаписьЖурналаРегистрации(НСтр("ru = 'Адресный классификатор.Загрузка'"), 
        УровеньЖурналаРегистрации.Ошибка, , , ПараметрыВСтроке
        );
    КонецЕсли;
    
    Возврат Истина;
КонецФункции

#КонецОбласти
