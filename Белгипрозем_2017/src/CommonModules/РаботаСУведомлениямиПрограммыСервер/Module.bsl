////////////////////////////////////////////////////////////////////////////////
// Работа с уведомлениями программы сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет уведомление.
//
// Параметры:
//   - ДатаУведомления - Дата
//   - ОписаниеУведомления - Строка
//   - ВидУведомления - ПеречислениеСсылка.ВидыУведомленийПрограммы
//   - ПолучательУведомления - СправочникСсылка.Пользователи
//   - ОбъектУведомления - ЛюбаяСсылка
//
// Пример:
//   Попытка
//      БизнесПроцесс.Стартовать();
//   Исключение
//      Описаниеошибки = НСтр("ru = 'При старте процесс произошла ошибка...'");
//      ТекущийПользователь = Пользователи.ТекущийПользователь();
//
//      РаботаСУведомлениямиПрограммыСервер.ДобавитьУведомление(
//          ТекущаяДата(),
//          Описаниеошибки,
//          Перечисления.ВидыУведомленийПрограммы.Ошибка,
//          ТекущийПользователь,
//          БизнесПроцесс.Ссылка);
//   КонецПопытки
//
Процедура ДобавитьУведомление(
	ДатаУведомления,
	ОписаниеУведомления,
	ВидУведомления,
	ПолучательУведомления,
	ОбъектУведомления = Неопределено) Экспорт
	
	// Проверка ключевых параметров.
	Если ТипЗнч(ДатаУведомления) <> Тип("Дата")
		ИЛИ НЕ ЗначениеЗаполнено(ДатаУведомления) Тогда
		ОписаниеОшибки = НСтр(
			"ru = 'Не указана дата уведомления.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеУведомления) <> Тип("Строка")
		ИЛИ НЕ ЗначениеЗаполнено(ОписаниеУведомления) Тогда
		ОписаниеОшибки = НСтр(
			"ru = 'Не указано описание уведомления.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(ВидУведомления) <> Тип("ПеречислениеСсылка.ВидыУведомленийПрограммы")
		ИЛИ НЕ ЗначениеЗаполнено(ВидУведомления) Тогда
		ОписаниеОшибки = НСтр(
			"ru = 'Не указан вид уведомления.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если ТипЗнч(ПолучательУведомления) <> Тип("СправочникСсылка.Пользователи")
		ИЛИ НЕ ЗначениеЗаполнено(ПолучательУведомления) Тогда
		ОписаниеОшибки = НСтр(
			"ru = 'Не указан получатель уведомления.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	// Создание нового уведомления.
	НовоеУведомление = Справочники.УведомленияПрограммы.СоздатьЭлемент();
	НовоеУведомление.Дата = ДатаУведомления;
	НовоеУведомление.Описание = ОписаниеУведомления;
	НовоеУведомление.ВидУведомления = ВидУведомления;
	НовоеУведомление.Пользователь = ПолучательУведомления;
	НовоеУведомление.Объект = ОбъектУведомления;
	НовоеУведомление.Записать();
	
	// Добавление в очереди уведомлений для рассылки уведомления программы по почте
	// через механизм подписок на события.
	ВключенаПодпискаНаУведомлениеПрограммы = РаботаСУведомлениями.ПолучитьНастройкуПользователя(
		ПолучательУведомления,
		Перечисления.НастройкиУведомлений.УведомленияПрограммы, 
		Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы);
	
	Если ВключенаПодпискаНаУведомлениеПрограммы Тогда
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
			НовоеУведомление.Ссылка,
			ПолучательУведомления,
			Перечисления.СпособыУведомления.ПоПочте,
			ОписаниеУведомления,
			Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы,
			НовоеУведомление.Ссылка);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Проверяет наличие неотработанных уведомлений у текущего пользователя.
//
// Возвращаемое значение:
//   - Булево - Принимает значение Истина, если у пользователя имеются
//              уведомления, иначе - Ложь.
Функция ЕстьУведомленияДляТекущегоПользователя() Экспорт
	
	Если КоличествоУведомленийДляТекущегоПользователя() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает количество уведомлений для текущего пользователя
//
// Возвращаемое значение:
//   - Число
//
Функция КоличествоУведомленийДляТекущегоПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УведомленияПрограммы.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.УведомленияПрограммы КАК УведомленияПрограммы
		|ГДЕ
		|	УведомленияПрограммы.Пользователь = &Пользователь
		|	И УведомленияПрограммы.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти
