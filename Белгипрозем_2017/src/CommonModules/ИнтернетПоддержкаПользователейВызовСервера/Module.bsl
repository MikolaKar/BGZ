
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции общего назначения

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Ошибка - Строка - строковое представление ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(Ошибка) Экспорт
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Ошибка);
	
КонецПроцедуры

// Записывает в журнал регистрации информацию
// с именем события "Интернет-поддержка пользователей.Информация".
//
// Параметры:
//	Сообщение - Строка - записываемая информация.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с настройками пользователя и параметрами
// интернет-поддержки

// Возвращает все необходимые для работы с сервисом интернет-поддержки
// параметры за одно обращение к серверу.
// Для минимизации объема передаваемой между клиентом и сервером информации
// возвращаются только необходимые параметры в зависимости от места вызова
// (клиент или сервер).
//
// Параметры:
//	МестоЗапуска - Строка - кнопка старта механизма ИПП;
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ИспользоватьИнтернетПоддержку - Булево - Истина, если разрешено
//		использование ИПП для текущего режима работы ИБ;
//	* ЗапускРазрешен - Булево - Истина, если текущему пользователю разрешен
//		запуск ИПП;
//	* ИспользоватьИнформационноеОкно - Булево - Истина, если в конфигурации
//		предусмотрено использование информационного окна;
//	* ЗапускатьПриСтарте - Булево - Истина, если необходимо открывать
//		информационное при старте программы;
//	* ВерсияПриложения - Строка - версия приложения 1С:Предприятия;
//	* ЭтоПолноправныйПользователь - Булево - Истина, если текущий пользователь
//		является полноправным пользователем системы;
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП в секундах;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		осуществляется на сервере информационной базы;
//	* НеНапоминатьОбАвторизацииДо - Дата - дата, по которую включительно
//		необходимо отключить напоминание об авторизации в ИПП при
//		старте программы
//	* ИмяКонфигурации - Строка - имя конфигурации в метаданных;
//	* ВыполнятьАвторизациюСертификатаНаСервере - булево - Истина, если
//		авторизация сервтификата библиотеки ЭДО выполняется на сервере ИБ;
//	* ОбщиеСтартовыеПараметры - Структура - стартовые параметры механизма,
//		зачитанные из регистра сведений ПараметрыИнтернетПоддержкиПользователей.
//
Функция ПараметрыИнтернетПоддержки(МестоЗапуска) Экспорт
	
	Результат = Новый Структура;
	
	// Проверить использование механизма интернет-поддержки
	Отказ = Неопределено;
	ИнтернетПоддержкаПользователейСерверПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
	Если ТипЗнч(Отказ) <> Тип("Булево") Тогда
		Результат.Вставить("ИспользоватьИнтернетПоддержку", Неопределено);
	Иначе
		Результат.Вставить("ИспользоватьИнтернетПоддержку", НЕ Отказ);
	КонецЕсли;
	
	Если Результат.ИспользоватьИнтернетПоддержку <> Истина Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = ИнтернетПоддержкаПользователей.ЭтоПолноправныйПользователь();
	
	Если ЭтоПолноправныйПользователь Тогда
		ЗапускРазрешен = Истина;
	Иначе
		ЗапускРазрешен = ИнтернетПоддержкаПользователей.ИспользованиеИнтернетПоддержкиРазрешеноДляТекущегоПользователя();
	КонецЕсли;
	
	Результат.Вставить("ЗапускРазрешен", ЗапускРазрешен);
	
	Если ЗапускРазрешен Тогда
		
		Отказ = Ложь;
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ИспользоватьИнформационноеОкно(Отказ);
		ИспользоватьИнформационноеОкно = (Отказ <> Истина);
		
		Результат.Вставить("ИспользоватьИнформационноеОкно", ИспользоватьИнформационноеОкно);
		
		Если ИспользоватьИнформационноеОкно Тогда
			Результат.Вставить("ЗапускатьПриСтарте",
				ИнтернетПоддержкаПользователей.ЗапускатьМеханизмПриСтарте());
		Иначе
			Результат.Вставить("ЗапускатьПриСтарте", Ложь);
		КонецЕсли;
		
		Если МестоЗапуска = "systemStartNew"
			И НЕ Результат.ЗапускатьПриСтарте Тогда
			Возврат Результат;
		КонецЕсли;
		
		ЭтоФайловаяИнформационнаяБаза = (ВРег(Лев(СтрокаСоединенияИнформационнойБазы(), 5)) = "FILE=");
		
		СисИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ВерсияПриложения", СисИнфо.ВерсияПриложения);
		Результат.Вставить("ЭтоВебКлиент"    , НЕ ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра));
		Результат.Вставить("ЭтоПолноправныйПользователь", ЭтоПолноправныйПользователь);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбращениеССервера = Неопределено;
		
		Если Результат.ЭтоВебКлиент Тогда
			// В веб-клиенте обращение к сервису ИПП должно осуществляться
			// только с сервера 1С:Предприятия
			ОбращениеССервера = Истина;
		Иначе
			Если ЭтоФайловаяИнформационнаяБаза Тогда
				// В файловом варианте обращение к сервису требуется выполнять
				// из клиентского приложения (настройки прокси-сервера также должны
				// использоваться клиентские)
				ОбращениеССервера = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Выборка необходимых параметров из ИБ
		ЗапросПараметров = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаймаутПодключенияКСервисуИнтернетПоддержки.Значение = 0 ТОГДА 30
		|		ИНАЧЕ ТаймаутПодключенияКСервисуИнтернетПоддержки.Значение
		|	КОНЕЦ КАК ТаймаутПодключенияКСервисуИнтернетПоддержки"
		+ ?(ОбращениеССервера <> Неопределено,
			"",
			", ПодключениеКСервисуИППССервера.Значение КАК ПодключениеКСервисуИППССервера")
		+ " ИЗ
		|	Константа.ТаймаутПодключенияКСервисуИнтернетПоддержки КАК ТаймаутПодключенияКСервисуИнтернетПоддержки"
		+ ?(ОбращениеССервера <> Неопределено,
			"",
			", Константа.ПодключениеКСервисуИППССервера КАК ПодключениеКСервисуИППССервера")
		+ ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыИнтернетПоддержкиПользователей.Имя,
		|	ПараметрыИнтернетПоддержкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.ПараметрыИнтернетПоддержкиПользователей КАК ПараметрыИнтернетПоддержкиПользователей");
		
		Пакет = ЗапросПараметров.ВыполнитьПакет();
		ВыборкаКонстант = Пакет[0].Выбрать();
		ВыборкаКонстант.Следующий();
		Результат.Вставить("ТаймаутСети", ВыборкаКонстант.ТаймаутПодключенияКСервисуИнтернетПоддержки);
		Если ОбращениеССервера = Неопределено Тогда
			ОбращениеССервера = ВыборкаКонстант.ПодключениеКСервисуИППССервера;
		КонецЕсли;
		
		Результат.Вставить("ОбращениеССервера", ОбращениеССервера);
		
		Результат.Вставить("НеНапоминатьОбАвторизацииДо", ЗначениеНастройкиНеНапоминатьОбАвторизацииДо());
		Результат.Вставить("ИмяКонфигурации"            , Метаданные.Имя);
		
		// Заполнение общих стартовых параметров
		ВыборкаСтартовыхПараметров = Пакет[1].Выбрать();
		ОбщиеСтартовыеПараметры = Новый Структура;
		Пока ВыборкаСтартовыхПараметров.Следующий() Цикл
			Если НЕ ОбщиеСтартовыеПараметры.Свойство(ВыборкаСтартовыхПараметров.Имя) Тогда
				ОбщиеСтартовыеПараметры.Вставить(ВыборкаСтартовыхПараметров.Имя, ВыборкаСтартовыхПараметров.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Результат.Вставить("ОбщиеСтартовыеПараметры", ОбщиеСтартовыеПараметры);
		
		ВыполнятьАвторизациюСертификатаНаСервере = Ложь;
		Попытка
			ИнтернетПоддержкаПользователейСерверПереопределяемый.ВыполнятьАвторизациюСертификатаНаСервере(
				ВыполнятьАвторизациюСертификатаНаСервере);
		Исключение
			ТекстОшибки = СтрЗаменить(
				НСтр("ru = 'Ошибка при определении места выполнения криптографических операций электронного документооборота. %1'"),
				"%1",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		КонецПопытки;
		
		Результат.Вставить("ВыполнятьАвторизациюСертификатаНаСервере",
			(ВыполнятьАвторизациюСертификатаНаСервере = Истина));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет сторону (клиент или сервер 1С:Предприятия), на которой должно
// выполняться взаимодействие с веб-сервисом ИПП.
//
// Параметры:
// СетевыеПараметрыИПП - Структура - в параметре возврщаются сетевые
//	параметры ИПП (см. функцию СетевыеПараметрыИнтернетПоддержки())
//
// Возвращаемое значение:
//	Булево - Истина, если подключение осуществляется на сервере ИБ;
//
Функция ПодключениеКСервисуИППССервера1СПредприятия(СетевыеПараметрыИПП = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ВРег(Лев(СтрокаСоединенияИнформационнойБазы(), 5)) = "FILE=" Тогда
		// В файловом варианте обращение должно выполняться из клиента 1С:Предприятия
		ОбращениеССервера = Ложь;
	Иначе
		ОбращениеССервера = Константы.ПодключениеКСервисуИППССервера.Получить();
	КонецЕсли;
	
	Если НЕ ОбращениеССервера Тогда
		СетевыеПараметрыИПП = СетевыеПараметрыИнтернетПоддержки();
		СетевыеПараметрыИПП.Вставить("ИмяКонфигурации", ИмяКонфигурации());
	КонецЕсли;
	
	Возврат ОбращениеССервера;
	
КонецФункции

// Определяет сетевые параметры механизма интернет-поддержки.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//
Функция СетевыеПараметрыИнтернетПоддержки() Экспорт
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат.Вставить("ТаймаутСети", Константы.ТаймаутПодключенияКСервисуИнтернетПоддержки.Получить());
	
	Возврат Результат;
	
КонецФункции

// Определяет, доступна ли текущему пользователю настройка параметров
// подключения к интернет-поддержке.
//
// Возвращаемое значение:
//	Булево - Истина, если настройка параметров доступна текущему пользователю;
//		Ложь - в противном случае.
//
Функция ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ЭтоПолноправныйПользователь();
	
КонецФункции

// Возвращает настройку "НеНапоминатьОбАвторизацииДо".
//
// Возвращаемое значение:
// Дата - дата, до которой не следует напоминать об авторизации в сервисе ИПП
//	при запуске программы.
//
Функция ЗначениеНастройкиНеНапоминатьОбАвторизацииДо() Экспорт
	
	НеНапоминатьОбАвторизацииДо = ХранилищеОбщихНастроек.Загрузить(
		"ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо");
	НеНапоминатьОбАвторизацииДо = ?(НеНапоминатьОбАвторизацииДо = Неопределено,
		'00010101',
		НеНапоминатьОбАвторизацииДо);
	
	Возврат НеНапоминатьОбАвторизацииДо;
	
КонецФункции

// Устанавливает настройку "НеНапоминатьОбАвторизацииДо".
//
// Параметры:
//	УстанавливатьНастройку - Булево - установить или сбросить дату
//		для "НеНапоминатьОбАвторизацииДо".
//
Процедура УстановитьНастройкуНеНапоминатьОбАвторизацииДо(УстанавливатьНастройку) Экспорт
	
	СемьДнейВСекундах = 60 * 60 * 24 * 7;
	ЧерезСемьДней = НачалоДня(ТекущаяДатаСеанса() + СемьДнейВСекундах);
	НеНапоминатьОбАвторизацииДо = ?(УстанавливатьНастройку, ЧерезСемьДней, '00010101');
	ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо",
		НеНапоминатьОбАвторизацииДо);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Служебная Функция для определения зарегистрирована ли текущая конфигурация
// в сервисе интернет-поддержки.
// Предназначена для выполнения на стороне сервера 1С:Предприятия
// в клиент-серверном варианте работы (если взаимодействие с веб-сервисом
// ИПП осуществляется на стороне кластера серверов) или в режиме веб-клиента.
//
// Параметры:
//	ОбращениеССервера - Булево - выходной параметр - Истина, если
//		обращение к сервису ИПП осуществляется с сервера 1С:Предприятия;
//	ПараметрыИПП - Структура - если обращение выполняется из клиента,
//		то в структуре возвращаются необходимые параметры для
//		работы на клиентской стороне (см. функцию СетевыеПараметрыИнтернетПоддержки());
//	ЭтоВебКлиент - Булево - Истина, если текущий сеанс запущен в режиме веб-клиента;
//	ОшибкаОбращенияКВебСервису - Булево - выходной параметр - Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//		произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(
	ОбращениеССервера,
	ПараметрыИПП,
	ЭтоВебКлиент = Ложь,
	ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Если ЭтоВебКлиент Тогда
		ОбращениеССервера = Истина;
	Иначе
		ОбращениеССервера = ПодключениеКСервисуИППССервера1СПредприятия(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбращениеССервера Тогда
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.КонфигурацияЗарегистрированаВСервисеИПП(
			, // Имя конфигурации будет получено автоматически
			ОшибкаОбращенияКВебСервису);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает новый контекст взаимодействия с сервисом ИПП, в рамках которого
// выполняются все команды сервиса ИПП.
//
// Параметры:
//	МестоЗапуска - Строка - имя команды, использованной для запуска
//		механизма ИПП;
//	ПараметрыИПП - Структура - см. функцию ПараметрыИнтернетПоддержки()
//	ПовторныйЗапуск - Булево - Истина, если запуск выполняется повторно.
//	СтартовыеПараметры - Структура, Неопределено - параметры, переданные при
//		запуске механизма.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ПутьКФормам - Строка - путь к формам контекста (по умолчанию
//		путь к формам обработки ИнтернетПоддержкаПользователей);
//	* ОписаниеСервисаИПП - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП()
//	* СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//			только при подключении из клиентского приложения;
//		** ДублированиеВКВТелеЗапроса - Булево - Истина, если при отправке
//			запроса из объекта HTTPСоединение дублируется символ Символы.ВК в теле
//			запроса. Используется для обхода ошибки платформы 1С:Предприятия;
//		** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//		** ПараметрыПроксиСервера - см. процедуру
//			ИнтернетПоддержкаПользователейКлиентПереопределяемый.НастройкиПроксиСервера()
//	* КСКонтекст - Структура - клиент-серверный контекст взаимодействия;
//		** ОсновныеПараметры - Структура - см. функцию НовыйОсновныеПараметрыКонтекста();
//		** КонтекстРегистрации - Структура, Неопределено - контекст регистрации
//			программного продукта;
//		** Логин - Строка - Логин, с которым авторизовался пользователь ИПП;
//		** Пароль - Строка - Пароль,  с которым авторизовался пользователь ИПП;
//		** СессионныеПараметры - Соответствие - сеансовые данные, хранимые и
//			в сеансе взаимодействия с сервисом ИПП;
//		** ХешОбновленияИнформационногоОкна - Строка - хэш обновления информационного
//			окна, определяет, необходимо ли отображать информационное окно при старте
//			программы, если пользователь установил настройку "Показывать при
//			старте программы только при наличии новой информации"
//		** СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//				только при подключении из клиентского приложения;
//			*** ДублированиеВКВТелеЗапроса - Булево - Истина, если при отправке
//				запроса из объекта HTTPСоединение дублируется символ Символы.ВК в теле
//				запроса. Используется для обхода ошибки платформы 1С:Предприятия;
//			*** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//			*** ПараметрыПроксиСервера - Строка - адрес настроек прокси-сервера во
//				временном хранилище (см. процедуру
//				ИнтернетПоддержкаПользователейКлиентПереопределяемый.НастройкиПроксиСервера())
//	* СтартовыеПараметрыМеханизма - Структура - параметры, с которыми был
//		выполнен запуск механизма. Копия параметра СтартовыеПараметры.
//
Функция НовыйКонтекстВзаимодействия(
	Знач МестоЗапуска,
	Знач ПараметрыИПП,
	Знач ПовторныйЗапуск,
	Знач СтартовыеПараметры) Экспорт
	
	Результат = Новый Структура;
	
	Если ПараметрыИПП = Неопределено Тогда
		ПараметрыИПП = ПараметрыИнтернетПоддержки(МестоЗапуска);
		СтруктураЗапуска = ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам(
			МестоЗапуска,
			ПараметрыИПП);
		Если СтруктураЗапуска <> Неопределено Тогда
			// Если запуск запрещен, тогда возврат
			Результат.Вставить("УправляющаяСтруктураЗапуска", СтруктураЗапуска);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ПутьКФормам", "Обработка.ИнтернетПоддержкаПользователей.Форма.");
	
	// Создание контекста, используемого на клиенте и на сервере
	КСКонтекст = Новый Структура;
	КСКонтекст.Вставить("КонтекстРегистрации"             , Неопределено);
	КСКонтекст.Вставить("Логин"                           , "");
	КСКонтекст.Вставить("СессионныеПараметры"             , Новый Соответствие);
	КСКонтекст.Вставить("ХешОбновленияИнформационногоОкна", "");
	
	ОсновныеПараметры = НовыйОсновныеПараметрыКонтекста();
	ОсновныеПараметры.МестоЗапуска          = МестоЗапуска;
	ОсновныеПараметры.ИмяWSОпределения      = ИнтернетПоддержкаПользователейКлиентСервер.ИмяWSОпределения();
	ОсновныеПараметры.URIСервиса            = ИнтернетПоддержкаПользователейКлиентСервер.ИмяURIСервиса();
	ОсновныеПараметры.ПовторныйЗапуск       = ПовторныйЗапуск;
	ОсновныеПараметры.ОбращениеССервера     = ПараметрыИПП.ОбращениеССервера;
	ОсновныеПараметры.ВерсияПриложения      = ПараметрыИПП.ВерсияПриложения;
	ОсновныеПараметры.ИмяКонфигурации       = Метаданные.Имя;
	ОсновныеПараметры.ВерсияКонфигурации    = Метаданные.Версия;
	ОсновныеПараметры.ТекущийКодЛокализации = ТекущийКодЛокализации();
	
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ВерсияОбработкиОбновленияКонфигурации(
			ОсновныеПараметры.ВерсияОбработкиОбновленияКонфигурации);
	Исключение
		ТекстОшибки = СтрЗаменить(
			НСтр("ru = 'Ошибка при определении версии обработки обновления конфигурации. %1'"),
			"%1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
	ОсновныеПараметры.ВыполнятьАвторизациюСертификатаНаСервере
		= ПараметрыИПП.ВыполнятьАвторизациюСертификатаНаСервере;
	
	СетевыеПараметрыИПП = Новый Структура;
	СетевыеПараметрыИПП.Вставить("ТаймаутСети", ПараметрыИПП.ТаймаутСети);
	СетевыеПараметрыИПП.Вставить("ДублированиеВКВТелеЗапроса",
		ИнтернетПоддержкаПользователейКлиентСервер.ДублированиеВКВТелеЗапроса(ОсновныеПараметры.ВерсияПриложения));
	
	Если ОсновныеПараметры.ОбращениеССервера Тогда
		ПараметрыПроксиСервера = Неопределено;
		ИнтернетПоддержкаПользователейСерверПереопределяемый.НастройкиПроксиСервера(ПараметрыПроксиСервера);
		Если ПараметрыПроксиСервера = Неопределено Тогда
			СетевыеПараметрыИПП.Вставить("ПараметрыПроксиСервера", Неопределено);
		Иначе
			АдресПараметровПроксиСервера = ПоместитьВоВременноеХранилище(
				ПараметрыПроксиСервера,
				Новый УникальныйИдентификатор);
			СетевыеПараметрыИПП.Вставить("ПараметрыПроксиСервера", АдресПараметровПроксиСервера);
		КонецЕсли;
		
		ОсновныеПараметры.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
		
		// Создание кэша WSDL-описаний. Необходим для обращения с сервера,
		// т.к. на при каждом вызове с сервера содается новое подключение
		// к сервису.
		// Кэш очищается при завершении бизнес-процесса.
		ОсновныеПараметры.Вставить("КэшWSDLОписаний", Новый Соответствие);
		
	Иначе
		Результат.Вставить("ОписаниеСервисаИПП" , Неопределено);
		СетевыеПараметрыИПП.Вставить("ПараметрыПроксиСервера", Неопределено);
		Результат.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
	КонецЕсли;
	
	ЗаписатьСтартовыеПараметрыКонтекста(СтартовыеПараметры, КСКонтекст);
	ЗаписатьСтартовыеПараметрыКонтекста(ПараметрыИПП.ОбщиеСтартовыеПараметры, КСКонтекст);
	
	КСКонтекст.Вставить("ОсновныеПараметры", ОсновныеПараметры);
	
	Результат.Вставить("КСКонтекст"    , КСКонтекст);
	Результат.Вставить("ФормыОбработки", Новый Соответствие);
	
	// Сохранение в контексте взаимодействия стартовых параметров механизма.
	// Необходимы для повтора подключения из формы ошибки обращения к сервису ИПП
	Результат.Вставить("СтартовыеПараметрыМеханизма", СтартовыеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Определяет состав основных параметров контекста взаимодействия с сервисом
// ИПП.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ИмяWSОпределения - Строка - адрес WSDL-описания сервиса ИПП;
//	* URIСервиса - Строка - URI пространства имен сервиса;
//	* МестоЗапуска - Строка - имя кнопки вызова сервиса ИПП;
//	* ВыполнятьАвторизациюСертификатаНаСервере - Булево - Истина, если
//		необходимо выполняться авторизацию сертификата клиента ЭДО на
//		стороне сервера ИБ;
//	* ПовторныйЗапуск - Булево - Истина, если выполняется повторный запуск
//		механизма ИПП;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		устанавливается на сервере ИБ;
//	* ВерсияПриложения - Строка - версия приложения 1С:Предприятия;
//	* ИмяКонфигурации - Строка - имя конфигурации;
//	* ВерсияКонфигурации - Строка - версия конфигурации;
//	* ТекущийКодЛокализации - Строка - код текущего языка;
//	* ВерсияОбработкиОбновленияКонфигурации - Строка - версия обработки
//		обновления конфигурации (БСП);
//
Функция НовыйОсновныеПараметрыКонтекста()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяWSОпределения"                        , "");
	Результат.Вставить("URIСервиса"                              , "");
	Результат.Вставить("МестоЗапуска"                            , "");
	Результат.Вставить("ВыполнятьАвторизациюСертификатаНаСервере", Ложь);
	Результат.Вставить("ПовторныйЗапуск"                         , Ложь);
	Результат.Вставить("ОбращениеССервера"                       , Истина);
	Результат.Вставить("НастройкиПроксиСервера"                  , Неопределено);
	Результат.Вставить("ВерсияПриложения"                        , "0.0.0.0");
	Результат.Вставить("ИмяКонфигурации"                         , "");
	Результат.Вставить("ВерсияКонфигурации"                      , "0.0.0.0");
	Результат.Вставить("ТекущийКодЛокализации"                   , "");
	Результат.Вставить("ВерсияОбработкиОбновленияКонфигурации"   , "");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки команд сервиса

// Получение команд сервиса ИПП и выполнение команд сервиса или возврат
// управления клиентской стороне.
//
// Параметры:
//	КСКонтекст - Структура - клиент-серверный контекст взаимодействия с
//		сервисом ИПП (см. функцию НовыйКонтекстВзаимодействия);
//	ПараметрыЗапроса - Массив - массив параметров запроса, передаваемых
//		сервису ИПП;
//	КонтекстОбработчика - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
//	Продолжение - Булево - Истина, если продолжение выполнения команд без
//		обращения к сервису ИПП;
//	ПараметрыОбращенияКСервисуИПП - Структура - дополнительные параметры
//		обращения к сервису ИПП;
//	МассивСессионныхПараметровЗапроса - Массив - массив имен сессионных параметров,
//		передаваемых сервису ИПП;
//	СоздаваемыйКонтекстВзаимодействия - Структура - в параметре возвращается
//		контекст взаимодействия с сервисом ИПП, если он не задан. Используется
//		для исключения дополнительного серверного вызова при первом обращении к
//		сервису ИПП;
//	ПараметрыСозданияКонтекста - Структура - дополнительные параметры создания
//		контекста взаимодействия с сервисом ИПП.
//
Процедура ОбработкаКомандСервиса(
	КСКонтекст,
	Знач ПараметрыЗапроса,
	КонтекстОбработчика,
	Знач Продолжение,
	Знач ПараметрыОбращенияКСервисуИПП = Неопределено,
	Знач МассивСессионныхПараметровЗапроса = Неопределено,
	СоздаваемыйКонтекстВзаимодействия = Неопределено,
	Знач ПараметрыСозданияКонтекста = Неопределено) Экспорт
	
	Если КСКонтекст = Неопределено Тогда
		
		// Создание контекста взаимодействия с сервисом ИПП при первом запуске
		СоздаваемыйКонтекстВзаимодействия = НовыйКонтекстВзаимодействия(
			ПараметрыСозданияКонтекста.МестоЗапуска,
			,
			ПараметрыСозданияКонтекста.ПовторныйЗапуск,
			ПараметрыСозданияКонтекста.СтартовыеПараметры);
		
		Если СоздаваемыйКонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска")
			ИЛИ НЕ СоздаваемыйКонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.ОбращениеССервера Тогда
			Возврат;
		КонецЕсли;
		
		КСКонтекст = СоздаваемыйКонтекстВзаимодействия.КСКонтекст;
		
	КонецЕсли;
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ОбработатьОтвет = Истина;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет", ОбработатьОтвет);
	КонецЕсли;
	
	// При продолжении обращение к веб-сервису не выполняется
	Если НЕ Продолжение Тогда
		
		// Всегда будет хотя бы один параметр запроса
		Если ТипЗнч(ПараметрыЗапроса) <> Тип("Массив") Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			МассивСессионныхПараметровЗапроса,
			ПараметрыЗапроса);
		
		ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
		
		Если ОбработатьОтвет <> Истина Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пока нет ошибки, препятствующей продолжению выполнения команд,
	// выполнять команды сервера
	Попытка
		
		// Пока есть команды для выполнения
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера);
			
			// Определение контекста выполнения - на сервере или на клиенте
			Если ТипКоманды = -1 Тогда
				
				// Если тип команды определить не удалось, тогда извлечь ее из стека и
				// продолжить выполнение
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 0 Тогда
				
				// Извлечение команды из стека и выполнение ее на сервере информационной базы
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(КСКонтекст, ТекущаяКоманда, КонтекстОбработчика);
				
			Иначе
				
				// Перед возвращением клиенту управления к команде расшифрования
				// контрольного маркера "прикрепляются" данные для расшифрования,
				// чтобы не получать их на клиенте дополнительным серверным вызовом
				Если ТекущаяКоманда.ИмяКоманды = "performtheaction.decode" Тогда
					
					ПараметрыДляРасширования = ИнтернетПоддержкаПользователейКлиентСервер.СессионныеПараметрыДляРасшифрования(
						КСКонтекст);
					УдаляемыеПараметры = Неопределено;
					ДанныеДляРасшифрования = ИнтернетПоддержкаПользователейВызовСервера.ПолучитьДанныеДляРасшифрования(
						ПараметрыДляРасширования,
						УдаляемыеПараметры,
						КонтекстОбработчика.ПроизошлаОшибка,
						КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
					
					Если КонтекстОбработчика.ПроизошлаОшибка Тогда
						
						КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
						
					Иначе
						
						Если УдаляемыеПараметры <> Неопределено Тогда
							ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
								КСКонтекст,
								УдаляемыеПараметры,
								КонтекстОбработчика);
						КонецЕсли;
						
						ТекущаяКоманда.Вставить("ДанныеДляРасшифрования", ДанныеДляРасшифрования);
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Возврат управления клиентскому приложению
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	// Если произошла ошибка, тогда завершить сеанс интернет-поддержки с обработкой ошибок
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП и добавление команд в стек команд контекста
// обработчика команд
//
Процедура ДобавитьКомандыСервиса(
	ОсновныеПараметры,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено) Экспорт
	
	КэшWSDLОписаний = Неопределено;
	ОсновныеПараметры.Свойство("КэшWSDLОписаний", КэшWSDLОписаний);
	
	Попытка
		
		ОписаниеСервисаИППНаСервере = ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
			ОсновныеПараметры.ИмяWSОпределения,
			ОсновныеПараметры.СетевыеПараметрыИПП,
			КэшWSDLОписаний);
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису интернет-поддержки'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИППНаСервере,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры);
		
		// После первого вызова необходимо отключить таймаут сети, т.к.
		// проверка обращения по таймауту уже выполнена
		Если ОсновныеПараметры.СетевыеПараметрыИПП.ТаймаутСети <> 0 Тогда
			ОсновныеПараметры.СетевыеПараметрыИПП.ТаймаутСети = 0;
			ИнтернетПоддержкаПользователейКлиентСервер.ИзменитьТаймаутОбращения(ОписаниеСервисаИППНаСервере, 0);
		КонецЕсли;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при получении данных с сервера интернет-поддержки.'");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Диспетчер выполнения команд сервиса ИПП на стороне сервера 1С:Предприятия
//
Процедура ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			Новый Структура("КСКонтекст", КСКонтекст),
			СтруктураКоманды,
			КонтекстОбработчика,
			Истина);
		
	ИначеЕсли ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "check.updatehash" Тогда
		ПроверитьХэшОбновления(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "performtheaction.getcertificate" Тогда
		ПодготовитьСертификатЭЦПкОтправке(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "performtheaction.getinformationaboutorganization" Тогда
		ПодготовитьДанныеОбОрганизации(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "performtheaction.findcertificatefingerprint" Тогда
		ПодготовитьДанныеСертификатаПоОтпечатку(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "setcodesregion" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.СохранитьВПараметрахКодыРегионов(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	ЗначениеПараметра = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"session_id");
	
	СтруктураЗначений = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости", 
		"session_id",
		ОсновныеПараметры.ИмяWSОпределения,
		ЗначениеПараметра,
		"sessionParameter");
	
	ПараметрыЗапроса.Добавить(СтруктураЗначений);
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	// Изменение бизнес-процесса на веб-сервере.
	// Будет создано новое подключение к сервису
	ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
	
КонецПроцедуры

// Выполняет команду сравнения хэша обновления информационного окна
//
Процедура ПроверитьХэшОбновления(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	Если ОсновныеПараметры.МестоЗапуска <> "systemStartNew"
		И ОсновныеПараметры.МестоЗапуска <> "handStartNew" Тогда
		// Если не показ информационного окна, тогда не обрабатывать команду
		Возврат;
	КонецЕсли;
	
	ХэшОбновленияСохраненный = ХранилищеОбщихНастроек.Загрузить(
		"ИнтернетПоддержкаПользователей",
		"ХэшОбновленияИнформационногоОкна");
	
	КСКонтекст.ХешОбновленияИнформационногоОкна = СтруктураКоманды.ХэшОбновления;
	
	ЕстьИзмененияХешаОбновления = (ХэшОбновленияСохраненный <> КСКонтекст.ХешОбновленияИнформационногоОкна);
	
	Если ОсновныеПараметры.МестоЗапуска <> "systemStartNew" Тогда
		Возврат;
	Иначе
		
		// Если systemStartNew, тогда настройка показа при запуске установлена в Истина
		// Прочитать настройку отображения по изменению и показать при необходимости
		// информационное окно
		
		НастройкаПоказыватьПриОбновлении = ХранилищеОбщихНастроек.Загрузить(
			"ИнтернетПоддержкаПользователей",
			"ПоказПриСтартеТолькоПриИзменении");
		Если НастройкаПоказыватьПриОбновлении = Истина
			И НЕ ЕстьИзмененияХешаОбновления Тогда
			
			КонтекстОбработчика.ВыполнитьОстановку = Истина;
			КонтекстОбработчика.Вставить("ОписаниеПричиныОстановки",
				НСтр("ru = 'Новой информации на сервере интернет-поддержки пользователей нет.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает в сессионные параметры контекста двоичные данные сертификата пользователя в
//	виде Base64-строки.
//
Процедура ПодготовитьСертификатЭЦПКОтправке(КСКонтекст, КонтекстОбработчика)
	
	// При старте механизма сертификат был записан в виде строки внутреннего представления
	// в регистр как стартовый параметр ЭД в процедуре СохранитьСтартовыеПараметрыЭД
	
	// Получение ссылки сертификата и его двоичных данных
	СертификатЭЦПСтрВнутр = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"IDCertificateED");
	
	Если СертификатЭЦПСтрВнутр <> Неопределено Тогда
		СертификатЭЦП = ЗначениеИзСтрокиВнутр(СертификатЭЦПСтрВнутр);
	Иначе
		СертификатЭЦП = Неопределено;
	КонецЕсли;
	
	Если СертификатЭЦП = Неопределено Тогда
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные сертификата. Сертификат не обнаружен в списке параметров.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		Возврат;
		
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = Неопределено;
	
	ДвоичныеДанныеСертификата = Неопределено;
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПолучитьДвоичныеДанныеСертификата(СертификатЭЦП,
			ДвоичныеДанныеСертификата);
	Исключение
		
		СообщениеДляЖурналаРегистрации = НСтр("ru = 'Не удалось получить двоичные данные сертификата: %1'");
		СообщениеДляЖурналаРегистрации = СтрЗаменить(
			СообщениеДляЖурналаРегистрации,
			"%1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		КонтекстОбработчика.ПроизошлаОшибка                = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки           = СообщениеДляЖурналаРегистрации;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные сертификата. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		Возврат;
		
	КонецПопытки;
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные сертификата. Попробуйте выбрать другой сертификат.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		Возврат;
	КонецЕсли;
	
	// Запись в регистр двоичных данных сертификата для отправки на сервер
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"certificateED",
		СтрокаBase64);
	
КонецПроцедуры

// Подготавливает и сохраняет в сессионных параметрах сведения об организации.
//
Процедура ПодготовитьДанныеОбОрганизации(КСКонтекст, КонтекстОбработчика)
	
	// При старте механизма ссылка на организацию была записана в виде строки
	// внутреннего представления как стартовый параметр ЭД
	
	ОрганизацияСтрВнутр = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,
		"IDOrganizationED");
	
	Если ОрганизацияСтрВнутр <> Неопределено Тогда
		Организация = ЗначениеИзСтрокиВнутр(ОрганизацияСтрВнутр);
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОбОрганизации = Новый Структура;
	
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПолучитьРегистрационныеДанныеОрганизации(Организация,
			СтруктураДанныхОбОрганизации);
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить регистрационные данные организации.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Ошибка при получении данных организации.
				 |Подробнее см. в журнале регистрации'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		Возврат;
		
	КонецПопытки;
	
	Если СтруктураДанныхОбОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс                           = "";
	Регион                           = "";
	Район                            = "";
	Город                            = "";
	НаселенныйПункт                  = "";
	Улица                            = "";
	Дом                              = "";
	Корпус                           = "";
	Квартира                         = "";
	Телефон                          = "";
	Наименование                     = "";
	ИНН                              = "";
	КПП                              = "";
	ОГРН                             = "";
	КодИМНС                          = "";
	ЮрФизЛицо                        = "";
	Фамилия                          = "";
	Имя                              = "";
	Отчество                         = "";
	
	СтруктураДанныхОбОрганизации.Свойство("Индекс"         , Индекс);
	СтруктураДанныхОбОрганизации.Свойство("Регион"         , Регион);
	СтруктураДанныхОбОрганизации.Свойство("Район"          , Район);
	СтруктураДанныхОбОрганизации.Свойство("Город"          , Город);
	СтруктураДанныхОбОрганизации.Свойство("НаселенныйПункт", НаселенныйПункт);
	СтруктураДанныхОбОрганизации.Свойство("Улица"          , Улица);
	СтруктураДанныхОбОрганизации.Свойство("Дом"            , Дом);
	СтруктураДанныхОбОрганизации.Свойство("Корпус"         , Корпус);
	СтруктураДанныхОбОрганизации.Свойство("Квартира"       , Квартира);
	СтруктураДанныхОбОрганизации.Свойство("Телефон"        , Телефон);
	СтруктураДанныхОбОрганизации.Свойство("Наименование"   , Наименование);
	СтруктураДанныхОбОрганизации.Свойство("ИНН"            , ИНН);
	СтруктураДанныхОбОрганизации.Свойство("КПП"            , КПП);
	СтруктураДанныхОбОрганизации.Свойство("ОГРН"           , ОГРН);
	СтруктураДанныхОбОрганизации.Свойство("КодИМНС"        , КодИМНС);
	СтруктураДанныхОбОрганизации.Свойство("ЮрФизЛицо"      , ЮрФизЛицо);
	СтруктураДанныхОбОрганизации.Свойство("Фамилия"        , Фамилия);
	СтруктураДанныхОбОрганизации.Свойство("Имя"            , Имя);
	СтруктураДанныхОбОрганизации.Свойство("Отчество"       , Отчество);
	
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "postindexED", Индекс);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressregionED", Регион);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addresscoderegionED", "");
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresstownshipED",
		Район);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addresscityED", Город);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresslocalityED",
		НаселенныйПункт);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressstreetED", Улица);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressbuildingED", Дом);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresshousingED",
		Корпус);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addressapartmentED",
		Квартира);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressphoneED", Телефон);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "agencyED", Наименование);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "orgindED", ЮрФизЛицо);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "innED", ИНН);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "kppED", КПП);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "ogrnED", ОГРН);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "codeimnsED", КодИМНС);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "lastnameED", Фамилия);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "firstnameED", Имя);
	ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "middlenameED", Отчество);
	
КонецПроцедуры

// Поиск сертификата по отпечатку, хранимому в сессионных параметрах
// и запись ссылки а сертификат в сессионные параметры.
//
Процедура ПодготовитьДанныеСертификатаПоОтпечатку(КСКонтекст, КонтекстОбработчика)
	
	// Отпечаток сертификата должен быть передан в сессионные параметры
	
	ОтпечатокСертификата = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,
		"certificatefingerprintED");
	
	СертификатЭЦП = Неопределено;
	Если ОтпечатокСертификата <> Неопределено Тогда
		
		Попытка
			ИнтернетПоддержкаПользователейСерверПереопределяемый.НайтиСертификатЭЦППоОтпечатку(
				ОтпечатокСертификата,
				СертификатЭЦП);
		Исключение
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки =
				НСтр("ru = 'Ошибка при поиске сертификата по отпечатку.'")
					+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
			
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при поиске сертификата по отпечатку.
					  |Подробнее см. в журнале регистрации'");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если СертификатЭЦП <> Неопределено Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
			"IDCertificateED",
			ЗначениеВСтрокуВнутр(СертификатЭЦП));
	КонецЕсли;
	
КонецПроцедуры

// Расшифрование контрольного маркера идентификации на стороне сервера
// 1С:Предприятия
//
Процедура РасшифроватьМаркерИдентификацииВладельцаСертификата(
	Знач ДанныеДляРасшифрования,
	РасшифрованныйМаркерИдентификации,
	ПолноеОписаниеОшибки) Экспорт
	
	ИнтернетПоддержкаПользователейКлиентСерверПереопределяемый.РасшифроватьМаркерИдентификацииВладельцаСертификата(
		ДанныеДляРасшифрования,
		РасшифрованныйМаркерИдентификации,
		ПолноеОписаниеОшибки);
	
	Если ТипЗнч(РасшифрованныйМаркерИдентификации) <> Тип("ДвоичныеДанные") Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПолноеОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Завершение сеанса интернет-поддержки на стороне сервера 1С:Предпирятия.
//
Процедура ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	КоличествоКоманд = КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество();
	
	НомерКоманды = 0;
	Пока НомерКоманды < КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() Цикл
		
		ДействиеВыполнено = Ложь;
		Действие = КонтекстОбработчика.ДействияПриОшибкеДляСервера[НомерКоманды];
		Если Действие = "СоздатьЗаписьВЖурналеРегистрации" Тогда
			
			Если НЕ ПустаяСтрока(КонтекстОбработчика.ПолноеОписаниеОшибки) Тогда
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					КонтекстОбработчика.ПолноеОписаниеОшибки);
			КонецЕсли;
			
			ДействиеВыполнено = Истина;
			
		ИначеЕсли Действие = "ПрерватьБизнесПроцесс" Тогда
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				ЗавершитьБизнесПроцесс(КСКонтекст);
				ДействиеВыполнено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДействиеВыполнено Тогда
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Удалить(НомерКоманды);
		Иначе
			НомерКоманды = НомерКоманды + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если какие-либо действия не были выполнены на сервере, тогда они будут возвращены
	// на клиентскую сторону для дальнейшего выполнения
	
КонецПроцедуры

// Отправка оповещения сервису ИПП о завершении сеанса ИПП.
//
Процедура ЗавершитьБизнесПроцесс(КСКонтекст)
	
	Попытка
		
		ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
		
		ПараметрыЗакрытияБП = Новый Массив;
		ПараметрыЗакрытияБП.Добавить(Новый Структура("Имя, Значение", "CloseBP", "true"));
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			,
			ПараметрыЗакрытияБП);
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗакрытияБП,
			Неопределено);
		
	Исключение
		// Обработка ответа сервиса не требуется, т.к. сервер просто оповещается
		// о закрытии бизнес-процесса для освобождения ресурсов
	КонецПопытки;
	
	КэшWSDLОписаний = Неопределено;
	ОсновныеПараметры.Свойство("КэшWSDLОписаний", КэшWSDLОписаний);
	ОчиститьКэшWSDLОписаний(КэшWSDLОписаний);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с параметрами ИПП

// Сохранение стартовых параметров при в сессионных параметрах при запуске ИПП
//
Процедура ЗаписатьСтартовыеПараметрыКонтекста(Знач СтартовыеПараметрыСтруктура, КСКонтекст)
	
	Если СтартовыеПараметрыСтруктура <> Неопределено Тогда
		
		ТипСтрока = Тип("Строка");
		Для каждого ПараметрВСтруктуре Из СтартовыеПараметрыСтруктура Цикл
			
			Если (ПараметрВСтруктуре.Ключ = "IDCertificateED"
				ИЛИ ПараметрВСтруктуре.Ключ = "IDOrganizationED")
				И ТипЗнч(ПараметрВСтруктуре.Значение) <> ТипСтрока Тогда
				ЗначениеПараметра = ЗначениеВСтрокуВнутр(ПараметрВСтруктуре.Значение);
			Иначе
				ЗначениеПараметра = ПараметрВСтруктуре.Значение;
			КонецЕсли;
			
			Параметр = ИнтернетПоддержкаПользователейКлиентСервер.НовыйПараметрИПП(
				ПараметрВСтруктуре.Ключ,
				ЗначениеПараметра,
				"startUp");
			
			КСКонтекст.СессионныеПараметры.Вставить(ПараметрВСтруктуре.Ключ, Параметр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись общих стартовых параметров в регистр сведений
// "ПараметрыИнтернетПоддержкиПользователей"
//
Процедура ЗаписатьОбщиеСтартовыеПараметрыВРСИПП(Знач ОбщиеСтартовыеПараметры) Экспорт
	
	Для каждого КлючЗначение Из ОбщиеСтартовыеПараметры Цикл
		МенеджерЗаписи = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Имя          = КлючЗначение.Ключ;
		МенеджерЗаписи.Значение     = КлючЗначение.Значение;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Удаление параметров из регистра сведений
// ПараметрыИнтернетПоддержкиПользователей
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров
//
Процедура УдалитьПараметрыИзРегистра(Знач УдаляемыеИзРС) Экспорт
	
	Для каждого КлючЗначение Из УдаляемыеИзРС Цикл
		НаборЗаписей = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Имя.Установить(КлючЗначение.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Очистка настроек ИПП текущего пользователя.
//
Процедура ОчиститьНастройкиИПППользователя() Экспорт
	
	ХранилищеОбщихНастроек.Сохранить(
		"ИнтернетПоддержкаПользователей",
		"ХэшОбновленияИнформационногоОкна",
		Неопределено);
	
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПриВыходеПользователяИзИнтернетПоддержки();
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при обработке выхода пользователя из интернет-поддержки. %1'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке,
			"%1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации();
	КонецПопытки;
	
КонецПроцедуры

// Чтение параметров, необходимых для расшифрования контрольного маркера
// идентификации владельца сертификата.
//
Функция ПолучитьДанныеДляРасшифрования(
	Знач ПараметрыРасшифрования,
	УдаляемыеПараметры,
	ОшибкаПолучения,
	ПользовательскоеОписаниеОшибки) Экспорт
	
	ДанныеДляРасшифрования = Новый Структура;
	НастройкиКриптографии  = Неопределено;
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПолучитьНастройкиКриптографии(НастройкиКриптографии);
	Исключение
		
		ОшибкаПолучения = Истина;
		ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка при определении настроек криптографии.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		ПользовательскоеОписаниеОшибки = НСтр("ru = 'Ошибка при определении настроек криптографии.'");
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДанныеДляРасшифрования.Вставить("НастройкиКриптографии", НастройкиКриптографии);
	
	// Маркер с сервера в виде строки Base64 уже должен быть записан в регистр
	КонтрольныйМаркер64 = Неопределено;
	ПараметрыРасшифрования.Свойство("markerED", КонтрольныйМаркер64);
	
	Если КонтрольныйМаркер64 = Неопределено Тогда
		
		ОшибкаПолучения = Истина;
		ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить контрольный маркер. Попробуйте повторить попытку позже.'");
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата.
						|Отсутствует обязательный параметр ""markerED"".'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеМаркера = Base64Значение(КонтрольныйМаркер64);
	Исключение
		
		ОшибкаПолучения = Истина;
		ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить контрольный маркер. Попробуйте повторить попытку позже.'");
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Неверный формат параметра ""markerED"".'"));
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДанныеДляРасшифрования.Вставить("КонтрольныйМаркер", ДвоичныеДанныеМаркера);
	
	// Сначала выполняется попытка найти измененный сертификат
	СтрСертификатЭЦП = Неопределено;
	ПараметрыРасшифрования.Свойство("IDCertificateED_Dop", СтрСертификатЭЦП);
	
	Если СтрСертификатЭЦП = Неопределено ИЛИ ПустаяСтрока(СтрСертификатЭЦП) Тогда
		
		// Измененного сертификата нет - получение основного сертификата
		ПараметрыРасшифрования.Свойство("IDCertificateED", СтрСертификатЭЦП);
		
	Иначе
		
		// Есть измененный сертификат. Сертификат уже обработан в текущем сеансе
		// и его нужно удалить из сессионных параметров
		Если УдаляемыеПараметры = Неопределено Тогда
			УдаляемыеПараметры = Новый Массив;
		КонецЕсли;
		УдаляемыеПараметры.Добавить(Новый Структура("Имя", "IDCertificateED_Dop"));
		
	КонецЕсли;
	
	СертификатЭЦП = ЗначениеИзСтрокиВнутр(СтрСертификатЭЦП);
	ДанныеДляРасшифрования.Вставить("СертификатЭЦП", СертификатЭЦП);
	
	ДвоичныеДанныеСертификата = Неопределено;
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ПолучитьДвоичныеДанныеСертификата(
			СертификатЭЦП,
			ДвоичныеДанныеСертификата);
	Исключение
		
		ОшибкаПолучения = Истина;
		
		ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата.
						|Не удалось получить двоичные данные сертификата.'");
		
		ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка при получении двоичных данных сертификата.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		
		ОшибкаПолучения = Истина;
		
		ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные сертификата. Попробуйте выбрать другой сертификат.'");
		
		ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка при получении двоичных данных сертификата.
			|Отсутствуют двоичные данные сертификата.'");
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеДляРасшифрования.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	ПарольДоступаЭЦП = Неопределено;
	
	Попытка
		ИнтернетПоддержкаПользователейСерверПереопределяемый.ОпределитьСохраненныйПарольСертификатаЭЦП(
			СертификатЭЦП,
			ПарольДоступаЭЦП);
	Исключение
		
		ОшибкаПолучения = Истина;
		
		ПользовательскоеОписаниеОшибки = НСтр("ru = 'Ошибка при проверке подлинности владельца сертификата.
			|Не удалось получить двоичные данные сертификата.'");
		
		ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка при получении двоичных данных сертификата.
			|Отсутствуют двоичные данные сертификата.'");
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДанныеДляРасшифрования.Вставить("ПарольДоступаЭЦП", ПарольДоступаЭЦП);
	
	Возврат ДанныеДляРасшифрования;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дополнительные служебные процедуры и функции

// Отправка электронного письма в службу технической поддержки Веб-ИТС.
//
Функция ОтправитьЭлектронноеПисьмоЧерезСервис(Знач СтруктураСообщения, СетевыеПараметрыИПП) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ОтправитьЭлектронноеПисьмоЧерезСервис(
		СтруктураСообщения,
		СетевыеПараметрыИПП);
	
КонецФункции

// Очистка кэша WSDL-описаний на стороне сервера 1С:Предприятия. Выполняется
// удаление сохраненных WSDL-описаний из временного хранилища.
//
Процедура ОчиститьКэшWSDLОписаний(КэшWSDLОписаний) Экспорт
	
	Если КэшWSDLОписаний <> Неопределено Тогда
		// Удаление из временного хранилища текстов WSDL-описаний
		Для каждого КлючЗначение Из КэшWSDLОписаний Цикл
			УдалитьИзВременногоХранилища(КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КэшWSDLОписаний.Очистить();
	
КонецПроцедуры

// Определяет имя конфигурации
// Возвращаемое значение:
// Строка - имя текущей конфигурации.
//
Функция ИмяКонфигурации() Экспорт
	
	Возврат Метаданные.Имя;
	
КонецФункции

// Возвращается имя события журнала регистрации для записи ошибок
// интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Ошибка'",
		ИнтернетПоддержкаПользователей.КодОсновногоЯзыкаКонфигурации());
	
КонецФункции

// Возвращается имя события журнала регистрации для записи информационных
// сообщений интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Информация'",
		ИнтернетПоддержкаПользователей.КодОсновногоЯзыкаКонфигурации());
	
КонецФункции

#КонецОбласти
