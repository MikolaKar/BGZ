////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

 // Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  Источник - Управляемая форма
//  ЗначениеЗаполнения - ссылка на хранилище
//
Процедура ОткрытьФормуВыбораПользователей(ЭтаФорма, ТекущийПользователь) Экспорт
	
	Параметры = Новый Структура("Ключ", ТекущийПользователь);
	Параметры.Вставить("РежимВыбора",             Истина);
	Параметры.Вставить("ТекущаяСтрока",           ТекущийПользователь);
	Параметры.Вставить("ВыборГруппПользователей", Ложь);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", Параметры, ЭтаФорма);
	
КонецПроцедуры

// Проверяет на модифицированность объект в случае обычного приложения.
//
// Параметры:
//  Объект - объекта, модифицированность которого надо проверить;
//  Форма - форма объекта, модифицированность которого надо проверить.
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Процедура ОбъектМодифицирован(Объект, Форма, Результат) Экспорт
	
КонецПроцедуры

// Проверяет на использование в прикладном решении библиотеки интернет поддержки пользователей.
//
// Параметры:
//  Использование - булево - признак использования библиотеки МПП..
//
Процедура ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование) Экспорт
	
	Использование = Истина;
	
КонецПроцедуры

// Вспомогательная процедура для запуска метода из библиотеки интернет поддержки пользователей.
//
// Параметры:
//   СертификатАбонента - Произвольный - сертификат ЭЦП;
//   Организация - Произвольный - организация, организация, с которой связан
//		сертификат;
//   ВариантБизнесПроцесса - Строка - имя действия ЭДО.Возможные значения:
//		"taxcomGetID"  - запуск получения (регистрации) нового идентификатора
//		"taxcomPrivat" - вход в личный кабинет абонента ЭДО.
//   ИдентификаторОрганизации - Строка - идентификатор организации в системе ЭДО;
//   ПарольСертификатаЭЦП - Строка, Неопределено - пароль используемого
//		во избежание повторного ввода пароля;
//   УникальныйИдентификаторФормы (УникальныйИдентификатор) - идентификатор формы,
//	    из которой был вызван метод. Используется как источник события при
//	    оповещении формы-инициатора о результате.
//
Процедура СтартоватьМеханизмРаботыСОператоромЭДО(СертификатАбонента,
												 Организация,
												 ВариантБизнесПроцесса,
												 ИдентификаторОрганизации = "",
												 ПарольСертификатаЭП = Неопределено,
												 УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	ИнтернетПоддержкаПользователейКлиент.СтартоватьМеханизмРаботыСОператоромЭДО(
		СертификатАбонента,
		Организация,
		ВариантБизнесПроцесса,
		ИдентификаторОрганизации,
		ПарольСертификатаЭП,
		УникальныйИдентификаторФормы);
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для подписи документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКПодписи(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
КонецПроцедуры

// Выполняет интерактивное проведение документов перед формированием ЭД.
// Если есть непроведенные документы, предлагает выполнить проведение. Спрашивает
// пользователя о продолжении, если какие-то из документов не провелись и имеются проведенные.
//
// Параметры
//  ДокументыМассив - Массив           - ссылки на документы, которые требуется провести перед печатью.
//                                       После выполнения функции из массива исключаются непроведенные документы.
//  ДокументыПроведены - Булево - возвращаемый параметр, признак что документы проведены
//  ФормаИсточник   - УправляемаяФорма - форма, из которой было вызвана команда.
//
// Возвращаемое значение:
//  Булево - есть документы для печати в параметре ДокументыМассив.
//
Процедура ПроверитьДокументыПроведены(ДокументыМассив, ДокументыПроведены, ФормаИсточник = Неопределено) Экспорт
	
	ДокументыПроведены = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// В зависимости от прикладного решения определяет момент открытия формы сопоставления номенклатуры
//
//  Параметры:
//  СопоставлятьНоменклатуру - <Булево> - Истина - открывать форму сопоставления до заполнения документа, Ложь - в обратном порядке
//  Истина для УПП, БП
//  Ложь для УТ
//
Процедура СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуру) Экспорт
	
	СопоставлятьНоменклатуру = Ложь;
	
КонецПроцедуры

// Находит элемент номенклатуры поставщика и открывает форму просмотра
//
// Параметры:
//  Идентификатор - уникальный идентификатор объекта
//
Процедура ОткрытьЭлементНоменклатурыПоставщика(Идентификатор) Экспорт
	
	
КонецПроцедуры

// Предназначена для переопределения стандартной формы выбора номенклатуры в форме сопоставления номенклатуры.
//
// Параметры:
//  Элемент - элемент формы
//  Параметры - Структура параметров, содержит элемент "Контрагент"
//  СтандартнаяОбработка - Булево, необходимо отключать стандартную обработку при переопределении формы выбора
Процедура ОткрытьФормуСопоставленияНоменклатуры(Элемент, Параметры, СтандартнаяОбработка = Неопределено) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы клиент - банка

// Разбирает переданный текстовый файл выписки.
//
// Параметры
//  ЭД - СправочникСсылка.СообщенияЭДО - электронный документ
//  ФайлСсылка - Строка, ссылка на временное хранилище
//  Организация - СправочникСсылка.Организации - организация.
//  МассивСчетов - Массив, содержит ссылки на счета организации
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД
//
Процедура РазобратьФайлВыписки(ЭД, ФайлСсылка, Организация, МассивСчетов, СоглашениеЭД) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Лицензионное соглашение

// Вспомогательная процедура для запуска механизма согласия пользователя с условиями лицензионного соглашения.
//
Процедура ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями) Экспорт
	
КонецПроцедуры

Процедура ОбработатьЭД(ПараметрыДокумента) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации(,
																					   ПараметрыДокумента.МассивНаОтправку);
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйКлиент.ПодготовитьИОтправитьПЭД(ПараметрыДокумента.МассивНаОтправку,
																					   Ложь,
																					   СоотвСоглашенийИСтруктурСертификатов);
																					   
	Если СтруктураРезультата.КолОтправленных > 0 Тогда
		ТекстСостояния = НСтр("ru = 'Отправлено: (%1)'");
		Количество = СтруктураРезультата.КолОтправленных;
	Иначе
		ТекстСостояния = НСтр("ru = 'Подготовлено к отправке: (%1)'");
		Количество = СтруктураРезультата.КолПодготовленных;
	КонецЕсли;
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, Количество);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	
КонецПроцедуры
