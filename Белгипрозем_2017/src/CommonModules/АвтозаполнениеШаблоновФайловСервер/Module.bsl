
//Получает массив автозаполнений в файле
//Параметры:Файл - ссылка на объект файла
//			ФайлОснование - файл, на основании которого был создан Файл. Ссылка на шаблон файла.
//			ФактическийВладелецФайла - ссылка на владельца файла, на основании которого следует производить подстановку данных
//Возвращает:массив замен в формате "какое поле заменить"-"какую строку заменить"-"на что заменить"
Функция ПолучитьМассивАвтозаполненийШаблона(Файл, ФайлОснование, ФактическийВладелецФайла) Экспорт
	
	СтрокаОшибки = "";
	МассивДанныеЗамен = Новый Массив;
	Если ТипЗнч(ФактическийВладелецФайла) <> Тип("СправочникСсылка.ВнутренниеДокументы") 
		И ТипЗнч(ФактическийВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов") 
		И ТипЗнч(ФактическийВладелецФайла) <> Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Возврат МассивДанныеЗамен;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтозаполненияФайлов.ДанныеДляАвтозаполнения.(
		|		ТермДляЗамены,
		|		ЗаменяемаяСтрока,
		|		ЗначениеЗамены,
		|		ВыражениеОбработкиРезультатаЗамены,
		|		ФорматЗначенияЗамены
		|	)
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов КАК АвтозаполненияФайлов
		|ГДЕ
		|	АвтозаполненияФайлов.ВладелецФайла = &ВладелецФайла
		|	И АвтозаполненияФайлов.ШаблонФайла = &ШаблонФайла";

	Если ТипЗнч(ФактическийВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Запрос.УстановитьПараметр("ВладелецФайла", ФактическийВладелецФайла);
	Иначе
		Запрос.УстановитьПараметр("ВладелецФайла", ФактическийВладелецФайла.ВидДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШаблонФайла", ФайлОснование);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеДляЗамены = ВыборкаДетальныеЗаписи.ДанныеДляАвтозаполнения.Выбрать();
		Пока ДанныеДляЗамены.Следующий() Цикл
			ДанныеВладельцаФайлаДляАвтозаполнения = Новый Структура("ТермДляЗамены, ЗаменяемаяСтрока, ЗначениеЗамены");
			ДанныеВладельцаФайлаДляАвтозаполнения.ТермДляЗамены = ДанныеДляЗамены.ТермДляЗамены;
			ДанныеВладельцаФайлаДляАвтозаполнения.ЗаменяемаяСтрока = ДанныеДляЗамены.ЗаменяемаяСтрока;
			РезультатЗамены = "";
			Если Лев(ДанныеДляЗамены.ЗначениеЗамены, 1) = "{"
				И Прав(ДанныеДляЗамены.ЗначениеЗамены, 1) = "}"
				И Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'ДопРеквизиты'")) = 0
				И Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'ДопСвойства'")) = 0
				И Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'КонтактнаяИнформация'")) = 0 Тогда
				Попытка
					ЗначениеРеквизита = АвтозаполнениеШаблоновФайловСерверПовтИспВызов.ПолучитьЗначениеРеквизитаДляАвтозаполнения(Файл.Ссылка, СтрЗаменить(СтрЗаменить(ДанныеДляЗамены.ЗначениеЗамены, "}", ""), "{", ""), ФактическийВладелецФайла);
					Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
						РезультатЗамены = Формат(ЗначениеРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
					Иначе
						РезультатЗамены = ЗначениеРеквизита;
					КонецЕсли;
				Исключение
					ОшибкаИнфо = ИнформацияОбОшибке();
					Если ОшибкаИнфо.Описание = "ОшибкаДоступаКРеквизиту" Тогда
						СтрокаОшибки = СтрокаОшибки + ДанныеДляЗамены + Символы.ВК;
					Иначе
						ВызватьИсключение(ОшибкаИнфо.Описание);
					КонецЕсли;
				КонецПопытки;
			ИначеЕсли Лев(ДанныеДляЗамены.ЗначениеЗамены, 1) = "{"
				И Прав(ДанныеДляЗамены.ЗначениеЗамены, 1) = "}"
				И (Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'ДопРеквизиты'")) > 0
				ИЛИ Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'ДопСвойства'")) > 0) Тогда
				
				ЗначениеДопРеквизита = АвтозаполнениеШаблоновФайловСерверПовтИспВызов.ПолучитьЗначениеДопРеквизитаДляЗамены(Файл.Ссылка,
					СтрЗаменить(СтрЗаменить(ДанныеДляЗамены.ЗначениеЗамены, "}", ""), "{", ""),
					ФактическийВладелецФайла);
					
				Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
					РезультатЗамены = Формат(ЗначениеДопРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
				Иначе
					РезультатЗамены = ЗначениеДопРеквизита;
				КонецЕсли;
             ИначеЕсли Лев(ДанныеДляЗамены.ЗначениеЗамены, 1) = "{"
				И Прав(ДанныеДляЗамены.ЗначениеЗамены, 1) = "}"
				И Найти(ДанныеДляЗамены.ЗначениеЗамены, НСтр("ru = 'КонтактнаяИнформация'")) > 0 Тогда
				
				ЗначениеДопРеквизита = АвтозаполнениеШаблоновФайловСерверПовтИспВызов.ПолучитьЗначениеКонтактнойИнформацииДляЗамены(Файл.Ссылка,
					СтрЗаменить(СтрЗаменить(ДанныеДляЗамены.ЗначениеЗамены, "}", ""), "{", ""),
					ФактическийВладелецФайла);
					
				Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
					РезультатЗамены = Формат(ЗначениеДопРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
				Иначе
					РезультатЗамены = ЗначениеДопРеквизита;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ДанныеДляЗамены.ЗначениеЗамены) Тогда
				РезультатЗамены = ДанныеДляЗамены.ЗначениеЗамены;
			Иначе
				РезультатОбработки = "";
				Выражение = СтрЗаменить(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены, "Файл.ВладелецФайла", "ФактическийВладелецФайла");
				Выполнить(Выражение);
				РезультатЗамены = РезультатОбработки; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены)
				И ЗначениеЗаполнено(ДанныеДляЗамены.ЗначениеЗамены) Тогда
				Попытка
					УстановитьБезопасныйРежим(Истина);
					РезультатОбработки = "";
					Выражение = СтрЗаменить(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены, "Файл.ВладелецФайла", "ФактическийВладелецФайла");
					Выполнить(Выражение);
					ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = Строка(РезультатОбработки);
					УстановитьБезопасныйРежим(Ложь);
				Исключение
					ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = "";
				КонецПопытки;
			Иначе
				ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = Строка(РезультатЗамены);
			КонецЕсли;
			
			МассивДанныеЗамен.Добавить(ДанныеВладельцаФайлаДляАвтозаполнения);
		КонецЦикла;
	КонецЦикла;
		
	Если НЕ ПустаяСтрока(СтрокаОшибки) Тогда
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующие реквизиты правила автозаполнения заданы некорректно:
				|%1'"), СтрокаОшибки);
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
	Возврат МассивДанныеЗамен;
	
КонецФункции

//Выполняет файл с использованием настроек замены
//Параметры:Файл - ссылка на заполняемый файл
//			МассивДанныхДляАвтоЗамен - массив настроек замен
//			ОбновитьВерсиюЗаполненнымФайлом - необходимость обновить версию файла после заполнения файла данными. Если Истина, то 
//					после автозаполнения в текущую версию файла запишется измененный файл. Если Ложь, то
//					после автозаполнения текущая версия файла не изменяется, функция вернет только 
//					путь к измененному (заполненному) файлу на диске.
//Возвращает:Если СохранятьВерсию = Истина, то ПустаяСтрока
//			 Если СохранятьВерсию = Ложь, то путь к измененному файлу на диске
Функция ВыполнитьАвтоЗаполнениеШаблона(Файл, МассивДанныхДляАвтоЗамен, НастройкиАвтозаполнения) Экспорт	
		
	МассивЗамен = НастройкиАвтозаполнения.МассивЗамен; 
	РасширениеФайла = НастройкиАвтозаполнения.РасширениеФайла;
	ДвоичныеДанныеФайла = НастройкиАвтозаполнения.ДвоичныеДанныеФайла;
    ЗаполнятьMSWordНаСервере = НастройкиАвтозаполнения.ВыполнятьЗаполнениеMSWordНаСервере;
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат Неопределено; 
	КонецЕсли;
		
	Если РасширениеФайла = "doc" И ЗаполнятьMSWordНаСервере Тогда
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(РасширениеФайла, 
			МассивДанныхДляАвтоЗамен, 
			ДвоичныеДанныеФайла);
	ИначеЕсли АвтозаполнениеШаблоновФайловКлиентСервер.ТекстовыйФормат(РасширениеФайла) Тогда 
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьТекстовыйФайл(ДвоичныеДанныеФайла, РасширениеФайла, МассивДанныхДляАвтоЗамен);
	ИначеЕсли РасширениеФайла = "docx" Тогда
		Попытка
			ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordВXML(ДвоичныеДанныеФайла, 
				РасширениеФайла, 
				МассивДанныхДляАвтоЗамен,
				Ложь);
		Исключение
			ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordВXML(ДвоичныеДанныеФайла, 
				РасширениеФайла, 
				МассивДанныхДляАвтоЗамен,
				Истина);	
		КонецПопытки;
	ИначеЕсли РасширениеФайла = "odt" Тогда
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлOpenOfficeWriter(ДвоичныеДанныеФайла, 
			РасширениеФайла, 
			МассивДанныхДляАвтоЗамен);
	КонецЕсли;

	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

//Обновляет версию файла на основании двоичных данных
//Параметры:ДвоичныеДанные - двоичные данные файла
//			ВерсияСсылка - ссылка на версию объекта файл, которую необходимо обновить двоичными данными
Процедура ОбновитьВерсиюИзДвоичныхДанных(ДвоичныеДанные, Объект, КомментарийКНовойВерсии = "", УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ВерсияСсылка = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда 
		ВерсияСсылка = Объект.ТекущаяВерсия;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(ВерсияСсылка.Расширение);
	ДвоичныеДанные.Записать(ВременныйФайл);
	ХранЗначения = ЗагрузкаФайлов.ИзвлечьТекстВХранилищеЗначения(ВременныйФайл);
	
	ВерсияСсылка = РаботаСФайламиВызовСервера.ОбновитьВерсию(
		ВерсияСсылка.Владелец, 
		ВерсияСсылка.Владелец.ХранитьВерсии, 
		ПоместитьВоВременноеХранилище(ДвоичныеДанные),
		КомментарийКНовойВерсии, 
		ТекущаяДата(), 
		ТекущаяУниверсальнаяДата(),
		ДвоичныеДанные.Размер(), 
		"", 
		ВерсияСсылка.Расширение, 
		"",
		ХранЗначения,
		Ложь,
		Истина);
		
	Если ТипЗнч(ВерсияСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
    	РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(ВерсияСсылка.Владелец, ВерсияСсылка, Неопределено, УникальныйИдентификатор);
	КонецЕсли;	
	
	УдалитьФайлы(ВременныйФайл);
	 
КонецПроцедуры

//Возвращает двоичные данные файла
//Параметры:Файл - ссылка на файл, двоичные данные которого необходимо получить
Функция ПолучитьДвоичныеДанныеФайла(Файл) Экспорт
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();	
	Если ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
    	Если НЕ ТекущаяВерсия.Том.Пустая() Тогда
        	ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ТекущаяВерсия.Том) + ТекущаяВерсия.ПутьКФайлу; 
            Попытка
            	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка получения данных файла ""%1"".'"),
					Файл.Наименование);
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		Иначе
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка получения данных файла ""%1"".'"), 
				Файл.Наименование);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	ИначеЕсли ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяВерсия.ТипХраненияФайла) Тогда
		
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсия.Ссылка);
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения данных файла ""%1"".'"), 
			Файл.Наименование);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Из шаблона копируется Список файлов.
// Параметры:
// - Документ (СправочникОбъект) - объект, в который будет происходить копирование
// - ШаблонДокумента (СправочникСсылка.Шаблон<>) - объект, из которого будет происходить копирование реквизитов и файлов
// - СписокФайловДокумента (ТаблицаЗначенийФормы) - Модифицируется.
//
Процедура СкопироватьФайлыИзШаблонаДокумента(ШаблонДокумента, СписокФайловДокумента, УдалятьФайлыИзДругогоШаблона) Экспорт
	
	Если УдалятьФайлыИзДругогоШаблона Тогда
		КоличествоФайлов = СписокФайловДокумента.Количество();
		Для Индекс = 1 По КоличествоФайлов Цикл
			Если СписокФайловДокумента[КоличествоФайлов - Индекс].ДобавленИзШаблона Тогда
				СписокФайловДокумента.Удалить(КоличествоФайлов - Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПрикрепленныйФайл Из ШаблонДокумента.ПрикрепленныеФайлы Цикл 
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(ПрикрепленныйФайл.ФайлСсылка.Ссылка);
		Если ТипЗнч(ДанныеФайла) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ДанныеФайла.Свойство("Ссылка") Тогда
			Продолжить;
		КонецЕсли;
		Если ДанныеФайла.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
		НоваяСтрока = СписокФайловДокумента.Добавить();
		НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
		НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
		НоваяСтрока.ШаблонОснованиеДляСоздания = ПрикрепленныйФайл.ФайлСсылка.Ссылка;
		НоваяСтрока.ДобавленИзШаблона = Истина;
	КонецЦикла;
	
КонецПроцедуры

//Копирует реквизиты из шаблона в документ, основываясь на совпадении названий атрибутов
//Параметры:Документ - объект, в который происходит копирование
//			ШаблонДокумента - ссылка на объект, из которого происходит копирование
Процедура СкопироватьРеквизитыДокументаИзШаблона(Документ, ШаблонДокумента) Экспорт
	
	Если Не ЭтоШаблонДокумента(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	Если ШаблонДокумента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ШаблонДокумента.Метаданные().Реквизиты Цикл
		Если Реквизит.Имя = "КомментарийКДокументу" 
			И Не ПустаяСтрока(ШаблонДокумента.КомментарийКДокументу) Тогда
			 
			Документ.Комментарий = ШаблонДокумента.КомментарийКДокументу;
			
		ИначеЕсли Реквизит.Имя = "ДлительностьИсполнения" 
			И Не ШаблонДокумента.ДлительностьИсполнения = 0 Тогда
			
			Документ.СрокИсполнения = ТекущаяДатаСеанса() + ШаблонДокумента.ДлительностьИсполнения*60*60*24; 
			
		ИначеЕсли Реквизит.Имя <> "КомментарийКШаблону"
			И Реквизит.Имя <> "ВладелецШаблона"
			И Реквизит.Имя <> "КомментарийКДокументу"
			И Реквизит.Имя <> "ДлительностьИсполнения" 
			И ЗначениеЗаполнено(ШаблонДокумента[Реквизит.Имя]) Тогда
			
			НайденоВСтандартныхРеквизитах = Ложь;
			Для Каждого СтандРеквизит Из Документ.Метаданные().СтандартныеРеквизиты Цикл
				Если СтандРеквизит.Имя = Реквизит.Имя Тогда
					НайденоВСтандартныхРеквизитах = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если (Документ.Метаданные().Реквизиты.Найти(Реквизит.Имя) <> Неопределено 
				Или НайденоВСтандартныхРеквизитах)
				И ЗначениеЗаполнено(ШаблонДокумента[Реквизит.Имя]) Тогда
				Документ[Реквизит.Имя] = ШаблонДокумента[Реквизит.Имя];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Копирование доп.реквизитов из шаблона документа в документ.
	Документ.ДополнительныеРеквизиты.Очистить();
	Для Каждого ДопРеквизитШаблона Из ШаблонДокумента.ДополнительныеРеквизиты Цикл
		НовыйДопРеквизит = Документ.ДополнительныеРеквизиты.Добавить();
		НовыйДопРеквизит.Свойство = ДопРеквизитШаблона.Реквизит;
		НовыйДопРеквизит.Значение = ДопРеквизитШаблона.ЗначениеРеквизита;
	КонецЦикла;
	
КонецПроцедуры

//Получает настройки, связанные с автозаполнением файлов
//Параметры:
//			ФайлСсылка - ссылка на объект типа Файл
//			Документ - ссылка на Вн, Вх или Исх документ - владелец файла
//Возвращает:
//			Структура
//				ДвоичныеДанныеФайла - двоичные данные последней версии файла
//				РасширениеФайла - расширение последней версии файла
//				ВыполнятьЗаполнениеMSWordНаСервере - флаг, показывающий, где выполняется заполнение файлов формата MSWord
//				МассивЗамен - массив структур в формате "какое поле заменить"-"какую строку заменить"-"на что заменить"
//				ОснованиеСозданияФайла - ссылка на файл-шаблон, если параметр ФайлСсылка был создан из шаблона	
Функция ПолучитьНастройкиАвтозаполненияШаблоновФайлов(ФайлСсылка, Документ = Неопределено, ПолучитьДанныеОШтрихкоде = Ложь) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ФайлСсылка);
	РасширениеФайла = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
	ВыполнятьЗаполнениеMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	Если АвтозаполнениеШаблоновФайловСервер.ФайлНаходитсяВИерархииПапокШаблонов(ФайлСсылка) Тогда
		ОснованиеФайла = ФайлСсылка
	Иначе
		ОснованиеФайла = ФайлСсылка.ШаблонОснованиеДляСоздания;
	КонецЕсли;
		
	МассивЗамен = АвтозаполнениеШаблоновФайловСервер.ПолучитьМассивАвтозаполненийШаблона(
		ФайлСсылка,
		ОснованиеФайла, 
		?(Документ = Неопределено, ФайлСсылка.ВладелецФайла, Документ));
	ОснованиеСозданияФайла = ФайлСсылка.ШаблонОснованиеДляСоздания;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
	ДанныеВозврата.Вставить("РасширениеФайла", РасширениеФайла);
	ДанныеВозврата.Вставить("ВыполнятьЗаполнениеMSWordНаСервере", ВыполнятьЗаполнениеMSWordНаСервере);
	ДанныеВозврата.Вставить("МассивЗамен", МассивЗамен);
	ДанныеВозврата.Вставить("ОснованиеСозданияФайла", ОснованиеСозданияФайла);
	
	Если ПолучитьДанныеОШтрихкоде Тогда
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Документ, Ложь);
		Если ДанныеОШтрихкоде <> Неопределено И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
			ДанныеВозврата.Вставить("ДанныеОШтрихкоде", ДанныеОШтрихкоде); 
		КонецЕсли;
	КонецЕсли;
	Возврат ДанныеВозврата;
	
КонецФункции

// Проверяет, что файл находится в папке "Шаблоны файлов" или во вложенной в нее папке
// Результат (Булево) - файл находится в иерархии папки "Шаблоны файлов"
//
// Параметры: 
// - Файл (СправочникСсылка.Файлы)
//
Функция ФайлНаходитсяВИерархииПапокШаблонов(Файл) Экспорт
	
	Если ТипЗнч(Файл) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВладелецФайла = Файл.ВладелецФайла;
	Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока Не ВладелецФайла.Пустая() Цикл
		Если ВладелецФайла = Справочники.ПапкиФайлов.Шаблоны Тогда
			Возврат Истина;
		КонецЕсли;
		ВладелецФайла = ВладелецФайла.Родитель;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Получает признак того, редактируется файл или нет
Функция ФайлРедактируется(ФайлСсылка) Экспорт
	
	Возврат НЕ ФайлСсылка.Редактирует.Пустая();
	
КонецФункции

//Получает значение дополнительного реквизита объекта, если оно есть
Функция ПолучитьЗначениеДопРеквизитаОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект);
	Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
		Если СтрокаТаблицы.Свойство.Заголовок = ИмяРеквизита Тогда
			Возврат СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все таблицы файла формата MS Word 2007+
Функция ПолучитьВсеТаблицыФайлаOpenXML(ДвоичныеДанныеФайла, РасширениеФайла) Экспорт
	
	Результат = Новый Массив;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, РасширениеФайла, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, РасширениеФайла, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	ЧтениеXML = Новый ЧтениеXML();
	
	Если РасширениеФайла = "docx" Тогда
		ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");		
		
		ПостроительDOM = Новый ПостроительDOM;
		ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
		СчетчикТаблиц = 0;
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("//w:tbl", Новый РазыменовательПространствИменDOM(ОбъектДокумент));

		РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		Пока УзелDOMТаблица <> Неопределено Цикл
		    СчетчикТаблиц = СчетчикТаблиц + 1;
			Результат.Добавить("Таблица " + СчетчикТаблиц);
			УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	ИначеЕсли РасширениеФайла = "odt" Тогда			
		ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/content.xml");		
		
		ПостроительDOM = Новый ПостроительDOM;
		ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
		СчетчикТаблиц = 0;
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("//table:table", Новый РазыменовательПространствИменDOM(ОбъектДокумент));

		РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		Пока УзелDOMТаблица <> Неопределено Цикл
		    СчетчикТаблиц = СчетчикТаблиц + 1;
			Результат.Добавить("Таблица " + СчетчикТаблиц);
			УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоШаблонДокумента(Значение)
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
		Или ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
		Или ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов");
КонецФункции
