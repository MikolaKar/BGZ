////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Серверные процедуры и функции общего назначения:
// - Поддержка профилей безопасности
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ИспользованиеПрофилейБезопасности

Функция ВозможноИспользованиеПрофилейБезопасности() Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиИспользованияПрофилейБезопасности");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПроверкеВозможностиИспользованияПрофилейБезопасности(Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	РаботаВБезопасномРежимеПереопределяемый.ПриПроверкеВозможностиИспользованияПрофилейБезопасности(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДоступнаНастройкаПрофилейБезопасности() Экспорт
	
	Если ВозможноИспользованиеПрофилейБезопасности() Тогда
		
		Отказ = Ложь;
		
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиНастройкиПрофилейБезопасности");
		
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			Обработчик.Модуль.ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ);
			Если Отказ Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьДействияПриВключенииИспользованияПрофилейБезопасности() Экспорт
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииИспользованияПрофилейБезопасности");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриВключенииИспользованияПрофилейБезопасности();
	КонецЦикла;
	
	РаботаВБезопасномРежимеПереопределяемый.ПриВключенииИспользованияПрофилейБезопасности();
	
КонецПроцедуры

Функция МенеджерыКэшаПредоставленныхРазрешений() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить(РегистрыСведений.РазрешенныеКаталогиФайловойСистемы);
	Результат.Добавить(РегистрыСведений.РазрешенныеCOMКлассы);
	Результат.Добавить(РегистрыСведений.РазрешенныеВнешниеКомпоненты);
	Результат.Добавить(РегистрыСведений.РазрешенныеПриложенияОперационнойСистемы);
	Результат.Добавить(РегистрыСведений.РазрешенныеИнтернетРесурсы);
	Результат.Добавить(РегистрыСведений.РазрешенияПереходаВПривилегированныйРежим);
	
	Возврат Результат;
	
КонецФункции

Функция ПакетXDTOПредставленийРазрешений() Экспорт
	
	Возврат "http://www.1c.ru/1cFresh/Application/Permissions/1.0.0.1";
	
КонецФункции

Функция ИгнорироватьТекущиеНастройкиИспользованияПрофилейБезопасности() Экспорт
	
	Если Не ТранзакцияАктивна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СлужебныйИОМ());
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(СлужебныйИОМ());
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ТаблицыРазрешений

Функция ТаблицыРазрешений() Экспорт
	
	Результат = Новый Структура();
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	Для Каждого Менеджер Из Менеджеры Цикл
		
		МетаданныеРегистра = Менеджер.СоздатьНаборЗаписей().Метаданные();
		Таблица = ТаблицаРазрешений(МетаданныеРегистра);
		Результат.Вставить(Менеджер.ТипXDTOПредставленияРазрешений().Имя, Таблица);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаРазрешений(Знач МетаданныеРегистра, Знач ИндексироватьИзмерения = Ложь) Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	ПоляИндекса = Новый Массив();
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Таблица.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
		Если ИндексироватьИзмерения Тогда
			ПоляИндекса.Добавить(Измерение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Таблица.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Таблица.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Если ПоляИндекса.Количество() > 0 Тогда
		Таблица.Индексы.Добавить(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ПоляИндекса, ", "));
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция КоличествоРазрешенийВТаблицах(Знач Таблицы) Экспорт
	
	Результат = 0;
	
	Для Каждого КлючИЗначение Из Таблицы Цикл
		Результат = Результат + КлючИЗначение.Значение.Количество();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросамиРазрешений

// Возвращает идентификаторы запросов, которые могут быть обработаны, по общему перечню
// запросов.
//
// Параметры:
//  Идентификаторы - Массив(УникальныйИдентификатор, Неопределено),
//
// Возвращаемое значение: Массив(УникальныйИдентификатор).
//
Функция ИдентификаторыОбрабатываемыхЗапросов(Знач Идентификаторы) Экспорт
	
	Результат = Новый Массив();
	
	Если ТипЗнч(Идентификаторы) <> Тип("Массив") И ТипЗнч(Идентификаторы) <> Тип("ФиксированныйМассив") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра Идентификаторы - ожидается массив'");
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Если Идентификатор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Идентификатор) <> Тип("УникальныйИдентификатор") Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный идентификатор запроса %1 - тип значения %2 не является типом идентификатора запроса'"),
				Строка(Идентификатор), Строка(ТипЗнч(Идентификатор)));
		КонецЕсли;
		
		Результат.Добавить(Идентификатор);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создает запрос на изменение разрешений использования внешних ресурсов.
// Только для внутреннего использования.
//
// Параметры:
//  Владелец - ЛюбаяСсылка - владелец разрешений на использование внешних ресурсов
//    (Неопределено при запросе разрешений для конфигурации, а не для объектов конфигурации),
//  РежимЗамещения - Булево - режим замещения ранее предоставленных для владельца разрешений,
//  ДобавляемыеРазрешения - Массив(ОбъектXDTO) - массив ОбъектовXDTO, соответствующих внутренним описаниям
//    запрашиваемых разрешений на доступ к внешним ресурсам. Предполагается, что все ОбъектыXDTO, передаваемые
//    в качестве параметра, сформированы с помощью вызова функций РаботаВБезопасномРежиме.Разрешение*(),
//  УдаляемыеРазрешения - Массив(ОбъектXDTO) - массив ОбъектовXDTO, соответствующих внутренним описаниям
//    отменяемых разрешений на доступ к внешним ресурсам. Предполагается, что все ОбъектыXDTO, передаваемые
//    в качестве параметра, сформированы с помощью вызова функций РаботаВБезопасномРежиме.Разрешение*(),
//  ВнешнийМодуль - ЛюбаяСсылка - ссылка, соответствующая внешнему модулю, для которого запрашиваются
//    разрешения. (Неопределено при запросе разрешений для конфигурации, а не для внешних модулей).
//
// Возвращаемое значение - УникальныйИдентификатор - идентификатор созданного запроса.
//
Функция ЗапросНаИзменениеРазрешенийИспользованияВнешнихРесурсов(Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения = Неопределено, Знач УдаляемыеРазрешения = Неопределено, Знач ВнешнийМодуль = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(
			Владелец, РежимЗамещения, ДобавляемыеРазрешения, УдаляемыеРазрешения, СтандартнаяОбработка, Результат);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВозможноИспользованиеПрофилейБезопасности() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ИгнорироватьТекущиеНастройкиИспользованияПрофилейБезопасности() Тогда
		Если Не ИспользуетсяИнтерактивныйРежимЗапросаРазрешений() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не МонопольныйРежим() Тогда
		
		Попытка
			ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеСлужебный.ОчисткаНеактуальныхЗапросовНаИспользованиеВнешнихРесурсов", , "1");
		Исключение
			// Обработка исключения не требуется.
			// Ожидаемое исключение - дублирование заданий с одинаковым ключем.
		КонецПопытки;
		
	КонецЕсли;
	
	Менеджер = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьМенеджерЗаписи();
	Менеджер.Идентификатор = Новый УникальныйИдентификатор();
	Менеджер.МоментВремени = ТекущаяУниверсальнаяДата();
	
	Если РаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
		Менеджер.БезопасныйРежим = БезопасныйРежим();
	Иначе
		Менеджер.БезопасныйРежим = Ложь;
	КонецЕсли;
	
	Если Владелец = Неопределено Тогда
		Владелец = СлужебныйИОМ();
	КонецЕсли;
	Менеджер.Владелец = Владелец;
	
	Если ВнешнийМодуль = Неопределено Тогда
		ВнешнийМодуль = СлужебныйИОМ();
	КонецЕсли;
	Менеджер.ВнешнийМодуль = ВнешнийМодуль;
	
	Менеджер.РежимЗамещения = РежимЗамещения;
	
	Если ДобавляемыеРазрешения <> Неопределено Тогда
		
		МассивРазрешений = Новый Массив();
		Для Каждого НовоеРазрешение Из ДобавляемыеРазрешения Цикл
			МассивРазрешений.Добавить(ОбщегоНазначения.ОбъектXDTOВСтрокуXML(НовоеРазрешение));
		КонецЦикла;
		
		Если МассивРазрешений.Количество() > 0 Тогда
			Менеджер.ДобавляемыеРазрешения = ОбщегоНазначения.ЗначениеВСтрокуXML(МассивРазрешений);
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдаляемыеРазрешения <> Неопределено Тогда
		
		МассивРазрешений = Новый Массив();
		Для Каждого ОтменяемоеРазрешение Из УдаляемыеРазрешения Цикл
			МассивРазрешений.Добавить(ОбщегоНазначения.ОбъектXDTOВСтрокуXML(ОтменяемоеРазрешение));
		КонецЦикла;
		
		Если МассивРазрешений.Количество() > 0 Тогда
			Менеджер.УдаляемыеРазрешения = ОбщегоНазначения.ЗначениеВСтрокуXML(МассивРазрешений);
		КонецЕсли;
		
	КонецЕсли;
	
	Менеджер.Состояние = Перечисления.СостоянияЗапросовНаИспользованиеВнешнихРесурсов.Новый;
	Менеджер.Записать();
	
	Возврат Менеджер.Идентификатор;
	
КонецФункции

// Создает запросы на использование внешних ресурсов для внешнего модуля.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка - ссылка, соответствующая внешнему модулю, для которого запрашиваются разрешения,
//  НовыеРазрешения - Массив(ОбъектXDTO) - массив ОбъектовXDTO, соответствующих внутренним описаниям
//    запрашиваемых разрешений на доступ к внешним ресурсам. Предполагается, что все ОбъектыXDTO, передаваемые
//    в качестве параметра, сформированы с помощью вызова функций РаботаВБезопасномРежиме.Разрешение*().
//    При запросе разрешений для внешних модулей добавление разрешений всегда выполняется в режиме замещения.
//
// Возвращаемое значение - Массив(УникальныйИдентификатор) - идентификаторы созданных запросов.
//
Функция ЗапросыНаИспользованиеВнешнихРесурсовДляВнешнегоМодуля(Знач ВнешнийМодуль, Знач НовыеРазрешения = Неопределено) Экспорт
	
	Результат = Новый Массив();
	
	Если НовыеРазрешения = Неопределено Тогда
		НовыеРазрешения = Новый Массив();
	КонецЕсли;
	
	Если НовыеРазрешения.Количество() > 0 Тогда
		
		// Если профиля безопасности еще нет - его требуется создать
		Если РежимПодключенияВнешнегоМодуля(ВнешнийМодуль) = Неопределено Тогда
			Результат.Добавить(ЗапросНаСозданиеНабораРазрешений(ВнешнийМодуль));
		КонецЕсли;
		
		Результат.Добавить(
			ЗапросНаИзменениеРазрешенийИспользованияВнешнихРесурсов(
				ВнешнийМодуль, Истина, НовыеРазрешения, Неопределено, ВнешнийМодуль
			)
		);
		
	Иначе
		
		// Если профиль безопасности есть - его требуется удалить
		Если РежимПодключенияВнешнегоМодуля(ВнешнийМодуль) <> Неопределено Тогда
			Результат.Добавить(ЗапросНаУдалениеНабораРазрешений(ВнешнийМодуль));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросыНаОбновлениеРазрешенийКонфигурации() Экспорт
	
	Результат = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		
		Результат.Добавить(ЗапросНаСозданиеНабораРазрешений(СлужебныйИОМ()));
		
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам");
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			Обработчик.Модуль.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(Результат);
		КонецЦикла;
		
		РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(Результат);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросыНаОтключениеПрофилейБезопасности() Экспорт
	
	Результат = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		
		Результат.Добавить(ЗапросНаУдалениеНабораРазрешений(СлужебныйИОМ()));
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РежимыПодключенияВнешнихМодулей.ВнешнийМодуль КАК ВнешнийМодуль
			|ИЗ
			|	РегистрСведений.РежимыПодключенияВнешнихМодулей КАК РежимыПодключенияВнешнихМодулей";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(ЗапросНаУдалениеНабораРазрешений(Выборка.ВнешнийМодуль));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрименениеЗапросовРазрешений

Функция ПредставлениеРазрешенийНаИспользованиеВнешнихРесурсов(Знач ТаблицыРазрешений) Экспорт
	
	Возврат Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ПредставлениеРазрешенийНаИспользованиеВнешнихРесурсов(
		ТаблицыРазрешений);
	
КонецФункции

Функция ДельтаИзмененийРазрешенийНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления) Экспорт
	
	ИдентификаторыОбрабатываемыхЗапросов = ИдентификаторыОбрабатываемыхЗапросов(ИдентификаторыЗапросов);
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриРасчетеДельтыИзмененийНаИспользованиеВнешнихРесурсов");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриРасчетеДельтыИзмененийНаИспользованиеВнешнихРесурсов(
			ИдентификаторыОбрабатываемыхЗапросов, РежимВосстановления, СтандартнаяОбработка, Результат);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	МенеджерыЭлементовКэша = МенеджерыКэшаПредоставленныхРазрешений();
	МенеджерыВТ = Новый Структура();
	
	Если ИгнорироватьТекущиеНастройкиИспользованияПрофилейБезопасности() Тогда
		ОчиститьКэшПредоставленныхРазрешений();
	КонецЕсли;
	
	Для Каждого Менеджер Из МенеджерыЭлементовКэша Цикл
		
		ИмяТаблицы = Менеджер.ТипXDTOПредставленияРазрешений().Имя;
		ШаблонЗапроса = Менеджер.ЗапросТекущегоСреза();
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц();
		ТекстЗапросаСозданияВТ = СтрЗаменить(ШаблонЗапроса, "ИЗ", "ПОМЕСТИТЬ ВТ_До ИЗ");
		Запрос = Новый Запрос(ТекстЗапросаСозданияВТ);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
		МенеджерыВТ.Вставить(ИмяТаблицы, МенеджерВТ);
		
	КонецЦикла;
	
	Если РежимВосстановления Тогда
		ОчиститьКэшПредоставленныхРазрешений();
	КонецЕсли;
	
	ПрименитьЗапросы(ИдентификаторыОбрабатываемыхЗапросов);
	
	Добавляемые = ТаблицыРазрешений();
	Удаляемые = ТаблицыРазрешений();
	
	Для Каждого Менеджер Из МенеджерыЭлементовКэша Цикл
		
		ИмяТаблицы = Менеджер.ТипXDTOПредставленияРазрешений().Имя;
		ШаблонЗапроса = Менеджер.ЗапросТекущегоСреза();
		ТекстЗапросаДельты = Менеджер.ЗапросПолученияДельты();
		
		МенеджерВТ = МенеджерыВТ[ИмяТаблицы];
		ТекстЗапросаСозданияВТ = СтрЗаменить(ШаблонЗапроса, "ИЗ", "ПОМЕСТИТЬ ВТ_После ИЗ");
		Запрос = Новый Запрос(ТекстЗапросаСозданияВТ);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
		Запрос.Текст = ТекстЗапросаДельты;
		Результаты = Запрос.ВыполнитьПакет();
		
		Порция = Удаляемые[ИмяТаблицы];
		Если Порция = Неопределено Тогда
			Удаляемые.Вставить(ИмяТаблицы, Результаты[0].Выгрузить());
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результаты[0].Выгрузить(), Порция);
			Удаляемые.Вставить(ИмяТаблицы, Порция);
		КонецЕсли;
		
		Порция = Добавляемые[ИмяТаблицы];
		Если Порция = Неопределено Тогда
			Добавляемые.Вставить(ИмяТаблицы, Результаты[1].Выгрузить());
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результаты[1].Выгрузить(), Порция);
			Добавляемые.Вставить(ИмяТаблицы, Порция);
		КонецЕсли;
		
	КонецЦикла;
	
	ОтменитьТранзакцию();
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаЛюбаяСсылка());
	Результат.Колонки.Добавить("Изменения", Новый ОписаниеТипов("Структура"));
	
	Для Каждого КлючИЗначение Из Добавляемые Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		Таблица = КлючИЗначение.Значение;
		
		Для Каждого Строка Из Таблица Цикл
			
			ВнешнийМодуль = Строка.ВнешнийМодуль;
			
			ОтборПоМодулю = Новый Структура("ВнешнийМодуль", ВнешнийМодуль);
			СтрокиПоМодулю = Результат.НайтиСтроки(ОтборПоМодулю);
			Если СтрокиПоМодулю.Количество() = 0 Тогда
				СтрокаПоМодулю = Результат.Добавить();
				СтрокаПоМодулю.ВнешнийМодуль = ВнешнийМодуль;
				РезультатПоМодулю = Новый Структура("Добавляемые, Удаляемые", ТаблицыРазрешений(), ТаблицыРазрешений());
			ИначеЕсли СтрокиПоМодулю.Количество() = 1 Тогда
				СтрокаПоМодулю = СтрокиПоМодулю.Получить(0);
				РезультатПоМодулю = СтрокаПоМодулю.Изменения;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неоднозначность при определении изменений в разрешениях'");
			КонецЕсли;
			
			ТаблицаРезультата = РезультатПоМодулю.Добавляемые[ИмяТаблицы];
			СтрокаТаблицыРезультата = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, Строка);
			
			РезультатПоМодулю.Добавляемые.Вставить(ИмяТаблицы, ТаблицаРезультата);
			
			СтрокаПоМодулю.Изменения = РезультатПоМодулю;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Удаляемые Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		Таблица = КлючИЗначение.Значение;
		
		Для Каждого Строка Из Таблица Цикл
			
			ВнешнийМодуль = Строка.ВнешнийМодуль;
			
			ОтборПоМодулю = Новый Структура("ВнешнийМодуль", ВнешнийМодуль);
			СтрокиПоМодулю = Результат.НайтиСтроки(ОтборПоМодулю);
			Если СтрокиПоМодулю.Количество() = 0 Тогда
				СтрокаПоМодулю = Результат.Добавить();
				СтрокаПоМодулю.ВнешнийМодуль = ВнешнийМодуль;
				РезультатПоМодулю = Новый Структура("Добавляемые, Удаляемые", ТаблицыРазрешений(), ТаблицыРазрешений());
			ИначеЕсли СтрокиПоМодулю.Количество() = 1 Тогда
				СтрокаПоМодулю = СтрокиПоМодулю.Получить(0);
				РезультатПоМодулю = СтрокаПоМодулю.Изменения;
			Иначе
				ВызватьИсключение НСтр("ru = 'Неоднозначность при определении изменений в разрешениях'");
			КонецЕсли;
			
			ТаблицаРезультата = РезультатПоМодулю.Удаляемые[ИмяТаблицы];
			СтрокаТаблицыРезультата = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, Строка);
			
			РезультатПоМодулю.Удаляемые.Вставить(ИмяТаблицы, ТаблицаРезультата);
			
			СтрокаПоМодулю.Изменения = РезультатПоМодулю;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.ВнешнийМодуль = СлужебныйИОМ() Тогда
			СтрокаРезультата.Приоритет = 1;
		Иначе
			СтрокаРезультата.Приоритет = 2;
		КонецЕсли;
	КонецЦикла;
	Результат.Сортировать("Приоритет");
	
	Возврат Результат;
	
КонецФункции

Процедура ПрименитьЗапросы(Знач ИдентификаторыЗапросов) Экспорт
	
	ИдентификаторыОбрабатываемыхЗапросов = ИдентификаторыОбрабатываемыхЗапросов(ИдентификаторыЗапросов);
	
	СтандартнаяОбработка = Истина;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов(ИдентификаторыОбрабатываемыхЗапросов, СтандартнаяОбработка);
		
	КонецЦикла;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ВнешнийМодуль,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Владелец,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.РежимЗамещения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ДобавляемыеРазрешения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.УдаляемыеРазрешения,
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.МоментВремени
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов КАК ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов
		|ГДЕ
		|	ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.Идентификатор В(&Идентификаторы)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыОбрабатываемыхЗапросов);
	
	ДобавляемыеПоТипам = Новый ТаблицаЗначений();
	ДобавляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаЛюбаяСсылка());
	ДобавляемыеПоТипам.Колонки.Добавить("Владелец", ОписаниеТипаЛюбаяСсылка());
	ДобавляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ДобавляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив"));
	
	УдаляемыеПоТипам = Новый ТаблицаЗначений();
	УдаляемыеПоТипам.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаЛюбаяСсылка());
	УдаляемыеПоТипам.Колонки.Добавить("Владелец", ОписаниеТипаЛюбаяСсылка());
	УдаляемыеПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	УдаляемыеПоТипам.Колонки.Добавить("Разрешения", Новый ОписаниеТипов("Массив"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.РежимЗамещения Тогда
			
			Для Каждого Менеджер Из Менеджеры Цикл
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВнешнийМодуль.Установить(Выборка.ВнешнийМодуль);
				НаборЗаписей.Отбор.Владелец.Установить(Выборка.Владелец);
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.ДобавляемыеРазрешения) Тогда
			
			МассивДобавляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.ДобавляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивДобавляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = ДобавляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.УдаляемыеРазрешения) Тогда
			
			МассивУдаляемыхРазрешений = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.УдаляемыеРазрешения);
			Для Каждого ПредставлениеРазрешения Из МассивУдаляемыхРазрешений Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ПредставлениеРазрешения);
				
				ТипРазрешения = Разрешение.Тип().Имя;
				Отбор = Новый Структура("ВнешнийМодуль,Владелец,Тип", Выборка.ВнешнийМодуль, Выборка.Владелец, ТипРазрешения);
				Строки = УдаляемыеПоТипам.НайтиСтроки(Отбор);
				Если Строки.Количество() = 0 Тогда
					Строка = ДобавляемыеПоТипам.Добавить();
					Строка.ВнешнийМодуль = Выборка.ВнешнийМодуль;
					Строка.Владелец = Выборка.Владелец;
					Строка.Тип = ТипРазрешения;
				Иначе
					Строка = Строки.Получить(0);
				КонецЕсли;
				
				Строка.Разрешения.Добавить(Разрешение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДобавляемыеПоТипу Из ДобавляемыеПоТипам Цикл
		
		ИмяТипа = ДобавляемыеПоТипу.Тип;
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!'"),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(ДобавляемыеПоТипу.Разрешения, ДобавляемыеПоТипу.ВнешнийМодуль, ДобавляемыеПоТипу.Владелец, Ложь);
		НаборЗаписей.Записать(Ложь);
		
	КонецЦикла;
	
	Для Каждого УдаляемыеПоТипу Из УдаляемыеПоТипам Цикл
		
		ИмяТипа = УдаляемыеПоТипу.Тип;
		
		ТекущийМенеджер = Неопределено;
		Для Каждого Менеджер Из Менеджеры Цикл
			Если Менеджер.ТипXDTOПредставленияРазрешений().Имя = ИмяТипа Тогда
				ТекущийМенеджер = Менеджер;
			КонецЕсли;
		КонецЦикла;
		Если ТекущийМенеджер = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при разборе запроса разрешений на использование внешних ресурсов: неизвестное имя типа %1!'"),
				ИмяТипа);
		КонецЕсли;
		
		НаборЗаписей = ТекущийМенеджер.НаборЗаписейИзXDTOПредставления(УдаляемыеПоТипу.Разрешения, УдаляемыеПоТипу.ВнешнийМодуль, УдаляемыеПоТипу.Владелец, Истина);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеОбработкиЗапросов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления) Экспорт
	
	ИдентификаторыОбрабатываемыхЗапросов = ИдентификаторыОбрабатываемыхЗапросов(ИдентификаторыЗапросов);
	
	СтандартнаяОбработка = Истина;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов(ИдентификаторыОбрабатываемыхЗапросов, РежимВосстановления, СтандартнаяОбработка);
		
	КонецЦикла;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ПрименитьЗапросыАдминистрирования(ИдентификаторыОбрабатываемыхЗапросов);
		
		Если РежимВосстановления Тогда
			Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
			Для Каждого Менеджер Из Менеджеры Цикл
				Набор = Менеджер.СоздатьНаборЗаписей();
				Набор.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
		
		ПрименитьЗапросы(ИдентификаторыОбрабатываемыхЗапросов);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВнешниеМодули

// Возвращает режим подключения внешнего модуля.
//
// Параметры:
//  ВнешнийМодуль - ЛюбаяСсылка, ссылка, соответствующая внешнему модулю, для которого запрашиваются
//    режим подключения.
//
// Возвращаемое значение: Строка - имя профиля безопасности, который должен использоваться для подключения
//  внешнего модуля. Если для внешнего модуля не зарегистрирован режим подключения - возвращается Неопределено.
//
Функция РежимПодключенияВнешнегоМодуля(Знач ВнешнийМодуль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = РегистрыСведений.РежимыПодключенияВнешнихМодулей.СоздатьМенеджерЗаписи();
	Менеджер.ВнешнийМодуль = ВнешнийМодуль;
	Менеджер.Прочитать();
	Если Менеджер.Выбран() Тогда
		Возврат Менеджер.БезопасныйРежим;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает программный модуль, выполняющий функции менеджера внешнего модуля.
//
//  ВнешнийМодуль - ЛюбаяСсылка, ссылка, соответствующая внешнему модулю, для которого запрашиваются
//    менеджер.
//
// Возвращаемое значение: ОбщийМодуль.
//
Функция МенеджерВнешнегоМодуля(Знач ВнешнийМодуль) Экспорт
	
	Контейнеры = Новый Массив();
	
	Менеджеры = МенеджерыВнешнихМодулей();
	Для Каждого Менеджер Из Менеджеры Цикл
		КонтейнерыМенеджера = Менеджер.КонтейнерыВнешнихМодулей();
		
		Если ТипЗнч(ВнешнийМодуль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВнешнийМодуль);
		Иначе
			ОбъектМетаданных = ВнешнийМодуль.Метаданные();
		КонецЕсли;
		
		Если КонтейнерыМенеджера.Найти(ОбъектМетаданных) <> Неопределено Тогда
			Возврат Менеджер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область КонтрольЗаписиСлужебныхДанных

Процедура ПриЗаписиКонтейнераВнешнегоМодуля(Источник, Отказ) Экспорт
	
	ПриЗаписиСлужебныхДанных(Источник);
	
КонецПроцедуры

Процедура ПриЗаписиСлужебныхДанных(Объект) Экспорт
	
	Если РаботаВБезопасномРежиме.УстановленБезопасныйРежим() Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запись объекта %1 недоступна: установлен безопасный режим: %2!'"),
			Объект.Метаданные().ПолноеИмя(),
			БезопасныйРежим()
		);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДекларацияСлужебныхСобытий

// Объявляет служебные события подсистемы БазоваяФункциональность, предназначенные
//  для поддержки профилей безопасности.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Вызывается при проверке возможности использования профилей безопасности
	//
	// Параметры:
	//  Отказ - Булево. Если для информационной базы недоступно использование профилей безопасности -
	//    значение данного параметра нужно установить равным Истина.
	//
	// Синтаксис:
	// Процедура ПриПроверкеВозможностиИспользованияПрофилейБезопасности(Отказ) Экспорт
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиИспользованияПрофилейБезопасности");
	
	// Вызывается при проверке возможности настройки профилей безопасности
	//
	// Параметры:
	//  Отказ - Булево. Если для информационной базы недоступно использование профилей безопасности -
	//    значение данного параметра нужно установить равным Истина.
	//
	// Синтаксис:
	// Процедура ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ) Экспорт
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПроверкеВозможностиНастройкиПрофилейБезопасности");
	
	// Вызывается при включении использования для информационной базы профилей безопасности.
	//
	// Синтаксис:
	// Процедура ПриВключенииИспользованияПрофилейБезопасности() Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриВключенииИспользованияПрофилейБезопасности");
	
	// Заполняет перечень запросов внешних разрешений, которые обязательно должны быть предоставлены
	// при создании информационной базы или обновлении программы.
	//
	// Параметры:
	//  ЗапросыРазрешений - Массив - список запросов, возвращаемых функцией
	//                      ЗапросНаИспользованиеВнешнихРесурсов модуля РаботаВБезопасномРежиме.
	//
	// Синтаксис:
	// Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам");
	
	// Вызывается при регистрации менеджеров внешних модулей.
	//
	// Параметры:
	//  Менеджеры - Массив(ОбщийМодуль).
	//
	// Синтаксис:
	// Процедура ПриРегистрацииМенеджеровВнешнихМодулей(Менеджеры) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриРегистрацииМенеджеровВнешнихМодулей");
	
	// Вызывается при создании запроса на администрирование разрешений использования внешних ресурсов.
	//
	// Параметры:
	//  ВнешнийМодуль - ЛюбаяСсылка,
	//  Операция - ПеречислениеСсылка.ОперацииСНаборамиРазрешений,
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на администрирование
	//    использования внешних ресурсов.
	//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
	//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
	//
	// Синтаксис:
	// Процедура ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(Знач ВнешнийМодуль, Знач Операция, СтандартнаяОбработка, Результат) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов");
	
	// Вызывается при создании запроса на использование внешних ресурсов.
	//
	// Параметры:
	//  Владелец - ЛюбаяСсылка - владелец запрашиваемых разрешений на использование внешних ресурсов,
	//  РежимЗамещения - Булево - флаг замещения ранее предоставленных разрешений по владельцу,
	//  ДобавляемыеРазрешения - Массив(ОбъектXDTO) - массив добавляемых разрешений,
	//  УдаляемыеРазрешения - Массив(ОбъектXDTO) - массив удаляемых разрешений,
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки создания запроса на использование
	//    внешних ресурсов.
	//  Результат - УникальныйИдентификатор - идентификатор запроса (в том случае, если внутри обработчика
	//    значение параметра СтандартнаяОбработка установлено в значение Ложь).
	//
	// Синтаксис:
	// Процедура ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения = Неопределено, Знач УдаляемыеРазрешения = Неопределено, СтандартнаяОбработка, Результат) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов");
	
	// Вызывается при расчете дельты изменений на использование внешних ресурсов.
	//
	// Параметры:
	//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
	//    для которых рассчитывается дельта,
	//  РежимВосстановления - Булево, флаг расчета дельты в режиме восстановления разрешений в кластере
	//    серверов,
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки расчета дельты,
	//  Результат - ТаблицаЗначений - дельта изменений разрешений на использование внешних ресурсов
	//    (в том случае, если внутри обработчика значение параметра СтандартнаяОбработка установлено в значение Ложь).
	//
	// Синтаксис:
	// Процедура ПриРасчетеДельтыИзмененийНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления, СтандартнаяОбработка, Результат) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриРасчетеДельтыИзмененийНаИспользованиеВнешнихРесурсов");
	
	// Вызывается при применении запросов на использование внешних ресурсов.
	//
	// Параметры:
	//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки расчета дельты,
	//
	// Синтаксис:
	// Процедура ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПримененииЗапросовНаИспользованиеВнешнихРесурсов");
	
	// Вызывается после обработки запросов на использование внешних ресурсов.
	//
	// Параметры:
	//  ИдентификаторыЗапросов - Массив(УникальныйИдентификатор) - массив идентификаторов запросов,
	//  РежимВосстановления - Булево, флаг вызова для запросов восстановления разрешений в кластере после
	//    отказа от записи объектов, для которых требовались разрешения на использование внешних ресурсов,
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки,
	//
	// Синтаксис:
	// Процедура ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, Знач РежимВосстановления, СтандартнаяОбработка) Экспорт
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПослеОбработкиЗапросовНаИспользованиеВнешнихРесурсов");
	
	// КЛИЕНТСКИЕ СОБЫТИЯ.
	
	// Вызывается при обработке запросов на использование внешних ресурсов.
	// 
	// Параметры:
	//  Идентификаторы - Массив(УникальныйИдентификатор), идентификаторы запросов, которые требуется применить,
	//  ФормаВладелец - УправляемаяФорма, форма, которая должна блокироваться до окончания применения разрешений,
	//  ОповещениеОЗакрытии - ОписаниеОповещения, которое будет вызвано при успешном предоставлении разрешений.
	//  СтандартнаяОбработка - Булево, флаг выполнения стандартной обработки применения разрешений на использование
	//    внешних ресурсов (подключение к агенту сервера через COM-соединение или сервер администрирования с
	//    запросом параметров подключения к кластеру у текущего пользователя). Может быть установлен в значение Ложь
	//    внутри обработчика события, в этом случае стандартная обработка завершения сеанса выполняться не будет.
	//
	// Синтаксис:
	// Процедура ПриОбработкеЗапросовНаИспользованиеВнешнихРесурсов(Знач ИдентификаторыЗапросов, ФормаВладелец, ОповещениеОЗакрытии, СтандартнаяОбработка) Экспорт
	//
	КлиентскиеСобытия.Добавить(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеЗапросовНаИспользованиеВнешнихРесурсов");
	
КонецПроцедуры

#КонецОбласти

#Область ДекларацияОбработчиковСлужебныхСобытий

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаВБезопасномРежимеСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаВБезопасномРежимеСлужебный");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСлужебныхСобытий

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.ПолноеИмя());
	
	Массив.Добавить(Метаданные.РегистрыСведений.РежимыПодключенияВнешнихМодулей.ПолноеИмя());
	
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенияПереходаВПривилегированныйРежим.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеCOMКлассы.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеВнешниеКомпоненты.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеИнтернетРесурсы.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеКаталогиФайловойСистемы.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.РазрешенныеПриложенияОперационнойСистемы.ПолноеИмя());
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.2.31";
	Обработчик.Процедура = "РаботаВБезопасномРежимеСлужебный.ЗаполнитьВнешнийМодульДляПредоставленныхРазрешений";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// [2.2.2.31] Процедура проставляет значение измерения ВнешнийМодуль у регистров, используемых в качестве
// кэша предоставленных разрешений.
//
Процедура ЗаполнитьВнешнийМодульДляПредоставленныхРазрешений() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		Регистры = МенеджерыКэшаПредоставленныхРазрешений();
		Для Каждого Регистр Из Регистры Цикл
			Блокировка.Добавить(Регистр.СоздатьНаборЗаписей().Метаданные().ПолноеИмя());
		КонецЦикла;
		
		Блокировка.Добавить("РегистрСведений.РежимыПодключенияВнешнихМодулей");
		
		Блокировка.Заблокировать();
		
		СоответствиеРежимовМодулям = Новый ТаблицаЗначений();
		СоответствиеРежимовМодулям.Колонки.Добавить("БезопасныйРежим", Метаданные.ОпределяемыеТипы.БезопасныйРежим.Тип);
		СоответствиеРежимовМодулям.Колонки.Добавить("ВнешнийМодуль", ОписаниеТипаЛюбаяСсылка());
		
		МодульКонфигурации = СлужебныйИОМ();
		СтрокаКонфигурации = СоответствиеРежимовМодулям.Добавить();
		СтрокаКонфигурации.ВнешнийМодуль = СлужебныйИОМ();
		СтрокаКонфигурации.БезопасныйРежим = ИмяПрофиляБезопасностиКонфигурации();
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	РежимыПодключенияВнешнихМодулей.ВнешнийМодуль КАК ВнешнийМодуль,
			|	РежимыПодключенияВнешнихМодулей.БезопасныйРежим КАК БезопасныйРежим
			|ИЗ
			|	РегистрСведений.РежимыПодключенияВнешнихМодулей КАК РежимыПодключенияВнешнихМодулей";
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаМодуля = СоответствиеРежимовМодулям.Добавить();
			СтрокаМодуля.ВнешнийМодуль = Выборка.ВнешнийМодуль;
			СтрокаМодуля.БезопасныйРежим = Выборка.БезопасныйРежим;
		КонецЦикла;
		
		Для Каждого Регистр Из Регистры Цикл
			
			ТекстЗапросаСозданияВТ =
				"ВЫБРАТЬ
				|	Соответствие.БезопасныйРежим КАК БезопасныйРежим,
				|	Соответствие.ВнешнийМодуль КАК ВнешнийМодуль
				|ПОМЕСТИТЬ Соответствие
				|ИЗ
				|	&Соответствие КАК Соответствие";
			
			Запрос = Новый Запрос(ТекстЗапросаСозданияВТ);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			Запрос.УстановитьПараметр("Соответствие", СоответствиеРежимовМодулям);
			Запрос.Выполнить();
			
			МетаданныеРегистра = Регистр.СоздатьНаборЗаписей().Метаданные();
			
			ТекстЗапросаРезультата = "Выбрать [ПоляРегистра], Соответствие.ВнешнийМодуль Из [ТаблицаРегистра] КАК ТаблицаРегистра ЛЕВОЕ СОЕДИНЕНИЕ Соответствие По ТаблицаРегистра.БезопасныйРежим = Соответствие.БезопасныйРежим";
			
			ИмяТаблицы = МетаданныеРегистра.ПолноеИмя();
			ПсевдонимТаблицы = "ТаблицаРегистра";
			
			ПоляРегистра = "";
			Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
				Если Не ПустаяСтрока(ПоляРегистра) Тогда
					ПоляРегистра = ПоляРегистра + ", ";
				КонецЕсли;
				ПоляРегистра = ПоляРегистра + ПсевдонимТаблицы + "." + Измерение.Имя + " КАК " + Измерение.Имя;
			КонецЦикла;
			Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
				Если Не ПустаяСтрока(ПоляРегистра) Тогда
					ПоляРегистра = ПоляРегистра + ", ";
				КонецЕсли;
				ПоляРегистра = ПоляРегистра + ПсевдонимТаблицы + "." + Ресурс.Имя + " КАК " + Ресурс.Имя;
			КонецЦикла;
			Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
				Если Не ПустаяСтрока(ПоляРегистра) Тогда
					ПоляРегистра = ПоляРегистра + ", ";
				КонецЕсли;
				ПоляРегистра = ПоляРегистра + ПсевдонимТаблицы + "." + Реквизит.Имя + " КАК " + Реквизит.Имя;
			КонецЦикла;
			
			ТекстЗапросаРезультата = СтрЗаменить(ТекстЗапросаРезультата, "[ТаблицаРегистра]", ИмяТаблицы);
			ТекстЗапросаРезультата = СтрЗаменить(ТекстЗапросаРезультата, "[ПоляРегистра]", ПоляРегистра);
			
			Запрос.Текст = ТекстЗапросаРезультата;
			СодержимоеРегистра = Запрос.Выполнить().Выгрузить();
			Набор = Регистр.СоздатьНаборЗаписей();
			Набор.Загрузить(СодержимоеРегистра);
			Набор.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиУсловныхВызовов

Процедура ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры.Вставить("ОтображатьПомощникНастройкиРазрешений", ИспользуетсяИнтерактивныйРежимЗапросаРазрешений());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИспользованиеПрофилейБезопасности

Функция ИспользуетсяИнтерактивныйРежимЗапросаРазрешений()
	
	Если ВозможноИспользованиеПрофилейБезопасности() Тогда
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") И Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Получить();
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСЗапросамиРазрешений

Функция ЗапросНаСозданиеНабораРазрешений(Знач ВнешнийМодуль)
	
	Возврат ЗапросНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(
		ВнешнийМодуль,
		Перечисления.ОперацииСНаборамиРазрешений.Создание);
	
КонецФункции

Функция ЗапросНаУдалениеНабораРазрешений(Знач ВнешнийМодуль)
	
	Возврат ЗапросНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(
		ВнешнийМодуль,
		Перечисления.ОперацииСНаборамиРазрешений.Удаление);
	
КонецФункции

Функция ЗапросНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(Знач ВнешнийМодуль, Знач Операция)
	
	СтандартнаяОбработка = Истина;
	Результат = Неопределено;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		
		Обработчик.Модуль.ПриЗапросеНаАдминистрированиеРазрешенийИспользованияВнешнихРесурсов(
			ВнешнийМодуль, Операция, СтандартнаяОбработка, Результат);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВозможноИспользованиеПрофилейБезопасности() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ИгнорироватьТекущиеНастройкиИспользованияПрофилейБезопасности() Тогда
		Если Не ИспользуетсяИнтерактивныйРежимЗапросаРазрешений() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не МонопольныйРежим() Тогда
		
		Попытка
			ФоновыеЗадания.Выполнить("РаботаВБезопасномРежимеСлужебный.ОчисткаНеактуальныхЗапросовНаИспользованиеВнешнихРесурсов", , "1");
		Исключение
			// Обработка исключения не требуется.
			// Ожидаемое исключение - дублирование заданий с одинаковым ключем.
		КонецПопытки;
		
	КонецЕсли;
	
	Менеджер = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьМенеджерЗаписи();
	Менеджер.Идентификатор = Новый УникальныйИдентификатор();
	Менеджер.Владелец = ВнешнийМодуль;
	Менеджер.Операция = Операция;
	Менеджер.МоментВремени = ТекущаяУниверсальнаяДата();
	Менеджер.Состояние = Перечисления.СостоянияЗапросовНаИспользованиеВнешнихРесурсов.Новый;
	
	Менеджер.Записать();
	
	Возврат Менеджер.Идентификатор;
	
КонецФункции

Процедура ОчисткаНеактуальныхЗапросовНаИспользованиеВнешнихРесурсов() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.ВнешнийМодуль КАК ВнешнийМодуль,
		|	Запросы.Владелец КАК Владелец,
		|	Запросы.БезопасныйРежим
		|ИЗ
		|	РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, ВнешнийМодуль, Владелец, БезопасныйРежим", Выборка.Идентификатор, Выборка.ВнешнийМодуль, Выборка.Владелец, Выборка.БезопасныйРежим));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запросы.Идентификатор КАК Идентификатор,
		|	Запросы.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов КАК Запросы
		|ГДЕ
		|	Запросы.МоментВремени <= &ДатаЗапроса";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаЗапроса", ТекущаяУниверсальнаяДата() - 3600); // Время жизни запроса - час
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ключ = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьКлючЗаписи(
				Новый Структура("Идентификатор, Владелец", Выборка.Идентификатор, Выборка.Владелец));
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
		Исключение
			
			// Обработка исключения не требуется.
			// Ожидаемое исключение - попытка удалить ту же запись регистра из другого сеанса.
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЗапросыАдминистрированияРазрешенийИспользованияВнешнихРесурсов.СоздатьМенеджерЗаписи();
		Менеджер.Идентификатор = Выборка.Идентификатор;
		Менеджер.Прочитать();
		Если Менеджер.Выбран() Тогда
			Менеджер.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОчиститьКэшПредоставленныхРазрешений()
	
	Менеджеры = МенеджерыКэшаПредоставленныхРазрешений();
	Для Каждого Менеджер Из Менеджеры Цикл
		Набор = Менеджер.СоздатьНаборЗаписей();
		Набор.Записать(Истина);
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ВнешниеМодули

Функция МенеджерыВнешнихМодулей()
	
	Менеджеры = Новый Массив();
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриРегистрацииМенеджеровВнешнихМодулей");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриРегистрацииМенеджеровВнешнихМодулей(Менеджеры);
	КонецЦикла;
	
	Возврат Менеджеры;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СлужебныйИОМ()
	
	Возврат РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ();
	
КонецФункции

Функция ОписаниеТипаЛюбаяСсылка()
	
	ОписаниеТипаЛюбаяСсылкаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "TypeDescription"));
	ОписаниеТипаЛюбаяСсылкаXDTO.TypeSet.Добавить(СериализаторXDTO.ЗаписатьXDTO(Новый РасширенноеИмяXML(
		"http://v8.1c.ru/8.1/data/enterprise/current-config", "AnyRef")));
	ОписаниеТипаЛюбаяСсылка = СериализаторXDTO.ПрочитатьXDTO(ОписаниеТипаЛюбаяСсылкаXDTO);
	
	Возврат ОписаниеТипаЛюбаяСсылка;
	
КонецФункции

Функция ИмяПрофиляБезопасностиКонфигурации() Экспорт
	
	Возврат "Infobase_" + Строка(СлужебныйИОМ().УникальныйИдентификатор());
	
КонецФункции

#КонецОбласти

#КонецОбласти
