// Переопределяемая часть функции ПолучитьПраваПоОбъекту
//
Функция ПолучитьЗапросНаПраваПоОбъекту(ОбъектДоступа, ТипОбъекта, ЗаменяемыеПодстроки) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипОбъекта = Тип("СправочникСсылка.Контроль") Тогда	
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставСубъектов.Пользователь,
			|	ВЫБОР
			|		КОГДА СоставСубъектов.Субъект ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Чтение,
			|	ВЫБОР
			|		КОГДА Контроль.Автор = СоставСубъектов.Пользователь
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Добавление,
			|	ВЫБОР
			|		КОГДА СоставСубъектов.Субъект ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (Контроль.Контролер = СоставСубъектов.Субъект
			|					И Контроль.ОсновнойОбъектАдресацииКонтролера = СоставСубъектов.ОсновнойОбъектАдресации
			|					И Контроль.ДополнительныйОбъектАдресацииКонтролера = СоставСубъектов.ДополнительныйОбъектАдресации
			|				ИЛИ Контроль.Автор = СоставСубъектов.Субъект)
			|			%ОтборПоПользователю%
			|ГДЕ
			|	Контроль.Ссылка = &ОбъектДоступа";
			
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Функция ДокументооборотПередЗаписьюПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на то, что изменились правообразующие реквизиты
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Если Источник.ЭтоНовый() Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		Иначе
			
			СтарыйСостав = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Источник.Ссылка, "ОтветственныеЗаОбработкуПисем").Выгрузить();
				
			Если Источник.ОтветственныеЗаОбработкуПисем.Количество() <> СтарыйСостав.Количество() Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Иначе
				// Поэлементное сравнение
				ЗначениеИзменено = Ложь;
				Для Сч = 0 По СтарыйСостав.Количество() - 1 Цикл
					Если СтарыйСостав[Сч].Пользователь <> Источник.ОтветственныеЗаОбработкуПисем[Сч].Пользователь Тогда
						ЗначениеИзменено = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				
				Если ЗначениеИзменено Тогда
					Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда	
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
			
			Если Источник.ЭтоНовый() Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Иначе
				СтарыйРуководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Руководитель");
				Если Источник.Руководитель <> СтарыйРуководитель Тогда
					Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ДелегированиеПрав") Тогда 
		
		Если Источник.ЭтоНовый() Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		Иначе
			
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "Кому, ОтКого, ПометкаУдаления, Действует, ВариантДелегирования");
			
			СтарыеОбластиДелегирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Источник.Ссылка, "ОбластиДелегирования").Выгрузить();
			
			Если Источник.Кому <> РеквизитыСсылки.Кому
			 Или Источник.ОтКого <> РеквизитыСсылки.ОтКого
			 Или Источник.ПометкаУдаления <> РеквизитыСсылки.ПометкаУдаления 
			 Или Источник.Действует <> РеквизитыСсылки.Действует 
			 Или Источник.ВариантДелегирования <> РеквизитыСсылки.ВариантДелегирования 
			 Или Источник.ОбластиДелегирования.Количество() <> СтарыеОбластиДелегирования.Количество() Тогда 
				
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				
			Иначе	
				
				Для Каждого Строка Из СтарыеОбластиДелегирования Цикл
					СтруктураОтбора = Новый Структура("ОбластьДелегирования", Строка.ОбластьДелегирования);
					НайденныеСтроки = Источник.ОбластиДелегирования.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда 
						Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбластиДелегированияПрав") Тогда
		
		Если Источник.ЭтоНовый()
		 Или Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		 
		 	Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		Иначе	
			
			Если Источник.Ссылка.Состав.Количество() <> Источник.Состав.Количество() Тогда 
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Иначе	
				Для Каждого Строка Из Источник.Ссылка.Состав Цикл
					СтруктураОтбора = Новый Структура("ОбъектМетаданных", Строка.ОбъектМетаданных);
					НайденныеСтроки = Источник.Состав.НайтиСтроки(СтруктураОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда 
						Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
						Прервать;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь; // Не обработано
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Функция ДокументооборотПриЗаписиПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		ОбновитьПраваОбъектовЗависящихОтУчетнойЗаписи(Источник.Ссылка);
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда	
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьПроекта(Источник);
		ОбновитьПраваОбъектовЗависящихОтПроекта(Источник.Ссылка);
				
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ОбластиДелегированияПрав") Тогда
		
		ПриЗаписиОбластиДелегированияПрав(Источник);
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь; // Не обработано
	
КонецФункции

// Переопределяемая часть обработчика подписки ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант
Функция ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ВестиУчетПоПроектам") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит Проект
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Проект <> &ПустойПроект";

		Запрос.УстановитьПараметр("ПустойПроект", Справочники.Проекты.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескриптору(Дескриптор);
			
		КонецЦикла;
		
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьУправлениеМероприятиями") Тогда	
		
		// Обработка всех дескрипторов, у которых установлен реквизит ВидОбъекта 
		// типа Справочник.ВидыМероприятий
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВидОбъекта <> &ВидОбъекта
			|	И ТИПЗНАЧЕНИЯ(ДескрипторыДоступаОбъектов.ВидОбъекта) = ТИП(Справочник.ВидыМероприятий)";

		Запрос.УстановитьПараметр("ВидОбъекта", Справочники.ВидыМероприятий.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескриптору(Дескриптор);
			
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

// Переопределяемая часть метода  ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоОбъекту
Процедура ОбновитьПраваСвязанныхДескрипторовПоОбъекту(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск дескрипторов по полю "Владелец"
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ВладелецОбъекта = &ВладелецОбъекта";

	Запрос.УстановитьПараметр("ВладелецОбъекта", Объект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Обновление прав дескриптора
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		// Поиск дескрипторов по полю "УчетнаяЗаписьПочты"
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.УчетнаяЗаписьПочты = &УчетнаяЗаписьПочты";

		Запрос.УстановитьПараметр("УчетнаяЗаписьПочты", Объект.Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			// Обновление прав дескриптора	
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Темы обсуждений, привязанные к файлам из папки
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПраваОбъектовЗависящихОтПапкиФайлов(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая часть метода  ДокументооборотПраваДоступа.ПереопределитьДескрипторыЗависимыхОбъектов
Процедура ПереопределитьДескрипторыЗависимыхОбъектов(Объект) Экспорт
	
	// Шаблоны процессов, входящих в шаблон комплексного процесса
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КомплексныйПроцессЭтапы.ШаблонБизнесПроцесса КАК Шаблон
			|ИЗ
			|	БизнесПроцесс.КомплексныйПроцесс.Этапы КАК КомплексныйПроцессЭтапы
			|ГДЕ
			|	КомплексныйПроцессЭтапы.Ссылка = &Ссылка
			|	И КомплексныйПроцессЭтапы.ШаблонБизнесПроцесса <> НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ШаблоныКомплексныхПроцессовЭтапы.ШаблонБизнесПроцесса
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов.Этапы КАК ШаблоныКомплексныхПроцессовЭтапы
			|ГДЕ
			|	ШаблоныКомплексныхПроцессовЭтапы.Ссылка = &Ссылка
			|	И ШаблоныКомплексныхПроцессовЭтапы.ШаблонБизнесПроцесса <> НЕОПРЕДЕЛЕНО";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Шаблон);	
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СообщенияОбсуждений.Ссылка
			|ИЗ
			|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
			|ГДЕ
			|	СообщенияОбсуждений.ВладелецСообщения = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПраваОбъектовЗависящихОтУчетнойЗаписи(УчетнаяЗаписьПочты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.УчетнаяЗаписьПочты = &УчетнаяЗаписьПочты";

	Запрос.УстановитьПараметр("УчетнаяЗаписьПочты", УчетнаяЗаписьПочты);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьПраваОбъектовЗависящихОтПроекта(Проект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Дескрипторы файлов процессов, тем форума, связанных с задачами, этапов КП
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка,
		|	ИСТИНА КАК ЭтоДескрипторОбъекта
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = УчастникиПроцессов.Процесс
		|ГДЕ
		|	УчастникиПроцессов.Участник = &Проект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка,
		|	ИСТИНА
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.Проект = &Проект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаФайлов.Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|		ПО ДескрипторыДоступаФайлов.ВладелецФайла = УчастникиПроцессов.Процесс
		|ГДЕ
		|	УчастникиПроцессов.Участник = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭтоДескрипторОбъекта Тогда
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		Иначе
			Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьПраваОбъектовЗависящихОтПапкиФайлов(ПапкаФайлов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО (ДескрипторыДоступаОбъектов.ВладелецОбъекта = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ПапкаФайлов";
	
	Запрос.УстановитьПараметр("ПапкаФайлов", ПапкаФайлов);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает запись набора записей РС ИсполнителиЗадач
Процедура ПриЗаписиИсполнителейЗадач(Источник) Экспорт
	
	Если Источник.Количество() = 0 Тогда
		
		// Обработка удаления набора записей
		
		РольИсполнителя = Источник.Отбор.РольИсполнителя.Значение;
		ОсновнойОбъектАдресации = Источник.Отбор.ОсновнойОбъектАдресации.Значение;
		ДополнительныйОбъектАдресации = Источник.Отбор.ДополнительныйОбъектАдресации.Значение;
		
		// Дескрипторы этапов КП и тем форума, привязанных к задачам
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|		ПО ЗадачаИсполнителя.Ссылка = ДескрипторыДоступаОбъектов.ВладелецОбъекта
			|ГДЕ
			|	ЗадачаИсполнителя.ТекущийИсполнитель = &Исполнитель
			|	И ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|	И ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = УчастникиПроцессов.Процесс
			|ГДЕ
			|	УчастникиПроцессов.Участник = &Исполнитель
			|	И УчастникиПроцессов.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|	И УчастникиПроцессов.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
		
		Запрос.УстановитьПараметр("Исполнитель", РольИсполнителя);
		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	Иначе
		
		// Обработка записи нового набора записей
		Для каждого Эл Из Источник Цикл
			
			РольИсполнителя = Эл.РольИсполнителя;
			ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
			// Дескрипторы этапов КП и тем форума, привязанных к задачам
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДескрипторыДоступаОбъектов.Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
				|		ПО ЗадачаИсполнителя.Ссылка = ДескрипторыДоступаОбъектов.ВладелецОбъекта
				|ГДЕ
				|	ЗадачаИсполнителя.ТекущийИсполнитель = &Исполнитель
				|	И ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|	И ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДескрипторыДоступаОбъектов.Ссылка
				|ИЗ
				|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
				|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = УчастникиПроцессов.Процесс
				|ГДЕ
				|	УчастникиПроцессов.Участник = &Исполнитель
				|	И УчастникиПроцессов.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|	И УчастникиПроцессов.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
			
			Запрос.УстановитьПараметр("Исполнитель", РольИсполнителя);
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая часть метода  ДокументооборотПраваДоступа.ОбновитьПраваЗависимыхДанных()
Процедура ОбновитьПраваЗависимыхДанных(ОбъектСсылка) Экспорт
	
КонецПроцедуры

Функция ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ) Экспорт 
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.УчастникиМероприятия") Тогда
		
		Мероприятие = Источник.Отбор.Мероприятие.Значение;
		Если ЗначениеЗаполнено(Мероприятие) Тогда
			МероприятиеОбъект = Мероприятие.ПолучитьОбъект();
			Если МероприятиеОбъект <> Неопределено Тогда // Проверка на удаление мероприятия
				ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(МероприятиеОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает элемент справочника ДелегированиеПрав
Процедура ПриЗаписиДелегированияПрав(Источник) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено")
		И Источник.ДополнительныеСвойства.ЗначениеИзменено = Истина Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьДелегирования(Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОбластиДелегированияПрав(Источник)
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено")
		И Источник.ДополнительныеСвойства.ЗначениеИзменено = Истина Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьОбластиДелегирования(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список имен объектов метаданных, чьи права зависят от прав других объектов
// при обновлении прав объекты с этими именами должны обрабатываться в последнюю очередь
Функция ПолучитьИменаОбъектовСЗависимымиДескрипторами() Экспорт
	
	ЗависимыеОбъекты = Новый Массив;
	ЗависимыеОбъекты.Добавить("Справочник.ВнутренниеДокументы");
	ЗависимыеОбъекты.Добавить("Справочник.ШаблоныВнутреннихДокументов");
	ЗависимыеОбъекты.Добавить("Справочник.Проекты");
	ЗависимыеОбъекты.Добавить("Справочник.Мероприятия");
	ЗависимыеОбъекты.Добавить("Справочник.ТемыОбсуждений");
	ЗависимыеОбъекты.Добавить("Справочник.СообщенияОбсуждений");
	ЗависимыеОбъекты.Добавить("Документ.ВходящееПисьмо");
	ЗависимыеОбъекты.Добавить("Документ.ИсходящееПисьмо");
	
	Возврат ЗависимыеОбъекты;
	
КонецФункции

// Возвращает Истина, если все из МассивПользователей имеют права на объект - Чтение
Функция ЕстьПраваНаЧтениеОбъектаУВсехПользователейМассива(ОбъектДоступа, МассивПользователей) Экспорт
	
	// Проверка на использование ограничения прав доступа
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		// Если права доступа не включены, то все разрешено
		Возврат Истина;
		
	КонецЕсли;	
	
	Если МассивПользователей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Если использование прав доступа включено, то выполняется получение прав доступа
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПоДескрипторамДоступа.Чтение
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаДляОбъектов.Дескриптор
		|ГДЕ
		|	ПраваПоДескрипторамДоступа.Пользователь В(&МассивПользователей)
		|	И ДескрипторыДоступаДляОбъектов.Объект = &ОбъектДоступа";

	Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа.Ссылка);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ЧислоПользователей = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ВыборкаДетальныеЗаписи.Чтение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЧислоПользователей = ЧислоПользователей + 1;
		
	КонецЦикла;

	Возврат (ЧислоПользователей = МассивПользователей.Количество());
	
КонецФункции

// Определяет активность правила делегирования прав на текущий момент времени с учетом
// срока действия.
//
Функция ПравилоДелегированияПравДействует(Объект) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Объект.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действует = Истина;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаДействия) И Объект.ДатаНачалаДействия > ТекущаяДата Тогда
		Действует = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) И ТекущаяДата > Объект.ДатаОкончанияДействия Тогда
		Действует = Ложь;
	КонецЕсли;
	
	Возврат Действует;
	
КонецФункции

// Определяет активность каждого правила делегирования на текущий момент времени с учетом
// срока действия.
//
Процедура ОбработкаПравилДелегированияПрав() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Делегирование прав'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Начата обработка правил делегирования прав'"));
		
	// Выборка недействующих правил с наступившим сроком действия и действующих с истекшим сроком действия.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка,
		|	ДелегированиеПрав.Кому,
		|	ДелегированиеПрав.ОтКого,
		|	ДелегированиеПрав.Действует,
		|	ДелегированиеПрав.ДатаНачалаДействия,
		|	ДелегированиеПрав.ДатаОкончанияДействия
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	НЕ ДелегированиеПрав.ПометкаУдаления
		|	И (
		|		(
		|			НЕ ДелегированиеПрав.Действует
		|			И (ДелегированиеПрав.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ИЛИ ДелегированиеПрав.ДатаНачалаДействия <= &ТекущаяДата)
		|			И (ДелегированиеПрав.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ИЛИ ДелегированиеПрав.ДатаОкончанияДействия >= &ТекущаяДата)
		|		)
		|		ИЛИ
		|		(
		|			ДелегированиеПрав.Действует
		|			И (
		|				ДелегированиеПрав.ДатаНачалаДействия > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ДелегированиеПрав.ДатаНачалаДействия > &ТекущаяДата
		|				ИЛИ ДелегированиеПрав.ДатаОкончанияДействия > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				И ДелегированиеПрав.ДатаОкончанияДействия < &ТекущаяДата
		|			)
		|		)
		|	)";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписейДляОбработки = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Элемент.Ссылка);
		Исключение
			// Объект уже заблокирован
			Продолжить;
		КонецПопытки;
		
		// Проверка: не поменялись ли данные?
		Если Элемент.Кому <> Выборка.Кому
			ИЛИ Элемент.ОтКого <> Выборка.ОтКого
			ИЛИ Элемент.Действует <> Выборка.Действует
			ИЛИ Элемент.ДатаНачалаДействия <> Выборка.ДатаНачалаДействия
			ИЛИ Элемент.ДатаОкончанияДействия <> Выборка.ДатаОкончанияДействия Тогда
			
			РазблокироватьДанныеДляРедактирования(Элемент.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Элемент.Записать();
		РазблокироватьДанныеДляРедактирования(Элемент.Ссылка);
		
		Элемент = Неопределено;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Делегирование прав'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
	 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена обработка правил делегирования прав. Обработано записей: %1.'"),
			КоличествоЗаписейДляОбработки
		));
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает Истина, если пользователю делегированы права доступа
// Параметры:
// Пользователь - пользователь, чьи права нужно проверить
// УчитыватьСрокДелегирования - Булево - если Истина, то проверять, что дата окончания делегирования еще не наступила
//
Функция ЭтоДелегат(Пользователь, УчитыватьСрокДелегирования = Истина) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	ДелегированиеПрав.Кому = &Пользователь
		|	И (ДелегированиеПрав.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НЕ &УчитыватьСрокДелегирования
		|			ИЛИ ДелегированиеПрав.ДатаОкончанияДействия >= &ТекущаяДата)");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УчитыватьСрокДелегирования", УчитыватьСрокДелегирования);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ЕстьДелегированныеПрава = Не Запрос.Выполнить().Пустой();
	
	Возврат ЕстьДелегированныеПрава;
	
КонецФункции

// Переопределяемая часть функции ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого
//
Процедура ДополнитьТипыПапокИСодержимого(Результат) Экспорт
	
	// Мероприятия
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Справочники.Мероприятия);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиМероприятий"), МассивМетаданныхСодержимого);
	
	// Письма
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Документы.ВходящееПисьмо);
	МассивМетаданныхСодержимого.Добавить(Метаданные.Документы.ИсходящееПисьмо);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиПисем"), МассивМетаданныхСодержимого);
	
	// Темы обсуждений
	МассивМетаданныхСодержимого = Новый Массив;
	МассивМетаданныхСодержимого.Добавить(Метаданные.Справочники.ТемыОбсуждений);
	Результат.Вставить(Тип("СправочникСсылка.ПапкиФорума"), МассивМетаданныхСодержимого);
	
КонецПроцедуры

// Переопределяемая часть метода
//
Процедура ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов) Экспорт
	
	// Обновление прав шаблонов, подчиненных комплексным процессам
	// и тем форума, созданных на основании задач
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	КомплексныйПроцесс.Ссылка В(&МассивПроцессов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = ЗадачаИсполнителя.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В(&МассивПроцессов)");
		
	Запрос.УстановитьПараметр("МассивПроцессов", МассивПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет структуру настроек, которые будут использоваться при получении прав объекта
//
// Параметры:
//	ДопНастройки - Структура - структура настроек
//  ТипОбъекта - Тип - тип объекта доступа
//  ОбъектДоступа - Ссылка - объект доступа
//  
Процедура ЗаполнитьДопНастройкиДляПолученияПравПоОбъекту(ДопНастройки, ТипОбъекта, ОбъектДоступа = Неопределено) Экспорт
	
	Если ТипОбъекта = Тип("СправочникСсылка.КатегорииДанных") И ЗначениеЗаполнено(ОбъектДоступа) Тогда
		
		// Исключение для персональных категорий
		ЭтоПерсональнаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДоступа, "Персональная");
		Если ЭтоПерсональнаяКатегория Тогда
			ДопНастройки.ДобавлятьДелегатов = Ложь;
			ДопНастройки.ДобавлятьРуководителей = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		
		ДопНастройки.ДобавлятьДелегатов = Ложь;
		ДопНастройки.ДобавлятьРуководителей = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ДополнитьОписанияТаблицСоСсылкамиНаКорреспондентов(ОписанияТаблиц) Экспорт
	
	ОписанияТаблиц.Удалить("Справочник.ВнутренниеДокументы");
	ОписанияТаблиц.Удалить("Справочник.ШаблоныВнутреннихДокументов");
	
	ОписанияТаблиц.Вставить("Справочник.ВнутренниеДокументы.Корреспонденты", "Корреспондент");
	ОписанияТаблиц.Вставить("Справочник.ШаблоныВнутреннихДокументов.Корреспонденты", "Корреспондент");
	
КонецПроцедуры

// Возвращает имена предопределенных областей делегирования,
//  в состав которых входит переданный идентификатор объекта метаданных
// 
// Параметры: 
// 	ИОМ - ссылка на справочник "Идентификаторы объектов метаданных"
// 
// Возвращаемое значение: массив имен предопределенных областей
// 
Функция ПолучитьОбластиДелегированияПоИОМ(ИдентификаторОМ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПрав.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|		ПО ОбластиДелегированияПрав.Ссылка = ОбластиДелегированияПравСостав.Ссылка
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &ИдентификаторОМ");
	
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	ОбластиДелегирования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");
	ОбластиДелегирования.Добавить("");
	
	Возврат ОбластиДелегирования;
	
КонецФункции
