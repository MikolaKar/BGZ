#Область РаботаСДатамиДоговора

Функция СоздатьТаблицуДляЗаписиДатыДоговоров(СсылкаЭтапДоговора, ВидДатыДоговора, Дата, Основание = Неопределено) Экспорт

	Если Основание = Неопределено Тогда
	    Основание = СсылкаЭтапДоговора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
		|	ЭтапыДоговоров.Владелец КАК Договор,
		|	ЭтапыДоговоров.Владелец.Корреспондент КАК Корреспондент,";
		
	Если Основание = Неопределено Тогда
	    Запрос.Текст = Запрос.Текст + "
		|	ЭтапыДоговоров.Ссылка КАК Основание,";
	Иначе
	    Запрос.Текст = Запрос.Текст + "
		|	ЗНАЧЕНИЕ(" + ОбщегоНазначения.ИмяТаблицыПоСсылке(Основание) + ".ПустаяСсылка) КАК Основание,";
	КонецЕсли; 	
	
	    Запрос.Текст = Запрос.Текст + "
		|	ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПустаяСсылка) КАК ВидДатыДоговора,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	ЭтапыДоговоров.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаЭтапДоговора);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат[0].ВидДатыДоговора = ВидДатыДоговора;
	Результат[0].Основание = Основание;
	Результат[0].Дата = Дата;
	Результат[0].Период = ТекущаяДата();
	
	Результат.Колонки.Добавить("Установил");
	//Результат.Колонки.Добавить("Установил", Тип("СправочникСсылка.Пользователи"));
	Результат[0].Установил = Пользователи.ТекущийПользователь();
	
	Возврат Результат;
	
 КонецФункции

Функция ЗаписатьДатуДоговора(Таблица, СтруктураОтбора, Отказ=Ложь) Экспорт
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
	
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
	    Для каждого ЭлементаОтбора Из СтруктураОтбора Цикл
			НаборЗаписей.Отбор[ЭлементаОтбора.Ключ].Установить(ЭлементаОтбора.Значение);
		КонецЦикла; 
	КонецЕсли; 
    
    Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
    	НаборЗаписей.Загрузить(Таблица);
    ИначеЕсли ТипЗнч(Таблица) = Тип("Структура") Тогда
        НоваяЗапись = НаборЗаписей.Добавить();
    	НаборЗаписей.Заполнить(Таблица);
    КонецЕсли; 
	
 	НаборЗаписей.Записать(Истина);
КонецФункции

Функция УдалитьДатуДоговора(Ссылка, Отказ=Ложь) Экспорт
    
    НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Основание.Установить(Ссылка);
    НаборЗаписей.Записать(Истина);
    
КонецФункции

// Записывает плановый срок
//
// Возвращаемое значение:
//   нет
//
Функция ЗаписатьПлановыйСрок(ЭтапДоговора, ПлановыйСрок, ПериодЗаписи, Основание) Экспорт
	ВидДатыДоговораПлановыйСрок = Справочники.мВидыДатДоговоров.ПлановыйСрок;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтапДоговора", ЭтапДоговора);
	СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДатыДоговораПлановыйСрок);
	СтруктураОтбора.Вставить("Основание", ЭтапДоговора);
	СтруктураОтбора.Вставить("Период", ПериодЗаписи);
	
	СтруктураДанных = Новый Структура(); 
	СтруктураДанных.Вставить("Период", ПериодЗаписи);
	СтруктураДанных.Вставить("Корреспондент", ЭтапДоговора.Владелец.Корреспондент);
	СтруктураДанных.Вставить("Договор", ЭтапДоговора.Владелец);
	СтруктураДанных.Вставить("ЭтапДоговора", ЭтапДоговора);
	СтруктураДанных.Вставить("ВидДатыДоговора", ВидДатыДоговораПлановыйСрок);
	СтруктураДанных.Вставить("Основание", Основание);
	СтруктураДанных.Вставить("Дата", ПлановыйСрок);
	СтруктураДанных.Вставить("Комментарий", "");
	СтруктураДанных.Вставить("Установил", Пользователи.ТекущийПользователь());
	
	мРаботаСДоговорами.ЗаписатьДатуДоговора(СтруктураДанных, СтруктураОтбора, Ложь);
КонецФункции // ()

// Записывает дату
// Параметры
//	Основание - источник записи
Процедура ЗаписатьДатуЭтапаДоговора(ЭтапДоговора, ВидДатыДоговора, УстанавливаемаяДата, ПериодЗаписи, Основание, Комментарий = "") Экспорт
	
	НаборЗаписей = РегистрыСведений.мДатыДоговоров.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
	НаборЗаписей.Отбор.ЭтапДоговора.Установить(ЭтапДоговора);
	НаборЗаписей.Отбор.ВидДатыДоговора.Установить(ВидДатыДоговора);
	НаборЗаписей.Отбор.Основание.Установить(Основание);
	
	НовыйНабор = НаборЗаписей.Добавить();
	НовыйНабор.Период = ПериодЗаписи;
	НовыйНабор.ЭтапДоговора = ЭтапДоговора;
	НовыйНабор.Основание = Основание;
	НовыйНабор.ВидДатыДоговора = ВидДатыДоговора;
	НовыйНабор.Дата = УстанавливаемаяДата;
 	НовыйНабор.Установил = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Записать();
КонецПроцедуры // ЗаписатьДатуЭтапаДоговора()

Функция ПрочитатьДатуЭтапаДоговора(ЭтапДоговора, ДатаСреза, ВидДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мДатыДоговоровСрезПоследних.ЭтапДоговора КАК ЭтапДоговора,
		|	МАКСИМУМ(мДатыДоговоровСрезПоследних.Период) КАК МаксДата,
		|	мДатыДоговоровСрезПоследних.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.мДатыДоговоров.СрезПоследних(
		|			&ДатаСреза,
		|			ВидДатыДоговора = &ВидДаты
		|				И ЭтапДоговора = &ЭтапДоговора) КАК мДатыДоговоровСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	мДатыДоговоровСрезПоследних.ЭтапДоговора,
		|	мДатыДоговоровСрезПоследних.Дата";
		
	Запрос.УстановитьПараметр("ВидДаты", ВидДаты);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	Иначе
		Возврат Дата(1, 1, 1);
	КонецЕсли;  	
КонецФункции // ПрочитатьДатуЭтапаДоговора()

Процедура ОбработатьмДатаНачалаДействияДокумента(Договор, мДатаНачалаДействияДокумента) Экспорт
	// Была изменена мДатаНачалаДействияДокумента
	// Если есть Этапы, плановый срок которых зависит от мДатаНачалаДействияДокумента, 
	//  то надо им его пересчитать
	НадоСчитатьПлановыйСрок = мРаботаСДоговорами.ЕстьУсловиеДляРасчетаПлановогоСрока(Договор, , ТекущаяДата(), "ДатаПодписания");	
	Если НадоСчитатьПлановыйСрок Тогда
		МассивЭтапов = ПолучитьЭтапыДоговораСУчетомДатыПодписания(Договор, ТекущаяДата());	
		ВидДаты = Справочники.мВидыДатДоговоров.ПлановыйСрок;
		
		Для каждого ЭтапДоговора Из МассивЭтапов Цикл
			ПлановыйСрок = мРаботаСДоговорами.РассчитатьПлановыйСрокВыполненияДоговора(ЭтапДоговора, , Ложь);
			Если ПлановыйСрок <> Неопределено Тогда
				ТабДляДаты = СоздатьТаблицуДляЗаписиДатыДоговоров(ЭтапДоговора, ВидДаты, ПлановыйСрок, Договор);
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЭтапДоговора", ЭтапДоговора);
				СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДаты);
				СтруктураОтбора.Вставить("Основание", Договор);
				
				мРаботаСДоговорами.ЗаписатьДатуДоговора(ТабДляДаты, СтруктураОтбора, Ложь);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

#Область РасчетПлановогоСрока

Функция РассчитатьПлановыеСрокиЭтапов(ЭтапыДляРасчета, ДатаСреза=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |   мЭтапыДоговоров.ВидДней,
        |   мЭтапыДоговоров.ДлительностьВыполненияРабот,
        |   мЭтапыДоговоров.ВидРабот,
        |   мЭтапыДоговоров.ЗапретИзмененияПлановогоСрока,
        |   мЭтапыДоговоров.Город,
        |   мЭтапыДоговоров.Срочность,
        |   мЭтапыДоговоров.ПорядокВыполненияСовместно,
        |   мЭтапыДоговоров.КарточкаОбъектаРабот,
        |   ВЫБОР
        |       КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
        |           ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(15, 2))
        |       ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
        |   КОНЕЦ КАК СметнаяСтоимость,
        |   мЭтапыДоговоров.ДатаПредоставленияРешения,
        |   мЭтапыДоговоров.Владелец.мДатаНачалаДействияДокумента КАК ДатаПодписания,
        |   мЭтапыДоговоров.НомерЭтапа - 1 КАК НомерПредыдущегоЭтапа
        |ПОМЕСТИТЬ Этапы
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |ГДЕ
        |   мЭтапыДоговоров.Ссылка В(&ЭтапыДляРасчета)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидРабот,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГороду,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбласти,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидДней,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГородуСовместно,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбластиСовместно,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ДниДополнительно,
        |   ПараметрыВидовРаботПоДоговорамСрезПоследних.ЗемлепользователейБольше5
        |ПОМЕСТИТЬ ПараметрыВидовРабот
        |ИЗ
        |   РегистрСведений.ПараметрыВидовРаботПоДоговорам.СрезПоследних(
        |           ,
        |           ВидРабот В
        |               (ВЫБРАТЬ
        |                   Этапы.ВидРабот
        |               ИЗ
        |                   Этапы КАК Этапы)) КАК ПараметрыВидовРаботПоДоговорамСрезПоследних
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(мКарточкиОбъектовРаботПараметрыОбъекта.Значение, 0) КАК КоличествоЗемлепользователей,
        |   Этапы.ЭтапДоговора
        |ПОМЕСТИТЬ Землепользователи
        |ИЗ
        |   Этапы КАК Этапы
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
        |       ПО Этапы.КарточкаОбъектаРабот = мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка
        |ГДЕ
        |   мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка В
        |           (ВЫБРАТЬ
        |               Этапы.КарточкаОбъектаРабот
        |           ИЗ
        |               Этапы КАК Этапы)
        |   И мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Параметрыобъектов.КоличествоЗемлепользователейВсего)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СУММА(ВЫБОР
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
        |               ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) / 10000
        |           КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
        |               ТОГДА 0
        |           ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0)
        |       КОНЕЦ) КАК Оплачено,
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |ПОМЕСТИТЬ Оплаты
        |ИЗ
        |   РегистрНакопления.РасчетыСПокупателями.Обороты(
        |           ,
        |           ,
        |           День,
        |           ЭтапДоговора В
        |               (ВЫБРАТЬ
        |                   Этапы.ЭтапДоговора
        |               ИЗ
        |                   Этапы КАК Этапы)) КАК РасчетыСПокупателямиОбороты
        |
        |СГРУППИРОВАТЬ ПО
        |   РасчетыСПокупателямиОбороты.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   мУсловияДоговоровСрезПоследних.ПроцентПредоплаты,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПодписания,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияДокументов,
        |   мУсловияДоговоровСрезПоследних.УчетДатыВозвратаДоговора,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоплаты,
        |   мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияРешения,
        |   мУсловияДоговоровСрезПоследних.ЭтапДоговора
        |ПОМЕСТИТЬ Условия
        |ИЗ
        |   РегистрСведений.мУсловияДоговоров.СрезПоследних(
        |           ,
        |           ЭтапДоговора В
        |               (ВЫБРАТЬ
        |                   Этапы.ЭтапДоговора
        |               ИЗ
        |                   Этапы КАК Этапы)) КАК мУсловияДоговоровСрезПоследних
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Этапы.ЭтапДоговора,
        |   Этапы.ВидДней,
        |   Этапы.ДлительностьВыполненияРабот,
        |   Этапы.Город,
        |   Этапы.Срочность,
        |   Этапы.ПорядокВыполненияСовместно,
        |   Этапы.СметнаяСтоимость,
        |   Этапы.ДатаПредоставленияРешения,
        |   Этапы.ДатаПодписания,
        |   Этапы.ВидРабот,
        |   ПараметрыВидовРабот.ДнейПоГороду,
        |   ПараметрыВидовРабот.ДнейПоОбласти,
        |   ПараметрыВидовРабот.ДнейПоГородуСовместно,
        |   ПараметрыВидовРабот.ДнейПоОбластиСовместно,
        |   ПараметрыВидовРабот.ДниДополнительно,
        |   ПараметрыВидовРабот.ЗемлепользователейБольше5,
        |   ЕСТЬNULL(Землепользователи.КоличествоЗемлепользователей, 0) КАК КоличествоЗемлепользователей,
        |   ЕСТЬNULL(Оплаты.Оплачено, 0) КАК Оплачено,
        |   ЕСТЬNULL(Условия.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
        |   Условия.УчетДатыПодписания,
        |   Условия.УчетДатыПредоплаты,
        |   Условия.УчетДатыПредоставленияДокументов,
        |   Условия.УчетДатыВозвратаДоговора,
        |   Условия.УчетДатыВыполненияПредыдущегоЭтапа,
        |   Условия.УчетДатыПредоставленияРешения
        |ИЗ
        |   Этапы КАК Этапы
        |       ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыВидовРабот КАК ПараметрыВидовРабот
        |       ПО Этапы.ВидРабот = ПараметрыВидовРабот.ВидРабот
        |       ЛЕВОЕ СОЕДИНЕНИЕ Землепользователи КАК Землепользователи
        |       ПО Этапы.ЭтапДоговора = Землепользователи.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
        |       ПО Этапы.ЭтапДоговора = Оплаты.ЭтапДоговора
        |       ЛЕВОЕ СОЕДИНЕНИЕ Условия КАК Условия
        |       ПО Этапы.ЭтапДоговора = Условия.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ДатыДоговоровСрезПоследних.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Дата,
        |   Этапы.ЭтапДоговора
        //|ПОМЕСТИТЬ ДатыПредЭтапов
        |ИЗ
        |   Этапы КАК Этапы
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мДатыДоговоров.СрезПоследних(&ДатаСреза, ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаВыполнения)) КАК ДатыДоговоровСрезПоследних
        |       ПО Этапы.НомерПредыдущегоЭтапа = ДатыДоговоровСрезПоследних.ЭтапДоговора.НомерЭтапа
        |           И Этапы.ЭтапДоговора.Владелец = ДатыДоговоровСрезПоследних.ЭтапДоговора.Владелец
        |;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|   мДатыДоговоровСрезПоследних.ВидДатыДоговора,
		|   мДатыДоговоровСрезПоследних.Дата,
		|   мДатыДоговоровСрезПоследних.ЭтапДоговора
		|ИЗ
		|   РегистрСведений.мДатыДоговоров.СрезПоследних(
		|           &ДатаСреза,
		|           ЭтапДоговора В
        |                   (ВЫБРАТЬ
        |                       Этапы.ЭтапДоговора
        |                   ИЗ
        |                       Этапы КАК Этапы)) КАК мДатыДоговоровСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|   Дата Убыв
		|;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДатыДоговоровСрезПоследних.ВидДатыДоговора,
        |   ДатыДоговоровСрезПоследних.Дата КАК Дата,
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора
        |ИЗ
        |   РегистрСведений.мДатыДоговоров.СрезПоследних(
        |           &ДатаСреза,
        |           ЭтапДоговора В
        |                   (ВЫБРАТЬ
        |                       Этапы.ЭтапДоговора
        |                   ИЗ
        |                       Этапы КАК Этапы)
        |               И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаПриостановленияРабот)) КАК ДатыДоговоровСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   Дата
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДатыДоговоровСрезПоследних.ВидДатыДоговора,
        |   ДатыДоговоровСрезПоследних.Дата КАК Дата,
        |   ДатыДоговоровСрезПоследних.ЭтапДоговора
        |ИЗ
        |   РегистрСведений.мДатыДоговоров.СрезПоследних(
        |           &ДатаСреза,
        |           ЭтапДоговора В
        |                   (ВЫБРАТЬ
        |                       Этапы.ЭтапДоговора
        |                   ИЗ
        |                       Этапы КАК Этапы)
        |               И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаВозобновленияРабот)) КАК ДатыДоговоровСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   Дата";
		
	ДатаСреза = ?(ДатаСреза = Неопределено, ТекущаяДата(), ДатаСреза);
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаСреза));
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016,7,2));
	Запрос.УстановитьПараметр("ЭтапыДляРасчета", ЭтапыДляРасчета);
	
	Результат = Запрос.ВыполнитьПакет();
    ТзЭтапы = Результат[5].Выгрузить();
    ТзДатыПредЭтапов = Результат[6].Выгрузить();
    ТзДаты = Результат[7].Выгрузить();
    ТзДатыСтоп = Результат[8].Выгрузить();
    ТзДатыПуск = Результат[9].Выгрузить();
	//Результат = Запрос.Выполнить();
    
    ТзРез = Новый ТаблицаЗначений;
    ТзРез.Колонки.Добавить("ЭтапДоговора");
    ТзРез.Колонки.Добавить("ПлановыйСрок");

    ВидДатыЗакрытия = Справочники.мВидыДатДоговоров.ДатаЗакрытия;
    ВидДатыПродления = Справочники.мВидыДатДоговоров.ДатаПродления;
    ВидДатыОплаты = Справочники.мВидыДатДоговоров.ДатаОплаты;
    ВидДатыПредоставленияДокументов = Справочники.мВидыДатДоговоров.ДатаПредоставленияДокументов;
    ВидДатыВозвратаДоговора = Справочники.мВидыДатДоговоров.ДатаВозвратаДоговора;

    ДопустимыйПроцентОтклонения = Константы.М_ДопустимыйПроцентОтклоненияПредоплаты.Получить();

    Для каждого Стр Из ТзЭтапы Цикл
        // Если нет длительности, то плановый нельзя посчитать
        Если Стр.ДлительностьВыполненияРабот = 0 Тогда
            //Если Трассировка Тогда
                //Сообщить("Плановый срок не определен, т.к. не задана длительность работ!");
            //КонецЕсли; 
            Продолжить;
        КонецЕсли; 
        
        // Проверка даты закрытия. Если она есть, то пересчитывать плановый срок нельзя!
        Отбор = Новый Структура("ЭтапДоговора, ВидДатыДоговора", Стр.ЭтапДоговора, ВидДатыЗакрытия); 
        ИскСтроки = ТзДаты.НайтиСтроки(Отбор);
        Если ИскСтроки.Количество() > 0 Тогда
            //Если Трассировка Тогда
            //    Сообщить("Расчета планового срока нет, т.к. есть дата закрытия договора ("+Формат(ИскСтроки[0].Дата, "ДФ=dd.MM.yy")+")!");
            //КонецЕсли; 
            Продолжить;
        КонецЕсли; 
        
        // Проверка даты продления. Если она есть, то пересчитывать плановый срок нельзя!
        Отбор = Новый Структура("ЭтапДоговора, ВидДатыДоговора", Стр.ЭтапДоговора, ВидДатыПродления); 
        ИскСтроки = ТзДаты.НайтиСтроки(Отбор);
        Если ИскСтроки.Количество() > 0 Тогда
            //Если Трассировка Тогда
            //    Сообщить("Расчета планового срока нет, т.к. есть дата продления договора ("+Формат(ИскСтроки[0].Дата, "ДФ=dd.MM.yy")+")!");
            //КонецЕсли; 
            Продолжить;
        КонецЕсли; 
   
        ПлановыйСрок = '00010101000000';
        МаксДата = '00010101000000';
        
        // Проверка условий 
        
        // Проверка % предоплаты
        Если Стр.ПроцентПредоплаты > 0 Тогда
            ПроцентПредоплаты = 0;
            Если Стр.СметнаяСтоимость > 0 Тогда
                ПроцентПредоплаты = Окр(Стр.Оплачено * 100 / Стр.СметнаяСтоимость, 2) + ДопустимыйПроцентОтклонения;
            ИначеЕсли Стр.Оплачено > 0 Тогда	
                ПроцентПредоплаты = 100;    
            КонецЕсли;
            
            Если ПроцентПредоплаты < Стр.ПроцентПредоплаты Тогда
                // условие не выполнено
                Продолжить;
                //Если Трассировка Тогда
                //    Сообщить("Плановый срок не определен, т.к. процент предоплаты = " + ПроцентПредоплаты + ", что меньше, чем по условию договора (" + Условия.ПроцентПредоплаты + ")!");
                //КонецЕсли; 
            КонецЕсли; 
        КонецЕсли; 
        
        // Проверка даты предоплаты
        Если Стр.УчетДатыПредоплаты Тогда
            Отбор = Новый Структура("ЭтапДоговора, ВидДатыДоговора", Стр.ЭтапДоговора, ВидДатыОплаты); 
            ИскСтроки = ТзДаты.НайтиСтроки(Отбор);
            Если ИскСтроки.Количество() = 0 Тогда
                //Если Трассировка Тогда
                //    Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДатыОплаты.Наименование + "!");
                //КонецЕсли; 
                Продолжить;
            КонецЕсли; 
            
            МаксДата = Макс(МаксДата, ИскСтроки[0].Дата); 
        КонецЕсли; 
        
       // Проверка  Даты Предоставления Решения
       Если Стр.УчетДатыПредоставленияРешения Тогда
           Если ЗначениеЗаполнено(Стр.ДатаПредоставленияРешения) Тогда
               //Если Трассировка Тогда
               //    Сообщить("Дата предоставления решения = " + Формат(Стр.ДатаПредоставленияРешения, "ДФ=dd.MM.yy"));
               //КонецЕсли; 
               МаксДата = Макс(МаксДата, Стр.ДатаПредоставленияРешения); 
           Иначе
               //Если Трассировка Тогда
               //    Сообщить("Плановый срок не определен, т.к. не найдена Дата предоставления решения!");
               //КонецЕсли; 
                Продолжить;
           КонецЕсли; 
       КонецЕсли; 
       
        // Проверка даты Подписания
       Если Стр.УчетДатыПодписания Тогда
           Если ЗначениеЗаполнено(Стр.ДатаПодписания) Тогда
               //Если Трассировка Тогда
               //    Сообщить("Дата подписания = " + Формат(Стр.ДатаПодписания, "ДФ=dd.MM.yy"));
               //КонецЕсли; 
               МаксДата = Макс(МаксДата, Стр.ДатаПодписания); 
           Иначе
               //Если Трассировка Тогда
               //    Сообщить("Плановый срок не определен, т.к. не найдена Дата предоставления решения!");
               //КонецЕсли; 
                Продолжить;
           КонецЕсли; 
       КонецЕсли; 
       
       // Проверка даты ПредоставленияДокументов
       Если Стр.УчетДатыПредоставленияДокументов Тогда
           Отбор = Новый Структура("ЭтапДоговора, ВидДатыДоговора", Стр.ЭтапДоговора, ВидДатыПредоставленияДокументов); 
           ИскСтроки = ТзДаты.НайтиСтроки(Отбор);
           Если ИскСтроки.Количество() = 0 Тогда
               //Если Трассировка Тогда
               //    Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДатыОплаты.Наименование + "!");
               //КонецЕсли; 
               Продолжить;
           Иначе    
               //Если Трассировка Тогда
               //    Сообщить("" + ВидДатыПредоставленияДокументов.Наименование+" = " + Формат(ИскДата, "ДФ=dd.MM.yy"));
               //КонецЕсли; 
           КонецЕсли; 
           МаксДата = Макс(МаксДата, ИскСтроки[0].Дата); 
       КонецЕсли; 
       
       // Проверка даты ВыполненияПредыдущегоЭтапа
       Если Стр.УчетДатыВыполненияПредыдущегоЭтапа Тогда
           Отбор = Новый Структура("ЭтапДоговора", Стр.ЭтапДоговора); 
           ИскСтроки = ТзДатыПредЭтапов.НайтиСтроки(Отбор);
           Если ИскСтроки.Количество() = 0 Тогда
               //Если Трассировка Тогда
               //    Сообщить("Плановый срок не определен, т.к. не найдена Дата выполнения предыдущего этапа!");
               //КонецЕсли; 
               Продолжить;
		   Иначе
			   Если Не ЗначениеЗаполнено(ИскСтроки[0].Дата) Тогда
				   //Если Трассировка Тогда
				   //    Сообщить("Плановый срок не определен, т.к. не найдена Дата выполнения предыдущего этапа!");
				   //КонецЕсли; 
				   Продолжить;
			   КонецЕсли; 
               //Если Трассировка Тогда
               //    Сообщить("Дата выполнения предыдущего этапа = " + Формат(ИскСтроки[0].Дата, "ДФ=dd.MM.yy") + "!");
               //КонецЕсли; 
           КонецЕсли; 
           МаксДата = Макс(МаксДата, ИскСтроки[0].Дата); 
       КонецЕсли; 
       
       // Проверка даты ВозвратаДоговора
       Если Стр.УчетДатыВозвратаДоговора Тогда
           Отбор = Новый Структура("ЭтапДоговора, ВидДатыДоговора", Стр.ЭтапДоговора, ВидДатыВозвратаДоговора); 
           ИскСтроки = ТзДаты.НайтиСтроки(Отбор);
           Если ИскСтроки.Количество() = 0 Тогда
               //Если Трассировка Тогда
               //    Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДатыВозвратаДоговора.Наименование + "!");
               //КонецЕсли; 
               Продолжить;
           Иначе    
               //Если Трассировка Тогда
               //    Сообщить("" + ВидДатыВозвратаДоговора.Наименование+" = " + Формат(ИскДата, "ДФ=dd.MM.yy"));
               //КонецЕсли; 
           КонецЕсли; 
           МаксДата = Макс(МаксДата, ИскСтроки[0].Дата); 
       КонецЕсли; 
       
       // получить количество дней приостановления работ
       ВидДнейРабочие = Стр.ВидДней = Перечисления.ВидыДней.Рабочие;
       СтруктураДней = Новый Структура("Количество, РабочиеДни", Стр.ДлительностьВыполненияРабот, ВидДнейРабочие);
	   
	   ДнейПриостановления = 0;
	   	   
	   Отбор = Новый Структура("ЭтапДоговора", Стр.ЭтапДоговора); 
	   ИскСтрокиДатыСтоп = ТзДатыСтоп.НайтиСтроки(Отбор);
	   ИскСтрокиДатыПуск = ТзДатыПуск.НайтиСтроки(Отбор);
	   
	   Если ИскСтрокиДатыСтоп.Количество() <> 0 или ИскСтрокиДатыПуск.Количество() <> 0 Тогда
	       ДнейПриостановления = мРаботаСДоговорами.ПолучитьКоличествоДнейПриостановленияРабот(
		   ИскСтрокиДатыСтоп, 
		   ИскСтрокиДатыПуск, 
		   СтруктураДней);
	   КонецЕсли;
	   
       Если ДнейПриостановления < 0 Тогда
           // Работы приостановлены - считать плановый срок нет смысла
           //Если Трассировка Тогда
           //    Сообщить("Плановый срок не определен, т.к. работы приостановлены!");
           //КонецЕсли; 
           Продолжить;
           
       ИначеЕсли ДнейПриостановления > 0 Тогда     
           //Если Трассировка Тогда
           //    Сообщить("Дней приостановления работ = "+ДнейПриостановления);
           //КонецЕсли; 
       КонецЕсли;
       
       // Расчет даты планового срока
       Если МаксДата <> '00010101000000' Тогда
           
           ВсегоДней = Стр.ДлительностьВыполненияРабот + ДнейПриостановления;
           
           Если ВидДнейРабочие Тогда
               Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный календарь"); 
               ПлановыйСрок = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДата, ВсегоДней);
           Иначе
               ПлановыйСрок = МаксДата + ВсегоДней * 3600 * 24;
           КонецЕсли;
           
           // Если плановый срок по календарю попадает на выходной - переносим его на следующий рабочий день
           Если ВидДнейРабочие Тогда
               Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный календарь"); 
               ПлановыйСрок = КалендарныеГрафики.БлижайшийРабочийДень(Календарь, ПлановыйСрок);
           КонецЕсли;
           
           //Если Трассировка Тогда
           //    Сообщить("Плановый срок = " + Формат(ПлановыйСрок, "ДФ=dd.MM.yy"));
           //КонецЕсли; 
           
       Иначе //Если Трассировка Тогда
           //Сообщить("Плановый срок не определен, т.к. нет даты - точки отсчета!");
           Продолжить;
       КонецЕсли; 
       
       НовСтр = ТзРез.Добавить();
       НовСтр.ЭтапДоговора = Стр.ЭтапДоговора;
       НовСтр.ПлановыйСрок = ПлановыйСрок;
       
   КонецЦикла; 
   
   Возврат ТзРез;	
КонецФункции // РассчитатьПлановыеСрокиЭтапов(ЭтапыДляРасчета)

// Рассчитывает плановый срок по этапу договора
//  Возвращает
//		Неопределено - Плановый срок запрещено редактировать
//		Дата - дата планового срока, может быть пустая
Функция РассчитатьПлановыйСрокВыполненияДоговора(СсылкаЭтапДоговора, ДатаСреза = Неопределено, Трассировка = Ложь, ПараметрыДляРасчета = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаЭтапДоговора) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	// Проверка запрета редактирования планового срока
	ЗапретИзмененияПлановогоСрока = СсылкаЭтапДоговора.ЗапретИзмененияПлановогоСрока;
	Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("ЗапретИзмененияПлановогоСрока") Тогда
		ЗапретИзмененияПлановогоСрока = ПараметрыДляРасчета.ЗапретИзмененияПлановогоСрока;
	КонецЕсли; 
	Если ЗапретИзмененияПлановогоСрока Тогда
		Если Трассировка Тогда
			Сообщить("Расчет планового срока " + СсылкаЭтапДоговора+" "
			+СсылкаЭтапДоговора.Владелец.РегистрационныйНомер+" от "+
			Формат(СсылкаЭтапДоговора.Владелец.ДатаРегистрации, "ДФ=dd.MM.yy")+" запрещен!");
		КонецЕсли; 
	
        Возврат Неопределено;
	КонецЕсли; 
	
    Результат = ЗапросДанныхДляРасчетаПлановогоСрока(СсылкаЭтапДоговора, ДатаСреза);
    
    ТабДни = Результат[0].Выгрузить();
    ТабДоп = Результат[5].Выгрузить();
    ТабУсловия = Результат[6].Выгрузить();
    ТабДаты = Результат[7].Выгрузить();
    ТабПредЭтапа = Результат[8].Выгрузить();
    ТабПриостановлений = Результат[9].Выгрузить();
    ТабВозобновлений = Результат[10].Выгрузить();
	//ТабДоп = Результат[3].Выгрузить();
	//ТабУсловия = Результат[4].Выгрузить();
	//ТабДаты = Результат[5].Выгрузить();
	//ТабПредЭтапа = Результат[6].Выгрузить();
	//ТабПриостановлений = Результат[7].Выгрузить();
	//ТабВозобновлений = Результат[8].Выгрузить();
    
    // Проверка даты закрытия. Если она есть, то пересчитывать плановый срок нельзя!
    ВидДаты = Справочники.мВидыДатДоговоров.ДатаЗакрытия;
    
    ОтменаТрассировки = Ложь;
    ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
    Если ИскДата <> Неопределено Тогда
        Если Трассировка Тогда
            Сообщить("Расчета планового срока нет, т.к. есть дата закрытия договора ("+Формат(ИскДата, "ДФ=dd.MM.yy")+")!");
        КонецЕсли; 
        Возврат Неопределено;
        //Возврат '00010101000000';
    КонецЕсли; 
    
    // Проверка даты продления. Если она есть, то пересчитывать плановый срок нельзя!
    ВидДаты = Справочники.мВидыДатДоговоров.ДатаПродления;
    
    ОтменаТрассировки = Ложь;
    ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
    Если ИскДата <> Неопределено Тогда
        Если Трассировка Тогда
            Сообщить("Расчета планового срока нет, т.к. есть дата продления договора ("+Формат(ИскДата, "ДФ=dd.MM.yy")+")!");
        КонецЕсли; 
        Возврат Неопределено;
        //Возврат '00010101000000';
    КонецЕсли; 
    
	Если Трассировка Тогда
		
		окно = new СообщениеПользователю ();
		окно.КлючДанных = СсылкаЭтапДоговора;
		окно.ПутьКДанным = "Объект";
		окно.Текст = "Расчет планового срока " + СсылкаЭтапДоговора+" "+СсылкаЭтапДоговора.Владелец.РегистрационныйНомер+" от "+Формат(СсылкаЭтапДоговора.Владелец.ДатаРегистрации, "ДФ=dd.MM.yy");
		окно.Сообщить();
		
        //Сообщить("Расчет планового срока " + СсылкаЭтапДоговора+" "+СсылкаЭтапДоговора.Владелец.РегистрационныйНомер+" от "+Формат(СсылкаЭтапДоговора.Владелец.ДатаРегистрации, "ДФ=dd.MM.yy"));
    КонецЕсли; 
	
	Условия = Неопределено;
	Если ТабУсловия.Количество() > 0 Тогда
		Условия = ТабУсловия[0];
	КонецЕсли; 
	
	// Если в параметрах есть условия, переключаемся на них
	Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("Условия") Тогда
		ПараметрыДляРасчета.Свойство("Условия", Условия);
	КонецЕсли; 
	
	Если Условия = Неопределено ТОгда
        Если Трассировка Тогда
            Сообщить("Плановый срок не определен, т.к. не заданы условия договора!");
        КонецЕсли; 
		Возврат '00010101000000';
	КонецЕсли;	
	
	Если ТабДни.Количество() > 0 ТОгда
		Дни = ТабДни[0];
	Иначе	
		// Если в параметрах нет Длительности
		Длительность = Неопределено;
		Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("Длительность") Тогда
			ПараметрыДляРасчета.Свойство("Длительность", Длительность);
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Длительность) Тогда                                                                                                                                                                                                                                                                                                                                                          
			Если Трассировка Тогда
				Сообщить("Плановый срок не определен, т.к. не задана длительность работ!");
			КонецЕсли; 
			Возврат '00010101000000';
		КонецЕсли; 
	КонецЕсли;	
	
	Если ТабДоп.Количество() > 0 ТОгда
    	ДопИнфа = ТабДоп[0];
	Иначе	
        Если Трассировка Тогда
            Сообщить("Плановый срок не определен, т.к. не удалось получить доп. информацию по этапу!");
        КонецЕсли; 
		Возврат '00010101000000';
	КонецЕсли;	
    
    ДатаВыполненияПредыдущегоЭтапа = '00010101000000';
    Если ТабПредЭтапа.Количество() > 0 Тогда
        ДатаВыполненияПредыдущегоЭтапа = ТабПредЭтапа[0].ДатаВыполненияПредыдущегоЭтапа;
    КонецЕсли; 
    
	ПлановыйСрок = '00010101000000';
 	МаксДата = '00010101000000';
    
    // Проверка условий 
    
    // Проверка % предоплаты
	Если Условия.ПроцентПредоплаты > 0 Тогда
		ПроцентПредоплаты = 0;
		
		СметнаяСтоимость = ДопИнфа.СметнаяСтоимость;
		Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("СметнаяСтоимость") Тогда
			ПараметрыДляРасчета.Свойство("СметнаяСтоимость", СметнаяСтоимость);
		КонецЕсли; 
		
		Если СметнаяСтоимость > 0 Тогда
			ДопустимыйПроцентОтклонения = Константы.М_ДопустимыйПроцентОтклоненияПредоплаты.Получить();
			ПроцентПредоплаты = Окр(ТабДоп.Итог("Оплачено") * 100 / СметнаяСтоимость, 2) + ДопустимыйПроцентОтклонения;
		ИначеЕсли ТабДоп.Итог("Оплачено") > 0 Тогда
			ПроцентПредоплаты = 100;
		КонецЕсли;
        
        Если ПроцентПредоплаты < Условия.ПроцентПредоплаты Тогда
			Если Трассировка Тогда
				// здесь?
				// 
                Сообщить("Плановый срок не определен, т.к. процент предоплаты = " + ПроцентПредоплаты + ", что меньше, чем по условию договора (" + Условия.ПроцентПредоплаты + ")!");
            КонецЕсли; 
            // условие не выполнено
            Возврат '00010101000000';
        КонецЕсли; 
    КонецЕсли; 
    
    // Проверка даты предоплаты
    Если Условия.УчетДатыПредоплаты Тогда
        ВидДаты = Справочники.мВидыДатДоговоров.ДатаОплаты;
        
        ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
        Если ИскДата = Неопределено Тогда
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДаты.Наименование + "!");
            КонецЕсли; 
            Возврат '00010101000000';
        Иначе    
            Если Трассировка Тогда
                Сообщить("" + ВидДаты.Наименование+" = " + Формат(ИскДата, "ДФ=dd.MM.yy"));
            КонецЕсли; 
       КонецЕсли; 
        
		МаксДата = Макс(МаксДата, ИскДата); 
    КонецЕсли;
    
    // Проверка  Даты Предоставления Решения
    Если Условия.УчетДатыПредоставленияРешения Тогда
        
		ДатаПредоставленияРешения = ДопИнфа.ДатаПредоставленияРешения;
        
        // Параметры могут переопределить значение
		Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("ДатаПредоставленияРешения") Тогда
			ПараметрыДляРасчета.Свойство("ДатаПредоставленияРешения", ДатаПредоставленияРешения);
		КонецЕсли; 
		
		//// если есть параметры для расчета, то берем из них
		//Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("ДатаПредоставленияРешения") Тогда
		//	ПараметрыДляРасчета.Свойство("ДатаПредоставленияРешения", ДатаПредоставленияРешения)
		//КонецЕсли; 
		
        Если ЗначениеЗаполнено(ДатаПредоставленияРешения) Тогда
            Если Трассировка Тогда
                Сообщить("Дата предоставления решения = " + Формат(ДатаПредоставленияРешения, "ДФ=dd.MM.yy"));
            КонецЕсли; 
            МаксДата = Макс(МаксДата, ДатаПредоставленияРешения); 
        Иначе
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена Дата предоставления решения!");
            КонецЕсли; 
            Возврат '00010101000000';
        КонецЕсли; 
    КонецЕсли;
    
    // Проверка даты Подписания
    Если Условия.УчетДатыПодписания Тогда
        Если ЗначениеЗаполнено(ДопИнфа.ДатаПодписания) Тогда
            Если Трассировка Тогда
                Сообщить("Дата подписания = " + Формат(ДопИнфа.ДатаПодписания, "ДФ=dd.MM.yy"));
            КонецЕсли; 
            МаксДата = Макс(МаксДата, ДопИнфа.ДатаПодписания); 
        Иначе
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена Дата подписания!");
            КонецЕсли; 
            Возврат '00010101000000';
        КонецЕсли; 
        //ВидДаты = Справочники.мВидыДатДоговоров.ДатаПодписанияЗаказчиком;
        //
        //ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
        //Если ИскДата = Неопределено Тогда
        //    Возврат '00010101000000';
        //КонецЕсли; 
        //
        //МаксДата = Макс(МаксДата, ИскДата); 
    КонецЕсли;
    
    // Проверка даты ПредоставленияДокументов
    Если Условия.УчетДатыПредоставленияДокументов Тогда
        ВидДаты = Справочники.мВидыДатДоговоров.ДатаПредоставленияДокументов;
        
        ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
        Если ИскДата = Неопределено Тогда
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДаты.Наименование + "!");
            КонецЕсли; 
            Возврат '00010101000000';
         Иначе    
            Если Трассировка Тогда
                Сообщить("" + ВидДаты.Наименование+" = " + Формат(ИскДата, "ДФ=dd.MM.yy"));
            КонецЕсли; 
        КонецЕсли; 
        
		МаксДата = Макс(МаксДата, ИскДата); 
    КонецЕсли;
    
    // Проверка даты ВыполненияПредыдущегоЭтапа
    Если Условия.УчетДатыВыполненияПредыдущегоЭтапа Тогда
        
        Если НЕ ЗначениеЗаполнено(ДатаВыполненияПредыдущегоЭтапа) Тогда
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена Дата выполнения предыдущего этапа!");
            КонецЕсли; 
            Возврат '00010101000000';
        КонецЕсли; 
        
        Если Трассировка Тогда
            Сообщить("Дата выполнения предыдущего этапа = " + Формат(ДатаВыполненияПредыдущегоЭтапа, "ДФ=dd.MM.yy") + "!");
        КонецЕсли; 
        
		МаксДата = Макс(МаксДата, ДатаВыполненияПредыдущегоЭтапа); 
    КонецЕсли;
    
    // Проверка даты ВозвратаДоговора
    Если Условия.УчетДатыВозвратаДоговора Тогда
        ВидДаты = Справочники.мВидыДатДоговоров.ДатаВозвратаДоговора;
        
        ИскДата = ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты);
        Если ИскДата = Неопределено Тогда
            Если Трассировка Тогда
                Сообщить("Плановый срок не определен, т.к. не найдена " + ВидДаты.Наименование + "!");
            КонецЕсли; 
            Возврат '00010101000000';
         Иначе    
            Если Трассировка Тогда
                Сообщить("" + ВидДаты.Наименование+" = " + Формат(ИскДата, "ДФ=dd.MM.yy"));
            КонецЕсли; 
        КонецЕсли; 
        
		МаксДата = Макс(МаксДата, ИскДата); 
    КонецЕсли;
    
    // получить количество дней приостановления работ
    СтруктураДней = Новый Структура("Количество, РабочиеДни", 0, Ложь);
    
	ВидДней = Неопределено;
	
	Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("ВидДней") Тогда
		ПараметрыДляРасчета.Свойство("ВидДней", ВидДней);
		Если ВидДней = Перечисления.ВидыДней.Рабочие Тогда
			СтруктураДней.Вставить("РабочиеДни", Истина);
		КонецЕсли;
	Иначе
		Если ТабДни.Количество() > 0 ТОгда
			Если Дни.ВидДней = Перечисления.ВидыДней.Рабочие Тогда
				СтруктураДней.Вставить("РабочиеДни", Истина);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	//Иначе	
	//	ВидДней = Неопределено;
	//	Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("ВидДней") Тогда
	//		ПараметрыДляРасчета.Свойство("ВидДней", ВидДней);
	//		Если ВидДней = Перечисления.ВидыДней.Рабочие Тогда
	//			СтруктураДней.Вставить("РабочиеДни", Истина);
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли; 

    ДнейПриостановления = ПолучитьКоличествоДнейПриостановленияРабот(ТабПриостановлений, ТабВозобновлений, СтруктураДней);
    
    Если ДнейПриостановления < 0 Тогда
        // Работы приостановлены - считать плановый срок нет смысла
        Если Трассировка Тогда
            Сообщить("Плановый срок не определен, т.к. работы приостановлены!");
        КонецЕсли; 
        //СтруктураДней.Вставить("Количество", ДнейПриостановления);
        Возврат '00010101000000';
        
    ИначеЕсли ДнейПриостановления > 0 Тогда     
        Если Трассировка Тогда
            Сообщить("Дней приостановления работ = "+ДнейПриостановления);
        КонецЕсли; 
    КонецЕсли;
    
    // Расчет длительности работ
	Длительность = Неопределено;
	ВидДней = Неопределено;
	ВидДнейРабочие = Ложь;
	
	Если ПараметрыДляРасчета <> Неопределено и ПараметрыДляРасчета.Свойство("Длительность") Тогда
		// если есть параметры для расчета, то берем из них
		ВидДней = "";
		ПараметрыДляРасчета.Свойство("Длительность", Длительность);
		ПараметрыДляРасчета.Свойство("ВидДней", ВидДней);
		Если ВидДней = Перечисления.ВидыДней.Рабочие Тогда
			ВидДнейРабочие = Истина;
		Иначе
			ВидДнейРабочие = Ложь;
		КонецЕсли;
	Иначе
		// из результатов запроса 
		//СтруктураДней = Новый Структура("Количество, РабочиеДни", 0, Ложь);
		
		ПараметрыЗапроса = Новый Структура("ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей, ПорядокВыполненияСовместно", 
			СсылкаЭтапДоговора.ВидРабот, 
			ДатаСреза,
			СсылкаЭтапДоговора.Город, 
			мРаботаСДоговорами.ПолучитьКоличествоЗемлепользователейЭтапа(СсылкаЭтапДоговора), 
			СсылкаЭтапДоговора.ПорядокВыполненияСовместно);
		
		//СтруктураДней = ПолучитьДлительностьРабот(Дни, ДопИнфа, Трассировка);
		СтруктураДней = ПолучитьДлительностьРабот(ПараметрыЗапроса);
		
		Длительность = СтруктураДней.Количество;
		ВидДнейРабочие = СтруктураДней.РабочиеДни;
		
	КонецЕсли; 
    
    Если Длительность < 0 Тогда
        // Работы приостановлены - считать плановый срок нет смысла
        Возврат '00010101000000';
        
    ИначеЕсли Длительность = 0 ИЛИ Длительность = Неопределено Тогда 
        // Длительность работ не задана
        //ПлановыйСрок = МаксДата;
		Если Трассировка Тогда
			// Здесь
			окно = new СообщениеПользователю ();
			окно.КлючДанных = СсылкаЭтапДоговора;
			окно.ПутьКДанным = "Объект";
			окно.Текст = "Плановый срок не определен, т.к. не рассчитана длительность выполнения работ!";
			окно.Сообщить();
			
			//Сообщить("Плановый срок не определен, т.к. не рассчитана длительность выполнения работ!");
        КонецЕсли; 
        Возврат '00010101000000';
    КонецЕсли; 
    
    // Расчет даты планового срока
	Если МаксДата <> '00010101000000' Тогда
        
        ВсегоДней = Длительность + ДнейПриостановления;
			
        Если ВидДнейРабочие Тогда
            Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный календарь"); 
            ПлановыйСрок = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДата, ВсегоДней);
        Иначе
            ПлановыйСрок = МаксДата + ВсегоДней * 3600 * 24;
		КонецЕсли;
		
		//// Если плановый срок по календарю попадает на выходной - переносим его на следующий рабочий день
		//Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный календарь"); 
		//ПлановыйСрок = КалендарныеГрафики.БлижайшийРабочийДень(Календарь, ПлановыйСрок);
		
        Если Трассировка Тогда
            Сообщить("Плановый срок = " + Формат(ПлановыйСрок, "ДФ=dd.MM.yy"));
        КонецЕсли; 
		
	ИначеЕсли Трассировка Тогда
		Сообщить("Плановый срок не определен, т.к. нет даты - точки отсчета!")
	КонецЕсли; 

	Возврат ПлановыйСрок;
КонецФункции

Функция ПолучитьКоличествоЗемлепользователейЭтапа(ЭтапДоговора) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(мКарточкиОбъектовРаботПараметрыОбъекта.Значение, 0) КАК КоличествоЗемлепользователей,
		|	мЭтапыДоговоров.Ссылка
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
		|		ПО мЭтапыДоговоров.КарточкаОбъектаРабот = мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка
		|ГДЕ
		|	мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Параметрыобъектов.КоличествоЗемлепользователейВсего)
		|	И мЭтапыДоговоров.Ссылка = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоЗемлепользователей;
	КонецЕсли;
	
	Возврат 0;
КонецФункции // ПолучитьКоличествоЗемлепользователей()

Функция ПолучитьКоличествоЗемлепользователейИзКарточки(Карточка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(мКарточкиОбъектовРаботПараметрыОбъекта.Значение, 0) КАК КоличествоЗемлепользователей
		|ИЗ
		|	Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
		|ГДЕ
		|	мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Параметрыобъектов.КоличествоЗемлепользователейВсего)
		|	И мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка = &Карточка";
	
	Запрос.УстановитьПараметр("Карточка", Карточка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.КоличествоЗемлепользователей;
	КонецЕсли;
	
	Возврат 0;
КонецФункции // ПолучитьКоличествоЗемлепользователей()

// Возвращает Дату договора либо Неопределено, если ее нет
Функция ПолучитьДатуДоговораДляРасчетаПлановогоСрока(ВидДаты, ТабДаты)
    
    СтрДаты = ТабДаты.Найти(ВидДаты, "ВидДатыДоговора");
    
    Если СтрДаты = Неопределено Тогда
        // Дата не найдена
        Возврат Неопределено;
    Иначе    
        Возврат СтрДаты.Дата;
    КонецЕсли; 
КонецФункции

// Возвращает пакет таблиц для расчета планового срока либо длительности работ
//   Таб[0] - Количество дней выполнения работ
//   Таб[3] - Доп информация из этапа и договора
//   Таб[4] - Условия договора
//   Таб[5] - Даты этапа и договора
//   Таб[6] - Даты пред этапа
//   Таб[9] - Даты приостановления работ
//   Таб[10] - Даты возобновления работ
//  Параметр ЗапрашиваемыеДанные = "ПлановыйСрок" либо "ДлительностьРабот"
Функция ЗапросДанныхДляРасчетаПлановогоСрока(СсылкаЭтапДоговора, ДатаСреза, ЗапрашиваемыеДанные = "ПлановыйСрок", ВидРабот = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГороду,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбласти,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидДней,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГородуСовместно,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбластиСовместно,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДниДополнительно,
	|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ЗемлепользователейБольше5
	|ИЗ
	|	РегистрСведений.ПараметрыВидовРаботПоДоговорам.СрезПоследних(&ДатаСреза, ВидРабот = &ВидРабот) КАК ПараметрыВидовРаботПоДоговорамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мЭтапыДоговоров.Город,
	|	мЭтапыДоговоров.Срочность,
	|	мЭтапыДоговоров.ДлительностьВыполненияРабот,
	|	мЭтапыДоговоров.ВидДней,
	|	мЭтапыДоговоров.ПорядокВыполненияСовместно,
	|	мЭтапыДоговоров.ДатаПредоставленияРешения,
	|	мЭтапыДоговоров.КарточкаОбъектаРабот,
	|	мЭтапыДоговоров.Ссылка
	|ПОМЕСТИТЬ ТекущийЭтап
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|ГДЕ
	|	мЭтапыДоговоров.Ссылка = &ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(мКарточкиОбъектовРаботПараметрыОбъекта.Значение, 0) КАК КоличествоЗемлепользователей,
	|	мЭтапыДоговоров.Ссылка
	|ПОМЕСТИТЬ Землепользователи
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мКарточкиОбъектовРабот.ПараметрыОбъекта КАК мКарточкиОбъектовРаботПараметрыОбъекта
	|		ПО мЭтапыДоговоров.КарточкаОбъектаРабот = мКарточкиОбъектовРаботПараметрыОбъекта.Ссылка
	|ГДЕ
	|	мКарточкиОбъектовРаботПараметрыОбъекта.ПараметрОбъекта = ЗНАЧЕНИЕ(ПланВидовХарактеристик.Параметрыобъектов.КоличествоЗемлепользователейВсего)
	|	И мЭтапыДоговоров.Ссылка = &ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
	|				ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) / 10000
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0)
	|		КОНЕЦ) КАК Оплачено,
	|	РасчетыСПокупателямиОбороты.ЭтапДоговора
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(, , Регистратор, ЭтапДоговора = &ЭтапДоговора) КАК РасчетыСПокупателямиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОбороты.ЭтапДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мСметнаяСтоимостьСрезПоследних.Сумма КАК СметнаяСтоимость,
	|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора КАК ЭтапДоговора
	|ПОМЕСТИТЬ Стоимости
	|ИЗ
	|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(&ДатаСреза, ЭтапДоговора = &ЭтапДоговора) КАК мСметнаяСтоимостьСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийЭтап.Город,
	|	ТекущийЭтап.Срочность,
	|	ТекущийЭтап.ДлительностьВыполненияРабот,
	|	ТекущийЭтап.ВидДней,
	|	ТекущийЭтап.ПорядокВыполненияСовместно,
	|	ТекущийЭтап.ДатаПредоставленияРешения,
	|	ТекущийЭтап.Ссылка.Владелец.мДатаНачалаДействияДокумента КАК ДатаПодписания,
	|	ЕСТЬNULL(Землепользователи.КоличествоЗемлепользователей, 0) КАК КоличествоЗемлепользователей,
	|	ЕСТЬNULL(Оплаты.Оплачено, 0) КАК Оплачено,
	|	ЕСТЬNULL(Стоимости.СметнаяСтоимость, 0) КАК СметнаяСтоимость
	|ИЗ
	|	ТекущийЭтап КАК ТекущийЭтап
	|		ЛЕВОЕ СОЕДИНЕНИЕ Землепользователи КАК Землепользователи
	|		ПО ТекущийЭтап.Ссылка = Землепользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
	|		ПО ТекущийЭтап.Ссылка = Оплаты.ЭтапДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Стоимости КАК Стоимости
	|		ПО ТекущийЭтап.Ссылка = Стоимости.ЭтапДоговора
	|ГДЕ
	|	ТекущийЭтап.Ссылка = &ЭтапДоговора";
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ТекущийЭтап.Город,
	//|	ТекущийЭтап.Срочность,
	//|	ТекущийЭтап.ДлительностьВыполненияРабот,
	//|	ТекущийЭтап.ВидДней,
	//|	ТекущийЭтап.ПорядокВыполненияСовместно,
	//|	ТекущийЭтап.ДатаПредоставленияРешения,
	//|	ТекущийЭтап.Ссылка.Владелец.мДатаНачалаДействияДокумента,
	//|	ЕСТЬNULL(Землепользователи.КоличествоЗемлепользователей, 0),
	//|	Стоимости.СметнаяСтоимость,
	//|	Оплаты.Оплачено";
	
	Если ЗапрашиваемыеДанные = "ПлановыйСрок" Тогда
		Запрос.Текст = Запрос.Текст +"       
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|   мУсловияДоговоровСрезПоследних.Период КАК Период,
		|   ЕСТЬNULL(мУсловияДоговоровСрезПоследних.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
		|   мУсловияДоговоровСрезПоследних.УчетДатыПодписания,
		|   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияДокументов,
		|   мУсловияДоговоровСрезПоследних.УчетДатыВозвратаДоговора,
		|   мУсловияДоговоровСрезПоследних.УчетДатыПредоплаты,
		|   мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа,
		|   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияРешения
		|ИЗ
		|   РегистрСведений.мУсловияДоговоров.СрезПоследних(&ДатаСреза, ЭтапДоговора = &ЭтапДоговора) КАК мУсловияДоговоровСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|   Период Убыв
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|   мДатыДоговоровСрезПоследних.ВидДатыДоговора,
		|   мДатыДоговоровСрезПоследних.Дата,
		|   мДатыДоговоровСрезПоследних.ЭтапДоговора
		|ИЗ
		|   РегистрСведений.мДатыДоговоров.СрезПоследних(
		|           &ДатаСреза,
		|           ЭтапДоговора = &ЭтапДоговора
		|               И ВидДатыДоговора В
		|                   (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|                       мВидыДатДоговоров.Ссылка
		|                   ИЗ
		|                       Справочник.мВидыДатДоговоров КАК мВидыДатДоговоров
		|                   ГДЕ
		|                       мВидыДатДоговоров.Предопределенный
		|                       И НЕ мВидыДатДоговоров.ПометкаУдаления)) КАК мДатыДоговоровСрезПоследних
		|ГДЕ
		|   мДатыДоговоровСрезПоследних.ЭтапДоговора = &ЭтапДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|   Дата Убыв
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ЕСТЬNULL(ДатыДоговоровСрезПоследних.Дата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыполненияПредыдущегоЭтапа
		|ИЗ
		|   Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мДатыДоговоров.СрезПоследних(
		|               &ДатаСреза,
		//|               ЭтапДоговора = &ЭтапДоговора И 
		|                   ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаВыполнения)) КАК ДатыДоговоровСрезПоследних
		|       ПО (ДатыДоговоровСрезПоследних.ЭтапДоговора = ЭтапыДоговоров.Ссылка)
		|ГДЕ
		|   ЭтапыДоговоров.НомерЭтапа = &НомерЭтапа
		|   И ЭтапыДоговоров.Владелец = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ДатыДоговоровСрезПоследних.ВидДатыДоговора,
		|   ДатыДоговоровСрезПоследних.Дата КАК Дата
		|ИЗ
		|   РегистрСведений.мДатыДоговоров.СрезПоследних(
		|           &ДатаСреза,
		|           ЭтапДоговора = &ЭтапДоговора
		|               И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаПриостановленияРабот)) КАК ДатыДоговоровСрезПоследних
		|ГДЕ
		|   ДатыДоговоровСрезПоследних.ЭтапДоговора = &ЭтапДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|   Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ДатыДоговоровСрезПоследних.ВидДатыДоговора,
		|   ДатыДоговоровСрезПоследних.Дата КАК Дата
		|ИЗ
		|   РегистрСведений.мДатыДоговоров.СрезПоследних(
		|           &ДатаСреза,
		|           ЭтапДоговора = &ЭтапДоговора
		|               И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ДатаВозобновленияРабот)) КАК ДатыДоговоровСрезПоследних
		|ГДЕ
		|   ДатыДоговоровСрезПоследних.ЭтапДоговора = &ЭтапДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|   Дата";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЭтапДоговора", СсылкаЭтапДоговора);
	Запрос.УстановитьПараметр("Договор", СсылкаЭтапДоговора.Владелец);
	Запрос.УстановитьПараметр("ВидРабот", ?(ВидРабот = Неопределено, СсылкаЭтапДоговора.ВидРабот, ВидРабот));
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = Неопределено, ТекущаяДатаСеанса(), ДатаСреза));
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	Если ЗапрашиваемыеДанные = "ПлановыйСрок" Тогда
		Запрос.УстановитьПараметр("НомерЭтапа", СсылкаЭтапДоговора.НомерЭтапа - 1); // Номер предыдущего этапа
	КонецЕсли; 
	
	Результат = Запрос.ВыполнитьПакет();
	Возврат Результат;
КонецФункции

// 	ПараметрыЗапроса = Новый Структура("ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей, ПорядокВыполненияСовместно", 
// Возврат СтруктураДней = Новый Структура("Количество, РабочиеДни", 0, Ложь)
Функция ПолучитьДлительностьРабот(ПараметрыЗапроса) Экспорт
	//Перем ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей, ПорядокВыполненияСовместно;
	Перем ВидРабот, ДатаСреза, Город, КоличествоЗемлепользователей;
	
	СтруктураДней = Новый Структура("Количество, РабочиеДни", 0, Ложь);
	
	Если ТипЗнч(ПараметрыЗапроса) <> Тип("Структура") Тогда
		Возврат СтруктураДней;
	КонецЕсли; 
	
	
	ПараметрыЗапроса.Свойство("ВидРабот", ВидРабот);
	Если ВидРабот = Неопределено Тогда
		Возврат СтруктураДней;
	КонецЕсли; 
	ПараметрыЗапроса.Свойство("ДатаСреза", ДатаСреза);
	ПараметрыЗапроса.Свойство("Город", Город);
	
	КоличествоЗемлепользователей = 1;
	Если ПараметрыЗапроса.Свойство("КоличествоЗемлепользователей") Тогда
		ПараметрыЗапроса.Свойство("КоличествоЗемлепользователей", КоличествоЗемлепользователей);
	КонецЕсли; 
	
	//ПорядокВыполненияСовместно = Ложь;
	//Если ПараметрыЗапроса.Свойство("ПорядокВыполненияСовместно") Тогда
	//	ПараметрыЗапроса.Свойство("ПорядокВыполненияСовместно", ПорядокВыполненияСовместно);
	//КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидРабот,
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГороду,
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбласти,
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидДней,
		//|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоГородуСовместно,
		//|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДнейПоОбластиСовместно,
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ДниДополнительно,
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ЗемлепользователейБольше5
		|ИЗ
		|	РегистрСведений.ПараметрыВидовРаботПоДоговорам.СрезПоследних(&ДатаСреза, ВидРабот = &ВидРабот) КАК ПараметрыВидовРаботПоДоговорамСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СтруктураДней;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ВидДней = Перечисления.ВидыДней.Рабочие Тогда
			СтруктураДней.Вставить("РабочиеДни", Истина);
		КонецЕсли;
		
		РаботыВГороде = мРаботаСДоговорами.ЭтоГород(Город);

		Дней = 0;
		
		// Основные дни
		//Если РаботыВГороде И ПорядокВыполненияСовместно Тогда
		//	Дней = Выборка.ДнейПоГородуСовместно;
		//	
		//ИначеЕсли РаботыВГороде И НЕ ПорядокВыполненияСовместно Тогда
		//	Дней = Выборка.ДнейПоГороду;
		//	
		//ИначеЕсли Не РаботыВГороде И ПорядокВыполненияСовместно Тогда
		//	Дней = Выборка.ДнейПоОбластиСовместно;
		//	
		//ИначеЕсли НЕ РаботыВГороде И НЕ ПорядокВыполненияСовместно Тогда
		//	Дней = Выборка.ДнейПоОбласти;
		//КонецЕсли; 
		
		Если РаботыВГороде Тогда
			Дней = Выборка.ДнейПоГороду;
		Иначе
			Дней = Выборка.ДнейПоОбласти;
		КонецЕсли;	
		
		// дополнительные дни за землепользователей только для области
		Если Выборка.ЗемлепользователейБольше5 Тогда
			Если КоличествоЗемлепользователей > 5 и Не РаботыВГороде Тогда
				Дней = Дней + Выборка.ДниДополнительно;
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураДней.Вставить("Количество", Дней);    
	КонецЕсли;
    Возврат СтруктураДней;
КонецФункции
 
// Возвращает 
// 0 - количества дней приостановления нет
// -1 - работы приостановлены
// > 0 - количество дней приостановления
Функция ПолучитьКоличествоДнейПриостановленияРабот(ДниПри, ДниВоз, СтруктураДней) Экспорт

	ДниПКоличество = ДниПри.Количество();
	ДниВКоличество = ДниВоз.Количество();
	
    Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный календарь"); 
    
    Если ДниПКоличество = 0 Тогда
		// Дней приостановления нет
		Возврат 0;
	КонецЕсли; 
	
	КоличествоПериодов = Макс(ДниПКоличество, ДниВКоличество); 
	
	Дней = 0;
	
	Для х = 1 По КоличествоПериодов Цикл
		Если х <= ДниПКоличество И х <= ДниВКоличество Тогда
			// есть пара дат - можно считать дни приостановления работ
			Если СтруктураДней.РабочиеДни Тогда
				// рабочие дни по графику
				Дней = Дней + КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Календарь, ДниПри[х-1].Дата, ДниВоз[х-1].Дата);		
			Иначе
				// календарные дни
				Дней = Дней + (ДниВоз[х-1].Дата - ДниПри[х-1].Дата)/3600/24;
			КонецЕсли; 
			
		ИначеЕсли х <= ДниПКоличество И х > ДниВКоличество Тогда	
			// Нет даты возобновления работ - работы приостановлены	
			Дней = -1;
			
		ИначеЕсли х > ДниПКоличество И х <= ДниВКоличество Тогда	
			// Ошибка - не было даты приостановления работ
            //Сообщить("Ошибка с датой возобновления работ по договору: " + СсылкаЭтапДоговора.Владелец.Наименование +
            //" этап: " + СсылкаЭтапДоговора.Наименование + " номер этапа: " + СсылкаЭтапДоговора.НомерЭтапа);
		КонецЕсли;		
	КонецЦикла; 
	
	Возврат Дней;
	
КонецФункции // ПолучитьКоличествоДнейПриостановленияРабот()

#КонецОбласти 

#Область РаботаСУсловиямиДоговора

Функция ПолучитьУсловияДоговора(ЭтапДоговора, ДатаСреза = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   УсловияДоговоровСрезПоследних.ПроцентПредоплаты,
        |   УсловияДоговоровСрезПоследних.УчетДатыПодписания,
        |   УсловияДоговоровСрезПоследних.УчетДатыПредоставленияДокументов,
        |   УсловияДоговоровСрезПоследних.УчетДатыВозвратаДоговора,
        |   УсловияДоговоровСрезПоследних.УчетДатыПредоплаты,
        |   УсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа
        |ИЗ
        |   РегистрСведений.мУсловияДоговоров.СрезПоследних(&Период, ЭтапДоговора = &ЭтапДоговора) КАК УсловияДоговоровСрезПоследних";

	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
    
    Если ДатаСреза = Неопределено Тогда
        ДатаСреза = ТекущаяДатаСеанса();
    КонецЕсли; 
	Запрос.УстановитьПараметр("Период", ДатаСреза);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	    Возврат ВыборкаДетальныеЗаписи;
	КонецЕсли; 

	Возврат Неопределено;
	
КонецФункции 

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаписатьУсловияДоговораДляЭтапа(ЭтапСсылка, Отказ, Параметры) Экспорт
    
    ЭтоНовый = Неопределено;
    ПометкаУдаления = Неопределено; // Установка / Снятие
    Параметры.Свойство("ЭтоНовый", ЭтоНовый);
    Параметры.Свойство("ПометкаУдаления", ПометкаУдаления);
    
    Если ЭтоНовый <> Неопределено И ЭтоНовый Тогда
        // просто создаем
        
        ШаблонУсловийДоговора = ЭтапСсылка.ШаблонУсловийДоговора;
        
        Если Не ЗначениеЗаполнено(ШаблонУсловийДоговора) Тогда
            Возврат;
        КонецЕсли; 
        
        // Определим этап, по которому надо записать условия и дату для записи
        Если мРаботаСДоговорами.ЭтоДопСоглашение(ЭтапСсылка.Владелец) Тогда
            // Это этап допсоглашения
            ЭтапДоговора = мРаботаСДоговорами.ПолучитьЭтапДоговораПоНомеру(ЭтапСсылка.Договор, ЭтапСсылка.НомерЭтапа);
            Договор = ЭтапДоговора.Владелец;
            
            //ПериодДляЗаписи = ДатаПодписания;
            ПериодДляЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтапСсылка.Владелец, "мДатаНачалаДействияДокумента");
            Если Не ЗначениеЗаполнено(ПериодДляЗаписи) Тогда
                ПериодДляЗаписи = НачалоДня(ТекущаяДатаСеанса());
            КонецЕсли;
            
        Иначе
            // Это этап основного договора
            ЭтапДоговора = ЭтапСсылка;
            Договор = ЭтапСсылка.Владелец;
            
            ПериодДляЗаписи = НачалоДня(ТекущаяДатаСеанса());
            ДатаРегистрации = Договор.ДатаРегистрации;
            ДатаПодписания = Договор.мДатаНачалаДействияДокумента;
            Если ЗначениеЗаполнено(ДатаПодписания) Тогда
                ПериодДляЗаписи = ДатаПодписания;
            ИначеЕсли ЗначениеЗаполнено(ДатаРегистрации) Тогда
                ПериодДляЗаписи = ДатаРегистрации;
            КонецЕсли; 
        КонецЕсли; 
        
        НаборЗаписей = РегистрыСведений.мУсловияДоговоров.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Договор.Установить(ЭтапСсылка.Договор);
        НаборЗаписей.Отбор.ЭтапДоговора.Установить(ЭтапСсылка);
        //НаборЗаписей.Отбор.Основание.Установить(Договор);
        
        НоваяЗапись = НаборЗаписей.Добавить();
        НоваяЗапись.Период = ПериодДляЗаписи;
        НоваяЗапись.Договор = Договор;
        НоваяЗапись.ЭтапДоговора = ЭтапДоговора;
        НоваяЗапись.Основание = Договор;
        НоваяЗапись.ПроцентПредоплаты = ШаблонУсловийДоговора.ПроцентПредоплаты;
        НоваяЗапись.УчетДатыПодписания = ШаблонУсловийДоговора.УчетДатыПодписания;
        НоваяЗапись.УчетДатыПредоставленияДокументов = ШаблонУсловийДоговора.УчетДатыПредоставленияДокументов;
        НоваяЗапись.УчетДатыВозвратаДоговора = ШаблонУсловийДоговора.УчетДатыВозвратаДоговора;
        НоваяЗапись.УчетДатыПредоплаты = ШаблонУсловийДоговора.УчетДатыПредоплаты;
        НоваяЗапись.УчетДатыВыполненияПредыдущегоЭтапа = ШаблонУсловийДоговора.УчетДатыВыполненияПредыдущегоЭтапа;
        НоваяЗапись.УчетДатыПредоставленияРешения = ШаблонУсловийДоговора.УчетДатыПредоставленияРешения;
        
        НаборЗаписей.Записать(Истина);
        
    ИначеЕсли ЭтоНовый <> Неопределено И Не ЭтоНовый Тогда
        
        // Определим этап, по которому надо записать условия
        Если мРаботаСДоговорами.ЭтоДопСоглашение(ЭтапСсылка.Владелец) Тогда
            // Это этап допсоглашения
            ЭтапДоговораДляЗаписи = мРаботаСДоговорами.ПолучитьЭтапДоговораПоНомеру(ЭтапСсылка.Договор, ЭтапСсылка.НомерЭтапа);
            Договор = ЭтапДоговора.Владелец;
            
         Иначе
            // Это этап основного договора
            ЭтапДоговораДляЗаписи = ЭтапСсылка;
            Договор = ЭтапСсылка.Владелец;
            
        КонецЕсли; 
        
        // Записываем в случае, если изменились условия
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   мУсловияДоговоровСрезПоследних.ЭтапДоговора,
        |   мУсловияДоговоровСрезПоследних.ПроцентПредоплаты,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПодписания,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияДокументов,
        |   мУсловияДоговоровСрезПоследних.УчетДатыВозвратаДоговора,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоплаты,
        |   мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа,
        |   мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияРешения
        |ПОМЕСТИТЬ Условия
        |ИЗ
        |   РегистрСведений.мУсловияДоговоров.СрезПоследних(, ЭтапДоговора = &ЭтапДоговораДляЗаписи) КАК мУсловияДоговоровСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   мУсловияДоговоровСрезПоследних.Период УБЫВ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |   ЭтапыДоговоров.Владелец КАК Договор,
        |   ЭтапыДоговоров.Владелец КАК Основание,
        //|   ЭтапыДоговоров.Владелец.ДатаРегистрации КАК ДатаРегистрации,
        //|   ЭтапыДоговоров.Владелец.мДатаНачалаДействияДокумента КАК ДатаПодписания,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПодписания, Ложь) КАК УчетДатыПодписания,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоставленияДокументов, Ложь) КАК УчетДатыПредоставленияДокументов,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыВозвратаДоговора, Ложь) КАК УчетДатыВозвратаДоговора,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоплаты, Ложь) КАК УчетДатыПредоплаты,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоставленияРешения, Ложь) КАК УчетДатыПредоставленияРешения,
        |   ЕстьNULL(ЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыВыполненияПредыдущегоЭтапа, Ложь) КАК УчетДатыВыполненияПредыдущегоЭтапа,
        |   ЕстьNULL(Условия.ПроцентПредоплаты, 0) КАК ПроцентПредоплатыЕсть,
        |   ЕстьNULL(Условия.УчетДатыПодписания, Ложь) КАК УчетДатыПодписанияЕсть,
        |   ЕстьNULL(Условия.УчетДатыПредоставленияДокументов, Ложь) КАК УчетДатыПредоставленияДокументовЕсть,
        |   ЕстьNULL(Условия.УчетДатыВозвратаДоговора, Ложь) КАК УчетДатыВозвратаДоговораЕсть,
        |   ЕстьNULL(Условия.УчетДатыПредоплаты, Ложь) КАК УчетДатыПредоплатыЕсть,
        |   ЕстьNULL(Условия.УчетДатыВыполненияПредыдущегоЭтапа, Ложь) КАК УчетДатыВыполненияПредыдущегоЭтапаЕсть,
        |   ЕстьNULL(Условия.УчетДатыПредоставленияРешения, Ложь) КАК УчетДатыПредоставленияРешенияЕсть
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
        |       ЛЕВОЕ СОЕДИНЕНИЕ Условия КАК Условия
        |       ПО Условия.ЭтапДоговора = ЭтапыДоговоров.Ссылка
        |ГДЕ
        |   ЭтапыДоговоров.Ссылка = &Ссылка";
        
        Запрос.УстановитьПараметр("Ссылка", ЭтапСсылка); // берем значения из шаблона
        Запрос.УстановитьПараметр("ЭтапДоговораДляЗаписи", ЭтапДоговораДляЗаписи);
        
        Выборка = Запрос.Выполнить().Выбрать();
        
        Записывать = Ложь;
        
        Если Выборка.Следующий() Тогда
            Если Выборка.ПроцентПредоплаты <> Выборка.ПроцентПредоплатыЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыПодписания <> Выборка.УчетДатыПодписанияЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыПредоставленияДокументов <> Выборка.УчетДатыПредоставленияДокументовЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыВозвратаДоговора <> Выборка.УчетДатыВозвратаДоговораЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыПредоплаты <> Выборка.УчетДатыПредоплатыЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыПредоставленияРешения <> Выборка.УчетДатыПредоставленияРешенияЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
            Если Выборка.УчетДатыВыполненияПредыдущегоЭтапа <> Выборка.УчетДатыВыполненияПредыдущегоЭтапаЕсть Тогда
                Записывать = Истина;
            КонецЕсли; 
        КонецЕсли; 
        
        Если Записывать Тогда
            НаборЗаписей = РегистрыСведений.мУсловияДоговоров.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Договор.Установить(ЭтапДоговораДляЗаписи.Владелец);
            НаборЗаписей.Отбор.ЭтапДоговора.Установить(ЭтапДоговораДляЗаписи);
            //НаборЗаписей.Отбор.Основание.Установить(ЭтапДоговораДляЗаписи.Владелец);
            //НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
            
            НоваяЗапись = НаборЗаписей.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
            НоваяЗапись.Период = ТекущаяДатаСеанса();
            НоваяЗапись.Договор = ЭтапДоговораДляЗаписи.Владелец;
            НоваяЗапись.ЭтапДоговора = ЭтапДоговораДляЗаписи;
            НоваяЗапись.Основание = ЭтапДоговораДляЗаписи.Владелец;
            
            НаборЗаписей.Записать(Истина);
        КонецЕсли;
    КонецЕсли; 
    
КонецПроцедуры // ЗаписатьУсловияДоговораДляЭтапа()

// Условие - Строка: ПоОплате, ДатаПодписания
// Если запрос по договору, то возвращается истина, если условие выполняется хотя бы для одного этапа
Функция ЕстьУсловиеДляРасчетаПлановогоСрока(Договор, ЭтапДоговора=Неопределено, ДатаСреза=Неопределено, Условие="") Экспорт
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	мУсловияДоговоровСрезПоследних.Период КАК Период,
	               |	ЕСТЬNULL(мУсловияДоговоровСрезПоследних.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыПодписания,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияДокументов,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыВозвратаДоговора,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыПредоплаты,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыВыполненияПредыдущегоЭтапа,
	               |	мУсловияДоговоровСрезПоследних.УчетДатыПредоставленияРешения
	               |ИЗ
	               |	РегистрСведений.мУсловияДоговоров.СрезПоследних(
	               |			&ДатаСреза,
	               |			ЭтапДоговора = &ЭтапДоговора И
	               |				Договор = &Договор) КАК мУсловияДоговоровСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";	
	
	Если ЭтапДоговора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭтапДоговора = &ЭтапДоговора И", "");
		ИскатьПоВсемЭтапам = Истина;
	Иначе	
		Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
		ИскатьПоВсемЭтапам = Ложь;
	КонецЕсли; 
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ДатаСреза", ?(ДатаСреза = Неопределено, ТекущаяДата(), ДатаСреза));
	
	Результат = Запрос.Выполнить();
	
	УсловиеЕсть = Ложь;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Условие = "ПоОплате" Тогда
			Если Выборка.ПроцентПредоплаты > 0 ИЛИ Выборка.УчетДатыПредоплаты Тогда
				Возврат Истина;
			КонецЕсли; 	
		ИначеЕсли Условие = "ДатаПодписания" Тогда
			Если Выборка.УчетДатыПодписания Тогда
				Возврат Истина;
			КонецЕсли; 
		ИначеЕсли Условие = "ДатаПредоставленияРешения" Тогда
			Если Выборка.УчетДатыПредоставленияРешения Тогда
				Возврат Истина;
			КонецЕсли; 
		ИначеЕсли Условие = "ДатаВыполненияПредыдущегоЭтапа" Тогда
			Если Выборка.УчетДатыВыполненияПредыдущегоЭтапа Тогда
				Возврат Истина;
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(Условие) Тогда	
			Сообщить("Для условия "+Условие+" не реализован алгоритм проверки!",СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УсловиеЕсть;

КонецФункции // ЕстьУсловиеДляРасчетаПлановогоСрока()

#КонецОбласти 

#Область РасчетЗарплаты

// Возвращает норматив ЗП, либо 0 если он не найден
//  Входящий параметры
//  Структура:  Дата - дата среза;
//              ВидРабот - Ссылка на справочник мВидыРаботФизЛица или мВидыРаботЮрЛица
//              Исполнитель - Ссылка на справочник Пользователь
//              ВидЗаказчика - ЗначенияСвойствОбъектов
//              ЦельПредоставления - ЗначенияСвойствОбъектов
//  Последние 2 могут быть не определены
Функция ПолучитьНормативЗП(ДанныеДляЗапроса) Экспорт
	
	Если ТипЗнч(ДанныеДляЗапроса) <> Тип("Структура") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данные для запроса норматива ЗП некорректные!";
		//Сообщение.Поле = "";
		//Сообщение.УстановитьДанные();
		Сообщение.Сообщить();
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДанныеДляЗапроса.Дата);
	Запрос.УстановитьПараметр("ВидРабот", ДанныеДляЗапроса.ВидРабот);
	Запрос.УстановитьПараметр("Пользователь", ДанныеДляЗапроса.Исполнитель);
	Запрос.УстановитьПараметр("ВидЗаказчика", ДанныеДляЗапроса.ВидЗаказчика);
	Запрос.УстановитьПараметр("ЦельПредоставления", ДанныеДляЗапроса.ЦельПредоставления);
	Запрос.УстановитьПараметр("ДопУсловие", ДанныеДляЗапроса.ДопУсловие);
	Запрос.УстановитьПараметр("ПустойВидЗаказчика", Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяЦельПредоставления", Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеДопУсловие", Справочники.мДопУсловияНормативаЗП.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мСведенияОСотрудникахСрезПоследних.Должность.Квалификация КАК Квалификация
	|ПОМЕСТИТЬ Квалификации
	|ИЗ
	|	РегистрСведений.мСведенияОСотрудниках.СрезПоследних(&ДатаСреза, Пользователь = &Пользователь) КАК мСведенияОСотрудникахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ВидЗаказчика
	|				И ДопУсловие = &ДопУсловие
	|				И ЦельПредоставления = &ЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	2 
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ВидЗаказчика
	|				И ДопУсловие = &ПустоеДопУсловие
	|				И ЦельПредоставления = &ЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	3
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ВидЗаказчика
	|				И ДопУсловие = &ДопУсловие
	|				И ЦельПредоставления = &ПустаяЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	4
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ВидЗаказчика
	|				И ДопУсловие = &ПустоеДопУсловие
	|				И ЦельПредоставления = &ПустаяЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	5
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ПустойВидЗаказчика
	|				И ДопУсловие = &ДопУсловие
	|				И ЦельПредоставления = &ЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	6
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ПустойВидЗаказчика
	|				И ДопУсловие = &ПустоеДопУсловие
	|				И ЦельПредоставления = &ЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	7
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ПустойВидЗаказчика
	|				И ДопУсловие = &ДопУсловие
	|				И ЦельПредоставления = &ПустаяЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НормативыЗПСрезПоследних.Норматив,
	|	8
	|ИЗ
	|	РегистрСведений.мНормативыЗП.СрезПоследних(
	|			&ДатаСреза,
	|			ВидРабот = &ВидРабот
	|				И Квалификация В
	|					(ВЫБРАТЬ
	|						Квалификации.Квалификация
	|					ИЗ
	|						Квалификации КАК Квалификации)
	|				И ВидЗаказчика = &ПустойВидЗаказчика
	|				И ДопУсловие = &ПустоеДопУсловие
	|				И ЦельПредоставления = &ПустаяЦельПредоставления) КАК НормативыЗПСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет"; 
		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Норматив;	
	КонецЕсли; 

    Возврат 0;
	
КонецФункции // 

	
#КонецОбласти 
 
#Область Дело

// Формирует номер Геопортала
//
// Параметры:
//  <ДатаРегистрации>  - <Дата> - Дата регистрации договора
//                 
//  <ЧисловойНомер>  - <Число> - Числовой номер договора
//                 
//  <НомерЭтапа>  - <Число> - Номер этапа
//                 
//
// Возвращаемое значение:
//   <Строка>   - Номер геопортала 
//
Функция СоздатьНомерГеопортала(ДатаРегистрации, ЧисловойНомер, НомерЭтапа) Экспорт
    НомерГеопортала = Прав(Год(ДатаРегистрации), 2);
    
    НомерДог = ЧисловойНомер;
    Если НомерДог < 10 Тогда
        НомерГеопортала = НомерГеопортала + "0000" + НомерДог;    
    ИначеЕсли НомерДог < 100 Тогда	
        НомерГеопортала = НомерГеопортала + "000" + НомерДог;    
    ИначеЕсли НомерДог < 1000 Тогда	
        НомерГеопортала = НомерГеопортала + "00" + НомерДог;    
    ИначеЕсли НомерДог < 10000 Тогда	
        НомерГеопортала = НомерГеопортала + "0" + НомерДог;    
    Иначе
        НомерГеопортала = НомерГеопортала + НомерДог;    
    КонецЕсли; 
    
    Если НомерЭтапа < 10 Тогда
        НомерГеопортала = НомерГеопортала + "0" + НомерЭтапа;    
    Иначе
        НомерГеопортала = НомерГеопортала + НомерЭтапа;    
    КонецЕсли; 
    
    Возврат НомерГеопортала; 

КонецФункции // СоздатьНомерГеопортала()
	
#КонецОбласти 

#Область мИсполнителиРаботПоЗаявке

// Возвращает 
//  Список значений - Исполнителей работ
// Параметры
//  Заявка - СправочникСсылка.ВходящийДокумент
//
Функция ПолучитьИсполнителей(Заявка) Экспорт
    СписокИсполнителей = Новый СписокЗначений;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	мИсполнителиРабот.Пользователь
		|ИЗ
		|	Справочник.мИсполнителиРабот КАК мИсполнителиРабот
		|ГДЕ
		|	мИсполнителиРабот.Владелец = &Ссылка
		|	И НЕ мИсполнителиРабот.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	МассивИсполнителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	Если МассивИсполнителей.Количество() > 0  Тогда
		СписокИсполнителей.ЗагрузитьЗначения(МассивИсполнителей);
	КонецЕсли;
    
    Возврат СписокИсполнителей;
	
КонецФункции // ПолучитьИсполнителей()

// Возвращает Структуру:
//      Всего - Количество этапов по договору
//      Этапы - Массив Этапов незаактированных
Функция ПолучитьНеЗаактированныеЭтапыПоЗаявке(Заявка, СтруктураОтвета) Экспорт
    
    СтруктураОтвета.Всего = 0;
    СтруктураОтвета.Этапы = Новый Массив;
	
	ВидДокумента = Заявка.ВидДокумента.Наименование;
	
	Если Найти(ВидДокумента, "Поручение") Тогда
		МассивДоговоров = СвязиДокументов.ПолучитьСвязанныеДокументы(Заявка, Справочники.ТипыСвязей.Поручение);
	Иначе	
		МассивДоговоров = СвязиДокументов.ПолучитьСвязанныеДокументы(Заявка, Справочники.ТипыСвязей.ПерепискаПоПредмету);
	КонецЕсли; 
    //МассивДоговоров = СвязиДокументов.ПолучитьСвязанныеДокументы(Заявка, Справочники.ТипыСвязей.Поручение);
    
    Если МассивДоговоров.Количество() = 0 Тогда
        Возврат СтруктураОтвета;
    КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора КАК ЭтапДоговора,
		|	РасчетыСПокупателямиОбороты.Договор КАК Договор
		|ПОМЕСТИТЬ Заактировано
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(, , Период, Договор В (&МассивДоговоров)) КАК РасчетыСПокупателямиОбороты
		|ГДЕ
		|	РасчетыСПокупателямиОбороты.СуммаРасход > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
		|	мЭтапыДоговоров.Владелец КАК Договор,
		|	мЭтапыДоговоров.ИсключенИзДоговора
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|ГДЕ
		|	мЭтапыДоговоров.Владелец В(&МассивДоговоров)
		|	И НЕ мЭтапыДоговоров.Ссылка В
		|				(ВЫБРАТЬ
		|					Заактировано.ЭтапДоговора
		|				ИЗ
		|					Заактировано КАК Заактировано)
		|	И НЕ мЭтапыДоговоров.ПометкаУдаления
		|	И НЕ мЭтапыДоговоров.ИсключенИзДоговора";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	
    Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
        Возврат СтруктураОтвета;
    КонецЕсли; 

	Выборка = Результат.Выбрать();
	
	Всего = 0;
	Пока Выборка.Следующий() Цикл
		Всего = Всего + 1;
        СтруктураОтвета.Этапы.Добавить(Выборка.ЭтапДоговора);    
	КонецЦикла; 
    СтруктураОтвета.Всего = Всего;
    
    Возврат СтруктураОтвета;
	
КонецФункции 

#КонецОбласти  

#Область УчетСметнойСтоимости
// Возвращает текущую стоимость с НДС и СуммуНДС 
Функция ПолучитьРеквизитыСтоимостиЭтапаДоговора(Этап) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мЭтапыДоговоров.ОсвобождениеОтНДС,
	|	мЭтапыДоговоров.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
	|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
	|		ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
	|	КОНЕЦ КАК СтоимостьСНДС,
	|	ВЫБОР
	|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
	|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СуммаНДС / 10000 КАК ЧИСЛО(17, 2))
	|		ИНАЧЕ мЭтапыДоговоров.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
	|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.Цена / 10000 КАК ЧИСЛО(17, 2))
	|		ИНАЧЕ мЭтапыДоговоров.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
	|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.Стоимость / 10000 КАК ЧИСЛО(17, 2))
	|		ИНАЧЕ мЭтапыДоговоров.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	мЭтапыДоговоров.КоличествоУчастков
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|ГДЕ
	|	мЭтапыДоговоров.Ссылка = &Этап";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	РеквизитыСтоимости = Неопределено;
	
	Если Выборка.Следующий() Тогда
		РеквизитыСтоимости = Новый Структура;
		РеквизитыСтоимости.Вставить("Цена", Выборка.Цена); 
		РеквизитыСтоимости.Вставить("КоличествоУчастков", Выборка.КоличествоУчастков); 
		РеквизитыСтоимости.Вставить("Стоимость", Выборка.Стоимость); 
		РеквизитыСтоимости.Вставить("СтавкаНДС", Выборка.СтавкаНДС); 
		РеквизитыСтоимости.Вставить("ОсвобождениеОтНДС", Выборка.ОсвобождениеОтНДС); 
		РеквизитыСтоимости.Вставить("СуммаНДС", Выборка.СуммаНДС); 
		РеквизитыСтоимости.Вставить("СтоимостьСНДС", Выборка.СтоимостьСНДС); 
	КонецЕсли;
	
	Возврат РеквизитыСтоимости;
КонецФункции

// Возвращает стоимость с НДС и СуммуНДС с учетом всех доп соглашений
//  получение сметной стоимости по всем документам на конец дня ДатаЗаписи
Функция ПолучитьСтоимостьЭтапаДоговораНаДату(Этап, ДатаЗаписи) Экспорт
	РеквизитыСтоимости = Новый Структура("СтоимостьСНДС, СуммаНДС, СтавкаНДС, ОсвобождениеОтНДС", 0, 0, Неопределено, Неопределено); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметнаяСтоимостьСрезПоследних.СтавкаНДС КАК СтавкаНДС,
		|	мСметнаяСтоимостьСрезПоследних.ОсвобождениеОтНДС КАК ОсвобождениеОтНДС,
		|	мСметнаяСтоимостьСрезПоследних.Сумма КАК СтоимостьСНДС,
		|	мСметнаяСтоимостьСрезПоследних.НДС КАК СуммаНДС
		|ИЗ
		|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(&ДатаСреза, ЭтапДоговора = &Этап) КАК мСметнаяСтоимостьСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаЗаписи)); 
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСтоимости, Выборка);
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//| СУММА(ВЫБОР
	//|   КОГДА УчетДоговоровОбороты.Период < &ДатаДеноминации
	//|    ТОГДА УчетДоговоровОбороты.СуммаПриход / 10000
	//|   КОГДА УчетДоговоровОбороты.Период < &ДатаПослеДеноминации
	//|    ТОГДА 0
	//|   ИНАЧЕ УчетДоговоровОбороты.СуммаПриход
	//|  КОНЕЦ) КАК СтоимостьСНДС,
	//| СУММА(ВЫБОР
	//|   КОГДА УчетДоговоровОбороты.Период < &ДатаДеноминации
	//|    ТОГДА УчетДоговоровОбороты.НДСПриход / 10000
	//|   КОГДА УчетДоговоровОбороты.Период < &ДатаПослеДеноминации
	//|    ТОГДА 0
	//|   ИНАЧЕ УчетДоговоровОбороты.НДСПриход
	//|  КОНЕЦ) КАК СуммаНДС,
	//| УчетДоговоровОбороты.СтавкаНДС,
	//| УчетДоговоровОбороты.ОсвобождениеОтНДС
	//|ИЗ
	//| РегистрНакопления.УчетДоговоров.Обороты(
	//|   ,
	//|   &КонДата,
	//|   Регистратор,
	//|   Договор = &Договор
	//|    И ЭтапДоговора = &Этап) КАК УчетДоговоровОбороты
	//|
	//|СГРУППИРОВАТЬ ПО
	//| УчетДоговоровОбороты.ЭтапДоговора,
	//| УчетДоговоровОбороты.СтавкаНДС,
	//| УчетДоговоровОбороты.ОсвобождениеОтНДС";
	//
	//Запрос.УстановитьПараметр("Этап", Этап);
	//Запрос.УстановитьПараметр("Договор", Этап.Владелец);
	//Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаЗаписи));
	//Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	//Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	ЗаполнитьЗначенияСвойств(РеквизитыСтоимости, Выборка);
	//КонецЕсли;
	
	Возврат РеквизитыСтоимости;
КонецФункции

Функция ПолучитьСуммуДоговора(ДоговорСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
		Возврат 0;	
	КонецЕсли; 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СУММА(ВЫБОР
        |           КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
        |               ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
        |           ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
        |       КОНЕЦ) КАК СтоимостьСНДС,
        |   мЭтапыДоговоров.Владелец КАК Владелец
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |ГДЕ
        |   мЭтапыДоговоров.Владелец В(&Договор)
		|	И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
		|   И НЕ мЭтапыДоговоров.ПометкаУдаления
        |
        |СГРУППИРОВАТЬ ПО
        |   мЭтапыДоговоров.Владелец";
        
    Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
    Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Выборка = РезультатЗапроса.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.СтоимостьСНДС;
	КонецЕсли; 
	
	Возврат 0;	
	
КонецФункции 

// Записывает сметную стоимость и другие реквизиты этапа, если они отличаются от последних записанных
Функция ЗаписатьСметнуюСтоимостьЭтапаДоговора(Этап, Отказ) Экспорт
	
	// очистка записей после ДатыПоследнейЗаписи
	ДатаЗаписи = НачалоДня(Этап.ДатаПоследнейЗаписи);
	Если Не ЗначениеЗаполнено(ДатаЗаписи) Тогда
		ДатаЗаписи = НачалоДня(ТекущаяДата());	
	КонецЕсли; 
	мРаботаСДоговорами.УдалитьЗаписиСметнойСтоимостиСДаты(ДатаЗаписи, Этап);
	
	// Получение последнего значения
	РеквСтоимости = мРаботаСДоговорами.РеквизитыСтоимостиЭтапаДоговора(Этап);
	
	СтрокаРекв = "Цена,КоличествоУчастков,Стоимость,СтавкаНДС,ОсвобождениеОтНДС,СуммаНДС,СтоимостьСНДС";
	РеквЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Этап, СтрокаРекв);
	
	// Запись если последнее не равно изменениям в этапе
	Если РеквСтоимости=Неопределено ИЛИ ЕстьИзменения(РеквСтоимости, РеквЭтапа) Тогда
		НаборЗаписей = РегистрыСведений.мСметнаяСтоимость.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
		НаборЗаписей.Отбор.ЭтапДоговора.Установить(Этап);
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.Период = ДатаЗаписи;
		НовЗапись.ЭтапДоговора = Этап;
		НовЗапись.СтавкаНДС = РеквЭтапа.СтавкаНДС;
		НовЗапись.ОсвобождениеОтНДС = РеквЭтапа.ОсвобождениеОтНДС;
		НовЗапись.Сумма = РеквЭтапа.СтоимостьСНДС;
		НовЗапись.НДС = РеквЭтапа.СуммаНДС;
		НовЗапись.Цена = РеквЭтапа.Цена;
		НовЗапись.КоличествоУчастков = РеквЭтапа.КоличествоУчастков;
		НовЗапись.Установил = Пользователи.ТекущийПользователь();
		
		НаборЗаписей.Записать();
	КонецЕсли; 
КонецФункции 

// Удаляет все записи СДаты
Функция УдалитьЗаписиСметнойСтоимостиСДаты(СДаты, ЭтапДоговора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметнаяСтоимость.Период,
		|	мСметнаяСтоимость.ЭтапДоговора
		|ИЗ
		|	РегистрСведений.мСметнаяСтоимость КАК мСметнаяСтоимость
		|ГДЕ
		|	мСметнаяСтоимость.ЭтапДоговора = &ЭтапДоговора
		|	И мСметнаяСтоимость.Период >= &СДаты";
	
	Запрос.УстановитьПараметр("СДаты", СДаты);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.мСметнаяСтоимость.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(Выборка.Период));
		НаборЗаписей.Отбор.ЭтапДоговора.Установить(Выборка.ЭтапДоговора);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецФункции

// Возвращает структуру реквизитов стоимости этапа
Функция РеквизитыСтоимостиЭтапаДоговора(Этап, ДатаСреза = '00010101000000') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметнаяСтоимостьСрезПоследних.СтавкаНДС,
		|	мСметнаяСтоимостьСрезПоследних.ОсвобождениеОтНДС,
		|	ЕстьNULL(мСметнаяСтоимостьСрезПоследних.Сумма, 0) КАК Сумма,
		|	ЕстьNULL(мСметнаяСтоимостьСрезПоследних.НДС, 0) КАК НДС,
		|	ЕстьNULL(мСметнаяСтоимостьСрезПоследних.Цена, 0) КАК Цена,
		|	ЕстьNULL(мСметнаяСтоимостьСрезПоследних.КоличествоУчастков, 0) КАК КоличествоУчастков
		|ИЗ
		|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(&ДатаСреза, ЭтапДоговора = &Этап) КАК мСметнаяСтоимостьСрезПоследних";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	РеквизитыСтоимости = Неопределено;
	
	Если Выборка.Следующий() Тогда
		РеквизитыСтоимости = Новый Структура;
		РеквизитыСтоимости.Вставить("Цена", Выборка.Цена); 
		РеквизитыСтоимости.Вставить("КоличествоУчастков", Выборка.КоличествоУчастков); 
		РеквизитыСтоимости.Вставить("Стоимость", Выборка.Сумма-Выборка.НДС); 
		РеквизитыСтоимости.Вставить("СтавкаНДС", Выборка.СтавкаНДС); 
		РеквизитыСтоимости.Вставить("ОсвобождениеОтНДС", Выборка.ОсвобождениеОтНДС); 
		РеквизитыСтоимости.Вставить("СуммаНДС", Выборка.НДС); 
		РеквизитыСтоимости.Вставить("СтоимостьСНДС", Выборка.Сумма); 
	КонецЕсли;
	
	Возврат РеквизитыСтоимости;
КонецФункции
 
Процедура ПометитьНаУдалениеУчетДоговоровПоЭтапу(ЭтапСсылка, Отказ, Параметры = "") Экспорт
	// при пометке на удаление этапа - пометка на удаление всех Учет договоров
	ИскДоки = Документы.УчетДоговоров.ПолучитьДокументыУчетДоговоровПоЭтапуДоговора(ЭтапСсылка);
	
	Если ИскДоки.Количество() > 0 Тогда
		Для каждого Док Из ИскДоки Цикл
			Если Не Док.ПометкаУдаления Тогда
				ДокУчетДоговоров = Док.ПолучитьОбъект();
				Если ТипЗнч(Параметры) = Тип("Структура") Тогда
					НеИзменятьЭтап = Неопределено;
					Параметры.Свойство("НеИзменятьЭтап", НеИзменятьЭтап);
					Если НеИзменятьЭтап <> Неопределено Тогда
						ДокУчетДоговоров.ДополнительныеСвойства.Вставить("НеИзменятьЭтап", НеИзменятьЭтап);	
					КонецЕсли; 
				КонецЕсли; 
				Попытка
					ДокУчетДоговоров.УстановитьПометкуУдаления(Истина);
				Исключение
					//Сообщить("Не удалось провести документ Учет договоров!");
					//Отказ = Истина;
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура ПометитьНаУдалениеУчетДоговоровПоСмете(ЭтапСсылка, Отказ, Параметры) Экспорт
	// при пометке на удаление этапа - пометка на удаление всех Учет договоров
	ИскДоки = Документы.УчетДоговоров.ПолучитьДокументыУчетДоговоровПоЭтапуДоговора(ЭтапСсылка, Параметры.Смета);
	
	Если ИскДоки.Количество() > 0 Тогда
		Для каждого Док Из ИскДоки Цикл
			Если Не Док.ПометкаУдаления Тогда
				ДокУчетДоговоров = Док.ПолучитьОбъект();
				Если ТипЗнч(Параметры) = Тип("Структура") Тогда
					НеИзменятьЭтап = Неопределено;
					Параметры.Свойство("НеИзменятьЭтап", НеИзменятьЭтап);
					Если НеИзменятьЭтап <> Неопределено Тогда
						ДокУчетДоговоров.ДополнительныеСвойства.Вставить("НеИзменятьЭтап", НеИзменятьЭтап);	
					КонецЕсли; 
				КонецЕсли; 
				Попытка
					ДокУчетДоговоров.УстановитьПометкуУдаления(Истина);
				Исключение
					//Сообщить("Не удалось провести документ Учет договоров!");
					//Отказ = Истина;
				КонецПопытки;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьНовыйУчетДоговоров(ЭтапСсылка, ДатаПоследнейЗаписи, Отказ, Параметры = "") Экспорт
	Договор = ЭтапСсылка.Владелец;
	
	ДокУчетДоговоров = Документы.УчетДоговоров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокУчетДоговоров, Параметры);
	ДокУчетДоговоров.ЭтапДоговора = ЭтапСсылка;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		НеИзменятьЭтап = Неопределено;
		Параметры.Свойство("НеИзменятьЭтап", НеИзменятьЭтап);
		Если НеИзменятьЭтап <> Неопределено Тогда
			ДокУчетДоговоров.ДополнительныеСвойства.Вставить("НеИзменятьЭтап", НеИзменятьЭтап);	
		КонецЕсли; 
	КонецЕсли; 
	
	Попытка
		ДокУчетДоговоров.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось провести документ Учет договоров!");
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры // ЗаписатьНовыйУчетДоговоров()

// При изменении УчетДоговоров приводит в соответствие Этап договора
//   Если УчетДоговоров был помечен на удаление, то в Этап надо записать данные из предыдущего УчетДоговоров
//     Если предыдущего УчетДоговоров нет, то в Этапе договоров обнуляем только ДатаПоследнейЗаписи 
Процедура ИзменитьСметнуюСтоимостьЭтапаДоговора(УчетДоговоров, Отказ, Параметры) Экспорт
    ЭтоНовый = Неопределено;
    ПометкаУдаления = Неопределено; // Установка / Снятие
    Параметры.Свойство("ЭтоНовый", ЭтоНовый);
    Параметры.Свойство("ПометкаУдаления", ПометкаУдаления);
	
	Если ПометкаУдаления <> Неопределено Тогда
		// Попытка изменить пометку на удаление документа
		//  Проверить последний док или нет
		ЭтапДоговора = УчетДоговоров.ЭтапДоговора;
		Результат = мРаботаСДоговорами.ПолучитьПоследнийУчетДоговоровДоДаты(ЭтапДоговора, УчетДоговоров.Дата);
		
		Если ПометкаУдаления Тогда
			Если Результат.УчетДоговоров = Неопределено Тогда
				// Единственный УчетДоговоров был помечен на удаление
				Если ЭтапДоговора.ДатаПоследнейЗаписи <> '00010101000000' Тогда
					ЭтапОбъект = ЭтапДоговора.ПолучитьОбъект();
					ЭтапОбъект.ДатаПоследнейЗаписи = '00010101000000';
					Попытка
						ЭтапОбъект.Записать();
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Не удалось изменить Этап договора " + ЭтапДоговора.Наименование;
						Сообщение.Сообщить(); 
						Отказ = Истина;
					КонецПопытки; 
				КонецЕсли; 
			Иначе
				// Заполнение этапа предыдущей стоимостью
				ЭтапОбъект = ЭтапДоговора.ПолучитьОбъект();
				Док = Результат.УчетДоговоров;
				ЗаполнитьЗначенияСвойств(ЭтапОбъект, Док);
				ЭтапОбъект.ДатаПоследнейЗаписи = Результат.Дата;
				ЭтапОбъект.СуммаНДС = Док.НДС;
				ЭтапОбъект.СтоимостьСНДС = Док.Сумма;
				ЭтапОбъект.Стоимость = Док.Сумма - Док.НДС;
				Попытка
					ЭтапОбъект.Записать();
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не удалось изменить Этап договора " + ЭтапДоговора.Наименование;
					Сообщение.Сообщить(); 
					Отказ = Истина;
				КонецПопытки; 
			КонецЕсли; 	
		Иначе
			// Отмена пометки на удаление документа
			// Если не последний - запрещаем
			Если Результат.Дата >= УчетДоговоров.Дата Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Нельзя изменять документы, если после них есть другие проведенные: " + Результат.УчетДоговоров;
				Сообщение.Сообщить(); 
                Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
                    Отказ = Истина;
                КонецЕсли; 	
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ИзменитьСметнуюСтоимостьЭтапаДоговора()

// Возвращает структуру 
// УчетДоговоров - последний документ до указанной даты
// Дата - Дата документа
//
// Если документа нет
// УчетДоговоров = Неопределено
// Дата = '00010101000000'
//
Функция ПолучитьПоследнийУчетДоговоровДоДаты(ЭтапДоговора, ДоДаты) Экспорт
	СтруктураОтвета = Новый Структура("УчетДоговоров, Дата", Неопределено, '00010101000000'); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетДоговоров.Ссылка КАК УчетДоговоров,
		|	УчетДоговоров.Дата КАК Дата
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.Дата < &ДоДаты
		|	И УчетДоговоров.Проведен
		|	И УчетДоговоров.ЭтапДоговора = &ЭтапДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДоДаты", ДоДаты);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат СтруктураОтвета;
КонецФункции // ПолучитьПоследнийУчетДоговоровДоДаты()

Функция ПолучитьПоследнийУчетДоговоров(УчетДоговоров, ЭтапДоговора, ДатаДок) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ПоследнийВПоследовательности", Истина);
	Результат.Вставить("ДатаПоследнегоДокумента", '00010101000000');
	Результат.Вставить("СтоимостьСНДС", 0);
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("Цена", 0);
	Результат.Вставить("КоличествоУчастков", 0);
	Результат.Вставить("ОсвобождениеОтНДС", Неопределено);
	Результат.Вставить("СтавкаНДС", Неопределено);
	Результат.Вставить("ПоследнийДокумент", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетДоговоров.Ссылка КАК ПоследнийДокумент,
		|	УчетДоговоров.Дата,
		|	УчетДоговоров.Договор,
		|	УчетДоговоров.ЭтапДоговора,
		|	УчетДоговоров.Сумма КАК СтоимостьСНДС,
		|	УчетДоговоров.НДС КАК СуммаНДС,
		|	УчетДоговоров.ОсвобождениеОтНДС,
		|	УчетДоговоров.СтавкаНДС,
		|	УчетДоговоров.Цена,
		|	УчетДоговоров.КоличествоУчастков
		|ИЗ
		|	Документ.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.ЭтапДоговора = &ЭтапДоговора";
		
	Если НЕ УчетДоговоров.Пустая() Тогда
		// выбрасываем из результата запроса текущий документ		
		Запрос.Текст = Запрос.Текст +"	
		|	И УчетДоговоров.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", УчетДоговоров);
	КонецЕсли; 
		
	Запрос.Текст = Запрос.Текст +"	
		|	И УчетДоговоров.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Если Не ЗначениеЗаполнено(ЭтапДоговора) И 
		Не ЗначениеЗаполнено(УчетДоговоров) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// можно проверять по дате
		Результат.Вставить("ДатаПоследнегоДокумента", Выборка.Дата);
		Если Выборка.Дата > ДатаДок Тогда
			Результат.Вставить("ПоследнийВПоследовательности", Ложь);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат ;
КонецФункции // ЭтоПоследнийДокумент()

Функция ПолучитьСтавкуНДСЭтапаДоговора(ЭтапДоговора) Экспорт
	Возврат ЭтапДоговора.СтавкаНДС;
КонецФункции
 
Функция ПолучитьОсвобождениеОтНДСЭтапаДоговора(ЭтапДоговора) Экспорт
	Возврат ЭтапДоговора.ОсвобождениеОтНДС;
КонецФункции
 
Функция ПолучитьВидДокумента(ПараметрКоманды) Экспорт
	Возврат ПараметрКоманды.ВидДокумента;
КонецФункции

#КонецОбласти 

#Область РеквизитыАктаВыполненныхРабот

Процедура ЗаписатьРеквизитыАктаВыполненныхРабот(Источник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Владелец";
		//|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИскЭлемент = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ИскЭлемент = Справочники.мРеквизитыАктовВыполненныхРабот.СоздатьЭлемент();
		ИскЭлемент.Наименование =  СокрЛП(Источник.РегистрационныйНомер) + " от " + СокрЛП(Формат(Источник.ДатаРегистрации, "ДФ=дд.ММ.гг"));
		ИскЭлемент.Владелец = Источник.Ссылка;
		ИскЭлемент.ЭтапДоговора = Источник.ЭтапДоговора;
	КонецЕсли;
	
	РеквизитыАкта = Источник.ДополнительныеСвойства;
	
	Записывать = Ложь;
	Если РеквизитыАкта.Свойство("Сумма") И ИскЭлемент.Сумма <> РеквизитыАкта.Сумма Тогда
		Записывать = Истина;
		ИскЭлемент.Сумма = РеквизитыАкта.Сумма;
	Иначе
		Если ИскЭлемент.Сумма <> Источник.Сумма Тогда
			Записывать = Истина;
			ИскЭлемент.Сумма = Источник.Сумма;
		КонецЕсли; 
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("СостояниеАкта") И ИскЭлемент.СостояниеАкта <> РеквизитыАкта.СостояниеАкта Тогда
		Записывать = Истина;
		ИскЭлемент.СостояниеАкта = РеквизитыАкта.СостояниеАкта;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("СуммаНДС") И ИскЭлемент.СуммаНДС <> РеквизитыАкта.СуммаНДС Тогда
		Записывать = Истина;
		ИскЭлемент.СуммаНДС = РеквизитыАкта.СуммаНДС;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("СтавкаНДС") И ИскЭлемент.СтавкаНДС <> РеквизитыАкта.СтавкаНДС Тогда
		Записывать = Истина;
		ИскЭлемент.СтавкаНДС = РеквизитыАкта.СтавкаНДС;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("ОсвобождениеОтНДС") И ИскЭлемент.ОсвобождениеОтНДС <> РеквизитыАкта.ОсвобождениеОтНДС Тогда
		Записывать = Истина;
		ИскЭлемент.ОсвобождениеОтНДС = РеквизитыАкта.ОсвобождениеОтНДС;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("ЭтапДоговора") И ИскЭлемент.ЭтапДоговора <> РеквизитыАкта.ЭтапДоговора Тогда
		Записывать = Истина;
		ИскЭлемент.ЭтапДоговора = РеквизитыАкта.ЭтапДоговора;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("ВрученЗаказчику") И ИскЭлемент.ВрученЗаказчику <> РеквизитыАкта.ВрученЗаказчику Тогда
		Записывать = Истина;
		ИскЭлемент.ВрученЗаказчику = РеквизитыАкта.ВрученЗаказчику;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("Возвращен") И ИскЭлемент.Возвращен <> РеквизитыАкта.Возвращен Тогда
		Записывать = Истина;
		ИскЭлемент.Возвращен = РеквизитыАкта.Возвращен;
	КонецЕсли; 
	Если РеквизитыАкта.Свойство("ВидАкта") И ИскЭлемент.ВидАкта <> РеквизитыАкта.ВидАкта Тогда
		Записывать = Истина;
		ИскЭлемент.ВидАкта = РеквизитыАкта.ВидАкта;
	КонецЕсли; 
	
	Если Записывать Тогда
		Попытка
			ИскЭлемент.Записать();	
		Исключение
		КонецПопытки; 
	КонецЕсли; 
КонецПроцедуры
 
Функция ПолучитьРеквизитыАктаВыполненныхРабот(АктСсылка) Экспорт
	
	СтруктураРекв = Новый Структура("СтавкаНДС, СуммаНДС, Сумма, ОсвобождениеОтНДС, СостояниеАкта, ВрученЗаказчику, Возвращен, ВидАкта"); 
	
	Если Не ЗначениеЗаполнено(АктСсылка) Тогда
		Возврат СтруктураРекв;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка,
		|	мРеквизитыАктовВыполненныхРабот.ЭтапДоговора,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС,
		|	мРеквизитыАктовВыполненныхРабот.СуммаНДС,
		|	мРеквизитыАктовВыполненныхРабот.Сумма,
		|	мРеквизитыАктовВыполненныхРабот.ОсвобождениеОтНДС,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта,
		|	мРеквизитыАктовВыполненныхРабот.ВрученЗаказчику,
		|	мРеквизитыАктовВыполненныхРабот.Возвращен,
		|	мРеквизитыАктовВыполненныхРабот.ВидАкта
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Владелец";
		//|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", АктСсылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРекв, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРекв;
КонецФункции
 
Процедура УстановитьРеквизитыАктаВыполненныхРабот(АктСсылка, Реквизиты) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Владелец";
		//|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", АктСсылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИскЭлемент = Выборка.Ссылка.ПолучитьОбъект();
		Записывать = Ложь;
		Если Реквизиты.Свойство("СостояниеАкта") И ИскЭлемент.СостояниеАкта <> Реквизиты.СостояниеАкта Тогда
			Записывать = Истина;
			ИскЭлемент.СостояниеАкта = Реквизиты.СостояниеАкта;
		КонецЕсли; 
		Если Реквизиты.Свойство("Возвращен") И ИскЭлемент.Возвращен <> Реквизиты.Возвращен Тогда
			Записывать = Истина;
			ИскЭлемент.Возвращен = Реквизиты.Возвращен;
		КонецЕсли; 
		Если Реквизиты.Свойство("ВрученЗаказчику") И ИскЭлемент.ВрученЗаказчику <> Реквизиты.ВрученЗаказчику Тогда
			Записывать = Истина;
			ИскЭлемент.ВрученЗаказчику = Реквизиты.ВрученЗаказчику;
		КонецЕсли; 
		Если Реквизиты.Свойство("СуммаНДС") И ИскЭлемент.СуммаНДС <> Реквизиты.СуммаНДС Тогда
			Записывать = Истина;
			ИскЭлемент.СуммаНДС = Реквизиты.СуммаНДС;
		КонецЕсли; 
		Если Реквизиты.Свойство("СтавкаНДС") И ИскЭлемент.СтавкаНДС <> Реквизиты.СтавкаНДС Тогда
			Записывать = Истина;
			ИскЭлемент.СтавкаНДС = Реквизиты.СтавкаНДС;
		КонецЕсли; 
		Если Реквизиты.Свойство("ОсвобождениеОтНДС") И ИскЭлемент.ОсвобождениеОтНДС <> Реквизиты.ОсвобождениеОтНДС Тогда
			Записывать = Истина;
			ИскЭлемент.ОсвобождениеОтНДС = Реквизиты.ОсвобождениеОтНДС;
		КонецЕсли; 
		Если Реквизиты.Свойство("ЭтапДоговора") И ИскЭлемент.ЭтапДоговора <> Реквизиты.ЭтапДоговора Тогда
			Записывать = Истина;
			ИскЭлемент.ЭтапДоговора = Реквизиты.ЭтапДоговора;
		КонецЕсли; 
		Если Реквизиты.Свойство("ВидАкта") И ИскЭлемент.ВидАкта <> Реквизиты.ВидАкта Тогда
			Записывать = Истина;
			ИскЭлемент.ВидАкта = Реквизиты.ВидАкта;
		КонецЕсли; 
		
		Если Записывать Тогда
			Попытка
				ИскЭлемент.Записать();	
			Исключение
			КонецПопытки; 
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
 
Процедура УстановитьСостояниеАктаВыполненныхРабот(АктСсылка, СостояниеАкта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец = &Владелец";
		//|	И НЕ мРеквизитыАктовВыполненныхРабот.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", АктСсылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИскЭлемент = Выборка.Ссылка.ПолучитьОбъект();
		ИскЭлемент.СостояниеАкта = СостояниеАкта;
		ИскЭлемент.Записать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаАктаВыполненныхРабот

Процедура ЗаписатьЗамечаниеПроверкиАкта(Акт, Комментарий) Экспорт
	НаборЗаписей = РегистрыСведений.мЗамечанияПоПроверкеАктов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Акт.Установить(Акт);
	
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Акт = Акт;
	НовЗапись.Комментарий = Комментарий;
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УдалитьЗамечаниеПроверкиАкта(Акт) Экспорт
	НаборЗаписей = РегистрыСведений.мЗамечанияПоПроверкеАктов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Акт.Установить(Акт);
	НаборЗаписей.Записать();
КонецПроцедуры

// Возвращает Комментарий проверки акта выполненных работ
Функция ЗамечаниеПроверкиАкта(Акт) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЗамечанияПоПроверкеАктов.Комментарий
		|ИЗ
		|	РегистрСведений.мЗамечанияПоПроверкеАктов КАК мЗамечанияПоПроверкеАктов
		|ГДЕ
		|	мЗамечанияПоПроверкеАктов.Акт = &Акт";
	
	Запрос.УстановитьПараметр("Акт", Акт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Комментарий;
	КонецЕсли;
	
	Возврат Справочники.мЗамечанияПроверкиАктов.Проверен;
КонецФункции 

#КонецОбласти 

#Область мИсполнителиРабот

// Возвращает 
//  Список значений - Исполнители работ
// Параметры
//  Этап работ - СправочникСсылка.мЭтапыРабот
//
Функция ПолучитьИсполнителейПоЭтапу(Этап) Экспорт
    СписокИсполнителей = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|мЭтапыДоговоров.Исполнители.Исполнитель КАК Исполнитель
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|ГДЕ
	|	мЭтапыДоговоров.Ссылка = &Ссылка";
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Этап);
	
	МассивИсполнителей = Запрос.Выполнить().Выгрузить()[0].Исполнитель.ВыгрузитьКолонку("Исполнитель");
	Если МассивИсполнителей.Количество() > 0  Тогда
		СписокИсполнителей.ЗагрузитьЗначения(МассивИсполнителей);
	КонецЕсли;
    
    Возврат СписокИсполнителей;
	
КонецФункции // ПолучитьИсполнителейПоЭтапу()

// Возвращает 
//	Булево - Если исполнитель в этапе внесен или есть роль "мМожетСоздатьДелоНеЯвляясьЕгоИсполнителем" или "Администратор" - Истина, иначе - Ложь
// Параметры
//  Этап и Пользователь
Функция ПользовательМожетСоздатьДелоПоЭтапу(Этап,Пользователь) Экспорт
	//Проверяем права на создание Дела не являясь его исполнителем
	//у Администратора ДокументооборотПраваДоступа.ЕстьРоль всегда вернет Истину
	Если НЕ ДокументооборотПраваДоступа.ЕстьРоль("мМожетСоздатьДелоНеЯвляясьЕгоИсполнителем") Тогда
		//проверка на вхождение пользователя в список исполнителей по этапу
		cзИсполнителей = мРаботаСДоговорами.ПолучитьИсполнителейПоЭтапу(Этап);
		
		Если cзИсполнителей.НайтиПоЗначению(Пользователь) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции 

// Возвращает Истина если Кто есть в списке Исполнители в Этапе
//
// Параметры:
//  <Кто>  - <СправочникСсылка.Пользователи> 
//  <ЭтапДоговора>  - <СправочникСсылка> 
Функция ЭтоИсполнительРаботПоЭтапу(Кто, ЭтапДоговора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровИсполнители.Исполнитель
		|ИЗ
		|	Справочник.мЭтапыДоговоров.Исполнители КАК мЭтапыДоговоровИсполнители
		|ГДЕ
		|	мЭтапыДоговоровИсполнители.Исполнитель = &Исполнитель
		|	И мЭтапыДоговоровИсполнители.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Исполнитель", Кто);
	Запрос.УстановитьПараметр("Ссылка", ЭтапДоговора);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();

КонецФункции // ЭтоИсполнительРаботПоЭтапу()

#КонецОбласти 

#Область ДляПечатиДоговоровИДопСогл

// Возвращает имя района из этапа района или месторасположения этапа договора
&НаСервере
Функция ПолучитьИмяРайона(ЭтапДоговора) Экспорт
	ИмяРайона = "";
	Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат ИмяРайона;
	КонецЕсли; 
	ИмяРайона = ЭтапДоговора.Район;
	ИмяРайона = СокрЛП(СтрЗаменить(ИмяРайона, "р-н", ""));
	
	Если Не ЗначениеЗаполнено(ИмяРайона) Тогда
		// Попытка получить из контактной информации
		СтруктураРеквизитов = Новый Структура("Район"); 
		Если ЗначениеЗаполнено(ЭтапДоговора.ЗначенияПолей) Тогда
			ПолучитьРеквизитыИзАдреса(ЭтапДоговора.ЗначенияПолей, СтруктураРеквизитов);
			ИмяРайона = СтруктураРеквизитов.Район;
			ИмяРайона = СокрЛП(СтрЗаменить(ИмяРайона, "р-н", ""));
		КонецЕсли; 
	КонецЕсли; 
	Возврат ИмяРайона;
КонецФункции // ПолучитьИмяРайона()

// Возвращает заполненную структуру реквизитов адреса на основании переданной
// СтруктураРеквизитов:
// 	"Страна"
//	"Область"
//	"Район"
//	"Сельсовет"
//	"НаселенныйПункт"
//	"Улица    
Функция ПолучитьРеквизитыИзАдреса(СтрокаКИ, СтруктураРеквизитов) Экспорт
	
	XDTOКонтактная = ПолучитьXDTOКонтактная(СтрокаКИ);
	
	ПолучитьЗначениеРеквизитовПоКонтактнойИнформации(СтруктураРеквизитов, XDTOКонтактная);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции //ПолучитьРеквизитыИзАдреса

 
// Возвращает должность и представление в документах для переданного пользователя или списка пользователей.
//
Функция ПолучитьДолжностьИПредставление(Пользователь) Экспорт 
    
    ОбработкаСпискаПользователей = Ложь;
    Если ТипЗнч(Пользователь) = Тип("СписокЗначений") Тогда
        СтруктураПодписи = Новый Структура("Должность, ПредставлениеВДокументах", Справочники.Должности.ПустаяСсылка(), ""); 
        СтруктураВозврата = Новый Структура(); 
        
        Для й=1 По Пользователь.Количество() Цикл
            СтруктураВозврата.Вставить("Подписал"+й, СтруктураПодписи);    
        КонецЦикла;     
        ОбработкаСпискаПользователей = Истина;
   Иначе
        СтруктураВозврата = Новый Структура("Должность, ПредставлениеВДокументах", Справочники.Должности.ПустаяСсылка(), ""); 
    КонецЕсли; 

	Если Не ЗначениеЗаполнено(Пользователь) Тогда 
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   СведенияОПользователях.Должность КАК Должность,
    |   СведенияОПользователях.Пользователь.ПредставлениеВДокументах КАК ПредставлениеВДокументах,
    |   СведенияОПользователях.Пользователь КАК Пользователь
    |ИЗ
    |   РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
    |ГДЕ
    |   СведенияОПользователях.Пользователь В(&Пользователь)";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат СтруктураВозврата;
	КонецЕсли;

	Выборка = Результат.Выбрать();
    Если ОбработкаСпискаПользователей Тогда
        Пока Выборка.Следующий() Цикл
            СтрокаСписка = Пользователь.НайтиПоЗначению(Выборка.Пользователь);
            Если СтрокаСписка <> Неопределено Тогда
                СтруктураПодписи = Новый Структура("Должность, ПредставлениеВДокументах", "", ""); 
                ЗаполнитьЗначенияСвойств(СтруктураПодписи, Выборка);
            	СтруктураВозврата.Вставить(СтрокаСписка.Представление, СтруктураПодписи);
            КонецЕсли; 
        КонецЦикла;    
    Иначе
    	Выборка.Следующий();
        ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
    КонецЕсли; 
    
	Возврат СтруктураВозврата;

КонецФункции

// Возвращает наши реквизиты
Функция ПолучитьНашиРеквизиты(Договор = Неопределено, БезАдресаБанка = Ложь) Экспорт
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("НашеНаименование", "");
	Реквизиты.Вставить("НашеНаименованиеКратко", "");
	Реквизиты.Вставить("НашАдрес", "");
	Реквизиты.Вставить("НашРасчетныйСчет", "");
	Реквизиты.Вставить("НашБанк", "");
	Реквизиты.Вставить("НашАдресБанка", "");
	Реквизиты.Вставить("НашСчет", "");
	Реквизиты.Вставить("НашКодБанка", "");
	Реквизиты.Вставить("НашСчетИБАН", "");
	Реквизиты.Вставить("НашБИКБанка", "");
	Реквизиты.Вставить("НашУНП", "");
	Реквизиты.Вставить("НашОКПО", "");
	Реквизиты.Вставить("НашТелефон", "");
	Реквизиты.Вставить("Свидетельство", "");
	Реквизиты.Вставить("НашЕмейл", "");
	Реквизиты.Вставить("НашГород", "");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.Представление, """") КАК НашАдрес
		|ПОМЕСТИТЬ Адрес
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
		|	И ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.Представление, """") КАК НашЕмейл
		|ПОМЕСТИТЬ ЕмейлОрганизации
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
		|	И ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.Представление, """") КАК НашТелефон
		|ПОМЕСТИТЬ Телефон
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
		|	И ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
		|;";
		
		Если ЗначениеЗаполнено(Договор) Тогда
			// Берем счет из договора
		    Запрос.Текст = Запрос.Текст +"
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.НомерСчета КАК НомерСчета,
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.СчетИБАН КАК СчетИБАН,
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.Банк.Код КАК КодБанка,
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.Банк.БИК КАК БикБанка,
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.Банк.Наименование КАК НаименованиеБанка,
			|	мРасчетныеСчетаДокументов.РасчетныйСчет.Банк.Адрес КАК АдресБанка
			|ПОМЕСТИТЬ Счет
			|ИЗ
			|	РегистрСведений.мРасчетныеСчетаДокументов КАК мРасчетныеСчетаДокументов
			|ГДЕ
			|	мРасчетныеСчетаДокументов.Документ = &Договор";
			
		Иначе
			// Берем счет из организации
		    Запрос.Текст = Запрос.Текст +"
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Организации.ОсновнойБанковскийСчет.СчетИБАН КАК СчетИБАН,
			|	Организации.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
			|	Организации.ОсновнойБанковскийСчет.Банк.Код КАК КодБанка,
			|	Организации.ОсновнойБанковскийСчет.Банк.БИК КАК БикБанка,
			|	Организации.ОсновнойБанковскийСчет.Банк.Наименование КАК НаименованиеБанка,
			|	Организации.ОсновнойБанковскийСчет.Банк.Адрес КАК АдресБанка
			|ПОМЕСТИТЬ Счет
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст +"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.НомерСчета, """") КАК НомерСчетаАльтернативный,
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.СчетИБАН, """") КАК СчетИБАНАльтернативный,
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.Банк.Код, """") КАК КодБанкаАльтернативный,
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.Банк.БИК, """") КАК БИКБанкаАльтернативный,
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.Банк.Наименование, """") КАК НаименованиеБанкаАльтернативный,
		|	ЕСТЬNULL(Корреспонденты.мНашБанковскийСчет.Банк.Адрес, """") КАК АдресБанкаАльтернативный
		|ПОМЕСТИТЬ АльтСчет
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|ГДЕ
		|	Корреспонденты.Ссылка = &Заказчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.ИНН КАК НашУНП,
		|	Организации.мГород КАК НашГород,
		|	Организации.КодПоОКПО КАК НашОКПО,
		|	Организации.ПолноеНаименование КАК НашеНаименование,
		|	Организации.мНаименованиеФилиала КАК НаименованиеФилиала,
		|	Организации.Наименование КАК НашеНаименованиеКратко,
		|	ЕСТЬNULL(Адрес.НашАдрес, """") КАК НашАдрес,
		|	ЕСТЬNULL(Телефон.НашТелефон, """") КАК НашТелефон,
		|	мСвидетельствоОГосРегистрации.Значение КАК Свидетельство,
		|	ЕСТЬNULL(ЕмейлОрганизации.НашЕмейл, """") КАК НашЕмейл,
		|	ЕСТЬNULL(Счет.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(Счет.КодБанка, """") КАК КодБанка,
		|	ЕСТЬNULL(Счет.СчетИБАН, """") КАК СчетИБАН,
		|	ЕСТЬNULL(Счет.БИКБанка, """") КАК БИКБанка,
		|	ЕСТЬNULL(Счет.НаименованиеБанка, """") КАК НаименованиеБанка,
		|	ЕСТЬNULL(Счет.АдресБанка, """") КАК АдресБанка,
		|	ЕСТЬNULL(АльтСчет.НомерСчетаАльтернативный, """") КАК НомерСчетаАльтернативный,
		|	ЕСТЬNULL(АльтСчет.КодБанкаАльтернативный, """") КАК КодБанкаАльтернативный,
		|	ЕСТЬNULL(АльтСчет.СчетИБАНАльтернативный, """") КАК СчетИБАНАльтернативный,
		|	ЕСТЬNULL(АльтСчет.БИКБанкаАльтернативный, """") КАК БИКБанкаАльтернативный,
		|	ЕСТЬNULL(АльтСчет.НаименованиеБанкаАльтернативный, """") КАК НаименованиеБанкаАльтернативный,
		|	ЕСТЬNULL(АльтСчет.АдресБанкаАльтернативный, """") КАК АдресБанкаАльтернативный
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ АльтСчет КАК АльтСчет
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЕмейлОрганизации КАК ЕмейлОрганизации
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Адрес КАК Адрес
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Счет КАК Счет
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Телефон КАК Телефон
		|		ПО (ИСТИНА),
		|	Константа.мСвидетельствоОГосРегистрации КАК мСвидетельствоОГосРегистрации
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Запрос.УстановитьПараметр("Организация", Договор.Организация);
		Запрос.УстановитьПараметр("Заказчик", Договор.Корреспондент);
		Запрос.УстановитьПараметр("Договор", Договор);
	Иначе
		Запрос.УстановитьПараметр("Организация", Константы.М_ОсновнаяОрганизация.Получить());
		Запрос.УстановитьПараметр("Заказчик", Справочники.Корреспонденты.ПустаяСсылка());
	КонецЕсли; 		
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Реквизиты;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.НомерСчетаАльтернативный) Тогда
			//НашРасчетныйСчет = ""+Выборка.НомерСчетаАльтернативный
			//+ " " + Выборка.НаименованиеБанкаАльтернативный
			//+ ?(БезАдресаБанка, "", " " + Выборка.АдресБанкаАльтернативный)
			//+ ", МФО " + СокрЛП(Выборка.КодБанкаАльтернативный);
			НашРасчетныйСчет = ""+Выборка.СчетИБАНАльтернативный
			+ " " + Выборка.НаименованиеБанкаАльтернативный
			+ ?(БезАдресаБанка, "", " " + Выборка.АдресБанкаАльтернативный)
			+ ", БИК " + СокрЛП(Выборка.БИКБанкаАльтернативный);
			
			Реквизиты.Вставить("НашБанк", Выборка.НаименованиеБанкаАльтернативный);
			Реквизиты.Вставить("НашАдресБанка", ?(БезАдресаБанка, "", " " + Выборка.АдресБанкаАльтернативный));
			Реквизиты.Вставить("НашСчет", Выборка.НомерСчетаАльтернативный);
			Реквизиты.Вставить("НашКодБанка", СокрЛП(Выборка.КодБанкаАльтернативный));
			Реквизиты.Вставить("НашСчетИБАН", Выборка.СчетИБАНАльтернативный);
			Реквизиты.Вставить("НашБИКБанка", Выборка.БИКБанкаАльтернативный);
		Иначе	
			//НашРасчетныйСчет = ""+Выборка.НомерСчета
			//+ " " + Выборка.НаименованиеБанка
			//+ ?(БезАдресаБанка, "", " " + Выборка.АдресБанка)
			//+ ", МФО " + СокрЛП(Выборка.КодБанка);
			НашРасчетныйСчет = ""+Выборка.СчетИБАН
			+ " " + Выборка.НаименованиеБанка
			+ ?(БезАдресаБанка, "", " " + Выборка.АдресБанка)
			+ ", БИК " + СокрЛП(Выборка.БИКБанка);
			
			Реквизиты.Вставить("НашБанк", Выборка.НаименованиеБанка);
			Реквизиты.Вставить("НашАдресБанка", ?(БезАдресаБанка, "", " " + Выборка.АдресБанка));
			Реквизиты.Вставить("НашСчет", Выборка.НомерСчета);
			Реквизиты.Вставить("НашКодБанка", Выборка.КодБанка);
			Реквизиты.Вставить("НашСчетИБАН", Выборка.СчетИБАН);
			Реквизиты.Вставить("НашБИКБанка", Выборка.БИКБанка);
		КонецЕсли;
		
		Реквизиты.Вставить("НашРасчетныйСчет", НашРасчетныйСчет);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции 

// Возвращает реквизиты ФизЛица корреспондента
&НаСервере
Функция ПолучитьДанныеФизЛиц(МассивКорреспондентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК Корреспондент,
		|	Корреспонденты.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ФизЛица
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|ГДЕ
		|	Корреспонденты.Ссылка В(&МассивКорреспондентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийАдрес,
		|	КорреспондентыКонтактнаяИнформация.ЗначенияПолей,
		|	КорреспондентыКонтактнаяИнформация.Страна,
		|	КорреспондентыКонтактнаяИнформация.Регион,
		|	КорреспондентыКонтактнаяИнформация.Район,
		|	КорреспондентыКонтактнаяИнформация.Сельсовет,
		|	КорреспондентыКонтактнаяИнформация.Город,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ДомашниеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийТелефон,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ДомашниеТелефоны
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ПочтовыйАдрес,
		|	КорреспондентыКонтактнаяИнформация.ЗначенияПолей,
		|	КорреспондентыКонтактнаяИнформация.Страна,
		|	КорреспондентыКонтактнаяИнформация.Регион,
		|	КорреспондентыКонтактнаяИнформация.Район,
		|	КорреспондентыКонтактнаяИнформация.Сельсовет,
		|	КорреспондентыКонтактнаяИнформация.Город,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ПочтовыеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК МобильныйТелефон,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ МобильныеТелефоны
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДокументыФизическихЛицСрезПоследних.Физлицо,
		|	МАКСИМУМ(ДокументыФизическихЛицСрезПоследних.Период) КАК Период
		|ПОМЕСТИТЬ ДокументыСрез
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.ФизЛицо
		|					ИЗ
		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыФизическихЛицСрезПоследних.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.Физлицо
		|ПОМЕСТИТЬ ДанныеПаспорта
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.ФизЛицо
		|					ИЗ
		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСрез КАК ДокументыСрез
		|		ПО ДокументыФизическихЛицСрезПоследних.Период = ДокументыСрез.Период
		|			И ДокументыФизическихЛицСрезПоследних.Физлицо = ДокументыСрез.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокументыСрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДомашниеАдреса.ДомашнийАдрес, """") КАК ДомашнийАдрес,
		|	ЕСТЬNULL(ДомашниеТелефоны.ДомашнийТелефон, """") КАК ДомашнийТелефон,
		|	ЕСТЬNULL(МобильныеТелефоны.МобильныйТелефон, """") КАК МобильныйТелефон,
		|	ЕСТЬNULL(ПочтовыеАдреса.ПочтовыйАдрес, """") КАК ПочтовыйАдрес,
		|	ЕСТЬNULL(ДанныеПаспорта.Серия, """") КАК СерияПаспорта,
		|	ЕСТЬNULL(ДанныеПаспорта.Номер, """") КАК НомерПаспорта,
		|	ЕСТЬNULL(ДанныеПаспорта.ДатаВыдачи, """") КАК ДатаВыдачи,
		|	ЕСТЬNULL(ДанныеПаспорта.КемВыдан, """") КАК КемВыдан,
		|	ЕСТЬNULL(ДанныеПаспорта.СрокДействия, """") КАК СрокДействия,
		|	ФизЛица.Корреспондент.ПолноеНаименование КАК ФИО,
		|	ФизЛица.Корреспондент,
		|	ФизЛица.ФизЛицо
		|ИЗ
		|	ФизЛица КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеАдреса КАК ДомашниеАдреса
		|		ПО ФизЛица.Корреспондент = ДомашниеАдреса.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеТелефоны КАК ДомашниеТелефоны
		|		ПО ФизЛица.Корреспондент = ДомашниеТелефоны.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПочтовыеАдреса КАК ПочтовыеАдреса
		|		ПО ФизЛица.Корреспондент = ПочтовыеАдреса.ПочтовыйАдрес
		|		ЛЕВОЕ СОЕДИНЕНИЕ МобильныеТелефоны КАК МобильныеТелефоны
		|		ПО ФизЛица.Корреспондент = МобильныеТелефоны.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПаспорта КАК ДанныеПаспорта
		|		ПО ФизЛица.ФизЛицо = ДанныеПаспорта.Физлицо";
		
	Запрос.УстановитьПараметр("МассивКорреспондентов", МассивКорреспондентов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции // ПолучитьРеквизитыФизЛица()

// Возвращает реквизиты ФизЛица корреспондента
&НаСервере
Функция ПолучитьРеквизитыФизЛица(Корреспондент) Экспорт
	Реквизиты = Новый Структура();
	ФизЛицо = Корреспондент.ФизЛицо;
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		Реквизиты.Вставить("ФИО", Корреспондент.ПолноеНаименование);
		Реквизиты.Вставить("АдресФизЛица", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ФизЛицо, Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица));
        ДанныеПаспорта = РегистрыСведений.ДокументыФизическихЛиц.ПаспортныеДанныеФизлица(ФизЛицо, ТекущаяДата());
		
		Реквизиты.Вставить("СерияНомер", "" + ДанныеПаспорта.Серия +" №"+ ДанныеПаспорта.Номер);
		Реквизиты.Вставить("Выдан", Формат(ДанныеПаспорта.ДатаВыдачи, "ДЛФ=D") + " " + ДанныеПаспорта.КемВыдан);
		Реквизиты.Вставить("ФИОКратко", ФизическиеЛица.ФамилияИнициалыФизЛица(Корреспондент.ПолноеНаименование));
		//Реквизиты.Вставить("НашТелефон", М_ПравилаАвтозаполненияШаблонов.ПолучитьТелефон());  
	КонецЕсли; 
	
	Возврат Реквизиты;
КонецФункции // ПолучитьРеквизитыФизЛица()

// Возвращает реквизиты ЮрЛиц корреспондентов
Функция ПолучитьДанныеЮрЛиц(МассивКорреспондентов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК Корреспондент,
		|	Корреспонденты.Наименование КАК НаименованиеКорр,
		|	Корреспонденты.ИНН КАК УНПКорр,
		|	Корреспонденты.КодПоОКПО КАК ОКПОКорр,
		|	Корреспонденты.ПолноеНаименование КАК ПолноеНаименованиеКорр,
		|	Корреспонденты.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчетаКорр,
		|	Корреспонденты.ОсновнойБанковскийСчет.Банк.Наименование КАК БанкКорр,
		|	Корреспонденты.ОсновнойБанковскийСчет.Банк.Код КАК КодБанкаКорр,
		|	Корреспонденты.ОсновнойБанковскийСчет.Банк.Адрес КАК БанкАдресКорр
		|ПОМЕСТИТЬ Заказчики
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|ГДЕ
		|	Корреспонденты.Ссылка В(&МассивКорреспондентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ЮридическийАдрес,
		|	КорреспондентыКонтактнаяИнформация.ЗначенияПолей,
		|	КорреспондентыКонтактнаяИнформация.Страна,
		|	КорреспондентыКонтактнаяИнформация.Регион,
		|	КорреспондентыКонтактнаяИнформация.Район,
		|	КорреспондентыКонтактнаяИнформация.Сельсовет,
		|	КорреспондентыКонтактнаяИнформация.Город,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ЮридическиеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ТелефонКорреспондента,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ Телефоны
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ПочтовыйАдрес,
		|	КорреспондентыКонтактнаяИнформация.ЗначенияПолей,
		|	КорреспондентыКонтактнаяИнформация.Страна,
		|	КорреспондентыКонтактнаяИнформация.Регион,
		|	КорреспондентыКонтактнаяИнформация.Район,
		|	КорреспондентыКонтактнаяИнформация.Сельсовет,
		|	КорреспондентыКонтактнаяИнформация.Город,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ПочтовыеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ФаксКорреспондента,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ Факсы
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В(&МассивКорреспондентов)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЮридическиеАдреса.ЮридическийАдрес, """") КАК ЮридическийАдрес,
		|	ЕСТЬNULL(Телефоны.ТелефонКорреспондента, """") КАК ТелефонКорреспондента,
		|	ЕСТЬNULL(Факсы.ФаксКорреспондента, """") КАК ФаксКорреспондента,
		|	ЕСТЬNULL(ПочтовыеАдреса.ПочтовыйАдрес, """") КАК ПочтовыйАдрес,
		|	Заказчики.Корреспондент,
		|	Заказчики.НаименованиеКорр КАК НаименованиеКорр,
		|	Заказчики.УНПКорр КАК УНПКорр,
		|	Заказчики.ОКПОКорр КАК ОКПОКорр,
		|	Заказчики.ПолноеНаименованиеКорр КАК ПолноеНаименованиеКорр,
		|	Заказчики.НомерСчетаКорр КАК НомерСчетаКорр,
		|	Заказчики.БанкКорр КАК БанкКорр,
		|	Заказчики.КодБанкаКорр КАК КодБанкаКорр,
		|	Заказчики.БанкАдресКорр КАК БанкАдресКорр
		|ИЗ
		|	Заказчики КАК Заказчики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЮридическиеАдреса КАК ЮридическиеАдреса
		|		ПО Заказчики.Корреспондент = ЮридическиеАдреса.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Телефоны КАК Телефоны
		|		ПО Заказчики.Корреспондент = Телефоны.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПочтовыеАдреса КАК ПочтовыеАдреса
		|		ПО Заказчики.Корреспондент = ПочтовыеАдреса.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Факсы КАК Факсы
		|		ПО Заказчики.Корреспондент = Факсы.Корреспондент";
		
	Запрос.УстановитьПараметр("МассивКорреспондентов", МассивКорреспондентов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
КонецФункции // ПолучитьДанныеЮрЛиц()

Функция ЭтоФизЛицо(Корреспондент) Экспорт
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // ()

// Дней - число,
// ВидДней - перечисление.ВидыДней
Функция ДлительностьВыполненияРаботСтрокой(Дней, ВидДней) Экспорт
	Если Дней <= 0 Тогда
		Сообщить("Не задана длительность выполнения работ!");
		Возврат "";
	КонецЕсли; 
	
	СтрокаТекста = "" + Дней;
	ЧислоЕдиницДней = Дней - Цел(Дней/10)*10;
	Если ЧислоЕдиницДней = 1 Тогда
		Если ВидДней = Перечисления.ВидыДней.Календарные Тогда
			СтрокаТекста = СтрокаТекста + " календарного дня";
		Иначе
			СтрокаТекста = СтрокаТекста + " рабочего дня";
		КонецЕсли; 
	Иначе
		Если ВидДней = Перечисления.ВидыДней.Календарные Тогда
			СтрокаТекста = СтрокаТекста + " календарных дней";
		Иначе
			СтрокаТекста = СтрокаТекста + " рабочих дней";
		КонецЕсли; 
	КонецЕсли;
	Возврат СтрокаТекста;
КонецФункции

Функция ПолучитьИмеющихПравоПодписи(Организация, ВидДокумента) Экспорт
// Первым в массиве стоит пользователь по умолчанию	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мИмеютПравоПодписи.Пользователь КАК Пользователь,
		|	мИмеютПравоПодписи.ПоУмолчанию КАК ПоУмолчанию
		|ИЗ
		|	РегистрСведений.мИмеютПравоПодписи КАК мИмеютПравоПодписи
		|ГДЕ
		|	мИмеютПравоПодписи.ВидДокумента = &ВидДокумента
		|	И мИмеютПравоПодписи.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоУмолчанию УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивПодписантов = Новый Массив;

	Пока Выборка.Следующий() Цикл
		МассивПодписантов.Добавить(Выборка.Пользователь);
	КонецЦикла; 
	
	Возврат МассивПодписантов;
	
КонецФункции 

// Параметр - Структура
//		НаДату - на начало даты
//		Корреспондент, Договор, Этап
// Возвращает сумму + мы должны, - нам должны
Функция ПолучитьСуммуЗадолженности(Параметр) Экспорт
	
	ОтборКорреспондент = Неопределено;
	ОтборДоговор = Неопределено;
	ОтборЭтапДоговора = Неопределено;
	
	Если Параметр.Свойство("НаДату") Тогда
		НаДату = Параметр.НаДату;
	Иначе
		НаДату = Неопределено;
	КонецЕсли; 
	
	Если Параметр.Свойство("Корреспондент") Тогда
		ОтборКорреспондент = Параметр.Корреспондент;
		
		Если Параметр.Свойство("Договор") Тогда
			ОтборДоговор = Параметр.Договор;
			
			Если Параметр.Свойство("ЭтапДоговора") Тогда
				ОтборЭтапДоговора = Параметр.ЭтапДоговора;
			КонецЕсли;
		Иначе
			
			Если Параметр.Свойство("ЭтапДоговора") Тогда
				ОтборДоговор = Параметр.ЭтапДоговора.Владелец;
				ОтборЭтапДоговора = Параметр.ЭтапДоговора;
				ОтборКорреспондент = ОтборДоговор.Корреспондент;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Если Параметр.Свойство("Договор") Тогда
			ОтборКорреспондент = Параметр.Договор.Корреспондент;
			ОтборДоговор = Параметр.Договор;
			
			Если Параметр.Свойство("ЭтапДоговора") Тогда
				ОтборЭтапДоговора = Параметр.ЭтапДоговора;
			КонецЕсли;
		Иначе	
			Если Параметр.Свойство("ЭтапДоговора") Тогда
				ОтборЭтапДоговора = Параметр.ЭтапДоговора;
				ОтборДоговор = Параметр.ЭтапДоговора.Владелец;
				ОтборКорреспондент = ОтборДоговор.Корреспондент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК Остаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&НаДату,";
		
		Если ЗначениеЗаполнено(ОтборЭтапДоговора) Тогда
			Запрос.Текст = Запрос.Текст + "
			|			Корреспондент = &Корреспондент
			|				И Договор = &Договор
			|				И ЭтапДоговора = &ЭтапДоговора) КАК РасчетыСПокупателямиОстатки";
			Запрос.УстановитьПараметр("Корреспондент", ОтборКорреспондент);
			Запрос.УстановитьПараметр("Договор", ОтборДоговор);
			Запрос.УстановитьПараметр("ЭтапДоговора", ОтборЭтапДоговора);
			
		ИначеЕсли ЗначениеЗаполнено(ОтборДоговор) Тогда
			Запрос.Текст = Запрос.Текст + "
			|			Корреспондент = &Корреспондент
			|				И Договор = &Договор) КАК РасчетыСПокупателямиОстатки";
			Запрос.УстановитьПараметр("Корреспондент", ОтборКорреспондент);
			Запрос.УстановитьПараметр("Договор", ОтборДоговор);
			
		ИначеЕсли ЗначениеЗаполнено(ОтборКорреспондент) Тогда
			Запрос.Текст = Запрос.Текст + "
			|			Корреспондент = &Корреспондент) КАК РасчетыСПокупателямиОстатки";
			Запрос.УстановитьПараметр("Корреспондент", ОтборКорреспондент);
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|			) КАК РасчетыСПокупателямиОстатки";
		КонецЕсли; 		
	
	Запрос.УстановитьПараметр("НаДату", Параметр.НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Остаток;
	
КонецФункции // ПолучитьСуммуЗадолженности()

Функция ЭтоДопСоглашение(СсылкаВнутреннийДокумент) Экспорт
    ЭтоДоп = Ложь;
    
    Если СсылкаВнутреннийДокумент.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДопСоглашения Тогда
        ЭтоДоп = Истина;
    КонецЕсли;  
	
	Возврат ЭтоДоп;
	
КонецФункции // ЭтоДопСоглашение(СсылкаВнутреннийДокумент)

// Возвращает Истина, если ИмяГорода = Минск или областной город
Функция ЭтоГород(Знач ИмяГорода) Экспорт
    // нет ничего - считаем, что область
    Если Не ЗначениеЗаполнено(ИмяГорода) Тогда
        Возврат Ложь;
	КонецЕсли;
	
	ЭтоГород = Ложь;
	Если Найти(ИмяГорода, "Минск") > 0 Тогда
		ЭтоГород = Истина;
	ИначеЕсли Найти(ИмяГорода, "Брест") > 0 Тогда
		ЭтоГород = Истина;
	ИначеЕсли Найти(ИмяГорода, "Витебск") > 0 Тогда
		ЭтоГород = Истина;
	ИначеЕсли Найти(ИмяГорода, "Гомель") > 0 Тогда
		ЭтоГород = Истина;
	ИначеЕсли Найти(ИмяГорода, "Гродно") > 0 Тогда
		ЭтоГород = Истина;
	ИначеЕсли Найти(ИмяГорода, "Могилев") > 0 Тогда
		ЭтоГород = Истина;
    КонецЕсли;
	
    Возврат ЭтоГород;	
КонецФункции

Функция СуммаЧисломИПрописью(Сумма, Валюта="", ВыводитьСуммуБезКопеек = Ложь, БезПрописи = Ложь) Экспорт
	
	Если Валюта="" Тогда
		Валюта = Константы.ОсновнаяВалюта.Получить();	
	КонецЕсли; 
	
	// Сумма 125,37 бел.руб. (Сто двадцать пять белорусских рублей 37 копеек) письмо Белагропромбанка
	Если Валюта.Код = "933" Тогда
		СуммаПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта, Ложь);
        Если БезПрописи Тогда
            ЧтоУдалять = ЧислоПрописью(Цел(Сумма), "Л=ru_RU;ДП=Ложь");
            ЧтоУдалять = Лев(ЧтоУдалять, СтрДлина(ЧтоУдалять)-4);
        	СтрокаРублейКопеек = СтрЗаменить(СуммаПрописьюПолная, ЧтоУдалять, "");
            Возврат ""+Формат(Сумма, "ЧДЦ=2")+" "+СтрокаРублейКопеек; 
        Иначе
            Возврат ""+Формат(Сумма, "ЧДЦ=2")+" руб. ("+СуммаПрописьюПолная+")"; 
        КонецЕсли; 
		
	ИначеЕсли Валюта.Код = "974" Тогда
		СуммаПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Окр(Сумма), Валюта, Истина);
        Если БезПрописи Тогда
            ЧтоУдалять = ЧислоПрописью(Цел(Сумма), "Л=ru_RU;ДП=Ложь");
            ЧтоУдалять = Лев(ЧтоУдалять, СтрДлина(ЧтоУдалять)-4);
        	СтрокаРублейКопеек = СтрЗаменить(СуммаПрописьюПолная, ЧтоУдалять, "");
            Возврат ""+Формат(Сумма, "ЧДЦ=0")+" "+СтрокаРублейКопеек; 
        Иначе
            Возврат ""+Окр(Сумма)+" руб. ("+СуммаПрописьюПолная+")"; 
        КонецЕсли; 
		
	Иначе	
		СуммаПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта, Ложь);
		Возврат ""+Сумма+" ("+СуммаПрописьюПолная+")"; 
	КонецЕсли; 
	
	//ПозицияРублей = Найти(СуммаПрописьюПолная, "бело");
	//
	//Если БезПрописи Тогда
	//	Если ПозицияРублей > 0 Тогда
	//		СуммаПрописью = Лев(СуммаПрописьюПолная, ПозицияРублей-2);
	//		Рубли = СокрП(Сред(СуммаПрописьюПолная, ПозицияРублей));
	//		Результат = "" + Сумма + " " + Рубли; 		
	//	Иначе
	//		ПозицияРублей = Найти(СуммаПрописьюПолная, "руб");
	//		Если ПозицияРублей > 0 Тогда
	//			СуммаПрописью = Лев(СуммаПрописьюПолная, ПозицияРублей-2);
	//			Рубли = СокрП(Сред(СуммаПрописьюПолная, ПозицияРублей));
	//			Результат = "" + Сумма + " " + Рубли; 		
	//		Иначе
	//			Результат = "" + Сумма; 		
	//		КонецЕсли; 
	//	КонецЕсли; 
	//Иначе
	//	Если ПозицияРублей > 0 Тогда
	//		СуммаПрописью = Лев(СуммаПрописьюПолная, ПозицияРублей-2);
	//		Рубли = СокрП(Сред(СуммаПрописьюПолная, ПозицияРублей));
	//		Результат = "" + Сумма + " (" + СуммаПрописью + ") " + Рубли; 		
	//	Иначе
	//		ПозицияРублей = Найти(СуммаПрописьюПолная, "руб");
	//		Если ПозицияРублей > 0 Тогда
	//			СуммаПрописью = Лев(СуммаПрописьюПолная, ПозицияРублей-2);
	//			Рубли = СокрП(Сред(СуммаПрописьюПолная, ПозицияРублей));
	//			Результат = "" + Сумма + " (" + СуммаПрописью + ") " + Рубли; 		
	//		Иначе
	//			Результат = "" + Сумма + " (" + СуммаПрописьюПолная + ") "; 		
	//		КонецЕсли; 
	//	КонецЕсли; 
	//КонецЕсли; 
		
	//Возврат Результат;
КонецФункции // СуммаЧисломИПрописью()

Функция СформироватьСуммуПрописью(Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	Возврат РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта, ВыводитьСуммуБезКопеек);
КонецФункции 

// Возвращает порядковый номер
//
// Параметры:
//  Номер  - <Число> - Число, порядковый ноер которого надо получить
//  Падеж - 1 - Именительный, 2-Родительный, 3-Дательный (вместо второй-другой "стороны") 
//  Род - м - мужской, ж - женский 
//
// Возвращаемое значение:
//   <Строка>   - порядковый номер
//
Функция ПорядковыйНомер(Номер, Падеж = 1, Род = "м") Экспорт
	
	Если Не ЗначениеЗаполнено(Номер) или Номер > 999 Тогда
		Возврат "";	
	КонецЕсли; 
	
    //Массив = Новый Массив ();
    Если Падеж = 1 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "первый,второй,третий,четвертый,пятый,шестой,седьмой,восьмой,девятый,десятый,
            |одиннадцатый,двенадцатый,тринадцатый,четырнадцатый,пятнадцатый,шестнадцатый,семнадцатый,восемнадцатый,девятнадцатый,двадцатый";
        Иначе
            СтрокаЗнач = "первая,вторая,третья,четвертая,пятая,шестая,седьмая,восьмая,девятая,десятая,
            |одиннадцатая,двенадцатая,тринадцатая,четырнадцатая,пятнадцатая,шестнадцатая,семнадцатая,восемнадцатая,девятнадцатая,двадцатая";
        КонецЕсли; 
	ИначеЕсли Падеж = 2 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "первого,второго,третьего,четвертого,пятого,шестого,седьмого,восьмого,девятого,десятого,
            |одиннадцатого,двенадцатого,тринадцатого,четырнадцатого,пятнадцатого,шестнадцатого,семнадцатого,восемнадцатого,девятнадцатого,двадцатого";
        Иначе
             СтрокаЗнач = "первой,второй,третьей,четвертой,пятой,шестой,седьмой,восьмой,девятой,десятой,
            |одиннадцатой,двенадцатой,тринадцатой,четырнадцатой,пятнадцатой,шестнадцатой,семнадцатой,восемнадцатой,девятнадцатой,двадцатой";
        КонецЕсли; 
	ИначеЕсли Падеж = 3 Тогда
        Если Род = "м" Тогда
             СтрокаЗнач = "первому,второму,третьему,четвертому,пятому,шестому,седьмому,восьмому,девятому,десятому,
            |одиннадцатому,двенадцатому,тринадцатому,четырнадцатому,пятнадцатому,шестнадцатому,семнадцатому,восемнадцатому,девятнадцатому,двадцатому";
        Иначе
             СтрокаЗнач = "первой,другой,третьей,четвертой,пятой,шестой,седьмой,восьмой,девятой,десятой,
            |одиннадцатой,двенадцатой,тринадцатой,четырнадцатой,пятнадцатой,шестнадцатой,семнадцатой,восемнадцатой,девятнадцатой,двадцатой";
        КонецЕсли; 
    КонецЕсли; 
    
    Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗнач);
	
    //Массив10 = Новый Массив ();
	Если Падеж = 1 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "десятый,двадцатый,тридцатый,сороковой,пятидесятый,шестидесятый,семидесятый,восьмидесятый,девяностый";
        Иначе
            СтрокаЗнач = "десятая,двадцатая,тридцатая,сороковая,пятидесятая,шестидесятая,семидесятая,восьмидесятая,девяностая";
        КонецЕсли; 
	ИначеЕсли Падеж = 2 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "десятого,двадцатого,тридцатого,сорокового,пятидесятого,шестидесятого,семидесятого,восьмидесятого,девяностого";
        Иначе
            СтрокаЗнач = "десятой,двадцатой,тридцатой,сороковой,пятидесятой,шестидесятой,семидесятой,восьмидесятой,девяностой";
        КонецЕсли; 
	ИначеЕсли Падеж = 3 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "десятому,двадцатому,тридцатому,сороковому,пятидесятому,шестидесятому,семидесятому,восьмидесятому,девяностому";
        Иначе
            СтрокаЗнач = "десятой,двадцатой,тридцатой,сороковой,пятидесятой,шестидесятой,семидесятой,восьмидесятой,девяностой";
        КонецЕсли; 
    КонецЕсли;
    
    Массив10 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗнач);
    
    Массив100 = Новый Массив ();
	Если Падеж = 1 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "сотый,двухсотый,трехсотый,четырехсотый,пятисотый,шестисотый,семисотый,восьмисотый,девятисотый";
        Иначе
            СтрокаЗнач = "сотая,двухсотая,трехсотая,четырехсотая,пятисотая,шестисотая,семисотая,восьмисотая,девятисотая";
        КонецЕсли; 
	ИначеЕсли Падеж = 2 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "сотого,двухсотого,трехсотого,четырехсотого,пятисотого,шестисотого,семисотого,восьмисотого,девятисотого";
        Иначе
            СтрокаЗнач = "сотой,двухсотой,трехсотой,четырехсотой,пятисотой,шестисотой,семисотой,восьмисотой,девятисотой";
        КонецЕсли; 
	ИначеЕсли Падеж = 3 Тогда
        Если Род = "м" Тогда
            СтрокаЗнач = "сотому,двухсотому,трехсотому,четырехсотому,пятисотому,шестисотому,семисотому,восьмисотому,девятисотому";
        Иначе
            СтрокаЗнач = "сотой,двухсотой,трехсотой,четырехсотой,пятисотой,шестисотой,семисотой,восьмисотой,девятисотой";
        КонецЕсли; 
    КонецЕсли; 
    
    Массив100 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗнач);
    
	Если Номер <= 20 Тогда
		Возврат Массив[Номер-1];
	Иначе
		Кратно10 = ?(Номер%10 = 0, Истина, Ложь);
		
		Если Номер >= 100 Тогда
			Кратно100 = ?(Номер%100 = 0, Истина, Ложь);
			Если Кратно100 Тогда
				Индекс100 = Цел(Номер/100)-1;
				Возврат Массив100[Индекс100]; // сотый
				
			ИначеЕсли Кратно10 Тогда
				Знач100 = Цел(Номер/100)*100;
				Индекс10 = Цел((Номер - Знач100)/10)*10 - 1;
				Возврат ЧислоПрописью(Знач100, ,",,,,,,,,0") + Массив10[Индекс10]; // сто десятый
			Иначе
				Знач100 = Цел(Номер/100)*100;
				Знач10 = Цел((Номер - Знач100)/10)*10;
				Если Знач10 < 20 Тогда
					Индекс = Номер - Знач100 - 1;
					Возврат ЧислоПрописью(Знач100, ,",,,,,,,,0") + Массив[Индекс]; // сто первый 
				Иначе	
					Индекс = Номер - Знач100 - Знач10 - 1;
					Возврат ЧислоПрописью(Знач100+Знач10, ,",,,,,,,,0") + Массив[Индекс]; // сто двадцать первый 
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			Если Кратно10 Тогда
				Индекс10 = Цел(Номер/10) - 1;
				Возврат Массив10[Индекс10]; // тридцатый
			Иначе
				Знач10 = Цел(Номер/10)*10;         
				Индекс = Номер - Знач10 - 1;
				Возврат ЧислоПрописью(Знач10, ,",,,,,,,,0") + Массив[Индекс]; // тридцать первый 
			КонецЕсли;			
		КонецЕсли; 
	КонецЕсли; 
	Возврат "";
КонецФункции // ПорядковыйНомер()

// Возвращает количество экземпляров в родительном падеже (двух, трех, пяти) для подстановки 
//    в договорах "Настоящий договор составлен на 2 (двух) листах в <двух> экземплярах"
//
// Параметры:
//  Номер  - <Число> - Число, количество экземпляров
//  Падеж - 1 - Именительный, 2-Родительный, 3-Дательный (вместо второй-другой "стороны") 
//
// Возвращаемое значение:
//   <Строка>   - порядковый номер
//
Функция КоличествоЭкземпляровДляДоговоров(Номер) Экспорт
	
	Если Не ЗначениеЗаполнено(Номер) или Номер > 999 Тогда
		Возврат "";	
	КонецЕсли; 
	
	Массив = Новый Массив ();
    Массив.Добавить("одном");
    Массив.Добавить("двух");
    Массив.Добавить("трех");
    Массив.Добавить("четырех");
    Массив.Добавить("пяти");
    Массив.Добавить("шести");
    Массив.Добавить("семи");
    Массив.Добавить("восьми");
    Массив.Добавить("девяти");
    Массив.Добавить("десяти");
    Массив.Добавить("одиннадцати");
    Массив.Добавить("двенадцати");
    Массив.Добавить("тринадцати");
    Массив.Добавить("четырнадцати");
    Массив.Добавить("пятнадцати");
    Массив.Добавить("шестнадцати");
    Массив.Добавить("семнадцати");
    Массив.Добавить("восемнадцати");
    Массив.Добавить("девятнадцати");
    Массив.Добавить("двадцати");
    
	Массив10 = Новый Массив ();
    Массив10.Добавить("десяти");
    Массив10.Добавить("двадцати");
    Массив10.Добавить("тридцати");
    Массив10.Добавить("сорока");
    Массив10.Добавить("пятидесяти");
    Массив10.Добавить("шестидесяти");
    Массив10.Добавить("семидесяти");
    Массив10.Добавить("восьмидесяти");
    Массив10.Добавить("девяноста");
		
	Массив100 = Новый Массив ();
    Массив100.Добавить("ста");
    Массив100.Добавить("двухста");
    Массив100.Добавить("трехста");
    Массив100.Добавить("четырехста");
    Массив100.Добавить("пятиста");
    Массив100.Добавить("шестиста");
    Массив100.Добавить("семиста");
    Массив100.Добавить("восьмиста");
    Массив100.Добавить("девятиста");

	Если Номер <= 20 Тогда
		Возврат Массив[Номер-1];
	Иначе
		Кратно10 = ?(Номер%10 = 0, Истина, Ложь);
		
		Если Номер >= 100 Тогда
			Кратно100 = ?(Номер%100 = 0, Истина, Ложь);
			Если Кратно100 Тогда
				Индекс100 = Цел(Номер/100)-1;
				Возврат Массив100[Индекс100]; // сотый
				
			ИначеЕсли Кратно10 Тогда
				Знач100 = Цел(Номер/100)*100;
				Индекс10 = Цел((Номер - Знач100)/10)*10 - 1;
				Возврат ЧислоПрописью(Знач100, ,",,,,,,,,0") + Массив10[Индекс10]; // сто десятый
			Иначе
				Знач100 = Цел(Номер/100)*100;
				Знач10 = Цел((Номер - Знач100)/10)*10;
				Если Знач10 < 20 Тогда
					Индекс = Номер - Знач100 - 1;
					Возврат ЧислоПрописью(Знач100, ,",,,,,,,,0") + Массив[Индекс]; // сто первый 
				Иначе	
					Индекс = Номер - Знач100 - Знач10 - 1;
					Возврат ЧислоПрописью(Знач100+Знач10, ,",,,,,,,,0") + Массив[Индекс]; // сто двадцать первый 
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			Если Кратно10 Тогда
				Индекс10 = Цел(Номер/10) - 1;
				Возврат Массив10[Индекс10]; // тридцатый
			Иначе
				Знач10 = Цел(Номер/10)*10;         
				Индекс = Номер - Знач10 - 1;
				Возврат ЧислоПрописью(Знач10, ,",,,,,,,,0") + Массив[Индекс]; // тридцать первый 
			КонецЕсли;			
		КонецЕсли; 
	КонецЕсли; 
	Возврат "";
КонецФункции // КоличествоЭкземпляровДляДоговоров()

//Преобразует строку XML в объект XDTO
Функция ПолучитьXDTOКонтактная(СтрокаКИ)
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(СтрокаКИ)	Тогда
		РезультатыЧтения = Новый Структура;
		ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
		XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(СтрокаКИ, ТипКонтактнойИнформации, РезультатыЧтения);
		//Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
		//	// Распознали с ошибками, сообщим при открытии
		//	ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
		//	XDTOКонтактная.Представление = Параметры.Представление;
		//	XDTOКонтактная.Состав.Страна = Строка(СтранаРоссия);
		//КонецЕсли;
	Иначе
	    XDTOКонтактная = КонтактнаяИнформацияСлужебный.ДесериализацияАдреса(СтрокаКИ, "", );
	КонецЕсли;
	
	Возврат XDTOКонтактная;

КонецФункции // ПолучитьЗначениеРеквизитовПоКонтактнойИнформации()

// Получает нужные реквизиты из XDTO
Функция ПолучитьЗначениеРеквизитовПоКонтактнойИнформации(СтруктураРеквизитов, XDTOКонтактная)
	ДанныеАдреса = XDTOКонтактная.Состав;
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
	
		Если Реквизит.Ключ = "Страна" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.СтранаФ);
		ИначеЕсли Реквизит.Ключ = "Область" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.Состав.СубъектРФ);
		ИначеЕсли Реквизит.Ключ = "Район" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.Состав.СвРайМО.Район);
		ИначеЕсли Реквизит.Ключ = "Сельсовет" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.Состав.Город);
		ИначеЕсли Реквизит.Ключ = "НаселенныйПункт" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.Состав.НаселПункт);
		ИначеЕсли Реквизит.Ключ = "Улица" Тогда
			СтруктураРеквизитов.Вставить(Реквизит.Ключ, ДанныеАдреса.Состав.Улица);
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьЗначениеРеквизитовПоКонтактнойИнформации()

	
#КонецОбласти 

Функция ОплатаСУчетомДеноминации(Договор, ЭтапДоговора = Неопределено) Экспорт
	Сумма = 0;	
	Если Не ЗначениеЗаполнено(Договор) И Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат Сумма;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОбороты.Договор,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора,
		|	ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(19, 2)) КАК СуммаДо,
		|	0 КАК СуммаПосле
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			,
		|			&ДатаДо,
		|			Период,
		|			Договор = &Договор	И ЭтапДоговора = &ЭтапДоговора) КАК РасчетыСПокупателямиОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОбороты.Договор,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора,
		|	0,
		|	РасчетыСПокупателямиОбороты.СуммаПриход
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			&ДатаПосле,
		|			,
		|			Период,
		|			Договор = &Договор
		|				И ЭтапДоговора = &ЭтапДоговора) КАК РасчетыСПокупателямиОбороты";
	
	Запрос.УстановитьПараметр("ДатаДо", КонецДня(Дата(2016,6,30)));
	Запрос.УстановитьПараметр("ДатаПосле", Дата(2016,7,2));
	
	Если Договор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Договор = &Договор", "");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭтапДоговора", "ЭтапДоговора");	
	Иначе
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли; 
	Если ЭтапДоговора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭтапДоговора = &ЭтапДоговора", "");	
	Иначе
		Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Сумма;
	КонецЕсли; 
	
	Сумма = Результат.Итог("СуммаДо")+Результат.Итог("СуммаПосле");	
	
	Возврат Сумма;
	
КонецФункции 

Функция ПолучитьСметнуюСтоимостьСУчетомДеноминацииНаДату(НаНачалоДня, Договор = Неопределено, ЭтапДоговора = Неопределено) Экспорт

	СметнаяСтоимость = 0;
	Если Не ЗначениеЗаполнено(Договор) И Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат СметнаяСтоимость;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоровОбороты.Договор,
		|	УчетДоговоровОбороты.ЭтапДоговора,
		|	ВЫБОР
		|		КОГДА УчетДоговоровОбороты.ЭтапДоговора.ДатаПоследнейЗаписи < &ДатаДеноминации
		|				И НЕ УчетДоговоровОбороты.ЭтапДоговора.Комментарий ПОДОБНО ""%#Деном%""
		|			ТОГДА ВЫРАЗИТЬ(УчетДоговоровОбороты.СуммаПриход / 10000 КАК ЧИСЛО(19, 2))
		|		ИНАЧЕ УчетДоговоровОбороты.СуммаПриход
		|	КОНЕЦ КАК СметнаяСтоимость,
		|	УчетДоговоровОбороты.ЭтапДоговора.ДатаПоследнейЗаписи КАК ДатаПоследнейЗаписи,
		|	УчетДоговоровОбороты.ЭтапДоговора.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрНакопления.УчетДоговоров.Обороты(
		|			,
		|			&Дата2,
		|			Период,
		|			Договор = &Договор
		|				И ЭтапДоговора = &ЭтапДоговора) КАК УчетДоговоровОбороты";
	
	Если Договор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Договор = &Договор", "");	
	Иначе
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли; 
	Если ЭтапДоговора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭтапДоговора = &ЭтапДоговора", "");	
	Иначе
		Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	КонецЕсли; 
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016,7,1));
	Запрос.УстановитьПараметр("Дата2", КонецДня(НаНачалоДня));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат СметнаяСтоимость;
	КонецЕсли; 
	
	Если ЭтапДоговора = Неопределено Тогда
		СметнаяСтоимость = Результат.Итог("СметнаяСтоимость");
	Иначе
		Отбор = Новый Структура("ЭтапДоговора", ЭтапДоговора); 
		ИскСтроки = Результат.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			СметнаяСтоимость = ИскСтроки[0].СметнаяСтоимость;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СметнаяСтоимость;

КонецФункции 

Функция ЯвляетсяДоговором(ВидДокумента) Экспорт
	Возврат ВидДокумента.ЯвляетсяДоговором;
КонецФункции
	
// Возвращает ТаблицуЗначений с колонками:
//  ДатаАкта - Дата,
//  НомерАкта - Номер акта
//
// Входные параметры:
//  ЭтапДоговора - СправочникСсылка.ЭтапыДоговоров - Этап договора, для которого ищется акт
//
Функция ПолучитьАктыГотовностиДляЭтапаДоговора(ЭтапДоговора) Экспорт
    Тз = Новый ТаблицаЗначений;
    Тз.Колонки.Добавить("ДатаАкта", Новый ОписаниеТипов("Дата"));
    Тз.Колонки.Добавить("НомерАкта", Новый ОписаниеТипов("Строка"));
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мАктированиеАкты.НомерАкта,
        |   мАктированиеАкты.ДатаАкта
        |ИЗ
        |   Документ.мАктирование.Акты КАК мАктированиеАкты
        |ГДЕ
        |   мАктированиеАкты.Ссылка.Проведен
        |   И мАктированиеАкты.ЭтапДоговора = &ЭтапДоговора";

    Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);

    РезультатЗапроса = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СтрокаАкта = Тз.Добавить();
        ЗаполнитьЗначенияСвойств(СтрокаАкта, ВыборкаДетальныеЗаписи);
    КонецЦикла;

    Возврат Тз;
КонецФункции // ПолучитьАктыГотовностиДляЭтапаДоговора()

// Возвращает список договоров по номеру 
Функция ПолучитьСписокДоговоровПоНомеру(НомерДоговора) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ВнутренниеДокументы.Ссылка КАК Договор,
        |   ВнутренниеДокументы.Корреспондент,
        |   ВнутренниеДокументы.ДатаРегистрации КАК ДатаРегистрации
        |ИЗ
        |   Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
        |ГДЕ
        |   (ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО &ИскНомер ИЛИ ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО &ИскНомер1) 
        |   И ВнутренниеДокументы.ВидДокумента В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот))
        |   И ВнутренниеДокументы.ВидДокумента.Наименование ПОДОБНО ""Договор%""
        |
        |СГРУППИРОВАТЬ ПО
        |   ВнутренниеДокументы.Ссылка,
        |   ВнутренниеДокументы.Корреспондент,
        |   ВнутренниеДокументы.ДатаРегистрации
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаРегистрации УБЫВ";
        
        
	Запрос.УстановитьПараметр("ИскНомер", СокрЛП(НомерДоговора)+"[^0123456789]%");
	Запрос.УстановитьПараметр("ИскНомер1", СокрЛП(НомерДоговора));

	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокДоговоров = Новый СписокЗначений;
    
    Пока Выборка.Следующий() Цикл
		Представление = "" + Формат(Выборка.ДатаРегистрации, "ДЛФ=D") + " " + Выборка.Корреспондент;
		Значение = Выборка.Договор;
		СписокДоговоров.Добавить(Значение, Представление);
    КонецЦикла; 
	
	Возврат СписокДоговоров;
	
КонецФункции // ПолучитьСписокДоговоровПоНомеру()

Функция ПолучитьСписокДоговоровПоКорреспонденту(Корреспондент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнутренниеДокументы.Ссылка КАК Договор,
		|	ВнутренниеДокументы.Корреспондент,
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	ВнутренниеДокументы.РегистрационныйНомер
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Корреспондент = &Корреспондент
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.Корреспондент,
		|	ВнутренниеДокументы.ДатаРегистрации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРегистрации УБЫВ";

	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);

	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокДоговоров = Новый СписокЗначений;
	
	Для каждого Строка Из Результат Цикл
	
		Представление = "" + Формат(Строка.ДатаРегистрации, "ДЛФ=D") + " Рег. № " + Строка.РегистрационныйНомер;
		Значение = Строка.Договор;
		СписокДоговоров.Добавить(Значение, Представление);
	КонецЦикла; 
	
	Возврат СписокДоговоров;
	
КонецФункции // ПолучитьСписокДоговоровПоКорреспонденту()

Функция ПолучитьДоговорСвязанногоДокумента(СсылкаВнутреннийДокумент) Экспорт
    
    Возврат СвязиДокументов.ПолучитьСвязанныйДокумент(СсылкаВнутреннийДокумент, Справочники.ТипыСвязей.ОтноситсяКДоговору);
	
КонецФункции 

Функция ПолучитьДоговорЭтапа(ЭтапДоговора) Экспорт
	Возврат ЭтапДоговора.Владелец;	
КонецФункции

Функция ПолучитьДопСоглашенияДоговора(СсылкаВнутреннийДокумент) Экспорт
	СвязанныеДокументы = СвязиДокументов.ПолучитьСвязанныеДокументы(СсылкаВнутреннийДокумент, Справочники.ТипыСвязей.Имеет);
	
	ДопСоглашения = Новый Массив;
	
	Для каждого Док Из СвязанныеДокументы Цикл
		Если Док.ВидДокумента = Справочники.ВидыВнутреннихДокументов.ДополнительноеСоглашениеДоговораЗемлеустроительныхРабот Тогда
			ДопСоглашения.Добавить(Док);
		КонецЕсли; 
	КонецЦикла; 
    Возврат ДопСоглашения;
	
КонецФункции 

Функция ПолучитьЭтапДоговораПоНомеру(Договор, НомерЭтапа) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мЭтапыДоговоров.Ссылка КАК ЭтапДоговора
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |ГДЕ
        |   мЭтапыДоговоров.Владелец = &Договор
        |   И мЭтапыДоговоров.НомерЭтапа = &НомерЭтапа
        |   И НЕ мЭтапыДоговоров.ПометкаУдаления
        |   И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)";
    
    Запрос.УстановитьПараметр("Договор", Договор);
    Запрос.УстановитьПараметр("НомерЭтапа", НомерЭтапа);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
    
        Возврат ВыборкаДетальныеЗаписи.ЭтапДоговора;	
    
    КонецЕсли;  
    
    Возврат Неопределено;
КонецФункции

Функция ПолучитьРеквизитыСтоимостиРаботДляФизЛиц(ВидРабот, Договор) Экспорт
	
	РеквСтоимости = Новый Структура("Стоимость, СуммаНДС, ОсвобождениеОтНДС, СтавкаНДС, Цена, ЗначениеСтавкиНДС",
		0, 0, Неопределено, Неопределено, 0, 0); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорреспондентыДополнительныеРеквизиты.Значение,
		|	КорреспондентыДополнительныеРеквизиты.Ссылка КАК ФизЛицо
		|ПОМЕСТИТЬ КатегорияФизЛица
		|ИЗ
		|	Справочник.Корреспонденты.ДополнительныеРеквизиты КАК КорреспондентыДополнительныеРеквизиты
		|ГДЕ
		|	КорреспондентыДополнительныеРеквизиты.Свойство.Наименование ПОДОБНО ""%Категории физлиц%""
		|	И КорреспондентыДополнительныеРеквизиты.Ссылка = &Корреспондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК ФизЛицо,
		|	ЕСТЬNULL(КатегорияФизЛица.Значение, ЗНАЧЕНИЕ(Справочник.ЗначенияСвойствОбъектов.ПустаяССылка)) КАК Категория
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ КатегорияФизЛица КАК КатегорияФизЛица
		|		ПО (КатегорияФизЛица.ФизЛицо = Корреспонденты.Ссылка)
		|ГДЕ
		|	Корреспонденты.Ссылка = &Корреспондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мПрейскурантСрезПоследних.Стоимость,
		|	мПрейскурантСрезПоследних.СуммаНДС,
		|	мПрейскурантСрезПоследних.ОсвобождениеОтНДС,
		|	мПрейскурантСрезПоследних.СтавкаНДС,
		|	мПрейскурантСрезПоследних.Цена,
		|	мПрейскурантСрезПоследних.СтавкаНДС.Ставка КАК ЗначениеСтавкиНДС
		|ИЗ
		|	РегистрСведений.мПрейскурант.СрезПоследних(
		|			&Дата,
		|			ВидРаботФизЛица = &ВидРаботПоДоговору
		|				И КатегорияФизЛиц В
		|					(ВЫБРАТЬ
		|						Данные.Категория
		|					ИЗ
		|						Данные КАК Данные)) КАК мПрейскурантСрезПоследних";

	Запрос.УстановитьПараметр("ВидРаботПоДоговору", ВидРабот);
	Запрос.УстановитьПараметр("Дата", Договор.ДатаРегистрации);
	Запрос.УстановитьПараметр("Корреспондент", Договор.Корреспондент);

	Результат = Запрос.Выполнить().Выгрузить();

	Если Результат.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(РеквСтоимости, Результат[0]);
		//Стоимость = Результат[0].Стоимость;
	КонецЕсли; 		
	
	Возврат РеквСтоимости;

КонецФункции 

// Возвращает массив Структур НомерЭтапа + ЭтапДоговора (ссылка)
// Параметы
//  ДоговорСсылка - Ссылка на Договор
Функция ПолучитьЭтапыДоговора(ДоговорСсылка) Экспорт
    
    МассивЭтапов = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |   мЭтапыДоговоров.НомерЭтапа
        |ИЗ
        |   Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |ГДЕ
        |   мЭтапыДоговоров.Владелец = &Договор
        |   И НЕ мЭтапыДоговоров.ПометкаУдаления
		|   И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)";
   
    Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        СтруктураЭлемента = Новый Структура("НомерЭтапа, ЭтапДоговора", ВыборкаДетальныеЗаписи.НомерЭтапа, ВыборкаДетальныеЗаписи.ЭтапДоговора); 
        МассивЭтапов.Добавить(СтруктураЭлемента);
    КонецЦикла;
    
    Возврат МассивЭтапов;
КонецФункции

Функция ПолучитьДелоЭтапаДоговора(ЭтапДоговора) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.Дело)
		|	И ВнутренниеДокументы.ЭтапДоговора = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции // ПолучитьДелоЭтапаДоговора(ЭтапДоговора)
 
Функция ПолучитьСписокЭтаповДоговора(ДоговорСсылка, ВидПредставления = "Этап") Экспорт
    
    СписокЭтапов = Новый СписокЗначений;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
        |	ЕСТЬNULL(ВнутренниеДокументы.РегистрационныйНомер, """") КАК РегистрационныйНомер,
        |	мЭтапыДоговоров.ОбъектРабот.Наименование КАК ОбъектРабот
        |ИЗ
        |	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
        |		ПО мЭтапыДоговоров.Ссылка = ВнутренниеДокументы.ЭтапДоговора
        |			И (ВнутренниеДокументы.ВидДокумента = &ВидДокумента)
        |ГДЕ
        |	мЭтапыДоговоров.Владелец = &Договор
        |	И НЕ мЭтапыДоговоров.ПометкаУдаления
        |	И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)";
    
    Запрос.УстановитьПараметр("Договор", ДоговорСсылка);
	
	Если ВидПредставления = "Акт" Тогда
	    Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
		
	ИначеЕсли ВидПредставления = "Дело" Тогда
	    Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.Дело);
		
	ИначеЕсли ВидПредставления = "ДелоУслуги" Тогда
	    Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДелоУслуги);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ВнутренниеДокументы.РегистрационныйНомер, """") КАК РегистрационныйНомер,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы", ""); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО мЭтапыДоговоров.Ссылка = ВнутренниеДокументы.ЭтапДоговора", ""); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ВнутренниеДокументы.ВидДокумента = &ВидДокумента)", ""); 
	КонецЕсли; 
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Если ВидПредставления = "Этап" Тогда
            Представление = Строка(ВыборкаДетальныеЗаписи.ЭтапДоговора);
            Представление = Представление + " " + ВыборкаДетальныеЗаписи.ОбъектРабот;
			
		ИначеЕсли ВидПредставления = "Акт" 
			ИЛИ ВидПредставления = "Дело" 
			ИЛИ ВидПредставления = "ДелоУслуги" Тогда
            Представление = Строка(ВыборкаДетальныеЗаписи.ЭтапДоговора);
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РегистрационныйНомер) Тогда
            	Представление = "(" +ВыборкаДетальныеЗаписи.РегистрационныйНомер+") "+Представление;
			КонецЕсли; 
            Представление = Представление + " " + ВыборкаДетальныеЗаписи.ОбъектРабот;
        Иначе	
            Представление = Строка(ВыборкаДетальныеЗаписи.ОбъектРабот);
            Представление = Представление + " " + ВыборкаДетальныеЗаписи.ЭтапДоговора;
        КонецЕсли; 
        СписокЭтапов.Добавить(ВыборкаДетальныеЗаписи.ЭтапДоговора, Представление);
    КонецЦикла;
    
    СписокЭтапов.СортироватьПоПредставлению();
    
    Возврат СписокЭтапов;
КонецФункции

Функция ПолучитьТаблицуЭтаповДоговораСУчетомДатыПодписания(ДоговорСсылка) Экспорт
    
    //СписокЭтапов = Новый СписокЗначений;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	мЭтапыДоговоров.Ссылка КАК ЭтапДоговора
        |ПОМЕСТИТЬ Этапы
        |ИЗ
        |	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мУсловияДоговоров.СрезПоследних(, Договор = &Договор) КАК мУсловияДоговоровСрезПоследних
        |		ПО мЭтапыДоговоров.Ссылка = мУсловияДоговоровСрезПоследних.ЭтапДоговора
        |			И (мЭтапыДоговоров.Владелец = мЭтапыДоговоров.Владелец)
        |ГДЕ
        |	мЭтапыДоговоров.Владелец = &Договор
        |	И НЕ мЭтапыДоговоров.ПометкаУдаления
        |	И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
        |	И мУсловияДоговоровСрезПоследних.УчетДатыПодписания
        |	И НЕ мЭтапыДоговоров.ЗапретИзмененияПлановогоСрока
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	мДатыДоговоровСрезПоследних.ЭтапДоговора,
        |	МАКСИМУМ(мДатыДоговоровСрезПоследних.Период) КАК Период
        |ПОМЕСТИТЬ МаксДатыСроков
        |ИЗ
        |	РегистрСведений.мДатыДоговоров.СрезПоследних(
        |			,
        |			ЭтапДоговора В
        |					(ВЫБРАТЬ
        |						Этапы.ЭтапДоговора
        |					ИЗ
        |						Этапы КАК Этапы)
        |				И ВидДатыДоговора = ЗНАЧЕНИЕ(Справочник.мВидыДатДоговоров.ПлановыйСрок)) КАК мДатыДоговоровСрезПоследних
        |
        |СГРУППИРОВАТЬ ПО
        |	мДатыДоговоровСрезПоследних.ЭтапДоговора
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	МаксДатыСроков.ЭтапДоговора,
        |	мДатыДоговоровСрезПоследних.Дата
        |ПОМЕСТИТЬ ПлановыеСроки
        |ИЗ
        |	МаксДатыСроков КАК МаксДатыСроков
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мДатыДоговоров.СрезПоследних КАК мДатыДоговоровСрезПоследних
        |		ПО МаксДатыСроков.ЭтапДоговора = мДатыДоговоровСрезПоследних.ЭтапДоговора
        |			И МаксДатыСроков.Период = мДатыДоговоровСрезПоследних.Период
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Этапы.ЭтапДоговора КАК ЭтапДоговора,
        |	ЕСТЬNULL(ПлановыеСроки.Дата, НЕОПРЕДЕЛЕНО) КАК ПлановыйСрок
        |ИЗ
        |	Этапы КАК Этапы
        |		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеСроки КАК ПлановыеСроки
        |		ПО Этапы.ЭтапДоговора = ПлановыеСроки.ЭтапДоговора";
    
    Запрос.УстановитьПараметр("Договор", ДоговорСсылка);


    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    //ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    //
    //Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    //    СписокЭтапов.Добавить(ВыборкаДетальныеЗаписи.ЭтапДоговора);
    //КонецЦикла;
    
    Возврат РезультатЗапроса;
КонецФункции
 
// Записывает сметную стоимость этапов договора
// Параметы
//  ДоговорСсылка - Ссылка на Договор
Функция ОбработатьЗаписиЭтаповДоговора(ДоговорСсылка, ДатаПодписания) Экспорт
    
    Если Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    МассивЭтапыДоговора = ПолучитьЭтапыДоговора(ДоговорСсылка);
    
    Для каждого Элемент Из МассивЭтапыДоговора Цикл
        
        ЭтапСсылка = Элемент.ЭтапДоговора;
        ОбработатьЗаписьЭтапаДоговора(ЭтапСсылка, ДатаПодписания);
    
    КонецЦикла; 
    
    Возврат Истина;
    
КонецФункции

// Выполняет действия, необходимые при записи этапа договора
Функция ОбработатьЗаписьЭтапаДоговора(ЭтапДоговораСсылка, ДатаПодписания, Отказ = Ложь) Экспорт
    
    //// Запись ЭтапаДоговора в УчетДоговоров
    //ЗаписатьЭтапДоговораВУчетДоговоров(ЭтапДоговораСсылка, ДатаПодписания);
    //
    //ЗаписатьУсловияДоговораДляЭтапа(ЭтапДоговораСсылка, ДатаПодписания);
    
    //ЗаписатьСметнуюСтоимостьЭтапаДоговора(ЭтапДоговораСсылка, ДатаПодписания);
    
    //// Записать плановый срок этапа договора
    //ЗаписатьПлановыйСрокЭтапаДоговора(ЭтапДоговораСсылка, ДатаПодписания);
    
    // Синхронизация ИсточникФинансирования с КарточкойОбъектаРабот
    СинхронизироватьИсточникФинансированияЭтапаДоговора(ЭтапДоговораСсылка);
    
КонецФункции

// Синхронизация ИсточникФинансирования с КарточкойОбъектаРабот
Функция СинхронизироватьИсточникФинансированияЭтапаДоговора(ЭтапДоговораСсылка) Экспорт
    
    // Синхронизация ИсточникФинансирования с КарточкойОбъектаРабот
    Если ЗначениеЗаполнено(ЭтапДоговораСсылка.ИсточникФинансирования) Тогда
        Если ЗначениеЗаполнено(ЭтапДоговораСсылка.КарточкаОбъектаРабот) Тогда
            Если ЭтапДоговораСсылка.КарточкаОбъектаРабот.ИсточникФинансирования <> ЭтапДоговораСсылка.ИсточникФинансирования Тогда
                Карточка = ЭтапДоговораСсылка.КарточкаОбъектаРабот.ПолучитьОбъект();
                Карточка.ИсточникФинансирования = ЭтапДоговораСсылка.ИсточникФинансирования;
                Попытка
                    Карточка.Записать();
                Исключение
                    Сообщить("Не удалось записать Источник финансирования в Карточку объекта!");
                    Возврат Ложь;
                КонецПопытки;
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли;

    Возврат Истина;
КонецФункции

// Возвращает имя файла для отсканированного дела  
Функция СоздатьИмяФайлаДляДела(ВладелецФайла) Экспорт
	// меняем название файла
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Если ВладелецФайла.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
			ИмяФайла = ВладелецФайла.РегистрационныйНомер;	
			ИмяФайла = СтрЗаменить(ИмяФайла, "/", "-");
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ИмяФайла;
КонецФункции

Функция ПолучитьДоговорыЗаявки(СсылкаВходящийДокумент) Экспорт
	СвязанныеДокументы = СвязиДокументов.ПолучитьСвязанныеДокументы(СсылкаВходящийДокумент, Справочники.ТипыСвязей.Поручение);
	
	Договоры = Новый Массив;
	
	Для каждого Док Из СвязанныеДокументы Цикл
		Если Док.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот Тогда
			Договоры.Добавить(Док);
		КонецЕсли; 
	КонецЦикла; 
    Возврат Договоры;
	
КонецФункции 

Функция ПодготовитьПараметрыУчетаДоговоров() Экспорт

	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоУчастков", 0);
	Параметры.Вставить("Цена", 0);
	Параметры.Вставить("Дата", '00010101000000');
	Параметры.Вставить("СтавкаНДС", Неопределено);
	Параметры.Вставить("ОсвобождениеОтНДС", Неопределено);
	//Параметры.Вставить("Стоимость", 0);
	Параметры.Вставить("НДС", 0);
	Параметры.Вставить("Сумма", 0);
	Параметры.Вставить("Договор", Неопределено);
	Параметры.Вставить("ЭтапДоговора", Неопределено);
	//Параметры.Вставить("ОснованиеЭтапДоговора", Неопределено);
	//Параметры.Вставить("ОснованиеДоговор", Неопределено);
	Параметры.Вставить("Комментарий", "");
	Параметры.Вставить("Подразделение", Неопределено);
	Параметры.Вставить("Корреспондент", Неопределено);

	Возврат Параметры;
КонецФункции // ПодготовитьПараметрыУчетаДоговоров()

Функция ЗаполнитьПараметрыУчетаДоговоровИзЭтапа(Параметры, ЭтапДоговора) Экспорт
	ЗаполнитьЗначенияСвойств(Параметры, ЭтапДоговора);
    Если ЗначениеЗаполнено(ЭтапДоговора.ДатаПоследнейЗаписи) Тогда
    	Параметры.Вставить("Дата", НачалоДня(ЭтапДоговора.ДатаПоследнейЗаписи));
    Иначе
    	Параметры.Вставить("Дата", НачалоДня(ТекущаяДата()));
    КонецЕсли; 
	Параметры.Вставить("НДС", ЭтапДоговора.СуммаНДС);
	Параметры.Вставить("Сумма", ЭтапДоговора.СтоимостьСНДС);               
	Параметры.Вставить("Договор", ЭтапДоговора.Владелец);
	//Параметры.Вставить("ОснованиеДоговор", ЭтапДоговора.Владелец);
	Параметры.Вставить("Корреспондент", ЭтапДоговора.Владелец.Корреспондент);
	
	Если ТипЗнч(ЭтапДоговора) = Тип("СправочникОбъект.мЭтапыДоговоров") Тогда
		Параметры.Вставить("ЭтапДоговора", ЭтапДоговора);

	ИначеЕсли ТипЗнч(ЭтапДоговора) = Тип("СправочникСсылка.мЭтапыДоговоров") Тогда
		Параметры.Вставить("ЭтапДоговора", ЭтапДоговора);
	
	Иначе // Это структура
		Параметры.Вставить("ЭтапДоговора", ЭтапДоговора.Ссылка);
		
	КонецЕсли; 

	Возврат Параметры;
КонецФункции // ПодготовитьПараметрыУчетаДоговоров()

Процедура ИзменитьУчетДоговоров(ЭтапСсылка, ДатаПоследнейЗаписи, Отказ, Параметры) Экспорт
	ТекДок = Документы.УчетДоговоров.ПолучитьТекущийУчетДоговоров(ЭтапСсылка);
	
	// Проверим - надо ли делать запись
	Если ЕстьИзменения(ТекДок, Параметры) Тогда
		// Если изменения есть, то вносим их текущей датой
		НачТекДня = НачалоДня(ТекущаяДата());
		Если ДатаПоследнейЗаписи < НачТекДня Тогда
			// новый док
			ДокУчетДоговоров = Документы.УчетДоговоров.СоздатьДокумент();
			ДокУчетДоговоров.Дата = НачалоДня(ТекущаяДата());
			
		ИначеЕсли ДатаПоследнейЗаписи = НачТекДня Тогда
			// если изменяем в тек дне 
			ДокУчетДоговоров = ТекДок.ПолучитьОбъект();	
		КонецЕсли; 
		
		Для каждого Реквизит Из Параметры Цикл
			Если Реквизит.Ключ = "НеИзменятьЭтап" Тогда
				Продолжить;
			КонецЕсли; 
			Если Реквизит.Ключ = "Дата" Тогда // не меняем
				Продолжить;
			КонецЕсли; 
			Попытка
				Если ДокУчетДоговоров[Реквизит.Ключ] <> Реквизит.Значение Тогда
					ДокУчетДоговоров[Реквизит.Ключ] = Реквизит.Значение;
				КонецЕсли; 
			Исключение
			КонецПопытки;
		КонецЦикла; 
		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			НеИзменятьЭтап = Неопределено;
			Параметры.Свойство("НеИзменятьЭтап", НеИзменятьЭтап);
			Если НеИзменятьЭтап <> Неопределено Тогда
				ДокУчетДоговоров.ДополнительныеСвойства.Вставить("НеИзменятьЭтап", НеИзменятьЭтап);	
			КонецЕсли; 
		КонецЕсли; 
		Попытка
			ДокУчетДоговоров.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не удалось провести документ Учет договоров!");
			Отказ = Истина;
		КонецПопытки; 
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьУчетДоговоров()

Функция ЕстьИзменения(Док, Параметры)
	ЕстьИзменения = Ложь;
	Для каждого Реквизит Из Параметры Цикл
		Если Реквизит.Ключ = "НеИзменятьЭтап" Тогда
			Продолжить;
		КонецЕсли; 
		Попытка
            СравниваемоеЗначение = Док[Реквизит.Ключ];
            Если Реквизит.Ключ = "Дата" Тогда
                СравниваемоеЗначение = НачалоДня(СравниваемоеЗначение);
            КонецЕсли; 
			Если СравниваемоеЗначение <> Реквизит.Значение Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли; 
		Исключение
		КонецПопытки;
	КонецЦикла; 
	Возврат ЕстьИзменения;
КонецФункции 

Функция ПолучитьЗаявкуДоговора(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СвязиДокументов.Документ КАК Справочник.ВходящиеДокументы) КАК Заявка
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.ТипСвязи = &ТипСвязи
		|	И СвязиДокументов.СвязанныйДокумент = &СвязанныйДокумент
		|	И НЕ ВЫРАЗИТЬ(СвязиДокументов.Документ КАК Справочник.ВходящиеДокументы).ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СвязанныйДокумент", Договор);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.Поручение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Заявка; 
	КонецЕсли;
	
	Возврат Справочники.ВходящиеДокументы.ПустаяСсылка();
	
КонецФункции // ПолучитьЗаявкуДоговора()
 
// Возвращает массив этапов 
Функция ПолучитьЭтапыДоговораСУчетомДатыПредоставленияДокументов(Договор, ДатаСреза) Экспорт
	МассивЭтапов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мУсловияДоговоровСрезПоследних.ЭтапДоговора КАК ЭтапДоговора
		|ИЗ
		|	РегистрСведений.мУсловияДоговоров.СрезПоследних(
		|			&ДатаСреза,
		|			Договор = &Договор
		|				И УчетДатыПредоставленияДокументов) КАК мУсловияДоговоровСрезПоследних
		|ГДЕ
		|	НЕ мУсловияДоговоровСрезПоследних.ЭтапДоговора.ПометкаУдаления
		|	И мУсловияДоговоровСрезПоследних.ЭтапДоговора.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	мУсловияДоговоровСрезПоследних.ЭтапДоговора.НомерЭтапа";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивЭтапов.Добавить(Выборка.ЭтапДоговора);
	КонецЦикла;
	
	Возврат МассивЭтапов;
КонецФункции 

// Возвращает массив этапов 
Функция ПолучитьЭтапыДоговораСУчетомДатыПодписания(Договор, ДатаСреза) Экспорт
	МассивЭтапов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мУсловияДоговоровСрезПоследних.ЭтапДоговора КАК ЭтапДоговора
		|ИЗ
		|	РегистрСведений.мУсловияДоговоров.СрезПоследних(
		|			&ДатаСреза,
		|			Договор = &Договор
		|				И УчетДатыПодписания) КАК мУсловияДоговоровСрезПоследних
		|ГДЕ
		|	НЕ мУсловияДоговоровСрезПоследних.ЭтапДоговора.ПометкаУдаления
		|	И мУсловияДоговоровСрезПоследних.ЭтапДоговора.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	мУсловияДоговоровСрезПоследних.ЭтапДоговора.НомерЭтапа";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивЭтапов.Добавить(Выборка.ЭтапДоговора);
	КонецЦикла;
	
	Возврат МассивЭтапов;
КонецФункции 

// Возвращает список видов работ для пользователя
Функция ПолучитьВидыРаботДляВыбора(ПараметрыОтбора, ВидЛиц) Экспорт
	СписокДляВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрСведениймАктуальныеВидыРаботФизЛиц.Пользователь,
		|	РегистрСведениймАктуальныеВидыРаботФизЛиц.ВидРаботФизЛиц КАК ВидРаботы
		|ИЗ
		|	РегистрСведений.мАктуальныеВидыРаботФизЛиц КАК РегистрСведениймАктуальныеВидыРаботФизЛиц
		|ГДЕ
		|	РегистрСведениймАктуальныеВидыРаботФизЛиц.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСведениймАктуальныеВидыРаботФизЛиц.ВидРаботФизЛиц.Наименование";
		
	Если ВидЛиц = "ЮрЛиц" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФизЛиц", "ЮрЛиц");	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыОтбора.Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДляВыбора.Добавить(Выборка.ВидРаботы);	
	КонецЦикла;
	
	Возврат СписокДляВыбора;
КонецФункции // ПолучитьВидыРаботДляВыбора(ПараметрыОтбора, ВидЛиц)

Функция ПолучитьСостояниеДоговора(Договор) Экспорт
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСостоянияДоговоровСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.мСостоянияДоговоров.СрезПоследних(, Договор = &Договор) КАК мСостоянияДоговоровСрезПоследних";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Состояние;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьФайлДоговора(Договор) Экспорт
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
        |ГДЕ
        |		Файлы.ВладелецФайла = &Договор
		|			И НЕ Файлы.ПометкаУдаления
		|			И (Файлы.Наименование ПОДОБНО ""Дог%"")
		|			И (Файлы.ТекущаяВерсияРасширение = ""pdf"")
		|";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Файл;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции 

// Изменяет состояние договора
//  Если есть этапы - вызывает процедуру по изменению состояний этапов
Процедура УстановитьСостояниеДоговора(Договор, Состояние) Экспорт

	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСостояние = ПолучитьСостояниеДоговора(Договор);
	
	Если ТекСостояние = Состояние Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.мСостоянияДоговоров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Период = ТекущаяДата();
	НовЗапись.Договор = Договор;
	НовЗапись.Состояние = Состояние;
	НовЗапись.Установил = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Записать();

	мРаботаСДоговорами.УстановитьСостоянияЭтаповДоговора(Договор, Состояние);
КонецПроцедуры

Функция УстановитьРеквизитДоговора(Договор, ИмяРеквизита, Значение) Экспорт

	РеквизитыИзменены = Ложь;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат РеквизитыИзменены;
	КонецЕсли;
	
	Если ИмяРеквизита = "мДатаНачалаДействияДокумента" Тогда
		ЕстьЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, ИмяРеквизита);
		Если ЗначениеЗаполнено(ЕстьЗначение) Тогда
			Возврат РеквизитыИзменены;
		КонецЕсли; 
	КонецЕсли;
	
	// Заполняем
	ДоговорОбъект = Договор.ПолучитьОбъект();
	
	МожноЗаписывать = Истина;
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДоговорОбъект.Ссылка);
	Исключение
		МожноЗаписывать = Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если МожноЗаписывать Тогда
		ДоговорОбъект[ИмяРеквизита] = Значение;
		ДоговорОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ДоговорОбъект.Ссылка);
		РеквизитыИзменены = Истина;
	КонецЕсли; 
	
	Возврат РеквизитыИзменены;
КонецФункции

Функция РасторгнутьДоговор(Договор, Дата = '00010101000000') Экспорт
	
	Дата = ?(Дата = '00010101000000', ТекущаяДата(), Дата);
	
	ДоговорОбъект = Договор.ПолучитьОбъект();
	Попытка
		ДоговорОбъект.НеДействует = Истина;
		ДоговорОбъект.мДокументыВозвращеныЗаказчику = Дата;
		ДоговорОбъект.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции 

// Дело можно создать в случаях:
//  - у пользователя есть Роль мСозданиеДела
//  - Договор Подписан и Пользователь исполнитель работ по этапу и Предоплата не нужна
//  - Договор НаПодписании, но уже есть предоплата (неважно какая) и Пользователь исполнитель работ по этапу
Функция РазрешеноСоздатьДело(ЭтапДоговора, Пользователь = Неопределено, ОписаниеОшибки = "") Экспорт
	
	// Пользователь имеет право создавать дела
	Если ДокументооборотПраваДоступа.ЕстьРоль("мСозданиеДел", , Пользователь) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		ОписаниеОшибки = "Не определен этап договора!";
		Возврат Ложь;
	КонецЕсли; 
	
	Если Пользователь = Неопределено Тогда
		Пользователь  = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Пользователь должен быть в исполнителях работ по этапу
	Если Не мРаботаСДоговорами.ЭтоИсполнительРаботПоЭтапу(Пользователь, ЭтапДоговора) Тогда
		ОписаниеОшибки = "У " + Пользователь + " нет прав на создания дела по этапу " + ЭтапДоговора + ", т.к. 
			|пользователь не исполнитель работ по этапу договора!";
		Возврат Ложь;
	КонецЕсли; 
	
	Условия = мРаботаСДоговорами.ПолучитьУсловияДоговора(ЭтапДоговора);
	
	// Проверка % предоплаты
	Если Условия <> Неопределено И Условия.ПроцентПредоплаты > 0 Тогда
		
		Оплачено = мРаботаСДоговорами.ОплатаСУчетомДеноминации(ЭтапДоговора.Владелец, ЭтапДоговора);
		РеквСтоимости = мРаботаСДоговорами.РеквизитыСтоимостиЭтапаДоговора(ЭтапДоговора, ТекущаяДата());
		СметнаяСтоимость = ?(РеквСтоимости = Неопределено, 0, РеквСтоимости.СтоимостьСНДС);
		
		//СметнаяСтоимость = мРаботаСДоговорами.ПолучитьСметнуюСтоимостьСУчетомДеноминацииНаДату(ТекущаяДата(), ЭтапДоговора.Владелец, ЭтапДоговора);
		ДопустимыйПроцентОтклонения = Константы.М_ДопустимыйПроцентОтклоненияПредоплаты.Получить();
		
		ПроцентПредоплаты = 0;
		Если СметнаяСтоимость > 0 Тогда
			ПроцентПредоплаты = Окр(Оплачено * 100 / СметнаяСтоимость, 2) + ДопустимыйПроцентОтклонения;
		ИначеЕсли Оплачено > 0 Тогда	
			ПроцентПредоплаты = 100;    
		КонецЕсли;
		
		Если ПроцентПредоплаты < Условия.ПроцентПредоплаты Тогда
			// условие не выполнено
			ОписаниеОшибки = "Предоплаты "+ПроцентПредоплаты+"% по договору не достаточно!";
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		// Условия предоплаты нет - договор должен быть подписан
		// Проверка состояния договора
		Состояние = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ЭтапДоговора.Владелец);
		Если Состояние = Перечисления.мСостоянияДоговоров.Подписан Тогда
			Возврат Истина;
		КонецЕсли;
		
		ОписаниеОшибки = "Состояние договора: "+Состояние+", а должно быть: Подписан.
		|Предоставьте договор в плановый отдел.";
		
	КонецЕсли; 
	
	Возврат Ложь;
КонецФункции 

// Акт можно создавать только когда договор подписан
// Контроль только для договоров с юрлицами
Функция РазрешеноСоздатьАктВыполненныхРабот(ЭтапДоговора, Пользователь = Неопределено, ОписаниеОшибки = "") Экспорт
	// Пользователь имеет право создавать акты
	Если ДокументооборотПраваДоступа.ЕстьРоль("мСозданиеАктовВыполненныхРабот", , Пользователь) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		ОписаниеОшибки = "Не определен этап договора!";
		Возврат Ложь;
	КонецЕсли; 
	
	Если мРаботаСДоговорами.ЭтоДоговорФизЛица(ЭтапДоговора.Владелец) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если Пользователь = Неопределено Тогда
		Пользователь  = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Проверка состояния договора
	Состояние = мРаботаСДоговорами.ПолучитьСостояниеДоговора(ЭтапДоговора.Владелец);
	
	Если Состояние = Перечисления.мСостоянияДоговоров.Подписан Тогда
		Возврат Истина;
	Иначе	
		ОписаниеОшибки = "Акт нельзя создавать, т.к. договор " + Состояние+".
		|Предоставьте договор в плановый отдел.";
	КонецЕсли; 

	Возврат Ложь;
КонецФункции 
 

Функция ЭтоДоговорФизЛица(Договор) Экспорт
	Если Договор.Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции

&НаСервере
Функция ПолучитьВидДней(ВидРабот) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыВидовРаботПоДоговорамСрезПоследних.ВидДней КАК ВидДней
		|ИЗ
		|	РегистрСведений.ПараметрыВидовРаботПоДоговорам.СрезПоследних(&ДатаСреза, ВидРабот = &ВидРабот) КАК ПараметрыВидовРаботПоДоговорамСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.ВидыДней.Календарные;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ВидДней;
	
КонецФункции 

// Возвращает расчетный счет, заданный в правилах, а если его нет,
//   то Основной банк. счет из организации
Функция ОпределитьНашРасчетныйСчет(Организация, ВидДокумента, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(мПравилаВыбораРасчетногоСчетаСрезПоследних.РасчетныйСчет, 0) = 0
		|			ТОГДА Организации.ОсновнойБанковскийСчет
		|		ИНАЧЕ мПравилаВыбораРасчетногоСчетаСрезПоследних.РасчетныйСчет
		|	КОНЕЦ КАК НашРасчетныйСчет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мПравилаВыбораРасчетногоСчета.СрезПоследних(
		|				&Дата,
		|				Организация = &Организация
		|					И ВидДокумента = &ВидДокумента) КАК мПравилаВыбораРасчетногоСчетаСрезПоследних
		|		ПО (мПравилаВыбораРасчетногоСчетаСрезПоследних.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НашРасчетныйСчет;
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции 

// Записывает наш расчетный счет в документе
Процедура УстановитьНашРасчетныйСчет(Документ, НашРасчетныйСчет) Экспорт

	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСчет = ПолучитьНашРасчетныйСчет(Документ);
	
	Если ТекСчет = НашРасчетныйСчет Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.мРасчетныеСчетаДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Документ = Документ;
	НовЗапись.РасчетныйСчет = НашРасчетныйСчет;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает Наш расчетный счет в документе
Функция ПолучитьНашРасчетныйСчет(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРасчетныеСчетаДокументов.РасчетныйСчет КАК НашРасчетныйСчет
		|ИЗ
		|	РегистрСведений.мРасчетныеСчетаДокументов КАК мРасчетныеСчетаДокументов
		|ГДЕ
		|	мРасчетныеСчетаДокументов.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НашРасчетныйСчет;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции 

Функция СуществуетРегНомер(РегистрационныйНомер, ПроверяемыйДокСсылка, ВидДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.РегистрационныйНомер
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.Ссылка <> &Ссылка
		|	И ВнутренниеДокументы.РегистрационныйНомер = &РегистрационныйНомер
		|	И ВнутренниеДокументы.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Если Не ЗначениеЗаполнено(ПроверяемыйДокСсылка) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.Ссылка <> &Ссылка", "");	
	Иначе	
		Запрос.УстановитьПараметр("Ссылка", ПроверяемыйДокСсылка);
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;	
КонецФункции 
 
Функция ОбъектыРаботПоЭтапу(Этап) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровОбъектыРабот.ОбъектРабот КАК ОбъектРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета КАК Смета,
		|	мЭтапыДоговоровОбъектыРабот.Смета.НДС КАК НДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате КАК Сумма,
		|	мЭтапыДоговоровОбъектыРабот.Смета.Объем КАК ОбъемРабот,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате - мЭтапыДоговоровОбъектыРабот.Смета.НДС - мЭтапыДоговоровОбъектыРабот.Смета.Объем КАК СуммаПрочих,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка КАК ЭтапДоговора
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	Справочник.мЭтапыДоговоров.ОбъектыРабот КАК мЭтапыДоговоровОбъектыРабот
		|ГДЕ
		|	НЕ мЭтапыДоговоровОбъектыРабот.ОбъектРабот.ПометкаУдаления
		|	И НЕ мЭтапыДоговоровОбъектыРабот.Смета.ПометкаУдаления
		|	И мЭтапыДоговоровОбъектыРабот.Ссылка = &Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора КАК ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот КАК ОбъектРабот,
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(мСметыОбъемРабот.Стоимость / 10000 КАК ЧИСЛО(17, 2))
		|			ИНАЧЕ мСметыОбъемРабот.Стоимость
		|		КОНЕЦ) КАК СуммаЗИС
		|ПОМЕСТИТЬ СуммыЗИС
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.СтадияРабот.Наименование = ""Внесение изменений в ЗИС""
		|	И мСметыОбъемРабот.Ссылка.ЭтапДоговора = &Этап
		|	И мСметыОбъемРабот.Стоимость > 0
		|	И мСметыОбъемРабот.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.Смета
		|			ИЗ
		|				Объекты КАК Объекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Объекты.ОбъектРабот,
		|	Объекты.Смета,
		|	Объекты.НДС,
		|	Объекты.Сумма,
		|	Объекты.ОбъемРабот,
		|	Объекты.СуммаПрочих,
		|	Объекты.ЭтапДоговора,
		|	ЕСТЬNULL(СуммыЗИС.СуммаЗИС, 0) КАК СуммаЗИС
		|ИЗ
		|	Объекты КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыЗИС КАК СуммыЗИС
		|		ПО Объекты.ОбъектРабот = СуммыЗИС.ОбъектРабот";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция НеОсновныеИсполнителиПоЭтапу(Этап) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора КАК ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот КАК ОбъектРабот,
		|	СУММА(ВЫБОР
		|			КОГДА мСметыОбъемРабот.Ссылка.ДатаРасчетаСметы < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(мСметыОбъемРабот.Стоимость / 10000 КАК ЧИСЛО(17, 2))
		|			ИНАЧЕ мСметыОбъемРабот.Стоимость
		|		КОНЕЦ) КАК СуммаЗИС
		|ПОМЕСТИТЬ Объекты
		|ИЗ
		|	Справочник.мСметы.ОбъемРабот КАК мСметыОбъемРабот
		|ГДЕ
		|	мСметыОбъемРабот.СтадияРабот.Наименование = ""Внесение изменений в ЗИС""
		|	И НЕ мСметыОбъемРабот.Ссылка.ОбъектРабот.ПометкаУдаления
		|	И НЕ мСметыОбъемРабот.Ссылка.ПометкаУдаления
		|	И мСметыОбъемРабот.Ссылка.ЭтапДоговора = &Этап
		|	И мСметыОбъемРабот.Стоимость > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметыОбъемРабот.Ссылка.ЭтапДоговора,
		|	мСметыОбъемРабот.Ссылка.ОбъектРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мОбъектыРаботКонтактнаяИнформация.Ссылка КАК ОбъектРабот,
		|	мОбъектыРаботКонтактнаяИнформация.Представление
		|ПОМЕСТИТЬ Районы
		|ИЗ
		|	Справочник.мОбъектыРабот.КонтактнаяИнформация КАК мОбъектыРаботКонтактнаяИнформация
		|ГДЕ
		|	мОбъектыРаботКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Объекты.ОбъектРабот
		|			ИЗ
		|				Объекты КАК Объекты)
		|	И мОбъектыРаботКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мРайоныПоСотрудникам.Сотрудник КАК Сотрудник,
		|	СведенияОПользователях.Подразделение КАК Подразделение,
		|	Районы.ОбъектРабот КАК ОбъектРабот
		|ПОМЕСТИТЬ НеОсновные
		|ИЗ
		|	Районы КАК Районы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мРайоныПоСотрудникам КАК мРайоныПоСотрудникам
		|		ПО (Районы.Представление ПОДОБНО ""%"" + мРайоныПоСотрудникам.Месторасположение + ""%"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО (мРайоныПоСотрудникам.Сотрудник = СведенияОПользователях.Пользователь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Объекты.СуммаЗИС КАК ОбъемРабот,
		|	1 КАК КТУ,
		|	ИСТИНА КАК НеОсновные,
		|	НеОсновные.Сотрудник КАК Исполнитель,
		|	НеОсновные.Сотрудник.ТабельныйНомер КАК ТабельныйНомер,
		|	НеОсновные.Подразделение,
		|	Объекты.ОбъектРабот КАК ОбъектРабот,
		|	Объекты.ЭтапДоговора КАК ЭтапДоговора,
		|	Объекты.ЭтапДоговора.Подразделение КАК ПодразделениеЭтапа
		|ИЗ
		|	Объекты КАК Объекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеОсновные КАК НеОсновные
		|		ПО Объекты.ОбъектРабот = НеОсновные.ОбъектРабот";
	
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Возврат Выборка;
КонецФункции

// Используется при печати доп соглашения
Функция ПолучитьСтрокуРасчетов(Договор, ДатаРасчета) Экспорт
    
    УстановитьПривилегированныйРежим(Истина);    
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
	|				ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) / 10000
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасчетыСПокупателямиОбороты.Период >= &ДатыПослеДеноминации
	|						ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Оплата,
	|	0 КАК СтоимостьДо,
	|	0 КАК СтоимостьПосле,
	|	0 КАК НоваяСтоимость,
	|	РасчетыСПокупателямиОбороты.Договор КАК Договор
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			,
	|			&ДатаДо,
	|			День,
	|			ЭтапДоговора.Владелец = &Договор
	|				И НЕ ЭтапДоговора.ПометкаУдаления
	|				И ЭтапДоговора.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)) КАК РасчетыСПокупателямиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОбороты.Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(мСметнаяСтоимостьСрезПоследних.Сумма),
	|	0,
	|	0,
	|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец
	|ИЗ
	|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(
	|			&ДатаДо,
	|			ЭтапДоговора.Владелец = &Договор
	|				И НЕ ЭтапДоговора.ПометкаУдаления
	|				И (ЭтапДоговора.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|					ИЛИ ЭтапДоговора.ДатаИсключенИзДоговора>=&ДатаДо)) КАК мСметнаяСтоимостьСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(мСметнаяСтоимостьСрезПоследних.Сумма),
	|	0,
	|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец
	|ИЗ
	|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(
	|			&ДатаПосле,
	|			ЭтапДоговора.Владелец = &Договор
	|				И НЕ ЭтапДоговора.ПометкаУдаления
	|				И (ЭтапДоговора.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|					ИЛИ ЭтапДоговора.ДатаИсключенИзДоговора>=&ДатаПосле)) КАК мСметнаяСтоимостьСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
	|				ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(17, 2))
	|			ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
	|		КОНЕЦ),
	|	мЭтапыДоговоров.Владелец
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|ГДЕ
	|	мЭтапыДоговоров.Владелец = &Договор
	|	И НЕ мЭтапыДоговоров.ПометкаУдаления
	|	И (мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|					ИЛИ мЭтапыДоговоров.ДатаИсключенИзДоговора>=&ДатаПосле)
	|
	|СГРУППИРОВАТЬ ПО
	|	мЭтапыДоговоров.Владелец";

	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатыПослеДеноминации", Дата(2016, 7, 2));
	Запрос.УстановитьПараметр("ДатаДо", НачалоДня(ДатаРасчета)-1);
	Запрос.УстановитьПараметр("ДатаПосле", КонецДня(ДатаРасчета)+1);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Результат = Неопределено;
	
	Если Таблица.Количество() > 0 Тогда
		Таблица.Свернуть("", "СтоимостьДо, СтоимостьПосле, Оплата, НоваяСтоимость");
		
		Результат = Новый Структура("СтоимостьДо, СтоимостьПосле, Оплата, НоваяСтоимость", 0,0,0,0);
	    ЗаполнитьЗначенияСвойств(Результат, Таблица[0]);
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

Процедура СтартоватьПроцессВозвратПоручения(Поручение) Экспорт
	
	Если Поручение.Организация = Справочники.Организации.БорисовскийФилиал Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.НайтиПоНаименованию("Вернуть поручение Борисовский филиал");
	Иначе
		ШаблонБП = Справочники.ШаблоныИсполнения.НайтиПоНаименованию("Вернуть поручение");
	КонецЕсли; 
	Автор = Неопределено;
	
	Если Не ЗначениеЗаполнено(ШаблонБП) Тогда
        СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'При создании процесса по шаблону ""%1"" не был найден шаблон.
        | Автоматический запуск процесса не выполнен.'"),
        Строка(ШаблонБП));
        
        ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , ШаблонБП, СообщениеОбОшибке);
		
		//Сообщить("Не найден шаблон процесса ""Возврат поручения""");
		Возврат;
	КонецЕсли; 
	
    БизнесПроцесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
    
    ПараметрыЗаполнения = Новый Структура();
    ПараметрыЗаполнения.Вставить("Шаблон", ШаблонБП);
    ПараметрыЗаполнения.Вставить("Предметы", Поручение);
    ПараметрыЗаполнения.Вставить("АвторСобытия", Автор);
    //ПараметрыЗаполнения.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
    БизнесПроцесс.Заполнить(ПараметрыЗаполнения);

	МассивПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
    Если МассивПолей.Количество() <> 0 Тогда
        
        СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
        
        СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'При заполнении процесса по шаблону ""%1"" не были заполнены поля: %2.
        | Автоматический запуск процесса не выполнен.'"),
        Строка(ШаблонБП), СтрокаПолей);
        
        ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , ШаблонБП, СообщениеОбОшибке);
        
        // Создание уведомлений программы
        ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
        |%1'");
        ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        ОписаниеУведомления,
        СообщениеОбОшибке);
        
        РаботаСУведомлениямиПрограммыСервер.ДобавитьУведомление(
        ТекущаяДатаСеанса(),
        ОписаниеУведомления,
        Перечисления.ВидыУведомленийПрограммы.Ошибка,
        Автор,
        Поручение);
        
        Возврат;
        
    КонецЕсли;	
    
    БизнесПроцесс.Записать();
    
    БизнесПроцесс.Старт();
КонецПроцедуры

Процедура ЗаписатьСвязьЭтаповДоговора(ЭтапДоговора, ОсновнойЭтапДоговора) Экспорт
	НаборЗаписей = РегистрыСведений.мСвязиЭтаповДоговоров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭтапДоговора.Установить(ЭтапДоговора);
	НаборЗаписей.Отбор.ОсновнойЭтапДоговора.Установить(ОсновнойЭтапДоговора);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ЭтапДоговора = ЭтапДоговора;
	НоваяЗапись.ОсновнойЭтапДоговора = ОсновнойЭтапДоговора;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Функция ШтрихКодДокумента(Док) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Код КАК Код
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Док";
	
	Запрос.УстановитьПараметр("Док", Док);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Код;
	КонецЦикла;
	Возврат "";
КонецФункции 

// Записывает состояние Поручения
//  Параметры - Структура
//    Поручение - Вх. документ
//    Состояние - ПеречислениеСсылка.мСостоянияПоручения
//    Пользователь - СправочникСсылка.РолиИсполнителей, СправочникСсылка.Пользователи
//    Подразделение - СправочникСсылка.СтруктураПредприятия
//
Процедура УстановитьСостояниеПоручения(Параметры) Экспорт

	Если Параметры.Свойство("Поручение") И Не ЗначениеЗаполнено(Параметры.Поручение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСостояние = СостояниеПоручения(Параметры.Поручение);
	
	Если ТекСостояние = Параметры.Состояние Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.мСостоянияПоручений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Параметры.Период);
	НаборЗаписей.Отбор.Поручение.Установить(Параметры.Поручение);
	
	НовЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НовЗапись, Параметры);
	
	НаборЗаписей.Записать(Ложь);

КонецПроцедуры

// Возвращает частично заполненную структуру 
//  Параметры - Структура
//    Период - Текущая дата
//    Поручение - Неопределено
//    Состояние - Неопределено
//    Пользователь - ТекущийПользователь
//    Подразделение - Неопределено
//
Функция ПараметрыСостоянияПоручения() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Период", ТекущаяДата());
	Параметры.Вставить("Поручение", Неопределено);
	Параметры.Вставить("Подразделение", Неопределено);
	Параметры.Вставить("Состояние", Неопределено);
	Параметры.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	Возврат Параметры;
КонецФункции 

Функция СостояниеПоручения(Поручение) Экспорт
	Состояние = Перечисления.мСостоянияПоручения.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Поручение) Тогда
		Возврат Состояние;
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСостоянияПорученийСрезПоследних.Состояние
		|ИЗ
		|	РегистрСведений.мСостоянияПоручений.СрезПоследних(, Поручение = &Поручение) КАК мСостоянияПорученийСрезПоследних";
	
	Запрос.УстановитьПараметр("Поручение", Поручение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Состояние;
	КонецЦикла;
	
	Возврат Состояние;
КонецФункции 

Функция ЗавершитьПроцессы(МассивИмен, Поручение) Экспорт
	МассивШаблонов = Новый Массив;
	Для каждого ИмяПроцесса Из МассивИмен Цикл
		ШаблонБП = ШаблонИсполненияПоИмени(ИмяПроцесса);
	    МассивШаблонов.Добавить(ШаблонБП);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет = &Поручение
		|	И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон В (&МассивШаблонов)
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Отменена
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.ИсключенаИзПроцесса";
	
	Запрос.УстановитьПараметр("Поручение", Поручение);
	Запрос.УстановитьПараметр("МассивШаблонов", МассивШаблонов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Задача = Выборка.Задача.ПолучитьОбъект();
		Задача.ВыполнитьЗадачу();
	КонецЦикла;
	
КонецФункции
 
Функция ШаблонИсполненияПоИмени(ИмяПроцесса) Экспорт
	Если ИмяПроцесса = "Исполнить поручение" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ИсполнитьПоручение;		
		
	ИначеЕсли ИмяПроцесса = "Уточнить доп. информацию" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.УточнитьДопИнформацию;		
		
	ИначеЕсли ИмяПроцесса = "Подготовить информацию по оценке и(или) убыткам" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ПодготовитьИнформациюПоОценке;
		
	ИначеЕсли ИмяПроцесса = "Запросить доп. информацию" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ЗапроситьДопИнформацию;		
		
	ИначеЕсли ИмяПроцесса = "Исполнить поручение (доп. инф.)" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ИсполнитьПоручениеДопИнф;		
		
	ИначеЕсли ИмяПроцесса = "Подготовить договор" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ПодготовитьДоговор;		
		
	ИначеЕсли ИмяПроцесса = "Назначить исполнителя" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.НазначитьИсполнителя;
		
	ИначеЕсли ИмяПроцесса = "Выполнить работы" Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.ВыполнитьРаботы;		
	Иначе
		Сообщить("Не найден шаблон исполнения для "+ИмяПроцесса+". Обратитесь к администратору системы.");
		ШаблонБП = Неопределено;
	КонецЕсли;
	Возврат ШаблонБП;
КонецФункции

Функция ПричинаВозвратаПоручения(Поручение) Экспорт
	Причина = Справочники.мПричиныВозвратаПоручений.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Поручение) Тогда
		Возврат Причина;
	КонецЕсли; 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мПричиныВозвратаПоручений.Причина
		|ИЗ
		|	РегистрСведений.мПричиныВозвратаПоручений КАК мПричиныВозвратаПоручений
		|ГДЕ
		|	мПричиныВозвратаПоручений.Поручение = &Поручение";
	
	Запрос.УстановитьПараметр("Поручение", Поручение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Причина;
	КонецЦикла;
	
	Возврат Причина;
КонецФункции 

// Записывает причину возврата Поручения
//  Параметры - Структура
//    Поручение - Вх. документ
//    Причина - СправочникСсылка.мПричиныВозвратаПоручений
//
Процедура УстановитьПричинуВозвратаПоручения(Параметры) Экспорт

	Если Параметры.Свойство("Поручение") И Не ЗначениеЗаполнено(Параметры.Поручение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекПричина = ПричинаВозвратаПоручения(Параметры.Поручение);
	
	Если ТекПричина = Параметры.Причина Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.мПричиныВозвратаПоручений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поручение.Установить(Параметры.Поручение);
	НаборЗаписей.Отбор.Причина.Установить(Параметры.Причина);
	
	НовЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НовЗапись, Параметры);
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

// Возвращает структуру 
//  Параметры - Структура
//    Поручение - Неопределено
//    Причина - Неопределено
//
Функция ПараметрыПричиныВозвратаПоручения() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Поручение", Неопределено);
	Параметры.Вставить("Причина", Неопределено);
	Возврат Параметры;
КонецФункции 

// Записывает состояние Этапа Договора
//  Параметры 
//    ЭтапДоговора - СправочникСсылка.мЭтапыДоговоров
//    Состояние - ПеречислениеСсылка.мСостоянияЭтаповДоговоров
//    ЗаписьВЭтап - необходимость изменения состояния в этапе договора
//
Процедура УстановитьСостояниеЭтапаДоговора(ЭтапДоговора, Состояние, ЗаписьВЭтап=Истина) Экспорт

	Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ЭтапДоговора", ЭтапДоговора);
	ТекСостояние = РегистрыСведений.мСостоянияЭтаповДоговоров.ПолучитьПоследнее(, Отбор);
	
	Если ТекСостояние.Состояние = Состояние Тогда
		Возврат;
	КонецЕсли; 
	
	ДатаЗаписи = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.мСостоянияЭтаповДоговоров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭтапДоговора.Установить(ЭтапДоговора);
	НаборЗаписей.Отбор.Период.Установить(ДатаЗаписи);
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НовЗапись = НаборЗаписей[0];
	Иначе	
		НовЗапись = НаборЗаписей.Добавить();
	КонецЕсли; 
	НовЗапись.Период = ДатаЗаписи;
	НовЗапись.ЭтапДоговора = ЭтапДоговора;
	НовЗапись.Состояние = Состояние;
	
	НаборЗаписей.Записать(Ложь);

	Если ЗаписьВЭтап Тогда
		Этап = ЭтапДоговора.ПолучитьОбъект();
		Этап.Состояние = Состояние;
		Этап.Записать();
	КонецЕсли; 
КонецПроцедуры

// Возвращает структуру параметров необходимых для расчета состояния этапа договора
Функция ПараметрыДляРасчетаСостоянияЭтапаДоговора() Экспорт
	Параметры = Новый Структура();
	Параметры.Вставить("СостояниеДоговора");
	Параметры.Вставить("УчетДатыПредоставленияРешения", Ложь);
	Параметры.Вставить("ДатаПредоставленияРешения", Дата(1, 1, 1)); 
	Параметры.Вставить("УчетПредоплаты", Ложь); 
	Параметры.Вставить("ПроцентПредоплаты", 0); 
	Параметры.Вставить("ЭтапДоговора");
	Параметры.Вставить("СметнаяСтоимость", 0);
	Параметры.Вставить("Оплата", 0);
	Параметры.Вставить("РучноеИзменениеСостояния", Ложь);
	Параметры.Вставить("ДанныеВПараметрах", Ложь);

	Возврат Параметры;
КонецФункции 

// Возвращает состояние этапа по переданным в параметрах данных для расчета
//  описание параметров в ПараметрыДляРасчетаСостоянияЭтапаДоговора()
Функция РассчитатьСостояниеЭтапаДоговора(Параметры) Экспорт
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Параметры.ДанныеВПараметрах Тогда
		Выборка = Параметры;
		Если ЗначениеЗаполнено(Параметры.ЭтапДоговора) Тогда
			Выборка.Оплата = мРаботаСДоговорами.ОплатаСУчетомДеноминации(Параметры.ЭтапДоговора.Владелец, Параметры.ЭтапДоговора); 
		КонецЕсли; 
	Иначе
		Выборка = ДанныеДляРасчетаСостоянияЭтапаДоговора(Параметры);
	КонецЕсли;
	
	Состояние = Неопределено;
	
	ОплатаЕсть = Ложь;
	ПроцентПредоплаты = 0;
	Если Выборка.СметнаяСтоимость > 0 Тогда
		ДопустимыйПроцентОтклонения = Константы.М_ДопустимыйПроцентОтклоненияПредоплаты.Получить();
		ПроцентПредоплаты = Окр(Выборка.Оплата * 100 / Выборка.СметнаяСтоимость, 2) + ДопустимыйПроцентОтклонения;
	ИначеЕсли Выборка.Оплата > 0 Тогда	
		ПроцентПредоплаты = 100;    
	КонецЕсли;
	
	Если ПроцентПредоплаты >= Выборка.ПроцентПредоплаты Тогда
		ОплатаЕсть = Истина;
	КонецЕсли; 
	
	ДатаРешенияЕсть = ЗначениеЗаполнено(Выборка.ДатаПредоставленияРешения);

	Если Выборка.СостояниеДоговора = Перечисления.мСостоянияДоговоров.НаПодписании
		ИЛИ Выборка.СостояниеДоговора = Перечисления.мСостоянияДоговоров.Проект  Тогда
		Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеПодписания;
		
	ИначеЕсли Выборка.СостояниеДоговора = Перечисления.мСостоянияДоговоров.НеПодписан
		ИЛИ Выборка.СостояниеДоговора = Перечисления.мСостоянияДоговоров.Расторгнут	Тогда
		Состояние = Перечисления.мСостоянияЭтаповДоговоров.НеБудетВыполняться;
		
	Иначе
		// Подписан
		Если Выборка.УчетПредоплаты И Выборка.УчетДатыПредоставленияРешения Тогда
			Если ОплатаЕсть и ДатаРешенияЕсть Тогда
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ВРаботе;
			ИначеЕсли ОплатаЕсть и не ДатаРешенияЕсть Тогда
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеРешения;
			ИначеЕсли не ОплатаЕсть и ДатаРешенияЕсть Тогда
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеОплаты;
			Иначе
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеОплатыИРешения;
			КонецЕсли; 
		ИначеЕсли Выборка.УчетПредоплаты Тогда
			Если ОплатаЕсть Тогда
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ВРаботе;
			Иначе
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеОплаты;
			КонецЕсли; 
			
		ИначеЕсли Выборка.УчетДатыПредоставленияРешения Тогда
			Если ДатаРешенияЕсть Тогда
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ВРаботе;
			Иначе
				Состояние = Перечисления.мСостоянияЭтаповДоговоров.ОжиданиеРешения;
			КонецЕсли; 
			
		Иначе
			Состояние = Перечисления.мСостоянияЭтаповДоговоров.ВРаботе;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Состояние;
КонецФункции 

// Возвращает данные для расчета состояния этапа, полученные из базы данных
Функция ДанныеДляРасчетаСостоянияЭтапаДоговора(Знач Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Параметры.ЭтапДоговора) Тогда
		Возврат Параметры;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(15, 2))
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|				ТОГДА 0
		|			ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаПриход
		|		КОНЕЦ) КАК Оплата,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора КАК ЭтапДоговора
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Договор = &Договор
		|				И ЭтапДоговора = &ЭтапДоговора) КАК РасчетыСПокупателямиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(мЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоплаты, Ложь) КАК УчетПредоплаты,
		|	ЕСТЬNULL(мЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоставленияРешения, Ложь) КАК УчетДатыПредоставленияРешения,
		|	мСостоянияДоговоровСрезПоследних.Состояние КАК СостояниеДоговора,
		|	мЭтапыДоговоров.ДатаПредоставленияРешения,
		|	мЭтапыДоговоров.РучноеИзменениеСостояния,
		|	ВЫБОР
		|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
		|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
		|	КОНЕЦ КАК СметнаяСтоимость,
		|	ЕСТЬNULL(мЭтапыДоговоров.ШаблонУсловийДоговора.ПроцентПредоплаты, 0) КАК ПроцентПредоплаты,
		|	ЕСТЬNULL(Оплаты.Оплата, 0) КАК Оплата
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияДоговоров.СрезПоследних КАК мСостоянияДоговоровСрезПоследних
		|		ПО мЭтапыДоговоров.Владелец = мСостоянияДоговоровСрезПоследних.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
		|		ПО Оплаты.ЭтапДоговора = мЭтапыДоговоров.Ссылка
		|ГДЕ
		|	мЭтапыДоговоров.Ссылка = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("Договор", Параметры.ЭтапДоговора.Владелец);
	Запрос.УстановитьПараметр("ЭтапДоговора", Параметры.ЭтапДоговора);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Параметры, Выборка);
	Возврат Параметры;
КонецФункции 

// Меняет состояние этапов договора в зависимости от состояния договора
Процедура УстановитьСостоянияЭтаповДоговора(Договор, СостояниеДоговора) Экспорт
	Тз = ДанныеДляРасчетаСостоянийЭтаповДоговора(Договор);
	
	Параметры = мРаботаСДоговорами.ПараметрыДляРасчетаСостоянияЭтапаДоговора();
	Для каждого Стр Из Тз Цикл
		ЗаполнитьЗначенияСвойств(Параметры, Стр);
		Состояние = мРаботаСДоговорами.РассчитатьСостояниеЭтапаДоговора(Параметры); 
		Если Стр.СостояниеЭтапаДоговора = Состояние Тогда
			Продолжить;
		КонецЕсли; 
		Если Стр.РучноеИзменениеСостояния Тогда
			Продолжить;
		КонецЕсли; 
		
		мРаботаСДоговорами.УстановитьСостояниеЭтапаДоговора(Стр.ЭтапДоговора, Состояние);
	КонецЦикла; 
КонецПроцедуры

// Возвращает таблицу значений по этапам договора с данными для расчета состояния
Функция ДанныеДляРасчетаСостоянийЭтаповДоговора(Договор, СостояниеДоговора = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|				ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(15, 2))
		|			КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|				ТОГДА 0
		|			ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаПриход
		|		КОНЕЦ) КАК Оплата,
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора КАК ЭтапДоговора
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(, , Регистратор, Договор = &Договор) КАК РасчетыСПокупателямиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(мЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоплаты, Ложь) КАК УчетПредоплаты,
		|	ЕСТЬNULL(мЭтапыДоговоров.ШаблонУсловийДоговора.УчетДатыПредоставленияРешения, Ложь) КАК УчетДатыПредоставленияРешения,
		|	мСостоянияДоговоровСрезПоследних.Состояние КАК СостояниеДоговора,
		|	мЭтапыДоговоров.ДатаПредоставленияРешения,
		|	мЭтапыДоговоров.РучноеИзменениеСостояния,
		|	ВЫБОР
		|		КОГДА мЭтапыДоговоров.ДатаПоследнейЗаписи < &ДатаДеноминации
		|			ТОГДА ВЫРАЗИТЬ(мЭтапыДоговоров.СтоимостьСНДС / 10000 КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ мЭтапыДоговоров.СтоимостьСНДС
		|	КОНЕЦ КАК СметнаяСтоимость,
		|	мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
		|	ЕСТЬNULL(Оплаты.Оплата, 0) КАК Оплата,
		|	мСостоянияЭтаповДоговоровСрезПоследних.Состояние КАК СостояниеЭтапаДоговора
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияДоговоров.СрезПоследних КАК мСостоянияДоговоровСрезПоследних
		|		ПО мЭтапыДоговоров.Владелец = мСостоянияДоговоровСрезПоследних.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
		|		ПО (Оплаты.ЭтапДоговора = мЭтапыДоговоров.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСостоянияЭтаповДоговоров.СрезПоследних(, ЭтапДоговора.Владелец = &Договор) КАК мСостоянияЭтаповДоговоровСрезПоследних
		|		ПО мСостоянияЭтаповДоговоровСрезПоследних.ЭтапДоговора = мЭтапыДоговоров.Ссылка
		|ГДЕ
		|	мЭтапыДоговоров.Ссылка.Владелец = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// если передавалось состояние договора - то его и возвращаем
	Если СостояниеДоговора <> Неопределено Тогда
		Для каждого Стр Из Результат Цикл
			Стр.СостояниеДоговора = СостояниеДоговора;
		КонецЦикла; 
	КонецЕсли; 

	Возврат Результат;
КонецФункции
 
