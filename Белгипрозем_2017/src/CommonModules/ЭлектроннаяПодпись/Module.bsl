////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет записи из табличной части ЭП.
//
// Параметры
//   ТаблицаВыделенныеСтроки  - ТаблицаЗначений - таблица, содержащая данные - ссылка на объект и номер строки в его табличной части
//   РеквизитПодписанИзменен - Булево - возвращаемое значение - если удалена последняя подпись, 
//     РеквизитПодписанИзменен примет значение Истина
//   КоличествоПодписей - Число - количество подписей в объекте после удаления
//   УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура УдалитьПодписи(ОбъектСсылка, ТаблицаВыделенныеСтроки, РеквизитПодписанИзменен,
	КоличествоПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	РеквизитПодписанИзменен = Ложь;

	ПодписанныйОбъект = ОбъектСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ОбъектСсылка, , УникальныйИдентификатор);
	
	Для Каждого ДанныеПодписи Из ТаблицаВыделенныеСтроки Цикл
		УдалитьПодпись(ПодписанныйОбъект, ДанныеПодписи);
	КонецЦикла;
	
	КоличествоПодписей = КоличествоПодписей(ОбъектСсылка);
	ПодписанныйОбъект.ПодписанЭП = (КоличествоПодписей <> 0);
	РеквизитПодписанИзменен = НЕ ПодписанныйОбъект.ПодписанЭП;
	
	ПодписанныйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	УстановитьПривилегированныйРежим(Истина);
	ПодписанныйОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ОбъектСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Проверяет действительность подписи и корректность сертификата.
//
// Параметры:
//   МенеджерКриптографии  - МенеджерКриптографии - Менеджер криптографии.
//   ДвоичныеДанныеФайла   - ДвоичныеДанные - Файл для проверки.
//   ДвоичныеДанныеПодписи - ДвоичныеДанные - Подпись.
//
// Возвращаемое значение:
//   Структура - Результаты проверки подписи
//     * ТекстОшибкиПроверкиПодписи - Строка
//     * ТекстОшибкиПроверкиСертификата - Строка
//
Функция ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	ОшибкиПроверки = Новый Структура;
		
	Попытка
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиПодписи", КраткоеПредставлениеОшибки(Инфо)); 
	КонецПопытки;
	
	Если Сертификат <> Неопределено Тогда
		Попытка
			МассивРежимовПроверки = Новый Массив;
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
			МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		Исключение
			Инфо = ИнформацияОбОшибке();
			//МиСофт+
			ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", Сертификат.Субъект.CN + " (" + КраткоеПредставлениеОшибки(Инфо)+")");
			//МиСофт-
		КонецПопытки;
	Иначе
		//МиСофт+
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", "Сертификат не определен.");
		//МиСофт-
	КонецЕсли;
		
	Возврат ОшибкиПроверки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок)

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	ИмяМодуля = "ЭлектроннаяПодпись";
	
	ИмяСобытия = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
	ИмяСобытия = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
	ИмяСобытия = "СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем";
	СерверныеОбработчики[ИмяСобытия].Добавить(ИмяМодуля);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ЭлектроннаяПодпись.ЗаполнитьНазначенияСертификатовЭП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.8";
	Обработчик.Процедура = "ЭлектроннаяПодпись.УдалитьСтарыеИЗаполнитьНазначенияСертификатовЭП";
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	СтароеИмя = "Роль.ИспользованиеЭЦП";
	НовоеИмя  = "Роль.ИспользованиеЭП";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7", СтароеИмя, НовоеИмя, Библиотека);
	
	СтароеИмя = "Подсистема.СтандартныеПодсистемы.Подсистема.ЭлектроннаяЦифроваяПодпись";
	НовоеИмя  = "Подсистема.СтандартныеПодсистемы.Подсистема.ЭлектроннаяПодпись";
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.7", СтароеИмя, НовоеИмя, Библиотека);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		НастройкиПодсистемы = Новый Структура;
		НастройкиПодсистемы.Вставить("ПерсональныеНастройки", ПерсональныеНастройки());
		НастройкиПодсистемы.Вставить("ОбщиеНастройки", ОбщиеНастройки());
		НастройкиПодсистемы = Новый ФиксированнаяСтруктура(НастройкиПодсистемы);
		Параметры.Вставить("ЭлектроннаяПодпись", НастройкиПодсистемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
			ПодписываемыйОбъектСсылка,
			НоваяПодписьДвоичныеДанные,
			Отпечаток,
			ДатаПодписи,
			Комментарий,
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			ДвоичныеДанныеСертификата,
			УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка,, УникальныйИдентификатор);
	Иначе
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка;
	КонецЕсли;
	
	// сохранение подписи в табличной части объекта
	Если ТипЗнч(ПодписываемыйОбъектСсылка) <> Тип("Структура")
		И ПодписываемыйОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено Тогда 
		
		ДатаПодписиИзДвоичныхДанных = РаботаСЭП.ИзвлечьДатуСозданияПодписиИзДвоичныхДанных(
			НоваяПодписьДвоичныеДанные);
			
		Если ЗначениеЗаполнено(ДатаПодписиИзДвоичныхДанных) Тогда
			ДатаПодписи = ДатаПодписиИзДвоичныхДанных;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаПодписи) Тогда
			ДатаПодписи = ТекущаяДатаСеанса();
		КонецЕсли;	
		
		НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
		
		НоваяЗапись.КомуВыданСертификат = КомуВыданСертификат;
		НоваяЗапись.ДатаПодписи         = ДатаПодписи;
		НоваяЗапись.ИмяФайлаПодписи     = ИмяФайлаПодписи;
		НоваяЗапись.Комментарий         = Комментарий;
		НоваяЗапись.Отпечаток           = Отпечаток;
		НоваяЗапись.Подпись             = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
		НоваяЗапись.УстановившийПодпись = Пользователи.ТекущийПользователь();
		НоваяЗапись.Сертификат          = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
		
	// сохранение подписи в РС ЭП
	Иначе
		
		РаботаСЭП.ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка,
			НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий,
			ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	ПодписываемыйОбъект.ПодписанЭП = Истина;
	ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписываемыйОбъектСсылка)) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество подписей у данного объекта
//
// Параметры
//  ОбъектСсылка  - ЛюбаяСсылка - ссылка на объект, в табличной части которого содержатся подписи
//
// Возвращаемое значение:
//   Число  - количество подписей
Функция КоличествоПодписей(ОбъектСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	КОЛИЧЕСТВО(*) КАК ЧислоЗаписей
					   |ИЗ
					   |	";
					   
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектСсылка); 
		Запрос.Текст = Запрос.Текст + ".ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
					   |ГДЕ
					   |	ЭлектронныеЦифровыеПодписи.Ссылка = &ОбъектСсылка";
					   
		Запрос.Параметры.Вставить("ОбъектСсылка", ОбъектСсылка);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		
		ЧислоЗаписей = 0;
		Если ВыборкаЗапроса.Следующий() Тогда
			ЧислоЗаписей = ВыборкаЗапроса.ЧислоЗаписей;
		КонецЕсли;
		
		Возврат ЧислоЗаписей;
	Иначе
		Возврат РаботаСЭП.ПолучитьЭлектронныеПодписи(ОбъектСсылка).Количество();
	КонецЕсли;

КонецФункции	

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   Структура - Персональные настройки для работы с электронной подписью.
//       * ДействияПриСохраненииСЭП - Строка - Что делать при сохранении файлов с электронной подписью:
//           ** "Спрашивать" -
//           ** "СохранятьВсеПодписи" -
//       * РасширениеДляФайловПодписи - Строка -
//       * РасширениеДляЗашифрованныхФайлов - Строка -
//       * ОтпечатокЛичногоСертификатаДляШифрования - Строка -
//
// См. также:
//   ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки() - программный интерфейс для получения.
//   ОбщаяФорма.ПерсональныеНастройкиЭП - место определения данных параметров и их текстовые описания.
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", "Спрашивать");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = КлючХраненияНастроек();
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
	
КонецФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Параметры:
//   СтруктураОснование - Структура - Необязательный. Структура, в которую будут добавлены ключи общих настроек.
//
// Возвращаемое значение: 
//   Структура - Общие настройки подсистемы для работы с электронной подписью.
//       * ВыполнятьПроверкуЭПНаСервере - Булево -
//       * ИспользоватьЭлектронныеПодписи - Булево -
//       * ПрофилиНастроекКриптографии - Массив -
//           ** ПровайдерЭП - Строка -
//           ** ТипПровайдераЭП - Число -
//           ** АлгоритмПодписи - Строка -
//           ** АлгоритмХеширования - Строка -
//           ** АлгоритмШифрования - Строка -
//           ** ПутьМодуляКриптографии - Строка -
//
// См. также:
//   ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки() - единая точка входа.
//   ОбщаяФорма.НастройкиКриптографии - место определения данных параметров и их текстовые описания.
//
Функция ОбщиеНастройки(СтруктураОснование = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураОснование) = Тип("Структура") Тогда
		ОбщиеНастройки = СтруктураОснование;
	Иначе
		ОбщиеНастройки = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеНастройки.Вставить("ВыполнятьПроверкуЭПНаСервере",  Константы.ВыполнятьПроверкуЭПНаСервере.Получить());
	ОбщиеНастройки.Вставить("ИспользоватьЭлектронныеПодписи", Константы.ИспользоватьЭлектронныеПодписи.Получить());
	
	ПрофилиНастроекКриптографии = Новый Массив;
	ТаблицаПрофилейНастроекКриптографии = РаботаСЭП.ПрофилиНастроекКриптографии();
	Для Каждого ТекСтрока Из ТаблицаПрофилейНастроекКриптографии Цикл
		ПрофильНастроекКриптографии = Новый Структура(
			"ПровайдерЭП,
			|ТипПровайдераЭП,
			|АлгоритмПодписи,
			|АлгоритмХеширования,
			|АлгоритмШифрования,
			|ПутьМодуляКриптографии");
		ЗаполнитьЗначенияСвойств(ПрофильНастроекКриптографии, ТекСтрока);
		ПрофилиНастроекКриптографии.Добавить(ПрофильНастроекКриптографии);
	КонецЦикла;
	ОбщиеНастройки.Вставить("ПрофилиНастроекКриптографии", ПрофилиНастроекКриптографии);
	
	ОбщиеНастройки.Вставить("ПутьМодуляКриптографииСервера", "");
	Если ОбщиеНастройки.ВыполнятьПроверкуЭПНаСервере Тогда
		ОбщиеНастройки.ПутьМодуляКриптографииСервера = ЭлектроннаяПодписьПовтИсп.ПутьМодуляКриптографии();
	КонецЕсли;
	
	Возврат ОбщиеНастройки;
	
КонецФункции

// Преобразует назначения сертификатов в дружественный вид
// Параметры
//  Назначение  - Строка - назначение сертификата вида "TLS Web Client Authentication (1.3.6.1.5.5.7.3.2)"
//  НовоеНазначение  - Строка - удобное для понимания назначение сертификата вида "Проверка подлинности клиента"
//  ДобавлятьКодНазначения  - Булево - надо ли добавлять к назначению код назначения 
//    (например 1.3.6.1.5.5.7.3.2, чтобы получилось "Проверка подлинности клиента (1.3.6.1.5.5.7.3.2)")
Процедура ЗаполнитьНазначениеСертификата(Назначение, НовоеНазначение, ДобавлятьКодНазначения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НовоеНазначение = "";
	
	Для Индекс = 1 По СтрЧислоСтрок(Назначение) Цикл
		
		Строка = СтрПолучитьСтроку(Назначение, Индекс); 		
		Представление = Строка;
		Код = "";
		
		Позиция = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(Строка, "(");
		Если Позиция <> 0 Тогда
			
			Представление = Лев(Строка, Позиция - 1);
			Код = Сред(Строка, Позиция + 1, СтрДлина(Строка) - Позиция - 1);
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Код);
			Если СпрСсылка <> Неопределено И НЕ СпрСсылка.Пустая() Тогда
				Представление = СпрСсылка.Наименование;
			КонецЕсли;	
			
			Если ДобавлятьКодНазначения Тогда
				Представление = Представление  + " (" + Код + ")";
			КонецЕсли;
			
		КонецЕсли;		
		
		НовоеНазначение = НовоеНазначение + Представление;
		Если Индекс < СтрЧислоСтрок(Назначение) Тогда
			НовоеНазначение = НовоеНазначение + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Получает все подписи файла
//
// Параметры
//  СсылкаНаОбъект  - СправочникСсылка - ссылка объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено Тогда
		ПолноеИмяОбъектаСЭП = СсылкаНаОбъект.Метаданные().ПолноеИмя();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	ЭлектронныеЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
						|	ЭлектронныеЦифровыеПодписи.Подпись             КАК Подпись,
						|	ЭлектронныеЦифровыеПодписи.ИмяФайлаПодписи     КАК ИмяФайлаПодписи
						|ИЗ
						|	[ПолноеИмяОбъектаСЭП].ЭлектронныеЦифровыеПодписи КАК ЭлектронныеЦифровыеПодписи
						|ГДЕ
						|	ЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяОбъектаСЭП]", ПолноеИмяОбъектаСЭП);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Иначе
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(СсылкаНаОбъект);
	КонецЕсли;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		СтруктураВозврата = Новый Структура("АдресПодписи, КомуВыданСертификат, ИмяФайлаПодписи",
											АдресПодписи,
											ВыборкаЗапроса.КомуВыданСертификат,
											ВыборкаЗапроса.ИмяФайлаПодписи);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структурe данных из файла подписи
//
// Параметры
//  Подпись - ДвоичныеДанные - файл подписи.
//
// Возвращаемое значение
//  Структура:
//   Отпечаток                 - Строка
//   КомуВыданСертификат       - Строка
//   ДвоичныеДанныеСертификата - ДвоичныеДанные
//   Подпись                   - ХранилищеЗначения
//   Сертификат                - ХранилищеЗначения
//
// При возникновении ошибок разбора подписи возвращает Неопределено.
Функция ПрочитатьДанныеПодписи(Подпись) Экспорт
	
	Результат = Неопределено;
	
	МенеджерКриптографии = СоздатьМенеджерКриптографии();
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Подпись);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Если Сертификаты.Количество() > 0 Тогда
		Сертификат = Сертификаты[0];
		
		Результат = Новый Структура;
		Результат.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
		Результат.Вставить("КомуВыданСертификат", ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект));
		Результат.Вставить("ДвоичныеДанныеСертификата", Сертификат.Выгрузить());
		Результат.Вставить("Подпись", Новый ХранилищеЗначения(Подпись));
		Результат.Вставить("Сертификат", Новый ХранилищеЗначения(Сертификат.Выгрузить()));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Удаляет одну запись из табл части ЭП
//
// Параметры
//  ПодписываемыйОбъект - СправочникОбъект - подписываемый объект
//  ДанныеПодписи  - Структура - данные для поиска объекта и строки в его табличной части
Процедура УдалитьПодпись(ПодписанныйОбъект, ДанныеПодписи)
	
	Если ПодписанныйОбъект.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено Тогда
		
		НомерСтроки = ДанныеПодписи.НомерСтроки;
		
		СтрокаТабличнойЧасти = ПодписанныйОбъект.ЭлектронныеПодписи.Найти(НомерСтроки, "НомерСтроки");
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда 
				Если СтрокаТабличнойЧасти.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
					ВызватьИсключение НСтр("ru = 'Недостаточно прав на удаление подписи.'");
				КонецЕсли; 		
			КонецЕсли; 
			
			ПодписанныйОбъект.ЭлектронныеПодписи.Удалить(СтрокаТабличнойЧасти);
		Иначе	
			ВызватьИсключение НСтр("ru = 'Строка с подписью не найдена.'");
		КонецЕсли;
		
	Иначе
		
		УстановившийПодпись = ДанныеПодписи.УстановившийПодпись;
		ДатаПодписи = ДанныеПодписи.ДатаПодписи;
		
		Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда 
			Если УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
				ВызватьИсключение НСтр("ru = 'Недостаточно прав на удаление подписи.'");
			КонецЕсли; 		
		КонецЕсли; 
		
		Подпись = РаботаСЭП.ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект, УстановившийПодпись, ДатаПодписи);
		
		Если Подпись = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
		КонецЕсли;
		
		Подпись.Удалить();
		
	КонецЕсли;
		
КонецПроцедуры

// Получает менеджер на основе общих настроек криптографии.
Функция СоздатьМенеджерКриптографии()
	
	ОбщиеНастройки = ОбщиеНастройки();
	
	Если Не ОбщиеНастройки.ВыполнятьПроверкуЭПНаСервере Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(
			ОбщиеНастройки.ПровайдерЭП,
			ОбщиеНастройки.ПутьМодуляКриптографииСервера,
			ОбщиеНастройки.ТипПровайдераЭП);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при создании менеджера криптографии на сервере:
                  |%1
                  |Укажите настройки криптографии согласно инструкции фирмы-производителя криптопровайдера.'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	ЗаполнитьЗначенияСвойств(МенеджерКриптографии, ОбщиеНастройки);
	
	Возврат МенеджерКриптографии;
КонецФункции

// Сохраняет настройки текущего пользователя для работы с электронной подписью.
Процедура СохранитьПерсональныеНастройки(ПерсональныеНастройки) Экспорт
	
	КлючПодсистемы = КлючХраненияНастроек();
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючПодсистемы, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Ключ, который используется для хранения настроек подсистемы.
Функция КлючХраненияНастроек()
	
	Возврат "ЭЦП"; // Не заменять на "ЭП". Используется для обратной совместимости.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет справочник НазначенияСертификатовЭП значениями из макета
Процедура УдалитьСтарыеИЗаполнитьНазначенияСертификатовЭП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МакетУдаленный = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("УдалитьНазначенияСертификатов");
	ТабЗначенийУдаленный = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетУдаленный.ПолучитьТекст()).Данные;
	
	Макет = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("НазначенияСертификатов");
	ТабЗначений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из ТабЗначенийУдаленный Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка <> Неопределено И НЕ СпрСсылка.Пустая() Тогда
				
				СправочникОбъект = СпрСсылка.ПолучитьОбъект();
				СправочникОбъект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Запись Из ТабЗначений Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка = Неопределено ИЛИ СпрСсылка.Пустая() Тогда
				Элемент = Справочники.НазначенияСертификатовЭП.СоздатьЭлемент();
				Элемент.Код = Запись.Code;
				Элемент.Наименование = Запись.Name;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет справочник НазначенияСертификатовЭП значениями из макета
Процедура ЗаполнитьНазначенияСертификатовЭП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Макет = Справочники.НазначенияСертификатовЭП.ПолучитьМакет("НазначенияСертификатов");
	ТабЗначений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Запись Из ТабЗначений Цикл
			
			СпрСсылка = Справочники.НазначенияСертификатовЭП.НайтиПоКоду(Запись.Code);
			Если СпрСсылка = Неопределено ИЛИ СпрСсылка.Пустая() Тогда
				Элемент = Справочники.НазначенияСертификатовЭП.СоздатьЭлемент();
				Элемент.Код = Запись.Code;
				Элемент.Наименование = Запись.Name;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

//Мисофт+
Функция ПроверитьПодписьЭЦП(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	ОшибкиПроверки = Новый Структура;
		
	Попытка
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	Исключение
		Инфо = НСтр("ru='ЭЦП не верна: нарушена целостность подписанного документа или не найден файл, на который существует ссылка'");//ИнформацияОбОшибке();
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиПодписи", Инфо); 
	КонецПопытки;
	
	Если Сертификат <> Неопределено Тогда
		Попытка
			МассивРежимовПроверки = Новый Массив;
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
			МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		Исключение
			Инфо = ИнформацияОбОшибке();
			//МиСофт+
			ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", Сертификат.Субъект.CN + " (" + КраткоеПредставлениеОшибки(Инфо)+")");
			//МиСофт-
		КонецПопытки;
	Иначе
		//МиСофт+
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", "Сертификат не определен.");
		//МиСофт-
	КонецЕсли;
		
	Возврат ОшибкиПроверки;
	
КонецФункции


#КонецОбласти
