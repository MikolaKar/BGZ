
#Область ПрограммныйИнтерфейс

// Выполняет регитсрациб данных в регламентногм задании
Процедура ВыполнитьРегистрациюИзмененийДляМобильныхУстройств() Экспорт

	УзелОбмена = ОбменСМобильнымиПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ВыполнитьРегистрациюДанныхРегистра(УзелОбмена, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ВыполнитьРегистрациюДанныхКонстанты(УзелОбмена, МетаданныеЭлемента);

		Иначе
			ВыполнитьРегистрациюДанныхСсылочногоТипа(УзелОбмена, МетаданныеЭлемента);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//	Получает массив, содержащий ссылки на элементы справочника, документы, задачи, процессы, 
//	а также наборы регистров сведений, входящие в состав плана обмена указанного узла 
//	и зарегистрированных в данный момент на этом узле.
//
// Параметры:
//  УзелОбмена  - ссылка на узел плана обмена
//
// Возвращаемое значение:
//	Массив - содержит ссылки на справочники и документы, наборы записей регистров, менеджеры констант, 
//		изменения которых были зарегистрированы на указанном узле плана обмена в момент вызова функции.
Функция ПолучитьИзмененныеДанные(УзелОбмена, СПометкойУдаления = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МассивИзмененныхДанных = Новый Массив;

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		ЗапросИзменения    = Новый Запрос;
		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, СПометкойУдаления);

		КонецЕсли;

	КонецЦикла;

	Возврат МассивИзмененныхДанных;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции


Процедура ВыполнитьРегистрациюДанныхРегистра(УзелОбмена, МетаданныеЭлемента)

	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	// Сначала считываются все наборы значений измерений, соответствующие записям регистра,
	//	изменения которых зарегистрированы на указанном узле плана обмена.
	ЗапросИзменения = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	%2.Изменения КАК ИзмененияДанныхРегистра
		|ГДЕ
		|	ИзмененияДанныхРегистра.Узел = &Узел";

	СтрокаРеквизитыВЗапросе = "";

	Измерения = МетаданныеЭлемента.Измерения;

	Для Каждого Измерение Из Измерения Цикл

		СтрокаДляДобавления = "ИзмененияДанныхРегистра." + Измерение.Имя + " Как " + Измерение.Имя;

		Если ЗначениеЗаполнено(СтрокаРеквизитыВЗапросе) Тогда
			СтрокаРеквизитыВЗапросе = СтрокаРеквизитыВЗапросе + ", " + СтрокаДляДобавления;
		Иначе
			СтрокаРеквизитыВЗапросе = СтрокаДляДобавления;
		КонецЕсли;

	КонецЦикла;

	ЗапросИзменения.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзменения.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		СтрокаРеквизитыВЗапросе,
		ПолноеИмяМетаданныхЭлемента);

	МассивИзмененныхДанных = Новый Массив();
	Счетчик = 0;

	Выборка = ЗапросИзменения.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		// После того, как был считан очередной набор значений измерений регистра,
		//	по этому набору значений формируется набор записей регистра.
		ЗапросДанныеРегистра = Новый Запрос;
		ТекстЗапросаДляЧтенияДанныхРегистра = 
			"ВЫБРАТЬ
			|	%1
			|ИЗ
			|	%2 КАК Регистр
			|%3";

		// Добавление измерений регистра в секцию "Выбрать"
		СтрокаВыбрать = "";

		Для Каждого Измерение Из Измерения Цикл

			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Измерение.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Измерение.Имя;
			КонецЕсли;

		КонецЦикла;

		// Добавление ресурсов регистра в секцию "Выбрать"
		Ресурсы = МетаданныеЭлемента.Ресурсы;
		Для Каждого Ресурс Из Ресурсы Цикл

			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Ресурс.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Ресурс.Имя;
			КонецЕсли;

		КонецЦикла;

		// Добавление реквизитов регистра в секцию "Выбрать"
		Реквизиты = МетаданныеЭлемента.Реквизиты;
		Для Каждого Реквизит Из Реквизиты Цикл

			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Реквизит.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Реквизит.Имя;
			КонецЕсли;

		КонецЦикла;
		
		// Установка отбора в запрос на основании значений измерений регистра
		СтрокаГде = "";
		Для Каждого Измерение Из Измерения Цикл

			Если ЗначениеЗаполнено(СтрокаГде) Тогда
				СтрокаГде = СтрокаГде + " И " + "Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
			Иначе
				СтрокаГде = "ГДЕ Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
			КонецЕсли;

			ЗапросДанныеРегистра.УстановитьПараметр(Измерение.Имя, Выборка[Измерение.Имя]);

		КонецЦикла;

		ТекстЗапросаДляЧтенияДанныхРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗапросаДляЧтенияДанныхРегистра,
			СтрокаВыбрать,
			ПолноеИмяМетаданныхЭлемента,
			СтрокаГде);

		ЗапросДанныеРегистра.Текст = ТекстЗапросаДляЧтенияДанныхРегистра;

		ВыборкаДанныеРегистра = ЗапросДанныеРегистра.Выполнить().Выбрать();

		// После получения всех данных регистра запросом формируется набор записей регистра,
		//	так как дальнейшая обработка данных производится именно над наборами записей.
		НаборЗаписейРегистра = РегистрыСведений[ИмяМетаданныхЭлемента].СоздатьНаборЗаписей();
		Для Каждого Измерение Из Измерения Цикл
			НаборЗаписейРегистра.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
		КонецЦикла;
		Пока ВыборкаДанныеРегистра.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Новаязапись, ВыборкаДанныеРегистра);
		КонецЦикла;

		// Добавление сформированного набора записей регистра в массив измененных данных.
		// Этот массив будет передан в дальнейшую обработку.

		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(НаборЗаписейРегистра);

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьРегистрациюДанныхКонстанты(УзелОбмена, МетаданныеЭлемента)

	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ЗапросИзмененияКонстанты    = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИзменения.НомерСообщения
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = &Узел";

	ЗапросИзмененияКонстанты.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияКонстанты.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента);

	МассивИзмененныхДанных = Новый Массив();
	Счетчик = 0;

	РезультатЗапроса = ЗапросИзмененияКонстанты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Константы[ИмяМетаданныхЭлемента]);

	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьРегистрациюДанныхСсылочногоТипа(УзелОбмена, МетаданныеЭлемента)

	ИмяМетаданныхЭлемента       = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = &Узел";

	ЗапросИзмененияДанных       = Новый Запрос;
	ЗапросИзмененияДанных.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияДанных.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента);

	Выборка = ЗапросИзмененияДанных.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		ОбменСМобильными.ВыполнитьРегистрациюЭлементаДанных(Выборка.Ссылка);

	КонецЦикла;

КонецПроцедуры



Функция ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента)
	
	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	
	// Сначала считываются все наборы значений измерений, соответствующие записям регистра,
	//	изменения которых зарегистрированы на указанном узле плана обмена.
	ЗапросИзменения = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	%2.Изменения КАК ИзмененияДанныхРегистра
		|ГДЕ
		|	ИзмененияДанныхРегистра.Узел = &Узел";
		
	СтрокаРеквизитыВЗапросе = "";	
	Измерения = МетаданныеЭлемента.Измерения;
	Для Каждого Измерение Из Измерения Цикл
		СтрокаДляДобавления = "ИзмененияДанныхРегистра." + Измерение.Имя + " Как " + Измерение.Имя;
		Если ЗначениеЗаполнено(СтрокаРеквизитыВЗапросе) Тогда
			СтрокаРеквизитыВЗапросе = СтрокаРеквизитыВЗапросе + ", " + СтрокаДляДобавления;
		Иначе
			СтрокаРеквизитыВЗапросе = СтрокаДляДобавления;
		КонецЕсли;
	КонецЦикла;

	ЗапросИзменения.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		СтрокаРеквизитыВЗапросе,
		ПолноеИмяМетаданныхЭлемента);
		
	ЗапросИзменения.УстановитьПараметр("Узел", УзелОбмена);
	РезультатЗапроса = ЗапросИзменения.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// После того, как был считан очередной набор значений измерений регистра,
		//	по этому набору значений формируется набор записей регистра.
		ЗапросДанныеРегистра = Новый Запрос;
		ТекстЗапросаДляЧтенияДанныхРегистра = 
			"ВЫБРАТЬ
			|	%1
			|ИЗ
			|	%2 КАК Регистр
			|%3";
			
		// Добавление измерений регистра в секцию "Выбрать"
		СтрокаВыбрать = "";
		Для Каждого Измерение Из Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Измерение.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Измерение.Имя;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление ресурсов регистра в секцию "Выбрать"
		Ресурсы = МетаданныеЭлемента.Ресурсы;
		Для Каждого Ресурс Из Ресурсы Цикл
			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Ресурс.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Ресурс.Имя;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление реквизитов регистра в секцию "Выбрать"
		Реквизиты = МетаданныеЭлемента.Реквизиты;
		Для Каждого Реквизит Из Реквизиты Цикл
			Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
				СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Реквизит.Имя;
			Иначе
				СтрокаВыбрать = "Регистр." + Реквизит.Имя;
			КонецЕсли;
		КонецЦикла;
		
		// Установка отбора в запрос на основании значений измерений регистра
		СтрокаГде = "";
		Для Каждого Измерение Из Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаГде) Тогда
				СтрокаГде = СтрокаГде + " И " + "Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
			Иначе
				СтрокаГде = "ГДЕ Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
			КонецЕсли;
			ЗапросДанныеРегистра.УстановитьПараметр(Измерение.Имя, Выборка[Измерение.Имя]);
		КонецЦикла;
		
		ТекстЗапросаДляЧтенияДанныхРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗапросаДляЧтенияДанныхРегистра,
			СтрокаВыбрать,
			ПолноеИмяМетаданныхЭлемента,
			СтрокаГде);
		
		ЗапросДанныеРегистра.Текст = ТекстЗапросаДляЧтенияДанныхРегистра;
		ВыборкаДанныеРегистра = ЗапросДанныеРегистра.Выполнить().Выбрать();
		
		// После получения всех данных регистра запросом формируется набор записей регистра,
		//	так как дальнейшая обработка данных производится именно над наборами записей.
		НаборЗаписейРегистра = РегистрыСведений[ИмяМетаданныхЭлемента].СоздатьНаборЗаписей();
		Для Каждого Измерение Из Измерения Цикл
			НаборЗаписейРегистра.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
		КонецЦикла;
		Пока ВыборкаДанныеРегистра.Следующий() Цикл
			НоваяЗапись = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Новаязапись, ВыборкаДанныеРегистра);
		КонецЦикла;
		
		// Добавление сформированного набора записей регистра в массив измененных данных.
		// Этот массив будет передан в дальнейшую обработку.
		МассивИзмененныхДанных.Добавить(НаборЗаписейРегистра);
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента)
	
	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	
	ЗапросИзмененияКонстанты = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИзменения.НомерСообщения
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = &Узел";
	
	ЗапросИзмененияКонстанты.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента);
	ЗапросИзмененияКонстанты.УстановитьПараметр("Узел", УзелОбмена);
	РезультатЗапроса = ЗапросИзмененияКонстанты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		МассивИзмененныхДанных.Добавить(Константы[ИмяМетаданныхЭлемента]);
	КонецЕсли;
			
КонецФункции

Функция ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, СПометкойУдаления = Ложь)
	
	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ЭлементЗапроса = ?(СПометкойУдаления, "ТаблицаИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,", "");

	ЗапросИзмененияДанных = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%2
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = &Узел";
		
	ЗапросИзмененияДанных.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента,
		ЭлементЗапроса);

	ЗапросИзмененияДанных.УстановитьПараметр("Узел", УзелОбмена);

	РезультатЗапроса = ЗапросИзмененияДанных.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если СПометкойУдаления Тогда
			СтруктураДанных = Новый Структура("Ссылка, ПометкаУдаления", Выборка.Ссылка, Выборка.ПометкаУдаления);
			МассивИзмененныхДанных.Добавить(СтруктураДанных);
		Иначе
			МассивИзмененныхДанных.Добавить(Выборка.Ссылка);
		КонецЕсли;

	КонецЦикла;

КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
