////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает список событий за период
Процедура ОткрытьСписокСобытийЗаПериод(ДатаНачала = Неопределено, ДатаОкончания = Неопределено,
	ВесьДень = Неопределено, Заголовок = Неопределено, СписокПользователей = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура("ДатаНачала, ДатаОкончания, ВесьДень, Заголовок, СписокПользователей",
		ДатаНачала, ДатаОкончания, ВесьДень, Заголовок, СписокПользователей);
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ФормаСобытийДня", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму занятости пользователей
Процедура ОткрытьФормуЗанятостиПользователей(ОписаниеОповещения,
	Пользователи, ДатаНачала, ДатаОкончания, ИсключенияЗанятости) Экспорт
	
	НастройкаВыбораЗанятости = Новый Структура("Пользователи, ДатаНачала, ДатаОкончания, ИсключенияЗанятости");
	НастройкаВыбораЗанятости.Пользователи = Пользователи;
	НастройкаВыбораЗанятости.ДатаНачала = ДатаНачала;
	НастройкаВыбораЗанятости.ДатаОкончания = ДатаОкончания;
	НастройкаВыбораЗанятости.ИсключенияЗанятости = ИсключенияЗанятости;
	
	ПараметрыФормы = Новый Структура("НастройкаВыбораЗанятости");
	ПараметрыФормы.НастройкаВыбораЗанятости = НастройкаВыбораЗанятости;
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ЗанятостьПользователей", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

// Открывать список записей календаря по предмету
Процедура ОткрытьСписокЗаписейКалендаряПоПредмету(Предмет, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	Отбор = Новый Структура("Предмет", Предмет);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	Если ПараметрыВыполненияКоманды <> Неопределено Тогда
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаСписка", ПараметрыФормы,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно);
	Иначе
		ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаСписка", ПараметрыФормы, , Предмет,);
	КонецЕсли;
	
КонецПроцедуры

// Создает событие календаря с заполнением предмета, даты начала, даты окончания по необходимости.
Процедура СоздатьЗаписьКалендаря(Предмет = Неопределено, ДатаНачала = Неопределено,
	ДатаОкончания = Неопределено, ВесьДень = Ложь) Экспорт
	
	СтруктураОснование = Новый Структура("Предмет, ДатаНачала, ДатаОкончания, ВесьДень");
	СтруктураОснование.Предмет = Предмет;
	СтруктураОснование.ДатаНачала = ДатаНачала;
	СтруктураОснование.ДатаОкончания = ДатаОкончания;
	СтруктураОснование.ВесьДень = ВесьДень;
	
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Создает мероприятие с заполнением даты начала и даты окончания
Процедура СоздатьМероприятие(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВесьДень = Ложь) Экспорт
	
	Если ВесьДень Тогда
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ДатаНачала);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = НачалоДня(ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("ДатаНачала, ДатаОкончания, Основание");
	СтруктураОснование.ДатаНачала = ДатаНачала;
	СтруктураОснование.ДатаОкончания = ДатаОкончания;
	СтруктураОснование.Основание = Неопределено;
	
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Создает занятость с заполнением даты начала и даты окончания
Процедура СоздатьЗанятость(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВесьДень = Ложь) Экспорт
	
	Если ВесьДень Тогда
		
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ДатаНачала);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = НачалоДня(ДатаОкончания);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("ДатаНачала, ДатаОкончания");
	СтруктураОснование.ДатаНачала = ДатаНачала;
	СтруктураОснование.ДатаОкончания = ДатаОкончания;
	
	ПараметрыФормы = Новый Структура("Основание");
	ПараметрыФормы.Основание = СтруктураОснование;
	
	ОткрытьФорму("РегистрСведений.ЗанятостьПользователя.Форма.ВводЗанятости", ПараметрыФормы);
	
КонецПроцедуры

// Обрабатывает выбор исключения повторения
Процедура ОбработкаВыбораПовторяющегосяСобытия(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПовторяющеесяСобытие", ПовторяющеесяСобытие);
	ПараметрыОбработчика.Вставить("ДатаИсключения", ДатаИсключения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПовторяющегосяСобытияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Это повторяющееся событие.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ИзменитьОдно", НСтр("ru = 'Изменить одно событие'"));
	Кнопки.Добавить("ИзменитьВсе", НСтр("ru = 'Изменить все'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "ИзменитьОдно");
	
КонецПроцедуры

// Создает элемент повторяющегося событие на конкретную дату
Процедура СоздатьИсключениеПовторения(ПовторяющеесяСобытие, ДатаИсключения) Экспорт
	
	СтруктураОснование = Новый Структура("ПовторяющеесяСобытие, ДатаИсключения");
	СтруктураОснование.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	СтруктураОснование.ДатаИсключения = ДатаИсключения;
	
	ПараметрыФормы = Новый Структура("Основание, ПовторяющеесяСобытие, ДатаИсключения");
	ПараметрыФормы.Основание = СтруктураОснование;
	ПараметрыФормы.ПовторяющеесяСобытие = ПовторяющеесяСобытие;
	ПараметрыФормы.ДатаИсключения = ДатаИсключения;
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Копирует существующее событие
Процедура СкопироватьЗаписьКалендаря(ЗаписьКалендаря) Экспорт
	
	Параметры = Новый Структура("Основание", ЗаписьКалендаря);
	Форма = ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.ФормаОбъекта", Параметры);
	
КонецПроцедуры

// Устанавливает цвет, которым отображается событие в календаре пользователя и посылает уведомление.
Процедура УстановитьЦветЗаписиКалендаря(Цвет, Запись) Экспорт
	
	РезультатИзменениеЦвета = РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(Цвет, Запись);
	
	Если ТипЗнч(РезультатИзменениеЦвета) = Тип("Структура")
		И РезультатИзменениеЦвета.Свойство("ИзмененоЗначениеНастройки")
		И РезультатИзменениеЦвета.ИзмененоЗначениеНастройки Тогда
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("Цвет", РезультатИзменениеЦвета.Цвет);
		ПараметрыОповещения.Вставить("Запись", РезультатИзменениеЦвета.Запись);
		ПараметрыОповещения.Вставить("ОписаниеКраткое", РезультатИзменениеЦвета.ОписаниеКраткое);
		Оповестить("Запись_ЦветЗаписиКалендаря", ПараметрыОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает цвет, которым отображается события в календаре пользователя и посылает уведомление.
Процедура УстановитьЦветЗаписейКалендаря(Цвет, Записи) Экспорт
	
	Если Записи.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось изменить цвет, т.к. не выбраны записи календаря.'"));
		Возврат;
	КонецЕсли;
	
	РезультатИзменениеЦвета = РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписейКалендаря(Цвет, Записи);
	
	МассивИзмененияЦвета = Новый Массив;
	
	Для Каждого РезультатИзменениеЦветаЗаписи Из РезультатИзменениеЦвета Цикл
		
		Если ТипЗнч(РезультатИзменениеЦветаЗаписи) = Тип("Структура")
			И РезультатИзменениеЦветаЗаписи.Свойство("ИзмененоЗначениеНастройки")
			И РезультатИзменениеЦветаЗаписи.ИзмененоЗначениеНастройки Тогда
			
			ИзменениеЦвета = Новый Структура();
			ИзменениеЦвета.Вставить("Цвет", РезультатИзменениеЦветаЗаписи.Цвет);
			ИзменениеЦвета.Вставить("Запись", РезультатИзменениеЦветаЗаписи.Запись);
			ИзменениеЦвета.Вставить("ОписаниеКраткое", РезультатИзменениеЦветаЗаписи.ОписаниеКраткое);
			МассивИзмененияЦвета.Добавить(ИзменениеЦвета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("МассивИзмененияЦвета", МассивИзмененияЦвета);
	Оповестить("Запись_ЦветЗаписиКалендаря", ПараметрыОповещения);
	
КонецПроцедуры

// Краткое словесное описание назначения и/или принципов работы процедуры (функции).
//
// Параметры:
//  ПараметрОповещения - Структура, Массив - Параметр оповещения об изменении цвета.
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Проверяемая запись календаря.
//
// Возвращаемое значение:
//  Булево - Изменился ли цвет записи календаря.
//
Функция ИзменилсяЦвет(ПараметрОповещения, ЗаписьКалендаря) Экспорт
	
	Если ТипЗнч(ПараметрОповещения) = Тип("Структура") И ПараметрОповещения.Свойство("МассивИзмененияЦвета") Тогда
		МассивИзмененияЦвета = ПараметрОповещения.МассивИзмененияЦвета;
	ИначеЕсли ТипЗнч(ПараметрОповещения) = Тип("Структура") И ПараметрОповещения.Свойство("Запись") И ПараметрОповещения.Свойство("ОписаниеКраткое") И ПараметрОповещения.Свойство("Цвет") Тогда
		МассивИзмененияЦвета = Новый Массив;
		МассивИзмененияЦвета.Добавить(ПараметрОповещения);
	КонецЕсли;
	
	Для Каждого ИзменениеЦвета Из МассивИзмененияЦвета Цикл
		Если ИзменениеЦвета.Запись = ЗаписьКалендаря Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает пометку удаления записи и оповещает другие формы.
Процедура УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	Если ТипЗнч(Запись) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Запись", Запись);
	ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	Если ПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			Запись);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			Запись);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
Процедура УстановитьПометкиУдаления(Записи, ПовторяющиесяСобытия, ПометкаУдаления, ОбработанныеВопросы = Неопределено) Экспорт
	
	Если ТипЗнч(Записи) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
	ЕстьПовторяющиесяСобытия = (ПовторяющиесяСобытия.Количество() > 0);
	
	Если Записи.Количество() = 1 И Не ЕстьПовторяющиесяСобытия Тогда
		УстановитьПометкуУдаления(Записи[0], ПометкаУдаления);
		Возврат;
	ИначеЕсли Записи.Количество() = 0 И Не ЕстьПовторяющиесяСобытия Тогда
		Возврат;
	КонецЕсли;
	
	Если Записи.Количество() >= 1 И Не ОбработанныеВопросы.Свойство("ИзмененаПометкаУдаления") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Записи", Записи);
		ПараметрыОбработчика.Вставить("ПовторяющиесяСобытия", ПовторяющиесяСобытия);
		ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	УдалитьОдно = Ложь;
	Если ПометкаУдаления И ЕстьПовторяющиесяСобытия Тогда
		
		Если Не ОбработанныеВопросы.Свойство("УдаленыПовторяющиесяСобытия") Тогда
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Записи", Записи);
			ПараметрыОбработчика.Вставить("ПовторяющиесяСобытия", ПовторяющиесяСобытия);
			ПараметрыОбработчика.Вставить("ПометкаУдаления", ПометкаУдаления);
			ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"УстановитьПометкиУдаленияПослеВопросаОбУдаленииПовторяющихсяСобытиях",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ТекстВопроса = НСтр("ru = 'Среди выделенных элементов есть повторяющиеся события.
				|Удалить только эти элементы повторения, или повторяющиеся события целиком?'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("УдалитьОдно", НСтр("ru = 'Удалить только эти'"));
			Кнопки.Добавить("УдалитьВсе", НСтр("ru = 'Удалить целиком'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "УдалитьОдно");
			Возврат;
			
		ИначеЕсли ОбработанныеВопросы.Свойство("УдалитьОдно") Тогда
			УдалитьОдно = ОбработанныеВопросы.УдалитьОдно;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановленаПометкаУдаления = РаботаСРабочимКалендаремСервер.УстановитьПометкиУдаления(
		Записи, ПовторяющиесяСобытия, ПометкаУдаления, УдалитьОдно);
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив записей календаря, содержащихся в выделенной области
Функция ПолучитьСобытияВВыделеннойОбласти(Календарь, ПометкаУдаления = Ложь, ВключаяПовторяющиеся = Истина) Экспорт
	
	События = Новый Массив;
	
	Для Каждого ВыделеннаяОбласть Из Календарь.ВыделенныеОбласти Цикл
		
		СобытияОбласти = ПолучитьСобытияОбласти(Календарь, ВыделеннаяОбласть, ПометкаУдаления, ВключаяПовторяющиеся);
		
		Для Каждого Событие Из СобытияОбласти Цикл
			
			ДобавитьЗначениеВМассив(Событие, События);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат События;
	
КонецФункции

// Возвращает массив повторяющихся событий, содержащихся в выделенной области
Функция ПолучитьПовторяющиесяСобытияВВыделеннойОбласти(Календарь) Экспорт
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для Каждого ВыделеннаяОбласть Из Календарь.ВыделенныеОбласти Цикл
		
		ПовторяющиесяСобытияОбласти = ПолучитьПовторяющиесяСобытияОбласти(Календарь, ВыделеннаяОбласть);
		
		Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытияОбласти Цикл
			
			ДобавитьЗначениеВМассив(ПовторяющеесяСобытие, ПовторяющиесяСобытия);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

// Возвращает структуру времени выделенной области
Функция ПолучитьВремяВВыделеннойОбласти(Календарь, МножественноеВыделение = Ложь) Экспорт
	
	Если МножественноеВыделение Тогда
		
		МассивВремен = Новый Массив;
		Для Каждого ВыделеннаяОбласть Из Календарь.ВыделенныеОбласти Цикл
			ЗаполнитьМассивВременОбласти(Календарь, ВыделеннаяОбласть, МассивВремен);
		КонецЦикла;
		
		Возврат МассивВремен;
		
	Иначе
		
		Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя();
		
		Для Каждого ВыделеннаяОбласть Из Календарь.ВыделенныеОбласти Цикл
			
			ВремяОбласти = ПолучитьВремяОбласти(Календарь, ВыделеннаяОбласть);
			
			РасширитьВыделенноеВремя(
				Время,
				ВремяОбласти.ДатаНачала,
				ВремяОбласти.ДатаОкончания,
				ВремяОбласти.ВесьДень);
			
		КонецЦикла;
		
		Возврат Время;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив записей календаря и дат начала в выделенной области
Функция ПолучитьМассивЗаписейКалендаря(Календарь) Экспорт
	
	МассивЗаписейКалендаря = Новый Массив;
	
	Для Каждого ВыделеннаяОбласть Из Календарь.ВыделенныеОбласти Цикл
		
		ЗаписиКалендаряОбласти = ПолучитьЗаписиКалендаряОбласти(Календарь, ВыделеннаяОбласть);
		
		Для Каждого ЗаписьКалендаряОбласти Из ЗаписиКалендаряОбласти Цикл
			
			ДобавитьЗначениеВМассив(ЗаписьКалендаряОбласти, МассивЗаписейКалендаря);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЗаписейКалендаря;
	
КонецФункции

// Возвращает события текущей области 
Функция ПолучитьЗаписиКалендаряОбласти(Календарь, Область)
	
	МассивЗаписейКалендаря = Новый Массив;
	
	Для КоординатаX = Область.Лево По Область.Право Цикл
		
		Для КоординатаY = Область.Верх По Область.Низ Цикл
			
			Попытка
				
				СоставляющаяОбласть = Календарь.Область(КоординатаY, КоординатаX);
				
				Если ТипЗнч(СоставляющаяОбласть.Расшифровка) = Тип("Структура")
					И (СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДень")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Мероприятие")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДеньПовторяющееся")) Тогда
					
					СтруктураЗаписиКалендаря = Новый Структура("Ссылка, ДеньНачала");
					СтруктураЗаписиКалендаря.Ссылка = СоставляющаяОбласть.Расшифровка.Событие;
					СтруктураЗаписиКалендаря.ДеньНачала = НачалоДня(СоставляющаяОбласть.Расшифровка.ДатаНачала);
					ДобавитьЗначениеВМассив(СтруктураЗаписиКалендаря, МассивЗаписейКалендаря);
					
				КонецЕсли;
				
			Исключение
				
				// Возникает, например, для всей области табличного документа
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивЗаписейКалендаря;
	
КонецФункции

// Открывает форму настройки повторения события
Функция ОткрытьФормуНастройкиПовторения(ЗаписьКалендаря) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаписьКалендаря", ЗаписьКалендаря);
	
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ФормаНастройкиПовторения", ПараметрыФормы);
	
КонецФункции

// Устанавливает повторение события в соответствии с настройками
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	РаботаСРабочимКалендаремСервер.УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения);
	Оповестить("Запись_ЗаписьКалендаря", ЗаписьКалендаря);
	
КонецПроцедуры

// Формирует HTML представление события
Функция СформироватьHTMLПредставление(Событие, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Возврат РаботаСРабочимКалендаремСервер.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	
КонецФункции

// Открывает форму настройку доступного времени
Процедура ОткрытьФормуНастройкиДоступногоВремени() Экспорт
	
	ОткрытьФорму("РегистрСведений.ДоступноеВремяПользователя.Форма.НастройкаДоступногоВремени");
	
КонецПроцедуры

// Проверяет, заняты ли пользователи в указанное время
Функция ПроверитьДоступностьПользователей(Знач МассивПользователей, ДатаНачала, ДатаОкончания,
	ИспользоватьРабочийКалендарь, ИсключенияЗанятости = Неопределено, ЗадаватьВопрос = Истина, ОписаниеОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьРабочийКалендарь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(МассивПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	ИначеЕсли ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания)
		Или МассивПользователей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДоступностьПользователей = РаботаСРабочимКалендаремСервер.ПроверитьДоступностьПользователей(
		МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	
	Если Не ЗадаватьВопрос Тогда
		Возврат ДоступностьПользователей.ОбщаяЗанятость = ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Доступен");
	КонецЕсли;
	
	ПодписьЗанятыеПользователи = ПолучитьПодписьЗанятостиПользователей(
		ДоступностьПользователей.ПользователиПодВопросом, ДоступностьПользователей.ПользователиЗанятые);
	
	Если ДоступностьПользователей.ОбщаяЗанятость =
		ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Занят") Тогда
		
		ТекстВопроса = НСтр("ru = 'Выбранное время является занятым. Продолжить?'")
			+ ПодписьЗанятыеПользователи;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Проверка доступности'"));
		Возврат Ложь;
		
	ИначеЕсли ДоступностьПользователей.ОбщаяЗанятость =
		ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.ПодВопросом") Тогда
		
		ТекстВопроса = НСтр("ru = 'Доступность выбранного времени под вопросом. Продолжить?'")
			+ ПодписьЗанятыеПользователи;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Проверка доступности'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Переносит записи календаря на указанную дату
Процедура ПеренестиЗаписиКалендаряНаДату(МассивЗаписейКалендаря, ДатаПереноса) Экспорт
	
	РаботаСРабочимКалендаремСервер.ПеренестиЗаписиКалендаряНаДату(МассивЗаписейКалендаря, ДатаПереноса);
	
	Оповестить("Запись_ЗаписьКалендаря");
	
КонецПроцедуры

// Формирует данные выбора времени для полей ввода времени.
//
// Параметры:
//  ТекстВремя - Строка - Строковое представление времени в формате "ХХ:ХХ", где Х - число или пробел.
//  ДанныеВыбора - СписокЗначений - Список значений, который будет использоваться при обработке выбора.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки. Если текст времени не заполнен,
//                                  то не меняется. В остальных случаях устанавливается в Ложь.
//  Дата - Дата - Дата, для которой формируются данные подбора. По умолчанию - без даты.
//
Процедура СформироватьДанныеВыбораВремени(ТекстВремя, ДанныеВыбора, Знач Дата = Неопределено,
	ИспользоватьТекущуюДату = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекстВремя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = Дата(1,1,1);
	КонецЕсли;
	
	Если ИспользоватьТекущуюДату И Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	// Определение количества введенных символов времени и введенного времени
	Если Сред(ТекстВремя, 5, 1) <> " " Тогда
		КоличествоСимволовДаты = 4;
	ИначеЕсли Сред(ТекстВремя, 4, 1) <> " " Тогда
		КоличествоСимволовДаты = 3;
	ИначеЕсли Сред(ТекстВремя, 2, 1) <> " " Тогда
		КоличествоСимволовДаты = 2;
	ИначеЕсли Сред(ТекстВремя, 1, 1) <> " " Тогда
		КоличествоСимволовДаты = 1;
	Иначе
		КоличествоСимволовДаты = 0;
	КонецЕсли;
	
	ВведенноеВремя = РаботаСРабочимКалендаремКлиентСервер.ПреобразоватьТекстКДате(Дата, ТекстВремя);
	Если ВведенноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных выбора
	ДанныеВыбора = Новый СписокЗначений;
	
	Если КоличествоСимволовДаты = 0 Тогда
		
		// Введено время 00:00. Включаем в данные выбора 00:00, 01:00, ... , 23:00.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 24);
		
	ИначеЕсли КоличествоСимволовДаты = 1 Тогда
		
		Если Час(ВведенноеВремя) = 20 Тогда
			// Введено время 20:00. Включаем в данные выбора 20:00, 21:00, 22:00, 23:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 4);
		Иначе
			// Введено время Х0:00. Включаем в данные выбора Х0:00, Х1:00, ... , Х9:00.
			ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 10);
		КонецЕсли;
		
	ИначеЕсли КоличествоСимволовДаты = 2 Тогда
		
		// Введено время ХХ:00. Включаем в данные выбора ХХ:00, ХХ:10, ... , ХХ:50.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 600, 6);
		
	ИначеЕсли КоличествоСимволовДаты = 3 Тогда
		
		// Введено время ХХ:Х0. Включаем в данные выбора ХХ:Х0, ХХ:Х5.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 300, 2);
		
	ИначеЕсли КоличествоСимволовДаты = 4 Тогда 
		
		// Введено время ХХ:ХХ. Включаем в данные выбора ХХ:ХХ.
		ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет доступность переданного массива времен
Процедура ИзменитьДоступностьВремен(МассивВремен) Экспорт
	
	Состояние(НСтр("ru = 'Изменяется доступность времени. Пожалуйста подождите...'"));
	
	НоваяЗанятость = РаботаСРабочимКалендаремСервер.ИзменитьДоступностьВремен(МассивВремен);
	
	Если НоваяЗанятость <> Неопределено Тогда
		
		Если НоваяЗанятость = ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Занят") Тогда
			ПредставлениеЗанятости = НСтр("ru = 'недоступное'");
		ИначеЕсли НоваяЗанятость = ПредопределенноеЗначение("Перечисление.СостоянияЗанятости.Доступен") Тогда
			ПредставлениеЗанятости = НСтр("ru = 'доступное'");
		КонецЕсли;
		
		Если МассивВремен.Количество() = 1 Тогда
			
			ДатаНачала = МассивВремен[0].ДатаНачала;
			ДатаОкончания = МассивВремен[0].ДатаОкончания;
			
			ПредставлениеВремяНачала = Формат(ДатаНачала, "ДФ=ЧЧ:мм");
			ПредставлениеВремяОкончания = Формат(ДатаОкончания, "ДФ=ЧЧ:мм");
			
			ТекстСостояние = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Время с %1 до %2 помечено как %3'"),
					ПредставлениеВремяНачала,
					ПредставлениеВремяОкончания,
					ПредставлениеЗанятости);
			
		Иначе
			
			ТекстСостояние = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Время помечено как %1'"),
					ПредставлениеЗанятости);
			
		КонецЕсли;
		
		Состояние(ТекстСостояние);
		
	Иначе
		
		Состояние(НСтр("ru = 'Не удалось установить занятость.'"));
		
	КонецЕсли;
	
	Оповестить("Запись_ДоступноеВремяПользователя");
	
КонецПроцедуры

// Выполняет печать карточек записей календаря.
//
// Параметры:
//  ЗаписиКалендаря - Массив - Структуры записей календаря, которые необходимо распечатать.
//   * Ссылка - СправочникСсылка.ЗаписиРабочегоКалендаря - Ссылка на запись рабочего календаря.
//   * ДеньНачала - Дата - Дата, к которой относится запись календаря.
//  ВладелецФормы - УправляемаяФорма - Форма из которой производится печать.
//
Процедура Печать(ЗаписиКалендаря, ВладелецФормы) Экспорт
	
	Если ЗаписиКалендаря.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбрана запись календаря.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого ЗаписьКалендаря Из ЗаписиКалендаря Цикл
		МассивСсылок.Добавить(ЗаписьКалендаря.Ссылка);
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ЗаписиКалендаря", ЗаписиКалендаря);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.ЗаписиРабочегоКалендаря",
		"Карточка",
		МассивСсылок,
		ВладелецФормы,
		ПараметрыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает выбор исключения повторения
Процедура ОбработкаВыбораПовторяющегосяСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ИзменитьОдно" Тогда 
		СоздатьИсключениеПовторения(
			ДополнительныеПараметры.ПовторяющеесяСобытие,
			ДополнительныеПараметры.ДатаИсключения);
	ИначеЕсли Результат = "ИзменитьВсе" Тогда 
		ПоказатьЗначение(, ДополнительныеПараметры.ПовторяющеесяСобытие);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
Процедура УстановитьПометкуУдаленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановленаПометкаУдаления = РаботаСРабочимКалендаремСервер.УстановитьПометкуУдаления(
		ДополнительныеПараметры.Запись,
		ДополнительныеПараметры.ПометкаУдаления);
	
	Если УстановленаПометкаУдаления Тогда
		Оповестить("Запись_ЗаписьКалендаря", ДополнительныеПараметры.Запись);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
Процедура УстановитьПометкиУдаленияПослеВопросаОбИзмененииПометкиУдаления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("ИзмененаПометкаУдаления", Истина);
	
	УстановитьПометкиУдаления(
		ДополнительныеПараметры.Записи,
		ДополнительныеПараметры.ПовторяющиесяСобытия,
		ДополнительныеПараметры.ПометкаУдаления,
		ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

// Устанавливает пометки удаления записей и оповещает другие формы.
Процедура УстановитьПометкиУдаленияПослеВопросаОбУдаленииПовторяющихсяСобытиях(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "УдалитьОдно" Тогда 
		УдалитьОдно = Истина;
	ИначеЕсли Результат = "УдалитьВсе" Тогда 
		УдалитьОдно = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("УдаленыПовторяющиесяСобытия", Истина);
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("УдалитьОдно", УдалитьОдно);
	
	УстановитьПометкиУдаления(
		ДополнительныеПараметры.Записи,
		ДополнительныеПараметры.ПовторяющиесяСобытия,
		ДополнительныеПараметры.ПометкаУдаления,
		ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

// Возвращает события текущей области 
Функция ПолучитьСобытияОбласти(Календарь, Область, ПометкаУдаления, ВключаяПовторяющиеся)
	
	События = Новый Массив;
	
	Для КоординатаX = Область.Лево По Область.Право Цикл
		
		Для КоординатаY = Область.Верх По Область.Низ Цикл
			
			Попытка
				
				СоставляющаяОбласть = Календарь.Область(КоординатаY, КоординатаX);
				
				Если ТипЗнч(СоставляющаяОбласть.Расшифровка) = Тип("Структура")
					И СоставляющаяОбласть.Расшифровка.Свойство("Событие")
					И СоставляющаяОбласть.Расшифровка.Событие <> Неопределено
					И СоставляющаяОбласть.Расшифровка.Свойство("ПометкаУдаления")
					И СоставляющаяОбласть.Расшифровка.ПометкаУдаления <> Неопределено
					И (СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Событие")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДень")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.Мероприятие")
						ИЛИ (ВключаяПовторяющиеся
							И (СоставляющаяОбласть.Расшифровка.ВидЭлемента =
									ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся")
								ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
									ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДеньПовторяющееся")))) Тогда
					
					ДобавитьЗначениеВМассив(СоставляющаяОбласть.Расшифровка.Событие, События);
					ПометкаУдаления = ПометкаУдаления ИЛИ СоставляющаяОбласть.Расшифровка.ПометкаУдаления;
					
				КонецЕсли;
				
			Исключение
				
				// Возникает, например, для всей области табличного документа
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат События;
	
КонецФункции

// Возвращает события текущей области 
Функция ПолучитьПовторяющиесяСобытияОбласти(Календарь, Область)
	
	ПовторяющиесяСобытия = Новый Массив;
	
	Для КоординатаX = Область.Лево По Область.Право Цикл
		
		Для КоординатаY = Область.Верх По Область.Низ Цикл
			
			Попытка
				
				СоставляющаяОбласть = Календарь.Область(КоординатаY, КоординатаX);
				
				Если ТипЗнч(СоставляющаяОбласть.Расшифровка) = Тип("Структура")
					И СоставляющаяОбласть.Расшифровка.Свойство("Событие")
					И СоставляющаяОбласть.Расшифровка.Событие <> Неопределено
					И (СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся")
						ИЛИ СоставляющаяОбласть.Расшифровка.ВидЭлемента =
							ПредопределенноеЗначение("Перечисление.ЭлементыРабочегоКалендаря.СобытиеВесьДеньПовторяющееся")) Тогда
					
					ПовторяющеесяСобытие = Новый Структура("ЗаписьКалендаря, ДатаИсключения");
					ПовторяющеесяСобытие.ЗаписьКалендаря = СоставляющаяОбласть.Расшифровка.Событие;
					ПовторяющеесяСобытие.ДатаИсключения = НачалоДня(СоставляющаяОбласть.Расшифровка.ДатаНачала);
					
					ДобавитьЗначениеВМассив(ПовторяющеесяСобытие, ПовторяющиесяСобытия);
					
				КонецЕсли;
				
			Исключение
				
				// Возникает, например, для всей области табличного документа
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПовторяющиесяСобытия;
	
КонецФункции

// Возвращает время текущей области 
Функция ПолучитьВремяОбласти(Календарь, Область)
	
	Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя();
	
	Для КоординатаX = Область.Лево По Область.Право Цикл
		
		Для КоординатаY = Область.Верх По Область.Низ Цикл
			
			Попытка
				
				СоставляющаяОбласть = Календарь.Область(КоординатаY, КоординатаX);
				
				Если ТипЗнч(СоставляющаяОбласть.Расшифровка) = Тип("Структура")
					И СоставляющаяОбласть.Расшифровка.Свойство("ДатаНачала")
					И СоставляющаяОбласть.Расшифровка.ДатаНачала <> Неопределено
					И СоставляющаяОбласть.Расшифровка.Свойство("ДатаОкончания")
					И СоставляющаяОбласть.Расшифровка.ДатаОкончания <> Неопределено
					И СоставляющаяОбласть.Расшифровка.Свойство("ВесьДень")
					И СоставляющаяОбласть.Расшифровка.ДатаНачала <> Неопределено Тогда
					
					РасширитьВыделенноеВремя(
						Время,
						СоставляющаяОбласть.Расшифровка.ДатаНачала,
						СоставляющаяОбласть.Расшифровка.ДатаОкончания,
						СоставляющаяОбласть.Расшифровка.ВесьДень);
					
				КонецЕсли;
				
			Исключение
				
				// Возникает, например, для всей области табличного документа
				Продолжить;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Время;
	
КонецФункции

// Заполняет массив времен текущей области.
Процедура ЗаполнитьМассивВременОбласти(Календарь, Область, МассивВремен)
	
	Для КоординатаX = Область.Лево По Область.Право Цикл
		Для КоординатаY = Область.Верх По Область.Низ Цикл
			Попытка
				СоставляющаяОбласть = Календарь.Область(КоординатаY, КоординатаX);
				Если ТипЗнч(СоставляющаяОбласть.Расшифровка) = Тип("Структура")
					И СоставляющаяОбласть.Расшифровка.Свойство("ДатаНачала")
					И СоставляющаяОбласть.Расшифровка.ДатаНачала <> Неопределено
					И СоставляющаяОбласть.Расшифровка.Свойство("ДатаОкончания")
					И СоставляющаяОбласть.Расшифровка.ДатаОкончания <> Неопределено
					И СоставляющаяОбласть.Расшифровка.Свойство("ВесьДень")
					И СоставляющаяОбласть.Расшифровка.ДатаНачала <> Неопределено Тогда
					
					ВключитьВМассивВремен(МассивВремен,
						СоставляющаяОбласть.Расшифровка.ДатаНачала,
						СоставляющаяОбласть.Расшифровка.ДатаОкончания,
						СоставляющаяОбласть.Расшифровка.ВесьДень);
					
				КонецЕсли;
			Исключение
				// Возникает, например, для всей области табличного документа
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет значение в массив, если данного значения нет в массиве
Процедура ДобавитьЗначениеВМассив(Значение, Массив)
	
	Если ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ЗаписьКалендаря")
		И Значение.Свойство("ДатаИсключения") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.ЗаписьКалендаря = Значение.ЗаписьКалендаря
				И ЭлементМассива.ДатаИсключения = Значение.ДатаИсключения Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка")
		И Значение.Свойство("ДеньНачала") Тогда
		
		Для Каждого ЭлементМассива Из Массив Цикл
			
			Если ЭлементМассива.Ссылка = Значение.Ссылка
				И ЭлементМассива.ДеньНачала = Значение.ДеньНачала Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив.Добавить(Значение);
		
	Иначе
		
		Если Массив.Найти(Значение) = Неопределено Тогда
			Массив.Добавить(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Расширить выбранное время
Процедура РасширитьВыделенноеВремя(Время, ДатаНачала, ДатаОкончания, ВесьДень)
	
	Если ДатаНачала <> Неопределено
		И Время.ДатаНачала <> Неопределено
		И ДатаНачала < Время.ДатаНачала Тогда
		
		Время.ДатаНачала = ДатаНачала;
		
	ИначеЕсли Время.ДатаНачала = Неопределено Тогда
		
		Время.ДатаНачала = ДатаНачала;
		
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено
		И Время.ДатаОкончания <> Неопределено
		И ДатаОкончания > Время.ДатаОкончания Тогда
		
		Время.ДатаОкончания = ДатаОкончания;
		
	ИначеЕсли Время.ДатаОкончания = Неопределено Тогда
		
		Время.ДатаОкончания = ДатаОкончания;
		
	КонецЕсли;
	
	Если ВесьДень <> Неопределено
		И Время.ВесьДень <> Неопределено Тогда
		
		Время.ВесьДень = Время.ВесьДень ИЛИ ВесьДень;
		
	ИначеЕсли Время.ВесьДень = Неопределено Тогда
		
		Время.ВесьДень = ВесьДень;
		
	КонецЕсли;
	
КонецПроцедуры

// Включить выбранное время в массив времен, путем добавления времени и объединения пересекающихся времен.
Процедура ВключитьВМассивВремен(МассивВремен, ДатаНачала, ДатаОкончания, ВесьДень)
	
	Если ДатаНачала = Неопределено Или ДатаОкончания = Неопределено Или ВесьДень = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Время = РаботаСРабочимКалендаремКлиентСервер.СформироватьВремя(ДатаНачала, ДатаОкончания, ВесьДень);
	МассивВремен.Добавить(Время);
	
	СкорректироватьМассивВремен(МассивВремен);
	
КонецПроцедуры

// Корректирует массив времен, удаляя дубли и пересечения
Процедура СкорректироватьМассивВремен(МассивВремен)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		НовыйМассивВремен = Новый Массив;
		Для Каждого ЭлементВремени Из МассивВремен Цикл
			
			ВнестиЭлементВМассивВремен = Истина;
			Для Каждого ВнесенныйЭлементВремени Из НовыйМассивВремен Цикл
				
				Если РаботаСРабочимКалендаремКлиентСервер.ВременаСовпадают(ЭлементВремени, ВнесенныйЭлементВремени) ТОгда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если ЭлементВремени.ДатаНачала <= ВнесенныйЭлементВремени.ДатаОкончания
					И ЭлементВремени.ДатаОкончания >= ВнесенныйЭлементВремени.ДатаНачала
					И ЭлементВремени.ВесьДень = ВнесенныйЭлементВремени.ВесьДень Тогда
					
					ВнесенныйЭлементВремени.ДатаНачала = Мин(ВнесенныйЭлементВремени.ДатаНачала, ЭлементВремени.ДатаНачала);
					ВнесенныйЭлементВремени.ДатаОкончания = Макс(ВнесенныйЭлементВремени.ДатаОкончания, ЭлементВремени.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЭлементВМассивВремен = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ВнестиЭлементВМассивВремен Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйМассивВремен.Добавить(ЭлементВремени);
			
		КонецЦикла;
		
		МассивВремен = НовыйМассивВремен;
		
	КонецЦикла;
	
КонецПроцедуры

// Включает в список значений время с указанной периодичностью указанное количество раз.
//
// Параметры:
//  Время - Дата - Время, с которого следует начать добавление в список.
//  ДанныеВыбора - СписокЗначений - Список, в который следует добавить время.
//  Период - Число - Период в секундах.
//  КоличествоПериодов - Число - Количество времен, которое следует добавить.
//
// Пример:
//  ДобавитьВДанныеВыбораВремя(ВведенноеВремя, ДанныеВыбора, 3600, 24)
//
Процедура ДобавитьВДанныеВыбораВремя(Знач Время, ДанныеВыбора, Период = 0, КоличествоПериодов = 1)
	
	Для НомерПериода = 1 По КоличествоПериодов Цикл
		ДанныеВыбора.Добавить(Время, Формат(Время, "ДФ=ЧЧ:мм; ДП=00:00"));
		Время = Время + Период;
	КонецЦикла;
	
КонецПроцедуры

// Формирует подпись пользователей под вопросом и занятых пользователей.
//
// Параметры:
//  ПользователиПодВопросом - Массив - Пользователи, занятость которых под вопросом.
//  ПользователиЗанятые - Массив - Занятые пользователи.
//
// Возвращаемое значение:
//  Строка - Текстовое представление занятых пользователей.
//
Функция ПолучитьПодписьЗанятостиПользователей(ПользователиПодВопросом, ПользователиЗанятые)
	
	КоличествоПользователейПодВопросом = ПользователиПодВопросом.Количество();
	КоличествоПользователейЗанятых = ПользователиЗанятые.Количество();
	Если КоличествоПользователейПодВопросом + КоличествоПользователейЗанятых = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПодписьЗанятостиПользователей = Символы.ПС;
	
	Если КоличествоПользователейПодВопросом <> 0 Тогда
		ПодписьПользователейПодВопросом = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Под вопросом: %1.'"), ПолучитьПодписьПользователей(ПользователиПодВопросом));
		ПодписьЗанятостиПользователей = ПодписьЗанятостиПользователей + Символы.ПС + ПодписьПользователейПодВопросом;
	КонецЕсли;
	
	Если КоличествоПользователейЗанятых <> 0 Тогда
		ПодписьПользователейЗанятых = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заняты: %1.'"), ПолучитьПодписьПользователей(ПользователиЗанятые));
		ПодписьЗанятостиПользователей = ПодписьЗанятостиПользователей + Символы.ПС + ПодписьПользователейЗанятых;
	КонецЕсли;
	
	Возврат ПодписьЗанятостиПользователей;
	
КонецФункции

// Формирует подпись пользователей, ограниченную по количеству пользователей.
//
// Параметры:
//  ПользователиПодписи - Массив - Пользователи, из которых формируется подпись.
//
// Возвращаемое значение:
//  Строка - Текстовое представление пользователей.
//
Функция ПолучитьПодписьПользователей(ПользователиПодписи)
	
	КоличествоПользователей = ПользователиПодписи.Количество();
	Если КоличествоПользователей = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МаксимальноеКоличествоОтображаемыхПользователей = 5;
	КоличествоОтображаемыхПользователейПриПревышении = 3;
	
	Если КоличествоПользователей > МаксимальноеКоличествоОтображаемыхПользователей Тогда
		КоличествоОтображаемыхПользователей = КоличествоОтображаемыхПользователейПриПревышении;
	Иначе
		КоличествоОтображаемыхПользователей = КоличествоПользователей;
	КонецЕсли;
	
	ПодписьПользователей = "";
	МассивПользователей  = Новый Массив;
	Для Индекс = 0 По КоличествоОтображаемыхПользователей - 1 Цикл
		Пользователь = ПользователиПодписи[Индекс];
		МассивПользователей.Добавить(Пользователь);
	КонецЦикла;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ПодписьПользователей, ", ", Пользователь);
	КонецЦикла;
	
	Если КоличествоПользователей > МаксимальноеКоличествоОтображаемыхПользователей Тогда
		
		НадписьПользователей = ПодписьКЧислу(
			КоличествоПользователей,
			НСтр("ru = 'пользователи'"),
			НСтр("ru = 'пользователя'"),
			НСтр("ru = 'пользователей'"));
		
		ПодписьПользователей = ПодписьПользователей
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ' и другие (всего %1 %2)'"),
				Формат(КоличествоПользователей, "ЧГ=0"),
				НадписьПользователей);
		
	КонецЕсли;
	
	Возврат ПодписьПользователей;
	
КонецФункции

// Возвращает подпись к числу предметов с учетом склонений русского языка.
//
Функция ПодписьКЧислу(Число, Предмет, Предмета, Предметов)
	
	ЧислоПоМодулю100 = Число % 100;
	ЧислоПоМодулю10 = Число % 10;
	Если ЧислоПоМодулю10 = 1 Тогда
		Если ЧислоПоМодулю100 = 11 Тогда
			Возврат Предметов;
		Иначе
			Возврат Предмет;
		КонецЕсли;
	ИначеЕсли ЧислоПоМодулю10 = 2 Или ЧислоПоМодулю10 = 3 Или ЧислоПоМодулю10 = 4 Тогда
		Если ЧислоПоМодулю100 = 12 Или ЧислоПоМодулю100 = 13 Или ЧислоПоМодулю100 = 14 Тогда
			Возврат Предметов;
		Иначе
			Возврат Предмета;
		КонецЕсли;
	Иначе
		Возврат Предметов;
	КонецЕсли;
	
КонецФункции

#КонецОбласти