////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьПереопределяемый: сервер, внешнее соединение
//
// Содержит переопределяемые процедуры и функции, обрабатываемые на сервере.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверяет права участников процесса на предметы этого процесса
//
Процедура ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(ПроцессОбъект, Предметы, Отказ, Участники = Неопределено) Экспорт
	
	Если ПроцессОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Участники = Неопределено Тогда
		Участники = ПраваДоступаНаБизнесПроцессыВызовСервера.ПолучитьТаблицуУчастниковПроцесса(ПроцессОбъект);
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроцессОбъект.Ссылка, "Стартован");
		
	СтартованРанее = Реквизиты.Стартован;
	ИзмененыПредметы = Мультипредметность.ИзмененыПредметыПроцесса(ПроцессОбъект);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В(&Участники)
		|	И (Пользователи.ПометкаУдаления
		|			ИЛИ Пользователи.Недействителен)");
		
	Запрос.УстановитьПараметр("Участники", Участники.ВыгрузитьКолонку("Участник"));
	УдаленныеУчастники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Для Каждого Участник Из Участники Цикл
		
		// Права удаленных участников не проверяются
		Если УдаленныеУчастники.Найти(Участник.Участник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		// Проверка только добавленных участников, 
		// либо всех текущих участников, если процесс не был стартован ранее
		Если Не Участник.СодержитсяВСтаройВерсии 
			Или Участник.СодержитсяВНовойВерсии И (Не СтартованРанее Или ИзмененыПредметы) Тогда
			
			Для Каждого Предмет Из Предметы Цикл
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") 
				   И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет,"ВладелецФайла") = ПроцессОбъект.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				Если Не БизнесПроцессыИЗадачиПереопределяемый.ЕстьПравоДоступаУчастникаБизнесПроцесса(
					ПроцессОбъект,
					Предмет,
					"Чтение",
					Участник.Участник,
					Участник.ОсновнойОбъектАдресации,
					Участник.ДополнительныйОбъектАдресации,
					Участник.ИмяРеквизитаОбъекта) Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет необходимость использования проверок прав доступа участников на предметы процессов.
//
// Параметры:
//   ПроцессОбъект - БизнесПроцессОбъект
//
// Возвращаемое значение:
//   Булево - принимает значение истина, если требуется проверять права участников бизнес
//            процессов на предметы.
//
Функция ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(ПроцессОбъект) Экспорт
	
	Возврат НЕ ПроцессОбъект.ДополнительныеСвойства.Свойство("НеПроверятьПраваУчастниковНаПредметы");
	
КонецФункции

// Отключает проверку прав доступа участников на предметы процесса
//
// Параметры:
//   ПроцессОбъект - БизнесПроцессОбъект
//
Процедура ОтключитьПроверкуПравУчастниковБизнесПроцессаНаПредметы(ПроцессОбъект) Экспорт
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("НеПроверятьПраваУчастниковНаПредметы", Истина);
	
КонецПроцедуры

// Возвращает пустую ссылку на процесс в зависимости от переданного параметра 
// Параметры:
//  ШаблонСсылка - ссылка на шаблон процесса
//
Функция ПолучитьСсылкуНаПроцессПоШаблону(Шаблон) Экспорт
	
	ПроцессСсылка = Неопределено;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Шаблон)) Тогда
		Ссылка = Шаблон;
	Иначе
		Ссылка = Шаблон.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		ПроцессСсылка = БизнесПроцессы.Исполнение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ПроцессСсылка = БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		ПроцессСсылка = БизнесПроцессы.Ознакомление.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		ПроцессСсылка = БизнесПроцессы.Поручение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		ПроцессСсылка = БизнесПроцессы.Приглашение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		ПроцессСсылка = БизнесПроцессы.Рассмотрение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		ПроцессСсылка = БизнесПроцессы.Регистрация.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		ПроцессСсылка = БизнесПроцессы.Согласование.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		ПроцессСсылка = БизнесПроцессы.Утверждение.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		
		Если Шаблон = Ссылка Тогда
			ТипШаблона = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ТипШаблона");
		Иначе
			ТипШаблона = Шаблон.ТипШаблона;
		КонецЕсли;
		
		Если ТипШаблона <> Неопределено Тогда
			Если ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаВнутреннегоДокумента.ПустаяСсылка();
				
			ИначеЕсли ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаВходящегоДокумента.ПустаяСсылка();
				
			ИначеЕсли ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
				ПроцессСсылка = БизнесПроцессы.ОбработкаИсходящегоДокумента.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПроцессСсылка;

	
КонецФункции

// Возвращает основной проект по предметам заполнения
//
Функция ПолучитьОсновнойПроектПоПредметам(Предметы) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предметы)) Тогда
		Предмет = Предметы;
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
		 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
		 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда 
			Возврат Предмет.Проект;
		КонецЕсли;
	Иначе
		ОсновныеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета",Перечисления.РолиПредметов.Основной));
		Если ОсновныеПредметы.Количество() > 0 Тогда
			Предмет = ОсновныеПредметы[0].Предмет;
			Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
			 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
			 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда 
				Возврат Предмет.Проект;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПредмета Из Предметы Цикл
				Предмет = СтрокаПредмета.Предмет;
				Если ЗначениеЗаполнено(Предмет) 
				 И (ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет)
				 Или ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет)
				 Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет)) Тогда 
					Возврат Предмет.Проект;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Проекты.ПустаяСсылка();
	
КонецФункции

// Возвращает массив типов документов входящих и исходящих писем
//
Функция ПолучитьТипыПисем() Экспорт
	
	ТипыПисем = Новый Массив;
	ТипыПисем.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));
	ТипыПисем.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));
	
	Возврат ТипыПисем;
	
КонецФункции
