// Выполняет запись о переносе срока задачи в регистр "ПереносыСроковВыполненияПроцессовИЗадач"
// Параметры:
//		ПредметОбъект - объект (задача или процесс), у которого переносится срок
//		ДанныеДляЗаписиСобытия - структура
//			БизнесПроцессПереноса - ссылка на бизнес-процесс согласования заявки на перенос
//			КомментарийАвтора - строка, комментарий пользователя, переносящего срок исполнения
//			Пользователь - ссылка на пользователя, переносящего срок
Процедура СделатьЗаписьОПереносеСрока(ПредметОбъект, ДанныеДляЗаписиСобытия) Экспорт
	
	Если ТипЗнч(ДанныеДляЗаписиСобытия.СтарыйСрок) = Тип("Дата") 
		И НЕ ЗначениеЗаполнено(ДанныеДляЗаписиСобытия.СтарыйСрок) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПереносыСроковВыполненияПроцессовИЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаПереносаСрока = ТекущаяДатаСеанса();
	МенеджерЗаписи.Предмет = ПредметОбъект.Ссылка;
	МенеджерЗаписи.СтарыйСрок = 
		?(ЗначениеЗаполнено(ДанныеДляЗаписиСобытия.СтарыйСрок),
		ДанныеДляЗаписиСобытия.СтарыйСрок,
		ДанныеДляЗаписиСобытия.СтараяДлительностьДни * 24 + ДанныеДляЗаписиСобытия.СтараяДлительностьЧасы);
	МенеджерЗаписи.НовыйСрок = 
		?(ЗначениеЗаполнено(ДанныеДляЗаписиСобытия.НовыйСрок),
		ДанныеДляЗаписиСобытия.НовыйСрок,
		ДанныеДляЗаписиСобытия.НоваяДлительностьДни * 24 + ДанныеДляЗаписиСобытия.НоваяДлительностьЧасы);
	МенеджерЗаписи.КомментарийАвтора = ДанныеДляЗаписиСобытия.КомментарийАвтора;
	МенеджерЗаписи.Пользователь = ДанныеДляЗаписиСобытия.Пользователь;
	МенеджерЗаписи.БизнесПроцессПереноса = ДанныеДляЗаписиСобытия.БизнесПроцессПереноса;
	Если ЗначениеЗаполнено(ДанныеДляЗаписиСобытия.БизнесПроцессПереноса) Тогда
		МенеджерЗаписи.Итерация = ДанныеДляЗаписиСобытия.БизнесПроцессПереноса.Итерация;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

// Общая процедура для установки доступности элементов формы бизнес-процесса,
//	которые имеют отношение к переносу сроков исполнения задач
Процедура УстановкаДоступностиЭлементовФормы(Объект, Элементы) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
		Если Элементы.Найти("СрокИсполнения") <> Неопределено Тогда
			Элементы.СрокИсполнения.Доступность = НЕ Объект.Стартован;
		КонецЕсли;
		Если Элементы.Найти("СрокИсполненияВремя") <> Неопределено Тогда
			Элементы.СрокИсполненияВремя.Доступность = НЕ Объект.Стартован;
		КонецЕсли;
		Если Элементы.Найти("СрокИсполненияЧас") <> Неопределено Тогда
			Элементы.СрокИсполненияЧас.Доступность = НЕ Объект.Стартован;
		КонецЕсли;
		Если Элементы.Найти("ФормаИзменитьСрокПроцесса") <> Неопределено Тогда
			Элементы.ФормаИзменитьСрокПроцесса.Видимость = Объект.Стартован;
		КонецЕсли;
		Если ПользователиКлиентСервер.ТекущийПользователь() <> Объект.Автор
			И НЕ РольДоступна("ПолныеПрава")
			И Элементы.Найти("ФормаИзменитьСрокПроцесса") <> Неопределено Тогда
			Элементы.ФормаИзменитьСрокПроцесса.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("ФормаИзменитьСрок") <> Неопределено Тогда
			Элементы.ФормаИзменитьСрок.Видимость = Объект.Стартован;
		КонецЕсли;
		Если ПользователиКлиентСервер.ТекущийПользователь() <> Объект.Автор 
			И НЕ РольДоступна("ПолныеПрава")
			И Элементы.Найти("ФормаИзменитьСрок") <> Неопределено Тогда
			Элементы.ФормаИзменитьСрок.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("ИсполнителиИзменитьСрокЗадачи") <> Неопределено Тогда
			Элементы.ИсполнителиИзменитьСрокЗадачи.Видимость = Объект.Стартован;
		КонецЕсли;
		Если ПользователиКлиентСервер.ТекущийПользователь() <> Объект.Автор 
			И НЕ РольДоступна("ПолныеПрава")
			И Элементы.Найти("ИсполнителиИзменитьСрокЗадачи") <> Неопределено Тогда
			Элементы.ИсполнителиИзменитьСрокЗадачи.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

// Возвращает количество выполненных переносов срока указанной задачи
Функция КоличествоПереносовСрокаПоЗадаче(ЗадачаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Задача) КАК КоличествоЗаписей
		 |ИЗ
		 |	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		 |ГДЕ
		 |	ПереносыСроковВыполненияПроцессовИЗадач.Предмет = &Задача";
	Запрос.УстановитьПараметр("Предмет", ЗадачаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает количество переносов срока указанной задачи, выполненных по 
//	указанной заявке на перенос срока выполнения.
Функция КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(ЗадачаСсылка, ЗаявкаСсылка, СУчетомИтерации = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК КоличествоЗаписей
		 |ИЗ
		 |	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		 |ГДЕ
		 |	ПереносыСроковВыполненияПроцессовИЗадач.Предмет В (&Задачи)
		 |	И ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса = &Заявка
		 |	 [УсловиеИтерация] ";
		 
	ЗадачиМассив = Новый Массив();
	ЗадачиМассив.Добавить(ЗадачаСсылка);
	ЗадачиМассив.Добавить(ЗадачаСсылка.БизнесПроцесс);
	Запрос.УстановитьПараметр("Задачи", ЗадачиМассив);
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Если СУчетомИтерации Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"[УсловиеИтерация]",
			" И ПереносыСроковВыполненияПроцессовИЗадач.Итерация = &Итерация");
		Запрос.УстановитьПараметр("Итерация", ЗаявкаСсылка.Итерация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеИтерация]", "");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции

// Получает строковое описание величины переноса
Функция ПолучитьПодписьДлительностьПереноса(Пользователь, СтарыйСрок, НовыйСрок) Экспорт
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		Возврат "";
	КонецЕсли;
	
	СимволНаправленияПеремещения = ?(СтарыйСрок < НовыйСрок, "+", "-");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		Если Пользователь = Неопределено Тогда
			ГрафикПользователя = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		Иначе
			ГрафикПользователя = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
		КонецЕсли;
		ГрафикиРаботы.ПолучитьДлительностьПериода(ГрафикПользователя, СтарыйСрок, НовыйСрок);
		РазностьВРабочихДнях = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
			ГрафикПользователя.Календарь,
			СтарыйСрок,
			НовыйСрок);
		ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьРабочихДней(РазностьВРабочихДнях);
		Если РазностьВРабочихДнях > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(%1%2 %3)",
				СимволНаправленияПеремещения,
				Строка(РазностьВРабочихДнях),
				ПодписьДней);
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(%1)",
				НСтр("ru = 'менее 1 рабочего дня'"));
		КонецЕсли;
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(%1 %2)",
			СимволНаправленияПеремещения,
			ДелопроизводствоКлиентСервер.РазностьДатВДнях(НовыйСрок, СтарыйСрок));
	КонецЕсли;
		
КонецФункции
