// Возвращает Структуру:
//  ДатаОтправки - Дата - Дата отправки расписки,
//  НомерРасписки - Строка - Регистрационный номер расписки
// Входящие параметры:
//  Дело - СправочникСсылка.ВнутренниеДокументы с Видом документа = Дело
//
Функция ПолучитьРаспискуПоДелу(Дело) Экспорт
    СтруктураРасписки = Новый Структура("ДатаОтправки, НомерРасписки", Дата(1,1,1), ""); 
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СвязиДокументов.СвязанныйДокумент
        |ПОМЕСТИТЬ Переписка
        |ИЗ
        |   РегистрСведений.СвязиДокументов КАК СвязиДокументов
        |ГДЕ
        |   СвязиДокументов.Документ = &Дело
        |   И СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПерепискаПоПредмету)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ИсходящиеДокументыПолучатели.ДатаОтправки КАК ДатаОтправки,
        |   ИсходящиеДокументыПолучатели.Ссылка.РегистрационныйНомер КАК НомерРасписки
        |ИЗ
        |   Переписка КАК Переписка
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
        |       ПО Переписка.СвязанныйДокумент = ИсходящиеДокументыПолучатели.Ссылка
        |ГДЕ
        |   ИсходящиеДокументыПолучатели.Ссылка.ВидДокумента.Наименование ПОДОБНО ""Расписка%""";

    Запрос.УстановитьПараметр("Дело", Дело);
    
    РезультатЗапроса = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЗаполнитьЗначенияСвойств(СтруктураРасписки, ВыборкаДетальныеЗаписи);
        Прервать;
    КонецЦикла;
    Возврат СтруктураРасписки;
КонецФункции // ПолучитьРаспискуПоДелу()

// Возвращает Структуру:
//  МассивЗамечаний - Массив - массив неисправленных замечаний
//  АктПроверки - СправочникСсылка.мАктыПроверки - только камеральные
// Входящие параметры:
//  Дело - СправочникСсылка.ВнутренниеДокументы с Видом документа = Дело
//
Функция ПолучитьЗамечанияАктаПроверки(Дело, Проверяющий) Экспорт
    МассивЗамечаний = Новый Массив;
    АктПроверки = Неопределено;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   мАктыПроверкиПроверкиКачества.Ссылка КАК АктПроверки
        |ПОМЕСТИТЬ Проверка
        |ИЗ
        |   Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
        |ГДЕ
        |   мАктыПроверкиПроверкиКачества.Ссылка.Владелец = &Владелец
        |   И мАктыПроверкиПроверкиКачества.Ссылка.ВидПроверкиКачества = &ВидПроверкиКачества
        |   И мАктыПроверкиПроверкиКачества.Проверяющий = &Проверяющий
        |
        |СГРУППИРОВАТЬ ПО
        |   мАктыПроверкиПроверкиКачества.Ссылка
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   мАктыПроверкиЗамечания.Содержание,
        |   Проверка.АктПроверки
        |ИЗ
        |   Проверка КАК Проверка
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мАктыПроверки.Замечания КАК мАктыПроверкиЗамечания
        |       ПО Проверка.АктПроверки.Ссылка = мАктыПроверкиЗамечания.Ссылка
        |ГДЕ
        |   НЕ мАктыПроверкиЗамечания.Исправлено
        |   И мАктыПроверкиЗамечания.Ссылка.Владелец = &Владелец
        |   И мАктыПроверкиЗамечания.Ссылка.ВидПроверкиКачества = &ВидПроверкиКачества";
    
    Запрос.УстановитьПараметр("Владелец", Дело);
    Запрос.УстановитьПараметр("Проверяющий", Проверяющий);
    Запрос.УстановитьПараметр("ВидПроверкиКачества", Перечисления.М_ВидыПроверкиКачества.Камеральная);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        МассивЗамечаний.Добавить(ВыборкаДетальныеЗаписи.Содержание);
        АктПроверки = ВыборкаДетальныеЗаписи.АктПроверки; 
    КонецЦикла;
    
    Возврат Новый Структура("АктПроверки, МассивЗамечаний", АктПроверки, МассивЗамечаний); 
    
КонецФункции 

Функция ЕстьНеисправленныеЗамечанияВАктеПроверки(АктПроверки, Проверяющий) Экспорт
	ЗамечанияЕсть = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктыПроверкиЗамечания.Замечание
		|ИЗ
		|	Справочник.мАктыПроверки.Замечания КАК мАктыПроверкиЗамечания
		|ГДЕ
		|	мАктыПроверкиЗамечания.Ссылка = &АктПроверки
		|	И НЕ мАктыПроверкиЗамечания.Исправлено
		|	И мАктыПроверкиЗамечания.Проверяющий = &Проверяющий";
	
	Запрос.УстановитьПараметр("АктПроверки", АктПроверки);
	Запрос.УстановитьПараметр("Проверяющий", Проверяющий);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗамечанияЕсть = Истина;
	КонецЕсли; 
	
	Возврат ЗамечанияЕсть;
КонецФункции 
 
Процедура мЗадачаПроверкиДелаПриВыполнении(Источник, Отказ) Экспорт
    Если Источник.ТочкаМаршрута.Имя <> "Согласовать" Тогда
        Возврат;
    КонецЕсли; 
	
	// Если это не проверка дела - то ничего делать не надо
	Процесс = Источник.БизнесПроцесс;
	Если мПроверкаДела.ПолучитьУровеньШаблонаПроверкиДела(Процесс) <= 0 Тогда
		Возврат;
	КонецЕсли; 
    
	ПараметрыАктаПроверки = ПолучитьПараметрыАктаПроверкиДела(Источник);
	АктПроверки = ПараметрыАктаПроверки.АктПроверки;
	СостояниеАктаПроверки = ПараметрыАктаПроверки.Состояние;
	НеИсправленоЗамечаний = ПараметрыАктаПроверки.НеИсправленоЗамечаний;
	Оценка = ПараметрыАктаПроверки.Оценка;
	Дело = ПараметрыАктаПроверки.Дело;
	
	// Проверка наличия Акта проверки
	Если Не ЗначениеЗаполнено(АктПроверки) Тогда
		Сообщение = Новый СообщениеПользователю();	
		Сообщение.Текст = "Нельзя выполнить процесс без Акта проверки!";
		Сообщение.Сообщить();
		Отказ = Истина;
        Возврат;
	КонецЕсли; 
	
	// Запись в Акт проверки время окончания и состояние
	ПоследнееСогласование = Источник.БизнесПроцесс.РезультатыСогласования.Количество();
	Если ПоследнееСогласование = 0 Тогда
        Возврат;
	КонецЕсли; 
	
	ИндексПоследнееСогласование = ПоследнееСогласование - 1;
	РезультатСогласования = Источник.БизнесПроцесс.РезультатыСогласования[ИндексПоследнееСогласование].РезультатСогласования;
	
	Если ЗначениеЗаполнено(Источник.Исполнитель) Тогда
		Исполнитель = Источник.Исполнитель;
	Иначе	
		Исполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли; 
				
	Если РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		
		СтруктураАкта = ПолучитьЗамечанияАктаПроверки(Дело, Источник.Исполнитель);
		МассивЗамечаний = СтруктураАкта.МассивЗамечаний;
		
		// Проверка замечаний в Акте проверки
		Если МассивЗамечаний.Количество() = 0 Тогда
			// Если не согласовывать, то в АктеПроверки должны быть неисправленные замечания
			Сообщение = Новый СообщениеПользователю();	
			Сообщение.Текст = "В Акт проверки не внесены замечания для исправления!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли; 
		
		// Проверка соответствия выбранного решения вышестоящему результату
		Если НЕ Источник.мМаксУровеньПроверкиДел Тогда
			// Если это не последний уровень проверки, то проверим состояние задачи следующего уровня
			РезультатПроверкиСледующегоУровня = ЗадачаВышестоящегоУровняВыполнена(Источник);
		    Если РезультатПроверкиСледующегоУровня.Выполнена Тогда
				// Задача есть - проверяем состояние
				РезультатСогласования = РезультатПроверкиСледующегоУровня.Результат;
				Если РезультатСогласования <> Перечисления.РезультатыСогласования.НеСогласовано Тогда
					Сообщение = Новый СообщениеПользователю();	
					Сообщение.Текст = "Результат проверки следующего уровня "+РезультатСогласования+" отличается от выбираемого!";
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли; 
			Иначе
				// Задачи нет - можно не согласовывать
				//Сообщение = Новый СообщениеПользователю();	
				//Сообщение.Текст = "Задачи проверки следующего уровня нет, либо она еще не выполнена!";
				//Сообщение.Сообщить();
				//Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		// Запись замечаний в результат выполнения
		СтрокаРезультата = "";
		Для каждого Замечание Из МассивЗамечаний Цикл
			СтрокаРезультата = СтрокаРезультата + "   "+Замечание+Символы.ПС;
		КонецЦикла;
		Источник.РезультатВыполнения = СтрокаРезультата;
		
		// Запись даты окончания проверки в АктПроверки если НеСогласовано
		//АктПроверки = СтруктураАкта.АктПроверки;
		Состояние = Перечисления.М_СостоянияАктовПроверки.НаИсправлении;
		ЗаписатьДатуОкончанияПроверки(АктПроверки, Исполнитель, ТекущаяДатаСеанса(), Состояние);
		
	ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		// если согласовано сотрудником СТКК - фиксируем время, для других время фиксировать не надо
		//ТаблицаАктПроверки = ПолучитьАктПроверкиДела(Источник);
		
		// Проверка соответствия выбранного решения вышестоящему результату
		//Если ШаблонПроцесса <> Шаблон3 Тогда
		Если НЕ Источник.мМаксУровеньПроверкиДел Тогда
			// Если это не последний уровень проверки, то проверим состояние задачи следующего уровня
			РезультатПроверкиСледующегоУровня = ЗадачаВышестоящегоУровняВыполнена(Источник);
			//Если Не РезультатПроверкиСледующегоУровня.Выполнена Тогда
			//	Сообщение = Новый СообщениеПользователю();	
			//	Сообщение.Текст = "Задачи проверки следующего уровня нет, либо она еще не выполнена!";
			//	Сообщение.Сообщить();
			//	Отказ = Истина;
			//Иначе
				// Задача есть - проверяем состояние
				РезультатСогласования = РезультатПроверкиСледующегоУровня.Результат;
				Если РезультатСогласования <> Перечисления.РезультатыСогласования.Согласовано Тогда
					Сообщение = Новый СообщениеПользователю();	
					Сообщение.Текст = "Результат проверки следующего уровня "+РезультатСогласования+" отличается от выбираемого!";
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли; 
			//КонецЕсли; 
		КонецЕсли; 
		
		Если Константы.М_Гродно.Получить() Тогда
			// Запись даты окончания проверки в АктПроверки если Согласовано и нет замечаний
			//Если ЗначениеЗаполнено(АктПроверки) Тогда
			Если Оценка = 1 И НеИсправленоЗамечаний = 0  Тогда
				Состояние = Перечисления.М_СостоянияАктовПроверки.Проверен;
			ИначеЕсли Оценка = 1 И НеИсправленоЗамечаний > 0 Тогда
				Состояние = Перечисления.М_СостоянияАктовПроверки.НаИсправлении;
			Иначе
				Состояние = Перечисления.М_СостоянияАктовПроверки.НаКомиссии;
			КонецЕсли; 
			Если Источник.мМаксУровеньПроверкиДел Тогда
				ЗаписатьДатуОкончанияПроверки(АктПроверки, Исполнитель, ТекущаяДатаСеанса(), Состояние);
			КонецЕсли; 
        //ИначеЕсли СотрудникВыполняетРоль(Исполнитель, Справочники.РолиИсполнителей.СотрудникСТКК) Тогда
        //	// Запись даты окончания проверки в АктПроверки если Согласовано и нет замечаний
        //	//Если ЗначениеЗаполнено(АктПроверки) Тогда
        //	Если Оценка = 1 И НеИсправленоЗамечаний = 0 Тогда
        //		Состояние = Перечисления.М_СостоянияАктовПроверки.Проверен;
        //	ИначеЕсли Оценка = 1 И НеИсправленоЗамечаний > 0 Тогда
        //		Состояние = Перечисления.М_СостоянияАктовПроверки.НаИсправлении;
        //	Иначе
        //		Состояние = Перечисления.М_СостоянияАктовПроверки.НаКомиссии;
        //	КонецЕсли; 
        //	ЗаписатьДатуОкончанияПроверки(АктПроверки, Исполнитель, ТекущаяДатаСеанса(), Состояние);
		КонецЕсли; 
		
	ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
		// Такого не может быть, т.к. кнопка СогласованоСЗамечаниями должна быть скрыта
		// если согласовано сотрудником СТКК - фиксируем время, для других время фиксировать не надо
		Если СотрудникВыполняетРоль(Исполнитель, Справочники.РолиИсполнителей.СотрудникСТКК) Тогда
			// Запись даты окончания проверки в АктПроверки если Согласовано
			//ТаблицаАктПроверки = ПолучитьАктПроверкиДела(Источник);
			Состояние = Перечисления.М_СостоянияАктовПроверки.НаИсправлении;
			ЗаписатьДатуОкончанияПроверки(АктПроверки, Исполнитель, ТекущаяДатаСеанса(), Состояние);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Процедура мЗадачаПроверкиДелаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
    
    // Запись даты окончания проверки в АктПроверки если создается новый процесс согласования
	Если Не ЗначениеЗаполнено(Источник.ТочкаМаршрута) Тогда
        Возврат;
	КонецЕсли; 
    Если Источник.ТочкаМаршрута.Имя <> "Согласовать" Тогда
        Возврат;
	КонецЕсли;
	
	// Если это не проверка дела - то ничего делать не надо
	Процесс = Источник.БизнесПроцесс;
	УровеньПроверкиДела = мПроверкаДела.ПолучитьУровеньШаблонаПроверкиДела(Процесс);
	Если УровеньПроверкиДела <= 0 Тогда
		Возврат;
	КонецЕсли; 
    
	//Шаблон1 = Справочники.ШаблоныСогласования.ПроверкаДела1Уровня;
	//Шаблон2 = Справочники.ШаблоныСогласования.ПроверкаДела2Уровня;
	//Шаблон3 = Справочники.ШаблоныСогласования.ПроверкаДела3Уровня;
	//
	//Процесс = Источник.БизнесПроцесс;
	//ШаблонПроцесса = Процесс.Шаблон;
	//
	//Если ШаблонПроцесса <> Шаблон1
	//	И ШаблонПроцесса <> Шаблон2
	//	И ШаблонПроцесса <> Шаблон3 Тогда
	//	Возврат;
	//КонецЕсли; 
	
	// Получим АктПроверки
	ПараметрыАктаПроверки = ПолучитьПараметрыАктаПроверкиДела(Источник);
	АктПроверки = ПараметрыАктаПроверки.АктПроверки;
	СостояниеАктаПроверки = ПараметрыАктаПроверки.Состояние;
	
	// Проверки для нового процесса
	ЭтоНовый = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		ЭтоНовый = Источник.ДополнительныеСвойства.ЭтоНовый;
	КонецЕсли; 
	
	Если ЭтоНовый Тогда
		// Если это задача 2 или 3 уровней и нет ГлавнойЗадачи, но уже есть Акт проверки - то это ошибка
		//Если Не ЗначениеЗаполнено(Источник.БизнесПроцесс.ГлавнаяЗадача)
		//	И НЕ ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача)
		//	И (УровеньПроверкиДела > 1)
		//	И ЗначениеЗаполнено(АктПроверки) 
		//	И НЕ Константы.М_Гродно.Получить()// в Гродно можно отправлять напрямую, минуя ,например, отсутствующих гл.специалистов 
		//									  // или завершив неудачное согласование с СекторомТКК, отправлять им напрямую, минуя гл.специалиста
		//	//Тогда
		//	//Если Источник.БизнесПроцесс.НомерИтерации = 1 Тогда
		//	//    Сообщение = Новый СообщениеПользователю();	
		//	//    Сообщение.Текст = "Этот процесс должен запускаться на основании других процессов!";
		//	//    Сообщение.Сообщить();
		//	//    Отказ = Истина;
		//	//Иначе
		//        // Это повторное согласование - надо в Бизнес-процесс задачи добавить Главную задачу
		//    
		//    КонецЕсли; 
		//КонецЕсли; 
		
		// Если это задача 2 или 3 уровней и нет Акта проверки, то это ошибка, если есть Главная задача
		Если Не ЗначениеЗаполнено(АктПроверки)
			И (УровеньПроверкиДела > 1)
			И (ЗначениеЗаполнено(Источник.БизнесПроцесс.ГлавнаяЗадача)
			ИЛИ ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача)) Тогда
			Сообщение = Новый СообщениеПользователю();	
			Сообщение.Текст = "Запускать этот процесс без Акта проверки нельзя!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли; 
		
		//// Если состояние Акта проверки Проверен, то не надо
		//Если ЗначениеЗаполнено(СостояниеАктаПроверки) 
		//	И СостояниеАктаПроверки = Перечисления.М_СостоянияАктовПроверки.Проверен Тогда
		//	Сообщение = Новый СообщениеПользователю();	
		//	Сообщение.Текст = "Дело уже проверено!";
		//	Сообщение.Сообщить();
		//	Отказ = Истина;
		//КонецЕсли; 
		
		// Проверка наличия дубля задачи по делу
		Если ЕстьДублиЗадачиПоДелу(Источник) Тогда
			Сообщение = Новый СообщениеПользователю();	
			Сообщение.Текст = "По делу уже есть такой процесс!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли; 
		
		// Нет акта и это первый уровень - ничего делать не надо
		Если Не ЗначениеЗаполнено(АктПроверки) И УровеньПроверкиДела = 1 Тогда
			Возврат;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(АктПроверки) И УровеньПроверкиДела = 1 Тогда
            Если Источник.БизнесПроцесс.НомерИтерации > 1 Тогда
                // Это повторное согласование - надо изменить Состояние АктаПроверки на НаПроверке
            	УстановитьСостояниеАктаПроверки(АктПроверки, Перечисления.М_СостоянияАктовПроверки.НаПроверке);
            КонецЕсли; 
		КонецЕсли; 
		
		// Действия
		// Если ГлавнаяЗадача есть, то это задача на основании  - Для автора задачи надо записать в Акт
	    //  окончание проверки.
		Если (ЗначениеЗаполнено(Источник.БизнесПроцесс.ГлавнаяЗадача)
			ИЛИ ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача))
			И (УровеньПроверкиДела > 1) Тогда
			
			Если ЗначениеЗаполнено(АктПроверки) Тогда				
				// Если в Акте проверки есть неисправленные замечания этого проверяющего - Отказ в создании процесса
                Если Источник.БизнесПроцесс.НомерИтерации = 1 Тогда
                    Если мПроверкаДела.ЕстьНеисправленныеЗамечанияВАктеПроверки(АктПроверки, Источник.Автор) Тогда
                        //Сообщение = Новый СообщениеПользователю();	
                        //Сообщение.Текст = "В "+АктПроверки+" есть неисправленные замечания!";
                        //Сообщение.Сообщить();
                        //Отказ = Истина;
                    КонецЕсли; 
                КонецЕсли; 
					
				Если Не Отказ Тогда
                    //Состояние = Перечисления.М_СостоянияАктовПроверки.НаПроверке;
                    //ЗаписатьДатуОкончанияПроверки(АктПроверки, Источник.Автор, ТекущаяДатаСеанса(), Состояние);
				КонецЕсли; 
			КонецЕсли;    
		КонецЕсли;    
		
	Иначе
		// Что делать, если Задача помечается на удаление?
		Если Источник.ПометкаУдаления Тогда
		КонецЕсли; 
		
		Если Источник.ПринятаКИсполнению И Не Источник.Выполнена Тогда
			Если УровеньПроверкиДела = 1 Тогда
				//это Исполнитель задачи 1 уровень (нажал ПринятьКИсполнению)
				Если Не ЗначениеЗаполнено(АктПроверки) Тогда
					//  он должен создать Акт проверки вручную и добавить в него себя (при открытии акта - автоматически). 
					//  С такой задачей ничего делать не надо.
					Возврат;
				Иначе
					// Добавить проверяющего в акт проверки
					Если СостояниеАктаПроверки <> Перечисления.М_СостоянияАктовПроверки.Проверен Тогда
						//ДанныеДляАкта = Новый Структура();
						//ДанныеДляАкта.Вставить("ДатаНачала", Источник.ДатаПринятияКИсполнению);
						//ДанныеДляАкта.Вставить("ДатаОкончания", Дата("00010101000000"));
						//ДанныеДляАкта.Вставить("Проверяющий", Источник.Исполнитель);
						//ДанныеДляАкта.Вставить("ЦиклПроверки", Источник.БизнесПроцесс.НомерИтерации);
						//ДанныеДляАкта.Вставить("Оценка", 1);
						//ДанныеДляАкта.Вставить("Состояние", Перечисления.М_СостоянияАктовПроверки.НаПроверке);
						
						//ДобавитьСтрокуВАктПроверки(АктПроверки, ДанныеДляАкта);
					КонецЕсли;    
				КонецЕсли; 
				
            ИначеЕсли (ЗначениеЗаполнено(Источник.БизнесПроцесс.ГлавнаяЗадача)
            	ИЛИ ЗначениеЗаполнено(Источник.БизнесПроцесс.ВедущаяЗадача))
            	И (УровеньПроверкиДела > 1) Тогда
            	// добавить в Акт проверки
            	//   строку с проверяющим (при условии, что состояние акта не Проверен).
            	Если ЗначениеЗаполнено(АктПроверки) Тогда
            		Если СостояниеАктаПроверки <> Перечисления.М_СостоянияАктовПроверки.Проверен Тогда
                        //ДанныеДляАкта = Новый Структура();
                        //ДанныеДляАкта.Вставить("ДатаНачала", Источник.ДатаПринятияКИсполнению);
                        //ДанныеДляАкта.Вставить("ДатаОкончания", Дата("00010101000000"));
                        //ДанныеДляАкта.Вставить("Проверяющий", Источник.Исполнитель);
                        //ДанныеДляАкта.Вставить("ЦиклПроверки", Источник.БизнесПроцесс.НомерИтерации);
                        //ДанныеДляАкта.Вставить("Оценка", 1);
                        //ДанныеДляАкта.Вставить("Состояние", Перечисления.М_СостоянияАктовПроверки.НаПроверке);
                        //
                        //ДобавитьСтрокуВАктПроверки(АктПроверки, ДанныеДляАкта);
            		КонецЕсли;    
            	КонецЕсли;  
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Функция ЕстьДублиЗадачиПоДелу(Задача)
	Если Задача.Предметы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Дело = Задача.Предметы[0].Предмет;
	Если Дело <> Неопределено И Дело.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Ссылка,
		|	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет = &Дело
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
		|	И ЗадачаИсполнителяПредметы.Ссылка.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Отменена
		|	И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон = &Шаблон
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка В (&Задача)
		|	И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		
		Запрос.УстановитьПараметр("Дело", Дело);
		Запрос.УстановитьПараметр("Шаблон", Задача.БизнесПроцесс.Шаблон);
		Запрос.УстановитьПараметр("ТочкаМаршрута", Задача.ТочкаМаршрута);
		Запрос.УстановитьПараметр("Задача", Задача.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЕсли;	
	Возврат Ложь;
КонецФункции 

Функция ПолучитьПараметрыАктаПроверкиДела(Задача)
	СтруктураАкта = Новый Структура("АктПроверки, НеИсправленоЗамечаний, Оценка, Состояние, Дело", Неопределено, 0, 0, Неопределено, Неопределено); 
	Если Задача.Предметы.Количество() = 0 Тогда
		Возврат СтруктураАкта;
	КонецЕсли;
	
	Дело = Задача.Предметы[0].Предмет;
	Если Дело <> Неопределено И Дело.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
    
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктыПроверки.Ссылка КАК АктПроверки,
		|	мАктыПроверки.НеИсправленоЗамечаний,
		|	мАктыПроверки.Оценка,
		|	мАктыПроверки.Состояние,
		|	мАктыПроверки.Владелец КАК Дело
		|ИЗ
		|	Справочник.мАктыПроверки КАК мАктыПроверки
		|ГДЕ
		|	мАктыПроверки.Владелец = &Владелец
		|	И НЕ мАктыПроверки.ПометкаУдаления
		|	И мАктыПроверки.ВидПроверкиКачества = &ВидПроверкиКачества";
		
		Запрос.УстановитьПараметр("Владелец", Дело);
		Запрос.УстановитьПараметр("ВидПроверкиКачества", Перечисления.М_ВидыПроверкиКачества.Камеральная);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураАкта, РезультатЗапроса[0]);
			Возврат СтруктураАкта;
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат СтруктураАкта;
КонецФункции // 

Функция СотрудникВыполняетРоль(Сотрудник, Роль) Экспорт
	
	Если Не ЗначениеЗаполнено(Роль) Тогда
		// Если роли нет, то не выполняет
        Возврат Ложь;
	КонецЕсли; 
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ИсполнителиЗадач.РольИсполнителя,
        |   ИсполнителиЗадач.Исполнитель
        |ИЗ
        |   РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
        |ГДЕ
        |   ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
        |   И ИсполнителиЗадач.Исполнитель = &Исполнитель";
    
    Запрос.УстановитьПараметр("Исполнитель", Сотрудник);
    Запрос.УстановитьПараметр("РольИсполнителя", Роль);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Возврат Истина;
    
КонецФункции

Функция ЕстьНезавершенныеЗадачиПоДелу(Задача)
	Если Задача.Предметы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Дело = Задача.Предметы[0].Предмет;
	Если Дело <> Неопределено И Дело.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Ссылка,
		|	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет = &Дело
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.Отменена
		|	И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон = &Шаблон
		|	И не ЗадачаИсполнителяПредметы.Ссылка В (&Задача)";
		
		Запрос.УстановитьПараметр("Дело", Дело);
		Запрос.УстановитьПараметр("Шаблон", Задача.БизнесПроцесс.Шаблон);
		Запрос.УстановитьПараметр("Задача", Задача.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЕсли;	
	Возврат Ложь;
КонецФункции // ЕстьНезавершенныеЗадачиПоДелу(Задача)

Функция ЗадачаВышестоящегоУровняВыполнена(Задача) Экспорт
	СтруктураВыполнения = Новый Структура("Выполнена, Результат", Ложь, Неопределено);
	
	Если Задача.Предметы.Количество() = 0 Тогда
		Возврат СтруктураВыполнения;
	КонецЕсли;
	
	Дело = Задача.Предметы[0].Предмет;
	Если Дело <> Неопределено И Дело.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
        |   ЗадачаИсполнителяПредметы.Ссылка,
        |   ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Шаблон,
        |   ЗадачаИсполнителяПредметы.Ссылка.Выполнена КАК Выполнена,
        |   ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.РезультатСогласования КАК РезультатСогласования
        |ИЗ
        |   Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
        |ГДЕ
        |   ЗадачаИсполнителяПредметы.Предмет = &Дело
		//|   И ЗадачаИсполнителяПредметы.Ссылка.Выполнена
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.Отменена
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка В (&Задача)
        |   И (ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.ГлавнаяЗадача В (&Задача)
        |           ИЛИ ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.ВедущаяЗадача В (&Задача))
        |
        |УПОРЯДОЧИТЬ ПО
        |   ЗадачаИсполнителяПредметы.Ссылка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Дело", Дело);
		Запрос.УстановитьПараметр("Задача", Задача.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат = РезультатЗапроса.Выгрузить();
			СтруктураВыполнения.Вставить("Выполнена", Результат[0].Выполнена);
			СтруктураВыполнения.Вставить("Результат", Результат[0].РезультатСогласования);
			
			Возврат СтруктураВыполнения;
		КонецЕсли; 
	КонецЕсли;	
	Возврат СтруктураВыполнения;
КонецФункции // ЗадачаВышестоящегоУровняВыполнена(Задача)

// Записывает в акт проверки новую строку с проверяющим и состояние
Процедура ДобавитьСтрокуВАктПроверки(АктПроверки, ДанныеДляАкта)
    
	Если НЕ ЗначениеЗаполнено(АктПроверки) Тогда
		Возврат;
	КонецЕсли; 
	
	// Строку с проверяющим добавляем только тогда, когда его либо нет в списке,
	//   либо он есть, но не последний в списке.
	//   либо он есть, последний в списке и есть дата окончания проверки. Т.е. пошел второй цикл проверки
	НомерЦикла = 1;
	НомерПроверкиКачества = 0;
	Счетчик = 0;
	НомерПоследнейСтрокиПроверяющего = 0;
	МаксДатаОкончанияПроверки = '00010101000000';
	
	Для каждого Строка Из АктПроверки.ПроверкиКачества Цикл
		Счетчик = Счетчик + 1;
		Если Строка.Проверяющий = ДанныеДляАкта.Проверяющий Тогда
			НомерЦикла = НомерЦикла + 1;
			НомерПоследнейСтрокиПроверяющего = Счетчик;
			МаксДатаОкончанияПроверки = Макс(МаксДатаОкончанияПроверки, Строка.ДатаОкончания); 
		КонецЕсли; 
		НомерПроверкиКачества = Макс(НомерПроверкиКачества, Строка.НомерПроверкиКачества);
	КонецЦикла; 
	
	Если НомерПоследнейСтрокиПроверяющего > 0 и НомерПоследнейСтрокиПроверяющего = Счетчик и МаксДатаОкончанияПроверки = '00010101000000' Тогда
		// Проверяющий уже добавлен - ничего делать не надо
		Возврат;
	КонецЕсли; 
		
	ОбъектАктПроверки = АктПроверки.ПолучитьОбъект(); 
	ОбъектАктПроверки.Состояние = ДанныеДляАкта.Состояние;
	
    НовСтрока = ОбъектАктПроверки.ПроверкиКачества.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрока, ДанныеДляАкта);
        
	НовСтрока.ЦиклПроверки = НомерЦикла;
	НовСтрока.НомерПроверкиКачества = НомерПроверкиКачества + 1;
        
	Если НомерЦикла > 1 и ЗначениеЗаполнено(НовСтрока.ДатаНачала) Тогда
		// ДатаНачала = Тек. дата
		НовСтрока.ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли; 
        
    // Запись общей оценки в акт
	//ОбъектАктПроверки.Оценка = мПроверкаДела.РассчитатьОценкуАктаПроверки(АктПроверки);
	//ОбъектАктПроверки.ОценкаИтоговая = ОбъектАктПроверки.Оценка;
        
	Попытка
		ОбъектАктПроверки.Записать();
	Исключение
		Сообщить("Закройте Акт проверки и попробуйте еще раз!");
		Отказ = Истина;
	КонецПопытки; 
КонецПроцедуры // ДобавитьСтрокуВАктПроверки()

// Записывает в акт проверки в последнюю строку с проверяющим дату окончания
//  и состояние
Процедура ЗаписатьДатуОкончанияПроверки(АктПроверки, Проверяющий, ДатаОкончания, Состояние)
    
	Если Не ЗначениеЗаполнено(АктПроверки) Тогда
		Возврат;
    КонецЕсли; 
		
	ОбъектАктПроверки = АктПроверки.ПолучитьОбъект(); 
	ОбъектАктПроверки.Состояние = Состояние;
	ПроверкиКачества = ОбъектАктПроверки.ПроверкиКачества;
	
	Отбор = Новый Структура("Проверяющий", Проверяющий);
	СтрокиПроверяющего = ПроверкиКачества.НайтиСтроки(Отбор);
	ВремяЗаписано = Ложь;
	
	Если СтрокиПроверяющего.Количество() > 0 Тогда
		ИндексПоследнейСтроки = СтрокиПроверяющего.Количество() - 1;
		// Проверяющий в акте есть
		Если ПроверкиКачества.Количество() = СтрокиПроверяющего[ИндексПоследнейСтроки].НомерСтроки Тогда
			// и он последний - запись времени окончания
			СтрокиПроверяющего[ИндексПоследнейСтроки].ДатаОкончания = ДатаОкончания;
			ВремяЗаписано = Истина;
			Попытка
				ОбъектАктПроверки.Записать();
			Исключение
				Сообщить("Закройте Акт проверки и попробуйте еще раз!");
				Отказ = Истина;
			КонецПопытки; 
		КонецЕсли; 
	КонецЕсли;
	
	Если Не ВремяЗаписано Тогда
		// надо добавить строку с проверяющим
		ДанныеДляАкта = Новый Структура();
		ПредСтрокаПроверки = ПроверкиКачества[ПроверкиКачества.Количество()-1];
		ДанныеДляАкта.Вставить("ДатаНачала", ПредСтрокаПроверки.ДатаОкончания); // из окончания предыдущей проверки
		ДанныеДляАкта.Вставить("ДатаОкончания", ДатаОкончания);
		ДанныеДляАкта.Вставить("Проверяющий", Проверяющий);
		ДанныеДляАкта.Вставить("ЦиклПроверки", ПредСтрокаПроверки.ЦиклПроверки);
		ДанныеДляАкта.Вставить("Оценка", 1);
		ДанныеДляАкта.Вставить("Состояние", Состояние);
		
		ДобавитьСтрокуВАктПроверки(АктПроверки, ДанныеДляАкта);
		
	КонецЕсли; 
КонецПроцедуры // ЗаписатьДатуОкончанияПроверки()

// Записывает в акт проверки состояние
Процедура УстановитьСостояниеАктаПроверки(АктПроверки, Состояние)
    
	Если Не ЗначениеЗаполнено(АктПроверки) Тогда
		Возврат;
    КонецЕсли; 
		
	ОбъектАктПроверки = АктПроверки.ПолучитьОбъект(); 
	ОбъектАктПроверки.Состояние = Состояние;
	
	Попытка
		ОбъектАктПроверки.Записать();
	Исключение
		Сообщить("Закройте Акт проверки и попробуйте еще раз!");
		Отказ = Истина;
	КонецПопытки; 
КонецПроцедуры // УстановитьСостояниеАктаПроверки()

// Возвращает ТаблицуЗначений с Актами проверки
Функция ПолучитьАктыПроверкиДляВедомостиКомиссии(ДатаВедомости) Экспорт
    Запрос = Новый Запрос;
	//Запрос.Текст = 
	//    "ВЫБРАТЬ
	//    |	мАктыПроверки.ВидПроверкиКачества КАК ВидПроверки,
	//    |	мАктыПроверки.Оценка КАК КоэффициентПроверки,
	//    |	мАктыПроверки.ОценкаИтоговая КАК ОценкаКомиссии,
	//    |	мАктыПроверки.Проверяемый КАК Исполнитель,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора КАК ЭтапДоговора,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора.Владелец КАК Договор,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора.ОбъектРабот.Наименование КАК НаименованиеОбъекта,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора.Владелец.Корреспондент КАК Корреспондент,
	//    |	мАктыПроверки.Ссылка КАК Ссылка,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам КАК ВидРабот,
	//    |	мАктыПроверки.Владелец.ЭтапДоговора.Подразделение КАК ВладелецЭтапДоговораПодразделение
	//    |ПОМЕСТИТЬ АктыПроверок
	//    |ИЗ
	//    |	Справочник.мАктыПроверки КАК мАктыПроверки
	//    |ГДЕ
	//    |	мАктыПроверки.ДатаАктаПроверки МЕЖДУ &Дата1 И &Дата2
	//    |	И мАктыПроверки.Оценка < 1
	//    |	И мАктыПроверки.Оценка > 0
	//    |	И мАктыПроверки.Состояние = ЗНАЧЕНИЕ(Перечисление.м_СостоянияАктовПроверки.НаКомиссии)
	//    |
	//    |ОБЪЕДИНИТЬ ВСЕ
	//    |
	//    |ВЫБРАТЬ
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.ВидПроверкиКачества,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Оценка,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.ОценкаИтоговая,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Проверяемый,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Владелец,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.ОбъектРабот.Наименование,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Владелец.Корреспондент,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Ссылка,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам,
	//    |	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Подразделение
	//    |ИЗ
	//    |	Документ.М_ВедомостьКомиссии.АктыПроверки КАК М_ВедомостьКомиссииАктыПроверки
	//    |ГДЕ
	//    |	М_ВедомостьКомиссииАктыПроверки.Ссылка.Дата МЕЖДУ &Дата0 И &Дата1
	//    |	И М_ВедомостьКомиссииАктыПроверки.Ссылка.Проведен
	//    |	И ЕСТЬNULL(М_ВедомостьКомиссииАктыПроверки.ДатаАктирования, &ПустаяДата) = &ПустаяДата
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |	мАктыПроверкиПроверкиКачества.Ссылка КАК АктПроверки,
	//    |	мАктыПроверкиПроверкиКачества.Проверяющий,
	//    |	МИНИМУМ(мАктыПроверкиПроверкиКачества.Оценка) КАК Оценка
	//    |ПОМЕСТИТЬ ОценкиПроверяющих
	//    |ИЗ
	//    |	Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	//    |ГДЕ
	//    |	мАктыПроверкиПроверкиКачества.Ссылка В
	//    |			(ВЫБРАТЬ
	//    |				АктыПроверок.Ссылка
	//    |			ИЗ
	//    |				АктыПроверок КАК АктыПроверок)
	//    |
	//    |СГРУППИРОВАТЬ ПО
	//    |	мАктыПроверкиПроверкиКачества.Ссылка,
	//    |	мАктыПроверкиПроверкиКачества.Проверяющий
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	//    |ПОМЕСТИТЬ СотрудникиСТКК
	//    |ИЗ
	//    |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	//    |ГДЕ
	//    |	ИсполнителиЗадач.РольИсполнителя.Наименование = ""Сотрудник СТКК""
	//    |;
	//    |
	//    |////////////////////////////////////////////////////////////////////////////////
	//    |ВЫБРАТЬ
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование = ""Начальник отдела""
	//    |			ТОГДА мАктыПроверкиПроверкиКачества.Проверяющий
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК НачальникОтдела,
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование = ""Начальник сектора""
	//    |				И НЕ мАктыПроверкиПроверкиКачества.Проверяющий В
	//    |						(ВЫБРАТЬ
	//    |							СотрудникиСТКК.Исполнитель
	//    |						ИЗ
	//    |							СотрудникиСТКК КАК СотрудникиСТКК)
	//    |			ТОГДА мАктыПроверкиПроверкиКачества.Проверяющий
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК НачальникОтряда,
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование ПОДОБНО ""Заместитель начальника отдела""
	//    |			ТОГДА мАктыПроверкиПроверкиКачества.Проверяющий
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК ГлавныйСпециалист,
	//    |	ВЫБОР
	//    |		КОГДА ИсполнителиЗадач.РольИсполнителя.Наименование = ""Сотрудник СТКК""
	//    |			ТОГДА мАктыПроверкиПроверкиКачества.Проверяющий
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК СотрудникСТКК,
	//    |	АктыПроверок.Ссылка КАК АктПроверки,
	//    |	АктыПроверок.ВидПроверки КАК ВидПроверки,
	//    |	АктыПроверок.КоэффициентПроверки КАК КоэффициентПроверки,
	//    |	АктыПроверок.ОценкаКомиссии КАК ОценкаКомиссии,
	//    |	АктыПроверок.Исполнитель КАК Исполнитель,
	//    |	АктыПроверок.ЭтапДоговора КАК ЭтапДоговора,
	//    |	АктыПроверок.НаименованиеОбъекта КАК НаименованиеОбъекта,
	//    |	АктыПроверок.Договор КАК Договор,
	//    |	АктыПроверок.Корреспондент КАК Корреспондент,
	//    |	АктыПроверок.ВидРабот КАК ВидРабот,
	//    |	АктыПроверок.ВладелецЭтапДоговораПодразделение КАК Подразделение,
	//    |	ЕСТЬNULL(мАктированиеАкты.ДатаАкта, &ПустаяДата) КАК ДатаАктирования,
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование = ""Начальник отдела""
	//    |			ТОГДА ОценкиПроверяющих.Оценка
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК ОценкаНачОтдела,
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование = ""Начальник сектора""
	//    |				И НЕ мАктыПроверкиПроверкиКачества.Проверяющий В
	//    |						(ВЫБРАТЬ
	//    |							СотрудникиСТКК.Исполнитель
	//    |						ИЗ
	//    |							СотрудникиСТКК КАК СотрудникиСТКК)
	//    |			ТОГДА ОценкиПроверяющих.Оценка
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК ОценкаНачОтряда,
	//    |	ВЫБОР
	//    |		КОГДА СведенияОПользователях.Должность.Наименование ПОДОБНО ""Заместитель начальника отдела""
	//    |			ТОГДА ОценкиПроверяющих.Оценка
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК ОценкаГлавСпеца,
	//    |	ВЫБОР
	//    |		КОГДА ИсполнителиЗадач.РольИсполнителя.Наименование = ""Сотрудник СТКК""
	//    |			ТОГДА ОценкиПроверяющих.Оценка
	//    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	//    |	КОНЕЦ КАК ОценкаСТКК
	//    |ИЗ
	//    |	АктыПроверок КАК АктыПроверок
	//    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	//    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	//    |			ПО мАктыПроверкиПроверкиКачества.Проверяющий = СведенияОПользователях.Пользователь
	//    |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	//    |			ПО мАктыПроверкиПроверкиКачества.Проверяющий = ИсполнителиЗадач.Исполнитель
	//    |			ЛЕВОЕ СОЕДИНЕНИЕ ОценкиПроверяющих КАК ОценкиПроверяющих
	//    |			ПО мАктыПроверкиПроверкиКачества.Ссылка = ОценкиПроверяющих.АктПроверки
	//    |				И мАктыПроверкиПроверкиКачества.Проверяющий = ОценкиПроверяющих.Проверяющий
	//    |		ПО (мАктыПроверкиПроверкиКачества.Ссылка = АктыПроверок.Ссылка)
	//    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.мАктирование.Акты КАК мАктированиеАкты
	//    |		ПО АктыПроверок.ЭтапДоговора = мАктированиеАкты.ЭтапДоговора
	//    |			И (мАктированиеАкты.ДатаАкта МЕЖДУ &Дата1 И &Дата2
	//    |				ИЛИ ЕСТЬNULL(мАктированиеАкты.ДатаАкта, &ПустаяДата) = &ПустаяДата)
	//    |
	//    |УПОРЯДОЧИТЬ ПО
	//    |	мАктыПроверкиПроверкиКачества.ЦиклПроверки УБЫВ";
	Запрос.Текст =        
	"ВЫБРАТЬ
	|	мАктыПроверки.Ссылка КАК АктПроверки,
	|	мАктыПроверки.ВидПроверкиКачества КАК ВидПроверки,
	|	мАктыПроверки.Оценка КАК КоэффициентПроверки,
	|	мАктыПроверки.ОценкаИтоговая КАК ОценкаКомиссии,
	|	мАктыПроверки.Проверяемый КАК Исполнитель,
	|	мАктыПроверки.Владелец.ЭтапДоговора КАК ЭтапДоговора,
	|	мАктыПроверки.Владелец.ЭтапДоговора.Владелец КАК Договор,
	|	мАктыПроверки.Владелец.ЭтапДоговора.ОбъектРабот.Наименование КАК НаименованиеОбъекта,
	|	мАктыПроверки.Владелец.ЭтапДоговора.Владелец.Корреспондент КАК Корреспондент,
	|	мАктыПроверки.Владелец.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам КАК ВидРабот,
	|	мАктыПроверки.Владелец.ЭтапДоговора.Подразделение КАК Подразделение,
	|	0 КАК ОценкаЗамНачФилиалаИтоговая,
	|	0 КАК ОценкаНачОтделаИтоговая,
	|	0 КАК ОценкаЗамНачОтделаИтоговая,
	|	0 КАК ОценкаНачСектораИтоговая,
	|	0 КАК ОценкаИсполнителю,
	|	ЛОЖЬ КАК Выставлена
	|ПОМЕСТИТЬ АктыПроверок
	|ИЗ
	|	Справочник.мАктыПроверки КАК мАктыПроверки
	|ГДЕ
	|	мАктыПроверки.ДатаАктаПроверки МЕЖДУ &Дата1 И &Дата2
	|	И мАктыПроверки.Оценка МЕЖДУ 0.1 И 1
	|	И мАктыПроверки.Состояние = ЗНАЧЕНИЕ(Перечисление.м_СостоянияАктовПроверки.НаКомиссии)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Ссылка,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.ВидПроверкиКачества,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Оценка,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.ОценкаИтоговая,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Проверяемый,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Владелец,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.ОбъектРабот.Наименование,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Владелец.Корреспондент,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам,
	|	М_ВедомостьКомиссииАктыПроверки.АктПроверки.Владелец.ЭтапДоговора.Подразделение,
	|	0,
	|	М_ВедомостьКомиссииАктыПроверки.ОценкаНачОтделаИтоговая,
	|	М_ВедомостьКомиссииАктыПроверки.ОценкаГлавСпецаИтоговая,
	|	М_ВедомостьКомиссииАктыПроверки.ОценкаНачОтрядаИтоговая,
	|	М_ВедомостьКомиссииАктыПроверки.ОценкаИсполнителю,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.М_ВедомостьКомиссии.АктыПроверки КАК М_ВедомостьКомиссииАктыПроверки
	|ГДЕ
	|	М_ВедомостьКомиссииАктыПроверки.Ссылка.Дата МЕЖДУ &Дата0 И &Дата1
	|	И М_ВедомостьКомиссииАктыПроверки.Ссылка.Проведен
	|	И ЕСТЬNULL(М_ВедомостьКомиссииАктыПроверки.ДатаАктирования, &ПустаяДата) = &ПустаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мАктированиеАкты.ДатаАкта КАК ДатаАкта,
	|	мАктированиеАкты.ЭтапДоговора КАК ЭтапДоговора
	|ПОМЕСТИТЬ ДатыАктирования
	|ИЗ
	|	Документ.мАктирование.Акты КАК мАктированиеАкты
	|ГДЕ
	|	мАктированиеАкты.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И мАктированиеАкты.ЭтапДоговора В
	|			(ВЫБРАТЬ
	|				АктыПроверок.ЭтапДоговора
	|			ИЗ
	|				АктыПроверок КАК АктыПроверок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ СотрудникиСТКК
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.СотрудникСТКК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(мАктыПроверкиПроверкиКачества.Оценка) КАК Оценка,
	|	мАктыПроверкиПроверкиКачества.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОценкиНачОтделов
	|ИЗ
	|	Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = мАктыПроверкиПроверкиКачества.Проверяющий)
	|ГДЕ
	|	СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.НачальникОтдела)
	|	И мАктыПроверкиПроверкиКачества.Ссылка В
	|			(ВЫБРАТЬ
	|				АктыПроверок.АктПроверки
	|			ИЗ
	|				АктыПроверок КАК АктыПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	мАктыПроверкиПроверкиКачества.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(мАктыПроверкиПроверкиКачества.Оценка) КАК Оценка,
	|	мАктыПроверкиПроверкиКачества.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОценкиСТКК
	|ИЗ
	|	Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	|ГДЕ
	|	мАктыПроверкиПроверкиКачества.Ссылка В
	|			(ВЫБРАТЬ
	|				АктыПроверок.АктПроверки
	|			ИЗ
	|				АктыПроверок КАК АктыПроверок)
	|	И мАктыПроверкиПроверкиКачества.Проверяющий В
	|			(ВЫБРАТЬ
	|				СотрудникиСТКК.Исполнитель
	|			ИЗ
	|				СотрудникиСТКК КАК СотрудникиСТКК)
	|
	|СГРУППИРОВАТЬ ПО
	|	мАктыПроверкиПроверкиКачества.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(мАктыПроверкиПроверкиКачества.Оценка) КАК Оценка,
	|	мАктыПроверкиПроверкиКачества.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОценкиЗамНачОтделов
	|ИЗ
	|	Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = мАктыПроверкиПроверкиКачества.Проверяющий)
	|ГДЕ
	|	СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.ЗаместительНачальникаОтдела)
	|	И мАктыПроверкиПроверкиКачества.Ссылка В
	|			(ВЫБРАТЬ
	|				АктыПроверок.АктПроверки
	|			ИЗ
	|				АктыПроверок КАК АктыПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	мАктыПроверкиПроверкиКачества.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(мАктыПроверкиПроверкиКачества.Оценка) КАК Оценка,
	|	мАктыПроверкиПроверкиКачества.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОценкиНачСекторов
	|ИЗ
	|	Справочник.мАктыПроверки.ПроверкиКачества КАК мАктыПроверкиПроверкиКачества
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО (СведенияОПользователях.Пользователь = мАктыПроверкиПроверкиКачества.Проверяющий)
	|ГДЕ
	|	СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.НачальникСектора)
	|	И мАктыПроверкиПроверкиКачества.Ссылка В
	|			(ВЫБРАТЬ
	|				АктыПроверок.АктПроверки
	|			ИЗ
	|				АктыПроверок КАК АктыПроверок)
	|
	|СГРУППИРОВАТЬ ПО
	|	мАктыПроверкиПроверкиКачества.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктыПроверок.Подразделение КАК Подразделение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.НачальникОтдела)
	|					И (АктыПроверок.Подразделение.Родитель = СведенияОПользователях.Подразделение
	|						ИЛИ АктыПроверок.Подразделение = СведенияОПользователях.Подразделение)
	|				ТОГДА СведенияОПользователях.Пользователь
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК НачОтдела,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.ЗаместительНачальникаОтдела)
	|					И АктыПроверок.Подразделение.Родитель = СведенияОПользователях.Подразделение
	|				ТОГДА СведенияОПользователях.Пользователь
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ЗамНачОтдела,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СведенияОПользователях.Должность.мРольВПроверкеКачества = ЗНАЧЕНИЕ(Перечисление.мРольВПроверкеКачества.НачальникСектора)
	|					И АктыПроверок.Подразделение = СведенияОПользователях.Подразделение
	|				ТОГДА СведенияОПользователях.Пользователь
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК НачСектора
	|ПОМЕСТИТЬ ФИО
	|ИЗ
	|	АктыПроверок КАК АктыПроверок,
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|
	|СГРУППИРОВАТЬ ПО
	|	АктыПроверок.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыПроверок.АктПроверки КАК АктПроверки,
	|	АктыПроверок.ВидПроверки КАК ВидПроверки,
	|	АктыПроверок.КоэффициентПроверки КАК КоэффициентПроверки,
	|	АктыПроверок.ОценкаКомиссии КАК ОценкаКомиссии,
	|	АктыПроверок.Исполнитель КАК Исполнитель,
	|	АктыПроверок.ЭтапДоговора КАК ЭтапДоговора,
	|	АктыПроверок.Договор КАК Договор,
	|	АктыПроверок.НаименованиеОбъекта КАК НаименованиеОбъекта,
	|	АктыПроверок.Корреспондент КАК Корреспондент,
	|	АктыПроверок.ВидРабот КАК ВидРабот,
	|	АктыПроверок.Подразделение КАК Подразделение,
	|	ДатыАктирования.ДатаАкта КАК ДатаАктирования,
	|	ОценкиСТКК.Оценка КАК ОценкаСТКК,
	|	ОценкиНачОтделов.Оценка КАК ОценкаНачОтдела,
	|	ОценкиЗамНачОтделов.Оценка КАК ОценкаЗамНачОтдела,
	|	ОценкиНачСекторов.Оценка КАК ОценкаНачСектора,
	|	ФИО.НачОтдела КАК НачальникОтдела,
	|	ФИО.ЗамНачОтдела КАК ГлавныйСпециалист,
	|	ФИО.НачСектора КАК НачальникОтряда,
	|	АктыПроверок.ОценкаЗамНачФилиалаИтоговая КАК ОценкаЗамНачФилиалаИтоговая,
	|	АктыПроверок.ОценкаНачОтделаИтоговая КАК ОценкаНачОтделаИтоговая,
	|	АктыПроверок.ОценкаЗамНачОтделаИтоговая КАК ОценкаГлавСпецаИтоговая,
	|	АктыПроверок.ОценкаНачСектораИтоговая КАК ОценкаНачОтрядаИтоговая,
	|	АктыПроверок.ОценкаИсполнителю,
	|	АктыПроверок.Выставлена
	|ИЗ
	|	АктыПроверок КАК АктыПроверок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыАктирования КАК ДатыАктирования
	|		ПО АктыПроверок.ЭтапДоговора = ДатыАктирования.ЭтапДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкиЗамНачОтделов КАК ОценкиЗамНачОтделов
	|		ПО (ОценкиЗамНачОтделов.Ссылка = АктыПроверок.АктПроверки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкиНачОтделов КАК ОценкиНачОтделов
	|		ПО АктыПроверок.АктПроверки = ОценкиНачОтделов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкиНачСекторов КАК ОценкиНачСекторов
	|		ПО АктыПроверок.АктПроверки = ОценкиНачСекторов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкиСТКК КАК ОценкиСТКК
	|		ПО АктыПроверок.АктПроверки = ОценкиСТКК.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФИО КАК ФИО
	|		ПО АктыПроверок.Подразделение = ФИО.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктыПроверок.Договор.ЧисловойНомер,
	|	АктыПроверок.ЭтапДоговора.НомерЭтапа";
	
	Запрос.УстановитьПараметр("Дата0", НачалоМесяца(НачалоМесяца(ДатаВедомости)-1));
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ДатаВедомости));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДатаВедомости));
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');

    Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции // ПолучитьАктыПроверкиДляВедомостиКомиссии()

// Возвращает первого исполнителя из этапа договоров дела
Функция ПолучитьИсполнителяДела(Дело) Экспорт
	ЭтапДоговора = Дело.ЭтапДоговора;
	Если Не ЗначениеЗаполнено(ЭтапДоговора) Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоровИсполнители.Исполнитель КАК Исполнитель
		|ИЗ
		|	Справочник.мЭтапыДоговоров.Исполнители КАК мЭтапыДоговоровИсполнители
		|ГДЕ
		|	мЭтапыДоговоровИсполнители.НомерСтроки = 1
		|	И мЭтапыДоговоровИсполнители.Ссылка = &ЭтапДоговора";
	
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Исполнитель;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции 

// Возвращает номер уровня шаблона проверки дела или -1 
Функция ПолучитьУровеньШаблонаПроверкиДела(Процесс) Экспорт
	Уровень = -1;
	
	ШаблонБП = Процесс.Шаблон;
	Шаблон1 = Справочники.ШаблоныСогласования.ПроверкаДела1Уровня;
	Шаблон2 = Справочники.ШаблоныСогласования.ПроверкаДела2Уровня;
	Шаблон3 = Справочники.ШаблоныСогласования.ПроверкаДела3Уровня;
	Шаблон4 = Справочники.ШаблоныСогласования.ПроверкаДела4Уровня;
	Шаблон5 = Справочники.ШаблоныСогласования.ПроверкаДелаФилиал;
	
	Если ШаблонБП = Шаблон1 Тогда
		Уровень = 1;
	ИначеЕсли ШаблонБП = Шаблон2 Тогда
		Уровень = 2;
	ИначеЕсли ШаблонБП = Шаблон3 Тогда
		Уровень = 3;
	ИначеЕсли ШаблонБП = Шаблон4 Тогда
		Уровень = 4;
	ИначеЕсли ШаблонБП = Шаблон5 Тогда
		Уровень = 5
	КонецЕсли;
	Возврат Уровень;
КонецФункции

// Возвращает уровень проверки по процессу Согласовать
// Возвращаемое значение Перечисление.мУровеньПроверки
Функция ПолучитьУровеньПроверкиДелаПоПроцессу(Процесс) Экспорт
	Уровень = Перечисления.мУровниПроверки.ПустаяСсылка();
	
	ШаблонБП = Процесс.Шаблон;
	Шаблон1 = Справочники.ШаблоныСогласования.ПроверкаДела1Уровня;
	Шаблон2 = Справочники.ШаблоныСогласования.ПроверкаДела2Уровня;
	Шаблон3 = Справочники.ШаблоныСогласования.ПроверкаДела3Уровня;
	Шаблон4 = Справочники.ШаблоныСогласования.ПроверкаДела4Уровня;
	Шаблон5 = Справочники.ШаблоныСогласования.ПроверкаДелаФилиал;
	
	Если ШаблонБП = Шаблон1 Тогда
		Уровень = Перечисления.мУровниПроверки.Отряд;
	ИначеЕсли ШаблонБП = Шаблон2 Тогда
		Уровень = Перечисления.мУровниПроверки.Отдел;
	ИначеЕсли ШаблонБП = Шаблон3 Тогда
		Уровень = Перечисления.мУровниПроверки.СекторКонтроля;
	ИначеЕсли ШаблонБП = Шаблон4 Тогда
		Уровень = Перечисления.мУровниПроверки.ЗамГлИнженера;
	ИначеЕсли ШаблонБП = Шаблон5 Тогда
		Уровень = Перечисления.мУровниПроверки.Филиал;
	КонецЕсли;
	Возврат Уровень;
КонецФункции

// Возвращает Истину если равен или больше
Функция УровеньШаблонаПроверкиДелаРавенМаксимальному(Процесс) Экспорт
	Уровень = мПроверкаДела.ПолучитьУровеньШаблонаПроверкиДела(Процесс);
	
	МаксУровеньПоУмолчанию = Константы.м_МаксУровеньПроверкиДел.Получить();
	
	Возврат Уровень >= МаксУровеньПоУмолчанию;
КонецФункции

Процедура ЗаписатьСостояниеДела(Дело, Состояние, Дата, Подразделение=Неопределено, Исполнитель=Неопределено, УровеньПроверки=Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Дело) Тогда
		Возврат;
    КонецЕсли; 
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат;
    КонецЕсли; 
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
    КонецЕсли; 
		
	НаборЗаписей = РегистрыСведений.мИсторияСостоянийДел.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Дата);
	НаборЗаписей.Отбор.Дело.Установить(Дело);
	НаборЗаписей.Отбор.Состояние.Установить(Состояние);
	НаборЗаписей.Отбор.Подразделение.Установить(Подразделение);
	НаборЗаписей.Отбор.Исполнитель.Установить(Исполнитель);
	НаборЗаписей.Отбор.УровеньПроверки.Установить(УровеньПроверки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Дата;
	НоваяЗапись.Дело = Дело;
	НоваяЗапись.Состояние = Состояние;
	НоваяЗапись.Подразделение = Подразделение;
	НоваяЗапись.Исполнитель = Исполнитель;
	НоваяЗапись.УровеньПроверки = УровеньПроверки;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ПрочитатьСостояниеДела(Дело) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мИсторияСостоянийДелСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.мИсторияСостоянийДел.СрезПоследних(, Дело = &Дело) КАК мИсторияСостоянийДелСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	мИсторияСостоянийДелСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дело", Дело);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
		    Возврат Выборка.Состояние;
		КонецЕсли; 
	КонецЦикла;
	Возврат Неопределено;
КонецФункции 

// Возвращает Структуру: УровеньПроверки - последний значимый уровень проверки дела
//						Исполнитель - Исполнитель на УровнеПроверки
Функция ПолучитьРеквизитыУровняПроверкиДела(Дело, УровеньПроверки=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   мИсторияСостоянийДелСрезПоследних.УровеньПроверки КАК УровеньПроверки,
        |   мИсторияСостоянийДелСрезПоследних.Исполнитель КАК Исполнитель,
        |   мИсторияСостоянийДелСрезПоследних.Период,
        |   мИсторияСостоянийДелСрезПоследних.Состояние,
        |   мИсторияСостоянийДелСрезПоследних.Подразделение
        |ИЗ
        |   РегистрСведений.мИсторияСостоянийДел.СрезПоследних(, Дело = &Дело) КАК мИсторияСостоянийДелСрезПоследних
        |
        |УПОРЯДОЧИТЬ ПО
        |   мИсторияСостоянийДелСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дело", Дело);
    Если УровеньПроверки <> Неопределено Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Дело = &Дело", "Дело = &Дело И УровеньПроверки = &УровеньПроверки");
 	    Запрос.УстановитьПараметр("УровеньПроверки", УровеньПроверки);
    КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.УровеньПроверки) Тогда
			РеквУровняПроверки = Новый Структура("УровеньПроверки, Исполнитель, Состояние, Подразделение",
                Выборка.УровеньПроверки,
                Выборка.Исполнитель,
                Выборка.Состояние,
                Выборка.Подразделение); 
			Возврат РеквУровняПроверки;
		КонецЕсли; 
	КонецЦикла;
	
	РеквУровняПроверки = Новый Структура("УровеньПроверки, Исполнитель, Состояние, Подразделение",
	Неопределено,
	Неопределено,
	Неопределено,
	Неопределено); 
	Возврат РеквУровняПроверки;
КонецФункции 
 
Функция ПолучитьАктыПроверкиДела(Дело) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктыПроверки.Ссылка
		|ИЗ
		|	Справочник.мАктыПроверки КАК мАктыПроверки
		|ГДЕ
		|	мАктыПроверки.Владелец = &Дело
		|	И НЕ мАктыПроверки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дело", Дело);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивАктов = Новый Массив;
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивАктов;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивАктов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивАктов;
КонецФункции 

Функция ПолучитьМассивЗадачПроверкиДела(Дело, Исполнитель) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   ИсполнителиЗадач.Исполнитель КАК Исполнитель,
        |   ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
        |   ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
        //|   ИсполнителиЗадач.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
        |ПОМЕСТИТЬ Роли
        |ИЗ
        |   РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
        |ГДЕ
        |   ИсполнителиЗадач.Исполнитель = &Исполнитель
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЗадачаИсполнителяПредметы.Ссылка КАК Задача
        //|   ЗадачаИсполнителяПредметы.Ссылка.РольИсполнителя КАК РольИсполнителя,
        //|   ЗадачаИсполнителяПредметы.Ссылка.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
        //|   ЗадачаИсполнителяПредметы.Ссылка.Исполнитель КАК Исполнитель,
        //|   ЗадачаИсполнителяПредметы.Ссылка.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации
        |ИЗ
        |   Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
        |ГДЕ
        |   ЗадачаИсполнителяПредметы.Предмет = &Предмет
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
        |   И НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
        |   И ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.Состояние = &Активен
        |   И (ЗадачаИсполнителяПредметы.Ссылка.Исполнитель = &Исполнитель
        |           ИЛИ ЗадачаИсполнителяПредметы.Ссылка.РольИсполнителя В
        |                   (ВЫБРАТЬ
        |                       Роли.РольИсполнителя
        |                   ИЗ
        |                       Роли КАК Роли)
        |               И ЗадачаИсполнителяПредметы.Ссылка.ОсновнойОбъектАдресации В
        |                   (ВЫБРАТЬ
        |                       Роли.ОсновнойОбъектАдресации
        |                   ИЗ
        |                       Роли КАК Роли))";
	
	Запрос.УстановитьПараметр("Активен", Перечисления.СостоянияБизнесПроцессов.Активен);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("Предмет", Дело);
    //Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    МассивЗадач = Новый Массив;
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивЗадач;
    КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
    Пока Выборка.Следующий() Цикл
        МассивЗадач.Добавить(Выборка.Задача);
	КонецЦикла;
    Возврат МассивЗадач;
	
КонецФункции // ПолучитьМассивЗадачПроверкиДела()
 
// Отмечает указанную задачу как принятую к исполнению
//
Функция ПринятьЗадачуКИсполнению(Задача, ТекущийПользователь) Экспорт
	ЗадачаПринята = Ложь;
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ЗадачаПринята;
	КонецЕсли; 
	
	Попытка
		Если Не Задача.ПринятаКИсполнению Тогда
			ЗаблокироватьДанныеДляРедактирования(Задача);
			ОбъектЗадача = Задача.ПолучитьОбъект();
			ОбъектЗадача.ПринятаКИсполнению = Истина;
			ОбъектЗадача.ДатаПринятияКИсполнению = ТекущаяДата();
			Если ОбъектЗадача.Исполнитель.Пустая() Тогда
				ОбъектЗадача.Исполнитель = ТекущийПользователь;
			КонецЕсли;	
			ОбъектЗадача.Записать();
		КонецЕсли; 	
		ЗадачаПринята = Истина;
	Исключение
	КонецПопытки;
	Возврат ЗадачаПринята;
КонецФункции

Функция ПолучитьПараметрыЗапросаУровняПроверки() Экспорт

	Возврат Новый Структура("ТекущийУровень, ВидЛица, ВидРабот, Организация, Подразделение", 
		Перечисления.мУровниПроверки.ПустаяСсылка(),
		Перечисления.ЮрФизЛицо.ПустаяСсылка(),
		Справочники.мВидыРаботФизЛица.ПустаяСсылка(),
		Справочники.Организации.ПустаяСсылка(),
		Справочники.СтруктураПредприятия.ПустаяСсылка()); 

КонецФункции // ПолучитьПараметрыЗапросаУровняПроверки()

Функция ЗаполнитьПараметрыЗапросаУровняПроверки(Дело, УровеньПроверки, Подразделение=Неопределено) Экспорт
    Если Не ЗначениеЗаполнено(Подразделение) Тогда
        Подразделение = Дело.Подразделение;
	КонецЕсли; 
	
	ВидРабот = Дело.мВидРабот;
	Если Не ЗначениеЗаполнено(ВидРабот) Тогда
		ВидРабот = Дело.ЭтапДоговора.ВидРабот;
	КонецЕсли; 
    
	Возврат Новый Структура("ТекущийУровень, ВидЛица, ВидРабот, Организация, Подразделение", 
		УровеньПроверки,
		Дело.Корреспондент.ЮрФизЛицо,
		ВидРабот,
		Дело.Организация,
		Подразделение); 

КонецФункции // ПолучитьПараметрыЗапросаУровняПроверки()

Функция СостояниеДелаПроверено(Состояние) Экспорт
	Проверено = Перечисления.мСостоянияДела.Проверено;
	ПровереноОтправлено = Перечисления.мСостоянияДела.ПровереноОтправлено;
	ПровереноПереданоНаРегистрацию = Перечисления.мСостоянияДела.ПровереноПереданоНаРегистрацию;
	Если Состояние = Проверено
		ИЛИ Состояние = ПровереноОтправлено
		ИЛИ Состояние = ПровереноПереданоНаРегистрацию Тогда
		Возврат Истина;
	КонецЕсли; 	
	Возврат Ложь;
КонецФункции // СостояниеДелаПроверено(РеквУровняПроверки.Состояние)()
 
// Возвращает следующий уровень проверки дела, если такой есть, или пустое значение перечисления мУровниПроверки
// ТекущийУровень - Перечисление.мУровниПроверки - уровень, на котором находится проверка 
// ВидЛица - Перечисление.ЮрФизЛица - ВидЛица, для которых определяется уровень. Может не заполняться
// ВидРабот - СправочникСсылка мВидыРаботЮрЛиц или мВидыРаботФизЛиц. Может не заполняться 
// Организация - СправочникСсылка.Организации. Может не заполняться
// Подразделение - СправочникСсылка.СтруктураПредприятия - имеет смысл только для уровня Исполнитель, т.к.
//  служит для определения Отряд/Отдел
//
// Если есть значение, соотвествующее передаваемым параметрам - возвращается оно,
// иначе пустое значение перечисления мУровниПроверки
Функция ПолучитьСледующийУровеньПроверки(ПараметрыЗапроса) Экспорт
	ТекущийУровень = ПараметрыЗапроса.ТекущийУровень;
	ВидЛица = ПараметрыЗапроса.ВидЛица;
	ВидРабот = ПараметрыЗапроса.ВидРабот;
	Организация = ПараметрыЗапроса.Организация;
	Подразделение = ПараметрыЗапроса.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень КАК СледующийУровень,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	2
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	3
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	4
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	5
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	6
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	7
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	8
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	9
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	10
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	11
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	12
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	13
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	14
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	15
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.СледующийУровень,
		|	16
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.ТекущийУровень = &ТекущийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ТекущийУровень", ТекущийУровень);
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Запрос.УстановитьПараметр("ВидРаботРодитель", ВидРабот.Родитель);
	Иначе	
		Запрос.УстановитьПараметр("ВидРаботРодитель", Неопределено);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ВидЛица);
	Запрос.УстановитьПараметр("ПустоеЮрФизЛицо", Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].СледующийУровень;	
	КонецЕсли; 
	Возврат Перечисления.мУровниПроверки.ПустаяСсылка();
КонецФункции // ПолучитьСледующийУровеньПроверки()
 
// Возвращает Предыдущий уровень проверки дела, если такой есть, или пустое значение перечисления мУровниПроверки
// ТекущийУровень - Перечисление.мУровниПроверки - уровень, на котором находится проверка 
// ВидЛица - Перечисление.ЮрФизЛица - ВидЛица, для которых определяется уровень. Может не заполняться
// ВидРабот - СправочникСсылка мВидыРаботЮрЛиц или мВидыРаботФизЛиц. Может не заполняться 
// Организация - СправочникСсылка.Организации. Может не заполняться
// Подразделение - СправочникСсылка.СтруктураПредприятия - имеет смысл только для уровня Исполнитель, т.к.
//  служит для определения Отряд/Отдел
//
// Если есть значение, соотвествующее передаваемым параметрам - возвращается оно,
// иначе пустое значение перечисления мУровниПроверки
Функция ПолучитьПредыдущийУровеньПроверки(ПараметрыЗапроса) Экспорт
	СледующийУровень = ПараметрыЗапроса.ТекущийУровень;
	ВидЛица = ПараметрыЗапроса.ВидЛица;
	ВидРабот = ПараметрыЗапроса.ВидРабот;
	Организация = ПараметрыЗапроса.Организация;
	Подразделение = ПараметрыЗапроса.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень КАК ТекущийУровень,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	2
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	3
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	4
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	5
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	6
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	7
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	8
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	9
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	10
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	11
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	12
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	13
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	14
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	15
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	16
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = Неопределено
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Запрос.УстановитьПараметр("СледующийУровень", СледующийУровень);
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Запрос.УстановитьПараметр("ВидРаботРодитель", ВидРабот.Родитель);
	Иначе	
		Запрос.УстановитьПараметр("ВидРаботРодитель", Неопределено);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ВидЛица);
	Запрос.УстановитьПараметр("ПустоеЮрФизЛицо", Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].ТекущийУровень;	
	КонецЕсли; 
	Возврат Перечисления.мУровниПроверки.ПустаяСсылка();
КонецФункции // ПолучитьПредыдущийУровеньПроверки()

// Возвращает Последний уровень проверки дела, если такой есть, или пустое значение перечисления мУровниПроверки
// ВидЛица - Перечисление.ЮрФизЛица - ВидЛица, для которых определяется уровень. Может не заполняться
// ВидРабот - СправочникСсылка мВидыРаботЮрЛиц или мВидыРаботФизЛиц. Может не заполняться 
// Организация - СправочникСсылка.Организации. Может не заполняться
// Подразделение - СправочникСсылка.СтруктураПредприятия - имеет смысл только для уровня Исполнитель, т.к.
//  служит для определения Отряд/Отдел
//
// Если есть значение, соотвествующее передаваемым параметрам - возвращается оно,
// иначе пустое значение перечисления мУровниПроверки
Функция ПолучитьПоследнийУровеньПроверки(ПараметрыЗапроса) Экспорт
	ВидЛица = ПараметрыЗапроса.ВидЛица;
	ВидРабот = ПараметрыЗапроса.ВидРабот;
	Организация = ПараметрыЗапроса.Организация;
	Подразделение = ПараметрыЗапроса.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень КАК ПоследнийУровень,
		|	1 КАК Приоритет
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	2
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	3
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	4
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	5
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	6
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	7
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	8
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	9
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	10
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	11
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	12
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	13
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &Подразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	14
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И (мСвязиУровнейПроверки.ВидРабот = &ВидРабот
		|			ИЛИ мСвязиУровнейПроверки.ВидРабот = &ВидРаботРодитель)
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	15
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мСвязиУровнейПроверки.ТекущийУровень,
		|	16
		|ИЗ
		|	РегистрСведений.мСвязиУровнейПроверки КАК мСвязиУровнейПроверки
		|ГДЕ
		|	мСвязиУровнейПроверки.СледующийУровень = &СледующийУровень
		|	И мСвязиУровнейПроверки.ЮрФизЛицо = &ПустоеЮрФизЛицо
		|	И мСвязиУровнейПроверки.ВидРабот = НЕОПРЕДЕЛЕНО
		|	И мСвязиУровнейПроверки.Подразделение = &ПустоеПодразделение
		|	И мСвязиУровнейПроверки.Организация = &ПустаяОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Запрос.УстановитьПараметр("СледующийУровень", Перечисления.мУровниПроверки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидРабот", ВидРабот);
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Запрос.УстановитьПараметр("ВидРаботРодитель", ВидРабот.Родитель);
	Иначе	
		Запрос.УстановитьПараметр("ВидРаботРодитель", Неопределено);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЮрФизЛицо", ВидЛица);
	Запрос.УстановитьПараметр("ПустоеЮрФизЛицо", Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].ПоследнийУровень;	
	КонецЕсли; 
	Возврат Перечисления.мУровниПроверки.ПустаяСсылка();
КонецФункции 

Процедура СтартоватьПроцессПроверкиДела(Дело, УровеньПроверки, ГлавнаяЗадача=Неопределено, Автор) Экспорт
   Если УровеньПроверки = Перечисления.мУровниПроверки.Отряд Тогда
        ШаблонБП = Справочники.ШаблоныСогласования.ПроверкаДела1Уровня;
    ИначеЕсли УровеньПроверки = Перечисления.мУровниПроверки.Отдел Тогда
        ШаблонБП = Справочники.ШаблоныСогласования.ПроверкаДела2Уровня;
    ИначеЕсли УровеньПроверки = Перечисления.мУровниПроверки.Филиал Тогда
        ШаблонБП = Справочники.ШаблоныСогласования.ПроверкаДелаФилиал;
    ИначеЕсли УровеньПроверки = Перечисления.мУровниПроверки.СекторКонтроля Тогда
        ШаблонБП = Справочники.ШаблоныСогласования.ПроверкаДела3Уровня;
    ИначеЕсли УровеньПроверки = Перечисления.мУровниПроверки.ЗамГлИнженера Тогда
        ШаблонБП = Справочники.ШаблоныСогласования.ПроверкаДела4Уровня;
    Иначе
        Сообщить("Не установлен шаблон процесса для перехода на уровень проверки """+УровеньПроверки+"""!");
        Возврат;
    КонецЕсли; 

    БизнесПроцесс = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
    
    ПараметрыЗаполнения = Новый Структура();
    ПараметрыЗаполнения.Вставить("Шаблон", ШаблонБП);
    ПараметрыЗаполнения.Вставить("Предметы", Дело);
    ПараметрыЗаполнения.Вставить("АвторСобытия", Автор);
    ПараметрыЗаполнения.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
    БизнесПроцесс.Заполнить(ПараметрыЗаполнения);

	МассивПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
    Если МассивПолей.Количество() <> 0 Тогда
        
        СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
        
        СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'При заполнении процесса по шаблону ""%1"" не были заполнены поля: %2.
        | Автоматический запуск процесса не выполнен.'"),
        Строка(ШаблонБП), СтрокаПолей);
        
        ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , ШаблонБП, СообщениеОбОшибке);
        
        // Создание уведомлений программы
        ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
        |%1'");
        ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        ОписаниеУведомления,
        СообщениеОбОшибке);
        
        РаботаСУведомлениямиПрограммыСервер.ДобавитьУведомление(
        ТекущаяДатаСеанса(),
        ОписаниеУведомления,
        Перечисления.ВидыУведомленийПрограммы.Ошибка,
        Автор,
        Дело);
        
        Возврат;
        
    КонецЕсли;	
    
    БизнесПроцесс.Записать();
    
    БизнесПроцесс.Старт();
КонецПроцедуры

Функция ПолучитьСписокВозможныхПроверяющих(Подразделение, РольИсполнителя=Неопределено) Экспорт
	СписокВозможныхПроверяющих = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(РольИсполнителя) Тогда
		РольИсполнителя = Справочники.РолиИсполнителей.НайтиПоНаименованию("Проверка качества");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
	
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", Подразделение);
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокВозможныхПроверяющих.Добавить(Выборка.Исполнитель);
	КонецЦикла;
	
	Возврат СписокВозможныхПроверяющих;
КонецФункции 
 
Функция ПолучитьСостояниеУровеньДела(АктПроверки=Неопределено, Дело=Неопределено, ВидПроверкиКачества=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСостоянияАктовПроверкиСрезПоследних.Дело КАК Дело,
		|	мСостоянияАктовПроверкиСрезПоследних.АктПроверки КАК АктПроверки,
		|	мСостоянияАктовПроверкиСрезПоследних.Уровень КАК Уровень,
		|	мСостоянияАктовПроверкиСрезПоследних.Состояние КАК Состояние,
		|	мСостоянияАктовПроверкиСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.мСостоянияАктовПроверки.СрезПоследних(
		|			,
		|			АктПроверки = &АктПроверки и Дело = &Дело
		|				И НЕ АктПроверки.ПометкаУдаления
		|				И АктПроверки.ВидПроверкиКачества = &ВидПроверкиКачества) КАК мСостоянияАктовПроверкиСрезПоследних";
	
	Если ВидПроверкиКачества=Неопределено Тогда
		ВидПроверкиКачества = Перечисления.М_ВидыПроверкиКачества.Камеральная;
	КонецЕсли; 
	Запрос.УстановитьПараметр("ВидПроверкиКачества", ВидПроверкиКачества);
	
	Если Дело=Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "и Дело = &Дело", "");		
	Иначе
		Запрос.УстановитьПараметр("Дело", Дело);
	КонецЕсли; 
	
	Если АктПроверки=Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АктПроверки = &АктПроверки и", "");		
	Иначе
		Запрос.УстановитьПараметр("АктПроверки", АктПроверки);
	КонецЕсли; 
	
	Если Дело=Неопределено и АктПроверки=Неопределено Тогда
		// нет предмета для запроса
		Возврат Неопределено;
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		// нет записей
		СостояниеУровень = Неопределено;
		
	ИначеЕсли Результат.Количество() = 1 Тогда
		СостояниеУровень = Новый Структура("Состояние, Уровень", Результат[0].Состояние, Результат[0].Уровень); 	
		
	ИначеЕсли Результат.Количество() > 1 Тогда	
		// ошибка - возможно несколько актов проверки по делу
		Сообщить("По делу "+Дело+" возможно есть несколько актов проверки! Пометьте ненужные на удаление.");
		Позиция = Результат.Количество()-1;
		СостояниеУровень = Новый Структура("Состояние, Уровень", Результат[Позиция].Состояние, Результат[Позиция].Уровень); 	
	КонецЕсли; 
	Возврат СостояниеУровень;
КонецФункции // ПолучитьСостояниеУровеньДела()

Функция ПолучитьВнесениеЗИС(Дело) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мДелоВЗИС.ВнесеноЗИС,
		|	мДелоВЗИС.КомментарийЗИС
		|ИЗ
		|	РегистрСведений.мДелоВЗИС КАК мДелоВЗИС
		|ГДЕ
		|	мДелоВЗИС.Дело = &Дело";
	
	Запрос.УстановитьПараметр("Дело", Дело);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ВнесеноЗИС, КомментарийЗИС", Выборка.ВнесеноЗИС, Выборка.КомментарийЗИС); 
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 

Процедура ЗаписатьВнесениеЗИС(ПараметрыЗаписи) Экспорт
	Набор = РегистрыСведений.мДелоВЗИС.СоздатьНаборЗаписей();
	Набор.Отбор.Дело.Установить(ПараметрыЗаписи.Дело);
	НоваяЗапись = Набор.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыЗаписи);
	Набор.Записать(Истина);
КонецПроцедуры
 