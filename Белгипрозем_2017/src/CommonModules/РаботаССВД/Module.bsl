// Отправить документ по СВД. Возвращает Истина, если хоть одному корреспонденту отправили.
//
// Параметры:
//  Документ - СправочникСсылка.ИсходящиеДокументы.
//  Получатели - массив ссылок на справочник Корреспонденты.
//  ФайлыДляОтправки - массив файлов документов, предназначенных для отправки. Если не указано, тогда будут отправлены все файлы.
//
Функция ОтправитьПоСВД(Документ, Получатели, ФайлыДляОтправки = Неопределено) Экспорт
	
	ОтправкаПроизведена = Ложь;
	
	Для Каждого Корреспондент Из Получатели Цикл
		
		ПравилоОтправкиСообщенийСВД = НайтиПравилоОтправкиСообщенийСВД(Документ.Организация, Корреспондент, Документ.ВидДокумента);
		Если ПравилоОтправкиСообщенийСВД = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПравилоОтправкиСообщенийСВД.Транспорт.ФорматСообщения);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.СформироватьСообщение(ПравилоОтправкиСообщенийСВД.Транспорт, Документ, 
				Корреспондент, Документ.Организация, ПравилоОтправкиСообщенийСВД, ФайлыДляОтправки);
		КонецЕсли;	
		
		ОтправкаПроизведена = Истина;	
				
	КонецЦикла;	
	
	Возврат ОтправкаПроизведена;
	
КонецФункции	

// Найти правило отправки по организации, корреспонденту, виду документа
Функция НайтиПравилоОтправкиСообщенийСВД(Организация, Корреспондент, ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПравилаОтправкиСообщенийСВД.Ссылка
		|ИЗ
		|	Справочник.ПравилаОтправкиСообщенийСВД КАК ПравилаОтправкиСообщенийСВД
		|ГДЕ
		|	ПравилаОтправкиСообщенийСВД.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Правило = Выборка.Ссылка;
		
		// Для обмена через оператора ЭДО должно существовать соглашение
		Если Правило.Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
			
			Запрос2 = Новый Запрос;
			
			Запрос2.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|ИЗ
				|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникЭД
				|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашение
				|		ПО УчастникЭД.СоглашениеОбИспользованииЭД = Соглашение.Ссылка
				|ГДЕ
				|	УчастникЭД.Участник = &Корреспондент
				|	И Соглашение.Организация = &Организация
				|	И УчастникЭД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
			Запрос2.УстановитьПараметр("Корреспондент", Корреспондент);
			Запрос2.УстановитьПараметр("Организация", Организация);
			Выборка2 = Запрос2.Выполнить().Выбрать();
			
			Если Не Выборка2.Следующий() Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьУчетПоОрганизациям Тогда
			Если Правило.Организации.Количество() <> 0 Тогда
				
				Если Правило.Организации.Найти(Организация, "Организация") = Неопределено Тогда
					Продолжить; // это правило не подходит
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;		
		
		Если Правило.Корреспонденты.Количество() <> 0 Тогда
			
			Если Правило.Корреспонденты.Найти(Корреспондент, "Корреспондент") = Неопределено Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Правило.ВидыДокументов.Количество() <> 0 Тогда
			
			Если Правило.ВидыДокументов.Найти(ВидДокумента, "ВидДокумента") = Неопределено Тогда
				Продолжить; // это правило не подходит
			КонецЕсли;	
			
		КонецЕсли;	
		
		Возврат Правило;
		
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

// Создает XDTO объект указанного типа из указанного пространства имен
Функция СоздатьОбъект(ТипОбъекта, ПространствоИмен) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипОбъекта));
	
КонецФункции

// возвращает пространство имен для типовых форматов
Функция ПолучитьПространствоИмен(ФорматСообщения) Экспорт
	
	Если Не ЗначениеЗаполнено(ФорматСообщения)
		ИЛИ ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ53898ВложенныеФайлы Тогда
		Возврат "http://www.1c.ru/medo";
	ИначеЕсли ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
		//МиСофт+
		Возврат "http://www.1c.ru/medosignedby";
		//МиСофт-
	Иначе
		ВызватьИсключение НСтр("ru='Неверный формат сообщения'");
	КонецЕсли;	
	
КонецФункции

// Выгрузить Исходящий документ в xml файл на диске
Функция ВыгрузитьИсходящийДокументВXML(ИсходящийДокумент, ВозвращаемоеПолноеИмяФайла, Корреспондент, 
	Транспорт, ВозвращаемыйИдентификационныйНомерСообщения, Правило, ВозвращаемыйВидСообщенияСВД,
	ФайлыДляОтправки = Неопределено) Экспорт
	//МиСофт+
	
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ОбъектXDTO = СоздатьXDTOИзИсходящего(ИсходящийДокумент, Корреспондент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД, ФайлыДляОтправки);
	ВозвращаемыйИдентификационныйНомерСообщения = ОбъектXDTO.msg_id;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
	
	ЗаписатьXML_РБ(ИмяВременногоФайла);
	
	ВозвращаемоеПолноеИмяФайла = ИмяВременногоФайла;
	Возврат Истина;
	//МиСофт-
	
КонецФункции

Функция ПолучитьКорреспондентаПоНаименованиюВСВД(ИмяКорреспондента, Транспорт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиСВД.Адресат
		|ИЗ
		|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		|ГДЕ
		|	УчастникиСВД.Транспорт = &Транспорт
		|	И УчастникиСВД.ИмяАдресата ПОДОБНО &ИмяАдресата
		|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Корреспонденты";
		
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ИмяКорреспондента);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Адресат;
	
КонецФункции	

Функция ПолучитьОрганизациюПоНаименованиюВСВД(ИмяКорреспондента, Транспорт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиСВД.Адресат
		|ИЗ
		|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		|ГДЕ
		|	УчастникиСВД.Транспорт = &Транспорт
		|	И УчастникиСВД.ИмяАдресата ПОДОБНО &ИмяАдресата
		|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Организации";
		
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ИмяКорреспондента);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	//МиСофт+	
	Возврат ?(Выборка.Следующий(), Выборка.Адресат, Справочники.Организации.ПустаяСсылка());
	//МиСофт-
КонецФункции	

Функция ИдВСтроку(ИДДокумента)
	
	ИДДокументаСтрока = НРег(Строка(ИДДокумента));
	ИДДокументаСтрока = СтрЗаменить(ИДДокументаСтрока, "-", "");
	
	Возврат ИДДокументаСтрока;
	
КонецФункции	

// Заполняет список файлов из массива структур
Процедура ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивФайлов, Правило, ПространствоИмен, ФорматСообщения,
	XDTOПодписиЭП) Экспорт
	
	//МиСофт+
	РазмерФайловВПакете = 0;
	
	ТипыПередаваемыхФайловНРег = НРег(Правило.ТипыПередаваемыхФайлов);
	
	МассивРасширений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТипыПередаваемыхФайловНРег, " ");
		
	НомерФайла = 0;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если Правило.МаксимальныйРазмерПередаваемогоФайла <> 0 
			И ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерПередаваемогоФайла Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Правило.МаксимальныйРазмерВсехПередаваемыхФайлов <> 0 
			И РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерВсехПередаваемыхФайлов Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Правило.ТипыПередаваемыхФайлов) Тогда
			
			Расширение = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
			
			Если МассивРасширений.Найти(Расширение) = Неопределено Тогда // НЕ нашли в массиве разрешенных расширений
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		ОбъектDMFile = СоздатьОбъект("DocTransfer", ПространствоИмен);
		ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла);
		
		ОбъектXDTO.DocTransfer.Добавить(ОбъектDMFile);
		
		РазмерФайловВПакете = РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер;
		НомерФайла = НомерФайла + 1;
		
	КонецЦикла;	
	//МиСофт-
	
КонецПроцедуры	

// Заполняет один файл из структуры
Процедура ЗаполнитьXDTOФайл(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла)
	
	//МиСофт+
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);       
	
	// Исходное имя файла
	ОбъектDMFile.name = ФайлСсылка.Наименование + "." + ФайлСсылка.ТекущаяВерсияРасширение;

	// Операционная система, в среде  которой определен файл
	// Указывают условное наименование операционной системы, например, Dos, Windows, Solaris,   
	// AIX, Linux и т.д.   
	ОбъектDMFile.os = "Windows"; 
	
	// Формат файла, определяющий программные средства его обработки (например, визуализации)
	// В качестве типа может использоваться mime тип, расширение файла и т.п., обеспечивающее просмотр 
	// этого файла стандартными процедурами операционной системы
	ОбъектDMFile.type = ФайлСсылка.ТекущаяВерсияРасширение;
	
	// Версия формата файла - необязательный
	// Указывают условное обозначение приложения и (или) формата, в котором файл был  создан
	ОбъектDMFile.type_ver = ""; 
	
	// Кодировка текста - необязательный - Согласно установленным видам кодировки:
	//WIN-1251, КОИ-8 и т.д. 	Указывают в соответствии с международным стандартом наименования кодировок 
	ОбъектDMFile.char_set  = "";
	
	// Описание документа (файла)
	// Текстовое описание содержимого файла (например, наименование соответствующего документа)    
	ОбъектDMFile.description = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ФайлСсылка.Наименование, 
		ФайлСсылка.ТекущаяВерсияРасширение);
	
	// Дата создания файла
	ОбъектDMFile.created = ФайлСсылка.ТекущаяВерсияДатаСоздания;
	
	// Дата последней модификации файла
	ОбъектDMFile.modified = ФайлСсылка.ТекущаяВерсияДатаМодификацииФайла;
	
	ОбъектDMData = СоздатьОбъект("Data", ПространствоИмен);

	Если ФайлСсылка.ТекущаяВерсия.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ФайлСсылка.ТекущаяВерсия);
		ОбъектDMData.__content = Base64Строка(ХранилищеФайла.Получить());
		
	Иначе
		
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ОбъектDMData.__content = Base64Строка(Новый ДвоичныеДанные(ПолныйПуть));
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					| Файл: ""%1.%2""'"),
					ВерсияСсылка.ПолноеНаименование,
					ВерсияСсылка.Расширение);
				
				ВызватьИсключение СообщениеОбОшибке;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбъектDMFile.Data = ОбъектDMData;
	
	// добавим все ЭП файла
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		
		
		ПодписьЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(ФайлСсылка.ТекущаяВерсия);
			
		Пока ПодписьЭП.Следующий() Цикл
			
			XDTOПодписьЭП = СоздатьОбъект("Signature", ПространствоИмен);
			
			XDTOПодписьЭП.keyid	= СтрЗаменить(Строка(ПодписьЭП.УникальныйИдентификатор), "-", "");	//Идентификатор открытого ключа	
			//XDTOПодписьЭП.operation_type		// Тип операции подписания
			//XDTOПодписьЭП.orig_signature		// Значение ЭП в исходной системе (если выполнялось заверение третьей стороной)
			XDTOПодписьЭП.signer = ПодписьЭП.КомуВыданСертификат;	// Имя подписавшего
			XDTOПодписьЭП.signtime = Формат(ПодписьЭП.ДатаПодписи, "ДФ=""yyyy-MM-dd'T'ЧЧ:мм:сс'Z'"""); 	// Дата-время подписи
			XDTOПодписьЭП.__content =  Base64Строка(ПодписьЭП.Подпись.Получить());
			
			//XDTOПодписьЭП.Signature = ПодписьЭП.Подпись.Получить();
			//XDTOПодписьЭП.Certificate = ПодписьЭП.Сертификат.Получить();
			//XDTOПодписьЭП.SignDate = ПодписьЭП.ДатаПодписи;
			//XDTOПодписьЭП.CertificateSubject = ПодписьЭП.КомуВыданСертификат;
			//XDTOПодписьЭП.Comment = ПодписьЭП.Комментарий;
			//XDTOПодписьЭП.ObjectNumber = НомерФайла + 1; // нумерация идет с 1  - 1,2,3 для файлов. 0 - это сам документ
			
			ОбъектDMFile.Signature.Добавить(XDTOПодписьЭП); 
			
		КонецЦикла;
		
	КонецЕсли;	
	//МиСофт-
	
КонецПроцедуры	

Функция ЗаполнитьАдрес(ОбъектСТаблЧастьюКонтактнаяИнформация, ПространствоИмен)
	
	// Адрес
	Для Каждого Строка Из ОбъектСТаблЧастьюКонтактнаяИнформация.КонтактнаяИнформация Цикл
	
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
			Адрес = СоздатьОбъект("Address", ПространствоИмен);
			
			Адрес.__content = Строка.Представление; //Строка.ЗначенияПолей;
			
			ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
				Строка.ЗначенияПолей);
				
			//МиСофт+
			Если Не ТипЗнч(ЗначенияПолей) = Тип("Строка") Тогда
				Для Каждого Поле Из ЗначенияПолей Цикл
					
					Если Поле.Представление = "Улица" Тогда
						Адрес.street = Поле.Значение;
					ИначеЕсли Поле.Представление = "Дом" Тогда
						Адрес.house = Поле.Значение;
					ИначеЕсли Поле.Представление = "Квартира" Тогда	
						Адрес.flat = Поле.Значение;
					ИначеЕсли Поле.Представление = "НаселенныйПункт" Тогда	
						Адрес.settlement = Поле.Значение;
					ИначеЕсли Поле.Представление = "Район" Тогда	
						Адрес.district = Поле.Значение;
					ИначеЕсли Поле.Представление = "Регион" Тогда	
						Адрес.region = Поле.Значение;
					ИначеЕсли Поле.Представление = "Страна" Тогда	
						Адрес.country = Поле.Значение;
					ИначеЕсли Поле.Представление = "Индекс" Тогда	
						Адрес.postcode = Поле.Значение;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			//МиСофт-
			
			Возврат Адрес;
			
		КонецЕсли;	

	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьEmailИТелефоны(Контакты, Ссылка, ПространствоИмен)
	//МиСофт+
	// Элемент Econtact
	// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
	// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Ссылка, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
		Контакт.__content = Строка.Значение;
		
		// type Тип номера (адреса) 
		// Значение = 1 для рабочего телефона.   
		// Значение = 2 для домашнего телефона.  
		// Значение = 3 для мобильного телефона. 
		// Значение = 4 для факса.
		// Значение = 5 для адреса электронной почты (E-mail).
		// Значение = 6 для адреса web-сайта (страницы).
		// Значение = 0 для прочего 
		
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента.Наименование Тогда
			Контакт.type = 1;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКорреспондента.Наименование Тогда
			Контакт.type = 3;
		КонецЕсли;	
		
		Если Не Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКорреспондента.Наименование Тогда
			Контакты.Добавить(Контакт);
		КонецЕсли;
			
	КонецЦикла;	
	
	ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Ссылка, 
		Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Для Каждого Строка Из ТаблицаКонтактов Цикл
		
		Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
		Контакт.__content = Строка.Значение;
		
		// type Тип номера (адреса) 
		// Значение = 1 для рабочего телефона.   
		// Значение = 2 для домашнего телефона.  
		// Значение = 3 для мобильного телефона. 
		// Значение = 4 для факса.
		// Значение = 5 для адреса электронной почты (E-mail).
		// Значение = 6 для адреса web-сайта (страницы).
		// Значение = 0 для прочего 
		
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКорреспондента.Наименование Тогда
			Контакт.type = 5;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента.Наименование Тогда
			Контакт.type = 1;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКорреспондента.Наименование Тогда
			Контакт.type = 3;
		КонецЕсли;	
		
		Контакты.Добавить(Контакт);
			
	КонецЦикла;	
	
	//МиСофт-
КонецПроцедуры	

Функция СоздатьФизлицоСПодписью(СсылкаПользователь, ПространствоИмен)
	
	Физлицо = СоздатьОбъект("PrivatePersonWithSign", ПространствоИмен);
	
	Физлицо.Name = СоздатьОбъект("Name", ПространствоИмен);
	Физлицо.Name.__content = Строка(СсылкаПользователь);
	
	//Должность - берем из регистра СведенияОПользователях
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	Если ЗначениеЗаполнено(Должность) Тогда
		ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
		ДолжностьXDTO.__content = Строка(Должность);
		Физлицо.Rank.Добавить(ДолжностьXDTO);
	КонецЕсли;
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаПользователь, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Физлицо.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Физлицо.Econtact, СсылкаПользователь, ПространствоИмен);
	
	// Физлицо.inn; //Индивидуальный номер налогоплательщика
	// Физлицо.doc_kind // Вид документа, идентифицирующего физическое лицо например,паспорт)
	// Физлицо.doc_num // Номер документа, идентифицирующего  физическое лицо   
	// Физлицо.doc_org // Название организации, выдавшей документ, идентифицирующий  физическое лицо   
	// Физлицо.doc_date // Дата выдачи документа, идентифицирующего физическое лицо   
	
	Возврат Физлицо;
	
КонецФункции	

//МиСофт
Функция СоздатьОрганизациюСПодписью(СсылкаПользователь, СсылкаОрганизация, ПространствоИмен)
	//МиСофт+
	Организация = СоздатьОбъект("OrganizationWithSign", ПространствоИмен);
	
	Организация.organization_string = Строка(СсылкаОрганизация);
	
	//Должность - берем из регистра СведенияОПользователях      
	ОфициальныйПредставитель = СоздатьОбъект("OfficialPersonWithSign", ПространствоИмен);
	ОфициальныйПредставитель.Name = СоздатьОбъект("Name", ПространствоИмен);
	ОфициальныйПредставитель.Name.__content = СсылкаПользователь.Наименование;
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	Если ЗначениеЗаполнено(Должность) Тогда
		ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
		ДолжностьXDTO.__content = Строка(Должность);
		ОфициальныйПредставитель.Rank.Добавить(ДолжностьXDTO);
	КонецЕсли;
	Организация.OfficialPersonWithSign.Добавить(ОфициальныйПредставитель);
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаОрганизация, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Организация.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Организация.Econtact, СсылкаОрганизация, ПространствоИмен);
	
	Возврат Организация;
	//МиСофт-
КонецФункции	

Функция СоздатьФизлицо(СсылкаПользователь, ПространствоИмен)
	
	Физлицо = СоздатьОбъект("PrivatePerson", ПространствоИмен);
	
	Физлицо.Name = СоздатьОбъект("Name", ПространствоИмен);
	Физлицо.Name.__content = Строка(СсылкаПользователь);
	
	//Должность - берем из регистра СведенияОПользователях
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
	ДолжностьXDTO.__content = Строка(Должность);
	Физлицо.Rank.Добавить(ДолжностьXDTO);
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаПользователь, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Физлицо.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Физлицо.Econtact, СсылкаПользователь, ПространствоИмен);
	
	// Физлицо.inn; //Индивидуальный номер налогоплательщика
	// Физлицо.doc_kind // Вид документа, идентифицирующего физическое лицо например,паспорт)
	// Физлицо.doc_num // Номер документа, идентифицирующего  физическое лицо   
	// Физлицо.doc_org // Название организации, выдавшей документ, идентифицирующий  физическое лицо   
	// Физлицо.doc_date // Дата выдачи документа, идентифицирующего физическое лицо   
	
	Возврат Физлицо;
	
КонецФункции	

//МиСофт
Функция СоздатьОрганизацию(СсылкаПользователь, СсылкаОрганизация, ПространствоИмен)
	//МиСофт+
	Организация = СоздатьОбъект("Organization", ПространствоИмен);
	
	Организация.organization_string = Строка(СсылкаОрганизация);
	
	//Должность - берем из регистра СведенияОПользователях      
	ОфициальныйПредставитель = СоздатьОбъект("OfficialPerson", ПространствоИмен);
	ОфициальныйПредставитель.Name = СоздатьОбъект("Name", ПространствоИмен);
	ОфициальныйПредставитель.Name.__content = СсылкаПользователь.Наименование;
	Должность = РаботаСПользователями.ПолучитьДолжность(СсылкаПользователь);
	Если ЗначениеЗаполнено(Должность) Тогда
		ДолжностьXDTO = СоздатьОбъект("Rank", ПространствоИмен);
		ДолжностьXDTO.__content = Строка(Должность);
		ОфициальныйПредставитель.Rank.Добавить(ДолжностьXDTO);
	КонецЕсли;
	
	Организация.OfficialPerson.Добавить(ОфициальныйПредставитель);
	
	// Адрес
	Адрес = ЗаполнитьАдрес(СсылкаОрганизация, ПространствоИмен);
	Если Адрес <> Неопределено Тогда
		Организация.Address = Адрес;
	КонецЕсли;	
	
	// Email и телефон
	ЗаполнитьEmailИТелефоны(Организация.Econtact, СсылкаОрганизация, ПространствоИмен);
	
	Возврат Организация;
	//МиСофт-
КонецФункции	

Функция СоздатьXDTOКонверт(ТемаСообщения, Транспорт)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOКонверт = СоздатьОбъект("Envelop", ПространствоИмен); 
	
	ОбъектXDTOКонверт.dtstamp = Формат(УниверсальноеВремя(ТекущаяДата()), "ДФ=""yyyy-MM-dd'T'ЧЧ:мм:сс'Z'"""); // Дата и время формирования сообщения в UTC
	
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	ОбъектXDTOКонверт.msg_id = ИдВСтроку(ИДПакета);
	
	ОбъектXDTOКонверт.subject = ТемаСообщения;    //Тема (описание) сообщения
	ОбъектXDTOКонверт.type = "SDIP-1.0"; //Вид и версия стандарта, по которому создано данное сообщение (Допустимое значение SDIP-1.0)
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-	
КонецФункции

// Выгрузить Исходящий документ в пакет
 // ТипСообщения = 1 для основного документа.
Функция СоздатьXDTOЗаголовок(Организация, Корреспондент, Транспорт, ВидСообщенияСВД)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOЗаголовок = СоздатьОбъект("Header", ПространствоИмен); 
	
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент Тогда
		ОбъектXDTOЗаголовок.msg_type = 1; // Вид сообщения. Значение = 1 для основного документа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
		ОбъектXDTOЗаголовок.msg_type = 3; // Вид сообщения. Значение = 3 для документа-ответа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке 
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		ОбъектXDTOЗаголовок.msg_type = 0; // Вид сообщения. Значение = 0 для уведомления.
	КонецЕсли;
	
	// Необходимость посылки уведомления
	// Значение = 0 при отсутствии необходимости посылки уведомлений. 
	// Значение = 1 при необходимости посылки уведомлений только в случае возникновения ошибок. 
	// Значение = 2 при необходимости посылки уведомлений. По умолчанию (отсутствие атрибута) значение = 0
	ОбъектXDTOЗаголовок.msg_acknow = 2;  //не обязательный 
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		ОбъектXDTOЗаголовок.msg_acknow = 0; // для уведомлений не надо ставить флаг необходимости посылки уведомлений
	КонецЕсли;	
	
	ОбъектXDTOОтправитель = СоздатьОбъект("Sender", ПространствоИмен);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOОтправитель.id = МенеджерОбъекта.ПолучитьНаименованиеОрганизацииВСВД(Организация, Транспорт);
		ОбъектXDTOОтправитель.name = ?(ЗначениеЗаполнено(Организация.ПолноеНаименование), Организация.ПолноеНаименование, Организация.Наименование);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ИдентификационныйНомерСистемы.Получить()) Тогда
		Константы.ИдентификационныйНомерСистемы.Установить(Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	ОбъектXDTOОтправитель.sys_id = Константы.ИдентификационныйНомерСистемы.Получить();
	ОбъектXDTOОтправитель.system = "1С:Документооборот";
	//ОбъектXDTOОтправитель.system_details = Метаданные.Версия;
	
	ОбъектXDTOЗаголовок.Sender = ОбъектXDTOОтправитель;
	
	Возврат ОбъектXDTOЗаголовок;
	//МиСофт-	
КонецФункции

Функция СоздатьXDTOПолучатель(Корреспондент, Транспорт)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOReceiver = СоздатьОбъект("Receiver", ПространствоИмен);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOReceiver.id = МенеджерОбъекта.ПолучитьНаименованиеКорреспондентаВСВД(Корреспондент, Транспорт);
		ОбъектXDTOReceiver.name = Корреспондент.ПолноеНаименование;
	КонецЕсли;
	
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		ОбъектXDTOReceiver.Organization = СоздатьОбъект("Organization", ПространствоИмен);
		
		// Адрес
		Адрес = ЗаполнитьАдрес(Корреспондент, ПространствоИмен);
		Если Адрес <> Неопределено Тогда
			ОбъектXDTOReceiver.Organization.Address = Адрес;
		КонецЕсли;	
		
		// Элемент Econtact
		// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
		// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
		ЗаполнитьEmailИТелефоны(ОбъектXDTOReceiver.Organization.Econtact, Корреспондент, ПространствоИмен);
		
		//Единая строка, содержащая все атрибуты организации
		ОбъектXDTOReceiver.Organization.organization_string = Строка(Корреспондент)
		//МиСофт+
		+ ?(ЗначениеЗаполнено(Корреспондент.ИНН), " УНП:" + Корреспондент.ИНН, "")
		//МиСофт-
		+ ?(ЗначениеЗаполнено(Корреспондент.КПП), " КПП:" + Корреспондент.КПП, "");
				
		//	Полное название организации
		Если ЗначениеЗаполнено(Корреспондент.ПолноеНаименование) Тогда
			ОбъектXDTOReceiver.Organization.fullname = Корреспондент.ПолноеНаименование;
		Иначе
			ОбъектXDTOReceiver.Organization.fullname = Строка(Корреспондент);
		КонецЕсли;	
		
		// Краткое название организации
		ОбъектXDTOReceiver.Organization.shortname = Строка(Корреспондент);
		
		// Аббревиатура, отражающая организационно правовую форму (ЗАО, ООО, ГУП) 
		//ОбъектXDTOAddressee.ownership
		
		// ИНН
		Если ЗначениеЗаполнено(Корреспондент.ИНН) Тогда
			ОбъектXDTOReceiver.Organization.inn = Число(Корреспондент.ИНН);
		КонецЕсли;	
		
		// КПП
		Если ЗначениеЗаполнено(Корреспондент.КПП) Тогда
			ОбъектXDTOReceiver.Organization.kpp = Число(Корреспондент.КПП);
		КонецЕсли;	
		
	Иначе	
		
		ОбъектXDTOReceiver.PrivatePerson = СоздатьОбъект("PrivatePerson", ПространствоИмен);
		
		ОбъектXDTOReceiver.PrivatePerson.Name = СоздатьОбъект("Name", ПространствоИмен);
		ОбъектXDTOReceiver.PrivatePerson.Name.__content = Строка(Корреспондент);
		
		// Адрес
		Адрес = ЗаполнитьАдрес(Корреспондент, ПространствоИмен);
		Если Адрес <> Неопределено Тогда
			ОбъектXDTOReceiver.PrivatePerson.Address = Адрес;
		КонецЕсли;	
		
		// Элемент Econtact
		// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
		// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
		ЗаполнитьEmailИТелефоны(ОбъектXDTOReceiver.PrivatePerson.Econtact, Корреспондент, 
		ПространствоИмен);
		
		// ИНН
		Если ЗначениеЗаполнено(Корреспондент.ИНН) Тогда
			ОбъектXDTOReceiver.PrivatePerson.inn = Число(Корреспондент.ИНН);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ОбъектXDTOReceiver;
	//МиСофт-
КонецФункции	

// Выгрузить Исходящий документ в пакет
Функция СоздатьXDTOИзИсходящего(Документ, Корреспондент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД,
	ФайлыДляОтправки = Неопределено) Экспорт
	
	//МиСофт+
	ТипСообщения = 1; // 1 - для основного документа.
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
		Документ.Ссылка,
		Справочники.ТипыСвязей.ОтправленВОтветНа);
		
	РегистрационныйНомерВОтветНа = "";	
	ДатаРегистрацииВОтветНа = '00010101'; 
	
	XDTOПодписиЭП = Неопределено;
	
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		//XDTOПодписиЭП = СоздатьОбъект("SignaturesType", ПространствоИмен);
		XDTOПодписиЭП = СоздатьОбъект("Signature", ПространствоИмен);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ВОтветНа) Тогда
		// проверим что ВОтветНа - из СВД
			
		ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(ВОтветНа);	
		Если ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
			
			Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
				ВОтветНа, "ИсходящийНомер, ИсходящаяДата");
			РегистрационныйНомерВОтветНа = Реквизиты.ИсходящийНомер;
			ДатаРегистрацииВОтветНа = Реквизиты.ИсходящаяДата;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
		ВозвращаемыйВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет; // Документ-ответ
	КонецЕсли;
	
	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт(Документ.Заголовок, Транспорт);
			
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Документ.Организация, Корреспондент, Транспорт, ВозвращаемыйВидСообщенияСВД);
	
	// Зона тело
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен);
	            	
	// Зона документа 
	ОбъектXDTO = СоздатьОбъект("DocumentType", ПространствоИмен);
	ОбъектXDTOТело.Document = ОбъектXDTO;
	
	// Уникальный служебный идентификационный номер документа в передающей системе
	ОбъектXDTO.idnumber = Строка(Документ.УникальныйИдентификатор());
	
	ОбъектXDTO.type = 0; // Тип документа - Значение = 0 для исходящего документа.
										 // Значение = 1 для входящего документа. 
										 // Значение = 2 для внутреннего документа
										 
	// Вид документа - Наименование вида документа (служебная переписка, письма граждан, 
	// распорядительный документ: приказ, распоряжение и т.д.)
	ОбъектXDTO.kind = Строка(Документ.ВидДокумента); // не обязательное поле

	ОбъектXDTO.pages = Документ.КоличествоЛистов;  // не обязательное поле
	ОбъектXDTO.title = Документ.Заголовок;  // не обязательное поле
	ОбъектXDTO.annotation = Документ.Содержание;  // не обязательное поле
	
	// Признак коллективности обращения - имеет смысл только для входящих документов
	ОбъектXDTO.collection = 0;   // не обязательное поле

	// Назначение: регистрационный номер и дата регистрации документа. 
	// Для документов, поступивших от физических лиц, допускается указание только даты.
	ОбъектXDTO.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.RegNumber.__content = Документ.РегистрационныйНомер;
	ОбъектXDTO.RegNumber.regdate = Документ.ДатаРегистрации;
	
	// Назначение: характеристика ограничений доступа к документу (гриф документа).
	ОбъектXDTO.Confident = СоздатьОбъект("Confident", ПространствоИмен);
	ОбъектXDTO.Confident.__content = Строка(Документ.ГрифДоступа);
	ОбъектXDTO.Confident.flag = 0;  // Признак ограничения доступа к документу 	
									// Значение = 0 для открытого документа. 
									// Значение = 1 для документа с ограниченным доступом

	// Referred -  "Ссылается на" - документы или задачи, на которые ссылается этот документ
	Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
		
		СсылкаНаДокумент = СоздатьОбъект("Referred", ПространствоИмен);
		СсылкаНаДокумент.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
		СсылкаНаДокумент.RegNumber.__content = РегистрационныйНомерВОтветНа;
		СсылкаНаДокумент.RegNumber.regdate = ДатаРегистрацииВОтветНа;
		ОбъектXDTO.Referred.Добавить(СсылкаНаДокумент);
		
	КонецЕсли;
	
	//ОбъектXDTO.DocNumber // не заполняем - т.к. информация уже записана в RegNumber
	// Назначение: информация о документе.
	// Номер и дата документа передаются во вложенных элементах Referred.
	// Элемент DocNumber рекомендуется использовать для распорядительных документов 
	// (постановлений, распоряжений, приказов и т.п.) в тех случаях, когда номер и дата документа 
	// отличаются от регистрационного номера и даты документа, присвоенных в организации.

	// Addressee. Назначение: описание адресата.
	// То, кому адресуется документ, - организации (юридическому лицу) или гражданину (физическому лицу)
	// - определяется соответствующим вложенным элементом Organization или PrivatePerson.
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		
		// Из табл части Получатели записываем в xml только Корреспондента, которому отправляем
		Если ПолучательСтрокаТаблЧасти.Получатель = Корреспондент Тогда
		
			ОбъектXDTOAddressee = СоздатьОбъект("Receiver", ПространствоИмен);
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
			Если МенеджерОбъекта <> Неопределено Тогда
				//МиСофт+
				ОбъектXDTOAddressee.id = МенеджерОбъекта.ПолучитьНаименованиеКорреспондентаВСВД(Корреспондент, Транспорт);
				ОбъектXDTOAddressee.name = ?(ЗначениеЗаполнено(Корреспондент.ПолноеНаименование), Корреспондент.ПолноеНаименование, Корреспондент.Наименование);
				//МиСофт-
			КонецЕсли;
			
			Если ПолучательСтрокаТаблЧасти.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				
				ОбъектXDTOAddressee.Organization = СоздатьОбъект("Organization", ПространствоИмен);
				
				// Адрес
				Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				Если Адрес <> Неопределено Тогда
					ОбъектXDTOAddressee.Organization.Address = Адрес;
				КонецЕсли;	
				
				// Элемент Econtact
				// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
				// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
				ЗаполнитьEmailИТелефоны(ОбъектXDTOAddressee.Organization.Econtact, ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				
				// Назначение: описание должностного лица.
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Адресат) Тогда
					
					ПредставительОрганизации = СоздатьОбъект("OfficialPerson", ПространствоИмен);
					
					ПредставительОрганизации.Name = СоздатьОбъект("Name", ПространствоИмен);
					ПредставительОрганизации.Name.__content = Строка(ПолучательСтрокаТаблЧасти.Адресат);
					
					// Official. Назначение: описание штатной единицы (подразделение, должность), занимаемой должностным лицом.
					ОписаниеШтатнойЕдиницы = СоздатьОбъект("Official", ПространствоИмен);
					ОписаниеШтатнойЕдиницы.__content = Строка(ПолучательСтрокаТаблЧасти.Адресат.Должность);
					ПредставительОрганизации.Official.Добавить(ОписаниеШтатнойЕдиницы);
					
					// Rank. Назначение: ученая степень, воинское звание и т.п.
					//ПредставительОрганизации.Rank 
					//не заполняем, т.к. у нас нет такой информации - какова степень/звание 
					// представителя корреспондента в другой организации
					
					// Адрес
					Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Адресат, ПространствоИмен);
					Если Адрес <> Неопределено Тогда
						ПредставительОрганизации.Address = Адрес;
					КонецЕсли;	
					
					// Элемент Econtact
					// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
					// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
					ЗаполнитьEmailИТелефоны(ПредставительОрганизации.Econtact, ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				
					ОбъектXDTOAddressee.Organization.OfficialPerson.Добавить(ПредставительОрганизации);
					
				КонецЕсли;	
				
				//Единая строка, содержащая все атрибуты организации
				//МиСофт+
				ОбъектXDTOAddressee.Organization.organization_string = Строка(ПолучательСтрокаТаблЧасти.Получатель)
					+ ?(ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ИНН), " УНП:" + ПолучательСтрокаТаблЧасти.Получатель.ИНН, "")
					+ ?(ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.КПП), " КПП:" + ПолучательСтрокаТаблЧасти.Получатель.КПП, "");
				//МиСофт-
					
				//	Полное название организации
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ПолноеНаименование) Тогда
					ОбъектXDTOAddressee.Organization.fullname = ПолучательСтрокаТаблЧасти.Получатель.ПолноеНаименование;
				Иначе
					ОбъектXDTOAddressee.Organization.fullname = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				КонецЕсли;	
				
				// Краткое название организации
				ОбъектXDTOAddressee.Organization.shortname = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				
				// Аббревиатура, отражающая организационно правовую форму (ЗАО, ООО, ГУП) 
				//ОбъектXDTOAddressee.ownership
				
				// ИНН
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ИНН) Тогда
					ОбъектXDTOAddressee.Organization.inn = Число(ПолучательСтрокаТаблЧасти.Получатель.ИНН);
				КонецЕсли;	
				
				// КПП
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.КПП) Тогда
					ОбъектXDTOAddressee.Organization.kpp = Число(ПолучательСтрокаТаблЧасти.Получатель.КПП);
				КонецЕсли;	
				
			Иначе	
				
				ОбъектXDTOAddressee.PrivatePerson = СоздатьОбъект("PrivatePerson", ПространствоИмен);
				
				ОбъектXDTOAddressee.PrivatePerson.Name = СоздатьОбъект("Name", ПространствоИмен);
				ОбъектXDTOAddressee.PrivatePerson.Name.__content = Строка(ПолучательСтрокаТаблЧасти.Получатель);
				
				// Адрес
				Адрес = ЗаполнитьАдрес(ПолучательСтрокаТаблЧасти.Получатель, ПространствоИмен);
				Если Адрес <> Неопределено Тогда
					ОбъектXDTOAddressee.PrivatePerson.Address = Адрес;
				КонецЕсли;	
				
				// Элемент Econtact
				// Назначение: номера (адреса) имеющихся средств электросвязи (email и телефон).
				// Содержание: допускается последовательное перечисление через запятую нескольких номеров (адресов).
				ЗаполнитьEmailИТелефоны(ОбъектXDTOAddressee.PrivatePerson.Econtact, ПолучательСтрокаТаблЧасти.Получатель, 
					ПространствоИмен);
				
				// ИНН
				Если ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Получатель.ИНН) Тогда
					ОбъектXDTOAddressee.PrivatePerson.inn = Число(ПолучательСтрокаТаблЧасти.Получатель.ИНН);
				КонецЕсли;	
				
			КонецЕсли;	
			
			ОбъектXDTOЗаголовок.Receiver.Добавить(ОбъектXDTOAddressee);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Элемент RegHistory
	// Назначение: история регистрации документа в разных организациях.
	// Вложенные элементы содержат все присваивавшиеся документу регистрационные номера, 
	// за исключением последнего занесенного в элемент RegNumber элемента Document.
	//ОбъектXDTO.RegHistory
	
	// Назначение: описание автора документа.
	// Для элемента Author тот, кто является автором документа, - организация (юридическое лицо) 
	// или гражданин (физическое лицо) - определяется соответствующим вложенным 
	// элементом OrganizationWithSign или PrivatePersonWithSign.
	// Берем автора из поля Подготовил
	Если ЗначениеЗаполнено(Документ.Подготовил) Тогда
		Автор = СоздатьОбъект("Author", ПространствоИмен);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда    
			Автор.OrganizationWithSign = СоздатьОрганизациюСПодписью(Документ.Подготовил, Документ.Организация, ПространствоИмен);
		Иначе
			Автор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(Документ.Подготовил, ПространствоИмен);
		КонецЕсли;		
		ОбъектXDTO.Author.Добавить(Автор); 
	КонецЕсли;
	
	//Элемент Validator
	//Назначение: утвердивший или согласовавший данный документ.
	//Автор утверждения или согласования - организация (юридическое лицо) или гражданин (физическое лицо)
	// или документ согласован или утвержден отдельным (другим) документом
	// - определяется соответствующим вложенным элементом OrganizationWithSign, PrivatePersonWithSign или DocNumber.
	Если ЗначениеЗаполнено(Документ.Подписал) Тогда
		
		Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
		Валидатор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(Документ.Подписал, ПространствоИмен);
		
		// attestation - Гриф согласования или утверждения   
		// Согласовано.
		// Утверждено.
		// Согласовано с замечаниями.
		// Отклонено
		Валидатор.attestation = "Утверждено";
		
		ОбъектXDTO.Validator.Добавить(Валидатор); 
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		
		АктивныеВизы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ.Ссылка);
		
		Для Каждого АктивнаяВиза Из АктивныеВизы Цикл
			
			Если ТипЗнч(АктивнаяВиза.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
				Валидатор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(АктивнаяВиза.Исполнитель, ПространствоИмен);
				Валидатор.attestation = Строка(АктивнаяВиза.РезультатСогласования);
				ОбъектXDTO.Validator.Добавить(Валидатор); 
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	//Элемент Writer
	//Назначение: исполнитель (составитель) документа.
	//Исполнитель (составитель) документа - организация (юридическое лицо) или гражданин (физическое лицо)
	// - определяется соответствующим вложенным элементом Organization или PrivatePerson.
	//ОбъектXDTO.Writer  - берем из поля Подготовил
	Составитель = СоздатьОбъект("Writer", ПространствоИмен);
	
	Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Составитель.Organization = СоздатьОрганизацию(Документ.Подготовил, Документ.Организация, ПространствоИмен);
	Иначе
		Составитель.PrivatePerson = СоздатьФизлицо(Документ.Подготовил, ПространствоИмен);
	КонецЕсли;
	ОбъектXDTO.Writer = Составитель; 
	
	МассивОбъектовДО = Новый Массив;
	ВсеПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ.Ссылка, Ложь);
	Если ФайлыДляОтправки = Неопределено Тогда
		МассивОбъектовДО = ВсеПодчиненныеФайлы;
	Иначе
		Для Каждого ПодчиненныйФайл Из ВсеПодчиненныеФайлы Цикл
			Если ФайлыДляОтправки.Найти(ПодчиненныйФайл) <> Неопределено Тогда
				МассивОбъектовДО.Добавить(ПодчиненныйФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьСписокФайловИзМассива(ОбъектXDTO, МассивОбъектовДО, Правило, ПространствоИмен, ФорматСообщения, XDTOПодписиЭП);
	
	ОбъектXDTOТело.Expansion = СоздатьОбъект("ExpansionType", ПространствоИмен);
	ОбъектXDTOТело.Expansion.AnyData = СоздатьОбъект("CustomFields", ПространствоИмен);
	ОбъектXDTOТело.Expansion.exp_ver = "1.0";
	ОбъектXDTOТело.Expansion.organization = "1С";
	
	// добавим все ЭП документа
	//Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
	//	
	//	ПодписьЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(Документ.Ссылка);
	//		
	//	Пока ПодписьЭП.Следующий() Цикл
	//		
	//		XDTOПодписьЭП = СоздатьОбъект("SignatureType", ПространствоИмен);
	//		
	//		XDTOПодписьЭП.Signature = ПодписьЭП.Подпись.Получить();
	//		XDTOПодписьЭП.Certificate = ПодписьЭП.Сертификат.Получить();
	//		XDTOПодписьЭП.SignDate = ПодписьЭП.ДатаПодписи;
	//		XDTOПодписьЭП.CertificateSubject = ПодписьЭП.КомуВыданСертификат;
	//		XDTOПодписьЭП.Comment = ПодписьЭП.Комментарий;
	//		XDTOПодписьЭП.ObjectNumber = 0; // 0 - сам документ
	//		
	//		XDTOПодписиЭП.signatures.Добавить(XDTOПодписьЭП); 
	//		
	//	КонецЦикла;
	//	
	//	ОбъектXDTOТело.Expansion.AnyData.fields.Добавить(XDTOПодписиЭП);
	//	
	//КонецЕсли;	
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-
КонецФункции	

// Создать и записать документ ИсходящееСообщениеСВД
Функция СоздатьДокументИсходящееСообщениеСВД(Документ, Корреспондент, Организация, Транспорт, 
	ФорматСообщения, ИдентификационныйНомерСообщения, ВидСообщенияСВД, 
	КодОшибки = 0, ИдентификаторСессии = "") Экспорт
	
	ИсходящееСообщениеСВД = Документы.ИсходящееСообщениеСВД.СоздатьДокумент();
	
	ИсходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
	ИсходящееСообщениеСВД.ИдентификаторСообщения = ИдентификационныйНомерСообщения;
	ИсходящееСообщениеСВД.ИдентификаторСессии = ИдентификаторСессии;
	Если Не ЗначениеЗаполнено(ИсходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ИсходящееСообщениеСВД.ИдентификаторСессии = ИсходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
		
	ИсходящееСообщениеСВД.ВидСообщения = ВидСообщенияСВД;
	ИсходящееСообщениеСВД.Транспорт = Транспорт;
	ИсходящееСообщениеСВД.ФорматСообщения = ФорматСообщения;
	ИсходящееСообщениеСВД.Получатель = Корреспондент;
	ИсходящееСообщениеСВД.ОрганизацияОтправитель = Организация;
	ИсходящееСообщениеСВД.Документ = Документ;
	
	
	// если это не уведомление - запишем в историю
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент
			Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем, 
				ИдентификационныйНомерСообщения);		
		КонецЕсли;	
						
	КонецЕсли;		
	
	ИсходящееСообщениеСВД.Записать();
	Возврат ИсходящееСообщениеСВД.Ссылка;
	
КонецФункции	

// Сформировать подтверждение получения
Функция СформироватьПодтверждениеПолучения(Документ, ИдентификаторСообщения, Транспорт, Организация, 
		Контрагент, ВидСообщенияСВД, ОшибкиПодписи = Неопределено, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101', UIDДокументаВпередающейСистеме = Неопределено)	
	//МиСофт+	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Зона заголовка
	//МиСофт+
	ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолучения(ИдентификаторСообщения, Транспорт, 
		Организация, Контрагент, ВидСообщенияСВД, ОшибкиПодписи, КодОшибки, ТекстОшибки, РегистрационныйНомер, ДатаРегистрации, Документ);
	//МиСофт-		
		
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOЗаголовок);
	ЗаписьXML.Закрыть();
	
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД(Документ, Контрагент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидСообщенияСВД, КодОшибки, 
		ИдентификаторСообщения);
	
	// Добавить файл
	
	//МиСофт+
	ИмяВременногоФайла = ПолучитьФайлXMLДляЗаписи(ИмяВременногоФайла, ПолучитьПространствоИмен(Транспорт.ФорматСообщения)); 	
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, ПолучитьИмяДляЗаписиФайлаXML(ИсходящееСообщениеСВД));
	//МиСофт-
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	
КонецФункции	

//МиСофт
Функция СформироватьУведомление(Документ, СообщениеСВД, ВидУведомления, Ошибки)	
	//МиСофт+	
	
	Организация = СообщениеСВД.ОрганизацияПолучатель;
	Корреспондент = СообщениеСВД.КорреспондентОтправитель;
	Транспорт = ?(ТипЗнч(СообщениеСВД) = Тип("ДокументСсылка.ВходящееСообщениеСВД"), СообщениеСВД.ТранспортПолучения, СообщениеСВД.Транспорт);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(СообщениеСВД) = Тип("ДокументСсылка.ВходящееСообщениеСВД") Тогда
		Если ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(Ошибки.Количество() = 0, "", "б ошибке при")+ " доставке документа № """+Документ.ИсходящийНомер+""".";
			ТекстУведомления = "";
			Если ТипЗнч(СообщениеСВД.ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(СообщениеСВД.ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", СообщениеСВД.ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(СообщениеСВД.Ошибки.Количество() = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+""".";
			ТекстУведомления = ?(СообщениеСВД.ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ под № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", СообщениеСВД.ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		
	КонецЕсли;

	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт(ТемаСообщения, Транспорт);
	
	// Зона заголовка
	Если Корреспондент = Неопределено Тогда
		
	КонецЕсли;
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Организация, Корреспондент, Транспорт, ВидУведомления);
	
	ОбъектXDTOЗаголовок.Receiver.Добавить(СоздатьXDTOПолучатель(Корреспондент, Транспорт));
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен); 
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = СообщениеСВД.ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = Документ.ИсходящаяДата;
	ОбъектXDTO.__content = Документ.ИсходящийНомер;
	
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;
	
	Для Каждого Ошибка Из СообщениеСВД.Ошибки Цикл
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = Ошибка.Код;
		ОбъектXDTO.__content = "Документ """+Ошибка.Владелец+""" отклонен. " + Ошибка.Содержание;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
	КонецЦикла;
	
	Если ОбъектXDTOAcknowledgement.AckResult.Количество() = 0 Тогда
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = 0;
		ОбъектXDTO.__content = ТекстУведомления;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
	КонецЕсли;		
	
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;

	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOКонверт);
	ЗаписьXML.Закрыть();
	
	ЗаписатьXML_РБ(ИмяВременногоФайла);
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД(Документ, Корреспондент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидУведомления, 0, 
		СообщениеСВД.ИдентификаторСообщения);
	
	// Добавить файл            
	Если ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке ИЛИ ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке ИЛИ ВидУведомления = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, УникальныйИдентификаторСообщения+"_ack");
	КонецЕсли;
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	//МиСофт-
КонецФункции

// Обработчик регламентного задания ОтправкаСообщенийПоСВД
Процедура ОтправкаДокументовПоСВД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортыСВД.Ссылка
		|ИЗ
		|	Справочник.ТранспортыСВД КАК ТранспортыСВД
		|ГДЕ
		|	ТранспортыСВД.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Транспорт = Выборка.Ссылка;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ОтправитьСообщения(Транспорт);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик регламентного задания ПриемСообщенийПоСВД
Процедура ПриемДокументовПоСВД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТранспортыСВД.Ссылка
		|ИЗ
		|	Справочник.ТранспортыСВД КАК ТранспортыСВД
		|ГДЕ
		|	ТранспортыСВД.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Транспорт = Выборка.Ссылка;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.ПолучитьСообщения(Транспорт);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Создать Входящий документ из XDTO пакета
Функция СоздатьВходящийИзXDTO(ОбъектXDTOEnvelop, ПараметрыДокумента, Корреспондент, Организация, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	Отказ = Ложь;
	ОбъектXDTO = ОбъектXDTOEnvelop.Body.Document;

	ФорматСообщения = ПараметрыДокумента.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
	
	ЗаполнитьСсылочныйРеквизит(Документ.ВидДокумента, ОбъектXDTO.kind, "ВидДокумента", 
		Корреспондент, Организация);
	ЗаполнитьСсылочныйРеквизит(Документ.ГрифДоступа, ОбъектXDTO.Confident.__content, "ГрифДоступа", 
		Корреспондент, Организация);
	
	Документ.Заголовок = ОбъектXDTOEnvelop.subject;
	Если Не ЗначениеЗаполнено(Документ.Заголовок) Тогда
		Документ.Заголовок = "Без имени";
	КонецЕсли;	
	
	Документ.Содержание = ОбъектXDTO.annotation;
	Документ.КоличествоЛистов = ОбъектXDTO.pages;
	
	Документ.ИсходящийНомер = ОбъектXDTO.RegNumber.__content;
	Документ.ИсходящаяДата = ОбъектXDTO.RegNumber.regdate;
	
	Документ.СпособПолучения = Справочники.СпособыДоставки.СВД;
	
	Если ОбъектXDTOEnvelop.Header.Receiver.Количество() > 0 Тогда
		
		АдресатXDTO = ОбъектXDTOEnvelop.Header.Receiver[0];
		
		Если АдресатXDTO.Organization <> Неопределено Тогда
			
			Документ.Организация = Организация;
			
			Если АдресатXDTO.Organization.OfficialPerson.Количество() > 0 Тогда
				
				ДолжностноеЛицо = АдресатXDTO.Organization.OfficialPerson[0];
				
				ЗаполнитьСсылочныйРеквизит(Документ.Адресат, ДолжностноеЛицо.Name.__content, "Адресат", 
					Корреспондент, Организация);
				
				Если ДолжностноеЛицо.Official.Количество() > 0 Тогда
					
					Если ДолжностноеЛицо.Official[0].department <> Неопределено Тогда
						ЗаполнитьСсылочныйРеквизит(Документ.Подразделение, ДолжностноеЛицо.Official[0].department, 
							"Подразделение", Корреспондент, Организация);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Validator.Количество() > 0 Тогда
		ПодписалXDTO = ОбъектXDTO.Validator[0];
		ЗаполнитьСсылочныйРеквизит(Документ.Подписал, ПодписалXDTO.PrivatePersonWithSign.Name.__content, 
			"Подписал", Корреспондент, Организация);
	КонецЕсли;	
	
	Документ.Отправитель = Корреспондент;
	
	ЗаполнитьСсылочныйРеквизит(Документ.ВопросДеятельности, "", "ВопросДеятельности", 
		Корреспондент, Организация);
		
	Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);	
	
	Если ОбъектXDTOEnvelop.Header.msg_type = 3 Тогда // Документ-ответ
		
		ПараметрыДокумента.Вставить("ДокументОтвет", Истина);
		
		Для Каждого СсылкаНаДокументXDTO Из ОбъектXDTO.Referred Цикл
			
			Если СсылкаНаДокументXDTO.RegNumber <> Неопределено Тогда
				РегистрационныйНомер = СсылкаНаДокументXDTO.RegNumber.__content;
				ДатаРегистрации = СсылкаНаДокументXDTO.RegNumber.regdate;
				СсылкаНаДокумент = НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, ДатаРегистрации);
				
				Если СсылкаНаДокумент <> Неопределено Тогда
					
					Попытка
						// Установка связи
						СвязиДокументов.УстановитьСвязь(Документ.Ссылка, Неопределено, СсылкаНаДокумент, 
							Справочники.ТипыСвязей.ПолученВОтветНа);
					Исключение
							
						ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание связи для документа, поступившего по СВД'"), 
							УровеньЖурналаРегистрации.Ошибка, , Документ.Ссылка,
							ОписаниеОшибки);
							
					КонецПопытки;	
						
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Документ.Ссылка) Тогда
		Документ.Записать();
	КонецЕсли; 
	
	МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если Не МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
		МенеджерЗаписиРегистра.Проверен = Ложь;
		МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;
	
	Возврат Документ.Ссылка;
	
	//МиСофт-
КонецФункции

// Проверяет тип объекта XDTO
// Возвращает Истина если объект является объектом указанного типа и Ложь в
// противном случае
Функция ПроверитьТип(ОбъектXDTO, Тип, ПространствоИмен) Экспорт
	
	Возврат (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, Тип));
	
КонецФункции	

Функция НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, ДатаРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИсходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.РегистрационныйНомер = &РегистрационныйНомер
		|	И ИсходящиеДокументы.ДатаРегистрации МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации";
		
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);	
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", НачалоДня(ДатаРегистрации));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", КонецДня(ДатаРегистрации));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ДобавитьФайл(ДокументСсылка, ОбъектXDTOФайл, ДвоичныеДанныеФайла = Неопределено)
	//МиСофт+
	
	Размер = ОбъектXDTOФайл.Data.__content.Размер();
	//ОбъектXDTOФайл.Data.referenceid
	Если Размер > 0 Тогда
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ОбъектXDTOФайл.Data.__content);
	Иначе
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	КонецЕсли;
	АдресВременногоХранилищаТекста = "";
	ВебКлиент = Истина; // чтобы в регистр файлов в локальном кеше не вносить изменения
	
	ИмяБезРасширения = "";
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ОбъектXDTOФайл.name);
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрЗаменить(ОбъектXDTOФайл.name, "." + Расширение, "");
	КонецЕсли;
	
	ДатаСоздания = ТекущаяДатаСеанса();
	
	// Создадим карточку Файла в БД
	ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
		ДокументСсылка,
		ИмяБезРасширения,
		//ОбъектXDTOФайл.type,
		Расширение,
		ДатаСоздания,
		ДатаСоздания,
		Размер,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		ВебКлиент);
		
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
		И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ОбъектXDTOФайл.type) Тогда 
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(ФайлСсылка, ДокументСсылка);
	КонецЕсли;
		
	Возврат ФайлСсылка;	
	//МиСофт-
КонецФункции

Функция  ПолучитьXDTO_РБ(ФайлXML, ПространствоИмен, ЭтоНовоеСообщение = Истина) Экспорт
	//МиСофт+
	ПутьКФайлуXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлу, ФайлXML);
	//ПутьКФайлуXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлуXML, ФайлXML);
	//ИмяФайлаXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ИмяФайлаXML, "");
	ИмяФайлаXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ИмяФайла, "");
	
	ИмяВременногоФайла = ПолучитьФайлXMLДляЧтения(ПутьКФайлуXML, ПространствоИмен);

	ЧтениеXML = Новый ЧтениеXML;	
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
	Исключение
		ОбъектXDTO = Неопределено;
		ФайлXML.СодержаниеОшибки = ИнформацияОбОшибке().Причина.Описание;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ОбъектXDTO;
	//МиСофт-
КонецФункции

Процедура ЗаписатьXML_РБ(ПутьКФайлуXML) Экспорт
	//МиСофт+
	ЧтениеФайла = Новый ТекстовыйДокумент();
	ЧтениеФайла.Прочитать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	ЗаписьФайла = Новый ТекстовыйДокумент();          
	Для ТекущаяСтрока=1 По ЧтениеФайла.КоличествоСтрок() Цикл
		Стр = ЧтениеФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если ТекущаяСтрока = 1 И Найти(Стр, "<?xml") = 0 Тогда
			ЗаписьФайла.ДобавитьСтроку("<?xml version=""1.0"" encoding=""utf-8""?>");
		КонецЕсли;
		Если Найти(Стр, "<Envelop")>0 Тогда
			Стр = СтрЗаменить(Стр, " xmlns='http://www.1c.ru/medosignedby'", "");
			Стр = СтрЗаменить(Стр, " xmlns=""http://www.1c.ru/medosignedby""", "");
			Стр = СтрЗаменить(Стр, " xmlns:xs='http://www.w3.org/2001/XMLSchema'", "");
			Стр = СтрЗаменить(Стр, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
			Стр = СтрЗаменить(Стр, " xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'", "");
			Стр = СтрЗаменить(Стр, " xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "");
		КонецЕсли;
		ЗаписьФайла.ДобавитьСтроку(Стр);
	КонецЦикла;
	ЗаписьФайла.Записать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	//МиСофт-
КонецПроцедуры

//МиСофт
Процедура ЗаполнитьПараметрыДокументаИзЗаголовка(Заголовок, ЗаполняемыеПараметры)         
	//МиСофт+
	ЗаполняемыеПараметры.Вставить("Отправитель", ПолучитьКорреспондентаПоНаименованиюВСВД(ВРег(Заголовок.Sender.id), ЗаполняемыеПараметры.Транспорт));
	Для Каждого Получатель Из Заголовок.Receiver Цикл
		ЗаполняемыеПараметры.Вставить("Организация", ПолучитьОрганизациюПоНаименованиюВСВД(ВРег(Получатель.id), ЗаполняемыеПараметры.Транспорт));
		Если ЗначениеЗаполнено(ЗаполняемыеПараметры.Организация) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Заголовок.msg_acknow = 0 Тогда
		НеобходимостьПосылкиУведомления = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	ИначеЕсли Заголовок.msg_acknow = 1 Тогда
		НеобходимостьПосылкиУведомления = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
	ИначеЕсли Заголовок.msg_acknow = 2 Тогда
		НеобходимостьПосылкиУведомления = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
	КонецЕсли;
	ЗаполняемыеПараметры.Вставить("НеобходимостьПосылкиУведомления", НеобходимостьПосылкиУведомления);
	//МиСофт-
КонецПроцедуры

// Загрузить Входящий документ из пакета в файле XML
Функция ЗагрузитьДокументИзXML(ФайлXML, ПараметрыДокумента, Транспорт,
	ВходящееСообщениеСВД, ТаблицаВложенний = Неопределено, ИмяКорневогоЭлемента) Экспорт
	                                        
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTO = ПолучитьXDTO_РБ(ФайлXML, ПространствоИмен);
	
	ПараметрыДокумента.Вставить("ПространствоИмен", ПространствоИмен);
	Дата = ОбъектXDTO.dtstamp;
	Символ = Сред(Дата, 20, 1);
	
	Если ОбъектXDTO = Неопределено ИЛИ Символ = "T" Тогда
		Документ = Неопределено;
		ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки);
	Иначе
		Документ = ЗагрузитьДокументИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД);
	КонецЕсли;
	
	Возврат Документ;
	//МиСофт-
	
КонецФункции	

Процедура ЗаполнитьПараметрыЗаголовкаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПараметрыДокумента.Вставить("ФорматСообщения", ФорматСообщения);
	
	Заголовок = ОбъектXDTO.Header;                              
	
	// Отправитель - найти по from_organization
	Корреспондент = ПолучитьКорреспондентаПоНаименованиюВСВД(Заголовок.Sender.name, Транспорт);
	ПараметрыДокумента.Вставить("Отправитель", Корреспондент);
	ПараметрыДокумента.Вставить("Организация", Заголовок.Receiver[0].name);
	ПараметрыДокумента.Вставить("ДатаФормирования", ОбъектXDTO.dtstamp);
	
	ПараметрыДокумента.Вставить("ИдентификационныйНомерСообщения", ОбъектXDTO.msg_id);
	
	ПодразделениеОтправитель = "";
	ПараметрыДокумента.Вставить("ПодразделениеОтправитель", ПодразделениеОтправитель);
	
	ПодразделениеПолучатель = "";
	ПараметрыДокумента.Вставить("ПодразделениеПолучатель", ПодразделениеПолучатель);
	
	ПользовательОтправитель = "";
	ПараметрыДокумента.Вставить("ПользовательОтправитель", ПользовательОтправитель);
	
	ПользовательПолучатель = "";
	ПараметрыДокумента.Вставить("ПользовательПолучатель", ПользовательПолучатель);
	
	НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	Если Заголовок.msg_acknow = 0 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	ИначеЕсли Заголовок.msg_acknow = 1 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
	ИначеЕсли Заголовок.msg_acknow = 2 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", НеобходимостьПосылкиУведомлений);
	//МиСофт-
КонецПроцедуры	

Процедура ЗаполнитьПараметрыДокументаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	
	ПараметрыДокумента.Вставить("ТипПоступившегоДокумента", ОбъектXDTO.Document.type);
	ПараметрыДокумента.Вставить("ВидПоступившегоДокумента", ОбъектXDTO.Document.kind);
	
КонецПроцедуры	

// Загрузить Входящий документ из пакета
Функция ЗагрузитьДокументИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	ЗаполнитьПараметрыЗаголовкаИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	Организация = ПолучитьОрганизациюПоНаименованиюВСВД(ПараметрыДокумента.Организация, Транспорт);
	
	ПараметрыДокумента.Вставить("Организация", Организация);
	
	// если это документ, а не уведомление
	Если ОбъектXDTO.Header.msg_type <> 0 Тогда
		
		Документ = Неопределено;
	
		ЗаполнитьПараметрыДокументаИзXDTO(ОбъектXDTO.Body, ПараметрыДокумента, Транспорт);
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		Если ОбъектXDTO.Body.Document.type = 0 Или ОбъектXDTO.Body.Document.type = 1 Тогда // 0 - исходящий, 1 - входящий, 2 - внутренний
			
			ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
			
			//Проверка подписей вложений
			МассивСозданныхФайлов = Новый Массив;
			
			Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.Body.Document.DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOФайл.Data.__content) Тогда
					ФайлСсылка = ДобавитьФайл(ВходящееСообщениеСВД.Ссылка, ОбъектXDTOФайл);
				Иначе
					Если МассивВложений <> Неопределено Тогда
						Для Каждого Вложение Из МассивВложений Цикл
							Если Найти(Вложение.Файл, ОбъектXDTOФайл.Data.referenceid) Тогда
								ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Вложение.ИмяВременногоФайла);
								ФайлСсылка = ДобавитьФайл(ВходящееСообщениеСВД.Ссылка, ОбъектXDTOФайл, ДвоичныеДанныеФайла);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли; 
				КонецЕсли;
				
				МассивСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOФайл.Signature Цикл
						
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						//МиСофт+
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						//МиСофт-
						//ДанныеПодписи.ДвоичныеДанныеСертификата = ПодписьXDTO.Certificate;
						//ДанныеПодписи.Комментарий = ПодписьXDTO.Comment;
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Нет ни одной подписи.";
						МассивОшибок = Новый Массив;
						МассивОшибок.Добавить(ОшибкаПодписи);
						ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;	 
			
			ПараметрыДокумента.Вставить("Файлы", МассивСозданныхФайлов);
			
			Если Не ПараметрыДокумента.Свойство("ОшибкиПодписи") Тогда
				Документ = СоздатьВходящийИзXDTO(ОбъектXDTO, ПараметрыДокумента, 
					ПараметрыДокумента.Отправитель, Организация, МассивВложений);
			КонецЕсли;
								
		КонецЕсли;
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если ОбъектXDTO.Header.msg_acknow = 2 Тогда
			
			//СформироватьПодтверждениеПолучения(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				//Транспорт, Организация, 
				//ПараметрыДокумента.КорреспондентОтправитель,
				//Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				
		КонецЕсли;	
			
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Body.Acknowledgement.msg_id;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СообщениеСВД, "Документ");
			
			//МиСофт+
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Body.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
							ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
								Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
								
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
												
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.Отправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
						
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				
				СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
				ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				
			КонецЕсли;		
			//МиСофт-
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, ТекстОшибки);
					
			КонецЕсли;
			
		КонецЕсли;		

	КонецЕсли;

	Возврат Документ;
	//МиСофт-
КонецФункции	

Функция НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.Ссылка
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСессии";
		
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

Функция НайтиСообщениеСВДПоИдентификатору(ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщенияСВД.Ссылка,
		|	СообщенияСВД.Дата КАК Дата
		|ИЗ
		|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
		|ГДЕ
		|	СообщенияСВД.ИдентификаторСообщения = &ИдентификаторСессии
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

//МиСофт
Функция ПеревестиИмяСвойства(ИмяСвойства)
	//МиСофт+
	Результат = "";
	
	Если ИмяСвойства = "inn" Тогда
		Возврат "ИНН";
	ИначеЕсли ИмяСвойства = "fullname" Тогда
		Возврат "ПолноеНаименование";
	ИначеЕсли ИмяСвойства = "shortname" Тогда
		Возврат "Наименование";
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ИмяСвойства = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	//МиСофт-
КонецФункции

//МиСофт
Функция ПривестиЗначениеПеречисления(Свойство, Владелец = Неопределено)
	
	Результат = Неопределено;
	
	//Значение = 1 для рабочего телефона;
	//Значение = 2 для домашнего телефона;
	//Значение = 3 для мобильного телефона;
	//Значение = 4 для факса;
	//Значение = 5 для адреса электронной почты (email);
	//Значение = 6 для адреса web-сайта (страницы);
	//Значение = 0 для прочего

	
	Если Свойство = "Econtact1" Или Свойство = "Econtact2" Или Свойство = "Econtact3" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Если Владелец = "Корреспондент" Тогда
			Результат.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента);
		Иначе
			Результат.Вставить("Вид", ?(Свойство = "Econtact3", Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица));
		КонецЕсли;
		
	ИначеЕсли Свойство = "Econtact4" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Факс);
		Если Владелец = "Корреспондент" Тогда
			Результат.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФаксКорреспондента);
		Иначе
			
		КонецЕсли;

		
	ИначеЕсли Свойство = "Econtact5" Тогда
		Результат = Новый Структура;
		Результат.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если Владелец = "Корреспондент" Тогда
			Результат.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКорреспондента);
		Иначе
			Результат.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		КонецЕсли;
		
	ИначеЕсли Свойство = Неопределено Тогда
		Результат = Неопределено;
		
	ИначеЕсли Свойство = Неопределено Тогда
		Результат = Неопределено;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//МиСофт
Процедура ЗаполнитьКонтактнуюИнформацию(ТЧКонтактнаяИнформация, ОбъектXDTO)
	//МиСофт+
	Если ТипЗнч(ТЧКонтактнаяИнформация) = Тип("СправочникТабличнаяЧасть.Корреспонденты.КонтактнаяИнформация") Тогда
		Владелец = "Корреспондент";
	ИначеЕсли ТипЗнч(ТЧКонтактнаяИнформация) = Тип("СправочникТабличнаяЧасть.КонтактныеЛица.КонтактнаяИнформация") Тогда
		Владелец = "КонтактноеЛицо";
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Контакт Из ОбъектXDTO.Econtact Цикл
		СтрокаКИ = ТЧКонтактнаяИнформация.Добавить();
		Для Каждого ПриведенноеЗначение Из ПривестиЗначениеПеречисления("Econtact"+Контакт.type, Владелец) Цикл
			СтрокаКИ[ПриведенноеЗначение.Ключ] = ПриведенноеЗначение.Значение;
		КонецЦикла;
		СтрокаКИ.Представление = Контакт.__content;
	КонецЦикла;
	
	Если Не ОбъектXDTO.Address = Неопределено Тогда
		СтрокаКИ = ТЧКонтактнаяИнформация.Добавить();
		СтрокаКИ.Представление = ОбъектXDTO.Address.__content;
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента;
	КонецЕсли;
	//МиСофт-
КонецПроцедуры

//МиСофт
Функция НайтиКорреспондентаИзСправочникаПоОбъектуXDTO(КорреспондентXDTO, ДополнительныеДанные = Неопределено)
	
	Результат = Справочники.Корреспонденты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Корреспонденты.Ссылка
	|ИЗ
	|	Справочник.Корреспонденты КАК Корреспонденты
	|ГДЕ
	|	(Корреспонденты.ИНН = &ИНН
	|			ИЛИ Корреспонденты.Наименование = &Наименование)";
	
	Запрос.УстановитьПараметр("ИНН", ?(КорреспондентXDTO.inn = Неопределено, "", КорреспондентXDTO.inn));
	Запрос.УстановитьПараметр("Наименование", КорреспондентXDTO.shortname);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Результат = РезультатЗапроса.Ссылка;
	Иначе
		
		КорреспондентОбъект = Справочники.Корреспонденты.СоздатьЭлемент();
		
		Для Каждого Свойство Из КорреспондентXDTO.Свойства() Цикл
			
			Если Не КорреспондентXDTO[Свойство.Имя] = Неопределено Тогда
				
				Реквизит = ПеревестиИмяСвойства(Свойство.Имя);
				
				Если ЗначениеЗаполнено(Реквизит) Тогда
					КорреспондентОбъект[Реквизит] = КорреспондентXDTO[Свойство.Имя]; 
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			Для Каждого Данные Из ДополнительныеДанные Цикл
				КорреспондентОбъект[Данные.Ключ] = Данные.Значение;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьКонтактнуюИнформацию(КорреспондентОбъект.КонтактнаяИнформация, КорреспондентXDTO);
		КорреспондентОбъект.Записать();
		
		Результат = КорреспондентОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//МиСофт
Функция НайтиКонтактноеЛицоИзСправочникаПоОбъектуXDTO(КонтактноеЛицоXDTO, Корреспондент)
	//МиСофт+
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И КонтактныеЛица.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Корреспондент);
	Запрос.УстановитьПараметр("Наименование", КонтактноеЛицоXDTO.Name.__content);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		 Результат = РезультатЗапроса.Ссылка;
	Иначе
		 КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		 КонтактноеЛицо.Владелец = Корреспондент;
		 КонтактноеЛицо.Наименование = КонтактноеЛицоXDTO.Name.__content;
		 
		 ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо.КонтактнаяИнформация, КонтактноеЛицоXDTO);
		 
		 КонтактноеЛицо.Записать();
		 
		 Результат = КонтактноеЛицо.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	//МиСофт-
КонецФункции

//МиСофт
Функция ПреобразоватьКорреспондентовИзXDTO(СписокXDTO, Корреспондент = Неопределено)
	
	РезультатМассив = Новый Массив;
	
	Для Каждого ОбъектXDTO Из СписокXDTO Цикл
		
		Результат = Новый Структура;
		ДополнительныеДанные = Новый Структура;
		
		КонтактныеЛицаXDTO = Новый Массив;
		
		Если НЕ ОбъектXDTO.Свойства().Получить("OrganizationWithSign") = Неопределено И Не ОбъектXDTO.OrganizationWithSign = Неопределено Тогда
			КорреспондентXDTO = ОбъектXDTO.OrganizationWithSign;
			КонтактныеЛицаXDTO = ОбъектXDTO.OrganizationWithSign.OfficialPersonWithSign;
			ДополнительныеДанные.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ИначеЕсли НЕ ОбъектXDTO.Свойства().Получить("OfficialPersonWithSign") = Неопределено И Не ОбъектXDTO.OfficialPersonWithSign = Неопределено Тогда
			КорреспондентXDTO = ОбъектXDTO.OfficialPersonWithSign;
			ДополнительныеДанные.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
		КонецЕсли;
		
		Результат.Вставить("Корреспондент", 
		?(КорреспондентXDTO = Неопределено ИЛИ КорреспондентXDTO.fullname = Корреспондент.Наименование ИЛИ КорреспондентXDTO.organization_string = Корреспондент.ПолноеНаименование,
		Корреспондент,
		НайтиКорреспондентаИзСправочникаПоОбъектуXDTO(КорреспондентXDTO, ДополнительныеДанные)));
		Для Каждого КонтактноеЛицоXDTO Из КонтактныеЛицаXDTO Цикл
			КонтактноеЛицо = НайтиКонтактноеЛицоИзСправочникаПоОбъектуXDTO(КонтактноеЛицоXDTO, Результат.Корреспондент);
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				Результат.Вставить("КонтактноеЛицо", КонтактноеЛицо);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		РезультатМассив.Добавить(Результат);
	КонецЦикла;

	Возврат РезультатМассив;
		
КонецФункции

//МиСофт
Процедура ЗаполнитьИзТегаДокумент(ТелоДокумент, ЗаполняемыеПараметры)
	
	Документ = Новый Структура;
	
	ФайлыДокумента = Новый Массив;
	ИнформацияОДокументеМассив = Новый Массив;
	АвторыДокумента = Новый Массив;
	Валидаторы = Новый Массив;
	
	Для Каждого ФайлXDTO Из ТелоДокумент.DocTransfer Цикл
		ФайлДокумента = Новый Структура("Ссылка, Подписи, Ошибки");
		Если ЗначениеЗаполнено(ФайлXDTO.Data.__content) Тогда
			ФайлДокумента.Ссылка = ДобавитьФайл(ЗаполняемыеПараметры.ВходящееСообщениеСВД.Ссылка, ФайлXDTO);
		Иначе
			Если ЗаполняемыеПараметры.Свойство("МассивВложений") Тогда
				Для Каждого Вложение Из ЗаполняемыеПараметры.МассивВложений Цикл
					Если Найти(Вложение.Файл, ФайлXDTO.Data.referenceid) Тогда
						ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Вложение.ИмяВременногоФайла);
						ФайлДокумента.Ссылка = ДобавитьФайл(ЗаполняемыеПараметры.ВходящееСообщениеСВД.Ссылка, ФайлXDTO, ДвоичныеДанныеФайла);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
			
		// читаем подписи ЭП
		Если ЗаполняемыеПараметры.Транспорт.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
			
			Подписи = Новый Массив;
			
			Для Каждого ПодписьXDTO Из ФайлXDTO.Signature Цикл
				
				ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
				
				ДанныеПодписи.ОбъектСсылка = ФайлДокумента.Ссылка;
				
				//МиСофт+
				КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
				КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
				ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
				//МиСофт-
				ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
				ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
				ДанныеПодписи.ИмяФайлаПодписи = "";
				ДанныеПодписи.Отпечаток = "";
				ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
				
				Подписи.Добавить(ДанныеПодписи);
				
				РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(Подписи, ФайлДокумента.Ссылка);    
				
				//Если Не ПодписьЭПВерна(ЗаполняемыеПараметры.ВходящееСообщениеСВД) Тогда
				////	Документ.Вставить("СоздатьДокумент", Ложь);
				//КонецЕсли;
			
			КонецЦикла;
			
			ФайлДокумента.Вставить("Подписи", Подписи);
					
			Если ФайлДокумента.Подписи.Количество()=0 Тогда
				//ФайлДокумента.Вставить("Ошибки", МассивОшибок);
				ОбъектВходящегоСообщения = ЗаполняемыеПараметры.ВходящееСообщениеСВД.ПолучитьОбъект();
				НоваяСтрокаОшибок = ОбъектВходящегоСообщения.Ошибки.Добавить();
				НоваяСтрокаОшибок.Владелец = ФайлДокумента.Ссылка.Наименование+"."+ФайлДокумента.Ссылка.ТекущаяВерсияРасширение;
				НоваяСтрокаОшибок.Код = -22;
				НоваяСтрокаОшибок.Содержание = "нет ни одной подписи";
				ОбъектВходящегоСообщения.Записать();
			КонецЕсли;                                                                                                                        
			
		КонецЕсли;
				                                                                  
		ФайлыДокумента.Добавить(ФайлДокумента);
		
	КонецЦикла;
	
	Для Каждого ИнформацияОДокументеXDTO Из ТелоДокумент.DocNumber Цикл
		ИнформацияОДокументе = Новый Структура;
		ИнформацияОДокументеМассив.Добавить(ИнформацияОДокументе);
	КонецЦикла;
	
	АвторыДокумента = ПреобразоватьКорреспондентовИзXDTO(ТелоДокумент.Author, ЗаполняемыеПараметры.Отправитель);
	Если АвторыДокумента.Количество()>0 Тогда
		Если Не ЗаполняемыеПараметры.Отправитель = АвторыДокумента[0].Корреспондент Тогда
			Документ.Вставить("Переадресовавший", АвторыДокумента[0].Корреспондент);
			Если АвторыДокумента[0].Свойство("КонтактноеЛицо") Тогда
				Документ.Вставить("КонтактноеЛицоПереадресовавшего", АвторыДокумента[0].КонтактноеЛицо);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Подписавшие = ПреобразоватьКорреспондентовИзXDTO(ТелоДокумент.Validator, ЗаполняемыеПараметры.Отправитель);
	Если Подписавшие.Количество()>0 Тогда
		Если ЗаполняемыеПараметры.Отправитель = Подписавшие[0].Корреспондент Тогда
			Документ.Вставить("Отправитель", Подписавшие[0].Корреспондент);
			Если Подписавшие[0].Свойство("КонтактноеЛицо") Тогда
				Документ.Вставить("Подписал", Подписавшие[0].КонтактноеЛицо);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого СсылкаНаДокументXDTO Из ТелоДокумент.Referred Цикл
		
		Если СсылкаНаДокументXDTO.RegNumber <> Неопределено Тогда
			
			ИсходящийДокумент = Новый Структура;
			
			ИсходящийДокумент.Вставить("РегистрационныйНомер", СсылкаНаДокументXDTO.RegNumber.__content);
			ИсходящийДокумент.Вставить("ДатаРегистрации", СсылкаНаДокументXDTO.RegNumber.regdate);
			ИсходящийДокумент.Вставить("Ссылка", НайтиИсходящийДокументПоРегистрационномуНомеру(ИсходящийДокумент.РегистрационныйНомер, ИсходящийДокумент.ДатаРегистрации));
			
			МассивСсылок.Добавить(ИсходящийДокумент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Документ.Вставить("Отправитель", ЗаполняемыеПараметры.Отправитель);
	Документ.Вставить("Организация", ЗаполняемыеПараметры.Организация);
	Документ.Вставить("ФайлыДокумента", ФайлыДокумента);
	Документ.Вставить("АвторДокумента", АвторыДокумента[0]);
	Документ.Вставить("ИнформацияОДокументе", ИнформацияОДокументеМассив);
	Документ.Вставить("ГрифДокумента", ТелоДокумент.Confident.__content);
	Документ.Вставить("ИсходящийНомер", ТелоДокумент.RegNumber.__content);
	Документ.Вставить("ИсходящаяДата", ТелоДокумент.RegNumber.regdate);
	Документ.Вставить("Валидаторы", Валидаторы);
	Документ.Вставить("ВопросДеятельности", "");
	
	Документ.Вставить("ИдентификационныйНомер", ТелоДокумент.idnumber);
	Документ.Вставить("Заголовок", ?(ТелоДокумент.title = Неопределено ИЛИ ТелоДокумент.title = "", ЗаполняемыеПараметры.Сообщение.Заголовок, ТелоДокумент.title));
	Документ.Вставить("КоличествоЛистов", ?(ТелоДокумент.pages = Неопределено ИЛИ ТелоДокумент.pages = "", 0, ТелоДокумент.pages));
	Документ.Вставить("ВидДокумента", ТелоДокумент.kind);
	Документ.Вставить("ТипДокумента", ?(ТелоДокумент.type = 2, "ВнутренниеДокументы", "ВходящиеДокументы"));
	Документ.Вставить("Содержание", ?(ТелоДокумент.annotation = Неопределено, "", ТелоДокумент.annotation));
	Документ.Вставить("МассивСсылок", МассивСсылок);
	
	ЗаполняемыеПараметры.Вставить("Документ", Документ);
	
КонецПроцедуры

Процедура ЗаполнитьИзТегаУведомление(ТелоУведомление, ЗаполняемыеПараметры)
	
	Уведомление = Новый Структура;
	ТекстыУведомления = Новый Массив;
	ТекстУведомления = Новый Структура;
	
	Если НЕ ТелоУведомление.AckResult = Неопределено Тогда
		Для Каждого ОбъектXDTO Из ТелоУведомление.AckResult Цикл
			ТекстУведомления.Вставить("КодОшибки", ОбъектXDTO.errorcode);
			ТекстУведомления.Вставить("Содержание", ОбъектXDTO.__content);
			ТекстыУведомления.Добавить(ТекстУведомления);
		КонецЦикла;
	КонецЕсли;
		
	Уведомление.Вставить("ТекстыУведомления", ТекстыУведомления);
	Если Не ТелоУведомление.RegNumber = Неопределено Тогда
		Уведомление.Вставить("ИсходящийНомер", ТелоУведомление.RegNumber.__content);
		Уведомление.Вставить("ИсходящаяДата", ТелоУведомление.RegNumber.regdate);
	КонецЕсли;
	
	ЗаполняемыеПараметры.Вставить("Уведомление", Уведомление);
	
КонецПроцедуры

//МиСофт
Процедура ЗаполнитьПараметрыДокументаИзТела(Тело, ЗаполняемыеПараметры)
	Если НЕ Тело.Document = Неопределено Тогда
		ЗаполнитьИзТегаДокумент(Тело.Document, ЗаполняемыеПараметры);
	ИначеЕсли НЕ Тело.Acknowledgement = Неопределено Тогда
		ЗаполнитьИзТегаУведомление(Тело.Acknowledgement, ЗаполняемыеПараметры);
	КонецЕсли;
КонецПроцедуры

//МиСофт
Функция СоздатьДокумент(ПараметрыВходящегоСообщения)
	Если ПараметрыВходящегоСообщения.Документ.Свойство("ТипДокумента") Тогда
		ПараметрыДокумента = ПараметрыВходящегоСообщения.Документ;
		Документ = Справочники[ПараметрыДокумента.ТипДокумента].СоздатьЭлемент();
		РеквизитыДокумента = Метаданные.Справочники[ПараметрыДокумента.ТипДокумента].Реквизиты;
		СсылочныеРеквизиты = Новый СписокЗначений;
		СсылочныеРеквизиты.Добавить("ГрифДоступа");
		СсылочныеРеквизиты.Добавить("ВидДокумента");
		СсылочныеРеквизиты.Добавить("ВопросДеятельности");
		Для Каждого СвойствоПараметра Из ПараметрыДокумента Цикл
			ТекущийРеквизит = РеквизитыДокумента.Найти(СвойствоПараметра.Ключ);
			Если Не ТекущийРеквизит = Неопределено Тогда
				Если ТекущийРеквизит.Тип.СодержитТип(ТипЗнч(СвойствоПараметра.Значение)) Тогда
					Документ[ТекущийРеквизит.Имя] = СвойствоПараметра.Значение;
				ИначеЕсли Не СсылочныеРеквизиты.НайтиПоЗначению(ТекущийРеквизит.Имя) = Неопределено Тогда
					ЗаполнитьСсылочныйРеквизит(Документ[ТекущийРеквизит.Имя], ПараметрыДокумента[ТекущийРеквизит.Имя], ТекущийРеквизит.Имя, 
						ПараметрыДокумента.Отправитель, ПараметрыДокумента.Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Документ.ДатаСоздания = ТекущаяДата();
		Документ.СпособПолучения = Справочники.СпособыДоставки.СВД;
		Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);
		Документ.Записать();
		
		//Файлы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
		Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ссылка);
		ФайлыВходящегоДокументаСВД = Запрос.Выполнить().Выгрузить();
		Для Каждого Файл Из ФайлыВходящегоДокументаСВД Цикл
			ОбъектФайла = Файл.Ссылка.ПолучитьОбъект();
			ОбъектФайла.ВладелецФайла = Документ.Ссылка;
			ОбъектФайла.Записать();
		КонецЦикла;
		Документ = Документ.Ссылка;
		
		Если ПараметрыВходящегоСообщения.Свойство("ЯвляетсяОтветом") Тогда // Документ-ответ
			Для Каждого ИсходящийДокумент Из ПараметрыДокумента.МассивСсылок Цикл
				Если ИсходящийДокумент.Ссылка <> Неопределено Тогда
					
					Попытка
						// Установка связи
						СвязиДокументов.УстановитьСвязь(Документ, Неопределено, ИсходящийДокумент.Ссылка, 
						Справочники.ТипыСвязей.ПолученВОтветНа);
					Исключение
						
						ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание связи для документа, поступившего по СВД'"), 
						УровеньЖурналаРегистрации.Ошибка, , Документ.Ссылка,
						ОписаниеОшибки);
						
					КонецПопытки;	
					
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
		
		МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Объект = Документ;
		МенеджерЗаписиРегистра.Прочитать();
		Если Не МенеджерЗаписиРегистра.Выбран() Тогда
			МенеджерЗаписиРегистра.Объект = Документ;
			МенеджерЗаписиРегистра.Проверен = Ложь;
			МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
			МенеджерЗаписиРегистра.Записать();
		КонецЕсли;		
		
		ПараметрыВходящегоСообщения.Документ = Документ;
		
	Иначе
		Документ = Неопределено;
	КонецЕсли;
	
	// Запись информации о том, что документ получен по СВД.
	МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Документ;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Объект = Документ;
	КонецЕсли;
	МенеджерЗаписи.ПолученПоСВД = Истина;
	
	Если ПараметрыДокумента.Свойство("ЕстьПодписиЭП") И ПараметрыДокумента.ЕстьПодписиЭП Тогда
		
		МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена;
		
		ВыполнятьПроверкуЭПНаСервере = ПолучитьВыполнятьПроверкуЭПНаСервере();
		Если ВыполнятьПроверкуЭПНаСервере Тогда
			
			ЭПВерна = ПодписьЭПВерна(Документ);
			Если ЭПВерна Тогда
				МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьДействительна;
			Иначе	
				МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНедействительна;
				ПодписьЭПНеверна = Истина;
			КонецЕсли;	
			
			МенеджерЗаписи.ДатаПроверкиЭП = ТекущаяДатаСеанса();
			МенеджерЗаписи.СостояниеСВД = Справочники.ВидыСостоянийДокументовВСВД.Новый;
			
		КонецЕсли;			
		                          
	Иначе	
		МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет;
	КонецЕсли;	
	
	МенеджерЗаписи.Записать();
	
	Возврат Документ;
КонецФункции

//МиСофт
Процедура ЗаполнитьВходящееСообщениеСВД(ПараметрыДокумента)
	ОбъектДокумента = ПараметрыДокумента.ВходящееСообщениеСВД.ПолучитьОбъект();
	ОбъектДокумента.ВидСообщения = ПараметрыДокумента.ВидСообщенияСВД;
	//ОбъектДокумента.ДатаФормирования = ПараметрыДокумента.ДатаФормирования;
	ОбъектДокумента.ДатаФормирования = ПараметрыДокумента.Сообщение.ДатаОтправки;
	ОбъектДокумента.Документ = ?(ПараметрыДокумента.Свойство("Документ") И ТипЗнч(ПараметрыДокумента.Документ)<>Тип("Структура"), ПараметрыДокумента.Документ, Неопределено);
	ОбъектДокумента.ИдентификаторСессии = ПараметрыДокумента.ИдентификаторСессии;
	ОбъектДокумента.ИдентификаторСообщения = ПараметрыДокумента.Сообщение.Идентификатор;
	ОбъектДокумента.КорреспондентОтправитель = ПараметрыДокумента.Отправитель;
	ОбъектДокумента.НеобходимостьПосылкиУведомлений = ПараметрыДокумента.НеобходимостьПосылкиУведомления;
	ОбъектДокумента.ОрганизацияПолучатель = ПараметрыДокумента.Организация;
	ОбъектДокумента.ТранспортПолучения = ПараметрыДокумента.Транспорт;
	ОбъектДокумента.ФорматСообщения = ПараметрыДокумента.Транспорт.ФорматСообщения;
	ОбъектДокумента.ТекстОшибки = "";
	Для Каждого Ошибка Из ОбъектДокумента.Ошибки Цикл
		ОбъектДокумента.ТекстОшибки = ?(ОбъектДокумента.ТекстОшибки = "", "", Символы.ПС) + Ошибка.Владелец + " (" + Ошибка.Содержание + ")";
	КонецЦикла;
	ОбъектДокумента.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ОбъектДокумента.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		ОбъектФайла = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		Если Найти(ПараметрыДокумента.ФайлXML.ПутьКФайлуXML, ОбъектФайла.ТекущаяВерсияПутьКФайлу) = 0 Тогда
			ОбъектФайла.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//МиСофт
Функция СоздатьВходящееСообщениеСВД(Идентификатор)
	//МиСофт+
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
	|ГДЕ
	|	ВходящееСообщениеСВД.ИдентификаторСессии = &ИдентификаторСессии";
	Запрос.УстановитьПараметр("ИдентификаторСессии", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		ОбъектДокумента = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ОбъектДокумента.Дата = ТекущаяДатаСеанса();
		ОбъектДокумента.Записать();
		Возврат ОбъектДокумента.Ссылка;
	КонецЕсли;
	
	Результат = Документы.ВходящееСообщениеСВД.СоздатьДокумент();
	Результат.Дата = ТекущаяДатаСеанса();
	Результат.ИдентификаторСессии = Идентификатор;
	Результат.Записать();
	
	Возврат Результат.Ссылка;
	//МиСофт-
КонецФункции

//МиСофт
Процедура ЗаполнитьПараметрыВходящегоСообщенияИзXML(ПараметрыВходящегоСообщения)
	
	ПространствоИмен = ПолучитьПространствоИмен(ПараметрыВходящегоСообщения.Транспорт.ФорматСообщения);
	
	
	ОбъектXDTO = ПолучитьXDTO_РБ(ПараметрыВходящегоСообщения.ФайлXML, ПространствоИмен, ПараметрыВходящегоСообщения.ЭтоНовоеСообщение);
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВходящегоСообщения.Вставить("Сообщение", Новый Структура("ДатаОтправки, Идентификатор, Заголовок", ОбъектXDTO.dtstamp, ОбъектXDTO.msg_id, ОбъектXDTO.subject));
	
	//Значение = 0 для уведомления;
	//Значение = 1 для основного документа;
	//Значение = 2 для дополнений к основному документу;
	//Значение = 3 для документа-ответа;
	//Значение = 4 для дополнений к документу-ответу
	
	//Значение = 1 для уведомления о доставке и приеме сообщения; 
	//Значение = 2 для уведомления о регистрации документа в системе управления документами получателя

	//ПараметрыВходящегоСообщения.ВходящееСообщениеСВД = СоздатьВходящееСообщениеСВД(ПараметрыВходящегоСообщения.Сообщение.Идентификатор);

	ТипСообщения = Новый Соответствие;
	ТипСообщения.Вставить("1", "ЯвляетсяОсновнымДокументом");
	ТипСообщения.Вставить("2", "ЯвляетсяДополнениемКОсновномуДокументу");
	ТипСообщения.Вставить("3", "ЯвляетсяОтветом");
	ТипСообщения.Вставить("4", "ЯвляетсяДополнениемКОтвету");
	ТипСообщения.Вставить("01", "ЯвляетсяУведомлениемОДоставке");
	ТипСообщения.Вставить("02", "ЯвляетсяУведомлениемОРегистрации");
	ТипСообщения.Вставить("03", "ЯвляетсяУведомлениемОбОзнакомлении");
	
	Если ОбъектXDTO.Header.msg_type = 0 Тогда
		ПараметрыВходящегоСообщения.Вставить(ТипСообщения[Строка(ОбъектXDTO.Header.msg_type)+Строка(ОбъектXDTO.Body.Acknowledgement.ack_type)], Истина);
	Иначе
		ПараметрыВходящегоСообщения.Вставить(ТипСообщения[Строка(ОбъектXDTO.Header.msg_type)], Истина);
	КонецЕсли;
	Если (ОбъектXDTO.Header.msg_type = 1 Или ОбъектXDTO.Header.msg_type = 3) Тогда
		ВидСообщенияСВД = ?(ОбъектXDTO.Header.msg_type = 1, Перечисления.ВидыСообщенийСВД.ОсновнойДокумент, Перечисления.ВидыСообщенийСВД.ДокументОтвет);
		ПараметрыВходящегоСообщения.Вставить("ВидСообщенияСВД", ВидСообщенияСВД);
	ИначеЕсли ОбъектXDTO.Header.msg_type = 0 Тогда
		ВидУведомления = Новый Соответствие;
		ВидУведомления.Вставить(1, Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
		ВидУведомления.Вставить(2, Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
		ВидУведомления.Вставить(3, Перечисления.ВидыСообщенийСВД.УведомлениеОбОзнакомлении);
		ВидСообщенияСВД = ВидУведомления[ОбъектXDTO.Body.Acknowledgement.ack_type];
		ПараметрыВходящегоСообщения.Вставить("ВидСообщенияСВД", ВидСообщенияСВД);
	КонецЕсли;
	
	ПараметрыВходящегоСообщения.Вставить("ИдентификаторСессии", ?(ОбъектXDTO.Body.Acknowledgement = Неопределено, ПараметрыВходящегоСообщения.Сообщение.Идентификатор, ОбъектXDTO.Body.Acknowledgement.msg_id));
	
	ЗаполнитьПараметрыДокументаИзЗаголовка(ОбъектXDTO.Header, ПараметрыВходящегоСообщения);
	
	Если ЗначениеЗаполнено(ПараметрыВходящегоСообщения.Организация) И ЗначениеЗаполнено(ПараметрыВходящегоСообщения.Отправитель) Тогда
		
		ЗаполнитьПараметрыДокументаИзТела(ОбъектXDTO.Body, ПараметрыВходящегоСообщения);
		
		Если ПараметрыВходящегоСообщения.Свойство("Документ") Тогда
		
			Документ = СоздатьДокумент(ПараметрыВходящегоСообщения);
			
		ИначеЕсли ПараметрыВходящегоСообщения.Свойство("Уведомление") Тогда
			
			СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ПараметрыВходящегоСообщения.ИдентификаторСессии);
			
			// На инициирующей стороне запишем в историю подтверждение
			Если ЗначениеЗаполнено(СообщениеСВД) Тогда
				
				ОтправляемыйДокумент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СообщениеСВД, "Документ");
				
				//МиСофт+
				ТекстОшибки = "";
				
				Для Каждого Текст Из ПараметрыВходящегоСообщения.Уведомление.ТекстыУведомления Цикл
					
					Если Текст.КодОшибки <> 0 Тогда
						ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", Символы.ПС) + Текст.Содержание;
						ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке;
					КонецЕсли;
					
				КонецЦикла;
				
				СостояниеДокумента = Неопределено;
				Если ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					
				ИначеЕсли ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						ПараметрыВходящегоСообщения.Вставить("Документ", ОтправляемыйДокумент);
							
						УчитыватьВходящийНомерИДатуПолучателя = 
						ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
						Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
						
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
							
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
								
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыВходящегоСообщения.Отправитель Тогда
									Строка.ВходящийНомер = ПараметрыВходящегоСообщения.Уведомление.ИсходящийНомер;
									Строка.ВходящаяДата = ПараметрыВходящегоСообщения.Уведомление.ИсходящаяДата;
								КонецЕсли;
							КонецЦикла;
								
							ДокументОбъект.Записать();
								
						КонецЕсли;
							
					КонецЕсли;
					
				ИначеЕсли ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда	//Состояние - Ошибка		
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
				КонецЕсли;
				
									
				//МиСофт-
				
				Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
					ПараметрыВходящегоСообщения.Вставить("Документ", ОтправляемыйДокумент);
					
					ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ПараметрыВходящегоСообщения.ВходящееСообщениеСВД,
					СостояниеДокумента,
					ПараметрыВходящегоСообщения.ИдентификаторСессии, ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьВходящееСообщениеСВД(ПараметрыВходящегоСообщения);
		
		//Если ПараметрыВходящегоСообщения.ФайлXML.Свойство("Ссылка") Тогда
		//	ФайлОбъект = ПараметрыВходящегоСообщения.ФайлXML.Ссылка.ПолучитьОбъект();
		//	Если ТипЗнч(ФайлОбъект) = Тип("СправочникОбъект.Файлы") Тогда
		//		ФайлОбъект.Удалить();
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Не ПараметрыВходящегоСообщения.ФайлXML.Свойство("Ссылка") Тогда 
			Если ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент ИЛИ ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
				РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ссылка, ПараметрыВходящегоСообщения.ПутьКФайлуXML, ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ИдентификаторСообщения+"_data");
			ИначеЕсли ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке ИЛИ ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке ИЛИ 
				ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации ИЛИ ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОбОзнакомлении Тогда
				РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ссылка, ПараметрыВходящегоСообщения.ПутьКФайлуXML, ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.ИдентификаторСообщения+"_ack");
			КонецЕсли;
			УдалитьФайлы(ПараметрыВходящегоСообщения.ПутьКФайлуXML);
		КонецЕсли;
		
		Если (ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет ИЛИ ПараметрыВходящегоСообщения.ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент) И НЕ ПараметрыВходящегоСообщения.НеобходимостьПосылкиУведомления = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать Тогда
			СформироватьУведомление(ПараметрыВходящегоСообщения.Документ, ПараметрыВходящегоСообщения.ВходящееСообщениеСВД, Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ошибки);  
		КонецЕсли;
		
		ПараметрыВходящегоСообщения.Успех = Истина;
		
	Иначе
		
		ТекстСообщения = "";
		Если Не ЗначениеЗаполнено(ПараметрыВходящегоСообщения.Организация) Тогда
			Если ОбъектXDTO.Header.Receiver.Количество() = 1 Тогда
				Наименование = ОбъектXDTO.Header.Receiver[0].name;
				Код = ОбъектXDTO.Header.Receiver[0].id;
				ТекстСообщения = "Организация """+Наименование+""" (код: "+Код+") отсутствует в базе.";
			Иначе
				ТекстСообщения = "Для получения сообщения СВД необходимо, чтобы одна из следующих организаций была внесена в базу в справочник ""Организации"":";
				Для Каждого Получатель Из ОбъектXDTO.Header.Receiver Цикл
					Наименование = Получатель.name;
					Код = Получатель.id;
					ТекстСообщения = ТекстСообщения + Символы.ПС + ""+Наименование+""" (код: "+Код+")";
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыВходящегоСообщения.Отправитель) Тогда
			Наименование = ОбъектXDTO.Header.Sender.name;
			Код = ОбъектXDTO.Header.Sender.id;
			ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + Символы.ПС) + "Корреспондент " + Наименование + "(код: " + Код + ") отсутствует в базе.";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСообщениеПоИдентификатору(Сообщение, ИдентификаторСообщения)
	
	Результат = Новый Структура("ВходящееСообщениеСВД, ЭтоНовоеСообщение");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
	|ГДЕ
	|	ВходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСообщения";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РезультатЗапроса.Следующий() Тогда
		Результат.ВходящееСообщениеСВД = РезультатЗапроса.Ссылка;
		Результат.ЭтоНовоеСообщение = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ОбъектДокумента = Документы.ВходящееСообщениеСВД.СоздатьДокумент();
	ОбъектДокумента.ДатаФормирования = Сообщение.ДатаПолучения;
	ОбъектДокумента.ИдентификаторСообщения = ИдентификаторСообщения;
	ОбъектДокумента.Дата = ТекущаяДатаСеанса();
	ОбъектДокумента.Записать();
	
	Результат.ВходящееСообщениеСВД = ОбъектДокумента.Ссылка;
	Результат.ЭтоНовоеСообщение = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Вызывается при ошибке проверки ЭП документа
Процедура ОбработатьОшибкуПроверкиЭПДокумента(Документ, ВидСообщенияСВД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;                     
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	
	
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Если Не ЕстьОшибкиСВДДляДокумента(ВходящееСообщениеСВД.ИдентификаторСообщения) Тогда
			
			//МиСофт+   
			МассивОшибок = Новый Массив;
			ТекстОшибки = ВходящееСообщениеСВД.ТекстОшибки;
			ПоследнийСимвол = Найти(ТекстОшибки, Символы.ПС);
			Пока ПоследнийСимвол > 0 Цикл
				СтрокаОшибки = Лев(ТекстОшибки, ПоследнийСимвол);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, СтрокаОшибки, "");
				ПоследнийСимвол = Найти(ТекстОшибки, Символы.ПС);
				СтрокаОшибки = СтрЗаменить(СтрокаОшибки, Символы.ПС, "");
				КоличествоСимволовОбрезать = Найти(СтрокаОшибки, "|");
				КодОшибки = Лев(СтрокаОшибки, КоличествоСимволовОбрезать-1);
				СтрокаОшибки = Прав(СтрокаОшибки, СтрДлина(СтрокаОшибки)-КоличествоСимволовОбрезать);
				ДокументОшибки = Лев(СтрокаОшибки, Найти(СтрокаОшибки, "|")-1);
				Ошибка = СокрЛП(СтрЗаменить(СтрЗаменить(СтрокаОшибки, ДокументОшибки+"| ", ""), ".", ""));
				ОшибкаВставлена = Ложь;
				Для Каждого СтрокаМассива Из МассивОшибок Цикл
					Если СтрокаМассива.Документ = ДокументОшибки И СтрокаМассива.КодОшибки = КодОшибки Тогда
						СтрокаМассива.Ошибка = СтрокаМассива.Ошибка + "; " + Ошибка;
						ОшибкаВставлена = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;     
				
				Если Не ОшибкаВставлена Тогда
					МассивОшибок.Добавить(Новый Структура("КодОшибки, Документ, Ошибка", КодОшибки, ДокументОшибки, Ошибка));
				КонецЕсли;
			КонецЦикла;
			КоличествоСимволовОбрезать = Найти(ТекстОшибки, "|");
			КодОшибки = Лев(ТекстОшибки, КоличествоСимволовОбрезать-1);
			ТекстОшибки = Прав(ТекстОшибки, СтрДлина(ТекстОшибки)-КоличествоСимволовОбрезать);
			ДокументОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки, "|")-1);
			Ошибка = СокрЛП(СтрЗаменить(СтрЗаменить(ТекстОшибки, ДокументОшибки+"| ", ""), ".", ""));
			ОшибкаВставлена = Ложь;
			Для Каждого СтрокаМассива Из МассивОшибок Цикл
				Если СтрокаМассива.Документ = ДокументОшибки И СтрокаМассива.КодОшибки = КодОшибки Тогда
					СтрокаМассива.Ошибка = СтрокаМассива.Ошибка + "; " + Ошибка;
					ОшибкаВставлена = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;     
			
			Если Не ОшибкаВставлена Тогда
				МассивОшибок.Добавить(Новый Структура("КодОшибки, Документ, Ошибка", КодОшибки, ДокументОшибки, Ошибка));
			КонецЕсли;
			//МиСофт-
			
			//МиСофт Удалено
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ЕстьОшибкиСВДДляДокумента(ИдентификаторСообщения) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.Ссылка
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСообщения
		|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
		
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);	
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);	
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПодписьЭПВерна(Документ)
	
	//МиСофт+
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭП = Константы.ПровайдерЭП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭП = Константы.ТипПровайдераЭП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	КодОшибки = КодОшибкиПодписи(Документ.Ссылка, МенеджерКриптографии);
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ.Ссылка, Ложь);
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		КодОшибки = КодОшибки + КодОшибкиПодписи(ФайлСсылка.ТекущаяВерсия, МенеджерКриптографии);
				
	КонецЦикла;
	
	Возврат КодОшибки = 0;
	
	//МиСофт-
	
КонецФункции	

Функция КодОшибкиПодписи(ТекущийОбъект, МенеджерКриптографии)
	//МиСофт+
	Результат = 0;
	
	//Если ТекущийОбъект.ПодписанЭП Тогда
		      
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ДвоичныеДанныеПодписи = ВыборкаЗапроса.Подпись.Получить();
			
			ДвоичныеДанныеФайла = Неопределено;
			
			Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				
				ВерсияСсылка = ТекущийОбъект;
				ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ВерсияСсылка.Владелец);
				
			Иначе
				
				ДвоичныеДанныеФайла = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(ТекущийОбъект);
				
			КонецЕсли;
			
			ОшибкиПроверки = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
			ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
				
			Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") ИЛИ ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
				Ошибка = ?(ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата"), ОшибкиПроверки.ТекстОшибкиПроверкиСертификата, ОшибкиПроверки.ТекстОшибкиПроверкиПодписи);
				КодОшибки = ?(ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи"), -21, -23);
				Если Не Найти(Ошибка, ВыборкаЗапроса.КомуВыданСертификат) Тогда
					Ошибка = ВыборкаЗапроса.КомуВыданСертификат + " (" + Ошибка + ")"
				КонецЕсли;
				Расширение = "";
				Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					Документ = ТекущийОбъект.Владелец.ВладелецФайла;
					Расширение = "."+ТекущийОбъект.Расширение;
				ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					Документ = ТекущийОбъект;
				КонецЕсли;
				//ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
				ОбъектДокумента = Документ.ПолучитьОбъект();
				
				НайденныеСтроки = ОбъектДокумента.Ошибки.НайтиСтроки(Новый Структура("Владелец, Код", ТекущийОбъект.Наименование + "." + ТекущийОбъект.Расширение, КодОшибки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].Содержание = НайденныеСтроки[0].Содержание + "; " + Ошибка;
				Иначе
					НоваяСтрока = ОбъектДокумента.Ошибки.Добавить();
					НоваяСтрока.Владелец = ТекущийОбъект.Наименование + "." + ТекущийОбъект.Расширение;
					НоваяСтрока.Код = КодОшибки;
					НоваяСтрока.Содержание = Ошибка;
				КонецЕсли;
				
				ОбъектДокумента.ТекстОшибки = ОбъектДокумента.ТекстОшибки+?(ОбъектДокумента.ТекстОшибки = "", "", Символы.ПС)+КодОшибки+"|"+ТекущийОбъект.Наименование+Расширение+"| "+Ошибка;
				ОбъектДокумента.Записать();
				Результат = Результат + КодОшибки; // есть хоть одна неверная подпись или сертификат
			КонецЕсли;
			
			ЭПМенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЭПМенеджерЗаписи.УникальныйИдентификатор = ВыборкаЗапроса.УникальныйИдентификатор;
			ЭПМенеджерЗаписи.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			ЭПМенеджерЗаписи.Объект = ВыборкаЗапроса.Объект;
			ЭПМенеджерЗаписи.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			
			ЭПМенеджерЗаписи.Прочитать();
			
			Если ЭПМенеджерЗаписи.Выбран() Тогда
				Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
					ЭПМенеджерЗаписи.ПодписьВерна = Ложь;
					ЭПМенеджерЗаписи.ТекстОшибкиПроверкиПодписи = ОшибкиПроверки.ТекстОшибкиПроверкиПодписи;
				КонецЕсли;
				
				Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
					ЭПМенеджерЗаписи.СертификатДействителен = Ложь;
					ЭПМенеджерЗаписи.ТекстОшибкиПроверкиСертификата = ОшибкиПроверки.ТекстОшибкиПроверкиСертификата;
				КонецЕсли;
			КонецЕсли;
			
			ЭПМенеджерЗаписи.Записать();
			
		КонецЦикла;
	//КонецЕсли;
	Возврат Результат;
	//МиСофт-
КонецФункции

Функция ЕстьНеверныеПодписиОбъекта(ТекущийОбъект, МенеджерКриптографии, ВключаяПодчиненные = Ложь)
	
	//МиСофт+
	Результат = Ложь;
	
	
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		      
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект);
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ДвоичныеДанныеПодписи = ВыборкаЗапроса.Подпись.Получить();
			
			ДвоичныеДанныеФайла = Неопределено;
			
			Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				
				ВерсияСсылка = ТекущийОбъект;
				ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ВерсияСсылка.Владелец);
				
			Иначе
				
				ДвоичныеДанныеФайла = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(ТекущийОбъект);
				
			КонецЕсли;
			
			ОшибкиПроверки = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
				ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
				
			Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") ИЛИ ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
				Ошибка = ?(ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата"), ОшибкиПроверки.ТекстОшибкиПроверкиСертификата, ОшибкиПроверки.ТекстОшибкиПроверкиПодписи);
				Если Не Найти(Ошибка, ВыборкаЗапроса.КомуВыданСертификат) Тогда
					Ошибка = ВыборкаЗапроса.КомуВыданСертификат + " (" + Ошибка + ")"
				КонецЕсли;
				Расширение = "";
				Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					Документ = ТекущийОбъект.Владелец.ВладелецФайла;
					Расширение = "."+ТекущийОбъект.Расширение;
				ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					Документ = ТекущийОбъект;
				КонецЕсли;
				ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
				ОбъектДокумента = ВходящееСообщениеСВД.ПолучитьОбъект();
				
				ОбъектДокумента.ТекстОшибки = ОбъектДокумента.ТекстОшибки+?(ОбъектДокумента.ТекстОшибки = "", "", Символы.ПС)+ТекущийОбъект.Наименование+Расширение+"| "+Ошибка;
				ОбъектДокумента.Записать();
				Результат = Истина; // есть хоть одна неверная подпись или сертификат
			КонецЕсли;
			
			
		КонецЦикла;
	КонецЕсли;
	
	Если ВключаяПодчиненные Тогда
		Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ТекущийОбъект, Ложь);
			Для Каждого ФайлСсылка Из МассивФайлов Цикл
				
				
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Если Не ТекущийОбъект.ПодписанЭП Тогда
			Файл = ТекущийОбъект.Наименование+"."+ТекущийОбъект.Расширение;
			Документ = ТекущийОбъект.Владелец.ВладелецФайла;
			ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
			ОбъектДокумента = ВходящееСообщениеСВД.ПолучитьОбъект();
			ОбъектДокумента.ТекстОшибки = ОбъектДокумента.ТекстОшибки+?(ОбъектДокумента.ТекстОшибки = "", "", Символы.ПС)+Файл+"| Нет ниодной подписи.";
			ОбъектДокумента.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	//МиСофт-
	
КонецФункции	

Функция ПолучитьВыполнятьПроверкуЭПНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВыполнятьПроверкуЭПНаСервере = Константы.ВыполнятьПроверкуЭПНаСервере.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ВыполнятьПроверкуЭПНаСервере;
	
КонецФункции	

// Заполняет ссылочный реквизит по строке
Процедура ЗаполнитьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, Корреспондент, Организация)
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Справочники.Корреспонденты.ПустаяСсылка(), 
		Справочники.Организации.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Корреспондент, 
		Справочники.Организации.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Справочники.Корреспонденты.ПустаяСсылка(), 
		Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Корреспондент, 
		Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Корреспондент = Корреспондент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = ЗначениеПоля;
	МенеджерЗаписи.Записать(); // запишем пустое значение
	
КонецПроцедуры	

// Заполняет ссылочный реквизит по строке
Функция ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, Корреспондент, Организация)
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Корреспондент = Корреспондент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = ЗначениеПоля;
	
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗначениеИзСправочника) Тогда
		Реквизит = МенеджерЗаписи.ЗначениеИзСправочника;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет ПравилаЗаполненияПолейДокументов при записи из карточки Входящего документа
Процедура ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(РеквизитЗначение, СтроковоеЗначение, ИмяПоля, 
		Корреспондент, Организация)
	
	Если Не ЗначениеЗаполнено(РеквизитЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Корреспондент = Корреспондент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = СтроковоеЗначение;
	
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ЗначениеИзСправочника) Тогда
		Возврат; // значение в регистре уже заполнено - не надо менять
	Иначе	
		
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.Корреспондент = Корреспондент;
		МенеджерЗаписи.ИмяПоля = ИмяПоля;
		МенеджерЗаписи.СтроковоеЗначение = СтроковоеЗначение;
		МенеджерЗаписи.ЗначениеИзСправочника = РеквизитЗначение;
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры	

// Делает запись в регистр ИсторияСостоянийДокументовВСВД
Процедура ЗаписатьВИсториюСостоянийСВД(Документ, Сообщение, Состояние, ИдентификаторСессии,
	ТекстОшибки = "" ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ТипЗнч(Сообщение) = Тип("ДокументОбъект.ВходящееСообщениеСВД")
			Или ТипЗнч(Сообщение) = Тип("ДокументОбъект.ИсходящееСообщениеСВД") Тогда
			Сообщение.ТекстОшибки = ТекстОшибки;
		Иначе
			СообщениеОбъект = Сообщение.ПолучитьОбъект();
			СообщениеОбъект.ТекстОшибки = ТекстОшибки;
			СообщениеОбъект.Записать();
		КонецЕсли;
	Конецесли;
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
		Документ, "СостояниеСВД", Состояние);
		
КонецПроцедуры	

Функция НайтиСообщениеСВДПоДокументу(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееСообщениеСВД.Ссылка
		|ИЗ
		|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
		|ГДЕ
		|	ВходящееСообщениеСВД.Документ = &Документ
		|	И ВходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	КонецЕсли;
	
	Возврат Документы.ВходящееСообщениеСВД.ПустаяСсылка();
	
КонецФункции	

// Вызывается при регистрации документа
Процедура ОбработатьРегистрациюДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	

	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		//МиСофт+
		СформироватьУведомление(Документ, ВходящееСообщениеСВД, Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации, ВходящееСообщениеСВД.Ошибки);
		//МиСофт-
			
	КонецЕсли;	
	
КонецПроцедуры	

// Вызывается при ошибке регистрации документа
Процедура ОбработатьОшибкуРегистрацииДокумента(Документ, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	

	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		//МиСофт+
		ИсходящееСообщение = СформироватьПодтверждениеПолучения(
			Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.Отправитель,
			Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации,
			1003,	// Собственные коды ошибок (будут уточняться) 
			ТекстОшибки	);
		//МиСофт-
			
		ЗаписатьВИсториюСостоянийСВД(
			Документ, 
			ИсходящееСообщение, 
			Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
			ИсходящееСообщение.ИдентификаторСессии,
			ТекстОшибки);
			
	КонецЕсли;	
	
КонецПроцедуры	

// Обработка события ПослеЗаписиНаСервере, вызванного из карточки Входящего документа
Процедура ПослеЗаписиНаСервереИзКарточкиВходящегоДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	

	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.ВидДокумента, Строка(Документ.ВидДокумента),
		"ВидДокумента", Документ.Отправитель, Документ.Организация);
	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.ГрифДоступа, Строка(Документ.ГрифДоступа),
		"ГрифДоступа", Документ.Отправитель, Документ.Организация);
	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.Адресат, Строка(Документ.Адресат),
		"Адресат", Документ.Отправитель, Документ.Организация);
	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.Подразделение, Строка(Документ.Адресат),
		"Подразделение", Документ.Отправитель, Документ.Организация);
	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.Подписал, Строка(Документ.Подписал),
		"Подписал", Документ.Отправитель, Документ.Организация);
	ЗаполнитьРегистрПравилаЗаполненияПолейДокументов(Документ.ВопросДеятельности, "", "ВопросДеятельности", 
		Документ.Отправитель, Документ.Организация);
	
КонецПроцедуры	

// Возвращает Истина, если Входящий документ получен по СВД
Функция ДокументПолученПоСВД(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Возврат ЗначениеЗаполнено(ВходящееСообщениеСВД);
	
КонецФункции

// Получает количество сессий отправка по СВД для указанного документа
Функция КоличествоСессийСВДДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсходящееСообщениеСВД.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Документ = &Документ
		|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Количество();
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Получает идентификатор последней сессии отправки документа по СВД указанному получателю
Функция ПолучитьИдентификаторПоследнейСессииСВД(Документ, Получатель) Экспорт
	
	//Получение идентификатора хронологически последней сессии обмена по СВД
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения Как Идентификатор
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Документ = &Документ
		|	И ИсходящееСообщениеСВД.Получатель = &Получатель
		|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееСообщениеСВД.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Данному корреспонденту данный документ никогда не отправлялся
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИдентификаторСессии = Выборка.Идентификатор;
    Возврат ИдентификаторСессии;
	
КонецФункции

// Получает идентификатор последней сессии отправки документа по СВД независимо от получателя
Функция ПолучитьИдентификаторПоследнейСессииСВДНезависимоОтПолучателя(Документ) Экспорт
	
	//Получение идентификатора хронологически последней сессии обмена по СВД
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходящееСообщениеСВД.ИдентификаторСообщения
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Документ = &Документ
		|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходящееСообщениеСВД.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Данному корреспонденту данный документ никогда не отправлялся
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИдентификаторСессии = Выборка.ИдентификаторСообщения;
    Возврат ИдентификаторСессии;
	
КонецФункции

// Получает историю статусов для указанного документа, получатели и сессии
Функция ПолучитьИсториюСтатусовСессииСВД(Документ, ПолучательДокумента, ИдентификаторСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияСВД.Ссылка КАК Сообщение,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
		|			ТОГДА ВЫБОР
		|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
		|					ИНАЧЕ СообщенияСВД.Дата
		|				КОНЕЦ
		|		ИНАЧЕ СообщенияСВД.Дата
		|	КОНЕЦ КАК ДатаУстановки,
		|	ВЫБОР
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
		|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.ОсновнойДокумент)
		|				И ВЫРАЗИТЬ(СообщенияСВД.Ссылка КАК Документ.ИсходящееСообщениеСВД).ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Отправлен)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОДоставке)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОРегистрации)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем)
		|		КОГДА СообщенияСВД.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.ВидыСообщенийСВД.УведомлениеОбОшибке)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
		|	КОНЕЦ КАК Состояние,
		|	СообщенияСВД.ТекстОшибки КАК ТекстОшибки
		|ИЗ
		|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
		|ГДЕ
		|	СообщенияСВД.Адресат = &Адресат
		|	И СообщенияСВД.Документ = &Документ
		|	И СообщенияСВД.ИдентификаторСессии = &ИдентификаторСессии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУстановки";
		
	Запрос.УстановитьПараметр("Адресат", ПолучательДокумента);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ИдентификаторСессии", ИдентификаторСессии); 
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Получает список сессий с датами их начала
Функция ПолучитьИдентификаторыСессийСВД(Документ, Получатель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияСВД.ИдентификаторСообщения КАК ИдентификаторСессии,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СообщенияСВД.Ссылка) = ТИП(Документ.ИсходящееСообщениеСВД)
		|			ТОГДА ВЫБОР
		|					КОГДА СообщенияСВД.Ссылка.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА СообщенияСВД.Ссылка.ДатаОтправки
		|					ИНАЧЕ СообщенияСВД.Дата
		|				КОНЕЦ
		|		ИНАЧЕ СообщенияСВД.Дата
		|	КОНЕЦ КАК ДатаУстановки
		|ИЗ
		|	ЖурналДокументов.СообщенияСВД КАК СообщенияСВД
		|ГДЕ
		|	СообщенияСВД.ВидСообщения = &ВидСообщения
		|	И СообщенияСВД.Адресат = &Получатель
		|	И СообщенияСВД.Ссылка.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУстановки УБЫВ";
		
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);	
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Документ", Документ);
	ТаблицаСессий = Запрос.Выполнить().Выгрузить();
	
    Возврат ТаблицаСессий;
	
КонецФункции

// Заполнить HTML для показа в форме сообщения
Процедура ЗаполнитьHTMLПоXDTO(ТекстHTML, ОбъектXDTO) Экспорт
	//МиСофт+
	ТекстHTML = "<html> <body topmargin=0 leftmargin=0 scroll=auto>
	|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
    |<title></title>
    |<style type=""text/css"">
    |             .TextStyle           {font-family:MS Sans Serif; font-size:12px;}
    |</style>";
	
	// заголовок
	ТекстHTML = ТекстHTML + "<table width:auto; class = ""TextStyle"" cellpadding=""2"">";
	
	ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Отправитель'"), ОбъектXDTO.Header.Sender.name);
	Для Каждого Получатель Из ОбъектXDTO.Header.Receiver Цикл
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Получатель'"), Получатель.name);
		Если ТипЗнч(Получатель.Organization) = Тип("СписокXDTO") Тогда
			Для Каждого OfficialPerson Из Получатель.Organization.OfficialPerson Цикл
				ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Адресат'"), OfficialPerson.Name.__content);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Дата формирования сообщения'"), ОбъектXDTO.dtstamp);
	ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Идентификатор сообщения'"), ОбъектXDTO.msg_id);
	
	
	Если ОбъектXDTO.Body.Document <> Неопределено Тогда
		
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Наименование документа'"), ОбъектXDTO.Body.Document.title);
		
		Если ОбъектXDTO.Body.Document.type = 0 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'"), НСтр("ru='Исходящий документ'"));
		ИначеЕсли ОбъектXDTO.Body.Document.type = 1 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'"), НСтр("ru='Входящий документ'"));
		ИначеЕсли ОбъектXDTO.Body.Document.type = 2 Тогда
			ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Тип документа'"), НСтр("ru='Внутренний документ'"));
		КонецЕсли;
		
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Вид документа'"), ОбъектXDTO.Body.Document.kind);
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Идентификатор документа'"), ОбъектXDTO.Body.Document.idnumber);
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Содержание'"), ОбъектXDTO.Body.Document.annotation);
		
		Для Каждого Запись Из ОбъектXDTO.Body.Document.Author Цикл
			Если Запись.PrivatePersonWithSign <> Неопределено Тогда
				ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Автор'"), Запись.PrivatePersonWithSign.Name.__content);
			КонецЕсли;
		КонецЦикла;	
		
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Гриф доступа'"), ОбъектXDTO.Body.Document.Confident.__content);
		
		СтрокаФайлов = "";
		Для Каждого Запись Из ОбъектXDTO.Body.Document.DocTransfer Цикл
			СтрокаФайлов = СтрокаФайлов + """" + Запись.name + """" + " ";
		КонецЦикла;	
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Присоединенные файлы'"), СтрокаФайлов);
		
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Рег. номер'"), ОбъектXDTO.Body.Document.RegNumber.__content);
		ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Дата регистрации'"), Строка(ОбъектXDTO.Body.Document.RegNumber.regdate));
		
		Для Каждого Запись Из ОбъектXDTO.Body.Document.Validator Цикл
			ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Резолюция'"), Запись.attestation);
			Если Запись.PrivatePersonWithSign <> Неопределено Тогда
				ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Утвердивший'"), Запись.PrivatePersonWithSign.Name.__content);
			КонецЕсли;
		КонецЦикла;	
		
		Если ОбъектXDTO.Body.Document.Writer <> Неопределено Тогда
			Если ОбъектXDTO.Body.Document.Writer.PrivatePerson <> Неопределено Тогда
				ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Составитель документа'"), ОбъектXDTO.Body.Document.Writer.PrivatePerson.Name.__content);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Body.Acknowledgement <> Неопределено Тогда
		ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Идентификатор сессии'"), ОбъектXDTO.Body.Acknowledgement.msg_id);
		
		Для Каждого Подтверждение Из ОбъектXDTO.Body.Acknowledgement.AckResult Цикл
			Если ЗначениеЗаполнено(Подтверждение.__content) Тогда
					ДобавитьСтрокуHTML(ТекстHTML, ?(Подтверждение.errorcode = 0, НСтр("ru='Текст сообщения'"), НСтр("ru='Описание ошибки'")), Подтверждение.__content);
			КонецЕсли;	
			
			Если Подтверждение.errorcode <> 0 Тогда
				ДобавитьСтрокуHTML(ТекстHTML, НСтр("ru='Код ошибки'"), Подтверждение.errorcode);
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Body.Expansion <> Неопределено Тогда
		
		Для Каждого ОбъектXDTOДопИнфо Из ОбъектXDTO.Body.Expansion.AnyData.fields Цикл
			// выводить инфу об ЭП
		КонецЦикла;	
		
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "</table>";
	ТекстHTML = ТекстHTML + "</body></html>";
	//МиСофт-
КонецПроцедуры	

Процедура ДобавитьСтрокуHTML(ТекстHTML, ИмяПоля, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ТекстHTML = ТекстHTML + "<tr><td valign=""top""><b>" + ИмяПоля + ": </b></td><td valign=""top"">"
			+ Строка(Значение) + "</td></tr>";	
	КонецЕсли;
	
КонецПроцедуры	

// Получить наименование корреспондента в СВД
Функция ПолучитьНаименованиеКорреспондентаВСВДКлиентСервер(Корреспондент, Транспорт) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Корреспондент;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для корреспондента ""%1"" не указано представление в СВД.'"),
			Строка(Корреспондент));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяАдресата;
	
КонецФункции	

// Получить наименование корреспондента в СВД
Функция ПолучитьНаименованиеОрганизацииВСВДКлиентСервер(ОрганизацияДокумента, Транспорт) Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьУчетПоОрганизациям Тогда
		Организация = ОрганизацияДокумента;
	КонецЕсли;
	
	Если Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
		Возврат ОрганизацияДокумента;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Организация;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации ""%1"" не указано представление в СВД.'"),
			Строка(Организация));
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяАдресата;
	
КонецФункции	

//МиСофт
// Получить код корреспондента в СВД
Функция ПолучитьКодОрганизацииВСВДКлиентСервер(ОрганизацияДокумента, Транспорт) Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьУчетПоОрганизациям Тогда
		Организация = ОрганизацияДокумента;
	КонецЕсли;
	
	Если Транспорт.ФорматСообщения = ПредопределенноеЗначение("Справочник.ФорматыСообщенийСВД.ОператорЭДО1СТакском") Тогда
		Возврат ОрганизацияДокумента;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Организация;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации ""%1"" не указано представление в СВД.'"),
			Строка(Организация));
	КонецЕсли;
	
	Возврат МенеджерЗаписи.Адресат.Код;
		
КонецФункции	

// Возвращает выборку исходящих сообщений СВД предназначенных для отправки по указанному транспорту.
//
// Параметры:
//  Транспорт - СправочникСсылка.ТранспортыСВД
//
Функция ПолучитьИсходящиеСообщенияДляОтправкиПоТранспорту(Транспорт) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящееСообщениеСВД.Ссылка,
		|	ИсходящееСообщениеСВД.Дата КАК Дата
		|ИЗ
		|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
		|ГДЕ
		|	ИсходящееСообщениеСВД.Отправлено = ЛОЖЬ
		|	И ИсходящееСообщениеСВД.ПометкаУдаления = ЛОЖЬ
		|	И ИсходящееСообщениеСВД.Транспорт = &Транспорт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("Транспорт", Транспорт);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Определяет возможность работы с ЭДО для текущего пользователя.
//
Функция ДоступнаРаботаСЭДО() Экспорт
	
	Роль = РольДоступна("РаботаСЭДО") ИЛИ РольДоступна("ПолныеПрава");
	Результат = Роль И ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	
	Возврат Результат;
	
КонецФункции
// Сформировать подтверждение получения
Функция СформироватьПодтверждениеПолучения_1_4_8(Документ, ИдентификаторСообщения, Транспорт, Организация, 
		Корреспондент, ВидСообщенияСВД, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101')	
	//МиСофт+	
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВходящееСообщениеСВД") Тогда
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке """+Документ.Заголовок+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.Заголовок + " доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации """+Документ.Заголовок+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.Заголовок + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		//ВидСообщенияСВД = ?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке, Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации, ВидСообщенияСВД);
		
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке """+Документ.Заголовок+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.Заголовок + " доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации """+Документ.Заголовок+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.Заголовок + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт(ТемаСообщения, Транспорт);
	
	// Зона заголовка
	Если Корреспондент = Неопределено Тогда
		
	КонецЕсли;
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Организация, Корреспондент, Транспорт, ВидСообщенияСВД);
	
	ОбъектXDTOЗаголовок.Receiver.Добавить(СоздатьXDTOПолучатель(Корреспондент, Транспорт));
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен); 
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = Документ.ИсходящаяДата;
	ОбъектXDTO.__content = Документ.ИсходящийНомер;
	
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;		
	
	Если ТипЗнч(ТекстОшибки) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из ТекстОшибки Цикл
			ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
			ОбъектXDTO.errorcode = СтрокаМассива.КодОшибки;
			//ТекстОшибки+?(ТекстОшибки = "", "", " ")+"Документ """+СтрокаМассива.Документ+""" отклонен. "+ КодОшибки + "|" + СтрокаМассива.Ошибка;
			ОбъектXDTO.__content = "Документ """+СтрокаМассива.Документ+""" отклонен. " + СтрокаМассива.Ошибка;
			ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		КонецЦикла;		
	Иначе
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = КодОшибки;
		Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
			ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		Иначе
			ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ+" доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		КонецЕсли;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
	КонецЕсли;
	
	
	
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOКонверт);
	ЗаписьXML.Закрыть();
	
	ЗаписатьXML_РБ(ИмяВременногоФайла);
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД(Документ, Корреспондент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидСообщенияСВД, КодОшибки, 
		ИдентификаторСообщения);
	
	// Добавить файл            
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет ИЛИ ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент Тогда
		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, УникальныйИдентификаторСообщения+"_data");
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке ИЛИ ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке ИЛИ ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, УникальныйИдентификаторСообщения+"_ack");
	КонецЕсли;
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	//МиСофт-
КонецФункции	

// Сформировать XDTO объект подтверждения получения
Функция СформироватьXDTOПодтверждениеПолучения(ИдентификаторСообщения, Транспорт, Организация, Контрагент,
	ВидСообщенияСВД, ОшибкиПодписи, КодОшибки = 0, ТекстОшибки = "", РегистрационныйНомер = "", ДатаРегистрации = '00010101', Документ = Неопределено)
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВходящееСообщениеСВД") Тогда
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.ИсходящийНомер + " доставлен в систему 1С:Документооборот 8 КОРП для Беларуси """ " ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе 1С:Документооборот 8 КОРП для Беларуси под № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " доставлен в систему 1С:Документооборот 8 КОРП для Беларуси """ " ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе 1С:Документооборот 8 КОРП для Беларуси под № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОПеререгистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Раннее присвоенный номер является ошибочным. Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ под новым № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ "б отказе от регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " принят в работу, регистрации не подлежит " , ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = ДатаРегистрации;
				IncNumber.__content = "Документ относится к категории не регистрируемых";		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ "б отказе от регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " в работу не принят, регистрации не подлежит " , ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = ДатаРегистрации;
				IncNumber.__content = "Отказано в регистрации";		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок(Организация, Контрагент, Транспорт, ВидСообщенияСВД);
			
	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт(ТемаСообщения, Транспорт);
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен);
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = Документ.ИсходящаяДата;
	ОбъектXDTO.__content = Документ.ИсходящийНомер;
	
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;
	
	//Если ТипЗнч(ОшибкиПодписи) = Тип("Массив") Тогда
	Если ОшибкиПодписи.Количество() <> 0 Тогда
		Для Каждого СтрокаМассива Из ОшибкиПодписи Цикл
			ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
			ОбъектXDTO.errorcode = СтрокаМассива.КодОшибки;
			//ТекстОшибки+?(ТекстОшибки = "", "", " ")+"Документ """+СтрокаМассива.Документ+""" отклонен. "+ КодОшибки + "|" + СтрокаМассива.Ошибка;
			ОбъектXDTO.__content = "Документ """+СтрокаМассива.Документ+""" отклонен. " + СтрокаМассива.Ошибка;
			ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		КонецЦикла;		
	ИначеЕсли ОбъектXDTOAcknowledgement.AckResult.Количество() = 0 Тогда
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = КодОшибки;
		ОбъектXDTO.__content = ТекстУведомления;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		//ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		//ОбъектXDTO.errorcode = КодОшибки;
		//Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//Иначе
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ+" доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//КонецЕсли;
		//ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// Уникальный служебный идентификационный номер поступившего сообщения
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-
КонецФункции

//МиСофт
Функция ПолучитьФайлXMLДляЗаписи(ПутьКФайлуXML, ПространствоИмен)
	//МиСофт+
	ЗаписьФайла = Новый ТекстовыйДокумент();
	ЗаписьФайла.Прочитать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	ЧтениеФайла = Новый ТекстовыйДокумент();
	
	Для ТекущаяСтрока=1 По ЗаписьФайла.КоличествоСтрок() Цикл
		Стр = ЗаписьФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если ТекущаяСтрока = 1 И Найти(Стр, "<?xml") = 0 Тогда
			ЧтениеФайла.ДобавитьСтроку("<?xml version=""1.0"" encoding=""utf-8""?>");
		КонецЕсли;
		Если Найти(Стр, "<Envelop")>0 Тогда
			Если Найти(Стр, ПространствоИмен)>0 Тогда
				Стр = СтрЗаменить(Стр, "<Envelop xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'", "<Envelop");
				Стр = СтрЗаменить(Стр, "<Envelop xmlns="""+ПространствоИмен+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "<Envelop");
				ЗаписьФайла.ЗаменитьСтроку(ТекущаяСтрока, Стр);
			КонецЕсли;
			//Прервать;
		КонецЕсли;
		ЧтениеФайла.ДобавитьСтроку(Стр);
	КонецЦикла;
	
	ЧтениеФайла.Записать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	Возврат ПутьКФайлуXML;
	//МиСофт-
КонецФункции

//МиСофт
Функция ПолучитьФайлXMLДляЧтения(ПутьКФайлуXML, ПространствоИмен) Экспорт
	//МиСофт+
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьФайла = Новый ТекстовыйДокумент();
	ЗаписьФайла.Прочитать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	Для ТекущаяСтрока=1 По ЗаписьФайла.КоличествоСтрок() Цикл
		Стр = ЗаписьФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если Найти(Стр, "<Envelop")>0 Тогда
			Если Найти(Стр, ПространствоИмен)=0 Тогда
				Стр = СтрЗаменить(Стр, "<Envelop", "<Envelop xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'");
				НачалоРасширения = Найти(Стр, "<Expansion");
				Если НачалоРасширения > 0 Тогда
					КонецРасширения = Найти(Стр, "</Expansion>");
					Если КонецРасширения > 0 Тогда
						Расширение = Сред(Стр, НачалоРасширения, КонецРасширения + 12 - НачалоРасширения);
						Стр = СтрЗаменить(Стр, Расширение, "");
					КонецЕсли;
				КонецЕсли;
				ЗаписьФайла.ЗаменитьСтроку(ТекущаяСтрока, Стр);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗаписьФайла.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Возврат ИмяВременногоФайла;
	//МиСофт-
КонецФункции
// Загрузить Входящий документ из пакета в файле XML
Функция ЗагрузитьДокументИзXML_1_4_8(ПутьКФайлуXML, ПараметрыДокумента, Транспорт,
	ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	                                        
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTO = ПолучитьXDTO_РБ(ПутьКФайлуXML, ПространствоИмен);
	
	Документ = ЗагрузитьДокументИзXDTO(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений);
	
	Возврат Документ;
	//МиСофт-
	
КонецФункции	

////МиСофт
//// Создает документ ВходящееСообщениеСВД на основании xml файла ГОСТ 53898
//Функция СоздатьВходящееСообщениеСВДИзXML(Транспорт, ФайлXML, ТаблицаВложенний = Неопределено, ИмяКорневогоЭлемента = Неопределено) Экспорт
//	//МиСофт+
//	УстановитьПривилегированныйРежим(Истина);
//	
//	ПараметрыДокумента = Новый Структура;
//	Если ТипЗнч(ФайлXML) = Тип("Структура") Тогда
//		ИдентификаторСообщения = СтрЗаменить(ФайлXML.ИмяФайла, "_ack", "");
//		ИдентификаторСообщения = СтрЗаменить(ИдентификаторСообщения, "_data", "");
//		ИдентификаторСообщения = СтрЗаменить(ИдентификаторСообщения, ".xml", "");
//		ПараметрыДокумента.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
//	КонецЕсли;
//	
//	Если ПараметрыДокумента.Свойство("ИдентификаторСообщения") Тогда
//		НайденноеСообщениеСВД = НайтиСообщениеСВДПоИдентификатору(ПараметрыДокумента.ИдентификаторСообщения);
//		Если НайденноеСообщениеСВД = Неопределено Тогда
//			ВходящееСообщениеСВД = Документы.ВходящееСообщениеСВД.СоздатьДокумент();
//			ВходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
//			ВходящееСообщениеСВД.ИдентификаторСообщения = ПараметрыДокумента.ИдентификаторСообщения;
//			ВходящееСообщениеСВД.Записать();
//		Иначе
//			ВходящееСообщениеСВД = НайденноеСообщениеСВД.Ссылка.ПолучитьОбъект();
//			ВходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
//			ВходящееСообщениеСВД.Записать();
//			ВзятьФайлИзБазы(ФайлXML, ВходящееСообщениеСВД);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ТипЗнч(ТаблицаВложенний) = Тип("Массив") И ТаблицаВложенний.Количество() > 0 Тогда
//		ПараметрыДокумента.Вставить("ТаблицаВложенний", ТаблицаВложенний);
//	КонецЕсли;
//	Документ = ЗагрузитьДокументИзXML(ФайлXML, ПараметрыДокумента, Транспорт, 
//		ВходящееСообщениеСВД, ТаблицаВложенний, ИмяКорневогоЭлемента);
//	
//	Для Каждого Реквизит Из ВходящееСообщениеСВД.Метаданные().Реквизиты Цикл
//		Если ПараметрыДокумента.Свойство(Реквизит.Имя) Тогда
//			ВходящееСообщениеСВД[Реквизит.Имя] = ПараметрыДокумента[Реквизит.Имя];
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД.ИдентификаторСессии) Тогда
//		ВходящееСообщениеСВД.ИдентификаторСессии = ВходящееСообщениеСВД.ИдентификаторСообщения;
//	КонецЕсли;	
//	
//	ВходящееСообщениеСВД.ТранспортПолучения = Транспорт;
//	ВходящееСообщениеСВД.ФорматСообщения = Транспорт.ФорматСообщения;
//	//Мисофт+
//	Если ПараметрыДокумента.Свойство("ИдентификаторДокумента") Тогда
//		ВходящееСообщениеСВД.ИдентификаторДокумента = ПараметрыДокумента.ИдентификаторДокумента;  
//	КонецЕсли;
//	//Мисофт-
//	Если ПараметрыДокумента.Свойство("Отправитель") Тогда
//		ВходящееСообщениеСВД.КорреспондентОтправитель = ПараметрыДокумента.Отправитель;  
//		//ВходящееСообщениеСВД.КонтрагентОтправитель = ПараметрыДокумента.Отправитель;  
//	КонецЕсли;
//	Если ПараметрыДокумента.Свойство("Организация") Тогда
//		ВходящееСообщениеСВД.ОрганизацияПолучатель = ПараметрыДокумента.Организация;
//	КонецЕсли;
//	//Если ПараметрыДокумента.Свойство("ДатаФормирования") Тогда
//	//	ВходящееСообщениеСВД.ДатаФормирования = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(
//	//		ПараметрыДокумента.ДатаФормирования);
//	//КонецЕсли;
//	Если ПараметрыДокумента.Свойство("ДатаФормирования") Тогда
//		СтроковаяДата = ПараметрыДокумента.ДатаФормирования;
//		Символ = Сред(СтроковаяДата, 20, 1); 
//		Если Символ = "+" Тогда
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "+0300","");
//			ВходящееСообщениеСВД.ДатаФормирования = Дата(СтроковаяДата);
//		Иначе	
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
//			СтроковаяДата = СтрЗаменить(СтроковаяДата , "Z","");
//			ВходящееСообщениеСВД.ДатаФормирования = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(СтроковаяДата);
//		КонецЕсли;
//			
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Документ) Тогда
//		ВходящееСообщениеСВД.ОрганизацияПолучатель = Документ.Организация;
//		ВходящееСообщениеСВД.Документ = Документ;
//	Иначе
//		ЗапросДляПоискаИсходящегоДокумента = Новый Запрос;
//		ЗапросДляПоискаИсходящегоДокумента.Текст = 
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	ИсходящееСообщениеСВД.Документ
//			|ИЗ
//			|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
//			|ГДЕ
//			|	ИсходящееСообщениеСВД.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
//			|	И ИсходящееСообщениеСВД.ИдентификаторСессии = &ИдентификаторСессии
//			|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
//			
//		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ИдентификаторСессии", ВходящееСообщениеСВД.ИдентификаторСессии);
//		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
//		Выборка = ЗапросДляПоискаИсходящегоДокумента.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			ВходящееСообщениеСВД.Документ = Выборка.Документ;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ВходящееСообщениеСВД.Записать();
//	
//	ПодписьЭПНеверна = Ложь;
//	
//	Если ЗначениеЗаполнено(Документ) Тогда
//			
//		// Запись информации о том, что документ получен по СВД.
//		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "ПолученПоСВД", Истина);
//		
//		Если ПараметрыДокумента.Свойство("ЕстьПодписиЭП") И ПараметрыДокумента.ЕстьПодписиЭП Тогда
//			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена;
//		Иначе
//			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет;
//		КонецЕсли;
//		
//		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "СтатусЭП", СтатусЭП);
//		
//	КонецЕсли;
//	
//	ПутьКФайлу = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлу, ФайлXML);
//	ПутьКФайлу = ПолучитьФайлXMLДляЗаписи(ПутьКФайлу, ПараметрыДокумента.ПространствоИмен);
//	Если ТипЗнч(ФайлXML) = Тип("Структура") Тогда
//		Если Не ФайлXML.Свойство("Ссылка") Тогда
//			РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВходящееСообщениеСВД.Ссылка, ПутьКФайлу, ФайлXML.ИмяФайла);
//		КонецЕсли;
//		ВходящееСообщениеСВД.ТекстОшибки = ФайлXML.СодержаниеОшибки;
//		УдалитьФайлы(ФайлXML.ПутьКФайлу);
//	Иначе
//		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВходящееСообщениеСВД.Ссылка, ФайлXML, ПолучитьИмяДляЗаписиФайлаXML(ВходящееСообщениеСВД));
//		УдалитьФайлы(ФайлXML);
//	КонецЕсли;
//	
//	Если ПодписьЭПНеверна И ЗначениеЗаполнено(Документ) Тогда
//		// формируем сообщение об ошибке
//		ОбработатьОшибкуПроверкиЭПДокумента(Документ, Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
//	КонецЕсли;	
//	//МиСофт-
//	Сообщить("1 создано "+ВходящееСообщениеСВД.Ссылка);
//	Возврат ВходящееСообщениеСВД;
//КонецФункции	

//МиСофт
// Создает документ ВходящееСообщениеСВД на основании xml файла ГОСТ 53898
//Функция СоздатьВходящееСообщениеСВДИзXML_1_4_8(Транспорт, ФайлXML, МассивВложений = Неопределено, Сообщение = Неопределено) Экспорт
Функция СоздатьВходящееСообщениеСВДИзXML(Транспорт, ФайлXML, МассивВложений = Неопределено, Сообщение = Неопределено) Экспорт
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	ВходящееСообщениеСВД = Неопределено;
	ЭтоНовоеСообщение = Истина;
	
	Если НЕ Сообщение = Неопределено Тогда
		
		ИдентификаторСообщения = СтрЗаменить(СтрЗаменить(СтрЗаменить(ФайлXML.ИмяФайла, ".xml", ""), "_data", ""), "_ack", "");
		//ИдентификаторСообщения = СтрЗаменить(СтрЗаменить(СтрЗаменить(ФайлXML.ИмяФайлаXML, ".xml", ""), "_data", ""), "_ack", "");
		НайденноеСообщение = НайтиСообщениеПоИдентификатору(Сообщение, ИдентификаторСообщения);
		ВходящееСообщениеСВД = НайденноеСообщение.ВходящееСообщениеСВД;
		ЭтоНовоеСообщение = НайденноеСообщение.ЭтоНовоеСообщение;
		
	КонецЕсли;
	
	ПараметрыВходящегоСообщения = Новый Структура;
	ПараметрыВходящегоСообщения.Вставить("ВходящееСообщениеСВД", ВходящееСообщениеСВД);
	ПараметрыВходящегоСообщения.Вставить("Транспорт", Транспорт);
	ПараметрыВходящегоСообщения.Вставить("ЭтоНовоеСообщение", ЭтоНовоеСообщение);
	Если ЗначениеЗаполнено(МассивВложений) Тогда
		ПараметрыВходящегоСообщения.Вставить("МассивВложений", МассивВложений);
	КонецЕсли;
	
	//Находим подчиненные файлы
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВходящееСообщениеСВД);
	Если МассивФайлов.Количество() = 1 Тогда
		ФайлСсылка = МассивФайлов[0];
	
		ТекущаяВерсия = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФайлСсылка, "ТекущаяВерсия");
		ТипХраненияФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяВерсия, "ТипХраненияФайла");
	
		ФайлXML.ПутьКФайлу = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия);
		//ФайлXML.ПутьКФайлуXML = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия);
		
		ФайлXML.Вставить("Ссылка", ФайлСсылка);
		
	КонецЕсли;
	//
	
	ПараметрыВходящегоСообщения.Вставить("ПутьКФайлуXML", ФайлXML.ПутьКФайлу);
	ПараметрыВходящегоСообщения.Вставить("ФайлXML", ФайлXML);
	//ПараметрыВходящегоСообщения.Вставить("ПутьКФайлуXML", ФайлXML.ПутьКФайлуXML);
	//ПараметрыВходящегоСообщения.Вставить("ФайлXML", ФайлXML);
	ПараметрыВходящегоСообщения.Вставить("Успех", Ложь);
	
	ЗаполнитьПараметрыВходящегоСообщенияИзXML(ПараметрыВходящегоСообщения);
	
	ОбъектДокумента = ВходящееСообщениеСВД.Ссылка.ПолучитьОбъект();
	ОбъектДокумента.СообщениеУспешноПолучено = ПараметрыВходящегоСообщения.Успех;
	Если НЕ ПараметрыВходящегоСообщения.Успех Тогда
		ОбъектДокумента.ТранспортПолучения = Транспорт;
		ОбъектДокумента.ИдентификаторСессии = ИдентификаторСообщения;
		Если РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВходящееСообщениеСВД).Количество() = 0 Тогда
			РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ссылка, ПараметрыВходящегоСообщения.ПутьКФайлуXML, ФайлXML.ИмяФайла);
			//РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ПараметрыВходящегоСообщения.ВходящееСообщениеСВД.Ссылка, ПараметрыВходящегоСообщения.ПутьКФайлуXML, ФайлXML.ИмяФайлаXML);
		КонецЕсли;
	КонецЕсли;
	ОбъектДокумента.Записать();
	
	Возврат ВходящееСообщениеСВД;
	//МиСофт-	
КонецФункции	

//МиСофт
Функция ПолучитьИмяДляЗаписиФайлаXML(Документ)
	//МиСофт+
	Результат = Документ.ИдентификаторСообщения;
	ЭтоНеУведомление = (Документ.ВидСообщения = Перечисления.ВидыСообщенийСВД.ДокументОтвет
	ИЛИ Документ.ВидСообщения = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	Результат = Результат + ?(ЭтоНеУведомление, "_data", "_ack");
	Возврат Результат;
	//МиСофт-
КонецФункции

//МиСофт
Процедура ВзятьФайлИзБазы(ФайлXML, СообщениеСВД)
	//МиСофт+
	МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(СообщениеСВД.Ссылка, Ложь);
	Если МассивПодчиненныхФайлов.Количество() = 1 Тогда
		ФайлXML.Вставить("Ссылка", МассивПодчиненныхФайлов[0]);
		ТекущаяВерсия = МассивПодчиненныхФайлов[0].ТекущаяВерсия;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия), КодировкаТекста.UTF8);
		ТекстовыйДокумент.Записать(ФайлXML.ПутьКФайлу);
	КонецЕсли;
	//МиСофт-
КонецПроцедуры

//ФОРМАТ СМДО 2.1.1 НАЧАЛО

// Отправить документ по СВД. Возвращает Истина, если хоть одному контрагенту отправили.
// 
// Параметры:
// Документ         - СправочникСсылка.ИсходящиеДокументы.
// Получатели       - массив ссылок на справочник Контрагенты.
// ФайлыДляОтправки - массив файлов документов, предназначенных для отправки. 
// Если не указано, тогда будут отправлены все файлы.
// 
Функция ОтправитьПоСВД21(Документ, ВидДокумента, Контрагент, ФайлыДляОтправки = Неопределено) Экспорт
	
	ОтправкаПроизведена = Ложь;
		
	//Для Каждого Корреспондент Из Получатели Цикл
		
		ПравилоОтправкиСообщенийСВД = НайтиПравилоОтправкиСообщенийСВД(Документ.Организация, Контрагент, Документ.ВидДокумента);
		//Если ПравилоОтправкиСообщенийСВД = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПравилоОтправкиСообщенийСВД.Транспорт.ФорматСообщения);
		Если МенеджерОбъекта <> Неопределено Тогда
			МенеджерОбъекта.СформироватьСообщение21(ПравилоОтправкиСообщенийСВД.Транспорт, Документ, Документ.ВидДокумента, 
				Контрагент, Документ.Организация, ПравилоОтправкиСообщенийСВД, ФайлыДляОтправки);
		КонецЕсли;
		
		ОтправкаПроизведена = Истина;
		
	//КонецЦикла;
	
	Возврат ОтправкаПроизведена;
	
КонецФункции

// Выгрузить Исходящий документ в xml файл на диске
Функция ВыгрузитьИсходящийДокументВXML21(ИсходящийДокумент, ВидДокумента, ВозвращаемоеПолноеИмяФайла, Контрагент, 
	Транспорт, ВозвращаемыйИдентификационныйНомерСообщения, Правило, ВозвращаемыйВидСообщенияСВД,
	ФайлыДляОтправки = Неопределено) Экспорт
	//МиСофт+
	Если Не ЗначениеЗаполнено(ИсходящийДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ОбъектXDTO = СоздатьXDTOИзИсходящего21(ИсходящийДокумент, ВидДокумента, Контрагент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД, ФайлыДляОтправки);
	ВозвращаемыйИдентификационныйНомерСообщения = ОбъектXDTO.msg_id;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ЗаписьXML.Закрыть();
		
	ВозвращаемоеПолноеИмяФайла = ПолучитьФайлXMLДляЗаписи21(ИмяВременногоФайла, ПолучитьПространствоИмен(Транспорт.ФорматСообщения));
	
	Возврат Истина;
	//МиСофт-
КонецФункции

// Выгрузить Исходящий документ в пакет
Функция СоздатьXDTOИзИсходящего21(Документ, ВидДокумента, Контрагент, Транспорт, Правило, ВозвращаемыйВидСообщенияСВД,
	ФайлыДляОтправки = Неопределено) Экспорт
	//МиСофт+
	
	Если Документ.ТолькоДопМатериалы = Истина Тогда
		
		ТипСообщения = 1; // 1 - для основного документа.
		
		ФорматСообщения = Транспорт.ФорматСообщения;
		ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
		
		// Зона конверта
		ОбъектXDTOEnvelop = СоздатьXDTOКонверт21(Документ.Наименование, Транспорт);
		
		XDTOПодписиЭП = Неопределено;
		
		Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
			XDTOПодписиЭП = СоздатьОбъект("SignaturesType", ПространствоИмен);
		КонецЕсли;
		
		// Зона заголовка
		ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок21(Документ.Организация, Контрагент, Транспорт, ВозвращаемыйВидСообщенияСВД, Ложь);
		ОпределитьПолучателей21(Документ, Контрагент, ОбъектXDTOЗаголовок.Receiver, Транспорт);
		
		ОбъектXDTOEnvelop.Header = ОбъектXDTOЗаголовок;
		
		ОбъектXDTOBody = СоздатьОбъект("Body", ПространствоИмен);
		
		
		НаРанееОтосланный = СвязиДокументов.ПолучитьСвязанныйДокумент(Документ.Ссылка, Справочники.ТипыСвязей.ПервичноеИсходящее);
		РегистрационныйНомерНаРанееОтосланный = "";
		ДатаРегистрацииНаРанееОтосланный = '00010101';
		
		Если ЗначениеЗаполнено(НаРанееОтосланный) Тогда
			// проверим что ВОтветНа - из СВД
			
			ИсходящееСообщениеСВД = НайтиСообщениеСВДПоИсходящемуДокументу(НаРанееОтосланный);	
			Если ЗначениеЗаполнено(ИсходящееСообщениеСВД) Тогда
				//МиСофт+
				РегистрационныйНомерНаРанееОтосланный = НаРанееОтосланный.РегистрационныйНомер;
				ДатаРегистрацииНаРанееОтосланный = НаРанееОтосланный.ДатаРегистрации;
				//МиСофт-
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РегистрационныйНомерНаРанееОтосланный) Тогда
			ВозвращаемыйВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент; // Документ-ответ
		КонецЕсли;
		
		ОбъектXDTOAddDocuments = СоздатьОбъект("AddDocumentsType", ПространствоИмен);
		ПапкаXDTO = СоздатьОбъект("Folder", ПространствоИмен);
		ПапкаXDTO.contents = "доп. материалы";
		ПапкаXDTO.add_type = 2;
		
		МассивОбъектовДО = Новый Массив;
		ВсеПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеДополнительныеМатериалы(Документ.Ссылка, Ложь);
		Если ФайлыДляОтправки = Неопределено Тогда
			МассивОбъектовДО = ВсеПодчиненныеФайлы;
		Иначе
			Для Каждого ПодчиненныйФайл Из ВсеПодчиненныеФайлы Цикл
				Если ФайлыДляОтправки.Найти(ПодчиненныйФайл) <> Неопределено Тогда
					МассивОбъектовДО.Добавить(ПодчиненныйФайл);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСписокДопФайловИзМассива21(ПапкаXDTO, МассивОбъектовДО, Правило, ПространствоИмен, ФорматСообщения, XDTOПодписиЭП);
		Если ЗначениеЗаполнено(РегистрационныйНомерНаРанееОтосланный) Тогда
			
			СвязаныйДокумент = ПолучитьИсходящийСвязаныйДокумент21(Документ, Справочники.ТипыСвязей.ПервичноеИсходящее);
			СсылкаНаДокумент = СоздатьОбъект("Referred", ПространствоИмен);
			//Мисофт+
			СсылкаНаДокумент.idnumber = ПолучитьИДИсходящегоДокумента21(СвязаныйДокумент.ИсходящийДокумент);
			//Мисофт-
			СсылкаНаДокумент.retype = 1; //Тип доставки документа, на который дается ответ «в ответ на»
			СсылкаНаДокумент.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
			СсылкаНаДокумент.RegNumber.__content = РегистрационныйНомерНаРанееОтосланный;
			СсылкаНаДокумент.RegNumber.regdate = ДатаРегистрацииНаРанееОтосланный;
			ПапкаXDTO.Referred = СсылкаНаДокумент;
			
		КонецЕсли;
		
		ОбъектXDTOAddDocuments.Folder.Добавить(ПапкаXDTO);
		ОбъектXDTOBody.AddDocuments = ОбъектXDTOAddDocuments;
		ОбъектXDTOEnvelop.Body = ОбъектXDTOBody;
		
		Возврат ОбъектXDTOEnvelop;
		
	Иначе
		ТипСообщения = 1; // 1 - для основного документа.
		
		ФорматСообщения = Транспорт.ФорматСообщения;
		ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
		
		// Зона конверта
		ОбъектXDTOEnvelop = СоздатьXDTOКонверт21(Документ.Наименование, Транспорт);
		
		ВОтветНа = СвязиДокументов.ПолучитьСвязанныйДокумент(
		Документ.Ссылка,
		Справочники.ТипыСвязей.ОтправленВОтветНа);
		
		РегистрационныйНомерВОтветНа = "";	
		ДатаРегистрацииВОтветНа = '00010101';
		
		XDTOПодписиЭП = Неопределено;
		
		Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
			XDTOПодписиЭП = СоздатьОбъект("SignaturesType", ПространствоИмен);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВОтветНа) Тогда
			// проверим что ВОтветНа - из СВД
			
			ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(ВОтветНа);	
			Если ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
				//МиСофт+
				РегистрационныйНомерВОтветНа = ВОтветНа.ИсходящийНомер;
				ДатаРегистрацииВОтветНа = ВОтветНа.ИсходящаяДата;
				//МиСофт-
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
			ВозвращаемыйВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет; // Документ-ответ
		КонецЕсли;
		
		// Зона заголовка
		ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок21(Документ.Организация, Контрагент, Транспорт, ВозвращаемыйВидСообщенияСВД, Ложь);
		ОпределитьПолучателей21(Документ, Контрагент, ОбъектXDTOЗаголовок.Receiver, Транспорт);
		
		ОбъектXDTOEnvelop.Header = ОбъектXDTOЗаголовок;
		
		ОбъектXDTOBody = СоздатьОбъект("Body", ПространствоИмен);
		
		//Доп.материалы+ 
		Если Документ.ДопМатериалыНаОтправленный = ИСТИНА Тогда
			
			НаРанееОтосланный = СвязиДокументов.ПолучитьСвязанныйДокумент(Документ.Ссылка, Справочники.ТипыСвязей.ПервичноеИсходящее);
			РегистрационныйНомерНаРанееОтосланный = "";
			ДатаРегистрацииНаРанееОтосланный = '00010101';
			
			Если ЗначениеЗаполнено(НаРанееОтосланный) Тогда
				// проверим что ВОтветНа - из СВД
				
				ИсходящееСообщениеСВД = НайтиСообщениеСВДПоИсходящемуДокументу(НаРанееОтосланный);	
				Если ЗначениеЗаполнено(ИсходящееСообщениеСВД) Тогда
					//МиСофт+
					РегистрационныйНомерНаРанееОтосланный = НаРанееОтосланный.РегистрационныйНомер;
					ДатаРегистрацииНаРанееОтосланный = НаРанееОтосланный.ДатаРегистрации;
					//МиСофт-
				КонецЕсли;	
				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(РегистрационныйНомерНаРанееОтосланный) Тогда
				ВозвращаемыйВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент; // Документ-ответ
			КонецЕсли;
			
			ОбъектXDTOAddDocuments = СоздатьОбъект("AddDocumentsType", ПространствоИмен);
			ПапкаXDTO = СоздатьОбъект("Folder", ПространствоИмен);
			ПапкаXDTO.contents = "доп. материалы";
			ПапкаXDTO.add_type = 2;
			
			МассивОбъектовДО = Новый Массив;
			ВсеПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеДополнительныеМатериалы(Документ.Ссылка, Ложь);
			Если ФайлыДляОтправки = Неопределено Тогда
				МассивОбъектовДО = ВсеПодчиненныеФайлы;
			Иначе
				Для Каждого ПодчиненныйФайл Из ВсеПодчиненныеФайлы Цикл
					Если ФайлыДляОтправки.Найти(ПодчиненныйФайл) <> Неопределено Тогда
						МассивОбъектовДО.Добавить(ПодчиненныйФайл);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗаполнитьСписокДопФайловИзМассива21(ПапкаXDTO, МассивОбъектовДО, Правило, ПространствоИмен, ФорматСообщения, XDTOПодписиЭП);
			Если ЗначениеЗаполнено(РегистрационныйНомерНаРанееОтосланный) Тогда
				
				СвязаныйДокумент = ПолучитьИсходящийСвязаныйДокумент21(Документ, Справочники.ТипыСвязей.ПервичноеИсходящее);
				СсылкаНаДокумент = СоздатьОбъект("Referred", ПространствоИмен);
				//Мисофт+
				СсылкаНаДокумент.idnumber = ПолучитьИДИсходящегоДокумента21(СвязаныйДокумент.ИсходящийДокумент);
				//Мисофт-
				СсылкаНаДокумент.retype = 1; //Тип доставки документа, на который дается ответ «в ответ на»
				СсылкаНаДокумент.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
				СсылкаНаДокумент.RegNumber.__content = РегистрационныйНомерНаРанееОтосланный;
				СсылкаНаДокумент.RegNumber.regdate = ДатаРегистрацииНаРанееОтосланный;
				ПапкаXDTO.Referred = СсылкаНаДокумент;
				
			КонецЕсли;
			
			ОбъектXDTOAddDocuments.Folder.Добавить(ПапкаXDTO);
			
			ОбъектXDTOBody.AddDocuments = ОбъектXDTOAddDocuments;
			
		КонецЕсли;
		//Доп.материалы-
		
		// Зона документа 
		ОбъектXDTODocument = СоздатьОбъект("DocumentType", ПространствоИмен);
		
		// Уникальный служебный идентификационный номер документа в передающей системе
		ОбъектXDTODocument.idnumber = Строка(Документ.УникальныйИдентификатор());
		
		ОбъектXDTODocument.type = 0; // Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		// Вид документа - Наименование вида документа (служебная переписка, письма граждан, 
		// распорядительный документ: приказ, распоряжение и т.д.)
		ВидВСВД = ПолучитьВидДокументаВСВД21(ВидДокумента);
		ОбъектXDTODocument.kind = Строка(ВидВСВД);//обязательное поле
		
		ОбъектXDTODocument.pages = Документ.КоличествоЛистов;  //обязательное поле
		ОбъектXDTODocument.title = Документ.Заголовок;  // не обязательное поле
		//ОбъектXDTODocument.annotation = Документ.Содержание;  // не обязательное поле
		
		// Признак коллективности обращения - имеет смысл только для входящих документов
		//ОбъектXDTODocument.collection = 0;   // не обязательное поле
		
		// Назначение: регистрационный номер и дата регистрации документа. 
		// Для документов, поступивших от физических лиц, допускается указание только даты.
		ОбъектXDTODocument.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
		ОбъектXDTODocument.RegNumber.__content = Документ.РегистрационныйНомер;
		ОбъектXDTODocument.RegNumber.regdate = Документ.ДатаРегистрации;
		
		// Назначение: характеристика ограничений доступа к документу (гриф документа).
		ОбъектXDTODocument.Confident = СоздатьОбъект("Confident", ПространствоИмен);
		ОбъектXDTODocument.Confident.__content = Строка(Документ.ГрифДоступа);
		ОбъектXDTODocument.Confident.flag = 0;  // Признак ограничения доступа к документу 	
		// Значение = 0 для открытого документа. 
		// Значение = 1 для документа с ограниченным доступом
		
		// Referred -  "Ссылается на" - документы или задачи, на которые ссылается этот документ
		Если ЗначениеЗаполнено(РегистрационныйНомерВОтветНа) Тогда
			
			СвязаныйДокумент = ПолучитьСвязаныйДокумент21(Документ, Справочники.ТипыСвязей.ОтправленВОтветНа);
			СсылкаНаДокумент = СоздатьОбъект("DocParent", ПространствоИмен);
			//Мисофт+
			СсылкаНаДокумент.idnumber = ПолучитьИДДокумента21(СвязаныйДокумент.ВходящийДокумент);
			//Мисофт-
			СсылкаНаДокумент.lastmsg_id = СвязаныйДокумент.ИдентификаторСообщения;
			СсылкаНаДокумент.parmsg_id = СвязаныйДокумент.ИдентификаторСессии;
			СсылкаНаДокумент.delivery_type = 1; //Тип доставки документа, на который дается ответ «в ответ на»
			//Значение = 0 для документов, поступивших не по СМДО;
			//Значение = 1 для документов, поступивших по СМДО;
			СсылкаНаДокумент.parorg_id = ПолучитьНаименованиеКонтрагентаВСВДКлиентСервер(Контрагент, Транспорт) ;
			СсылкаНаДокумент.RegNumber = СоздатьОбъект("RegNumber", ПространствоИмен);
			СсылкаНаДокумент.RegNumber.__content = РегистрационныйНомерВОтветНа;
			СсылкаНаДокумент.RegNumber.regdate = ДатаРегистрацииВОтветНа;
			ОбъектXDTODocument.DocParent = СсылкаНаДокумент;
			
		КонецЕсли;
		
		//ОбъектXDTO.DocNumber // не заполняем - т.к. информация уже записана в RegNumber
		// Назначение: информация о документе.
		// Номер и дата документа передаются во вложенных элементах Referred.
		// Элемент DocNumber рекомендуется использовать для распорядительных документов 
		// (постановлений, распоряжений, приказов и т.п.) в тех случаях, когда номер и дата документа 
		// отличаются от регистрационного номера и даты документа, присвоенных в организации.
		
		// Элемент RegHistory
		// Назначение: история регистрации документа в разных организациях.
		// Вложенные элементы содержат все присваивавшиеся документу регистрационные номера, 
		// за исключением последнего занесенного в элемент RegNumber элемента Document.
		//ОбъектXDTO.RegHistory
		
		// Назначение: описание автора документа.
		// Для элемента Author тот, кто является автором документа, - организация (юридическое лицо) 
		// или гражданин (физическое лицо) - определяется соответствующим вложенным 
		// элементом OrganizationWithSign или PrivatePersonWithSign.
		// Берем автора из поля Подготовил
		Если ЗначениеЗаполнено(Документ.Подписал) Тогда
			Автор = СоздатьОбъект("Author", ПространствоИмен);
			Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Автор.OrganizationWithSign = СоздатьОрганизациюИлиЛицо(Документ.Организация, "OrganizationWithSign", ПространствоИмен);
				Автор.OrganizationWithSign.OfficialPersonWithSign.Добавить(СоздатьОрганизациюИлиЛицо(Документ.Подписал, "OfficialPersonWithSign", ПространствоИмен)); 
			Иначе
				Автор.PrivatePersonWithSign = СоздатьОрганизациюИлиЛицо(Документ.Подписал, "PrivatePersonWithSign", ПространствоИмен);
			КонецЕсли;
			ОбъектXDTODocument.Author.Добавить(Автор); 
		КонецЕсли;
		
		//Элемент Validator
		//Назначение: утвердивший или согласовавший данный документ.
		//Автор утверждения или согласования - организация (юридическое лицо) или гражданин (физическое лицо)
		// или документ согласован или утвержден отдельным (другим) документом
		// - определяется соответствующим вложенным элементом OrganizationWithSign, PrivatePersonWithSign или DocNumber.
		Если ЗначениеЗаполнено(Документ.Подписал) Тогда
			
			Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
			Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Валидатор.OrganizationWithSign = СоздатьОрганизациюИлиЛицо(Документ.Организация, "OrganizationWithSign", ПространствоИмен);
				Валидатор.OrganizationWithSign.OfficialPersonWithSign.Добавить(СоздатьОрганизациюИлиЛицо(Документ.Подписал, "OfficialPersonWithSign", ПространствоИмен));
			Иначе
				Валидатор.PrivatePersonWithSign = СоздатьОрганизациюИлиЛицо(Документ.Подписал, "PrivatePersonWithSign", ПространствоИмен);
			КонецЕсли;
			
			// attestation - Гриф согласования или утверждения   
			// Согласовано.
			// Утверждено.
			// Согласовано с замечаниями.
			// Отклонено
			Валидатор.attestation = "Утверждено";
			
			ОбъектXDTODocument.Validator.Добавить(Валидатор); 
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
			
			АктивныеВизы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ.Ссылка);
			
			Для Каждого АктивнаяВиза Из АктивныеВизы Цикл
				
				Если ТипЗнч(АктивнаяВиза.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
					
					Валидатор = СоздатьОбъект("Validator", ПространствоИмен);
					Валидатор.PrivatePersonWithSign = СоздатьФизлицоСПодписью(АктивнаяВиза.Исполнитель, ПространствоИмен);
					Валидатор.attestation = Строка(АктивнаяВиза.РезультатСогласования);
					ОбъектXDTODocument.Validator.Добавить(Валидатор); 
					
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		//Элемент Writer
		//Назначение: исполнитель (составитель) документа.
		//Исполнитель (составитель) документа - организация (юридическое лицо) или гражданин (физическое лицо)
		// - определяется соответствующим вложенным элементом Organization или PrivatePerson.
		//ОбъектXDTO.Writer  - берем из поля Подготовил
		Составитель = СоздатьОбъект("Writer", ПространствоИмен);
		Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Составитель.Organization = СоздатьОрганизациюИлиЛицо(Документ.Организация, "Organization", ПространствоИмен);
			Составитель.Organization.OfficialPerson.Добавить(СоздатьОрганизациюИлиЛицо(Документ.Подготовил, "OfficialPerson", ПространствоИмен));
		Иначе
			Составитель.PrivatePerson = СоздатьОрганизациюИлиЛицо(Документ.Подготовил, "PrivatePerson", ПространствоИмен);
		КонецЕсли;
		ОбъектXDTODocument.Writer = Составитель; 
		
		МассивОбъектовДО = Новый Массив;
		ВсеПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы21(Документ.Ссылка, Ложь);
		Если ФайлыДляОтправки = Неопределено Тогда
			МассивОбъектовДО = ВсеПодчиненныеФайлы;
		Иначе
			Для Каждого ПодчиненныйФайл Из ВсеПодчиненныеФайлы Цикл
				Если ФайлыДляОтправки.Найти(ПодчиненныйФайл) <> Неопределено Тогда
					МассивОбъектовДО.Добавить(ПодчиненныйФайл);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСписокФайловИзМассива21(ОбъектXDTODocument, МассивОбъектовДО, Правило, ПространствоИмен, ФорматСообщения, XDTOПодписиЭП);
		
		//ОбъектXDTOBody.Expansion = СоздатьОбъект("ExpansionType", ПространствоИмен);
		//ОбъектXDTOBody.Expansion.AnyData = СоздатьОбъект("CustomFields", ПространствоИмен);
		//ОбъектXDTOBody.Expansion.exp_ver = "1.0";
		//ОбъектXDTOBody.Expansion.organization = "1С";
		
		ОбъектXDTOBody.Document = ОбъектXDTODocument;
		ОбъектXDTOEnvelop.Body = ОбъектXDTOBody;
		
		Возврат ОбъектXDTOEnvelop;
	КонецЕсли
	//МиСофт-
КонецФункции

//МиСофт
Функция СоздатьXDTOКонверт21(ТемаСообщения, Транспорт)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOКонверт = СоздатьОбъект("Envelop", ПространствоИмен);
	
	//ОбъектXDTOКонверт.dtstamp = Формат(ТекущаяДата(), "ДФ=""yyyy-MM-dd'T'ЧЧ:мм:сс'Z'"""); // Дата и время формирования сообщения в UTC
	  ОбъектXDTOКонверт.dtstamp = Формат(УниверсальноеВремя(ТекущаяДата()), "ДФ=""yyyy-MM-dd'T'ЧЧ:мм:сс'Z'""");
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	ОбъектXDTOКонверт.msg_id = ИдВСтроку(ИДПакета);
	
	ОбъектXDTOКонверт.subject = ТемаСообщения;    //Тема (описание) сообщения
	ОбъектXDTOКонверт.type = "SDIP-2.1.1"; //Вид и версия стандарта, по которому создано данное сообщение (Допустимое значение SDIP-1.0)
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-	
КонецФункции

// Выгрузить Исходящий документ в пакет
 // ТипСообщения = 1 для основного документа.
Функция СоздатьXDTOЗаголовок21(Организация, Контрагент, Транспорт, ВидСообщенияСВД, ДобавлятьКонтрагента = Истина)
	
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOЗаголовок = СоздатьОбъект("Header", ПространствоИмен); 
	
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент Тогда
		ОбъектXDTOЗаголовок.msg_type = 1; // Вид сообщения. Значение = 1 для основного документа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
		ОбъектXDTOЗаголовок.msg_type = 3; // Вид сообщения. Значение = 3 для документа-ответа.
	ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке 
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации 
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОПеререгистрации Тогда
		ОбъектXDTOЗаголовок.msg_type = 0; // Вид сообщения. Значение = 0 для уведомления.
	КонецЕсли;
	
	// Необходимость посылки уведомления
	// Значение = 0 при отсутствии необходимости посылки уведомлений. 
	// Значение = 1 при необходимости посылки уведомлений только в случае возникновения ошибок. 
	// Значение = 2 при необходимости посылки уведомлений. По умолчанию (отсутствие атрибута) значение = 0
	ОбъектXDTOЗаголовок.msg_acknow = 2;  //обязательный 
	Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации 
		Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОПеререгистрации Тогда
		ОбъектXDTOЗаголовок.msg_acknow = 0; // для уведомлений не надо ставить флаг необходимости посылки уведомлений
	КонецЕсли;	
	
	ОбъектXDTOОтправитель = СоздатьОбъект("Sender", ПространствоИмен);
	//Отправитель
	//Обязательные атрибуты: уникальный служебный идентификационный номер отправителя (id), 
	//название организации-отправителя (name), 
	//уникальный служебный идентификационный номер системы отправителя (sys_id), 
	//наименование системы управления документами отправителя (system)
	
	
	//Получатель
	Если ДобавлятьКонтрагента Тогда
		ОбъектXDTOПолучатель = СоздатьОбъект("Receiver", ПространствоИмен);
		ОбъектXDTOЗаголовок.Receiver.Добавить(СоздатьXDTOПолучатель(Контрагент, Транспорт));
	КонецЕсли;

	// Организация отправителя
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOОтправитель.id = МенеджерОбъекта.ПолучитьНаименованиеОрганизацииВСВД(Организация, Транспорт);
		ОбъектXDTOОтправитель.name = ?(ЗначениеЗаполнено(Организация.НаименованиеПолное), Организация.НаименованиеПолное, Организация.Наименование);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Константы.ИдентификационныйНомерСистемы.Получить()) Тогда
		Константы.ИдентификационныйНомерСистемы.Установить(Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	ОбъектXDTOОтправитель.sys_id = Константы.ИдентификационныйНомерСистемы.Получить(); //  Уникальный служебный идентификационный номер  системы отправителя
	ОбъектXDTOОтправитель.system = "1С:Документооборот 8 КОРП для Беларуси, версия 2"; // Наименование системы управления  документами отправителя	
	
	// Дополнительные данные о системе управления документами отправителя
	ОбъектXDTOОтправитель.system_details = "версия 2";//Метаданные.Версия; // обязательный  
	
	// Организация-отправитель
	ОбъектXDTOЗаголовок.Sender = ОбъектXDTOОтправитель;

	Возврат ОбъектXDTOЗаголовок;
	//МиСофт-
	
КонецФункции

//МиСофт
Процедура ОпределитьПолучателей21(Документ, Контрагент, Приемник, Транспорт)
	//МиСофт+
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		
		//Если ПолучательСтрокаТаблЧасти.Получатель = Корреспондент Тогда	
			Источник = ?(ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Адресат), "Адресат", "Получатель");
			Приемник.Добавить(СоздатьXDTOПолучатель21(ПолучательСтрокаТаблЧасти[Источник], Транспорт));			
		//КонецЕсли;
		
	КонецЦикла;
	//МиСофт-
КонецПроцедуры

//МиСофт
Функция СоздатьXDTOПолучатель21(Адресат, Транспорт)
	//МиСофт+
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектXDTOReceiver = СоздатьОбъект("Receiver", ПространствоИмен);
	
	Контрагент = ?(ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛица"), Адресат.Владелец, Адресат);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Транспорт);
	Если МенеджерОбъекта <> Неопределено Тогда
		ОбъектXDTOReceiver.id = МенеджерОбъекта.ПолучитьНаименованиеКонтрагентаВСВД(Контрагент, Транспорт);
		ОбъектXDTOReceiver.name = Контрагент.НаименованиеПолное;
	КонецЕсли;
	
	Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбъектXDTOReceiver.Organization = СоздатьОрганизациюИлиЛицо(Контрагент, "Organization", ПространствоИмен);
		Если ТипЗнч(Адресат) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ОбъектXDTOReceiver.Organization.OfficialPerson.Добавить(СоздатьОрганизациюИлиЛицо(Адресат, "OfficialPerson", ПространствоИмен)); 
		КонецЕсли;
	Иначе
		ОбъектXDTOReceiver.PrivatePerson = СоздатьОрганизациюИлиЛицо(Контрагент, "PrivatePerson", ПространствоИмен);
	КонецЕсли;
	
	Возврат ОбъектXDTOReceiver;
	//МиСофт-
КонецФункции

Функция ПолучитьВидДокументаВСВД21(ВидДокумента) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ВидыДокументовСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВидДокумента = ВидДокумента;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяВСВД) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для контрагента ""%1"" не указано представление в СВД.'"),
			Строка(ВидДокумента));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяВСВД;
	
КонецФункции

//МиСофт
Функция ПолучитьИсходящийСвязаныйДокумент21(Ссылка, ТипСвязи = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСессии", "");
	Результат.Вставить("ИдентификаторСообщения", "");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиДокументов.СвязанныйДокумент
	|ПОМЕСТИТЬ СвязаныйДокумент
	|ИЗ
	|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
	|ГДЕ
	|	СвязиДокументов.Документ = &Ссылка
	|	И СвязиДокументов.ТипСвязи = &ТипСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходящееСообщениеСВД.ИдентификаторСообщения,
	|	ИсходящееСообщениеСВД.ИдентификаторСессии,
	|	СвязаныйДокумент.СвязанныйДокумент,
	|	ИсходящееСообщениеСВД.Ссылка
	|ИЗ
	|	СвязаныйДокумент КАК СвязаныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
	|		ПО СвязаныйДокумент.СвязанныйДокумент = ИсходящееСообщениеСВД.Документ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	Если ТипСвязи = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СвязиДокументов.ТипСвязи = &ТипСвязи", "");
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 1 Тогда
		Результат.Вставить("ИдентификаторСессии", РезультатЗапроса[0].ИдентификаторСессии);
		Результат.Вставить("ИдентификаторСообщения", РезультатЗапроса[0].ИдентификаторСообщения);
		Результат.Вставить("ИсходящийДокумент", РезультатЗапроса[0].Ссылка);
	КонецЕсли;
	Возврат Результат;
КонецФункции
//Мисофт
//Получим идентификатор входящего документа из пакета XDTO
Функция ПолучитьИДИсходящегоДокумента21(ИсходящийДокумент)
	Результат = "";
	
	Если ИсходящийДокумент.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ53898ВложенныеФайлы
		Или ИсходящийДокумент.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
	
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ИсходящийДокумент);//.Ссылка);
		ФайлСсылка = Неопределено;
		
		Для Каждого Файл Из МассивФайлов Цикл
			Если Файл.ТекущаяВерсияРасширение = "xml" Тогда
				ФайлСсылка = Файл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФайлСсылка = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяВерсия = ФайлСсылка.ТекущаяВерсия;
		ТипХраненияФайла = ТекущаяВерсия.ТипХраненияФайла;
		
		ИмяФайлаСПутем = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия);
		
		ПространствоИмен = РаботаССВД.ПолучитьПространствоИмен(ИсходящийДокумент.ФорматСообщения);

		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
		ЧтениеXML = Новый ЧтениеXML;
		ИмяФайлаСПутем = РаботаССВД.ПолучитьФайлXMLДляЧтения(ИмяФайлаСПутем, ПространствоИмен);
	    ЧтениеXML.ОткрытьФайл(ИмяФайлаСПутем);
		Попытка
	    	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	    	ОбъектXDTO.Проверить();
			Результат = СокрЛП(ОбъектXDTO.Body.Document.idnumber);
		Исключение
			ОбъектXDTO = Неопределено;
		КонецПопытки;
		
		ЧтениеXML.Закрыть();

		УдалитьФайлы(ИмяФайлаСПутем);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//МиСофт
Функция ПолучитьСвязаныйДокумент21(Ссылка, ТипСвязи = Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСессии", "");
	Результат.Вставить("ИдентификаторСообщения", "");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязиДокументов.СвязанныйДокумент
	|ПОМЕСТИТЬ СвязаныйДокумент
	|ИЗ
	|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
	|ГДЕ
	|	СвязиДокументов.Документ = &Ссылка
	|	И СвязиДокументов.ТипСвязи = &ТипСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящееСообщениеСВД.ИдентификаторСообщения,
	|	ВходящееСообщениеСВД.ИдентификаторСессии,
	|	СвязаныйДокумент.СвязанныйДокумент,
	|	ВходящееСообщениеСВД.Ссылка
	|ИЗ
	|	СвязаныйДокумент КАК СвязаныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
	|		ПО СвязаныйДокумент.СвязанныйДокумент = ВходящееСообщениеСВД.Документ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	Если ТипСвязи = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СвязиДокументов.ТипСвязи = &ТипСвязи", "");
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 1 Тогда
		Результат.Вставить("ИдентификаторСессии", РезультатЗапроса[0].ИдентификаторСессии);
		Результат.Вставить("ИдентификаторСообщения", РезультатЗапроса[0].ИдентификаторСообщения);
		Результат.Вставить("ВходящийДокумент", РезультатЗапроса[0].Ссылка);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Мисофт
//Получим идентификатор входящего документа из пакета XDTO
Функция ПолучитьИДДокумента21(ВходящийДокумент)
	Результат = "";
	
	Если ВходящийДокумент.ФорматСообщения = Справочники.ФорматыСообщенийСВД.СообщениеПоГОСТ53898ВложенныеФайлы
		Или ВходящийДокумент.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
	
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВходящийДокумент);//.Ссылка);
		ФайлСсылка = Неопределено;
		
		Для Каждого Файл Из МассивФайлов Цикл
			Если Файл.ТекущаяВерсияРасширение = "xml" Тогда
				ФайлСсылка = Файл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФайлСсылка = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяВерсия = ФайлСсылка.ТекущаяВерсия;
		ТипХраненияФайла = ТекущаяВерсия.ТипХраненияФайла;
		
		ИмяФайлаСПутем = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ТекущаяВерсия);
		
		ПространствоИмен = РаботаССВД.ПолучитьПространствоИмен(ВходящийДокумент.ФорматСообщения);

		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
		ЧтениеXML = Новый ЧтениеXML;
		ИмяФайлаСПутем = РаботаССВД.ПолучитьФайлXMLДляЧтения(ИмяФайлаСПутем, ПространствоИмен);
	    ЧтениеXML.ОткрытьФайл(ИмяФайлаСПутем);
		Попытка
	    	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	    	ОбъектXDTO.Проверить();
			Результат = СокрЛП(ОбъектXDTO.Body.Document.idnumber);
		Исключение
			ОбъектXDTO = Неопределено;
		КонецПопытки;
		
		ЧтениеXML.Закрыть();

		УдалитьФайлы(ИмяФайлаСПутем);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьСписокФайловИзМассива21(ОбъектXDTO, МассивФайлов, Правило, ПространствоИмен, ФорматСообщения,
	XDTOПодписиЭП) Экспорт
	
	РазмерФайловВПакете = 0;
	
	ТипыПередаваемыхФайловНРег = НРег(Правило.ТипыПередаваемыхФайлов);
	
	МассивРасширений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТипыПередаваемыхФайловНРег, " ");
		
	НомерФайла = 1;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если Правило.МаксимальныйРазмерПередаваемогоФайла <> 0 
			И ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерПередаваемогоФайла Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Правило.МаксимальныйРазмерВсехПередаваемыхФайлов <> 0 
			И РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерВсехПередаваемыхФайлов Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Правило.ТипыПередаваемыхФайлов) Тогда
			
			Расширение = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
			
			Если МассивРасширений.Найти(Расширение) = Неопределено Тогда // НЕ нашли в массиве разрешенных расширений
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		ОбъектDMFile = СоздатьОбъект("DocTransfer", ПространствоИмен);
		ЗаполнитьXDTOФайл21(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла);
		
		ОбъектXDTO.DocTransfer.Добавить(ОбъектDMFile);
		
		РазмерФайловВПакете = РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер;
		НомерФайла = НомерФайла + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

// Заполняет один файл из структуры
Процедура ЗаполнитьXDTOФайл21(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла)
	//МиСофт+
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	ОбъектDMFile.name = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
	
	ОбъектDMFile.ordernum = НомерФайла;
	
	// Формат файла, определяющий программные средства его обработки (например, визуализации)
	// В качестве типа может использоваться mime тип, расширение файла и т.п., обеспечивающее просмотр 
	// этого файла стандартными процедурами операционной системы
	//ОбъектDMFile.type = ФайлСсылка.ТекущаяВерсияРасширение;
				
	Если ФайлСсылка.ТекущаяВерсия.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ФайлСсылка.ТекущаяВерсия);
		ОбъектXDTOData = СоздатьОбъект("Data", ПространствоИмен);
		ОбъектXDTOData.__content = Base64Строка(ХранилищеФайла.Получить());
		ОбъектDMFile.Data = ОбъектXDTOData;
		
	Иначе
		
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ОбъектXDTOData = СоздатьОбъект("Data", ПространствоИмен);
				ОбъектXDTOData.__content = Base64Строка(Новый ДвоичныеДанные(ПолныйПуть));
				ОбъектDMFile.Data = ОбъектXDTOData;
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					| Файл: ""%1.%2""'"),
					ВерсияСсылка.ПолноеНаименование,
					ВерсияСсылка.Расширение);
				
				ВызватьИсключение СообщениеОбОшибке;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
	// добавим все ЭП файла
	Если ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда
		
		ПодписьЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(ФайлСсылка.ТекущаяВерсия);
			
		Пока ПодписьЭП.Следующий() Цикл
			
			XDTOПодписьЭП = СоздатьОбъект("Signature", ПространствоИмен);
			
			XDTOПодписьЭП.__content		 = Base64Строка(ПодписьЭП.Подпись.Получить());
			XDTOПодписьЭП.keyid			 = СтрЗаменить(Строка(ПодписьЭП.УникальныйИдентификатор), "-", "");	//Идентификатор открытого ключа	
			XDTOПодписьЭП.signer		 = ПодписьЭП.КомуВыданСертификат;	// Имя подписавшего
			XDTOПодписьЭП.signtime		 = Формат(ПодписьЭП.ДатаПодписи, "ДФ=""yyyy-MM-dd'T'ЧЧ:мм:сс'Z'"""); 	// Дата-время подписи
			//XDTOПодписьЭП.operation_type
			//XDTOПодписьЭП.orig_signature
			
			ОбъектDMFile.Signature.Добавить(XDTOПодписьЭП); 
			
		КонецЦикла;
		
	КонецЕсли;	
	//МиСофт-
КонецПроцедуры

//МиСофт
Функция ПолучитьФайлXMLДляЗаписи21(ПутьКФайлуXML, ПространствоИмен)
	//МиСофт+
	ЗаписьФайла = Новый ТекстовыйДокумент();
	ЗаписьФайла.Прочитать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	ЧтениеФайла = Новый ТекстовыйДокумент();
	
	Для ТекущаяСтрока=1 По ЗаписьФайла.КоличествоСтрок() Цикл
		Стр = ЗаписьФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если ТекущаяСтрока = 1 И Найти(Стр, "<?xml") = 0 Тогда
			ЧтениеФайла.ДобавитьСтроку("<?xml version=""1.0"" encoding=""utf-8""?>");
		КонецЕсли;
		Если Найти(Стр, "<Envelop")>0 Тогда
			Если Найти(Стр, ПространствоИмен)>0 Тогда
				Стр = СтрЗаменить(Стр, "<Envelop xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'", "<Envelop");
				Стр = СтрЗаменить(Стр, "<Envelop xmlns="""+ПространствоИмен+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""", "<Envelop");
				ЗаписьФайла.ЗаменитьСтроку(ТекущаяСтрока, Стр);
			КонецЕсли;
			//Прервать;
		КонецЕсли;
		ЧтениеФайла.ДобавитьСтроку(Стр);
	КонецЦикла;
	
	ЧтениеФайла.Записать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	Возврат ПутьКФайлуXML;
	//МиСофт-
КонецФункции

Функция СоздатьДокументИсходящееСообщениеСВД21(Документ, Контрагент, Организация, Транспорт, 
	ФорматСообщения, ИдентификационныйНомерСообщения, ВидСообщенияСВД, 
	КодОшибки = 0, ИдентификаторСессии = "") Экспорт
	
	ИсходящееСообщениеСВД = Документы.ИсходящееСообщениеСВД.СоздатьДокумент();
	
	ИсходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
	ИсходящееСообщениеСВД.ИдентификаторСообщения = ИдентификационныйНомерСообщения;
	ИсходящееСообщениеСВД.ИдентификаторСессии = ИдентификаторСессии;
	Если Не ЗначениеЗаполнено(ИсходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ИсходящееСообщениеСВД.ИдентификаторСессии = ИсходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
		
	ИсходящееСообщениеСВД.ВидСообщения = ВидСообщенияСВД;
	ИсходящееСообщениеСВД.Транспорт = Транспорт;
	ИсходящееСообщениеСВД.ФорматСообщения = ФорматСообщения;
	ИсходящееСообщениеСВД.Получатель = Контрагент;
	ИсходящееСообщениеСВД.ОрганизацияОтправитель = Организация;
	ИсходящееСообщениеСВД.Документ = Документ;
	
	
	// если это не уведомление - запишем в историю
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент
			Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем, 
				ИдентификационныйНомерСообщения);		
		КонецЕсли;	
						
	КонецЕсли;		
	
	ИсходящееСообщениеСВД.Записать();
	Возврат ИсходящееСообщениеСВД.Ссылка;
	
КонецФункции

//МиСофт
// Создает документ ВходящееСообщениеСВД на основании xml файла ГОСТ 53898
Процедура СоздатьВходящееСообщениеСВДИзXML21(Транспорт, ФайлXML, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыДокумента = Новый Структура;
	Если ТипЗнч(ФайлXML) = Тип("Структура") Тогда
		ИдентификаторСообщения = СтрЗаменить(ФайлXML.ИмяФайла, "_ack", "");
		ИдентификаторСообщения = СтрЗаменить(ИдентификаторСообщения, "_data", "");
		ИдентификаторСообщения = СтрЗаменить(ИдентификаторСообщения, ".xml", "");
		ПараметрыДокумента.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	КонецЕсли;

	Если ПараметрыДокумента.Свойство("ИдентификаторСообщения") Тогда
		НайденноеСообщениеСВД = НайтиСообщениеСВДПоИдентификатору(ПараметрыДокумента.ИдентификаторСообщения);
		Если НайденноеСообщениеСВД = Неопределено Тогда
			ВходящееСообщениеСВД = Документы.ВходящееСообщениеСВД.СоздатьДокумент();
			ВходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
			ВходящееСообщениеСВД.ИдентификаторСообщения = ПараметрыДокумента.ИдентификаторСообщения;
			ВходящееСообщениеСВД.Записать();
		Иначе
			ВходящееСообщениеСВД = НайденноеСообщениеСВД.Ссылка.ПолучитьОбъект();
			ВходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
			ВходящееСообщениеСВД.Записать();
			ВзятьФайлИзБазы(ФайлXML, ВходящееСообщениеСВД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(МассивВложений) = Тип("Массив") И МассивВложений.Количество() > 0 Тогда
		ПараметрыДокумента.Вставить("МассивВложений", МассивВложений);
	КонецЕсли;
	Документ = ЗагрузитьДокументИзXML21(ФайлXML, ПараметрыДокумента, Транспорт, 
		ВходящееСообщениеСВД);
	
	Для Каждого Реквизит Из ВходящееСообщениеСВД.Метаданные().Реквизиты Цикл
		Если ПараметрыДокумента.Свойство(Реквизит.Имя) Тогда
			ВходящееСообщениеСВД[Реквизит.Имя] = ПараметрыДокумента[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ВходящееСообщениеСВД.ИдентификаторСессии = ВходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
	
	ВходящееСообщениеСВД.ТранспортПолучения = Транспорт;
	ВходящееСообщениеСВД.ФорматСообщения = Транспорт.ФорматСообщения;
	//Мисофт+
	Если ПараметрыДокумента.Свойство("ИдентификаторДокумента") Тогда
		ВходящееСообщениеСВД.ИдентификаторДокумента = ПараметрыДокумента.ИдентификаторДокумента;  
	КонецЕсли;
	//Мисофт-
	Если ПараметрыДокумента.Свойство("Отправитель") Тогда
		ВходящееСообщениеСВД.КонтрагентОтправитель = ПараметрыДокумента.Отправитель;  
	КонецЕсли;
	Если ПараметрыДокумента.Свойство("Организация") Тогда
		ВходящееСообщениеСВД.ОрганизацияПолучатель = ПараметрыДокумента.Организация;
	КонецЕсли;
	//Если ПараметрыДокумента.Свойство("ДатаФормирования") Тогда
	//	ВходящееСообщениеСВД.ДатаФормирования = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(
	//		ПараметрыДокумента.ДатаФормирования);
	//КонецЕсли;
	Если ПараметрыДокумента.Свойство("ДатаФормирования") Тогда
		СтроковаяДата = ПараметрыДокумента.ДатаФормирования;
		Символ = Сред(СтроковаяДата, 20, 1); 
		Если Символ = "+" Тогда
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "+0300","");
			ВходящееСообщениеСВД.ДатаФормирования = Дата(СтроковаяДата);
		Иначе	
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "-","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "T","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , ":","");
			СтроковаяДата = СтрЗаменить(СтроковаяДата , "Z","");
			ВходящееСообщениеСВД.ДатаФормирования = РаботаСФайламиКлиентСервер.ПолучитьМестноеВремя(СтроковаяДата);
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ВходящееСообщениеСВД.ОрганизацияПолучатель = Документ.Организация;
		ВходящееСообщениеСВД.Документ = Документ;
	Иначе
		ЗапросДляПоискаИсходящегоДокумента = Новый Запрос;
		ЗапросДляПоискаИсходящегоДокумента.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсходящееСообщениеСВД.Документ
			|ИЗ
			|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
			|ГДЕ
			|	ИсходящееСообщениеСВД.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
			|	И ИсходящееСообщениеСВД.ИдентификаторСессии = &ИдентификаторСессии
			|	И ИсходящееСообщениеСВД.ВидСообщения = &ВидСообщения";
			
		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ИдентификаторСессии", ВходящееСообщениеСВД.ИдентификаторСессии);
		ЗапросДляПоискаИсходящегоДокумента.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
		Выборка = ЗапросДляПоискаИсходящегоДокумента.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВходящееСообщениеСВД.Документ = Выборка.Документ;
		КонецЕсли;
	КонецЕсли;
	
	ВходящееСообщениеСВД.Записать();
	
	ПодписьЭПНеверна = Ложь;
	
	Если ЗначениеЗаполнено(Документ) Тогда
			
		// Запись информации о том, что документ получен по СВД.
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "ПолученПоСВД", Истина);
		
		Если ПараметрыДокумента.Свойство("ЕстьПодписиЭП") И ПараметрыДокумента.ЕстьПодписиЭП Тогда
			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена;
		Иначе
			СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет;
		КонецЕсли;
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Документ, "СтатусЭП", СтатусЭП);
		
	КонецЕсли;
	
	ПутьКФайлу = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлу, ФайлXML);
	ПутьКФайлу = ПолучитьФайлXMLДляЗаписи(ПутьКФайлу, ПараметрыДокумента.ПространствоИмен);
	Если ТипЗнч(ФайлXML) = Тип("Структура") Тогда
		Если Не ФайлXML.Свойство("Ссылка") Тогда
			РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВходящееСообщениеСВД.Ссылка, ПутьКФайлу, ФайлXML.ИмяФайла);
		КонецЕсли;
		ВходящееСообщениеСВД.ТекстОшибки = ФайлXML.СодержаниеОшибки;
		УдалитьФайлы(ФайлXML.ПутьКФайлу);
	Иначе
		РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ВходящееСообщениеСВД.Ссылка, ФайлXML, ПолучитьИмяДляЗаписиФайлаXML(ВходящееСообщениеСВД));
		УдалитьФайлы(ФайлXML);
	КонецЕсли;
	
	
	
	Если ПодписьЭПНеверна И ЗначениеЗаполнено(Документ) Тогда
		// формируем сообщение об ошибке
		ОбработатьОшибкуПроверкиЭПДокумента(Документ, Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
	КонецЕсли;	
	//МиСофт-
КонецПроцедуры

//МиСофт
// Загрузить Входящий документ из пакета в файле XML
Функция ЗагрузитьДокументИзXML21(ФайлXML, ПараметрыДокумента, Транспорт,
	ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	//МиСофт+
	//ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
	
	ОбъектXDTO = ПолучитьXDTO_РБ21(ФайлXML, ПространствоИмен);
	
	ПараметрыДокумента.Вставить("ПространствоИмен", ПространствоИмен);
	
	//МиСофт
	//BeginingChange
	Если Не ОбъектXDTO.Body.AddDocuments = Неопределено Тогда
		Если ОбъектXDTO.Header.Receiver.Количество() <= 100 Тогда
		
			СсылкаXDTO = ОбъектXDTO.Header.Receiver[0];
			
			Если СсылкаXDTO.Referred <> Неопределено Тогда
						
				СсылкаВОтправителе = СсылкаXDTO.Referred.idnumber;
				РегНомерВОтправителе = СсылкаXDTO.Referred.RegNumber.__content;
				ДатаВОтправителе = СсылкаXDTO.Referred.RegNumber.regdate;
							
			КонецЕсли;	
			
		КонецЕсли;	
				
		Если ЗначениеЗаполнено(СсылкаВОтправителе) Тогда
			ПараметрыДокумента.Вставить("НомерИДПервоначальный",СсылкаВОтправителе);
			ПараметрыДокумента.Вставить("РегНомерПервоначальный",РегНомерВОтправителе);
			ПараметрыДокумента.Вставить("РегДатаПервоначальный",ДатаВОтправителе);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВходящееСообщениеСВД.Ссылка,
			|	ВходящееСообщениеСВД.Документ
			|ИЗ
			|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
			|ГДЕ
			|	ВходящееСообщениеСВД.ИдентификаторДокумента = &ИдентификаторДокумента";
			Запрос.УстановитьПараметр("ИдентификаторДокумента",СсылкаВОтправителе);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокПервоначальный = Выборка.Документ;
			ПараметрыДокумента.Вставить("ДокументПервоначальный",ДокПервоначальный);
		ИначеЕсли ОбъектXDTO.Body.AddDocuments.Folder.Количество() <= 100 Тогда
			FolderXDTO = ОбъектXDTO.Body.AddDocuments.Folder[0];
			НомерИДПервоначальный = FolderXDTO.Referred.idnumber;
			РегНомерПервоначальный = FolderXDTO.Referred.RegNumber.__content;
			РегДатаПервоначальный = FolderXDTO.Referred.RegNumber.regdate;
			ПараметрыДокумента.Вставить("НомерИДПервоначальный",НомерИДПервоначальный);
			ПараметрыДокумента.Вставить("РегНомерПервоначальный",РегНомерПервоначальный);
			ПараметрыДокумента.Вставить("РегДатаПервоначальный",РегДатаПервоначальный);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВходящееСообщениеСВД.Ссылка,
			|	ВходящееСообщениеСВД.Документ
			|ИЗ
			|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
			|ГДЕ
			|	ВходящееСообщениеСВД.ИдентификаторДокумента = &ИдентификаторДокумента";
			Запрос.УстановитьПараметр("ИдентификаторДокумента",НомерИДПервоначальный);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокПервоначальный = Выборка.Документ;
			ПараметрыДокумента.Вставить("ДокументПервоначальный",ДокПервоначальный);
		КонецЕсли;
	КонецЕсли;
	//EndChange
			
	Дата = ОбъектXDTO.dtstamp;
	Символ = Сред(Дата, 20, 1);
	
	Если ОбъектXDTO = Неопределено ИЛИ Символ = "T" Тогда
		//МиСофт+
		Документ = ЗагрузитьДокументИЗПоврежденногоXML21(ФайлXML,ПространствоИмен, ПараметрыДокумента,Транспорт,ВходящееСообщениеСВД,МассивВложений);
		Если Документ = НЕОПРЕДЕЛЕНО Тогда
			ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки);
		КонецЕсли;
		//МиСофт-
	ИначеЕсли Не ОбъектXDTO.Body.AddDocuments = Неопределено И Не ОбъектXDTO.Body.Document = Неопределено  Тогда
		Если НомерИДПервоначальный = ОбъектXDTO.Body.Document.idnumber Тогда
			Документ = ЗагрузитьДокументИзXDTOВнутриДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений);
		Иначе
			Документ = ЗагрузитьДокументИзXDTOСДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений);
		КонецЕсли;
	ИначеЕсли Не ОбъектXDTO.Body.AddDocuments = Неопределено Тогда
		Документ = ЗагрузитьДокументИзXDTOТолькоДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений);
	Иначе
		Документ = ЗагрузитьДокументИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений);
	КонецЕсли;
	
	Возврат Документ;
	//МиСофт-	
КонецФункции

//МиСофт
Функция  ПолучитьXDTO_РБ21(ФайлXML, ПространствоИмен, ЭтоНовоеСообщение = Истина) Экспорт
	//МиСофт+
	ПутьКФайлуXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлу, ФайлXML);
	ИмяФайлаXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ИмяФайла, "");
	
	ИмяВременногоФайла = ПолучитьФайлXMLДляЧтения21(ПутьКФайлуXML, ПространствоИмен);
	
	ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
	Исключение
		//ОбъектXDTO = Неопределено;
		ФайлXML.СодержаниеОшибки = ИнформацияОбОшибке().Причина.Описание;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Возврат ОбъектXDTO;
	//МиСофт-
КонецФункции

//МиСофт
Функция ПолучитьФайлXMLДляЧтения21(ПутьКФайлуXML, ПространствоИмен) Экспорт
	//МиСофт+
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьФайла = Новый ТекстовыйДокумент();
	ЗаписьФайла.Прочитать(ПутьКФайлуXML, КодировкаТекста.UTF8);
	Для ТекущаяСтрока=1 По ЗаписьФайла.КоличествоСтрок() Цикл
		Стр = ЗаписьФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если Найти(Стр, "<Envelop")>0 Тогда
			Если Найти(Стр, ПространствоИмен)=0 Тогда
				Стр = СтрЗаменить(Стр, "<Envelop", "<Envelop xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'");
				НачалоРасширения = Найти(Стр, "<Expansion");
				Если НачалоРасширения > 0 Тогда
					КонецРасширения = Найти(Стр, "</Expansion>");
					Если КонецРасширения > 0 Тогда
						Расширение = Сред(Стр, НачалоРасширения, КонецРасширения + 12 - НачалоРасширения);
						Стр = СтрЗаменить(Стр, Расширение, "");
					КонецЕсли;
				КонецЕсли;
				ЗаписьФайла.ЗаменитьСтроку(ТекущаяСтрока, Стр);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗаписьФайла.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Возврат ИмяВременногоФайла;
	//МиСофт-
КонецФункции

Функция ЗагрузитьДокументИзXDTOТолькоДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	ЗаполнитьПараметрыЗаголовкаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	// если это документ, а не уведомление
	Если ОбъектXDTO.Header.msg_type <> 0 Тогда
		
		Документ = Неопределено;
	
		Если ВходящееСообщениеСВД.Документ = Неопределено Тогда
			ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
			ДокументОбъект.Записать();
		Иначе 
			ДокументОбъект = ВходящееСообщениеСВД.Документ.ПолучитьОбъект();
		КонецЕсли;
		Документ = ДокументОбъект.Ссылка;
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
					
			ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
			
			//Проверка подписей вложений
			МассивДопСозданныхФайлов = Новый Массив;
			МассивОшибок = Новый Массив;
			
			Для Каждого ОбъектXDTOДопФайл Из ОбъектXDTO.Body.AddDocuments.Folder[0].DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOДопФайл.Data.__content) Тогда
					ФайлСсылка = ДобавитьФайл(ПараметрыДокумента.ДокументПервоначальный, ОбъектXDTOДопФайл);
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOДопФайл.Data.referenceid) Тогда
								ФайлСсылка = ДобавитьФайл(ПараметрыДокумента.ДокументПервоначальный, ОбъектXDTOДопФайл, Вложение.Данные);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивДопСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOДопФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыДокумента.Вставить("ДопМатериалы", МассивДопСозданныхФайлов);
			ПараметрыДокумента.Вставить("Документ", Документ);
			
			//Если Не ПараметрыДокумента.Свойство("ОшибкиПодписи") Тогда
			//	Документ = СоздатьВходящийИзXDTO21(ОбъектXDTO, ПараметрыДокумента, 
			//		ПараметрыДокумента.Отправитель, ПараметрыДокумента.Организация, МассивВложений, МассивОшибок);
			//КонецЕсли;
								
		
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если Не ОбъектXDTO.Body.AddDocuments = Неопределено Тогда
			
			СформироватьПодтверждениеПолученияДоп(Документ, ПараметрыДокумента, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;	
			
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Body.Acknowledgement.msg_id;
		КодОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
		ИначеЕсли ОбъектXDTO.Body.Acknowledgement.ack_type = 2 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации;
		Иначе                         
			ВидСообщения = Перечисления.ВидыСообщенийСВД.Прочее;
		КонецЕсли;		
		
		ПараметрыДокумента.Вставить("ВидСообщения", ВидСообщения);
		
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = СообщениеСВД.Документ;
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Body.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
							ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
								Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
								
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
												
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.Отправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
						
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				Если КодОшибки = 2 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации);
				ИначеЕсли КодОшибки = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент);
				Иначе
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				КонецЕсли;
				
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, ТекстОшибки);
					
			КонецЕсли;
			
		КонецЕсли;		

	КонецЕсли;

	Возврат Документ;
	//МиСофт-
КонецФункции

Функция ЗагрузитьДокументИзXDTOСДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	ЗаполнитьПараметрыЗаголовкаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	// если это документ, а не уведомление
	Если ОбъектXDTO.Header.msg_type <> 0 Тогда
		
		Документ = Неопределено;
	
		ЗаполнитьПараметрыДокументаИзXDTO21(ОбъектXDTO.Body, ПараметрыДокумента, Транспорт);
		
		Если ВходящееСообщениеСВД.Документ = Неопределено Тогда
			ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
			ДокументОбъект.Записать();
		Иначе 
			ДокументОбъект = ВходящееСообщениеСВД.Документ.ПолучитьОбъект();
		КонецЕсли;
		Документ = ДокументОбъект.Ссылка;
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		Если ОбъектXDTO.Body.Document.type = 0 Или ОбъектXDTO.Body.Document.type = 1 Тогда // 0 - исходящий, 1 - входящий
			
			ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
			
			//Проверка подписей вложений
			МассивСозданныхФайлов = Новый Массив;
			МассивДопСозданныхФайлов = Новый Массив;
			МассивОшибок = Новый Массив;
			
			Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.Body.Document.DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOФайл.Data.__content) Тогда
					ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл);
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOФайл.Data.referenceid) Тогда
								ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл, Вложение.Данные);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОбъектXDTOДопФайл Из ОбъектXDTO.Body.AddDocuments.Folder[0].DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOДопФайл.Data.__content) Тогда
					//Kim
					//BeginingChange
					ФайлСсылка = ДобавитьФайл(ПараметрыДокумента.ДокументПервоначальный, ОбъектXDTOДопФайл);
					//EndChange
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOДопФайл.Data.referenceid) Тогда
								//Kim
								//BeginingChange
								ФайлСсылка = ДобавитьФайл(ПараметрыДокумента.ДокументПервоначальный, ОбъектXDTOДопФайл, Вложение.Данные);
								//EndChange
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивДопСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOДопФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыДокумента.Вставить("ДопМатериалы", МассивДопСозданныхФайлов);
			ПараметрыДокумента.Вставить("Файлы", МассивСозданныхФайлов);
			ПараметрыДокумента.Вставить("Документ", Документ);
			
			Если Не ПараметрыДокумента.Свойство("ОшибкиПодписи") Тогда
				Документ = СоздатьВходящийИзXDTO21(ОбъектXDTO, ПараметрыДокумента, 
					ПараметрыДокумента.Отправитель, ПараметрыДокумента.Организация, МассивВложений, МассивОшибок);
			КонецЕсли;
								
		КонецЕсли;
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если ОбъектXDTO.Header.msg_acknow = 2 Тогда
			
			СформироватьПодтверждениеПолучения21(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;
			
		Если Не ОбъектXDTO.Body.AddDocuments = Неопределено Тогда
			
			СформироватьПодтверждениеПолученияДоп(Документ, ПараметрыДокумента, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;
			
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Body.Acknowledgement.msg_id;
		КодОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
		ИначеЕсли ОбъектXDTO.Body.Acknowledgement.ack_type = 2 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации;
		Иначе                         
			ВидСообщения = Перечисления.ВидыСообщенийСВД.Прочее;
		КонецЕсли;		
		
		ПараметрыДокумента.Вставить("ВидСообщения", ВидСообщения);
		
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = СообщениеСВД.Документ;
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Body.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
							ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
								Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
								
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
												
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.Отправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
						
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				Если КодОшибки = 2 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации);
				ИначеЕсли КодОшибки = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент);
				Иначе
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				КонецЕсли;
				
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, ТекстОшибки);
					
			КонецЕсли;
			
		КонецЕсли;		

	КонецЕсли;

	Возврат Документ;
	//МиСофт-
КонецФункции

Функция ЗагрузитьДокументИзXDTOВнутриДоп21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	ЗаполнитьПараметрыЗаголовкаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	// если это документ, а не уведомление
	Если ОбъектXDTO.Header.msg_type <> 0 Тогда
		
		Документ = Неопределено;
	
		ЗаполнитьПараметрыДокументаИзXDTO21(ОбъектXDTO.Body, ПараметрыДокумента, Транспорт);
		
		Если ВходящееСообщениеСВД.Документ = Неопределено Тогда
			ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
			ДокументОбъект.Записать();
		Иначе 
			ДокументОбъект = ВходящееСообщениеСВД.Документ.ПолучитьОбъект();
		КонецЕсли;
		Документ = ДокументОбъект.Ссылка;
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		Если ОбъектXDTO.Body.Document.type = 0 Или ОбъектXDTO.Body.Document.type = 1 Тогда // 0 - исходящий, 1 - входящий
			
			ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
			
			//Проверка подписей вложений
			МассивСозданныхФайлов = Новый Массив;
			МассивДопСозданныхФайлов = Новый Массив;
			МассивОшибок = Новый Массив;
			
			Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.Body.Document.DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOФайл.Data.__content) Тогда
					ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл);
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOФайл.Data.referenceid) Тогда
								ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл, Вложение.Данные);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОбъектXDTOДопФайл Из ОбъектXDTO.Body.AddDocuments.Folder[0].DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOДопФайл.Data.__content) Тогда
					//Kim
					//BeginingChange
					ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOДопФайл);
					//EndChange
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOДопФайл.Data.referenceid) Тогда
								//Kim
								//BeginingChange
								ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOДопФайл, Вложение.Данные);
								//EndChange
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивДопСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOДопФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыДокумента.Вставить("ДопМатериалы", МассивДопСозданныхФайлов);
			ПараметрыДокумента.Вставить("Файлы", МассивСозданныхФайлов);
			ПараметрыДокумента.Вставить("Документ", Документ);
			
			Если Не ПараметрыДокумента.Свойство("ОшибкиПодписи") Тогда
				Документ = СоздатьВходящийИзXDTO21(ОбъектXDTO, ПараметрыДокумента, 
					ПараметрыДокумента.Отправитель, ПараметрыДокумента.Организация, МассивВложений, МассивОшибок);
			КонецЕсли;
								
		КонецЕсли;
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если ОбъектXDTO.Header.msg_acknow = 2 Тогда
			
			СформироватьПодтверждениеПолучения21(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;
			
		Если Не ОбъектXDTO.Body.AddDocuments = Неопределено Тогда
			
			СформироватьПодтверждениеПолученияДоп(Документ, ПараметрыДокумента, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;
			
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Body.Acknowledgement.msg_id;
		КодОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
		ИначеЕсли ОбъектXDTO.Body.Acknowledgement.ack_type = 2 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации;
		Иначе                         
			ВидСообщения = Перечисления.ВидыСообщенийСВД.Прочее;
		КонецЕсли;		
		
		ПараметрыДокумента.Вставить("ВидСообщения", ВидСообщения);
		
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = СообщениеСВД.Документ;
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Body.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
							ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
								Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
								
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
												
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.Отправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
						
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				Если КодОшибки = 2 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации);
				ИначеЕсли КодОшибки = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент);
				Иначе
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				КонецЕсли;
				
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, ТекстОшибки);
					
			КонецЕсли;
			
		КонецЕсли;		

	КонецЕсли;

	Возврат Документ;
	//МиСофт-
КонецФункции

Функция ЗагрузитьДокументИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт, ВходящееСообщениеСВД, МассивВложений = Неопределено) Экспорт
	//МиСофт+
	ЗаполнитьПараметрыЗаголовкаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт);
	
	// если это документ, а не уведомление
	Если ОбъектXDTO.Header.msg_type <> 0 Тогда
		
		Документ = Неопределено;
	
		ЗаполнитьПараметрыДокументаИзXDTO21(ОбъектXDTO.Body, ПараметрыДокумента, Транспорт);
		
		Если ВходящееСообщениеСВД.Документ = Неопределено Тогда
			ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
			ДокументОбъект.Записать();
		Иначе 
			ДокументОбъект = ВходящееСообщениеСВД.Документ.ПолучитьОбъект();
		КонецЕсли;
		Документ = ДокументОбъект.Ссылка;
		
		// Тип документа - Значение = 0 для исходящего документа.
		// Значение = 1 для входящего документа. 
		// Значение = 2 для внутреннего документа
		
		Если ОбъектXDTO.Body.Document.type = 0 Или ОбъектXDTO.Body.Document.type = 1 Тогда // 0 - исходящий, 1 - входящий
			
			ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
			
			//Проверка подписей вложений
			МассивСозданныхФайлов = Новый Массив;
			МассивОшибок = Новый Массив;
			
			Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.Body.Document.DocTransfer Цикл
				//МиСофт+                 
				Если ЗначениеЗаполнено(ОбъектXDTOФайл.Data.__content) Тогда
					ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл);
				Иначе
					Если ПараметрыДокумента.Свойство("МассивВложений") Тогда
						Для Каждого Вложение Из ПараметрыДокумента.МассивВложений Цикл
							Если Найти(Вложение.ИмяФайла, ОбъектXDTOФайл.Data.referenceid) Тогда
								ФайлСсылка = ДобавитьФайл(Документ, ОбъектXDTOФайл, Вложение.Данные);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				МассивСозданныхФайлов.Добавить(ФайлСсылка);
				//МиСофт-
							
				// читаем подписи ЭП
				Если ПараметрыДокумента.ФорматСообщения = Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот Тогда	
					
					МассивДанныхДляЗанесенияВБазу = Новый Массив;
					Для Каждого ПодписьXDTO Из ОбъектXDTOФайл.Signature Цикл
						
						//МиСофт+
						ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата, УстановившийПодпись");
						
						ДанныеПодписи.ОбъектСсылка = ФайлСсылка;
						
						КомуВыданСертификат = СтрЗаменить(ПодписьXDTO.signer, """""", "'");  
						КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, """", "");					
						ДанныеПодписи.КомуВыданСертификат = СтрЗаменить(КомуВыданСертификат, "'", """");
						ДанныеПодписи.ДатаПодписи = ПодписьXDTO.signtime;
						ДанныеПодписи.НоваяПодписьДвоичныеДанные = ПодписьXDTO.__content;
						//МиСофт-
						ДанныеПодписи.ИмяФайлаПодписи = "";
						ДанныеПодписи.Отпечаток = "";
						ДанныеПодписи.УстановившийПодпись = ПользователиКлиентСервер.ТекущийПользователь();
						
						МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
						
						РаботаСЭП.ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВБазу, ФайлСсылка);
						
						Если МассивДанныхДляЗанесенияВБазу.Количество() <> 0 Тогда
							ПараметрыДокумента.Вставить("ЕстьПодписиЭП", Истина);
							
						КонецЕсли;		
						
					КонецЦикла;
					
					ПараметрыДокумента.Вставить("Подписи", МассивДанныхДляЗанесенияВБазу);
					
					Если ПараметрыДокумента.Подписи.Количество()=0 Тогда//Если Не ПараметрыДокумента.Свойство("ЕстьПодписиЭП") Тогда
						ОшибкаПодписи = Новый Структура("Документ, КодОшибки, Ошибка");
						ОшибкаПодписи.Документ = ФайлСсылка.Наименование+"."+ФайлСсылка.ТекущаяВерсияРасширение;
						ОшибкаПодписи.КодОшибки = "-22";
						ОшибкаПодписи.Ошибка = "Отсутствует ЭЦП для одного или нескольких документов (документ относится к категории нерегистрируемых).";
						
						МассивОшибок.Добавить(ОшибкаПодписи);
						//ПараметрыДокумента.Вставить("ОшибкиПодписи", МассивОшибок);
					КонецЕсли;                                                                                                                        
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыДокумента.Вставить("Файлы", МассивСозданныхФайлов);
			ПараметрыДокумента.Вставить("Документ", Документ);
			
			Если Не ПараметрыДокумента.Свойство("ОшибкиПодписи") Тогда
				Документ = СоздатьВходящийИзXDTO21(ОбъектXDTO, ПараметрыДокумента, 
					ПараметрыДокумента.Отправитель, ПараметрыДокумента.Организация, МассивВложений, МассивОшибок);
			КонецЕсли;
								
		КонецЕсли;
		
		// Если это документ и установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
		Если ОбъектXDTO.Header.msg_acknow = 2 Тогда
			
			СформироватьПодтверждениеПолучения21(Документ, ПараметрыДокумента.ИдентификационныйНомерСообщения, 
				Транспорт, ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, МассивОшибок);
				
		КонецЕсли;	
			
	Иначе // это уведомление
		
		ИдентификаторСессии = ОбъектXDTO.Body.Acknowledgement.msg_id;
		КодОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode;
		СообщениеСВД = НайтиИсходящееСообщениеСВДПоИдентификатору(ИдентификаторСессии);
		
		ПараметрыДокумента.Вставить("ИдентификаторСессии", ИдентификаторСессии);
		Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
		ИначеЕсли ОбъектXDTO.Body.Acknowledgement.ack_type = 2 Тогда
			ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации;
		Иначе                         
			ВидСообщения = Перечисления.ВидыСообщенийСВД.Прочее;
		КонецЕсли;		
		
		ПараметрыДокумента.Вставить("ВидСообщения", ВидСообщения);
		
		
		// На инициирующей стороне запишем в историю подтверждение
		Если ЗначениеЗаполнено(СообщениеСВД) Тогда
			
			ОтправляемыйДокумент = СообщениеСВД.Документ;
			
			ЭтоСообщениеОбОшибке = Ложь;
			ТекстОшибки = "";
			Если ОбъектXDTO.Body.Acknowledgement.AckResult.Количество() <> 0
				И ОбъектXDTO.Body.Acknowledgement.AckResult[0].errorcode <> 0 Тогда
				
				ТекстОшибки = ОбъектXDTO.Body.Acknowledgement.AckResult[0].__content;
				ЭтоСообщениеОбОшибке = Истина;
				
			КонецЕсли;
			
			Если Не ЭтоСообщениеОбОшибке Тогда
				
				СостояниеДокумента = Неопределено;
				Если ОбъектXDTO.Body.Acknowledgement.ack_type = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке);
				Иначе	
					
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем;
					
					// заполним регистрационный номер получателя
					Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
						
						УчитыватьВходящийНомерИДатуПолучателя = 
							ПолучитьФункциональнуюОпцию("УчитыватьВходящийНомерИДатуПолучателя", 
								Новый Структура("ВидИсходящегоДокумента", ОтправляемыйДокумент.ВидДокумента));
								
						Если УчитыватьВходящийНомерИДатуПолучателя	Тогда
												
							// Документ записывается, даже если он заблокирован на редактирование карточкой,
							// т.к. входящий номер, присвоенный получателем - очень важная информация, которую нельзя потерять.
							ДокументОбъект = ОтправляемыйДокумент.ПолучитьОбъект();
							
							Для Каждого Строка Из ДокументОбъект.Получатели Цикл
								Если Строка.Получатель = ПараметрыДокумента.Отправитель Тогда
									Строка.ВходящийНомер = ОбъектXDTO.Acknowledgement.RegNumber.__content;
									Строка.ВходящаяДата = ОбъектXDTO.Acknowledgement.RegNumber.regdate;
								КонецЕсли;
							КонецЦикла;
						
							ДокументОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;	
					
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации);
					
				КонецЕсли;
				
			Иначе
				Если КодОшибки = 2 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации);
				ИначеЕсли КодОшибки = 1 Тогда
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.НерегистрируетсяПолучателем;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент);
				Иначе
					СостояниеДокумента = Справочники.ВидыСостоянийДокументовВСВД.Ошибка;
					ПараметрыДокумента.Вставить("ВидСообщения", Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке);
				КонецЕсли;
				
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ОтправляемыйДокумент) Тогда
					
				ЗаписатьВИсториюСостоянийСВД(ОтправляемыйДокумент, 
					ВходящееСообщениеСВД,
					СостояниеДокумента,
					ИдентификаторСессии, ТекстОшибки);
					
			КонецЕсли;
			
		КонецЕсли;		

	КонецЕсли;

	Возврат Документ;
	//МиСофт-
КонецФункции

Процедура ЗаполнитьПараметрыЗаголовкаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	//МиСофт+
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПараметрыДокумента.Вставить("ФорматСообщения", ФорматСообщения);
	
	Заголовок = ОбъектXDTO.Header;
	
	// Получатель
	Организация = Неопределено;
	ПользовательПолучатель = "";
	Для Каждого Получатель Из Заголовок.Receiver Цикл
		Организация = ПолучитьОрганизациюПоНаименованиюВСВД(Получатель.id, Транспорт);
		Если НЕ Организация = Неопределено Тогда
			//Если Получатель.Установлено("sys_id") Тогда  
			//	ПользовательПолучатель = ОбъектXDTO.to_org_id;
			//КонецЕсли;	
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПараметрыДокумента.Вставить("Организация", Организация);
	ПараметрыДокумента.Вставить("ПользовательПолучатель", ПользовательПолучатель);
	
	// Отправитель
	Контрагент = ПолучитьКонтрагентаПоНаименованиюВСВД21(Заголовок.Sender, Транспорт);
	ПараметрыДокумента.Вставить("Отправитель", Контрагент);
	
	ПараметрыДокумента.Вставить("ДатаФормирования", ОбъектXDTO.dtstamp);
	
	ПараметрыДокумента.Вставить("ИдентификационныйНомерСообщения", ОбъектXDTO.msg_id);
	
	ПараметрыДокумента.Вставить("ПодразделениеОтправитель", "");
	
	ПараметрыДокумента.Вставить("ПодразделениеПолучатель", "");
	
	ПользовательОтправитель = "";
	Если Заголовок.Sender.Установлено("sys_id") Тогда  
		ПользовательОтправитель = Заголовок.Sender.sys_id;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("ПользовательОтправитель", ПользовательОтправитель);
		
	НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	Если Не ЗначениеЗаполнено(Заголовок.msg_acknow) Тогда
		 Заголовок.msg_acknow = 2;
    КонецЕсли;
	Если Заголовок.msg_acknow = 0 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	ИначеЕсли Заголовок.msg_acknow = 1 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
	ИначеЕсли Заголовок.msg_acknow = 2 Тогда
		НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
	КонецЕсли;	
	ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", НеобходимостьПосылкиУведомлений);
	//МиСофт-
КонецПроцедуры

//МиСофт
Функция ПолучитьКонтрагентаПоНаименованиюВСВД21(ОбъектXDTO, Транспорт)
	//МиСофт+
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиСВД.Адресат
		|ИЗ
		|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		|ГДЕ
		|	УчастникиСВД.Транспорт = &Транспорт
		|	И УчастникиСВД.ИмяАдресата ПОДОБНО &ИмяАдресата
		|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Контрагенты";
		
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ОбъектXDTO.id);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Адресат;
	
	Если Результат = Неопределено Тогда
		ОтправительНайден = НайтиУчастникаСВДПоКоду(ОбъектXDTO.id);
		Если ОтправительНайден = Неопределено Тогда
			Результат = Справочники.Корреспонденты.СоздатьЭлемент();
			//Результат = Справочники.Контрагенты.СоздатьЭлемент();
			Результат.Наименование = ОбъектXDTO.name;
			Результат.ПолноеНаименование = ОбъектXDTO.name;
			//Результат.НаименованиеПолное = ОбъектXDTO.name;
			Результат.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Результат.Записать();
			Результат = Результат.Ссылка;
		Иначе
			Если ТипЗнч(ОтправительНайден) = Тип("СправочникСсылка.Корреспонденты") Тогда
			//Если ТипЗнч(ОтправительНайден) = Тип("СправочникСсылка.Контрагенты") Тогда
				Результат = ОтправительНайден;
			Иначе
			Результат = Справочники.Корреспонденты.СоздатьЭлемент();
			//Результат = Справочники.Контрагенты.СоздатьЭлемент();
				Результат.Наименование = ОтправительНайден.Наименование;
				Результат.ЮрФизЛицо = ОтправительНайден.ЮрФизЛицо;
				Результат.ПолноеНаименование = ОтправительНайден.НаименованиеПолное;
				//Результат.НаименованиеПолное = ОтправительНайден.НаименованиеПолное;
				Результат.ИНН = ОтправительНайден.ИНН;
				Результат.Записать();
				Результат = Результат.Ссылка;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Адресат = Результат;
		МенеджерЗаписи.ИмяАдресата = ОбъектXDTO.id;
		МенеджерЗаписи.Транспорт = Транспорт;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат Результат;
	//МиСофт-
	
КонецФункции

Процедура ЗаполнитьПараметрыДокументаИзXDTO21(ОбъектXDTO, ПараметрыДокумента, Транспорт)
	
	 ПараметрыДокумента.Вставить("ТипПоступившегоДокумента", ОбъектXDTO.Document.type);
	 ПараметрыДокумента.Вставить("ВидПоступившегоДокумента", ОбъектXDTO.Document.kind);
	 //Мисофт+
	ПараметрыДокумента.Вставить("ИдентификаторДокумента",   ОбъектXDTO.Document.idnumber);
	//Мисофт-	
	
КонецПроцедуры

// Создать Входящий документ из XDTO пакета
Функция СоздатьВходящийИзXDTO21(ОбъектXDTOEnvelop, ПараметрыДокумента, Контрагент, Организация, МассивВложений = Неопределено, МассивОшибок = Неопределено) Экспорт           
	//МиСофт+
	ОбъектXDTO = ОбъектXDTOEnvelop.Body.Document;

	ФорматСообщения = ПараметрыДокумента.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	//Документ = Справочники.ВходящиеДокументы.СоздатьЭлемент();
	Документ = ПараметрыДокумента.Документ.ПолучитьОбъект();
	
	ЗаполнитьСсылочныйРеквизит21(Документ.ВидДокумента, ОбъектXDTO.kind, "ВидДокумента", 
		Контрагент, Организация);
	ЗаполнитьСсылочныйРеквизит21(Документ.ГрифДоступа, ОбъектXDTO.Confident.__content, "ГрифДоступа", 
		Контрагент, Организация);
	
	//Документ.Заголовок = ОбъектXDTOEnvelop.subject;
	//Мисофт+
	Документ.Заголовок = ОбъектXDTO.title;
	//Мисофт-
	Если Не ЗначениеЗаполнено(Документ.Заголовок) Тогда
		Документ.Заголовок = "Без имени";
	КонецЕсли;	
	
	Документ.Содержание = ОбъектXDTO.annotation;
	Документ.КоличествоЛистов = ОбъектXDTO.pages;
	Документ.КоличествоЭкземпляров = 1;
	
	Документ.ИсходящийНомер = ОбъектXDTO.RegNumber.__content;
	Документ.ИсходящаяДата = ОбъектXDTO.RegNumber.regdate;
	
	Документ.СпособПолучения = Справочники.СпособыДоставки.СВД;
	
	Если ОбъектXDTOEnvelop.Header.Receiver.Количество() <= 100 Тогда
		
		АдресатXDTO = ОбъектXDTOEnvelop.Header.Receiver[0];
		
		Если АдресатXDTO.Organization <> Неопределено Тогда
			
			Документ.Организация = Организация;
			
			Если АдресатXDTO.Organization.OfficialPerson.Количество() > 0 Тогда
				
				ДолжностноеЛицо = АдресатXDTO.Organization.OfficialPerson[0];
				
				ЗаполнитьСсылочныйРеквизит21(Документ.Адресат, ДолжностноеЛицо.Name.__content, "Адресат", 
					Контрагент, Организация);
				
				Если ДолжностноеЛицо.Official.Количество() > 0 Тогда
					
					Если ДолжностноеЛицо.Official[0].department <> Неопределено Тогда
						ЗаполнитьСсылочныйРеквизит21(Документ.Подразделение, ДолжностноеЛицо.Official[0].department, 
							"Подразделение", Контрагент, Организация);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ОбъектXDTO.Validator.Количество() > 0 Тогда
		ПодписалXDTO = ОбъектXDTO.Validator[0];
		КонтактноеЛицо = Неопределено;
		Если НЕ ПодписалXDTO.PrivatePersonWithSign = Неопределено Тогда
			КонтактноеЛицо = ПодписалXDTO.PrivatePersonWithSign.Name.__content;
		ИначеЕсли НЕ ПодписалXDTO.OrganizationWithSign = Неопределено Тогда
			КонтактноеЛицо = ПодписалXDTO.OrganizationWithSign.OfficialPersonWithSign[0].Name.__content;
		КонецЕсли;
		Если НЕ КонтактноеЛицо = Неопределено Тогда
			ЗаполнитьСсылочныйРеквизит21(Документ.Подписал, КонтактноеЛицо, 
			"Подписал", Контрагент, Организация);
		КонецЕсли;
	КонецЕсли;	
	
	Документ.Отправитель = Контрагент;
	
	ЗаполнитьСсылочныйРеквизит21(Документ.ВопросДеятельности, "", "ВопросДеятельности", 
		Контрагент, Организация);
		
	Документ.ДополнительныеСвойства.Вставить("ПолученПоСВД", Истина);	
	Документ.Записать();
	
	//МассивСозданныхФайлов = Новый Массив;
	//
	//
	////!!!!?????
	//Для Каждого ОбъектXDTOФайл Из ОбъектXDTO.DocTransfer Цикл
	//	ФайлСсылка = ДобавитьФайл(Документ.Ссылка, ОбъектXDTOФайл);
	//	МассивСозданныхФайлов.Добавить(ФайлСсылка);
	//КонецЦикла;	
	
	Если ОбъектXDTOEnvelop.Header.msg_type = 3 Тогда // Документ-ответ
		
		ПараметрыДокумента.Вставить("ДокументОтвет", Истина);
		
		Для Каждого СсылкаНаДокументXDTO Из ОбъектXDTO.Referred Цикл
			
			Если СсылкаНаДокументXDTO.RegNumber <> Неопределено Тогда
				РегистрационныйНомер = СсылкаНаДокументXDTO.RegNumber.__content;
				ДатаРегистрации = СсылкаНаДокументXDTO.RegNumber.regdate;
				СсылкаНаДокумент = НайтиИсходящийДокументПоРегистрационномуНомеру(РегистрационныйНомер, ДатаРегистрации);
				
				Если СсылкаНаДокумент <> Неопределено Тогда
					
					Попытка
						// Установка связи
						СвязиДокументов.УстановитьСвязь(Документ.Ссылка, Неопределено, СсылкаНаДокумент, 
							Справочники.ТипыСвязей.ПолученВОтветНа);
					Исключение
							
						ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Создание связи для документа, поступившего по СВД'",
								ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
							УровеньЖурналаРегистрации.Ошибка,,
							Документ.Ссылка,
							ОписаниеОшибки);
							
					КонецПопытки;	
						
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	МенеджерЗаписиРегистра = РегистрыСведений.ПроверкаЗагруженныхДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если Не МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Объект = Документ.Ссылка;
		МенеджерЗаписиРегистра.Проверен = Ложь;
		МенеджерЗаписиРегистра.ДатаЗагрузки = ТекущаяДатаСеанса();
		МенеджерЗаписиРегистра.Записать();
	КонецЕсли;
	
	// Запись информации о том, что документ получен по СВД.
	МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Документ;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Объект = Документ;
	КонецЕсли;
	МенеджерЗаписи.ПолученПоСВД = Истина;
	
	Если ПараметрыДокумента.Свойство("ЕстьПодписиЭП") И ПараметрыДокумента.ЕстьПодписиЭП Тогда
		
		МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНеПроверена;
		
		ВыполнятьПроверкуЭПНаСервере = ПолучитьВыполнятьПроверкуЭПНаСервере21();
		Если ВыполнятьПроверкуЭПНаСервере Тогда
			
			ЭПВерна = ПодписьЭПВерна21(Документ, МассивОшибок);
			Если ЭПВерна Тогда
				МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьДействительна;
			Иначе	
				МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписьНедействительна;
				ПодписьЭПНеверна = Истина;
			КонецЕсли;	
			
			МенеджерЗаписи.ДатаПроверкиЭП = ТекущаяДатаСеанса();
			//МенеджерЗаписи.СостояниеСВД = Справочники.ВидыСостоянийДокументовВСВД.Новый;
			
		КонецЕсли;			
		                          
	Иначе	
		МенеджерЗаписи.СтатусЭП = Перечисления.СтатусПроверкиЭП.ПодписиНет;
	КонецЕсли;	
	
	МенеджерЗаписи.Записать();
	
	Возврат Документ.Ссылка;
	//МиСофт-
КонецФункции

// Заполняет ссылочный реквизит по строке
Процедура ЗаполнитьСсылочныйРеквизит21(Реквизит, ЗначениеПоля, ИмяПоля, Контрагент, Организация)
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Справочники.Корреспонденты.ПустаяСсылка(), 
		//Справочники.Контрагенты.ПустаяСсылка(), 
		Справочники.Организации.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Контрагент, 
		Справочники.Организации.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Справочники.Корреспонденты.ПустаяСсылка(), 
		//Справочники.Контрагенты.ПустаяСсылка(), 
		Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПрочитатьСсылочныйРеквизит(Реквизит, ЗначениеПоля, ИмяПоля, 
		Контрагент, 
		Организация) Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ПравилаЗаполненияПолейДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Контрагент = Контрагент;
	МенеджерЗаписи.ИмяПоля = ИмяПоля;
	МенеджерЗаписи.СтроковоеЗначение = ЗначениеПоля;
	МенеджерЗаписи.Записать(); // запишем пустое значение
	
КонецПроцедуры

Функция ПолучитьВыполнятьПроверкуЭПНаСервере21() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВыполнятьПроверкуЭПНаСервере = Константы.ПроверятьЭлектронныеПодписиНаСервере.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ВыполнятьПроверкуЭПНаСервере;
	
КонецФункции

Функция ПодписьЭПВерна21(Документ, МассивОшибок)
	
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	Контекст = Новый Структура;
	ОписанияПрограмм = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ОписанияПрограмм;
	Контекст.Вставить("ОписанияПрограмм",  ОписанияПрограмм);
	Контекст.Вставить("ОписаниеПрограммы", Контекст.ОписанияПрограмм[0]);
		
	
	ПровайдерЭП = Контекст.ОписаниеПрограммы.ИмяПрограммы;
	ПутьМодуляКриптографии = "";
	ТипПровайдераЭП = Контекст.ОписаниеПрограммы.ТипПрограммы;
	АлгоритмПодписи = Контекст.ОписаниеПрограммы.АлгоритмПодписи;
	АлгоритмХеширования = Контекст.ОписаниеПрограммы.АлгоритмХеширования;
	АлгоритмШифрования = Контекст.ОписаниеПрограммы.АлгоритмШифрования;
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);		
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	КодОшибки = КодОшибкиПодписи21(Документ.Ссылка, МенеджерКриптографии, МассивОшибок);
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ.Ссылка, Ложь);
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		КодОшибки = КодОшибки + КодОшибкиПодписи21(ФайлСсылка.ТекущаяВерсия, МенеджерКриптографии, МассивОшибок);
				
	КонецЦикла;
	
	Возврат КодОшибки = 0;
	//МиСофт-
	
КонецФункции

Функция КодОшибкиПодписи21(ТекущийОбъект, МенеджерКриптографии, МассивОшибок)
	//МиСофт+
	Результат = 0;
	
	//Если ТекущийОбъект.ПодписанЭП Тогда
		      
		ВыборкаЗапроса = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			ДвоичныеДанныеПодписи = ВыборкаЗапроса.Подпись.Получить();
			
			ДвоичныеДанныеФайла = Неопределено;
			
			Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				
				ВерсияСсылка = ТекущийОбъект;
				ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ВерсияСсылка.Владелец);
				
			Иначе
				
				ДвоичныеДанныеФайла = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(ТекущийОбъект);
				
			КонецЕсли;
			
			ОшибкиПроверки = ЭлектроннаяПодпись.ПроверитьПодписьЭЦП(МенеджерКриптографии,
			ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
				
			Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") ИЛИ ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
				Ошибка = ?(ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата"), ОшибкиПроверки.ТекстОшибкиПроверкиСертификата, ОшибкиПроверки.ТекстОшибкиПроверкиПодписи);
				КодОшибки = ?(ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи"), -21, -23);
				Если Не Найти(Ошибка, ВыборкаЗапроса.КомуВыданСертификат) Тогда
					Ошибка = ВыборкаЗапроса.КомуВыданСертификат + " (" + Ошибка + ")"
				КонецЕсли;
				Расширение = "";
				Если ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					Документ = ТекущийОбъект.Владелец.ВладелецФайла;
					Расширение = "."+ТекущийОбъект.Расширение;
				ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
					Документ = ТекущийОбъект;
				КонецЕсли;
				//ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);
				//ОбъектДокумента = Документ.ПолучитьОбъект();
				
				НайденныеСтроки = Новый Структура("Документ, КодОшибки, Ошибка");
				//Если НайденныеСтроки.Количество() > 0 Тогда
				//	НайденныеСтроки.Содержание = НайденныеСтроки[0].Содержание + "; " + Ошибка;
				//Иначе
					//НоваяСтрока = ОбъектДокумента.Добавить();
					НайденныеСтроки.Документ = ТекущийОбъект.Наименование + "." + ТекущийОбъект.Расширение;
					НайденныеСтроки.КодОшибки = КодОшибки;
					НайденныеСтроки.Ошибка = Ошибка;
					МассивОшибок.Добавить(НайденныеСтроки);
				//КонецЕсли;
				
				//ОбъектДокумента.ТекстОшибки = ОбъектДокумента.ТекстОшибки+?(ОбъектДокумента.ТекстОшибки = "", "", Символы.ПС)+КодОшибки+"|"+ТекущийОбъект.Наименование+Расширение+"| "+Ошибка;
				//ОбъектДокумента.Записать();
				Результат = Результат + КодОшибки; // есть хоть одна неверная подпись или сертификат
			КонецЕсли;
			
			ЭПМенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЭПМенеджерЗаписи.УникальныйИдентификатор = ВыборкаЗапроса.УникальныйИдентификатор;
			ЭПМенеджерЗаписи.ДатаПодписи = ВыборкаЗапроса.ДатаПодписи;
			ЭПМенеджерЗаписи.Объект = ВыборкаЗапроса.Объект;
			ЭПМенеджерЗаписи.УстановившийПодпись = ВыборкаЗапроса.УстановившийПодпись;
			
			ЭПМенеджерЗаписи.Прочитать();
			
			Если ЭПМенеджерЗаписи.Выбран() Тогда
				Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
					ЭПМенеджерЗаписи.ПодписьВерна = Ложь;
					ЭПМенеджерЗаписи.ТекстОшибкиПроверкиПодписи = ОшибкиПроверки.ТекстОшибкиПроверкиПодписи;
				КонецЕсли;
				
				Если ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата") Тогда
					ЭПМенеджерЗаписи.СертификатДействителен = Ложь;
					ЭПМенеджерЗаписи.ТекстОшибкиПроверкиСертификата = ОшибкиПроверки.ТекстОшибкиПроверкиСертификата;
				КонецЕсли;
			КонецЕсли;
			
			ЭПМенеджерЗаписи.Записать();
			
		КонецЦикла;
	//КонецЕсли;
	Возврат Результат;
	//МиСофт-
КонецФункции

// Сформировать подтверждение получения
Функция СформироватьПодтверждениеПолучения21(Документ, ИдентификаторСообщения, Транспорт, Организация, 
		Контрагент, ВидСообщенияСВД, ОшибкиПодписи = Неопределено, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101')
		
	УстановитьПривилегированныйРежим(Истина);		
		
	// Зона заголовка
	//МиСофт+
	ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолучения21(ИдентификаторСообщения, Транспорт, 
		Организация, Контрагент, ВидСообщенияСВД, ОшибкиПодписи, КодОшибки, ТекстОшибки, РегистрационныйНомер, ДатаРегистрации, Документ);
	//МиСофт-		
		
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOЗаголовок);
	ЗаписьXML.Закрыть();
	
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД21(Документ, Контрагент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидСообщенияСВД, КодОшибки, 
		ИдентификаторСообщения);
	
	// Добавить файл
	
	//МиСофт+
	ИмяВременногоФайла = ПолучитьФайлXMLДляЗаписи21(ИмяВременногоФайла, ПолучитьПространствоИмен(Транспорт.ФорматСообщения)); 	
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, ПолучитьИмяДляЗаписиФайлаXML(ИсходящееСообщениеСВД));
	//МиСофт-
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	
КонецФункции

// Сформировать XDTO объект подтверждения получения
Функция СформироватьXDTOПодтверждениеПолучения21(ИдентификаторСообщения, Транспорт, Организация, Контрагент,
	ВидСообщенияСВД, ОшибкиПодписи, КодОшибки = 0, ТекстОшибки = "", РегистрационныйНомер = "", ДатаРегистрации = '00010101', Документ = Неопределено)
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВходящееСообщениеСВД") Тогда
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Документ.ИсходящийНомер + " доставлен в систему 1С:Документооборот 8 КОРП для Беларуси """ " ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе 1С:Документооборот 8 КОРП для Беларуси под № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " доставке документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " доставлен в систему 1С:Документооборот 8 КОРП для Беларуси """ " ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе 1С:Документооборот 8 КОРП для Беларуси под № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОПеререгистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "б ошибке при")+ " регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Раннее присвоенный номер является ошибочным. Документ № " + Документ.ИсходящийНомер + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ под новым № " +Документ.РегистрационныйНомер+ " ["+ТекущаяДата()+"]", ТекстОшибки);
			Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = Документ.ДатаРегистрации;
				IncNumber.__content = Документ.РегистрационныйНомер;		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ "б отказе от регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " принят в работу, регистрации не подлежит " , ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = ДатаРегистрации;
				IncNumber.__content = "Документ относится к категории не регистрируемых";		
			КонецЕсли;
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ "б отказе от регистрации документа № """+Документ.ИсходящийНомер+" от "+Формат(Документ.ИсходящаяДата, "ДФ=dd.MM.yyyy")+""".";
			ТекстУведомления = ?(ТекстОшибки = "", "Документ № " + Документ.ИсходящийНомер + " в работу не принят, регистрации не подлежит " , ТекстОшибки);
			Если НЕ ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
				IncNumber = СоздатьОбъект("IncNumber", ПространствоИмен);
				IncNumber.regdate = ДатаРегистрации;
				IncNumber.__content = "Отказано в регистрации";		
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок21(Организация, Контрагент, Транспорт, ВидСообщенияСВД);
			
	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт21(ТемаСообщения, Транспорт);
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен);
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = Документ.ИсходящаяДата;
	ОбъектXDTO.__content = Документ.ИсходящийНомер;
	
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;
	
	//Если ТипЗнч(ОшибкиПодписи) = Тип("Массив") Тогда
	Если ОшибкиПодписи.Количество() <> 0 Тогда
		Для Каждого СтрокаМассива Из ОшибкиПодписи Цикл
			ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
			ОбъектXDTO.errorcode = СтрокаМассива.КодОшибки;
			//ТекстОшибки+?(ТекстОшибки = "", "", " ")+"Документ """+СтрокаМассива.Документ+""" отклонен. "+ КодОшибки + "|" + СтрокаМассива.Ошибка;
			ОбъектXDTO.__content = "Документ """+СтрокаМассива.Документ+""" отклонен. " + СтрокаМассива.Ошибка;
			ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		КонецЦикла;		
	ИначеЕсли ОбъектXDTOAcknowledgement.AckResult.Количество() = 0 Тогда
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = КодОшибки;
		ОбъектXDTO.__content = ТекстУведомления;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		//ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		//ОбъектXDTO.errorcode = КодОшибки;
		//Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//Иначе
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ+" доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//КонецЕсли;
		//ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
	КонецЕсли;
	
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// Уникальный служебный идентификационный номер поступившего сообщения
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-
КонецФункции

//МиСофт
Функция ЗагрузитьДокументИЗПоврежденногоXML21(ФайлXML,ПространствоИмен, ПараметрыДокумента,Транспорт, ВходящееСообщениеСВД,МассивВложений)
	
	Если ВходящееСообщениеСВД.Документ = Неопределено Тогда
			ДокументОбъект = Справочники.ВходящиеДокументы.СоздатьЭлемент();
			ДокументОбъект.Записать();
		Иначе 
			ДокументОбъект = ВходящееСообщениеСВД.Документ.ПолучитьОбъект();
		КонецЕсли;
	Документ = ДокументОбъект.Ссылка;
	
	//ОшибкаЭЦП = ПолучитьФункциональнуюОпцию("ПроверитьОшибкиXML");
		
	ПутьКФайлуXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ПутьКФайлу, ФайлXML);
	ИмяФайлаXML = ?(ТипЗнч(ФайлXML) = Тип("Структура"), ФайлXML.ИмяФайла, "");
	
	ИмяВременногоФайла = ПолучитьФайлXMLДляЧтения(ПутьКФайлуXML, ПространствоИмен);
	
	ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Наименование");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("Атрибуты");
	
	ТЗАтрибутов = Новый ТаблицаЗначений;
	ТЗАтрибутов.Колонки.Добавить("Имя");
	ТЗАтрибутов.Колонки.Добавить("Значение");
	
	УровеньВложенности = 0;
	ТекущаяСтрока = Неопределено;
	Флаг=0;
	//Читаем пока читается
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				УровеньВложенности = УровеньВложенности + 1;
				Если ТекущаяСтрока = НЕОПРЕДЕЛЕНО Тогда
					ТекущаяСтрока = ДеревоXML.Строки.Добавить();
				Иначе
					ТекущаяСтрока = ТекущаяСтрока.Строки.Добавить();
				КонецЕсли;
				ТекущаяСтрока.Наименование = ВРег(ЧтениеXML.Имя);
				
				КоличествоАтрибутов = ЧтениеXML.КоличествоАтрибутов();
				Если КоличествоАтрибутов > 0 Тогда
					ТекТЗАтрибутов = ТЗАтрибутов.Скопировать();
					Для Счетчик = 0 По КоличествоАтрибутов - 1 Цикл
						СтрокаАтрибута = ТекТЗАтрибутов.Добавить();
						СтрокаАтрибута.Имя = ВРег(ЧтениеXML.ИмяАтрибута(Счетчик));
						СтрокаАтрибута.Значение = ЧтениеXML.ЗначениеАтрибута(Счетчик);
					КонецЦикла;
					Если ТекТЗАтрибутов.Количество() <> 0 Тогда
						ТекущаяСтрока.Атрибуты = ТекТЗАтрибутов;
					Иначе
						ТекущаяСтрока.Атрибуты = НЕОПРЕДЕЛЕНО;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяСтрока.Значение = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				УровеньВложенности = УровеньВложенности - 1;
				ТекущаяСтрока = ТекущаяСтрока.Родитель;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Флаг = 1;
	КонецПопытки;
	
	//Попробуем сформировать параметрыДокумента -> Аналогично функции ЗаполнитьПараметрыЗаголовкаИзXDTO
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПараметрыДокумента.Вставить("ФорматСообщения", ФорматСообщения);
	Заголовок = ДеревоXML.Строки.Найти("RECEIVER","Наименование",Истина);
	Организация = НЕОПРЕДЕЛЕНО;
	ПользовательПолучатель = "";
	Если Заголовок <> НЕОПРЕДЕЛЕНО Тогда
		Если Заголовок.Атрибуты <> НЕОПРЕДЕЛЕНО И Заголовок.Атрибуты.Количество() <> 0 Тогда
			ИДПолучателя = Заголовок.Атрибуты.Найти("ID","Имя");
			Если ИДПолучателя <> НЕОПРЕДЕЛЕНО Тогда
				Организация = ПолучитьОрганизациюПоНаименованиюВСВД(ИДПолучателя.Значение, Транспорт);
				Если Организация <> НЕОПРЕДЕЛЕНО Тогда
					ИДПользователяПолучателя = Заголовок.Атрибуты.Найти("SYS_ID","Имя");
					Если ИДПользователяПолучателя <> НЕОПРЕДЕЛЕНО Тогда
						//Надо понять, где искать этот TO_ORG_ID
						//ПользовательПолучатель = ОбъектXDTO.to_org_id;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("Организация", Организация);
	ПараметрыДокумента.Вставить("ПользовательПолучатель", ПользовательПолучатель);
	
	СтрокаКонтрагента = ДеревоXML.Строки.Найти("SENDER","Наименование",Истина); 
	Контрагент = НЕОПРЕДЕЛЕНО;
	ПользовательОтправитель = "";
	Если СтрокаКонтрагента <> НЕОПРЕДЕЛЕНО Тогда
		Если СтрокаКонтрагента.Атрибуты <> НЕОПРЕДЕЛЕНО И СтрокаКонтрагента.Атрибуты.Количество() <> 0 Тогда
			Контрагент = ПолучитьКонтрагентаПоНаименованиюВСВДИзТабЧасти21(СтрокаКонтрагента.Атрибуты,Транспорт);
			//Получим пользователяОтправителя
			СтрокаСисИД = СтрокаКонтрагента.Атрибуты.Найти("SYS_ID","Имя");
			Если СтрокаСисИД <> НЕОПРЕДЕЛЕНО Тогда
				ПользовательОтправитель = СтрокаСисИД.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("Отправитель", Контрагент);
	
	ДатаФормирования = "";
	ИдентификационныйНомерСообщения = "";
	СтрокаКорня = ДеревоXML.Строки.Найти("ENVELOP","Наименование");
	Если СтрокаКорня <> НЕОПРЕДЕЛЕНО Тогда
		Если СтрокаКорня.Атрибуты <> НЕОПРЕДЕЛЕНО И СтрокаКорня.Атрибуты.Количество() <> 0 Тогда
			СтрокаАтрибутаДатаФормирования = СтрокаКорня.Атрибуты.Найти ("DTSTAMP","Имя");
			Если СтрокаАтрибутаДатаФормирования <> НЕОПРЕДЕЛЕНО Тогда
				ДатаФормирования = СтрокаАтрибутаДатаФормирования.Значение;
			КонецЕсли;
			
			СтрокаАтрибутаИдентификатораНомераСообщения = СтрокаКорня.Атрибуты.Найти ("MSG_ID","Имя");
			Если СтрокаАтрибутаИдентификатораНомераСообщения <> НЕОПРЕДЕЛЕНО Тогда
				ИдентификационныйНомерСообщения = СтрокаАтрибутаИдентификатораНомераСообщения.Значение;
			КонецЕсли;
			
			СтрокаАтрибутаЗаголовокПисьма = СтрокаКорня.Атрибуты.Найти ("SUBJECT", "Имя");
			Если СтрокаАтрибутаЗаголовокПисьма <> НЕОПРЕДЕЛЕНО Тогда
				Тема = СтрокаАтрибутаЗаголовокПисьма.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДаты = ДеревоXML.Строки.Найти("REGNUMBER","Наименование", Истина);
	Если СтрокаДаты <> НЕОПРЕДЕЛЕНО Тогда
		РегистрационныйНомер = СтрокаДаты.Значение;
		Если СтрокаДаты.Атрибуты <> НЕОПРЕДЕЛЕНО И СтрокаДаты.Атрибуты.Количество() <> 0 Тогда
			СтрокаАтрибутаДатаРегистрации = СтрокаДаты.Атрибуты.Найти ("REGDATE","Имя");
			Если СтрокаАтрибутаДатаРегистрации <> НЕОПРЕДЕЛЕНО Тогда
				ДатаРегистрации = СтрокаАтрибутаДатаРегистрации.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("ДатаФормирования", ДатаФормирования);
	
	ПараметрыДокумента.Вставить("ДатаРегистрации", ДатаРегистрации);
	
	ПараметрыДокумента.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	
	ПараметрыДокумента.Вставить("ИдентификационныйНомерСообщения", ИдентификационныйНомерСообщения);
	
	ПараметрыДокумента.Вставить("Тема", Тема);
	
	ПараметрыДокумента.Вставить("ПодразделениеОтправитель", "");
	
	ПараметрыДокумента.Вставить("ПодразделениеПолучатель", "");
	
	//Были получены выше
	ПараметрыДокумента.Вставить("ПользовательОтправитель", ПользовательОтправитель);
	
	НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
	Заголовок = ДеревоXML.Строки.Найти("HEADER","Наименование",Истина);
	Если Заголовок <> НЕОПРЕДЕЛЕНО Тогда
		Если Заголовок.Атрибуты <> НЕОПРЕДЕЛЕНО И Заголовок.Атрибуты.Количество() <> 0 Тогда
			СтрокаНеобходимостиПосылкиУведомления = Заголовок.Атрибуты.Найти("MSG_ACKNOW","Имя");
			Если СтрокаНеобходимостиПосылкиУведомления <> НЕОПРЕДЕЛЕНО Тогда
				Если СтрокаНеобходимостиПосылкиУведомления.Значение = "0" Тогда
					НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.НеПосылать;
				ИначеЕсли СтрокаНеобходимостиПосылкиУведомления.Значение = "1" Тогда
					НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьТолькоОшибки;
				ИначеЕсли СтрокаНеобходимостиПосылкиУведомления.Значение = "2" Тогда
					НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("НеобходимостьПосылкиУведомлений", НеобходимостьПосылкиУведомлений);
	
	ЧтениеXML.Закрыть();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если Флаг=0 Тогда
		
		Если Не ЕстьОшибкиСВДДляДокумента(ВходящееСообщениеСВД.ИдентификаторСообщения) Тогда //И НЕ ОшибкаЭЦП Тогда
		
			ТекстОшибки = НСтр("ru='Неверная структура XML-пакета.'");
						
			СформироватьПодтверждениеПолучения1(
				Документ,
				ВходящееСообщениеСВД.ИдентификаторСообщения, 
				Транспорт, 
				ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, ПараметрыДокумента.Тема,
				-1,	// Собственные коды ошибок (будут уточняться) 
				ТекстОшибки, ПараметрыДокумента.РегистрационныйНомер, ПараметрыДокумента.ДатаРегистрации);
				
		Иначе
			
			ТекстОшибки = НСтр("ru='ЭЦП не верна: нарушена целостность подписанного документа или не найден файл, на который существует ссылка'");
						
			СформироватьПодтверждениеПолучения1(
				Документ,
				ВходящееСообщениеСВД.ИдентификаторСообщения, 
				Транспорт, 
				ПараметрыДокумента.Организация, 
				ПараметрыДокумента.Отправитель,
				Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, ПараметрыДокумента.Тема,
				-21,	// Собственные коды ошибок (будут уточняться) 
				ТекстОшибки, ПараметрыДокумента.РегистрационныйНомер, ПараметрыДокумента.ДатаРегистрации);
			
		
		КонецЕсли;
		
	КонецЕсли;
	Возврат Документ;
	
КонецФункции

Функция ЗаполнитьАдрес21(ОбъектСТаблЧастьюКонтактнаяИнформация, ПространствоИмен)
	
	// Адрес
	Для Каждого Строка Из ОбъектСТаблЧастьюКонтактнаяИнформация.КонтактнаяИнформация Цикл
	
		Если Строка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
			Адрес = СоздатьОбъект("Address", ПространствоИмен);
			
			Адрес.__content = Строка.Представление; //Строка.ЗначенияПолей;
			
			ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
				Строка.ЗначенияПолей);
				
			//Мисофт+
			Если Не ТипЗнч(ЗначенияПолей) = Тип("Строка") Тогда
				Для Каждого Поле Из ЗначенияПолей Цикл
					
					Если Поле.Представление = "Улица" Тогда
						Адрес.street = Поле.Значение;
					ИначеЕсли Поле.Представление = "Дом" Тогда
						Адрес.house = Поле.Значение;
					ИначеЕсли Поле.Представление = "Квартира" Тогда
						Адрес.flat = Поле.Значение;
					ИначеЕсли Поле.Представление = "НаселенныйПункт" Тогда
						Адрес.settlement = Поле.Значение;
					ИначеЕсли Поле.Представление = "Район" Тогда
						Адрес.district = Поле.Значение;
					ИначеЕсли Поле.Представление = "Регион" Тогда
						Адрес.region = Поле.Значение;
					ИначеЕсли Поле.Представление = "Страна" Тогда
						Адрес.country = Поле.Значение;
					ИначеЕсли Поле.Представление = "Индекс" Тогда
						Адрес.postcode = Поле.Значение;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			//Мисофт-
			
			Возврат Адрес;
			
		КонецЕсли;

	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбработатьНерегистрируемыйДокумент(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;
	
	
	ОшибкаПодписи = Новый Массив();
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент, ОшибкаПодписи,
			1, "",
			Реквизиты.РегистрационныйНомер,
			ТекущаяДата());
			
	КонецЕсли;
	
КонецПроцедуры

// Вызывается, когда документ относиться к категории нерегестрируемых
Процедура ОбработатьНерегистрируемыйДокумент21(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;
	
	
	ОшибкаПодписи = Новый Массив();
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения21(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.НерегистрируемыйДокумент, ОшибкаПодписи,
			1, "",
			Реквизиты.РегистрационныйНомер,
			ТекущаяДата());
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтказОтРегистрацииДокумента(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;
	
	
	ОшибкаПодписи = Новый Массив();
	ТекстОшибки = "";
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации, ОшибкаПодписи,
			2, ТекстОшибки,
			Реквизиты.РегистрационныйНомер,
			ТекущаяДата());
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтказОтРегистрацииДокумента21(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;
	
	
	ОшибкаПодписи = Новый Массив();
	ТекстОшибки = "";
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения21(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.ОтказОтРегистрации, ОшибкаПодписи,
			2, ТекстОшибки,
			Реквизиты.РегистрационныйНомер,
			ТекущаяДата());
			
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при повторной регистрации документа
Процедура ОбработатьПовторнуюРегистрациюДокумента21(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;	

	ОшибкаПодписи = Новый Массив();
	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения21(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.УведомлениеОПеререгистрации, ОшибкаПодписи,
			0, "",
			Реквизиты.РегистрационныйНомер,
			Реквизиты.ДатаРегистрации);
			
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается при регистрации документа
Процедура ОбработатьРегистрациюДокумента21(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьСВД = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
	Если Не ИспользоватьСВД Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееСообщениеСВД = НайтиСообщениеСВДПоДокументу(Документ);	
	Если Не ЗначениеЗаполнено(ВходящееСообщениеСВД) Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкаПодписи = Новый Массив();

	// Если установлена опция о необходимости отправки уведомлений - шлем подтверждение доставки
	Если ВходящееСообщениеСВД.НеобходимостьПосылкиУведомлений = Перечисления.НеобходимостьПосылкиУведомлений.ПосылатьУведомления Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "РегистрационныйНомер, ДатаРегистрации");
		
		СформироватьПодтверждениеПолучения21(
		    Документ,
			ВходящееСообщениеСВД.ИдентификаторСообщения, 
			ВходящееСообщениеСВД.ТранспортПолучения, 
			Документ.Организация, 
			ВходящееСообщениеСВД.КонтрагентОтправитель,
			Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации, ОшибкаПодписи,
			0, "",
			Реквизиты.РегистрационныйНомер,
			Реквизиты.ДатаРегистрации);
			
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьКонтрагентаПоНаименованиюВСВДИзТабЧасти21(ТабЧастьАтрибутов, Транспорт)
	ИД = ТабЧастьАтрибутов.Найти("ID","Имя");
	Если ИД = НЕОПРЕДЕЛЕНО Тогда
		Возврат Справочники.Корреспонденты.ПустаяСсылка();
		//Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиСВД.Адресат
		|ИЗ
		|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		|ГДЕ
		|	УчастникиСВД.Транспорт = &Транспорт
		|	И УчастникиСВД.ИмяАдресата ПОДОБНО &ИмяАдресата
		|	И УчастникиСВД.Адресат ССЫЛКА Справочник.Контрагенты";
		
	Запрос.УстановитьПараметр("Транспорт", Транспорт);	
	Запрос.УстановитьПараметр("ИмяАдресата", ИД.Значение);	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Адресат;
	
	Если Результат = Неопределено Тогда
		ОтправительНайден = НайтиУчастникаСВДПоКоду(ИД.Значение);
		Если ОтправительНайден = Неопределено Тогда
			Результат = Справочники.Корреспонденты.СоздатьЭлемент();
			//Результат = Справочники.Контрагенты.СоздатьЭлемент();
			Наименование = ТабЧастьАтрибутов.Найти ("NAME","Имя");
			Если Наименование = НЕОПРЕДЕЛЕНО Тогда
				Возврат Справочники.Корреспонденты.ПустаяСсылка();;
				//Возврат Справочники.Контрагенты.ПустаяСсылка();;
			КонецЕсли;
			Результат.Наименование = Наименование.Значение;
			Результат.ПолноеНаименование = Наименование.Значение;
			//Результат.НаименованиеПолное = Наименование.Значение;
			Результат.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Результат.Записать();
			Результат = Результат.Ссылка;
		Иначе
			Если ТипЗнч(ОтправительНайден) = Тип("СправочникСсылка.Корреспонденты") Тогда
			//Если ТипЗнч(ОтправительНайден) = Тип("СправочникСсылка.Контрагенты") Тогда
				Результат = ОтправительНайден;
			Иначе
				Результат = Справочники.Корреспонденты.СоздатьЭлемент();
				//Результат = Справочники.Контрагенты.СоздатьЭлемент();
				Результат.Наименование = ОтправительНайден.Наименование;
				Результат.ЮрФизЛицо = ОтправительНайден.ЮрФизЛицо;
				Результат.ПолноеНаименование = ОтправительНайден.НаименованиеПолное;
				//Результат.НаименованиеПолное = ОтправительНайден.НаименованиеПолное;
				Результат.ИНН = ОтправительНайден.ИНН;
				Результат.Записать();
				Результат = Результат.Ссылка;
			КонецЕсли;
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Адресат = Результат;
		МенеджерЗаписи.ИмяАдресата = ИД.Значение;
		МенеджерЗаписи.Транспорт = Транспорт;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьXDTOПодтверждениеПолучения1(ИдентификаторСообщения, Транспорт, Организация, Контрагент,
	ВидСообщенияСВД, Заголовок, КодОшибки = 0, ТекстОшибки = "", РегистрационныйНомер = "", ДатаРегистрации = '00010101', Документ = Неопределено)
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВходящееСообщениеСВД") Тогда
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ " доставке """+Заголовок+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Заголовок + " доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ " доставке """+Заголовок+""".";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Документ " + Заголовок + " доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок21(Организация, Контрагент, Транспорт, ВидСообщенияСВД);
			
	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт21(ТемаСообщения, Транспорт);
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен);
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = ДатаРегистрации;
	ОбъектXDTO.__content = РегистрационныйНомер;
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;
	
	//Если ТипЗнч(ОшибкиПодписи) = Тип("Массив") Тогда
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = КодОшибки;
		ОбъектXDTO.__content = ТекстУведомления;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		//ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		//ОбъектXDTO.errorcode = КодОшибки;
		//Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//Иначе
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ+" доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//КонецЕсли;
		//ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// Уникальный служебный идентификационный номер поступившего сообщения
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-
КонецФункции

// Сформировать подтверждение получения
Функция СформироватьПодтверждениеПолучения1(Документ, ИдентификаторСообщения, Транспорт, Организация, 
		Контрагент, ВидСообщенияСВД, Заголовок, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101')
		
	УстановитьПривилегированныйРежим(Истина);		
		
	// Зона заголовка
	//МиСофт+
	ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолучения1(ИдентификаторСообщения, Транспорт, 
		Организация, Контрагент, ВидСообщенияСВД, Заголовок, КодОшибки, ТекстОшибки, РегистрационныйНомер, ДатаРегистрации, Документ);
	//МиСофт-		
		
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOЗаголовок);
	ЗаписьXML.Закрыть();
	
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД1(Документ, Контрагент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидСообщенияСВД, КодОшибки, 
		ИдентификаторСообщения);
	
	// Добавить файл
	
	//МиСофт+
	ИмяВременногоФайла = ПолучитьФайлXMLДляЗаписи(ИмяВременногоФайла, ПолучитьПространствоИмен(Транспорт.ФорматСообщения)); 	
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, ПолучитьИмяДляЗаписиФайлаXML(ИсходящееСообщениеСВД));
	//МиСофт-
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	
КонецФункции

Функция СоздатьДокументИсходящееСообщениеСВД1(Документ, Контрагент, Организация, Транспорт, 
	ФорматСообщения, ИдентификационныйНомерСообщения, ВидСообщенияСВД, 
	КодОшибки = 0, ИдентификаторСессии = "") Экспорт
	
	ИсходящееСообщениеСВД = Документы.ИсходящееСообщениеСВД.СоздатьДокумент();
	
	ИсходящееСообщениеСВД.Дата = ТекущаяДатаСеанса();
	ИсходящееСообщениеСВД.ИдентификаторСообщения = ИдентификационныйНомерСообщения;
	ИсходящееСообщениеСВД.ИдентификаторСессии = ИдентификаторСессии;
	Если Не ЗначениеЗаполнено(ИсходящееСообщениеСВД.ИдентификаторСессии) Тогда
		ИсходящееСообщениеСВД.ИдентификаторСессии = ИсходящееСообщениеСВД.ИдентификаторСообщения;
	КонецЕсли;	
		
	ИсходящееСообщениеСВД.ВидСообщения = ВидСообщенияСВД;
	ИсходящееСообщениеСВД.Транспорт = Транспорт;
	ИсходящееСообщениеСВД.ФорматСообщения = ФорматСообщения;
	ИсходящееСообщениеСВД.Получатель = Контрагент;
	ИсходящееСообщениеСВД.ОрганизацияОтправитель = Организация;
	ИсходящееСообщениеСВД.Документ = Документ;
	
	
	// если это не уведомление - запишем в историю
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент
			Или ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.ДокументОтвет Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.Ошибка, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту, 
				ИдентификационныйНомерСообщения);
				
		ИначеЕсли ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации Тогда
			
			ЗаписатьВИсториюСостоянийСВД(Документ, ИсходящееСообщениеСВД, 
				Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем, 
				ИдентификационныйНомерСообщения);		
		КонецЕсли;	
						
	КонецЕсли;		
	
	ИсходящееСообщениеСВД.Записать();
	Возврат ИсходящееСообщениеСВД.Ссылка;
	
КонецФункции

Функция НайтиСообщениеСВДПоИсходящемуДокументу(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящееСообщениеСВД.Ссылка
	|ИЗ
	|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
	|ГДЕ
	|	ИсходящееСообщениеСВД.Документ = &Документ
	|	И ИсходящееСообщениеСВД.ВидСообщения В (&ВидСообщения)";
	Запрос.УстановитьПараметр("Документ", Документ);
	СписокВидыСообщенийСВД = Новый СписокЗначений;
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	СписокВидыСообщенийСВД.Добавить(Перечисления.ВидыСообщенийСВД.ДокументОтвет);
	Запрос.УстановитьПараметр("ВидСообщения", СписокВидыСообщенийСВД );	
	Запрос.УстановитьПараметр("ВидСообщения", Перечисления.ВидыСообщенийСВД.ОсновнойДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ссылка;
	КонецЕсли;
	
	Возврат Документы.ИсходящееСообщениеСВД.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьСписокДопФайловИзМассива21(ОбъектXDTO, МассивФайлов, Правило, ПространствоИмен, ФорматСообщения,
	XDTOПодписиЭП) Экспорт
	
	РазмерФайловВПакете = 0;
	
	ТипыПередаваемыхФайловНРег = НРег(Правило.ТипыПередаваемыхФайлов);
	
	МассивРасширений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ТипыПередаваемыхФайловНРег, " ");
		
	НомерФайла = 1;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если Правило.МаксимальныйРазмерПередаваемогоФайла <> 0 
			И ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерПередаваемогоФайла Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Правило.МаксимальныйРазмерВсехПередаваемыхФайлов <> 0 
			И РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер > Правило.МаксимальныйРазмерВсехПередаваемыхФайлов Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Правило.ТипыПередаваемыхФайлов) Тогда
			
			Расширение = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
			
			Если МассивРасширений.Найти(Расширение) = Неопределено Тогда // НЕ нашли в массиве разрешенных расширений
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		ОбъектDMFile = СоздатьОбъект("DocTransfer", ПространствоИмен);
		ЗаполнитьXDTOФайл21(ОбъектDMFile, ФайлСсылка, ФорматСообщения, XDTOПодписиЭП, НомерФайла);
		
		ОбъектXDTO.DocTransfer.Добавить(ОбъектDMFile);
		
		РазмерФайловВПакете = РазмерФайловВПакете + ФайлСсылка.ТекущаяВерсияРазмер;
		НомерФайла = НомерФайла + 1;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция СформироватьПодтверждениеПолученияДоп(Документ, ПараметрыДокумента, ИдентификаторСообщения, Транспорт, Организация, 
		Контрагент, ВидСообщенияСВД, ОшибкиПодписи = Неопределено, КодОшибки = 0, ТекстОшибки = "",
		РегистрационныйНомер = "", ДатаРегистрации = '00010101')
		
	УстановитьПривилегированныйРежим(Истина);		
		
	// Зона заголовка
	//МиСофт+
	ОбъектXDTOЗаголовок = СформироватьXDTOПодтверждениеПолученияДоп(ПараметрыДокумента, ИдентификаторСообщения, Транспорт, 
		Организация, Контрагент, ВидСообщенияСВД, ОшибкиПодписи, КодОшибки, ТекстОшибки, РегистрационныйНомер, ДатаРегистрации, Документ);
	//МиСофт-		
		
	// тут запись в xml файл и создание документа ИсходящееСообщениеСВД
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTOЗаголовок);
	ЗаписьXML.Закрыть();
	
	// Уникальный служебный идентификационный номер  сообщения 
	ИДПакета = Новый УникальныйИдентификатор;
	УникальныйИдентификаторСообщения = ИдВСтроку(ИДПакета);
	
	// Создать документ ИсходящееСообщениеСВД
	ТипСообщения = 0;
	ИсходящееСообщениеСВД = СоздатьДокументИсходящееСообщениеСВД21(Документ, Контрагент, 
		Организация, Транспорт, Транспорт.ФорматСообщения, 
		УникальныйИдентификаторСообщения,
		ВидСообщенияСВД, КодОшибки, 
		ИдентификаторСообщения);
	
	// Добавить файл
	
	//МиСофт+
	ИмяВременногоФайла = ПолучитьФайлXMLДляЗаписи21(ИмяВременногоФайла, ПолучитьПространствоИмен(Транспорт.ФорматСообщения)); 	
	РаботаСФайламиВнешнийВызов.СоздатьФайлНаОсновеФайлаНаДиске(ИсходящееСообщениеСВД, ИмяВременногоФайла, ПолучитьИмяДляЗаписиФайлаXML(ИсходящееСообщениеСВД));
	//МиСофт-
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ИсходящееСообщениеСВД;
	
КонецФункции

Функция СформироватьXDTOПодтверждениеПолученияДоп(ПараметрыДокумента, ИдентификаторСообщения, Транспорт, Организация, Контрагент,
	ВидСообщенияСВД, Заголовок, КодОшибки = 0, ТекстОшибки = "", РегистрационныйНомер = "", ДатаРегистрации = '00010101', Документ = Неопределено)
	//МиСофт+
	УстановитьПривилегированныйРежим(Истина);
	
	ФорматСообщения = Транспорт.ФорматСообщения;
	ПространствоИмен = ПолучитьПространствоИмен(ФорматСообщения);
	ДатаРегистрации = ТекущаяДата();
	НомерИДПервоначальный = ПараметрыДокумента.НомерИДПервоначальный;
	РегНомерПервоначальный = ПараметрыДокумента.РегНомерПервоначальный;
	РегДатаПервоначальный = ПараметрыДокумента.РегДатаПервоначальный;	
	
	IncNumber = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВходящееСообщениеСВД") Тогда
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ " доставке дополнительных материалов в документ № "+РегНомерПервоначальный+" от "+РегДатаПервоначальный+" .";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Доп. материалы успешно доставлены в целевой документ с идентификатором: " +НомерИДПервоначальный+ ", номером: "+РегНомерПервоначальный+", датой:" +РегДатаПервоначальный+"  "" ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке Тогда
			ТемаСообщения = "Уведомление о" +?(КодОшибки = 0, "", "")+ " доставке дополнительных материалов в документ № "+РегНомерПервоначальный+" от "+РегДатаПервоначальный+" .";
			Если ТипЗнч(ТекстОшибки) = Тип("Строка") Тогда
				ТекстУведомления = ?(ТекстОшибки = "", "Доп. материалы успешно доставлены в целевой документ с идентификатором: " +НомерИДПервоначальный+ ", номером: "+РегНомерПервоначальный+", датой: " +РегДатаПервоначальный+"  "" ["+ТекущаяДата()+"]", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Зона заголовка
	ОбъектXDTOЗаголовок = СоздатьXDTOЗаголовок21(Организация, Контрагент, Транспорт, ВидСообщенияСВД);
			
	// Зона конверта
	ОбъектXDTOКонверт = СоздатьXDTOКонверт21(ТемаСообщения, Транспорт);
	
	// Зона тела
	ОбъектXDTOТело = СоздатьОбъект("Body", ПространствоИмен);
	
	ОбъектXDTOAcknowledgement = СоздатьОбъект("AcknowledgementType", ПространствоИмен);
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	ОбъектXDTOAcknowledgement.ack_type=?(ВидСообщенияСВД = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке, 1, 2);	
	ОбъектXDTO = СоздатьОбъект("RegNumber", ПространствоИмен);
	ОбъектXDTO.regdate = ДатаРегистрации;
	ОбъектXDTO.__content = РегистрационныйНомер;
	ОбъектXDTOAcknowledgement.RegNumber = ОбъектXDTO;
	
	Если Не IncNumber = Неопределено Тогда
		ОбъектXDTOAcknowledgement.IncNumber = IncNumber;
	КонецЕсли;
	
	//Если ТипЗнч(ОшибкиПодписи) = Тип("Массив") Тогда
		ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		ОбъектXDTO.errorcode = КодОшибки;
		ОбъектXDTO.__content = ТекстУведомления;
		ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		//ОбъектXDTO = СоздатьОбъект("AckResult", ПространствоИмен);
		//ОбъектXDTO.errorcode = КодОшибки;
		//Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ + " зарегистрирован в системе """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//Иначе
		//	ОбъектXDTO.__content = ?(КодОшибки = 0, "Документ "+Документ+" доставлен в систему """ + Метаданные.КраткаяИнформация + """ ["+ТекущаяДата()+"]", ТекстОшибки);
		//КонецЕсли;
		//ОбъектXDTOAcknowledgement.AckResult.Добавить(ОбъектXDTO);
		
	ОбъектXDTOТело.Acknowledgement = ОбъектXDTOAcknowledgement;
	
	ОбъектXDTOКонверт.Header = ОбъектXDTOЗаголовок;
	ОбъектXDTOКонверт.Body = ОбъектXDTOТело;
	
	// Уникальный служебный идентификационный номер поступившего сообщения
	ОбъектXDTOAcknowledgement.msg_id = ИдентификаторСообщения;
	
	Возврат ОбъектXDTOКонверт;
	//МиСофт-
КонецФункции

// Получить наименование контрагента в СВД.
Функция ПолучитьНаименованиеКонтрагентаВСВДКлиентСервер(Контрагент, Транспорт) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Адресат = Контрагент;
	МенеджерЗаписи.Транспорт = Транспорт;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ИмяАдресата) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Для контрагента ""%1"" не указано представление в СВД.'"),
		Строка(Контрагент));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат МенеджерЗаписи.ИмяАдресата;
	
КонецФункции	

//МиСофт
//Создание узлов:
//Organization, OrganizationOnly, OrganizationWithSign
//OfficialPerson, OfficialPersonWitnSign
//PrivateRerson, PrivatePersonWithSign
Функция СоздатьОрганизациюИлиЛицо(Источник, ИмяУзла, ПространствоИмен)
	//МиСофт+
	Результат = СоздатьОбъект(ИмяУзла, ПространствоИмен);
	
	Аттрибуты = Новый Соответствие;
	Аттрибуты.Вставить("fullname", "НаименованиеПолное");
	Аттрибуты.Вставить("shortname", "Наименование");
	Если НЕ ТипЗнч(Источник) = Тип("СправочникСсылка.Пользователи") Тогда
		//Аттрибуты.Вставить("inn", "ИНН");
		//Аттрибуты.Вставить("kpp", "КПП");
	КонецЕсли;
	
	ЗаполнятьАдрес = Ложь;
	ЗаполнятьКонтакты = Ложь;
	
	Для Каждого Свойство Из Результат.Свойства() Цикл
		Если (Не Аттрибуты[Свойство.Имя] = Неопределено) И ЗначениеЗаполнено(Источник[Аттрибуты[Свойство.Имя]]) Тогда
			Результат[Свойство.Имя] = Источник[Аттрибуты[Свойство.Имя]];
		КонецЕсли;
		Если Свойство.Имя = "organization_string" Тогда	//Единая строка, содержащая все атрибуты организации
			Результат[Свойство.Имя] = Строка(Источник)
			+ ?(ЗначениеЗаполнено(Источник.ИНН), " УНП:" + Источник.ИНН, "")
			+ ?(ЗначениеЗаполнено(Источник.КПП), " КПП:" + Источник.КПП, "");
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Address" Тогда //описание почтового адреса
			ЗаполнятьАдрес = Истина;
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Econtact" Тогда
			ЗаполнятьКонтакты = Истина;
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Name" Тогда
			Name = СоздатьОбъект("Name", ПространствоИмен);
			Name.__content = Источник.Наименование;
			Результат[Свойство.Имя] = Name;
			Продолжить;
		КонецЕсли;
		Если Свойство.Имя = "Official" Тогда
			Должность = ?(ТипЗнч(Источник) = Тип("СправочникСсылка.Пользователи"), РаботаСПользователями.ПолучитьДолжность(Источник).Наименование, Источник.Должность);
			Если ЗначениеЗаполнено(Должность) Тогда
				Official = СоздатьОбъект("Official", ПространствоИмен);
				Official.post = Должность;
				Official.__content = Должность;
				Результат[Свойство.Имя].Добавить(Official);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнятьКонтакты Тогда
		ЗаполнитьАдресEmailИТелефоны(Источник, Результат, ПространствоИмен, ЗаполнятьАдрес);
	КонецЕсли;
	
	Возврат Результат;
	//МиСофт-
КонецФункции

//МиСофт
Функция НайтиУчастникаСВДПоКоду(КодУчастникаСВД)
	//МиСофт+
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчастникиСВД.Адресат
	|ИЗ
	|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
	|ГДЕ
	|	УчастникиСВД.ИмяАдресата = &КодУчастникаСВД";
	
	Запрос.УстановитьПараметр("КодУчастникаСВД", КодУчастникаСВД);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
 	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.Адресат, Неопределено);
	//МиСофт-
КонецФункции

//МиСофт
Процедура ЗаполнитьАдресEmailИТелефоны(Источник, Приемник, ПространствоИмен, ЗаполнятьАдрес)
	//МиСофт+
	АдресЗаполнен = Ложь;
	
	// type Тип номера (адреса) 
	// Значение = 1 для рабочего телефона.   
	// Значение = 2 для домашнего телефона.  
	// Значение = 3 для мобильного телефона. 
	// Значение = 4 для факса.
	// Значение = 5 для адреса электронной почты (E-mail).
	// Значение = 6 для адреса web-сайта (страницы).
	// Значение = 0 для прочего
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("Телефон", 1);
	СоответствиеТипов.Вставить("Email", 5);
	СоответствиеТипов.Вставить("Факс", 4);
	СоответствиеТипов.Вставить("Сайт", 6);
	
	Для Индекс = 0 По Перечисления.ТипыКонтактнойИнформации.Количество()-1 Цикл
		ТаблицаКонтактов = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(Источник,
		Перечисления.ТипыКонтактнойИнформации[Индекс]);
		Для Каждого Строка Из ТаблицаКонтактов Цикл
			Если ЗаполнятьАдрес И (Не АдресЗаполнен)  И (Строка.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента.Наименование
				Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица.Наименование
				Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресКорреспондента.Наименование
				Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента.Наименование)
			//Если ЗаполнятьАдрес И (Не АдресЗаполнен)  И (Строка.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента.Наименование
			//	Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица.Наименование
			//	Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента.Наименование
			//	Или Строка.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента.Наименование)
				Тогда
				АдресЗаполнен = Истина;
				Адрес = СоздатьОбъект("Address", ПространствоИмен);
				Адрес.__content = Строка.Значение;
				Приемник.Address = Адрес;
				Прервать;
			КонецЕсли;
			
			Если НЕ СоответствиеТипов[Строка.Вид] = Неопределено Тогда
				Контакт = СоздатьОбъект("Econtact", ПространствоИмен);
				Контакт.__content = Строка.Значение;
				Контакт.type = СоответствиеТипов[Строка.Вид];
				Приемник.Econtact.Добавить(Контакт);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//МиСофт-
КонецПроцедуры

//МиСофт
Процедура ОпределитьПолучателей(Документ, Контрагент, Приемник, Транспорт)
	//МиСофт+
	Для Каждого ПолучательСтрокаТаблЧасти Из Документ.Получатели Цикл
		
		Если ПолучательСтрокаТаблЧасти.Получатель = Контрагент Тогда	
			Источник = ?(ЗначениеЗаполнено(ПолучательСтрокаТаблЧасти.Адресат), "Адресат", "Получатель");
			Приемник.Добавить(СоздатьXDTOПолучатель(ПолучательСтрокаТаблЧасти[Источник], Транспорт));			
		КонецЕсли;
		
	КонецЦикла;
	//МиСофт-
КонецПроцедуры

