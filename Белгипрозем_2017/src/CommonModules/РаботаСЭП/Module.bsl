////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает сертификаты текущего пользователя с настройками криптографии.
//
// Параметры
//  ТолькоАктивные - Булево - (по умолчанию Истина).
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьСертификатыТекущегоПользователя(ТолькоАктивные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сертификаты.Ссылка,
		|	Сертификаты.ПометкаУдаления,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Пользователь,
		|	Сертификаты.ПрофильНастроекКриптографии,
		|	Сертификаты.ДатаОкончания КАК ДействителенДо,
		|	Сертификаты.Назначение,
		|	Сертификаты.НазначениеКратко,
		|	Сертификаты.КомуВыдан,
		|	Сертификаты.КемВыдан,
		|	Сертификаты.ФайлСертификата,
		|	Сертификаты.Усиленный,
		|	Профили.ПровайдерЭП,
		|	Профили.ТипПровайдераЭП,
		|	Профили.АлгоритмПодписи,
		|	Профили.АлгоритмХеширования,
		|	Профили.АлгоритмШифрования
		|ИЗ
		|	Справочник.СертификатыЭП КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекКриптографии КАК Профили
		|		ПО (Профили.Ссылка = Сертификаты.ПрофильНастроекКриптографии)
		|ГДЕ
		|	Сертификаты.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ Сертификаты.ПометкаУдаления";
	КонецЕсли;
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	ТаблицаЗначений.Колонки.Добавить("ПутьМодуляКриптографии");
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	ИмяКомпьютера = ИмяКомпьютера();
	
	Для Каждого ТекСтрока Из ТаблицаЗначений Цикл
		
		ТекСтрока.ПутьМодуляКриптографии = "";
		
		// в Windows путь модуля криптографии не нужен
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
			ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			
			Прервать; 
		КонецЕсли;
		
		ПутиМодулейКриптографии = ТекСтрока.ПрофильНастроекКриптографии.ПутиМодулейКриптографииСерверовLinux.Выгрузить();
		Для Каждого ТекСтрокаПутей Из ПутиМодулейКриптографии Цикл
			Если ТекСтрокаПутей.ИмяКомпьютера = ИмяКомпьютера Тогда
				ТекСтрока.ПутьМодуляКриптографии = ТекСтрокаПутей.ПутьМодуляКриптографии;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает профили настроек криптографии.
// 
// Параметры:
//  Отпечаток - Строка - Отпечаток сертификата в BASE64
//
// Возвращаемое значение:
//  Неопределено, если настройки не указаны, либо Структура
//   ПровайдерЭП - Строка
//   ТипПровайдераЭП - Число
//   АлгоритмПодписи - Строка
//   АлгоритмХеширования - Строка
//   АлгоритмШифрования - Строка
//
Функция ПрофилиНастроекКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиНастроекКриптографии.Ссылка,
		|	ПрофилиНастроекКриптографии.ПровайдерЭП,
		|	ПрофилиНастроекКриптографии.ТипПровайдераЭП,
		|	ПрофилиНастроекКриптографии.АлгоритмПодписи,
		|	ПрофилиНастроекКриптографии.АлгоритмХеширования,
		|	ПрофилиНастроекКриптографии.АлгоритмШифрования,
		|	ПрофилиНастроекКриптографии.ПутиМодулейКриптографииСерверовLinux.(
		|		ИмяКомпьютера,
		|		ПутьМодуляКриптографии,
		|		Комментарий
		|	) КАК ПутиМодулейКриптографии
		|ИЗ
		|	Справочник.ПрофилиНастроекКриптографии КАК ПрофилиНастроекКриптографии";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка");
	ТаблицаЗначений.Колонки.Добавить("ПровайдерЭП");
	ТаблицаЗначений.Колонки.Добавить("ТипПровайдераЭП");
	ТаблицаЗначений.Колонки.Добавить("АлгоритмПодписи");
	ТаблицаЗначений.Колонки.Добавить("АлгоритмХеширования");
	ТаблицаЗначений.Колонки.Добавить("АлгоритмШифрования");
	ТаблицаЗначений.Колонки.Добавить("ПутьМодуляКриптографии");
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	ИмяКомпьютера = ИмяКомпьютера();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ПутьМодуляКриптографии = "";
		
		// в Windows путь модуля криптографии не нужен
		Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
			ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
			Продолжить;
		КонецЕсли;
	
		ПутиМодулейКриптографии = Выборка.ПутиМодулейКриптографии.Выгрузить();
		Для Каждого ТекСтрока Из ПутиМодулейКриптографии Цикл
			Если ТекСтрока.ИмяКомпьютера = ИмяКомпьютера Тогда
				НоваяСтрока.ПутьМодуляКриптографии = ТекСтрока.ПутьМодуляКриптографии;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает настройки криптографии для указанного сертификата.
// 
// Параметры:
//  Отпечаток - Строка - Отпечаток сертификата в BASE64
//
// Возвращаемое значение:
//  Неопределено, если настройки не указаны, либо Структура
//   ПровайдерЭП - Строка
//   ТипПровайдераЭП - Число
//   АлгоритмПодписи - Строка
//   АлгоритмХеширования - Строка
//   АлгоритмШифрования - Строка
//
Функция ПрофильНастроекКриптографииПоСертификату(Отпечаток) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрофилиНастроекКриптографии.ПровайдерЭП,
		|	ПрофилиНастроекКриптографии.ТипПровайдераЭП,
		|	ПрофилиНастроекКриптографии.АлгоритмПодписи,
		|	ПрофилиНастроекКриптографии.АлгоритмХеширования,
		|	ПрофилиНастроекКриптографии.АлгоритмШифрования,
		|	ПрофилиНастроекКриптографии.ПутиМодулейКриптографииСерверовLinux.(
		|		ИмяКомпьютера,
		|		ПутьМодуляКриптографии,
		|		Комментарий
		|	) КАК ПутиМодулейКриптографии
		|ИЗ
		|	Справочник.ПрофилиНастроекКриптографии КАК ПрофилиНастроекКриптографии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП КАК Сертификаты
		|		ПО (Сертификаты.ПрофильНастроекКриптографии = ПрофилиНастроекКриптографии.Ссылка)
		|ГДЕ
		|	Сертификаты.Отпечаток = &Отпечаток";
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура(
		"ПровайдерЭП,
		|ПутьМодуляКриптографии,
		|ТипПровайдераЭП,
		|АлгоритмПодписи,
		|АлгоритмХеширования,
		|АлгоритмШифрования");
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	ИмяКомпьютера = ИмяКомпьютера();
	
	// в Windows путь модуля криптографии не нужен
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86
		ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		
		Результат.ПутьМодуляКриптографии = "";
	Иначе
		ПутиМодулейКриптографии = Выборка.ПутиМодулейКриптографии.Выгрузить();
		Для Каждого ТекСтрока Из ПутиМодулейКриптографии Цикл
			Если ТекСтрока.ИмяКомпьютера = ИмяКомпьютера Тогда
				Результат.ПутьМодуляКриптографии = ТекСтрока.ПутьМодуляКриптографии;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет список подписей файла.
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор, ПолучитьДляПомеченногоНаУдалениеОбъекта = Ложь) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Объект.ПометкаУдаления И Не ПолучитьДляПомеченногоНаУдалениеОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Зашифрован = ТекущийОбъект.Зашифрован;
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			КоличествоПодписей = КоличествоПодписей + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа в дереве.
//
Процедура ЗаполнитьСписокПодписейДокумента(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор) Экспорт
	
	КоличествоПодписей = 0;
	
	Если ТекущийОбъект.ПодписанЭП Тогда
		
		Выборка = РаботаСЭП.ПолучитьЭлектронныеПодписи(ТекущийОбъект.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.Статус = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
				Выборка.ПодписьВерна, Выборка.СертификатДействителен, Выборка.ДатаПроверкиПодписи);
			
			ДвоичныеДанные = Выборка.Подпись.Получить();
			Если ДвоичныеДанные <> Неопределено Тогда 
				НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					УникальныйИдентификатор);
			КонецЕсли;
			
			ДвоичныеДанныеСертификата = Выборка.Сертификат.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(
					ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			КоличествоПодписей = КоличествоПодписей + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов.
//
Процедура ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП) Экспорт
	
	ВсегоПодписей = 0;
	ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДерева.Добавить();
	// для ветки дерева используем КомуВыданСертификат как Представление
	НоваяСтрока.КомуВыданСертификат = Строка(ТипЗнч(ОбъектСсылка)) + " """ + Строка(ОбъектСсылка) + """"; 
	НоваяСтрока.ИндексКартинки = 0;  // иконка справочника
	КоличествоПодписей = 0;
	
	ЗаполнитьСписокПодписейДокумента(ОбъектСсылка, 
		НоваяСтрока.ПолучитьЭлементы(), КоличествоПодписей, УникальныйИдентификатор);
	ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
	
	Если КоличествоПодписей = 0 Тогда
		ЭлементыДерева.Удалить(НоваяСтрока);
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектСсылка);
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		НоваяСтрока = ЭлементыДерева.Добавить();
		// для ветки дерева используем КомуВыданСертификат как Представление
		НоваяСтрока.КомуВыданСертификат = Строка(ТипЗнч(ФайлСсылка)) + " """ + Строка(ФайлСсылка) + """"; 
		НоваяСтрока.ИндексКартинки = ФайлСсылка.ИндексКартинки;
		КоличествоПодписей = 0;
		
		ЗаполнитьСписокПодписейФайла(ФайлСсылка.ТекущаяВерсия, НоваяСтрока.ПолучитьЭлементы(), 
			КоличествоПодписей, УникальныйИдентификатор);
		ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
		
		Если КоличествоПодписей = 0 Тогда
			ЭлементыДерева.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппаЭП <> Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'ЭП'");
		Если ВсегоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
		КонецЕсли;
		ГруппаЭП.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет одну электронную подпись.
//
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, 
	УникальныйИдентификатор, ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеФайла = Неопределено;
	ДвоичныеДанныеПодписи = Неопределено;
	
	АдресФайла = "";
	
	Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ВерсияСсылка = ДанныеСтроки.Объект;
		СтруктураВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(, ВерсияСсылка, АдресПодписи);
		ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
		ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
	Иначе
		СтруктураВозврата = ПолучитьДвоичныеДанныеОбъектаИПодписи(ДанныеСтроки.Объект, 
			АдресПодписи, ДанныеСтроки.Версия, ДополнительныеПараметры);
		ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
		ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
	КонецЕсли;
	
	//МиСофт+
	ДанныеСтроки.Неверна = Ложь;
	//МиСофт-
	
	ОшибкиПроверки = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
		ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ДанныеСтроки.Объект)
		И (ДанныеСтроки.Версия = 2 Или ДанныеСтроки.Версия = 3)
		И ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РеквизитОрганизацияНеЗаполнен", Истина);
		ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Неверна = ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи");
	
	ДанныеПодписи = Новый Структура(
		"УникальныйИдентификатор,
		|Объект,
		|УстановившийПодпись,
		|ДатаПодписи,
		|ПодписьВерна,
		|ТекстОшибкиПроверкиПодписи,
		|СертификатДействителен,
		|ТекстОшибкиПроверкиСертификата,
		|ДатаПроверкиПодписи");
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, ОшибкиПроверки);
	//МиСофт+
	ДанныеПодписи.ПодписьВерна = НЕ ДанныеСтроки.Неверна;
	ДанныеПодписи.СертификатДействителен = НЕ ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата");
	ДанныеПодписи.ДатаПроверкиПодписи = ТекущаяДата();
	//МиСофт-
	ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДанныеСтроки.ДатаПроверкиПодписи, ДанныеСтроки.Статус);
	
КонецПроцедуры

// Проверяет все выделенные ЭП.
//
Процедура ПроверитьНаСервере(ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор) Экспорт
	
	ПрофилиНастроекКриптографии = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПрофилиНастроекКриптографии;
	
	ПодходящиеНастройкиКриптографииОпределены = Ложь;
	
	Для Каждого ПрофильНастроекКриптографии Из ПрофилиНастроекКриптографии Цикл
		
		ПровайдерЭП = ПрофильНастроекКриптографии.ПровайдерЭП;
		ПутьМодуляКриптографии = ПрофильНастроекКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭП = ПрофильНастроекКриптографии.ТипПровайдераЭП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);
			ЗаполнитьЗначенияСвойств(МенеджерКриптографии, ПрофильНастроекКриптографии);
			ПодходящиеНастройкиКриптографииОпределены = Истина;
			Прервать;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПодходящиеНастройкиКриптографииОпределены Тогда
		ВызватьИсключение НСтр("ru = 'На компьютере не найден ни один провайдер ЭП для выполнения операции.'");
	КонецЕсли;
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет все ЭП.
//
Процедура ПроверитьВсеНаСервере(ТаблицаПодписей, УникальныйИдентификатор) Экспорт
	
	ПрофилиНастроекКриптографии = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ПрофилиНастроекКриптографии;
	
	ПодходящиеНастройкиКриптографииОпределены = Ложь;
	
	Для Каждого ПрофильНастроекКриптографии Из ПрофилиНастроекКриптографии Цикл
		
		ПровайдерЭП = ПрофильНастроекКриптографии.ПровайдерЭП;
		ПутьМодуляКриптографии = ПрофильНастроекКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭП = ПрофильНастроекКриптографии.ТипПровайдераЭП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);
			ЗаполнитьЗначенияСвойств(МенеджерКриптографии, ПрофильНастроекКриптографии);
			ПодходящиеНастройкиКриптографииОпределены = Истина;
			Прервать;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПодходящиеНастройкиКриптографииОпределены Тогда
		ВызватьИсключение НСтр("ru = 'На компьютере не найден ни один провайдер ЭП для выполнения операции.'");
	КонецЕсли;
	
	ДанныеСтрок = ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
	Для Каждого Строка Из ДанныеСтрок Цикл
		ПроверитьОднуПодписьНаСервере(Строка, МенеджерКриптографии, УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

// Удаляет выделенные ЭП.
//
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, ВыделенныеСтроки,
	ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП) Экспорт
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и таблицы номеров строк табл части
	
	МассивВыделенныеСтроки = Новый Массив;
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			Таблица = ВсеОбъекты.Получить(ДанныеСтроки.Объект);
			
			Если Таблица = Неопределено Тогда
				Таблица = Новый ТаблицаЗначений;
				Таблица.Колонки.Добавить("УстановившийПодпись");
				Таблица.Колонки.Добавить("ДатаПодписи");
				ВсеОбъекты.Вставить(ДанныеСтроки.Объект, Таблица);
			КонецЕсли;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.УстановившийПодпись	= ДанныеСтроки.УстановившийПодпись;
			НоваяСтрока.ДатаПодписи			= ДанныеСтроки.ДатаПодписи;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараКлючЗначение Из ВсеОбъекты Цикл
		
		ТекущийОбъектСсылка = ПараКлючЗначение.Ключ;
		ТаблицаВыделенныеСтроки = ПараКлючЗначение.Значение;
		
		Если ТипЗнч(ТекущийОбъектСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда	
			РаботаСФайламиВызовСервера.УдалитьПодписиВерсииФайла(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				РеквизитПодписанИзменен, УникальныйИдентификатор);
		Иначе
			КоличествоПодписей = 0;
			ЭлектроннаяПодпись.УдалитьПодписи(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				РеквизитПодписанИзменен, КоличествоПодписей, УникальныйИдентификатор);
			ПротоколированиеРаботыПользователей.ЗаписатьУдалениеПодписиЭП(ТекущийОбъектСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, 
		УникальныйИдентификатор, ГруппаЭП);
	
КонецПроцедуры

// Удаляем все подписи объекта
//
Процедура УдалитьПодписиОбъекта(ПодписанныйОбъект) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет выделенные ЭП
//
Процедура УдалитьПодписи(ВыделенныеСтроки) Экспорт
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и таблицы номеров строк табл части
	
	Для Каждого ДанныеСтроки Из ВыделенныеСтроки Цикл
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			Таблица = ВсеОбъекты.Получить(ДанныеСтроки.Объект);
			
			Если Таблица = Неопределено Тогда
				Таблица = Новый ТаблицаЗначений;
				Таблица.Колонки.Добавить("УстановившийПодпись");
				Таблица.Колонки.Добавить("ДатаПодписи");
				ВсеОбъекты.Вставить(ДанныеСтроки.Объект, Таблица);
			КонецЕсли;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.УстановившийПодпись	= ДанныеСтроки.УстановившийПодпись;
			НоваяСтрока.ДатаПодписи			= ДанныеСтроки.ДатаПодписи;
			
		КонецЕсли;
	КонецЦикла;
	
	РеквизитПодписанИзменен = Ложь;
	
	Для Каждого ПараКлючЗначение Из ВсеОбъекты Цикл
		
		ТекущийОбъектСсылка = ПараКлючЗначение.Ключ;
		ТаблицаВыделенныеСтроки = ПараКлючЗначение.Значение;
		
		Если ТипЗнч(ТекущийОбъектСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда	
			РаботаСФайламиВызовСервера.УдалитьПодписиВерсииФайла(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				РеквизитПодписанИзменен);
		Иначе
			КоличествоПодписей = 0;
			ЭлектроннаяПодпись.УдалитьПодписи(ТекущийОбъектСсылка, ТаблицаВыделенныеСтроки, 
				РеквизитПодписанИзменен, КоличествоПодписей);
			ПротоколированиеРаботыПользователей.ЗаписатьУдалениеПодписиЭП(ТекущийОбъектСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Для Вх Исх Внутр документов формирует массив значений Полей (включая имя поля) - только важные реквизиты.
//
// Параметры:
//  ОбъектСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  
Функция СформироватьНаборВажныхПолей(Знач ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		МассивИмен = Справочники.ВнутренниеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		МассивИмен = Справочники.ВходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		МассивИмен = Справочники.ИсходящиеДокументы.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВизыСогласования") Тогда
		МассивИмен = Справочники.ВизыСогласования.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Резолюции") Тогда
		МассивИмен = Справочники.Резолюции.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда
		Для Каждого Элемент Из ОбъектСсылка Цикл
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если ИмяПоля = "Файлы" Тогда
				МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектСсылка, Ложь);
				
				НомерЯчейки = 1;
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					Если Не ЗначениеЗаполнено(Версия) ИЛИ Версия > 2 Тогда
						ХешДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
						ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлСсылка);
						ХешДанных.Добавить(ДвоичныеДанные);
						ЗначениеПоля = ХешДанных.ХешСумма;
					Иначе
						ЗначениеПоля = ФайлСсылка;
					КонецЕсли;
					ИмяЯчейки = "Файл" + НомерЯчейки;
					СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
					МассивПолей.Добавить(СтрокаЗначения);
					НомерЯчейки = НомерЯчейки + 1;
				КонецЦикла;
				
			Иначе
				Если ИмяПоля = "Организация"
					И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
					И ДополнительныеПараметры.Свойство("РеквизитОрганизацияНеЗаполнен")
					И ДополнительныеПараметры.РеквизитОрганизацияНеЗаполнен Тогда
					
					ЗначениеПоля = Справочники.Организации.ПустаяСсылка();
				Иначе
					ЗначениеПоля = ОбъектСсылка[ИмяПоля];
				КонецЕсли;
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяПоля);
				МассивПолей.Добавить(СтрокаЗначения);
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			НомерСтроки = 0;
			Для Каждого Строка Из ОбъектСсылка[ИмяТабличнойЧасти] Цикл
				
				ЗначениеПоля = Строка[ИмяКолонки];
				ИмяЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 "%1_%2_%3", ИмяТабличнойЧасти, НомерСтроки, ИмяКолонки);
				
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
				МассивПолей.Добавить(СтрокаЗначения);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

// Формирует файл с именами и значениями полей.
//
Процедура СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого ЗначениеПоля Из МассивПолей Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЗначениеПоля);
	КонецЦикла;
	
	ТекстовыйДокумент.Записать(ИмяФайлаСПутем);
	
КонецПроцедуры	

// Получить объекты для подписи - массив структур АдресФайла или ДвоичныеДанные, ОбъектСсылкаДляПодписи
//  где АдресФайла - адрес файла во временном хранилище
//
Процедура ПолучитьОбъектыДляПодписи(ОбъектСсылка, УникальныйИдентификаторФормы, МассивОбъектовДляПодписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектСсылка) Тогда
		
		// тут формируем файл из важных полей карточки
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
		// тут собираем все подчиненные файлы
		МассивВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВсехПодчиненныхФайлов(ОбъектСсылка, УникальныйИдентификаторФормы);
		ПервыйФайл = Истина;
		
		Для Каждого СтруктураВозврата Из МассивВозврата Цикл
			
			ДанныеФайла = СтруктураВозврата.ДанныеФайла;
			АдресФайла = СтруктураВозврата.НавигационнаяСсылкаВерсии;
			ОбъектСсылкаДляПодписи = ДанныеФайла.Ссылка;
			
			СтруктураДляПодписи = Неопределено;
			
			// только первый файл кладем как ДвоичныеДанные
			Если ПервыйФайл Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
				УдалитьИзВременногоХранилища(АдресФайла);
				
				СтруктураДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
					ДвоичныеДанные, ОбъектСсылкаДляПодписи);
					
				ПервыйФайл = Ложь;
			Иначе
				СтруктураДляПодписи = Новый Структура("АдресФайла, ОбъектСсылкаДляПодписи", 
					АдресФайла, ОбъектСсылкаДляПодписи);
			КонецЕсли;
			
			МассивОбъектовДляПодписи.Добавить(СтруктураДляПодписи);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВизыСогласования") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Резолюции") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда 
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний).
//
// Параметры:
//  ОбъектСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//
Функция ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла();
	МассивПолей = СформироватьНаборВажныхПолей(ОбъектСсылка, Версия, ДополнительныеПараметры);
	СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСПутем);
	Исключение
	КонецПопытки;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний) и подписи.
//
// Параметры:
//  ОбъектСсылка
//  АдресПодписи
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//
// Возвращаемое значение:
//  Структура -
//    ДвоичныеДанные
//    ДвоичныеДанныеПодписи
//
Функция ПолучитьДвоичныеДанныеОбъектаИПодписи(ОбъектСсылка,
	АдресПодписи, Версия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия, ДополнительныеПараметры);
	
	Попытка
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	Исключение
		ДвоичныеДанныеПодписи = Неопределено;
	КонецПопытки;
	
	СтруктураВозврата = Новый Структура("ДвоичныеДанные, ДвоичныеДанныеПодписи", 
		ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заносит информацию о массиве ЭП, замещая прежние подписи.
//
Процедура ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВРегистр, ОбъектСсылка,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	//МиСофт+
	Если ОбъектСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//МиСофт-
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбъектСсылка, "Редактирует, Зашифрован");
		Редактирует = СтруктураРеквизитов.Редактирует;
		Зашифрован = СтруктураРеквизитов.Зашифрован;
		
		Если НЕ Редактирует.Пустая() Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать занятый файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
		Зашифрован = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "Зашифрован");
		Если Зашифрован Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать зашифрованный файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписываемыйОбъектСсылка = ОбъектСсылка;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ПодписываемыйОбъектСсылка = ОбъектСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, , УникальныйИдентификатор);
		
		ОбъектСТЧЭП = ПодписываемыйОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено;
		
		Если Не ОбъектСТЧЭП Тогда
			//МиСофт+
			Если ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникСсылка.Файлы") Тогда
				Выборка = ПолучитьЭлектронныеПодписи(ПодписываемыйОбъектСсылка);
			КонецЕсли;
			//МиСофт-
		КонецЕсли;
		
		// проверим права на удаление подписей
		Если ОбъектСТЧЭП Тогда
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда 
				Для Каждого Подпись Из ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи Цикл
					
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
				Пока Выборка.Следующий() Цикл
					
					Подпись = Выборка;
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектСТЧЭП Тогда
			ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
				НоваяЗапись.КомуВыданСертификат = Данные.КомуВыданСертификат;
				НоваяЗапись.ДатаПодписи = Данные.ДатаПодписи;
				НоваяЗапись.ИмяФайлаПодписи = Данные.ИмяФайлаПодписи;
				НоваяЗапись.Комментарий = Данные.Комментарий;
				НоваяЗапись.Отпечаток = Данные.Отпечаток;
				НоваяЗапись.Подпись = Новый ХранилищеЗначения(Данные.НоваяПодписьДвоичныеДанные);
				НоваяЗапись.УстановившийПодпись = Данные.УстановившийПодпись;
				НоваяЗапись.Сертификат = Новый ХранилищеЗначения(Данные.ДвоичныеДанныеСертификата);
			КонецЦикла;
		Иначе
			РаботаСЭП.УдалитьПодписиОбъекта(ПодписываемыйОбъектСсылка);
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				РаботаСЭП.ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка, Данные.НоваяПодписьДвоичныеДанные,
					Данные.Отпечаток, Данные.ДатаПодписи, Данные.Комментарий, Данные.ИмяФайлаПодписи, 
					Данные.КомуВыданСертификат, Данные.ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
		
		ПодписываемыйОбъект.ПодписанЭП = (МассивДанныхДляЗанесенияВРегистр.Количество() <> 0);
		ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, УникальныйИдентификатор);
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлСсылка = ОбъектСсылка;
			ВерсияПодписана = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПодписываемыйОбъектСсылка, "ПодписанЭП");
			
			ФайлСсылкаПодписан = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФайлСсылка, "ПодписанЭП");
			Если ФайлСсылкаПодписан <> ВерсияПодписана Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
				ФайлОбъект.ПодписанЭП = ВерсияПодписана;
				
				ФайлОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заносит информацию о массиве ЭП.
//
Процедура ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВРегистр, МассивАдресов, УникальныйИдентификатор = Неопределено) Экспорт
	
	// Проверяем, чтоб подписываемые файлы были не заняты и не зашифрованы
	Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
		ОбъектСсылка = Данные.ОбъектСсылка;
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбъектСсылка, "Редактирует, Зашифрован");
			Если Не СтруктураРеквизитов.Редактирует.Пустая() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать занятый файл: ""%1""'"),
					ОбъектСсылка);
			КонецЕсли;
			Если СтруктураРеквизитов.Зашифрован Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать зашифрованный файл: ""%1""'"),
					ОбъектСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
			Если ТипЗнч(Данные.ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
				РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписиФайла(
					Данные.ОбъектСсылка, 
					Данные.НоваяПодписьДвоичныеДанные, 
					Данные.Отпечаток,
					Данные.ДатаПодписи,
					Данные.Комментарий, 
					Данные.ИмяФайлаПодписи,
					Данные.КомуВыданСертификат,
					Данные.ДвоичныеДанныеСертификата,
					УникальныйИдентификатор);
			Иначе
				ЭлектроннаяПодпись.ЗанестиИнформациюОПодписи(
					Данные.ОбъектСсылка,
					Данные.НоваяПодписьДвоичныеДанные, 
					Данные.Отпечаток,
					Данные.ДатаПодписи,
					Данные.Комментарий, 
					Данные.ИмяФайлаПодписи,
					Данные.КомуВыданСертификат,
					Данные.ДвоичныеДанныеСертификата,
					УникальныйИдентификатор);
				ПротоколированиеРаботыПользователей.ЗаписатьПодписаниеЭП(Данные.ОбъектСсылка, Данные.КомуВыданСертификат, Данные.Комментарий);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Удаляем Файлы из временного хранилища после получения
	Для Каждого АдресФайла Из МассивАдресов Цикл
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет изменены ли ключевые поля и бросает исключение, если изменены.
//
Процедура ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ПроверяемыйОбъект, Ссылка) Экспорт
	
	РеквизитыОбъектаДоИзменения = Ссылка.ПолучитьОбъект().Метаданные().Реквизиты;
	
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если РеквизитыОбъектаДоИзменения.Найти(ИмяПоля) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыйОбъект[ИмяПоля] <> Ссылка[ИмяПоля] Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			Если ПроверяемыйОбъект[ИмяТабличнойЧасти].Количество() <> Ссылка[ИмяТабличнойЧасти].Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
			НомерСтроки = 0;
			Для Каждого Строка Из ПроверяемыйОбъект[ИмяТабличнойЧасти] Цикл
				
				СтрокаВБазе = Ссылка[ИмяТабличнойЧасти][НомерСтроки];
				
				Если Строка[ИмяКолонки] <> СтрокаВБазе[ИмяКолонки] Тогда 
					ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того что объект может быть подписан ЭП.
//
Функция ОбъектМожетБытьПодписанЭП(ОбъектСсылка) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектСсылка);
	Если ТипОбъекта = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ВидДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектСсылка, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокумента) И ВидДокумента.ЯвляетсяКомплектомДокументов Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВизыСогласования") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Резолюции") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(ПодписанныйОбъектСсылка, УстановившийПодпись = Неопределено,
	ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.УникальныйИдентификатор,
		|	ЭП.ДатаПодписи,
		|	ЭП.Объект,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Версия,
		|	ЭП.ДатаПроверкиПодписи,
		|	ЭП.ИмяФайлаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.КомуВыданСертификат,
		|	ЭП.Отпечаток,
		|	ЭП.Подпись,
		|	ЭП.ПодписьВерна,
		|	ЭП.Сертификат,
		|	ЭП.СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЭП.Объект.ПодписанЭП
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭП.Объект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ЭП.Объект = &ОбъектСсылка";
	Запрос.Параметры.Вставить("ОбъектСсылка", ПодписанныйОбъектСсылка);
	Если УстановившийПодпись <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УстановившийПодпись = &УстановившийПодпись";
		Запрос.Параметры.Вставить("УстановившийПодпись", УстановившийПодпись);
	КонецЕсли;
	Если ДатаПодписи <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ДатаПодписи = &ДатаПодписи";
		Запрос.Параметры.Вставить("ДатаПодписи", ДатаПодписи);
	КонецЕсли;
	Если УникальныйИдентификатор <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УникальныйИдентификатор = &УникальныйИдентификатор";
		Запрос.Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект,
	УстановившийПодпись = Неопределено, ДатаПодписи = Неопределено, УникальныйИдентификатор = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(ПодписанныйОбъект.Ссылка, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обновляет информацию о статусе проверки подписи в РС ЭлектронныеПодписи.
//
Процедура ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДатаПроверки = Неопределено,
	ОбщийСтатусПроверки = Неопределено) Экспорт
	
	Если НЕ ДанныеПодписи.Свойство("Объект")
		ИЛИ НЕ ДанныеПодписи.Свойство("УстановившийПодпись")
		ИЛИ НЕ ДанныеПодписи.Свойство("ДатаПодписи") Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
	КонецЕсли;
	
	ПодписанныйОбъект = ДанныеПодписи.Объект;
	УстановившийПодпись = ДанныеПодписи.УстановившийПодпись;
	ДатаПодписи = ДанныеПодписи.ДатаПодписи;
	УникальныйИдентификатор = ДанныеПодписи.УникальныйИдентификатор;
	
	Подпись = ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект, УстановившийПодпись, ДатаПодписи, УникальныйИдентификатор);
	
	Если Подпись = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
	Подпись.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	
	Подпись.Записать();
	
	ДатаПроверки = Подпись.ДатаПроверкиПодписи;
	ОбщийСтатусПроверки = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
		Подпись.ПодписьВерна, Подпись.СертификатДействителен, Подпись.ДатаПроверкиПодписи);
	
КонецПроцедуры

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка,
	НоваяПодписьДвоичныеДанные,	Отпечаток, ДатаПодписи, Комментарий,
	ИмяФайлаПодписи, КомуВыданСертификат, ДвоичныеДанныеСертификата,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ДатаПодписиИзДвоичныхДанных = РаботаСЭП.ИзвлечьДатуСозданияПодписиИзДвоичныхДанных(
		НоваяПодписьДвоичныеДанные);
		
	ПодписьЗагруженаИзФайла = Не ЗначениеЗаполнено(ДатаПодписи);
	
	Если ЗначениеЗаполнено(ДатаПодписиИзДвоичныхДанных) Тогда
		ДатаПодписи = ДатаПодписиИзДвоичныхДанных;
	ИначеЕсли Не ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ПодписьЗагруженаИзФайла Тогда
		ДатаПроверкиПодписи = ДатаПодписи;
	КонецЕсли;
	
	Подпись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	Подпись.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Подпись.ДатаПодписи = ДатаПодписи;
	Подпись.Объект = ПодписываемыйОбъектСсылка;
	Подпись.УстановившийПодпись = Пользователи.ТекущийПользователь();
	Подпись.Версия = 3; // актуальная версия подписываемых данных на текущий момент
	Подпись.Комментарий = Комментарий;
	Подпись.КомуВыданСертификат = КомуВыданСертификат;
	Подпись.Отпечаток = Отпечаток;
	Подпись.Подпись = Новый ХранилищеЗначения(НоваяПодписьДвоичныеДанные);
	Подпись.Сертификат = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата); 
	
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена");
	
	Если Не ПодписьЗагруженаИзФайла Тогда
		Подпись.ДатаПроверкиПодписи = ДатаПроверкиПодписи;
		Подпись.ПодписьВерна = Истина;
		Подпись.СертификатДействителен = Истина;
		СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна");
	КонецЕсли;
	
	Подпись.Записать();
	
КонецПроцедуры

// Создает копию электронной подписи от источника приемнику.
//
// Параметры:
//  Источник - Структура
//    Объект
//    УстановившийПодпись
//    ДатаПодписи
//  ПриемникСсылка
//
// Возвращаемое значение:
//  Истина, если копирование прошло успешно, иначе Ложь.
//
Функция СкопироватьПодпись(Источник, ПриемникСсылка) Экспорт
	
	Если Не Источник.Свойство("Объект")
		ИЛИ Не Источник.Свойство("УстановившийПодпись") 
		ИЛИ Не Источник.Свойство("ДатаПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодписьИсточника = ПолучитьЭлектроннуюПодпись(Источник.Объект, Источник.УстановившийПодпись, Источник.ДатаПодписи);
	Если ПодписьИсточника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ПодписьПриемника, ПодписьИсточника);
		ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПодписьПриемника.Объект = ПриемникСсылка;
		ПодписьПриемника.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Создает копии всех подписей от источника приемнику.
//
// Возвращаемое значение:
//  Количество скопированных подписей.
//
Функция СкопироватьВсеПодписи(ИсточникСсылка, ПриемникСсылка) Экспорт
	
	КоличествоПодписей = 0;
	
	Выборка = ПолучитьЭлектронныеПодписи(ИсточникСсылка);
	Пока Выборка.Следующий() Цикл
		Попытка
			ПодписьПриемника = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ПодписьПриемника, Выборка);
			ПодписьПриемника.УникальныйИдентификатор = Новый УникальныйИдентификатор;
			ПодписьПриемника.Объект = ПриемникСсылка;
			ПодписьПриемника.Записать();
			КоличествоПодписей = КоличествоПодписей + 1;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат КоличествоПодписей;
	
КонецФункции

// Проверяет существование хотя бы одной подписи для любого документа.
//
Функция СуществуютПодписиКДокументам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи
	|ГДЕ
	|	Объект ССЫЛКА Справочник.ВнутренниеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ВходящиеДокументы
	|	ИЛИ Объект ССЫЛКА Справочник.ИсходящиеДокументы";

	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает дату создания подписи, полученную из двоичных данных подписи.
//
Функция ИзвлечьДатуСозданияПодписиИзДвоичныхДанных(ДвоичныеДанныеПодписи) Экспорт
	
	Результат = Дата(1, 1, 1);
	
	Попытка
		ДвоичныеДанные = ДвоичныеДанныеПодписи;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла);
		Символ = ЧтениеТекста.Прочитать(1);
		Пока Символ <> Неопределено Цикл
			Если КодСимвола(Символ) = 15 Тогда
				Символ = ЧтениеТекста.Прочитать(2);
				Если КодСимвола(Символ, 1) = 23 И КодСимвола(Символ, 2) = 13 Тогда
					ДатаПодписания = ЧтениеТекста.Прочитать(12);
					Попытка
						Результат = МестноеВремя(Дата("20" + ДатаПодписания));
					Исключение
					КонецПопытки;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			Символ = ЧтениеТекста.Прочитать(1);
		КонецЦикла;
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Записывает в кеш информацию о статусе проверки ЭП.
//
// Параметры:
//  Ссылка - ссылка на документы или версии файлов.
//
Процедура УстановитьСтатусПроверки(Знач Ссылка, Статус) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Ссылка = Ссылка.Владелец;
	КонецЕсли;
	
	Если Не Ссылка.Пустая() И Ссылка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписиРегистра = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Объект = Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	МенеджерЗаписиРегистра.Объект = Ссылка;
	МенеджерЗаписиРегистра.СтатусЭП = Статус;
	МенеджерЗаписиРегистра.ДатаПроверкиЭП = ТекущаяДатаСеанса();
	МенеджерЗаписиРегистра.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под текущей версией файла.
// Общий статус подписи файла действителен только в том случае, когда действительны все
// подписи файла.
//
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура УстановитьСтатусПроверкиДляФайла(ВерсияФайла) Экспорт
	
	ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(ВерсияФайла);
	
	Если ЭПФайла.Количество() = 0 Тогда
		УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПФайла.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		//МиСофт+
		Если Не (ЭПФайла.ПодписьВерна И ЭПФайла.СертификатДействителен) Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		//МиСофт-
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под документом с учетом
// статусов подписей подчиненных файлов.
// Общий статус подписи документа действителен только в том случае, когда действительны все
// подписи самого документа и его подчиненных файлов.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы
//             СправочникСсылка.ВходящиеДокументы
//             СправочникСсылка.ИсходящиеДокументы
//
Процедура УстановитьСтатусПроверкиДляДокумента(Документ) Экспорт
	
	ЭПДокумента = РаботаСЭП.ПолучитьЭлектронныеПодписи(Документ);
	
	// Если под самим документом нет ни одной подписи, то наличие подписей под подчиненными файлами
	// не учитываем.
	Если ЭПДокумента.Количество() = 0 Тогда
		УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПДокумента.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПДокумента.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПДокумента.ПодписьВерна Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем статусы подписей подчиненных файлов.
	ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);
	
	Для Каждого Файл Из ПодчиненныеФайлы Цикл
		
		ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(Файл.ТекущаяВерсия);
		
		Если ЭПФайла.Количество() = 0 Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
			Возврат;
		КонецЕсли;
	
		Пока ЭПФайла.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
				Возврат;
			КонецЕсли;
			
			Если Не ЭПФайла.ПодписьВерна Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   ПерсональныеНастройки (Структура)
//       |- ДействияПриСохраненииСЭП (Строка)
//       |- ПутьМодуляКриптографии (Строка)
//       |- РасширениеДляФайловПодписи (Строка)
//       |- РасширениеДляЗашифрованныхФайлов (Строка)
//       |- ОтпечатокЛичногоСертификатаДляШифрования (Строка)
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", "Спрашивать");
	ПерсональныеНастройки.Вставить("ПутьМодуляКриптографии", "");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = "ЭП";
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
	
КонецФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Параметры:
//   СтруктураОснование (Структура) Необязательный. Структура, в которую будут добавлены ключи общих настроек.
//
// Возвращаемое значение: 
//   ОбщиеНастройки (Структура) Общие настройки подсистемы.
//       - ПровайдерЭП (Строка)
//       - ТипПровайдераЭП (Число)
//       - ВыполнятьПроверкуЭПНаСервере (Булево)
//       - АлгоритмПодписи (Строка)
//       - АлгоритмХеширования (Строка)
//       - АлгоритмШифрования (Строка)
//
Функция ОбщиеНастройки(СтруктураОснование = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураОснование) = Тип("Структура") Тогда
		ОбщиеНастройки = СтруктураОснование;
	Иначе
		ОбщиеНастройки = Новый Структура("ВыполнятьПроверкуЭПНаСервере");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеНастройки.ВыполнятьПроверкуЭПНаСервере = Константы.ВыполнятьПроверкуЭПНаСервере.Получить();
	
	Возврат ОбщиеНастройки;
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект, Имя)
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, Имя, НазначениеТипаXML.Явное); 
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

// Добавляет ЭП из сообщения почты.
//
Процедура ДобавитьЭПИзСообщения(ОбъектСсылка, МассивФайловПодписей) Экспорт
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		НоваяПодписьДвоичныеДанные = ОбъектДляПодписи.ДвоичныеДанные;
		ИмяФайлаПодписи = ОбъектДляПодписи.Имя;
		
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		Отпечаток = ОбъектДляПодписи.Отпечаток;
		КомуВыданСертификат = ОбъектДляПодписи.КомуВыданСертификат;
		
		ДвоичныеДанныеСертификата = ОбъектДляПодписи.ДвоичныеДанныеСертификата;
		
		ДанныеДляЗанесенияВБазу = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
			ОбъектСсылкаДляПодписи, 
			НоваяПодписьДвоичныеДанные, 
			Отпечаток, 
			ДатаПодписи, 
			"", // Комментарий, 
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			"", // АдресФайла
			ДвоичныеДанныеСертификата);
		
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
			
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу, МассивАдресов);
	
КонецПроцедуры	

#КонецОбласти




