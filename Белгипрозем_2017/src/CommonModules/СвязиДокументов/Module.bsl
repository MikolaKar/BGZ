Функция ПолучитьСвязанныйДокумент(Документ, Знач ТипСвязи) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СвязанныйДокумент;
	
КонецФункции

Функция ПолучитьСвязанныеДокументы(Документ, Знач ТипСвязи) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйДокумент");
	
КонецФункции

Процедура СоздатьНастройкуСвязи(
	ТипСвязи,
	СсылкаИз,
	СсылкаНа,
	ХарактерСвязи,
	ТипОбратнойСвязи = Неопределено,
	ХарактерОбратнойСвязи = Неопределено,
	Предопределенная = Ложь,
	Комментарий = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСвязи = ТипСвязи;
	МенеджерЗаписи.СсылкаИз = СсылкаИз;
	МенеджерЗаписи.СсылкаНа = СсылкаНа;
	МенеджерЗаписи.ХарактерСвязи = ХарактерСвязи;
	МенеджерЗаписи.ТипОбратнойСвязи = ТипОбратнойСвязи;
	МенеджерЗаписи.ХарактерОбратнойСвязи = ХарактерОбратнойСвязи;
	МенеджерЗаписи.Предопределенная = Предопределенная;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
	Если ЗначениеЗаполнено(ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСвязи = ТипОбратнойСвязи ;
		МенеджерЗаписи.СсылкаИз = СсылкаНа;
		МенеджерЗаписи.СсылкаНа = СсылкаИз;
		МенеджерЗаписи.ХарактерСвязи = ХарактерОбратнойСвязи;
		МенеджерЗаписи.ТипОбратнойСвязи = ТипСвязи;
		МенеджерЗаписи.ХарактерОбратнойСвязи = ХарактерСвязи;
		МенеджерЗаписи.Предопределенная = Предопределенная;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСвязь(
	Документ,
	СвязанныйДокумент,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	Порядок = 0) Экспорт
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Документ;
		
		Если ТипЗнч(СвязанныйДокумент) = Тип("Строка") Тогда 
			МенеджерЗаписи.СвязаннаяСтрока = СвязанныйДокумент;
		Иначе
			МенеджерЗаписи.СвязанныйДокумент = СвязанныйДокумент;
		КонецЕсли;	

		МенеджерЗаписи.ТипСвязи = ТипСвязи;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Порядок = Порядок;
		
		Если Установил = Неопределено Тогда
			МенеджерЗаписи.Установил = ПользователиКлиентСервер.ТекущийПользователь();
		Иначе
			МенеджерЗаписи.Установил = Установил;
		КонецЕсли;
		
		Если ДатаУстановки = Неопределено Тогда
			МенеджерЗаписи.ДатаУстановки = ТекущаяДатаСеанса();
		Иначе
			МенеджерЗаписи.ДатаУстановки = ДатаУстановки;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
		НастройкаСвязи = ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи);
		Если НастройкаСвязи = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйДокумент));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
			МенеджерОбратнойЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
			МенеджерОбратнойЗаписи.Документ = МенеджерЗаписи.СвязанныйДокумент;
			МенеджерОбратнойЗаписи.СвязанныйДокумент = МенеджерЗаписи.Документ;
			МенеджерОбратнойЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
			МенеджерОбратнойЗаписи.Установил = МенеджерЗаписи.Установил;
			МенеджерОбратнойЗаписи.ДатаУстановки = МенеджерЗаписи.ДатаУстановки;
			МенеджерОбратнойЗаписи.Комментарий = МенеджерЗаписи.Комментарий;
			МенеджерОбратнойЗаписи.Порядок = МенеджерЗаписи.Порядок;
			МенеджерОбратнойЗаписи.Записать();
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьСвязь(Документ, СвязанныйДокумент, ТипСвязи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("Строка") Тогда 
		МенеджерЗаписи.СвязаннаяСтрока = СвязанныйДокумент;
	Иначе
		МенеджерЗаписи.СвязанныйДокумент = СвязанныйДокумент;
	КонецЕсли;	

	МенеджерЗаписи.ТипСвязи = ТипСвязи;
	МенеджерЗаписи.Удалить();
	
	НастройкаСвязи = ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи);
	Если НастройкаСвязи = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйДокумент));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = СвязанныйДокумент;
		МенеджерЗаписи.СвязанныйДокумент = Документ;
		МенеджерЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомментарийТипаСвязи(ТипСвязи, Комментарий) Экспорт
	
	ТипСвязиОбъект = ТипСвязи.ПолучитьОбъект();
	ТипСвязиОбъект.Комментарий = Комментарий;
	ТипСвязиОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьРодителей(Элемент) Экспорт
    УстановитьПривилегированныйРежим(Истина);	
	Родители = Новый Массив;
	
	ТекущийРодитель = Элемент.Родитель;
	Пока Не ТекущийРодитель.Пустая() Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Родители;
	
КонецФункции

Функция ПолучитьНастройкуСвязи(Документ, СвязанныйДокумент, ТипСвязи) Экспорт
	
	СтруктураВозврата = Новый Структура("ТипСвязи, СсылкаИз, СсылкаНа, ТипОбратнойСвязи, ХарактерСвязи, ХарактерОбратнойСвязи");
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("Уровень");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаИз,
		|	НастройкаСвязей.СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Комментарий
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";
		
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Проекты")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Документ)) ";
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) ";
		
		ВидДокументаСсылкаИз = Документ.ВидДокумента;
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиСсылкаИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", 	  РодителиСсылкаИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если ТипЗнч(СвязанныйДокумент) = Тип("Строка")
		Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Проекты")
		Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
		Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйДокумент)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйДокумент) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйДокумент)) ";
		Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
		|	ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
		|	ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) ";
		
		ВидДокументаСсылкаНа = СвязанныйДокумент.ВидДокумента;
		РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
		ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
		
		Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
		Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
		Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиСвязи.Добавить();
		НоваяСтрока.ТипСвязи = Выборка.ТипСвязи;
		НоваяСтрока.СсылкаИз = Выборка.СсылкаИз;
		НоваяСтрока.СсылкаНа = Выборка.СсылкаНа;
		
		Если ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаИз)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаИз) Тогда
			НоваяСтрока.УровеньСсылкаИз = 0;
		Иначе
			Если Выборка.СсылкаИз = ВидДокументаСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 0;
			ИначеЕсли Выборка.СсылкаИз = ПустаяСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 1000;
			Иначе
				НоваяСтрока.УровеньСсылкаИз = РодителиСсылкаИз.Найти(Выборка.СсылкаИз) + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.СсылкаНа) = Тип("Строка")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаНа)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаНа) Тогда
			НоваяСтрока.УровеньСсылкаНа = 0;
		Иначе
			Если Выборка.СсылкаНа = ВидДокументаСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 0;
			ИначеЕсли Выборка.СсылкаНа = ПустаяСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 1000;
			Иначе
				НоваяСтрока.УровеньСсылкаНа = РодителиСсылкаНа.Найти(Выборка.СсылкаНа) + 1;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Уровень = НоваяСтрока.УровеньСсылкаИз + НоваяСтрока.УровеньСсылкаНа; 
		НоваяСтрока.ХарактерСвязи = Выборка.ХарактерСвязи;
		НоваяСтрока.ТипОбратнойСвязи = Выборка.ТипОбратнойСвязи;
		НоваяСтрока.ХарактерОбратнойСвязи = Выборка.ХарактерОбратнойСвязи;
	КонецЦикла;
	
	НастройкиСвязи.Сортировать("Уровень Возр");
	Если НастройкиСвязи.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, НастройкиСвязи[0]);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиСвязи(Документ, СвязанныйДокумент = Неопределено) Экспорт
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИзПредставление");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНаПредставление");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат НастройкиСвязи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаИз,
		|	НастройкаСвязей.СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Комментарий
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НЕ НастройкаСвязей.ТипСвязи.ПометкаУдаления";
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Документ) = Тип("СправочникСсылка.Проекты")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Документ)) ";
		Запрос.УстановитьПараметр("Документ", Документ);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) ";
		
		ВидДокументаСсылкаИз = Документ.ВидДокумента;
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", РодителиИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если СвязанныйДокумент <> Неопределено Тогда
		Если ТипЗнч(СвязанныйДокумент) = Тип("Строка")
			Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ВходящееСообщениеСВД")
			Или ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.ИсходящееСообщениеСВД")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйДокумент)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйДокумент) Тогда
			Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйДокумент)) ";
			Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
		Иначе
			Запрос.Текст = Запрос.Текст +
			" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
			|	ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
			|	ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) ";
			
			ВидДокументаСсылкаНа = СвязанныйДокумент.ВидДокумента;
			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
			
			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", 	  РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", 	  ПустаяСсылкаНа);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиСвязи.Добавить();
		НоваяСтрока.ТипСвязи = Выборка.ТипСвязи;
		НоваяСтрока.СсылкаИз = Выборка.СсылкаИз;
		НоваяСтрока.СсылкаНа = Выборка.СсылкаНа;
		
		Если ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.ВходящиеДокументы";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Входящий документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.ИсходящиеДокументы";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Исходящий документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.ВнутренниеДокументы";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Внутренний документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Файлы") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.Файлы";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Файл'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Мероприятия") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.Мероприятия";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Мероприятие'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Проекты") Тогда
			НоваяСтрока.ТипСсылкаИз = "СправочникСсылка.Проекты";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Проект'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("ДокументСсылка.ВходящееСообщениеСВД") Тогда
			НоваяСтрока.ТипСсылкаИз = "ДокументСсылка.ВходящееСообщениеСВД";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Входящее сообщение СВД'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаИз) = Тип("ДокументСсылка.ИсходящееСообщениеСВД") Тогда
			НоваяСтрока.ТипСсылкаИз = "ДокументСсылка.ИсходящееСообщениеСВД";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Исходящее сообщение СВД'");
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаИз) Тогда
			НоваяСтрока.ТипСсылкаИз = "ДокументСсылка.ВходящееПисьмо";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Входящее письмо'");
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаИз) Тогда
			НоваяСтрока.ТипСсылкаИз = "ДокументСсылка.ИсходящееПисьмо";
			НоваяСтрока.ТипСсылкаИзПредставление = НСтр("ru = 'Исходящее письмо'");
		КонецЕсли;
		
		Если ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.ВходящиеДокументы";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Входящий документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.ИсходящиеДокументы";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Исходящий документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.ВнутренниеДокументы";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Внутренний документ'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("Строка") Тогда
			НоваяСтрока.ТипСсылкаНа = "Строка";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Внешняя ссылка'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.Файлы";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Файл'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.Мероприятия";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Мероприятие'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
			НоваяСтрока.ТипСсылкаНа = "СправочникСсылка.Проекты";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Проект'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("ДокументСсылка.ВходящееСообщениеСВД") Тогда
			НоваяСтрока.ТипСсылкаНа = "ДокументСсылка.ВходящееСообщениеСВД";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Входящее сообщение СВД'");
		ИначеЕсли ТипЗнч(Выборка.СсылкаНа) = Тип("ДокументСсылка.ИсходящееСообщениеСВД") Тогда
			НоваяСтрока.ТипСсылкаНа = "ДокументСсылка.ИсходящееСообщениеСВД";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Исходящее сообщение СВД'");
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаНа) Тогда
			НоваяСтрока.ТипСсылкаНа = "ДокументСсылка.ВходящееПисьмо";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Входящее письмо'");
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаНа) Тогда
			НоваяСтрока.ТипСсылкаНа = "ДокументСсылка.ИсходящееПисьмо";
			НоваяСтрока.ТипСсылкаНаПредставление = НСтр("ru = 'Исходящее письмо'");
		КонецЕсли;
		
		НоваяСтрока.ХарактерСвязи = Выборка.ХарактерСвязи;
		НоваяСтрока.ТипОбратнойСвязи = Выборка.ТипОбратнойСвязи;
		НоваяСтрока.ХарактерОбратнойСвязи = Выборка.ХарактерОбратнойСвязи;
	КонецЦикла;
	
	Возврат НастройкиСвязи;
	
КонецФункции

Процедура УстановитьСвязь(
	Документ,
	НачальныйСвязанныйДокумент,
	СвязанныйДокумент,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "") Экспорт
	
	Если НачальныйСвязанныйДокумент = СвязанныйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальныйСвязанныйДокумент) Тогда
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			СвязиДокументов.УдалитьСвязь(Документ, НачальныйСвязанныйДокумент, ТипСвязи);
			СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи, Установил, ДатаУстановки, Комментарий);
		Иначе
			СвязиДокументов.УдалитьСвязь(Документ, НачальныйСвязанныйДокумент, ТипСвязи);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			СвязиДокументов.СоздатьСвязь(Документ, СвязанныйДокумент, ТипСвязи, Установил, ДатаУстановки, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	НачальныйСвязанныйДокумент = СвязанныйДокумент;
	
КонецПроцедуры

Процедура ОбновитьСвязиДокумента(СвязанныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиДокументов.Документ,
		|	СвязиДокументов.ТипСвязи,
		|	СвязиДокументов.СвязанныйДокумент
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.СвязанныйДокумент = &СвязанныйДокумент";
	Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ = Выборка.Документ;
		МенеджерЗаписи.ТипСвязи = Выборка.ТипСвязи;
		МенеджерЗаписи.СвязанныйДокумент = Выборка.СвязанныйДокумент;
		МенеджерЗаписи.Прочитать();
		
		Если ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			Получатели = СвязанныйДокумент.Получатели;
			
			Отправлен = Ложь;
			Если Получатели.Количество() = 1 Тогда
				Отправлен = Получатели[0].Отправлен;
				
			ИначеЕсли Получатели.Найти(Ложь, "Отправлен") = Неопределено Тогда
				Отправлен = Истина;
				
			ИначеЕсли ТипЗнч(МенеджерЗаписи.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				ВходящийДокумент = МенеджерЗаписи.Документ;
				
				ПараметрыОтбора = Новый Структура("Получатель", ВходящийДокумент.Отправитель);
				НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					Отправлен =	НайденныеСтроки[0].Отправлен;
				Иначе
					ПараметрыОтбора = Новый Структура("Получатель, Адресат", ВходящийДокумент.Отправитель, ВходящийДокумент.Подписал);
					НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 1 Тогда
						Отправлен =	НайденныеСтроки[0].Отправлен;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Отправлен <> МенеджерЗаписи.СвязанныйДокументОтправлен Тогда
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьРеквизитыПриДобавленииСвязи(ДокументСсылка, УникальныйИдентификаторДокумента, ТипСвязи) Экспорт
	
	РеквизитыИзменены = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
	
		Если (ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение) И (Не ДокументСсылка.Повторное) Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект.Повторное = Истина;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
	
		Если (ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение) И (Не ДокументСсылка.Дубликат) Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект.Дубликат = Истина;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Если (ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии) И (Не ДокументСсылка.НеДействует) Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект.НеДействует = Истина;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция УстановитьРеквизитыПриУдаленииСвязи(ДокументСсылка, УникальныйИдентификаторДокумента, ТипСвязи) Экспорт
	
	РеквизитыИзменены = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		Если (ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение) И ДокументСсылка.Повторное Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка,, УникальныйИдентификаторДокумента);
			ДокументОбъект.Повторное = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
	
		Если (ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение) И ДокументСсылка.Дубликат Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект.Дубликат = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Если (ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии) И ДокументСсылка.НеДействует Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка,, УникальныйИдентификаторДокумента);
			ДокументОбъект.НеДействует = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

// Обработчик обновления информационной базы
//
Процедура ПерейтиНаВерсию_1_2_1_3() Экспорт
	
	Набор = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.Содержит);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать(Истина);
	
	Набор = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.ТипСвязи.Установить(Справочники.ТипыСвязей.ВходитВКомплект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать(Истина);
	
	УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ВходитВКомплект, НСтр("ru = 'Ссылка на комплект документов'"));
	УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.Содержит, НСтр("ru = 'Ссылка на элемент комплекта'"));
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ВходитВКомплект,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Содержит,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.Файлы.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,,,
		Истина);
	
КонецПроцедуры

Процедура ОбновитьСвязиПриРазделенииИзмерения() Экспорт
	
	// Разделение данных в регистре сведений СвязиДокументов на два измерения
	Если Метаданные.РегистрыСведений.СвязиДокументов.Измерения.Найти("УдалитьСвязанныйДокумент") <> Неопределено Тогда
		
		ВыборкаТипыСвязей = Справочники.ТипыСвязей.Выбрать();
		Пока ВыборкаТипыСвязей.Следующий() Цикл
			ТипСвязи = ВыборкаТипыСвязей.Ссылка;
			
			НаборСвязиДокументов = РегистрыСведений.СвязиДокументов.СоздатьНаборЗаписей();
			НаборСвязиДокументов.Отбор.ТипСвязи.Установить(ТипСвязи);
			НаборСвязиДокументов.Прочитать();
			
			ЗаписатьНабор = Ложь;
			Для каждого Запись Из НаборСвязиДокументов Цикл
				Если ЗначениеЗаполнено(Запись.СвязанныйДокумент) Или ЗначениеЗаполнено(Запись.СвязаннаяСтрока)
					Или Не ЗначениеЗаполнено(Запись.УдалитьСвязанныйДокумент) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(Запись.УдалитьСвязанныйДокумент) = Тип("Строка") Тогда
					Запись.СвязаннаяСтрока = Запись.УдалитьСвязанныйДокумент;
				Иначе
					Запись.СвязанныйДокумент = Запись.УдалитьСвязанныйДокумент;
				КонецЕсли;
				Запись.УдалитьСвязанныйДокумент = Неопределено;
				
				ЗаписатьНабор = Истина;
			КонецЦикла;
			
			Если ЗаписатьНабор Тогда
				НаборСвязиДокументов.ОбменДанными.Загрузка = Истина;
				НаборСвязиДокументов.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает ресурсы ОтправленОтвет и Переслан регистра сведений
// КешИнформацииОбОбъектах.
//
Процедура ОбновитьКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ОтправленОтвет = Ложь;
			Запись.Переслан = Ложь;
			Запись.ПолученОтвет = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СвязиДокументов.Документ КАК Ссылка,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОтправленОтвет,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Переслан,
			|	ВЫБОР
			|		КОГДА СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|				ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПолученОтвет
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ГДЕ
			|	(СвязиДокументов.Документ ССЫЛКА Документ.ВходящееПисьмо
			|			ИЛИ СвязиДокументов.Документ ССЫЛКА Документ.ИсходящееПисьмо)
			|	И (СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|			ИЛИ СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент))");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОтправленОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ОтправленОтвет",
					Истина);
			ИначеЕсли Выборка.Переслан Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"Переслан",
					Истина);
			ИначеЕсли Выборка.ПолученОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ПолученОтвет",
					Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя ресурса в регистре сведений КешИнформацииОбОбъекте для
// указанного типа связи.
//
Функция ПолучитьИмяПризнакаДляТипаСвязи(ТипСвязи) Экспорт
	
	Если ТипСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтветныйДокумент Тогда
		Возврат "ОтправленОтвет";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом Тогда
		Возврат "Переслан";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ПолученОтветныйДокумент Тогда
		Возврат "ПолученОтвет";
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип связи письма'");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВсеСвязиДокумента(Документ, ПолучатьПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиДокументов.СвязанныйДокумент,
		|	СвязиДокументов.Комментарий,
		|	СвязиДокументов.Установил,
		|	СвязиДокументов.ДатаУстановки,
		|	СвязиДокументов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Документ";
		
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + " И СвязиДокументов.СвязанныйДокумент.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

// Проверяет возможность установки проверяемого типа связи между проверяемыми документами 
//
// Параметры:
//  Документ  	 			  - Любая ссылка - документ основание связи
//  СвязанныйДокумент	 	  - Любая ссылка - документ с которым пытаемся создать связь
//  ТипСвязи			  	  – Справочник.ТипыСвязи - проверяемый тип связи
//
// Возвращаемое значение
//    Булево - Истина - если между проверяемыми документами возможно установить проверяемый тип связи
//			   Ложь - в противном случае
//
Функция ЭтоПодходящийТипСвязи(ДокументСсылка, СвязанныйДокумент, ТипСвязи) Экспорт 
	
	Если ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение 
		Или ТипСвязи = Справочники.ТипыСвязей.ПовторноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.Дубликат Тогда 
		ВестиУчетОбращенийГраждан = ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан");

		Если Не ВестиУчетОбращенийГраждан Тогда
			Возврат Ложь;
		ИначеЕсли ЗначениеЗаполнено(СвязанныйДокумент)
			И ТипЗнч(СвязанныйДокумент) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ВидСвязанногоДокумента = СвязанныйДокумент.ВидДокумента;
			
			Если Не ВидСвязанногоДокумента.УчитыватьКакОбращениеГраждан Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.Содержит 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(ДокументСсылка) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ВходитВКомплект 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(СвязанныйДокумент) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ДелаетНеДействующим 
		И Не Делопроизводство.УчитыватьНеДействующие(СвязанныйДокумент) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии 
		И Не Делопроизводство.УчитыватьНеДействующие(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	