////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаССертификатами

// Выводит окно для выбора сертификата из хранилища личных сертификатов.
//
// Параметры:
//  ЗаголовокФормы - Строка - Заголовок формы выбора сертификата (по умолчанию "Подписать").
//  ИнформационнаяНадпись - Строка - Если указан, то выводится информационная надпись перед
//                          таблицей сертификатов.
//
// Возвращаемое значение:
//  Неопределено, если произошла отмена выбора, либо Строка - отпечаток сертификата.
//
Процедура ВыбратьСертификатИзХранилищаЛичных(ОписаниеОповещения, ЗаголовокФормы = Неопределено,
	ИнформационнаяНадпись = Неопределено) Экспорт
	
	ТолькоЛичные = Истина;
	МассивСтруктурСертификатов =
		ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОперации", "ВыборИзХранилища");
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов", МассивСтруктурСертификатов);
	Если ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформационнаяНадпись) Тогда
		ПараметрыФормы.Вставить("ИнформационнаяНадпись", ИнформационнаяНадпись);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СертификатыЭП.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

// Выводит окно для выбора сертификата для подписания.
//
// Параметры:
//  ЗаголовокФормы - Строка - Заголовок формы выбора сертификата (по умолчанию "Выбор сертификата").
//  ИнформационнаяНадпись - Строка - Если указан, то выводится информационная надпись перед
//                          таблицей сертификатов.
//
// Возвращаемое значение:
//  Неопределено, если произошла отмена выбора, либо Структура.
//
Процедура ВыбратьСертификатДляПодписания(ОписаниеОповещения, ЗаголовокФормы = Неопределено,
	ИнформационнаяНадпись = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОперации", "Подписание");
	Если ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформационнаяНадпись) Тогда
		ПараметрыФормы.Вставить("ИнформационнаяНадпись", ИнформационнаяНадпись);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СертификатыЭП.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП.
//
Процедура ОткрытьСертификат(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Если ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		ОткрытьСертификатПоОтпечаткуИАдресу(ТекущиеДанные.Отпечаток, ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП.
//
Процедура ОткрытьСертификатПоОтпечаткуИАдресу(Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
		
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Сертификат = Неопределено;
	СтруктураСертификата = Неопределено;
	Если НЕ ПустаяСтрока(АдресСертификата) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресСертификата);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	Иначе
		СтруктураСертификата = ЭлектроннаяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;
	
	Если СтруктураСертификата <> Неопределено Тогда
		ЭлектроннаяПодписьКлиент.ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму добавления личного сертификата.
//
Процедура ДобавлениеЛичногоСертификата(ФормаВладелец) Экспорт
	
	Если Не ПодключитьРасширениеРаботыСКриптографией() Тогда
		ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
		Возврат;
	КонецЕсли;
	
	ЗаголовокФормы = НСтр("ru = 'Добавление личного сертификата'");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеЛичногоСертификатаЗавершение", ЭтотОбъект, Параметры);
	
	ВыбратьСертификатИзХранилищаЛичных(ОписаниеОповещения, ЗаголовокФормы);
		
КонецПроцедуры

Процедура ДобавлениеЛичногоСертификатаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	ОтпечатокСертификата = Результат;
	
	Если Не ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйСертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификата, Истина);
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	
	ДвоичныеДанныеСертификата = ВыбранныйСертификат.Выгрузить();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	ПараметрыФормы.Вставить("СтруктураСертификата", СтруктураСертификата);
	
	ОткрытьФорму("Справочник.СертификатыЭП.ФормаОбъекта", ПараметрыФормы, Параметры.ФормаВладелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлектроннымиПодписями

// Проверяет все выделенные ЭП.
//
Процедура Проверить(ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет одну электронную подпись.
//
// Параметры:
//  ДанныеСтроки - Структура
//  МенеджерКриптографии
//  УникальныйИдентификатор - уникальный идентификатор формы
//  РасшифрованныеФайлы - Соответствие - предназначено для исключения повторного расшифрования 
//                                       файлов, которые уже были расшифрованы.
//
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = Неопределено;
	
	//МиСофт+
	Если ДанныеСтроки.Свойство("Версия") Тогда
		Версия = ДанныеСтроки.Версия;
	КонецЕсли;
	//МиСофт-
	
	ДвоичныеДанныеФайла = Неопределено;
	ДанныеФайла = Неопределено;

	Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		СтруктураВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, АдресПодписи);
		ДанныеФайла = СтруктураВозврата.ДанныеФайла;
		ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
		ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
	Иначе	
		СтруктураВозврата = РаботаСЭП.ПолучитьДвоичныеДанныеОбъектаИПодписи(ДанныеСтроки.Объект, 
			АдресПодписи, Версия, ДополнительныеПараметры);
		ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
		ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
	КонецЕсли;
	
	Если ДанныеСтроки.Зашифрован Тогда
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ФайлСсылка", ДанныеФайла.Ссылка);
		ПараметрыВыполнения.Вставить("ДанныеСтроки", ДанныеСтроки);
		ПараметрыВыполнения.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
		Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеПолученияПароля", ЭтотОбъект);
		ПолучитьПарольДляРасшифровки(Обработчик, ПараметрыВыполнения);
		Возврат;
		
	КонецЕсли;	
		
	ПроверитьОднуПодписьЗавершение(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи,
		УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ПолучитьПарольДляРасшифровки(ОбработчикРезультата, ПараметрыВыполнения)
	
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыВыполнения.Вставить("Успех", Ложь);
	ПараметрыВыполнения.Вставить("Пароль", "");
	ПараметрыВыполнения.Вставить("НастройкиКриптографии", Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОперации", "Расшифрование");
	ПараметрыФормы.Вставить("ФайлСсылка", ПараметрыВыполнения.ФайлСсылка);
	
	Обработчик = Новый ОписаниеОповещения("ПолучитьПарольДляРасшифровкиПослеВводаПароля", ЭтотОбъект, ПараметрыВыполнения);
	ОткрытьФорму("Справочник.СертификатыЭП.ФормаВыбора", ПараметрыФормы, , , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ПолучитьПарольДляРасшифровкиПослеВводаПароля(Результат, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ФайловыеФункцииКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения.Пароль = Результат.Пароль;
	ПараметрыВыполнения.НастройкиКриптографии = Результат.НастройкиКриптографии;
	ПараметрыВыполнения.Успех  = Истина;
	
	ФайловыеФункцииКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура РасшифроватьПослеПолученияПароля(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	Пароль = Результат.Пароль;
	МенеджерКриптографииДляРасшифрования = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь,
		Результат.НастройкиКриптографии);
	
	СтруктураВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
		, Результат.ДанныеСтроки.Объект, Результат.ДанныеСтроки.АдресПодписи);
	ДвоичныеДанныеФайла = СтруктураВозврата.ДвоичныеДанные;
	ДвоичныеДанныеПодписи = СтруктураВозврата.ДвоичныеДанныеПодписи;
		
	МенеджерКриптографииДляРасшифрования.ПарольДоступаКЗакрытомуКлючу = Пароль;
	ДвоичныеДанныеФайла = МенеджерКриптографииДляРасшифрования.Расшифровать(ДвоичныеДанныеФайла);
	
	ПроверитьОднуПодписьЗавершение(
		Результат.ДанныеСтроки, 
		Результат.МенеджерКриптографии, 
		ДвоичныеДанныеФайла, 
		ДвоичныеДанныеПодписи);
	
КонецПроцедуры

Процедура ПроверитьОднуПодписьЗавершение(ДанныеСтроки, МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи,
	УникальныйИдентификатор = Неопределено)
	
	ОшибкиПроверки = ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии,
		ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ДанныеСтроки.Объект)
		И (ДанныеСтроки.Версия = 2 Или ДанныеСтроки.Версия = 3)
		И ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РеквизитОрганизацияНеЗаполнен", Истина);
		ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("Неверна") Тогда
		ДанныеСтроки.Неверна = ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи");
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ПодписьВерна") Тогда
		ДанныеСтроки.ПодписьВерна = НЕ ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи");
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("СертификатДействителен") Тогда
		ДанныеСтроки.СертификатДействителен = Не ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата");
	КонецЕсли;
	
	ДанныеПодписи = Новый Структура(
		"УникальныйИдентификатор,
		|Объект,
		|УстановившийПодпись,
		|ДатаПодписи,
		|ПодписьВерна,
		|ТекстОшибкиПроверкиПодписи,
		|СертификатДействителен,
		|ТекстОшибкиПроверкиСертификата");
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеПодписи, ОшибкиПроверки);
	РаботаСЭП.ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДанныеСтроки.ДатаПроверкиПодписи,
		ДанныеСтроки.Статус);
	
КонецПроцедуры

// Открывает форму просмотра ЭП.
//
Процедура ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаПодписи", ТекущиеДанные.ДатаПодписи);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Объект);
		ПараметрыФормы.Вставить("УстановившийПодпись", ТекущиеДанные.УстановившийПодпись);
		Попытка
			ОткрытьФорму("РегистрСведений.ЭлектронныеПодписи.ФормаЗаписи", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		КонецПопытки;
		
	Иначе
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыЭлементДерева") Тогда
			ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
			Если ДочерниеЭлементы.Количество() > 0 Тогда
				Версия = ДочерниеЭлементы[0].Объект;
				Если ЗначениеЗаполнено(Версия) И ТипЗнч(Версия) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
					ФайлСсылка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Версия, "Владелец");
					ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, Неопределено, УникальныйИдентификатор);
					РаботаСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует электронную подпись.
//
Процедура СформироватьПодписьОбъекта(Объект, УникальныйИдентификатор, 
	МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ИнформационнаяНадпись = Неопределено,
	ЗаголовокФормы = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	//МиСофт+
	Если КомпонентаКриптографии = Неопределено Тогда
		РаботаСЭПКлиент.УстановитьКомпонентуКриптографии();
	КонецЕсли;
	//МиСофт-
	
	Если Не ЗначениеЗаполнено(ЗаголовокФормы) Тогда
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подписать ""%1""'"), Строка(Объект));
	КонецЕсли;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("Объект", Объект);
	ПараметрыОбработчикаОповещения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОбработчикаОповещения.Вставить("МассивДанныхДляЗанесенияВРегистр", МассивДанныхДляЗанесенияВРегистр);
	ПараметрыОбработчикаОповещения.Вставить("МассивАдресов", МассивАдресов);
	ПараметрыОбработчикаОповещения.Вставить("ИнформационнаяНадпись", ИнформационнаяНадпись);
	ПараметрыОбработчикаОповещения.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияЗакрытияФормыВыбора = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыВыбораСертификатаДляПодписания",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	ВыбратьСертификатДляПодписания(ОписаниеОповещенияЗакрытияФормыВыбора, ЗаголовокФормы, ИнформационнаяНадпись);
		
КонецПроцедуры

// Формирует электронные подписи для массива объектов.
//
// Параметры:
//  Объекты - Массив - Объекты для подписания.
//  УникальныйИдентификатор - Уникальный идентификатор формы.
//  МассивДанныхДляЗанесенияВРегистр - Массив - Данные подписей.
//  МассивАдресов - Массив - Адреса временных файлов подписей.
//  ИнформационнаяНадпись - Строка - Информационная надпись, выводимая в окне выбора сертификата
//                                   для подписания.
//  ЗаголовокФормы - Строка - Альтернативный заголовок формы выбора сертификата для подписания.
//
// Возвращаемое значение:
//	Булево - Истина, если подписание прошло без ошибок, иначе Ложь.
//
Процедура СформироватьПодписиОбъектов(Объекты, УникальныйИдентификатор, 
	МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ИнформационнаяНадпись = Неопределено,
	ЗаголовокФормы = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(Объекты) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("Объекты", Объекты);
	ПараметрыОбработчикаОповещения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОбработчикаОповещения.Вставить("МассивДанныхДляЗанесенияВРегистр", МассивДанныхДляЗанесенияВРегистр);
	ПараметрыОбработчикаОповещения.Вставить("МассивАдресов", МассивАдресов);
	ПараметрыОбработчикаОповещения.Вставить("ИнформационнаяНадпись", ИнформационнаяНадпись);
	ПараметрыОбработчикаОповещения.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияЗакрытияФормыВыбора = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыВыбораСертификатаДляПодписания",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	ВыбратьСертификатДляПодписания(ОписаниеОповещенияЗакрытияФормыВыбора, ЗаголовокФормы, ИнформационнаяНадпись);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыВыбораСертификатаДляПодписания(СтруктураПараметровПодписи, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			Результат = Новый Структура();
			Результат.Вставить("Флаг", Ложь);
			Результат.Вставить("МассивДанныхДляЗанесенияВРегистр", Неопределено);
			Результат.Вставить("МассивАдресов", Неопределено);
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	МассивОбъектовДляПодписи = Новый Массив;
	
	Если Параметры.Свойство("Объект") Тогда
		Если Не Параметры.Свойство("Объекты") Тогда
			Параметры.Вставить("Объекты", Новый Массив);
		КонецЕсли;
		Параметры.Объекты.Добавить(Параметры.Объект);
	КонецЕсли;
	
	Для Каждого ОбъектСсылка Из Параметры.Объекты Цикл
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			СтруктураВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(ОбъектСсылка);
			ДвоичныеДанные = СтруктураВозврата.ДвоичныеДанные;
			
			ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
				ДвоичныеДанные, ОбъектСсылка);
			МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
			
		Иначе
			РаботаСЭП.ПолучитьОбъектыДляПодписи(ОбъектСсылка, Параметры.УникальныйИдентификатор, МассивОбъектовДляПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь,
		СтруктураПараметровПодписи.НастройкиКриптографии);
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	
	ДатаПодписи = ТекущаяДата();
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивОбъектовДляПодписи Цикл
		
		ОбъектСсылкаДляПодписи = ОбъектДляПодписи.ОбъектСсылкаДляПодписи;
		
		АдресФайла = "";
		ДвоичныеДанныеФайла = Неопределено;
		
		Если НЕ ОбъектДляПодписи.Свойство("ДвоичныеДанные", ДвоичныеДанныеФайла) Тогда
			АдресФайла = ОбъектДляПодписи.АдресФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
		
		// удаляем двоичные данные из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			МассивАдресов.Добавить(АдресФайла);
		КонецЕсли;
		
		ДанныеДляЗанесенияВРегистр = ЭлектроннаяПодписьКлиент.СформироватьДанныеПодписи(
			МенеджерКриптографии, ОбъектСсылкаДляПодписи, 
			ДвоичныеДанныеФайла, СтруктураПараметровПодписи);
			
		//МиСофт+			
		Если Не ДанныеДляЗанесенияВРегистр = Неопределено Тогда
		
			ДанныеДляЗанесенияВРегистр.ДатаПодписи = ДатаПодписи;
				
			МассивДанныхДляЗанесенияВРегистр.Добавить(ДанныеДляЗанесенияВРегистр);
				
		КонецЕсли;
		//МиСофт-
		
	КонецЦикла;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		Результат = Новый Структура();
		Результат.Вставить("Флаг", Истина);
		Результат.Вставить("МассивДанныхДляЗанесенияВРегистр", МассивДанныхДляЗанесенияВРегистр);
		Результат.Вставить("МассивАдресов", МассивАдресов);
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
	КонецЕсли;	
	
КонецПроцедуры

// По окончании подписания нотифицирует.
//
Процедура ИнформироватьОПодписании(МассивДанныхДляЗанесенияВРегистр, ОбъектСсылка) Экспорт
	
	Для Каждого ОбъектДляПодписи Из МассивДанныхДляЗанесенияВРегистр Цикл
		ОбъектСсылкаДляПодписи = ОбъектДляПодписи.ОбъектСсылка;
		ОповеститьОбИзменении(ОбъектСсылкаДляПодписи);	
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ОбъектСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Преобразует 2-уровневое дерево в массив.
//
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

// Есть ли шифрованные файлы среди выделенных.
//
Функция ЕстьШифрованныеФайлы(ВыделенныеСтроки, ТаблицаПодписей) Экспорт
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			Если ДанныеСтроки.Зашифрован Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет есть ли шифрованные файлы.
//
Функция ЕстьШифрованныеФайлыСредиВсехПодписей(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
	Для Каждого Строка Из ДанныеСтрок Цикл
		Если Строка.Зашифрован Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Мисофт
//Установка внешней компоненты
Процедура УстановитьКомпонентуКриптографии() Экспорт
	//МиСофт+    
	Если КомпонентаКриптографии = Неопределено Тогда
		
		КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии", "V8CryptoAddInNative");
		
		#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
			Если Не КодВозврата Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
				"НачатьУстановкуВнешнейКомпонентыПродолжение",
				ЭтотОбъект);
				
				НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, "ОбщийМакет.КомпонентаКриптографии");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		КомпонентаКриптографии = Новый("AddIn.V8CryptoAddInNative.CryptoExtension");
		
	КонецЕсли;
	//МиСофт-
КонецПроцедуры

//МиСофт
Процедура НачатьУстановкуВнешнейКомпонентыПродолжение(Параметры) Экспорт
	//МиСофт+
	КодВозврата = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии", "V8CryptoAddInNative");
	Если КодВозврата Тогда
		Оповестить("КомпонентаКриптографииУстановлена");
		КомпонентаКриптографии = Новый("AddIn.V8CryptoAddInNative.CryptoExtension");
	Иначе
		ПоказатьОповещениеПользователя("Необходимо перезапустить программу.");
	КонецЕсли;
	//МиСофт-
КонецПроцедуры

// Показывает текст и вызывает обработчик с заданным результатом.
//
Процедура ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Результат) Экспорт
	Если ТипЗнч(ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОбработчикРезультата", ОбработчикРезультата);
		ПараметрыОбработчика.Вставить("Результат",             Результат);
		Обработчик = Новый ОписаниеОповещения("ВернутьРезультатПослеЗакрытияПростогоДиалога", ЭтотОбъект, ПараметрыОбработчика);
		ПоказатьПредупреждение(Обработчик, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры ВернутьРезультатПослеПоказаПредупреждения.
//
Процедура ВернутьРезультатПослеЗакрытияПростогоДиалога(Структура) Экспорт
	ВыполнитьОбработкуОповещения(Структура.ОбработчикРезультата, Структура.Результат);
КонецПроцедуры

// Показывает стандартное предупреждение.
//
// Параметры:
//  ОбработчикРезультата - ОписаниеОповещения, Неопределено - Описание процедуры, принимающей результат работы метода.
//  ПредставлениеКоманды - Строка - Необязательный. Имя команды, для выполнения которой необходимо расширение.
//
Процедура ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией(
	ОбработчикРезультата = Неопределено, ПредставлениеКоманды = "") Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'Для выполнения команды ""%1"" необходимо
	                                 |установить расширение работы с криптографией.'");
	Если ЗначениеЗаполнено(ПредставлениеКоманды) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ПредставлениеКоманды);
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, " ""%1""", "");
	КонецЕсли;
	ВернутьРезультатПослеПоказаПредупреждения(ОбработчикРезультата, ТекстПредупреждения, Неопределено);
	
КонецПроцедуры

#КонецОбласти
