////////////////////////////////////////////////////////////////////////////////
// Подсистема "Мультипредметность"
// Модуль МультипредметностьКлиент: клиент
//
// Содержит процедуры обработчики событий элементов форм, 
// поддерживающих Мультипредметность.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Вызывается при открытии формы процесса
//
Процедура ПроцессПриОткрытии(Форма, Объект) Экспорт
	
	#Если ВебКлиент Тогда
		Форма.Элементы.ПредметыОписание.ТолькоПросмотр = Ложь;
		Форма.Элементы.ПредметыОписание.КнопкаВыбора = Ложь;
		Форма.Элементы.ПредметыОписание.РедактированиеТекста = Ложь;
		Форма.Элементы.ПредметыОписание.КнопкаВыпадающегоСписка = Истина;
		
		СписокВыбора = Форма.Элементы.ПредметыОписание.СписокВыбора;
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной"), 
			НСтр("ru='Основной предмет'"),,БиблиотекаКартинок.ПредметОсновной16);
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный"), 
			НСтр("ru='Вспомогательный предмет'"),,БиблиотекаКартинок.ПредметВспомогательный16);
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый"), 
			НСтр("ru='Заполняемый предмет'"),,БиблиотекаКартинок.ПредметЗаполняемый16);
			
		СписокДоступных = Форма.ДоступныеРолиПредметов;
		Для Каждого Элемент из СписокВыбора Цикл
			Если СписокДоступных.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				СписокВыбора.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли

КонецПроцедуры

// Выполняется перед удалением предмета процесса
//
// Параметры:
//  Форма - форма редактируемого объекта
//  Объект - редактируемый объект
//  ОбработкаАвтоподстановки - признак обработки значений автоподстановки исполнителей на форме
//
Процедура ПредметыПередУдалением(Форма, Объект, Отказ, ОбработкаАвтоподстановки = Ложь) Экспорт
	
	ВыделенныеСтроки = Форма.Элементы.Предметы.ВыделенныеСтроки;
	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект.Ссылка);
	
	Если Объект.Свойство("Шаблон") И ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ИменаПредметовШаблона = МультипредметностьВызовСервера.ПолучитьИменаПредметовШаблона(Объект.Шаблон);
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			Для Каждого Элемент Из ИменаПредметовШаблона Цикл
				ДанныеСтроки = Форма.Элементы.Предметы.ДанныеСтроки(ВыделеннаяСтрока);
				Если Элемент.Ключ = ДанныеСтроки.ИмяПредмета Тогда 
					ДанныеСтроки.Предмет = Элемент.Значение;
					МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(ДанныеСтроки, Объект.ПредметыЗадач, ЭтоКомплексныйПроцесс);
					Отказ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла
	КонецЕсли;
	
	Если Не Отказ Тогда
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Форма.Элементы.Предметы.ДанныеСтроки(ВыделеннаяСтрока);
			
			УдаляемыеСтроки = Объект.ПредметыЗадач.НайтиСтроки(новый Структура("ИмяПредмета", ДанныеСтроки.ИмяПредмета));
			
			Для Каждого Строка Из УдаляемыеСтроки Цикл
				Объект.ПредметыЗадач.Удалить(Строка);
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура("ИмяПредметаОснование", ДанныеСтроки.ИсходноеИмяПредмета);
			ИсправляемыеСтроки = Объект.Предметы.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ИсправляемаяСтрока Из ИсправляемыеСтроки Цикл
				ИсправляемаяСтрока.ИмяПредметаОснование = Неопределено;
			КонецЦикла;
			
			Если ОбработкаАвтоподстановки Тогда
				МультипредметностьКлиентСервер.УдалитьЗначенияАвтоподстановкиПоИмениПредмета(Форма, ДанныеСтроки.ИмяПредмета);
				МультипредметностьКлиентСервер.УдалитьУсловияПоИмениПредмета(Форма, ДанныеСтроки.ИмяПредмета);
			КонецЕсли;
			
			Если ЭтоКомплексныйПроцесс Тогда
				ШаблоныЭтапов = Новый Массив;
				Для Каждого СтрокаЭтапа Из Форма.Объект.Этапы Цикл
					ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
				КонецЦикла;
				МультипредметностьВызовСервера.УдалитьПредметИзШаблоновПроцесса(Объект.Ссылка, ШаблоныЭтапов, ДанныеСтроки.ИмяПредмета);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при выборе строки таблицы "Предметы"
// Параметры:
//  Предметы - табличная часть предметов объекта, данные формы
//  ВыбраннаяСтрока - индекс выбранной строки
//  Поле - источник команды, элемент формы
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПредметыВыбор(Предметы, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	Если Поле.Родитель.ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		Строка = Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Строка.Предмет <> Неопределено и Не Строка.Предмет.Пустая() Тогда
			Если ТипЗнч(Строка.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Строка.Предмет);
			Иначе
				ПоказатьЗначение(, Строка.Предмет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при изменении предмета табличной части предметов процесса
//
Процедура ПредметыПредметПриИзменении(Форма, Объект, Наименование) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Предметы.ТекущиеДанные;
	
	ШаблонЗаполнен = ЗначениеЗаполнено(Объект.Шаблон);
	
	Если Не ШаблонЗаполнен Или Форма.ДобавлятьНаименованиеПредмета Тогда
		
		НаименованиеПроцессаПоУмолчанию = 
			?(ШаблонЗаполнен И ЗначениеЗаполнено(Форма.НаименованиеИзШаблона), 
				Форма.НаименованиеИзШаблона, 
				Наименование);
		
		Если Объект.Предметы.Количество() > 0
			И (Не ЗначениеЗаполнено(Объект.Наименование) Или Объект.Наименование = НаименованиеПроцессаПоУмолчанию) Тогда
			
			МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(Объект, СокрЛП(НаименованиеПроцессаПоУмолчанию));
			
		ИначеЕсли ЗначениеЗаполнено(Форма.ПредыдущееОписаниеПредметов) Тогда
			
			СтрокаПоискаПредмета = Форма.ПредыдущееОписаниеПредметов;
			СтрокаТекущегоОписания = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь, Истина);
			СтрокаЗамены = ?(ЗначениеЗаполнено(СтрокаТекущегоОписания), СтрокаТекущегоОписания, "");
			
			Если СтрЧислоВхождений(Объект.Наименование, СтрокаПоискаПредмета) = 1 Тогда
				Объект.Наименование = СтрЗаменить(Объект.Наименование, СтрокаПоискаПредмета, СтрокаЗамены);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Форма.ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(Объект.Предметы, Истина, Ложь, Истина);
	
КонецПроцедуры

// Вызывается при активизации строки таблицы "ТочкиМаршрута" и после заполнения предметов задач
// Заполняет данные о предметах в объекте и на форме, устанавливает доступность реквизитов.
//
Процедура УстановитьТекущуюСтрокуМаршрута(Форма, Объект, ИндексСтроки) Экспорт
	
	НоваяСтрока = Форма.ТочкиМаршрута.НайтиПоИдентификатору(ИндексСтроки);
	ТекущаяСтрока = Форма.ТочкиМаршрута.НайтиПоИдентификатору(Форма.ТекущаяСтрокаМаршрута);
	
	Если Форма.ТекущаяСтрокаМаршрута <> -1 И Форма.ТекущаяСтрокаМаршрута <> ИндексСтроки Тогда
		
		СтрокиПредыдущегоЭтапа = Объект.ПредметыЗадач.НайтиСтроки(
		Новый Структура("ТочкаМаршрута",ТекущаяСтрока.ТочкаМаршрута));
		
		Для Каждого Строка Из СтрокиПредыдущегоЭтапа Цикл
			Объект.ПредметыЗадач.Удалить(Строка);
		КонецЦикла;

		Для Каждого Строка Из Форма.ПредметыЗадач Цикл
			Если Строка.Видимость Или Строка.ОбязательноеЗаполнение Тогда
				СтрокаПредмета = Объект.ПредметыЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредмета, Строка);
				СтрокаПредмета.ТочкаМаршрута = ТекущаяСтрока.ТочкаМаршрута;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТекущаяСтрокаМаршрута = ИндексСтроки;
	
	Для Каждого Строка Из Форма.ПредметыЗадач Цикл
		Отбор = Новый Структура("ТочкаМаршрута, ИмяПредмета", НоваяСтрока.ТочкаМаршрута, Строка.ИмяПредмета);
		СтрокиТекущегоЭтапа =  Объект.ПредметыЗадач.НайтиСтроки(Отбор);
		Если СтрокиТекущегоЭтапа.Количество() > 0 Тогда
			Строка.Видимость = Истина;
			Строка.ОбязательноеЗаполнение = СтрокиТекущегоЭтапа[0].ОбязательноеЗаполнение;
		Иначе
			Строка.Видимость = Ложь;
			Строка.ОбязательноеЗаполнение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняется при изменении строки предмета задач
//
Процедура ПредметыЗадачПриИзменении(Форма, Объект) Экспорт
	
	Если Форма.Элементы.ПредметыЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТочка = Форма.Элементы.ТочкиМаршрута.ТекущиеДанные.ТочкаМаршрута;
	
	СтрокиЭтапа = Объект.ПредметыЗадач.НайтиСтроки(
		Новый Структура("ТочкаМаршрута",ТекущаяТочка));
				
	Для Каждого Строка Из СтрокиЭтапа Цикл
		Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
		
	Для Каждого Строка Из Форма.ПредметыЗадач Цикл
		Если Строка.Видимость Или Строка.ОбязательноеЗаполнение Тогда
			НоваяСтрока = Объект.ПредметыЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ТочкаМаршрута = ТекущаяТочка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при выборе строки предмета в шаблоне процесса
//
Процедура ПредметыШаблонаИзменитьПредмет(Форма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка = Истина, ОписаниеОповещения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Объект", Объект);
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияЗакрытияФормы = Новый ОписаниеОповещения(
		"ПредметыШаблонаИзменитьПредметПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ВыбратьПредметПоРолиПредмета(
		Форма, 
		Объект, 
		Ложь, 
		ТекущиеДанные.РольПредмета, 
		ВыбраннаяСтрока,
		Ложь,
		ОписаниеОповещенияЗакрытияФормы);
	
КонецПроцедуры

Процедура ПредметыШаблонаИзменитьПредметПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(
			Параметры.Форма, Параметры.Объект, РезультатВыбора, Параметры.ТекущиеДанные);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
	ПредметыШаблонаПриАктивизацииСтроки(Параметры.Форма, Параметры.Объект);	
	
КонецПроцедуры

// Вызывается перед началом добавления предмета в шаблон
//
Процедура ПредметыШаблонаПередНачаломДобавления(Форма, Объект, Отказ, Копирование) Экспорт
	
	ПредметыПередНачаломДобавления(Форма, Объект, Ложь, Отказ, Копирование);
	ПредметыШаблонаПриАктивизацииСтроки(Форма, Объект);
	
КонецПроцедуры

// Выполняется при активизации строки предметов в шаблонах процессов
//
Процедура ПредметыШаблонаПриАктивизацииСтроки(Форма, Объект) Экспорт
	
	Если Форма.Элементы.Найти("ТочкиМаршрута") <> Неопределено Тогда
		ТекущиеДанные = Форма.Элементы.Предметы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Форма.Элементы.ТочкиМаршрутаВидимость.ТолькоПросмотр = Истина;
			Форма.Элементы.ТочкиМаршрутаОбязательноеЗаполнение.ТолькоПросмотр = Истина;
			Элементы = Форма.ТочкиМаршрута.ПолучитьЭлементы();
			Для Каждого Элемент Из Элементы Цикл
				Элемент.Видимость = Ложь;
				Элемент.ОбязательноеЗаполнение = Ложь;
				ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
				Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость = Ложь;
					ПодчиненныйЭлемент.ОбязательноеЗаполнение = Ложь;
				КонецЦикла;
			КонецЦикла;
			Возврат;
		Иначе
			Форма.Элементы.ТочкиМаршрутаВидимость.ТолькоПросмотр = Ложь;
			Форма.Элементы.ТочкиМаршрутаОбязательноеЗаполнение.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если ТекущиеДанные.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
			Форма.Элементы.ТочкиМаршрутаВидимость.ТолькоПросмотр = Ложь;
		Иначе
			Форма.Элементы.ТочкиМаршрутаОбязательноеЗаполнение.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Элементы = Форма.ТочкиМаршрута.ПолучитьЭлементы();
		
		ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект.Ссылка);
		
		Если Не ЭтоКомплексныйПроцесс Тогда
			
			Для Каждого Элемент Из Элементы Цикл
				Отбор = Новый Структура("ИмяПредмета, ТочкаМаршрута", ТекущиеДанные.ИмяПредмета, Элемент.ТочкаМаршрута);
				СтрокиПредметовЗадач = Объект.ПредметыЗадач.НайтиСтроки(Отбор);
				Если СтрокиПредметовЗадач.Количество() > 0 Тогда
					Элемент.Видимость = Истина;
					Элемент.ОбязательноеЗаполнение = СтрокиПредметовЗадач[0].ОбязательноеЗаполнение;
				Иначе
					Элемент.Видимость = Ложь;
					Элемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого Элемент Из Элементы Цикл
				ОтборРолиПредметовЭтапа = Новый Структура("ШаблонБизнесПроцесса, ИмяПредмета", Элемент.ШаблонБизнесПроцесса, ТекущиеДанные.ИмяПредмета);
				РолиПредметовЭтапа = Форма.РолиПредметовЭтапов.НайтиСтроки(ОтборРолиПредметовЭтапа);
				Если РолиПредметовЭтапа.Количество() > 0 Тогда
					Если РолиПредметовЭтапа[0].РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
						Элемент.ДоступноЗаполнение = Истина;
					Иначе
						Элемент.ДоступноЗаполнение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Отбор = Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ТочкаМаршрута, ИмяПредмета",
					Элемент.ИдентификаторЭтапа, Элемент.ШаблонБизнесПроцесса, Элемент.ТочкаМаршрута, ТекущиеДанные.ИмяПредмета);
				СтрокиПредметовЗадач = Объект.ПредметыЗадач.НайтиСтроки(Отбор);
				Если СтрокиПредметовЗадач.Количество() > 0 Тогда
					Элемент.Видимость = Истина;
					Элемент.ОбязательноеЗаполнение = СтрокиПредметовЗадач[0].ОбязательноеЗаполнение;
				Иначе
					Элемент.Видимость = Ложь;
					Элемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
				Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Элемент.ШаблонБизнесПроцесса) Тогда
					Отбор = Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ИмяПредмета", 
						Элемент.ИдентификаторЭтапа, Элемент.ШаблонБизнесПроцесса, ТекущиеДанные.ИмяПредмета);
					СтрокиПредметовЭтапа = Объект.ПредметыЗадач.НайтиСтроки(Отбор);
					Если СтрокиПредметовЭтапа.Количество() > 0 Тогда
						Элемент.Видимость = Истина;
					Иначе
						Элемент.Видимость = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ПодчиненныеЭлементы = Элемент.ПолучитьЭлементы();
				Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
					Если РолиПредметовЭтапа.Количество() > 0 Тогда
						Если РолиПредметовЭтапа[0].РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
							ПодчиненныйЭлемент.ДоступноЗаполнение = Истина;
						Иначе
							ПодчиненныйЭлемент.ДоступноЗаполнение = Ложь;
						КонецЕсли;
					КонецЕсли;
					Отбор = Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ТочкаМаршрута, ИмяПредмета",
						ПодчиненныйЭлемент.ИдентификаторЭтапа, 
						ПодчиненныйЭлемент.ШаблонБизнесПроцесса, 
						ПодчиненныйЭлемент.ТочкаМаршрута, 
						ТекущиеДанные.ИмяПредмета);
					СтрокиПредметовЗадач = Объект.ПредметыЗадач.НайтиСтроки(Отбор);
					Если СтрокиПредметовЗадач.Количество() > 0 Тогда
						ПодчиненныйЭлемент.Видимость = Истина;
						ПодчиненныйЭлемент.ОбязательноеЗаполнение = СтрокиПредметовЗадач[0].ОбязательноеЗаполнение;
					Иначе
						ПодчиненныйЭлемент.Видимость = Ложь;
						ПодчиненныйЭлемент.ОбязательноеЗаполнение = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если ПодчиненныеЭлементы.Количество() > 0 Тогда
					СуммаВидимость = 0;
					СуммаЗаполнение = 0;
					Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
						СуммаВидимость = СуммаВидимость + ПодчиненныйЭлемент.Видимость;
						СуммаЗаполнение = СуммаЗаполнение + ПодчиненныйЭлемент.ОбязательноеЗаполнение;
					КонецЦикла;
					Если СуммаВидимость = ПодчиненныеЭлементы.Количество() Тогда
						Элемент.Видимость = Истина;
					ИначеЕсли СуммаВидимость = 0 Тогда
						Элемент.Видимость = Ложь;
					Иначе
						Элемент.Видимость = 2;
					КонецЕсли;
					Если СуммаЗаполнение > 0 Тогда
						Элемент.ОбязательноеЗаполнение = Истина;
					Иначе
						Элемент.ОбязательноеЗаполнение = Ложь;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
				
КонецПроцедуры

// Вызывается перед началом добавления предмета в процесс
//
Процедура ПредметыПроцессаПередНачаломДобавления(Форма, Объект, Отказ, Копирование, ОписаниеОповещения = Неопределено) Экспорт
	
	ПредметыПередНачаломДобавления(Форма, Объект, Истина, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

// Вызывается при начале изменения предмета процесса
//
Процедура ПредметыПроцессаИзменитьПредмет(Форма, Объект, ВыбраннаяСтрока, СтандартнаяОбработка = Истина, ОписаниеОповещения = Неопределено) Экспорт
	
	ТекущиеДанные = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.РольПредмета) Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Объект.Завершен Или Объект.ПометкаУдаления Или Форма.Элементы.Предметы.ТолькоПросмотр Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Предмет) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Предмет);
			Возврат;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Объект", Объект);
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияЗакрытияФормы = Новый ОписаниеОповещения(
		"ПредметыПроцессаИзменитьПредметПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ВыбратьПредметПоРолиПредмета(Форма, Объект, Истина, ТекущиеДанные.РольПредмета,
		ВыбраннаяСтрока,, ОписаниеОповещенияЗакрытияФормы);
	
КонецПроцедуры

Процедура ПредметыПроцессаИзменитьПредметПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(
			Параметры.Форма, Параметры.Объект, РезультатВыбора, Параметры.ТекущиеДанные);
	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Обеспечивает добавление основного предмета в шаблон процесса
//
Процедура ПредметыДобавитьОсновной(Форма, Объект, ЭтоПроцесс, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Объект", Объект);
	ОписаниеОповещенияЗакрытияФормы = Новый ОписаниеОповещения(
		"ПредметыДобавитьОсновнойПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	ВыбратьПредметПоРолиПредмета(
		Форма, 
		Объект, 
		ЭтоПроцесс, 
		ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной"),,,
		ОписаниеОповещенияЗакрытияФормы);
	
КонецПроцедуры

Процедура ПредметыДобавитьОсновнойПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(
			Параметры.Форма, Параметры.Объект, РезультатВыбора);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Обеспечивает добавление вспомогательного предмета в шаблон процесса
//
Процедура ПредметыДобавитьВспомогательный(Форма, Объект, ЭтоПроцесс, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Объект", Объект);

	ОписаниеОповещенияЗакрытияФормы = Новый ОписаниеОповещения(
		"ПредметыДобавитьВспомогательныйПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
		
	ВыбратьПредметПоРолиПредмета(
		Форма, 
		Объект, 
		ЭтоПроцесс, 
		ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный"),,,
		ОписаниеОповещенияЗакрытияФормы);
	
КонецПроцедуры

Процедура ПредметыДобавитьВспомогательныйПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(
			Параметры.Форма, Параметры.Объект, РезультатВыбора);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обеспечивает добавление заполняемого предмета в шаблон процесса
//
Процедура ПредметыДобавитьЗаполняемый(Форма, Объект, ЭтоПроцесс, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("Объект", Объект);
	ОписаниеОповещенияЗакрытияФормы = Новый ОписаниеОповещения(
		"ПредметыДобавитьЗаполняемыйПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);

	ВыбратьПредметПоРолиПредмета(
		Форма, 
		Объект, 
		ЭтоПроцесс, 
		ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый"),,,
		ОписаниеОповещенияЗакрытияФормы);
	
КонецПроцедуры

Процедура ПредметыДобавитьЗаполняемыйПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(
			Параметры.Форма, Параметры.Объект, РезультатВыбора);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет роль выбранной строки предмета
//
Процедура ИзменитьРольПредмета(Форма, Объект, ВыбраннаяСтрока, ЭтоПроцесс, ЭтоСоставнойПроцесс = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Форма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РольПредмета", ТекущаяСтрока.РольПредмета);
	ПараметрыФормы.Вставить("БизнесПроцесс", Форма.ПустойБизнесПроцесс.Ссылка);
	ПараметрыФормы.Вставить("ЭтоСоставнойПроцесс", ЭтоСоставнойПроцесс);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("Объект", Объект);
	ПараметрыОбработчика.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ПараметрыОбработчика.Вставить("ЭтоПроцесс", ЭтоПроцесс);
	ПараметрыОбработчика.Вставить("ЭтоСоставнойПроцесс", ЭтоСоставнойПроцесс);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьРольПредметаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	ОткрытьФорму(
		"ОбщаяФорма.ИзменениеРолиПредмета", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРольПредметаПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	Объект = Параметры.Объект;
	ВыбраннаяСтрока = Параметры.ВыбраннаяСтрока;
	ЭтоПроцесс = Параметры.ЭтоПроцесс;
	ЭтоСоставнойПроцесс = Параметры.ЭтоСоставнойПроцесс;
	
	ТекущаяСтрока = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ТекущаяСтрока.РольПредмета = РезультатВыбора;
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Предмет) Тогда
		ПометкаУдаления = Ложь;
	Иначе
		ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрока.Предмет,"ПометкаУдаления");
	КонецЕсли;
	ТекущаяСтрока.Картинка = МультипредметностьКлиентСервер.ИндексКартинкиРолиПредмета(ТекущаяСтрока.РольПредмета, ПометкаУдаления);
	Если РезультатВыбора <> ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
		ТекущаяСтрока.ШаблонОснование = Неопределено;
	    ТекущаяСтрока.ИмяПредметаОснование = Неопределено;
		ОтменяемыеСтроки = Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета, ОбязательноеЗаполнение", ТекущаяСтрока.ИмяПредмета, Истина));
		Для Каждого Строка Из ОтменяемыеСтроки Цикл
			Строка.ОбязательноеЗаполнение = Ложь;
		КонецЦикла;
	КонецЕсли;
	Если ЭтоПроцесс Тогда
		МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(ТекущаяСтрока, Объект.ПредметыЗадач, Ложь);
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект.Ссылка) Тогда
			СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
			ЗаполнитьЗначенияСвойств(СтруктураПредмета, ТекущаяСтрока);
		    МультипредметностьКлиент.УстановитьПредметыЗадачПоТочкамМаршрута(Форма, Объект, СтруктураПредмета);
		КонецЕсли;
	Иначе
		МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при активизации строки таблицы "ТочкиМаршрута"
//
Процедура ТочкиМаршрутаПриАктивизацииСтроки(Форма, Объект) Экспорт
	
	ИндексСтроки = Форма.Элементы.ТочкиМаршрута.ТекущаяСтрока;
	УстановитьТекущуюСтрокуМаршрута(Форма, Объект, ИндексСтроки);
	
КонецПроцедуры

// Выполняется при изменении строки точки маршрута в форме шаблона
//
Процедура ТочкиМаршрутаПриИзменении(Форма, Объект, Элемент) Экспорт
	
	Форма.Модифицированность = Истина;
	
	ТекущиеДанныеПредметов = Форма.Элементы.Предметы.ТекущиеДанные;
	Если ТекущиеДанныеПредметов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееИмяПредмета = ТекущиеДанныеПредметов.ИмяПредмета;
	
	ТекущиеДанныеТочек = Элемент.ТекущиеДанные;
	ТекущийЭлемент = Элемент.ТекущийЭлемент;
	
	Если ТекущийЭлемент.Имя = "ТочкиМаршрутаВидимость" Тогда
		Если ТекущиеДанныеТочек.Видимость = Ложь Тогда
			ТекущиеДанныеТочек.ОбязательноеЗаполнение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеТочек.ОбязательноеЗаполнение = Истина Тогда
		ТекущиеДанныеТочек.Видимость = Истина;
		Для Каждого Строка Из Объект.ПредметыЗадач Цикл
			Если Строка.ИмяПредмета = ТекущиеДанныеПредметов.ИмяПредмета И Строка.ТочкаМаршрута <> ТекущиеДанныеТочек.ТочкаМаршрута Тогда
				Строка.ОбязательноеЗаполнение = Ложь;
			КонецЕсли;
		КонецЦикла;
		ЭлементыТочек = Форма.Точкимаршрута.ПолучитьЭлементы();
		Для Каждого Строка Из ЭлементыТочек Цикл
			Если Строка.ТочкаМаршрута <> ТекущиеДанныеТочек.ТочкаМаршрута Тогда
				Строка.ОбязательноеЗаполнение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	СтрокиТочек = Объект.ПредметыЗадач.НайтиСтроки(
		Новый Структура("ИмяПредмета, ТочкаМаршрута", ТекущееИмяПредмета, ТекущиеДанныеТочек.ТочкаМаршрута));
	
	Если ТекущиеДанныеТочек.Видимость Или ТекущиеДанныеТочек.ОбязательноеЗаполнение Тогда
		
		Если СтрокиТочек.Количество() = 0 Тогда
			СтрокаТочки = Объект.ПредметыЗадач.Добавить();
			СтрокаТочки.ИмяПредмета = ТекущееИмяПредмета;
		Иначе
			СтрокаТочки = СтрокиТочек[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТочки, ТекущиеДанныеТочек);
	Иначе
			
		Если СтрокиТочек.Количество() > 0 Тогда
			Для Каждого СтрокаТочки Из СтрокиТочек Цикл
				Объект.ПредметыЗадач.Удалить(СтрокаТочки);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина - предмет успешно добавлен, или Ложь - не удалось установить предмет.
// СообщениеОбОшибке - сообщение об ошибке, если предмет установить не удалось.
//
Функция ДобавитьПредметЗадачи(
	Форма, 
	СообщениеОбОшибке = Неопределено, 
	ИмяПредмета = Неопределено,  
	Предмет = Неопределено, 
	СтандартнаяОбработка = Истина,
	ОписаниеОповещения = Неопределено) Экспорт
	
	СообщениеОбОшибке = "";
	СтандартнаяОбработка = Ложь;
	
	Если Форма.ТолькоПросмотр Тогда
		СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав доступа на задачу для добавления предмета.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.Объект.ПометкаУдаления Тогда
		Если ИмяПредмета = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя добавить предмет в помеченную на удаление задачу.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя установить предмет в помеченной на удаление задаче.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
		
		Попытка
			Форма.Записать();
		Исключение
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сохранить изменения:
					|%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
			Строка(Форма.Объект.Ссылка));
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БизнесПроцесс", Форма.Объект.БизнесПроцесс);
	ПараметрыОткрытия.Вставить("ПроверкаЗаполнения", Истина);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	Если ЗначениеЗаполнено(ИмяПредмета) Тогда
		ПараметрыОткрытия.Вставить("РольПредмета",ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый"));
	Иначе
		ПараметрыОткрытия.Вставить("РольПредмета", ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный"));
	КонецЕсли;
	
	Если ИмяПредмета <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИмяПредмета", ИмяПредмета);
	КонецЕсли;
	СписокИменПредметов = Новый СписокЗначений;
	СписокИменПредметов.ЗагрузитьЗначения(МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект));
	ПараметрыОткрытия.Вставить("ИменаПредметов", СписокИменПредметов);
	

	Если Предмет = Неопределено Тогда
		ИмяФормы = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
	Иначе
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			ВедущаяЗадача = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Форма.Объект.БизнесПроцесс, "ВедущаяЗадача");
			Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда 
				ИмяФормы = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
			Иначе
				Если РаботаСоСканеромКлиент.ДоступнаКомандаСканировать() Тогда
					ИмяФормы = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайлаСоСканера";
				Иначе
					ИмяФормы = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайла";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИмяФормы = "ОбщаяФорма.ВыборПредметаБизнесПроцессаБыстрый";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ПараметрыОбработчика.Вставить("ИмяПредмета", ИмяПредмета);
	ПараметрыОбработчика.Вставить("Предмет", Предмет);
	ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ДобавитьПредметЗадачиПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	РезультатОткрытия = ОткрытьФорму(
		ИмяФормы, ПараметрыОткрытия,,,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Возврат Истина;
		
КонецФункции

Процедура ДобавитьПредметЗадачиПродолжение(РезультатОткрытия, Параметры) Экспорт
	
	Если Не (ТипЗнч(РезультатОткрытия) = Тип("Структура") Или ТипЗнч(РезультатОткрытия) = Тип("Массив")) Тогда
		// Предмет не выбран
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		Если Параметры.ИмяПредмета = Неопределено Тогда
			Параметры.ИмяПредмета = РезультатОткрытия.ИмяПредмета;
		КонецЕсли;
		
		Попытка
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				Параметры.Форма.Объект.Ссылка,
				Параметры.Форма.УникальныйИдентификатор,
				РезультатОткрытия.ИмяПредмета,
				РезультатОткрытия.Предмет, 
				Ложь);
			
		Исключение
			Если Параметры.ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось добавить предмет в задачу:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить предмет в задаче:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			Если Параметры.ОписаниеОповещения <> Неопределено Тогда
				Параметры.ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
			КонецЕсли;
			Возврат;
		КонецПопытки;
				
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		
		Для Каждого Результат Из РезультатОткрытия Цикл
			Попытка
				МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
					Параметры.Форма.Объект.Ссылка,
					Параметры.Форма.УникальныйИдентификатор,
					Результат.ИмяПредмета,
					Результат.Предмет, 
					Ложь);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить предмет в задаче:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				Если Параметры.ОписаниеОповещения <> Неопределено Тогда
					Параметры.ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
					ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
				КонецЕсли;
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
	Параметры.Форма.Прочитать();
	
	// После перечитывания дата исполнения будет пустой,
	// поэтому устанавливаем ее равной текущей дате
	Если Не Параметры.Форма.Объект.Выполнена Тогда
		Параметры.Форма.Объект.ДатаИсполнения = ТекущаяДата();
	КонецЕсли;
	
	Если Параметры.ОписаниеОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина - предметы успешно удалены, или Ложь - не удалось удалить предметы.
//
Функция УдалитьПредметыЗадачи(
	Форма,
	СообщениеОбОшибке = Неопределено,
	ИменаПредметов,
	СтандартнаяОбработка = Истина) Экспорт
	
	СообщениеОбОшибке = "";
	СтандартнаяОбработка = Ложь;
	
	Если Форма.Объект.ПометкаУдаления Тогда
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя удалять предметы из помеченной на удаление задачи.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя очищать предметы в помеченной на удаление задаче.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
		
		Попытка
			Форма.Записать();
		Исключение
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сохранить изменения:
					|%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
			Строка(Форма.Объект.Ссылка));
		
	КонецЕсли;
	
	Попытка
		
		ПредметыЗадачи = Новый Массив;
		
		Для Каждого ИмяПредмета Из ИменаПредметов Цикл
			ПредметЗадачи = Новый Структура();
			ПредметЗадачи.Вставить("ИмяПредмета", ИмяПредмета);
			ПредметЗадачи.Вставить("Предмет", Неопределено);
			
			ПредметыЗадачи.Добавить(ПредметЗадачи);
		КонецЦикла;
		
		МультипредметностьВызовСервера.ИзменитьПредметыКорневогоБизнесПроцесса(
			Форма.Объект.Ссылка,
			Форма.УникальныйИдентификатор,
			ПредметыЗадачи,
			Истина);
			
	Исключение
		
		Если ИменаПредметов.Количество() = 1 Тогда
			ПредставлениеПредметов = НСтр("предмет");
		Иначе
			ПредставлениеПредметов = НСтр("предметы");
		КонецЕсли;
		
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить %1 из задачи:
					|%2'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить %1 в задаче:
					|%1'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
				
		Возврат Ложь;
		
	КонецПопытки;
	
	Форма.Прочитать();
	
	// После перечитывания дата исполнения будет пустой,
	// поэтому устанавливаем ее равной текущей дате
	Если Не Форма.Объект.Выполнена Тогда
		Форма.Объект.ДатаИсполнения = ТекущаяДата();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет заполнение предметов процесса
//
Функция ПроверитьЗаполнениеПредметовПроцесса(Форма, Отказ) Экспорт
	
	Элементы = Форма.Объект.Предметы;
	
	Для Каждого Элемент Из Элементы Цикл
		Если (Элемент.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной") 
		  Или Элемент.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный"))
		  И Не ЗначениеЗаполнено(Элемент.Предмет) Тогда
			НомерСтроки = Формат(Элемент.НомерСтроки - 1,"ЧН=0; ЧГ=0");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    	НСтр("ru = 'Не заполнен %1 предмет ""%2"".'"),НРег(Элемент.РольПредмета), Строка(Элемент.ИмяПредмета)),, 
				"Объект.Предметы["+НомерСтроки+"].Описание");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

// Проверяет заполнение предметов задачи
//
Функция ПроверитьЗаполнениеПредметовЗадачи(Форма) Экспорт
	
	Отказ = Ложь;
	
	Элементы = Форма.ДеревоПриложений.ПолучитьЭлементы();

	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ОбязательноеЗаполнение И ЗначениеЗаполнено(Элемент.ИмяПредмета) И Не ЗначениеЗаполнено(Элемент.Ссылка) Тогда
			ОчиститьСообщения();
			Идентификатор = Элемент.ПолучитьИдентификатор();
			ИдентификаторСтрокой = Формат(Идентификатор,"ЧГ=0");
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не введен заполняемый предмет ""%1""'"),Элемент.ИмяПредмета);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,, 
				"ДеревоПриложений");
			Отказ = Истина;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

// Запрашивает подтверждение об удалении файла, принадлежащего процессу
//
Процедура ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияВопроса = Новый ОписаниеОповещения(
		"ПолученоПодтверждениеОбУдаленииПредметаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
		
	Если ВыделенныеСтрокиПредметов.Количество() = 1 Тогда
		Текст = НСтр("ru = 'Удаляемый файл принадлежит текущему процессу и будет удален без возможности восстановления. Продолжить?'");
	Иначе
		Текст = НСтр("ru = 'Среди удаляемых предметов имеются файлы, принадлежащие текущему процессу. Они будут удалены без возможности восстановления. Продолжить?'");
	КонецЕсли;
	
	Для Каждого СтрПредмет Из ВыделенныеСтрокиПредметов Цикл
		Если СтрПредмет.ДоступноУдаление И ТипЗнч(СтрПредмет.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрПредмет.Ссылка, "ВладелецФайла");
			Если ВладелецФайла = Объект.БизнесПроцесс Тогда
				ПоказатьВопрос(ОписаниеОповещенияВопроса, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление файла");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияВопроса, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ПолученоПодтверждениеОбУдаленииПредметаПродолжение(Результат, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат <> КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Открывает карточку предмета текущей строки таблицы "Предметы"
//
Процедура ОткрытьКарточкуПредмета(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Предметы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Предмет) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Предмет);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает перетаскивание файлов в список предметов формы процесса
//
Процедура ОбработкаПеретаскиванияВСписокПредметовПроцесса(Форма, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаПеретаскивания) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Форма.ТолькоПросмотр Или Форма.Элементы.Предметы.ТолькоПросмотр Или Форма.Объект.Завершен Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Записать();
	КонецЕсли;
		
	ПроцессСсылка = Форма.Объект.Ссылка;
	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ПроцессСсылка, Форма, Истина);
	
КонецПроцедуры

// Обрабатывает добавление предмета процесса при перетаскивании
//
Процедура ОбработатьДобавлениеПредметаПроцесса(Форма, Предмет) Экспорт
	
	ИсходныеИменаПредметов = Новый Массив;
	Для Каждого Строка Из Форма.Объект.Предметы Цикл
		ИсходныеИменаПредметов.Добавить(Строка.ИмяПредмета);
	КонецЦикла;
	
	ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет, ИсходныеИменаПредметов);
	
	НоваяСтрока = Форма.Объект.Предметы.Добавить();
	НоваяСтрока.ИмяПредмета = ИмяПредмета;
	НоваяСтрока.Предмет = Предмет;
	НоваяСтрока.Описание = ОбщегоНазначенияДокументооборот.ПредметСтрокой(Предмет, ИмяПредмета);
	НоваяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный");
	НоваяСтрока.Картинка = МультипредметностьКлиентСервер.ИндексКартинкиРолиПредмета(НоваяСтрока.РольПредмета);
	
	Если ТипЗнч(Форма.ДействияПроцесса) = Тип("СписокЗначений") Тогда
		Для Каждого Действие Из Форма.ДействияПроцесса Цикл
			НоваяСтрокаДействия = Форма.Объект.ПредметыЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДействия, НоваяСтрока);
			НоваяСтрокаДействия.ТочкаМаршрута = Действие.Значение;
		КонецЦикла;
	КонецЕсли;

	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Открывает форму установки условия маршрутизации по виду предмета, устанавливает условие в таблиной части
//
Процедура УстановкаУсловияМаршрутизации(ИменаПредметов, Элемент, Поле, СтандартнаяОбработка) Экспорт
	
	Если Не (Поле.Имя = "ИсполнителиОписаниеУсловия" ИЛИ Поле.Имя = "ОбъектЭтапыОписаниеУсловия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОбъектЭтапыОписаниеУсловия" Тогда
		КолонкаУсловие = "УсловиеПерехода";
	Иначе
		КолонкаУсловие = "Условие";
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяПредмета", ТекущиеДанные.ИмяПредметаУсловия);
	Параметры.Вставить("ИменаПредметов", ИменаПредметов);
	Параметры.Вставить("Условие", ТекущиеДанные[КолонкаУсловие]);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	ПараметрыОбработчика.Вставить("КолонкаУсловие", КолонкаУсловие);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановкаУсловияМаршрутизацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	ОткрытьФорму(
		"ОбщаяФорма.РедактированиеУсловия", 
		Параметры,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаУсловияМаршрутизацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элемент = Параметры.Элемент;
	КолонкаУсловие = Параметры.КолонкаУсловие;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Результат.Свойство("ИмяПредмета", ТекущиеДанные.ИмяПредметаУсловия);
	Результат.Свойство("Условие", ТекущиеДанные[КолонкаУсловие]);
	ТекущиеДанные.ОписаниеУсловия = МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
		ТекущиеДанные.ИмяПредметаУсловия, ТекущиеДанные[КолонкаУсловие]);
	
КонецПроцедуры

// Устанавливает описание заполняемого предмета процесса
//
Процедура ОбновитьОписаниеПредметов(Объект) Экспорт
	
	Для Каждого Строка Из Объект.Предметы Цикл
		Если Строка.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
			МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(Строка, Объект.ПредметыЗадач, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть "ПредметыЗадач" комплексного процесса при установке флагов в таблице точек маршрута
//
Процедура УстановитьПредметыЗадачПоТочкамМаршрута(Форма, Объект, СтрокаПредмета) Экспорт
	
	Этапы = Форма.ТочкиМаршрута.ПолучитьЭлементы();
	
	УдаляемыеСтроки = Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Этап Из Этапы Цикл
		Если Не ЗначениеЗаполнено(Этап.ИдентификаторЭтапа) 
		 ИЛИ МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Этап.ШаблонБизнесПроцесса) Тогда
			Если Этап.Видимость Тогда
				Строка = Объект.ПредметыЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Этап);
				Строка.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			КонецЕсли;
		Иначе
			Подэтапы = Этап.ПолучитьЭлементы();
			Для Каждого Подэтап Из Подэтапы Цикл
				Если Подэтап.Видимость Тогда
					Строка = Объект.ПредметыЗадач.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, Подэтап);
					Строка.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РолиПредметовЭтапов = Новый Массив;
	ШаблоныЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из Объект.Этапы Цикл
		ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
	КонецЦикла;
	
	МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
		Объект.Ссылка, ШаблоныЭтапов, Объект.ПредметыЗадач, СтрокаПредмета, РолиПредметовЭтапов);

	Форма.РолиПредметовЭтапов.Очистить();
	Для Каждого Строка Из РолиПредметовЭтапов Цикл
		НоваяСтрока = Форма.РолиПредметовЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПредметыПередНачаломДобавления(Форма, Объект, ЭтоПроцесс, Отказ, Копирование, ОписаниеОповещения = Неопределено)
	
	#Если Не ВебКлиент Тогда
		
		Отказ = Истина;
		
		Если Копирование Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = Объект.Предметы.Добавить();
		Форма.Элементы.Предметы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		СписокВыбора = Новый СписокЗначений;
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной"), 
			НСтр("ru='Основной предмет'"),,БиблиотекаКартинок.ПредметОсновной16);
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Вспомогательный"), 
			НСтр("ru='Вспомогательный предмет'"),,БиблиотекаКартинок.ПредметВспомогательный16);
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый"), 
			НСтр("ru='Заполняемый предмет'"),,БиблиотекаКартинок.ПредметЗаполняемый16);
		
		СписокДоступных = Форма.ДоступныеРолиПредметов;
		
		Для Каждого Элемент из СписокВыбора Цикл
			Если СписокДоступных.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				СписокВыбора.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбработкиОповещения = новый Структура();
		ПараметрыОбработкиОповещения.Вставить("Форма", Форма);
		ПараметрыОбработкиОповещения.Вставить("Объект", Объект);
		ПараметрыОбработкиОповещения.Вставить("ЭтоПроцесс", ЭтоПроцесс);
		ПараметрыОбработкиОповещения.Вставить("Отказ", Отказ);
		ПараметрыОбработкиОповещения.Вставить("Копирование", Копирование);
		ПараметрыОбработкиОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыОбработкиОповещения.Вставить("НоваяСтрока", НоваяСтрока);
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
			"ПредметыПередНачаломДобавленияПродолжениеВыбораИзСписка",
			ЭтотОбъект,
			ПараметрыОбработкиОповещения);
		
		Форма.ПоказатьВыборИзСписка(ОписаниеОповещенияОВыборе, СписокВыбора, НоваяСтрока);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ПредметыПередНачаломДобавленияПродолжениеВыбораИзСписка(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Параметры.Объект.Предметы.Удалить(Параметры.НоваяСтрока);
	Иначе
		Параметры.НоваяСтрока.РольПредмета = ВыбранноеЗначение.Значение; 
		Параметры.НоваяСтрока.Картинка = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(Параметры.НоваяСтрока.РольПредмета);
		
		ПараметрыОбработчикаОповещения = Новый Структура;
		ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", Параметры.ОписаниеОповещения);
		ПараметрыОбработчикаОповещения.Вставить("Форма", Параметры.Форма);
		ПараметрыОбработчикаОповещения.Вставить("Объект", Параметры.Объект);
		ПараметрыОбработчикаОповещения.Вставить("НоваяСтрока", Параметры.НоваяСтрока);
		ОписаниеОповещенияПослеВыбораПредмета = Новый ОписаниеОповещения(
			"ПредметыПередНачаломДобавленияПродолжениеПослеВыбораПредмета",
			ЭтотОбъект,
			ПараметрыОбработчикаОповещения);
			
		ВыбратьПредметПоРолиПредмета(
			Параметры.Форма,
			Параметры.Объект,
			Параметры.ЭтоПроцесс,
			ВыбранноеЗначение.Значение,
			Параметры.НоваяСтрока.ПолучитьИдентификатор(),,
			ОписаниеОповещенияПослеВыбораПредмета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредметыПередНачаломДобавленияПродолжениеПослеВыбораПредмета(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Параметры.Форма,
			Параметры.Объект, РезультатВыбора, Параметры.НоваяСтрока);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
	Иначе
		Параметры.Объект.Предметы.Удалить(Параметры.НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьПредметПоРолиПредмета(Форма, Объект, ЭтоПроцесс, РольПредмета, ВыбраннаяСтрока = Неопределено, ТолькоПросмотр = Ложь, ОписаниеОповещения)

	ЭтоКомплексныйПроцесс = МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Объект.Ссылка);
	
	ИменаПредметовИсключений = Новый СписокЗначений;
	ИменаПредметовИсключений.ЗагрузитьЗначения(МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект));
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		СтрокаПредмета = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЭтоПроцесс И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ПоказатьЗначение(, СтрокаПредмета.Предмет);
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
			ИменаПредметовИсключений.Удалить(ИменаПредметовИсключений.НайтиПоЗначению(СтрокаПредмета.ИмяПредмета));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПроцесс ИЛИ (ЭтоПроцесс И РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РольПредмета", РольПредмета);
		ПараметрыФормы.Вставить("ИменаПредметовИсключений", ИменаПредметовИсключений);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Новый Массив);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		Если ЭтоПроцесс Тогда
			ПараметрыФормы.Вставить("СсылкаНаПроцесс", Объект.Ссылка);
		Иначе
			ПараметрыФормы.Вставить("Шаблон", Объект);
		КонецЕсли;
		
		Если ТипЗнч(Форма.ДействияПроцесса) = Тип("СписокЗначений") Тогда
			ДействияПроцесса = Форма.ДействияПроцесса.ВыгрузитьЗначения();
		Иначе
			ДействияПроцесса = Новый Массив;
			Для Каждого Строка Из Форма.ДействияПроцесса Цикл
				СтруктураДействия = Новый Структура;
				СтруктураДействия.Вставить("ИдентификаторЭтапа");
				СтруктураДействия.Вставить("ШаблонБизнесПроцесса");
				СтруктураДействия.Вставить("ТочкаМаршрута");
				СтруктураДействия.Вставить("ДоступноЗаполнение");
				ЗаполнитьЗначенияСвойств(СтруктураДействия, Строка);
				ДействияПроцесса.Добавить(СтруктураДействия);
			КонецЦикла;
		КонецЕсли;
		
		Если ВыбраннаяСтрока <> Неопределено Тогда
			
			ТекущиеДанные = Объект.Предметы.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
			ПараметрыФормы.Вставить("Добавление", ?(ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета), Ложь, Истина));
			ПараметрыФормы.Вставить("РольПредмета", ТекущиеДанные.РольПредмета);
			ПараметрыФормы.Вставить("Предмет", ТекущиеДанные.Предмет);
			ПараметрыФормы.Вставить("ИмяПредмета", ТекущиеДанные.ИмяПредмета);
			ПараметрыФормы.Вставить("ИмяПредметаОснование",ТекущиеДанные.ИмяПредметаОснование);
			ПараметрыФормы.Вставить("ШаблонОснование", ТекущиеДанные.ШаблонОснование);
			Если ЭтоПроцесс Тогда
				Если Объект.Завершен Или Объект.ПометкаУдаления Тогда
					ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
				КонецЕсли;
				ПараметрыФормы.Вставить("ШаблонПроцесса", Объект.Шаблон);
			КонецЕсли;
			
			ТекущиеИсходящие = Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",ТекущиеДанные.ИмяПредмета, Истина));
			Если Не ЭтоКомплексныйПроцесс Тогда
				Если ТекущиеИсходящие.Количество() > 0 Тогда
					ПараметрыФормы.Вставить("ТочкаМаршрута",ТекущиеИсходящие[0].ТочкаМаршрута);
					Если ЭтоКомплексныйПроцесс Тогда
						ПараметрыФормы.Вставить("ШаблонЭтапа", ТекущиеИсходящие[0].ШаблонБизнесПроцесса);
						ПараметрыФормы.Вставить("ИдентификаторЭтапа", ТекущиеИсходящие[0].ИдентификаторЭтапа);
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
					СтрокиКУдалению = Новый Массив;
					Для Каждого Строка Из ДействияПроцесса Цикл
						Отбор = Новый Структура("ИмяПредмета, ШаблонБизнесПроцесса", ТекущиеДанные.ИмяПредмета, Строка.ШаблонБизнесПроцесса);
						СтрокиЭтаповПредмета = Форма.РолиПредметовЭтапов.НайтиСтроки(Отбор);
						Если СтрокиЭтаповПредмета.Количество() > 0 Тогда
							Если СтрокиЭтаповПредмета[0].РольПредмета <> ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") Тогда
								СтрокиКУдалению.Добавить(Строка);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Для Каждого Строка Из СтрокиКУдалению Цикл
						ДействияПроцесса.Удалить(ДействияПроцесса.Найти(Строка));
					КонецЦикла;
				КонецЕсли;
					
				ДанныеЗаполнения = Новый Массив;
				Для Каждого Строка Из ТекущиеИсходящие Цикл
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки.Вставить("ИдентификаторЭтапа", Строка.ИдентификаторЭтапа);
					СтруктураСтроки.Вставить("ШаблонБизнесПроцесса", Строка.ШаблонБизнесПроцесса);
					СтруктураСтроки.Вставить("ТочкаМаршрута", Строка.ТочкаМаршрута);
					ДанныеЗаполнения.Добавить(СтруктураСтроки);
				КонецЦикла;
				ПараметрыФормы.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			КонецЕсли;
			ПредметЗаполнен = ЗначениеЗаполнено(ТекущиеДанные.Предмет);
			
		Иначе

			ПараметрыФормы.Вставить("Добавление", Истина);
			ПредметЗаполнен = Ложь;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДействияПроцесса", ДействияПроцесса);

		Если РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") И Не ПредметЗаполнен Тогда
			Если ЭтоКомплексныйПроцесс Тогда
				ИмяФормыРедактирования = "ОбщаяФорма.РедактированиеПредметаЗаполненияКомплексногоПроцесса";
			Иначе
				ИмяФормыРедактирования = "ОбщаяФорма.РедактированиеПредметаЗаполнения";
			КонецЕсли;
		Иначе
			ИмяФормыРедактирования = "ОбщаяФорма.РедактированиеПредмета";
		КонецЕсли;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("БизнесПроцесс", Объект.Ссылка);
		ПараметрыФормы.Вставить("ИдентификаторПроцесса", Форма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("РольПредмета", РольПредмета);
		ПараметрыФормы.Вставить("ИменаПредметов", ИменаПредметовИсключений);
		ПараметрыФормы.Вставить("ИсходныеПредметы", Объект.Предметы);
		ПараметрыФормы.Вставить("Проект", Объект.Проект);
		ПараметрыФормы.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
		Если ВыбраннаяСтрока <> Неопределено Тогда
			ПараметрыФормы.Вставить("Предмет", СтрокаПредмета.Предмет);
			ПараметрыФормы.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
		КонецЕсли;
		ИмяФормыРедактирования = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
	КонецЕсли;
	
	ОткрытьФорму(
		ИмяФормыРедактирования,
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры