////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с форумом.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает очередной номер для нового сообщения в теме,
// т.е. номер, следующий за максимальным уже присвоенным номером в теме
// Если в теме нет сообщений, возвращает 1
Функция ПосчитатьНомерНовогоСообщения(Тема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СообщенияОбсуждений.НомерСообщения) КАК НомерСообщения
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.ВладелецСообщения = &Тема
		|
		|СГРУППИРОВАТЬ ПО
		|	СообщенияОбсуждений.ВладелецСообщения";			   
	Запрос.УстановитьПараметр("Тема", Тема);			   		   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат 1;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.НомерСообщения + 1;
			
КонецФункции

// Возвращает количество сообщений в теме, не считая удаленные сообщения
Функция ПосчитатьКоличествоСообщений(Тема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕстьNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СообщенияОбсуждений.Ссылка),0) КАК КоличествоСообщений
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.ВладелецСообщения = &Тема
		|	И СообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("Тема", Тема);			   	   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.КоличествоСообщений;
			
КонецФункции

// Возвращает первое сообщение темы. Если первого сообщения нет - возвращает пустую ссылку.
Функция НайтиПервоеСообщениеТемы(Тема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияОбсуждений.Ссылка
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.ВладелецСообщения = &Тема
		|	И СообщенияОбсуждений.ПервоеСообщениеТемы = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	СообщенияОбсуждений.ВладелецСообщения,
		|	СообщенияОбсуждений.Ссылка";
	Запрос.УстановитьПараметр("Тема", Тема);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Справочники.ТемыОбсуждений.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Возвращает список сообщений темы. Если сообщений нет - вернет Неопределено.
Функция ПолучитьСписокСообщенийТемы(Тема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СообщенияОбсуждений.Ссылка
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.ВладелецСообщения = &Тема";
	Запрос.УстановитьПараметр("Тема", Тема);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СообщенияТемы = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СообщенияТемы.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СообщенияТемы;
	
КонецФункции

// Устанавливает нового родителя у массива сообщений.
// Если у какого-либо сообщения тема не совпадает 
// с темой нового владельца, то перенос сообщений не производится.
// Если элемент массива имеет тип не сообщения, то перенос не производится.
// Тема родителя необходима в связи с тем, что в НовомРодители может оказаться 
// значение Неопределено, а в данном случае все равно необходимо проверять перенос 
// в другие темы.
Функция ПереносСообщения(МассивСообщений, НовыйРодитель, ТемаРодителя) Экспорт
	
	Для каждого Сообщение Из МассивСообщений Цикл
		Если ТипЗнч(Сообщение) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			Возврат 1;	
		КонецЕсли;
		
		Если Сообщение.ВладелецСообщения <> ТемаРодителя Тогда
			Возврат 2;
		КонецЕсли;
		
		Если Сообщение.ПервоеСообщениеТемы = Истина Тогда
			Возврат 3;	
		КонецЕсли
	КонецЦикла;
	
	Для каждого Сообщение Из МассивСообщений Цикл
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		СообщениеОбъект.Родитель = НовыйРодитель;
		СообщениеОбъект.Записать();
	КонецЦикла;
	
КонецФункции

// Устанавливает нового родителя у массива тем.
// Если элемент массива имеет тип не сообщения, то перенос 
// не производится и возвращает значение Ложь.
// Если перенос прошел успешно возвращает значение Истина.
Функция ПереносТемы(МассивТем, НовыйРодитель) Экспорт
	
	Для каждого Тема Из МассивТем Цикл
		Если ТипЗнч(Тема) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Тема Из МассивТем Цикл
		ТемаОбъект = Тема.ПолучитьОбъект();
		ТемаОбъект.Родитель = НовыйРодитель;
		ТемаОбъект.Записать();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обновляет информацию о теме сообщения в регистре сведений
Процедура ОбновитьИнформациюОТеме(Тема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщенияОбсуждений.Автор КАК АвторПоследнегоСообщения,
		|	ВЫБОР
		|		КОГДА СообщенияОбсуждений.ДатаСоздания > СообщенияОбсуждений.ДатаИзменения
		|			ТОГДА СообщенияОбсуждений.ДатаСоздания
		|		ИНАЧЕ СообщенияОбсуждений.ДатаИзменения
		|	КОНЕЦ КАК ДатаПоследнегоСообщения
		|ИЗ
		|	Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|ГДЕ
		|	СообщенияОбсуждений.ВладелецСообщения = &Тема
		|	И СообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнегоСообщения УБЫВ";
	
	Запрос.УстановитьПараметр("Тема", Тема);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		АвторПоследнегоСообщения = Неопределено;
		ДатаПоследнегоСообщения = Неопределено;
		КоличествоСообщений = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АвторПоследнегоСообщения = Выборка.АвторПоследнегоСообщения;
		ДатаПоследнегоСообщения = Выборка.ДатаПоследнегоСообщения;
		КоличествоСообщений = ПосчитатьКоличествоСообщений(Тема)
	КонецЕсли;
	
	РегистрыСведений.СведенияОТемахОбсуждений.УстановитьСведенияОТеме(
		Тема, 
		АвторПоследнегоСообщения, 
		ДатаПоследнегоСообщения, 
		КоличествоСообщений);
	
КонецПроцедуры

// Возвращает тему по предмету
Функция НайтиТемуПоПредмету(Предмет) Экспорт
	
	Если Предмет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТемыОбсуждений.Ссылка КАК Тема
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК ТемыОбсуждений
		|ГДЕ
		|	ТемыОбсуждений.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Предмет);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Тема;
	КонецЕсли;
	
КонецФункции

// Возвращает запись регистра сведений СведенияОТемахОбсуждений,
// соответствующую переданной Теме. Если переданная тема не заполнено,
// возвращает Неопределено.
Функция ПолучитьСведенияОТеме(Тема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Тема) Тогда
		СведенияОТеме = РегистрыСведений.СведенияОТемахОбсуждений.ПолучитьСведенияОТеме(Тема);
		Возврат СведенияОТеме;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Удаляет все записи в регистре СведенияОГолосовании, соответствующие сообщению. 
Процедура УдалитьГолосование(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.СведенияОГолосовании.УбратьСведенияОГолосовании(Сообщение);
	
КонецПроцедуры

// Добавляет запись в регистр сведений СведенияОГолосовании, соответствующую голосу
// текущего пользователь в голосовании данного Сообщения и вариантом ответа.
Процедура Проголосовать(Сообщение, ВариантОтвета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТемаЗакрыта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Сообщение.ВладелецСообщения, "Закрытая");
	Если ТемаЗакрыта Тогда
		Текст = НСтр("ru = 'Невозможно проголосовать в закрытой теме.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) И ВариантОтвета <> 0 Тогда
		ВариантОтветаЗначениеВРегистре = РегистрыСведений.СведенияОГолосовании.ПолучитьВариантОтветаПользователя(Сообщение);
		Если ВариантОтвета <> ВариантОтветаЗначениеВРегистре Тогда
			РегистрыСведений.СведенияОГолосовании.УстановитьВариантОтветаПользователя(Сообщение, ВариантОтвета);			
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры

// Удаляет запись в регистре сведений СведенияОГолосовании, соответствующую голосу 
// текущего пользователя в голосовании переданного сообщения.
Процедура ОтменитьГолос(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТемаЗакрыта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Сообщение.ВладелецСообщения, "Закрытая");
	Если ТемаЗакрыта Тогда
		Текст = НСтр("ru = 'Нельзя отменить голос, т.к. тема закрыта автором.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		РегистрыСведений.СведенияОГолосовании.ОтменитьГолосПользователя(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает вариант ответа текущего пользователя на вопрос голосования сообщения.
Функция ПолучитьРезультатГолосованияТекущегоПользователя(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Возврат РегистрыСведений.СведенияОГолосовании.ПолучитьВариантОтветаПользователя(Сообщение);
	КонецЕсли;
	
КонецФункции

// Функция возвращает список значений, содержащий результат голосования переданного сообщения.
// Значение соответствует варианту ответа голосования, представление соответствует строке 
// с результатом голосования за данный вариант.
Функция ПолучитьРезультатГолосования(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОГолосовании.Пользователь) КАК КоличествоГолосов,
		|	СведенияОГолосовании.ВариантОтвета
		|ИЗ
		|	РегистрСведений.СведенияОГолосовании КАК СведенияОГолосовании
		|ГДЕ
		|	СведенияОГолосовании.Сообщение = &Сообщение
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОГолосовании.ВариантОтвета";

	Запрос.УстановитьПараметр("Сообщение", Сообщение);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	СписокРезультатГолосования = Новый СписокЗначений();
	ВсегоГолосов = 0;
	Пока Выборка.Следующий() Цикл
		
		СписокРезультатГолосования.Добавить(Выборка.ВариантОтвета, Выборка.КоличествоГолосов);
		ВсегоГолосов = ВсегоГолосов + Выборка.КоличествоГолосов; 

	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВсегоГолосов) Тогда
		ВсегоГолосов = 0;
	КонецЕсли;
	
	Голосование = Новый СписокЗначений();
	Для каждого ВариантГолосования Из Сообщение.ВариантыГолосования Цикл
		ГолосовЗаВариантЭлементСписка = СписокРезультатГолосования.НайтиПоЗначению(ВариантГолосования.НомерСтроки);
		Если ГолосовЗаВариантЭлементСписка = Неопределено Тогда
			ГолосовЗаВариант = 0;
		Иначе
			ГолосовЗаВариант = Число(ГолосовЗаВариантЭлементСписка.Представление);
		КонецЕсли;
		
		Если ВсегоГолосов = 0 Тогда
			ПроцентГолосовЗаВариант = 0;
		Иначе
			ПроцентГолосовЗаВариант = Окр(ГолосовЗаВариант/ВсегоГолосов*100);
		КонецЕсли;
		
		РезультатГолосования = 
			"" + ВариантГолосования.НомерСтроки 
			+ ". " + ВариантГолосования.ТекстВарианта 
			+ " " + ГолосовЗаВариант 
			+ " (" + ПроцентГолосовЗаВариант + "%);";
		
		Голосование.Добавить(ВариантГолосования.НомерСтроки, РезультатГолосования);
	КонецЦикла;
	
	Голосование.Добавить(0, "Всего голосов: " + ВсегоГолосов + ".");
	Возврат Голосование; 
	
КонецФункции

// Функция возвращает строкой представление результата голоса текущего пользователя
// по голосованию сообщения.
Функция ПолучитьПредставлениеГолосаПользователя(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеГолосаПользователя = "";
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ВариантГолосования = ПолучитьРезультатГолосованияТекущегоПользователя(Сообщение);
		НайденнаяСтрока = Сообщение.ВариантыГолосования.Найти(ВариантГолосования, "НомерСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПредставлениеГолосаПользователя = "" + НайденнаяСтрока.НомерСтроки + ". " + НайденнаяСтрока.ТекстВарианта;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеГолосаПользователя;
	
КонецФункции

// Формирует текстовое представление темы
Функция СформироватьТекстовоеПредставлениеТемы(Тема, ПервоеСообщениеТемы = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Тема) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПервоеСообщениеТемы = Неопределено Тогда
		
		ПервоеСообщениеТемы = НайтиПервоеСообщениеТемы(Тема);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПервоеСообщениеТемы) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстовоеПредставлениеТемы = СформироватьТекстовоеПредставлениеСообщения(ПервоеСообщениеТемы);
	
	Возврат ТекстовоеПредставлениеТемы;
	
КонецФункции

// Формирует текстовое представление сообщения
Функция СформироватьТекстовоеПредставлениеСообщения(Сообщение) Экспорт
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаСообщения = Макс(Сообщение.ДатаСоздания, Сообщение.ДатаИзменения);
	
	ТекстовоеПредставлениеСообщения =
		РаботаСОбсуждениямиКлиентСервер.СформироватьТекстовоеПредставлениеСообщения(
			Сообщение.ТекстСообщения,
			Сообщение.Автор,
			ДатаСообщения);
	
	Возврат ТекстовоеПредставлениеСообщения;
	
КонецФункции

// Возвращает таблицу значений с информацией о вложениях сообщения.
Функция ПолучитьФайлыСообщения(
	Сообщение,
	ФормироватьПредставлениеРазмера = Ложь,
	ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(Файлы.Ссылка) КАК Представление,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = """"
		|			ТОГДА Файлы.Наименование
		|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение
		|	КОНЕЦ КАК ИмяФайла,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК РазмерПредставление,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.Редактирует КАК Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсияДатаМодификацииФайла КАК ТекущаяВерсияДатаМодификацииФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Сообщение
		|	И (&ВключатьПомеченныеНаУдаление
		|			ИЛИ НЕ Файлы.ПометкаУдаления)");
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ФормироватьПредставлениеРазмера Тогда
		Для каждого СтрокаТаблицы Из Результат Цикл
			СтрокаТаблицы.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(СтрокаТаблицы.Размер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает персональную настройку форума текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ШрифтОбластиЧтения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиФорума",
			"ШрифтОбластиЧтения",
			Новый Шрифт(ШрифтыСтиля.ШрифтТекста, , 12));
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка форума: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку форума текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ШрифтОбластиЧтения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Шрифт") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки форума: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиФорума",
			"ШрифтОбластиЧтения",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка форума: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует небольшой заголовок по переданному тексту.
//
// Параметры:
//  ОсновнойТекст - Строка - Текст, из которого формируется заголовок.
//
// Возвращаемое значение:
//  Строка - Текст заголовка.
//
Функция ПолучитьЗаголовок(ОсновнойТекст) Экспорт
	
	ДлинаЗаголовка = Мин(40, СтрДлина(ОсновнойТекст));
	ТекстЗаголовка = Лев(ОсновнойТекст, ДлинаЗаголовка);
	Если СтрДлина(ОсновнойТекст) > ДлинаЗаголовка Тогда
		ТекстЗаголовка = ТекстЗаголовка + "...";
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции


#КонецОбласти