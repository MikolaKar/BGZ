
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Переопределяемые процедуры и функции общего назначения

// Переопределяет использование механизма интернет-поддержки.
// Реализация процедуры строго обязательна. В параметре Отказ должно
// возвращаться одно из двух значений: Истина или Ложь.
//
// Параметры:
//	Отказ - Булево - Истина, использование интренет-поддержки запрещено;
//		Ложь - в противном случае;
//		Значение по умолчанию - Неопределено;
//
// Пример:
// Для типовых конфигураций, основанных на библиотеке стандартных подсистем
// (БСП) необходимо запрещение использования механизма интернет-поддержки в
// модели сервиса. Для этого необходимо в тело процедуры вставить код:
//
// Отказ = ОбщегоНазначенияПовтИсп.РазделениеВключено();
//
Процедура ИспользоватьИнтернетПоддержку(Отказ) Экспорт
	
	Отказ = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецПроцедуры

// Переопределяет возможность показа информационного окна для
// текущей конфигурации.
//
// Параметры:
//	Отказ - Булево - Истина, если показ информационного окна запрещен;
//		Ложь - в противном случае;
//		Значение по умолчанию - Ложь;
//
Процедура ИспользоватьИнформационноеОкно(Отказ) Экспорт
	
	Отказ = НЕ Пользователи.РолиДоступны("ИспользованиеИПП");
	
КонецПроцедуры

// Переопределяет необходимость запуска механизма при старте программы, т.е.
// должна ли интеренет-поддержка запускаться при старте программы для показа
// информационного окна.
// Имеет смысл только в том случае, если в ИспользоватьИнформационноеОкно()
// параметру Отказ присваивается значение Ложь.
//
// Параметры:
// ЗапускатьПриСтарте - Булево - Истина, если необходимо запускать
//		интернет-поддержку при старте программы, Ложь - в противном случае.
//		Значение по умолчанию - Ложь.
//
Процедура ЗапускатьИнтернетПоддержкуПриСтартеПрограммы(ЗапускатьПриСтарте) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	РегистрСведений.ПараметрыИнтернетПоддержкиПользователей КАК ПараметрыИнтернетПоддержкиПользователей";
	
	// Показываем монитор ИПП если уже ввели параметры авторизации.
	// Если параметры не введены, то окно авторизации при запуске программы не выводим.
	ЗапускатьПриСтарте = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Процедура дополняет проверку возможности запуска
// механизма интернет-поддержки пользователей в том случае,
// если пользователю недоступна роль "ИспользованиеИПП" и текущий пользователь
// не является полноправным пользователем системы
// (см. процедуру ПриОпределенииЭтоПолноправныйПользователь()).
//
// Параметры:
//	ЗапускРазрешен - Булево - Истина - разрешить запуск, Ложь - запретить запуск.
//		Значение по умолчанию - Ложь.
//
Процедура ПроверитьВозможностьЗапуска(ЗапускРазрешен) Экспорт
	
	
	
КонецПроцедуры

// Определяет, является ли текущий пользователь полноправным
// пользователем информационной базы. Используется для
// определения возможности настройки пользователем параметров
// интернет-поддержки.
//
// Параметры:
// ЭтоПолноправныйПользователь - Булево - в параметре возвращается признак
//	"полноправности" пользователя. Истина - если текущий пользователь является
//	полноправным пользователем информационной базы.
//	Значение по умолчанию - Ложь.
//
// Пример:
// Для конфигурации со встроенной подсистемой "Пользователи" библиотеки
// стандартных подсистем (БСП):
//
//	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
//
Процедура ПриОпределенииЭтоПолноправныйПользователь(ЭтоПолноправныйПользователь) Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
КонецПроцедуры

// Определяет версию обработки "ОбновлениеКонфигурации" библиотеки стандартных
// подсистем (БСП). В параметре Версия возвращается версия обработки обновления
// конфигурации. Для конфигураций, основанных на библиотеке стандартных
// подсистем необходимо в параметре Версия возвратить версию библиотеки
// стандартных подсистем.
// Если библиотека страндартных подсистем не используется, тогда необходимо
// оставить тело процедуры пустым.
//
// Параметры:
//	Версия - Строка - в параметре возвращается версия обработки обновления
//		конфигурации.
//
// Пример:
// Для конфигураций со встроенной библиотекой "Библиотека стандартных
// подсистем":
//	ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
//	ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
//	Версия = ПодсистемаСтандартныеПодсистемы.Версия;
//
Процедура ВерсияОбработкиОбновленияКонфигурации(Версия) Экспорт
	
	ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
	ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
	Версия = ПодсистемаСтандартныеПодсистемы.Версия;
	
КонецПроцедуры

// Переопределяет получение кода основного языка текущей конфигурации.
// Если реализация процедуры не заполнена, то в качестве кода основного
// языка конфигурации будет принято значение Метаданные.ОсновнойЯзык.КодЯзыка.
//
// Параметры:
//	КодОсновногоЯзыка - Строка, Неопределено - в параметре возвращается код
//		основного языка текущей конфигурации. Если возвращено значение
//		Неопределено, то в качестве кода основного языка будет принято значение
//		Метаданные.ОсновнойЯзык.КодЯзыка.
//		Значение по умолчанию - Неопределено.
//
// Пример:
// Для конфигураций со встроенной библиотекой "Библиотека стандартных
// подсистем":
//
//	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
//
Процедура ПриОпределенииКодаОсновногоЯзыкаКонфигурации(КодОсновногоЯзыка) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки событий интернет-поддержки пользователей

// Вызывается перед авторизацией пользователя в интернет-поддержке
// пользователей для определения данных текущего пользователя, если
// логин и пароль не указаны.
// Процедура используется ТОЛЬКО, если необходимо переопределить логин и пароль
// неавторизованного пользователя, например, на основе логина и пароля
// пользователя сервера обновлений или каким-либо другим способом.
//
// Параметры:
// ДанныеПользователя - Структура - выходной параметр - структура, заполняемая
//		данными о пользователе интернет-поддержки:
//	* Логин - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
// Пример:
// получение логина и пароля пользователя интернет-поддержки
// из настроек пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если Настройки = Неопределено Тогда
//		Возврат;
//	Иначе
//		ДанныеПользователя.Вставить("Логин" , Настройки.КодПользователяСервераОбновлений);
//		ДанныеПользователя.Вставить("Пароль", Настройки.ПарольСервераОбновлений);
//	КонецЕсли;
//
Процедура ПриОпределенииДанныхПользователяИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	// не пользуемся паролем пользователя сервера обновлений
	
КонецПроцедуры

// Вызывается при успешной авторизации пользователя в интернет-поддержке
// пользователей после ввода пользователем правильного логина и пароля.
// При необходимости процедура может быть использована для сохранения логина и
// пароля пользователя в смежных механизмах.
// Заполнение процедуры требуется ТОЛЬКО при необходимости переопределения
// обработки входа пользователя в интернет-поддержку.
//
// Параметры:
// ДанныеПользователя - Структура - структура с полями:
//	* Логин - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
// Пример:
// Сохранение логина и пароля пользователя интернет-поддержки
// в настройках пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации",
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если НастройкиОбновленияКонфигурации = Неопределено Тогда
//		НастройкиОбновленияКонфигурации = ОбновлениеКонфигурацииКлиентСервер.НовыеНастройкиОбновленияКонфигурации();
//	Иначе
//		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , ДанныеПользователя.Логин);
//		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , ДанныеПользователя.Пароль);
//	КонецЕсли;
//
//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//		"ОбновлениеКонфигурации", 
//		"НастройкиОбновленияКонфигурации",
//		НастройкиОбновленияКонфигурации);
//
Процедура ПриАвторизацииПользователяВИнтернетПоддержке(ДанныеПользователя) Экспорт
	
	// не пользуемся паролем пользователя сервера обновлений
	
КонецПроцедуры

// Вызывается при выходе пользователя из интернет-поддержки
// (нажатие пользователем кнопки "Выход" на форме интернет-поддержки).
//
// Заполнение процедуры требуется ТОЛЬКО при необходимости переопределить
// обработку выхода пользователя из интернет-поддержки пользователей.
// При необходимости может быть использована для обновления данных пользователя
// в смежных механизмах.
//
// Пример:
// Очистка логина и пароля пользователя интернет-поддержки
// в настройках пользователя сервера обновлений для конфигураций со встроенной
// библиотекой "Библиотека стандартных подсистем" (БСП):
//
//	НастройкиОбновленияКонфигурации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//		"ОбновлениеКонфигурации",
//		"НастройкиОбновленияКонфигурации"
//	);
//
//	Если НастройкиОбновленияКонфигурации <> Неопределено Тогда
//		НастройкиОбновленияКонфигурации.Вставить("КодПользователяСервераОбновлений" , "");
//		НастройкиОбновленияКонфигурации.Вставить("ПарольСервераОбновлений"          , "");
//		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
//			"ОбновлениеКонфигурации", 
//			"НастройкиОбновленияКонфигурации",
//			НастройкиОбновленияКонфигурации);
//	КонецЕсли;
//
Процедура ПриВыходеПользователяИзИнтернетПоддержки() Экспорт
	
	// не пользуемся паролем пользователя сервера обновлений
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с электронным документооборотом

// Процедура заполняет данные для заполнения формы регистрации на основании
// выбранной организации
//
// Параметры:
// Организация - ссылка справочника Организация
// ВозвращаемаяСтруктура - структура с данными об организации:
//	* Индекс - Строка - почтовый индекс организации;
//	* Регион - Строка - код региона организации;
//	* Район - Строка;
//	* Город - Строка;
//	* НаселенныйПункт - Строка - населенный пункт расположения организации;
//	* Улица - Строка;
//	* Дом - Строка;
//	* Корпус - Строка;
//	* Квартира - Строка;
//	* Телефон - Строка - телефон организации;
//	* Наименование - Строка - наименование организации;
//	* ИНН - Строка - ИНН организации;
//	* КПП - Строка - КПП организации;
//	* ОГРН - Строка - ОГРН организации;
//	* КодИМНС - Строка - код ИМНС организации;
//	* ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//	* Фамилия - Строка - фамилия руководителя;
//	* Имя - Строка - имя руководителя;
//	* Отчество - Строка - отчество руководителя;
//
//
// Пример:
//
// для "Управление торговлей 11"
//
//ОрганизацияОбъект = Неопределено;
//Попытка
//	ОрганизацияОбъект = Организация.ПолучитьОбъект();
//Исключение
//КонецПопытки;
//
//ВозвращаемаяСтруктура.Очистить();
//
////// Возвращаемая структура должна содержать все перечисленные ниже
////// ключи и их значения - строки
////// Проверка свойств в дальнейшем не выполняется
//
//ВозвращаемаяСтруктура.Вставить("ОрганизацияСсылка", Организация);
//
//// в конфигурации "Управление торговлей" не реализовано хранение
//// компонентов адреса, поэтому компоненты адреса остаются пустыми
//
//ВозвращаемаяСтруктура.Вставить("Индекс"         , "");
//ВозвращаемаяСтруктура.Вставить("Регион"         , "");
//ВозвращаемаяСтруктура.Вставить("Район"          , "");
//ВозвращаемаяСтруктура.Вставить("Город"          , "");
//ВозвращаемаяСтруктура.Вставить("НаселенныйПункт", "");
//ВозвращаемаяСтруктура.Вставить("Улица"          , "");
//ВозвращаемаяСтруктура.Вставить("Дом"            , "");
//ВозвращаемаяСтруктура.Вставить("Корпус"         , "");
//ВозвращаемаяСтруктура.Вставить("Квартира"       , "");
//
//Если ОрганизацияОбъект = Неопределено Тогда
//	
//	ВозвращаемаяСтруктура.Вставить("Наименование"   , "");
//	ВозвращаемаяСтруктура.Вставить("ИНН"            , "");
//	ВозвращаемаяСтруктура.Вставить("КПП"            , "");
//	ВозвращаемаяСтруктура.Вставить("ОГРН"           , "");
//	ВозвращаемаяСтруктура.Вставить("КодИМНС"        , "");
//	ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	
//	ВозвращаемаяСтруктура.Вставить("Фамилия"        , "");
//	ВозвращаемаяСтруктура.Вставить("Имя"            , "");
//	ВозвращаемаяСтруктура.Вставить("Отчество"       , "");
//	
//	Возврат;
//	
//КонецЕсли;
//
//// получение реквизитов организации
//
//ВозвращаемаяСтруктура.Вставить("Наименование"   , ОрганизацияОбъект.НаименованиеПолное);
//ВозвращаемаяСтруктура.Вставить("ИНН"            , ОрганизацияОбъект.ИНН);
//ВозвращаемаяСтруктура.Вставить("КПП"            , ОрганизацияОбъект.КПП);
//ВозвращаемаяСтруктура.Вставить("ОГРН"           , ОрганизацияОбъект.ОГРН);
//ВозвращаемаяСтруктура.Вставить("КодИМНС"        , "");
//
//ВидыЛиц = Перечисления.ЮрФизЛицо;
//Если ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицо
//	ИЛИ ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицоНеРезидент Тогда
//	ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//Иначе
//	ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//КонецЕсли;
//
//ВозвращаемаяСтруктура.Вставить("Фамилия" , "");
//ВозвращаемаяСтруктура.Вставить("Имя"     , "");
//ВозвращаемаяСтруктура.Вставить("Отчество", "");
//
//Руководитель = ОрганизацияОбъект.ТекущийРуководитель;
//Если НЕ Руководитель.Пустая() Тогда
//	
//	ФИОМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Руководитель.Наименование, " ");
//	КоличествоЭлементов = ФИОМассив.Количество();
//	
//	Если КоличествоЭлементов > 0 Тогда
//		ВозвращаемаяСтруктура.Фамилия = ФИОМассив[0];
//	КонецЕсли;
//	
//	Если КоличествоЭлементов > 1 Тогда
//		ВозвращаемаяСтруктура.Имя = ФИОМассив[1];
//	КонецЕсли;
//	
//	Если КоличествоЭлементов > 2 Тогда
//		ВозвращаемаяСтруктура.Отчество = ФИОМассив[2];
//	КонецЕсли;
//	
//КонецЕсли;
//
//ВозвращаемаяСтруктура.Вставить("Телефон", "");
//
//СтруктураПоиска = Новый Структура;
//СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
//СтрокиТелефона = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//Если СтрокиТелефона.Количество() > 0 Тогда
//	ВозвращаемаяСтруктура.Телефон = СтрокиТелефона[0].НомерТелефона;
//КонецЕсли;
//
//
////////////////////////////////////////////////////////////////////////////////
//
// Пример для "Бухгалтерия предприятия, редакция 3.0":
//
//	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
//			"НаименованиеПолное, ИНН, КПП, ОГРН, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
//	
//	ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	
//	ВозвращаемаяСтруктура.Вставить("ОрганизацияСсылка", Организация);
//	
//	ВозвращаемаяСтруктура.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
//	ВозвращаемаяСтруктура.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
//	ВозвращаемаяСтруктура.Вставить("КПП"            , СвойстваОрганизации.КПП);
//	ВозвращаемаяСтруктура.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
//	ВозвращаемаяСтруктура.Вставить("КодИМНС"        , СвойстваОрганизации.КодНалоговогоОргана);
//	
//	Если ОрганизацияФизЛицо Тогда
//		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	Иначе
//		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	КонецЕсли;
//	
//	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
//	ВозвращаемаяСтруктура.Вставить("Фамилия" , ОтветственныеЛица.РуководительФИО.Фамилия);
//	ВозвращаемаяСтруктура.Вставить("Имя"     , ОтветственныеЛица.РуководительФИО.Имя);
//	ВозвращаемаяСтруктура.Вставить("Отчество", ОтветственныеЛица.РуководительФИО.Отчество);
//	
//
//	Если ОрганизацияФизЛицо Тогда
//		ОбъектКонтактнойИнформации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИндивидуальныйПредприниматель");
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
//		ИмяСправочника = "ФизическиеЛица";
//	Иначе
//		ОбъектКонтактнойИнформации = Организация;
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
//		ИмяСправочника = "Организации";
//	КонецЕсли;
//	
//	ВозвращаемаяСтруктура.Вставить("Индекс"         , "");
//	ВозвращаемаяСтруктура.Вставить("Регион"         , "");
//	ВозвращаемаяСтруктура.Вставить("Район"          , "");
//	ВозвращаемаяСтруктура.Вставить("Город"          , "");
//	ВозвращаемаяСтруктура.Вставить("НаселенныйПункт", "");
//	ВозвращаемаяСтруктура.Вставить("Улица"          , "");
//	ВозвращаемаяСтруктура.Вставить("Дом"            , "");
//	ВозвращаемаяСтруктура.Вставить("Корпус"         , "");
//	ВозвращаемаяСтруктура.Вставить("Квартира"       , "");
//	
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КонтактнаяИнформация.ЗначенияПолей
//	|ИЗ
//	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//	|ГДЕ
//	|	КонтактнаяИнформация.Ссылка = &Ссылка
//	|	И КонтактнаяИнформация.Вид = &Вид";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("Ссылка", ОбъектКонтактнойИнформации);
//	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		
//		АдресСтруктурой = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
//		Если АдресСтруктурой.Свойство("Индекс") Тогда
//			ВозвращаемаяСтруктура.Индекс = АдресСтруктурой.Индекс;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Регион") Тогда
//			ВозвращаемаяСтруктура.Регион = АдресСтруктурой.Регион;
//			ВозвращаемаяСтруктура.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Район") Тогда
//			ВозвращаемаяСтруктура.Район = АдресСтруктурой.Район;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Город") Тогда
//			ВозвращаемаяСтруктура.Город = АдресСтруктурой.Город;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
//			ВозвращаемаяСтруктура.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Улица") Тогда
//			ВозвращаемаяСтруктура.Улица = АдресСтруктурой.Улица;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Дом") Тогда
//			ВозвращаемаяСтруктура.Дом = АдресСтруктурой.Дом;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Корпус") Тогда
//			ВозвращаемаяСтруктура.Корпус = АдресСтруктурой.Корпус;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Квартира") Тогда
//			ВозвращаемаяСтруктура.Квартира = АдресСтруктурой.Квартира;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ВозвращаемаяСтруктура.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)));
//
Процедура ПолучитьРегистрационныеДанныеОрганизации(Организация, ВозвращаемаяСтруктура) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Неопределено;
	КонецЕсли;

	ВозвращаемаяСтруктура.Очистить();

	//// Возвращаемая структура должна содержать все перечисленные ниже
	//// ключи и их значения - строки
	//// Проверка свойств в дальнейшем не выполняется

	ВозвращаемаяСтруктура.Вставить("ОрганизацияСсылка", Организация);

	ВозвращаемаяСтруктура.Вставить("Индекс"         , "");
	ВозвращаемаяСтруктура.Вставить("Регион"         , "");
	ВозвращаемаяСтруктура.Вставить("Район"          , "");
	ВозвращаемаяСтруктура.Вставить("Город"          , "");
	ВозвращаемаяСтруктура.Вставить("НаселенныйПункт", "");
	ВозвращаемаяСтруктура.Вставить("Улица"          , "");
	ВозвращаемаяСтруктура.Вставить("Дом"            , "");
	ВозвращаемаяСтруктура.Вставить("Корпус"         , "");
	ВозвращаемаяСтруктура.Вставить("Квартира"       , "");

	Если ОрганизацияОбъект = Неопределено Тогда
		
		ВозвращаемаяСтруктура.Вставить("Наименование"   , "");
		ВозвращаемаяСтруктура.Вставить("ИНН"            , "");
		ВозвращаемаяСтруктура.Вставить("КПП"            , "");
		ВозвращаемаяСтруктура.Вставить("ОГРН"           , "");
		ВозвращаемаяСтруктура.Вставить("КодИМНС"        , "");
		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
		
		ВозвращаемаяСтруктура.Вставить("Фамилия"        , "");
		ВозвращаемаяСтруктура.Вставить("Имя"            , "");
		ВозвращаемаяСтруктура.Вставить("Отчество"       , "");
		
		Возврат;
		
	КонецЕсли;

	СтруктураПоиска = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, 
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Результат = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
	Если Результат.Количество() > 0 Тогда
		СтруктураАдресаЗаписи = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
			Результат[0].ЗначенияПолей);
		ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, СтруктураАдресаЗаписи);
	КонецЕсли;
	
	// получение реквизитов организации

	ВозвращаемаяСтруктура.Вставить("Наименование"   , ОрганизацияОбъект.ПолноеНаименование);
	ВозвращаемаяСтруктура.Вставить("ИНН"            , ОрганизацияОбъект.ИНН);
	ВозвращаемаяСтруктура.Вставить("КПП"            , ОрганизацияОбъект.КПП);
	ВозвращаемаяСтруктура.Вставить("ОГРН"           , "");
	ВозвращаемаяСтруктура.Вставить("КодИМНС"        , "");

	ВидыЛиц = Перечисления.ЮрФизЛицо;
	Если ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицо
		ИЛИ ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицоНеРезидент Тогда
		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
	Иначе
		ВозвращаемаяСтруктура.Вставить("ЮрФизЛицо"      , "ФизЛицо");
	КонецЕсли;

	ВозвращаемаяСтруктура.Вставить("Фамилия" , "");
	ВозвращаемаяСтруктура.Вставить("Имя"     , "");
	ВозвращаемаяСтруктура.Вставить("Отчество", "");

	Руководитель = РаботаСОрганизациями.ПолучитьОтветственноеЛицо("Руководитель", Организация, 
		ТекущаяДатаСеанса());
	Если НЕ Руководитель.Пустая() Тогда
		
		ФИОМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Руководитель.Наименование, " ");
		КоличествоЭлементов = ФИОМассив.Количество();
		
		Если КоличествоЭлементов > 0 Тогда
			ВозвращаемаяСтруктура.Фамилия = ФИОМассив[0];
		КонецЕсли;
		
		Если КоличествоЭлементов > 1 Тогда
			ВозвращаемаяСтруктура.Имя = ФИОМассив[1];
		КонецЕсли;
		
		Если КоличествоЭлементов > 2 Тогда
			ВозвращаемаяСтруктура.Отчество = ФИОМассив[2];
		КонецЕсли;
		
	КонецЕсли;

	ВозвращаемаяСтруктура.Вставить("Телефон", "");

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СтрокиТелефона = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);

	Если СтрокиТелефона.Количество() > 0 Тогда
		ВозвращаемаяСтруктура.Телефон = СтрокиТелефона[0].НомерТелефона;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения расшифрования контрольного маркера на
// стороне сервера 1С:Предприятия.
//
// Параметры:
// ВыполнятьНаСервере - Булево - выходной параметр: Истина - выполнять
//	на сервере, Ложь - в противном случае
//
// Пример:
// Для конфигурации со встроенной подсистемой ЭлектронныеДокументы:
// ВыполнятьНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
//
Процедура ВыполнятьАвторизациюСертификатаНаСервере(ВыполнятьНаСервере) Экспорт
	
	ВыполнятьНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
	
КонецПроцедуры

// Получение сохраненного пароля ЭП
// Параметры:
// СертификатЭЦП - ЛюбаяСсылка - ссылка на объекта сертификата ЭЦП в ИБ;
// ПарольДоступаЭЦП - Строка - в параметре возвращается сохраненный пароль
//		сертификата;
//
//
// Пример:
// Для конфигураций со встроенной библиотекой "Электронные документы"
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.2:
//
//	ЗапросПароля = Новый Запрос;
//	ЗапросПароля.Текст =
//	"ВЫБРАТЬ
//	|	СертификатыЭП.ПарольПользователя
//	|ИЗ
//	|	Справочник.СертификатыЭП КАК СертификатыЭП
//	|ГДЕ
//	|	СертификатыЭП.Ссылка = &СертификатЭП
//	|	И СертификатыЭП.ЗапомнитьПарольКСертификату";
//	
//	ЗапросПароля.УстановитьПараметр("СертификатЭП", СертификатЭЦП);
//	
//	ВыборкаПароля = ЗапросПароля.Выполнить().Выбрать();
//	Если ВыборкаПароля.Следующий() Тогда
//		Если НЕ ПустаяСтрока(ВыборкаПароля.ПарольПользователя) Тогда
//			ПарольДоступаЭЦП = ВыборкаПароля.ПарольПользователя;
//		КонецЕсли;
//	КонецЕсли;
//
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.1:
//
// Получение сохраненного пароля сертификата для конфигурации
// со встроенной подсистемой "ЭлектронныеДокументы":
//	ЗапросПароля = Новый Запрос;
//	ЗапросПароля.Текст =
//	"ВЫБРАТЬ
//	|	СертификатыЭЦП.ПарольПользователя
//	|ИЗ
//	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
//	|ГДЕ
//	|	СертификатыЭЦП.Ссылка = &СертификатЭЦП
//	|	И СертификатыЭЦП.ЗапомнитьПарольКСертификату";
//	
//	ЗапросПароля.УстановитьПараметр("СертификатЭЦП", СертификатЭЦП);
//	
//	ВыборкаПароля = ЗапросПароля.Выполнить().Выбрать();
//	Если ВыборкаПароля.Следующий() Тогда
//		Если НЕ ПустаяСтрока(ВыборкаПароля.ПарольПользователя) Тогда
//			ПарольДоступаЭЦП = ВыборкаПароля.ПарольПользователя;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ОпределитьСохраненныйПарольСертификатаЭЦП(СертификатЭЦП, ПарольДоступаЭЦП) Экспорт
	
	ЗапросПароля = Новый Запрос;
	ЗапросПароля.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭП.ПарольПользователя
	|ИЗ
	|	Справочник.СертификатыЭП КАК СертификатыЭП
	|ГДЕ
	|	СертификатыЭП.Отпечаток = &Отпечаток
	|	И СертификатыЭП.Пользователь = &Пользователь
	|	И СертификатыЭП.ЗапомнитьПарольКСертификату";
	
	ЗапросПароля.УстановитьПараметр("Отпечаток", СертификатЭЦП.Отпечаток);
	ЗапросПароля.УстановитьПараметр("Пользователь", СертификатЭЦП.Пользователь);
	
	ВыборкаПароля = ЗапросПароля.Выполнить().Выбрать();
	Если ВыборкаПароля.Следующий() Тогда
		Если НЕ ПустаяСтрока(ВыборкаПароля.ПарольПользователя) Тогда
			ПарольДоступаЭЦП = ВыборкаПароля.ПарольПользователя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращающая двоичные данные выбранного сертификата
// Параметры:
// СертификатЭЦП - ЛюбаяСсылка - выбранный сертификат;
// ДвоичныеДанныеСертификата - ДвоичныеДанные, Неопределено - двоичные
//		данные сертификата, или Неопределено, если двоичные данные сертификата
//		получить не удалось.
//
//
// Пример:
// Получение двоичных данных для конфигурации со встроенным документооборотом
//	Попытка
//		ДвоичныеДанныеСертификата = СертификатЭЦП.ФайлСертификата.Получить();
//	Исключение
//	КонецПопытки;
//
Процедура ПолучитьДвоичныеДанныеСертификата(СертификатЭЦП, ДвоичныеДанныеСертификата) Экспорт
	
	ДвоичныеДанныеСертификата = СертификатЭЦП.ФайлСертификата.Получить();
	
КонецПроцедуры

// Определяет типы справочников сертификатор ЭЦП.
//
// Параметры:
// ОписаниеТиповСертификатаЭЦП - ОписаниеТипов - в параметре возвращаются
//		типы справочников сертификатор ЭЦП;
//
// Пример:
// Для конфигураций со встроенной библиотекой "Электронные документы"
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.2:
//
//	ОписаниеТиповСертификатаЭЦП = Новый ОписаниеТипов("СправочникСсылка.СертификатыЭП");
//
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.1:
//
//	ОписаниеТиповСертификатаЭЦП = Новый ОписаниеТипов("СправочникСсылка.СертификатыЭЦП");
//
Процедура ОписаниеТиповСправочникаСертификатовЭД(ОписаниеТиповСертификатаЭЦП) Экспорт
	
	ОписаниеТиповСертификатаЭЦП = Новый ОписаниеТипов("СправочникСсылка.СертификатыЭП");
	
КонецПроцедуры

// Выполняет поиск в ИБ объекта сертификата ЭЦП по его отпечатку.
//
// Параметры:
//	Отпечаток - Строка - base64-строка отпечатка сертификата;
//	СсылкаСправочникаЭЦП - ЛюбаяСсылка - в параметре возвращается ссылка на
//		объект данных сертификата в ИБ;
//
// Пример:
// Для конфигураций со встроенной библиотекой "Электронные документы"
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.2:
//
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СертификатыЭП.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.СертификатыЭП КАК СертификатыЭП
//	|ГДЕ
//	|	СертификатыЭП.Отпечаток = &Отпечаток";
//	
//	Запрос.Параметры.Вставить("Отпечаток", Отпечаток);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		СсылкаСправочникаЭЦП = Выборка.Ссылка;
//	КонецЕсли;
//
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.1:
//
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	СертификатыЭЦП.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
//	|ГДЕ
//	|	СертификатыЭЦП.Отпечаток = &Отпечаток";
//
//	Запрос.Параметры.Вставить("Отпечаток", Отпечаток);
//
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		СсылкаСправочникаЭЦП = Выборка.Ссылка;
//	КонецЕсли;
//
Процедура НайтиСертификатЭЦППоОтпечатку(Отпечаток, СсылкаСправочникаЭЦП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СертификатыЭП КАК СертификатыЭП
	|ГДЕ
	|	СертификатыЭП.Отпечаток = &Отпечаток";
	
	Запрос.Параметры.Вставить("Отпечаток", Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СсылкаСправочникаЭЦП = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Получает отпечаток сертификата.
//
// Параметры:
//	СертификатЭЦП - ЛюбаяСсылка - ссылка на объект данных сертификата в ИБ;
//	ОтпечатокСертификата - Строка - base64-строка отпечатка сертификата.
//
// Пример:
// Для конфигураций со встроенной библиотекой "Электронные документы"
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.2:
//
//	Если ТипЗнч(СертификатЭЦП) = Тип("СправочникСсылка.СертификатыЭП")
//		И ЗначениеЗаполнено(СертификатЭЦП) Тогда
//		ОтпечатокСертификата = СертификатЭЦП.Отпечаток;
//	КонецЕсли;
//	
//----------------------------------------------------------------
// //При использовании библиотеки электронных документов ред. 1.1:
//
//	Если ТипЗнч(СертификатЭЦП) = Тип("СправочникСсылка.СертификатыЭЦП")
//		И ЗначениеЗаполнено(СертификатЭЦП) Тогда
//		ОтпечатокСертификата = СертификатЭЦП.Отпечаток;
//	КонецЕсли;
//
Процедура ПолучитьОтпечатокСертификата(СертификатЭЦП, ОтпечатокСертификата) Экспорт
	
	Если ТипЗнч(СертификатЭЦП) = Тип("СправочникСсылка.СертификатыЭП")
		И ЗначениеЗаполнено(СертификатЭЦП) Тогда
		ОтпечатокСертификата = СертификатЭЦП.Отпечаток;
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки криптопровайдера.
// Используется для получения настроек приптопровайдера при расшифровании
// контрольного маркера, присылаемого с сервера для проверки владельца
// сертификата (процедура РасшифроватьМаркерИдентификацииВладельцаСертификата
// в модуле ИнтернетПоддержкаПользователейКлиентПереопределяемый).
//
// Параметры:
// ВозвращаемыеНастройки - Структура - в параметре возвращаются настройки криптопровайдера;
//		Значение по умолчанию - Неопределено.
// Состав полей может быть произвольным и определяется алгоритмом,
// переопределенным в процедуре
// РасшифроватьМаркерИдентификацииВладельцаСертификата
// модуля ИнтернетПоддержкаПользователейКлиентПереопределяемый
//
// Пример:
// Для конфигурации со встроенной
// подсистемой "Электронная подпись" библиотеки стандартных
// подсистем (БСП):
//
//----------------------------------------------------------------
// // При использовании БСП редакции 2.2:
//
//	ПерсональныеНастройки = ЭлектроннаяПодпись.ПерсональныеНастройки();
//	ВозвращаемыеНастройки = ЭлектроннаяПодпись.ОбщиеНастройки(ПерсональныеНастройки);
//
//----------------------------------------------------------------
// // При использовании БСП редакции 2.1:
//
//	ВозвращаемыеНастройки = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
//
Процедура ПолучитьНастройкиКриптографии(ВозвращаемыеНастройки) Экспорт
	
	ПерсональныеНастройки = ЭлектроннаяПодпись.ПерсональныеНастройки();
	ВозвращаемыеНастройки = ЭлектроннаяПодпись.ОбщиеНастройки(ПерсональныеНастройки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с Интернет

// Определяет настройки прокси-сервера на стороне сервера 1С:Предприятия;
//
// Параметры:
// НастройкиПрокси - Соответствие - параметры прокси-сервера - в параметре
//		возвращаются настройки прокси-сервера на стороне клиента 1С:Предприятия:
//	* ИспользоватьПрокси - Булево - Истина, если использовать прокси-сервер;
//	* Пользователь - Строка, Неопределено - имя пользователя прокси-сервера;
//	* Пароль - Строка, Неопределено - пароль пользователя прокси-сервера;
//	* Сервер - Строка - сетевое имя прокси-сервера;
//	* Порт - Число - порт прокси-сервера;
//	* НеИспользоватьПроксиДляЛокальныхАдресов - Булево - Истина, если необходимо
//		отключить использование прокси-сервера для локальных адресов;
//	* ИспользоватьСистемныеНастройки - Булево - Истина, если необходимо
//		использовать системные настройки прокси-сервера;
//	* ДополнительныеНастройки - Соответствие - дополнительные прокси для
//		различных протоколов - ключ - имя протокола ("http", "https", "ftp"),
//		значение - структура со свойствами "Адрес" (Строка) и "Порт" (Число);
//
//
////////////////////////////////////////////////////////////////////////////////
// Пример получения настроек прокси-сервера для конфигураций
// со встроенной подсистемой БСП "ПолучениеФайловИзИнтернета"
//
// НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
//
////////////////////////////////////////////////////////////////////////////////
//
// Если в конфигурации не используется подсистема ПолучениеФайловИзИнтернета
// или не используется функционал подсистемы ПолучениеФайловИзИнтернета
// для настройки параметров прокси-сервера, то рекомендуется использовать
// автоматические настройки параметров прокси-сервера.
// В этом случае код должен иметь вид:
//
//	НастройкиПрокси = Новый Соответствие;
//	НастройкиПрокси["ИспользоватьПрокси"]             = Истина;
//	НастройкиПрокси["ИспользоватьСистемныеНастройки"] = Истина;
//
Процедура НастройкиПроксиСервера(НастройкиПрокси) Экспорт
	
	НастройкиПрокси = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
КонецПроцедуры

#КонецОбласти
