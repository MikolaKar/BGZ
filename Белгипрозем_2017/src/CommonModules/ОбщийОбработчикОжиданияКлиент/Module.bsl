
////////////////////////////////////////////////////////////////////////////////
// ОбщийОбработчикОжиданияКлиент: модуль содержащий клиентские процедуры
// работы механизма Общий обработчик ожидания.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Подключает общий обработчик ожидания с интервалом в 60 сек.
// Процедура-обработчик находится в глобальном модуле:
// ОбщийОбработчикОжиданияГлобальный.
//
Процедура ПодключитьОбщийОбработчикОжидания() Экспорт
	
	ИнициализироватьПеременныеОбработчика();
	ОбщийОбработчикОжидания(); // Для того что бы код обработчиков ожидания выполнялся сразу после старта.
	ПодключитьОбработчикОжидания("ОбщийОбработчикОжидания", 60);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует глобальные переменные механизма Общий
// обработчик ожидания.
// Переменные находятся в модуле управляемого приложения.
//
Процедура ИнициализироватьПеременныеОбработчика()
	
	// Для проверки новых писем.
	ВстроеннаяПочтаКлиент.ВключитьПроверкуПоступленияНовыхПисем();
	
	// Для работы механизма уведомлений. Значение устанавливается на 10 минут
	// раньше текущей даты для того что бы проверка уведомлений была запущена
	// сразу после старта.
	ДатаПоследнейПроверкиУведомлений = ТекущаяДата() - 600;
	
КонецПроцедуры

// Проверяет готовые к запуску обработчики.
//
// Возвращаемое значение:
//    Структура - содержит данные о обработчиках, срок исполнения которых уже пришел.
//                В качестве ключа указывается имя обработчика, в качестве значения
//                Истина. Если время исполнения обработчика не наступило, тогда 
//                ключ и значение по нему не добавляются в структуру.
//
Функция ОбработчикиКЗапуску() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	ОбработчикиКЗапуску = Новый Структура;
	
	Если ЗначениеЗаполнено(ДатаПоследнейПроверкиПочты)
		И ЗначениеЗаполнено(ИнтервалПроверкиПочты)
		И (ТекущаяДата - ДатаПоследнейПроверкиПочты
			>= ИнтервалПроверкиПочты) Тогда
		
		ОбработчикиКЗапуску.Вставить("ПроверкаПочты", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПоследнейПроверкиУведомлений)
		И (ТекущаяДата - ДатаПоследнейПроверкиУведомлений >= 600)
		И ОтключитьУведомленияПрограммы <> Истина Тогда
		
		ОбработчикиКЗапуску.Вставить("ПроверкаУведомленийПрограммы", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПоследнегоСохраненияЗамеров)
		И ЗначениеЗаполнено(ИнтервалСохраненияЗамеров)
		И (ТекущаяДата - ДатаПоследнегоСохраненияЗамеров 
			>= ИнтервалСохраненияЗамеров) Тогда
		
		Замеры = ОценкаПроизводительностиЗамерВремени["Замеры"];
		ОбработчикиКЗапуску.Вставить("СохранениеЗамеровПроизводительности", Истина);
		ОбработчикиКЗапуску.Вставить("СохранениеЗамеровПроизводительностиЗамеры", Замеры);
		
	КонецЕсли;
	
	Возврат ОбработчикиКЗапуску;
	
КонецФункции

// Выполняет действия обработчика ожидания на клиенте.
// Процедура предназначена для вызова из ОбщийОбработчикОжиданияГлобальный.ОбщийОбработчикОжидания
// 
// Параметры:
//    - ПараметрыВыполнения - Структура - содержащая параметры периодических обработчиков.
//
Процедура ВыполнитьДействияОбработчикаОжидания(ПараметрыВыполнения) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.РезультатыПроверкиПочты) Тогда
		
		// Обновление форм писем
		
		РезультатыПроверкиПочты = ПараметрыВыполнения.РезультатыПроверкиПочты;
		
		#Если Не ВебКлиент Тогда 
			Если РезультатыПроверкиПочты.ЧислоНовыхПисем <> 0 Тогда
				
				СправочникСсылка =
					ПредопределенноеЗначение("Справочник.СправочникДляОткрытияСпискаПисем.Умолчательный");
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СправочникСсылка);
				
				ТекстОповещения = "";
				
				Если РезультатыПроверкиПочты.ЧислоНовыхПисем = 1 Тогда
					ТекстОповещения = НСтр("ru='Получено новое письмо.'");
				Иначе	
					ТекстОповещения = НСтр("ru='Получены новые письма.'");
				КонецЕсли;	
				
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"ВстроеннаяПочта/ОповещениеПользователя",
					"ЧислоНовыхПисем",
					РезультатыПроверкиПочты.ЧислоНовыхПисем);
				
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"ВстроеннаяПочта/ОповещениеПользователя",
					"ПоследнееПисьмо",
					РезультатыПроверкиПочты.ПоследнееПисьмо);
				
				ПоказатьОповещениеПользователя(
					ТекстОповещения, 
					НавигационнаяСсылка, 
					РезультатыПроверкиПочты.Описание, 
					БиблиотекаКартинок.ОповещениеОНовыхПисьмах);
				
			КонецЕсли;
		#КонецЕсли
		
		ПараметрыОповещения = Новый Структура("МожноОбновитьСписокПисем", Истина);	
		Оповестить("ПришлиНовыеПисьма_ПроверкаВозможностиОбновленияСписка", ПараметрыОповещения);
		
		Если ПараметрыОповещения.МожноОбновитьСписокПисем Тогда
			Оповестить("ПисьмаИзменены"); // чтобы обновить список писем
		КонецЕсли;
		
		ДатаПоследнейПроверкиПочты = ТекущаяДата;
		
	КонецЕсли;
	
	Если ПараметрыВыполнения.ЕстьУведомленияПрограммы Тогда
		
		ОткрытьФорму("Справочник.УведомленияПрограммы.Форма.УведомленияПользователя");
		
		ДатаПоследнейПроверкиУведомлений = ТекущаяДата;
		
	КонецЕсли;
	
	Если ПараметрыВыполнения.РезультатыСохраненияЗамеров <> Неопределено Тогда
		
		РезультатыСохраненияЗамеров = ПараметрыВыполнения.РезультатыСохраненияЗамеров;
		Замеры = РезультатыСохраненияЗамеров.Замеры;
		ОценкаПроизводительностиКлиент.ОчиститьБуферЗамеров(Замеры);
		ДатаПоследнегоСохраненияЗамеров = ТекущаяДата;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти