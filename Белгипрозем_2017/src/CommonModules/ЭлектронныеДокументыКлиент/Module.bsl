////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - ссылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	
КонецПроцедуры

// Открывает форму со списком электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть.
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра списка электронных документов.
//
Процедура ОткрытьСписокЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы);
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.СписокЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет документ ИБ на основании актуального ЭД
//
// Параметры:
//  ПараметрКоманды - ссылка на объект
//  Источник - управляемая форма
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, Источник = Неопределено, СопоставлениеУжеВыполнено = Ложь, ЭД = Неопределено) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроведенныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроведенныхДокументов(МассивСсылок);
	Шаблон = НСтр("ru = 'Обработка документа %1.
						|Операция возможна только для непроведенных документов!'");
	Для Каждого Документ ИЗ МассивПроведенныхДокументов Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Документ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСсылок, МассивПроведенныхДокументов);
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СопоставлятьНоменклатуру = Ложь;
	ЭлектронныеДокументыКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуру);
	
	Если ЗначениеЗаполнено(ЭД) Тогда
		СоответствиеВладельцевИЭД = Новый Соответствие;
		СоответствиеВладельцевИЭД.Вставить(ПараметрКоманды, ЭД);
	Иначе
		СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(
																									МассивСсылок);
	КонецЕсли;
	
	Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
		Для Каждого ТекущийДокумент Из МассивСсылок Цикл
			Шаблон = НСтр("ru = 'Электронный документ для %1 не найден'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхВладельцев = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			СсылкаНаЭД = ТекущаяСтрока.Значение;
			ОбъектМетаданных = "";
			ДокументЗагружен = Ложь;
			Если СопоставлятьНоменклатуру И Не СопоставлениеУжеВыполнено Тогда
				СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
																													СсылкаНаЭД);
				Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
					ОткрытьФорму(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы, Источник);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
				
			ЭлектронныеДокументыСлужебныйВызовСервера.ПерезаполнитьДокументыИБПоЭД(
																ТекущаяСтрока.Ключ,
																СсылкаНаЭД,
																ОбъектМетаданных,
																ДокументЗагружен);
			
			Если ДокументЗагружен Тогда
				МассивИзмененныхВладельцев.Добавить(ТекущаяСтрока.Ключ);
				
				Оповестить("ОбновитьСостояниеЭД");
				Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивИзмененныхВладельцев);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИзмененныхВладельцев.Количество() > 0 Тогда
		
		ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;

КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ
//
// Параметры:
//  ПараметрКоманды - ссылка на документ ИБ;
//  Источник - управляемая форма;
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	Для Каждого ТекЭл Из МассивСсылок Цикл
		
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
		Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды") Тогда
				
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД,
																		  ПараметрыОткрытия,
																		  ПараметрыОткрытия.Источник);
			Иначе
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД, , Источник);
			КонецЕсли;
			
		Иначе
			ТекстШаблона = НСтр("ru = '%1. Актуальный электронный документ не найден!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ТекЭл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра дерева электронных документов.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено) Экспорт
	
	Если НЕ (ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоЧтенияЭД()) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектОтбора", СсылкаНаОбъект);
	Если ПараметрыОткрытия = Неопределено Тогда
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы, , СсылкаНаОбъект.УникальныйИдентификатор());
	Иначе
		Окно = Неопределено;
		Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
			ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
			И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
			
			Окно = ПараметрыОткрытия.Окно;
		КонецЕсли;
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ДеревоЭД", ПараметрыФормы,
			ПараметрыОткрытия.Источник, ПараметрыОткрытия.Уникальность, Окно);
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает, подписывает и отправляет электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить", , ЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать=Истина) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("БыстрыйОбменСформироватьНовыйЭДКаталогПослеВыбораОрганизации", ЭтотОбъект);
	ОткрытьФорму("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора",,,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура БыстрыйОбменСформироватьНовыйЭДКаталогПослеВыбораОрганизации(Организация, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйОбменСформироватьНовыйЭДКаталогЗавершение(Организация);
	
КонецПроцедуры

Процедура БыстрыйОбменСформироватьНовыйЭДКаталогЗавершение(Организация) Экспорт
	
	АдресВоВременномХранилище = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
		АдресВоВременномХранилище, Новый УникальныйИдентификатор());
	
	Если АдресВоВременномХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКаталога = Новый Структура;
	СтруктураКаталога.Вставить("Организация", Организация);
	СтруктураКаталога.Вставить("ТоварыКаталога", АдресВоВременномХранилище);
	
	Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Проверяет на модифицированность объект.
//
// Параметры:
//  Объект - объекта, модифицированность которого надо проверить;
//  Форма - форма объекта, модифицированность которого надо проверить.
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки модифицированности формы объекта.
//
Функция ОбъектМодифицирован(Объект, Форма) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Отправка и получение электронных документов одной командой.
//
//
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	ПараметрыВыполнения	= Новый Структура;
	ПараметрыВыполнения.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Обработчик = Новый ОписаниеОповещения("БыстрыйОбменЗагрузитьЭДПродолжение", ЭтотОбъект, ПараметрыВыполнения);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, Файл, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

Процедура БыстрыйОбменЗагрузитьЭДПродолжение(Результат, АдресВХранилище, Файл, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = ПараметрыВыполнения.СсылкаНаДокумент;
	УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;
	
	СтруктураОбмена = Новый Структура("НаправлениеЭД, УникальныйИдентификатор, АдресВХранилище, СсылкаНаДокумент, ФайлАрхива",
		ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"), УникальныйИдентификатор, АдресВХранилище,
		СсылкаНаДокумент, Прав(Файл, 3) = "zip");
		
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаЗагрузкиПросмотраЭД", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор электронных документов для передачи в ФНС

// Получает документы информационной базы по заданным критериям отбора.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - структура, параметры отбора для формы выбора документов ИБ;
//  МножественныйВыбор - булево, свойство формы выбора.
//
Функция ПолучитьДокументыИБДляПередачиФНС(СтруктураОтбора, МножественныйВыбор) Экспорт
	
	МассивДокументовИБ = Новый Массив;
	Возврат МассивДокументовИБ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске.
Процедура СохранитьКак(ДанныеФайла) Экспорт
	
	ЭлектронныеДокументыСлужебныйКлиент.СохранитьКак(ДанныеФайла);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Отправляет запрос выписки в банк, а после получения выписки вызывает оповещение о выборе
// для формы или элемента формы, указанного в параметре Владелец
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД, текущее соглашение;
//  ДатаНачала - дата, начало периода запроса
//  ДатаОкончания - дата, окончание периода запроса
//  Владелец - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка
//  НомерСчета - Строка, номер банковского счета организации. Если не указан, то запрос по всем счетам;
//
Процедура ПолучитьВыпискуБанка(СоглашениеЭД, ДатаНачала, ДатаОкончания, Владелец, НомерСчета = Неопределено) Экспорт
	
	
КонецПроцедуры

