
// Заполняет коды СДР всех задач проекта 
Процедура ЗаполнитьКодыСДРПроектныхЗадач(Проект) Экспорт
	
	// Коды СДР обычных задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектныеЗадачи.Ссылка,
	|	ПроектныеЗадачи.НомерЗадачиВУровне,
	|	ПроектныеЗадачи.ПометкаУдаления,
	|	ПроектныеЗадачи.КодСДР
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Проект
	|	И ПроектныеЗадачи.Родитель = ЗНАЧЕНИЕ(Справочник.ПроектныеЗадачи.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектныеЗадачи.НомерЗадачиВУровне,
	|	ПроектныеЗадачи.Наименование";
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			КодСДР = "";
			НомерЗадачиВУровне = 9999;
		Иначе
			КодСДР = Строка(Счетчик);
			НомерЗадачиВУровне = Счетчик;
			
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (Выборка.НомерЗадачиВУровне <> НомерЗадачиВУровне) Или (Выборка.КодСДР <> КодСДР) Тогда 
		    ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 	ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.НомерЗадачиВУровне = НомерЗадачиВУровне;
			ЗадачаОбъект.КодСДР = КодСДР;
			
			ЗадачаОбъект.Записать();
		КонецЕсли; 
		
		ЗаполнитьКодыСДРПодчиненныхЗадач(Выборка.Ссылка);
	КонецЦикла;
	
	ЗаполнитьПорядокПроектныхЗадач(Проект);
	
КонецПроцедуры

// Заполняет коды СДР подчиненных задач 
Процедура ЗаполнитьКодыСДРПодчиненныхЗадач(Родитель, ИзмененныеЗадачи = Неопределено) Экспорт
	
	Если ИзмененныеЗадачи = Неопределено Тогда 
		ИзмененныеЗадачи = Новый Массив;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектныеЗадачи.Ссылка,
	|	ПроектныеЗадачи.НомерЗадачиВУровне,
	|	ПроектныеЗадачи.ПометкаУдаления,
	|	ПроектныеЗадачи.КодСДР
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Родитель = &Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектныеЗадачи.НомерЗадачиВУровне,
	|	ПроектныеЗадачи.Наименование";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КодРодителя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Родитель, "КодСДР");
	
	Счетчик = 1;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			КодСДР = "";
			НомерЗадачиВУровне = 9999;
		Иначе	
			Если Не ЗначениеЗаполнено(КодРодителя) Тогда
				КодСДР = Строка(Счетчик);
			Иначе
				КодСДР = КодРодителя + "." + Строка(Счетчик);
			КонецЕсли;
			НомерЗадачиВУровне = Счетчик;
			
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если (Выборка.НомерЗадачиВУровне <> НомерЗадачиВУровне) Или (Выборка.КодСДР <> КодСДР) Тогда 
		    ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 	ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			ЗадачаОбъект.НомерЗадачиВУровне = НомерЗадачиВУровне;
			ЗадачаОбъект.КодСДР = КодСДР; 
		
			ЗадачаОбъект.Записать();
			ИзмененныеЗадачи.Добавить(ЗадачаОбъект.Ссылка);
		КонецЕсли;
		
		ЗаполнитьКодыСДРПодчиненныхЗадач(Выборка.Ссылка, ИзмененныеЗадачи);
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает максимальный номер проектной задачи в пределах родителя 
Функция ПолучитьМаксимальныйНомерЗадачиУровня(Проект, Родитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ПроектныеЗадачи.НомерЗадачиВУровне), 0) КАК НомерЗадачиВУровне
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Проект
	|	И ПроектныеЗадачи.Родитель = &Родитель
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЗадачиВУровне;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает массив проектных задач одного уровня с переданной 
Функция ПолучитьМассивЗадачОдногоУровняСУказанной(Проект, Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектныеЗадачи.Ссылка
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Проект
	|	И ПроектныеЗадачи.Родитель = &Родитель
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Родитель", Задача.Родитель);
	Запрос.УстановитьПараметр("Проект", Проект);	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает Код СДР и номер проектной задачи
Функция ПолучитьКодСДРИНомерЗадачиВУровне(Проект, Родитель) Экспорт 
	
	МаксимальныйНомер = РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(Проект, Родитель);
	КодСДРСтрока = "";
	Если ЗначениеЗаполнено(Родитель) Тогда
		КодСДРСтрока = Родитель.КодСДР;	
	КонецЕсли;
	НомерЗадачиВУровне = МаксимальныйНомер + 1;
	КодСДР = 
		КодСДРСтрока
		+ ?(ЗначениеЗаполнено(КодСДРСтрока), ".", "")
		+ Строка(НомерЗадачиВУровне);
		
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("КодСДР", КодСДР);
	ДанныеВозврата.Вставить("НомерЗадачиВУровне", НомерЗадачиВУровне);
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Пересчитывает трудозатраты из одной единицы измерения в другую
Функция ПересчитатьТрудозатраты(Знач Трудозатраты, ИзЕдиницы, ВЕдиницу, ГрафикРаботы) Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		КоличествоРабочихЧасовВДне = ГрафикРаботы.КоличествоРабочихЧасовВДне;
		КоличествоРабочихЧасовВНеделе = ГрафикРаботы.КоличествоРабочихЧасовВНеделе;
		КоличествоРабочихДнейВМесяце = ГрафикРаботы.КоличествоРабочихДнейВМесяце;
	Иначе
		КоличествоРабочихЧасовВДне = 24;
		КоличествоРабочихЧасовВНеделе = 168;
		КоличествоРабочихДнейВМесяце = 30;
	КонецЕсли;	
	
	ТрудозатратыСек = 0;
	
	Если ИзЕдиницы = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута Тогда 
		ТрудозатратыСек = Трудозатраты * 60;
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас Тогда 
		ТрудозатратыСек = Трудозатраты * 3600;
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень Тогда 
		ТрудозатратыСек = Трудозатраты * (3600 * КоличествоРабочихЧасовВДне);
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя Тогда 	
		ТрудозатратыСек = Трудозатраты * (3600 * КоличествоРабочихЧасовВНеделе);
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц Тогда 	
		ТрудозатратыСек = Трудозатраты * (3600 * КоличествоРабочихЧасовВДне * КоличествоРабочихДнейВМесяце);	
	КонецЕсли;
	
	Если ВЕдиницу = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута Тогда 
		Трудозатраты = ТрудозатратыСек / 60;
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас Тогда 
		Трудозатраты = ТрудозатратыСек / 3600;
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень Тогда 
		Трудозатраты = ТрудозатратыСек / (3600 * КоличествоРабочихЧасовВДне);
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя Тогда 	
		Трудозатраты = ТрудозатратыСек / (3600 * КоличествоРабочихЧасовВНеделе);
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц Тогда 	
		Трудозатраты = ТрудозатратыСек / (3600 * КоличествоРабочихЧасовВДне * КоличествоРабочихДнейВМесяце);	
	КонецЕсли;
		
	Возврат Трудозатраты;	
		
КонецФункции

// Пересчитывает длительность из одной единицы измерения в другую
Функция ПересчитатьДлительность(Знач Длительность, ИзЕдиницы, ВЕдиницу, ГрафикРаботы) Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		КоличествоРабочихЧасовВДне = ГрафикРаботы.КоличествоРабочихЧасовВДне;
		КоличествоРабочихЧасовВНеделе = ГрафикРаботы.КоличествоРабочихЧасовВНеделе;
		КоличествоРабочихДнейВМесяце = ГрафикРаботы.КоличествоРабочихДнейВМесяце;
	Иначе
		КоличествоРабочихЧасовВДне = 24;
		КоличествоРабочихЧасовВНеделе = 168;
		КоличествоРабочихДнейВМесяце = 30;
	КонецЕсли;
	
	ДлительностьСек = 0;
	
	Если ИзЕдиницы = Перечисления.ЕдиницыДлительности.Минута Тогда 
		ДлительностьСек = Длительность * 60;
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыДлительности.Час Тогда 
		ДлительностьСек = Длительность * 3600;
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыДлительности.День Тогда 
		ДлительностьСек = Длительность * (3600 * КоличествоРабочихЧасовВДне);
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыДлительности.Неделя Тогда 	
		ДлительностьСек = Длительность * (3600 * КоличествоРабочихЧасовВНеделе);
	ИначеЕсли ИзЕдиницы = Перечисления.ЕдиницыДлительности.Месяц Тогда 	
		ДлительностьСек = Длительность * (3600 * КоличествоРабочихЧасовВДне * КоличествоРабочихДнейВМесяце);	
	КонецЕсли;
	
	Если ВЕдиницу = Перечисления.ЕдиницыДлительности.Минута Тогда 
		Длительность = ДлительностьСек / 60;
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыДлительности.Час Тогда 
		Длительность = ДлительностьСек / 3600;
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыДлительности.День Тогда 
		Длительность = ДлительностьСек / (3600 * КоличествоРабочихЧасовВДне);
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыДлительности.Неделя Тогда 	
		Длительность = ДлительностьСек / (3600 * КоличествоРабочихЧасовВНеделе);
	ИначеЕсли ВЕдиницу = Перечисления.ЕдиницыДлительности.Месяц Тогда 	
		Длительность = ДлительностьСек / (3600 * КоличествоРабочихЧасовВДне * КоличествоРабочихДнейВМесяце);
	КонецЕсли;
		
	Возврат Длительность;
	
КонецФункции

// Возвращает единицу фактических трудозатрат для задачи бизнес-процесса
Функция ПолучитьЕдиницуФактическихТрудозатратЗадачиИсполнителя(Задача) Экспорт 
	
	Если ЗначениеЗаполнено(Задача.ПроектнаяЗадача) Тогда 
		Возврат Задача.ПроектнаяЗадача.ЕдиницаТрудозатратФакт;
	ИначеЕсли ЗначениеЗаполнено(Задача.Проект) Тогда 
		Возврат Задача.ПроектнаяЗадача.ЕдиницаТрудозатратЗадач;
	Иначе
		Возврат Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	КонецЕсли;	
	
КонецФункции	

// Возвращает график работы проектной задачи
Функция ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача) Экспорт 
	
	ГрафикЗадачи = ПроектнаяЗадача.ГрафикРаботы;
	Если ЗначениеЗаполнено(ГрафикЗадачи) Тогда 
		Возврат ГрафикЗадачи;
	КонецЕсли;
		
	ГрафикПроекта = ПолучитьГрафикРаботыПроекта(ПроектнаяЗадача.Владелец);
	Если ЗначениеЗаполнено(ГрафикПроекта) Тогда 
		Возврат ГрафикПроекта;
	КонецЕсли;	
		
	Возврат Константы.ОсновнойГрафикРаботы.Получить();
	
КонецФункции

// Возвращает график работы проекта
Функция ПолучитьГрафикРаботыПроекта(Проект) Экспорт 
	
	ГрафикРаботы = Проект.ГрафикРаботы;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда 
		Возврат ГрафикРаботы;
	КонецЕсли;
	
	Возврат Константы.ОсновнойГрафикРаботы.Получить();
	
КонецФункции	

// Рассчитывает окончание проектной задачи по дате начала и длительности
Функция РассчитатьОкончаниеПериода(Знач ПроектнаяЗадача, ДатаНачала, Длительность, ЕдиницаДлительности) Экспорт 
	
	Если Не ЗначениеЗаполнено(ЕдиницаДлительности) Тогда 
		ЕдиницаДлительности = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ЕдиницаДлительностиЗадач");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Длительность) Тогда 
		Возврат ДатаНачала;
	КонецЕсли;	
	
	ГрафикРаботы = ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
	ДлительностьЧас = ПересчитатьДлительность(Длительность, ЕдиницаДлительности, Перечисления.ЕдиницыДлительности.Час, ГрафикРаботы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		ДатаОкончания = ГрафикиРаботы.ПолучитьДатуОкончанияСек(ГрафикРаботы, ДатаНачала, ДлительностьЧас * 3600); 
	Иначе
		ДатаОкончания = ДатаНачала + ДлительностьЧас * 3600;
	КонецЕсли;	
	
	Возврат ДатаОкончания;
	
КонецФункции

// Рассчитывает длительность проектной задачи по дате начала и дате окончания
Функция РассчитатьДлительностьПериода(Знач ПроектнаяЗадача, ДатаНачала, ДатаОкончания, ЕдиницаДлительности) Экспорт 

	Если Не ЗначениеЗаполнено(ЕдиницаДлительности) Тогда 
		ЕдиницаДлительности = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ЕдиницаДлительностиЗадач");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Возврат 0;
	КонецЕсли;
	
	Если ДатаНачала > ДатаОкончания Тогда 
		Возврат 0;
	КонецЕсли;	
	
	ГрафикРаботы = ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		ДлительностьСек = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(ГрафикРаботы, ДатаНачала, ДатаОкончания); 
	Иначе
		ДлительностьСек = ДатаОкончания - ДатаНачала;
	КонецЕсли;
	
	ДлительностьЧас = ДлительностьСек / 3600;
	
	Длительность = ПересчитатьДлительность(ДлительностьЧас, Перечисления.ЕдиницыДлительности.Час, ЕдиницаДлительности, ГрафикРаботы);
	
	Возврат Длительность;
	
КонецФункции	

// Рассчитывает начало проектной задачи по дате окончания и длительности
Функция РассчитатьНачалоПериода(Знач ПроектнаяЗадача, ДатаОкончания, Длительность, ЕдиницаДлительности) Экспорт 
	
	Если Не ЗначениеЗаполнено(ЕдиницаДлительности) Тогда 
		ЕдиницаДлительности = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача, "ЕдиницаДлительностиЗадач");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Длительность) Тогда 
		Возврат ДатаОкончания;
	КонецЕсли;	
	
	ГрафикРаботы = ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
	ДлительностьЧас = ПересчитатьДлительность(Длительность, ЕдиницаДлительности, Перечисления.ЕдиницыДлительности.Час, ГрафикРаботы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		ДатаНачала = ГрафикиРаботы.ПолучитьДатуНачалаПериодаСек(ГрафикРаботы, ДатаОкончания, ДлительностьЧас * 3600); 
	Иначе
		ДатаНачала = ДатаОкончания - ДлительностьЧас * 3600;
	КонецЕсли;	
	
	Возврат ДатаНачала;
	
КонецФункции	

// Возвращает текущий план трудозатрат, вычисленный из проектных задач
Функция ВычислитьПлановыеТрудозатратыПроекта(Проект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПроектныеЗадачиИсполнители.ТекущийПланТрудозатраты ЕСТЬ NULL 
		|			ТОГДА ПроектныеЗадачи.ТекущийПланТрудозатраты
		|		ИНАЧЕ ПроектныеЗадачиИсполнители.ТекущийПланТрудозатраты
		|	КОНЕЦ КАК ТекущийПланТрудозатраты,
		|	ПроектныеЗадачи.ТекущийПланЕдиницаТрудозатрат,
		|	ВЫБОР
		|		КОГДА ПроектныеЗадачи.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|			ТОГДА ПроектныеЗадачи.ГрафикРаботы
		|		ИНАЧЕ ПроектныеЗадачи.Владелец.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(Исполнители.ТекущийПланТрудозатраты) КАК ТекущийПланТрудозатраты,
		|			Исполнители.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ПроектныеЗадачи.Исполнители КАК Исполнители
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Исполнители.Ссылка) КАК ПроектныеЗадачиИсполнители
		|		ПО (ПроектныеЗадачиИсполнители.Ссылка = ПроектныеЗадачи.Ссылка)
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И (НЕ ПроектныеЗадачи.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Проект", Проект); 
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
		
	ТекущийПланТрудозатраты = 0;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийПланТрудозатраты = ТекущийПланТрудозатраты +
		ПересчитатьДлительность(Выборка.ТекущийПланТрудозатраты, 
			Выборка.ТекущийПланЕдиницаТрудозатрат, 
			Проект.ЕдиницаТрудозатратЗадач, 
			Выборка.ГрафикРаботы);
	КонецЦикла;	
	
	Возврат ТекущийПланТрудозатраты;
	
КонецФункции	

// Возвращает текущий план окончания проекта, вычисленный из проектных задач
Функция ВычислитьТекущийПланОкончанияПроекта(Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(СрокиПроектныхЗадач.ТекущийПланОкончание), ДАТАВРЕМЯ(1, 1, 1)) КАК ТекущийПланОкончание
		|ИЗ
		|	РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
		|ГДЕ
		|	СрокиПроектныхЗадач.ПроектнаяЗадача.Владелец = &Проект
		|	И НЕ СрокиПроектныхЗадач.ПроектнаяЗадача.ПометкаУдаления";
			
	Запрос.УстановитьПараметр("Проект", Проект); 
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат '00010101';
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ТекущийПланОкончание;
	
КонецФункции

// Рассчитывает план всего проекта
Процедура РассчитатьПланВсегоПроекта(Проект) Экспорт
	
	Если Проект.РедактируетсяВСтороннейСистеме Тогда
		Возврат;
	КонецЕсли;
	
	Если Проект.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыОкончанияПроекта Тогда 
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
		|		ПО ПроектныеЗадачи.Ссылка = ПроектныеЗадачиПредшественники.Предшественник
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|	И НЕ ПроектныеЗадачи.СуммарнаяЗадача
		|	И ПроектныеЗадачиПредшественники.Ссылка ЕСТЬ NULL ";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
		|		ПО ПроектныеЗадачи.Ссылка = ПроектныеЗадачиПредшественники.Ссылка
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|	И НЕ ПроектныеЗадачи.СуммарнаяЗадача
		|	И ПроектныеЗадачиПредшественники.Ссылка ЕСТЬ NULL ";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);		
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РассчитатьПланПроекта(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает план проекта, начиная с переданной задачи
Процедура РассчитатьПланПроекта(ПроектнаяЗадача, МассивИзмененныхЗадач = Неопределено) Экспорт 
	
	ДанныеПроектнойЗадачи = ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	
	Если ДанныеПроектнойЗадачи.РедактируетсяВСтороннейСистеме Тогда
		Возврат;
	КонецЕсли;

	Если МассивИзмененныхЗадач = Неопределено Тогда 
		МассивИзмененныхЗадач = Новый Массив;
	КонецЕсли;	
	
	ПересчитатьПланПоЗадаче = Истина;
	
	РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);	
		
КонецПроцедуры

// Рекурсивная процедура расчета плана проекта 
Процедура РассчитатьПланПроектаПоЗадаче(ПроектнаяЗадача, Знач ПересчитатьПланПоЗадаче = Ложь, МассивИзмененныхЗадач = Неопределено) Экспорт 
	
	Если ТипЗнч(ПроектнаяЗадача) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		ДанныеПроектнойЗадачи = ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	Иначе	
		ДанныеПроектнойЗадачи = ПроектнаяЗадача;
	КонецЕсли;	
	
	Если ДанныеПроектнойЗадачи.РедактируетсяВСтороннейСистеме Тогда
		Возврат;
	КонецЕсли;
	
	Если ПересчитатьПланПоЗадаче Тогда 
		Если МассивИзмененныхЗадач <> Неопределено Тогда 
			МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
		КонецЕсли;
	КонецЕсли;	
	
    // установка даты начала
  	Если ДанныеПроектнойЗадачи.СуммарнаяЗадача Тогда 
		
		ПодчиненныеЗадачи = ПолучитьПодчиненныеЗадачи(ДанныеПроектнойЗадачи.Ссылка);
		
		Если ПересчитатьПланПоЗадаче Тогда 
			Для Каждого Строка Из ПодчиненныеЗадачи Цикл
				РассчитатьПланПроектаПоЗадаче(Строка.Ссылка,,МассивИзмененныхЗадач);
			КонецЦикла;	
		КонецЕсли;	
		
		// фактические даты
		ДатаНачала = '99990101';
		ДатаОкончания = '00010101';
		
		Для Каждого Строка Из ПодчиненныеЗадачи Цикл
			Если ЗначениеЗаполнено(Строка.НачалоФакт) И Строка.НачалоФакт < ДатаНачала Тогда 
				ДатаНачала = Строка.НачалоФакт;
			КонецЕсли;	
		КонецЦикла;	
		Если ДатаНачала = '99990101' Тогда 
			ДатаНачала = '00010101'
		КонецЕсли;	
		
		Для Каждого Строка из ПодчиненныеЗадачи Цикл	
			Если Не ЗначениеЗаполнено(Строка.ОкончаниеФакт) Тогда 
				ДатаОкончания = '00010101';
				Прервать;
			ИначеЕсли Строка.ОкончаниеФакт > ДатаОкончания Тогда 	
				ДатаОкончания = Строка.ОкончаниеФакт;
			КонецЕсли;	
		КонецЦикла;
		
		Если (ДатаНачала <> ДанныеПроектнойЗадачи.НачалоФакт Или ДатаОкончания <> ДанныеПроектнойЗадачи.ОкончаниеФакт) Тогда 
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("НачалоФакт", ДатаНачала);
			СтруктураДанных.Вставить("ОкончаниеФакт", ДатаОкончания);
			СтруктураДанных.Вставить("ДлительностьФакт", 
				РаботаСПроектами.РассчитатьДлительностьПериода(ДанныеПроектнойЗадачи, 
				ДатаНачала, 
				ДатаОкончания, 
				ДанныеПроектнойЗадачи.ЕдиницаДлительностиФакт));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
			
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;	
			
		КонецЕсли;	
			
		// плановые даты
		ДатаНачала = '99990101';
		ДатаОкончания = '00010101';
		
		Для Каждого Строка из ПодчиненныеЗадачи Цикл
			Если Строка.ТекущийПланНачало < ДатаНачала Тогда 
				ДатаНачала = Строка.ТекущийПланНачало;
			КонецЕсли;	
			
			Если Строка.ТекущийПланОкончание > ДатаОкончания Тогда 
				ДатаОкончания = Строка.ТекущийПланОкончание;
			КонецЕсли;
		КонецЦикла;	
		
		Если ДатаНачала = '99990101' Тогда 
			ДатаНачала = '00010101'
		КонецЕсли;	

		Если (ДатаНачала <> ДанныеПроектнойЗадачи.ТекущийПланНачало Или ДатаОкончания <> ДанныеПроектнойЗадачи.ТекущийПланОкончание) Тогда 
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТекущийПланНачало", ДатаНачала);
			СтруктураДанных.Вставить("ТекущийПланОкончание", ДатаОкончания);
			СтруктураДанных.Вставить("ТекущийПланДлительность", 
				РаботаСПроектами.РассчитатьДлительностьПериода(ДанныеПроектнойЗадачи, 
				ДатаНачала, 
				ДатаОкончания, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
			
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;
			
			ПересчитатьПланПоЗадаче = Истина;
			
		КонецЕсли;	
		
		Если ПересчитатьПланПоЗадаче Тогда
		
			Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
				РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи.Родитель,,МассивИзмененныхЗадач);
			КонецЕсли;

		КонецЕсли;		
			
	Иначе
		
		Если ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало Тогда 
			
			ОбработатьЗадачуФиксированноеНачало(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеОкончание Тогда 	
			
			ОбработатьЗадачуФиксированноеОкончание(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше Тогда 
			
			ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже Тогда 
			
			ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеРанее Тогда 
			
			ОбработатьЗадачуНачалоНеРанее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеПозднее Тогда 
			
			ОбработатьЗадачуНачалоНеПозднее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеРанее Тогда 
			
			ОбработатьЗадачуОкончаниеНеРанее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		ИначеЕсли ДанныеПроектнойЗадачи.ТипОграничения = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее Тогда 	
			
			ОбработатьЗадачуОкончаниеНеПозднее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач);
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, НачалоНеРанее = '00010101', НачалоНеПозднее = '99990101')
	
	ВсеПредшественники = ПолучитьВсехПредшественников(ДанныеПроектнойЗадачи.Ссылка);
	
	ТекущийПланНачало = НачалоНеРанее;
	
	Для Каждого Строка Из ВсеПредшественники Цикл
		
		Если Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда 
			
			НовыйПланНачало = Строка.ТекущийПланОкончание;
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланНачало = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
					НовыйПланНачало, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;		
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") И ДанныеПроектнойЗадачи.ТекущийПланДлительность <> 0 Тогда 
				
				ГрафикРаботы = ПолучитьГрафикРаботыПроектнойЗадачи(ДанныеПроектнойЗадачи);
				врНовыйПланНачало = ГрафикиРаботы.ПолучитьДатуОкончанияСек(ГрафикРаботы, НовыйПланНачало, 1); 
				Если врНовыйПланНачало - 1 <> НовыйПланНачало Тогда 
					НовыйПланНачало = врНовыйПланНачало - 1;
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда 	
			
			НовыйПланНачало = Строка.ТекущийПланНачало;
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланНачало = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
					НовыйПланНачало, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда 
			
			НовыйПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
				Строка.ТекущийПланОкончание, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
			
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланНачало, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;	
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда 
			
			НовыйПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
				Строка.ТекущийПланНачало, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
			
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланНачало, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НовыйПланНачало) Тогда 
			Если НовыйПланНачало > ТекущийПланНачало Тогда 
				ТекущийПланНачало = НовыйПланНачало;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийПланНачало > НачалоНеПозднее Тогда 
		ТекущийПланНачало = НачалоНеПозднее;
	КонецЕсли;	
	
	Если (ТекущийПланНачало <> ДанныеПроектнойЗадачи.ТекущийПланНачало) Тогда 
		
		Если ДанныеПроектнойЗадачи.АвтоматическиРассчитыватьПланПроекта Тогда 
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТекущийПланНачало", ТекущийПланНачало);
			СтруктураДанных.Вставить("ТекущийПланОкончание", 
				РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
				ТекущийПланНачало, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
			
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;
		
		КонецЕсли;
		
		ПересчитатьПланПоЗадаче = Истина;
		
	КонецЕсли;	
	
	Если ПересчитатьПланПоЗадаче Тогда 
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи.Родитель, , МассивИзмененныхЗадач);
		КонецЕсли;	
		
		Последователи = ПолучитьВсехПоследователей(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Последователи Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Ссылка, , МассивИзмененныхЗадач);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, ОкончаниеНеРанее = '00010101', ОкончаниеНеПозднее = '99990101')
	
	ВсеПоследователи = ПолучитьВсехПоследователей(ДанныеПроектнойЗадачи.Ссылка);
	
	ТекущийПланОкончание = ОкончаниеНеПозднее;
	
	Для Каждого Строка Из ВсеПоследователи Цикл
		
		Если Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда 
			
			НовыйПланОкончание = Строка.ТекущийПланНачало;
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланОкончание = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланОкончание, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;		
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") И ДанныеПроектнойЗадачи.ТекущийПланДлительность <> 0 Тогда 
				
				ГрафикРаботы = ПолучитьГрафикРаботыПроектнойЗадачи(ДанныеПроектнойЗадачи);
				врНовыйПланОкончание = ГрафикиРаботы.ПолучитьДатуНачалаПериодаСек(ГрафикРаботы, НовыйПланОкончание, 1); 
				Если врНовыйПланОкончание + 1 <> НовыйПланОкончание Тогда 
					НовыйПланОкончание = врНовыйПланОкончание + 1;
				КонецЕсли;	
				
			КонецЕсли;
			
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда 	
			
			НовыйПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
				Строка.ТекущийПланНачало,
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
			
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланОкончание = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланОкончание, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда 
			
			НовыйПланОкончание = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
			
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланОкончание = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланОкончание, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;	
			
		ИначеЕсли Строка.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда 
			
			НовыйПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
				Строка.ТекущийПланОкончание, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
			
			Если Строка.Задержка <> 0 Тогда 
				НовыйПланОкончание = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
					НовыйПланОкончание, 
					Строка.Задержка, 
					Строка.ЕдиницаЗадержки);
			КонецЕсли;
			
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НовыйПланОкончание) Тогда 
			Если НовыйПланОкончание < ТекущийПланОкончание Тогда 
				ТекущийПланОкончание = НовыйПланОкончание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийПланОкончание < ОкончаниеНеРанее Тогда 
		ТекущийПланОкончание = ОкончаниеНеРанее;
	КонецЕсли;
	
	Если (ТекущийПланОкончание <> ДанныеПроектнойЗадачи.ТекущийПланОкончание) Тогда 
		
		Если ДанныеПроектнойЗадачи.АвтоматическиРассчитыватьПланПроекта Тогда 
		
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТекущийПланОкончание", ТекущийПланОкончание);
			СтруктураДанных.Вставить("ТекущийПланНачало", 
				РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
				ТекущийПланОкончание, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
			
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;
		
		КонецЕсли;
		
		ПересчитатьПланПоЗадаче = Истина;
		
	КонецЕсли;	
	
	Если ПересчитатьПланПоЗадаче Тогда 
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи.Родитель, , МассивИзмененныхЗадач);
		КонецЕсли;	
		
		Предшественники = ПолучитьВсехПредшественников(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Предшественники Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Предшественник, , МассивИзмененныхЗадач);
		КонецЦикла;
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуФиксированноеНачало(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	ТекущийПланНачало = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если (ТекущийПланНачало <> ДанныеПроектнойЗадачи.ТекущийПланНачало) Тогда 
		
		Если ДанныеПроектнойЗадачи.АвтоматическиРассчитыватьПланПроекта Тогда 
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТекущийПланНачало", ТекущийПланНачало);
			СтруктураДанных.Вставить("ТекущийПланОкончание", 
				РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
				ТекущийПланНачало, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
		
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;
		
		КонецЕсли;
		
		ПересчитатьПланПоЗадаче = Истина;
		
	КонецЕсли;	
	
	Если ПересчитатьПланПоЗадаче Тогда 
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи.Родитель,, МассивИзмененныхЗадач);
		КонецЕсли;	
		
		Предшественники = ПолучитьВсехПредшественников(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Предшественники Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Предшественник,, МассивИзмененныхЗадач);
		КонецЦикла;
		
		Последователи = ПолучитьВсехПоследователей(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Последователи Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Ссылка,, МассивИзмененныхЗадач);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуФиксированноеОкончание(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	ТекущийПланОкончание = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если (ТекущийПланОкончание <> ДанныеПроектнойЗадачи.ТекущийПланОкончание) Тогда 
		
		Если ДанныеПроектнойЗадачи.АвтоматическиРассчитыватьПланПроекта Тогда 
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ТекущийПланОкончание", ТекущийПланОкончание);
			СтруктураДанных.Вставить("ТекущийПланНачало", 
				РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
				ТекущийПланОкончание, 
				ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
				ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности));
			
			ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
			
			Если МассивИзмененныхЗадач <> Неопределено Тогда 
				МассивИзмененныхЗадач.Добавить(ДанныеПроектнойЗадачи.Ссылка);
			КонецЕсли;
		
		КонецЕсли;
		
		ПересчитатьПланПоЗадаче = Истина;
		
	КонецЕсли;	
	
	Если ПересчитатьПланПоЗадаче Тогда 
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроектаПоЗадаче(ДанныеПроектнойЗадачи.Родитель, , МассивИзмененныхЗадач);
		КонецЕсли;	
		
		Предшественники = ПолучитьВсехПредшественников(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Предшественники Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Предшественник, , МассивИзмененныхЗадач);
		КонецЦикла;
		
		Последователи = ПолучитьВсехПоследователей(ДанныеПроектнойЗадачи.Ссылка, Ложь);
		Для Каждого Строка Из Последователи Цикл
			РассчитатьПланПроектаПоЗадаче(Строка.Ссылка, , МассивИзмененныхЗадач);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуНачалоНеРанее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	НачалоНеРанее = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если ДанныеПроектнойЗадачи.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
		ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, НачалоНеРанее);
	Иначе
		ОкончаниеНеРанее = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
			НачалоНеРанее, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
		
		ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, ОкончаниеНеРанее);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуОкончаниеНеРанее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	ОкончаниеНеРанее = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если ДанныеПроектнойЗадачи.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
		
		НачалоНеРанее = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
			ОкончаниеНеРанее, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
		
		ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, НачалоНеРанее);
	Иначе
		
		ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, ОкончаниеНеРанее);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьЗадачуНачалоНеПозднее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	НачалоНеПозднее = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если ДанныеПроектнойЗадачи.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
		ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, , НачалоНеПозднее);
	Иначе
		ОкончаниеНеПозднее = РаботаСПроектами.РассчитатьОкончаниеПериода(ДанныеПроектнойЗадачи, 
			НачалоНеПозднее, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
		
		ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, , ОкончаниеНеПозднее);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработатьЗадачуОкончаниеНеПозднее(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач)
	
	ОкончаниеНеПозднее = ДанныеПроектнойЗадачи.ДатаОграничения;
	
	Если ДанныеПроектнойЗадачи.СпособПланирования = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта Тогда 
		НачалоНеПозднее = РаботаСПроектами.РассчитатьНачалоПериода(ДанныеПроектнойЗадачи, 
			ОкончаниеНеПозднее, 
			ДанныеПроектнойЗадачи.ТекущийПланДлительность, 
			ДанныеПроектнойЗадачи.ТекущийПланЕдиницаДлительности);
		
		ОбработатьЗадачуКакМожноРаньше(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, , НачалоНеПозднее);
	Иначе
		ОбработатьЗадачуКакМожноПозже(ДанныеПроектнойЗадачи, ПересчитатьПланПоЗадаче, МассивИзмененныхЗадач, , ОкончаниеНеПозднее);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает Истина, если переданная задача является суммарной
Функция ЭтоСуммарнаяЗадача(ПроектнаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Родитель = &ПроектнаяЗадача
	|	И Не ПроектныеЗадачи.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции	

// Возвращает подчиненные переданной задачи без учета суммарных задач
Функция ПолучитьПодчиненныеЗадачи(ПроектнаяЗадача) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектныеЗадачи.Ссылка,
	|	ПроектныеЗадачи.ТекущийПланТрудозатраты,
	|	ПроектныеЗадачи.ТекущийПланЕдиницаТрудозатрат,
	|	ПроектныеЗадачи.ЕдиницаТрудозатратФакт,
	|	СрокиПроектныхЗадач.ТекущийПланНачало,
	|	СрокиПроектныхЗадач.ТекущийПланОкончание,
	|	СрокиПроектныхЗадач.ТекущийПланДлительность,
	|	СрокиПроектныхЗадач.ТекущийПланЕдиницаДлительности,
	|	СрокиПроектныхЗадач.НачалоФакт,
	|	СрокиПроектныхЗадач.ОкончаниеФакт,
	|	СрокиПроектныхЗадач.ДлительностьФакт,
	|	СрокиПроектныхЗадач.ЕдиницаДлительностиФакт
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачи.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачи.Родитель = &ПроектнаяЗадача
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции	

// Возвращает все подчиненные переданной задачи с учетом суммарных задач
Функция ПолучитьВсеПодчиненныеЗадачи(ПроектнаяЗадача) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектныеЗадачи.Ссылка,
	|	ПроектныеЗадачи.ТекущийПланТрудозатраты,
	|	ПроектныеЗадачи.ТекущийПланЕдиницаТрудозатрат,
	|	ПроектныеЗадачи.ЕдиницаТрудозатратФакт,
	|	ПроектныеЗадачи.СуммарнаяЗадача,
	|	СрокиПроектныхЗадач.ТекущийПланНачало,
	|	СрокиПроектныхЗадач.ТекущийПланОкончание,
	|	СрокиПроектныхЗадач.ТекущийПланДлительность,
	|	СрокиПроектныхЗадач.ТекущийПланЕдиницаДлительности,
	|	СрокиПроектныхЗадач.НачалоФакт,
	|	СрокиПроектныхЗадач.ОкончаниеФакт,
	|	СрокиПроектныхЗадач.ДлительностьФакт,
	|	СрокиПроектныхЗадач.ЕдиницаДлительностиФакт
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачи.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачи.Ссылка В ИЕРАРХИИ(&ПроектнаяЗадача)
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

// Возвращает всех предшественников переданной задачи с учетом суммарных задач
Функция ПолучитьВсехПредшественников(ПроектнаяЗадача, ВключатьНачалоПроекта = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗадач = Новый СписокЗначений;
	
	ТекРодитель = ПроектнаяЗадача;
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		СписокЗадач.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектныеЗадачиПредшественники.Ссылка КАК Ссылка,
	|	ПроектныеЗадачиПредшественники.ТипЗависимости,
	|	ПроектныеЗадачиПредшественники.Задержка,
	|	ПроектныеЗадачиПредшественники.ЕдиницаЗадержки,
	|	ПроектныеЗадачиПредшественники.Предшественник КАК Предшественник,
	|	ПроектныеЗадачиПредшественники.Предшественник.СуммарнаяЗадача КАК СуммарнаяЗадача,
	|	СрокиПроектныхЗадач.ТекущийПланНачало КАК ТекущийПланНачало,
	|	СрокиПроектныхЗадач.ТекущийПланОкончание КАК ТекущийПланОкончание
	|ИЗ
	|	Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачиПредшественники.Предшественник = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачиПредшественники.Ссылка В(&СписокЗадач)
	|	И НЕ ПроектныеЗадачиПредшественники.Предшественник.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВсеПредшественники = Результат.Скопировать();
	ВсеПредшественники.Очистить();
	
	Для Каждого Строка Из Результат Цикл
		
		Если Строка.СуммарнаяЗадача Тогда 
			ПодчиненныеЗадачи = ПолучитьВсеПодчиненныеЗадачи(Строка.Предшественник);
			Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачи Цикл
				Если ПодчиненнаяЗадача.СуммарнаяЗадача Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ВсеПредшественники.Добавить();
				НоваяСтрока.Предшественник = ПодчиненнаяЗадача.Ссылка;
				НоваяСтрока.СуммарнаяЗадача = ПодчиненнаяЗадача.СуммарнаяЗадача;
				НоваяСтрока.ТекущийПланНачало = ПодчиненнаяЗадача.ТекущийПланНачало;
				НоваяСтрока.ТекущийПланОкончание = ПодчиненнаяЗадача.ТекущийПланОкончание;
				НоваяСтрока.Ссылка = Строка.Ссылка;
				НоваяСтрока.ТипЗависимости = Строка.ТипЗависимости;
				НоваяСтрока.Задержка = Строка.Задержка;
				НоваяСтрока.ЕдиницаЗадержки = Строка.ЕдиницаЗадержки;
			КонецЦикла;	
		Иначе	
			НоваяСтрока = ВсеПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ВключатьНачалоПроекта Тогда 
		НачалоПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ТекущийПланНачало");
		Для Каждого Строка Из СписокЗадач Цикл
			Если Результат.Найти(Строка.Значение, "Ссылка") = Неопределено Тогда 
				НоваяСтрока = ВсеПредшественники.Добавить();
				НоваяСтрока.Ссылка = Строка.Значение;
				НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
				НоваяСтрока.ТекущийПланНачало = НачалоПроекта;
				НоваяСтрока.ТекущийПланОкончание = НачалоПроекта;
				НоваяСтрока.Задержка = 0;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат ВсеПредшественники;
	
КонецФункции	

// Возвращает всех предшественников переданной задачи с учетом суммарных задач
Функция ПолучитьВсехПредшественниковСУчетомПодчиненных(ПроектнаяЗадача, ВключатьНачалоПроекта = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Ссылка В ИЕРАРХИИ(&ПроектнаяЗадача)
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	СписокЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектныеЗадачиПредшественники.Ссылка КАК Ссылка,
	|	ПроектныеЗадачиПредшественники.Предшественник КАК Предшественник,
	|	ПроектныеЗадачиПредшественники.ТипЗависимости,
	|	ПроектныеЗадачиПредшественники.Задержка,
	|	ПроектныеЗадачиПредшественники.ЕдиницаЗадержки,
	|	СрокиПроектныхЗадач.ТекущийПланНачало КАК ТекущийПланНачало,
	|	СрокиПроектныхЗадач.ТекущийПланОкончание КАК ТекущийПланОкончание
	|ИЗ
	|	Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачиПредшественники.Предшественник = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачиПредшественники.Ссылка В(&СписокЗадач)
	|	И НЕ ПроектныеЗадачиПредшественники.Предшественник.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ВключатьНачалоПроекта Тогда 
		НачалоПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ТекущийПланНачало");
		Для Каждого Строка Из СписокЗадач Цикл
			Если Результат.Найти(Строка.Значение, "Ссылка") = Неопределено Тогда 
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Ссылка = Строка.Значение;
				НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
				НоваяСтрока.ТекущийПланНачало = НачалоПроекта;
				НоваяСтрока.ТекущийПланОкончание = НачалоПроекта;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Возвращает последователей переданной задачи без учета суммарных задач
Функция ПолучитьПоследователей(ПроектнаяЗадача, ВключатьОкончаниеПроекта = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// перемещение последующих задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроектныеЗадачиПредшественники.Ссылка,
		|	ПроектныеЗадачиПредшественники.ТипЗависимости,
		|	ПроектныеЗадачиПредшественники.Задержка,
		|	ПроектныеЗадачиПредшественники.ЕдиницаЗадержки,
		|	СрокиПроектныхЗадач.ТекущийПланНачало КАК ТекущийПланНачало,
		|	СрокиПроектныхЗадач.ТекущийПланОкончание КАК ТекущийПланОкончание
		|ИЗ
		|	Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
		|		ПО ПроектныеЗадачиПредшественники.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
		|ГДЕ
		|	ПроектныеЗадачиПредшественники.Предшественник = &Предшественник
		|	И НЕ ПроектныеЗадачиПредшественники.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Предшественник", ПроектнаяЗадача);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ВсеПоследователи = Результат.Скопировать();
	
	Если ВключатьОкончаниеПроекта Тогда 
		ОкончаниеПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ТекущийПланОкончание");
		Если Результат.Количество() = 0 Тогда 
			НоваяСтрока = ВсеПоследователи.Добавить();
			НоваяСтрока.Ссылка = ПроектнаяЗадача;
			НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			НоваяСтрока.Задержка = 0;
			НоваяСтрока.ТекущийПланНачало = ОкончаниеПроекта;
			НоваяСтрока.ТекущийПланОкончание = ОкончаниеПроекта;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ВсеПоследователи;
	
КонецФункции	

// Возвращает всех последователей переданной задачи с учетом суммарных задач
Функция ПолучитьВсехПоследователей(ПроектнаяЗадача, ВключатьОкончаниеПроекта = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗадач = Новый СписокЗначений;
	
	ТекРодитель = ПроектнаяЗадача;
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		СписокЗадач.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
	
	// перемещение последующих задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроектныеЗадачиПредшественники.Ссылка,
		|	ПроектныеЗадачиПредшественники.Ссылка.СуммарнаяЗадача КАК СуммарнаяЗадача,
		|	СрокиПроектныхЗадач.ТекущийПланНачало КАК ТекущийПланНачало,
		|	СрокиПроектныхЗадач.ТекущийПланОкончание КАК ТекущийПланОкончание,
		|	ПроектныеЗадачиПредшественники.ТипЗависимости,
		|	ПроектныеЗадачиПредшественники.Задержка,
		|	ПроектныеЗадачиПредшественники.ЕдиницаЗадержки
		|ИЗ
		|	Справочник.ПроектныеЗадачи.Предшественники КАК ПроектныеЗадачиПредшественники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
		|		ПО ПроектныеЗадачиПредшественники.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
		|ГДЕ
		|	ПроектныеЗадачиПредшественники.Предшественник В(&СписокЗадач)
		|	И НЕ ПроектныеЗадачиПредшественники.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВсеПоследователи = Результат.Скопировать();
	ВсеПоследователи.Очистить();
	
	Для Каждого Строка Из Результат Цикл
		
		Если Строка.СуммарнаяЗадача Тогда 
			ПодчиненныеЗадачи = ПолучитьВсеПодчиненныеЗадачи(Строка.Ссылка);
			Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачи Цикл
				Если ПодчиненнаяЗадача.СуммарнаяЗадача Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ВсеПоследователи.Добавить();
				НоваяСтрока.Ссылка = ПодчиненнаяЗадача.Ссылка;
				НоваяСтрока.СуммарнаяЗадача = ПодчиненнаяЗадача.СуммарнаяЗадача;
				НоваяСтрока.ТекущийПланНачало = ПодчиненнаяЗадача.ТекущийПланНачало;
				НоваяСтрока.ТекущийПланОкончание = ПодчиненнаяЗадача.ТекущийПланОкончание;
				НоваяСтрока.ТипЗависимости = Строка.ТипЗависимости;
				НоваяСтрока.Задержка = Строка.Задержка;
				НоваяСтрока.ЕдиницаЗадержки = Строка.ЕдиницаЗадержки;
			КонецЦикла;	
		Иначе	
			НоваяСтрока = ВсеПоследователи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ВключатьОкончаниеПроекта Тогда 
		
		ОкончаниеПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектнаяЗадача.Владелец, "ТекущийПланОкончание");
		Если ВсеПоследователи.Количество() = 0 Тогда 
			НоваяСтрока = ВсеПоследователи.Добавить();
			НоваяСтрока.Ссылка = ПроектнаяЗадача;
			НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			НоваяСтрока.Задержка = 0;
			НоваяСтрока.ТекущийПланНачало = ОкончаниеПроекта;
			НоваяСтрока.ТекущийПланОкончание = ОкончаниеПроекта;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ВсеПоследователи;
	
КонецФункции

// Выдает исключение, если по проектной задаче указаны некорректные предшественники
Процедура ПроверитьПредшественников(ПроектнаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Формируем родительские задачи
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Ссылка = &ПроектнаяЗадача
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПроектныеЗадачиРодители = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) И ПроектныеЗадачиРодители.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			ПроектныеЗадачиРодители.Добавить(Выборка.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	
	// Формируем подчиненные задачи
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Ссылка В ИЕРАРХИИ(&ПроектнаяЗадача)
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ПроектныеЗадачиПодчиненные = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) И ПроектныеЗадачиПодчиненные.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			ПроектныеЗадачиПодчиненные.Добавить(Выборка.Ссылка);	
		КонецЕсли;
	КонецЦикла;

	// Проверка предшественников
	Для Каждого СтрокаТаблЧасти Из ПроектнаяЗадача.Предшественники Цикл
		Если СтрокаТаблЧасти.Предшественник = ПроектнаяЗадача Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проектная задача не может быть предшественником самой себя'"), ПроектнаяЗадача));	
		КонецЕсли;
		Если ПроектныеЗадачиРодители.НайтиПоЗначению(СтрокаТаблЧасти.Предшественник) <> Неопределено Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подчиненная задача %1 не может иметь в качестве предшественника одну из родительских задач'"), ПроектнаяЗадача));	
		КонецЕсли;
		Если ПроектныеЗадачиПодчиненные.НайтиПоЗначению(СтрокаТаблЧасти.Предшественник) <> Неопределено Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Суммарная задача %1 не может иметь в качестве предшественника одну из подчиненных задач'"), ПроектнаяЗадача));	
		КонецЕсли; 
	КонецЦикла;
	
	ЗадачиОбработанные = Новый Массив;
	ЗадачиВОбработке = Новый Массив;
	
	ПроверитьПредшественниковНаЗацикливание(ПроектнаяЗадача, ЗадачиВОбработке, ЗадачиОбработанные);
	
	Для Каждого Строка Из ПроектныеЗадачиПодчиненные Цикл
		ЗадачиОбработанные = Новый Массив;
		ЗадачиВОбработке = Новый Массив;
	
		ПроверитьПредшественниковНаЗацикливание(Строка.Значение, ЗадачиВОбработке, ЗадачиОбработанные);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьПредшественниковНаЗацикливание(ПроектнаяЗадача, ЗадачиВОбработке, ЗадачиОбработанные) 
	
	Если ЗадачиОбработанные.Найти(ПроектнаяЗадача) <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗадачиВОбработке.Найти(ПроектнаяЗадача) <> Неопределено Тогда 
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружено зацикливание предшественников на задаче ""%1"".'"),
			Строка(ПроектнаяЗадача));
		
	КонецЕсли;
	
	ЗадачиВОбработке.Добавить(ПроектнаяЗадача);
	
	Предшественники = ПолучитьВсехПредшественниковСУчетомПодчиненных(ПроектнаяЗадача, Ложь);
	Для Каждого Строка Из Предшественники Цикл
		ПроверитьПредшественниковНаЗацикливание(Строка.Предшественник, ЗадачиВОбработке, ЗадачиОбработанные);
	КонецЦикла;	
		
	ЗадачиОбработанные.Добавить(ПроектнаяЗадача);
	
	ЗадачиВОбработке.Удалить(ЗадачиВОбработке.Найти(ПроектнаяЗадача));
	
КонецПроцедуры	

// Возвращает массив основных бизнес-процессов по проектной задачи
Функция ПолучитьОсновныеБизнесПроцессы(ПроектнаяЗадача, ТолькоНезавершенные = Ложь) Экспорт 
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Ссылка
	|ИЗ
	|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
	|ГДЕ
	|	ДанныеБизнесПроцессов.ПроектнаяЗадача = &ПроектнаяЗадача
	|	И НЕ ДанныеБизнесПроцессов.ПометкаУдаления";
	Если ТолькоНезавершенные Тогда 
		Запрос.Текст = Запрос.Текст + " И Не ДанныеБизнесПроцессов.Завершен ";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

// Отмечает начало выполнения проектной задачи при завершении бизнес-процесса
Процедура ОтметитьНачалоВыполненияПроектнойЗадачи(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат;
	КонецЕсли;	
		
	ПроектнаяЗадача = БизнесПроцесс.ПроектнаяЗадача;
	Если Не ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		Возврат;
	КонецЕсли;	
	
	ДанныеПроектнойЗадачи = ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	Если ДанныеПроектнойЗадачи.СуммарнаяЗадача Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДанныеПроектнойЗадачи.НачалоФакт) Тогда 
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("НачалоФакт", БизнесПроцесс.ДатаНачала);
		
		ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроекта(ДанныеПроектнойЗадачи.Родитель);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.ОкончаниеФакт) Тогда 
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ОкончаниеФакт", '00010101');
		
		ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
			РассчитатьПланПроекта(ДанныеПроектнойЗадачи.Родитель);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры	

// Отмечает окончание выполнения проектной задачи при завершении бизнес-процесса
Процедура ОтметитьОкончаниеВыполненияПроектнойЗадачи(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат;
	КонецЕсли;	
		
	ПроектнаяЗадача = БизнесПроцесс.ПроектнаяЗадача;
	Если Не ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		Возврат;
	КонецЕсли;	
	
	ДанныеПроектнойЗадачи = ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	Если ДанныеПроектнойЗадачи.СуммарнаяЗадача Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.ОкончаниеФакт) Тогда 
		Возврат;
	КонецЕсли;
	
	// последний процесс
	МассивПроцессов = ПолучитьОсновныеБизнесПроцессы(ДанныеПроектнойЗадачи.Ссылка, Истина);
	Если Не (МассивПроцессов.Количество() = 1 И МассивПроцессов[0] = БизнесПроцесс.Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОкончаниеФакт", БизнесПроцесс.ДатаЗавершения);
	СтруктураДанных.Вставить("ДлительностьФакт", 
		РаботаСПроектами.РассчитатьДлительностьПериода(ДанныеПроектнойЗадачи, 
		ДанныеПроектнойЗадачи.НачалоФакт, 
		БизнесПроцесс.ДатаЗавершения, 
		ДанныеПроектнойЗадачи.ЕдиницаДлительностиФакт));
		
	ЗаписатьСрокиПроектнойЗадачи(ДанныеПроектнойЗадачи.Ссылка, СтруктураДанных);	
		
	Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.Родитель) Тогда 
		РассчитатьПланПроекта(ДанныеПроектнойЗадачи.Родитель);
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает Истина, если по проектной задачи есть незавершенные предшественники
Функция ЕстьНезавершенныеПредшественники(ПроектнаяЗадача) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачи.Предшественники.Предшественник = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачи.Ссылка = &ПроектнаяЗадача
	|	И СрокиПроектныхЗадач.ОкончаниеФакт = ДАТАВРЕМЯ(1, 1, 1)
	|	И ПроектныеЗадачи.Предшественники.ТипЗависимости = ЗНАЧЕНИЕ(Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало)
	|	И НЕ ПроектныеЗадачи.Предшественники.Предшественник.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	
	
// Проверяет, что текущая дата позже, чем дата начала проекта 
Функция НаступилаДатаНачалаПроекта(Проект) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Возврат (Проект.ТекущийПланНачало <= ТекущаяДатаСеанса());
	
КонецФункции

// Проверяет, что текущая дата позже, чем дата начала проектной задачи 
Функция НаступилаДатаНачалаЗадачи(ПроектнаяЗадача) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	ДанныеПроектнойЗадачи = ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
	Возврат (ДанныеПроектнойЗадачи.ТекущийПланНачало <= ТекущаяДатаСеанса());
	
КонецФункции

// Возвращает проект по умолчанию
Функция ПолучитьПроектПоУмолчанию() Экспорт
	
	ПроектПоУмолчанию = Неопределено;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Возврат ПроектПоУмолчанию;
	КонецЕсли;	
	
	ПроектПоУмолчанию = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСПроектами", "ПроектПоУмолчанию");
	
	Возврат ПроектПоУмолчанию;
	
КонецФункции

// Возвращает наименьшие трудозатраты среди исполнителей проектной задачи
Функция МинимальныеТрудозатратыИсполнителей(Исполнители) Экспорт 
	
	Если Исполнители.Количество() = 0 Тогда 
		Возврат 0;
	КонецЕсли;	
	
	МинимальныеТрудозатраты = Исполнители[0].ТекущийПланТрудозатраты;
	
	Для Каждого Строка Из Исполнители Цикл
		Если Строка.ТекущийПланТрудозатраты < МинимальныеТрудозатраты Тогда 
			МинимальныеТрудозатраты = Строка.ТекущийПланТрудозатраты;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МинимальныеТрудозатраты;
	
КонецФункции	

// Выводит в задачах бизнес-процессов плановые трудозатраты
Процедура ЗаполнитьТрудозатратыПланСтрокой(ЭтаФорма, ТрудозатратыПлан, УчитыватьИсполнителя = Ложь) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах") Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = ЭтаФорма.Объект;
	
	
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ЕдиницаТрудозатрат = Строка(Объект.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ЕдиницаТрудозатрат = Строка(Объект.Проект.ЕдиницаТрудозатратЗадач);
	Иначе
		ЕдиницаТрудозатрат = Строка(Константы.ОсновнаяЕдиницаТрудозатрат.Получить());
	КонецЕсли;
	ЕдиницаТрудозатрат = НРег(ЕдиницаТрудозатрат);
	
	ТрудозатратыФакт = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка <> &Ссылка
		|	И ЗадачаИсполнителя.Дата < &Дата
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.ТочкаМаршрута);
	
	Если УчитыватьИсполнителя Тогда 
		Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда 
			
			Запрос.Текст = Запрос.Текст + 
				" И ЗадачаИсполнителя.Исполнитель = &Исполнитель ";
				
			Запрос.УстановитьПараметр("Исполнитель", Объект.Исполнитель);	
		Иначе
			Запрос.Текст = Запрос.Текст + 
				" И ЗадачаИсполнителя.РольИсполнителя = &РольИсполнителя
				|И ЗадачаИсполнителя.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|И ЗадачаИсполнителя.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации ";
				
			Запрос.УстановитьПараметр("РольИсполнителя", Объект.РольИсполнителя);
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", Объект.ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", Объект.ДополнительныйОбъектАдресации);
		КонецЕсли;	
	КонецЕсли;	
	
	ТрудозатратыФакт = 0;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		ТрудозатратыФакт = ТрудозатратыФакт + РаботаСБизнесПроцессами.ПолучитьФактическиеТрудозатратыПоЗадаче(Выборка.Ссылка);
	КонецЦикла;
	
	ТрудозатратыПланСтр = Формат(ТрудозатратыПлан, "ЧН=; ЧГ=");
	Если ЗначениеЗаполнено(ТрудозатратыФакт) Тогда 
		ТрудозатратыПланСтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (отработано %2)'"),
			ТрудозатратыПланСтр,
			Формат(ТрудозатратыФакт, "ЧГ="));
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТрудозатратыПланСтр) Тогда 
		ЭтаФорма.ТрудозатратыПлан = ТрудозатратыПланСтр + " " + ЕдиницаТрудозатрат;
	КонецЕсли;	
	
	Если ТрудозатратыПлан <= ТрудозатратыФакт И ЗначениеЗаполнено(ТрудозатратыПлан) Тогда 
		ЭтаФорма.Элементы.ТрудозатратыПлан.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет реквизит проект у подчиненных файлов
Процедура ЗаполнитьПроектПодчиненныхФайлов(Владелец) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Владелец
		|	И Файлы.Проект <> &Проект";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Проект", Владелец.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
		Объект.Проект = Владелец.Проект;
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Получает сумму фактических трудозатрат по проектной задаче
Функция ПолучитьФактическиеТрудозатратыПроектнойЗадачи(
	ПроектнаяЗадача, 
	ЕдиницаТрудозатратФакт = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ФактическиеТрудозатраты.Длительность), 0) КАК ФактТрудозатраты
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.ПроектнаяЗадача = &Задача И Не Удалена";
		
	Запрос.УстановитьПараметр("Задача", ПроектнаяЗадача);		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		РеквизитыПроектнойЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			ПроектнаяЗадача, 
			"Владелец, ГрафикРаботы, ЕдиницаТрудозатратФакт");
		ГрафикРаботы = ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыПроектнойЗадачи.Владелец, "ГрафикРаботы");
		Если ЗначениеЗаполнено(РеквизитыПроектнойЗадачи.ГрафикРаботы) Тогда
			ГрафикРаботы = РеквизитыПроектнойЗадачи.ГрафикРаботы;
		КонецЕсли;
		ЕдиницаТрудозатратДляРасчета = 
			?(ЕдиницаТрудозатратФакт = Неопределено,
			РеквизитыПроектнойЗадачи.ЕдиницаТрудозатратФакт,
			ЕдиницаТрудозатратФакт);
			
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ТрудозатратыФакт = ПересчитатьТрудозатраты(
				Выборка.ФактТрудозатраты / 60,
				Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута,
				ЕдиницаТрудозатратДляРасчета,
				ГрафикРаботы);
			Возврат ТрудозатратыФакт;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Получает фактические трудозатраты исполнителей проектной задачи
// Параметры:
//	ПроектнаяЗадача - ссылка на проектную задачу
//	ЕдиницаТрудозатратФакт - единица трудозатрат, в которых считать трудозатраты.
//		Если параметр не указан, единицы берутся из проектной задачи.
// Возвращает:
//	ТаблицаЗначений, содержащая исполнителей проектной задачи и их фактические трудозатраты
//		Исполнитель - пользователь или роль исполнителей
//		ОсновнойОбъектАдресации - объект адресации
//		ДополнительныйОбъектАдресации - объект адресации
//		ТрудозатратыФакт - неотрицательное число (10.2)
Функция ПолучитьФактическиеТрудозатратыИсполнителейПроектнойЗадачи(
	ПроектнаяЗадача,
	ЕдиницаТрудозатрат = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаИсполнителей = Новый ТаблицаЗначений;
	ТаблицаИсполнителей.Колонки.Добавить("Исполнитель");
	ТаблицаИсполнителей.Колонки.Добавить("ОсновнойОбъектАдресации");
	ТаблицаИсполнителей.Колонки.Добавить("ДополнительныйОбъектАдресации");
	ТаблицаИсполнителей.Колонки.Добавить("ТрудозатратыФакт", Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаТаблицы из ПроектнаяЗадача.Исполнители Цикл
		НоваяСтрока = ТаблицаИсполнителей.Добавить();
		НоваяСтрока.Исполнитель = СтрокаТаблицы.Исполнитель;
		НоваяСтрока.ОсновнойОбъектАдресации = СтрокаТаблицы.ОсновнойОбъектАдресации;
		НоваяСтрока.ДополнительныйОбъектАдресации = СтрокаТаблицы.ДополнительныйОбъектАдресации;
		НоваяСтрока.ТрудозатратыФакт = 0;
	КонецЦикла;
	
	// Получение величин для расчета трудозатрат
	РеквизитыПроектнойЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПроектнаяЗадача,
		"Владелец, 
		|ГрафикРаботы, 
		|ЕдиницаТрудозатратФакт");
	РеквизитыПроекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыПроектнойЗадачи.Владелец,
		"ГрафикРаботы");
		
	ГрафикРаботы = 
		?(ЗначениеЗаполнено(РеквизитыПроектнойЗадачи.ГрафикРаботы), 
		РеквизитыПроектнойЗадачи.ГрафикРаботы, 
		РеквизитыПроекта.ГрафикРаботы);
		
	ЕдиницаТрудозатратДляРасчета = ЕдиницаТрудозатрат;
	Если ЕдиницаТрудозатрат = Неопределено Тогда
		ЕдиницаТрудозатратДляРасчета = РеквизитыПроектнойЗадачи.ЕдиницаТрудозатратФакт;
	КонецЕсли;
	
	//Выборка всех записей о трудозатратах для этой проектной задачи
	Отбор = Новый Структура("ПроектнаяЗадача", ПроектнаяЗадача);
	ВыборкаЗаписей = РегистрыСведений.ФактическиеТрудозатраты.Выбрать(Отбор);
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		ТрудозатратыФакт = РаботаСПроектами.ПересчитатьТрудозатраты(
			ВыборкаЗаписей.Длительность / 60,
			Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута,
			ЕдиницаТрудозатратДляРасчета,
			ГрафикРаботы);
			
		ТрудозатратыПрисвоены = Ложь;
		
		// Поиск пользователя, которому приписать трудозатраты
		Для Каждого Участник Из ТаблицаИсполнителей Цикл
			Если ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.Пользователи")
				И Участник.Исполнитель = ВыборкаЗаписей.Пользователь Тогда 
				Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
				ТрудозатратыПрисвоены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТрудозатратыПрисвоены Тогда
			// Поиск роли, которой приписать трудозатраты
			Для Каждого Участник Из ТаблицаИсполнителей Цикл	
				Если ТипЗнч(Участник.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Если ТипЗнч(ВыборкаЗаписей.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
						РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
							ВыборкаЗаписей.Источник,
							"РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
						Если РеквизитыЗадачи.РольИсполнителя = Участник.Исполнитель
							И РеквизитыЗадачи.ОсновнойОбъектАдресации = Участник.ОсновнойОбъектАдресации 
							И РеквизитыЗадачи.ДополнительныйОбъектАдресации = Участник.ДополнительныйОбъектАдресации Тогда
							
							Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
							ТрудозатратыПрисвоены = Истина;
							
						КонецЕсли;		
					Иначе
						ИсполнителиРоли = БизнесПроцессыИЗадачиСервер.ИсполнителиРоли(
							Участник.Исполнитель,
							Участник.ОсновнойОбъектАдресации,
							Участник.ДополнительныйОбъектАдресации);
						
						Если ИсполнителиРоли.Найти(ВыборкаЗаписей.Пользователь) <> Неопределено Тогда
							Если ЗначениеЗаполнено(Участник.ОсновнойОбъектАдресации)
								И ЗначениеЗаполнено(Участник.ДополнительныйОбъектАдресации) Тогда
								Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
								ТрудозатратыПрисвоены = Истина;
							ИначеЕсли ЗначениеЗаполнено(Участник.ОсновнойОбъектАдресации) Тогда
								Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
								ТрудозатратыПрисвоены = Истина;
							ИначеЕсли ЗначениеЗаполнено(Участник.ДополнительныйОбъектАдресации) Тогда
								Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
								ТрудозатратыПрисвоены = Истина;
							Иначе
								Участник.ТрудозатратыФакт = Участник.ТрудозатратыФакт + ТрудозатратыФакт;
								ТрудозатратыПрисвоены = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ТрудозатратыПрисвоены Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаИсполнителей;
	
КонецФункции

// Возвращает общие фактические трудозатраты по проекту
Функция ПолучитьФактическиеТрудозатратыПроекта(Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуммарныеФактическиеТрудозатраты = 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Владелец
		|	И Не ПроектныеЗадачи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммарныеФактическиеТрудозатраты = СуммарныеФактическиеТрудозатраты + 
			ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат СуммарныеФактическиеТрудозатраты;	
	
КонецФункции

// Выполняет поиск переданного пользователя среди исполнителей проектной задачи с учетом ролевой адресации
Функция НайтиИсполнителяВПроектнойЗадачеСУчетомВхожденияВРоль(
	ПроектнаяЗадача,
	Исполнитель,
	ЗадачаИсполнителя)
	
	Если ПроектнаяЗадача.Исполнители.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	ИсполнительНайден = Ложь;
	Если ЗначениеЗаполнено(ЗадачаИсполнителя) И ТипЗнч(ЗадачаИсполнителя) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ИсполнителиЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаИсполнителя, 
			"РольИсполнителя,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации,
			|Исполнитель");
			
		Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяЗадача.Исполнители Цикл
			Если ЗначениеЗаполнено(ИсполнителиЗадачи.Исполнитель)
				И ИсполнителиЗадачи.Исполнитель = ИсполнительПроектнойКоманды.Исполнитель
				ИЛИ 
				ЗначениеЗаполнено(ИсполнителиЗадачи.РольИсполнителя)
				И ИсполнителиЗадачи.РольИсполнителя = ИсполнительПроектнойКоманды.Исполнитель
				И ИсполнителиЗадачи.ОсновнойОбъектАдресации = ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации
				И ИсполнителиЗадачи.ДополнительныйОбъектАдресации = ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации Тогда
				
				ИсполнительНайден = Истина;
				Прервать;
				
			КонецЕсли;	
		КонецЦикла;	
		
	ИначеЕсли ЗначениеЗаполнено(Исполнитель) Тогда
		
		Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяЗадача.Исполнители Цикл
			
			Если ТипЗнч(ИсполнительПроектнойКоманды.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				ИсполнителиРоли = БизнесПроцессыИЗадачиСервер.ИсполнителиРоли(
				ИсполнительПроектнойКоманды.Исполнитель,
				ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации,
				ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации);
				
				Для Каждого ИсполнительМассива Из ИсполнителиРоли Цикл
					Если ИсполнительМассива = Исполнитель Тогда
						ИсполнительНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
			ИначеЕсли Исполнитель = ИсполнительПроектнойКоманды.Исполнитель Тогда	
				
				ИсполнительНайден = Истина;
				
			КонецЕсли;	
			
			Если ИсполнительНайден Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИсполнительНайден;
	
КонецФункции

// Выполняет поиск переданного пользователя среди исполнителей проектной задачи с учетом ролевой адресации
Функция НайтиИсполнителяВКомандеПроектаСУчетомВхожденияВРоль(
	Проект,
	Исполнитель,
	ЗадачаИсполнителя)
	
	ПроектнаяКоманда = Проект.ПроектнаяКоманда.Выгрузить();
	Если ПроектнаяКоманда.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	НоваяСтрока = ПроектнаяКоманда.Добавить();
	НоваяСтрока.Исполнитель = Проект.Руководитель;
	
	ИсполнительНайден = Ложь;
	Если ЗначениеЗаполнено(ЗадачаИсполнителя) И ТипЗнч(ЗадачаИсполнителя) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ИсполнителиЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаИсполнителя, 
			"РольИсполнителя,
			|ОсновнойОбъектАдресации,
			|ДополнительныйОбъектАдресации,
			|Исполнитель");
			
		Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяКоманда Цикл
			Если ЗначениеЗаполнено(ИсполнителиЗадачи.Исполнитель)
				И ИсполнителиЗадачи.Исполнитель = ИсполнительПроектнойКоманды.Исполнитель
				ИЛИ 
				ЗначениеЗаполнено(ИсполнителиЗадачи.РольИсполнителя)
				И ИсполнителиЗадачи.РольИсполнителя = ИсполнительПроектнойКоманды.Исполнитель
				И ИсполнителиЗадачи.ОсновнойОбъектАдресации = ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации
				И ИсполнителиЗадачи.ДополнительныйОбъектАдресации = ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации Тогда
				
				ИсполнительНайден = Истина;
				Прервать;
				
			КонецЕсли;	
		КонецЦикла;	
		
	ИначеЕсли ЗначениеЗаполнено(Исполнитель) Тогда
		
		Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяКоманда Цикл
			
			Если ТипЗнч(ИсполнительПроектнойКоманды.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				ИсполнителиРоли = БизнесПроцессыИЗадачиСервер.ИсполнителиРоли(
						ИсполнительПроектнойКоманды.Исполнитель,
						ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации,
						ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации);
				
				Для Каждого ИсполнительМассива Из ИсполнителиРоли Цикл
					Если ИсполнительМассива = Исполнитель Тогда
						ИсполнительНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	
				
			ИначеЕсли Исполнитель = ИсполнительПроектнойКоманды.Исполнитель Тогда	
				
				ИсполнительНайден = Истина;
				
			КонецЕсли;	
			
			Если ИсполнительНайден Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИсполнительНайден;
	
КонецФункции

// Поверяет возможность отнесения фактических трудозатрат на проектную задачу
Функция ПроверитьЗаписьОФактическихТрудозатратах(
	Проект,
	ПроектнаяЗадача,
	Источник,
	Пользователь,
	ФормируемоеСообщениеОбОшибке) Экспорт
	
	ФормируемоеСообщениеОбОшибке = "";
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
		
		ИсполнительНайден = НайтиИсполнителяВПроектнойЗадачеСУчетомВхожденияВРоль(
			ПроектнаяЗадача,
			Пользователь,
			Источник);
			
		Если Не ИсполнительНайден Тогда
			ФормируемоеСообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя списать трудозатраты исполнителя ""%1"", так как он не запланирован в проектной задаче ""%2""'"),
				Строка(Пользователь),
				Строка(ПроектнаяЗадача));	
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		
		Если Не Проект.СписыватьЗатратыНаПроект Тогда 
			ФормируемоеСообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нельзя списать трудозатраты исполнителя на проект ""%1"", так как для этого проекта запрещено списывать трудозатраты на проект в целом'"),
				Строка(Проект));
		Иначе		
			ИсполнительНайден = НайтиИсполнителяВКомандеПроектаСУчетомВхожденияВРоль(
				Проект,
				Пользователь,
				Источник);	
				
			Если Не ИсполнительНайден Тогда
				ФормируемоеСообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя списать трудозатраты исполнителя ""%1"" на проект ""%2"", так как он не входит в проектную команду'"),
					Строка(Пользователь),
					Строка(Проект));
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормируемоеСообщениеОбОшибке) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;		
		
КонецФункции

// Выполняет поиск переданного пользователя среди исполнителей проектной задачи с учетом ролевой адресации
Функция НайтиИсполнителяРольВПроектнойЗадаче(
	ПроектнаяЗадача,
	Исполнитель,
	ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если ПроектнаяЗадача.Исполнители.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяЗадача.Исполнители Цикл
		
		Если ТипЗнч(ИсполнительПроектнойКоманды.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			
			Если Исполнитель = ИсполнительПроектнойКоманды.Исполнитель
				И ОсновнойОбъектАдресации = ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации
				И ДополнительныйОбъектАдресации = ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Исполнитель = ИсполнительПроектнойКоманды.Исполнитель Тогда 
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

// Выполняет поиск переданного пользователя среди исполнителей проектной задачи с учетом ролевой адресации
Функция НайтиИсполнителяРольВКомандеПроекта(
	Проект,
	Исполнитель,
	ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	ПроектнаяКоманда = Проект.ПроектнаяКоманда.Выгрузить();
	Если ПроектнаяКоманда.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	НоваяСтрока = ПроектнаяКоманда.Добавить();
	НоваяСтрока.Исполнитель = Проект.Руководитель;
	
	Для Каждого ИсполнительПроектнойКоманды Из ПроектнаяКоманда Цикл
		
		Если ТипЗнч(ИсполнительПроектнойКоманды.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			
			Если Исполнитель = ИсполнительПроектнойКоманды.Исполнитель
				И ОсновнойОбъектАдресации = ИсполнительПроектнойКоманды.ОсновнойОбъектАдресации
				И ДополнительныйОбъектАдресации = ИсполнительПроектнойКоманды.ДополнительныйОбъектАдресации Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Исполнитель = ИсполнительПроектнойКоманды.Исполнитель Тогда 
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

// Проверяет возможность старта бизнес-процесса по проекту и проектной задаче
Процедура ПроверитьВозможностьСтартаБизнесПроцесса(Знач Объект, ВозвращаемыйМассивОшибок) Экспорт 
	
	ВозвращаемыйМассивОшибок = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		
		Если Не РаботаСПроектами.НаступилаДатаНачалаЗадачи(Объект.ПроектнаяЗадача) Тогда 
			ТекстОшибки = НСтр("ru = 'Дата начала процесса меньше, чем дата начала проектной задачи. Выполнить запуск процесса?'");
			ВозвращаемыйМассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;	
			
		Если РаботаСПроектами.ЕстьНезавершенныеПредшественники(Объект.ПроектнаяЗадача) Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У проектной задачи ""%1"" есть незавершенные предшественники. Выполнить запуск процесса?'"),
				Строка(Объект.ПроектнаяЗадача));
			ВозвращаемыйМассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;	
		
		ЗадатьВопрос = Ложь;
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(Объект.ПроектнаяЗадача);
		ПлановаяДатаОкончания = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		Если ЗначениеЗаполнено(ПлановаяДатаОкончания) Тогда
			
			Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
				ЗадатьВопрос = (Объект.СрокИсполненияДатой > ПлановаяДатаОкончания);
			ИначеЕсли Объект.Ссылка.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда 
				ЗадатьВопрос = (Объект.СрокИсполнения > ПлановаяДатаОкончания);
			КонецЕсли;
			
			Если ЗадатьВопрос Тогда
				ТекстОшибки = НСтр("ru = 'Срок исполнения процесса превышает плановую дату окончания проектной задачи. Продолжить?'");
				ВозвращаемыйМассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Объект.Проект) Тогда 
		
		Если Не РаботаСПроектами.НаступилаДатаНачалаПроекта(Объект.Проект) Тогда 
			ТекстОшибки = НСтр("ru = 'Дата начала процесса меньше, чем дата начала проекта. Выполнить запуск процесса?'");
			ВозвращаемыйМассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;
		
		ЗадатьВопрос = Ложь;
		ПлановаяДатаОкончания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Проект, "ТекущийПланОкончание");
		Если ЗначениеЗаполнено(ПлановаяДатаОкончания) Тогда
			
			Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
				
				СрокИсполненияДатой = '00010101';
				БизнесПроцессСтруктура = РаботаСБизнесПроцессамиКлиентСервер.ПолучитьДанныеПроцессаСогласование(Объект, Истина);
				МассивИсполнителей = БизнесПроцессСтруктура.МассивИсполнителей;
					
				ДатаНачалаИтерации = '00010101';
				РаботаСБизнесПроцессами.РассчитатьСрокиСогласованияДатой(МассивИсполнителей, БизнесПроцессСтруктура, ДатаНачалаИтерации);
					
				Для Каждого Строка Из МассивИсполнителей Цикл
					Если Не ЗначениеЗаполнено(Строка.СрокИсполненияДатой) Тогда 
						СрокИсполненияДатой = '00010101';
						Прервать;
					ИначеЕсли Строка.СрокИсполненияДатой > СрокИсполненияДатой Тогда 
						СрокИсполненияДатой = Строка.СрокИсполненияДатой;
					КонецЕсли;	
				КонецЦикла;
				
				ЗадатьВопрос = (СрокИсполненияДатой > ПлановаяДатаОкончания);
			ИначеЕсли Объект.Ссылка.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда 
				ЗадатьВопрос = (Объект.СрокИсполнения > ПлановаяДатаОкончания);
			КонецЕсли;
			
			Если ЗадатьВопрос Тогда
				ТекстОшибки = НСтр("ru = 'Срок исполнения процесса превышает плановую дату окончания проекта. Продолжить?'");
				ВозвращаемыйМассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список значений для выбора задачи проекта
Функция СформироватьДанныеВыбораЗадачиПроекта(Текст, Проект) Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка КАК Ссылка,
		|	ПроектныеЗадачи.КодСДР
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И (ПроектныеЗадачи.Наименование ПОДОБНО &Текст
		|			ИЛИ ПроектныеЗадачи.КодСДР ПОДОБНО &Текст)
		|	И (НЕ ПроектныеЗадачи.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Выборка.КодСДР) + ")");
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений для выбора исполнителя из проектной команды
Функция СформироватьДанныеВыбораИсполнителя(Проект, Текст = "") Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПроектнаяКоманда = Проект.ПроектнаяКоманда.Выгрузить();
	НоваяСтрока = ПроектнаяКоманда.Добавить();
	НоваяСтрока.Исполнитель = Проект.Руководитель;
	
	Для Каждого Строка Из ПроектнаяКоманда Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если Текст <> "" И Нрег(Лев(Строка.Исполнитель, СтрДлина(Текст))) <> НРег(Текст) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Исполнитель", Строка.Исполнитель);
		ЗначениеВыбора.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ЗначениеВыбора.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Корреспонденты") 
			Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.КонтактныеЛица") 
			Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка.ДополнительныйОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ", " + Строка.ДополнительныйОбъектАдресации + ")";
		ИначеЕсли ЗначениеЗаполнено(Строка.ОсновнойОбъектАдресации) Тогда 
			ПредставлениеВыбора = Строка(Строка.Исполнитель) + "(" + Строка.ОсновнойОбъектАдресации + ")";
		Иначе
			ПредставлениеВыбора = Строка(Строка.Исполнитель);
		КонецЕсли;	
		
		ДанныеВыбора.Добавить(ЗначениеВыбора, ПредставлениеВыбора);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает Истина, если проект имеет проектные задачи
Функция ЕстьПроектныеЗадачи(Проект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Проект
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина, если проект имеет незавершенные проектные задачи
Функция ЕстьНезавершенныеПроектныеЗадачи(Проект) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачи.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
	|ГДЕ
	|	ПроектныеЗадачи.Владелец = &Проект
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления
	|	И СрокиПроектныхЗадач.ОкончаниеФакт = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает список значений для выбора проекта \ задачи проекта
Функция СформироватьДанныеВыбораПроектаЗадачи(Текст) Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка КАК Проект,
	|	НЕОПРЕДЕЛЕНО КАК ПроектнаяЗадача,
	|	ЕСТЬNULL(ПроектныеЗадачи.ЕстьПроектныеЗадачи, ЛОЖЬ) КАК ЕстьПроектныеЗадачи
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИСТИНА КАК ЕстьПроектныеЗадачи,
	|			ПроектныеЗадачи.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ГДЕ
	|			НЕ ПроектныеЗадачи.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПроектныеЗадачи.Владелец) КАК ПроектныеЗадачи
	|		ПО Проекты.Ссылка = ПроектныеЗадачи.Владелец
	|ГДЕ
	|	Проекты.Наименование ПОДОБНО &Текст
	|	И НЕ Проекты.ЭтоГруппа
	|	И НЕ Проекты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроектныеЗадачи.Владелец,
	|	ПроектныеЗадачи.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|ГДЕ
	|	ПроектныеЗадачи.Наименование ПОДОБНО &Текст
	|	И НЕ ПроектныеЗадачи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Значение = Новый Структура("Проект, ПроектнаяЗадача, ЕстьПроектныеЗадачи", Выборка.Проект, Выборка.ПроектнаяЗадача, Выборка.ЕстьПроектныеЗадачи);
		Представление = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Выборка.Проект, Выборка.ПроектнаяЗадача);
		
		ДанныеВыбора.Добавить(Значение, Представление);
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции	

// Возвращает вид проекта по умолчанию
Функция ПолучитьВидПроектаПоУмолчанию() Экспорт
	
	ВидПроектаПоУмолчанию = Неопределено;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда 
		Возврат ВидПроектаПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыПроектов.Ссылка
	|ИЗ
	|	Справочник.ВидыПроектов КАК ВидыПроектов
	|ГДЕ
	|	НЕ ВидыПроектов.ПометкаУдаления";
	
	ВидыПроектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если ВидыПроектов.Количество() = 1 Тогда
    	ВидПроектаПоУмолчанию = ВидыПроектов[0];
		Возврат ВидПроектаПоУмолчанию;
	КонецЕсли;
	
	ВидПроектаПоУмолчанию = ХранилищеОбщихНастроек.Загрузить(
		"НастройкиРаботыСПроектами", 
		"ВидПроектаПоУмолчанию");
		
	Возврат ВидПроектаПоУмолчанию;
			
КонецФункции

// Возвращает количество проектов с пустым видом
Функция КоличествоПроектовСПустымВидом() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.ВидПроекта = ЗНАЧЕНИЕ(Справочник.ВидыПроектов.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

// Создает вид проекта с заданным наименованием.
// Возвращает ссылку на созданный вид проекта.
Функция СоздатьВидПроекта(Наименование) Экспорт
	
	ВидПроекта = Справочники.ВидыПроектов.СоздатьЭлемент();
	ВидПроекта.Наименование = Наименование;
	ВидПроекта.Записать();
	Возврат ВидПроекта.Ссылка;
	
КонецФункции

// Заполняет вид проекта
Процедура ЗаполнитьВидПроекта(ВидПроекта) Экспорт
	
	НачатьТранзакцию();
	Попытка 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты Как Проекты
		|ГДЕ
		|	Проекты.ВидПроекта = ЗНАЧЕНИЕ(Справочник.ВидыПроектов.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПроектОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроектОбъект.Заблокировать();
			ПроектОбъект.ВидПроекта = ВидПроекта;
			ПроектОбъект.Записать();
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает соответствие ссылок и структур с данными проектных задач, 
// необходимых для расчета плана проекта
//
// Параметры:
//  ПроектныеЗадачи - Массив - массив ссылок на проектные задачи.
//
// Возвращаемое значение:
//  Соответствие - соответствие ссылок и структур с данными проектных задач.
//
Функция ПолучитьДанныеПроектныхЗадач(ПроектныеЗадачи) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеДанных = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектныеЗадачи.Ссылка,
	|	ПроектныеЗадачи.Владелец КАК Проект,
	|	ПроектныеЗадачи.Родитель,
	|	ПроектныеЗадачи.СуммарнаяЗадача,
	|	ПроектныеЗадачи.Веха,
	|	ПроектныеЗадачи.Владелец,
	|	ПроектныеЗадачи.ТипОграничения,
	|	ПроектныеЗадачи.ДатаОграничения,
	|	ВЫБОР
	|		КОГДА ПроектныеЗадачи.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА ПроектныеЗадачи.ГрафикРаботы
	|		ИНАЧЕ ПроектныеЗадачи.Владелец.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ПроектныеЗадачи.Владелец.АвтоматическиРассчитыватьПланПроекта КАК АвтоматическиРассчитыватьПланПроекта,
	|	ПроектныеЗадачи.Владелец.РедактируетсяВСтороннейСистеме КАК РедактируетсяВСтороннейСистеме,
	|	ПроектныеЗадачи.Владелец.СпособПланирования КАК СпособПланирования,
	|	СрокиПроектныхЗадач.ТекущийПланНачало,
	|	СрокиПроектныхЗадач.ТекущийПланОкончание,
	|	СрокиПроектныхЗадач.ТекущийПланДлительность,
	|	СрокиПроектныхЗадач.ТекущийПланЕдиницаДлительности,
	|	СрокиПроектныхЗадач.НачалоФакт,
	|	СрокиПроектныхЗадач.ОкончаниеФакт,
	|	СрокиПроектныхЗадач.ДлительностьФакт,
	|	СрокиПроектныхЗадач.ЕдиницаДлительностиФакт,
	|	ВЫБОР
	|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
	|			ТОГДА ВЫБОР
	|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
	|			ТОГДА 4
	|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
	|			ТОГДА ВЫБОР
	|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
	|						ТОГДА 5
	|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
	|						ТОГДА 8
	|					ИНАЧЕ 6
	|				КОНЕЦ
	|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
	|			ТОГДА 7
	|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
	|			ТОГДА ВЫБОР
	|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
	|						ТОГДА 9
	|					ИНАЧЕ 10
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеКонтроля
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
	|		ПО ПроектныеЗадачи.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО ПроектныеЗадачи.Ссылка = КешИнформацииОбОбъектах.Объект
	|ГДЕ
	|	ПроектныеЗадачи.Ссылка В(&ПроектныеЗадачи)";
	
	Запрос.УстановитьПараметр("ПроектныеЗадачи", ПроектныеЗадачи);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ПроектнаяЗадача Из ПроектныеЗадачи Цикл
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", Справочники.ПроектныеЗадачи.ПустаяСсылка());
		Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
		Результат.Вставить("Родитель", Справочники.ПроектныеЗадачи.ПустаяСсылка());
		Результат.Вставить("СуммарнаяЗадача", Ложь);
		Результат.Вставить("Веха", Ложь);
		Результат.Вставить("Владелец", Справочники.Проекты.ПустаяСсылка());
		Результат.Вставить("ТипОграничения", Перечисления.ТипыОграниченийПроектныхЗадач.ПустаяСсылка());
		Результат.Вставить("ДатаОграничения", '00010101');
		Результат.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
		Результат.Вставить("АвтоматическиРассчитыватьПланПроекта", Ложь);
		Результат.Вставить("РедактируетсяВСтороннейСистеме", Ложь);
		Результат.Вставить("СпособПланирования", Перечисления.СпособыПланированияПроекта.ПустаяСсылка());
		Результат.Вставить("ТекущийПланНачало", '00010101');
		Результат.Вставить("ТекущийПланОкончание", '00010101');
		Результат.Вставить("ТекущийПланДлительность", 0);
		Результат.Вставить("ТекущийПланЕдиницаДлительности", Перечисления.ЕдиницыДлительности.ПустаяСсылка());
		Результат.Вставить("НачалоФакт", '00010101');
		Результат.Вставить("ОкончаниеФакт", '00010101');
		Результат.Вставить("ДлительностьФакт", 0);
		Результат.Вставить("ЕдиницаДлительностиФакт", Перечисления.ЕдиницыДлительности.ПустаяСсылка());
		Результат.Вставить("СостояниеКонтроля", 0);

		НайденнаяСтрока = РезультатЗапроса.Найти(ПроектнаяЗадача, "Ссылка");
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
			ЗаполнитьЗначенияСвойств(Результат, НайденнаяСтрока);
			
			Если Не ЗначениеЗаполнено(Результат.ГрафикРаботы) Тогда 
				Результат.ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
			КонецЕсли;	
		КонецЕсли;	
		
		СоответствиеДанных.Вставить(ПроектнаяЗадача, Результат);
	КонецЦикла;	
	
	Возврат СоответствиеДанных;
	
КонецФункции	

// Возвращает структуру с данными проектной задачи,
// необходимыми для расчета плана проекта
//
// Параметры:
//  ПроектнаяЗадача - СправочникСсылка.ПроектныеЗадачи - ссылка на проектную задачу.
//
// Возвращаемое значение:
//  Структура - структура с данными проектной задачи.
//
Функция ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача) Экспорт 
	
	ПроектныеЗадачи = Новый Массив;
	ПроектныеЗадачи.Добавить(ПроектнаяЗадача);
	
	СоответствиеДанных = ПолучитьДанныеПроектныхЗадач(ПроектныеЗадачи);
	
	Возврат СоответствиеДанных.Получить(ПроектнаяЗадача);
	
КонецФункции	

// Записывает сроки проектной задачи в регистр
//
// Параметры:
//  ПроектнаяЗадача - СправочникСсылка.ПроектныеЗадачи - ссылка на проектную задачу.
//  СтруктураДанных - Структура - структура, содержащая данные о сроках проектной задачи.
//
Процедура ЗаписатьСрокиПроектнойЗадачи(ПроектнаяЗадача, СтруктураДанных) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменена = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.СрокиПроектныхЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПроектнаяЗадача = ПроектнаяЗадача;
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда 
		МенеджерЗаписи.ПроектнаяЗадача = ПроектнаяЗадача;
		ЗаписьИзменена = Истина;
	КонецЕсли;	
	
	Для Каждого Строка Из СтруктураДанных Цикл
		Если МенеджерЗаписи[Строка.Ключ] <> Строка.Значение Тогда 
			МенеджерЗаписи[Строка.Ключ] = Строка.Значение;
			ЗаписьИзменена = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗаписьИзменена Тогда 
		МенеджерЗаписи.Записать();
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет порядок проектных задач в общей структуре проекта
//
// Параметры:
//  Проект - СправочникСсылка.Проект - ссылка на проект, для задач которого необходимо заполнить порядок.
//
Процедура ЗаполнитьПорядокПроектныхЗадач(Проект) Экспорт 
	
	НомерПроектнойЗадачи = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|	И ПроектныеЗадачи.Родитель = ЗНАЧЕНИЕ(Справочник.ПроектныеЗадачи.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроектныеЗадачи.НомерЗадачиВУровне,
		|	ПроектныеЗадачи.Наименование";
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		РегистрыСведений.ПорядокПроектныхЗадач.УстановитьПорядокПроектнойЗадачи(
			Выборка.Ссылка, НомерПроектнойЗадачи);
		НомерПроектнойЗадачи = НомерПроектнойЗадачи + 1;
		ЗаполнитьПорядокПодчиненныхЗадач(Выборка.Ссылка, НомерПроектнойЗадачи)
	КонецЦикла;
	
КонецПроцедуры

// Заполняет порядок подчиненных проектных задач 
Процедура ЗаполнитьПорядокПодчиненныхЗадач(Родитель, НомерПроектнойЗадачи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Родитель = &Родитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроектныеЗадачи.НомерЗадачиВУровне,
		|	ПроектныеЗадачи.Наименование";
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПорядокПроектныхЗадач.УстановитьПорядокПроектнойЗадачи(
			Выборка.Ссылка, НомерПроектнойЗадачи);
		НомерПроектнойЗадачи = НомерПроектнойЗадачи + 1;
		ЗаполнитьПорядокПодчиненныхЗадач(Выборка.Ссылка, НомерПроектнойЗадачи)
	КонецЦикла;
	
КонецПроцедуры
