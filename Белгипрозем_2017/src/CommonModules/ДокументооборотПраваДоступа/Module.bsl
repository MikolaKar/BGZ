////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс

// Возвращает структуру прав доступа к указанному объекту для указанного 
// пользователя. Если пользователь не указан, то используется текущий
// пользователь.
Функция ПолучитьПраваПоОбъекту(ОбъектДоступа, Пользователь = Неопределено) Экспорт
	
	// Проверка на использование ограничения прав доступа
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		// Если права доступа не включены, то все разрешено
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		
		Возврат Права;
		
	КонецЕсли;	
	
	// Если использование прав доступа включено, то выполняется получение прав доступа
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Роли Полные права все разрешено	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		
		Возврат Права;
		
	КонецЕсли;
	
	Права = Новый Структура(
		"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
		Ложь, Ложь, Ложь, Ложь, Ложь);
		
	ОтборПоПользователю = Новый Массив;
	ОтборПоПользователю.Добавить(Пользователь);
	ТаблицаПрав = ПолучитьПраваПользователейПоОбъекту(ОбъектДоступа, Истина, ОтборПоПользователю);
	
	Если ТаблицаПрав.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Права, ТаблицаПрав[0]);
	КонецЕсли;
	
	Возврат Права;
	
КонецФункции

// Возвращает права на переданный ОбъектДоступа
// по всем пользователям, либо с отбором по параметру Пользователи.
// Используется только для режима с включенными правами, 
// т.е. константа ДокументооборотИспользоватьОграничениеПравДоступа не проверяется.
//
// Параметры:
//  ОбъектДоступа - ссылна на объект, чьи права нужно получить
//  УчитыватьНеограниченныеПрава - Булево - признак включения в результат пользователей с неограниченными правами на таблицу.
//  Пользователи - Массив, Неопределено - массив пользователей для отбора. Если не установлен, то по всем.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками Пользователь, Чтение, Добавление, Изменение, Удаление, УправлениеПравами
// 
Функция ПолучитьПраваПользователейПоОбъекту(
		ОбъектДоступа, УчитыватьНеограниченныеПрава, Пользователи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = ТипЗнч(ОбъектДоступа);
	МетаданныеОбъекта = ОбъектДоступа.Метаданные();
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта);
		
	ЗаменяемыеПодстроки = Новый Соответствие;
	Запрос = ДокументооборотПраваДоступаПереопределяемый.ПолучитьЗапросНаПраваПоОбъекту(
		ОбъектДоступа, ТипОбъекта, ЗаменяемыеПодстроки);
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
		// Запрос сформирован в переопределяемом модуле	
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВерсииФайлов")
		Или ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
		
		ВладелецФайла = Неопределено;
		
		Если ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектДоступа, "ВладелецФайла");
		КонецЕсли;	
		
		Если ТипОбъекта = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			Файл = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбъектДоступа, "Владелец");
			ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Файл, "ВладелецФайла");
		КонецЕсли;	
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставСубъектов.Пользователь,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.УправлениеПравами) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Чтение) КАК Чтение
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляФайлов КАК ДескрипторыДоступаДляФайлов
			|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаДляФайлов.Дескриптор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (СоставСубъектов.Субъект = ПраваПоДескрипторамДоступа.Пользователь)
			|			И (СоставСубъектов.ОбъектМетаданных В (ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ДескрипторыДоступаДляФайлов.ОбъектМетаданных))
			|ГДЕ
			|	ДескрипторыДоступаДляФайлов.ВладелецФайла = &ВладелецФайла
			|	%ОтборПоПользователю%
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставСубъектов.Пользователь";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
		
	ИначеЕсли ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставСубъектов.Пользователь,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ЗадачаИсполнителя.Автор = СоставСубъектов.Пользователь
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК Добавление
			|ПОМЕСТИТЬ ПраваНаЧтениеДобавление
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|			ПО УчастникиПроцессов.Участник = СоставСубъектов.Субъект
			|				И УчастникиПроцессов.ОсновнойОбъектАдресации = СоставСубъектов.ОсновнойОбъектАдресации
			|				И УчастникиПроцессов.ДополнительныйОбъектАдресации = СоставСубъектов.ДополнительныйОбъектАдресации
			|				И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
			|				%ОтборПоПользователю%
			|		ПО ЗадачаИсполнителя.БизнесПроцесс = УчастникиПроцессов.Процесс
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &ОбъектДоступа
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставСубъектов.Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставСубъектов.Пользователь,
			|	ИСТИНА КАК Изменение
			|ПОМЕСТИТЬ ПраваНаИзменение
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = СоставСубъектов.Субъект
			|			И ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации = СоставСубъектов.ОсновнойОбъектАдресации
			|			И ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации = СоставСубъектов.ДополнительныйОбъектАдресации
			|			И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
			|			%ОтборПоПользователю%
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка = &ОбъектДоступа
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставСубъектов.Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПраваНаЧтениеДобавление.Пользователь КАК Пользователь,
			|	ПраваНаЧтениеДобавление.Чтение,
			|	ЕСТЬNULL(ПраваНаИзменение.Изменение, ЛОЖЬ) КАК Изменение,
			|	ПраваНаЧтениеДобавление.Добавление,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	ПраваНаЧтениеДобавление КАК ПраваНаЧтениеДобавление
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваНаИзменение КАК ПраваНаИзменение
			|		ПО ПраваНаЧтениеДобавление.Пользователь = ПраваНаИзменение.Пользователь";
		
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
		
		Запрос.Текст = 
		
		    "ВЫБРАТЬ
		    |	СоставСубъектов.Пользователь,
		    |	ИСТИНА КАК Чтение,
		    |	МАКСИМУМ(ВЫБОР
		    |			КОГДА ТаблицаПроцесса.Автор = СоставСубъектов.Пользователь
		    |				ТОГДА ИСТИНА
		    |			ИНАЧЕ ЛОЖЬ
		    |		КОНЕЦ) КАК Добавление
		    |ПОМЕСТИТЬ ПраваНаЧтениеДобавление
		    |ИЗ
		    |	БизнесПроцесс.%ИмяПроцесса% КАК ТаблицаПроцесса
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		    |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
		    |			ПО УчастникиПроцессов.Участник = СоставСубъектов.Субъект
		    |				И УчастникиПроцессов.ОсновнойОбъектАдресации = СоставСубъектов.ОсновнойОбъектАдресации
		    |				И УчастникиПроцессов.ДополнительныйОбъектАдресации = СоставСубъектов.ДополнительныйОбъектАдресации
		    |				И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
		    |				%ОтборПоПользователю%
			|		ПО ТаблицаПроцесса.Ссылка = УчастникиПроцессов.Процесс
		    |ГДЕ
		    |	ТаблицаПроцесса.Ссылка = &ОбъектДоступа
		    |
		    |СГРУППИРОВАТЬ ПО
		    |	СоставСубъектов.Пользователь
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ РАЗЛИЧНЫЕ
		    |	СоставСубъектов.Пользователь,
		    |	ИСТИНА КАК Изменение
		    |ПОМЕСТИТЬ ПраваНаИзменение
		    |ИЗ
		    |	БизнесПроцесс.%ИмяПроцесса% КАК ТаблицаПроцесса
		    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
		    |		ПО ТаблицаПроцесса.Автор = СоставСубъектов.Субъект
		    |			И (СоставСубъектов.ИмяОбластиДелегирования В (&ОбластиДелегирования))
			|			%ОтборПоПользователю%
			|ГДЕ
		    |	ТаблицаПроцесса.Ссылка = &ОбъектДоступа
		    |;
		    |
		    |////////////////////////////////////////////////////////////////////////////////
		    |ВЫБРАТЬ
		    |	ПраваНаЧтениеДобавление.Пользователь,
		    |	ПраваНаЧтениеДобавление.Чтение,
		    |	ЕСТЬNULL(ПраваНаИзменение.Изменение, ЛОЖЬ) КАК Изменение,
		    |	ПраваНаЧтениеДобавление.Добавление,
		    |	ЛОЖЬ КАК Удаление,
		    |	ЛОЖЬ КАК УправлениеПравами
		    |ИЗ
		    |	ПраваНаЧтениеДобавление КАК ПраваНаЧтениеДобавление
		    |		ЛЕВОЕ СОЕДИНЕНИЕ ПраваНаИзменение КАК ПраваНаИзменение
		    |		ПО ПраваНаЧтениеДобавление.Пользователь = ПраваНаИзменение.Пользователь";
		
		ЗаменяемыеПодстроки.Вставить("%ИмяПроцесса%", МетаданныеОбъекта.Имя);
	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов")
		Или ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаФайлов") Тогда
		
		// Для отображения прав в форме дескриптора
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставСубъектов.Пользователь,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.УправлениеПравами) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Чтение) КАК Чтение
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО СоставСубъектов.Субъект = ПраваПоДескрипторамДоступа.Пользователь
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Дескриптор = &ОбъектДоступа
			|	И СоставСубъектов.ИмяОбластиДелегирования В(&ОбластиДелегирования)
			|	%ДопУсловия%
			|	%ОтборПоПользователю%
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставСубъектов.Пользователь";
			
		Если ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") Тогда
				
			ИдентификаторОМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ОбъектДоступа, "ИдентификаторОбъектаМетаданных");
				
		Иначе 
			
			// Дескриптор файла
			РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			    ОбъектДоступа, "ДескрипторВладельца.ИдентификаторОбъектаМетаданных, ВладелецФайла");
			
			ИдентификаторОМ = РеквизитыДескриптора.ДескрипторВладельцаИдентификаторОбъектаМетаданных;
			
			Если Не ЗначениеЗаполнено(ИдентификаторОМ) Тогда
				ВладелецФайла = РеквизитыДескриптора.ВладелецФайла;
				МетаданныеВладельца = ВладелецФайла.Метаданные();
				ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеВладельца);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластиДелегирования = 
			ДокументооборотПраваДоступаПереопределяемый.ПолучитьОбластиДелегированияПоИОМ(ИдентификаторОМ);
		
		ТипОбъектаДоступа = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИдентификаторОМ, "ЗначениеПустойСсылки"));
			
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъектаДоступа);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И НЕ СоставСубъектов.ОбъектОснование Ссылка Справочник.ДелегированиеПрав";
		КонецЕсли;
			
		Если Не ДопНастройки.ДобавлятьРуководителей Тогда
			ДопУсловия = ДопУсловия + ?(ДопУсловия = "", "", Символы.ПС)
				+ "И НЕ СоставСубъектов.ОбъектОснование Ссылка Справочник.СтруктураПредприятия";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	Иначе // Права объектов, связанных с дескрипторами
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставСубъектов.Пользователь,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.УправлениеПравами) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступа.Чтение) КАК Чтение
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
			|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаДляОбъектов.Дескриптор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО СоставСубъектов.Субъект = ПраваПоДескрипторамДоступа.Пользователь
			|ГДЕ
			|	ДескрипторыДоступаДляОбъектов.Объект = &ОбъектДоступа
			|	И СоставСубъектов.ИмяОбластиДелегирования В(&ОбластиДелегирования)
			|	%ДопУсловия%
			|	%ОтборПоПользователю%
			|
			|СГРУППИРОВАТЬ ПО
			|	СоставСубъектов.Пользователь";
			
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта, ОбъектДоступа);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И НЕ СоставСубъектов.ОбъектОснование Ссылка Справочник.ДелегированиеПрав";
		КонецЕсли;
			
		Если Не ДопНастройки.ДобавлятьРуководителей Тогда
			ДопУсловия = ДопУсловия + ?(ДопУсловия = "", "", Символы.ПС)
				+ "И НЕ СоставСубъектов.ОбъектОснование Ссылка Справочник.СтруктураПредприятия";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	КонецЕсли;
	
	Если Пользователи = Неопределено Тогда
		ЗаменяемыеПодстроки.Вставить("%ОтборПоПользователю%", "");
	Иначе
		ЗаменяемыеПодстроки.Вставить("%ОтборПоПользователю%", "И СоставСубъектов.Пользователь В (&Пользователи)");
	КонецЕсли;
	
	Для Каждого Эл Из ЗаменяемыеПодстроки Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	ОбластиДелегирования = 
		ДокументооборотПраваДоступаПереопределяемый.ПолучитьОбластиДелегированияПоИОМ(ИдентификаторОМ);
	
	Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТаблицаПрав = Новый ТаблицаЗначений;
	ТаблицаПрав.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаПрав.Колонки.Добавить("Чтение", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Изменение", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Добавление", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Удаление", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("УправлениеПравами", ТипБулево);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	// Добавление пользователей с неограниченными правами на таблицу
	Если УчитыватьНеограниченныеПрава Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.ГруппаПользователей КАК Участник,
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ УчастникиГруппДоступа
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО СоставыГруппПользователей.Пользователь = Пользователи.Ссылка
			|%ОтборПоПользователю%
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Пользователи.Ссылка,
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|%ОтборПоПользователю%
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УчастникиГруппДоступа.Пользователь,
			|	МАКСИМУМ(ПраваГруппДоступаНаТаблицы.ЧтениеБезОграничения) КАК Чтение,
			|	МАКСИМУМ(ПраваГруппДоступаНаТаблицы.ИзменениеБезОграничения) КАК Изменение,
			|	МАКСИМУМ(ПраваГруппДоступаНаТаблицы.УдалениеБезОграничения) КАК Удаление,
			|	МАКСИМУМ(ПраваГруппДоступаНаТаблицы.ПраваБезОграничения) КАК УправлениеПравами,
			|	ВЫБОР
			|		КОГДА МАКСИМУМ(ПраваГруппДоступаНаТаблицы.ДобавлениеБезОграничения) = ИСТИНА
			|				И МАКСИМУМ(ПраваГруппДоступаНаТаблицы.ИзменениеБезОграничения) = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Добавление
			|ИЗ
			|	РегистрСведений.ПраваГруппДоступаНаТаблицы КАК ПраваГруппДоступаНаТаблицы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчастникиГруппДоступа КАК УчастникиГруппДоступа
			|			ПО (УчастникиГруппДоступа.Участник = ГруппыДоступаПользователи.Пользователь)
			|		ПО ПраваГруппДоступаНаТаблицы.ГруппаДоступа = ГруппыДоступаПользователи.Ссылка
			|ГДЕ
			|	ПраваГруппДоступаНаТаблицы.Таблица = &ИдентификаторОМ
			|	И (ПраваГруппДоступаНаТаблицы.ЧтениеБезОграничения = ИСТИНА
			|			ИЛИ ПраваГруппДоступаНаТаблицы.ИзменениеБезОграничения = ИСТИНА
			|			ИЛИ ПраваГруппДоступаНаТаблицы.УдалениеБезОграничения = ИСТИНА
			|			ИЛИ ПраваГруппДоступаНаТаблицы.ПраваБезОграничения = ИСТИНА)
			|
			|СГРУППИРОВАТЬ ПО
			|	УчастникиГруппДоступа.Пользователь");
			
		Если Пользователи = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоПользователю%", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоПользователю%", "ГДЕ Пользователи.Ссылка В(&Пользователи)");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
		КонецЦикла;
		
		ТаблицаПрав.Свернуть("Пользователь", "Чтение, Изменение, Добавление, Удаление, УправлениеПравами");
		
	КонецЕсли;
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает таблицу прав объекта, отсортированную по наименованию пользователя и с колонкой "Картинка"
// 
Функция ПолучитьТаблицуПравДляОтображенияВИнтерфейсе(ОбъектДоступа) Экспорт
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ПолучитьПраваПользователейПоОбъекту(ОбъектДоступа, Истина);
	
	// Сортировка таблицы
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаПрав.*
		|ПОМЕСТИТЬ ТаблицаПрав
		|ИЗ
		|	&ТаблицаПрав КАК ТаблицаПрав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПрав.*,
		|	Пользователи.Наименование КАК НаименованиеПользователя
		|ИЗ
		|	ТаблицаПрав КАК ТаблицаПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ТаблицаПрав.Пользователь = Пользователи.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеПользователя");
		
	Запрос.УстановитьПараметр("ТаблицаПрав", ТаблицаПрав);
	ТаблицаПрав = Запрос.Выполнить().Выгрузить();
	
	// Добавление картинки
	ТаблицаПрав.Колонки.Добавить("Картинка");
	ТаблицаПрав.ЗаполнитьЗначения(Истина, "Картинка");
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает структуру настроек, которые будут использоваться при получении прав объекта
//
// Параметры:
//  ОбъектДоступа - Ссылка - объект доступа
//  ТипОбъекта - Тип - тип объекта доступа
//	
// Возвращаемое значение: 
//  Структура - структура настроек
//
Функция ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта, ОбъектДоступа = Неопределено) Экспорт
	
	ДопНастройки = Новый Структура;
	ДопНастройки.Вставить("ДобавлятьДелегатов", Истина);
	ДопНастройки.Вставить("ДобавлятьРуководителей", Истина);
	
	// Исключения
	Если ТипОбъекта = Тип("СправочникСсылка.Инструкции") Тогда
		ДопНастройки.ДобавлятьДелегатов = Ложь;
		ДопНастройки.ДобавлятьРуководителей = Ложь;
	КонецЕсли;
	
	// Переопределяемая часть
	ДокументооборотПраваДоступаПереопределяемый.ЗаполнитьДопНастройкиДляПолученияПравПоОбъекту(
		ДопНастройки, ТипОбъекта, ОбъектДоступа);
	
	Возврат ДопНастройки;
	
КонецФункции

// Обновляет права доступа по указанному дескриптору
//
Процедура ОбновитьПраваДоступаПоДескриптору(
	Дескриптор, Немедленно = Неопределено, ОбновитьЗависимыеНемедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Дескриптор);
	Если Менеджер = Справочники.ДескрипторыДоступаОбъектов Тогда
		Менеджер.ОбновитьПрава(
			Дескриптор,
			Неопределено, // Протокол
			Немедленно,
			ОбновитьЗависимыеНемедленно);
	Иначе
		Менеджер.ОбновитьПрава(
			Дескриптор,
			Неопределено, // Протокол
			Немедленно);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет сведения о правах пользователя в соответствие, объединяя их с уже 
// существующими сведениями для данного пользователя
Процедура ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Пользователь, Знач Права) Экспорт
	
	Эл = ПраваДоступа.Получить(Пользователь);
	
	Если Эл <> Неопределено Тогда
		
		Эл.Чтение = Эл.Чтение ИЛИ Права.Чтение;
		Эл.Добавление = Эл.Добавление ИЛИ Права.Добавление;
		Эл.Изменение = Эл.Изменение ИЛИ Права.Изменение;
		Эл.Удаление = Эл.Удаление ИЛИ Права.Удаление;
		Эл.УправлениеПравами = Эл.УправлениеПравами ИЛИ Права.УправлениеПравами;
		
	Иначе
		
		Эл = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
		ЗаполнитьЗначенияСвойств(Эл, Права);
		
	КонецЕсли;	
	
	ПраваДоступа.Вставить(Пользователь, Эл);
	
КонецПроцедуры

// Добавляет указанные права указанного пользователя или роли к соответствию прав,
// производит автоматическое разыменование роли до конкретных пользователей
Процедура ДобавитьПользователяВСоответствиеПрав(
	ПраваДоступа,
	Пользователь, 
	ОсновнойОбъектАдресации, 
	ДополнительныйОбъектАдресации,
	Знач Права) Экспорт
	
	// Если пользователь не указан, то запись не добавляется
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;	
		
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ПользовательУдален = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ПометкаУдаления");
		Если ПользовательУдален <> Истина Тогда
			ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Пользователь, Права);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(
			Пользователь,
			ОсновнойОбъектАдресации, 
			ДополнительныйОбъектАдресации);
			
		Для каждого Эл Из ИсполнителиРоли Цикл
			ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Эл.Исполнитель, Права);
		КонецЦикла;				
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда	
		
		ПользователиГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Пользователь);
		
		Для каждого Эл Из ПользователиГруппы Цикл
			ДобавитьЗаписьВСоответствиеПрав(ПраваДоступа, Эл.Пользователь, Права);
		КонецЦикла;
		
	Иначе
		
		ВызватьИсключение(НСтр("ru = 'Неизвестный тип пользователя.'"));
		
	КонецЕсли;	
	
КонецПроцедуры

// Определяет дескриптор доступа для указанного объекта доступа
// Пр необходимости создает новый дескриптор, привязывает его к 
// объекту и вычисляет права
Функция ОпределитьДескрипторДоступаОбъекта(ОбъектДоступа, ОпределятьЗависимыеПрава = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ссылки на подходящий дескриптор
	Дескриптор = ПолучитьДескрипторДоступа(ОбъектДоступа);
	
	// Сохранение соответствия объекта доступа и его дескриптора
	РегистрыСведений.ДескрипторыДоступаДляОбъектов.Сохранить(
		Дескриптор.Ссылка, ОбъектДоступа.Ссылка, ОпределятьЗависимыеПрава);
	
	Возврат Дескриптор;
	
КонецФункции	

// Определяет дескриптор доступа для указанного владельца файла
// При необходимости создает новый дескриптор, привязывает его к дескриптору
// владельца файла и вычисляет права
Функция ОпределитьДескрипторДоступаФайлаПоВладельцу(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение ссылки на подходящий дескриптор
	Дескриптор = ПолучитьДескрипторДоступаФайла(ВладелецФайла);
	
	Возврат Дескриптор;
	
КонецФункции	

// Определяет дескриптор(ы) доступа для указанного набора записей
// При необходимости создает новый дескриптор и вычисляет права
Функция ОпределитьДескрипторДоступаНабораЗаписей(НаборЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеНабораЗаписей = НаборЗаписей.Метаданные();
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеНабораЗаписей);
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Дескриптор = ПолучитьДескрипторДоступаЗаписиНабораЗаписей(
			ИдентификаторОбъектаМетаданных, 
			Запись);
		
	КонецЦикла;
	
	Возврат Дескриптор;
	
КонецФункции	

// Копирует права указанного объекта в указанные ПраваДоступа
Процедура СкопироватьПраваОбъекта(ОбъектДоступа, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Эл из ПраваДоступа Цикл
		ВызватьИсключение НСтр("ru = 'Для копирования прав объекта указан не пустой набор прав.'");
	КонецЦикла;
	
	ДескрипторДоступа = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(ОбъектДоступа);

	Если ЗначениеЗаполнено(ДескрипторДоступа) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПоДескрипторамДоступа.Добавление,
			|	ПраваПоДескрипторамДоступа.Изменение,
			|	ПраваПоДескрипторамДоступа.Удаление,
			|	ПраваПоДескрипторамДоступа.УправлениеПравами,
			|	ПраваПоДескрипторамДоступа.Чтение,
			|	ПраваПоДескрипторамДоступа.Пользователь
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Дескриптор = &Дескриптор";

		Запрос.УстановитьПараметр("Дескриптор", ДескрипторДоступа);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
			ПраваПользователя.Чтение = ВыборкаДетальныеЗаписи.Чтение;
			ПраваПользователя.Добавление = ВыборкаДетальныеЗаписи.Изменение; // По умолчанию право добавления не отличается от права изменения
			ПраваПользователя.Изменение = ВыборкаДетальныеЗаписи.Изменение;
			ПраваПользователя.Удаление = ВыборкаДетальныеЗаписи.Изменение; // По умолчанию право удаления не отличается от права изменения
			ПраваПользователя.УправлениеПравами = ВыборкаДетальныеЗаписи.УправлениеПравами;
			
			ПраваДоступа.Вставить(ВыборкаДетальныеЗаписи.Пользователь, ПраваПользователя);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Копирует права указанного дескриптора в указанные ПраваДоступа
Процедура СкопироватьПраваДескриптора(ДескрипторДоступа, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Эл из ПраваДоступа Цикл
		ВызватьИсключение НСтр("ru = 'Для копирования прав объекта указан не пустой набор прав.'");
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДескрипторДоступа) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПоДескрипторамДоступа.Добавление,
			|	ПраваПоДескрипторамДоступа.Изменение,
			|	ПраваПоДескрипторамДоступа.Удаление,
			|	ПраваПоДескрипторамДоступа.УправлениеПравами,
			|	ПраваПоДескрипторамДоступа.Чтение,
			|	ПраваПоДескрипторамДоступа.Пользователь
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Дескриптор = &Дескриптор";

		Запрос.УстановитьПараметр("Дескриптор", ДескрипторДоступа);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами");
			ПраваПользователя.Чтение = ВыборкаДетальныеЗаписи.Чтение;
			ПраваПользователя.Добавление = ВыборкаДетальныеЗаписи.Изменение; // По умолчанию право добавления не отличается от права изменения
			ПраваПользователя.Изменение = ВыборкаДетальныеЗаписи.Изменение;
			ПраваПользователя.Удаление = ВыборкаДетальныеЗаписи.Изменение; // По умолчанию право удаления не отличается от права изменения
			ПраваПользователя.УправлениеПравами = ВыборкаДетальныеЗаписи.УправлениеПравами;
			
			ПраваДоступа.Вставить(ВыборкаДетальныеЗаписи.Пользователь, ПраваПользователя);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Умножает структуру прав доступа для указанных объектов для всех пользователей 
Функция УмножитьПраваОбъектов(ОбъектыДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПоДескрипторамДоступа.Добавление,
		|	ПраваПоДескрипторамДоступа.Изменение,
		|	ПраваПоДескрипторамДоступа.Удаление,
		|	ПраваПоДескрипторамДоступа.УправлениеПравами,
		|	ПраваПоДескрипторамДоступа.Чтение,
		|	ПраваПоДескрипторамДоступа.Пользователь
		|ПОМЕСТИТЬ ПраваВременная
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаДляОбъектов.Дескриптор
		|ГДЕ
		|	ДескрипторыДоступаДляОбъектов.Объект В(&ОбъектыДоступа)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПраваПоДескрипторамДоступа.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваВременная.Пользователь,
		|	КОЛИЧЕСТВО(ПраваВременная.Добавление) КАК ЧислоРазрешенных
		|ПОМЕСТИТЬ ПраваДобавлениеВременная
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|ГДЕ
		|	ПраваВременная.Добавление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваВременная.Пользователь
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПраваВременная.Добавление) = &КоличествоЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваВременная.Пользователь,
		|	КОЛИЧЕСТВО(ПраваВременная.Изменение) КАК ЧислоРазрешенных
		|ПОМЕСТИТЬ ПраваИзменениеВременная
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|ГДЕ
		|	ПраваВременная.Изменение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваВременная.Пользователь
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПраваВременная.Изменение) = &КоличествоЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваВременная.Пользователь,
		|	КОЛИЧЕСТВО(ПраваВременная.Удаление) КАК ЧислоРазрешенных
		|ПОМЕСТИТЬ ПраваУдалениеВременная
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|ГДЕ
		|	ПраваВременная.Удаление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваВременная.Пользователь
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПраваВременная.Удаление) = &КоличествоЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваВременная.Пользователь,
		|	КОЛИЧЕСТВО(ПраваВременная.УправлениеПравами) КАК ЧислоРазрешенных
		|ПОМЕСТИТЬ ПраваУправлениеПравамиВременная
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|ГДЕ
		|	ПраваВременная.УправлениеПравами
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваВременная.Пользователь
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПраваВременная.УправлениеПравами) = &КоличествоЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваВременная.Пользователь,
		|	КОЛИЧЕСТВО(ПраваВременная.Чтение) КАК ЧислоРазрешенных
		|ПОМЕСТИТЬ ПраваЧтениеВременная
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|ГДЕ
		|	ПраваВременная.Чтение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваВременная.Пользователь
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ПраваВременная.Чтение) = &КоличествоЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваВременная.Пользователь,
		|	ВЫБОР
		|		КОГДА ПраваДобавлениеВременная.Пользователь ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Добавление,
		|	ВЫБОР
		|		КОГДА ПраваИзменениеВременная.Пользователь ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Изменение,
		|	ВЫБОР
		|		КОГДА ПраваУправлениеПравамиВременная.Пользователь ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Удаление,
		|	ВЫБОР
		|		КОГДА ПраваУдалениеВременная.Пользователь ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УправлениеПравами,
		|	ВЫБОР
		|		КОГДА ПраваЧтениеВременная.Пользователь ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Чтение
		|ИЗ
		|	ПраваВременная КАК ПраваВременная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваДобавлениеВременная КАК ПраваДобавлениеВременная
		|		ПО (ПраваДобавлениеВременная.Пользователь = ПраваВременная.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваИзменениеВременная КАК ПраваИзменениеВременная
		|		ПО (ПраваИзменениеВременная.Пользователь = ПраваВременная.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваУдалениеВременная КАК ПраваУдалениеВременная
		|		ПО (ПраваУдалениеВременная.Пользователь = ПраваВременная.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваУправлениеПравамиВременная КАК ПраваУправлениеПравамиВременная
		|		ПО (ПраваУправлениеПравамиВременная.Пользователь = ПраваВременная.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПраваЧтениеВременная КАК ПраваЧтениеВременная
		|		ПО (ПраваЧтениеВременная.Пользователь = ПраваВременная.Пользователь)
		|ГДЕ
		|	(НЕ ПраваДобавлениеВременная.Пользователь ЕСТЬ NULL 
		|			ИЛИ НЕ ПраваИзменениеВременная.Пользователь ЕСТЬ NULL 
		|			ИЛИ НЕ ПраваУправлениеПравамиВременная.Пользователь ЕСТЬ NULL 
		|			ИЛИ НЕ ПраваУдалениеВременная.Пользователь ЕСТЬ NULL 
		|			ИЛИ НЕ ПраваЧтениеВременная.Пользователь ЕСТЬ NULL )";
		
	Запрос.УстановитьПараметр("ОбъектыДоступа", ОбъектыДоступа);
    Запрос.УстановитьПараметр("КоличествоЗаписей", ОбъектыДоступа.Количество());
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

// Удаляет все данные, связанные с правами доступа
// Используется для полного обновления прав доступа ко всем данным информационной базы
Процедура УдалитьВсеДанныеОПравахДоступа(ЭтоФоновоеЗадание = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоФоновоеЗадание И Константы.ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа.Получить() Тогда
		
		// Отключение регл. заданий
		ЗаданиеОперативноеВключено = ОтключитьОбработкуОперативнойОчереди();
		ЗаданиеДолгоеВключено = ОтключитьОбработкуДолгойОчереди();
		
		// Удаление всех прав объектов
		Набор = РегистрыСведений.ПраваПоДескрипторамДоступа.СоздатьНаборЗаписей();
		Набор.Записать();
		
		// Включение регл. заданий
		Если ЗаданиеОперативноеВключено Тогда
			ВключитьОбработкуОперативнойОчереди();
		КонецЕсли;
		Если ЗаданиеДолгоеВключено Тогда
			ВключитьОбработкуДолгойОчереди();
		КонецЕсли;
		
		Возврат; // Остальные данные будут удалены фоновым заданием
		
	КонецЕсли;
	
	// Очистка очереди
	РегистрыСведений.ОчередьОбновленияПравДоступа.Очистить();

	// Удаление всех прав объектов
	Набор = РегистрыСведений.ПраваПоДескрипторамДоступа.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Набор = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Выборка = Справочники.ДескрипторыДоступаОбъектов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.Удалить();	
	КонецЦикла;
			
	// Удаление всех прав файлов
	НаборЗаписей = РегистрыСведений.ДескрипторыДоступаДляФайлов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
		
	Выборка = Справочники.ДескрипторыДоступаФайлов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.Удалить();	
	КонецЦикла;
	
	// Удаление всех прав регистров 
	Выборка = Справочники.ДескрипторыДоступаРегистров.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.Удалить();	
	КонецЦикла;
	
КонецПроцедуры

// Обновляет сведения о правах доступа всех данных информационной базы.
Процедура ОбновитьПраваВсехДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяДата();
	
	// Обновление состава субъектов
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные();
	
	// Объекты, права по которым должны рассчитываться в последнюю очередь
	ЗависимыеОбъекты = ДокументооборотПраваДоступаПереопределяемый.ПолучитьИменаОбъектовСЗависимымиДескрипторами();
	
	// Пересчет прав
    ТипыВладельцев = Метаданные.ПодпискиНаСобытия.ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа.Источник.Типы();
    Для Каждого Тип Из ТипыВладельцев Цикл 

        ИмяОбъекта = Метаданные.НайтиПоТипу(Тип).ПолноеИмя(); 
		Если ЗависимыеОбъекты.Найти(ИмяОбъекта) = Неопределено Тогда
			ОпределитьПраваПоИмениОбъекта(ИмяОбъекта);
		КонецЕсли;

    КонецЦикла;
	
	// Пересчет прав зависимых объектов
    Для Каждого ЗависимыйОбъект Из ЗависимыеОбъекты Цикл 
		ОпределитьПраваПоИмениОбъекта(ЗависимыйОбъект);
    КонецЦикла;
	
	// Пересчет прав всех файлов
	Запрос = Новый Запрос; 
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.ВладелецФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы"; 

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ОпределитьДескрипторДоступаФайлаПоВладельцу(Выборка.ВладелецФайла);
	КонецЦикла;
	
	// Пересчет прав всех регистров
    ТипыВладельцев = Метаданные.ПодпискиНаСобытия.ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей.Источник.Типы(); 
    Для Каждого Тип Из ТипыВладельцев Цикл 

		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип);
        ПолноеИмя = МетаданныеРегистра.ПолноеИмя(); 
		ОпределитьПраваПоИмениРегистра(ПолноеИмя)
		
    КонецЦикла;

КонецПроцедуры	

// Определяет права доступа для всех объектов указанной таблицы
// Если права для этого объекта уже определены, то ничего не делает
//
Процедура ОпределитьПраваПоИмениОбъекта(Таблица) Экспорт

    Запрос = Новый Запрос; 
    Запрос.Текст = 
        "ВЫБРАТЬ 
        |    Данные.Ссылка 
        |ИЗ 
        |    [Таблица] КАК Данные"; 

    Запрос.Текст = СтрЗаменить(Запрос.Текст, "[Таблица]", Таблица); 
    Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл 
    	ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
	КонецЦикла;
		
КонецПроцедуры		

// Определяет права доступа для всех записей указанного регистра
// Если права для записей этого регистра уже определены, то ничего не делает
Процедура ОпределитьПраваПоИмениРегистра(ПолноеИмя) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	ПодчиненРегистратору = Ложь;
	
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
		
		ПодчиненРегистратору = Истина;
		
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) Тогда
		
		Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ПодчиненРегистратору = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПодчиненРегистратору Тогда
			
		// Пересчет прав всех записей по уникальным регистраторам
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Регистр.Регистратор";
		Запрос.Текст = Запрос.Текст + 
		    "
		    |ИЗ
		    |	%1 КАК Регистр"; 
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ПолноеИмя);	

		Выборка = Запрос.Выполнить().Выбрать(); 

		// Обход результатов запроса
		Пока Выборка.Следующий() Цикл
			
			// Чтение набора записей с отбором по регистратору
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			// Определение дескриптора для набора записей
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаНабораЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
	Иначе	
		
		СведенияОПолях = Новый Структура("ОбъектДоступа1, ОбъектДоступа2, ОбъектДоступа3");
		МенеджерРегистра.ЗаполнитьСведенияОПоляхДоступа(СведенияОПолях);
		
		// Пересчет прав всех уникальных записей всех регистров
		Запрос = Новый Запрос; 
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ";
		
		// Добавление к запросу правообразующих полей
		Запрос.Текст = Запрос.Текст + 
			"Регистр." + СведенияОПолях.ОбъектДоступа1;
		Если СведенияОПолях.ОбъектДоступа2 <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ", Регистр." + СведенияОПолях.ОбъектДоступа2;
		КонецЕсли;	
		Если СведенияОПолях.ОбъектДоступа3 <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ", Регистр." + СведенияОПолях.ОбъектДоступа3;
		КонецЕсли;	
		
		// Добавление к запросу всех измерений регистра
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			
			Если Измерение.Имя <> СведенияОПолях.ОбъектДоступа1 
				И Измерение.Имя <> СведенияОПолях.ОбъектДоступа2 
				И Измерение.Имя <> СведенияОПолях.ОбъектДоступа2 Тогда
				
				Запрос.Текст = Запрос.Текст + ", Регистр." + Измерение.Имя;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + 
		    "
		    |ИЗ
		    |	%1 КАК Регистр"; 
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ПолноеИмя);	

		Выборка = Запрос.Выполнить().Выбрать(); 

		// Обход результатов запроса
		Пока Выборка.Следующий() Цикл
			
			// Чтение набора записей
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
			КонецЦикла;
			НаборЗаписей.Прочитать();
			
			// Определение дескриптора для набора записей
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаНабораЗаписей(НаборЗаписей);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает Истина если у указанного пользователя есть указанная роль
// Если пользователь не указан, то используется текущий пользователь
Функция ЕстьРоль(Роль, Объект = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка, что роль назначается пользователю через группу доступа по профилю.
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда
		Пользователь  = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти(Роль);
	ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументооборотПользователиГруппДоступа.ГруппаДоступа
		|ИЗ
		|	РегистрСведений.ДокументооборотПользователиГруппДоступа КАК ДокументооборотПользователиГруппДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ДокументооборотПользователиГруппДоступа.ГруппаДоступа.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ДокументооборотПользователиГруппДоступа.Пользователь = &Пользователь
		|	И ПрофилиГруппДоступаРоли.Роль = &Роль";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", ИдентификаторРоли);
	
	Результат = Запрос.Выполнить();
	ЕстьРоль = Не Результат.Пустой();
	
	// Проверка значений доступа
	Если ЕстьРоль И Объект <> Неопределено
		И ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		ЕстьРоль = Ложь;
		ДескрипторОбъекта = ПолучитьДескрипторДоступа(Объект);
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЕстьРоль = Справочники.ДескрипторыДоступаОбъектов.ДоступПоЗначениямРазрешен(
				ДескрипторОбъекта, Выборка.ГруппаДоступа);
				
			Если ЕстьРоль Тогда
				Прервать;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьРоль;
	
КонецФункции

// Вызывается рекурсивно
Процедура ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(ГруппаПользователей, Немедленно = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Рекурсивный вызов обновления для родительской группы пользователей
	Если ЗначениеЗаполнено(ГруппаПользователей.Родитель) Тогда
		ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(ГруппаПользователей.Родитель, Немедленно);
	КонецЕсли;	
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() 
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(ГруппаПользователей, Дата("00010101000000"));
		Возврат;
		
	КонецЕсли;
	
	// Группы доступа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь";

	Запрос.УстановитьПараметр("Пользователь", ГруппаПользователей.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбновитьПраваЗависящиеОтГруппыДоступа(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;

	// РегистрСведений НастройкиПравОбъектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиПравОбъектов.Объект,
		|	НастройкиПравОбъектов.НаследованиеРазрешено
		|ПОМЕСТИТЬ ВладельцыНастроек
		|ИЗ
		|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		|ГДЕ
		|	НастройкиПравОбъектов.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВладельцыНастроек.Объект
		|ИЗ
		|	ВладельцыНастроек КАК ВладельцыНастроек
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаследованиеНастроекПравОбъектов.Объект
		|ИЗ
		|	ВладельцыНастроек КАК ВладельцыНастроек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		|		ПО ВладельцыНастроек.Объект = НаследованиеНастроекПравОбъектов.Родитель
		|			И (НаследованиеНастроекПравОбъектов.Наследовать)
		|			И (ВладельцыНастроек.НаследованиеРазрешено)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекОтВладельцев
		|		ПО ВладельцыНастроек.Объект = НаследованиеНастроекОтВладельцев.Объект
		|			И ВладельцыНастроек.Объект = НаследованиеНастроекОтВладельцев.Родитель
		|			И (НаследованиеНастроекОтВладельцев.Наследовать)";
		
	Запрос.УстановитьПараметр("Пользователь", ГруппаПользователей.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДескрипторПапки = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
			ВыборкаДетальныеЗаписи.Объект);
			
		Если ЗначениеЗаполнено(ДескрипторПапки) Тогда
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ДескрипторПапки);
		КонецЕсли;
		
	КонецЦикла;

	// Табличная часть "РабочаяГруппа" у дескриптора доступа объекта
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
		|ГДЕ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Участник = &ГруппаПользователей";

	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	// Табличная часть "Пользователи" у дескриптора доступа объекта
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовПользователи.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
		|ГДЕ
		|	ДескрипторыДоступаОбъектовПользователи.Пользователь = &ГруппаПользователей";

	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	// Если изменена группа ВсеПользователи, то выполняется обновление всех дескрипторов 
	// для элементов справочников, которые являются группами. Т.к. доступ к группам имеют 
	// все пользователи без ограничений
	Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Группа = Истина";

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;

	КонецЕсли;	

КонецПроцедуры

// Обновляет все дескрипторы прав доступа, в правах которых встречается 
// указанный пользователь
Процедура ОбновитьПраваПоПользователю(Пользователь, Немедленно = Ложь) Экспорт
	
	Если Не Немедленно Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Пользователь, Дата("00010101000000"));
		
	Иначе	
	
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПраваПоДескрипторамДоступа.Дескриптор
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Пользователь = &Пользователь";

		Запрос.УстановитьПараметр("Пользователь", Пользователь);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Немедленно = Не ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбновитьПраваДоступаПоДескриптору(ВыборкаДетальныеЗаписи.Дескриптор, Немедленно);
		КонецЦикла;
	
	КонецЕсли;	
	
КонецПроцедуры

// Восстанавливает все права пользователя, которые у него были до
// пометки на удаление
Процедура ВосстановитьПраваПользователя(Пользователь, Немедленно = Ложь) Экспорт

	// По группе доступа
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПраваЗависящиеОтГруппыДоступа(Выборка.ГруппаДоступа);
	КонецЦикла;
	
	// По группе пользователей
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаПользователей
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(Выборка.ГруппаПользователей);
	КонецЦикла;
	
	// По рабочей группе дескриптора
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка КАК Дескриптор
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
		|ГДЕ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Участник = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПраваДоступаПоДескриптору(Выборка.Дескриптор, Немедленно);
	КонецЦикла;
	
	// По пользователям дескриптора
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовПользователи.Ссылка КАК Дескриптор
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
		|ГДЕ
		|	ДескрипторыДоступаОбъектовПользователи.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПраваДоступаПоДескриптору(Выборка.Дескриптор, Немедленно);
	КонецЦикла;
	
	// По роли исполнителя в дескрипторе
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовПользователи.Ссылка КАК Дескриптор
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
		|		ПО ИсполнителиЗадач.РольИсполнителя = ДескрипторыДоступаОбъектовПользователи.Пользователь
		|			И ИсполнителиЗадач.ОсновнойОбъектАдресации = ДескрипторыДоступаОбъектовПользователи.ОсновнойОбъектАдресации
		|			И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ДескрипторыДоступаОбъектовПользователи.ДополнительныйОбъектАдресации
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
		|		ПО ИсполнителиЗадач.ОсновнойОбъектАдресации = ДескрипторыДоступаОбъектовРабочаяГруппа.ОсновнойОбъектАдресации
		|			И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ДескрипторыДоступаОбъектовРабочаяГруппа.ДополнительныйОбъектАдресации
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьПраваДоступаПоДескриптору(Выборка.Дескриптор, Немедленно);
	КонецЦикла;
		
	// Права папок
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиПравОбъектов.Объект
		|ИЗ
		|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		|ГДЕ
		|	НастройкиПравОбъектов.Пользователь = &Пользователь");
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДескрипторПапки = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
			Выборка.Объект);
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ДескрипторПапки);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ТЧ дескриптора НастройкаПрав по настройкам папки
Процедура ЗаполнитьНастройкиДескриптора(ДескрипторДоступа, Папка) Экспорт
	
	НастройкиПравПапки = ПолучитьНастройкиПравПапки(Папка);
	ДескрипторДоступа.НастройкаПрав.Загрузить(НастройкиПравПапки);
	
КонецПроцедуры

// Возвращает таблицу настроек прав папки
Функция ПолучитьНастройкиПравПапки(Папка) Экспорт
	
	НастройкиПравПапки = Новый ТаблицаЗначений;
	НастройкиПравПапки.Колонки.Добавить("Пользователь");
	НастройкиПравПапки.Колонки.Добавить("Право");
	НастройкиПравПапки.Колонки.Добавить("ПравоЗапрещено");
	
	// Собственные права папки
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиПравОбъектов.Пользователь КАК Пользователь,
		|	НастройкиПравОбъектов.Право КАК Право,
		|	НастройкиПравОбъектов.ПравоЗапрещено КАК ПравоЗапрещено,
		|	НаследованиеНастроекПравОбъектов.Наследовать
		|ИЗ
		|	РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		|		ПО НастройкиПравОбъектов.Объект = НаследованиеНастроекПравОбъектов.Родитель
		|ГДЕ
		|	НаследованиеНастроекПравОбъектов.Объект = &Объект
		|	И НаследованиеНастроекПравОбъектов.Родитель = &Объект");
		
	Запрос.УстановитьПараметр("Объект", Папка.Ссылка);
	Результат = Запрос.Выполнить();
	
	Наследовать = Истина;
	Если Не Результат.Пустой() Тогда
		ТаблицаПрав = Результат.Выгрузить();
		Наследовать = ТаблицаПрав[0].Наследовать;
		Если ЗначениеЗаполнено(ТаблицаПрав[0].Право) Тогда
			НастройкиПравПапки = ТаблицаПрав;
		КонецЕсли;
	КонецЕсли;
	
	// Наследуемые права
	Если Наследовать Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиПравОбъектов.Пользователь,
		               |	НастройкиПравОбъектов.Право,
		               |	НастройкиПравОбъектов.ПравоЗапрещено
		               |ИЗ
		               |	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		               |		ПО (НаследованиеНастроекПравОбъектов.Объект = &Объект)
		               |			И (НаследованиеНастроекПравОбъектов.Родитель <> &Объект)
		               |			И (НаследованиеНастроекПравОбъектов.Наследовать)
		               |			И НастройкиПравОбъектов.Объект = НаследованиеНастроекПравОбъектов.Родитель
		               |			И (НастройкиПравОбъектов.НаследованиеРазрешено)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НастройкиПравОбъектов.Пользователь,
		               |	НастройкиПравОбъектов.Право";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НастройкиПравПапки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкиПравПапки;
	
КонецФункции

// Включает регл. задание обработки оперативной очереди
Процедура ВключитьОбработкуОперативнойОчереди() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаОперативное");
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

// Включает регл. задание обработки долгой очереди
Процедура ВключитьОбработкуДолгойОчереди() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаДолгое");
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

// Останавливает регл. задание обработки оперативной очереди
// Возвращаемое значение:
// Истина, если регл. задание было активно
// Ложь, если регл. задание уже было отключено
Функция ОтключитьОбработкуОперативнойОчереди(ТолькоФоновоеЗадание = Ложь) Экспорт
	
	// Отключение регл. задания
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаОперативное");
	ЗаданиеАктивно = Задание.Использование;
	
	Если Не ТолькоФоновоеЗадание И ЗаданиеАктивно Тогда
		Задание.Использование = Ложь;
		Задание.Записать();
	КонецЕсли;
	
	// Остановка фонового задания
	Попытка
		ИДЗадания = Задание.УникальныйИдентификатор;
		Свойства = РегламентныеЗаданияСлужебный.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
		РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(Свойства.Идентификатор);
	Исключение
	КонецПопытки;
	
	Возврат ЗаданиеАктивно;
	
КонецФункции

// Останавливает регл. задание обработки долгой очереди
// Возвращаемое значение:
// Истина, если регл. задание было активно
// Ложь, если регл. задание уже было отключено
Функция ОтключитьОбработкуДолгойОчереди(ТолькоФоновоеЗадание = Ложь) Экспорт
	
	// Отключение регл. задания
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаДолгое");
	ЗаданиеАктивно = Задание.Использование;
	
	Если ЗаданиеАктивно Тогда
		
		Если Не ТолькоФоновоеЗадание Тогда
			Задание.Использование = Ложь;
			Задание.Записать();
		КонецЕсли;
		
		// Остановка фонового задания
		Попытка
			ИДЗадания = Задание.УникальныйИдентификатор;
			Свойства = РегламентныеЗаданияСлужебный.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
			РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(Свойства.Идентификатор);
		Исключение
		КонецПопытки;

	КонецЕсли;
	
	Возврат ЗаданиеАктивно;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок и регламентных заданий

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюОбъектаДоступа
Процедура ДокументооборотПраваДоступаПередЗаписьюОбъектаДоступа(Источник, Отказ) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение признака ЭтоНовый для использования в обработчике события ПриЗаписи
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
	// Сохранение старого дескриптора доступа для обнаружения того, что дескриптор изменен
	Если Не Источник.ЭтоНовый() Тогда
		СтарыйДескриптор = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(Источник.Ссылка);
		Источник.ДополнительныеСвойства.Вставить("СтарыйДескриптор", СтарыйДескриптор);
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюДокумента
Процедура ДокументооборотПраваДоступаПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	// Сохранение признака ЭтоНовый для использования в обработчике события ПриЗаписи
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа
Процедура ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа(Источник, Отказ) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимаПроверкаПравПоДескриптору = Не ПривилегированныйРежим() И Не РольДоступна("ПолныеПрава");
	Дескриптор = ОпределитьДескрипторДоступаОбъекта(Источник);
	
	// Проверка права добавления
	Если НеобходимаПроверкаПравПоДескриптору Тогда
		
		ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник));
		Права = ПолучитьПраваПоОбъекту(Источник.Ссылка);
		
		НетПрав = Ложь;
		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			// Для новых объектов проверяется право добавления
			Если Не Права.Добавление Тогда
				НетПрав = Истина;
			КонецЕсли;
				
		Иначе		
			
			// Для существующих объектов проверяется право изменения
			Если Не Права.Изменение Тогда
				НетПрав = Истина;				
			КонецЕсли;
				
		КонецЕсли;
		
		Если НетПрав Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции. 
				|Обратитесь к администратору.'");
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверка на изменение дескриптора
	Если Источник.ДополнительныеСвойства.Свойство("СтарыйДескриптор") Тогда
		
		// Если дескприптор поменялся, то обновляются права всех данных, 
		// которые зависят от этого объекта
		Если Источник.ДополнительныеСвойства.СтарыйДескриптор <> Дескриптор Тогда
			ОбновитьПраваЗависимыхДанных(Источник.Ссылка);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиФайла
Процедура ДокументооборотПраваДоступаПередЗаписьюФайла(Источник, Отказ) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Дескриптор = ПолучитьДескрипторДоступаФайла(Источник.ВладелецФайла);
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиФайла
Процедура ДокументооборотПраваДоступаПриЗаписиФайла(Источник, Отказ) Экспорт
	
	// Проверка права добавления
	Если Не ПривилегированныйРежим() И Не РольДоступна("ПолныеПрава") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
			И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			Права = ПолучитьПраваПоОбъекту(Источник.Ссылка);
			Если Не Права.Добавление Тогда
				ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции.
					|Обратитесь к администратору.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей
Процедура ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьДескрипторДоступаНабораЗаписей(Источник);
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Процедура ДокументооборотПередЗаписьюПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПередЗаписьюПравообразующихОбъектов(Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на то, что изменились правообразующие реквизиты
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
			"Состав, Родитель, ПометкаУдаления");
			
		Если РеквизитыСсылки.Состав = Неопределено Тогда
			СтарыйСостав = Источник.Состав.ВыгрузитьКолонки();
		Иначе
			СтарыйСостав = РеквизитыСсылки.Состав.Выгрузить();
		КонецЕсли;
			
		Если Источник.ЭтоНовый() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		ИначеЕсли Источник.Родитель <> РеквизитыСсылки.Родитель Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Источник.ДополнительныеСвойства.Вставить("СтарыйРодитель", РеквизитыСсылки.Родитель);
			
		ИначеЕсли Источник.ПометкаУдаления <> РеквизитыСсылки.ПометкаУдаления
			Или Источник.Состав.Количество() <> СтарыйСостав.Количество() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		Иначе	
			
			// Поэлементное сравнение
			ЗначениеИзменено = Ложь;
			Для Сч = 0 По СтарыйСостав.Количество() - 1 Цикл
				Если СтарыйСостав[Сч].Пользователь <> Источник.Состав[Сч].Пользователь Тогда
					ЗначениеИзменено = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ЗначениеИзменено Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		
		Если Не Источник.ЭтоГруппа Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
			Если Не Источник.ЭтоНовый() Тогда
				
				РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Источник.Ссылка, "Профиль, Пользователи");
				
				ЗначенияДоступа = ПолучитьЗначенияДоступаГруппыДоступа(Источник.Ссылка);
				Источник.ДополнительныеСвойства.Вставить("СтарыеЗначенияДоступа", ЗначенияДоступа);
				Источник.ДополнительныеСвойства.Вставить("СтарыйПрофиль", РеквизитыСсылки.Профиль);
				Источник.ДополнительныеСвойства.Вставить("СтарыйСостав", РеквизитыСсылки.Пользователи.Выгрузить());
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		
		ЭтоНовыйПользователь = Источник.ЭтоНовый();
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовыйПользователь);
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		
		СтараяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Ссылка, "ПометкаУдаления");
		
		ИзмененаПометкаУдаления = Источник.ПометкаУдаления <> СтараяПометкаУдаления;
		Источник.ДополнительныеСвойства.Вставить("ИзмененаПометкаУдаления", ИзмененаПометкаУдаления);
		
		// Запрет пометки руководителей и делегатов
		Если Не ЭтоНовыйПользователь
			И ИзмененаПометкаУдаления
			И Источник.ПометкаУдаления
			И НЕ Источник.ОбменДанными.Загрузка Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтруктураПредприятия.Представление КАК Подразделение
				|ИЗ
				|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
				|ГДЕ
				|	СтруктураПредприятия.Руководитель = &Пользователь
				|	И НЕ СтруктураПредприятия.ПометкаУдаления");
				
			Запрос.УстановитьПараметр("Пользователь", Источник.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЭтоРуководитель = Выборка.Следующий();
			Если ЭтоРуководитель Тогда
				Отказ = Истина;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя пометить на удаление пользователя ""%1"", 
						|т.к. он является руководителем подразделения ""%2"".'"),
					Источник.Ссылка,
					Выборка.Подразделение);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЕстьЗаписи
				|ИЗ
				|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
				|ГДЕ
				|	ДелегированиеПрав.Кому = &Пользователь
				|	И (ДелегированиеПрав.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ ДелегированиеПрав.ДатаНачалаДействия <= &ТекущаяДата)
				|	И (ДелегированиеПрав.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ ДелегированиеПрав.ДатаОкончанияДействия >= &ТекущаяДата)
				|	И НЕ ДелегированиеПрав.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("Пользователь", Источник.Ссылка);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			
			ЭтоДелегат = Не Запрос.Выполнить().Пустой();
			Если ЭтоДелегат Тогда
				Отказ = Истина;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя пометить на удаление пользователя ""%1"",
						|т.к. ему делегированы права других пользователей.'"),
					Источник.Ссылка);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда	
		
		Если Не Источник.ЭтоНовый() Тогда
			
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "Родитель, Руководитель");
			
			Если Источник.Родитель <> РеквизитыСсылки.Родитель Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("РодительИзменен");
			КонецЕсли;
			
			Если Источник.Руководитель <> РеквизитыСсылки.Руководитель Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("РуководительИзменен");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда	
		
		Если Источник.ЭтоНовый() Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "Роли, ВидыДоступа, ЗначенияДоступа");
		
		СтарыеРоли = РеквизитыСсылки.Роли.Выгрузить();
		СтарыеВидыДоступа = РеквизитыСсылки.ВидыДоступа.Выгрузить();
		СтарыеЗначенияДоступа = РеквизитыСсылки.ЗначенияДоступа.Выгрузить();
		
		Если Источник.Роли.Количество() <> СтарыеРоли.Количество()
			Или Источник.ВидыДоступа.Количество() <> СтарыеВидыДоступа.Количество()
			Или Источник.ЗначенияДоступа.Количество() <> СтарыеЗначенияДоступа.Количество() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		Иначе	
			
			// Поэлементное сравнение
			
			ЗначениеИзменено = Ложь;
			
			Для Сч = 0 По СтарыеРоли.Количество() - 1 Цикл
				Если СтарыеРоли[Сч].Роль <> Источник.Роли[Сч].Роль Тогда
					ЗначениеИзменено = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ЗначениеИзменено Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			КонецЕсли;
			
			Если Не ЗначениеИзменено Тогда
				Для Сч = 0 По СтарыеВидыДоступа.Количество() - 1 Цикл
					Если СтарыеВидыДоступа[Сч].ВидДоступа <> Источник.ВидыДоступа[Сч].ВидДоступа
						Или СтарыеВидыДоступа[Сч].ДоступРазрешен <> Источник.ВидыДоступа[Сч].ДоступРазрешен Тогда
						ЗначениеИзменено = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				Если ЗначениеИзменено Тогда
					Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеИзменено Тогда
				Для Сч = 0 По СтарыеЗначенияДоступа.Количество() - 1 Цикл
					Если СтарыеЗначенияДоступа[Сч].ВидДоступа <> Источник.ЗначенияДоступа[Сч].ВидДоступа
						Или СтарыеЗначенияДоступа[Сч].ЗначениеДоступа <> Источник.ЗначенияДоступа[Сч].ЗначениеДоступа Тогда
						ЗначениеИзменено = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				Если ЗначениеИзменено Тогда
					Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				КонецЕсли;
			КонецЕсли;
							
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Корреспонденты") Тогда
		
		Если Не Источник.ЭтоНовый() Тогда
			СтараяГруппаДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГруппаДоступа");
			Если Источник.ГруппаДоступа <> СтараяГруппаДоступа Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Обработчик подписки ДокументооборотПриЗаписиПравообразующихОбъектов
Процедура ДокументооборотПриЗаписиПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на то, что правообразующие свойства источника были изменены
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") 
		Или НЕ Источник.ДополнительныеСвойства.ЗначениеИзменено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Обработка источников разных типов
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПриЗаписиПравообразующихОбъектов(
		Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		// Перезагрузка регл. заданий - для корректной работы функций повторного использования
		ОтключитьОбработкуОперативнойОчереди(Истина);
		ОтключитьОбработкуДолгойОчереди(Истина);
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		Попытка
			
			Если Источник.ДополнительныеСвойства.Свойство("СтарыйРодитель") 
				И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.СтарыйРодитель) Тогда
				ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(
					Источник.ДополнительныеСвойства.СтарыйРодитель);
			КонецЕсли;
			
			ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(Источник.Ссылка);
			
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
			
		Исключение	
			
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
			ВызватьИсключение;
			
		КонецПопытки;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Пользователи") Тогда
		
		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			
			// Добавление пользователя как строки состава субъекта
			РегистрыСведений.СоставСубъектовПравДоступа.ДобавлениеПользователя(Источник.Ссылка);
			
			ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
			Попытка
				// При добавлении нового пользователя неявно меняется состав 
				// предопределенной виртуальной группы "Все пользователи"
				ОбновитьПраваОбъектовЗависящихОтГруппыПользователей(
					Справочники.ГруппыПользователей.ВсеПользователи);
				// Обновление пустых дескрипторов, которые дают разрешения всем пользователям
				ОбновитьПраваПустыхДескрипторов();
					
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
			Исключение	
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
				ВызватьИсключение;
			КонецПопытки;
			
		// Изменена пометка на удаление
		ИначеЕсли Источник.ДополнительныеСвойства.ИзмененаПометкаУдаления Тогда 
			
			Немедленно = Не ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа();
			Если Источник.ПометкаУдаления Тогда
				ОбновитьПраваПоПользователю(Источник.Ссылка, Немедленно);
			Иначе
				ВосстановитьПраваПользователя(Источник.Ссылка, Немедленно);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		
		Если Источник.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		
		// Отключение регл. заданий для корректной работы функций повторного использования
		ОтключитьОбработкуОперативнойОчереди(Истина);
		ОтключитьОбработкуДолгойОчереди(Истина);

		// Обновление сведений о составе групп доступа
		РегистрыСведений.ДокументооборотПользователиГруппДоступа.ОбновитьПоГруппеДоступа(Источник.Ссылка);
		
		Если Источник.ЭтоНовый() Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		
		Иначе
			
			СтарыеЗначенияДоступа = Новый Массив; 
			Если Источник.ДополнительныеСвойства.Свойство("СтарыеЗначенияДоступа") Тогда
				СтарыеЗначенияДоступа = Источник.ДополнительныеСвойства.СтарыеЗначенияДоступа;
			КонецЕсли;
			
			СтарыйПрофиль = Неопределено;
			Если Источник.ДополнительныеСвойства.Свойство("СтарыйПрофиль") Тогда
				СтарыйПрофиль = Источник.ДополнительныеСвойства.СтарыйПрофиль;
			КонецЕсли;
			
			СтарыйСостав = Неопределено;
			Если Источник.ДополнительныеСвойства.Свойство("СтарыйСостав") Тогда
				СтарыйСостав = Источник.ДополнительныеСвойства.СтарыйСостав;
			КонецЕсли;
			
			ЗначенияДоступаДляОбработки = Новый Массив;
			
			ПолныйПересчет = Ложь;
			
			// Проверка изменения профиля группы доступа
			Если СтарыйПрофиль <> Источник.Профиль Тогда
				ПолныйПересчет = Истина;
			КонецЕсли;
			
			// Проверка изменения состава участников
			Если СтарыйСостав = Неопределено 
				Или СтарыйСостав.Количество() <> Источник.Пользователи.Количество() Тогда
				
				ПолныйПересчет = Истина;
				
			Иначе	
				
				// Поэлементное сравнение старых и новых пользователей группы
				Для Сч = 0 По СтарыйСостав.Количество() - 1 Цикл
					Если СтарыйСостав[Сч].Пользователь <> Источник.Пользователи[Сч].Пользователь Тогда
						ПолныйПересчет = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;
			
			НовыеЗначенияДоступа = ПолучитьЗначенияДоступаГруппыДоступа(Источник.Ссылка);
			
			// Добавление новых значений доступа
			Для каждого Эл Из НовыеЗначенияДоступа Цикл 
				ЗначенияДоступаДляОбработки.Добавить(Эл);
			КонецЦикла;	
			
			Если ПолныйПересчет Тогда
				
				// Добавление старых значений доступа
				Для каждого Эл Из СтарыеЗначенияДоступа Цикл 
					ЗначенияДоступаДляОбработки.Добавить(Эл);
				КонецЦикла;	
				
			КонецЕсли;	
			
			// Обновление отобранных значений доступа
			ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
			Попытка
				ОбновитьПраваПоЗначениямВидовДоступа(ЗначенияДоступаДляОбработки);
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
			Исключение	
				ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
				ВызватьИсключение;
			КонецПопытки;
		
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("РуководительИзменен") Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ИзменениеРуководителяПодразделения(Источник);
		ИначеЕсли Источник.ДополнительныеСвойства.Свойство("РодительИзменен") Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные();
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		
		Если Не Источник.ЭтоНовый() Тогда
			ОбновитьПраваДескрипторовЗависящихОтПрофиля(Источник.Ссылка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ДелегированиеПрав") Тогда
		
		ДокументооборотПраваДоступаПереопределяемый.ПриЗаписиДелегированияПрав(Источник);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Корреспонденты") Тогда
		
		ОбновитьПраваПоКорреспонденту(Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры	

// Обработчик подписки ДокументооборотПередЗаписьюПравообразующихРегистров
Процедура ДокументооборотПередЗаписьюПравообразующихРегистров(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СведенияОПользователях") Тогда
		
		// Групповая запись не обрабатывается подпиской
		Пользователь = Источник.Отбор.Пользователь.Значение;
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Возврат;
		КонецЕсли;
		
		СтароеПодразделение = Неопределено;
		СведенияОПользователе = РегистрыСведений.СведенияОПользователях.ПолучитьСведенияОПользователе(Пользователь);
		СведенияОПользователе.Свойство("Подразделение", СтароеПодразделение);
		
		НовоеПодразделение = Неопределено;
		Если Источник.Количество() = 1 Тогда
			НовоеПодразделение = Источник[0].Подразделение;
		КонецЕсли;
		
		Если СтароеПодразделение <> НовоеПодразделение Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПриЗаписиПравообразующихРегистров
Процедура ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ, Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ДескрипторыДоступаДляОбъектов") Тогда
		
		// Обработка изменения владельца файла
		Для Каждого Эл Из Источник Цикл
			
			// Обновление прав связанных объектов
			ОбновитьПраваСвязанныхДескрипторовПоОбъекту(Эл.Объект);

			// Переопределение дескрипторов связанных объектов
			Если Не Источник.ДополнительныеСвойства.Свойство("ПропуститьОпределениеЗависимыхПрав")
				Или Не Источник.ДополнительныеСвойства.ПропуститьОпределениеЗависимыхПрав Тогда
			
				ТипОбъекта = ТипЗнч(Эл.Объект);
				// Для папок выполняется через очередь (кроме папок файлов)
				Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
					И ЭтоПапка(ТипОбъекта) И ТипОбъекта <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
					РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Эл.Объект,,, 2);
				Иначе
					ПереопределитьДескрипторыЗависимыхОбъектов(Эл.Объект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ИсполнителиЗадач") Тогда	
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьИсполнителейРолей(Источник);
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		Попытка
			ПриЗаписиИсполнителейЗадач(Источник);
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		Исключение	
			ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.НастройкиПравОбъектов") Тогда
		
		Папка = Источник.Отбор.Объект.Значение;
		Если ЗначениеЗаполнено(Папка) Тогда
			ПапкаОбъект = Папка.ПолучитьОбъект();
			Если ПапкаОбъект <> Неопределено Тогда  // Проверка на удаление папки
				
				// Аналог ОпределитьДескрипторДоступаОбъекта, но с принудительной записью
				// для обработки изменения ресурса НаследованиеРазрешено
				
				Дескриптор = ПолучитьДескрипторДоступа(ПапкаОбъект);
				
				НаборЗаписей = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Папка);
				
				Строка = НаборЗаписей.Добавить();
				Строка.Объект = Папка;
				Строка.Дескриптор = Дескриптор;
				Строка.ОбъектМетаданных = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Дескриптор, "ИдентификаторОбъектаМетаданных");
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.НаследованиеНастроекПравОбъектов") Тогда
		
		Если Источник.Количество() > 0 Тогда
			Папка = Источник.Отбор.Объект.Значение;
			Если ЗначениеЗаполнено(Папка) Тогда
				ОпределитьДескрипторДоступаОбъекта(Папка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СведенияОПользователях") Тогда	
		
		Если Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьСведенийОПользователях(Источник);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.УчастникиПроцессов") Тогда
		
		// Обновление прав файлов процессов и шаблонов, подчиненных комплексным процессам
		МассивПроцессов = Новый Массив;
		
		Процесс = Источник.Отбор.Процесс.Значение;
		Если ЗначениеЗаполнено(Процесс) Тогда
			МассивПроцессов.Добавить(Процесс);
		Иначе
			Для Каждого СтрокаУчастника Из Источник Цикл
				Процесс = СтрокаУчастника.Процесс;
				Если МассивПроцессов.Найти(Процесс) = Неопределено Тогда
					МассивПроцессов.Добавить(Процесс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюПравообразующихКонстант
Процедура ДокументооборотПраваДоступаПередЗаписьюПравообразующихКонстант(Источник, Отказ) Экспорт
	
	Если Константы[Источник.Метаданные().Имя].Получить() <> Источник.Значение Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
	КонецЕсли;
		
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант
Процедура ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") 
		Или НЕ Источник.ДополнительныеСвойства.ЗначениеИзменено Тогда
		
		Возврат;
		
	КонецЕсли;	
	
	// Вызов переопределяемого метода
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
	Попытка
		ПриЗаписиКонстанты(Источник);
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
	Исключение	
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюПапок
Процедура ДокументооборотПраваДоступаПередЗаписьюПапок(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначениеРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка,"Родитель");
	Если Не Источник.ЭтоНовый() И Источник.Родитель <> ПредыдущееЗначениеРодитель Тогда
		
		Если ЗначениеЗаполнено(Источник.Родитель)
			И (Источник.Родитель = Источник.Ссылка 
				Или Источник.Родитель.ПринадлежитЭлементу(Источник.Ссылка)) Тогда
			
			ВызватьИсключение НСтр("ru = 'Нельзя перемещать папки в собственные подпапки.'");
			
			Возврат;
			
		КонецЕсли;
		
		СообщениеОбОшибке = "";
		
		Права = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Источник.Ссылка);
		Если Не Права.Изменение Тогда
			СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на изменение папки.'");
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		Если Не ЕстьПравоПеремещенияПапки(
			ПредыдущееЗначениеРодитель, Источник.Родитель, СообщениеОбОшибке) Тогда
			
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.НаследованиеНастроекПравОбъектов.Обновить(Источник);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик регламентного задания ДокументооборотОбновлениеПравДоступаОперативное
Процедура ДокументооборотОбновлениеПравДоступаОперативное() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбработатьОчередьОбновленияПравДоступа(1);
	
КонецПроцедуры

// Обработчик регламентного задания ДокументооборотОбновлениеПравДоступаДолгое
Процедура ДокументооборотОбновлениеПравДоступаДолгое() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; 
	
	// Проверка на необходимость полного обновления прав доступа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		// Полное обновление всех прав
		ДокументооборотПраваДоступа.УдалитьВсеДанныеОПравахДоступа(Истина);
		ДокументооборотПраваДоступа.ОбновитьПраваВсехДанных();
			
	КонецЕсли;
	
	ОбработатьОчередьОбновленияПравДоступа(2);
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 1; 
	
КонецПроцедуры

Процедура ОбработатьОчередьОбновленияПравДоступа(Приоритет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = Приоритет;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Начато обновление прав доступа'"));
	
	Количество = РегистрыСведений.ОчередьОбновленияПравДоступа.ОбработатьПорцию();
	Пока Количество <> 0 Цикл
		
		Количество = РегистрыСведений.ОчередьОбновленияПравДоступа.ОбработатьПорцию();
		
	КонецЦикла;	

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Закончено обновление прав доступа'"));
	
КонецПроцедуры

// Обработчик регламентного задания ДокументооборотУдалениеУстаревшихПравДоступа
Процедура ДокументооборотУдалениеУстаревшихПравДоступа() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Начато удаление устаревших прав доступа'"));
	
	Справочники.ДескрипторыДоступаОбъектов.УдалитьНеиспользуемые();
	Справочники.ДескрипторыДоступаФайлов.УдалитьНеиспользуемые();
	Справочники.ДескрипторыДоступаРегистров.УдалитьНеиспользуемые();
	РегистрыСведений.СоставСубъектовПравДоступа.УдалитьНеактуальныеЗаписиВерхнихУровней();
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		,
		НСтр("ru = 'Закончено удаление устаревших прав доступа'"));
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанного дескриптора
Процедура ОбновитьПраваСвязанныхДескрипторовПоДескриптору(Дескриптор, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
		И Немедленно <> Истина Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Дескриптор,, 
			Истина); // ОбновлениеЗависимыхПрав
			
		Возврат;
		
	КонецЕсли;
	
	// Дескрипторы, имеющие ссылку на переданный дескриптор
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка,
		|	ИСТИНА КАК ЭтоДескрипторОбъекта
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ДескрипторВладельца = &ДескрипторВладельца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаФайлов.Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|ГДЕ
		|	ДескрипторыДоступаФайлов.ДескрипторВладельца = &ДескрипторВладельца";

	Запрос.УстановитьПараметр("ДескрипторВладельца", Дескриптор);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоДескрипторОбъекта Тогда
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
		Иначе
			Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Для всех объектов, использующих этот дескриптор, вызываем обновление прав связанных объектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаДляОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|ГДЕ
		|	ДескрипторыДоступаДляОбъектов.Дескриптор = &Дескриптор";

	Запрос.УстановитьПараметр("Дескриптор", Дескриптор);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбновитьПраваСвязанныхДескрипторовПоОбъекту(ВыборкаДетальныеЗаписи.Объект, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанного объекта
Процедура ОбновитьПраваСвязанныхДескрипторовПоОбъекту(Объект, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
		И Немедленно <> Истина Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Объект,, 
			Истина); // ОбновлениеЗависимыхПрав
			
		Возврат;
		
	КонецЕсли;
	
	// Вызов переопределяемого метода
	ДокументооборотПраваДоступаПереопределяемый.ОбновитьПраваСвязанныхДескрипторовПоОбъекту(Объект);
	
	// Обновление прав на регистры
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа1 = &ОбъектДоступа1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа2 = &ОбъектДоступа2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа3 = &ОбъектДоступа3";

	Запрос.УстановитьПараметр("ОбъектДоступа1", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОбъектДоступа2", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОбъектДоступа3", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
		
КонецПроцедуры

// Переопределяет дескрипторы объектов, зависимых от данного
//
// Параметры:
//  Объект - Ссылка - объект, зависимые объекты которого нужно обработать
//
Процедура ПереопределитьДескрипторыЗависимыхОбъектов(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	// Вызов переопределяемого метода
	ДокументооборотПраваДоступаПереопределяемый.ПереопределитьДескрипторыЗависимыхОбъектов(Объект);
	
	// Файлы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";

	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Дескриптор = ОпределитьДескрипторДоступаФайлаПоВладельцу(Объект.Ссылка);
	КонецЕсли;
	
	// Визы и резолюции
	Если ТипОбъекта = Тип("СправочникСсылка.ВходящиеДокументы")
	 Или ТипОбъекта = Тип("СправочникСсылка.ИсходящиеДокументы")
	 Или ТипОбъекта = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВизыСогласования.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВизыСогласования КАК ВизыСогласования
			|ГДЕ
			|	ВизыСогласования.Документ = &Документ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Резолюции.Ссылка
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|ГДЕ
			|	Резолюции.Документ = &Документ";
			
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	// Содержимое папок
	Если ЭтоПапка(ТипОбъекта) Тогда
		ПереопределитьПраваСодержимогоПапки(Объект.Ссылка, ТипОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереопределитьПраваСодержимогоПапки(Папка, ТипПапки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеТипыПапокИСодержимого = ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого();
	МетаданныеСодержимогоПапки = ВсеТипыПапокИСодержимого.Получить(ТипПапки);
	
	Если МетаданныеСодержимогоПапки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при обновлении содержимого папки: тип не определен.'");
	КонецЕсли;
	
	// Переопределение прав зависимых папок
	Запрос = Новый Запрос(
		"ВЫБРАТЬ &Папка КАК Объект
		|ПОМЕСТИТЬ НайденныеПапки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаследованиеНастроекПравОбъектов.Объект
		|ИЗ
		|	РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		// Проверка флага наследования прав от владельцев
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекОтВладельцев
		|		ПО НаследованиеНастроекПравОбъектов.Объект = НаследованиеНастроекОтВладельцев.Объект
		|			И НаследованиеНастроекПравОбъектов.Объект = НаследованиеНастроекОтВладельцев.Родитель
		|			И (НаследованиеНастроекОтВладельцев.Наследовать)
		|ГДЕ
		|	НаследованиеНастроекПравОбъектов.Родитель = &Папка
		|	И НаследованиеНастроекПравОбъектов.Наследовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДескрипторыДоступаДляОбъектов.Объект,
		|	ДескрипторыДоступаДляОбъектов.Дескриптор КАК Дескриптор
		|ИЗ
		|	НайденныеПапки КАК НайденныеПапки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ПО НайденныеПапки.Объект = ДескрипторыДоступаДляОбъектов.Объект
		|ГДЕ
		// Дескриптор самой папки определять не нужно
		|	НайденныеПапки.Объект <> &Папка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дескриптор");
		
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("Папка", Папка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтоПапкаФайлов = ТипПапки = Тип("СправочникСсылка.ПапкиФайлов");
	ПереопределитьПраваПоГруппамОбъектов(Выборка, ЭтоПапкаФайлов);
	
	// Переопределение прав содержимого папки и зависимых папок
	Если Не ЭтоПапкаФайлов Тогда
		
		ШаблонТекстаЗапросаПоСодержимому = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаДляОбъектов.Объект,
			|	ДескрипторыДоступаДляОбъектов.Дескриптор КАК Дескриптор
			|ИЗ
			|	%ТаблицаСодержимогоПапки% КАК ТаблицаСодержимогоПапки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НайденныеПапки КАК НайденныеПапки
			|		ПО НайденныеПапки.Объект = ТаблицаСодержимогоПапки.Папка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
			|		ПО ТаблицаСодержимогоПапки.Ссылка = ДескрипторыДоступаДляОбъектов.Объект
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дескриптор,
			|	НайденныеПапки.Объект";
		
		ЗапросПоСодержимому = Новый Запрос;
		ЗапросПоСодержимому.МенеджерВременныхТаблиц = МВТ;
			
		Для Каждого ОбъектМетаданныхСодержимого Из МетаданныеСодержимогоПапки Цикл
			
			ЗапросПоСодержимому.Текст = СтрЗаменить(ШаблонТекстаЗапросаПоСодержимому, 
				"%ТаблицаСодержимогоПапки%", 
				ОбъектМетаданныхСодержимого.ПолноеИмя());
			
			Выборка = ЗапросПоСодержимому.Выполнить().Выбрать();
			ПереопределитьПраваПоГруппамОбъектов(Выборка);
			
		КонецЦикла;
		
		МВТ.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет права объектов выборки с полями Объект, Дескриптор
// выборка должна быть отсортирована по дескриптору
//
Процедура ПереопределитьПраваПоГруппамОбъектов(Выборка, ОпределятьЗависимыеПрава = Истина)
	
	ТекущийДескриптор = Неопределено;
	ДескрипторДляСравнения = Неопределено;	
	ДескрипторИзменился = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дескриптор <> ДескрипторДляСравнения Тогда
			ДескрипторДляСравнения = Выборка.Дескриптор;
			ТекущийДескриптор = ОпределитьДескрипторДоступаОбъекта(Выборка.Объект, ОпределятьЗависимыеПрава);
			ДескрипторИзменился = Выборка.Дескриптор <> ТекущийДескриптор;
		ИначеЕсли ДескрипторИзменился Тогда
			РегистрыСведений.ДескрипторыДоступаДляОбъектов.Сохранить(
				ТекущийДескриптор, Выборка.Объект, ОпределятьЗависимыеПрава);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанных 
// групп доступа корреспондентов
Процедура ОбновитьПраваПоГруппамДоступаКорреспондентов(ГруппыДоступа) Экспорт
	
	Если ГруппыДоступа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ДескрипторыДоступаОбъектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовКорреспонденты.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.Корреспонденты КАК ДескрипторыДоступаОбъектовКорреспонденты
		|ГДЕ
		|	ДескрипторыДоступаОбъектовКорреспонденты.ГруппаДоступа В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	// ДескрипторыДоступаРегистров
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа1 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа2 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа3 В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанных 
// групп доступа физлиц
Процедура ОбновитьПраваПоГруппамДоступаФизлиц(ГруппыДоступа) Экспорт
	
	Если ГруппыДоступа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ДескрипторыДоступаОбъектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.ФизическиеЛица КАК ДескрипторыДоступаОбъектовФизическиеЛица
		|ГДЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.ГруппаДоступа В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	// ДескрипторыДоступаРегистров
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа1 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа2 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа3 В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные методы

Функция ПолучитьДескрипторДоступа(ОбъектДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьНовыйДескриптор(ОбъектДоступа);
	
	ГотовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.НайтиДескрипторПоОбразцу(НовыйДескриптор);
	
	Если ЗначениеЗаполнено(ГотовыйДескриптор) Тогда
		
		Возврат ГотовыйДескриптор;
		
	КонецЕсли;	

	// Запись нового дескриптора
	НовыйДескриптор.Записать();
	
	Возврат НовыйДескриптор.Ссылка;
	
КонецФункции	

Функция ПолучитьДескрипторДоступаФайла(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск существующего дескриптора
	ЭтоФайлПроцесса = ЭтоБизнесПроцесс(ВладелецФайла);
	Если ЭтоФайлПроцесса Тогда
		ГотовыйДескриптор = НайтиДескрипторФайлаПоВладельцу(ВладелецФайла);
	Иначе
		ДескрипторВладельца = РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(ВладелецФайла);
		
		// Владелец файла может не участвовать в механизме прав доступа
		Если ДескрипторВладельца = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		ГотовыйДескриптор = НайтиДескрипторФайлаПоДескрипторуВладельца(ДескрипторВладельца);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГотовыйДескриптор) Тогда
		// Запись соответствия владельца файла и дескриптора доступа файла
		РегистрыСведений.ДескрипторыДоступаДляФайлов.Сохранить(ГотовыйДескриптор.Ссылка, ВладелецФайла.Ссылка);
		Возврат ГотовыйДескриптор;
	КонецЕсли;

	// Формирование нового дескриптора
	НовыйДескриптор = Справочники.ДескрипторыДоступаФайлов.СоздатьЭлемент();
	Если ЭтоФайлПроцесса Тогда
		НовыйДескриптор.ВладелецФайла = ВладелецФайла;
	Иначе
		НовыйДескриптор.ДескрипторВладельца = ДескрипторВладельца;
	КонецЕсли;
	
	// Начало транзакции т.к. дескриптор и его привязка к владельцу файла должны
	// записываться строго вместе
	НачатьТранзакцию();
	
	НовыйДескриптор.Записать();
	РегистрыСведений.ДескрипторыДоступаДляФайлов.Сохранить(НовыйДескриптор.Ссылка, ВладелецФайла.Ссылка);
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйДескриптор.Ссылка;
	
КонецФункции	

Функция НайтиДескрипторФайлаПоДескрипторуВладельца(ДескрипторВладельца)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаФайлов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|ГДЕ
		|	ДескрипторыДоступаФайлов.ДескрипторВладельца = &ДескрипторВладельца";

	Запрос.УстановитьПараметр("ДескрипторВладельца", ДескрипторВладельца);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Функция НайтиДескрипторФайлаПоВладельцу(ВладелецФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаФайлов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|ГДЕ
		|	ДескрипторыДоступаФайлов.ВладелецФайла = &ВладелецФайла";

	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДескрипторДоступаЗаписиНабораЗаписей(ИдентификаторОбъектаМетаданных, Запись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДескриптор = Справочники.ДескрипторыДоступаРегистров.СоздатьНовыйДескриптор(ИдентификаторОбъектаМетаданных, Запись);
	
	ГотовыйДескриптор = Справочники.ДескрипторыДоступаРегистров.НайтиДескрипторПоОбразцу(НовыйДескриптор);
	
	Если ЗначениеЗаполнено(ГотовыйДескриптор) Тогда
		Возврат ГотовыйДескриптор;
	КонецЕсли;	

	// Запись нового дескриптора
	НовыйДескриптор.Записать();
	
	Возврат НовыйДескриптор.Ссылка;
	
КонецФункции	

Процедура ОбновитьПраваДескрипторовЗависящихОтПрофиля(Профиль)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияДоступа = Новый Массив;

	Для каждого Эл Из Профиль.ВидыДоступа Цикл	
		
		ВсеЗначенияВида = ПолучитьВсеЗначенияВидаДоступа(Эл.ВидДоступа);
		Для каждого ЗначениеВида Из ВсеЗначенияВида Цикл
			ЗначенияДоступа.Добавить(ЗначениеВида.Ссылка);
		КонецЦикла;	
		
		// Добавление пустой ссылки
		ЗначенияДоступа.Добавить(ПолучитьПустуюСсылкуДляВидаДоступа(Эл.ВидДоступа));
		
	КонецЦикла;

	ОбновитьПраваПоЗначениямВидовДоступа(ЗначенияДоступа);
	
КонецПроцедуры

// Возвращает массив значений доступа, права по которым определяет указанная 
// группа доступа
Функция ПолучитьЗначенияДоступаГруппыДоступа(ГруппаДоступа)
	
	ЗначенияДоступа = Новый Массив;

	Для каждого Эл Из ГруппаДоступа.Профиль.ВидыДоступа Цикл
		
		ВсеЗначенияВида = ПолучитьВсеЗначенияВидаДоступа(Эл.ВидДоступа);
		Для каждого ЗначениеВида Из ВсеЗначенияВида Цикл
			ЗначенияДоступа.Добавить(ЗначениеВида.Ссылка);
		КонецЦикла;	
		
		// Добавление пустой ссылки
		ЗначенияДоступа.Добавить(ПолучитьПустуюСсылкуДляВидаДоступа(Эл.ВидДоступа));
		
	КонецЦикла;
	
	Возврат ЗначенияДоступа;	
		
КонецФункции

Функция ПолучитьВсеЗначенияВидаДоступа(ВидДоступа)

	Типы = ВидДоступа.ТипЗначения.Типы();
	Если Типы.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Число типов вида доступа больше 1.'");
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Типы[0]);
	ИмяТаблицы = МетаданныеТипа.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	#Таблица КАК Таблица";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПустуюСсылкуДляВидаДоступа(ВидДоступа)
	
	ПустаяСсылка = Неопределено;
	
	Типы = ВидДоступа.ТипЗначения.Типы();
	Если Типы.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Число типов вида доступа больше 1.'");
	КонецЕсли;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Типы[0]);
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеТипа.ПолноеИмя());
	
	ПустаяСсылка = Менеджер.ПустаяСсылка();
	
	Возврат ПустаяСсылка;
	
КонецФункции
	
Процедура ОбновитьПраваЗависящиеОтГруппыДоступа(ГруппаДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияДоступа = ПолучитьЗначенияДоступаГруппыДоступа(ГруппаДоступа);
	
	ОбновитьПраваПоЗначениямВидовДоступа(ЗначенияДоступа);

КонецПроцедуры

// Обновляет права всех дескрипторов доступа в которых есть ссылки на
// указанные значения доступа
Процедура ОбновитьПраваПоЗначениямВидовДоступа(ЗначенияДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск и обновление дексрипторов по реквизитам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ВидОбъекта В(&ЗначенияДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ВопросДеятельности В(&ЗначенияДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ГрифДоступа В(&ЗначенияДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.Организация В(&ЗначенияДоступа)";

	Запрос.УстановитьПараметр("ЗначенияДоступа", ЗначенияДоступа);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	// Поиск и обновление дексрипторов по группам доступа корреспондентов
	ГруппыДоступаКорреспондентов = Новый Массив();
	Для каждого Эл Из ЗначенияДоступа Цикл
		
		Если ТипЗнч(Эл) = Тип("СправочникСсылка.ГруппыДоступаКорреспондентов") Тогда
			ГруппыДоступаКорреспондентов.Добавить(Эл);
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовКорреспонденты.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.Корреспонденты КАК ДескрипторыДоступаОбъектовКорреспонденты
		|ГДЕ
		|	ДескрипторыДоступаОбъектовКорреспонденты.ГруппаДоступа В(&ГруппыДоступаКорреспондентов)";

	Запрос.УстановитьПараметр("ГруппыДоступаКорреспондентов", ГруппыДоступаКорреспондентов);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

	// Поиск и обновление дексрипторов по группам доступа физических лиц
	ГруппыДоступаФизЛиц = Новый Массив();
	Для каждого Эл Из ЗначенияДоступа Цикл
		
		Если ТипЗнч(Эл) = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц") Тогда
			ГруппыДоступаФизЛиц.Добавить(Эл);
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.ФизическиеЛица КАК ДескрипторыДоступаОбъектовФизическиеЛица
		|ГДЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.ГруппаДоступа В(&ГруппыДоступаФизЛиц)";

	Запрос.УстановитьПараметр("ГруппыДоступаФизЛиц", ГруппыДоступаФизЛиц);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновлениеРолейПередЗаписьюОбъектовПередЗаписью(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Источник.ЭтоНовый());
	
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		СоставГруппы = Новый ТаблицаЗначений;
		СоставГруппы.Колонки.Добавить("Пользователь");
		Если Не Источник.ЭтоНовый() Тогда
			СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Источник.Ссылка);
		КонецЕсли;	
		Источник.ДополнительныеСвойства.Вставить("СтарыйСоставГруппы", СоставГруппы);
		
		Если Не Источник.ЭтоНовый() Тогда
			СтарыйРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "Родитель");
			Источник.ДополнительныеСвойства.Вставить("СтарыйРодитель", СтарыйРодитель);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		
		СоставГруппы = Новый ТаблицаЗначений;
		СоставГруппы.Колонки.Добавить("Пользователь");
		Если Не Источник.ЭтоНовый() Тогда
			СоставГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Источник.Ссылка, "Пользователи").Выгрузить();
		КонецЕсли;	
		Источник.ДополнительныеСвойства.Вставить("СтарыйСоставГруппы", СоставГруппы);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновлениеРолейПриЗаписиОбъектовПриЗаписи(Источник, Отказ) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи")
		И (Источник.ДополнительныеСвойства.ЭтоНовый
		Или (Источник.ДополнительныеСвойства.Свойство("ДобавленНовыйПользовательИБ") 
		И Источник.ДополнительныеСвойства.ДобавленНовыйПользовательИБ)) Тогда
		
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Источник.Ссылка);
		УправлениеДоступом.ОбновитьРолиПользователей(МассивПользователей);
		РегистрыСведений.ДокументооборотПользователиГруппДоступа.ОбновитьВсе();
		
	КонецЕсли;	
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		МассивИзменений = Новый Массив;
		ПолноеОбновление = Ложь;
		
		Если Источник.ДополнительныеСвойства.Свойство("СтарыйРодитель") Тогда
			
			СтарыйРодитель = Источник.ДополнительныеСвойства.СтарыйРодитель;
			
			Если СтарыйРодитель <> Источник.Родитель Тогда
				
				// Полное обновление
				ПолноеОбновление = Истина;
				СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Источник.Ссылка);
				
				Для Каждого Строка Из СоставГруппы Цикл
					МассивИзменений.Добавить(Строка.Пользователь);
				КонецЦикла;		
				
			КонецЕсли;	
			
		КонецЕсли;	
			
		Если Не ПолноеОбновление Тогда
			
			// Поиск и обновление отличий в составе группы пользователей
			НовыйСоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Источник.Ссылка);
			СтарыйСоставГруппы = Источник.ДополнительныеСвойства.СтарыйСоставГруппы;
			
			Для Каждого Строка Из НовыйСоставГруппы Цикл
				Пользователь = Строка.Пользователь;
				Если СтарыйСоставГруппы.Найти(Пользователь, "Пользователь") = Неопределено Тогда
					Если МассивИзменений.Найти(Пользователь) = Неопределено Тогда
						МассивИзменений.Добавить(Пользователь);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;		
			
			Для Каждого Строка Из СтарыйСоставГруппы Цикл
				Пользователь = Строка.Пользователь;
				Если НовыйСоставГруппы.Найти(Пользователь, "Пользователь") = Неопределено Тогда
					Если МассивИзменений.Найти(Пользователь) = Неопределено Тогда
						МассивИзменений.Добавить(Пользователь);
					КонецЕсли;	
				КонецЕсли;		
			КонецЦикла;		
			
		КонецЕсли;	
			
		УправлениеДоступом.ОбновитьРолиПользователей(МассивИзменений);
		РегистрыСведений.ДокументооборотПользователиГруппДоступа.ОбновитьВсе();
		
	КонецЕсли;	
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		
		НовыйСоставГруппы = Источник.Пользователи;
		СтарыйСоставГруппы = Источник.ДополнительныеСвойства.СтарыйСоставГруппы;
		
		МассивИзменений = Новый Массив;
		
		Для Каждого Строка Из НовыйСоставГруппы Цикл
			Пользователь = Строка.Пользователь;
			Если СтарыйСоставГруппы.Найти(Пользователь, "Пользователь") = Неопределено Тогда
				Если МассивИзменений.Найти(Пользователь) = Неопределено Тогда
					МассивИзменений.Добавить(Пользователь);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;		
		
		Для Каждого Строка Из СтарыйСоставГруппы Цикл
			Пользователь = Строка.Пользователь;
			Если НовыйСоставГруппы.Найти(Пользователь, "Пользователь") = Неопределено Тогда
				Если МассивИзменений.Найти(Пользователь) = Неопределено Тогда
					МассивИзменений.Добавить(Пользователь);
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;		
		
		ОбновитьМассивПользователейИГруппПользователей(МассивИзменений);
		РегистрыСведений.ДокументооборотПользователиГруппДоступа.ОбновитьПоГруппеДоступа(Источник.Ссылка);
		
	КонецЕсли;	
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		
		// Группы доступа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыДоступа.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступа КАК ГруппыДоступа
			|ГДЕ
			|	ГруппыДоступа.Профиль = &Профиль";

		Запрос.УстановитьПараметр("Профиль", Источник.Ссылка);

		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого ГруппаДоступа Из Результат Цикл
			
			МассивИзменений = Новый Массив;
			Для Каждого Строка Из ГруппаДоступа.Пользователи Цикл
				МассивИзменений.Добавить(Строка.Пользователь);
			КонецЦикла;	
			ОбновитьМассивПользователейИГруппПользователей(МассивИзменений);
			РегистрыСведений.ДокументооборотПользователиГруппДоступа.ОбновитьПоГруппеДоступа(ГруппаДоступа);
			
		КонецЦикла;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ОбновитьМассивПользователейИГруппПользователей(МассивИзменений)
	
	МассивИзмененийРазвернутый = Новый Массив;
	Для Каждого ПользовательИлиГруппа Из МассивИзменений Цикл
		
		Если ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Если МассивИзмененийРазвернутый.Найти(ПользовательИлиГруппа) = Неопределено Тогда
				МассивИзмененийРазвернутый.Добавить(ПользовательИлиГруппа);
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ПользовательИлиГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(ПользовательИлиГруппа);
			Для Каждого Строка Из СоставГруппы Цикл
				
				Если МассивИзмененийРазвернутый.Найти(Строка.Пользователь) = Неопределено Тогда
					МассивИзмененийРазвернутый.Добавить(Строка.Пользователь);
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УправлениеДоступом.ОбновитьРолиПользователей(МассивИзмененийРазвернутый);
	
КонецПроцедуры

Процедура ОбновитьПраваЗависимыхДанных(ОбъектСсылка)
	
    ДокументооборотПраваДоступаПереопределяемый.ОбновитьПраваЗависимыхДанных(ОбъектСсылка);
	
КонецПроцедуры	

Процедура ОбновитьПраваПустыхДескрипторов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоДескрипторамДоступа.Дескриптор
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор";

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
 	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Немедленно = Не ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа();
		ОбновитьПраваДоступаПоДескриптору(ВыборкаДетальныеЗаписи.Дескриптор, Немедленно);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина если переданная ссылка является ссылкой на любой бизнес-процесс
Функция ЭтоБизнесПроцесс(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Возврат Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта);
	
КонецФункции	

// Обрабатывает запись набора записей РС ИсполнителиЗадач
Процедура ПриЗаписиИсполнителейЗадач(Источник)
	
	ДокументооборотПраваДоступаПереопределяемый.ПриЗаписиИсполнителейЗадач(Источник);
	
	Если Источник.Количество() = 0 Тогда
		
		// Обработка удаления набора записей
		
		РольИсполнителя = Источник.Отбор.РольИсполнителя.Значение;
		ОсновнойОбъектАдресации = Источник.Отбор.ОсновнойОбъектАдресации.Значение;
		ДополнительныйОбъектАдресации = Источник.Отбор.ДополнительныйОбъектАдресации.Значение;
		
		УстановленОтборПоООА = Источник.Отбор.ОсновнойОбъектАдресации.Использование;
		УстановленОтборПоДОА = Источник.Отбор.ДополнительныйОбъектАдресации.Использование;
		
		// Поиск дескрипторов по ТЧ Пользователи
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаОбъектовПользователи.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
			|ГДЕ
			|	ДескрипторыДоступаОбъектовПользователи.Пользователь = &Пользователь
			|	И (ДескрипторыДоступаОбъектовПользователи.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|			ИЛИ НЕ &УстановленОтборПоООА)
			|	И (ДескрипторыДоступаОбъектовПользователи.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
			|			ИЛИ НЕ &УстановленОтборПоДОА)";

		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		Запрос.УстановитьПараметр("УстановленОтборПоООА", УстановленОтборПоООА);
		Запрос.УстановитьПараметр("УстановленОтборПоДОА", УстановленОтборПоДОА);
		Запрос.УстановитьПараметр("Пользователь", РольИсполнителя);
		
		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
		// Поиск дескрипторов по ТЧ РабочаяГруппа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
			|ГДЕ
			|	ДескрипторыДоступаОбъектовРабочаяГруппа.Участник = &Участник
			|	И (ДескрипторыДоступаОбъектовРабочаяГруппа.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|			ИЛИ &ОсновнойОбъектАдресации = НЕОПРЕДЕЛЕНО)
			|	И (ДескрипторыДоступаОбъектовРабочаяГруппа.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации
			|			ИЛИ &ДополнительныйОбъектАдресации = НЕОПРЕДЕЛЕНО)";

		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		Запрос.УстановитьПараметр("Участник", РольИсполнителя);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
		// Поиск дескрипторов файлов процессов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДоступаФайлов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|		ПО ДескрипторыДоступаФайлов.ВладелецФайла = УчастникиПроцессов.Процесс
			|ГДЕ
			|	УчастникиПроцессов.Участник = &Участник
			|	И УчастникиПроцессов.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|	И УчастникиПроцессов.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";

		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		Запрос.УстановитьПараметр("Участник", РольИсполнителя);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	Иначе
		
		// Обработка записи нового набора записей
		Для каждого Эл Из Источник Цикл
			
			РольИсполнителя = Эл.РольИсполнителя;
			ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
			ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			
			// Поиск дескрипторов по ТЧ Пользователи
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДескрипторыДоступаОбъектовПользователи.Ссылка
				|ИЗ
				|	Справочник.ДескрипторыДоступаОбъектов.Пользователи КАК ДескрипторыДоступаОбъектовПользователи
				|ГДЕ
				|	ДескрипторыДоступаОбъектовПользователи.Пользователь = &Пользователь
				|	И ДескрипторыДоступаОбъектовПользователи.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|	И ДескрипторыДоступаОбъектовПользователи.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";

			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("Пользователь", РольИсполнителя);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
			// Поиск дескрипторов по ТЧ РабочаяГруппа
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка
				|ИЗ
				|	Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
				|ГДЕ
				|	ДескрипторыДоступаОбъектовРабочаяГруппа.Участник = &Участник
				|	И ДескрипторыДоступаОбъектовРабочаяГруппа.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|	И ДескрипторыДоступаОбъектовРабочаяГруппа.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";

			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("Участник", РольИсполнителя);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
			
			// Поиск дескрипторов файлов процессов
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДескрипторыДоступаФайлов.Ссылка
				|ИЗ
				|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
				|		ПО ДескрипторыДоступаФайлов.ВладелецФайла = УчастникиПроцессов.Процесс
				|ГДЕ
				|	УчастникиПроцессов.Участник = &Участник
				|	И УчастникиПроцессов.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
				|	И УчастникиПроцессов.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";

			Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			Запрос.УстановитьПараметр("Участник", РольИсполнителя);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

// Обрабатывает запись правообразующих констант
Процедура ПриЗаписиКонстанты(Источник)
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьУчетПоОрганизациям") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит Организация
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Организация <> &ПустаяОрганизация";

		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьГрифыДоступа") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ГрифДоступа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ГрифДоступа <> &ГрифДоступа";

		Запрос.УстановитьПараметр("ГрифДоступа", Справочники.ГрифыДоступа.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВопросыДеятельности") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ВопросДеятельности
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВопросДеятельности <> &ВопросДеятельности";

		Запрос.УстановитьПараметр("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВидыИсходящихДокументов") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ВидОбъекта 
		// типа Справочник.ВидыИсходящихДокументов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВидОбъекта <> &ВидОбъекта
			| 	И ТИПЗНАЧЕНИЯ(ДескрипторыДоступаОбъектов.ВидОбъекта) = ТИП(Справочник.ВидыИсходящихДокументов)";

		Запрос.УстановитьПараметр("ВидОбъекта", Справочники.ВидыИсходящихДокументов.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВидыВходящихДокументов") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ВидОбъекта 
		// типа Справочник.ВидыВходящихДокументов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВидОбъекта <> &ВидОбъекта
			| 	И ТИПЗНАЧЕНИЯ(ДескрипторыДоступаОбъектов.ВидОбъекта) = ТИП(Справочник.ВидыВходящихДокументов)";

		Запрос.УстановитьПараметр("ВидОбъекта", Справочники.ВидыВходящихДокументов.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВидыВнутреннихДокументов") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ВидОбъекта 
		// типа Справочник.ВидыВнутреннихДокументов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВидОбъекта <> &ВидОбъекта
			| 	И ТИПЗНАЧЕНИЯ(ДескрипторыДоступаОбъектов.ВидОбъекта) = ТИП(Справочник.ВидыВнутреннихДокументов)";

		Запрос.УстановитьПараметр("ВидОбъекта", Справочники.ВидыВнутреннихДокументов.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ДобавлятьРуководителямДоступПодчиненных") Тогда	
		
		// Изменение состава субъектов прав доступа
		Если Источник.Значение Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ЗаполнитьВсехРуководителей();
		Иначе
			РегистрыСведений.СоставСубъектовПравДоступа.УдалитьВсехРуководителей();
		КонецЕсли;
		
		// Обновление всех дескрипторов 
		
		// ДескрипторыДоступаОбъектов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов";

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;

		// ДескрипторыДоступаРегистров
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаРегистров.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров";

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;

		// ДескрипторыДоступаФайлов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаФайлов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов";

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает право текущего пользователя перемещать папки
// из папки Источник в папку Приемник.
// В случае отсутствия права формируется СообщениеОбОшибке.
//
Функция ЕстьПравоПеремещенияПапки(Источник, Приемник, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Источник)
		И Не РольДоступна("ПолныеПрава") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на перемещение корневых папок.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Приемник)
		И Не РольДоступна("ПолныеПрава") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на перемещение папок в корень.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(Источник) Тогда
		
		Права = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Источник, ТекущийПользователь);
		
		Если Не Права.Удаление Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав на удаление из папки ""%1"".'"),
				Строка(Источник));
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приемник) Тогда
		
		Права = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Приемник, ТекущийПользователь);
		
		Если Не Права.Добавление Тогда
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав на добавление в папку ""%1"".'"),
				Строка(Приемник));
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Включает\выключает использование прав доступа
//   используется в обработках обновления ИБ
Процедура УстановитьИспользованиеПравДоступа(НовоеЗначение) Экспорт
	
	Если Не ПараметрыСеанса.ДокументооборотИспользоватьОграниченияПравДоступа Тогда
		Возврат;
	КонецЕсли;
	
	СтароеЗначение = Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить();
	Если СтароеЗначение <> НовоеЗначение Тогда
		НачатьТранзакцию();
		Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Установить(НовоеЗначение);
		Константы.ДокументооборотВключитьПраваДоступа.Установить(СтароеЗначение);
		ЗафиксироватьТранзакцию();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если переданный тип - ссылка на справочник
// папок внутренних документов, файлов и т.д.
//
// Параметры:
//  ТипСсылки - Тип - тип проверяемого объекта
//
Функция ЭтоПапка(ТипСсылки) Экспорт
	
	ВсеТипыПапок = ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого();
	Результат = ВсеТипыПапок.Получить(ТипСсылки) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Обновляет права файлов переданных процессов 
//  и шаблонов, подчиненных комплексным процессам
//
Процедура ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов)
	
	// Обновление прав файлов процессов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаФайлов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|ГДЕ
		|	ДескрипторыДоступаФайлов.ВладелецФайла В(&МассивПроцессов)");
		
	Запрос.УстановитьПараметр("МассивПроцессов", МассивПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
	ДокументооборотПраваДоступаПереопределяемый.ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(
		МассивПроцессов);
	
КонецПроцедуры

// Обновляет права документов с указанным корреспондентом
//
Процедура ОбновитьПраваПоКорреспонденту(Корреспондент, Немедленно = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() 
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Корреспондент,,, 2);
		Возврат;
		
	КонецЕсли;
	
	ОписанияТаблиц = Новый Соответствие;
	
	ОписанияТаблиц.Вставить("Справочник.ВнутренниеДокументы", "Корреспондент");
	ОписанияТаблиц.Вставить("Справочник.ВходящиеДокументы", "Отправитель");
	ОписанияТаблиц.Вставить("Справочник.ИсходящиеДокументы.Получатели", "Получатель");
	
	ОписанияТаблиц.Вставить("Справочник.БанковскиеСчета", "Владелец");
	ОписанияТаблиц.Вставить("Справочник.КонтактныеЛица", "Владелец");
	ОписанияТаблиц.Вставить("Справочник.СпискиРассылкиПоКорреспондентам.Получатели", "Получатель");
	
	ОписанияТаблиц.Вставить("Справочник.ШаблоныВнутреннихДокументов", "Корреспондент");
	ОписанияТаблиц.Вставить("Справочник.ШаблоныВходящихДокументов", "Отправитель");
	ОписанияТаблиц.Вставить("Справочник.ШаблоныИсходящихДокументов.Получатели", "Получатель");
	
	ДокументооборотПраваДоступаПереопределяемый.ДополнитьОписанияТаблицСоСсылкамиНаКорреспондентов(
		ОписанияТаблиц);
	
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаДляОбъектов.Объект
		|ИЗ
		|	%ТаблицаОбъектов% КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ПО ТаблицаОбъектов.Ссылка = ДескрипторыДоступаДляОбъектов.Объект
		|ГДЕ
		|	ТаблицаОбъектов.%ИмяПоляКорреспондента% = &Корреспондент";
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	Для Каждого Эл Из ОписанияТаблиц Цикл
		
		Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "%ТаблицаОбъектов%", Эл.Ключ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляКорреспондента%", Эл.Значение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Объект);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
