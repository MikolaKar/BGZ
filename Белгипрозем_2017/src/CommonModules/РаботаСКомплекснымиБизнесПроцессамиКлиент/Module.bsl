
////////////////////////////////////////////////////////////////////////////////
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер: содержит процедуры работы с комплексными
//													процессами на клиенте.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает предшественников у этапа комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого устанавливаются предшественники
//	СписокПредшественников - список значений
// 	 Значение - структура
//		ИдентификаторПредшественника - идентификатор этапа-предшественника
//		УсловиеПерехода - УсловиеМаршрутизации
//		УсловиеРассмотрения - УсловияРассмотренияПредшественниковЭтапа
Процедура УстановитьПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа, СписокПредшественников) Экспорт
	
	УдалитьВсехПредшественниковЭтапа(Объект, ИдентификаторЭтапа);
	
	Для каждого Предшественник Из СписокПредшественников Цикл
		НовыйПредшественник = Объект.ПредшественникиЭтапов.Добавить();
		НовыйПредшественник.ИдентификаторПоследователя = ИдентификаторЭтапа;
		НовыйПредшественник.ИдентификаторПредшественника = Предшественник.Значение.ИдентификаторПредшественника;
		НовыйПредшественник.УсловиеПерехода = Предшественник.Значение.УсловиеПерехода;
		НовыйПредшественник.УсловиеРассмотрения = Предшественник.Значение.УсловиеРассмотрения;
		НовыйПредшественник.ИмяПредметаУсловия = Предшественник.Значение.ИмяПредметаУсловия;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму выбора типа процесса при настройке действия процесса или шаблона процесса
// Параметры:
//	ИдентификаторЭтапа - уникальный идентификатор этапа в процессе или шаблоне процесса
//	ВладелецФормы - элемент владелец открываемой формы
//	ВладелецДействия - ссылка на процесс или шаблон процесса, в котором настраивается действие
//	Предмет - ссылка на предмет процесса
Процедура ОткрытьФормуВыбораДействияЭтапа(ИдентификаторЭтапа, ВладелецФормы, ВладелецДействия, Предметы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("ВладелецШаблона", ВладелецДействия);
	Если ТипЗнч(ВладелецДействия) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Добавление действия в комплексный процесс'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Добавление действия в шаблон комплексного процесса'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("Предметы", Предметы);
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму настройки предшественников этапа
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ДанныеЭтапа - структура
//		ИдентификаторЭтапа - уникальный идентификатор этапа, для которого настраиваются предшественники
//		ПредшественникиВариантИспользования - строка
Процедура ОткрытьФормуНастройкиПредшественниковЭтапа(Знач Объект, ДанныеЭтапа, Элемент) Экспорт
		
	ВсеЭтапы = Новый СписокЗначений;
	Для Каждого Этап Из Объект.Этапы Цикл
		ДанныеОдногоЭтапа = Новый Структура;
		ДанныеОдногоЭтапа.Вставить("ИдентификаторЭтапа", Этап.ИдентификаторЭтапа);
		ДанныеОдногоЭтапа.Вставить("ЗадачаЭтапа", Этап.ЗадачаЭтапа);
		
		ДанныеОдногоЭтапа.Вставить(
			"НомерЭтапа",
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПолучитьПредставлениеЭтапа(
				Объект, Этап.ИдентификаторЭтапа));
				
		ДанныеОдногоЭтапа.Вставить("ШаблонБизнесПроцесса", Этап.ШаблонБизнесПроцесса);
		ДанныеОдногоЭтапа.Вставить("Удален", Этап.Удален);
		ВсеЭтапы.Добавить(ДанныеОдногоЭтапа);
	КонецЦикла;
	
	ПредшественникиЭтапа = Новый СписокЗначений;
	Для каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			ДанныеПредшественника = Новый Структура;
			ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
			Данныепредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
			ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
			ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
			ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Этапы", ВсеЭтапы);
	ПараметрыФормы.Вставить("Предшественники", ПредшественникиЭтапа);
	ПараметрыФормы.Вставить("ПредшественникиВариантИспользования", ДанныеЭтапа.ПредшественникиВариантИспользования);
	ПараметрыФормы.Вставить("ИдентификаторТекущегоЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("ВладелецЭтапа", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИменаПредметов", МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект));
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыФормы.Вставить(
			"ДоступностьПоШаблону", 
			Элемент.ДоступностьПоШаблону И Не Элемент.Элементы.ЭтапыПредшественникиЭтапаСтрокой.ТолькоПросмотр);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПредшественниковЭтапаКомплексногоПроцесса", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Выполняет оповещение о создании действия в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, с которой выполняется оповещение
Процедура ОповеститьПослеЗаписиНастройкиДействия(Форма) Экспорт
		
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ШаблонБП", Форма.Объект.Ссылка);
	ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Объект.ВладелецШаблона);
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ПараметрыОповещения.Вставить("ВладелецШаблона", Форма.Владелец);
	КонецЕсли;
	
	МассивПредметов = Новый Массив;
	
	Попытка
		Для Каждого Строка Из Форма.ИсходныеИменаПредметов Цикл
			СтрокаПредмета = Форма.Объект.Предметы.НайтиПоИдентификатору(Строка.ИндексСтроки);
			Если СтрокаПредмета <> Неопределено Тогда
				СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = Строка.ИсходноеИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Исключение
		// Реквизита может не быть
	КонецПопытки;
		
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтруктураПредмета = Новый Структура;
		СтруктураПредмета.Вставить("ИмяПредмета", СтрокаПредмета.ИмяПредмета);
		СтруктураПредмета.Вставить("Предмет",СтрокаПредмета.Предмет);
		СтруктураПредмета.Вставить("РольПредмета", СтрокаПредмета.РольПредмета);
		СтруктураПредмета.Вставить("ИмяПредметаОснование", СтрокаПредмета.ИмяПредметаОснование);
		СтруктураПредмета.Вставить("ШаблонОснование", СтрокаПредмета.ШаблонОснование);
		СтруктураПредмета.Вставить("ИсходноеИмяПредмета", СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса);
		МассивПредметов.Добавить(СтруктураПредмета);
	КонецЦикла;
	
	ПараметрыОповещения.Вставить("Предметы", МассивПредметов);
	
	Оповестить("СозданиеДействия", ПараметрыОповещения, Форма);
	
	Форма.Прочитать();
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Форма.Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Форма.Объект);
	
	Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
		СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса = СтрокаПредмета.ИмяПредмета;
	КонецЦикла;
	
КонецПроцедуры

// Общий обработчик события "Перед записью" на карточке шаблона процесса
Процедура ФормаНастройкиДействияПередЗаписью(Форма, Отказ) Экспорт
	
	Если Форма.Объект.ШаблонВКомплексномПроцессе Тогда
			
		ОчиститьСообщения();
		
		Если Форма.Элементы.Найти("Важность") <> Неопределено И НЕ ЗначениеЗаполнено(Форма.Объект.Важность) Тогда
			Текст = НСтр("ru = 'Поле ""Важность"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Важность",, Отказ);
		КонецЕсли;
		
		НастраиваетсяКомплексныйПроцесс = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПолучитьФактНастройкиКомплексногоПроцесса(
			Форма.Объект.ВладелецШаблона);

		Если НастраиваетсяКомплексныйПроцесс Тогда	
			Если Форма.Элементы.Найти("Исполнители") <> Неопределено Тогда
				Если Форма.Объект.Исполнители.Количество() = 0 Тогда
					Текст = НСтр("ru = 'Не указаны исполнители'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Исполнители",, Отказ);
				КонецЕсли;  
			Конецесли;
			Если Форма.Элементы.Найти("Исполнители") = Неопределено 
				И Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(Форма.Объект.Исполнитель) Тогда
					Текст = НСтр("ru = 'Поле ""Исполнитель"" не заполнено'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Исполнитель",,Отказ);
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;             
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.НаименованиеБизнесПроцесса) Тогда
			Форма.Объект.Наименование = Строка(ТипЗнч(Форма.Объект.Ссылка));
		Иначе
			Форма.Объект.Наименование = Форма.Объект.НаименованиеБизнесПроцесса;
		КонецЕсли;
		
		Попытка
			Форма.ИсходныеИменаПредметов.Очистить();
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				НоваяСтрока = Форма.ИсходныеИменаПредметов.Добавить();
				НоваяСтрока.ИндексСтроки = СтрокаПредмета.ПолучитьИдентификатор();
				НоваяСтрока.ИсходноеИмяПредмета = СтрокаПредмета.ИсходноеИмяПредметаКомплексногоПроцесса;
			КонецЦикла;
		Исключение
			// Реквизита может не быть
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти