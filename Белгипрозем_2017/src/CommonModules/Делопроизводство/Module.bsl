// 1С-Минск 
    

// Формирует наименование документа из заголовка 
Функция НаименованиеДокумента(Документ) Экспорт 
    // 1С-Минск
    Возврат М_НаименованиеДокумента(Документ);
    // 1С-Минск 

	Заголовок = СокрЛП(Документ.Заголовок);
	ДлинаНаименования = Документ.Метаданные().ДлинаНаименования;
	
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда 
		Постфикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСТР("ru = ' (№ %1 от %2)'"),
						СокрЛП(Документ.РегистрационныйНомер),
						Формат(Документ.ДатаРегистрации, "ДЛФ=D"));
	Иначе
		Постфикс = "";
	КонецЕсли;	
	
	Если СтрДлина(Заголовок + Постфикс) > ДлинаНаименования Тогда 
		
		Заголовок = Лев(Заголовок, ДлинаНаименования - СтрДлина(Постфикс));
		ДлинаЗаголовка = СтрДлина(Заголовок);
		
		ПозицияПробела = ДлинаЗаголовка;
		Пока ПозицияПробела > 0 Цикл
			Если Сред(Заголовок, ПозицияПробела, 1) = " " Тогда 
				Прервать;
			КонецЕсли;	
			ПозицияПробела = ПозицияПробела - 1;
		КонецЦикла;	
		
		Если ПозицияПробела > 1 Тогда 
			Заголовок = Лев(Заголовок, ПозицияПробела - 1);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Заголовок + Постфикс;
	
КонецФункции	

// Формирует наименование номенклатуры дел
Функция НаименованиеНоменклатурыДел(НоменклатураДел) Экспорт
	
	Заголовок = НоменклатураДел.ПолноеНаименование;
	Заголовок = СтрЗаменить(Заголовок, Символы.ПС, " "); 
	Заголовок = СокрЛП(Заголовок);
	ДлинаНаименования = НоменклатураДел.Метаданные().ДлинаНаименования;
	
	Если СтрДлина(Заголовок) > ДлинаНаименования Тогда 
		
		Заголовок = Лев(Заголовок, ДлинаНаименования);
		ДлинаЗаголовка = СтрДлина(Заголовок);
		
		ПозицияПробела = ДлинаЗаголовка;
		Пока ПозицияПробела > 0 Цикл
			Если Сред(Заголовок, ПозицияПробела, 1) = " " Тогда 
				Прервать;
			КонецЕсли;	
			ПозицияПробела = ПозицияПробела - 1;
		КонецЦикла;	
		
		Если ПозицияПробела > 1 Тогда 
			Заголовок = Лев(Заголовок, ПозицияПробела - 1);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Заголовок;
	
КонецФункции	

// Возвращает количество файлов по документу
Функция КоличествоФайлов(Документ, ПоказатьУдаленные = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если Не ПоказатьУдаленные Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

// Возвращает количество задач по документу
Функция КоличествоЗадач(Документ, ТолькоНевыполненные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предметы.Предмет = &Документ
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	
	Если ТолькоНевыполненные Тогда 
		Запрос.Текст = Запрос.Текст + " И (НЕ ЗадачаИсполнителя.Выполнена)";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Возвращает вид документа по умолчанию
Функция ПолучитьВидДокументаПоУмолчанию(Ссылка) Экспорт
	
	ВидДокумента = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВходящегоДокумента");
		ТипМетаданных = "ВидыВходящихДокументов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидИсходящегоДокумента");
		ТипМетаданных = "ВидыИсходящихДокументов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВнутреннегоДокумента");
		ТипМетаданных = "ВидыВнутреннихДокументов";
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТаблицаВидаДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	&ВидДокумента КАК ТаблицаВидаДокументов
		|ГДЕ
		|	(НЕ ТаблицаВидаДокументов.ПометкаУдаления)
		|	И (НЕ ТаблицаВидаДокументов.ЭтоГруппа)
		|	И ЛОЖЬ В
		|			(ВЫБРАТЬ
		|				ЛОЖЬ КАК ЗначениеЛожь
		|			ИЗ
		|				(ВЫБРАТЬ ПЕРВЫЕ 2
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					&ВидДокумента КАК ТаблицаВидаДокументов
		|				ГДЕ
		|					(НЕ ТаблицаВидаДокументов.ПометкаУдаления)
		|					И (НЕ ТаблицаВидаДокументов.ЭтоГруппа)
		|				) КАК ВыбранныеОбъекты
		|			ИМЕЮЩИЕ
		|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)", "&ВидДокумента", "Справочник." + ТипМетаданных);
	
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВидДокумента = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат ВидДокумента;
	
КонецФункции	

// Возвращает способ доставки по умолчанию
Функция ПолучитьСпособДоставкиПоУмолчанию(Тип) Экспорт 
	
	СпособДоставки = Справочники.СпособыДоставки.ПустаяСсылка();
	
	Если Тип = "СпособПолучения" Тогда 
		СпособДоставки = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособПолучения");
	ИначеЕсли Тип = "СпособОтправки" Тогда 
		СпособДоставки = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособОтправки");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СпособыДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыДоставки КАК СпособыДоставки
		|ГДЕ
		|	(НЕ СпособыДоставки.ПометкаУдаления)
		|	И ЛОЖЬ В
		|			(ВЫБРАТЬ
		|				ЛОЖЬ КАК ЗначениеЛожь
		|			ИЗ
		|				(ВЫБРАТЬ ПЕРВЫЕ 2
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					Справочник.СпособыДоставки КАК СпособыДоставки
		|				ГДЕ
		|					(НЕ СпособыДоставки.ПометкаУдаления)
		|				) КАК ВыбранныеОбъекты
		|			ИМЕЮЩИЕ
		|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СпособДоставки = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СпособДоставки;
	
КонецФункции	

Функция ПолучитьВалютуПоУмолчанию() Экспорт 
	
	Валюта = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда 
		Возврат Валюта;
	КонецЕсли;
	
	Валюта = Константы.ОсновнаяВалюта.Получить();
	Возврат Валюта;
	
КонецФункции	

// Возвращает соответствие состояний документов
Функция ПолучитьСоответствиеСостояний() Экспорт  
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НаСогласовании, 	"СостояниеСогласование");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НеСогласован, 	"СостояниеСогласование");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Согласован, 		"СостояниеСогласование");
	
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НаУтверждении, 	"СостояниеУтверждение");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НеУтвержден, 	"СостояниеУтверждение");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Утвержден, 		"СостояниеУтверждение");
	
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Проект, 			"СостояниеРегистрация");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРегистрации, 	"СостояниеРегистрация");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Зарегистрирован, "СостояниеРегистрация");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НеЗарегистрирован, "СостояниеРегистрация");
	
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРассмотрении, 	"СостояниеРассмотрение");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Рассмотрен, 		"СостояниеРассмотрение");
	
	Соответствие.Вставить(Перечисления.СостоянияДокументов.НаИсполнении, 	"СостояниеИсполнение");
	Соответствие.Вставить(Перечисления.СостоянияДокументов.Исполнен, 		"СостояниеИсполнение");
	
	Возврат Соответствие;
	
КонецФункции	

// Получает актуальные состояния документа
Функция ПолучитьВсеСостоянияДокумента(Документ) Экспорт 
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Состояние");
	ТаблицаСостояний.Колонки.Добавить("Установил");
	ТаблицаСостояний.Колонки.Добавить("ДатаУстановки");
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат ТаблицаСостояний;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеСостоянияДокументов.Состояние КАК Состояние,
	|	ТекущиеСостоянияДокументов.Установил,
	|	ТекущиеСостоянияДокументов.ДатаУстановки
	|ИЗ
	|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
	|ГДЕ
	|	ТекущиеСостоянияДокументов.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат ТаблицаСостояний;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПолучитьСтроковоеПредставлениеСостояний(Документ) Экспорт
	
	СтроковоеПредставление = "";	
	
	МассивСостояний = ПолучитьВсеСостоянияДокумента(Документ).ВыгрузитьКолонку("Состояние");
	
	Типы = Новый Структура(
		"СостояниеСогласование, 
		|СостояниеУтверждение, 
		|СостояниеРегистрация, 
		|СостояниеРассмотрение, 
		|СостояниеИсполнение");
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	
	Если МассивСостояний.Количество() = 1 И МассивСостояний[0] = Перечисления.СостоянияДокументов.Проект Тогда 
		Возврат Строка(МассивСостояний[0]); 
	КонецЕсли;	
	
	Для Каждого Тип Из Типы Цикл
		Для Каждого Состояние Из МассивСостояний Цикл
			Если Состояние = Перечисления.СостоянияДокументов.Проект Тогда 
				Продолжить;
			КонецЕсли;	
			
			Если СоответствиеСостояний.Получить(Состояние) = Тип.Ключ Тогда 
				СтроковоеПредставление = СтроковоеПредставление + ", " + Строка(Состояние);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Если Не ПустаяСтрока(СтроковоеПредставление) Тогда 
		СтроковоеПредставление = Сред(СтроковоеПредставление, 3);
	КонецЕсли;	
	
	Возврат СтроковоеПредставление;
	
КонецФункции	

// Получает актуальное состояние документа
Функция ПолучитьСтруктуруСостоянияДокумента(Документ, Тип) Экспорт
	
	СтруктураСостояния = Новый Структура;
	СтруктураСостояния.Вставить("Состояние", Перечисления.СостоянияМероприятий.ПустаяСсылка());
	СтруктураСостояния.Вставить("ДатаУстановки", '00010101');
	СтруктураСостояния.Вставить("Установил", Неопределено);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат СтруктураСостояния;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СтруктураСостояния;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	ТаблицаСостояний = ПолучитьВсеСостоянияДокумента(Документ);
	
	Для Каждого Строка Из ТаблицаСостояний Цикл
		Если СоответствиеСостояний.Получить(Строка.Состояние) = Тип Тогда 
			ЗаполнитьЗначенияСвойств(СтруктураСостояния, Строка);
			Возврат СтруктураСостояния;
		КонецЕсли;	
	КонецЦикла;	

	Возврат СтруктураСостояния;
	
КонецФункции

// Получает полное актуальное состояние документа
Функция ПолучитьСостояниеДокумента(Документ, Тип) Экспорт
	
	СтруктураСостояния = ПолучитьСтруктуруСостоянияДокумента(Документ, Тип);
	
	Возврат СтруктураСостояния.Состояние;
	
КонецФункции

// Получает полное актуальное состояние документа
Функция ПолучитьПоследнееСостояниеДокумента(Документ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДокументовСрезПоследних.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, Документ = &Документ) КАК СостоянияДокументовСрезПоследних";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние; 
	
КонецФункции

// Устанавливает состояние документа
Процедура ЗаписатьСостояниеДокумента(Документ, Знач Период, Знач Состояние, Знач Установил) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда 
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
//1С-Минск +	
	УстановитьПривилегированныйРежим(Истина); 
//1С-Минск -	
	
	Если Не ЗначениеЗаполнено(Установил) Тогда 
		Установил = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
	// история
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
	// состояние
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	ТекущееСостояние = ПолучитьСостояниеДокумента(Документ, СоответствиеСостояний.Получить(Состояние));
	
	МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = ТекущееСостояние;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.ДатаУстановки = Период;
	МенеджерЗаписи.Записать();
	
	// представление 
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
		Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
	
КонецПроцедуры	

// Очищает состояние документа
Процедура ОчиститьСостояниеДокумента(Документ, НачальноеСостояние) Экспорт

	МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = НачальноеСостояние;
	МенеджерЗаписи.Удалить();
	
	// представление
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
		Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
	
КонецПроцедуры

// Возвращает состояния документа, установленные объектом Установил
//
// Возвращаемое значение:
//  Массив - массив объектов типа ПеречислениеСсылка.СостоянияДокументов, 
//			 либо неопределено в случае отсутствия
// 
Функция ПолучитьСостоянияДокумента(Документ, Установил) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеСостоянияДокументов.Состояние.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Документ = &Документ
		|	И ТекущиеСостоянияДокументов.Установил = &Установил";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Установил", Установил);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

// Удаляет все состояния документа, установленные объектом Установил
//
Процедура УдалитьСостояниеДокумента(Документ, Установил) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// история
	Набор = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	// состояние
	Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	// представление
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
		Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
	
КонецПроцедуры	

// Возвращает признак использования видов входящих документов
Функция ИспользоватьВидыВходящихДокументов() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов");
	
КонецФункции

// Возвращает признак использования видов исходящих документов
Функция ИспользоватьВидыИсходящихДокументов() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов");
	
КонецФункции

// Возвращает признак использования видов внутренних документов
Функция ИспользоватьВидыВнутреннихДокументов() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов");
	
КонецФункции

// Возвращает признак использования видов документов по объекту
Функция ИспользоватьВидыДокументов(ВидДокумента) Экспорт
	
	ИспользоватьВидыДокументов = Ложь;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда 
		ИспользоватьВидыДокументов = ИспользоватьВидыВходящихДокументов();
		
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда 
		ИспользоватьВидыДокументов = ИспользоватьВидыИсходящихДокументов();
		
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда 
		ИспользоватьВидыДокументов = ИспользоватьВидыВнутреннихДокументов();
		
	КонецЕсли;	
	
	Возврат ИспользоватьВидыДокументов;
	
КонецФункции	

// Возвращает признак использования номенклатуры дел
Функция ИспользоватьНоменклатуруДел() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел");
	
КонецФункции

// Проверяет уникальность регистрационного номера
Функция РегистрационныйНомерУникален(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если ЗначениеЗаполнено(Нумератор) Тогда // автонумерация
		Периодичность = Нумератор.Периодичность;
	Иначе 									// ручная нумерация
		Периодичность = Перечисления.ПериодичностьНумераторов.Год;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник." + Объект.Ссылка.Метаданные().Имя + " КАК Справочник ";
	
	Если Нумератор.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		Запрос.Текст = Запрос.Текст + 
		" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|	ПО СвязиДокументов.Документ = Справочник.Ссылка И СвязиДокументов.ТипСвязи = &ТипСвязи ";
		
		Запрос.УстановитьПараметр("ТипСвязи", Нумератор.ТипСвязи);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	" ГДЕ
	|	РегистрационныйНомер = &РегистрационныйНомер
	|	И ДатаРегистрации МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации
	|	И Ссылка <> &Ссылка ";
	
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		НезависимаяНумерацияПоОрганизациям = Нумератор.НезависимаяНумерацияПоОрганизациям;
	Иначе // ручная нумерация
		НезависимаяНумерацияПоОрганизациям = Истина;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И НезависимаяНумерацияПоОрганизациям Тогда
		Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Нумератор.НезависимаяНумерацияПоПроекту Тогда
		Запрос.Текст = Запрос.Текст + " И (Проект = &Проект) ";
		Запрос.УстановитьПараметр("Проект", Объект.Проект);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") И Нумератор.НезависимаяНумерацияПоВопросуДеятельности Тогда
		Запрос.Текст = Запрос.Текст + " И (ВопросДеятельности = &ВопросДеятельности) ";
		Запрос.УстановитьПараметр("ВопросДеятельности", Объект.ВопросДеятельности);
	КонецЕсли;
	
	Если Нумератор.НезависимаяНумерацияПоПодразделению Тогда
		Запрос.Текст = Запрос.Текст + " И (Подразделение = &Подразделение) ";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Если Нумератор.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		СвязанныйДокумент = СвязиДокументов.ПолучитьСвязанныйДокумент(Объект.Ссылка, Нумератор.ТипСвязи);
		
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
			Запрос.Текст = Запрос.Текст + " И (СвязанныйДокумент = &СвязанныйДокумент) ";
			Запрос.УстановитьПараметр("СвязанныйДокумент", СвязанныйДокумент);
		КонецЕсли;
	КонецЕсли;	
	
	Если ИспользоватьВидыДокументов(Объект.ВидДокумента) Тогда 
		Запрос.Текст = Запрос.Текст + " И (ВидДокумента = &ВидДокумента) ";
		Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", Объект.РегистрационныйНомер);
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", Нумерация.НачалоПериодаНумерации(Периодичность, Объект.ДатаРегистрации));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", Нумерация.КонецПериодаНумерации(Периодичность, Объект.ДатаРегистрации));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции	

// Возвращает персональную настройку текущего пользователя
Функция ПолучитьНастройкуПользователя(КлючНастройки, ИмяНастройки) Экспорт 
	
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючНастройки,
		ИмяНастройки);
	
КонецФункции

Процедура ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ДокументОбъект, 
	ДоступныеПоля, НедоступныеПоля) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеСостояния = Новый Массив;
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда 
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ВсеСостояния.Добавить(Перечисления.СостоянияДокументов.НаРегистрации);
		Иначе
			ВсеСостояния.Добавить(Перечисления.СостоянияДокументов.Проект);
		КонецЕсли;	
	Иначе
		ВсеСостояния = ПолучитьВсеСостоянияДокумента(ДокументОбъект.Ссылка).ВыгрузитьКолонку("Состояние");
	КонецЕсли;	
	
	// Удаление состояние Проект, если есть прочие состояния
	Если ВсеСостояния.Количество() > 1 Тогда 
		НайденныйИндекс = ВсеСостояния.Найти(Перечисления.СостоянияДокументов.Проект);
		Если НайденныйИндекс <> Неопределено Тогда 
			ВсеСостояния.Удалить(НайденныйИндекс);
		КонецЕсли;	
	КонецЕсли;
	
	НастройкиСостояний = ПолучитьНастройкиСостояний(ДокументОбъект);
	Для Каждого НастройкаСостояния Из НастройкиСостояний Цикл
		
		ДоступностьДа = Новый Массив;
		ДоступностьНет = Новый Массив;
		ДоступностьПусто = Новый Массив;
		
		Для Каждого Состояние Из ВсеСостояния Цикл
			
			НайденныеСтроки = НастройкаСостояния.НастройкиДоступности.НайтиСтроки(
				Новый Структура("Состояние", Состояние));
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Доступность = 1 Тогда  // Да
					Если ДоступностьДа.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьДа.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли НайденнаяСтрока.Доступность = 2 Тогда  // Нет
					Если ДоступностьНет.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьНет.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли НайденнаяСтрока.Доступность = 0 Тогда  // Пусто
					Если ДоступностьПусто.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьПусто.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		// Исключение из доступных полей с доступностью Нет
		Для Каждого Поле Из ДоступностьНет Цикл
			Поз = ДоступностьДа.Найти(Поле);
			Если Поз <> Неопределено Тогда 
				ДоступностьДа.Удалить(Поз);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьДа Цикл
			Если ДоступныеПоля.Найти(Поле) = Неопределено Тогда 
				ДоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьНет Цикл
			Если НедоступныеПоля.Найти(Поле) = Неопределено Тогда 
				НедоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьПусто Цикл
			Если НедоступныеПоля.Найти(Поле) = Неопределено Тогда 
				НедоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
		
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
		Поз = НедоступныеПоля.Найти(ДоступноеПоле);
		Если Поз <> Неопределено Тогда 
			НедоступныеПоля.Удалить(Поз);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Устанавливает доступность полей карточки документа в зависимости от состояния
Процедура УстановитьДоступностьПоСостоянию(Форма, Ссылка, ОбщиеДоступныеПоля = "", ОбщиеНедоступныеПоля = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеДоступныеПоля = "";
	ОбщиеНедоступныеПоля = "";
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() Тогда 
	
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			ДокументОбъект = Ссылка.ПолучитьОбъект();
		Иначе	
			ДокументОбъект = Форма.РеквизитФормывЗначение("Объект");
		КонецЕсли;
		
		ДоступныеПоля = Новый Массив;
		НедоступныеПоля = Новый Массив;
		
		ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ДокументОбъект, ДоступныеПоля, НедоступныеПоля);
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
		КонецЕсли;	
		
		ИменаПолейИКомандДляНастройкиДоступности = ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента);	
		
		ОбщиеНедоступныеПоля = Новый Структура;
		Для Каждого НедоступноеПоле Из НедоступныеПоля Цикл
			
			НайденнаяСтрока = ИменаПолейИКомандДляНастройкиДоступности.Найти(НедоступноеПоле, "ИмяПоляКоманды");
			Если НайденнаяСтрока <> Неопределено Тогда 
				СтруктураПолей = Новый Структура(НайденнаяСтрока.ИменаПолейНаФорме);
				Для Каждого Поле Из СтруктураПолей Цикл
					ЭлементФормы = Форма.Элементы.Найти(Поле.Ключ);
					Если ЭлементФормы = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					ОбщиеНедоступныеПоля.Вставить(Поле.Ключ);
					
					// таблицы с редактированием записей в карточке
					Если ЭлементФормы.Имя = "ВизыСогласованияТаблицаИзменить"
					 Или ЭлементФормы.Имя = "ВизыСогласованияТаблицаКонтекстноеМенюИзменить"
					 Или ЭлементФормы.Имя = "ИзменитьРезолюцию" Тогда 
						Продолжить;
					ИначеЕсли ЭлементФормы.Имя = "ВизыСогласованияТаблица" 
						  Или ЭлементФормы.Имя = "Резолюции" Тогда 
						ЭлементФормы.ИзменятьСоставСтрок = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда 
						ЭлементФормы.Доступность = Ложь;
					Иначе
						ЭлементФормы.ТолькоПросмотр = Истина;
					КонецЕсли;
					
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЦикла;	
		
		ОбщиеДоступныеПоля = Новый Структура;
		Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
			
			НайденнаяСтрока = ИменаПолейИКомандДляНастройкиДоступности.Найти(ДоступноеПоле, "ИмяПоляКоманды");
			Если НайденнаяСтрока <> Неопределено Тогда 
				СтруктураПолей = Новый Структура(НайденнаяСтрока.ИменаПолейНаФорме);
				Для Каждого Поле Из СтруктураПолей Цикл
					ЭлементФормы = Форма.Элементы.Найти(Поле.Ключ);
					Если ЭлементФормы = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					ОбщиеДоступныеПоля.Вставить(Поле.Ключ);
					
					// таблицы с редактированием записей в карточке
					Если ЭлементФормы.Имя = "ВизыСогласованияТаблицаИзменить"
					 Или ЭлементФормы.Имя = "ВизыСогласованияТаблицаКонтекстноеМенюИзменить"
					 Или ЭлементФормы.Имя = "ИзменитьРезолюцию" Тогда 
						Продолжить;
					ИначеЕсли ЭлементФормы.Имя = "ВизыСогласованияТаблица" 
						  Или ЭлементФормы.Имя = "Резолюции" Тогда 
						ЭлементФормы.ИзменятьСоставСтрок = Истина;
						Продолжить;
					КонецЕсли;
					
					Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда 
						ЭлементФормы.Доступность = Истина;
					Иначе
						ЭлементФормы.ТолькоПросмотр = Ложь;
					КонецЕсли;
					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено Тогда 
			ОбщиеДоступныеПоля.Вставить("СоздатьФайлОригинал");
		КонецЕсли;	
		
		Если ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено Тогда 
			ОбщиеДоступныеПоля.Вставить("СоздатьФайлОбычный");
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
			// поле Оригинал
			ДоступностьПоляОригинал = ОбщиеДоступныеПоля.Свойство("СоздатьФайлОригинал") И ОбщиеДоступныеПоля.Свойство("СоздатьФайлОбычный");
			Форма.Элементы["Оригинал"].ТолькоПросмотр = Не ДоступностьПоляОригинал;
			Форма.Элементы["ОригиналСоздание"].ТолькоПросмотр = Не ДоступностьПоляОригинал;
		КонецЕсли;	
		
		// список файлов
		Если ОбщиеДоступныеПоля.Количество() = 0 И ОбщиеНедоступныеПоля.Количество() = 0 Тогда 
			Форма.Элементы["Файлы"].ИзменятьСоставСтрок = Истина;
			Форма.Элементы["ФайлыСоздание"].ИзменятьСоставСтрок = Истина;
		Иначе	
			Если Не ОбщиеДоступныеПоля.Свойство("СоздатьФайл") Тогда 
				Форма.Элементы["Файлы"].ИзменятьСоставСтрок = Ложь;
			Иначе	
				Форма.Элементы["Файлы"].ИзменятьСоставСтрок = Истина;
			КонецЕсли;
			Если Не ОбщиеДоступныеПоля.Свойство("СоздатьФайлСоздание") Тогда 
				Форма.Элементы["ФайлыСоздание"].ИзменятьСоставСтрок = Ложь;
			Иначе
				Форма.Элементы["ФайлыСоздание"].ИзменятьСоставСтрок = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// доступность поля состояние зависит от настройки
	Если Не Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить() 
		И Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда 
		Форма.Элементы.СостояниеТекст.ТолькоПросмотр = Истина;
		Форма.ЗапретитьРучноеИзменениеСостоянияДокументов = Истина;
	КонецЕсли;
	
	Если Форма.Элементы.СостояниеТекст.ТолькоПросмотр Тогда 
		Форма.Элементы.СостояниеТекст.КнопкаВыбора = Ложь;
		Форма.Элементы.СостояниеТекст.КнопкаОткрытия = Истина;
	Иначе
		Форма.Элементы.СостояниеТекст.КнопкаВыбора = Истина;
		Форма.Элементы.СостояниеТекст.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает массив настроек доступности для переданного документа и пользователя  
Функция ПолучитьНастройкиСостояний(ДокументОбъект, Пользователь = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
	Настройки = Новый Массив;
	
	// Настройки для всех видов
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
	КонецЕсли;
	
	// Настройки для переданного вида документа
	Если ИспользоватьВидыДокументов(ДокументОбъект.ВидДокумента) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию КАК НастройкаДоступностиПоСостоянию
		|ИЗ
		|	РегистрСведений.НастройкиДоступностиДляВидовДокументов КАК НастройкиДоступностиДляВидовДокументов
		|ГДЕ
		|	НЕ НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ПометкаУдаления
		|	И НастройкиДоступностиДляВидовДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ВариантНастройкиДляВидовДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиДоступностиПоСостоянию.Ссылка
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НЕ НастройкиДоступностиПоСостоянию.ПометкаУдаления
		|	И НастройкиДоступностиПоСостоянию.ТипДокумента = &ТипДокумента
		|	И НастройкиДоступностиПоСостоянию.ВариантНастройкиДляВидовДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов)";
		
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
		Запрос.УстановитьПараметр("ВидДокумента", ДокументОбъект.ВидДокумента);
		
		Настройки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НастройкаДоступностиПоСостоянию");
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиДоступностиПоСостоянию.Ссылка КАК НастройкаДоступностиПоСостоянию
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НЕ НастройкиДоступностиПоСостоянию.ПометкаУдаления
		|	И НастройкиДоступностиПоСостоянию.ТипДокумента = &ТипДокумента
		|	И НастройкиДоступностиПоСостоянию.ВариантНастройкиДляВидовДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов)";
		
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
		
		Настройки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НастройкаДоступностиПоСостоянию");
		
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого Настройка Из Настройки Цикл
		Если Настройка.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;	
		
		Для Каждого Строка Из Настройка.ИспользоватьДля Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
				Продолжить;
			КонецЕсли;	
			
			Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				Если Строка.Участник = Пользователь Тогда 
					Результат.Добавить(Настройка);
					Прервать;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда 
				
				СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(Строка.Участник);
				Если СоставГруппы.Найти(Пользователь, "Пользователь") <> Неопределено Тогда 
					Результат.Добавить(Настройка);
					Прервать;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ГруппыДоступа") Тогда 
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДокументооборотПользователиГруппДоступа.Пользователь
				|ИЗ
				|	РегистрСведений.ДокументооборотПользователиГруппДоступа КАК ДокументооборотПользователиГруппДоступа
				|ГДЕ
				|	ДокументооборотПользователиГруппДоступа.ГруппаДоступа = &ГруппаДоступа";
				Запрос.УстановитьПараметр("ГруппаДоступа", Строка.Участник);
				
				ГруппыДоступа = Запрос.Выполнить().Выгрузить();
				Если ГруппыДоступа.Найти(Пользователь, "Пользователь") <> Неопределено Тогда 
					Результат.Добавить(Настройка);
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 	
				
				ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(Строка.Участник, 
				Строка.ОсновнойОбъектАдресации, Строка.ДополнительныйОбъектАдресации);
				
				Если ИсполнителиРоли.Найти(Пользователь, "Исполнитель") <> Неопределено Тогда 
					Результат.Добавить(Настройка);
					Прервать;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
				
				ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(Строка.Участник, ДокументОбъект);
				Если ЗначениеАвтоподстановки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Если ЗначениеАвтоподстановки = Пользователь Тогда 
						Результат.Добавить(Настройка);
						Прервать;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
					
					СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(ЗначениеАвтоподстановки);
					Если СоставГруппы.Найти(Пользователь, "Пользователь") <> Неопределено Тогда 
						Результат.Добавить(Настройка);
						Прервать;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
					
					Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
						Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи") Тогда
							
							Если ЗначениеАвтоподстановкиЭлемент = Пользователь Тогда 
								Результат.Добавить(Настройка);
								Прервать;
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
							
							СоставГруппы = ДокументооборотПраваДоступаПовтИсп.ПолучитьСоставГруппыПользователей(ЗначениеАвтоподстановкиЭлемент);
							Если СоставГруппы.Найти(Пользователь, "Пользователь") <> Неопределено Тогда 
								Результат.Добавить(Настройка);
								Прервать;
							КонецЕсли;
							
						Иначе
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Функция автоподстановки %1 вернула некорректное значение %2.'"),
								Строка(Строка.Участник),
								Строка(ЗначениеАвтоподстановкиЭлемент));
							
							ВызватьИсключение ТекстСообщения;
							
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Функция автоподстановки %1 вернула некорректное значение %2.'"),
						Строка(Строка.Участник),
						Строка(ЗначениеАвтоподстановкиЭлемент));
					
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

// Возвращает имена полей (команд) для документа переданного типа
Функция ПолучитьИменаПолейИКомандДляНастройкиДоступности(ТипДокумента) Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("ПредставлениеПоляКоманды");
	Таблица.Колонки.Добавить("ИменаПолейНаФорме");
	Таблица.Колонки.Добавить("ИменаDMService");
	
	Если ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандВнутреннийДокумент");
	ИначеЕсли ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандВходящийДокумент");
	ИначеЕсли ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандИсходящийДокумент");
	КонецЕсли;
	
	// Найдем колонки макета по их заголовкам.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПредставлениеПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ПредставлениеПоляКоманды");
	КолонкаИменаПолейНаФорме = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаПолейНаФорме");
	КолонкаИменаDMService = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаDMService");
	КолонкаФункциональнаяОпция = НомерКолонкиПоЗаголовку(Макет, 2, "ФункциональнаяОпция");
	
	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	
	Пока ИмяПоляКоманды <> "" Цикл
		
		ИмяФО = Макет.Область(НомерСтроки, КолонкаФункциональнаяОпция).Текст;
		Если Не ЗначениеЗаполнено(ИмяФО) Или ПолучитьФункциональнуюОпцию(ИмяФО) Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.ПредставлениеПоляКоманды = 
				Макет.Область(НомерСтроки, КолонкаПредставлениеПоляКоманды).Текст;
			НоваяСтрока.ИменаПолейНаФорме = 
				Макет.Область(НомерСтроки, КолонкаИменаПолейНаФорме).Текст;
			НоваяСтрока.ИменаDMService = 
				Макет.Область(НомерСтроки, КолонкаИменаDMService).Текст;
		КонецЕсли;	
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
		
	КонецЦикла;
	
	Возврат Таблица;
		
КонецФункции

// Возвращает настройки доступности по умолчанию
Функция ПолучитьНастройкиДоступностиПоУмолчанию(ТипДокумента, Роль) Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("Состояние");
	Таблица.Колонки.Добавить("Доступность");
	
	Если ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандВнутреннийДокумент");
	ИначеЕсли ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандВходящийДокумент");
	ИначеЕсли ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
		Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандИсходящийДокумент");
	КонецЕсли;	
	
	// Определим номера колонок макета.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПользователь = НомерКолонкиПоЗаголовку(Макет, 1, "Пользователь");
	КолонкаДелопроизводитель = НомерКолонкиПоЗаголовку(Макет, 1, "Делопроизводитель");
	КолонкаПоследняя = Макет.ШиринаТаблицы;
	
	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	Пока ИмяПоляКоманды <> "" Цикл
		
		Если Роль = "Пользователь" Тогда // настройки для пользователя – перед настройками для делопроизводителя
			Инд1 = КолонкаПользователь;
			Инд2 = КолонкаДелопроизводитель - 1;
		ИначеЕсли Роль = "Делопроизводитель" Тогда // настройки для делопроизводителя – до конца макета
			Инд1 = КолонкаДелопроизводитель;
			Инд2 = КолонкаПоследняя;
		КонецЕсли;
			
		Для Инд = Инд1 По Инд2 Цикл
			Состояние = Макет.Область(2, Инд).Текст;
			
			МетаданныеЗначение = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Найти(Состояние);
			Индекс = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Индекс(МетаданныеЗначение);
			ЗначениеПеречисления = Перечисления.СостоянияДокументов[Индекс];
			
			Доступность = Макет.Область(НомерСтроки, Инд).Текст;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.Состояние = ЗначениеПеречисления;
			
			Если Доступность = "Да" Тогда 
				НоваяСтрока.Доступность = 1;
			ИначеЕсли Доступность = "Нет" Тогда 
				НоваяСтрока.Доступность = 2;
			Иначе
				НоваяСтрока.Доступность = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает номер колонки в макете, найдя ее по переданному заголовку. Вызывает
// исключение, если колонка не найдена.
//
// Параметры:
//   Макет - ТабличныйДокумент - макет, в котором выполняется поиск.
//   НомерСтроки - Число - номер строки макета.
//   Заголовок - Строка - текст заголовка, по которому выполняется поиск.
//
Функция НомерКолонкиПоЗаголовку(Макет, НомерСтроки, Заголовок)
	
	ОбластьЗаголовков = Макет.Область(НомерСтроки,, НомерСтроки);
	// Выполним поиск по ячейке целиком без учета регистра.
	Результат = Макет.НайтиТекст(Заголовок,,ОбластьЗаголовков,,Истина,,Истина);
	Если Результат = Неопределено Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 макета не найдена колонка ""%2"".'"),
			НомерСтроки,
			Заголовок);
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат Результат.Лево;
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если переданное поле доступно в текущем состоянии
Функция ПолеДокументаДоступноПоСостоянию(ИмяПоляКоманды, Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(Документ) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьСостоянияДокументов.Получить() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВсеСостояния = Делопроизводство.ПолучитьВсеСостоянияДокумента(Документ).ВыгрузитьКолонку("Состояние");
	Если ВсеСостояния.Количество() > 1 Тогда 
		Инд = ВсеСостояния.Найти(Перечисления.СостоянияДокументов.Проект);
		Если Инд <> Неопределено Тогда 
			ВсеСостояния.Удалить(Инд);
		КонецЕсли;	
	КонецЕсли;	
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	НастройкиСостояний = Делопроизводство.ПолучитьНастройкиСостояний(ДокументОбъект);
	
	ДоступныеПоля = Новый Массив;
	Для Каждого НастройкаСостояния Из НастройкиСостояний Цикл
		
		ДоступностьДа = Новый Массив;
		ДоступностьНет = Новый Массив;
		
		Для Каждого Состояние Из ВсеСостояния Цикл
			
			НайденныеСтроки = НастройкаСостояния.НастройкиДоступности.НайтиСтроки(Новый Структура("Состояние", Состояние));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Доступность = 1 Тогда  // Да
					Если ДоступностьДа.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьДа.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли НайденнаяСтрока.Доступность = 2 Тогда  // Нет
					Если ДоступностьНет.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьНет.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		// Исключение из доступных полей с доступностью Нет
		Для Каждого Поле Из ДоступностьНет Цикл
			Поз = ДоступностьДа.Найти(Поле);
			Если Поз <> Неопределено Тогда 
				ДоступностьДа.Удалить(Поз);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьДа Цикл
			Если ДоступныеПоля.Найти(Поле) = Неопределено Тогда 
				ДоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
	
	Если ДоступныеПоля.Найти(ИмяПоляКоманды) = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	

// Возвращает описания поставляемых настроек доступности по состоянию
Функция ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям() Экспорт

	ОписанияНастроекДоступности = Новый Массив;
	
	// настройки для входящих документов
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "bc60e983-8b0b-4487-9a18-1894f3b02bd4";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Настройки для делопроизводителей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
	ОписаниеОбластиДелегирования.Роль = "Делопроизводитель";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	// настройки для исходящих документов
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "2296ff6c-63b1-4718-9f99-42131bd45edb";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Общие настройки пользователей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
	ОписаниеОбластиДелегирования.Роль = "Пользователь";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "972ffd63-60eb-410b-b28c-13b42b446d94";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Настройки для делопроизводителей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
	ОписаниеОбластиДелегирования.Роль = "Делопроизводитель";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	// настройки для внутренних документов
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "69557572-43a8-4c36-ad40-360889e868b7";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Общие настройки пользователей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
	ОписаниеОбластиДелегирования.Роль = "Пользователь";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "b18212b3-c597-4117-8329-1d22c8524135";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Настройки для делопроизводителей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
	ОписаниеОбластиДелегирования.Роль = "Делопроизводитель";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	Возврат ОписанияНастроекДоступности;
	
КонецФункции	

Функция ИзменениеРезолюцииДоступноПоСостоянию(Форма) Экспорт 
	
	Документ = Форма.Объект.Документ;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Резолюции", Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Получает контактное лицо корреспондента
Функция КонтактноеЛицоКорреспондента(Корреспондент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И (НЕ КонтактныеЛица.ПометкаУдаления)
	|	И ЛОЖЬ В
	|			(ВЫБРАТЬ
	|				ЛОЖЬ КАК ЗначениеЛожь
	|			ИЗ
	|				(ВЫБРАТЬ ПЕРВЫЕ 2
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					Справочник.КонтактныеЛица КАК КонтактныеЛица
	|				ГДЕ
	|					(НЕ КонтактныеЛица.ПометкаУдаления)
	|					И КонтактныеЛица.Владелец = &Владелец
	|				) КАК ВыбранныеОбъекты
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)";
	Запрос.УстановитьПараметр("Владелец", Корреспондент);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КонтактноеЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает количество документов переданного вида
Функция КоличествоДокументовПоВидуДокумента(ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда 
		Тип = "ВнутренниеДокументы";
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда 
		Тип = "ВходящиеДокументы";
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда 	
		Тип = "ИсходящиеДокументы";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник." + Тип + "
	|ГДЕ
	|	ВидДокумента = &ВидДокумента
	|	И РегистрационныйНомер <> """"";
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Возвращает количество документов для переданного нумератора
Функция КоличествоДокументовПоНумератору(Нумератор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	|ГДЕ
	|	ВходящиеДокументы.ВидДокумента.Нумератор = &Нумератор
	|	И ВходящиеДокументы.РегистрационныйНомер <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
	|ГДЕ
	|	ИсходящиеДокументы.ВидДокумента.Нумератор = &Нумератор
	|	И ИсходящиеДокументы.РегистрационныйНомер <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|ГДЕ
	|	ВнутренниеДокументы.ВидДокумента.Нумератор = &Нумератор
	|	И ВнутренниеДокументы.РегистрационныйНомер <> """"";
	Запрос.УстановитьПараметр("Нумератор", Нумератор);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить().Итог("Количество");
	
КонецФункции	

// Возвращает количество документов с пустым видом
Функция КоличествоДокументовСПустымВидом(ТипДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипДокумента = "ВходящийДокумент" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВходящихДокументов.ПустаяСсылка)";
		
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|ГДЕ
		|	ИсходящиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыИсходящихДокументов.ПустаяСсылка)";
		
	ИначеЕсли ТипДокумента = "ВнутреннийДокумент" Тогда	
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.ПустаяСсылка)";
		
	КонецЕсли;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Инициализирует персональные настройки работы с документами - для использования на клиенте
Функция ПолучитьПерсональныеНастройкиРаботыСДокументамиСервер() Экспорт
	
	Настройки = Новый Структура;

	ПоказыватьПредупреждениеПриРегистрации = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации");
	Если ПоказыватьПредупреждениеПриРегистрации = Неопределено Тогда
		ПоказыватьПредупреждениеПриРегистрации = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов"));
	
	СпособОтраженияПередачиКорреспонденту = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособОтраженияПередачиКорреспонденту");
	Если СпособОтраженияПередачиКорреспонденту = Неопределено Тогда
		СпособОтраженияПередачиКорреспонденту = Перечисления.СпособыОтраженияПередачиКонтрагенту.ЗадаватьВопрос;
		ХранилищеОбщихНастроек.Сохранить("НастройкиРаботыСДокументами", "СпособОтраженияПередачиКорреспонденту", СпособОтраженияПередачиКорреспонденту);
	КонецЕсли;
	Настройки.Вставить("СпособОтраженияПередачиКорреспонденту", СпособОтраженияПередачиКорреспонденту);
	
	УстановитьПривилегированныйРежим(Истина);
	Настройки.Вставить("ИспользоватьФайлыУВходящихДокументов", Константы.ИспользоватьФайлыУВходящихДокументов.Получить());
	Настройки.Вставить("ИспользоватьФайлыУИсходящихДокументов", Константы.ИспользоватьФайлыУИсходящихДокументов.Получить());
	
	Возврат Настройки; // параметры доступны только для чтения
	
КонецФункции

// Возвращает ключ записи регистра сведений ЖурналПередачиДокументов
Функция ПолучитьКлючЖурналаПередачи(Период, Документ, ТипЭкземпляра, НомерЭкземпляра) Экспорт
	
	Ключ = РегистрыСведений.ЖурналПередачиДокументов.СоздатьКлючЗаписи( 
		Новый Структура("Период, Документ, ТипЭкземпляра, НомерЭкземпляра",
		Период,
		Документ,
		ТипЭкземпляра,
		НомерЭкземпляра));
		
	Возврат Ключ;	
	
КонецФункции	

// Возвращает количество держателей документа
Функция КоличествоКомуПереданДокумент(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Формирует строку информации о держателях документа 
Функция СтрокаКомуПереданДокумент(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат "";
	КонецЕсли;
	
	ОригиналПередан = "";
	ОригиналПереданДата = '00010101';
	ОригиналПереданМассив = Новый Массив;
	ОригиналПереданКоличество = 0;
	ОригиналУПользователей = Ложь;
	ОригиналУКонтактныхЛиц = Ложь;
	
	КопияПередана = "";
	КопияПереданаДата = '00010101';
	КопияПереданаМассив = Новый Массив;
	КопияПереданаКоличество = 0;
	КопияУПользователей = Ложь;
	КопияУКонтактныхЛиц = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
	|	ЖурналПередачиДокументов.Пользователь КАК Пользователь,
	|	ЖурналПередачиДокументов.Период КАК ДатаПередачи,
	|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал Тогда 
			
			Если ОригиналПереданМассив.Найти(Выборка.Пользователь) = Неопределено Тогда 
				ОригиналПередан = ОригиналПередан + Строка(Выборка.Пользователь) + ", ";
				ОригиналПереданМассив.Добавить(Выборка.Пользователь);
				
				Если Не ОригиналУПользователей
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
					ОригиналУПользователей = Истина;
				КонецЕсли;
				Если Не ОригиналУКонтактныхЛиц
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
					ОригиналУКонтактныхЛиц = Истина;
				КонецЕсли;
			КонецЕсли;	
				
			ОригиналПереданКоличество = ОригиналПереданКоличество + 1;
			ОригиналПереданДата = Выборка.ДатаПередачи;
			
		ИначеЕсли Выборка.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Копия Тогда 
			
			Если КопияПереданаМассив.Найти(Выборка.Пользователь) = Неопределено Тогда 
				КопияПередана = КопияПередана + Строка(Выборка.Пользователь) + ", ";
				КопияПереданаМассив.Добавить(Выборка.Пользователь);
				
				Если Не КопияУПользователей
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
					КопияУПользователей = Истина;
				КонецЕсли;
				Если Не КопияУКонтактныхЛиц
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
					КопияУКонтактныхЛиц = Истина;
				КонецЕсли;
			КонецЕсли;
			
			КопияПереданаКоличество = КопияПереданаКоличество + 1;
			КопияПереданаДата = Выборка.ДатаПередачи;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОригиналПередан <> "" Тогда
		ОригиналПередан = Лев(ОригиналПередан, СтрДлина(ОригиналПередан) - 2);
		
		Если ОригиналПереданКоличество = 1 Тогда
			
			Если ОригиналУПользователей Тогда  
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригинал находится у пользователя %1 с %2'"),
					ОригиналПередан,
					Формат(ОригиналПереданДата, "ДФ=dd.MM.yyyy"));
			Иначе 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригинал находится у контактного лица %1 с %2'"),
					ОригиналПередан,
					Формат(ОригиналПереданДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
		ИначеЕсли ОригиналПереданКоличество > 1 Тогда 
			
			ОригиналПереданПользователямКоличество = ОригиналПереданМассив.Количество();
			
			Если ОригиналПереданПользователямКоличество = 1 И ОригиналУПользователей Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователя %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналПереданПользователямКоличество = 1 И ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у контактного лица %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналУПользователей И ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователей и контактных лиц %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у контактных лиц %1'"),
					ОригиналПередан);
			Иначе 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователей %1'"),
					ОригиналПередан);
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;	
	
	Если КопияПередана <> "" Тогда
		КопияПередана = Лев(КопияПередана, СтрДлина(КопияПередана) - 2);
		
		Если КопияПереданаКоличество = 1 Тогда
				
			Если КопияУПользователей Тогда  
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копия находится у пользователя %1 с %2'"),
					КопияПередана,
					Формат(КопияПереданаДата, "ДФ=dd.MM.yyyy"));
			Иначе 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копия находится у контактного лица %1 с %2'"),
					КопияПередана,
					Формат(КопияПереданаДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
		ИначеЕсли КопияПереданаКоличество > 1 Тогда 
			
			КопияПереданаПользователямКоличество = КопияПереданаМассив.Количество();
			
			Если КопияПереданаПользователямКоличество = 1 И КопияУПользователей Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователя %1'"),
					КопияПередана);
			ИначеЕсли КопияПереданаПользователямКоличество = 1 И КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у контактного лица %1'"),
					КопияПередана);
			ИначеЕсли КопияУПользователей И КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователей и контактных лиц %1'"),
					КопияПередана);
			ИначеЕсли КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у контактных лиц %1'"),
					КопияПередана);
			Иначе 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователей %1'"),
					КопияПередана);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если ОригиналПередан <> "" И КопияПередана <> "" Тогда 
		Возврат ОригиналПередан + Символы.ПС + КопияПередана;
	Иначе
		Возврат ОригиналПередан + КопияПередана;
	КонецЕсли;	
	
КонецФункции	

// Формирует список получателей и контактных лиц для автоподбора
Функция СформироватьДанныеВыбораПолучателяДляЖурналаПередачи(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка,
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка,
		|	NULL
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Наименование ПОДОБНО &Текст");
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда 
			ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Выборка.Подразделение) + ")");
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
    Возврат ДанныеВыбора;
	
КонецФункции

// Получает актуальное состояние дела
Функция ПолучитьСостояниеДела(Дело) Экспорт
	
	Если Не ЗначениеЗаполнено(Дело) Тогда
		Возврат Перечисления.СостоянияДелХраненияДокументов.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДелХраненияДокументов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияДелХраненияДокументов.СрезПоследних(, ДелоХраненияДокументов = &Дело) КАК СостоянияДелХраненияДокументов";
	Запрос.УстановитьПараметр("Дело", Дело);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Перечисления.СостоянияДелХраненияДокументов.ПустаяСсылка();
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние; 
	
КонецФункции

// Возвращает режим выбора вида документа
Функция ПолучитьРежимВыбораВидаДокумента(ТипДокумента) Экспорт
	
	Если ТипДокумента = "ВходящийДокумент" Тогда 
		ВидДокумента = "ВидыВходящихДокументов";
	ИначеЕсли ТипДокумента = "ИсходящийДокумент" Тогда 
		ВидДокумента = "ВидыИсходящихДокументов";
	ИначеЕсли ТипДокумента = "ВнутреннийДокумент" Тогда 
		ВидДокумента = "ВидыВнутреннихДокументов";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ЗначениеЛожь
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						&ВидДокумента КАК ТаблицаВидаДокументов
	|					ГДЕ
	|						ТаблицаВидаДокументов.ЭтоГруппа)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ В
	|					(ВЫБРАТЬ
	|						ЛОЖЬ КАК ЗначениеЛожь
	|					ИЗ
	|						(ВЫБРАТЬ ПЕРВЫЕ 16
	|							ИСТИНА КАК ЗначениеИстина
	|						ИЗ
	|							&ВидДокумента КАК ТаблицаВидаДокументов
	|						) КАК ВыбранныеОбъекты
	|					ИМЕЮЩИЕ
	|						КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) > 15)
	|		КОНЕЦ", "&ВидДокумента", "Справочник." + ВидДокумента);
	
	Результат = Запрос.Выполнить();
	БыстрыйВыборВидаДокумента = Результат.Пустой();
	
	Возврат БыстрыйВыборВидаДокумента;
	
КонецФункции	

// Проверяет проверку возможности отнесения документа в дело 
Функция ДелоМожетСодержатьДокумент(ТипПроверки, ЗначениеПроверки, Дело) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипПроверки = "ВидыДокументов" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И Дело.НоменклатураДел.ВидыДокументов.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИСТИНА 
			|ГДЕ
			|	&ВидДокумента В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				ВидыДокументов.ВидДокумента
			|			ИЗ
			|				Справочник.НоменклатураДел.ВидыДокументов КАК ВидыДокументов
			|			ГДЕ
			|				ВидыДокументов.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("ВидДокумента", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", Дело.НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипПроверки = "Корреспонденты" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И Дело.НоменклатураДел.Корреспонденты.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ИСТИНА 
			|ГДЕ
			|	&Корреспондент В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				Корреспонденты.Корреспондент
			|			ИЗ
			|				Справочник.НоменклатураДел.Корреспонденты КАК Корреспонденты
			|			ГДЕ
			|				Корреспонденты.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("Корреспондент", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", Дело.НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ТипПроверки = "ВопросыДеятельности" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И Дело.НоменклатураДел.ВопросыДеятельности.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ИСТИНА 
			|ГДЕ
			|	&ВопросДеятельности В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				ВопросыДеятельности.ВопросДеятельности
			|			ИЗ
			|				Справочник.НоменклатураДел.ВопросыДеятельности КАК ВопросыДеятельности
			|			ГДЕ
			|				ВопросыДеятельности.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", Дело.НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

// Возвращает Истина, если корреспондент является юридическим лицом
Функция КорреспондентЮрЛицо(Корреспондент) Экспорт 
	
	Возврат ЗначениеЗаполнено(Корреспондент) 
		  И ТипЗнч(Корреспондент) = Тип("СправочникСсылка.Корреспонденты") 
		  И (Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		  Или Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		  Или Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент);
	
КонецФункции

// Возвращает структуру данных корреспондента
Функция ПолучитьДанныеКорреспондента(Корреспондент) Экспорт 
	
	ДанныеКорреспондента = Новый Структура;
	ДанныеКорреспондента.Вставить("КорреспондентЮрЛицо", КорреспондентЮрЛицо(Корреспондент));
	ДанныеКорреспондента.Вставить("КонтактноеЛицо", 	 КонтактноеЛицоКорреспондента(Корреспондент));
	
	Возврат ДанныеКорреспондента;
		  
КонецФункции

Процедура УдалитьВременныеСохраненныеПоиски(ТекущийПользователь) Экспорт
	
	СписокСохраненныхПоисков = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого СохраненныйПоиск Из СписокСохраненныхПоисков Цикл
		КлючПоиска = СохраненныйПоиск.Значение;
		Если Найти(КлючПоиска, "_временный_") > 0 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				ХранилищеНастроекДанныхФорм.Удалить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючПоиска, ПользовательИБ.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПротоколированиеРаботыПользователей.ЗаписатьВыходИзСистемы();
	
КонецПроцедуры

Функция ПолучитьТекущуюДату() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// Получает признак Отправлен
Функция ПолучитьПризнакОтправлен(ИсходящийДокумент, Получатель, Адресат) Экспорт
	
	Отправлен = Ложь;
	
	ПараметрыОтбора = Новый Структура("Получатель", Получатель);
	НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 1 Тогда 
		Отправлен =	НайденныеСтроки[0].Отправлен;
	Иначе
		ПараметрыОтбора = Новый Структура("Получатель, Адресат", Получатель, Адресат);
		НайденныеСтроки = ИсходящийДокумент.Получатели.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда 
			Отправлен =	НайденныеСтроки[0].Отправлен;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Отправлен;
	
КонецФункции	

// Заполнить подчиненные документы
Процедура ЗаполнитьПодчиненныеДокументы(СтрокаДерева, ПараметрыДокумент) Экспорт
	
	Ссылка = СтрокаДерева.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящиеДокументы.Ссылка КАК Ссылка,
		|	ИсходящиеДокументы.Заголовок КАК Заголовок,
		|	ИсходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ИсходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	1 КАК ИндексКартинки,
		|	ИсходящиеДокументы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
		|		ПО ИсходящиеДокументы.Ссылка = СвязьПредметПереписки.Документ
		|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО ИсходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И СвязьПредметПереписки.СвязанныйДокумент = &ПредметПереписки
		|	И (НЕ ИсходящиеДокументы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеДокументы.Ссылка КАК Ссылка,
		|	ВходящиеДокументы.Заголовок КАК Заголовок,
		|	ВходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	0 КАК ИндексКартинки,
		|	ВходящиеДокументы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
		|		ПО ВходящиеДокументы.Ссылка = СвязьПредметПереписки.Документ
		|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО ВходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И СвязьПредметПереписки.СвязанныйДокумент = &ПредметПереписки
		|	И (НЕ ВходящиеДокументы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПредметПереписки", ПараметрыДокумент);
	
	ТаблДокументовЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблДокументов = СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса);
	
	// Заполняем письма
	КорневыеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюКорневыхПисемПоПредмету(Ссылка);
	Для Каждого КорневоеПисьмо Из КорневыеПисьма Цикл
		СтрокаПисьма = ТаблДокументов.Добавить();
		СтрокаПисьма.ДатаРегистрации = КорневоеПисьмо.Дата;
		СтрокаПисьма.ДатаСоздания = КорневоеПисьмо.Дата;
		СтрокаПисьма.Ссылка = КорневоеПисьмо.Ссылка;
		СтрокаПисьма.Заголовок = КорневоеПисьмо.Тема;
	КонецЦикла;	
	
	ТаблДокументов.Сортировать("ДатаСоздания");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Строка.Ссылка) Тогда // письмо
			
			ЗаполнитьУзелДереваПереписки(СтрокаДерева.Строки, Строка.Ссылка, ПараметрыДокумент);
			
		Иначе	// документ
		
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы")  Тогда 
				Отправлен = ПолучитьПризнакОтправлен(Строка.Ссылка, Ссылка.Отправитель, Ссылка.Подписал);
				НоваяСтрока.ИндексКартинки = ?(Отправлен, 1, 3);
			КонецЕсли;
			
			ЗаполнитьПодчиненныеДокументы(НоваяСтрока, ПараметрыДокумент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьУзелДереваПереписки(ЭлементыДерева, ПисьмоРодитель, Предмет) Экспорт
	
	СтрокаКорня = ЭлементыДерева.Добавить();
	
	РеквизитыПисьма = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ПисьмоРодитель,
		"Дата, Тема");
	СтрокаКорня.Ссылка = ПисьмоРодитель;
	СтрокаКорня.ДатаРегистрации = РеквизитыПисьма.Дата;
	
	СтрокаКорня.Заголовок = РеквизитыПисьма.Тема;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоРодитель) Тогда
		СтрокаКорня.ИндексКартинки = 1;
	Иначе
		СтрокаКорня.ИндексКартинки = 0;
	КонецЕсли;
	
	Таблица = ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьмаПоПредмету(ПисьмоРодитель, Предмет);
	Для НомерПисьма = 0 По Таблица.Количество() - 1 Цикл
		
		Письмо = Таблица[НомерПисьма];
		ЗаполнитьУзелДереваПереписки(СтрокаКорня.Строки, Письмо.Ссылка, Предмет);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить дерево переписки
Функция ЗаполнитьДерево(Дерево, ПараметрыДокумент) Экспорт
	
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящийДокумент.Ссылка КАК Ссылка,
	|	ВходящийДокумент.ДатаРегистрации,
	|	ВходящийДокумент.РегистрационныйНомер,
	|	ВходящийДокумент.Заголовок,
	|	ВходящийДокумент.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.ВходящиеДокументы КАК ВходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО ВходящийДокумент.Ссылка = СвязьПредметПереписки.Документ
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО ВходящийДокумент.Ссылка = СвязьВОтветНа.Документ
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНаПредметПереписки
	|		ПО (СвязьВОтветНа.СвязанныйДокумент = СвязьВОтветНаПредметПереписки.Документ)
	|			И (СвязьВОтветНаПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|ГДЕ
	|	СвязьПредметПереписки.СвязанныйДокумент = &ПредметПереписки
	|	И (СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|			ИЛИ ЕСТЬNULL(СвязьВОтветНаПредметПереписки.СвязанныйДокумент, """") <> &ПредметПереписки)
	|	И (НЕ ВходящийДокумент.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсходящийДокумент.Ссылка,
	|	ИсходящийДокумент.ДатаРегистрации,
	|	ИсходящийДокумент.РегистрационныйНомер,
	|	ИсходящийДокумент.Заголовок,
	|	ИсходящийДокумент.ДатаСоздания
	|ИЗ
	|	Справочник.ИсходящиеДокументы КАК ИсходящийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьПредметПереписки
	|		ПО ИсходящийДокумент.Ссылка = СвязьПредметПереписки.Документ
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
	|		ПО ИсходящийДокумент.Ссылка = СвязьВОтветНа.Документ
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНаПредметПереписки
	|		ПО (СвязьВОтветНа.СвязанныйДокумент = СвязьВОтветНаПредметПереписки.Документ)
	|			И (СвязьВОтветНаПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|ГДЕ
	|	СвязьПредметПереписки.СвязанныйДокумент = &ПредметПереписки
	|	И (СвязьВОтветНа.СвязанныйДокумент ЕСТЬ NULL 
	|			ИЛИ ЕСТЬNULL(СвязьВОтветНаПредметПереписки.СвязанныйДокумент, """") <> &ПредметПереписки)
	|	И (НЕ ИсходящийДокумент.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("ПредметПереписки", ПараметрыДокумент);
	
	ТаблДокументовЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблДокументов = СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса);
	
	// Заполняем письма
	КорневыеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюКорневыхПисемПоПредмету(ПараметрыДокумент);
	Для Каждого КорневоеПисьмо Из КорневыеПисьма Цикл
		СтрокаПисьма = ТаблДокументов.Добавить();
		СтрокаПисьма.ДатаРегистрации = КорневоеПисьмо.Дата;
		СтрокаПисьма.ДатаСоздания = КорневоеПисьмо.Дата;
		СтрокаПисьма.Ссылка = КорневоеПисьмо.Ссылка;
		СтрокаПисьма.Заголовок = КорневоеПисьмо.Тема;
	КонецЦикла;	
	
	ТаблДокументов.Сортировать("ДатаСоздания");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Строка.Ссылка) Тогда // письмо
			
			ЗаполнитьУзелДереваПереписки(Дерево.Строки, Строка.Ссылка, ПараметрыДокумент);
			
		Иначе	// документ
		
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
				НоваяСтрока.ИндексКартинки = 0;
			ИначеЕсли ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
				Если НоваяСтрока.Ссылка.Получатели.Найти(Истина, "Отправлен") <> Неопределено Тогда 
					НоваяСтрока.ИндексКартинки = 1;
				Иначе
					НоваяСтрока.ИндексКартинки = 3;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьПодчиненныеДокументы(НоваяСтрока, ПараметрыДокумент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

// Делает копию таблицы значений, расширяя тип поля Ссылка документами ВхПисьмо ИсхПисьмо
Функция СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса) Экспорт
	
	ТаблДокументов = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВходящиеДокументы"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ИсходящиеДокументы"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	ТаблДокументов.Колонки.Добавить("Ссылка", ДопустимыеТипы);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ДатаРегистрации");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ДатаСоздания");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("Заголовок");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("РегистрационныйНомер");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ИндексКартинки");
	Если Колонка <> Неопределено Тогда
		ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЕсли;
	
	Для Каждого Строка Из ТаблДокументовЗапроса Цикл
		НоваяСтрока = ТаблДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	Возврат ТаблДокументов;
	
КонецФункции	

// Устанавливает пометку удаления предварительно блокируя объект
Процедура УстановитьПометкуУдаления(Ссылка, Пометка) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.Заблокировать();
	Объект.УстановитьПометкуУдаления(Пометка);
	
КонецПроцедуры

// Добавить в дерево - построение дерева переписки для вх или исх документа
Процедура ДобавитьПисьмоВДерево(СтрокиДерева, Письмо, ТекущееПисьмо, ВыведенныеПисьма) Экспорт
	
	Если ВыведенныеПисьма.Найти(Письмо) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыведенныеПисьма.Добавить(Письмо);
	
	СтрокаДерева = СтрокиДерева.Добавить();
	СтрокаДерева.Ссылка = Письмо;
	СтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(Письмо);
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Письмо) Тогда
		СтрокаДерева.Заголовок = ПолучитьПредставлениеДокумента(Письмо);
		СтрокаДерева.РегистрационныйНомер = Письмо.РегистрационныйНомер;
		СтрокаДерева.ДатаРегистрации = Письмо.ДатаРегистрации;
		СтрокаДерева.ДатаСоздания = Письмо.ДатаСоздания;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Письмо) Тогда
		СтрокаДерева.Заголовок = ПолучитьПредставлениеДокумента(Письмо);
		СтрокаДерева.РегистрационныйНомер = Письмо.РегистрационныйНомер;
		СтрокаДерева.ДатаРегистрации = Письмо.ДатаРегистрации;
		СтрокаДерева.ДатаСоздания = Письмо.ДатаСоздания;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Письмо) Тогда
		СтрокаДерева.Заголовок = ПолучитьПредставлениеДокумента(Письмо);
		СтрокаДерева.РегистрационныйНомер = Письмо.РегистрационныйНомер;
		СтрокаДерева.ДатаРегистрации = Письмо.ДатаРегистрации;
		СтрокаДерева.ДатаСоздания = Письмо.ДатаСоздания;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда
		СтрокаДерева.Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Письмо);
		СтрокаДерева.РегистрационныйНомер = "";
		СтрокаДерева.ДатаРегистрации = Письмо.Дата;
		СтрокаДерева.ДатаСоздания = Письмо.Дата;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Письмо) Тогда
		СтрокаДерева.Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Письмо);
		СтрокаДерева.РегистрационныйНомер = "";
		СтрокаДерева.ДатаРегистрации = Письмо.Дата;
		СтрокаДерева.ДатаСоздания = Письмо.Дата;
	КонецЕсли;
	
	Если Письмо = ТекущееПисьмо Тогда
		СтрокаДерева.Текущий = Истина;
	КонецЕсли;
	
	ЗаполнитьПодчиненныеДокументыВходящегоИлиИсходящего(СтрокаДерева.Строки, Письмо, ТекущееПисьмо, ВыведенныеПисьма);
	
КонецПроцедуры

// Получить представление документа для истории переписки
Функция ПолучитьПредставлениеДокумента(Документ) Экспорт
	
	Возврат Документ.Заголовок + " " + ВКавычках(Документ.Метаданные().ПредставлениеОбъекта, "(", ")")
	
КонецФункции

// Заполнить подчиненные документы/письма - построение дерева переписки для вх или исх документа
Процедура ЗаполнитьПодчиненныеДокументыВходящегоИлиИсходящего(СтрокиДерева, Родитель, ТекущееПисьмо, ВыведенныеПисьма) Экспорт
	
	ПодчиненныеПисьма = Новый Массив;
	ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьма(Родитель, ПодчиненныеПисьма);
	Для каждого ПодчиненноеПисьмо Из ПодчиненныеПисьма Цикл
		ДобавитьПисьмоВДерево(СтрокиДерева, ПодчиненноеПисьмо, ТекущееПисьмо, ВыведенныеПисьма);
	КонецЦикла;
	
	КорневыеПисьмаПоПредмету = ВстроеннаяПочтаСервер.ПолучитьКорневыеПисьмаПоПредмету(Родитель);
	Для каждого КорневоеПисьмо Из КорневыеПисьмаПоПредмету Цикл
		ДобавитьПисьмоВДерево(СтрокиДерева, КорневоеПисьмо, ТекущееПисьмо, ВыведенныеПисьма);
	КонецЦикла;
	
	СтрокиДерева.Сортировать("ДатаСоздания");
	
КонецПроцедуры

// Получить индекс картинки для истории переписки
Функция ПолучитьИндексКартинки(Документ) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда
		Возврат 2;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Документ) Тогда
		Возврат 0;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ) Тогда
		Если Документ.Получатели.Найти(Истина, "Отправлен") <> Неопределено Тогда
			Возврат 1;
		Иначе
			Возврат 3;
		КонецЕсли;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ) Тогда
		Возврат 0;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		Если ЗначениеЗаполнено(Документ.ДатаОтправки) Тогда
			Возврат 1;
		Иначе
			Возврат 3;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный вид документа'");
	КонецЕсли;
	
КонецФункции

// Выводит номенклатуру дел в дерево
Процедура ЗаполнитьДеревоНоменклатурыДел(Дерево, Год, Организация) Экспорт 
	
	// получение дерева разделов номенклатуры дел
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыНоменклатурыДел.Индекс КАК Индекс,
	|	РазделыНоменклатурыДел.Наименование,
	|	РазделыНоменклатурыДел.ПометкаУдаления,
	|	РазделыНоменклатурыДел.Ссылка КАК Ссылка,
	|	РазделыНоменклатурыДел.Родитель
	|ИЗ
	|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел ";
	
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	" ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Родитель = Выборка.Родитель;
		Если Родитель.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;
		
		// Пропускаем дублирующийся разделы
		ДубльСтроки = СтрокаРодитель.Строки.Найти(Выборка.Ссылка, "Ссылка", Истина);
		Если ДубльСтроки <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
		НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 1, 0);
		НоваяСтрока.ЭтоГруппа = Истина;
		
	КонецЦикла;
	
	// получение списка элементов номенклатуры дел
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДел.Индекс,
	|	НоменклатураДел.Наименование,
	|	НоменклатураДел.ПометкаУдаления,
	|	НоменклатураДел.Ссылка КАК Ссылка,
	|	НоменклатураДел.Раздел
	|ИЗ
	|	Справочник.НоменклатураДел КАК НоменклатураДел ";
		
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО Индекс";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Раздел.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Выборка.Раздел, "Ссылка", Истина);
		КонецЕсли;	
		
		Если СтрокаРодитель <> Неопределено Тогда 
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
			НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 3, 2);
			НоваяСтрока.ЭтоГруппа = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Дерево.Строки.Количество() > 0 Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ссылка = Справочники.НоменклатураДел.ПустаяСсылка();
		НоваяСтрока.Наименование = НСтр("ru = '<Номенклатура дел не указана>'");
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.ЭтоГруппа = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выводит дела (тома) в дерево
Процедура ЗаполнитьДеревоДелТомов(Дерево, Год, Организация) Экспорт 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДелаХраненияДокументов.Ссылка,
	|	ДелаХраненияДокументов.Наименование,
	|	ДелаХраненияДокументов.ПометкаУдаления,
	|	ДелаХраненияДокументов.НоменклатураДел.Раздел КАК Раздел
	|ИЗ
	|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов";
	
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (ДелаХраненияДокументов.Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (ДелаХраненияДокументов.НоменклатураДел.Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + 
	" УПОРЯДОЧИТЬ ПО
	|	ДелаХраненияДокументов.НоменклатураДел.Индекс,
	|	ДелаХраненияДокументов.НомерТома";
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаДела = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыНоменклатурыДел.Индекс,
	|	РазделыНоменклатурыДел.Наименование,
	|	РазделыНоменклатурыДел.ПометкаУдаления,
	|	РазделыНоменклатурыДел.Ссылка КАК Ссылка,
	|	РазделыНоменклатурыДел.Родитель
	|ИЗ
	|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
	|ГДЕ
	|	РазделыНоменклатурыДел.Ссылка В(&Разделы)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Разделы", ТаблицаДела.ВыгрузитьКолонку("Раздел"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Родитель = Выборка.Родитель;
		Если Родитель.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;	
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
		НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 1, 0);
		НоваяСтрока.ЭтоГруппа = Истина;
		
	КонецЦикла;
	
	
	Для Каждого Строка Из ТаблицаДела Цикл
		Если Строка.Раздел.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Строка.Раздел, "Ссылка", Истина);
		КонецЕсли;	
		
		Если СтрокаРодитель <> Неопределено Тогда 
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Ссылка = Строка.Ссылка;
			НоваяСтрока.Наименование = Строка.Наименование;
			НоваяСтрока.ИндексКартинки = ?(Строка.ПометкаУдаления, 3, 2);
			НоваяСтрока.ЭтоГруппа = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Дерево.Строки.Количество() > 0 Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ссылка = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		НоваяСтрока.Наименование = НСтр("ru = '<Дело (том) не указано>'");
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.ЭтоГруппа = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак необходимости указания связи для регистрации документа
Функция ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураОбъекта) Экспорт
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураОбъекта);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Нумератор", Нумератор);
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыНумератора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Нумератор, 
		"НезависимаяНумерацияПоСвязанномуДокументу, ТипСвязи");
	
	Если Не ПараметрыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТипСвязиНумератора", ПараметрыНумератора.ТипСвязи);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСвязиДокументов") Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументДляНумерации = Неопределено;
	Если ЗначениеЗаполнено(СтруктураОбъекта.Ссылка) Тогда 
		ДокументДляНумерации = СвязиДокументов.ПолучитьСвязанныйДокумент(СтруктураОбъекта.Ссылка, ПараметрыНумератора.ТипСвязи);
	Иначе
		ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(Нумератор.ТипСвязи);
		Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураОбъекта.Свойство(ИмяТипаСвязи) Тогда 
			ДокументДляНумерации = СтруктураОбъекта[ИмяТипаСвязи];
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументДляНумерации) Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	НастройкиСвязи = СвязиДокументов.ПолучитьНастройкиСвязи(СтруктураОбъекта);
	СтрокиНастроекСвязи = НастройкиСвязи.НайтиСтроки(Новый Структура("ТипСвязи", ПараметрыНумератора.ТипСвязи));
		
	ТипыВидыСвязанныхДокументовДляНумерации = Новый Массив;
	Для Каждого СтрокаНастроекСвязи из СтрокиНастроекСвязи Цикл
		Строка = Новый Структура("Тип, Вид");
		Строка.Тип = СтрокаНастроекСвязи.ТипСсылкаНа;
		Строка.Вид = СтрокаНастроекСвязи.СсылкаНа;
			
		ТипыВидыСвязанныхДокументовДляНумерации.Добавить(Строка);
	КонецЦикла;
	СтруктураВозврата.Вставить("ТипыВидыСвязанныхДокументовДляНумерации", ТипыВидыСвязанныхДокументовДляНумерации);
		
	
	СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Истина);
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет возможность изменить вид документа, если у него имеются связанные документы
Процедура ПроверкаСвязейПриИзмененииВидаДокумента(Объект, Отказ) Экспорт
		
	Если Делопроизводство.ИспользоватьВидыДокументов(Объект.ВидДокумента) И Не Объект.Ссылка.Пустая() Тогда
		
		СтарыйВидДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Ссылка, "ВидДокумента");
		
		// если изменен вид документа
		Если Объект.ВидДокумента <> СтарыйВидДокумента Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ 
			|	СвязиДокументов.СвязанныйДокумент,
			|   СвязиДокументов.ТипСвязи
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ГДЕ
			|	СвязиДокументов.Документ = &Документ";
			
			Запрос.УстановитьПараметр("Документ", Объект.Ссылка);		
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ДокументСтруктура = Новый Структура;
				ДокументСтруктура.Вставить("Ссылка", Объект.Ссылка);
				ДокументСтруктура.Вставить("ВидДокумента", Объект.ВидДокумента);
				
				НастройкаСвязи = СвязиДокументов.ПолучитьНастройкуСвязи(ДокументСтруктура, Выборка.СвязанныйДокумент, Выборка.ТипСвязи);
				
				Если НастройкаСвязи = Неопределено Тогда				
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для документа указана связь ""%1"", которую нельзя использовать для документов этого вида'"), 
						Строка(Выборка.ТипСвязи));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку обязательного заполнения рабочей группы
Функция СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов Тогда
		Возврат НСтр("ru = 'Заполнение рабочей группы является обязательным;'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает строку автоматического ведения состава рабочей группы
Функция СтрокаАвтоматическиВестиСоставУчастниковРабочейГруппы(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы Тогда
		Возврат НСтр("ru = 'Автоматически ведется состав рабочей группы;'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает список дел по вводу по строке с указанным признаком дело закрыто
Функция СформироватьДанныеВыбораДелаХранения(Знач Текст, Знач Организация, Подразделение = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДелаХраненияДокументов.Ссылка,
			|	ДелаХраненияДокументов.Наименование,
			|	ДелаХраненияДокументов.НоменклатураДел
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	(ДелаХраненияДокументов.Наименование ПОДОБНО &Текст
			|			ИЛИ ДелаХраненияДокументов.НоменклатураДел.Индекс + "" "" + ДелаХраненияДокументов.Наименование ПОДОБНО &Текст)
			|	И Не ДелаХраненияДокументов.ДелоЗакрыто
			|	И (&Дата >= НАЧАЛОПЕРИОДА(ДелаХраненияДокументов.ДатаНачала, ДЕНЬ)
			|			ИЛИ ДелаХраненияДокументов.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
			|	И (&Дата <= КОНЕЦПЕРИОДА(ДелаХраненияДокументов.ДатаОкончания, ДЕНЬ)
			|			ИЛИ ДелаХраненияДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))"; 
			   
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
	   Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.Организация = &Организация";
	   Запрос.УстановитьПараметр("Организация", Организация);
  	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.Подразделение В(&Подразделение)";
			
		ПустоеИПодразделение = ПолучитьПодразделениеИПустуюСсылку(Подразделение);			
	    Запрос.УстановитьПараметр("Подразделение", ПустоеИПодразделение);
  	КонецЕсли;

	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());    

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НоменклатураДел, "Индекс") + " " + Выборка.Наименование);
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений, содержащий подходящих получателей
//
Функция СформироватьДанныеВыбораПолучателя(Текст, ТолькоФизическиеЛица = Ложь) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка КАК Корреспондент,
			|	НЕОПРЕДЕЛЕНО КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Корреспонденты КАК Корреспонденты
			|ГДЕ
			|	Корреспонденты.Наименование ПОДОБНО &Текст
			|	И Не Корреспонденты.ПометкаУдаления";
		
	Если ТолькоФизическиеЛица Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Корреспонденты.ЮрФизЛицо = &ФизЛицо";
		Запрос.Параметры.Вставить("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	Иначе	
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	КонтактныеЛица.Владелец,
			|	КонтактныеЛица.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Наименование ПОДОБНО &Текст
			|	И Не КонтактныеЛица.ПометкаУдаления";
    КонецЕсли;	
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КонтактноеЛицо = Неопределено Тогда 
			ДанныеВыбора.Добавить(
				Новый Структура("Корреспондент, КонтактноеЛицо", Выборка.Корреспондент, Неопределено), 
				Строка(Выборка.Корреспондент));
		Иначе
			ДанныеВыбора.Добавить(
				Новый Структура("Корреспондент, КонтактноеЛицо", Выборка.Корреспондент, Выборка.КонтактноеЛицо),
				Строка(Выборка.КонтактноеЛицо) + " (" + Выборка.Корреспондент + ")");
		КонецЕсли;	
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений, содержащий подходящих получателей указанного корреспондента
//
Функция СформироватьДанныеВыбораКонтактногоЛицаПолучателя(Текст, Корреспондент) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Наименование ПОДОБНО &Текст
			|	И КонтактныеЛица.Владелец = &Корреспондент
			|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Новый Структура("Корреспондент, КонтактноеЛицо",
				ОбщегоНазначения.ПолучитьЗначениеРеквизита(Выборка.Ссылка, "Владелец"), Выборка.Ссылка),
			Строка(Выборка.Ссылка));
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Проверяет соответствие организации объекта с организацией указанной в номенклатуре дел
//
// Параметры
//  СправочникОбъект – Объект, организацию которого необходимо проверить
//  Отказ	 		 - Булево - в него возвращается Истина в случае отказа
//
Процедура ПроверитьСоответствиеНоменклатурыДел(СправочникОбъект, Отказ) Экспорт
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.НоменклатураДел, "Организация");
		
		Если ЗначениеЗаполнено(СправочникОбъект.НоменклатураДел) 
			И СправочникОбъект.Организация <> Организация Тогда 
			Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ШаблоныВнутреннихДокументов")
				Или ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ШаблоныВходящихДокументов")
				Или ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ШаблоныИсходящихДокументов") Тогда 
				ТекстСообщения = НСтр("ru = 'Номенклатура дел не относится к организации указанной в шаблоне.'");
			Иначе 
				ТекстСообщения = НСтр("ru = 'Номенклатура дел не относится к организации указанной в документе.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,,
				"СправочникОбъект.НоменклатураДел",,
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие организации объекта с организацией указанной в деле
//
// Параметры
//  СправочникОбъект – Объект, организацию которого необходимо проверить
//  Отказ	 		 - Булево - в него возвращается Истина в случае отказа
//
Процедура ПроверитьЗаполнениеДела(СправочникОбъект, Отказ) Экспорт
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СправочникОбъект.Дело, "Организация");
		
		Если ЗначениеЗаполнено(СправочникОбъект.Дело) 
			И СправочникОбъект.Организация <> Организация Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дело не относится к организации документа.'"),,
				"СправочникОбъект.Дело",, 
				Отказ);				
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список значений, содержащий подходящие номенклатуры дел
//
Функция СформироватьДанныеВыбораНоменклатурыДел(Текст, Организация, Подразделение = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НоменклатураДел.Ссылка КАК Ссылка,
			|	НоменклатураДел.ПолноеНаименование,
			|	НоменклатураДел.Индекс
			|ИЗ
			|	Справочник.НоменклатураДел КАК НоменклатураДел
			|ГДЕ
			|	НоменклатураДел.ПолноеНаименование ПОДОБНО &Текст
			|	И НоменклатураДел.Организация = &Организация
			|	И НоменклатураДел.Год = &Год";
			
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И НоменклатураДел.Раздел.Подразделение В(&Подразделение)";	
			
		МассивПодразделений = ПолучитьПодразделениеИПустуюСсылку(Подразделение);
		Запрос.УстановитьПараметр("Подразделение", МассивПодразделений);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, 
			Строка(Выборка.ПолноеНаименование) + " (" + Строка(Выборка.Индекс) + ")");
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает массив, содержащий подразделение и его родительские подразделения
//
// Параметры:
//  Подразделение  				- Справочник.СтруктураПредприятия - подразделение добавляемое в массив
//  ДобавитьПустоеПодразделение - Булево - если Истина, то в массив добавляется пустая ссылка 
//
// Возвращаемое значение
//    Массив - содержащий переданное подразделение, его родительские подразделения, 
//		и пустую ссылку справочника структуры предприятия, если параметр ДобавитьПустоеПодразделение = Истина
//
Функция ПолучитьПодразделениеИРодителей(Подразделение, ДобавитьПустоеПодразделение = Ложь) Экспорт
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Подразделение);	
	
	Если ДобавитьПустоеПодразделение Тогда 
		МассивРодителей.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());	
	КонецЕсли;
	
	Родитель = Подразделение.Родитель;
	
	Пока ЗначениеЗаполнено(Родитель) Цикл 
		МассивРодителей.Добавить(Родитель);
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
	КонецЦикла;	
	
	Возврат МассивРодителей;
	
КонецФункции	

// Возвращает массив с подразделением и пустой ссылкой справочника структуры предприятия
//
// Параметры:
//  Подразделение  - Справочник.СтруктураПредприятия - подразделение добавляемое в массив
//
// Возвращаемое значение
//    Массив - содержащий переданное подразделение и пустую ссылку справочника структуры предприятия
//
Функция ПолучитьПодразделениеИПустуюСсылку(Подразделение) Экспорт
	
	ПодразделениеИПустое = Новый Массив;
	ПодразделениеИПустое.Добавить(Подразделение);	
	ПодразделениеИПустое.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());	
		
	Возврат ПодразделениеИПустое;
	
КонецФункции	

// Проверяет является ли подразделение дочерним к родительскому подразделению
//
// Параметры:
//  Подразделение  	 		  - Справочник.СтруктураПредприятия - проверяемое подразделение
//  РодительскоеПодразделение – Справочник.СтруктураПредприятия - подразделение родитель
//
// Возвращаемое значение
//    Булево - Истина, если подразделение является дочерним к родительскому, Ложь в противном случае
//
Функция ЭтоДочернееПодразделение(Подразделение, РодительскоеПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&РодительскоеПодразделение)
		|	И СтруктураПредприятия.Ссылка = &Подразделение";
	Запрос.Параметры.Вставить("РодительскоеПодразделение", РодительскоеПодразделение);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, что файл является скан-копией оригинала документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Булево - Истина, если файл является оригиналом, Ложь в противном случае
//
Функция ФайлЯвляетсяОригиналом(Файл) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОФайлах.ЯвляетсяОригиналом
	|ИЗ
	|	РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|ГДЕ
	|	СведенияОФайлах.Файл = &Файл";
	
	Запрос.УстановитьПараметр("Файл", Файл);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ЯвляетсяОригиналом;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет дерево связей документа
//
// Параметры
//    Форма - УправляемаяФорма - форма документа, в котором заполняется дерево связей
//
Процедура ЗаполнитьДеревоСвязейДокумента(Форма) Экспорт 
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиДокументов.ТипСвязи КАК ТипСвязи,
	|	СвязиДокументов.ДатаУстановки,
	|	ВЫБОР
	|		КОГДА СвязиДокументов.СвязанныйДокумент <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СвязиДокументов.СвязанныйДокумент
	|		ИНАЧЕ СвязиДокументов.СвязаннаяСтрока
	|	КОНЕЦ КАК СвязанныйДокументСтрока,
	|	СвязиДокументов.Комментарий,
	|	Файлы.Ссылка КАК Файл,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименованиеФайла,
	|	Файлы.ИндексКартинки КАК ИндексКартинкиФайла,
	|	ЕСТЬNULL(СведенияОФайлах.ЯвляетсяОригиналом, ЛОЖЬ) КАК ЯвляетсяОригиналом
	|ИЗ
	|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.ВладелецФайла = СвязиДокументов.СвязанныйДокумент)
	|			И (НЕ Файлы.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|		ПО (Файлы.Ссылка = СведенияОФайлах.Файл)
	|ГДЕ
	|	СвязиДокументов.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСвязи
	|ИТОГИ ПО
	|	ТипСвязи,
	|	СвязанныйДокументСтрока";
	
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	
	ПоказыватьТолькоОригиналыВСвязях = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		ПоказыватьТолькоОригиналыВСвязях = Форма.ПоказыватьТолькоОригиналыВСвязях;
	КонецЕсли;	
	
	КоличествоСвязей = 0;
	ВыборкаТипСвязи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипСвязи.Следующий() Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.ТипСвязи = ВыборкаТипСвязи.ТипСвязи;
		НоваяСтрока.ЭтоРодитель = Истина;
		НоваяСтрока.ИндексКартинки = -1;
		
		КоличествоДокументов = 0;
		ВыборкаДок = ВыборкаТипСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДок.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаДок.СвязанныйДокументСтрока) Тогда 
				Продолжить;
			КонецЕсли;	
			
			СтрокаДок =	НоваяСтрока.Строки.Добавить();
			СтрокаДок.ТипСвязи = ВыборкаДок.ТипСвязи;
			
			Если ТипЗнч(ВыборкаДок.СвязанныйДокументСтрока) = Тип("Строка") Тогда 
				СтрокаДок.СвязаннаяСтрока = ВыборкаДок.СвязанныйДокументСтрока;
			Иначе
				СтрокаДок.СвязанныйДокумент = ВыборкаДок.СвязанныйДокументСтрока;
			КонецЕсли;	
			
			СтрокаДок.Представление = ?(ЗначениеЗаполнено(СтрокаДок.СвязанныйДокумент), 
				СтрокаДок.СвязанныйДокумент, СтрокаДок.СвязаннаяСтрока);
				
			СтрокаДок.ИндексКартинки = -1;
			КоличествоСвязей = КоличествоСвязей + 1; 
			
			ВыборкаФайл = ВыборкаДок.Выбрать();
			Пока ВыборкаФайл.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаФайл.Файл) Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если ПоказыватьТолькоОригиналыВСвязях И Не ВыборкаФайл.ЯвляетсяОригиналом Тогда 
					Продолжить;
				КонецЕсли;	
				
				СтрокаФайл = СтрокаДок.Строки.Добавить();
				СтрокаФайл.Файл = ВыборкаФайл.Файл;
				СтрокаФайл.ИндексКартинки = ВыборкаФайл.ИндексКартинкиФайла;
				СтрокаФайл.Представление = ВыборкаФайл.ПолноеНаименованиеФайла;
				СтрокаФайл.ТипСвязи = ВыборкаФайл.ТипСвязи;
				
				Если ТипЗнч(ВыборкаФайл.СвязанныйДокументСтрока) = Тип("Строка") Тогда 
					СтрокаФайл.СвязаннаяСтрока = ВыборкаФайл.СвязанныйДокументСтрока;
				Иначе
					СтрокаФайл.СвязанныйДокумент = ВыборкаФайл.СвязанныйДокументСтрока;
				КонецЕсли;
				
				СтрокаФайл.ЯвляетсяОригиналом = ВыборкаФайл.ЯвляетсяОригиналом;
			КонецЦикла;
				
			КоличествоДокументов = КоличествоДокументов + 1;	
		КонецЦикла;	
		
		НоваяСтрока.Представление = Строка(НоваяСтрока.ТипСвязи) + " (" + КоличествоДокументов + ")";
	КонецЦикла;	
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	Форма.КоличествоСвязей = КоличествоСвязей;
	
КонецПроцедуры	

// Заполняет список (таблицу значений) файлов в карточке документа
//
// Параметры
//    Форма 					- УправляемаяФорма - форма документа, в котором заполняется список файлов
//    ЗаполнитьПризнакОригинал 	- Булево - Истина, если требуется заполнить признак оригинала
//
Процедура ЗаполнитьСписокФайловДокумента(Форма, ЗаполнитьПризнакОригинал = Ложь) Экспорт 
	
	Если Форма.Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		Форма.Объект.Ссылка, 
		Форма.ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(МассивФайлов);
	
	Если Не ЗаполнитьПризнакОригинал Тогда 
		СоответствиеФайлы = Новый Соответствие;
		Для Каждого Строка Из Форма.Файлы Цикл
			СоответствиеФайлы.Вставить(Строка.Ссылка, Строка.Оригинал);
		КонецЦикла;	
		
		Для Каждого Строка Из ТаблицаФайлы Цикл
			ЯвляетсяОригиналом = СоответствиеФайлы.Получить(Строка.Ссылка);
			Если ЯвляетсяОригиналом <> Неопределено Тогда 
				Строка.Оригинал = ЯвляетсяОригиналом;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Форма.ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	
	Форма.КоличествоФайлов = Форма.Файлы.Количество();
	Форма.Элементы.ДекорацияФайлы.Заголовок = 
		ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(Форма.КоличествоФайлов);
	
КонецПроцедуры	

// Получает данные одного файла для обновления строки списка в карточке документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется получить признак оригинала
//
// Возвращаемое значение
//    Структура - структура реквизитов файла
//
Функция ПолучитьДанныеФайлаДляСписка(Файл, ЗаполнитьПризнакОригинал = Ложь) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Файлы = Новый Массив;
	Файлы.Добавить(Файл);
	
	Таблица = ПолучитьДанныеФайловДляСписка(Файлы);
	
	Для Инд = 0 По Таблица.Колонки.Количество()-1 Цикл
		ИмяКолонки = Таблица.Колонки[Инд].Имя;
		
		Если Таблица.Количество() > 0 Тогда 
			СтруктураДанных.Вставить(ИмяКолонки, Таблица[0][Инд]);
		Иначе
			СтруктураДанных.Вставить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;	
	
	Если Не ЗаполнитьПризнакОригинал Тогда 
		СтруктураДанных.Удалить("Оригинал");
	КонецЕсли;	
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные нескольких файла для обновления строк списка в карточке документа
//
// Параметры
//    Файлы - массив - массив ссылок на файлы
//
// Возвращаемое значение
//    ТаблицаЗначений - таблица с реквизитами файлов
//
Функция ПолучитьДанныеФайловДляСписка(Файлы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование КАК Наименование,
	|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
	|	Файлы.Ссылка,
	|	Файлы.ДатаСоздания,
	|	Файлы.Автор,
	|	Файлы.Редактирует,
	|	Файлы.ХранитьВерсии,
	|	Файлы.ПометкаУдаления,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РедактируетТекущийПользователь,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	Файлы.ПодписанЭП,
	|	ВЫБОР
	|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
	|			ТОГДА 0
	|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
	|			ТОГДА 1
	|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
	|			ТОГДА 2
	|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Файлы.ПодписанЭП
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусПроверкиЭП,
	|	Файлы.Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СозданИзШаблона,
	|	ЕСТЬNULL(СведенияОФайлах.ЯвляетсяОригиналом, ЛОЖЬ) КАК Оригинал,
	|	ЕСТЬNULL(ФайлыСозданныеПоШаблону.СозданПоШаблону, ЛОЖЬ) КАК СозданПоШаблонуДокумента
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыСозданныеПоШаблону КАК ФайлыСозданныеПоШаблону
	|		ПО (ФайлыСозданныеПоШаблону.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|		ПО (СведенияОФайлах.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО Файлы.Ссылка = КешИнформацииОбОбъектах.Объект
	|ГДЕ
	|	Файлы.Ссылка В(&Файлы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Сохраняет в регистрах сведения, что файл является скан-копией оригинала документа
//
// Параметры
//    Файл 			- СправочникСсылка.Файлы - ссылка на файл
//    ВладелецФайла - Произвольный - ссылка на владельца файла, необязательный,
//									 если не указан, то владелец получается из реквизита файла
//    ЯвляетсяОригиналом - Булево - признак оригинала, с которым будут сохранены сведения о файле
//
Процедура СохранитьСведенияОбОригиналеФайла(
	Файл, 
	ВладелецФайла = Неопределено, 
	ЯвляетсяОригиналом = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда 
		ВладелецФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Файл, "ВладелецФайла");
	КонецЕсли;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда 
		Возврат
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = Файл;
	МенеджерЗаписи.ЯвляетсяОригиналом = ЯвляетсяОригиналом;
	МенеджерЗаписи.Записать();
	
	ОбновитьСведенияОНаличииОригинала(ВладелецФайла);
	
КонецПроцедуры	

// Сохраняет в регистрах сведения информацию о том, что файлы являются скан-копией оригинала документов
//
// Параметры
//    МассивФайлов 	- Массив - содержащий обрабатываемые файлы
//    ЯвляетсяОригиналом - Булево - признак оригинала, с которым будут сохранены сведения о файле
//
Процедура СохранитьСведенияОбОригиналеФайлов(МассивФайлов, ЯвляетсяОригиналом = Истина) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл	
		СохранитьСведенияОбОригиналеФайла(Файл,, ЯвляетсяОригиналом);
	КонецЦикла; 	

КонецПроцедуры 

// Обновляет сведения о наличии скан-копии оригинала в документе
//
// Параметры
//    ВладелецФайла - СправочникСсылка.ВходящиеДокументы, 
//			СправочникСсылка.ИсходящиеДокументы, 
//			СправочникСсылка.ВнутренниеДокументы - ссылка на документ
//
Процедура ОбновитьСведенияОНаличииОригинала(ВладелецФайла) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда 
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|ГДЕ
	|	СведенияОФайлах.Файл.ВладелецФайла = &ВладелецФайла
	|	И СведенияОФайлах.ЯвляетсяОригиналом
	|	И НЕ СведенияОФайлах.Файл.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	СодержитОригинал = Не Запрос.Выполнить().Пустой();
		
	РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
		ВладелецФайла, "СодержитОригинал", СодержитОригинал);
		
КонецПроцедуры	

// Проверяет, что в регистре СведенияОФайлах есть запись для переданного файла
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Булево - Истина, если в регистре СведенияОФайлах есть запись для переданного файла
//
Функция ЕстьСведенияОбОригиналеФайла(Файл) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл = Файл;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Выбран();
	
КонецФункции	

// Возвращает корреспондента и контактное лицо по текстовым значениям
//
// Параметры:
//  Корреспондент   - Строка - наименование искомого корреспондента
//  КонтактноеЛицо  - Строка - наименование искомого контактного лица
//
// Возвращаемое значение
//    Структура - содержит ссылки на корреспондента и контактное лицо
//
Функция НайтиКорреспондентаИКонтактноеЛицо(Корреспондент, КонтактноеЛицо = "") Экспорт
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
			|	КонтактныеЛица.Владелец КАК Корреспондент
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	НЕ КонтактныеЛица.ПометкаУдаления
			|	И КонтактныеЛица.Наименование = &КонтактноеЛицо
			|	И КонтактныеЛица.Владелец.Наименование = &Корреспондент";	
		Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);	
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Корреспонденты.Ссылка КАК Корреспондент,
			|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка) КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Корреспонденты КАК Корреспонденты
			|ГДЕ
			|	НЕ Корреспонденты.ПометкаУдаления
			|	И Корреспонденты.Наименование = &Корреспондент";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);	
    Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Структура.Вставить("КонтактноеЛицо", Выборка.КонтактноеЛицо);	
		Структура.Вставить("Корреспондент", Выборка.Корреспондент);	
	КонецЕсли;

	Возврат Структура;
	
КонецФункции	

// Сохраняет в регистрах сведения об оригиналах в таблице файлов из карточки документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//	  Документ - СправочникСсылка.ВходящиеДокументы,
//			СправочникСсылка.ВходящиеДокументы,
//			СправочникСсылка.ВнутренниеДокументы - ссылка на документ
//
Процедура СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Строка Из Файлы Цикл
			МенеджерЗаписи = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Файл = Строка.Ссылка;
			МенеджерЗаписи.ЯвляетсяОригиналом = Строка.Оригинал;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		СодержитОригинал = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
				СодержитОригинал = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Документ, "СодержитОригинал", СодержитОригинал);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Проверяет ведется ли по документу учет не действующих документов
//
// Параметры
//    Документ - любая ссылка - проверяемый документ
//
// Возвращаемое значение
//    Булево - Истина, если по документу ведется учет недействующих документов,
//	 		 - Ложь в противном случае
//
Функция УчитыватьНеДействующие(Документ) Экспорт
	
	Возврат
		ТипЗнч(Документ) = Тип("СправочникСсылка.ВнутренниеДокументы")
		И ЗначениеЗаполнено(Документ.ВидДокумента)
		И Документ.ВидДокумента.УчитыватьНедействующиеДокументы;
	
КонецФункции

// Возвращает представление таблицы корреспондентов в виде строки
//
// Параметры
//    Таблица - таблица значений - таблица корреспондентов
//    Колонка - Строка - имя колонки, содержащей корреспондентов 
//
// Возвращаемое значение
//    Строка - строка наименование корреспондентов через запятую
//
Функция ПолучитьКорреспондентовДляСписков(Таблица, Колонка = "Корреспондент") Экспорт 
	
	Если Таблица.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
		Таблица.Сортировать("НомерСтроки");
	КонецЕсли;
	Таблица.Свернуть(Колонка);
	
	КорреспондентыДляСписков = "";
	Для Каждого Строка Из Таблица Цикл
		КорреспондентыДляСписков = КорреспондентыДляСписков 
			+ ?(КорреспондентыДляСписков = "", "", ", ")
			+ Строка(Строка[Колонка]);
	КонецЦикла;	
	
	Возврат КорреспондентыДляСписков;
	
КонецФункции	

// Помечает переданные в массиве файлы на удаление
//
// Параметры
//   Форма           - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   МассивФайлов    - Массив - массив обрабатываемых файлов
//   ПометкаУдаления - Булево - признак снятия/установки пометки на удаление
//
Процедура ПометитьФайлыНаУдаление(Форма, МассивФайлов, ПометкаУдаления) Экспорт 
	
	Для Каждого Файл Из МассивФайлов Цикл 
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.Заблокировать();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		ОбъектФайл.Разблокировать();
	КонецЦикла;
	
	Если Не Форма.ПоказыватьУдаленныеФайлы Тогда 
		ЗаполнитьСписокФайловДокумента(Форма);
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет таблицу этапов в форме вида документа
//
// Параметры
//   Форма - УправляемаяФорма - форма вида документа
//
Процедура ПрочитатьНастройкиЭтапов(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Форма.ЭтапыОбработкиДокументов.Очистить();
	Форма.КоличествоЭтапов = 0;
	
	Если Не Объект.ИспользоватьЭтапыОбработкиДокумента Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЭтаповОбработкиДокументов.Этап КАК Этап,
	|	НастройкиЭтаповОбработкиДокументов.Этап.Наименование КАК Наименование,
	|	НастройкиЭтаповОбработкиДокументов.Порядок КАК Порядок,
	|	НастройкиЭтаповОбработкиДокументов.Срок КАК Срок
	|ИЗ
	|	РегистрСведений.НастройкиЭтаповОбработкиДокументов КАК НастройкиЭтаповОбработкиДокументов
	|ГДЕ
	|	НастройкиЭтаповОбработкиДокументов.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ВидДокумента", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.ЭтапыОбработкиДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	
	Форма.КоличествоЭтапов = Форма.ЭтапыОбработкиДокументов.Количество();
	
КонецПроцедуры	

// Записывает настройки этапов в регистр из формы вида документа
//
// Параметры
//   Форма - УправляемаяФорма - форма вида документа
//   ВидДокумента - СправочникСсылка.ВнутренниеДокументы - ссылка на вида документа
//
Процедура ЗаписатьНастройкиЭтапов(Форма, ВидДокумента) Экспорт 
	
	Объект = Форма.Объект;
	
	Если Не Объект.ИспользоватьЭтапыОбработкиДокумента Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиЭтаповОбработкиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента);
	
	Для Каждого Строка Из Форма.ЭтапыОбработкиДокументов Цикл
		Если ЗначениеЗаполнено(Строка.Этап) Тогда 
			ЭтапОбъект = Строка.Этап.ПолучитьОбъект();
			Если ЭтапОбъект.Наименование <> Строка.Наименование Тогда 
				ЭтапОбъект.Наименование = Строка.Наименование;
				ЭтапОбъект.Записать();
			КонецЕсли;	
		Иначе
			ЭтапОбъект = Справочники.ЭтапыОбработкиДокументов.СоздатьЭлемент();
			ЭтапОбъект.Наименование = Строка.Наименование;
			ЭтапОбъект.Записать();
			Строка.Этап = ЭтапОбъект.Ссылка;
		КонецЕсли;	
		
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ВидДокумента = ВидДокумента;
		НоваяСтрока.Этап = Строка.Этап;
		НоваяСтрока.Порядок = Строка.Порядок;
		НоваяСтрока.Срок = Строка.Срок;
	КонецЦикла;	
	НаборЗаписей.Записать();
	
КонецПроцедуры	

// Заполняет таблицу этапов в форме документа
//
// Параметры
//   Форма - УправляемаяФорма - форма документа
//
Процедура ПрочитатьЭтапы(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Форма.ЭтапыОбработкиДокументов.Очистить();
	Форма.КоличествоЭтапов = 0;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		Возврат;
	КонецЕсли;
	
	ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Объект.ВидДокумента, 
		"ИспользоватьЭтапыОбработкиДокумента");
		
	Если Не ИспользоватьЭтапыОбработкиДокумента Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЭтаповОбработкиДокументов.Порядок,
	|	НастройкиЭтаповОбработкиДокументов.Этап,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиЭтаповОбработкиДокументов.Этап) КАК Наименование,
	|	НастройкиЭтаповОбработкиДокументов.Срок КАК СрокНастройки,
	|	ЕСТЬNULL(ЭтапыОбработкиДокументов.Пройден, ЛОЖЬ) КАК Пройден,
	|	ЕСТЬNULL(ЭтапыОбработкиДокументов.ДатаПрохождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрохождения,
	|	ЭтапыОбработкиДокументов.Установил КАК Установил,
	|	ЭтапыОбработкиДокументов.Срок КАК Срок,
	|	ЭтапыОбработкиДокументов.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.НастройкиЭтаповОбработкиДокументов КАК НастройкиЭтаповОбработкиДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыОбработкиДокументов КАК ЭтапыОбработкиДокументов
	|		ПО НастройкиЭтаповОбработкиДокументов.Этап = ЭтапыОбработкиДокументов.Этап
	|			И (ЭтапыОбработкиДокументов.Документ = &Документ)
	|ГДЕ
	|	НастройкиЭтаповОбработкиДокументов.ВидДокумента = &ВидДокумента
	|	И НЕ НастройкиЭтаповОбработкиДокументов.Этап.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиЭтаповОбработкиДокументов.Порядок";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.ЭтапыОбработкиДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.Срок = NULL И ЗначениеЗаполнено(Выборка.СрокНастройки) Тогда 
			ИндексТекущейСтроки = Форма.ЭтапыОбработкиДокументов.Индекс(НоваяСтрока);
			
			ДатаНачала = '00010101';
			Для Инд = 1 По ИндексТекущейСтроки Цикл
				Строка = Форма.ЭтапыОбработкиДокументов[ИндексТекущейСтроки - Инд];
				Если ЗначениеЗаполнено(Строка.Срок) Тогда 
					ДатаНачала = Строка.Срок;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если Не ЗначениеЗаполнено(ДатаНачала) Тогда 
				ДатаНачала = Объект.ДатаСоздания;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
				ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
				ДатаОкончания = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ГрафикРаботы.Календарь, ДатаНачала, Выборка.СрокНастройки); 
			Иначе
				ДатаОкончания = ДатаНачала + Выборка.СрокНастройки*24*3600;
			КонецЕсли;
			НоваяСтрока.Срок = ДатаОкончания;
		КонецЕсли;	
		
	КонецЦикла;	
	Форма.КоличествоЭтапов = Форма.ЭтапыОбработкиДокументов.Количество();
	
	ЕстьСрок = Ложь;
	Для Каждого Строка Из Форма.ЭтапыОбработкиДокументов Цикл
		Если ЗначениеЗаполнено(Строка.Срок) Тогда 
			ЕстьСрок = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Форма.Элементы.ЭтапыОбработкиДокументовСрок.Видимость = ЕстьСрок;
	
КонецПроцедуры	

// Записывает настройки этапов в регистр из формы вида документа
//
// Параметры
//   Форма - УправляемаяФорма - форма вида документа
//   ВидДокумента - СправочникСсылка.ВнутренниеДокументы - ссылка на вида документа
//
Процедура ЗаписатьЭтапы(Форма, Документ) Экспорт 
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		Возврат;
	КонецЕсли;
	
	ИспользоватьЭтапыОбработкиДокумента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Объект.ВидДокумента, 
		"ИспользоватьЭтапыОбработкиДокумента");
		
	Если Не ИспользоватьЭтапыОбработкиДокумента Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЭтапыОбработкиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	
	Для Каждого Строка Из Форма.ЭтапыОбработкиДокументов Цикл
		Если Строка.Пройден 
		 Или ЗначениеЗаполнено(Строка.ДатаПрохождения) 
		 Или ЗначениеЗаполнено(Строка.Установил) 
		 Или ЗначениеЗаполнено(Строка.Комментарий)
		 Или ЗначениеЗаполнено(Строка.Срок) Тогда 
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Документ = Документ;
			НоваяСтрока.Этап = Строка.Этап;
			НоваяСтрока.Срок = Строка.Срок;
			НоваяСтрока.Пройден = Строка.Пройден;
			НоваяСтрока.ДатаПрохождения = Строка.ДатаПрохождения;
			НоваяСтрока.Установил = Строка.Установил;
			НоваяСтрока.Комментарий = Строка.Комментарий;
		КонецЕсли;	
	КонецЦикла;	
	НаборЗаписей.Записать();
	
	// последний этап
	ПоследнийЭтап = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЭтаповОбработкиДокументов.Этап
	|ИЗ
	|	РегистрСведений.ЭтапыОбработкиДокументов КАК ЭтапыОбработкиДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЭтаповОбработкиДокументов КАК НастройкиЭтаповОбработкиДокументов
	|		ПО (НастройкиЭтаповОбработкиДокументов.Этап = ЭтапыОбработкиДокументов.Этап)
	|ГДЕ
	|	ЭтапыОбработкиДокументов.Документ = &Документ
	|	И НастройкиЭтаповОбработкиДокументов.ВидДокумента = &ВидДокумента
	|	И НЕ ЭтапыОбработкиДокументов.Этап.ПометкаУдаления
	|	И ЭтапыОбработкиДокументов.Пройден
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыОбработкиДокументов.ДатаПрохождения УБЫВ,
	|	НастройкиЭтаповОбработкиДокументов.Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ПоследнийЭтап = Выборка.Этап;
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеРеквизитыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.ПоследнийЭтап = ПоследнийЭтап;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

Процедура ОбработкаПроверкиЗаполненияНастройкиЭтапов(Форма, Отказ) Экспорт 
	
	Объект = Форма.Объект;
	Если Не Объект.ИспользоватьЭтапыОбработкиДокумента Тогда 
		Возврат;
	КонецЕсли;	
	
	ЭтапыОбработкиДокументов = Форма.ЭтапыОбработкиДокументов;
	Если ЭтапыОбработкиДокументов.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указано ни одного этапа обработки документов'"),,
			"ЭтапыОбработкиДокументов",, Отказ);
	КонецЕсли;	
	
	ЕстьСроки = Ложь;
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если ЗначениеЗаполнено(Строка.Срок) Тогда 
			ЕстьСроки = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Строка Из ЭтапыОбработкиДокументов Цикл
		Если Не ЗначениеЗаполнено(Строка.Наименование) Тогда 
			НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не заполнено поле ""Наименование этапа""'"),
				НомерСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Наименование",, Отказ);
		КонецЕсли;
			
		Если ЕстьСроки И Не ЗначениеЗаполнено(Строка.Срок) Тогда 
			НомерСтроки = ЭтапыОбработкиДокументов.Индекс(Строка);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке %1 не заполнено поле ""Срок (дней)""'"),
				НомерСтроки+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				"ЭтапыОбработкиДокументов["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Срок",, Отказ);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

// Читает обязательные типы связей.
//
// Параметры
//   Форма - управляемая форма
//   ОбязательныеТипыСвязей - возвращаемый параметр - таблица значений  (ТипСвязи  СсылкаНа)
//   Ссылка           - ссылка на вх исх внутр документ
//   ВидДокумента    - вид документа (не заполнен, если ссылка - не вх исх внутр документ)
Процедура ПрочитатьОбязательныеТипыСвязей(Форма, ОбязательныеТипыСвязей, Ссылка, ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбязательныеТипыСвязей.Очистить();
	
	Запрос = Новый Запрос;
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	// Работаем только с вх исх внутр документами.
	Если ТипСсылки <> Тип("СправочникСсылка.ВнутренниеДокументы")
		И ТипСсылки <> Тип("СправочникСсылка.ВходящиеДокументы")
		И ТипСсылки <> Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Возврат;
	
	КонецЕсли;
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Обязательная = ИСТИНА
		|	И НастройкаСвязей.СсылкаИз = &СсылкаИз
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Обязательная = ИСТИНА
		|	И НастройкаСвязей.СсылкаИз = &СсылкаИзПустойВид";
		
	Запрос.УстановитьПараметр("СсылкаИз", ВидДокумента);	
	
	Если ТипСсылки = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Запрос.УстановитьПараметр("СсылкаИзПустойВид", Справочники.ВидыВнутреннихДокументов.ПустаяСсылка());	
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Запрос.УстановитьПараметр("СсылкаИзПустойВид", Справочники.ВидыВходящихДокументов.ПустаяСсылка());	
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Запрос.УстановитьПараметр("СсылкаИзПустойВид", Справочники.ВидыИсходящихДокументов.ПустаяСсылка());	
	КонецЕсли;	
	
	Таблица = Запрос.Выполнить().Выгрузить();	
	Форма.ЗначениеВРеквизитФормы(Таблица, "ОбязательныеТипыСвязей");
	
КонецПроцедуры

// Читает заполненные связи (из числа переданных типов связей).
//
// Параметры
//   ОбязательныеТипыСвязей - внутри СправочникСсылка.ТипыСвязей.
//   ОбязательныеСвязи - возвращаемый - ТаблицаЗначений - колонки ТипСвязи и СвязанныйДокумент.
//
Процедура ПрочитатьОбязательныеСвязи(Ссылка, Знач ОбязательныеТипыСвязей, ОбязательныеСвязи) Экспорт
	
	ОбязательныеСвязи.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
		
		ТипСвязи = Строка.ТипСвязи;
		СвязанныйДокумент = СвязиДокументов.ПолучитьСвязанныйДокумент(Ссылка, ТипСвязи);
		Если СвязанныйДокумент <> Неопределено Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = ТипСвязи;
			НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
			НоваяСтрока.СвязанныйДокумент = СвязанныйДокумент;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает запрет создания документов не по шаблону
//
// Параметры
//    Ссылка - ссылка на вх исх внутр документ. Может быть пустой.
//    ВидДокумента - вид документа
//    ПараметрШаблонДокумента - ссылка на шаблон документа
//    ТекстСообщения - Строка - возвращаемый - текст сообщения об ошибке
//    ПроверятьТолькоПриПустойСсылке - булево - проверять только для нового документа
//
// Возвращаемое значение
//    Булево - Истина, если запрещено
Функция ПолучитьЗапретСозданияДокументовНеПоШаблону(Ссылка, 
		ВидДокумента, ПараметрШаблонДокумента, ТекстСообщения, ПроверятьТолькоПриПустойСсылке = Истина) Экспорт
		
	Если ПроверятьТолькоПриПустойСсылке И ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) И Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда 
		
		ЗапретитьСозданиеДокументовНеПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидДокумента, "ЗапретитьСозданиеДокументовНеПоШаблону");
			
		Если ЗапретитьСозданиеДокументовНеПоШаблону Тогда	
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документы вида ""%1"" можно создавать только по шаблону.'"),
				ВидДокумента);
				
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

//  Возвращает свойство ЗапретитьРедактироватьФайлы у шаблона документа
//
// Параметры
//    ДокументСсылка - ссылка на вх исх внутр документ.
//
// Возвращаемое значение
//    Булево - ЗапретитьРедактироватьФайлы.
Функция ПолучитьСвойствоШаблонаЗапретитьРедактироватьФайлы(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретитьРедактироватьФайлы = Ложь;
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументСсылка, "Шаблон");
		
	Если ЗначениеЗаполнено(ШаблонДокумента)
		И (ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
		Или ТипЗнч(ШаблонДокумента) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")) Тогда 
		
		ЗапретитьРедактироватьФайлы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ШаблонДокумента, "ЗапретитьРедактироватьФайлы");
			
	КонецЕсли;		
		
	Возврат ЗапретитьРедактироватьФайлы;	
		
КонецФункции	
///////////////////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВНУТРЕННИМИ, ВХОДЯЩИМИ И ИСХОДЯЩИМИ ДОКУМЕНТАМИ
// 

// 1С-Минск
Функция М_НаименованиеДокумента(Документ) Экспорт 
	
	НовыйЗаголовок = СокрЛП(Документ.Заголовок);
	Заголовок = СокрЛП(Документ.Заголовок);
	
	//Если Документ.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДокументыТехархива
	//	и СтрНайти(Документ.ВидДокумента, "Кадастр") = 0 Тогда
	//	Возврат Заголовок;
	//КонецЕсли; 
	
	ДлинаНаименования = Документ.Метаданные().ДлинаНаименования;
	
    Префикс = "";
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер) Тогда 
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСТР("ru = '%1 %2 '"),
						СокрЛП(Документ.РегистрационныйНомер),
						Формат(Документ.ДатаРегистрации, "ДЛФ=D"));
	КонецЕсли;	
	
	Если СтрДлина(Заголовок + Префикс) > ДлинаНаименования Тогда 
		Заголовок = Лев(Заголовок, ДлинаНаименования - СтрДлина(Префикс));
	КонецЕсли;
	
	// Если префикс в заголовке есть - то не добавляем повторно
	Если СтрНайти(Заголовок, Префикс) = 0 Тогда
		НовыйЗаголовок = Префикс + Заголовок;
	КонецЕсли; 
	
	Возврат НовыйЗаголовок;
	
КонецФункции	
