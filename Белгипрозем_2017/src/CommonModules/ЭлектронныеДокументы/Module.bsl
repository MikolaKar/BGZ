////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументы: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует фамилию и инициалы по переданной строке.
//
// Параметры
//  ПолноеНаименование - строка с наименованием.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой.
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ЭлектронныеДокументыПереопределяемый.РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	Если НЕ ЗначениеЗаполнено(Фамилия) И НЕ ЗначениеЗаполнено(Имя) И НЕ ЗначениеЗаполнено(Отчество) Тогда
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ПолноеНаименование), " ");
		
		КоличествоПодстрок = ФИО.Количество();
		Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
		Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
		Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	КонецЕсли;
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "."
		+ ?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""), "");
	
КонецФункции

// Определяет, существует ли актуальный электронный документ Счет-фактура для переданного владельца
//
// Параметры
//  СсылкаНаВладельца - ДокументСсылка,- владелец электронного документа
//
// Возвращаемое значение:
//  Булево - Истина - существует актуальный электронный документ, в противном случае Ложь.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьРабочийЭСФ(СсылкаНаВладельца);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	ЗначениеВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(НаименованиеФО);
	Возврат ЗначениеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает представление (текст либо структура) состояний электронных документов по владельцам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
// ПомещатьВСтруктуру - булево, если истина, то представления состояний электронных документов
//                      (СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника),
//                      будут помещены в структуру, для возможности последующего разбора на клиенте.
//
// Возвращаемое значение:
// Соответствие - соответствие ссылок на документы ИБ состояниям ЭД. Ключ - ссылка на документ ИБ,
//                Значение - текст (состояние ЭД), либо структура - в зависимости от параметра ПомещатьВСтруктуру.
//
Функция ПолучитьТекстСостоянияЭДПоВладельцам(МассивСсылокНаВладельцев, ПомещатьВСтруктуру = Ложь) Экспорт
		
	ТаблицаДанных = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев);
	Соответствие = Новый Соответствие;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если ПомещатьВСтруктуру Тогда
			СостояниеВерсииЭД = Новый Структура("СостояниеВерсииЭД, ДействияСНашейСтороны, ДействияСоСтороныДругогоУчастника");
			ЗаполнитьЗначенияСвойств(СостояниеВерсииЭД, ТекСтрока);
		Иначе
			СостояниеВерсииЭД = Строка(ТекСтрока.СостояниеВерсииЭД);
		КонецЕсли;
		Соответствие.Вставить(ТекСтрока.ВладелецЭД, СостояниеВерсииЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Получает дату выставления счет-фактуры в электронном виде.
//
// Параметры:
// СчетФактура - СсылкаНаДокумент - ссылка на счет-фактуру исходящую в прикладном решении.
//
// Возвращаемое значение:
//  ДатаВыставления - дата - дата выставления электронной счет-фактуры.
//
Функция ДатаВыставленияСчетФактуры(СчетФактура) Экспорт
	
	ДатаВыставления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СчетФактура);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Родитель = &ЭлектронныйДокументВладелец
		|	И СообщенияЭДО.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПДПЭСФ)";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Результат.ЭлектронныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		ДатаВыставления = Результат.ДатаДокументаОтправителя;
	КонецЕсли;
	
	Возврат ДатаВыставления
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Возвращает текст запроса для электронных документов на подписи.
// Варианты - для рабочего места документов на подпись,
// или для показателя на рабочем столе (УТ 11)
//
// Параметры:
//  ДляРабочегоСтола - Булево, признак того, что текст запроса формируется для показателя на рабочем столе (УТ 11)
//
Функция ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи(ДляРабочегоСтола = Истина, СтруктураДопОтборов = Неопределено) Экспорт

	Если ДляРабочегоСтола Тогда
		ТекстПолейВыборки =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенныйЗапрос.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|	ВложенныйЗапрос.СертификатОтпечаток КАК Сертификат
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыНаПодпись.ЭлектронныйДокумент) КАК ЗначениеПоказателя,
		|		СертификатыНаПодпись.Сертификат.Отпечаток КАК СертификатОтпечаток";
		
		ТекстДопОтбора = "";
		
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
		КонецЕсли;
		ТекстЗавершенияЗапроса = ТекстДопОтбора + " СГРУППИРОВАТЬ ПО
													|		СертификатыНаПодпись.ЭлектронныйДокумент,
													|		СертификатыНаПодпись.Сертификат.Отпечаток) КАК ВложенныйЗапрос
													|
													|СГРУППИРОВАТЬ ПО
													|	ВложенныйЗапрос.СертификатОтпечаток";
		
		// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
		// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
		ТекстОбъединенияЗапросов =
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ 
		|	СУММА(ВложенныйЗапрос.ЗначениеПоказателя) КАК ЗначениеПоказателя,
		|	ВложенныйЗапрос.СертификатОтпечаток КАК Сертификат
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыНаПодпись.ЭлектронныйДокумент) КАК ЗначениеПоказателя,
		|		СертификатыНаПодпись.Сертификат.Отпечаток КАК СертификатОтпечаток";
		ТекстУпорядочивания = "";
	Иначе
		ТекстПолейВыборки =
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СертификатыНаПодпись.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СертификатыНаПодпись.Сертификат КАК Сертификат,
		|	СертификатыНаПодпись.ЭлектронныйДокумент.СуммаДокумента КАК СуммаДокумента,
		|	СертификатыНаПодпись.ЭлектронныйДокумент.ДатаДокументаОтправителя КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|			ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|		ТОГДА """"
		|		КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА СертификатыНаПодпись.ЭлектронныйДокумент.НомерВерсииЭД
		|		ИНАЧЕ СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем
		|	КОНЕЦ КАК Версия";
		
		ТекстДопОтбора = "";
		Если СтруктураДопОтборов <> Неопределено И ТипЗнч(СтруктураДопОтборов) = Тип("Структура")
			И СтруктураДопОтборов.Количество() > 0 Тогда
			
			Если СтруктураДопОтборов.Свойство("ОтборПоИсполнителям") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Изменил В (&СоставИсполнителей)";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("Контрагент") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.Контрагент = &Контрагент";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("ВидЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = &ВидЭД";
			КонецЕсли;
			Если СтруктураДопОтборов.Свойство("НаправлениеЭД") Тогда
				ТекстДопОтбора = ТекстДопОтбора + " И СертификатыНаПодпись.ЭлектронныйДокумент.НаправлениеЭД = &НаправлениеЭД";
			КонецЕсли;
		КонецЕсли;
		ТекстЗавершенияЗапроса = ТекстДопОтбора;
		ТекстУпорядочивания = " УПОРЯДОЧИТЬ ПО ДатаДокумента";
		
		// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
		// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
		ТекстОбъединенияЗапросов = "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|СертификатыНаПодпись.ЭлектронныйДокумент,
		|СертификатыНаПодпись.Сертификат,
		|СертификатыНаПодпись.СуммаДокумента,
		|СертификатыНаПодпись.ДатаДокумента,
		|ВЫБОР
		|	КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Ошибка)
		|	ТОГДА """"
		|	КОГДА СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	ТОГДА СертификатыНаПодпись.ЭлектронныйДокумент.НомерВерсииЭД
		|	ИНАЧЕ СертификатыНаПодпись.ЭлектронныйДокумент.ДатаФормированияЭДОтправителем
		|КОНЕЦ КАК Версия";
	КонецЕсли;
		
	ТекстЗапросаОснова =
	"	ИЗ
	|		(ВЫБРАТЬ
	|			СостоянияЭД.ЭлектронныйДокумент.СуммаДокумента КАК СуммаДокументаВладельца,
	|			СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|			СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|			СертификатыЭПВидыЭД.Ссылка КАК Сертификат
	|		ИЗ
	|			РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыЭД
	|				ПО СостоянияЭД.ЭлектронныйДокумент.ВидЭД = СертификатыЭПВидыЭД.ВидДокумента
	|					И (СостоянияЭД.ЭлектронныйДокумент.Организация = СертификатыЭПВидыЭД.Ссылка.Организация
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.Контрагент = СертификатыЭПВидыЭД.Ссылка.Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|				ПО СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|				ПО СостоянияЭД.ЭлектронныйДокумент = ЭП.Объект
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|				ПО СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка
	|		ГДЕ
	|			СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|			И СертификатыЭПВидыЭД.ИспользоватьДляПодписи
	|			И НЕ СертификатыЭПВидыЭД.Ссылка.ПометкаУдаления
	|			И НЕ СертификатыЭПВидыЭД.Ссылка.Отозван
	|			И (СертификатыЭПВидыЭД.Ссылка.Пользователь = &ТекущийПользователь
	|					ИЛИ СертификатыЭПВидыЭД.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|			И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|			И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|			И ВЫБОР
	|				КОГДА СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|					И НЕ СертификатыЭПВидыЭД.Ссылка В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СертификатыСоглашения.Сертификат
	|							ИЗ
	|								Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыСоглашения
	|							ГДЕ
	|								СертификатыСоглашения.Ссылка = СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			И ВЫБОР
	|					КОГДА СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|						ТОГДА СертификатыЭПВидыЭД.Ссылка = СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК СертификатыНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|				СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|				СертификатыЭП.Ссылка КАК Сертификат
	|			ИЗ
	|				РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП КАК СертификатыЭП
	|						ПО ЭП.Отпечаток = СертификатыЭП.Отпечаток
	|					ПО СостоянияЭД.ЭлектронныйДокумент = ЭП.Объект
	|			ГДЕ
	|				СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)) КАК СпСертификатовИсключения
	|			ПО СертификатыНаПодпись.Сертификат = СпСертификатовИсключения.Сертификат
	|				И СертификатыНаПодпись.ЭлектронныйДокумент = СпСертификатовИсключения.ЭлектронныйДокумент
	|	ГДЕ
	|		СпСертификатовИсключения.Сертификат ЕСТЬ NULL 
	|		И (СертификатыНаПодпись.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|		ИЛИ СертификатыНаПодпись.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
	
	// Объединение запросов используем для получения выборки служебных документов (ПДО, УОУ, ИОП, ...),
	// т.к. служебные документы не попадают в РегистрСведений.СостоянияЭД.
	ТекстОбъединенияЗапросовОснова =
	"
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыНаПодпись.Ссылка КАК ЭлектронныйДокумент,
	|		СертификатыЭПВидыДокументов.Ссылка КАК Сертификат,
	|		ДокументыНаПодпись.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|		ДокументыНаПодпись.ДатаДокументаОтправителя КАК ДатаДокумента
	|	ИЗ
	|		Справочник.СообщенияЭДО КАК ДокументыНаПодпись
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	|			ПО ДокументыНаПодпись.ВидЭД = СертификатыЭПВидыДокументов.ВидДокумента
	|			И ДокументыНаПодпись.Организация = СертификатыЭПВидыДокументов.Ссылка.Организация
	|	ГДЕ
	|		ДокументыНаПодпись.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|		И НЕ ДокументыНаПодпись.ПометкаУдаления
	|		И ДокументыНаПодпись.Родитель.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ (ДокументыНаПодпись.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			  ИЛИ ДокументыНаПодпись.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
	|		И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
	|		И ВЫБОР
	|			КОГДА ДокументыНаПодпись.Ссылка.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|					И НЕ СертификатыЭПВидыДокументов.Ссылка В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								СертификатыСоглашения.Сертификат
	|							ИЗ
	|								Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыСоглашения
	|							ГДЕ
	|								СертификатыСоглашения.Ссылка = ДокументыНаПодпись.Ссылка.СоглашениеЭД)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК СертификатыНаПодпись ГДЕ Истина";
	
	ТекстЗапроса = ТекстПолейВыборки + ТекстЗапросаОснова + ТекстЗавершенияЗапроса
		+ ТекстОбъединенияЗапросов + ТекстОбъединенияЗапросовОснова + ТекстЗавершенияЗапроса + ТекстУпорядочивания;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Передача электронных документов в ФНС

// Получает соответствие документам информационной базы и актуальных электронных документов.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  ДокументыИБ - массив(ссылка), массив ссылок на документы информационной базы;
//  УникальныйИдентификатор - уникальныйИдентификатор, признак уникальности для формы выбора документов
//
Функция ПолучитьСоответствиеДокументамИБКомплектыЭлектронныхДокументов(ДокументыИБ, УникальныйИдентификатор) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ СообщенияЭДО.Родитель = ЗНАЧЕНИЕ(Справочник.СообщенияЭДО.ПустаяСсылка)
	|			ТОГДА СообщенияЭДО.Родитель.Ссылка
	|		ИНАЧЕ СообщенияЭДО.Ссылка
	|	КОНЕЦ КАК ПрисоединенныйФайл,
	|	ВЫБОР
	|		КОГДА НЕ СообщенияЭДО.Родитель = ЗНАЧЕНИЕ(Справочник.СообщенияЭДО.ПустаяСсылка)
	|			ТОГДА СообщенияЭДО.Родитель.Документ
	|		ИНАЧЕ СообщенияЭДО.Документ
	|	КОНЕЦ КАК ДокументИБ
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияЭДО КАК СообщенияЭДО
	|		ПО СостоянияЭД.ЭлектронныйДокумент = СообщенияЭДО.Ссылка
	|ГДЕ
	|	СообщенияЭДО.Документ В(&ВладелецФайла)
	|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)";
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументыИБ);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		МассивФайловЭД = Новый Массив;
		
		ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(Результат.ПрисоединенныйФайл,
			УникальныйИдентификатор);
			
		// Правка имени файла для КОРЭСФ - убрать после правки размерности в наименовании 150.
		Если Результат.ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			СтрокаУИД = Результат.ПрисоединенныйФайл.УникальныйИД;
			Наименование = ДанныеФайла.Наименование;
			ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
			Если ПозицияУИД > 0 Тогда
				ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметровЭД = Новый Структура;
		СтруктураПараметровЭД.Вставить("ТипФайла", "ФайлВыгрузки");
		СтруктураПараметровЭД.Вставить("ИмяФайла", ДанныеФайла.ИмяФайла);
		СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		МассивФайловЭД.Добавить(СтруктураПараметровЭД);
		
		МассивСтруктурПодписей = ЭлектроннаяПодпись.ПолучитьВсеПодписи(Результат.ПрисоединенныйФайл,
			УникальныйИдентификатор);
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			
			Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
				ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
				КонецЕсли;
				
				СтруктураПараметровЭД = Новый Структура;
				СтруктураПараметровЭД.Вставить("ТипФайла", "ЭП");
				СтруктураПараметровЭД.Вставить("ИмяФайла", ИмяФайлаПодписи);
				СтруктураПараметровЭД.Вставить("АдресВременногоХранилища", СтруктураПодписи.АдресПодписи);
				
				МассивФайловЭД.Добавить(СтруктураПараметровЭД);
			КонецЦикла;
		КонецЕсли;
		
		Соответствие.Вставить(Результат.ДокументИБ, МассивФайловЭД);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// В процедуре происходит добавление данных из СтруктурыДанных в Таблицу значений "ТаблицаДопДанных".
// Параметры:
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  НомерСтроки - Строка/Неопределено - если заполнен, то указывает на принадлежность текущих данных табличной части.
//    Значение параметра указывает к какой строке табличной части относятся данные. Может иметь вид "1" или "1.1".
//    Если значение вида "1.1", то это значит, что текущие данные относятся к первой строке табличной части, 
//    расположеной в первой строке таблицы-владельца. (подробнее см. схему ХДТО "АктТитулИсполнителя", список "ОписьРабот"
//    , вложенный список "Работа").
//
Процедура ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДанных, ИмяЭлементаВладельца, ЮридическиЗначимый = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;
	Если ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
		ЭлементТЧ = (НомерСтроки <> Неопределено);
		СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", ИмяЭлементаВладельца, ЭлементТЧ);
		СтрокиДерева = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
		
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоДопДанных.Строки.Добавить();
			СтрокаДерева.ИмяРеквизита = ?(ЭлементТЧ, "Список", "Набор");
			СтрокаДерева.ЗначениеРеквизита = ИмяЭлементаВладельца;
			СтрокаДерева.ТЧ = ЭлементТЧ;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		Если ЭлементТЧ Тогда
			СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));
			СтрокиСписка = СтрокаДерева.Строки.НайтиСтроки(СтОтбора);
			Если СтрокиСписка.Количество() = 0 Тогда
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ИмяРеквизита = "Нпп";
				СтрокаДерева.ТЧ = ЭлементТЧ;
				СтрокаДерева.ЗначениеРеквизита = Строка(НомерСтроки);
			Иначе
				СтрокаДерева = СтрокиСписка[0];
			КонецЕсли;
		КонецЕсли;
		
		ДоступноСимволов = 0;
		Если ЮридическиЗначимый Тогда
			Если НомерСтроки = Неопределено Тогда
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхШапки;
			Иначе
				ДоступноСимволов = СтруктураПараметров.ДопустимаяДлинаДопДанныхСтроки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьДанныеРекурсивно(СтрокаДерева,
								 СтруктураДанных,
								 ДоступноСимволов,
								 ЮридическиЗначимый,
								 ЭлементТЧ,
								 НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Получает выписку банка в текстовом формате, а также массив ссылок на банковские счета организаций в выписке
//
// Параметры
//  ЭД - СправочникСсылка.СообщенияЭДО - содержит файл выписки банка
//  СсылкаНаХранилище - Cтрока - содержит ссылку на хранилище тестовых данных
//  МассивСчетов - Массив - cодержит ссылки на банковские счета организации
//
Процедура ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов) Экспорт

	МассивСчетов = Новый Массив;
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, ЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
			
		Текст = Новый ТекстовыйДокумент();

		Текст.ДобавитьСтроку("1CClientBankExchange");
		Текст.ДобавитьСтроку("ВерсияФормата=1.05");
		Текст.ДобавитьСтроку("Кодировка=Windows");
		ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, "Отправитель");
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"Получатель");
		Текст.ДобавитьСтроку("Получатель=" + Получатель);
		ДатаСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаСоздания");
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			Текст.ДобавитьСтроку("ДатаСоздания=" + Формат(ДатаСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		ВремяСоздания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ВремяСоздания");
		Если ЗначениеЗаполнено(ВремяСоздания) Тогда
			Текст.ДобавитьСтроку("ВремяСоздания=" + Формат(ВремяСоздания, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаНачала");
		ДатаКонца  = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаОбъекта,
																					"ДатаКонца");
																					
		Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
		КонецЦикла;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			Текст.ДобавитьСтроку("СекцияРасчСчет");
			Текст.ДобавитьСтроку("ДатаНачала=" + Формат(ДатаНачала, "ДФ=dd.MM.yyyy"));
			Текст.ДобавитьСтроку("ДатаКонца="  + Формат(ДатаКонца,  "ДФ=dd.MM.yyyy"));
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.РасчСчет");
			СчетОрганизации = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
																			"БанковскиеСчетаОрганизаций",
																			НомерСчета);
			МассивСчетов.Добавить(СчетОрганизации);
			Текст.ДобавитьСтроку("РасчСчет=" + НомерСчета);
			
			НачальныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.НачальныйОстаток");
			Если ЗначениеЗаполнено(НачальныйОстаток) Тогда
				Текст.ДобавитьСтроку("НачальныйОстаток=" + Формат(НачальныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоПоступило");
			Если ЗначениеЗаполнено(ВсегоПоступило) Тогда
				Текст.ДобавитьСтроку("ВсегоПоступило=" + Формат(ВсегоПоступило, "ЧРД=.; ЧГ="));
			КонецЕсли;
			ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.ВсегоСписано");
			Если ЗначениеЗаполнено(ВсегоСписано) Тогда
				Текст.ДобавитьСтроку("ВсегоСписано=" + Формат(ВсегоСписано, "ЧРД=.; ЧГ="));
			КонецЕсли;
			КонечныйОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаБанковскийСчет,
																					"БанковскийСчет.КонечныйОстаток");
			Если ЗначениеЗаполнено(КонечныйОстаток) Тогда
				Текст.ДобавитьСтроку("КонечныйОстаток=" + Формат(КонечныйОстаток, "ЧРД=.; ЧГ="));
			КонецЕсли;
			
			Текст.ДобавитьСтроку("КонецРасчСчет");
			
		КонецЦикла;
			
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СекцияДокумент = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"СекцияДокумент");
			Текст.ДобавитьСтроку("СекцияДокумент=" + СекцияДокумент);
			Номер = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Номер");
			Текст.ДобавитьСтроку("Номер=" + Номер);
			Дата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Дата");
			Текст.ДобавитьСтроку("Дата=" + Формат(Дата, "ДФ=dd.MM.yyyy"));
			Сумма = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"Сумма");
			Текст.ДобавитьСтроку("Сумма=" + Формат(Сумма, "ЧРД=.; ЧГ="));
			КвитанцияДата = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияДата");
			Если ЗначениеЗаполнено(КвитанцияДата) Тогда
				Текст.ДобавитьСтроку("КвитанцияДата=" + Формат(КвитанцияДата, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			КвитанцияВремя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"КвитанцияВремя");
			Если ЗначениеЗаполнено(КвитанцияВремя) Тогда
				Текст.ДобавитьСтроку("КвитанцияВремя=" + Формат(КвитанцияВремя, "ДЛФ=T"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "КвитанцияСодержание");
			
			ПлательщикСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикСчет");
			Текст.ДобавитьСтроку("ПлательщикСчет=" + ПлательщикСчет);
			ДатаСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаСписано");
			Если ЗначениеЗаполнено(ДатаСписано) Тогда
				Текст.ДобавитьСтроку("ДатаСписано=" + Формат(ДатаСписано, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик");
			ПлательщикИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПлательщикИНН");
			Текст.ДобавитьСтроку("ПлательщикИНН=" + ПлательщикИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Плательщик4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлательщикКорсчет");
			ПолучательСчет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательСчет");
			Текст.ДобавитьСтроку("ПолучательСчет=" + ПолучательСчет);
			ДатаПоступило = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ДатаПоступило");
			Если ЗначениеЗаполнено(ДатаПоступило) Тогда
				Текст.ДобавитьСтроку("ДатаПоступило=" + Формат(ДатаПоступило, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель");
			ПолучательИНН = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																					ДеревоРазбора,
																					СтрокаТЧ,
																					"ПолучательИНН");
			Текст.ДобавитьСтроку("ПолучательИНН=" + ПолучательИНН);
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКПП");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Получатель4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательРасчСчет");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБанк2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательБИК");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПолучательКорсчет");
			
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидОплаты");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа1");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа2");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа3");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа4");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа5");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НазначениеПлатежа6");
				
			ЭтоПлатежВБюджет = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ЭтоПлатежВБюджет");
			Если ЭтоПлатежВБюджет = Истина Тогда
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "СтатусСоставителя");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательКБК");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ОКАТО");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательОснования");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательПериода");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательНомера");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательДаты");
				ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПоказательТипа");
			КонецЕсли;
				
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "Очередность");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокАкцепта");
			Если ЗначениеЗаполнено(СрокАкцепта) Тогда
				Текст.ДобавитьСтроку("СрокАкцепта=" + Формат(СрокАкцепта,"ЧДЦ=0; ЧГ="));
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ВидАккредитива");
			СрокПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"СрокПлатежа");
			Если ЗначениеЗаполнено(СрокПлатежа) Тогда
				Текст.ДобавитьСтроку("СрокПлатежа=" + Формат(СрокПлатежа, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			УсловиеОплаты1 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"УсловиеОплаты");
			Если ЗначениеЗаполнено(УсловиеОплаты1) Тогда
				Текст.ДобавитьСтроку("УсловиеОплаты1="+ УсловиеОплаты1);
			КонецЕсли;
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ПлатежПоПредст");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "ДополнУсловия");
			ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаТЧ, Текст, "НомерСчетаПоставщика");
			ДатаОтсылкиДок = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ДатаОтсылкиДок");
			Если ЗначениеЗаполнено(ДатаОтсылкиДок) Тогда
				Текст.ДобавитьСтроку("ДатаОтсылкиДок="+ Формат(ДатаОтсылкиДок, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			Текст.ДобавитьСтроку("КонецДокумента");
		КонецЦикла;
	
		Текст.ДобавитьСтроку("КонецФайла");
		
		ТекстВыписки = Текст.ПолучитьТекст();
		
		ИмяФайла = ПолучитьИмяВременногоФайла();
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.УстановитьТекст(ТекстВыписки);
		ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.ANSI);
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
		УдалитьФайлы(ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает выписку банка в виде дерева значений
//
// Параметры
//  ЭД - СправочникСсылка.СообщенияЭДО - содержит файл выписки банка
//  ДанныеВыписки - ДеревоЗначений - содержит дерево данных выписки
//
Процедура ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭД, ДанныеВыписки) Экспорт
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, ЭД.НаправлениеЭД);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыписки = СтруктураДанных.ДеревоРазбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дерево разбора, содержащее данные выписки
//
// Параметры:
// ТекстДляРазбора - Строка - текст выписки.
//
// Возвращаемое значение:
//  ДеревоЗначений - данные выписки.
//
Функция ДеревоРазбораВыпискиБанка(ТекстДляРазбора) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ДеревоРазбораВыпискиБанка(ТекстДляРазбора);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

 // Процедура используется для формирования дерева доп.данных.
// Данные из полученной структуры, рекурсивно добавляет в дерево доп.данных.
//
// Параметры:
//  СтрокаДереваДопДанных - Строка дерева значений - строка дерева, в которую добавляются данные.
//  СтруктураДанных - Структура - структура с добавляемыми в дерево данными. Элементами структуры могут быть: данные с
//    простым типом, массивы значений, вложенные структуры данных.
//  ДоступноСимволов - Число - количество символов, доступных для размещения данных внутри основного файла ЭД.
//  ЮридическиЗначимый - Булево - Истина - пометка данных, которые в последствии из дерева доп.данных надо будет
//    разместить в основном файле ЭД. Ложь - данные будут помещены в файл доп.данных.
//  ЭлементТЧ - Булево - данные принадлежат строке табличной части документа ИБ.
//  НомерСтроки - Строка - номер строки табличной части документа ИБ.
//
Процедура ДобавитьДанныеРекурсивно(СтрокаДереваДопДанных,
								   СтруктураДанных,
								   ДоступноСимволов,
								   ЮридическиЗначимый,
								   ЭлементТЧ,
								   НомерСтроки)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, ЭлементТЧ);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Набор";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = ЭлементТЧ;
					СтрокаДерева.ЮридическиЗначимый = ЮридическиЗначимый;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ДобавитьДанныеРекурсивно(СтрокаДерева, Элемент.Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") И Элемент.Значение.Количество() > 0 Тогда
				СтОтбора = Новый Структура("ЗначениеРеквизита, ТЧ", Элемент.Ключ, Истина);
				СтрокиДерева = СтрокаДереваДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);
				Если СтрокиДерева.Количество() = 0 Тогда
					СтрокаДерева = СтрокаДереваДопДанных.Строки.Добавить();
					СтрокаДерева.ИмяРеквизита = "Список";
					СтрокаДерева.ЗначениеРеквизита = Элемент.Ключ;
					СтрокаДерева.ТЧ = Истина;
				Иначе
					СтрокаДерева = СтрокиДерева[0];
				КонецЕсли;
				ТЗ = Элемент.Значение;
				ПоляСтруктурыТЗ = "";
				Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
					ПоляСтруктурыТЗ = ПоляСтруктурыТЗ + ?(ЗначениеЗаполнено(ПоляСтруктурыТЗ), ", ", "") + КолонкаТЗ.Имя;
				КонецЦикла;
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					СтрокаДереваНпп = СтрокаДерева.Строки.Добавить();
					СтрокаДереваНпп.ИмяРеквизита = "Нпп";
					СтрокаДереваНпп.ТЧ = Истина;
					СтрокаДереваНпп.ЗначениеРеквизита = Строка(ТЗ.Индекс(СтрокаТЗ));
					СтруктураДанныхТЗ = Новый Структура(ПоляСтруктурыТЗ);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхТЗ, СтрокаТЗ);
					ДобавитьДанныеРекурсивно(СтрокаДереваНпп, СтруктураДанныхТЗ, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, ТЗ.Индекс(СтрокаТЗ));
				КонецЦикла;
			Иначе
				НоваяСтрока = СтрокаДереваДопДанных.Строки.Добавить();
				ВозможноРазмещениеВОсновномФайле = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ,
																					Элемент.Значение,
																					ДоступноСимволов);
				Если ЮридическиЗначимый И НЕ ВозможноРазмещениеВОсновномФайле Тогда
					ЮридическиЗначимый = Ложь;
				КонецЕсли;
				НоваяСтрока.ЮридическиЗначимый = ЮридическиЗначимый;
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					НоваяСтрока.ИмяРеквизита = "Массив";
					НоваяСтрока.ЗначениеРеквизита = Элемент.Ключ;
					НоваяСтрока.ТЧ = ЭлементТЧ;
					Для Каждого Значение Из Элемент.Значение Цикл
						СтрокаЗн = НоваяСтрока.Строки.Добавить();
						СтрокаЗн.ИмяРеквизита = "Эл" + Элемент.Значение.Найти(Значение);
						СтрокаЗн.ТЧ = ЭлементТЧ;
						СтрокаЗн.ЮридическиЗначимый = НоваяСтрока.ЮридическиЗначимый;
						Если ТипЗнч(Значение) = Тип("Структура") Тогда
							СтрокаЗн.ЗначениеРеквизита = "Структура";
							ДобавитьДанныеРекурсивно(СтрокаЗн, Значение, ДоступноСимволов, ЮридическиЗначимый, ЭлементТЧ, НомерСтроки);
						Иначе
							
							СтрокаЗн.ЗначениеРеквизита = Значение;
						КонецЕсли
					КонецЦикла;
				Иначе
					НоваяСтрока.ИмяРеквизита = Элемент.Ключ;
					НоваяСтрока.ЗначениеРеквизита = Элемент.Значение;
					НоваяСтрока.ТЧ = ЭлементТЧ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции выполняется проверка: длина строки, полученной после преобразования данных из структуры (с учетом служебных
// символов), не должна превышать количества доступных символов.
//
// Параметры:
//  СтруктураДанных - Структура - заполняемая структура.
//  Ключ - Строка - ключ добавляемого элемента.
//  Значение - Структура, примитивный тип или массив (элементы массива имеют примитивный тип) - значение добавляемого элемента.
//  ДоступноСимволов - Число - количество доступных символов результирующей строки.
//
// Возвращаемое значение:
//  Булево - Истина - элемент добавлен в структуру, Ложь - элемент не добавлен.
//
Функция ВозможноРазмещениеВОсновномФайле(Ключ, Значение, ДоступноСимволов)
	
	РазмещениеВозможно = Ложь;
	
	СлужебныеСимволы = 0;
	ДлинаСтрЗначения = 0;
	
	// Числа 41 и 31 обозначают количество служебных символов и рассчитываются следующим образом:
	// 1) если в ДеревоЗначений добавляется строка, которая будет иметь подчиненные строки, то данная строка в xml будет
	// выглядеть как элемент, имеющий вложенные (подчиненные) элементы, поэтому количество служебных символов = 41
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""></Реквизит>") + 1;
	// 2) если в ДеревоЗначений добавляется строка без подчиненных строк, то количество служебных символов = 31
	// (без учета длинны имени и значения самого реквизита), расчет по формуле:
	// СтрДлина("<Реквизит Имя="""" Значение=""""/>") + 1;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Элемент Из Значение Цикл
			СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Эл" + Значение.Найти(Элемент)) + СтрДлина(Элемент) + 31;
		КонецЦикла;
		
		СлужебныеСимволы = СлужебныеСимволы + СтрДлина("Массив") + СтрДлина(Ключ) + 41;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого Элемент Из Значение Цикл
			РазмещениеВозможно = ВозможноРазмещениеВОсновномФайле(Элемент.Ключ, Элемент.Значение, ДоступноСимволов);
			Если НЕ РазмещениеВозможно Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СлужебныеСимволы = СтрДлина("Набор") + СтрДлина(Ключ) + 41;
	Иначе // простой тип.
		СлужебныеСимволы = СтрДлина(Ключ) + СтрДлина(Значение) + 31;
	КонецЕсли;
	
	Если ДоступноСимволов >= СлужебныеСимволы Тогда
		ДоступноСимволов = ДоступноСимволов - СлужебныеСимволы;
		РазмещениеВозможно = Истина;
	КонецЕсли;
	
	Возврат РазмещениеВозможно;
	
КонецФункции

Процедура ДобавитьНеПустойПараметр(ДеревоРазбора, СтрокаОбъекта, Текст, ИмяПараметра)
	
	ЗначениеПараметра = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									ИмяПараметра);
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		Текст.ДобавитьСтроку(ИмяПараметра + "=" + ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

// Получить подчиненный файл СообщенияЭДО
//
// Возвращаемое значение:
//  СправочникСсылка.Файл или Неопределено
//
Функция ПолучитьПодчиненныйФайл(Знач ПрисоединенныйФайл) Экспорт
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ПрисоединенныйФайл, Ложь);
	// Файл должен быть единственным
	Если МассивФайлов.Количество() = 1 Тогда
		Возврат МассивФайлов[0];		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает двоичные данные присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка.СообщенияЭДО.
//
// Возвращаемое значение:
//  ДвоичныеДанные.
//
Функция ПолучитьДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ФайлЭД = ПолучитьПодчиненныйФайл(ПрисоединенныйФайл);
	Если ЗначениеЗаполнено(ФайлЭД) Тогда
		Возврат РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлЭД);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру данных файла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
							
	УстановитьПривилегированныйРежим(Истина);
	
	Файл = ПолучитьПодчиненныйФайл(ПрисоединенныйФайл);
	
	Если ЗначениеЗаполнено(Файл) Тогда
		Если ПолучатьСсылкуНаДвоичныеДанные Тогда
			Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(Файл);
			ДанныеФайла = Результат.ДанныеФайла;
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Результат.ДвоичныеДанные);
		Иначе
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл);
		КонецЕсли;
		
		ДополнительнаяИнформация = Новый Структура;
		Если ПолучатьСсылкуНаДвоичныеДанные Тогда
			ДополнительнаяИнформация.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		ДополнительнаяИнформация.Вставить("ОтносительныйПуть",            "\");
		ДополнительнаяИнформация.Вставить("ДатаМодификацииУниверсальная", ДанныеФайла.ДатаМодификацииУниверсальная);
		ДополнительнаяИнформация.Вставить("ИмяФайла",                     ДанныеФайла.Ссылка.Наименование + "." + ДанныеФайла.Расширение);
		ДополнительнаяИнформация.Вставить("Наименование",                 ДанныеФайла.Ссылка.Наименование);
		ДополнительнаяИнформация.Вставить("Расширение",                   ДанныеФайла.Расширение);
		ДополнительнаяИнформация.Вставить("Размер",                       ДанныеФайла.Размер);
		ДополнительнаяИнформация.Вставить("Редактирует",                  ДанныеФайла.Редактирует);
		ДополнительнаяИнформация.Вставить("ПодписанЭП",                  ДанныеФайла.Ссылка.ПодписанЭП);
		ДополнительнаяИнформация.Вставить("Зашифрован",                   ДанныеФайла.Зашифрован);
		ДополнительнаяИнформация.Вставить("ФайлРедактируется",            ДанныеФайла.Редактирует <> Справочники.Пользователи.ПустаяСсылка());
		ДополнительнаяИнформация.Вставить("ФайлРедактируетТекущийПользователь",
			?(ДополнительнаяИнформация.ФайлРедактируется, ДанныеФайла.Редактирует = Пользователи.ТекущийПользователь(), Ложь) );
			
		Возврат ДополнительнаяИнформация;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Неопределен файл сообщения ЭДО.'"));
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ВладелецФайлов                 - Ссылка - объект, к которому добавляется файл.
//  ИмяБезРасширения               - Строка - имя файла без расширения.
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
//  ВремяИзменения                 - Дата   - (не используется) дата и время изменения файла (местное время).
//  ВремяИзмененияУниверсальное    - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                       - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл              - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                   или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                   справочников, требуется обязательно передать ссылку, иначе будет вызвано исключение.
//                                 - Ссылка на элемент справочника хранения файлов,
//                                   которую следует использовать для добавляемого файла.
//                                   Должна соответствовать одному из типов справочников хранения файлов владельца файлов.
//
// Возвращаемое значение:
//  Ссылка - ссылка на созданный объект.
//
Функция ДобавитьФайл(Знач ВладелецФайлов,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
	
	// Если расширение не задано явно, выделяем его из имени файла.
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
	 ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		НоваяСсылкаНаФайл = Справочники.СообщенияЭДО.ПолучитьСсылку();
	Иначе
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
		 ИЛИ НЕ ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при добавлении файла.
				           |Ссылка на новый файл не заполнена.'"));
		КонецЕсли;
	КонецЕсли;
	
	СообщениеЭДО = Справочники.СообщенияЭДО.СоздатьЭлемент();
	СообщениеЭДО.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	СообщениеЭДО.Документ = ВладелецФайлов;
	СообщениеЭДО.ДатаСоздания = ТекущаяДатаСеанса();
	СообщениеЭДО.Наименование = ИмяБезРасширения;
	
	СообщениеЭДО.Записать();
	
	// проверять существование файла
	ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
		СообщениеЭДО.Ссылка,
		ИмяБезРасширения,
		РасширениеБезТочки,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		ДвоичныеДанные.Размер(),
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент(),
		,
		Описание);
		
	Возврат СообщениеЭДО.Ссылка;
		
КонецФункции

// Обновляет свойства файла - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
// Параметры:
//  ИнформацияОФайле - Структура со свойствами:
//                     <обязательные>
//                       АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//                       АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                        извлеченного из файла.
//                     <необязательные>
//                       ДатаМодификацииУниверсальная   - Дата - дата последнего изменения файла, если
//                                                        свойство не указано или не заполнено, тогда будет
//                                                        установлена текущая дата сеанса.
//                       Расширение                     - Строка - новое расширение файла.
//                       Редактирует                    - Ссылка - новый пользователь, редактирующий файл.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	
КонецПроцедуры

// Заносит информацию о одной ЭП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  ДанныеПодписи      - Структура для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОднойПодписи(Знач ПрисоединенныйФайл, Знач ДанныеПодписи) Экспорт
	
	ФайлЭД = ПолучитьПодчиненныйФайл(ПрисоединенныйФайл);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФайлЭД)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлЭД, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ФайлЭД;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ФайлЭД.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ФайлЭД.Зашифрован;
		ПрисоединенныйФайлСсылка = ФайлЭД.Ссылка;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитов.Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлЭД);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлЭД);
	КонецЕсли;

	РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписиФайла(
		ПрисоединенныйФайлСсылка,
		ДанныеПодписи.НоваяПодписьДвоичныеДанные,
		ДанныеПодписи.Отпечаток,
		ДанныеПодписи.ДатаПодписи,
		ДанныеПодписи.Комментарий,
		ДанныеПодписи.ИмяФайлаПодписи,
		ДанныеПодписи.КомуВыданСертификат,
		ДанныеПодписи.ДвоичныеДанныеСертификата);
	
КонецПроцедуры
