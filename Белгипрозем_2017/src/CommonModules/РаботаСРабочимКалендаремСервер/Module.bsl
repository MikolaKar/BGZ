////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает цвет, которым отображается событие в календаре пользователя
//
// Параметры:
//	Событие - Событие, которому соответствует цвет
//	Пользователь - Пользователь, которому соответствует цвет
//
//	Возвращает ЦветаРабочегоКалендаря
Функция ПолучитьЦветСобытияКалендаря(Событие, Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие) Тогда
		Возврат Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Цвет = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.ПолучитьНастройку(
		Пользователь, Событие, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет);
	
	Если Цвет = Неопределено Или ТипЗнч(Цвет) <> Тип("ПеречислениеСсылка.ЦветаРабочегоКалендаря") Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

// Устанавливает цвет, которым отображается событие в календаре пользователя
//
// Параметры:
//	Цвет - ЦветаРабочегоКалендаря, который необходимо установить
//	Событие - Событие, для которого необходимо установить соответствие
//	Пользователь - Пользователь, для которого необходимо установить соответствие
Функция УстановитьЦветЗаписиКалендаря(Цвет, Запись, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ИзмененоЗначениеНастройки = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
		Пользователь, Запись, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет, Цвет);
	
	РезультатИзмененияЦвета = Новый Структура("ИзмененоЗначениеНастройки, Запись, ОписаниеКраткое, Цвет",
		ИзмененоЗначениеНастройки, Запись, Запись.ОписаниеКраткое, Цвет);
	
	Возврат РезультатИзмененияЦвета;
	
КонецФункции

// Устанавливает цвет, которым отображается события в календаре пользователя
//
// Параметры:
//	Цвет - ЦветаРабочегоКалендаря, который необходимо установить
//	Событие - Событие, для которого необходимо установить соответствие
//	Пользователь - Пользователь, для которого необходимо установить соответствие
Функция УстановитьЦветЗаписейКалендаря(Цвет, Записи, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РезультатИзмененияЦвета = Новый Массив;
	
	Для Каждого Запись Из Записи Цикл
		
		ИзмененоЗначениеНастройки = РегистрыСведений.НастройкиОтображенияЗаписейРабочегоКалендаря.УстановитьНастройку(
			Пользователь, Запись, Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет, Цвет);
		Если ТипЗнч(Запись) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
			РезультатИзмененияЦветаЗаписи = Новый Структура("ИзмененоЗначениеНастройки, Запись, ОписаниеКраткое, Цвет",
				ИзмененоЗначениеНастройки, Запись, Запись.ОписаниеКраткое, Цвет);
		ИначеЕсли ТипЗнч(Запись) = Тип("СправочникСсылка.Мероприятия") Тогда
			РезультатИзмененияЦветаЗаписи = Новый Структура("ИзмененоЗначениеНастройки, Запись, ОписаниеКраткое, Цвет",
				ИзмененоЗначениеНастройки, Запись, Запись.Наименование, Цвет);
		КонецЕсли;
		
		РезультатИзмененияЦвета.Добавить(РезультатИзмененияЦветаЗаписи);
		
	КонецЦикла;
	
	Возврат РезультатИзмененияЦвета;
	
КонецФункции

// Процедура отображает события пользователя в календарь на указанный период
Процедура ОтобразитьКалендарь(ТабличныйДокумент, ПериодОтображения, ОтображаемаяДата,
	ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия, МассивПользователей) Экспорт
	
	ОтображаемаяДатаНачала =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
	ОтображаемаяДатаОкончания =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ОбщаяШиринаОтображения = 100;
	ОтобразитьЗанятостьВДне = 
		(ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День)
		ИЛИ (ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя)
		ИЛИ (ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ФиксацияСверху = 0;
	ТабличныйДокумент.ФиксацияСлева = 0;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	СобытияПоЧасам = ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, 
		ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия,
		МассивПользователей, ТекущийПользователь, Ложь);
	СобытияВесьДень = ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
		ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия,
		МассивПользователей, ТекущийПользователь, Истина);
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(МассивПользователей,
		ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ОтобразитьЗанятостьВДне);
	
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	СобытияДняВесьДень = СобытияВесьДень.СкопироватьКолонки();
	ТаблицаЗанятостиДня = ТаблицаЗанятости.СкопироватьКолонки();
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.День Тогда
		
		// Расчет параметров календаря
		МаксимальноеКоличествоСобытийВесьДень = ПолучитьМаксимальноеКоличествоСобытийВесьДень(
			СобытияВесьДень, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		МаксимальноеКоличествоПересекающихсяСобытийВДне = ПолучитьМаксимальноеКоличествоПересекающихсяСобытийВДне(
			СобытияПоЧасам, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		
		Для Каждого Занятость Из ТаблицаЗанятости Цикл
			
			Если Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
				
				ЗаполнитьЗначенияСвойств(ТаблицаЗанятостиДня.Добавить(), Занятость);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Задание областей событий всего дня
		Если МаксимальноеКоличествоСобытийВесьДень > 0 Тогда
			
			Область = ТабличныйДокумент.Область(2, , 2);
			Область.Имя = "ПодписьСобытияВсегоДня";
			
			Область = ТабличныйДокумент.Область(3, , 3 + МаксимальноеКоличествоСобытийВесьДень - 2);
			Область.Имя = "СобытияВсегоДня";
			
		КонецЕсли;
		
		// Отображение сетки
		ТочкаНачалаСетки = ПолучитьКоординатыТочки(1, 1);
		ТочкаОкончанияСетки = ПолучитьКоординатыТочки(
			1 + МаксимальноеКоличествоПересекающихсяСобытийВДне,
			1 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
		ОтобразитьСетку(ТабличныйДокумент, ТочкаНачалаСетки, ТочкаОкончанияСетки);
		
		// Отображение оси времени
		ТочкаОтображенияОсиВремени = ПолучитьКоординатыТочки(1, 2 + МаксимальноеКоличествоСобытийВесьДень);
		ОтобразитьОсьВремени(ТабличныйДокумент, ТочкаОтображенияОсиВремени);
		
		// Отображение уголка
		Уголок = ТабличныйДокумент.Область(1, 1, 1 + МаксимальноеКоличествоСобытийВесьДень, 1);
		Уголок.ЦветФона = ЦветаСтиля.ЦветКалендаряФонШапки;
		Уголок.Объединить();
		
		// Отображение заголовка дней
		ПозицияОтображенияДняНедели = 2;
		ТочкаОтображенияДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 1);
		ОтобразитьЗаголовокДней(ТабличныйДокумент, ТочкаОтображенияДня,
			МаксимальноеКоличествоСобытийВесьДень, МаксимальноеКоличествоПересекающихсяСобытийВДне, ОтображаемаяДатаНачала);
		
		// Отображение событий весь день
		ТочкаОтображенияСобытийВесьДень = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2);
		ОтобразитьСобытияВесьДень(ТабличныйДокумент, ТочкаОтображенияСобытийВесьДень, СобытияВесьДень,
			ОтображаемаяДатаНачала, МаксимальноеКоличествоСобытийВесьДень,
			МаксимальноеКоличествоПересекающихсяСобытийВДне, МаксимальноеКоличествоСобытийВесьДень - 1);
		
		// Отображение фона текущего дня
		ТочкаОтображенияСобытийДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2 + МаксимальноеКоличествоСобытийВесьДень);
		Если НачалоДня(ОтображаемаяДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ТочкаОкончанияТекущегоДня = ПолучитьКоординатыТочки(
				ПозицияОтображенияДняНедели + МаксимальноеКоличествоПересекающихсяСобытийВДне - 1,
				2 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
			ОбластьТекущегоДня = ТабличныйДокумент.Область(
				ТочкаОтображенияСобытийДня.КоординатаY, ТочкаОтображенияСобытийДня.КоординатаX,
				ТочкаОкончанияТекущегоДня.КоординатаY, ТочкаОкончанияТекущегоДня.КоординатаX);
			ОбластьТекущегоДня.ЦветФона = ЦветаСтиля.ЦветКалендаряФонТекущегоДня;
		КонецЕсли;
		
		// Отображение занятости в дне
		ОтобразитьЗанятость(ТабличныйДокумент, ТочкаОтображенияСобытийДня, ТаблицаЗанятостиДня,
			ОтображаемаяДатаНачала, МаксимальноеКоличествоПересекающихсяСобытийВДне);
		
		// Отображений событий в дне
		ОтобразитьСобытияВДне(ТабличныйДокумент, ТочкаОтображенияСобытийДня, СобытияПоЧасам,
			ОтображаемаяДатаНачала, МаксимальноеКоличествоПересекающихсяСобытийВДне);
		
		// Настройка ширины календаря
		Область = ТабличныйДокумент.Область(ТочкаОтображенияДня.КоординатаY, ТочкаОтображенияДня.КоординатаX);
		Область.ШиринаКолонки = ОбщаяШиринаОтображения / МаксимальноеКоличествоПересекающихсяСобытийВДне;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя Тогда
		
		ОбщаяШиринаОтображения = ОбщаяШиринаОтображения * 1.25;
		
		// Расчет параметров календаря
		МаксимальноеКоличествоСобытийВесьДень = ПолучитьМаксимальноеКоличествоСобытийВесьДень(
			СобытияВесьДень, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		МаксимальноеКоличествоПересекающихсяСобытийВДне = ПолучитьМаксимальноеКоличествоПересекающихсяСобытийВДне(
			СобытияПоЧасам, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		
		// Задание областей событий всего дня
		Если МаксимальноеКоличествоСобытийВесьДень > 0 Тогда
			
			Область = ТабличныйДокумент.Область(2, , 2);
			Область.Имя = "ПодписьСобытияВсегоДня";
			
			Область = ТабличныйДокумент.Область(3, , 3 + МаксимальноеКоличествоСобытийВесьДень - 2);
			Область.Имя = "СобытияВсегоДня";
			
		КонецЕсли;
		
		// Отображение сетки
		ТочкаНачалаСетки = ПолучитьКоординатыТочки(1, 1);
		ТочкаОкончанияСетки = ПолучитьКоординатыТочки(
			1 + 7 * МаксимальноеКоличествоПересекающихсяСобытийВДне,
			1 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
		ОтобразитьСетку(ТабличныйДокумент, ТочкаНачалаСетки, ТочкаОкончанияСетки);
		
		// Отображение оси времени
		ТочкаОтображенияОсиВремени = ПолучитьКоординатыТочки(1, 2 + МаксимальноеКоличествоСобытийВесьДень);
		ОтобразитьОсьВремени(ТабличныйДокумент, ТочкаОтображенияОсиВремени);
		
		// Заполнение уголка
		Уголок = ТабличныйДокумент.Область(1, 1, 1 + МаксимальноеКоличествоСобытийВесьДень, 1);
		Уголок.ЦветФона = ЦветаСтиля.ЦветКалендаряФонШапки;
		Уголок.Объединить();
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		ПозицияОтображенияДняНедели = 2;
		
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			СобытияДняПоЧасам.Очистить();
			СобытияДняВесьДень.Очистить();
			ТаблицаЗанятостиДня.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			КоличествоСобытийВесьДеньВДне = 0;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Событие Из СобытияВесьДень Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняВесьДень.Добавить(), Событие);
					КоличествоСобытийВесьДеньВДне = КоличествоСобытийВесьДеньВДне + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				
				Если Занятость.ДатаНачала < КонецТекущегоДняНедели
					И Занятость.ДатаОкончания > НачалоТекущегоДняНедели
					И Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗанятостиДня.Добавить(), Занятость);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Отображение заголовка дней
			ТочкаОтображенияДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 1);
			ОтобразитьЗаголовокДней(ТабличныйДокумент, ТочкаОтображенияДня,
				МаксимальноеКоличествоСобытийВесьДень, МаксимальноеКоличествоПересекающихсяСобытийВДне, НачалоТекущегоДняНедели);
			
			// Отображение событий весь день
			ТочкаОтображенияСобытийВесьДень = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2);
			ОтобразитьСобытияВесьДень(ТабличныйДокумент, ТочкаОтображенияСобытийВесьДень, СобытияДняВесьДень,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоСобытийВесьДень,
				МаксимальноеКоличествоПересекающихсяСобытийВДне, КоличествоСобытийВесьДеньВДне);
			
			// Отображение фона текущего дня
			ТочкаОтображенияСобытийДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2 + МаксимальноеКоличествоСобытийВесьДень);
			Если НачалоДня(НачалоТекущегоДняНедели) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ТочкаОкончанияТекущегоДня = ПолучитьКоординатыТочки(
					ПозицияОтображенияДняНедели + МаксимальноеКоличествоПересекающихсяСобытийВДне - 1,
					2 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
				ОбластьТекущегоДня = ТабличныйДокумент.Область(
					ТочкаОтображенияСобытийДня.КоординатаY, ТочкаОтображенияСобытийДня.КоординатаX,
					ТочкаОкончанияТекущегоДня.КоординатаY, ТочкаОкончанияТекущегоДня.КоординатаX);
				ОбластьТекущегоДня.ЦветФона = ЦветаСтиля.ЦветКалендаряФонТекущегоДня;
			КонецЕсли;
			
			// Отображение занятости в дне
			ОтобразитьЗанятость(ТабличныйДокумент, ТочкаОтображенияСобытийДня, ТаблицаЗанятостиДня,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоПересекающихсяСобытийВДне);
			
			// Отображений событий в дне
			ОтобразитьСобытияВДне(ТабличныйДокумент, ТочкаОтображенияСобытийДня, СобытияДняПоЧасам,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоПересекающихсяСобытийВДне);
			
			// Настройка ширины календаря
			Область = ТабличныйДокумент.Область(ТочкаОтображенияДня.КоординатаY, ТочкаОтображенияДня.КоординатаX);
			Область.ШиринаКолонки = ОбщаяШиринаОтображения / (МаксимальноеКоличествоПересекающихсяСобытийВДне * 7);
			
			ПозицияОтображенияДняНедели = ПозицияОтображенияДняНедели + МаксимальноеКоличествоПересекающихсяСобытийВДне;
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели Тогда
		
		ОбщаяШиринаОтображения = ОбщаяШиринаОтображения * 1.25 * 2;
		
		// Расчет параметров календаря
		МаксимальноеКоличествоСобытийВесьДень = ПолучитьМаксимальноеКоличествоСобытийВесьДень(
			СобытияВесьДень, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		МаксимальноеКоличествоПересекающихсяСобытийВДне = ПолучитьМаксимальноеКоличествоПересекающихсяСобытийВДне(
			СобытияПоЧасам, ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, ПериодОтображения);
		
		// Задание областей событий всего дня
		Если МаксимальноеКоличествоСобытийВесьДень > 0 Тогда
			
			Область = ТабличныйДокумент.Область(2, , 2);
			Область.Имя = "ПодписьСобытияВсегоДня";
			
			Область = ТабличныйДокумент.Область(3, , 3 + МаксимальноеКоличествоСобытийВесьДень - 2);
			Область.Имя = "СобытияВсегоДня";
			
		КонецЕсли;
		
		// Отображение сетки
		ТочкаНачалаСетки = ПолучитьКоординатыТочки(1, 1);
		ТочкаОкончанияСетки = ПолучитьКоординатыТочки(
			1 + 2 * 7 * МаксимальноеКоличествоПересекающихсяСобытийВДне,
			1 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
		ОтобразитьСетку(ТабличныйДокумент, ТочкаНачалаСетки, ТочкаОкончанияСетки);
		
		// Отображение оси времени
		ТочкаОтображенияОсиВремени = ПолучитьКоординатыТочки(1, 2 + МаксимальноеКоличествоСобытийВесьДень);
		ОтобразитьОсьВремени(ТабличныйДокумент, ТочкаОтображенияОсиВремени);
		
		// Заполнение уголка
		Уголок = ТабличныйДокумент.Область(1, 1, 1 + МаксимальноеКоличествоСобытийВесьДень, 1);
		Уголок.ЦветФона = ЦветаСтиля.ЦветКалендаряФонШапки;
		Уголок.Объединить();
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		ПозицияОтображенияДняНедели = 2;
		
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			СобытияДняПоЧасам.Очистить();
			СобытияДняВесьДень.Очистить();
			ТаблицаЗанятостиДня.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			КоличествоСобытийВесьДеньВДне = 0;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Событие Из СобытияВесьДень Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняВесьДень.Добавить(), Событие);
					КоличествоСобытийВесьДеньВДне = КоличествоСобытийВесьДеньВДне + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				
				Если Занятость.ДатаНачала < КонецТекущегоДняНедели
					И Занятость.ДатаОкончания > НачалоТекущегоДняНедели
					И Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗанятостиДня.Добавить(), Занятость);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Отображение заголовка дней
			ТочкаОтображенияДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 1);
			ОтобразитьЗаголовокДней(ТабличныйДокумент, ТочкаОтображенияДня,
				МаксимальноеКоличествоСобытийВесьДень, МаксимальноеКоличествоПересекающихсяСобытийВДне, НачалоТекущегоДняНедели);
			
			// Отображение событий весь день
			ТочкаОтображенияСобытийВесьДень = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2);
			ОтобразитьСобытияВесьДень(ТабличныйДокумент, ТочкаОтображенияСобытийВесьДень, СобытияДняВесьДень,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоСобытийВесьДень,
				МаксимальноеКоличествоПересекающихсяСобытийВДне, КоличествоСобытийВесьДеньВДне);
			
			// Отображение фона текущего дня
			ТочкаОтображенияСобытийДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 2 + МаксимальноеКоличествоСобытийВесьДень);
			Если НачалоДня(НачалоТекущегоДняНедели) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ТочкаОкончанияТекущегоДня = ПолучитьКоординатыТочки(
					ПозицияОтображенияДняНедели + МаксимальноеКоличествоПересекающихсяСобытийВДне - 1,
					2 + МаксимальноеКоличествоСобытийВесьДень + 24 * 2);
				ОбластьТекущегоДня = ТабличныйДокумент.Область(
					ТочкаОтображенияСобытийДня.КоординатаY, ТочкаОтображенияСобытийДня.КоординатаX,
					ТочкаОкончанияТекущегоДня.КоординатаY, ТочкаОкончанияТекущегоДня.КоординатаX);
				ОбластьТекущегоДня.ЦветФона = ЦветаСтиля.ЦветКалендаряФонТекущегоДня;
			КонецЕсли;
			
			// Отображение занятости в дне
			ОтобразитьЗанятость(ТабличныйДокумент, ТочкаОтображенияСобытийДня, ТаблицаЗанятостиДня,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоПересекающихсяСобытийВДне);
			
			// Отображений событий в дне
			ОтобразитьСобытияВДне(ТабличныйДокумент, ТочкаОтображенияСобытийДня, СобытияДняПоЧасам,
				НачалоТекущегоДняНедели, МаксимальноеКоличествоПересекающихсяСобытийВДне);
			
			// Настройка ширины календаря
			Область = ТабличныйДокумент.Область(ТочкаОтображенияДня.КоординатаY, ТочкаОтображенияДня.КоординатаX);
			Область.ШиринаКолонки = ОбщаяШиринаОтображения / (МаксимальноеКоличествоПересекающихсяСобытийВДне * 7 * 2);
			
			ПозицияОтображенияДняНедели = ПозицияОтображенияДняНедели + МаксимальноеКоличествоПересекающихсяСобытийВДне;
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	ИначеЕсли ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		
		ОбщаяШиринаОтображения = ОбщаяШиринаОтображения * 1.25;
		КоличествоОтображаемыхНедель = (ОтображаемаяДатаОкончания - ОтображаемаяДатаНачала) / 604800; // 604800 - число секунд в неделе
		КоличествоСобытийДня = 4;
		ВысотаДня = КоличествоСобытийДня + 1;
		ШиринаДня = 2;
		НачалоОтображаемогоМесяца = НачалоМесяца(ОтображаемаяДата);
		КонецОтображаемогоМесяца = КонецМесяца(ОтображаемаяДата);
		
		// Отображение сетки
		ТочкаНачалаСетки = ПолучитьКоординатыТочки(1, 1);
		ТочкаОкончанияСетки = ПолучитьКоординатыТочки(2 * 7, 2 + ВысотаДня * КоличествоОтображаемыхНедель);
		ОтобразитьСетку(ТабличныйДокумент, ТочкаНачалаСетки, ТочкаОкончанияСетки);
		
		// Отображения заголовка дней и настройка ширины
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		КонецТекущейНедели = КонецНедели(НачалоТекущегоДняНедели);
		ПозицияОтображенияДняНедели = 1;
		Пока НачалоТекущегоДняНедели < КонецТекущейНедели Цикл
			
			// Отображение заголовка дней
			ТочкаОтображенияДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, 1);
			ОтобразитьЗаголовокДней(ТабличныйДокумент, ТочкаОтображенияДня,
				0, ШиринаДня, НачалоТекущегоДняНедели, "ДФ='ddd'", Ложь);
			
			// Настройка ширины календаря
			Область = ТабличныйДокумент.Область(ТочкаОтображенияДня.КоординатаY, ТочкаОтображенияДня.КоординатаX);
			Область.ШиринаКолонки = ОбщаяШиринаОтображения / (ШиринаДня * 7);
			
			ПозицияОтображенияДняНедели = ПозицияОтображенияДняНедели + ШиринаДня;
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
		// Отображение дней
		НачалоТекущейНедели = ОтображаемаяДатаНачала;
		ПозицияОтображенияНедели = 2;
		Пока НачалоТекущейНедели < ОтображаемаяДатаОкончания Цикл
			
			КонецТекущейНедели = КонецНедели(НачалоТекущейНедели);
			НачалоТекущегоДняНедели = НачалоТекущейНедели;
			ПозицияОтображенияДняНедели = 1;
			
			Пока НачалоТекущегоДняНедели < КонецТекущейНедели Цикл
				
				СобытияДняПоЧасам.Очистить();
				СобытияДняВесьДень.Очистить();
				КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
				КоличествоСобытийВДне = 0;
				ЯвляетсяДатойТекущегоМесяца = 
					(НачалоТекущегоДняНедели <= КонецОтображаемогоМесяца)
					И (НачалоТекущегоДняНедели >= НачалоОтображаемогоМесяца);
				
				Для Каждого Событие Из СобытияПоЧасам Цикл
					
					Если Событие.ДатаНачала < КонецТекущегоДняНедели
						И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
						
						ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
						КоличествоСобытийВДне = КоличествоСобытийВДне + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого Событие Из СобытияВесьДень Цикл
					
					Если Событие.ДатаНачала < КонецТекущегоДняНедели
						И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
						
						ЗаполнитьЗначенияСвойств(СобытияДняВесьДень.Добавить(), Событие);
						КоличествоСобытийВДне = КоличествоСобытийВДне + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОтобразитьМесяц = 
					(НачалоТекущегоДняНедели = ОтображаемаяДатаНачала)
					ИЛИ (НачалоТекущегоДняНедели = НачалоМесяца(НачалоТекущегоДняНедели));
				
				// Отображений событий в дне
				ТочкаОтображенияСобытийДня = ПолучитьКоординатыТочки(ПозицияОтображенияДняНедели, ПозицияОтображенияНедели);
				ОтобразитьДеньМесяца(ТабличныйДокумент, ТочкаОтображенияСобытийДня, СобытияДняВесьДень, СобытияДняПоЧасам,
					НачалоТекущегоДняНедели, КоличествоСобытийДня, ШиринаДня, ОтобразитьМесяц, ЯвляетсяДатойТекущегоМесяца);
				
				ПозицияОтображенияДняНедели = ПозицияОтображенияДняНедели + ШиринаДня;
				НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
				
			КонецЦикла;
			
			ПозицияОтображенияНедели = ПозицияОтображенияНедели + ВысотаДня;
			НачалоТекущейНедели = НачалоТекущейНедели + 604800; // 604800 - число секунд в неделе
			
		КонецЦикла;
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить(ТабличныйДокумент);
	
	ТабличныйДокументПодбораМасштаба = Новый ТабличныйДокумент;
	ТабличныйДокументПодбораМасштаба.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
	Масштаб = 100;
	Пока Масштаб > 40 Цикл
		Если ТабличныйДокументПодбораМасштаба.ПроверитьВывод(ПроверяемыеТаблицы)
			И ТабличныйДокументПодбораМасштаба.ПроверитьПрисоединение(ПроверяемыеТаблицы) Тогда
			Прервать;
		Иначе
			Масштаб = Масштаб - 5;
			ТабличныйДокументПодбораМасштаба.МасштабПечати = Масштаб;
		КонецЕсли;
	КонецЦикла;
	
	Если Масштаб = 100 Тогда
		Пока Масштаб < 150 Цикл
			Если ТабличныйДокументПодбораМасштаба.ПроверитьВывод(ПроверяемыеТаблицы)
				И ТабличныйДокументПодбораМасштаба.ПроверитьПрисоединение(ПроверяемыеТаблицы) Тогда
				Масштаб = Масштаб + 5;
				ТабличныйДокументПодбораМасштаба.МасштабПечати = Масштаб;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Масштаб = Масштаб - 5;
	КонецЕсли;
	ТабличныйДокумент.МасштабПечати = Масштаб;
	
КонецПроцедуры

// Процедура заполняет таблицу плана дня
Процедура ОтобразитьПланДня(ДеревоПланДня, ПериодОтображения, ОтображаемаяДата,
		ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия,
		Знач ОтображаемаяДатаОкончания = Неопределено, ВесьДень = Ложь, МассивПользователей = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОтображаемаяДатаОкончания) Тогда
		ОтображаемаяДатаНачала = НачалоДня(ОтображаемаяДата);
		ОтображаемаяДатаОкончания = КонецДня(ОтображаемаяДатаОкончания);
	Иначе
		ОтображаемаяДатаНачала =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
		ОтображаемаяДатаОкончания =
			РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если МассивПользователей = Неопределено Тогда
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ТекущийПользователь);
	КонецЕсли;
	
	ДеревоПланДня.Строки.Очистить();
	
	СобытияВесьДень = ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
		ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия,
		МассивПользователей, ТекущийПользователь, Истина);

	Если ВесьДень Тогда
		СобытияПоЧасам = СобытияВесьДень.СкопироватьКолонки()
	Иначе
		СобытияПоЧасам = ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
			ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия,
			МассивПользователей, ТекущийПользователь, Ложь);
	КонецЕсли;
	СобытияДняПоЧасам = СобытияПоЧасам.СкопироватьКолонки();
	СобытияДняВесьДень = СобытияВесьДень.СкопироватьКолонки();
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.ПланДня Тогда
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			СобытияДняПоЧасам.Очистить();
			СобытияДняВесьДень.Очистить();
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			
			Для Каждого Событие Из СобытияПоЧасам Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняПоЧасам.Добавить(), Событие);
					
				КонецЕсли;
				
			КонецЦикла;
			СобытияДняПоЧасам.Сортировать("ДатаНачала, ОписаниеКраткое");
			
			Для Каждого Событие Из СобытияВесьДень Цикл
				
				Если Событие.ДатаНачала < КонецТекущегоДняНедели
					И Событие.ДатаОкончания > НачалоТекущегоДняНедели Тогда
					
					ЗаполнитьЗначенияСвойств(СобытияДняВесьДень.Добавить(), Событие);
					
				КонецЕсли;
				
			КонецЦикла;
			СобытияДняВесьДень.Сортировать("ОписаниеКраткое");
			
			КоличествоСобытий = СобытияДняПоЧасам.Количество() + СобытияДняВесьДень.Количество();
			ДополнительноеПредставлениеДня = "";
			Если НачалоТекущегоДняНедели = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДополнительноеПредставлениеДня = НСтр("ru = 'Сегодня'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) + 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Завтра'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Вчера'");
			ИначеЕсли НачалоТекущегоДняНедели = (НачалоДня(ТекущаяДатаСеанса()) - 2 * 86400) Тогда // 86400 - число секунд в сутках
				ДополнительноеПредставлениеДня = НСтр("ru = 'Позавчера'");
			КонецЕсли;
			
			СтрокаТекущегоДня = ДеревоПланДня.Строки.Добавить();
			СтрокаТекущегоДня.ЭтоГруппа = Истина;
			СтрокаТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
			
			ПредставлениеДня = Формат(НачалоТекущегоДняНедели, "ДФ='дддд'");
			ПредставлениеДаты = Формат(НачалоТекущегоДняНедели, "ДФ='д ММММ гггг'");
			СтрокаТекущегоДня.ОписаниеКраткое = Формат(НачалоТекущегоДняНедели, "ДФ='дддд, д ММММ гггг'");
			Если ЗначениеЗаполнено(ДополнительноеПредставлениеДня) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2, %3",
					ДополнительноеПредставлениеДня,
					ПредставлениеДня,
					ПредставлениеДаты);
			Иначе
				СтрокаТекущегоДня.ОписаниеКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2",
					ТРег(ПредставлениеДня),
					ПредставлениеДаты);
			КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоСобытий) Тогда
				СтрокаТекущегоДня.ОписаниеКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 (%2)",
					СтрокаТекущегоДня.ОписаниеКраткое,
					КоличествоСобытий);
			КонецЕсли;
			
			// Отображение событий весь день
			Для Каждого СтрокаСобытие Из СобытияДняВесьДень Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, СтрокаСобытие);
				СтрокаСобытиеТекущегоДня.ВесьДень = Истина;
				СтрокаСобытиеТекущегоДня.ПодписьВесьДень = 
					НСтр("ru = 'Весь
						|день'");
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое = СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие);
			КонецЦикла;
			
			// Отображений событий в дне
			Для Каждого СтрокаСобытие Из СобытияДняПоЧасам Цикл
				СтрокаСобытиеТекущегоДня = СтрокаТекущегоДня.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытиеТекущегоДня, СтрокаСобытие);
				СтрокаСобытиеТекущегоДня.ДатаДень = НачалоТекущегоДняНедели;
				СтрокаСобытиеТекущегоДня.ОписаниеКраткое = СформироватьТекстовоеОписаниеСобытия(СтрокаСобытие);
			КонецЦикла;
			
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает занятость пользователей в подбор времени
Процедура ОтобразитьКалендарьЗанятости(ТабличныйДокумент,
	ПериодОтображения, ОтображаемаяДата, МассивПользователей,
	Знач ВремяНачалаОтображения, Знач ВремяОкончанияОтображения, ИсключенияЗанятости = Неопределено) Экспорт
	
	ВремяНачалаОтображения = НачалоЧаса(ВремяНачалаОтображения);
	ВремяОкончанияОтображения = НачалоЧаса(ВремяОкончанияОтображения);
	Если ВремяОкончанияОтображения - ВремяНачалаОтображения < 3600 Тогда
		ВремяОкончанияОтображения = ВремяНачалаОтображения + 3600;
	КонецЕсли;
	КоличествоЧасовОтображения = (ВремяОкончанияОтображения - ВремяНачалаОтображения) / 3600;
	НачалоКоординатX = 1;
	НачалоКоординатY = 1;
	
	ОтображаемаяДатаНачала =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
	ОтображаемаяДатаОкончания =
		РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ОтображаемаяДата);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ФиксацияСверху = 0;
	ТабличныйДокумент.ФиксацияСлева = 0;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(МассивПользователей,
		ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, , ИсключенияЗанятости);
	ТаблицаЗанятостиДня = ТаблицаЗанятости.СкопироватьКолонки();
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты Тогда
		
		// Строки отображения: Дата, Время, Общая занятость, Занятость каждого пользователя отдельно.
		// Строки Дата, Время, Общая занятость сверху.
		// Столбцы отображения: Пользователь, По два столбца на каждый час в каждом дне.
		// Столбец Пользователь фиксирован слева.
		КоличествоСтрокОтображения = 3 + МассивПользователей.Количество();
		ТабличныйДокумент.ФиксацияСверху = 3;
		КоличествоСтолбцовОтображенияВДне = КоличествоЧасовОтображения * 2;
		КоличествоСтолбцовОтображения = 1 + КоличествоСтолбцовОтображенияВДне * 7;
		ТабличныйДокумент.ФиксацияСлева = 1;
		
		// Отображение сетки
		ТочкаНачалаСетки = ПолучитьКоординатыТочки(НачалоКоординатX, НачалоКоординатY);
		ТочкаОкончанияСетки = ПолучитьКоординатыТочки(
			НачалоКоординатX + КоличествоСтолбцовОтображения - 1,
			НачалоКоординатY + КоличествоСтрокОтображения - 1);
		ОтобразитьСетку(ТабличныйДокумент, ТочкаНачалаСетки, ТочкаОкончанияСетки);
		
		// Отображение уголка
		Уголок = ТабличныйДокумент.Область(НачалоКоординатY, НачалоКоординатX, НачалоКоординатY + 1, НачалоКоординатX);
		Уголок.Объединить();
		
		// Отображение пользователей
		ТочкаОтображенияПользователей = ПолучитьКоординатыТочки(НачалоКоординатX, НачалоКоординатY + 2);
		ОтобразитьОсьПользователей(ТабличныйДокумент, ТочкаОтображенияПользователей, МассивПользователей);
		
		// Настройка ширины календаря
		Область = ТабличныйДокумент.Область(, ТочкаНачалаСетки.КоординатаX, ,ТочкаНачалаСетки.КоординатаX);
		Область.ШиринаКолонки = 25;
		
		Область = ТабличныйДокумент.Область(, ТочкаНачалаСетки.КоординатаX + 1, ,ТочкаОкончанияСетки.КоординатаX);
		Область.ШиринаКолонки = 4;
		
		НачалоТекущегоДняНедели = ОтображаемаяДатаНачала;
		НомерТекущегоДня = 1;
		Пока НачалоТекущегоДняНедели < ОтображаемаяДатаОкончания Цикл
			
			НачалоДняНеделиX = НачалоКоординатX + 1 + КоличествоСтолбцовОтображенияВДне * (НомерТекущегоДня - 1);
			НачалоДняНеделиY = НачалоКоординатY;
			
			НачалоТекущегоДняНедели = НачалоДня(НачалоТекущегоДняНедели);
			КонецТекущегоДняНедели = КонецДня(НачалоТекущегоДняНедели) + 1;
			
			ТаблицаЗанятостиДня.Очистить();
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				
				Если Занятость.ДатаНачала < КонецТекущегоДняНедели
					И Занятость.ДатаОкончания > НачалоТекущегоДняНедели
					И Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗанятостиДня.Добавить(), Занятость);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Отображение заголовка дней
			ТочкаОтображенияДня = ПолучитьКоординатыТочки(НачалоДняНеделиX, НачалоДняНеделиY);
			ОтобразитьЗаголовокДнейЗанятости(ТабличныйДокумент, ТочкаОтображенияДня,
				НачалоТекущегоДняНедели, ВремяНачалаОтображения, ВремяОкончанияОтображения);
			
			// Отображение занятости дня
			ТочкаОтображенияДня = ПолучитьКоординатыТочки(НачалоДняНеделиX, НачалоДняНеделиY + 2);
			ОтобразитьЗанятостьЗанятости(ТабличныйДокумент, ТочкаОтображенияДня,
				НачалоТекущегоДняНедели, ВремяНачалаОтображения, ВремяОкончанияОтображения,
				ТаблицаЗанятостиДня, МассивПользователей);
			
			НачалоТекущегоДняНедели = НачалоТекущегоДняНедели + 86400; // 86400 - число секунд в сутках
			НомерТекущегоДня = 1 + НомерТекущегоДня;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает персональную настройку рабочего календаря текущего пользователя по ключу.
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя);
		
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаления" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаления",
			Ложь);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Ложь);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненныеМероприятия" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ОтображатьОтклоненныеМероприятия",
			Ложь);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Дата("00010101080000"));
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Дата("00010101190000"));
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ПериодОтображенияРабочегоКалендаря",
			Значение);
			
	ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаления" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьПомеченныеНаУдаления",
			Значение);
		
	ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"СвернутьСобытияВесьДеньВКалендаре",
			Значение);
		
	ИначеЕсли Настройка = "ОтображатьОтклоненныеМероприятия" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ОтображатьОтклоненныеМероприятия",
			Значение);
		
	ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяНачалаОтображения",
			Значение);
		
	ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Дата") Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
				Настройка);
			
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РабочийКалендарь",
			"ВремяОкончанияОтображения",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления записи и оповещает другие формы.
Функция УстановитьПометкуУдаления(Запись, ПометкаУдаления) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	Если ТипЗнч(Запись) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Возврат УстановленаПометкаУдаления;
	КонецЕсли;
	
	ЗаписьОбъект = Запись.ПолучитьОбъект();
	Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
		ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		УстановленаПометкаУдаления = Истина;
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает пометки удаления записей и возвращает факт изменения пометки удаления.
Функция УстановитьПометкиУдаления(Записи, ПовторяющиесяСобытия, ПометкаУдаления,
	УдалитьОдно) Экспорт
	
	УстановленаПометкаУдаления = Ложь;
	
	Для Каждого Запись Из Записи Цикл
		
		Если ТипЗнч(Запись) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
			
			ЗаписьОбъект = Запись.ПолучитьОбъект();
			Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
				ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				УстановленаПометкаУдаления = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПометкаУдаления и ПовторяющиесяСобытия.Количество() > 0 Тогда
		
		Если УдалитьОдно Тогда
			
			Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытия Цикл
				
				Попытка
					
					ПовторяющеесяСобытиеОбъект = ПовторяющеесяСобытие.ЗаписьКалендаря.ПолучитьОбъект();
					ПовторяющеесяСобытиеОбъект.Заблокировать();
					ПовторяющеесяСобытиеОбъект.ДобавитьИсключениеПовторения(ПовторяющеесяСобытие.ДатаИсключения);
					ПовторяющеесяСобытиеОбъект.Записать();
					
					УстановленаПометкаУдаления = Истина;
					
				Исключение
					
				КонецПопытки;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого ПовторяющеесяСобытие Из ПовторяющиесяСобытия Цикл
				
				ЗаписьОбъект = ПовторяющеесяСобытие.ЗаписьКалендаря.ПолучитьОбъект();
				Если ЗаписьОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
					ЗаписьОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
					УстановленаПометкаУдаления = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УстановленаПометкаУдаления;
	
КонецФункции

// Устанавливает повторение события в соответствии с настройками повторения.
Процедура УстановитьПовторение(ЗаписьКалендаря, НастройкиПовторения) Экспорт
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	Если ЗаписьКалендаряОбъект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для исключения повторения.'");
	КонецЕсли;
	Если ЗаписьКалендаряОбъект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно настроить повторения для помеченного на удаление события.'");
	КонецЕсли;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("НастройкиПовторения", НастройкиПовторения);
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры

// Формирует HTML представление события
Функция СформироватьHTMLПредставление(Событие, ДатаСобытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Если ТипЗнч(Событие) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		ПредставлениеHTML = Справочники.ЗаписиРабочегоКалендаря.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	ИначеЕсли ТипЗнч(Событие) = Тип("СправочникСсылка.Мероприятия") Тогда
		ПредставлениеHTML = Справочники.Мероприятия.СформироватьHTMLПредставление(Событие, ДатаСобытия);
	Иначе
		ПредставлениеHTML = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает по цвету рабочего календаря цвет для отображения
Функция ПолучитьЦветТабличногоДокумента(ЦветКалендаря) Экспорт
	
	Если ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряКрасный;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряСиний;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЖелтый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЗеленый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряОранжевый;
	Иначе
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряПоУмолчанию;
	КонецЕсли;
	
	Возврат ЦветТабличногоДокумента;
	
КонецФункции

// Изменяет доступность времени
Функция ИзменитьДоступностьВремени(ДатаНачала, ДатаОкончания, Занят = Неопределено) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НоваяЗанятость = 
		РегистрыСведений.ЗанятостьПользователя.ИзменитьДоступностьВремени(
			Пользователь, ДатаНачала, ДатаОкончания, Занят);
	
	Возврат НоваяЗанятость;
	
КонецФункции

// Изменяет доступность массива времен
Функция ИзменитьДоступностьВремен(МассивВремен) Экспорт
	
	УстановленнаяЗанятость = Неопределено;
	
	Для Каждого Время Из МассивВремен Цикл
		НоваяЗанятость = ИзменитьДоступностьВремени(Время.ДатаНачала, Время.ДатаОкончания, УстановленнаяЗанятость);
		Если УстановленнаяЗанятость = Неопределено Тогда
			УстановленнаяЗанятость = НоваяЗанятость;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УстановленнаяЗанятость;
	
КонецФункции

// Возвращает настройку доступности по умолчанию для пользователя
Функция ПолучитьНастройкуДоступностиПользователя(Пользователь) Экспорт
	
	ДоступностьПоУмолчанию = РегистрыСведений.НастройкиРабочегоКалендаря.ПолучитьНастройку(
		Пользователь, Перечисления.НастройкиРабочегоКалендаря.Доступность);
	
	Если НЕ ЗначениеЗаполнено(ДоступностьПоУмолчанию) Тогда
		ДоступностьПоУмолчанию = Перечисления.ДоступностьПользователя.ДоступенВсегда;
	КонецЕсли;
	
	Возврат ДоступностьПоУмолчанию;
	
КонецФункции

// Устанавливает настройку доступности по умолчанию
Функция УстановитьНастройкуДоступностиПользователя(Пользователь, ДоступностьПоУмолчанию) Экспорт
	
	ИзмененоЗначениеНастройки = РегистрыСведений.НастройкиРабочегоКалендаря.УстановитьНастройку(
		Пользователь,
		Перечисления.НастройкиРабочегоКалендаря.Доступность,
		ДоступностьПоУмолчанию);
	
	Возврат ИзмененоЗначениеНастройки;
	
КонецФункции

// Проверяет, заняты ли пользователи в указанное время
Функция ПроверитьДоступностьПользователей(МассивПользователей, ДатаНачала, ДатаОкончания,
	ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(
		МассивПользователей, ДатаНачала, ДатаОкончания, , ИсключенияЗанятости, Истина);
	
	ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	ВременаПодВопросом = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаПодВопросом.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	ВременаЗанятые = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Если ВременаЗанятые.Количество() > 0 Тогда
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
	КонецЕсли;
	
	ПользователиЗанятые = Новый Массив;
	Для Каждого ВремяЗанятое Из ВременаЗанятые Цикл
		Если ПользователиЗанятые.Найти(ВремяЗанятое.Пользователь) = Неопределено Тогда
			ПользователиЗанятые.Добавить(ВремяЗанятое.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ПользователиПодВопросом = Новый Массив;
	Для Каждого ВремяПодВопросом Из ВременаПодВопросом Цикл
		Если ПользователиЗанятые.Найти(ВремяПодВопросом.Пользователь) = Неопределено
			И ПользователиПодВопросом.Найти(ВремяПодВопросом.Пользователь) = Неопределено Тогда
			ПользователиПодВопросом.Добавить(ВремяПодВопросом.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ДоступностьПользователей = Новый Структура("ОбщаяЗанятость, ПользователиЗанятые, ПользователиПодВопросом");
	ДоступностьПользователей.ОбщаяЗанятость = ОбщаяЗанятость;
	ДоступностьПользователей.ПользователиЗанятые = ПользователиЗанятые;
	ДоступностьПользователей.ПользователиПодВопросом = ПользователиПодВопросом;
	
	Возврат ДоступностьПользователей;
	
КонецФункции

// Формирует таблицу рекомендаций, содержащую время доступное для всех пользователей.
Функция ПолучитьТаблицуОбщейЗанятости(Знач МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятости(МассивПользователей, ДатаНачала, ДатаОкончания, ,ИсключенияЗанятости);
	
	ТаблицаОбщейЗанятости = ТаблицаЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.ПодВопросом);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ПодВопросомВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			ПодВопросомВремя.ДатаНачала, ПодВопросомВремя.ДатаОкончания, ПодВопросомВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Занят);
	МассивЗанятогоВремени = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ЗанятоеВремя Из МассивЗанятогоВремени Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаОбщейЗанятости, Справочники.Пользователи.ПустаяСсылка(),
			ЗанятоеВремя.ДатаНачала, ЗанятоеВремя.ДатаОкончания, ЗанятоеВремя.Занят,
			ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
	Возврат ТаблицаОбщейЗанятости;
	
КонецФункции

// Переносит записи календаря на указанную дату
Процедура ПеренестиЗаписиКалендаряНаДату(МассивЗаписейКалендаря, ДатаПереноса) Экспорт
	
	НоваяДатаНачала = НачалоДня(ДатаПереноса);
	Для Каждого ЗаписьКалендаря Из МассивЗаписейКалендаря Цикл
		
		Если ТипЗнч(ЗаписьКалендаря) <> Тип("СправочникСсылка.ЗаписиРабочегоКалендаря")
			ИЛИ ЗаписьКалендаря.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
			Продолжить;
		КонецЕсли;
		
		Длительность = ЗаписьКалендаря.ДатаОкончания - ЗаписьКалендаря.ДатаНачала;
		ВремяНачала = ЗаписьКалендаря.ДатаНачала - НачалоДня(ЗаписьКалендаря.ДатаНачала);
		
		ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
		ЗаписьКалендаряОбъект.Заблокировать();
		ЗаписьКалендаряОбъект.ДатаНачала = НоваяДатаНачала + ВремяНачала;
		ЗаписьКалендаряОбъект.ДатаОкончания = ЗаписьКалендаряОбъект.ДатаНачала + Длительность;
		ЗаписьКалендаряОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление предмета
Функция ПолучитьПредставлениеПредмета(Предмет) Экспорт
	
	ПредставлениеПредмета = "";
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат ПредставлениеПредмета;
	КонецЕсли;
	
	ПраваПоПредмету = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
		Предмет,
		ПользователиКлиентСервер.ТекущийПользователь());
	Если Не ПраваПоПредмету.Чтение Тогда
		Возврат ПредставлениеПредмета;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ВходящееПисьмо")
		ИЛИ ТипЗнч(Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ПредставлениеПредмета = Строка(Предмет.Тема) + ", " + Строка(Предмет.ДатаОтправки);
	Иначе
		ПредставлениеПредмета = Предмет.Наименование;
	КонецЕсли;
	
	Возврат ПредставлениеПредмета;
	
КонецФункции

// Обработчик подписки КалендарьПередЗаписьюПредмета
Процедура КалендарьПередЗаписьюПредмета(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		Или (Источник.ДополнительныеСвойства.Свойство("ИзменениеПредметаИзЗаписиКалендаря")
			И Источник.ДополнительныеСвойства.ИзменениеПредметаИзЗаписиКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ЭтоНовый();
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	Если Не ЭтоНовый Тогда
		
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
			"Наименование, ДатаНачала, ДатаОкончания, ПометкаУдаления");
		
		Источник.ДополнительныеСвойства.Вставить(
			"ПредыдущиеЗначенияРеквизитов", 
			ПредыдущиеЗначенияРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки КалендарьПриЗаписиПредмета
Процедура КалендарьПриЗаписиПредмета(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		Или (Источник.ДополнительныеСвойства.Свойство("ИзменениеПредметаИзЗаписиКалендаря")
			И Источник.ДополнительныеСвойства.ИзменениеПредметаИзЗаписиКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеЗначенияРеквизитов") Тогда
		
		ПредыдущиеЗначенияРеквизитов = Источник.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
		ОбработатьИзменениеРеквизитовПредмета(Источник, ПредыдущиеЗначенияРеквизитов);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Источник.Ссылка);
	ОбновитьРабочиеГруппыСвязанныхЗаписейКалендаря(Источник.Ссылка, ТаблицаРабочейГруппы);
	
КонецПроцедуры

// Обработчик подписки КалендарьПередЗаписьюУчастников
Процедура КалендарьПередЗаписьюУчастников(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		Или (Источник.ДополнительныеСвойства.Свойство("ИзменениеПредметаИзЗаписиКалендаря")
			И Источник.ДополнительныеСвойства.ИзменениеПредметаИзЗаписиКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = Источник.Отбор.Мероприятие.Значение;
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		ПредыдущиеСостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет);
		
		Источник.ДополнительныеСвойства.Вставить(
			"ПредыдущиеСостоянияЗаписейКалендаря", 
			ПредыдущиеСостоянияЗаписейКалендаря);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки КалендарьПриЗаписиУчастников
Процедура КалендарьПриЗаписиУчастников(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь")
		Или (Источник.ДополнительныеСвойства.Свойство("ИзменениеПредметаИзЗаписиКалендаря")
			И Источник.ДополнительныеСвойства.ИзменениеПредметаИзЗаписиКалендаря) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеСостоянияЗаписейКалендаря") Тогда
		
		ПредыдущиеСостоянияЗаписейКалендаря = Источник.ДополнительныеСвойства.ПредыдущиеСостоянияЗаписейКалендаря;
		Предмет = Источник.Отбор.Мероприятие.Значение;
		Если ЗначениеЗаполнено(Предмет) И НЕ Предмет.ПометкаУдаления Тогда
			
			СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет);
			
			Если СостоянияЗаписейКалендаряИзменились(СостоянияЗаписейКалендаря, ПредыдущиеСостоянияЗаписейКалендаря) Тогда
				ОбновитьСостоянияЗаписейКалендаря(Предмет, СостоянияЗаписейКалендаря, , , , ПредыдущиеСостоянияЗаписейКалендаря);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение состояния записи календаря
Процедура ОбработатьИзменениеСостоянияЗаписиКалендаря(ЗаписьКалендаря, Состояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвязанныйПредметИПользователь =
		РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныйПредметИПользователя(ЗаписьКалендаря);
	Если СвязанныйПредметИПользователь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СвязанныйПредметИПользователь.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		Справочники.Мероприятия.ОбработатьИзменениеСтатусаЗаписиКалендаря(
			СвязанныйПредметИПользователь.Предмет,
			СвязанныйПредметИПользователь.Пользователь,
			Состояние);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет является ли запись календаря связанной с предметом
Функция ЯвляетсяСвязаннойЗаписьюКалендаря(ЗаписьКалендаря) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвязанныйПредметИПользователь = 
		РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныйПредметИПользователя(ЗаписьКалендаря);
	
	Если СвязанныйПредметИПользователь <> Неопределено
		И ЗначениеЗаполнено(СвязанныйПредметИПользователь.Предмет) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет список рабочих дней в соответствии с графиком пользователям. Заполняется год
// соответствующий дате заполнения и смежные с ним года. После заполнения год включается в список 
// заполненных. Если дата заполнения присутствует в списке, то заполнение рабочих не производится.
//
// Параметры:
//  РабочиеДни - СписокЗначений - Список дней, среди которых рабочие выделены пометкой.
//  ЗаполненныеГода - СписокЗначений - Список лет, для которых заполнены рабочие дни.
//  ДатаЗаполнения - Дата - Дата, на которую хотим заполнить рабочие дни.
//
Процедура ЗаполнитьРабочиеДни(РабочиеДни, ЗаполненныеГода, ДатаЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если рабочие дни по году уже заполнены, то не требуется заполнять рабочие дни.
	ГодЗаполнения = Год(ДатаЗаполнения);
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор лет, для которых требуется заполнить рабочие дни - год заполнения и смежные с ним.
	МассивЛетЗаполнения = Новый Массив;
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ГодЗаполнения);
		ЗаполненныеГода.Добавить(ГодЗаполнения);
	КонецЕсли;
	
	ПредшествующийГод = ГодЗаполнения - 1;
	Если ЗаполненныеГода.НайтиПоЗначению(ПредшествующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ПредшествующийГод);
		ЗаполненныеГода.Добавить(ПредшествующийГод);
	КонецЕсли;
	
	СледующийГод = ГодЗаполнения + 1;
	Если ЗаполненныеГода.НайтиПоЗначению(СледующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(СледующийГод);
		ЗаполненныеГода.Добавить(СледующийГод);
	КонецЕсли;
	
	// Определение графика работы пользователя. Если график не задан то рабочие дни не заполняем.
	Пользователь = Пользователи.ТекущийПользователь();
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Пользователь);
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение рабочие дней по данным календаря
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &Календарь
		|	И КалендарныеГрафики.Год В(&МассивЛетЗаполнения)";
	
	Запрос.УстановитьПараметр("Календарь", ГрафикРаботы.Календарь);
	Запрос.УстановитьПараметр("МассивЛетЗаполнения", МассивЛетЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РабочиеДни.Добавить(Выборка.ДатаГрафика, , Выборка.ДеньВключенВГрафик);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает максимальное количество событий приходящихся на один промежуток времени в дне.
Функция ПолучитьМаксимальноеКоличествоПересекающихсяСобытийВДне(СобытияПоЧасам, ДеньНачала, ДеньОкончания, ПериодОтображенияРабочегоКалендаря)
	
	МаксимальноеКоличествоПересекающихсяСобытийВДне = 1;
	
	ВремяНачала = НачалоДня(ДеньНачала);
	ВремяОкончания = ВремяНачала + 1800;
	
	Если ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.День Тогда
		КоличествоПериодовПолчаса = 2 * 24;
	ИначеЕсли ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя Тогда
		КоличествоПериодовПолчаса = 2 * 24 * 7;
	ИначеЕсли ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели Тогда
		КоличествоПериодовПолчаса = 2 * 24 * 7 * 2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для ИтераторПолЧаса = 1 по КоличествоПериодовПолчаса Цикл
		
		КоличествоСобытий = 0;
		
		Для Каждого Событие Из СобытияПоЧасам Цикл
			Если Событие.ДатаНачала < ВремяОкончания И Событие.ДатаОкончания > ВремяНачала Тогда
				КоличествоСобытий = КоличествоСобытий + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСобытий > МаксимальноеКоличествоПересекающихсяСобытийВДне Тогда
			МаксимальноеКоличествоПересекающихсяСобытийВДне = КоличествоСобытий;
		КонецЕсли;
		
		ВремяНачала = ВремяНачала + 1800;
		ВремяОкончания = ВремяОкончания + 1800;
		
	КонецЦикла;
	
	Возврат МаксимальноеКоличествоПересекающихсяСобытийВДне;
	
КонецФункции

// Возвращает максимальное количество событий весь для дня. Если событий больше 4, то возвращает 4.
Функция ПолучитьМаксимальноеКоличествоСобытийВесьДень(СобытияВесьДень, ДеньНачала, ДеньОкончания, ПериодОтображенияРабочегоКалендаря)
	
	МаксимальноеКоличествоСобытийВесьДень = 0;
	ВремяНачала = НачалоДня(ДеньНачала);
	ВремяОкончания = ВремяНачала + 60 * 60 * 24;
	
	Если ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.День Тогда
		КоличествоПериодовДень = 1;
	ИначеЕсли ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.Неделя Тогда
		КоличествоПериодовДень = 7;
	ИначеЕсли ПериодОтображенияРабочегоКалендаря = Перечисления.ПериодОтображенияРабочегоКалендаря.ДвеНедели Тогда
		КоличествоПериодовДень = 14;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для ИтераторДень = 1 по КоличествоПериодовДень Цикл
		
		КоличествоСобытий = 0;
		
		Для Каждого Событие Из СобытияВесьДень Цикл
			Если Событие.ДатаНачала < ВремяОкончания И Событие.ДатаОкончания > ВремяНачала Тогда
				КоличествоСобытий = КоличествоСобытий + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСобытий > МаксимальноеКоличествоСобытийВесьДень Тогда
			МаксимальноеКоличествоСобытийВесьДень = КоличествоСобытий;
		КонецЕсли;
		
		ВремяНачала = ВремяНачала + 60 * 60 * 24;
		ВремяОкончания = ВремяОкончания + 60 * 60 * 24;
		
	КонецЦикла;
	
	Если МаксимальноеКоличествоСобытийВесьДень > 0 Тогда
		МаксимальноеКоличествоСобытийВесьДень = МаксимальноеКоличествоСобытийВесьДень + 1;
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоСобытийВесьДень;
	
КонецФункции

// Возвращает таблицу времен с координатами для хранения информации об отображении календаря.
Функция ПолучитьТаблицуВремени(День, МаксимальноеКоличествоПересекающихсяСобытийВДне, ТочкаОтображенияСобытийДня)
	
	ТаблицаВремени = Новый ТаблицаЗначений;
	ТаблицаВремени.Колонки.Добавить("ВремяНачала");
	ТаблицаВремени.Колонки.Добавить("ВремяОкончания");
	ТаблицаВремени.Колонки.Добавить("Занято");
	ТаблицаВремени.Колонки.Добавить("Координаты");
	ТаблицаВремени.Колонки.Добавить("КолонкаСобытия");
	ТаблицаВремени.Колонки.Добавить("Событие");
	ТаблицаВремени.Колонки.Добавить("Цвет");
	ТаблицаВремени.Колонки.Добавить("СобытиеРеквизиты");
	ТаблицаВремени.Колонки.Добавить("СобытиеДатаНачала");
	
	ТекущиеКоординаты = КопироватьКоординатыТочки(ТочкаОтображенияСобытийДня);
	НачальнаяКоординатаX = ТекущиеКоординаты.КоординатаX;
	
	ВремяНачала = НачалоДня(День);
	ВремяОкончания = ВремяНачала + 1800;
	
	Для ИтераторПолЧаса = 1 По 48 Цикл
		
		ТекущиеКоординаты.КоординатаX = НачальнаяКоординатаX;
		
		Для ИтераторСобытиеВДне = 1 По МаксимальноеКоличествоПересекающихсяСобытийВДне Цикл
			
			НоваяСтрока = ТаблицаВремени.Добавить();
			НоваяСтрока.ВремяНачала = ВремяНачала;
			НоваяСтрока.ВремяОкончания = ВремяОкончания;
			НоваяСтрока.Занято = Ложь;
			НоваяСтрока.Координаты = КопироватьКоординатыТочки(ТекущиеКоординаты);
			НоваяСтрока.КолонкаСобытия = ИтераторСобытиеВДне;
			
			ТекущиеКоординаты.КоординатаX = ТекущиеКоординаты.КоординатаX + 1;
			
		КонецЦикла;
		
		ТекущиеКоординаты.КоординатаY = ТекущиеКоординаты.КоординатаY + 1;
		ВремяНачала = ВремяНачала + 1800;
		ВремяОкончания = ВремяОкончания + 1800;
		
	КонецЦикла;
	
	Возврат ТаблицаВремени;
	
КонецФункции

// Проверяет, свободна ли ячейка в календаря для времени и колонки
Функция СвободнаЯчейкаВТаблицеВремени(ТаблицаВремени, ВремяНачала, КолонкаСобытия)
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВремяНачала", ВремяНачала);
	Отбор.Вставить("Занято", Ложь);
	Отбор.Вставить("КолонкаСобытия", КолонкаСобытия);
	СвободныеЯчейки = ТаблицаВремени.НайтиСтроки(Отбор);
	Если СвободныеЯчейки.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает линию для отображения оси времени и заголовка дней
Функция ПолучитьЛиниюПустойЯчейки()
	
	Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
КонецФункции

// Возвращает линию для отображения событий
Функция ПолучитьЛиниюСобытия()
	
	Возврат Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
КонецФункции

// Отображает заголовок дня в указанной точке
Процедура ОтобразитьЗаголовокДней(ТабличныйДокумент, ТочкаОтображенияДня,
	МаксимальноеКоличествоСобытийВесьДень, МаксимальноеКоличествоПересекающихсяСобытийВДне, День,
	ФорматнаяСтрока = Неопределено, ВключатьРасшифровку = Истина)
	
	ЛеваяВерхняяТочка =
		ПолучитьКоординатыТочки(ТочкаОтображенияДня.КоординатаX, ТочкаОтображенияДня.КоординатаY);
	ПраваяНижняяТочка =
		ПолучитьКоординатыТочки(
			ТочкаОтображенияДня.КоординатаX + (МаксимальноеКоличествоПересекающихсяСобытийВДне - 1),
			ТочкаОтображенияДня.КоординатаY);
	Если ФорматнаяСтрока = Неопределено Тогда
		ФорматнаяСтрока = "ДФ='ddd" + Символы.ПС + "d MMM'";
	КонецЕсли;
	ПредставлениеДня = Формат(День, ФорматнаяСтрока);
	
	Линия = ПолучитьЛиниюПустойЯчейки();
	Если ВключатьРасшифровку Тогда
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.День,
			День, День);
	Иначе
		Расшифровка = Неопределено;
	КонецЕсли;
	
	Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
		ПредставлениеДня, Расшифровка,
		ГоризонтальноеПоложение.Центр, ВертикальноеПоложение.Центр, ЦветаСтиля.ЦветКалендаряФонШапки,
		Линия, Линия, Линия, Линия,
		2); // ЧислоСтрок
	
	Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
	Если НачалоДня(День) = НачалоДня(ТекущаяДата()) Тогда
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодписьТекущийДень;
	Иначе
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	КонецЕсли;
	
	Если МаксимальноеКоличествоСобытийВесьДень > 9 Тогда
		ТабличныйДокумент.ФиксацияСверху = 2;
	Иначе
		ТабличныйДокумент.ФиксацияСверху = 1 + МаксимальноеКоличествоСобытийВесьДень;
	КонецЕсли;
	
	Если МаксимальноеКоличествоСобытийВесьДень > 1 Тогда
		ТабличныйДокумент.Область(3, , 3 + (МаксимальноеКоличествоСобытийВесьДень - 2)).Сгруппировать();
	КонецЕсли;
	
КонецПроцедуры

// Отображает заголовок дня в указанной точке для режима занятости
Процедура ОтобразитьЗаголовокДнейЗанятости(ТабличныйДокумент, ТочкаОтображения,
	День, ВремяНачала, ВремяОкончания)
	
	// Строки отображения: Дата, Время
	// Столбцы отображения: По два столбца на каждый час в каждом дне
	КоличествоЧасовОтображения = (ВремяОкончания - ВремяНачала) / 3600;
	КоличествоСтолбцовОтображения = КоличествоЧасовОтображения * 2;
	КоличествоСтрокОтображения = 2;
	Линия = ПолучитьЛиниюПустойЯчейки();
	
	// Отображаем подпись дня
	ЛеваяВерхняяТочка =
		ПолучитьКоординатыТочки(ТочкаОтображения.КоординатаX, ТочкаОтображения.КоординатаY);
	ПраваяНижняяТочка = ПолучитьКоординатыТочки(
		ТочкаОтображения.КоординатаX + (КоличествоСтолбцовОтображения - 1),
		ТочкаОтображения.КоординатаY);
	
	ПредставлениеДня = Формат(День, "ДФ='d MMMM'");
	
	Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.День, День, День);
	
	Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент,
		ЛеваяВерхняяТочка, ПраваяНижняяТочка,
		ПредставлениеДня, Расшифровка,
		ГоризонтальноеПоложение.Центр, ВертикальноеПоложение.Центр, ,
		Линия, Линия, Линия, Линия);
	
	Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
	Если НачалоДня(День) = НачалоДня(ТекущаяДата()) Тогда
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодписьТекущийДень;
	Иначе
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	КонецЕсли;
	
	// Отображаем ось времени в дне
	ОтображаемоеВремя = День + (ВремяНачала - НачалоДня(ВремяНачала));
	ОтображаемоеВремяОкончания = День + (ВремяОкончания - НачалоДня(ВремяНачала));
	ИндексВремени = 1;
	Пока ОтображаемоеВремя < ОтображаемоеВремяОкончания Цикл
		
		ЛеваяВерхняяТочка = ПолучитьКоординатыТочки(
			ТочкаОтображения.КоординатаX + (ИндексВремени - 1) * 2,
			ТочкаОтображения.КоординатаY + 1);
		ПраваяНижняяТочка = ПолучитьКоординатыТочки(
			ТочкаОтображения.КоординатаX + (ИндексВремени - 1) * 2 + 1,
			ТочкаОтображения.КоординатаY + 1);
		
		ПредставлениеВремени = Формат(ОтображаемоеВремя, "ДФ = 'HH:mm'");
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Время,
			ОтображаемоеВремя, КонецЧаса(ОтображаемоеВремя));
		
		Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
			ПредставлениеВремени, Расшифровка,
			ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, ЦветаСтиля.ЦветКалендаряФонШапки,
			Линия, Линия, Линия, Линия);
		Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
		
		ОтображаемоеВремя = ОтображаемоеВремя + 3600;
		ИндексВремени = ИндексВремени + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображает ось времени в указанной точке
Процедура ОтобразитьОсьВремени(ТабличныйДокумент, ТочкаОтображенияОсиВремени)
	
	МассивВремен = РаботаСРабочимКалендаремКлиентСервер.ПолучитьМассивВремен();
	Линия = ПолучитьЛиниюПустойЯчейки();
	
	ТекущиеКоординаты = КопироватьКоординатыТочки(ТочкаОтображенияОсиВремени);
	
	Для Каждого ПредставлениеВремени Из МассивВремен Цикл
		
		ЛеваяВерхняяТочка =
			ПолучитьКоординатыТочки(ТекущиеКоординаты.КоординатаX, ТекущиеКоординаты.КоординатаY);
		ПраваяНижняяТочка =
			ПолучитьКоординатыТочки(ТекущиеКоординаты.КоординатаX, ТекущиеКоординаты.КоординатаY + 1);
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Время);
		
		Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
			ПредставлениеВремени, Расшифровка,
			ГоризонтальноеПоложение.Право, ВертикальноеПоложение.Верх, ЦветаСтиля.ЦветКалендаряФонШапки,
			Линия, Линия, Линия, Линия);
		
		Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
		Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
		
		Область = ТабличныйДокумент.Область(
			ЛеваяВерхняяТочка.КоординатаY, ЛеваяВерхняяТочка.КоординатаX,
			ПраваяНижняяТочка.КоординатаY, ПраваяНижняяТочка.КоординатаX);
		Область.Имя = ПредставлениеВремени;
		
		ТекущиеКоординаты.КоординатаY = ТекущиеКоординаты.КоординатаY + 2;
		
	КонецЦикла;
	
	Если ТочкаОтображенияОсиВремени.КоординатаX = 1 Тогда
		ТабличныйДокумент.ФиксацияСлева = 1;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(
		ТочкаОтображенияОсиВремени.КоординатаY, ТочкаОтображенияОсиВремени.КоординатаX);
	Область.ШиринаКолонки = 6;
	
КонецПроцедуры

// Отображает ось пользователей в указанной точке
Процедура ОтобразитьОсьПользователей(ТабличныйДокумент, ТочкаОтображения, МассивПользователей)
	
	ИндексПользователя = 1;
	Линия = ПолучитьЛиниюПустойЯчейки();
	
	ПредставлениеОбщее = НСтр("ru = 'Общее'");
	ТочкаОтображенияОбщее = ПолучитьКоординатыТочки(
		ТочкаОтображения.КоординатаX, ТочкаОтображения.КоординатаY);
	
	Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент,
		ТочкаОтображенияОбщее, ТочкаОтображенияОбщее,
		ПредставлениеОбщее, ,
		ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Центр, ,
		Линия, Линия, Линия, Линия);
	Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
	Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	ИндексПользователя = ИндексПользователя + 1;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
		
		ПредставлениеПользователя = Строка(Пользователь);
		ТочкаОтображенияПользователя = ПолучитьКоординатыТочки(
			ТочкаОтображения.КоординатаX, ТочкаОтображения.КоординатаY + ИндексПользователя - 1);
		
		Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент,
			ТочкаОтображенияПользователя, ТочкаОтображенияПользователя,
			ПредставлениеПользователя, ,
			ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Центр, ,
			Линия, Линия, Линия, Линия);
		//Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
		//Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
		ИндексПользователя = ИндексПользователя + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображает события весь день
Процедура ОтобразитьСобытияВесьДень(ТабличныйДокумент, ТочкаОтображенияДня, СобытияВесьДень,
		День, МаксимальноеКоличествоСобытийВесьДень,
		МаксимальноеКоличествоПересекающихсяСобытийВДне, КоличествоСобытийВесьДеньВДне)
	
	Если МаксимальноеКоличествоСобытийВесьДень = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отображение надписи количества событий всего дня
	НачалоДня = НачалоДня(День);
	КонецДня = КонецДня(День);
	
	КоличествоСобытийВесьДень = МаксимальноеКоличествоСобытийВесьДень - 1;
	
	Если КоличествоСобытийВесьДеньВДне <> 0 Тогда
		ПодписьСобытий = 
			Строка(КоличествоСобытийВесьДеньВДне) + " "
			+ ПолучитьПодписьСобытий(КоличествоСобытийВесьДеньВДне) + " " + НСтр("ru = 'всего дня'");
	Иначе
		ПодписьСобытий = "";
	КонецЕсли;
	
	ТочкаВесьДеньЛевая = КопироватьКоординатыТочки(ТочкаОтображенияДня);
	ТочкаВесьДеньПравая = КопироватьКоординатыТочки(ТочкаОтображенияДня);
	ТочкаВесьДеньПравая.КоординатаX =
		ТочкаВесьДеньПравая.КоординатаX + (МаксимальноеКоличествоПересекающихсяСобытийВДне - 1);
	
	Линия = ПолучитьЛиниюСобытия();
	Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.НадписьСобытияВесьДень,
		НачалоДня, КонецДня);
	
	Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ТочкаВесьДеньЛевая, ТочкаВесьДеньПравая,
		ПодписьСобытий, Расшифровка,
		ГоризонтальноеПоложение.Центр, ВертикальноеПоложение.Верх, ЦветаСтиля.ЦветКалендаряФонШапки,
		Линия, Линия, Линия, Линия);
	
	Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
	Область.ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
	
	// Отображение событий всего дня
	Для Каждого Событие Из СобытияВесьДень Цикл
		
		ТочкаВесьДеньЛевая.КоординатаY = ТочкаВесьДеньЛевая.КоординатаY + 1;
		ТочкаВесьДеньПравая.КоординатаY = ТочкаВесьДеньПравая.КоординатаY + 1;
		
		Линия = ПолучитьЛиниюСобытия();
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.СобытиеВесьДень,
			Событие.ДатаНачала, Событие.ДатаОкончания,
			Событие.Ссылка, Событие.ПометкаУдаления, Событие.ТипЗаписиКалендаря);
		
		Описание = СформироватьТекстовоеОписаниеСобытия(Событие);
		
		ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ТочкаВесьДеньЛевая, ТочкаВесьДеньПравая,
			Описание, Расшифровка,
			ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, Событие.Цвет,
			Линия, Линия, Линия, Линия,
			, Событие.ПометкаУдаления);
		
		КоличествоСобытийВесьДень = КоличествоСобытийВесьДень - 1;
		
	КонецЦикла;
	
	// Отображение пустых ячеек в области событий всего дня
	Пока КоличествоСобытийВесьДень > 0 Цикл
		
		ТочкаВесьДеньЛевая.КоординатаY = ТочкаВесьДеньЛевая.КоординатаY + 1;
		ТочкаВесьДеньПравая.КоординатаY = ТочкаВесьДеньПравая.КоординатаY + 1;
		
		Если НачалоДня(День) = НачалоДня(ТекущаяДата()) Тогда
			ЦветФона = ЦветаСтиля.ЦветКалендаряФонТекущегоДня;
		Иначе
			ЦветФона = ЦветаСтиля.ЦветКалендаряФонПустойЯчейкиВсегоДня;
		КонецЕсли;
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.ПустаяЯчейкаВесьДень,
			НачалоДня, КонецДня);
		
		ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ТочкаВесьДеньЛевая, ТочкаВесьДеньПравая,
			, Расшифровка,
			, , ЦветФона);
		
		КоличествоСобытийВесьДень = КоличествоСобытийВесьДень - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображает события календаря внутри дня по часам
Процедура ОтобразитьСобытияВДне(ТабличныйДокумент, ТочкаОтображенияСобытийДня, СобытияПоЧасам,
	День, МаксимальноеКоличествоПересекающихсяСобытийВДне)
	
	ТаблицаВремени =
		ПолучитьТаблицуВремени(День, МаксимальноеКоличествоПересекающихсяСобытийВДне, ТочкаОтображенияСобытийДня);
	
	Для Каждого Событие Из СобытияПоЧасам Цикл
		
		ДатаНачала = СкорректироватьДатуНачалаВПределахДня(Событие.ДатаНачала, День);
		ДатаНачала = РаботаСРабочимКалендаремКлиентСервер.НачалоПолучаса(ДатаНачала);
		ДатаОкончания = СкорректироватьДатуОкончанияВПределахДня(Событие.ДатаОкончания, День);
		ДатаОкончания = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ДатаОкончания);
		
		Отбор = Новый Структура();
		Отбор.Вставить("Занято", Ложь);
		Отбор.Вставить("ВремяНачала", ДатаНачала);
		ВозможныеВременаНачала = ТаблицаВремени.НайтиСтроки(Отбор);
		
		ВозможныеКолонки = Новый Массив;
		
		Для Каждого ВозможноеВремяНачала Из ВозможныеВременаНачала Цикл
			
			ВозможныеКолонки.Добавить(ВозможноеВремяНачала.КолонкаСобытия);
			
		КонецЦикла;
		
		ДатаПродолжения = ДатаНачала + 1800;
		
		Пока ДатаПродолжения < ДатаОкончания Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Занято", Ложь);
			Отбор.Вставить("ВремяНачала", ДатаПродолжения);
			ВозможныеВременаПродолжения = ТаблицаВремени.НайтиСтроки(Отбор);
			
			ВозможныеКолонкиПродолжения = Новый Массив;
			
			Для Каждого ВозможноеВремяПродолжения Из ВозможныеВременаПродолжения Цикл
				
				ВозможныеКолонкиПродолжения.Добавить(ВозможноеВремяПродолжения.КолонкаСобытия);
				
			КонецЦикла;
			
			ВозможныеКолонки = ПересечениеМассивов(ВозможныеКолонки, ВозможныеКолонкиПродолжения);
			
			ДатаПродолжения = ДатаПродолжения + 1800;
			
		КонецЦикла;
		
		Если ВозможныеКолонки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкаСобытия = ВыбратьМинимальноеЧислоВМассиве(ВозможныеКолонки);
		
		ДатаНачалаДляЗанятия = ДатаНачала;
		
		Пока ДатаНачалаДляЗанятия < ДатаОкончания Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ВремяНачала", ДатаНачалаДляЗанятия);
			Отбор.Вставить("КолонкаСобытия", КолонкаСобытия);
			ВремяЗанимаемое = ТаблицаВремени.НайтиСтроки(Отбор)[0];
			ВремяЗанимаемое.Занято = Истина;
			ВремяЗанимаемое.Событие = Событие.Ссылка;
			ВремяЗанимаемое.Цвет = Событие.Цвет;
			ВремяЗанимаемое.СобытиеРеквизиты = Событие;
			ВремяЗанимаемое.СобытиеДатаНачала = Событие.ДатаНачала;
			
			ДатаНачалаДляЗанятия = ДатаНачалаДляЗанятия + 1800;
			
		КонецЦикла;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВремяНачала", ДатаНачала);
		Отбор.Вставить("КолонкаСобытия", КолонкаСобытия);
		ВременаНачала = ТаблицаВремени.НайтиСтроки(Отбор);
		Если ВременаНачала.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВремяНачала = ВременаНачала[0];
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВремяОкончания", ДатаОкончания);
		Отбор.Вставить("КолонкаСобытия", КолонкаСобытия);
		ВременаОкончания = ТаблицаВремени.НайтиСтроки(Отбор);
		Если ВременаОкончания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВремяОкончания = ВременаОкончания[0];
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Событие,
			Событие.ДатаНачала, Событие.ДатаОкончания,
			Событие.Ссылка, Событие.ПометкаУдаления, Событие.ТипЗаписиКалендаря);
		
		СобытиеОднострочное =
			(ВремяОкончания.Координаты.КоординатаY - ВремяНачала.Координаты.КоординатаY = 0);
		Описание = СформироватьТекстовоеОписаниеСобытия(Событие, Истина, СобытиеОднострочное);
		
		Линия = ПолучитьЛиниюСобытия();
		
		ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ВремяНачала.Координаты, ВремяОкончания.Координаты,
			Описание, Расшифровка,
			ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, Событие.Цвет,
			Линия, Линия, Линия, Линия,
			, Событие.ПометкаУдаления);
		
	КонецЦикла;
	
	НеРасширяемыеСобытия = Новый ТаблицаЗначений;
	НеРасширяемыеСобытия.Колонки.Добавить("Событие");
	НеРасширяемыеСобытия.Колонки.Добавить("ДатаНачала");
	РасширенныеСобытия = Новый ТаблицаЗначений;
	РасширенныеСобытия.Колонки.Добавить("Событие");
	РасширенныеСобытия.Колонки.Добавить("ВремяНачала");
	
	Для Каждого Время Из ТаблицаВремени Цикл
		
		Если Время.Занято Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("Событие", Время.Событие);
			Отбор.Вставить("ДатаНачала", Время.СобытиеРеквизиты.ДатаНачала);
			
			Строки = НеРасширяемыеСобытия.НайтиСтроки(Отбор);
			Если Строки.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СвободнаЯчейкаВТаблицеВремени(
					ТаблицаВремени, Время.ВремяНачала, Время.КолонкаСобытия + 1) Тогда
				НоваяСтрока = НеРасширяемыеСобытия.Добавить();
				НоваяСтрока.Событие = Время.Событие;
				НоваяСтрока.ДатаНачала = Время.СобытиеРеквизиты.ДатаНачала;
				Продолжить;
			КонецЕсли;
			
			ВремяОкончания = Время.ВремяОкончания;
			
			МожноРасширитьСобытие = Истина;
			ЕстьВозможныеЯчейкиСобытия = Истина;
			ВремяНачалаВозможнойЯчейки = Время.ВремяНачала + 1800;
			
			Пока ЕстьВозможныеЯчейкиСобытия Цикл
				
				Отбор = Новый Структура();
				Отбор.Вставить("ВремяНачала", ВремяНачалаВозможнойЯчейки);
				Отбор.Вставить("Событие", Время.Событие);
				Отбор.Вставить("КолонкаСобытия", Время.КолонкаСобытия);
				ЯчейкиСобытия = ТаблицаВремени.НайтиСтроки(Отбор);
				Если ЯчейкиСобытия.Количество() > 0 Тогда
					
					Если СвободнаЯчейкаВТаблицеВремени(
							ТаблицаВремени, ЯчейкиСобытия[0].ВремяНачала, ЯчейкиСобытия[0].КолонкаСобытия + 1) Тогда
						
						ВремяОкончания = ВремяОкончания + 1800;
						ВремяНачалаВозможнойЯчейки = ВремяНачалаВозможнойЯчейки + 1800;
						
					Иначе
						
						ЕстьВозможныеЯчейкиСобытия = Ложь;
						НоваяСтрока = НеРасширяемыеСобытия.Добавить();
						НоваяСтрока.Событие = Время.Событие;
						НоваяСтрока.ДатаНачала = Время.СобытиеРеквизиты.ДатаНачала;
						МожноРасширитьСобытие = Ложь;
						
					КонецЕсли;
					
				Иначе
					
					ЕстьВозможныеЯчейкиСобытия = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если МожноРасширитьСобытие Тогда
				
				НайденаКрайняяЛеваяЯчейкаСобытия = Ложь;
				ВозможнаяНачальнаяКолонкаСобытия = Время.КолонкаСобытия;
				Пока НЕ НайденаКрайняяЛеваяЯчейкаСобытия Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("ВремяНачала", Время.ВремяНачала);
					Отбор.Вставить("Событие", Время.Событие);
					Отбор.Вставить("КолонкаСобытия", ВозможнаяНачальнаяКолонкаСобытия);
					Отбор.Вставить("СобытиеДатаНачала", Время.СобытиеДатаНачала);
					ВозможнаяНачальнаяЯчейкаРасширения = ТаблицаВремени.НайтиСтроки(Отбор);
					Если ВозможнаяНачальнаяЯчейкаРасширения.Количество() > 0 Тогда
						НачальнаяЯчейкаРасширения = ВозможнаяНачальнаяЯчейкаРасширения;
					Иначе
						НайденаКрайняяЛеваяЯчейкаСобытия = Истина;
					КонецЕсли;
					
					ВозможнаяНачальнаяКолонкаСобытия = ВозможнаяНачальнаяКолонкаСобытия - 1;
					
				КонецЦикла;
				
				Отбор = Новый Структура();
				Отбор.Вставить("ВремяОкончания", ВремяОкончания);
				Отбор.Вставить("КолонкаСобытия", Время.КолонкаСобытия + 1);
				КонечнаяЯчейкаРасширения = ТаблицаВремени.НайтиСтроки(Отбор);
				
				Если НачальнаяЯчейкаРасширения.Количество() > 0 И КонечнаяЯчейкаРасширения.Количество() > 0 Тогда
					
					Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Событие,
						Время.СобытиеРеквизиты.ДатаНачала, Время.СобытиеРеквизиты.ДатаОкончания,
						Время.СобытиеРеквизиты.Ссылка, Время.СобытиеРеквизиты.ПометкаУдаления, Время.СобытиеРеквизиты.ТипЗаписиКалендаря);
					
					СобытиеОднострочное =
						(КонечнаяЯчейкаРасширения[0].Координаты.КоординатаY
							- НачальнаяЯчейкаРасширения[0].Координаты.КоординатаY = 0);
					Описание = СформироватьТекстовоеОписаниеСобытия(Время.СобытиеРеквизиты, Истина, СобытиеОднострочное);
					
					Линия = ПолучитьЛиниюСобытия();
					
					ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент,
						НачальнаяЯчейкаРасширения[0].Координаты, КонечнаяЯчейкаРасширения[0].Координаты,
						Описание, Расшифровка,
						ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, Время.Цвет,
						Линия, Линия, Линия, Линия,
						, Время.СобытиеРеквизиты.ПометкаУдаления);
					
					ВремяНачалаРасширеннойЯчейки = Время.ВремяНачала;
					ЕстьРасширеннаяЯчейка = Истина;
					
					Пока ЕстьРасширеннаяЯчейка Цикл
						
						Отбор = Новый Структура();
						Отбор.Вставить("ВремяНачала", ВремяНачалаРасширеннойЯчейки);
						Отбор.Вставить("Событие", Время.Событие);
						Отбор.Вставить("КолонкаСобытия", Время.КолонкаСобытия);
						ЯчейкиСобытия = ТаблицаВремени.НайтиСтроки(Отбор);
						
						Отбор = Новый Структура();
						Отбор.Вставить("ВремяНачала", ВремяНачалаРасширеннойЯчейки);
						Отбор.Вставить("КолонкаСобытия", Время.КолонкаСобытия + 1);
						РасширениеЯчейкиСобытия = ТаблицаВремени.НайтиСтроки(Отбор);
						
						Если ЯчейкиСобытия.Количество() > 0 И РасширениеЯчейкиСобытия.Количество() > 0 Тогда
							
							РасширениеЯчейкиСобытия = РасширениеЯчейкиСобытия[0];
							РасширениеЯчейкиСобытия.Событие = Время.Событие;
							РасширениеЯчейкиСобытия.Занято = Истина;
							РасширениеЯчейкиСобытия.Цвет = Время.Цвет;
							РасширениеЯчейкиСобытия.СобытиеРеквизиты = Время.СобытиеРеквизиты;
							РасширениеЯчейкиСобытия.СобытиеДатаНачала = Время.СобытиеДатаНачала;
							ВремяНачалаРасширеннойЯчейки = ВремяНачалаРасширеннойЯчейки + 1800;
							
						Иначе
							
							ЕстьРасширеннаяЯчейка = Ложь;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ СвободнаЯчейкаВТаблицеВремени(
							ТаблицаВремени, Время.ВремяНачала, Время.КолонкаСобытия + 2) Тогда
						НоваяСтрока = НеРасширяемыеСобытия.Добавить();
						НоваяСтрока.Событие = Время.Событие;
						НоваяСтрока.ДатаНачала = Время.СобытиеРеквизиты.ДатаНачала;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			КоординатыНачальнаяСвободнаяЯчейка = КопироватьКоординатыТочки(Время.Координаты);
			НайденаКрайняяЛеваяСвободнаяЯчейка = Ложь;
			ВозможнаяНачальнаяКолонкаСвободнойЯчейки = Время.КолонкаСобытия;
			
			Пока НЕ НайденаКрайняяЛеваяСвободнаяЯчейка Цикл
				
				Отбор = Новый Структура();
				Отбор.Вставить("ВремяНачала", Время.ВремяНачала);
				Отбор.Вставить("Занято", Ложь);
				Отбор.Вставить("КолонкаСобытия", ВозможнаяНачальнаяКолонкаСвободнойЯчейки);
				ВозможнаяНачальнаяСвободнаяЯчейка = ТаблицаВремени.НайтиСтроки(Отбор);
				Если ВозможнаяНачальнаяСвободнаяЯчейка.Количество() > 0 Тогда
					КоординатыНачальнаяСвободнаяЯчейка =
						КопироватьКоординатыТочки(ВозможнаяНачальнаяСвободнаяЯчейка[0].Координаты);
				Иначе
					НайденаКрайняяЛеваяСвободнаяЯчейка = Истина;
				КонецЕсли;
				
				ВозможнаяНачальнаяКолонкаСвободнойЯчейки = ВозможнаяНачальнаяКолонкаСвободнойЯчейки - 1;
				
			КонецЦикла;
			
			КоординатыКонечнаяСвободнаяЯчейка = КопироватьКоординатыТочки(Время.Координаты);
			Если СвободнаЯчейкаВТаблицеВремени(
					ТаблицаВремени, Время.ВремяНачала, Время.КолонкаСобытия + 1) Тогда
				
				КоординатыКонечнаяСвободнаяЯчейка.КоординатаX = КоординатыКонечнаяСвободнаяЯчейка.КоординатаX + 1;
				
			КонецЕсли;
			
			Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.ПустаяЯчейка,
				Время.ВремяНачала, Время.ВремяОкончания);
			
			ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент,
				КоординатыНачальнаяСвободнаяЯчейка, КоординатыКонечнаяСвободнаяЯчейка,
				, Расшифровка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображает день месяца
Процедура ОтобразитьДеньМесяца(ТабличныйДокумент, ТочкаОтображенияДня, СобытияВесьДень, СобытияПоЧасам,
	День, КоличествоСобытийДня, ШиринаДня, ОтобразитьМесяц, ЯвляетсяДатойТекущегоМесяца)
	
	ВсегоСобытийДляОтображения = СобытияВесьДень.Количество() + СобытияПоЧасам.Количество();
	
	// Отображение даты
	ЛеваяВерхняяТочка = КопироватьКоординатыТочки(ТочкаОтображенияДня);
	ПраваяНижняяТочка = КопироватьКоординатыТочки(ЛеваяВерхняяТочка);
	Если ВсегоСобытийДляОтображения = 0 Тогда
		ПраваяНижняяТочка.КоординатаX = ПраваяНижняяТочка.КоординатаX + (ШиринаДня - 1);
		ПраваяНижняяТочка.КоординатаY = ПраваяНижняяТочка.КоординатаY + КоличествоСобытийДня;
	Иначе
		
		ОтображатьНадписьВсего = (КоличествоСобытийДня < ВсегоСобытийДляОтображения);
		Если ОтображатьНадписьВсего Тогда
			ШиринаДаты = ШиринаДня - 1;
		Иначе
			ШиринаДаты = ШиринаДня;
		КонецЕсли;
		
		ПраваяНижняяТочка.КоординатаX = ПраваяНижняяТочка.КоординатаX + (ШиринаДаты - 1);
		
	КонецЕсли;
	
	Если ОтобразитьМесяц Тогда
		ПредставлениеДня = Формат(День, "ДФ='d MMM'");
	Иначе
		ПредставлениеДня = Формат(День, "ДФ='d'");
	КонецЕсли;
	
	Линия = ПолучитьЛиниюПустойЯчейки();
	Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.День,
		День, День);
	
	Если НачалоДня(День) = НачалоДня(ТекущаяДата()) Тогда
		
		ЦветФона = ЦветаСтиля.ЦветКалендаряФонТекущегоДня;
		ЦветТекста = ЦветаСтиля.ЦветКалендаряПодписьТекущийДень;
		
	Иначе
		
		ЦветФона = Неопределено;
		Если ЯвляетсяДатойТекущегоМесяца Тогда
			ЦветТекста = ЦветаСтиля.ЦветКалендаряПодпись;
		Иначе
			ЦветТекста = ЦветаСтиля.ЦветТекстаНеактуальнойДатыКалендаря;
		КонецЕсли;
		
	КонецЕсли;
	
	Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
		ПредставлениеДня, Расшифровка,
		ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, ЦветФона,
		Линия, Линия, Линия, Линия);
	
	Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПодпись;
	Область.ЦветТекста = ЦветТекста;
	
	Если ВсегоСобытийДляОтображения > 0 Тогда
		
		// Отображение надписи "Всего"
		Если ОтображатьНадписьВсего Тогда
			
			КоличествоСобытий = СобытияВесьДень.Количество() + СобытияПоЧасам.Количество();
			НадписьВсего = НСтр("ru = 'Всего'") + " " + Строка(КоличествоСобытий);
			
			ЛеваяВерхняяТочка = КопироватьКоординатыТочки(ТочкаОтображенияДня);
			ЛеваяВерхняяТочка.КоординатаX = ПраваяНижняяТочка.КоординатаX + (ШиринаДня - 1);
			ПраваяНижняяТочка = КопироватьКоординатыТочки(ЛеваяВерхняяТочка);
			
			НачалоДня = НачалоДня(День);
			КонецДня = КонецДня(День);
			
			Линия = ПолучитьЛиниюСобытия();
			Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.НадписьСобытияВесьДень,
				НачалоДня, КонецДня);
			
			Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
				НадписьВсего, Расшифровка,
				ГоризонтальноеПоложение.Право, ВертикальноеПоложение.Верх, ЦветФона,
				Линия, Линия, Линия, Линия);
			
			Область.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
			
		КонецЕсли;
		
		// Отображение событий всего дня
		КоличествоОтрисованныхСобытий = 0;
		Для Каждого Событие Из СобытияВесьДень Цикл
			
			Если КоличествоОтрисованныхСобытий >= КоличествоСобытийДня Тогда
				Прервать;
			КонецЕсли;
			
			ОтобразитьСобытиеДняМесяца(ТабличныйДокумент, ТочкаОтображенияДня,
				КоличествоОтрисованныхСобытий, ШиринаДня, Событие);
			
			КоличествоОтрисованныхСобытий = КоличествоОтрисованныхСобытий + 1;
			
		КонецЦикла;
		
		// Отображение событий дня
		Для Каждого Событие Из СобытияПоЧасам Цикл
			
			Если КоличествоОтрисованныхСобытий >= КоличествоСобытийДня Тогда
				Прервать;
			КонецЕсли;
			
			ОтобразитьСобытиеДняМесяца(ТабличныйДокумент, ТочкаОтображенияДня,
				КоличествоОтрисованныхСобытий, ШиринаДня, Событие);
			
			КоличествоОтрисованныхСобытий = КоличествоОтрисованныхСобытий + 1;
			
		КонецЦикла;
		
		// Отображение оставшихся пустых ячеек
		Если КоличествоОтрисованныхСобытий < КоличествоСобытийДня Тогда
			
			ЛеваяВерхняяТочка = КопироватьКоординатыТочки(ТочкаОтображенияДня);
			ЛеваяВерхняяТочка.КоординатаY = ЛеваяВерхняяТочка.КоординатаY + (КоличествоОтрисованныхСобытий + 1);
			ПраваяНижняяТочка = КопироватьКоординатыТочки(ЛеваяВерхняяТочка);
			ПраваяНижняяТочка.КоординатаX = ЛеваяВерхняяТочка.КоординатаX + (ШиринаДня - 1);
			ПраваяНижняяТочка.КоординатаY = ТочкаОтображенияДня.КоординатаY + КоличествоСобытийДня;
			
			Линия = ПолучитьЛиниюПустойЯчейки();
			Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.День,
				День, День);
			
			Область = ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
				, Расшифровка,
				, , ЦветФона,
				Линия, Линия, Линия, Линия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Отображает событие в дне месяца
Процедура ОтобразитьСобытиеДняМесяца(ТабличныйДокумент, ТочкаОтображенияДня,
	КоличествоОтрисованныхСобытий, ШиринаДня, Событие)
	
	ЛеваяВерхняяТочка = КопироватьКоординатыТочки(ТочкаОтображенияДня);
	ЛеваяВерхняяТочка.КоординатаY = ЛеваяВерхняяТочка.КоординатаY + (КоличествоОтрисованныхСобытий + 1);
	ПраваяНижняяТочка = КопироватьКоординатыТочки(ЛеваяВерхняяТочка);
	ПраваяНижняяТочка.КоординатаX = ПраваяНижняяТочка.КоординатаX + (ШиринаДня - 1);
	
	Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Событие,
		Событие.ДатаНачала, Событие.ДатаОкончания,
		Событие.Ссылка, Событие.ПометкаУдаления, Событие.ТипЗаписиКалендаря);
	
	Описание = СформироватьТекстовоеОписаниеСобытия(Событие);
	
	Линия = ПолучитьЛиниюСобытия();
	
	ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
		Описание, Расшифровка,
		ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Верх, Событие.Цвет,
		Линия, Линия, Линия, Линия,
		, Событие.ПометкаУдаления);
	
КонецПроцедуры

// Отображает сетку от точки начала до точки окончания
Процедура ОтобразитьСетку(ТабличныйДокумент, ТочкаНачала, ТочкаОкончания)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для КоординатаX = ТочкаНачала.КоординатаX По ТочкаОкончания.КоординатаX Цикл
		Для КоординатаY = ТочкаНачала.КоординатаY По ТочкаОкончания.КоординатаY Цикл
			Область = ТабличныйДокумент.Область(КоординатаY, КоординатаX);
			Область.Обвести(Линия, Линия, Линия, Линия);
		КонецЦикла;
	КонецЦикла;
	
	Область = ТабличныйДокумент.Область(ТочкаНачала.КоординатаY, ТочкаНачала.КоординатаX, ТочкаОкончания.КоординатаY, ТочкаОкончания.КоординатаX);
	Область.ЦветРамки = ЦветаСтиля.ЦветКалендаряРамка;
	Область.ВысотаСтроки = 14;
	
КонецПроцедуры

// Отображает занятое время пользователя в календаре
Процедура ОтобразитьЗанятость(ТабличныйДокумент, ТочкаОтображенияСобытийДня, ТаблицаЗанятости,
	День, МаксимальноеКоличествоПересекающихсяСобытийВДне)
	
	ТаблицаВремени =
		ПолучитьТаблицуВремени(День, МаксимальноеКоличествоПересекающихсяСобытийВДне, ТочкаОтображенияСобытийДня);
	
	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		
		ДатаНачала = СкорректироватьДатуНачалаВПределахДня(Занятость.ДатаНачала, День);
		ДатаНачала = РаботаСРабочимКалендаремКлиентСервер.НачалоПолучаса(ДатаНачала);
		ДатаОкончания = СкорректироватьДатуОкончанияВПределахДня(Занятость.ДатаОкончания, День);
		ДатаОкончания = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ДатаОкончания);
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВремяНачала", ДатаНачала);
		Отбор.Вставить("КолонкаСобытия", 1);
		ВременаНачала = ТаблицаВремени.НайтиСтроки(Отбор);
		Если ВременаНачала.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВремяНачала = ВременаНачала[0];
		
		Отбор = Новый Структура();
		Отбор.Вставить("ВремяОкончания", ДатаОкончания);
		Отбор.Вставить("КолонкаСобытия", МаксимальноеКоличествоПересекающихсяСобытийВДне);
		ВременаОкончания = ТаблицаВремени.НайтиСтроки(Отбор);
		Если ВременаОкончания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВремяОкончания = ВременаОкончания[0];
		
		Область = ТабличныйДокумент.Область(
			ВремяНачала.Координаты.КоординатаY, ВремяНачала.Координаты.КоординатаX,
			ВремяОкончания.Координаты.КоординатаY, ВремяОкончания.Координаты.КоординатаX);
		
		Если Занятость.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			Область.ЦветФона = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
		ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			Область.ЦветУзора = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
			Область.Узор = ТипУзораТабличногоДокумента.Узор12;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отображает занятое время пользователя в выборе времени
Процедура ОтобразитьЗанятостьЗанятости(ТабличныйДокумент, ТочкаОтображения,
	День, ВремяНачала, ВремяОкончания, ТаблицаЗанятости, МассивПользователей)
	
	// Строки отображения: Общая занятость, Занятость каждого пользователя отдельно
	// Столбцы отображения: По столбцу на каждые полчаса
	КоличествоЧасовОтображения = (ВремяОкончания - ВремяНачала) / 3600;
	КоличествоСтолбцовОтображения = КоличествоЧасовОтображения * 2;
	КоличествоСтрокОтображения = 1 + МассивПользователей.Количество();
	Линия = ПолучитьЛиниюПустойЯчейки();
	
	// Отображаем занятость по получасу
	ДатаНачала = НачалоДня(День) + (НачалоЧаса(ВремяНачала) - НачалоДня(ВремяНачала));
	ДатаОкончания = НачалоДня(День) + (НачалоЧаса(ВремяОкончания) - НачалоДня(ВремяНачала));
	ОтображаемоеВремя = ДатаНачала;
	ИндексВремени = 1;
	Пока ОтображаемоеВремя < ДатаОкончания Цикл
		
		КонецОтображаемогоВремени = РаботаСРабочимКалендаремКлиентСервер.КонецПолучаса(ОтображаемоеВремя +1);
		
		Расшифровка = СформироватьЗначениеРасшифровки(Перечисления.ЭлементыРабочегоКалендаря.Время,
			ОтображаемоеВремя, КонецОтображаемогоВремени);
		
		// Общая занятость
		ИндексПользователя = 1;
		ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
		Для Каждого Занятость Из ТаблицаЗанятости Цикл
			
			Если Занятость.ДатаНачала < КонецОтображаемогоВремени
				И Занятость.ДатаОкончания > ОтображаемоеВремя
				И Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
				
				Если Занятость.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
					ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
					Прервать;
				ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
					ОбщаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТочкаОтображенияЗанятости = ПолучитьКоординатыТочки(
			ТочкаОтображения.КоординатаX + (ИндексВремени - 1),
			ТочкаОтображения.КоординатаY + (ИндексПользователя - 1));
		Область = ТабличныйДокумент.Область(
			ТочкаОтображенияЗанятости.КоординатаY, ТочкаОтображенияЗанятости.КоординатаX);
		Область.Расшифровка = Расшифровка;
		Если ОбщаяЗанятость = Перечисления.СостоянияЗанятости.Занят Тогда
			Область.ЦветФона = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
		ИначеЕсли ОбщаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			Область.ЦветУзора = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
			Область.Узор = ТипУзораТабличногоДокумента.Узор12;
		КонецЕсли;
		
		ИндексПользователя = ИндексПользователя + 1;
		
		// Занятость каждого пользователя
		Для Каждого Пользователь Из МассивПользователей Цикл
			
			ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Доступен;;
			Для Каждого Занятость Из ТаблицаЗанятости Цикл
				
				Если Занятость.ДатаНачала < КонецОтображаемогоВремени
					И Занятость.ДатаОкончания > ОтображаемоеВремя
					И Занятость.Пользователь = Пользователь
					И Занятость.Занят <> Перечисления.СостоянияЗанятости.Доступен Тогда
					
					Если Занятость.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
						ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят;
						Прервать;
					ИначеЕсли Занятость.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
						ЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТочкаОтображенияЗанятости = ПолучитьКоординатыТочки(
				ТочкаОтображения.КоординатаX + (ИндексВремени - 1),
				ТочкаОтображения.КоординатаY + (ИндексПользователя - 1));
			
			Область = ТабличныйДокумент.Область(
				ТочкаОтображенияЗанятости.КоординатаY, ТочкаОтображенияЗанятости.КоординатаX);
			Область.Расшифровка = Расшифровка;
			Если ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят Тогда
				Область.ЦветФона = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
			ИначеЕсли ЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
				Область.ЦветУзора = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
				Область.Узор = ТипУзораТабличногоДокумента.Узор12;
			КонецЕсли;
			
			ИндексПользователя = ИндексПользователя + 1;
			
		КонецЦикла;
		
		ОтображаемоеВремя = ОтображаемоеВремя + 1800;
		ИндексВремени = ИндексВремени + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Корректирует дату начала делая ее не меньше начала дня
Функция СкорректироватьДатуНачалаВПределахДня(ДатаНачала, День)
	
	Если ДатаНачала < НачалоДня(День) Тогда
		
		ДатаНачалаВПределахДня = НачалоДня(День);
		
	Иначе
		
		ДатаНачалаВПределахДня = ДатаНачала;
		
	КонецЕсли;
	
	Возврат ДатаНачалаВПределахДня;
	
КонецФункции

// Корректирует дату окончания, делая ее не больше конца дня
Функция СкорректироватьДатуОкончанияВПределахДня(ДатаОкончания, День)
	
	Если ДатаОкончания > (КонецДня(День) + 1) Тогда
		
		ДатаОкончанияВПределахДня = КонецДня(День) + 1;
		
	Иначе
		
		ДатаОкончанияВПределахДня = ДатаОкончания;
		
	КонецЕсли;
	
	Возврат ДатаОкончанияВПределахДня;
	
КонецФункции

// Отображает прямоугольную область
Функция ОтобразитьПрямоугольнуюОбласть(ТабличныйДокумент, ЛеваяВерхняяТочка, ПраваяНижняяТочка,
	Текст = Неопределено, Расшифровка = Неопределено,
	ГоризонтальноеПоложение = Неопределено, ВертикальноеПоложение = Неопределено, ЦветФона = Неопределено,
	ГраницаСлева = Неопределено, ГраницаСверху = Неопределено, ГраницаСправа = Неопределено, ГраницаСнизу = Неопределено,
	ЧислоСтрок = 1, ПометкаУдаления = Ложь)
	
	Область = ТабличныйДокумент.Область(
		ЛеваяВерхняяТочка.КоординатаY, ЛеваяВерхняяТочка.КоординатаX,
		ПраваяНижняяТочка.КоординатаY ,ПраваяНижняяТочка.КоординатаX);
	Область.Объединить();
	
	Если ЛеваяВерхняяТочка.КоординатаY - ПраваяНижняяТочка.КоординатаY = 0 Тогда
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	Иначе
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
	Если Текст <> Неопределено И ТипЗнч(Текст) = Тип("Строка") Тогда
		Область.Текст = Текст;
	КонецЕсли;
	
	Если Расшифровка <> Неопределено Тогда
		Область.Расшифровка = Расшифровка;
	КонецЕсли;
	
	Если ГоризонтальноеПоложение <> Неопределено И ТипЗнч(ГоризонтальноеПоложение) = Тип("ГоризонтальноеПоложение") Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение;
	КонецЕсли;
	
	Если ВертикальноеПоложение <> Неопределено И ТипЗнч(ВертикальноеПоложение) = Тип("ВертикальноеПоложение") Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		
		Если ТипЗнч(ЦветФона) = Тип("ПеречислениеСсылка.ЦветаРабочегоКалендаря") Тогда
			Область.ЦветФона = ПолучитьЦветТабличногоДокумента(ЦветФона);
		ИначеЕсли ТипЗнч(ЦветФона) = Тип("Цвет") Тогда
			Область.ЦветФона = ЦветФона;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ГраницаСлева <> Неопределено И ТипЗнч(ГраницаСлева) = Тип("Линия") Тогда
		Область.ГраницаСлева = ГраницаСлева;
	КонецЕсли;
	
	Если ГраницаСверху <> Неопределено И ТипЗнч(ГраницаСверху) = Тип("Линия") Тогда
		Область.ГраницаСверху = ГраницаСверху;
	КонецЕсли;
	
	Если ГраницаСправа <> Неопределено И ТипЗнч(ГраницаСправа) = Тип("Линия") Тогда
		Область.ГраницаСправа = ГраницаСправа;
	КонецЕсли;
	
	Если ГраницаСнизу <> Неопределено И ТипЗнч(ГраницаСнизу) = Тип("Линия") Тогда
		Область.ГраницаСнизу = ГраницаСнизу;
	КонецЕсли;
	
	Если ЧислоСтрок <> 1 Тогда
		Область.ВысотаСтроки = 14 * ЧислоСтрок;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Область.Шрифт = ШрифтыСтиля.ШрифтКалендаряПометкаУдаления;
	КонецЕсли;
	
	Если Область.ЦветФона <> Новый Цвет Тогда
		
		Область.Узор = ТипУзораТабличногоДокумента.БезУзора;
		
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции

// Возвращает пересечение переданных массивов
Функция ПересечениеМассивов(МассивПервый, МассивВторой)
	
	МассивПересечение = Новый Массив;
	
	Для Каждого ЭлементПервогоМассив Из МассивПервый Цикл
		
		ИндексНайденногоЗначения = МассивВторой.Найти(ЭлементПервогоМассив);
		Если ИндексНайденногоЗначения <> Неопределено Тогда
			МассивПересечение.Добавить(ЭлементПервогоМассив);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПересечение;
	
КонецФункции

// Возвращает минимальное число в переданном массиве
Функция ВыбратьМинимальноеЧислоВМассиве(Массив)
	
	МинимальныйЭлемент = Неопределено;
	
	Для Каждого ЭлементМассива Из Массив Цикл
		
		Если ТипЗнч(ЭлементМассива) <> Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МинимальныйЭлемент = Неопределено Тогда
			МинимальныйЭлемент = ЭлементМассива;
			Продолжить;
		КонецЕсли;
		
		Если ЭлементМассива < МинимальныйЭлемент Тогда
			МинимальныйЭлемент = ЭлементМассива;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальныйЭлемент;
	
КонецФункции

// Подпись к количеству событий.
Функция ПолучитьПодписьСобытий(КоличествоСобытий)
	
	Если КоличествоСобытий > 10 И КоличествоСобытий < 20 Тогда
		Подпись = НСтр("ru = 'событий'");
	Иначе
		ПоследниеДвеЦифры = КоличествоСобытий - Цел(КоличествоСобытий / 100) * 100;
		ПоследняяЦифра = КоличествоСобытий - Цел(КоличествоСобытий / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'событий'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'событий'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'событие'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'события'");
			Иначе
				Подпись = НСтр("ru = 'событий'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Формирует структуру со значением расшифровки
Функция СформироватьЗначениеРасшифровки(Знач ВидЭлемента,
	Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено,
	Событие = Неопределено, ПометкаУдаления = Неопределено, ТипЗаписиКалендаря = Неопределено)
	
	Если ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.Время
		И ДатаНачала = Неопределено И ДатаОкончания = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.ПустаяЯчейкаВесьДень
		ИЛИ ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеВесьДень
		ИЛИ ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.День 
		ИЛИ ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.НадписьСобытияВесьДень Тогда
		
		ДатаНачала = НачалоДня(ДатаНачала);
		ДатаОкончания = КонецДня(ДатаОкончания);
		ВесьДень = Истина;
		
	Иначе
		
		ВесьДень = Ложь;
		
	КонецЕсли;
	
	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		Если ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.Событие Тогда
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеПовторяющееся;
		ИначеЕсли ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеВесьДень Тогда
			ВидЭлемента = Перечисления.ЭлементыРабочегоКалендаря.СобытиеВесьДеньПовторяющееся;
		КонецЕсли;
		
	КонецЕсли;
	
	Расшифровка =
		Новый Структура("ВидЭлемента, ДатаНачала, ДатаОкончания, ВесьДень, Событие, ПометкаУдаления",
			ВидЭлемента, ДатаНачала, ДатаОкончания, ВесьДень, Событие, ПометкаУдаления);
	
	Возврат Расшифровка;
	
КонецФункции

// Возвращает структура координат точки по переданным координатам X и Y
Функция ПолучитьКоординатыТочки(КоординатаX = 1, КоординатаY = 1)
	
	Возврат Новый Структура("КоординатаX, КоординатаY", КоординатаX, КоординатаY);
	
КонецФункции

// Копирует координаты точки
Функция КопироватьКоординатыТочки(Координаты)
	
	Возврат ПолучитьКоординатыТочки(Координаты.КоординатаX, Координаты.КоординатаY);
	
КонецФункции

// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
	ОтображатьПомеченныеНаУдаления, ОтображатьОтклоненныеМероприятия, МассивПользователей,
	ТекущийПользователь, ВесьДень)
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("ОписаниеКраткое");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	ТаблицаСобытий.Колонки.Добавить("ПометкаУдаления");
	ТаблицаСобытий.Колонки.Добавить("ТипЗаписиКалендаря");
	ТаблицаСобытий.Колонки.Добавить("Состояние");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.ОписаниеКраткое,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)) КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.Состояние
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончания > &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачала < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря <> ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)";
	
	Если НЕ ОтображатьПомеченныеНаУдаления Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ЗаписиРабочегоКалендаря.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала,
		|	ОписаниеКраткое";
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВесьДень", ВесьДень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ДобавитьВТаблицуСобытийПовторяющиесяСобытия(ТаблицаСобытий,
		ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
		МассивПользователей, ТекущийПользователь, ВесьДень);
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Включает в таблицу событий повторяющиеся события
Процедура ДобавитьВТаблицуСобытийПовторяющиесяСобытия(ТаблицаСобытий,
	ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
	МассивПользователей, ТекущийПользователь, ВесьДень)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.ОписаниеКраткое,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)) КАК Цвет,
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	) КАК ИсключенияПовторенияТаблица,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	) КАК ПовторениеПоДнямТаблица,
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря КАК ТипЗаписиКалендаря1,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения > &ДатаНачала
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиРабочегоКалендаря.Ссылка,
		|	ЗаписиРабочегоКалендаря.ОписаниеКраткое,
		|	ЗаписиРабочегоКалендаря.ДатаНачала,
		|	ЗаписиРабочегоКалендаря.ДатаОкончания,
		|	ЕСТЬNULL(НастройкаЦвета.ЗначениеНастройки, ЗНАЧЕНИЕ(Перечисление.ЦветаРабочегоКалендаря.Нет)),
		|	ЗаписиРабочегоКалендаря.ПометкаУдаления,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ИсключенияПовторения.(
		|		ДатаИсключения,
		|		ЗаписьИсключения
		|	),
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДням.(
		|		ДеньНедели,
		|		НомерВхождения
		|	),
		|	ЗаписиРабочегоКалендаря.ДатаНачалаПовторения,
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения,
		|	ЗаписиРабочегоКалендаря.ИнтервалПовторения,
		|	ЗаписиРабочегоКалендаря.КоличествоПовторов,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоДнямМесяца,
		|	ЗаписиРабочегоКалендаря.ПовторениеПоМесяцам,
		|	ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря,
		|	ЗаписиРабочегоКалендаря.ЧастотаПовторения,
		|	ЗаписиРабочегоКалендаря.Состояние
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтображенияЗаписейРабочегоКалендаря КАК НастройкаЦвета
		|		ПО ЗаписиРабочегоКалендаря.Ссылка = НастройкаЦвета.Событие
		|			И (НастройкаЦвета.Пользователь = &ТекущийПользователь)
		|			И (НастройкаЦвета.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиЗаписейРабочегоКалендаря.Цвет))
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.ДатаОкончанияПовторения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаписиРабочегоКалендаря.ДатаНачалаПовторения < &ДатаОкончания
		|	И ЗаписиРабочегоКалендаря.Пользователь В(&МассивПользователей)
		|	И ЗаписиРабочегоКалендаря.ВесьДень = &ВесьДень
		|	И ЗаписиРабочегоКалендаря.ТипЗаписиКалендаря = ЗНАЧЕНИЕ(Перечисление.ТипЗаписиКалендаря.ПовторяющеесяСобытие)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВесьДень", ВесьДень);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПроверяемаяДата = НачалоДня(ОтображаемаяДатаНачала);
		Пока ПроверяемаяДата < ОтображаемаяДатаОкончания Цикл
			
			СтруктураПравилаПовторения = Справочники.ЗаписиРабочегоКалендаря.ПолучитьСтруктуруПравилаПовторения();
			ЗаполнитьЗначенияСвойств(СтруктураПравилаПовторения, Выборка);
			СтруктураПравилаПовторения.ИсключенияПовторения = Выборка.ИсключенияПовторенияТаблица.Выгрузить();
			СтруктураПравилаПовторения.ПовторениеПоДням = Выборка.ПовторениеПоДнямТаблица.Выгрузить();
			
			Если ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
				
				НоваяСтрока = ТаблицаСобытий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ДатаНачала =
					НачалоДня(ПроверяемаяДата) + (Выборка.ДатаНачала - НачалоДня(Выборка.ДатаНачала));
				НоваяСтрока.ДатаОкончания =
					НачалоДня(ПроверяемаяДата) + (Выборка.ДатаОкончания - НачалоДня(Выборка.ДатаНачала));
				
			КонецЕсли;
			
			ПроверяемаяДата = ПроверяемаяДата + 86400; // 86400 - число секунд в сутках
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет подходит ли дата под правило повторения
Функция ДатаУдовлетворяетПравилуПовторения(ПроверяемаяДата, СтруктураПравилаПовторения, УчитыватьИсключения = Истина) Экспорт
	
	Если ПроверяемаяДата < СтруктураПравилаПовторения.ДатаНачалаПовторения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ДатаОкончанияПовторения)
		И ПроверяемаяДата > СтруктураПравилаПовторения.ДатаОкончанияПовторения
		И УчитыватьИсключения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (УчитыватьИсключения И ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения))
		ИЛИ НЕ УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
		ИЛИ НЕ УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по интервалам
Функция УдовлетворяетПравилуИнтервалаПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоДня(ПроверяемаяДата) - НачалоДня(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		ПроверяемыйИнтервалВремя =
			НачалоНедели(ПроверяемаяДата) - НачалоНедели(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала = ПроверяемыйИнтервалВремя / 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		КоличествоЛетИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		НомерПериодаИнтервала =
			Месяц(ПроверяемаяДата) - Месяц(СтруктураПравилаПовторения.ДатаНачалаПовторения) + КоличествоЛетИнтервала * 12;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		НомерПериодаИнтервала =
			Год(ПроверяемаяДата) - Год(СтруктураПравилаПовторения.ДатаНачалаПовторения);
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НомерПериодаИнтервала % СтруктураПравилаПовторения.ИнтервалПовторения = 0;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням
Функция УдовлетворяетПравилуПовторенияПоДням(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
			
			Если ПовторениеПоДнямСтрока.НомерВхождения <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПовторениеПоДнямСтрока.ДеньНедели = ДеньНедели(ПроверяемаяДата) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		Иначе
			
			Если СтруктураПравилаПовторения.ПовторениеПоДням.Количество() = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого ПовторениеПоДнямСтрока Из СтруктураПравилаПовторения.ПовторениеПоДням Цикл
				
				Если ПовторениеПоДнямСтрока.НомерВхождения = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПроверяемаяДатаДеньНеделиВМесяце = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата);
				ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего = 
					РаботаСРабочимКалендаремКлиентСервер.ПолучитьДеньНеделиВМесяце(ПроверяемаяДата, Ложь);
				
				Если (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяце.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяце.НомерВхождения)
					ИЛИ (ПовторениеПоДнямСтрока.ДеньНедели = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.ДеньНедели
						И ПовторениеПоДнямСтрока.НомерВхождения = ПроверяемаяДатаДеньНеделиВМесяцеБезУчетаПоследнего.НомерВхождения) Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по дням месяца
Функция УдовлетворяетПравилуПовторенияПоДнямМесяца(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураПравилаПовторения.ПовторениеПоДнямМесяца) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если СтруктураПравилаПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	ИначеЕсли СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если СтруктураПравилаПовторения.ПовторениеПоДнямМесяца = День(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет подходит ли дата под правило повторения по месяцам
Функция УдовлетворяетПравилуПовторенияПоМесяцам(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	Если СтруктураПравилаПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		Если СтруктураПравилаПовторения.ПовторениеПоМесяцам = Месяц(ПроверяемаяДата) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет является ли дата исключением
Функция ЯвляетсяИсключениемПовторения(ПроверяемаяДата, СтруктураПравилаПовторения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаИсключения", НачалоДня(ПроверяемаяДата));
	НайденныеСтроки = СтруктураПравилаПовторения.ИсключенияПовторения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует текстовое описание события
Функция СформироватьТекстовоеОписаниеСобытия(Событие, ВключатьВремяВОписание = Ложь, ТолькоВремяНачала = Ложь)
	
	Описание = Событие.ОписаниеКраткое;
	
	Если ВключатьВремяВОписание И ТолькоВремяНачала Тогда
		Описание = Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм") + " " + Описание;
	ИначеЕсли ВключатьВремяВОписание И НЕ ТолькоВремяНачала Тогда
		Описание = Формат(Событие.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
			+ Формат(Событие.ДатаОкончания, "ДФ=ЧЧ:мм") + " " + Описание;
	КонецЕсли;
	
	Если Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Описание = "? " + Описание;
	ИначеЕсли Событие.Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Описание = "- " + Описание;
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Формирует таблицу занятости
Функция ПолучитьТаблицуЗанятости(Знач МассивПользователей,
	ДатаНачала, ДатаОкончания, ОтобразитьЗанятостьВДне = Истина, ИсключенияЗанятости = Неопределено, ТолькоИтоги = Ложь) Экспорт
	
	// Формирование структуры таблицы занятости
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	
	// Если занятость в дне не отображается, то таблица занятости не заполняется
	Если Не ОтобразитьЗанятостьВДне Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	// Если передан некорректный период, то таблица занятости не заполняется
	Если Не РаботаСРабочимКалендаремКлиентСервер.ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Тогда
		Возврат ТаблицаЗанятости;
	КонецЕсли;
	
	// Если передан один пользователь вместо массива, то будем обрабатывать массив из одного пользователя.
	Если ТипЗнч(МассивПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = МассивПользователей;
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
	КонецЕсли;
	
	// Получение данных для расчета занятости
	ТаблицаДоступности = РегистрыСведений.ДоступноеВремяПользователя.ПолучитьТаблицуДоступности(
		МассивПользователей);
	ТаблицаЗанятостиПользователей = РегистрыСведений.ЗанятостьПользователя.ПолучитьТаблицуЗанятости(
		МассивПользователей, ДатаНачала, ДатаОкончания);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПользователей);
	ТаблицаЗанятостиПользователейЗаписиКалендаря = Справочники.ЗаписиРабочегоКалендаря.ПолучитьТаблицуЗанятости(
		МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	СортироватьПоСостояниюЗанятости(ТаблицаЗанятостиПользователейЗаписиКалендаря);
	
	// Расчет занятости для каждого пользователя
	Для Каждого Пользователь Из МассивПользователей Цикл
		
		Если Не ТолькоИтоги Тогда
			
			// Полный подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПользователяПоПолномуАлгоритму(ТаблицаДоступности, Пользователь,
				ТаблицаЗанятости, ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям занятости
			ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиПользователей,
				Пользователь, ДатаНачала, ДатаОкончания);
			
			// Занятое время по записям календаря
			ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиПользователейЗаписиКалендаря,
				Пользователь, ДатаНачала, ДатаОкончания);
			
		Иначе
			
			// Краткий подсчет занятости
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			НоваяСтрока.Пользователь = Пользователь;
			НоваяСтрока.ДатаНачала = ДатаНачала;
			НоваяСтрока.ДатаОкончания = ДатаОкончания;
			НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Доступен;
			
			// Занятое время по записям календаря
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(
				ТаблицаЗанятостиПользователейЗаписиКалендаря, Пользователь, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по записям занятости
			РасчетЗанятостиЗавершен = РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(
				ТаблицаЗанятостиПользователей, Пользователь, НоваяСтрока.Занят);
			Если РасчетЗанятостиЗавершен Тогда
				Продолжить;
			КонецЕсли;
			
			// Занятое время по ежедневной занятости
			РассчитатьДоступностьПользователяПоКраткомуАлгоритму(
				ТаблицаДоступности, Пользователь, НоваяСтрока.Занят,
				ДатаНачала, ДатаОкончания, ТаблицаЗанятостиПользователей);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Формирует таблицу занятости
Функция СформироватьТаблицуЗанятости()
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("Пользователь");
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Занят");
	
	Возврат ТаблицаЗанятости;
	
КонецФункции

// Вспомогательная функция расчета доступности пользователя по полному алгоритму
Функция РассчитатьДоступностьПользователяПоПолномуАлгоритму(ТаблицаДоступности, Пользователь,
	ТаблицаЗанятости, ДатаНачала, ДатаОкончания)
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ПараметрыОтбора = Новый Структура("Пользователь, ДеньНедели");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации =
			ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			Занят = СтрокаДоступностьДняИтерации.Занят;
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Пользователь,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, Занят, ДатаНачала, ДатаОкончания);
			
		КонецЦикла;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецФункции

// Вспомогательная функция расчета доступности пользователя по краткому алгоритму
Процедура РассчитатьДоступностьПользователяПоКраткомуАлгоритму(ТаблицаДоступности, Пользователь,
	ЗанятостьПользователя, ДатаНачала, ДатаОкончания, ТаблицаЗанятости)
	
	ТаблицаЗанятостиВременная = СформироватьТаблицуЗанятости();
	
	НачалоДняИтерации = НачалоДня(ДатаНачала);
	КонецДняПоследнейИтерации = КонецДня(ДатаОкончания);
	Пока НачалоДняИтерации < КонецДняПоследнейИтерации Цикл
		
		ТаблицаЗанятостиВременная.Очистить();
		
		ПараметрыОтбора = Новый Структура("Пользователь, ДеньНедели");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.ДеньНедели = ДеньНедели(НачалоДняИтерации);
		ДоступностьДняИтерации =
			ТаблицаДоступности.НайтиСтроки(ПараметрыОтбора);
		
		ДатаНачалаТаблицыЗанятости = Макс(ДатаНачала, НачалоДня(НачалоДняИтерации));
		ДатаОкончанияТаблицыЗанятости = Мин(ДатаОкончания, КонецДня(НачалоДняИтерации));
		НоваяСтрока = ТаблицаЗанятостиВременная.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.ДатаНачала = ДатаНачалаТаблицыЗанятости;
		НоваяСтрока.ДатаОкончания = ДатаОкончанияТаблицыЗанятости;
		НоваяСтрока.Занят = Перечисления.СостоянияЗанятости.Занят;
		
		Для Каждого СтрокаДоступностьДняИтерации Из ДоступностьДняИтерации Цикл
			
			ВремяНачалаСтроки = СтрокаДоступностьДняИтерации.ВремяНачала;
			ВремяОкончанияСтроки = СтрокаДоступностьДняИтерации.ВремяОкончания;
			Если ВремяОкончанияСтроки = Дата("00010101235959") Тогда
				ВремяОкончанияСтроки = Дата("00010102000000");
			КонецЕсли;
			
			ДатаНачалаСтроки = НачалоДняИтерации + (ВремяНачалаСтроки - НачалоДня(ВремяНачалаСтроки));
			ДатаОкончанияСтроки = НачалоДняИтерации + (ВремяОкончанияСтроки - НачалоДня(ВремяНачалаСтроки));
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятостиВременная, Пользователь,
				ДатаНачалаСтроки, ДатаОкончанияСтроки, СтрокаДоступностьДняИтерации.Занят,
				ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости);
			
		КонецЦикла;
		
		ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятостиВременная, ТаблицаЗанятости,
			Пользователь, ДатаНачалаТаблицыЗанятости, ДатаОкончанияТаблицыЗанятости,
			Перечисления.СостоянияЗанятости.Доступен);
		
		// Проверка наличия строки с занятым временем в итоговой временной таблице занятости.
		ПараметрыОтбора = Новый Структура("Занят");
		ПараметрыОтбора.Занят = Перечисления.СостоянияЗанятости.Занят;
		КоличествоСтрокЗанятогоВремени = ТаблицаЗанятостиВременная.НайтиСтроки(ПараметрыОтбора).Количество();
		Если КоличествоСтрокЗанятогоВремени <> 0 Тогда
			ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят;
			Возврат;
		КонецЕсли;
		
		НачалоДняИтерации = НачалоДняИтерации + 86400; // 86400 - число секунд в сутках
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная функция расчета занятости пользователя по краткому алгоритму
Функция РассчитатьЗанятостьПользователяПоКраткомуАлгоритму(ТаблицаЗанятости, Пользователь,
	ЗанятостьПользователя)
	
	РасчетЗанятостиЗавершен = Ложь;
	
	ИтоговаяЗанятостьПользователя = ПолучитьИтоговуюЗанятостьПользователя(
		ТаблицаЗанятости, Пользователь);
	Если ИтоговаяЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят Тогда
		ЗанятостьПользователя = Перечисления.СостоянияЗанятости.Занят;
		РасчетЗанятостиЗавершен = Истина;
	ИначеЕсли ИтоговаяЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
		ЗанятостьПользователя = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат РасчетЗанятостиЗавершен;
	
КонецФункции

// Возвращает итоговую занятость пользователя по таблице занятости
Функция ПолучитьИтоговуюЗанятостьПользователя(ТаблицаЗанятости, Пользователь)
	
	ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Доступен;
	
	ПараметрыОтбора = Новый Структура("Пользователь");
	ПараметрыОтбора.Пользователь = Пользователь;
	МассивЗанятостиПользователя = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиПользователя Из МассивЗанятостиПользователя Цикл
		Если СтрокаЗанятостиПользователя.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.Занят;
			Прервать;
		ИначеЕсли СтрокаЗанятостиПользователя.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			ИтоговаяЗанятость = Перечисления.СостоянияЗанятости.ПодВопросом;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяЗанятость;
	
КонецФункции

// Вносит занятости из таблицы в таблицу занятости
Процедура ВнестиЗанятостиВТаблицуЗанятости(ТаблицаЗанятости, ТаблицаЗанятостиИсточник,
	Пользователь, ДатаНачала, ДатаОкончания, Занят = Неопределено)
	
	Если Занят <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("Пользователь, Занят");
		ПараметрыОтбора.Пользователь = Пользователь;
		ПараметрыОтбора.Занят = Занят;
	Иначе
		ПараметрыОтбора = Новый Структура("Пользователь");
		ПараметрыОтбора.Пользователь = Пользователь;
	КонецЕсли;
	
	МассивЗанятостиПользователя = ТаблицаЗанятостиИсточник.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаЗанятостиПользователя Из МассивЗанятостиПользователя Цикл
		
		ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости, Пользователь,
			СтрокаЗанятостиПользователя.ДатаНачала, СтрокаЗанятостиПользователя.ДатаОкончания,
			СтрокаЗанятостиПользователя.Занят, ДатаНачала, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Вносит занятость в таблицу занятости
Процедура ВнестиЗанятостьВТаблицуЗанятости(ТаблицаЗанятости,
	Пользователь, Знач ДатаНачала, Знач ДатаОкончания, Занят, ДатаНачалаТаблицы, ДатаОкончанияТаблицы)
	
	Если ДатаОкончания <= ДатаНачалаТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала >= ДатаОкончанияТаблицы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаНачала < ДатаНачалаТаблицы Тогда
		ДатаНачала = ДатаНачалаТаблицы;
	КонецЕсли;
	
	Если ДатаОкончания > ДатаОкончанияТаблицы Тогда
		ДатаОкончания = ДатаОкончанияТаблицы;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Пользователь");
	ПараметрыОтбора.Пользователь = Пользователь;
	МассивЗанятости = ТаблицаЗанятости.НайтиСтроки(ПараметрыОтбора);
	СтрокиКУдалению = Новый Массив;
	
	ЗаписьВнесенаВТаблице = Ложь;
	Для Каждого СтрокаЗанятости Из МассивЗанятости Цикл
		
		// Разбиваем существующие строки занятости
		Если СтрокаЗанятости.ДатаНачала < ДатаОкончания
			И СтрокаЗанятости.ДатаОкончания > ДатаНачала
			И СтрокаЗанятости.Занят <> Занят Тогда
			
			Если СтрокаЗанятости.ДатаНачала < ДатаНачала Тогда
				СтрокаЗанятостиПерваяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиПерваяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиПерваяЧасть.ДатаОкончания = ДатаНачала;
			КонецЕсли;
			
			Если СтрокаЗанятости.ДатаОкончания > ДатаОкончания Тогда
				СтрокаЗанятостиВтораяЧасть = ТаблицаЗанятости.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗанятостиВтораяЧасть, СтрокаЗанятости);
				СтрокаЗанятостиВтораяЧасть.ДатаНачала = ДатаОкончания;
			КонецЕсли;
			
			СтрокиКУдалению.Добавить(СтрокаЗанятости);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаЗанятости.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаЗанятости.Добавить();
	НоваяСтрока.Пользователь = Пользователь;
	НоваяСтрока.ДатаНачала = ДатаНачала;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Занят = Занят;
	
	СкорректироватьТаблицуЗанятости(ТаблицаЗанятости);
	
КонецПроцедуры

// Формирует таблицу рекомендаций, содержащую время доступное для всех пользователей.
Функция ПолучитьТаблицуРекомендаций(Знач МассивПользователей,
		ДатаНачала, ДатаОкончания, Длительность, ИсключенияЗанятости = Неопределено) Экспорт
	
	ТаблицаОбщейЗанятости = ПолучитьТаблицуОбщейЗанятости(МассивПользователей, ДатаНачала, ДатаОкончания, ИсключенияЗанятости);
	ТаблицаРекомендаций = ТаблицаОбщейЗанятости.СкопироватьКолонки();
	
	ПараметрыОтбора = Новый Структура("Занят", Перечисления.СостоянияЗанятости.Доступен);
	МассивСвободногоВремени = ТаблицаОбщейЗанятости.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СвободноеВремя Из МассивСвободногоВремени Цикл
		
		Если (ДатаОкончания - ДатаНачала) >= Длительность Тогда
			
			ВнестиЗанятостьВТаблицуЗанятости(ТаблицаРекомендаций, Справочники.Пользователи.ПустаяСсылка(),
				СвободноеВремя.ДатаНачала, СвободноеВремя.ДатаОкончания, СвободноеВремя.Занят,
				ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРекомендаций;
	
КонецФункции

// Корректирует дубли и пересечение в таблице занятости
Процедура СкорректироватьТаблицуЗанятости(ТаблицаЗанятости)
	
	ТребуетсяВнестиКоррективы = Истина;
	
	Пока ТребуетсяВнестиКоррективы Цикл
		
		ТребуетсяВнестиКоррективы = Ложь;
		
		ТаблицаЗанятостиКопия = ТаблицаЗанятости.Скопировать();
		
		ТаблицаЗанятости.Очистить();
		
		Для Каждого СтрокаЗанятости Из ТаблицаЗанятостиКопия Цикл
			
			ВнестиЗаписьВТаблицуЗанятости = Истина;
			
			Для Каждого ВнесеннаяСтрокаЗанятости Из ТаблицаЗанятости Цикл
				
				Если ЗанятостиСовпадают(СтрокаЗанятости, ВнесеннаяСтрокаЗанятости) Тогда
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
				КонецЕсли;
				
				Если СтрокаЗанятости.Пользователь = ВнесеннаяСтрокаЗанятости.Пользователь
					И СтрокаЗанятости.ДатаНачала <= ВнесеннаяСтрокаЗанятости.ДатаОкончания
					И СтрокаЗанятости.ДатаОкончания >= ВнесеннаяСтрокаЗанятости.ДатаНачала
					И СтрокаЗанятости.Занят = ВнесеннаяСтрокаЗанятости.Занят Тогда
					
					ВнесеннаяСтрокаЗанятости.ДатаНачала = Мин(ВнесеннаяСтрокаЗанятости.ДатаНачала, СтрокаЗанятости.ДатаНачала);
					ВнесеннаяСтрокаЗанятости.ДатаОкончания = Макс(ВнесеннаяСтрокаЗанятости.ДатаОкончания, СтрокаЗанятости.ДатаОкончания);
					
					ТребуетсяВнестиКоррективы = Истина;
					ВнестиЗаписьВТаблицуЗанятости = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ВнестиЗаписьВТаблицуЗанятости Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗанятости);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗанятости.Сортировать("Пользователь, ДатаНачала");
	
КонецПроцедуры

// Проверяет совпадение строк занятости
Функция ЗанятостиСовпадают(Занятость1, Занятость2)
	
	Возврат Занятость1.Пользователь = Занятость2.Пользователь
		И Занятость1.ДатаНачала = Занятость2.ДатаНачала
		И Занятость1.ДатаОкончания = Занятость2.ДатаОкончания
		И Занятость1.Занят = Занятость2.Занят;
	
КонецФункции

// Обрабатывает изменение реквизитов предмета
Процедура ОбработатьИзменениеРеквизитовПредмета(Предмет, ПредыдущиеЗначенияРеквизитов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка изменения реквизитов
	ИзменилосьНаименование = ПредыдущиеЗначенияРеквизитов.Наименование <> Предмет.Наименование;
	
	ИзмениласьДата = ПредыдущиеЗначенияРеквизитов.ДатаНачала <> Предмет.ДатаНачала
		ИЛИ ПредыдущиеЗначенияРеквизитов.ДатаОкончания <> Предмет.ДатаОкончания;
	
	ИзмениласьПометкаУдаления =
		ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Предмет.ПометкаУдаления;
	
	Если Не ИзменилосьНаименование И Не ИзмениласьДата И Не ИзмениласьПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмениласьПометкаУдаления Тогда
		
		Если Предмет.ПометкаУдаления Тогда
			УдалитьСвязанныеЗаписиКалендаря(Предмет.Ссылка);
		Иначе
			СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет.Ссылка);
			ОбновитьСостоянияЗаписейКалендаря(Предмет.Ссылка, СостоянияЗаписейКалендаря, Предмет.ДатаНачала, Предмет.ДатаОкончания, Истина);
		КонецЕсли;
		
	Иначе
		
		ПредыдущаяДлительность = ПредыдущиеЗначенияРеквизитов.ДатаОкончания - ПредыдущиеЗначенияРеквизитов.ДатаНачала;
		Длительность = Предмет.ДатаОкончания - Предмет.ДатаНачала;
		ИзмениласьДлительность = ПредыдущаяДлительность <> Длительность;
		
		СвязанныеЗаписиКалендаря =
			РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныеЗаписиКалендаря(Предмет.Ссылка);
		
		ТекстПредставленияИзменения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Изменилось наименование мероприятия %1. Предыдущее содержание записи календаря:'"),
			Формат(ТекущаяДата(), "ДФ='дд.ММ.гг ЧЧ:мм'"));
		ТекстВставкиВНаименование =
			Предмет.Наименование + Символы.ПС + Символы.ПС + ТекстПредставленияИзменения + Символы.ПС;
		
		ЗаполненаДатаВПредмете = ЗначениеЗаполнено(Предмет.ДатаНачала) И ЗначениеЗаполнено(Предмет.ДатаОкончания);
		
		Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
			
			СвязаннаяЗаписьКалендаряОбъект = СвязаннаяЗаписьКалендаря.Ссылка.ПолучитьОбъект();
			СвязаннаяЗаписьКалендаряОбъект.Заблокировать();
			
			Если ИзменилосьНаименование Тогда
				СвязаннаяЗаписьКалендаряОбъект.Описание =
					ТекстВставкиВНаименование + СвязаннаяЗаписьКалендаряОбъект.Описание;
			КонецЕсли;
			
			Если ИзмениласьДата И ЗаполненаДатаВПредмете Тогда
				
				ЗаполненаПредыдущаяДата = ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаНачала)
					И ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаОкончания);
				
				Если ИзмениласьДлительность ИЛИ Не ЗаполненаПредыдущаяДата Тогда
					
					СвязаннаяЗаписьКалендаряОбъект.ДатаНачала = Предмет.ДатаНачала;
					СвязаннаяЗаписьКалендаряОбъект.ДатаОкончания = Предмет.ДатаОкончания;
					
				Иначе
					
					СмещениеДатаНачала = СвязаннаяЗаписьКалендаряОбъект.ДатаНачала - ПредыдущиеЗначенияРеквизитов.ДатаНачала;
					СмещениеДатаОкончания  = СвязаннаяЗаписьКалендаряОбъект.ДатаОкончания - ПредыдущиеЗначенияРеквизитов.ДатаОкончания;
					
					СвязаннаяЗаписьКалендаряОбъект.ДатаНачала = Предмет.ДатаНачала + СмещениеДатаНачала;
					СвязаннаяЗаписьКалендаряОбъект.ДатаОкончания = Предмет.ДатаОкончания + СмещениеДатаНачала;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СвязаннаяЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеЗаписиКалендаряИзПредмета", Истина);
			СвязаннаяЗаписьКалендаряОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаНачала)
		И Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.ДатаОкончания)
		И ЗначениеЗаполнено(Предмет.ДатаНачала)
		И ЗначениеЗаполнено(Предмет.ДатаОкончания)
		И Не Предмет.ПометкаУдаления  Тогда
		СостоянияЗаписейКалендаря = ПолучитьСостоянияЗаписейКалендаря(Предмет.Ссылка);
		ОбновитьСостоянияЗаписейКалендаря(Предмет.Ссылка, СостоянияЗаписейКалендаря, Предмет.ДатаНачала, Предмет.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствующее состояние записи календаря
Функция ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(СостояниеПриглашения)
	
	СостояниеЗаписиРабочегоКалендаря = Неопределено;
	
	Если СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено 
		ИЛИ Не ЗначениеЗаполнено(СостояниеПриглашения) Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	КонецЕсли;
	
	Возврат СостояниеЗаписиРабочегоКалендаря;
	
КонецФункции

// Возвращает соответствующее состояние занятости
Функция ПолучитьСоответствующееСостояниеЗанятости(СостояниеЗаписиРабочегоКалендаря) Экспорт
	
	СостоянияЗанятости = Неопределено;
	
	Если СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.Занят;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.Доступен;
	ИначеЕсли СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
		ИЛИ Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
		СостоянияЗанятости = Перечисления.СостоянияЗанятости.ПодВопросом;
	КонецЕсли;
	
	Возврат СостоянияЗанятости;
	
КонецФункции

// Возвращает состояния записей календаря
Функция ПолучитьСостоянияЗаписейКалендаря(Предмет) Экспорт
	
	ПредыдущиеУчастники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Предмет, Истина);
	СостоянияЗаписейКалендаря = Новый Соответствие;
	
	Для Каждого Участник Из ПредыдущиеУчастники Цикл
		
		Пользователь = Участник.Исполнитель;
		СостояниеЗаписиРабочегоКалендаря =
			ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(Участник.СостояниеПриглашения);
		
		Если Не ЗначениеЗаполнено(Пользователь) Или ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СостояниеЗаписиРабочегоКалендаря) Тогда
			Продолжить;
		КонецЕсли;
		
		СостоянияЗаписейКалендаря.Вставить(Пользователь, СостояниеЗаписиРабочегоКалендаря);
		
	КонецЦикла;
	
	Возврат СостоянияЗаписейКалендаря;
	
КонецФункции

// Возвращает факт изменения состояний записей календаря
Функция СостоянияЗаписейКалендаряИзменились(СостоянияЗаписейКалендаря, ПредыдущиеСостоянияЗаписейКалендаря)
	
	Если СостоянияЗаписейКалендаря.Количество() <> ПредыдущиеСостоянияЗаписейКалендаря.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого СостояниеЗаписиКалендаря Из СостоянияЗаписейКалендаря Цикл
		
		ПредыдущееЗначение = ПредыдущиеСостоянияЗаписейКалендаря[СостояниеЗаписиКалендаря.Ключ];
		
		Если СостояниеЗаписиКалендаря.Значение <> ПредыдущееЗначение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает факт изменения состояний записей календаря
Процедура ОбновитьСостоянияЗаписейКалендаря(Предмет, СостоянияЗаписейКалендаря,
	НоваяДатаНачала = Неопределено, НоваяДатаОкончания = Неопределено, СнятьПометкуУдаления = Ложь,
	ПредыдущиеСостоянияЗаписейКалендаря = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвязанныеЗаписиКалендаря =
		РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныеЗаписиКалендаря(Предмет);
	
	Для Каждого СостояниеЗаписиКалендаря Из СостоянияЗаписейКалендаря Цикл
		НайденнаяСтрока = СвязанныеЗаписиКалендаря.Найти(СостояниеЗаписиКалендаря.Ключ, "Пользователь");
		Если НайденнаяСтрока = Неопределено Тогда
			СоздатьСвязаннуюЗаписьКалендаря(
				Предмет, СостояниеЗаписиКалендаря.Ключ, СостояниеЗаписиКалендаря.Значение, НоваяДатаНачала, НоваяДатаОкончания);
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
		НовоеСостояниеЗаписиКалендаря = СостоянияЗаписейКалендаря[СвязаннаяЗаписьКалендаря.Пользователь];
		Если НовоеСостояниеЗаписиКалендаря = Неопределено Тогда
			НовоеСостояниеЗаписиКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
			СнятьПометкуУдаления = Ложь;
		КонецЕсли;
		
		Если ПредыдущиеСостоянияЗаписейКалендаря <> Неопределено И Не СнятьПометкуУдаления Тогда
			ПредыдущееСостояниеЗаписиКалендаря = ПредыдущиеСостоянияЗаписейКалендаря[СвязаннаяЗаписьКалендаря.Пользователь];
			Если ПредыдущееСостояниеЗаписиКалендаря <> Неопределено
				И НовоеСостояниеЗаписиКалендаря = ПредыдущееСостояниеЗаписиКалендаря Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСвязаннуюЗаписьКалендаря(СвязаннаяЗаписьКалендаря.Ссылка,
			НовоеСостояниеЗаписиКалендаря, СнятьПометкуУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

// Помечает на удаление все связанные с предметом записи календаря
//
// Параметры:
//  Предмет - СправочникСсылка.Мероприятия - Предмет, связанные записи календаря
//                                           по которому следует пометить на удаление
//
Процедура УдалитьСвязанныеЗаписиКалендаря(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвязанныеЗаписиКалендаря =
		РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныеЗаписиКалендаря(Предмет);
	
	Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
		
		ЗаписьКалендаряОбъект = СвязаннаяЗаписьКалендаря.Ссылка.ПолучитьОбъект();
		ЗаписьКалендаряОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает связанную запись календаря
Процедура СоздатьСвязаннуюЗаписьКалендаря(Предмет, Пользователь, Состояние, НоваяДатаНачала = Неопределено, НоваяДатаОкончания = Неопределено)
	
	Если (Не ЗначениеЗаполнено(Предмет.ДатаНачала) Или Не ЗначениеЗаполнено(Предмет.ДатаОкончания))
		И (Не ЗначениеЗаполнено(НоваяДатаНачала) Или Не ЗначениеЗаполнено(НоваяДатаОкончания)) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("Предмет, ДатаНачала, ДатаОкончания");
	СтруктураОснование.Предмет = Предмет;
	СтруктураОснование.ДатаНачала = НоваяДатаНачала;
	СтруктураОснование.ДатаОкончания = НоваяДатаОкончания;
	
	НоваяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.СоздатьЭлемент();
	НоваяЗаписьКалендаря.Заполнить(СтруктураОснование);
	НоваяЗаписьКалендаря.Пользователь = Пользователь;
	НоваяЗаписьКалендаря.Состояние = Состояние;
	Если НоваяЗаписьКалендаря.ДатаНачала >= НоваяЗаписьКалендаря.ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	НоваяЗаписьКалендаря.Записать();
	
	РегистрыСведений.СвязанныеЗаписиКалендаря.СоздатьСвязаннуюЗаписьКалендаря(
		Предмет, Пользователь, НоваяЗаписьКалендаря.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Предмет);
	ОбновитьРабочуюГруппуСвязаннойЗаписиКалендаря(Предмет, ТаблицаРабочейГруппы, НоваяЗаписьКалендаря.Ссылка)
	
КонецПроцедуры

// Обновляет состояние связанной записи
Процедура ОбновитьСвязаннуюЗаписьКалендаря(ЗаписьКалендаря, НовоеСостояние, СнятьПометкуУдаления = Ложь)
	
	ЗаписьКалендаряОбъект = ЗаписьКалендаря.ПолучитьОбъект();
	
	// Если состояние не изменилось то перезапись не производим
	Если ЗаписьКалендаряОбъект.Состояние = НовоеСостояние
		И (Не СнятьПометкуУдаления Или Не ЗаписьКалендаряОбъект.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьКалендаряОбъект.Заблокировать();
	ЗаписьКалендаряОбъект.Состояние = НовоеСостояние;
	ЗаписьКалендаряОбъект.ДополнительныеСвойства.Вставить("ИзменениеЗаписиКалендаряИзПредмета", Истина);
	
	// Снятие пометка удаления в случае если новое состояние ПодВопросом или Принято
	Если ЗаписьКалендаряОбъект.ПометкаУдаления
		И (СнятьПометкуУдаления
			ИЛИ НовоеСостояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом
			ИЛИ НовоеСостояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято) Тогда
		
		ЗаписьКалендаряОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли;
	
	ЗаписьКалендаряОбъект.Записать();
	
КонецПроцедуры

// Обновляет рабочие группы связанных записей календаря с предметом
Процедура ОбновитьРабочиеГруппыСвязанныхЗаписейКалендаря(Предмет, ТаблицаРабочейГруппы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СвязанныеЗаписиКалендаря =
		РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныеЗаписиКалендаря(Предмет);
	
	Для Каждого СвязаннаяЗаписьКалендаря Из СвязанныеЗаписиКалендаря Цикл
		
		ОбновитьРабочуюГруппуСвязаннойЗаписиКалендаря(Предмет, ТаблицаРабочейГруппы, СвязаннаяЗаписьКалендаря.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

// Обновляет рабочие группы связанных записей календаря с предметом
Процедура ОбновитьРабочуюГруппуСвязаннойЗаписиКалендаря(Предмет, ТаблицаРабочейГруппы, СвязаннаяЗаписьКалендаря) Экспорт
	
	ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СвязаннаяЗаписьКалендаря);
	ТаблицаНабора.Индексы.Добавить("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
	
	СтруктураПоиска = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
	ИзмененСоставСтрок = Ложь;
	
	// Добавляем участников рабочей группы мероприятия, которых нет в рабочей группе записи календаря.
	Для каждого РабочаяГруппаСтрока Из ТаблицаРабочейГруппы Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, РабочаяГруппаСтрока);
		
		НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИзмененСоставСтрок = Истина;
			ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), РабочаяГруппаСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем участников рабочей группы записи календаря, которых нет в рабочей группе мероприятия.
	УдаляемыеСтроки = Новый Массив;
	Для каждого НаборСтрока Из ТаблицаНабора Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НаборСтрока);
		
		НайденныеСтроки = ТаблицаРабочейГруппы.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИзмененСоставСтрок = Истина;
			УдаляемыеСтроки.Добавить(НаборСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаНабора.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ИзмененСоставСтрок Тогда
		
		РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(
			СвязаннаяЗаписьКалендаря,
			ТаблицаНабора,
			Истина); // Обновить права
		
	КонецЕсли;
	
КонецПроцедуры

// Сортирует таблицу значений по полю занятости
Процедура СортироватьПоСостояниюЗанятости(ТаблицаЗанятости,
	ДополнительноеНаправлениеСортировки = "", ДополнительнаяСортировка = "") Экспорт
	
	Если ЗначениеЗаполнено(ДополнительноеНаправлениеСортировки) Тогда
		ДополнительноеНаправлениеСортировки = " " + ДополнительноеНаправлениеСортировки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительнаяСортировка) Тогда
		ДополнительнаяСортировка = ", " + ДополнительнаяСортировка;
	КонецЕсли;
	
	ТаблицаЗанятости.Колонки.Добавить("ИндексСортировки");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗанятости Цикл
		
		Если СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Занят Тогда
			СтрокаТаблицы.ИндексСортировки = 2;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.ПодВопросом Тогда
			СтрокаТаблицы.ИндексСортировки = 1;
		ИначеЕсли СтрокаТаблицы.Занят = Перечисления.СостоянияЗанятости.Доступен Тогда
			СтрокаТаблицы.ИндексСортировки = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеСортировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ИндексСортировки%1%2",
		ДополнительноеНаправлениеСортировки,
		ДополнительнаяСортировка);
	
	ТаблицаЗанятости.Сортировать(ЗначениеСортировки);
	
	ТаблицаЗанятости.Колонки.Удалить("ИндексСортировки");
	
КонецПроцедуры

#КонецОбласти