
////////////////////////////////////////////////////////////////////////////////
// Шаблоны бизнес процессов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает заголовочную часть сводки по шаблону
// Параметры:
//		Ссылка - ссылка на шаблон бизнес-процесса
// Возвращает:
//		Строка с описанием типа процесса, наименованием шаблона и комментарием к шаблону
Функция ПолучитьОбщуюЧастьОписанияШаблона(Ссылка) Экспорт
	
	Результат = "";
	
	Результат = Результат 
		+ НСтр("ru = 'Шаблон процесса: '") 
		+ Метаданные.БизнесПроцессы[ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ИмяПроцесса(Ссылка)].Синоним
		+ Символы.ПС;
	
	Если ЗначениеЗаполнено(Ссылка.Наименование) Тогда
		Результат = Результат + НСтр("ru = 'Наименование шаблона: '") + Ссылка.Наименование + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Комментарий) Тогда
		Результат = Результат + НСтр("ru = 'Комментарий: '") + Ссылка.Комментарий + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьШаблоныПоДокументу(Документ, Тип, ТолькоНастроенные = Истина) Экспорт
	
	ШаблоныПоДокументу = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат ШаблоныПоДокументу;
	КонецЕсли;	
	
	Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ВходящиеДокументы") 
		И ТипЗнч(Документ) <> Тип("СправочникСсылка.ИсходящиеДокументы") 
		И ТипЗнч(Документ) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Возврат ШаблоныПоДокументу;
		
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Документ, "ВидДокумента, Организация");
	ВидДокумента = РеквизитыДокумента.ВидДокумента;
	Организация = РеквизитыДокумента.Организация;
	
	Запрос = Новый Запрос;
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления" 	
		Или Тип = "ШаблоныПоручения"
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ВидДокумента = &ВидДокумента
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник." + Тип + ")";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ВидДокумента = &ВидДокумента
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник.ШаблоныСоставныхБизнесПроцессов)
		|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ТипШаблона = &ТипШаблона";
		Запрос.УстановитьПараметр("ТипШаблона", Тип);
		
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация = &Организация ";
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		КонецЕсли;	
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоДокументу.Количество() = 0 Тогда
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления" 	
			Или Тип = "ШаблоныПоручения"
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов"
			Или Тип = "ШаблоныУтверждения" Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник." + Тип + " КАК Шаблоны
			|ГДЕ
			|	НЕ Шаблоны.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
			|	И НЕ ШаблоныСоставныхБизнесПроцессов.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)";
			
			Запрос.УстановитьПараметр("ТипШаблона", Тип);
		КонецЕсли;
		
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Документ, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ШаблоныПоДокументу;
	
КонецФункции 	

Функция ДоступностьПоШаблону(Объект) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	БизнесПроцесс = Объект.Ссылка;
	Шаблон = Объект.Шаблон;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ПредметыДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") 
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ЗначениеЗаполнено(БизнесПроцесс) И ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда 
			ВедущаяЗадачаОбъект = Объект.ВедущаяЗадача.ПолучитьОбъект();
			Если ВедущаяЗадачаОбъект <> Неопределено Тогда
				БизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВедущаяЗадача, "БизнесПроцесс");
				Шаблон = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцесс, "Шаблон");
				ПредметыДокументы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс, ТипыДокументов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ПредметыДокументы.Количество() = 0 Тогда    
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеДанные.ВидДокумента,
		|	ВсеДанные.Организация
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВнутренниеДокументы.ВидДокумента КАК ВидДокумента,
		|		ВнутренниеДокументы.Организация КАК Организация
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВходящиеДокументы.ВидДокумента,
		|		ВходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ссылка В(&ПредметыДокументы)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсходящиеДокументы.ВидДокумента,
		|		ИсходящиеДокументы.Организация
		|	ИЗ
		|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|	ГДЕ
		|		ИсходящиеДокументы.Ссылка В(&ПредметыДокументы)) КАК ВсеДанные";
	
	Запрос.УстановитьПараметр("ПредметыДокументы", ПредметыДокументы);
	
	Результат = Запрос.Выполнить();
	
	ВидыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ВидДокумента В (&ВидыДокументов)
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон";
	
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + " И НастройкаШаблоновБизнесПроцессов.Организация В (&Организации)";
		Запрос.УстановитьПараметр("Организации", Организации);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Организации = Новый Массив;
			Организации.Добавить(Справочники.Организации.ПустаяСсылка());
			Запрос.УстановитьПараметр("Организации", Организации);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ЕстьЗапрещеноИзменение = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗапрещеноИзменение Тогда 
			ЕстьЗапрещеноИзменение = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьЗапрещеноИзменение Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции	

Процедура ЗаполнитьПоШаблонуСоставногоБизнесПроцесса(Шаблон, БизнесПроцесс) Экспорт
	
	Если Шаблон.ШаблонВКомплексномПроцессе И ЗначениеЗаполнено(Шаблон.ИсходныйШаблон) Тогда
		БизнесПроцесс.Шаблон = Шаблон.ИсходныйШаблон;
	ИначеЕсли НЕ Шаблон.ШаблонВКомплексномПроцессе Тогда
		БизнесПроцесс.Шаблон = Шаблон;
	КонецЕсли;
	Если ЗначениеЗаполнено(Шаблон.НаименованиеБизнесПроцесса) Тогда 
		БизнесПроцесс.Наименование = Шаблон.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(БизнесПроцесс.Наименование), БизнесПроцесс.Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И Шаблон.ДобавлятьНаименованиеПредмета Тогда
			БизнесПроцесс.Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Шаблон.Автор) Тогда 
		БизнесПроцесс.Автор = Шаблон.Автор;
	КонецЕсли;
	
	МДРеквизиты = БизнесПроцесс.Метаданные().Реквизиты;
	Для Каждого Строка Из Шаблон.Шаблоны Цикл
		МДРеквизит = МДРеквизиты.Найти(Строка.Реквизит);
		Если МДРеквизит <> Неопределено Тогда 
			БизнесПроцесс[МДРеквизит.Имя] = Строка.Шаблон;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает имя процесса, которое будет установлено в случае, если в шаблоне оно не указано
Функция НаименованиеПроцессаПоУмолчанию(ИмяСправочника, Шаблон = Неопределено) Экспорт
	
	ИмяПроцесса = "";
	
	Если ИмяСправочника = "ШаблоныИсполнения" Тогда
		ИмяПроцесса = НСтр("ru = 'Исполнить '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныКомплексныхБизнесПроцессов" Тогда
		ИмяПроцесса = НСтр("ru = 'Обработка '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныОзнакомления" Тогда
		ИмяПроцесса = НСтр("ru = 'Ознакомиться '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныПоручения" Тогда
		ИмяПроцесса = НСтр("ru = 'Выполнить '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныПриглашения" Тогда
		ИмяПроцесса = НСтр("ru = 'Принять участие '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРассмотрения" Тогда
		ИмяПроцесса = НСтр("ru = 'Рассмотреть '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныРегистрации" Тогда
		ИмяПроцесса = НСтр("ru = 'Зарегистрировать '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныСогласования" Тогда
		ИмяПроцесса = НСтр("ru = 'Согласовать '");
		
	ИначеЕсли ИмяСправочника = "ШаблоныСоставныхБизнесПроцессов" Тогда
		
		Если Шаблон <> Неопределено Тогда
			
			ТипШаблона = Шаблон.ТипШаблона;
			
			Если ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка внутреннего '");
				
			ИначеЕсли ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка входящего '");
				
			ИначеЕсли ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
				ИмяПроцесса = НСтр("ru = 'Обработка исходящего '");
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "ШаблоныУтверждения" Тогда
		ИмяПроцесса =  НСтр("ru = 'Утвердить '");
	КонецЕсли;
	
	Возврат ИмяПроцесса;
	
КонецФункции

// Выполняет начальное заполнение
Процедура НачальноеЗаполнениеШаблона(Шаблон, ДанныеЗаполнения) Экспорт
	
	МетаданныеШаблона = Шаблон.Метаданные();
	РеквизитыШаблона = МетаданныеШаблона.Реквизиты;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ТипШаблона") Тогда
		Шаблон.ТипШаблона = ДанныеЗаполнения.ТипШаблона;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("НаименованиеБизнесПроцесса") <> Неопределено Тогда
		Шаблон.НаименованиеБизнесПроцесса = НаименованиеПроцессаПоУмолчанию(МетаданныеШаблона.Имя, Шаблон);
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
		Шаблон.ДобавлятьНаименованиеПредмета = Истина;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("Важность") <> Неопределено Тогда
		Шаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Шаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуПроцессаПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ШаблонБизнесПроцесса).ИмяПроцесса(ШаблонБизнесПроцесса);
	Возврат БизнесПроцессы[ИмяТипаПроцесса].ПустаяСсылка();
		
КонецФункции

// Заполняет шаблон параметрами.
//
// Параметры:
//  Шаблон  - СправочникОбъект.Шаблон<Процесса> - шаблон-объект, который требуется заполнить.
//  ПараметрыШаблона  - Структура - представляет собой структуру шаблона процесса.
//                                  Структура определяется соотвествующей процедурой менеджера шаблона процесса.
//
Процедура ЗаполнитьШаблон(Шаблон, ПараметрыШаблона) Экспорт
	
	Шаблон.Заполнить(Новый Структура);
	ЗаполнитьЗначенияСвойств(Шаблон, ПараметрыШаблона,,"Предметы");
	
	// Определений действий (точки маршрута) процесса
	ИмяПроцесса = Справочники[Шаблон.Метаданные().Имя].ИмяПроцесса(Шаблон);
	ДействияПроцесса = БизнесПроцессы[ИмяПроцесса].ТочкиМаршрута;
	
	// Заполнение табличных частей Предметы и ПредметыЗадач шаблона процесса
	Для Каждого Предмет Из ПараметрыШаблона.Предметы Цикл
		
		НоваяСтрокаПредмет = Шаблон.Предметы.Добавить();
		НоваяСтрокаПредмет.РольПредмета = Предмет.РольПредмета;
		НоваяСтрокаПредмет.ИмяПредмета = МультипредметностьВызовСервера.
			ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредмета);
			
		Если ЗначениеЗаполнено(Предмет.ИмяПредметаОснование) Тогда
			НоваяСтрокаПредмет.ИмяПредметаОснование = МультипредметностьВызовСервера.
				ПолучитьСсылкуНаИмяПредмета(Предмет.ИмяПредметаОснование);
		КонецЕсли;
		
		Для Каждого Действие Из ДействияПроцесса Цикл
			НоваяСтрока = Шаблон.ПредметыЗадач.Добавить();
			НоваяСтрока.ТочкаМаршрута = Действие;
			НоваяСтрока.ИмяПредмета = НоваяСтрокаПредмет.ИмяПредмета;
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый") 
				И Действие = Предмет.ТочкаМаршрута Тогда
				НоваяСтрока.ОбязательноеЗаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение рабочей группы шаблона процесса
	РабочаяГруппаДобавить = Новый Массив;
	Для Каждого Участник Из ПараметрыШаблона.РабочаяГруппа Цикл
		
		СтруктураУчастникаРабГруппы = Новый Структура;
		СтруктураУчастникаРабГруппы.Вставить("Участник", Участник.Участник);
		СтруктураУчастникаРабГруппы.Вставить(
			"ОсновнойОбъектАдресации", Участник.ОсновнойОбъектАдресации);
			СтруктураУчастникаРабГруппы.Вставить(
			"ДополнительныйОбъектАдресации", Участник.ДополнительныйОбъектАдресации);
		
		РабочаяГруппаДобавить.Добавить(СтруктураУчастникаРабГруппы);
		
	КонецЦикла;
	
	Шаблон.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_АвтоПодстановкиДляПроцессов

// Возвращает список значений доступных функций автоподстановки исполнителей процессов
//
// Параметры:
//   ИменаПредметовДляФункций - массив - массив имен предметов для функций автоподстановки
//   ВключатьНедоступные - булево - признак добавления в список недоступных функций автоподстановки
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьСписокДоступныхФункций(ИменаПредметовДляФункций = Неопределено, ВключатьНедоступные = Истина) Экспорт
	
	ДоступныеФункции = ШаблоныБизнесПроцессовПереопределяемый.ПолучитьСписокДоступныхФункций(
		ИменаПредметовДляФункций);
	
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторБизнесПроцесса(Объект)", 							 НСтр("ru = 'Автор процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораБизнесПроцесса(Объект)", НСтр("ru = 'Непосредственный руководитель автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораБизнесПроцесса(Объект)", 			 НСтр("ru = 'Все руководители автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораБизнесПроцесса(Объект)", 				 НСтр("ru = 'Все подчиненные автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораБизнесПроцесса(Объект)", 				 	 НСтр("ru = 'Все коллеги автора процесса'"));
	
	Если ИменаПредметовДляФункций <> Неопределено Тогда
		Если ИменаПредметовДляФункций.Количество() > 0 Тогда
			Для Каждого ИмяПредмета Из ИменаПредметовДляФункций Цикл
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторДокумента(Объект, ИмяПредмета)", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Автор документа'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель автора документа'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители автора документа'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные автора документа'"),Строка(ИмяПредмета)));
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораДокумента(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги автора документа'"),Строка(ИмяПредмета)));
				
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ОтветственныйЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Ответственный за документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель ответственного за документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители ответственного за документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные ответственного за документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги ответственного за документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеСогласовавшиеДокумент(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все согласовавшие документ'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОрганизации(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Руководитель организации'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АдресатДокумента(Объект, ИмяПредмета)", 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Адресат документа'"),Строка(ИмяПредмета)));	
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.УчастникиМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Участники мероприятия'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПредседательМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Председатель мероприятия'"),Строка(ИмяПредмета)));
					
				ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.СекретарьМероприятия(Объект, ИмяПредмета)",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Секретарь мероприятия'"),Строка(ИмяПредмета)));
					
			КонецЦикла;
		ИначеЕсли ВключатьНедоступные Тогда
			СтрокаИмениПредмета = НСтр("ru='Предмет'");
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторДокумента(Объект, ИмяПредмета)", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Автор документа'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораДокумента(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель автора документа'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиАвтораДокумента(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители автора документа'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеАвтораДокумента(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные автора документа'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиАвтораДокумента(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги автора документа'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ОтветственныйЗаДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Ответственный за документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительОтветственногоЗаДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Непосредственный руководитель ответственного за документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все руководители ответственного за документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПодчиненныеОтветственногоЗаДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все подчиненные ответственного за документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеКоллегиОтветственногоЗаДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все коллеги ответственного за документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеСогласовавшиеДокумент(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Все согласовавшие документ'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.РуководительОрганизации(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Руководитель организации'"),СтрокаИмениПредмета), Истина);
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АдресатДокумента(Объект, ИмяПредмета)", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Адресат документа'"),СтрокаИмениПредмета), Истина);	
				
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.УчастникиМероприятия(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Участники мероприятия'"),СтрокаИмениПредмета), Истина);
			
			ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПредседательМероприятия(Объект, ИмяПредмета)",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1.Председатель мероприятия'"),СтрокаИмениПредмета), Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеРуководителиПредприятия(Объект)", 			 НСтр("ru = 'Все руководители предприятия'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ВсеПользователиИнформационнойБазы(Объект)", 	 НСтр("ru = 'Все пользователи информационной базы'"));
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает значение автоподстановки для процесса
//
// Параметры:
//	Автоподстановка - Строка - представление автоподстановки в виде строки
//	Объект - БизнесПроцессОбъект.<Тип бизнес-процесса> - процесс объект,
//           для которого вычисляется автоподстановка.
//
// Возвращаемое значение:
//   СправчоникСсылка.Пользователи
//   Массив
//     СправчоникСсылка.Пользователи.
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, Объект) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	СписокФункций = ПолучитьСписокДоступныхФункций(ИменаПредметов);
	
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда 
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			ИмяПредмета = Мультипредметность.ПолучитьИмяПредметаПоФункцииАвтоподстановки(Автоподстановка);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ФункцияАвтоподстановки = "" Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена автоподстановка %1'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РезультатФункции = Неопределено;
	Попытка
		Выполнить("РезультатФункции = " + ФункцияАвтоподстановки);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(РезультатФункции)) Или
		 (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(РезультатФункции)) Или
		 (ТипЗнч(РезультатФункции) = Тип("Структура")) Или
		 (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0) Тогда 
		Возврат РезультатФункции;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдены исполнители для автоподстановки ""%1"".
					|Обратитесь к администратору.'"),
			Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_АвтоПодстановкиДляПроцессов

///////////////////////////////////////
// Общие автоподстановки

// Возвращает всех руководителей предприятия
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиПредприятия(БизнесПроцессОбъект) Экспорт 
	
	МассивРуководителей = Новый Массив;
	
	Выборка = Справочники.СтруктураПредприятия.Выбрать();
	Пока Выборка.Следующий() Цикл
		Руководитель = Выборка.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Не Руководитель.Недействителен Тогда 
			Если МассивРуководителей.Найти(Руководитель) = Неопределено Тогда 
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех пользователей информационной базы
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПользователиИнформационнойБазы(БизнесПроцессОбъект) Экспорт 
	
	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда 
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда 
				МассивПользователей.Добавить(Выборка.Ссылка);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивПользователей;
	
КонецФункции	

///////////////////////////////////////
// Автоподстановки для процессов

// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АвторБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Возврат БизнесПроцессОбъект.Автор;

КонецФункции

// Возвращает непосредственного руководителя процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт 
	
	АвторБизнесПроцесса = БизнесПроцессОбъект.Автор;
		
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователях.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
	
	Если Руководитель <> АвторБизнесПроцесса Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> АвторБизнесПроцесса Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции	

// Возвращает всех руководителей атвора процесса с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	АвторБизнесПроцесса = БизнесПроцессОбъект.Автор;
	МассивРуководителей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> АвторБизнесПроцесса Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
		
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных автора процесса с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	
	Запрос.УстановитьПараметр("Руководитель", БизнесПроцессОбъект.Автор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает всех коллег автора процесса, в том числе и руководителя
// автора процесса.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиАвтораБизнесПроцесса(БизнесПроцессОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователях.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователях.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователях.Подразделение
		|ГДЕ
		|	СведенияОПользователях.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователях.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", БизнесПроцессОбъект.Автор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

///////////////////////////////////////
// Автоподстановки для документов

// Возвращает автора документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АвторДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
	
		Возврат СтрокаПредмета.Предмет.Подготовил;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
			
	КонецЕсли;
		
КонецФункции

// Возвращает адресата документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция АдресатДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
		ЕстьАдресат = Ложь;
		Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
			ЕстьАдресат = Истина;
		ИначеЕсли ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ЕстьАдресат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "ВидДокумента.ВестиУчетПоАдресатам");
		КонецЕсли;	
		
		Если Не ЕстьАдресат Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
	
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Адресат");
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
			
	КонецЕсли;
		
КонецФункции

// Возвращает непосредственного руководителя автора документа
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Подготовил");
		
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователях.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
		
	Если Руководитель <> АвторДокумента Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> АвторДокумента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции	

// Возвращает всех руководителей автора документа с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивРуководителей = Новый Массив;
	АвторДокумента = СтрокаПредмета.Предмет.Подготовил;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> АвторДокумента Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
		
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных автора документа с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = СтрокаПредмета.Предмет.Подготовил;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	Запрос.УстановитьПараметр("Руководитель", АвторДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает всех коллег автора документа, в том числе и руководителя
// автора документа.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиАвтораДокумента(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	АвторДокумента = СтрокаПредмета.Предмет.Подготовил;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователях.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователях.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователях.Подразделение
		|ГДЕ
		|	СведенияОПользователях.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователях.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", АвторДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции	

// Возвращает ответсвенного за документ
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция ОтветственныйЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Или 
		 ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Или 
		 ТипЗнч(СтрокаПредмета.Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
		
		Возврат СтрокаПредмета.Предмет.Ответственный;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

// Возвращает непосредственного руководителя ответственного за документ
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращает автора процесса
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса>
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция НепосредственныйРуководительОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПредмета.Предмет, "Ответственный");
		
	Руководитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Родитель,
		|	СтруктураПредприятия.Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СведенияОПользователях.Подразделение = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Подразделение = Выборка.Подразделение;
	Родитель = Выборка.Родитель;
	Руководитель = Выборка.Руководитель;
		
	Если Руководитель <> Ответственный Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	Пока Родитель <> Неопределено Цикл
		Подразделение = Родитель;
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Родитель, Руководитель");
		Родитель = РеквизитыПодразделения.Родитель;
		Руководитель = РеквизитыПодразделения.Руководитель;
		
		Если Руководитель <> Ответственный Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции

// Возвращает всех руководителей ответственного за документ с учетом
// иерархии подразделений.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеРуководителиОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивРуководителей = Новый Массив;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивРуководителей;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Подразделение = Выборка.Подразделение;
	
	Пока ЗначениеЗаполнено(Подразделение) Цикл
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Подразделение, "Руководитель, Руководитель.Недействителен, Родитель");
		
		Руководитель = РеквизитыПодразделения.Руководитель;
		Если ЗначениеЗаполнено(Руководитель) И Руководитель <> Ответственный Тогда
			Если НЕ РеквизитыПодразделения.РуководительНедействителен Тогда
				МассивРуководителей.Добавить(Руководитель);
			КонецЕсли;
		КонецЕсли;
		Подразделение = РеквизитыПодразделения.Родитель;
	КонецЦикла;
	
	Возврат МассивРуководителей;
	
КонецФункции

// Возвращает всех подчиненных ответственного за документ с учетом иерархии подразделений
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеПодчиненныеОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодчиненностьСотрудников.Подчиненный КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|ГДЕ
		|	ПодчиненностьСотрудников.Руководитель = &Руководитель
		|	И ПодчиненностьСотрудников.Подчиненный <> ПодчиненностьСотрудников.Руководитель
		|	И НЕ ПодчиненностьСотрудников.Подчиненный.Недействителен";
	Запрос.УстановитьПараметр("Руководитель", Ответственный);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Возвращает всех коллег ответственного за документ, в том числе и руководителя
// автора документа.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеКоллегиОтветственногоЗаДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	Ответственный = СтрокаПредмета.Предмет.Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОПользователях.Подразделение
		|ПОМЕСТИТЬ ПодразделениеПользователя
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОПользователях.Пользователь КАК Пользователь
		|ИЗ
		|	ПодразделениеПользователя КАК ПодразделениеПользователя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО ПодразделениеПользователя.Подразделение = СведенияОПользователях.Подразделение
		|ГДЕ
		|	СведенияОПользователях.Пользователь <> &Пользователь
		|	И НЕ СведенияОПользователях.Пользователь.Недействителен";
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Возвращает руководителя организации по документу.
// Если включена настройка ИспользоватьУчетПоОрганизациям, то руководитель
// вычисляется по организации указанной в документе, иначе по регистру
// ОтветственныеЛицаОрганизаций.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция РуководительОрганизации(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Возврат Константы.РуководительПредприятия.Получить();
	КонецЕсли;
		
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы")
	   И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы")
	   И ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		 Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;  
	
	Организация = СтрокаПредмета.Предмет.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
	
	Отбор = Новый Структура("Организация, ОтветственноеЛицо", Организация, ОтветственноеЛицо);
	Возврат РегистрыСведений.ОтветственныеЛицаОрганизаций.
		ПолучитьПоследнее(БизнесПроцессОбъект.Дата, Отбор).Пользователь;
	
КонецФункции

// Возвращает всех пользователей согласовавших документ.
// Если включена настройка ИспользоватьВизыСогласования, то пользователи определяются
// по активным визам согласования, иначе по последним результатам задач процессов
// согласования.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция ВсеСогласовавшиеДокумент(БизнесПроцессОбъект, ИмяПредмета) Экспорт
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ИсходящиеДокументы") И
			ТипЗнч(СтрокаПредмета.Предмет) <> Тип("СправочникСсылка.ВнутренниеДокументы") Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена для предмета ""%1"" процесса.'"),
				Строка(ИмяПредмета)); 
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	СогласовавшиеДокумент = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда
		
		ВизыСогласованияДокумента = 
			РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(СтрокаПредмета.Предмет);
			
		СогласовавшиеДокумент = ВизыСогласованияДокумента.ВыгрузитьКолонку("Исполнитель");
		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Исполнитель,
			|	ЗадачаИсполнителя.Ссылка,
			|	ЗадачаИсполнителя.ДатаИсполнения
			|ПОМЕСТИТЬ ЗадачиСогласованияПоДокументу
			|ИЗ
			|	БизнесПроцесс.Согласование.Предметы КАК СогласованиеПредметы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО СогласованиеПредметы.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
			|ГДЕ
			|	СогласованиеПредметы.Предмет = &Предмет
			|	И ЗадачаИсполнителя.Выполнена = ИСТИНА
			|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Согласование.ТочкаМаршрута.Согласовать)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачиСогласованияПоДокументу.Исполнитель,
			|	МАКСИМУМ(ЗадачиСогласованияПоДокументу.ДатаИсполнения) КАК ДатаИсполнения
			|ПОМЕСТИТЬ ДатыПоследнихОтветов
			|ИЗ
			|	ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиСогласованияПоДокументу.Исполнитель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачиСогласованияПоДокументу.Исполнитель
			|ИЗ
			|	ДатыПоследнихОтветов КАК ДатыПоследнихОтветов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачиСогласованияПоДокументу КАК ЗадачиСогласованияПоДокументу
			|		ПО ДатыПоследнихОтветов.Исполнитель = ЗадачиСогласованияПоДокументу.Исполнитель
			|			И ДатыПоследнихОтветов.ДатаИсполнения = ЗадачиСогласованияПоДокументу.ДатаИсполнения";
		Запрос.УстановитьПараметр("Предмет", СтрокаПредмета.Предмет);
		
		СогласовавшиеДокумент = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
	КонецЕсли;
	
	Возврат СогласовавшиеДокумент;
	
КонецФункции	

///////////////////////////////////////
// Автоподстановки для мероприятий

// Возвращает всех участников мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   Массив
//     - СправочникСсылка.Пользователи
//
Функция УчастникиМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	Для Каждого Строка Из Участники Цикл
		МассивУчастников.Добавить(Строка.Исполнитель);
	КонецЦикла;	
	
	Возврат МассивУчастников;
	
КонецФункции

// Возвращает председателя мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция ПредседательМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
		
	Возврат Мероприятие.Председатель;
	
КонецФункции

// Возвращает секретаря мероприятия.
//
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//                         вычисляется автоподстановка
//   ИмяПредмета - СправочникСсылка.ИменаПредметов - имя предмета в процессе
//
// Возвращаемое значение:
//   СправочникСсылка.Пользователи
//
Функция СекретарьМероприятия(БизнесПроцессОбъект, ИмяПредмета) Экспорт 
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета,"ИмяПредмета");
	
	Мероприятие = "";
	
	Если СтрокаПредмета <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса.'"),
				Строка(ИмяПредмета));
		КонецЕсли;	
		
		Если Не УправлениеМероприятиями.ЭтоМероприятие(СтрокаПредмета.Предмет, Мероприятие) И
			 Не УправлениеМероприятиями.ЭтоМатериалМероприятия(СтрокаПредмета.Предмет, Мероприятие) Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" не является мероприятием или материалом мероприятия.'"),
				Строка(ИмяПредмета));
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса.'"),
			Строка(ИмяПредмета));
		
	КонецЕсли;
		
	Возврат Мероприятие.Секретарь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УстановкаПравНаШаблоны

Процедура ЗаполнитьДескрипторДоступа(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДоступа.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДоступа.ВладелецШаблона) = 
			Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		ДескрипторДоступа.ВладелецОбъекта = ОбъектДоступа.ВладелецШаблона;
		
	ИначеЕсли ТипЗнч(ОбъектДоступа.ВладелецШаблона) = 
			Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		ДескрипторДоступа.ДескрипторВладельца = 
			РегистрыСведений.ДескрипторыДоступаДляОбъектов.НайтиДескрипторДляОбъекта(
				ОбъектДоступа.ВладелецШаблона);
			
	Иначе
		
		// Ответственный
		Если Не ОбъектДоступа.Ссылка.ШаблонВКомплексномПроцессе Тогда
			ДескрипторДоступа.ДобавитьПользователя("Ответственный", ОбъектДоступа.Ответственный);
		Конецесли;
		
		// Рабочая группа
		РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ОбъектДоступа.Ссылка);
		Если РабочаяГруппа.Количество() > 0 Тогда
			
			//Добавление участников рабочей группы
			Для каждого Эл Из РабочаяГруппа Цикл
				Строка = ДескрипторДоступа.РабочаяГруппа.Добавить();
				Строка.Участник = Эл.Участник;
				Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
				Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
			КонецЦикла;
			
		Иначе
			
			// Добавление группы пользователей "Все пользователи"
			Строка = ДескрипторДоступа.РабочаяГруппа.Добавить();
			Строка.Участник = Справочники.ГруппыПользователей.ВсеПользователи;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПраваДоступа(ДескрипторДоступа, ПраваДоступа, ПротоколРасчетаПрав) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодчиненКомплексномуПроцессу = ЗначениеЗаполнено(ДескрипторДоступа.ВладелецОбъекта);
	ПодчиненШаблонуКомплексногоПроцесса = ЗначениеЗаполнено(ДескрипторДоступа.ДескрипторВладельца);
	
	Если ПодчиненКомплексномуПроцессу Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СоставСубъектовПравДоступа.Пользователь КАК Участник,
			|	ЛОЖЬ КАК ПолныеПрава
			|ИЗ
			|	БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|			ПО УчастникиПроцессов.Участник = СоставСубъектовПравДоступа.Субъект
			|				И УчастникиПроцессов.ОсновнойОбъектАдресации = СоставСубъектовПравДоступа.ОсновнойОбъектАдресации
			|				И УчастникиПроцессов.ДополнительныйОбъектАдресации = СоставСубъектовПравДоступа.ДополнительныйОбъектАдресации
			|		ПО КомплексныйПроцесс.Ссылка = УчастникиПроцессов.Процесс
			|ГДЕ
			|	КомплексныйПроцесс.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КомплексныйПроцесс.Автор,
			|	ИСТИНА
			|ИЗ
			|	БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
			|ГДЕ
			|	КомплексныйПроцесс.Ссылка = &Ссылка");
			
		Запрос.УстановитьПараметр("Ссылка", ДескрипторДоступа.ВладелецОбъекта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПолныеПрава Тогда
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами", 
												Истина, Истина, Истина, Истина, Ложь);
			Иначе
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами", 
												Истина, Ложь, Ложь, Ложь, Ложь);
			КонецЕсли;
			
			ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
				ПраваДоступа, Выборка.Участник, Неопределено, Неопределено, ПраваПользователя);
				
		КонецЦикла;
			
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Права родительского комплексного процесса'"));
		КонецЕсли;
		
	ИначеЕсли ПодчиненШаблонуКомплексногоПроцесса Тогда
		
		ДокументооборотПраваДоступа.СкопироватьПраваДескриптора(ДескрипторДоступа.ДескрипторВладельца, ПраваДоступа);
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Права родительского шаблона комплексного процесса'"));
		КонецЕсли;
		
	Иначе
	
		// Добавление ответственного за шаблон
		УчастникиДобавлены = Ложь;
		Для каждого Эл Из ДескрипторДоступа.Пользователи Цикл
			
			УчастникиДобавлены = Истина;
			
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами", 
											Истина, Истина, Истина, Истина, Ложь);
				
			ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
				ПраваДоступа,
				Эл.Пользователь,
				Эл.ОсновнойОбъектАдресации,
				Эл.ДополнительныйОбъектАдресации,
				ПраваПользователя);
				
		КонецЦикла;	
		
		// Добавление ответственного в протокол расчета прав
		Если УчастникиДобавлены Тогда
			Если ПротоколРасчетаПрав <> Неопределено Тогда
				ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Ответственный за шаблон'"));
			КонецЕсли;	
		КонецЕсли;	

		// Добавление рабочей группы
		Если ДескрипторДоступа.РабочаяГруппа.Количество() > 0 Тогда
			
			Для каждого Эл Из ДескрипторДоступа.РабочаяГруппа Цикл
				
				ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами", 
												Истина, Ложь, Ложь, Ложь, Ложь);
			
				ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
					ПраваДоступа,
					Эл.Участник,
					Эл.ОсновнойОбъектАдресации,
					Эл.ДополнительныйОбъектАдресации,
					ПраваПользователя);
						
			КонецЦикла;	
			
			// Добавление рабочей группы в протокол расчета прав
			Если ПротоколРасчетаПрав <> Неопределено Тогда
				ПротоколРасчетаПрав.Добавить(НСтр("ru = 'Рабочая группа шаблона'"));
			КонецЕсли;	
		Иначе
			ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами", 
												Истина, Ложь, Ложь, Ложь, Ложь);
			
			ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
				ПраваДоступа,
				Справочники.ГруппыПользователей.ВсеПользователи,
				Неопределено,
				Неопределено,
				ПраваПользователя);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
