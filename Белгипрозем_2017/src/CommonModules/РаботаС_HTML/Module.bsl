// Возвращает ДокументHTML.
//
// Параметры:
// - ТекстHTML (Строка) - в формате HTML
// - Кодировка (Строка) - необязательный
//
Функция ПолучитьДокументHTMLИзТекстаHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	Если ПустаяСтрока(ТекстHTML) Тогда
		Возврат Новый ДокументHTML;
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		Попытка
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		Исключение	
			ЧтениеHTML.УстановитьСтроку(ТекстHTML); // кодировка могла быть некорректная - ставим без кодировки
		КонецПопытки;	
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает ДокументHTML.
//
// Параметры:
// - Текст (Строка)
//
Функция ПолучитьДокументHTMLИзПростогоТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементHead = ДокументHTML.СоздатьЭлемент("head");
	ЭлементMeta = ДокументHTML.СоздатьЭлемент("meta");
	
	Атрибут = ДокументHTML.СоздатьАтрибут("content");
	Атрибут.ТекстовоеСодержимое = ?(ЗначениеЗаполнено(Кодировка), "text/html; charset=" + Кодировка, "text/html");
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	Атрибут = ДокументHTML.СоздатьАтрибут("http-equiv");
	Атрибут.ТекстовоеСодержимое = "Content-Type";
	ЭлементMeta.Атрибуты.УстановитьИменованныйЭлемент(Атрибут);
	
	ЭлементHead.ДобавитьДочерний(ЭлементMeta);
	ДокументHTML.ЭлементДокумента.ДобавитьДочерний(ЭлементHead);
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	ЭлементБлок = РаботаС_HTML.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:Arial;font-size:12px;"));
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
		Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
		Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
		Абзац = РаботаС_HTML.СоздатьЭлементСАтрибутами(
			ДокументHTML,
			"p",
			Новый Структура("style", "margin-top:2px;margin-bottom:2px;"));
		Абзац.ДобавитьДочерний(ДокументHTML.СоздатьТекстовыйУзел(Строка));
		ЭлементБлок.ДобавитьДочерний(Абзац);
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Возвращает текст HTML для отображения переданного текста.
//
Функция ПолучитьHTMLИзТекста(
	Знач Текст,
	Знач Кодировка = Неопределено,
	Знач Стиль = Неопределено) Экспорт
	
	ТекстHTML =
		"<html>
		|<head>
		|<meta %content% http-equiv=""Content-Type"">
		|</head>
		|<body style=""margin-top:1px; padding-top:1px"">
		|<div %style%>
		|%Текст%
		|</div>
		|</body>
		|</html>";
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "%content%", "content=""text/html; charset=" + Кодировка + """");
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "%content%", "content=""text/html");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стиль) Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "%style%", "style=""" + Стиль + """");
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "%style%", "style=""font-family:Arial;font-size:12px;""");
	КонецЕсли;
	
	ЗаменитьУправляющиеСимволы(Текст);
	ТекстИсточника = Новый ТекстовыйДокумент;
	ТекстИсточника.УстановитьТекст(Текст);
	КоличествоСтрок = ТекстИсточника.КоличествоСтрок();
	ТекстРезультата = Новый ТекстовыйДокумент;
	
	Для К = 1 По КоличествоСтрок Цикл
		
		Строка = ТекстИсточника.ПолучитьСтроку(К);
		
		Если Не ПустаяСтрока(Строка) Тогда
			ЗаменитьТабуляцииИПробелы(Строка);
			ЗаменитьСпецСимволыHTML(Строка);
		КонецЕсли;
		
		Если К = КоличествоСтрок Тогда
			ТекстРезультата.ДобавитьСтроку(Строка);
		Иначе
			ТекстРезультата.ДобавитьСтроку(Строка + "<br>");
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "%Текст%", ТекстРезультата.ПолучитьТекст());
	
	Возврат ТекстHTML;
	
КонецФункции

// Заменяет в строке все спецсимволы на соответствующие им имена,
// возвращает измененную строку.
//
Функция ЗаменитьСпецСимволыHTML(Строка, СпецСимволыСоотв = Неопределено) Экспорт
	
	СоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	НоваяСтрока = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, Поз);
		ИмяСимвола = СоответствиеСпецСимволов.Получить(Код);
		
		Если ИмяСимвола = Неопределено Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код);
		Иначе
			НоваяСтрока = НоваяСтрока + "&" + ИмяСимвола + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Строка = НоваяСтрока;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

Процедура ЗаменитьТабуляцииИПробелы(Строка)
	
	Строка = СтрЗаменить(Строка, Символы.ВТаб, "    ");
	Строка = СтрЗаменить(Строка, Символы.Таб, "    ");
	Строка = СтрЗаменить(Строка, "  ", Символы.НПП + " ");
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	Строка = СтрЗаменить(Строка, Символы.НПП + " " + Символы.НПП, Символы.НПП + Символы.НПП + Символы.НПП);
	
КонецПроцедуры

Процедура ЗаменитьУправляющиеСимволы(Строка)
	
	Текст = СтрЗаменить(Текст, Символы.ВК + Символы.ПС, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(7), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(8), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВТаб, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(12), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символы.ВК, Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(14), Символы.ПС);
	Текст = СтрЗаменить(Текст, Символ(28), " ");
	Текст = СтрЗаменить(Текст, Символ(29), " ");
	Текст = СтрЗаменить(Текст, Символ(30), " ");
	
КонецПроцедуры

// Добавляет текстовый узел к ДокументуHTML.
//
Процедура ДобавитьТекстовыйУзел(
	ЭлементРодитель,
	Текст,
	ВыделятьЖирным = Ложь,
	ДобавлятьПереносСтроки = Ложь) Экспорт
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры 

// Получает текстовое содержимое из ДокументаHTML.
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция СоздатьЭлементСАтрибутами(ДокументHTML, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = ДокументHTML.СоздатьЭлемент(Имя);
	Для каждого Атрибут Из Атрибуты Цикл
		УстановитьАтрибутЭлементаHTML(ЭлементHTML, Атрибут.Ключ, Атрибут.Значение);
	КонецЦикла;
	
	Возврат ЭлементHTML;
	
КонецФункции

// Добавляет элемент в ДокументHTML.
//
Функция ДобавитьЭлементСАтрибутами(ЭлементРодитель, Имя, Атрибуты) Экспорт
	
	ЭлементHTML = СоздатьЭлементСАтрибутами(ЭлементРодитель.ДокументВладелец, Имя, Атрибуты);
	ЭлементРодитель.ДобавитьДочерний(ЭлементHTML);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Устанавливает атрибуты элементу ДокументаHTML.
//
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML, Имя, ТекстовоеСодержимое) Экспорт
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

// Вставляет ЭлементHTML на первое место в массив дочерних элементов ДокументаHTML.
//
Процедура ВставитьЭлементHTMLПервымДочернимЭлементом(
	ЭлементРодитель,
	ВставляемыйЭлемент) Экспорт
	
	Если ЭлементРодитель.ДочерниеУзлы.Количество() > 0 Тогда
		ЭлементРодитель.ВставитьПеред(ВставляемыйЭлемент, ЭлементРодитель.ДочерниеУзлы[0]);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ВставляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Преобразовывает HTML текст в текст
Функция ПолучитьТекстИзHTML(Знач ТекстHTML, Знач Кодировка = Неопределено) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		Попытка
			HTMLФайл = Новый COMОбъект("htmlfile");
			HTMLФайл.Open("text/html");
			HTMLФайл.write(ТекстHTML);
			
			Возврат HTMLФайл.documentElement.document.body.innerText; 
		Исключение
			// На сервере этот объект может быть недоступен
		КонецПопытки;
		
	КонецЕсли;
	
	ПереводСтроки = Символы.ВК + Символы.ПС;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>", "</o:p>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</o:p>" + ПереводСтроки + ПереводСтроки, "</o:p>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>", "</p>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</p>" + ПереводСтроки + ПереводСтроки, "</p>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>", "</div>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "</div>" + ПереводСтроки + ПереводСтроки, "</div>" + ПереводСтроки);
	ТекстHTML = СтрЗаменить(ТекстHTML, "<br>", ПереводСтроки + ПереводСтроки);
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	Если ЗначениеЗаполнено(Кодировка) Тогда
		Попытка
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		Исключение	
			ЧтениеHTML.УстановитьСтроку(ТекстHTML); // кодировка могла быть некорректная - ставим без кодировки
		КонецПопытки;	
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	КонецЕсли;
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	УдалитьТегиИзЭлементаHTML(ДокументHTML, "style");
	
	Если ДокументHTML.Тело = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ДокументHTML.Тело.ТекстовоеСодержимое;
	
КонецФункции

Процедура УдалитьТегиИзЭлементаHTML(ЭлементHTML, Тег)
	
	Для каждого Узел Из ЭлементHTML.ДочерниеУзлы Цикл
		Если НРег(Узел.ИмяУзла) = НРег(Тег) Тогда
			ЭлементHTML.УдалитьДочерний(Узел);
		Иначе
			// Рекурсия
			УдалитьТегиИзЭлементаHTML(Узел, Тег);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст HTML.
//
Функция ПолучитьТекстHTMLДляИсходящегоПисьмаИзПростогоТекста(Знач Текст, Знач Кодировка = Неопределено) Экспорт
	
	ЗаменитьУправляющиеСимволы(Текст);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	ТекстДляВставки = "";
	
	Для К = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(К);
		Если ПустаяСтрока(Строка) Тогда
			ТекстДляВставки = ТекстДляВставки + ?(К = 1, "", Символы.ПС) + "<br>";
			Продолжить;
		КонецЕсли;
		
		ЗаменитьТабуляцииИПробелы(Строка);
		ЗаменитьСпецСимволыHTML(Строка);
		ДобавитьТегиКСсылкам(Строка);
		ТекстДляВставки = ТекстДляВставки + ?(К = 1, "", Символы.ПС) + Строка + "<br>";
		
	КонецЦикла;
	
	ТекстHTML =
		"<html>
		|<head>
		|<meta content=""text/html; charset=[charset]"" http-equiv=""Content-Type"">
		|</head>
		|<body>
		|<div style=""font-family:Microsoft Sans Serif;font-size:10pt;"">
		|[ТекстДляВставки]
		|</div>
		|</body>
		|</html>";
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ТекстHTML = СтрЗаменить(ТекстHTML, "[charset]", Кодировка);
	Иначе
		ТекстHTML = СтрЗаменить(ТекстHTML, "; charset=[charset]", "");
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "[ТекстДляВставки]", ТекстДляВставки);
	
	Возврат ТекстHTML;
	
КонецФункции

// Добавляет к тексту в формате HTML другой текст в формате HTML
// Из добавляемого текста берется только внутренность тега <body>, если он там присутствует
// иначе добавляется весь ДобавляемыйТекстHTML.
Процедура ДобавитьТекстHTML(ТекстHTML, ДобавляемыйТекстHTML) Экспорт
	
	РазложенныйТекстHTML = РазложитьТекстHTML(ТекстHTML);
	РазложенныйДобавляемыйТекстHTML = РазложитьТекстHTML(ДобавляемыйТекстHTML);
	
	ТекстHTML = РазложенныйТекстHTML.Заголовок
		+ РазложенныйТекстHTML.Тело
		+ РазложенныйДобавляемыйТекстHTML.Тело
		+ РазложенныйТекстHTML.Окончание;
	
КонецПроцедуры

// Возвращает структуру "Заголовок, Тело, Окончание",
// где ТекстHTML = Заголовок + Тело + Окончание
// и Тело - содержимое тега body
//
Функция РазложитьТекстHTML(ТекстHTML) Экспорт
	
	НРегТекстHTML = НРег(ТекстHTML);
	
	ПозицияНачалаТела = 1;
	ПозицияОкончанияТела = СтрДлина(ТекстHTML);
	
	ПозицияНачалаТегаHTML = Найти(НРегТекстHTML, "<html");
	Если ПозицияНачалаТегаHTML > 0 Тогда
		ПозицияОкончанияТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаHTML);
		Если ПозицияОкончанияТегаHTML > 0 Тогда
			ПозицияНачалаТела = ПозицияОкончанияТегаHTML + 1;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияНачалаТегаBODY = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "<body", ПозицияНачалаТела - 1);
	Если ПозицияНачалаТегаBODY > 0 Тогда
		ПозицияОкончанияТегаBODY = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, ">", ПозицияНачалаТегаBODY);
		Если ПозицияОкончанияТегаBODY > 0 Тогда
			ПозицияНачалаТела = ПозицияОкончанияТегаBODY + 1;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияНачалаЗакрывающегоТегаBODY = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "</body>", ПозицияНачалаТела - 1);
	Если ПозицияНачалаЗакрывающегоТегаBODY > 0 Тогда
		ПозицияОкончанияТела = ПозицияНачалаЗакрывающегоТегаBODY - 1;
	Иначе
		ПозицияНачалаЗакрывающегоТегаHTML = РаботаСоСтроками.НайтиПосле(НРегТекстHTML, "</html>", ПозицияНачалаТела - 1);
		Если ПозицияНачалаЗакрывающегоТегаHTML > 0 Тогда
			ПозицияОкончанияТела = ПозицияНачалаЗакрывающегоТегаHTML - 1;
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = Лев(ТекстHTML, ПозицияНачалаТела - 1);
	Тело = Сред(ТекстHTML, ПозицияНачалаТела, ПозицияОкончанияТела - ПозицияНачалаТела + 1);
	Окончание = Сред(ТекстHTML, ПозицияОкончанияТела + 1);
	
	Результат = Новый Структура("Заголовок, Тело, Окончание", Заголовок, Тело, Окончание);
	
	Возврат Результат;
	
КонецФункции

// Добавляет теги ко всем ссылкам, находящимся в строке.
// Обрабатываются следующие схемы обращения к ресурсу:
// http://, https://, ftp://, mailto:, file://, file:, e1c://, e1cib/
// Кроме того обрабатываются с использованием схемы http:// ссылки начинающиеся с www. без схемы.
// Строки размером 250000 больше  не обрабатываются.
Процедура ДобавитьТегиКСсылкам(ТекстHTML) Экспорт
	
	Если СтрДлина(ТекстHTML) > 250000 Тогда
		Возврат;
	КонецЕсли;
	
	// Ссылки со схемой
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "http://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "https://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "ftp://");
	
	// Ссылки без схемы
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "www.", "http://www.");
	
	// Навигационные ссылки
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1c://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1cib/", "v8doc:e1cib/");
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "file://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "\\", "file://\\");
	СписокТомовДисков = РаботаС_HTMLПовтИсп.СписокТомовДисков();
	Для Каждого ЭлементТомДиска Из СписокТомовДисков Цикл
		ТомДиска = ЭлементТомДиска.Значение;
		ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ТомДиска + ":\", "file://" + ТомДиска + ":\");
		ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, ТомДиска + ":/", "file://" + ТомДиска + ":\");
	КонецЦикла;
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "mailto:");
	
	// Заполнить title у ссылок
	ЗаполнитьСвойствоTitleУСсылок(ТекстHTML);
	
КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке.
//
Процедура ДобавитьТегиКСсылкамСоСхемой(
	ТекстHTML,
	Схема,
	НовоеЗначениеСхемы = "")
	
	СхемаПоиска = НРег(Схема);
	ТекстHTMLПоиска = НРег(ТекстHTML);
	Длина = СтрДлина(ТекстHTML);
	
	НоваяСтрока = "";
	НазваниеЭлементаСсылки = "a";
	Смещение = 0;
	
	ЯвляетсяТегомЯкоря = Ложь;
	КонецТега = ">";
	ДлинаКонцаТега = СтрДлина(КонецТега);
	
	ЗакрывающийТегЯкоря = "</a>";
	ДлинаЗакрывающегоТегаЯкоря = СтрДлина(ЗакрывающийТегЯкоря);
	
	НачалоСсылки = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, СхемаПоиска);
	СписокОграничителейURI = РаботаС_HTMLПовтИсп.СписокОграничителейURI();
	
	Пока НачалоСсылки <> 0 Цикл
		
		// Проверять что позиция не в параметрах какого-либо тега
		Если ПозицияНаходитсяВПараметреТега(ТекстHTMLПоиска, НачалоСсылки, НазваниеЭлементаСсылки, ЯвляетсяТегомЯкоря) Тогда
			
			ПозицияОкончанияОткрывающегоТега = 0;
			
			Если ЯвляетсяТегомЯкоря Тогда
				
				// Если тег является якорем - ищем 
				ПозицияОкончанияОткрывающегоТега = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаЗакрывающегоТегаЯкоря;
				ДлинаСмещения = ДлинаЗакрывающегоТегаЯкоря;
				
			КонецЕсли;
			
			Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
				
				ПозицияОкончанияОткрывающегоТега = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, КонецТега, НачалоСсылки);
				
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					
					// Если нет окончания тега - не выделяем больше ссылок
					Прервать;
					
				КонецЕсли;
				
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаКонцаТега;
				ДлинаСмещения = ДлинаКонцаТега;
				
			КонецЕсли;
			
			// Если есть окончание тега - выделяем ссылки после тега
			Смещение = Смещение + (ПозицияОкончанияОткрывающегоТега - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияОкончанияОткрывающегоТега);
			НачалоСсылки = Найти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПозицияНаходитсяВТеге(ТекстHTMLПоиска, НазваниеЭлементаСсылки, НачалоСсылки) Тогда
			
			ПозицияЗакрывающегоТегаЯкоря = РаботаСоСтроками.НайтиПосле(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
			Если ПозицияЗакрывающегоТегаЯкоря = 0 Тогда
				
				// Если нет закрывающего "якорь" тега - не выделяем больше ссылок
				Прервать;
				
			КонецЕсли;
			
			ПозицияЗакрывающегоТегаЯкоря = ПозицияЗакрывающегоТегаЯкоря + ДлинаЗакрывающегоТегаЯкоря;
			// Если есть закрывающий "якорь" тег - выделяем ссылки после закрывающего тега
			Смещение = Смещение + (ПозицияЗакрывающегоТегаЯкоря - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияЗакрывающегоТегаЯкоря);
			НачалоСсылки = Найти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоСсылки = 1 Тогда
			
			СимволПередСсылкой = "";
			
		Иначе
			
			СимволПередСсылкой = Сред(ТекстHTMLПоиска, НачалоСсылки - 1, 1);
			
			Если СимволПередСсылкой = ";" Тогда
				ЗакодированныеКавычки = "&quot;";
				ДлинаКавычек = СтрДлина(ЗакодированныеКавычки);
				Если НачалоСсылки - ДлинаКавычек > 0 Тогда
					ВозможныеКавычки = Сред(ТекстHTMLПоиска, НачалоСсылки - ДлинаКавычек, ДлинаКавычек);
					Если ВозможныеКавычки = ЗакодированныеКавычки Тогда
						СимволПередСсылкой = ЗакодированныеКавычки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокОграничителейURI.НайтиПоЗначению(СимволПередСсылкой) <> Неопределено Тогда
				
				СимволПередСсылкой = "";
				
			ИначеЕсли СимволПередСсылкой = ">" Тогда
				
				// Тег перед ссылкой
				СимволПередСсылкой = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СимволПередСсылкой) Тогда
			
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки,
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = Найти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		ИначеЕсли СимволПередСсылкой = """" ИЛИ СимволПередСсылкой = "&quot;" Тогда
			
			СимволКонцаСсылки = """";
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI, Истина, СимволКонцаСсылки);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки - СтрДлина(СимволПередСсылкой), // Включаем открывающие кавычки в ссылку
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение,
				Истина,
				СимволПередСсылкой,
				СимволКонцаСсылки);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = Найти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Смещение = Смещение + НачалоСсылки;
		ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, НачалоСсылки + 1);
		НачалоСсылки = Найти(ТекстHTMLПоиска, СхемаПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает позицию конца ссылки в строке - первый незначащий символ
Функция НайтиКонецСсылки(ТекстHTML, НачальнаяПозиция, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, СимволКонцаСсылки = Неопределено)
	
	ДопустимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ЗначимыеВURIСпецСимволы();
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	СписокДопустимыхВСсылкеТегов = РаботаС_HTMLПовтИсп.СписокДопустимыхВСсылкеТегов();
	
	НайденНезначащийСимвол = Ложь;
	ОбрабатываемаяСтрока = Сред(ТекстHTML, НачальнаяПозиция);
	ПоложениеПервогоНеЗначащегоСимвола = 0;
	
	Пока Не НайденНезначащийСимвол Цикл
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = СимволКонцаСсылки Тогда
			
			НайденНезначащийСимвол = Истина;
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Прервать;
			
		ИначеЕсли ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			СпецСимвол = ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол);
			Если СпецСимвол <> Неопределено И Символ(СпецСимвол) = СимволКонцаСсылки Тогда
				НайденНезначащийСимвол = Истина;
				СимволКонцаСсылки = "&" + ВозможныйСпецСимвол + ";";
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтрДлина(СимволКонцаСсылки);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
				Продолжить;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ЕстьЗначимыйСимволДоКонцаСсылки = ЕстьЗначимыйСимволДоКонцаСсылки(
					ОбрабатываемаяСтрока,
					СписокНезначащихСимволов,
					РазрешитьПробелВСсылке,
					ДлинаВозможногоСпецСимвола + 2);
				
				Если ЕстьЗначимыйСимволДоКонцаСсылки Тогда
					
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			ИначеЕсли ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтруктураТега.ПозицияОкончанияОткрывающегоТега;
						Продолжить;
						
					Иначе
						
						ПервыйСимвол = "";
						
					КонецЕсли;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			Иначе
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено 
			И Не ЕстьЗначимыйСимволДоКонцаСсылки(ОбрабатываемаяСтрока, СписокНезначащихСимволов, РазрешитьПробелВСсылке) Тогда
			
			ПервыйСимвол = "";
			
		КонецЕсли;
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПервыйСимвол) Тогда
			
			НайденНезначащийСимвол = Истина;
			Прервать;
			
		КонецЕсли;
		
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
		ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
		
	КонецЦикла;
	
	// Если не был найден не значащий символ - все равно возвращаем позицию конца строки.
	Возврат НачальнаяПозиция + ПоложениеПервогоНеЗначащегоСимвола;
	
КонецФункции

// Добавляет тег в конкретную позицию. Меняет значение Строка и Смещение.
Процедура ДобавитьТегСсылки(
	Строка,
	НачальнаяПозиция,
	КонечнаяПозиция,
	Схема,
	НовоеЗначениеСхемы,
	Смещение,
	ОбрезатьГраничныеСимволыСсылки = Ложь,
	СимволПередСсылкой = "",
	СимволКонцаСсылки = "")
	
	НачалоСтроки = Лев(Строка, Смещение + НачальнаяПозиция - 1);
	
	// Обрезание граничных символов
	Если ОбрезатьГраничныеСимволыСсылки Тогда
		Ссылка = Сред(Строка,
			Смещение + НачальнаяПозиция + СтрДлина(СимволПередСсылкой),
			КонечнаяПозиция - НачальнаяПозиция - СтрДлина(СимволПередСсылкой) - СтрДлина(СимволКонцаСсылки));
	Иначе
		Ссылка = Сред(Строка, Смещение + НачальнаяПозиция, КонечнаяПозиция - НачальнаяПозиция);
	КонецЕсли;
	ПредставлениеСсылки = Ссылка;
	КонецСтроки = Прав(Строка, СтрДлина(Строка) - (Смещение + КонечнаяПозиция - 1));
	
	// Замены схемы в ссылке при необходимости, например "www." => "http://www."
	Если ЗначениеЗаполнено(НовоеЗначениеСхемы) Тогда
		
		ДлинаСхемы = СтрДлина(Схема);
		СхемаВСсылке = Лев(Ссылка, ДлинаСхемы);
		
		Если НРег(Схема) = НРег(СхемаВСсылке) Тогда
			
			Ссылка = НовоеЗначениеСхемы + Сред(Ссылка, ДлинаСхемы + 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаление тегов из ссылки
	ПозицияНачалаОткрывающегоТега = РаботаСоСтроками.НайтиПосле(Ссылка, "<");
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		СтруктураТега = ПолучитьТегВТекстеHTML(Ссылка, , ПозицияНачалаОткрывающегоТега);
		Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
			
			Ссылка = Лев(Ссылка, СтруктураТега.ПозицияНачалаОткрывающегоТега - 1) + Сред(Ссылка, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега - 1;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = РаботаСоСтроками.НайтиПосле(Ссылка, "<", ПозицияНачалаОткрывающегоТега);
		
	КонецЦикла;
	
	Если Не Найти(Строка, """") Тогда
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	ИначеЕсли Не Найти(Строка, "'") Тогда
		СсылкаСТегом = "<a href='" + Ссылка + "'>" + ПредставлениеСсылки + "</a>";
	Иначе
		ЗаменитьСпецСимволыHTMLОбратно(Ссылка);
		ЗаменитьСпецСимволыHTML(Ссылка);
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	КонецЕсли;
	
	Строка = НачалоСтроки + СсылкаСТегом + КонецСтроки;
	Смещение = СтрДлина(НачалоСтроки + СсылкаСТегом) + 1;
	
КонецПроцедуры

// Проверяет наличие значащего символа до конца ссылки. 
// Концом ссылки считаются стандартные незначащие символы.
Функция ЕстьЗначимыйСимволДоКонцаСсылки(Строка, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, НачальнаяПозиция = 0)
	
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьОбратноеСоответствиеСпецСимволов();
	ДопустимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = РаботаС_HTMLПовтИсп.ЗначимыеВURIСпецСимволы();
	СписокДопустимыхВСсылкеТегов = РаботаС_HTMLПовтИсп.СписокДопустимыхВСсылкеТегов();
	
	ОбрабатываемаяСтрока = Сред(Строка, НачальнаяПозиция + 1);
	НайденЗначащийСимвол = Ложь;
	
	Пока Не НайденЗначащийСимвол Цикл
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		ИначеЕсли ПустаяСтрока(ПервыйСимвол) Тогда
			
			Прервать;
			
		ИначеЕсли ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ПолучитьВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				НайденЗначащийСимвол = Истина;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено
				ИЛИ ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				
			Иначе
				
				НайденЗначащийСимвол = Истина;
				
			КонецЕсли;
			
			
		ИначеЕсли ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ПолучитьТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						Продолжить;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		Иначе
			
			НайденЗначащийСимвол = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденЗначащийСимвол;
	
КонецФункции

// Возвращает спецсимвол HTML (&СпецСимвол;), если он присутствует.
// Возвращает Неопределено, если нет возможных спецсимволов.
Функция ПолучитьВозможныйСпецСимвол(Строка, ПозицияСпецСимвола = 0)
	
	ОбрабатываемаяСтрока = Сред(Строка, ПозицияСпецСимвола + 1);
	ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
	
	Если ПервыйСимвол = "&" Тогда
		
		КонецСпецСимвола = Найти(ОбрабатываемаяСтрока, ";");
		
		Если КонецСпецСимвола <> 0 Тогда
			
			СпецСимвол = Сред(ОбрабатываемаяСтрока, 2, КонецСпецСимвола - 2);
			
			Возврат СпецСимвол;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру первого тега данного элемента в тексте HTML.
// Если не указано название элемента то возвращает первый встреченный тег.
// Поиск тега ведется с переданной начальной позиции
// 	Структура тега: 
//		НазваниеЭлемента - название элемента найденного тега
//		ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега
//		Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом
//		ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега
//		ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега
//		ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега
//		ПозицияНачалаТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега
//							   если нет закрывающего тега, то позиция символа ">" открывающего тега
Функция ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1)
	
	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда
		
		НачалоОткрывающегоТега = "<";
		НазваниеТега = "";
		
		ОбрабатываемыйТекстHTML = ТекстHTML;
		
		ПозицияНачалаОткрывающегоТега = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
			
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
			
			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;
				
				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл
					
					НазваниеТега = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
					
				КонецЦикла;
				
				ПозицияНачалаОткрывающегоТега = 0;
				
			Иначе
				
				ПозицияНачалаОткрывающегоТега = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НазваниеТега) Тогда
			
			НазваниеЭлемента = НазваниеТега;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрывающегоТега = "";
	Содержание = "";
	ПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	ПозицияНачалаЗакрывающегоТега = 0;
	ПозицияОкончанияЗакрывающегоТега = 0;
	ПозицияНачалаТега = 0;
	ПозицияОкончанияТега = 0;
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега = ">";
	ЗакрывающийТег = "</" + НРег(НазваниеЭлемента) + ">";
	
	ОбрабатываемыйТекстHTML = Сред(НРег(ТекстHTML), НачальнаяПозиция);
	Смещение = НачальнаяПозиция - 1;
	
	ПозицияНачалаОткрывающегоТегаСПараметрами = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + " ");
	ПозицияНачалаОткрывающегоТегаСПараметрамиПС = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + Символы.ПС);
	ПозицияНачалаОткрывающегоТегаБезПараметров = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + КонецОткрывающегоТега);
	ПозицияНачалаОткрывающегоТегаСЗакрытием = Найти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега + "/>");
	
	Если ПозицияНачалаОткрывающегоТегаСПараметрами <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСПараметрами);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСПараметрами;
		КонецЕсли;
	КонецЕсли;
	Если ПозицияНачалаОткрывающегоТегаСПараметрамиПС <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСПараметрамиПС);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСПараметрамиПС;
		КонецЕсли;
	КонецЕсли;
	Если ПозицияНачалаОткрывающегоТегаБезПараметров <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаБезПараметров);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаБезПараметров;
		КонецЕсли;
	КонецЕсли;
	Если ПозицияНачалаОткрывающегоТегаСЗакрытием <> 0 Тогда
		Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
			ПозицияНачалаОткрывающегоТега = Мин(ПозицияНачалаОткрывающегоТега, ПозицияНачалаОткрывающегоТегаСЗакрытием);
		Иначе
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТегаСЗакрытием;
		КонецЕсли;
	КонецЕсли;
	
	Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
		
		ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
		Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;
		
		ПозицияОкончанияОткрывающегоТега = Найти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			
			ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
			Смещение = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
			
		Иначе
			
			ПозицияНачалаОткрывающегоТега = 0;
			
		КонецЕсли;
		
		ПозицияНачалаЗакрывающегоТега = Найти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		
			Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПозицияНачалаОткрывающегоТега <> 0 Тогда
		ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
		ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	КонецЕсли;
	Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
		ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	КонецЕсли;
	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	КонецЕсли;
	
	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	ИначеЕсли ПозицияОкончанияОткрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;
	
	СтруктураТега = Новый Структура(
		"НазваниеЭлемента, ПараметрыОткрывающегоТега, Содержание, 
		| ПозицияНачалаОткрывающегоТега, ПозицияОкончанияОткрывающегоТега, ПозицияНачалаЗакрывающегоТега, ПозицияОкончанияЗакрывающегоТега,
		| ПозицияНачалаТега, ПозицияОкончанияТега",
		НазваниеЭлемента,
		ПараметрыОткрывающегоТега,
		Содержание,
		ПозицияНачалаОткрывающегоТега,
		ПозицияОкончанияОткрывающегоТега,
		ПозицияНачалаЗакрывающегоТега,
		ПозицияОкончанияЗакрывающегоТега,
		ПозицияНачалаТега,
		ПозицияОкончанияТега);
	
	Возврат СтруктураТега;
	
КонецФункции

// Проверяет наличие название элемента тега в списке значений
Функция ТегСодержитсяВСписке(СтруктураТега, СписокЗначений)
	
	Если Не ЗаполненаСтруктураТега(СтруктураТега) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НазваниеЭлемента = НРег(СтруктураТега.НазваниеЭлемента);
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		
		ЗначениеЭлементаСписка = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлементаСписка) = Тип("Строка") Тогда
			
			ЗначениеЭлементаСписка = НРег(ЗначениеЭлементаСписка);
			ЗначениеЗакрывающегоЭлементаСписка = "/" + ЗначениеЭлементаСписка;
			
			Если НазваниеЭлемента = ЗначениеЭлементаСписка
				ИЛИ НазваниеЭлемента = ЗначениеЗакрывающегоЭлементаСписка Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет заполненность структуры тега: 
// - наличие всех необходимых тегу свойств в структуре;
// - заполненность позиции начала и окончания тега.
Функция ЗаполненаСтруктураТега(СтруктураТега)
	
	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		ИЛИ (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("Содержание"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет нахождение переданной позиции внутри тега (в параметрах или содержании)
// Если тег не закрыт, то проверяет только в параметрах тега.
Функция ПозицияНаходитсяВТеге(ТекстHTML, НазваниеЭлемента, Позиция, Тег = Неопределено) Экспорт
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	ДлинаОткрывающегоТега = СтрДлина(НачалоОткрывающегоТега);
	
	ПозицияНаходитсяВТеге = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	
	ПозицияНачалаОткрывающегоТега = Найти(НачалоТекстаHTML, НачалоОткрывающегоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		НайденнаяПозицияНачалаОткрывающегоТега =
			НайденнаяПозицияНачалаОткрывающегоТега
			+ ПозицияОкончанияОткрывающегоТега
			+ ПозицияНачалаОткрывающегоТега;
		
		ПозицияОкончанияОткрывающегоТега = Найти(НачалоТекстаHTML, ">");
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			
			НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = Найти(НачалоТекстаHTML, НачалоОткрывающегоТега);
		
	КонецЦикла;
	
	Если НайденнаяПозицияНачалаОткрывающегоТега <> 0 Тогда
		
		// Если есть незакрытый открывающий тег до искомой позиции, ищем тег в исходном тексте HTML.
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, НазваниеЭлемента, НайденнаяПозицияНачалаОткрывающегоТега);
		
		Если ЗаполненаСтруктураТега(Тег) Тогда
			
			Если Позиция > Тег.ПозицияНачалаТега И Позиция < Тег.ПозицияОкончанияТега Тогда
				
				ПозицияНаходитсяВТеге = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПозицияНаходитсяВТеге;
	
КонецФункции

// Проверяет нахождение внутри параметров открывающего тега (возможно, который не закрыт)
Функция ПозицияНаходитсяВПараметреТега(ТекстHTML, Позиция, НужныйТег = "", ЯвляетсяНужнымТегом = Ложь)
	
	НачалоТега = "<";
	КонецТега = ">";
	ОткрытТег = Ложь;
	ЯвляетсяНужнымТегом = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияНачалаОткрывающегоТега = Найти(НачалоТекстаHTML, НачалоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		ПервыйСимволНазванияТега = Сред(НачалоТекстаHTML, 1, 1);
		
		Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
			
			ПозицияОкончанияОткрывающегоТега = Найти(НачалоТекстаHTML, КонецТега);
			Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
				
				// Пропускаем содержимое открытых тегов для корректного определения является ли тег нужным
				// Например: "<a <test " - открыт тег a; "<test <a " - открыт тег test.
				НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
				
			Иначе
				
				ПозицияНужногоТега = Найти(НачалоТекстаHTML, НужныйТег + " ");
				Если ПозицияНужногоТега = 0 Тогда
					ПозицияНужногоТега = Найти(НачалоТекстаHTML, НужныйТег + ">");
				КонецЕсли;
				
				Если ПозицияНужногоТега = 1 Тогда
					ЯвляетсяНужнымТегом = Истина;
				КонецЕсли;
				
				ОткрытТег = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = Найти(НачалоТекстаHTML, НачалоТега);
		
	КонецЦикла;
	
	Возврат ОткрытТег;
	
КонецФункции

// Заменяет в строке все имена спецсимволов на соответствующие им спецсимволы,
// возвращает измененную строку.
Функция ЗаменитьСпецСимволыHTMLОбратно(Строка, СпецСимволыСоотв = Неопределено)
	
	ОбратноеСоответствиеСпецСимволов = РаботаС_HTMLПовтИсп.ПолучитьСоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTMLОбратно(Строка, 38, "amp");
	
	Для Каждого СпецСимвол Из ОбратноеСоответствиеСпецСимволов Цикл
		ЗаменитьСпецСимволHTMLОбратно(Строка, СпецСимвол.Ключ, СпецСимвол.Значение);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTMLОбратно(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, "&" + ИмяСимвола + ";", Символ(КодСимвола));
	
КонецПроцедуры

// Дописывать значение из href в свойство title ссылок и картинок.
Процедура ЗаполнитьСвойствоTitleУСсылок(ТекстHTML)
	
	// Для отображения подсказки к относительным ссылкам используется упрощенный
	// метод определения относительной ссылки и работы с тегом BASE, для самых частотных случаев.
	// Ссылка считается относительной, если в нет не присутсвует ":".
	// К представлению относительных ссылок дописывается текст тега Base.
	ТегBody = ПолучитьТегВТекстеHTML(ТекстHTML, "body");
	ТегBase = ПолучитьТегВТекстеHTML(ТекстHTML, "base");
	ТекстBase = ПолучитьЗначениеПараметраТега(ТегBase, "href");
	Если ТекстBase = Неопределено
		ИЛИ (ЗаполненаСтруктураТега(ТегBody) И ТегBase.ПозицияОкончанияТега > ТегBody.ПозицияНачалаТега) Тогда
		ТекстBase = "";
	КонецЕсли;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + 1);
			Продолжить;
		КонецЕсли;
		
		// Считаем ссылку относительной, если в ней нет символа ":"
		Если ТекстBase <> "" И Найти(ТекстHref, ":") = 0 Тогда
			
			Если (Лев(ТекстHref, 1) <> "\" И Лев(ТекстHref, 1) <> "/")
				И (Прав(ТекстBase, 1) <> "\" И Прав(ТекстBase, 1) <> "/") Тогда
				
				// Нет "/" в тексте ссылки и Base
				ТекстHref = "/" + ТекстHref;
				
			ИначеЕсли (Лев(ТекстHref, 1) = "\" ИЛИ Лев(ТекстHref, 1) = "/")
				И (Прав(ТекстBase, 1) = "\" ИЛИ Прав(ТекстBase, 1) = "/") Тогда
				
				// Есть "/" в тексте ссылки и Base
				ТекстHref = Сред(ТекстHref, 2);
				
			КонецЕсли;
			
			ТекстHref = ТекстBase + ТекстHref;
			
		КонецЕсли;
		
		ТекстHref = УдалитьСхемуДокументооборота(ТекстHref);
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли Найти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				КонецЕсли;
			КонецЕсли;
			
			Если СимволОграниченияTitle = "" Тогда
				ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
				ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				СимволОграниченияTitle = """";
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "a", Тег.ПозицияОкончанияТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		ВнешнийТегСсылки = Неопределено;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		Если НЕ ПозицияНаходитсяВТеге(ТекстHTML, "a", Тег.ПозицияНачалаТега, ВнешнийТегСсылки) Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(ВнешнийТегСсылки, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли Найти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстHref, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "img", Тег.ПозицияОкончанияТега + Смещение + 1);
		
	КонецЦикла;
	
	Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area");
	
	Пока ЗаполненаСтруктураТега(Тег) <> 0 Цикл
		
		Смещение = 0;
		СимволОграниченияHref = Неопределено;
		СимволОграниченияTitle = Неопределено;
		НачалоTitle = 0;
		КонецTitle = 0;
		
		ТекстHref = ПолучитьЗначениеПараметраТега(Тег, "href", СимволОграниченияHref);
		Если ТекстHref = Неопределено Тогда
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + 1);
			Продолжить;
		КонецЕсли;
		
		ТекстTitle = ПолучитьЗначениеПараметраТега(Тег, "title", СимволОграниченияTitle, НачалоTitle, КонецTitle);
		
		Если ТекстTitle = Неопределено Тогда
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%1", СимволОграниченияHref, ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстTitle) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%3 %2>", Тег.НазваниеЭлемента, ТекстTitle, Тег.ПараметрыОткрывающегоТега);
			
		ИначеЕсли Найти(ТекстTitle, ТекстHref) = 0 Тогда
			
			ТекстДоTitle = Лев(Тег.ПараметрыОткрывающегоТега, НачалоTitle - 1);
			ТекстПослеTitle = Сред(Тег.ПараметрыОткрывающегоТега, КонецTitle + 1);
			
			Если СимволОграниченияTitle <> СимволОграниченияHref Тогда
				Если СимволОграниченияTitle = """" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
				ИначеЕсли СимволОграниченияTitle = "'" Тогда
					ТекстHref = СтрЗаменить(ТекстHref, "'", """");
				ИначеЕсли СимволОграниченияTitle = "" Тогда
					ТекстTitle = СтрЗаменить(ТекстTitle, """", "'");
					ТекстHref = СтрЗаменить(ТекстHref, """", "'");
					СимволОграниченияTitle = """";
				КонецЕсли;
			КонецЕсли;
			
			ТекстTitle = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"title=%1%2%3%1", СимволОграниченияTitle, ТекстTitle, Символы.ПС + ТекстHref);
			Смещение = Смещение + СтрДлина(ТекстHref) + 1;
			
			НовыйОткрывающийТег = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<%1%2%3%4>", Тег.НазваниеЭлемента, ТекстДоTitle, ТекстTitle, ТекстПослеTitle);
			
		Иначе
			
			Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + Смещение + 1);
			Продолжить;
			
		КонецЕсли;
		
		ТекстHTML =
			Лев(ТекстHTML, Тег.ПозицияНачалаОткрывающегоТега - 1)
			+ НовыйОткрывающийТег
			+ Сред(ТекстHTML, Тег.ПозицияОкончанияОткрывающегоТега + 1);
		
		Тег = ПолучитьТегВТекстеHTML(ТекстHTML, "area", Тег.ПозицияОкончанияТега + Смещение + 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение свойства параметра тега
Функция ПолучитьЗначениеПараметраТега(Тег, Параметр,
	СимволОграничения = Неопределено, НачалоПараметра = Неопределено, КонецПараметра = Неопределено)
	
	Если НЕ ЗаполненаСтруктураТега(Тег) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДляПоиска = НРег(Тег.ПараметрыОткрывающегоТега);
	ПараметрДляПоиска = НРег(Параметр);
	
	ПозицияПараметра = Найти(ПараметрыДляПоиска, ПараметрДляПоиска);
	Если ПозицияПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоПараметра = Найти(ПараметрыДляПоиска, ПараметрДляПоиска + "=""");
	Если НачалоПараметра <> 0 Тогда
		СимволОграничения = """";
	Иначе
		НачалоПараметра = Найти(ПараметрыДляПоиска, ПараметрДляПоиска + "='");
		Если НачалоПараметра <> 0 Тогда
			СимволОграничения = "'";
		Иначе
			НачалоПараметра = Найти(ПараметрыДляПоиска, ПараметрДляПоиска + "=");
			Если НачалоПараметра <> 0 Тогда
				СимволОграничения = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НачалоПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СимволОграничения = "" Тогда
		ЗакрывающийСимволОграничения = " ";
		КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			ЗакрывающийСимволОграничения = Символы.ПС;
			КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, ЗакрывающийСимволОграничения,
				НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
			Если КонецПараметра = 0 Тогда
				КонецПараметра = СтрДлина(ПараметрыДляПоиска) + 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонецПараметра = РаботаСоСтроками.НайтиПосле(ПараметрыДляПоиска, СимволОграничения,
			НачалоПараметра + СтрДлина(ПараметрДляПоиска + "=" + СимволОграничения));
		Если КонецПараметра = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если КонецПараметра = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПараметраТега = Сред(Тег.ПараметрыОткрывающегоТега, НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения),
		КонецПараметра - (НачалоПараметра + СтрДлина(Параметр + "=" + СимволОграничения)));
	
	Возврат ЗначениеПараметраТега;
	
КонецФункции

// Возвращает HTML код внутренней ссылки на предмет
Функция ПолучитьСсылкуНаПредмет(Предмет) Экспорт
	
	СсылкаНаПредмет = "";
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат СсылкаНаПредмет;
	КонецЕсли;
	
	ПредставлениеСсылки = РаботаСРабочимКалендаремСервер.ПолучитьПредставлениеПредмета(Предмет);
	
	Если ЗначениеЗаполнено(ПредставлениеСсылки) Тогда
		НавигационнаяСсылка = "v8doc:" + ПолучитьНавигационнуюСсылку(Предмет);
		СсылкаНаПредмет =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=""%1"">%2</a>",
				НавигационнаяСсылка, ПредставлениеСсылки);
	КонецЕсли;
	
	Возврат СсылкаНаПредмет;
	
КонецФункции

// Удаляет схему v8doc: из текста ссылки.
//
// Параметры:
//  Ссылка - Строка - Ссылка из которой следует удалить схему v8doc:.
//
// Возвращаемое значение:
//  Строка - Ссылка без схемы v8doc:
//
Функция УдалитьСхемуДокументооборота(Ссылка) Экспорт
	
	СсылкаБезСхемы = Ссылка;
	
	СхемаДокументооборота = "v8doc:";
	Если Найти(СсылкаБезСхемы, СхемаДокументооборота) = 1 Тогда
		СсылкаБезСхемы = Сред(СсылкаБезСхемы, СтрДлина(СхемаДокументооборота) + 1);
	КонецЕсли;
	
	Возврат СсылкаБезСхемы;
	
КонецФункции
