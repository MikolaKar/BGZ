////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, бизнес-процессы и задачи
// Реализует функционал веб-сервиса DMService в части бизнес-процессов и задач
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет основные свойства задачи
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
//   ПравоИзменения - Булево - Истина, если разрешено изменение задачи
//                  - Неопределено, если права требуется получить самостоятельно
// 
Процедура ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Задача, ПравоИзменения = Неопределено) Экспорт
	
	ЗадачаXDTO.name = Задача.Наименование;
	ЗадачаXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.Ссылка);
	
	ЗадачаXDTO.performer = СоздатьОбъектDMBusinessProcessTaskExecutor(
		Задача.Ссылка, 
		Задача.РольИсполнителя, 
		Задача.Исполнитель, 
		"ОсновнойОбъектАдресации", 
		"ДополнительныйОбъектАдресации");
		
	ЗадачаXDTO.dueDate = Задача.СрокИсполнения;
	ЗадачаXDTO.executed = Задача.Выполнена;
	ЗадачаXDTO.endDate = Задача.ДатаИсполнения;
	ЗадачаXDTO.beginDate = Задача.Дата;
	ЗадачаXDTO.businessProcessStep = Строка(Задача.ТочкаМаршрута);
	ЗадачаXDTO.number = Задача.Номер;
	ЗадачаXDTO.executionComment = Задача.РезультатВыполнения;
	ЗадачаXDTO.description = Задача.Описание;
	ЗадачаXDTO.parentBusinessProcess = СоздатьОбъектXDTO("DMBusinessProcess");
	ЗадачаXDTO.parentBusinessProcess.name = Строка(Задача.БизнесПроцесс);
	ЗадачаXDTO.parentBusinessProcess.objectId = 
		ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.БизнесПроцесс);
	Если ПравоИзменения <> Неопределено Тогда 
		ЗадачаXDTO.changeRight = ПравоИзменения;
	Иначе
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Задача.Ссылка, Пользователи.ТекущийПользователь());
		ЗадачаXDTO.changeRight = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	ПередатьЗначениеАвтора(Задача, ЗадачаXDTO);
	ПередатьЗначениеВажности(Задача, ЗадачаXDTO);
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПередатьЗначениеПредметаБизнесПроцессаЗадачи(Задача, ЗадачаXDTO);
	Иначе
		ПередатьЗначениеПредметаБизнесПроцессаЗадачи(Задача.Ссылка, ЗадачаXDTO);
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Задача);
	
КонецПроцедуры

// Заполняет свойства задачи, специфичные для ее типа
// 
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
//   Задача - ЗадачаИсполнителя
// 
Процедура ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(Узел, ЗадачаXDTO, Задача) Экспорт
	
	ИмяТипа = ЗадачаXDTO.Тип().Имя;
	
	ЗадачаXDTO.objectId.type = ИмяТипа;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыПроверки.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаДоработку;
			ЗадачаXDTO.iterationNumber = Задача.БизнесПроцесс.РезультатыПроверки.Количество();
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыСогласования.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
			ЗадачаXDTO.approvalResult.name = Строка(НайденнаяСтрока.РезультатСогласования);
			ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НайденнаяСтрока.РезультатСогласования);
		ИНаче
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		// номер итерации
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		// результат согласования
		ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
		ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.Согласовано);
		ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыСогласования.Согласовано);
		
		СтрокиИтерации = Задача.БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
				ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.НеСогласовано);
				ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыСогласования.НеСогласовано);
				Прервать;
			КонецЕсли;
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				ЗадачаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
				ЗадачаXDTO.approvalResult.name = Строка(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
				ЗадачаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиИтерации Цикл
			СтрокаXDTO = СоздатьОбъектXDTO("DMBusinessProcessApprovalTaskCheckupApprovalResult");
			СтрокаXDTO.approvalComment = Строка.ЗадачаИсполнителя.РезультатВыполнения;
			СтрокаXDTO.approvalPerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(
				Строка.ЗадачаИсполнителя.Ссылка, 
				Строка.ЗадачаИсполнителя.РольИсполнителя, 
				Строка.ЗадачаИсполнителя.Исполнитель, 
				"ОсновнойОбъектАдресации", 
				"ДополнительныйОбъектАдресации");
			СтрокаXDTO.approvalDate = Строка.ЗадачаИсполнителя.ДатаИсполнения;
			СтрокаXDTO.approvalResult = СоздатьОбъектXDTO("DMApprovalResult");
			СтрокаXDTO.approvalResult.name = Строка(Строка.РезультатСогласования);
			СтрокаXDTO.approvalResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.РезультатСогласования);
			ЗадачаXDTO.approvalResults.Добавить(СтрокаXDTO);
		КонецЦикла;	
		
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторноеСогласование;
		КонецЕсли;	
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыУтверждения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
			ЗадачаXDTO.confirmationResult.name = Строка(НайденнаяСтрока.РезультатУтверждения);
			ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НайденнаяСтрока.РезультатУтверждения);
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;	
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;		
		
		ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
		ЗадачаXDTO.confirmationResult.name = Строка(Перечисления.РезультатыУтверждения.Утверждено);
		ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыУтверждения.Утверждено);
		
		СтрокиИтерации = Задача.БизнесПроцесс.РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			ЗадачаXDTO.confirmationComment = Строка.ЗадачаИсполнителя.РезультатВыполнения;
			ЗадачаXDTO.confirmationPerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(
				Строка.ЗадачаИсполнителя.Ссылка, 
				Строка.ЗадачаИсполнителя.РольИсполнителя, 
				Строка.ЗадачаИсполнителя.Исполнитель, 
				"ОсновнойОбъектАдресации", 
				"ДополнительныйОбъектАдресации");
			ЗадачаXDTO.confirmationDate = Строка.ЗадачаИсполнителя.ДатаИсполнения;
			
			Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
				ЗадачаXDTO.confirmationResult = СоздатьОбъектXDTO("DMConfirmationResult");
				ЗадачаXDTO.confirmationResult.name = Строка(Перечисления.РезультатыУтверждения.НеУтверждено);
				ЗадачаXDTO.confirmationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыУтверждения.НеУтверждено);
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторноеУтверждение;
		КонецЕсли;
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskRegistration" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыРегистрации.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
			ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
			ЗадачаXDTO.registrationResult.name = Строка(НайденнаяСтрока.РезультатРегистрации);
			ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(НайденнаяСтрока.РезультатРегистрации);
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;	
	ИначеЕсли ИмяТипа = "DMBusinessProcessRegistrationTaskCheckup" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;		
		
		ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
		ЗадачаXDTO.registrationResult.name = Строка(Перечисления.РезультатыРегистрации.Зарегистрировано);
		ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыРегистрации.Зарегистрировано);
		
		СтрокиИтерации = Задача.БизнесПроцесс.РезультатыРегистрации.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда 
				ЗадачаXDTO.registrationResult = СоздатьОбъектXDTO("DMRegistrationResult");
				ЗадачаXDTO.registrationResult.name = Строка(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
				ЗадачаXDTO.registrationResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗадачаXDTO.returned = НайденнаяСтрока.ОтправленоНаПовторнуюРегистрацию;
		КонецЕсли;
	
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		НайденнаяСтрока = Задача.БизнесПроцесс.РезультатыПроверки.Найти(Задача.Ссылка, "ЗадачаПроверяющего");
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.НомерИтерации;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;		
		СтрокиИтерации = Задача.БизнесПроцесс.РезультатыПроверки.НайтиСтроки(Новый Структура("НомерИтерации", ЗадачаXDTO.iterationNumber));
		Для каждого Строка из СтрокиИтерации Цикл
			СтрокаXDTO = СоздатьОбъектXDTO("DMBusinessProcessPerfomanceTaskCheckupResult");
			СтрокаXDTO.executorTask = ПолучитьЗадачуБизнесПроцесса(Узел, ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Строка.ЗадачаИсполнителя));
			СтрокаXDTO.returned = Строка.ОтправленоНаДоработку;
			СтрокаXDTO.checkComment = Строка.КомментарийПроверяющего;
			ЗадачаXDTO.checkResults.Добавить(СтрокаXDTO);
		КонецЦикла;
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		
		ЗадачаXDTO.resolution = Задача.БизнесПроцесс.Резолюция;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";	
		Запрос.УстановитьПараметр("БизнесПроцесс", 	Задача.БизнесПроцесс);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗадачаXDTO.resolutionPerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(
				Выборка.Ссылка, 
				Выборка.РольИсполнителя, 
				Выборка.Исполнитель, 
				"ОсновнойОбъектАдресации", 
				"ДополнительныйОбъектАдресации");
			ЗадачаXDTO.resolutionDate = Выборка.ДатаИсполнения;
		КонецЕсли;
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskQuestion"
		ИЛИ ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		
		НайденнаяСтрока = Задача.БизнесПроцесс.ЦиклыРассмотрения.Найти(Задача.Ссылка, "Задача");
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			ЗадачаXDTO.iterationNumber = НайденнаяСтрока.Цикл;
		Иначе
			ЗадачаXDTO.iterationNumber = 0;
		КонецЕсли;
		
		ЗадачаXDTO.description = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1%2%3%4%5",
		Задача.БизнесПроцесс.Описание + Символы.ПС,
		Символы.ПС,
		НСтр("ru = 'История вопроса:'") + Символы.ПС,
		"------------------------------------" + Символы.ПС,
		РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(Задача.БизнесПроцесс));

		Если ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
			ЗадачаXDTO.returned = Задача.БизнесПроцесс.ОтправитьНаУточнение;
		КонецЕсли;
		
		ПредметРассмотренияXDTO = СоздатьОбъектXDTO("DMBusinessProcessTask");
		ЗаполнитьОсновныеСвойстваXDTOЗадачи(ПредметРассмотренияXDTO, Задача.БизнесПроцесс.ПредметРассмотрения, Ложь);
		ЗадачаXDTO.issueTask = ПредметРассмотренияXDTO;
		
		// присоединенные файлы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ВладелецФайла",Задача.БизнесПроцесс);
		МассивОбъектовДО = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		НаборКолонокФайлов = Новый Массив;
		НаборКолонокФайлов.Добавить("objectId");
		НаборКолонокФайлов.Добавить("name");
		НаборКолонокФайлов.Добавить("size");
		НаборКолонокФайлов.Добавить("modificationDateUniversal");
		НаборКолонокФайлов.Добавить("extension");
		
		МассивФайлов = ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайлов(МассивОбъектовДО, НаборКолонокФайлов);
		ОбработкаЗапросовXDTOФайлы.ЗаполнитьСписокФайловИзМассива(ЗадачаXDTO, МассивФайлов, НаборКолонокФайлов);
		
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(ЗадачаXDTO, Задача);
	
КонецПроцедуры

// Заполняет процесс на основании предмета и шаблона
// 
// Параметры:
//   БПОбъект - БизнесПроцессОбъект - процесс, требующий заполнения
//   Предмет - Произвольный - предмет процесса
//   ТипШаблона - Строка - имя вида справочника шаблонов. Устарел.
//   ШаблонБизнесПроцесса - СправочникСсылка.Шаблон<...> - шаблон процесса
//
Процедура ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, ТипШаблона, ШаблонБизнесПроцесса) Экспорт
	
	БПОбъект.Заполнить(Неопределено);
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БПОбъект.Ссылка) Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, БПОбъект);
			Если Предмет <> Неопределено Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет, Ложь, Истина);
			КонецЕсли;
			БПОбъект.ЗаполнитьЭтапыПоШаблону(ШаблонБизнесПроцесса);
		Иначе
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, БПОбъект);
			Если Предмет <> Неопределено Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет, Ложь, Истина);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	Иначе
		Если Предмет <> Неопределено Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает задачи по условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse, неявно возвращаемое значение
//   ИмяТипа - Строка - полное имя типа вида Задача.<...>. Устарел.
// Возвращаемое значение:
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокЗадач(Сообщение, Ответ, ИмяТипа) Экспорт

	Попытка
		
		Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
		
		Запрос = Новый Запрос;
		
		ЗадачиПользователя = Ложь;
		ТипизированныеЗадачи = Ложь;
		ВключатьВыполненные = Истина;
		ВключатьОстановленные = Ложь;
		ОтборПоПроцессу = Неопределено;
		ОтборПоНаименованию = Ложь;
		ОтборПоАвтору = Неопределено;
		
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			Если ВРег(Условие.property) = ВРег("byUser") Тогда
				ЗадачиПользователя = Условие.value;
				Если ЗадачиПользователя Тогда // получим исполнителей с учетом делегирования
					Исполнители = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ПараметрыСеанса.ТекущийПользователь);
					Запрос.УстановитьПараметр("Исполнители", Исполнители);
				КонецЕсли;
			ИначеЕсли ВРег(Условие.property) = ВРег("withExecuted") Тогда
				ВключатьВыполненные = Условие.value;
			ИначеЕсли ВРег(Условие.property) = ВРег("withDelayed") Тогда
				ВключатьОстановленные = Условие.value;
			ИначеЕсли ВРег(Условие.property) = ВРег("typed") Тогда
				ТипизированныеЗадачи = Условие.value;
			ИначеЕсли ВРег(Условие.property) = ВРег("target") Тогда
				ОтборПоПредмету = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value); 
				Запрос.УстановитьПараметр("Предмет",ОтборПоПредмету);
			ИначеЕсли ВРег(Условие.property) = Врег("businessProcess") Тогда
				ОтборПоПроцессу = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				Запрос.УстановитьПараметр("БизнесПроцесс", ОтборПоПроцессу);
			ИначеЕсли ВРег(Условие.property) = ВРег("author") Тогда
				Если ТипЗнч(Условие.value) = Тип("ОбъектXDTO") Тогда
					ОтборПоАвтору = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value);
				Иначе 
					ОтборПоАвтору = ПараметрыСеанса.ТекущийПользователь;
				КонецЕсли;
				Запрос.УстановитьПараметр("Автор", ОтборПоАвтору);
			ИначеЕсли ВРег(Условие.property) = ВРег("name") Тогда
				ОтборПоНаименованию = Истина;
				Запрос.УстановитьПараметр("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъектXDTO("DMGetObjectListResponse");
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	* 
		|ИЗ %Таблица%%Условия%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
		
		Источник = "
		|Задача.ЗадачаИсполнителя КАК Задачи
		|";
		Если ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
			ИЛИ ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
			ИЛИ ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
				Источник = Источник + "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
				|				ПО Задачи.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
				|";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Таблица%",Источник);
		
		Условия = "ГДЕ ВЫБОР 
			|	КОГДА &ВключатьВыполненные ТОГДА ИСТИНА ИНАЧЕ Задачи.Выполнена = ЛОЖЬ КОНЕЦ 
			|	И НЕ Задачи.ПометкаУдаления
			|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
			|	И (
			|		Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		Если ВключатьОстановленные Тогда
			Условия = Условия + "
			|		ИЛИ Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)";
		КонецЕсли;
		Условия = Условия + "
		|	)";
		Если ЗадачиПользователя Тогда
			Условия = Условия + "
			|	И (Задачи.ТекущийИсполнитель В (&Исполнители)
			|	ИЛИ 1 В
			|		(ВЫБРАТЬ
			|			1
			|		ИЗ
			|			РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ГДЕ
			|			ИсполнителиЗадач.РольИсполнителя = Задачи.ТекущийИсполнитель
			|			И ИсполнителиЗадач.ОсновнойОбъектАдресации
			|				= Задачи.ТекущийОсновнойОбъектАдресации
			|			И ИсполнителиЗадач.ДополнительныйОбъектАдресации 
			|				= Задачи.ТекущийДополнительныйОбъектАдресации
			|			И ИсполнителиЗадач.Исполнитель В (&Исполнители)))";
		Иначе
			Условия = Условия + "
			|	И (Задачи.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|	ИЛИ Задачи.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка))";
		КонецЕсли;
		Если ОтборПоНаименованию Тогда
			Условия = Условия + " И Задачи.Наименование = &Наименование";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПоПредмету) Тогда
			Условия = Условия + " И Задачи.Предметы.Предмет = &Предмет";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборПоАвтору) Тогда
			Условия = Условия + " И Задачи.Автор = &Автор";
		КонецЕсли;
		
		ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияЗапросаПриПолученииСпискаЗадач(Сообщение, Условия);
		
		Если ЗначениеЗаполнено(ОтборПоПроцессу) Тогда
			Если ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
				ИЛИ ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
				ИЛИ ТипЗнч(ОтборПоПроцессу) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
				Условия = Условия + " И ДанныеБизнесПроцессов.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс";
            Иначе
				Условия = Условия + " И Задачи.БизнесПроцесс = &БизнесПроцесс";
			КонецЕсли;
		КонецЕсли;
		Условия = СтрЗаменить(Условия, "ГДЕ И","ГДЕ");
		Условия = ?(Условия = "ГДЕ","",Условия);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Условия%",Условия);	
		
		Запрос.УстановитьПараметр("ВключатьВыполненные", ВключатьВыполненные);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаОтвета = СоздатьОбъектXDTO("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			Если ТипизированныеЗадачи Тогда
				ТипОбъектаXDTO = ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Выборка);
				ЗадачаXDTO = СоздатьОбъектXDTO(ТипОбъектаXDTO);
				ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Выборка);
				ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(Узел, ЗадачаXDTO, Выборка);
			Иначе
				ЗадачаXDTO = СоздатьОбъектXDTO("DMBusinessProcessTask");
				ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, Выборка, Истина);
			КонецЕсли;
			СтрокаОтвета.object = ЗадачаXDTO;
			Ответ.items.Добавить(СтрокаОтвета);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка задач'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает бизнес-процессы по условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetObjectListRequest
//   Ответ - ОбъектXDTO типа DMGetObjectListResponse, неявно возвращаемое значение
//   ИмяТипа - Строка - полное имя типа вида БизнесПроцесс.<...>.
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetObjectListResponse или DMError
//
Функция ПолучитьСписокБизнесПроцессов(Сообщение, Ответ, ИмяТипа) Экспорт
	
	Попытка
		
		ОтборПоПредмету = Неопределено;
		ВключатьВыполненные = Истина;
		ВключатьОстановленные = Ложь;
		ОтборПоНаименованию = Ложь;
		Запрос = Новый Запрос;
		
		Для Каждого Условие Из Сообщение.query.conditions Цикл
			Если ВРег(Условие.property) = ВРег("target") Тогда
				ОтборПоПредмету = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Условие.value); 
				Запрос.УстановитьПараметр("Предмет", ОтборПоПредмету);
			ИначеЕсли ВРег(Условие.property) = ВРег("withExecuted") Тогда
				ВключатьВыполненные = Условие.value;
			ИначеЕсли ВРег(Условие.property) = ВРег("withDelayed") Тогда
				ВключатьОстановленные = Условие.value;
			ИначеЕсли ВРег(Условие.property) = ВРег("name") Тогда
				ОтборПоНаименованию = Истина;
				Запрос.УстановитьПараметр("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъектXDTO("DMGetObjectListResponse");
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка, Наименование 
		|ИЗ %Таблица% %Условия%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Условия = "ГДЕ НЕ ПометкаУдаления";
		Если ЗначениеЗаполнено(ОтборПоПредмету) Тогда
			Если Сообщение.type = "DMBusinessProcessIssuesSolution" Тогда
				Условия = Условия + " И ПредметРассмотрения = &Предмет";
			Иначе
				Условия = Условия + " И Предметы.Предмет = &Предмет";
			КонецЕсли;	
		КонецЕсли;
		
		ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияЗапросаПриПолученииСпискаПроцессов(Сообщение, Условия);
	
		Если НЕ ВключатьВыполненные Тогда
			Условия = Условия + " И Завершен = Ложь";
		КонецЕсли;
		Условия = Условия + " И (
			|		Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		Если ВключатьОстановленные Тогда
			Условия = Условия + "
			|		ИЛИ Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)";
		КонецЕсли;
		Условия = Условия + "
		| )";
		Если ОтборПоНаименованию Тогда
			Условия = Условия + " И Наименование Подобно ""%""+&Наименование+""%""";
		КонецЕсли;
		
		Условия = СтрЗаменить(Условия, "ГДЕ И","ГДЕ");
		Условия = ?(Условия = "ГДЕ","",Условия);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Условия%",Условия);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Таблица%",ИмяТипа);
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаОтвета = СоздатьОбъектXDTO("DMObjectListItem");
			СтрокаОтвета.canHaveChildren = Ложь;
			СтрокаОтвета.isFolder = Ложь;
			ПроцессXDTO = СоздатьОбъектXDTO(Сообщение.type);
			ПроцессXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(Выборка.Ссылка);
			ПроцессXDTO.name = Выборка.Наименование;
			ПередатьОбщиеРеквизитыБизнесПроцесса(Выборка.Ссылка, ПроцессXDTO);
			Если Сообщение.type = "DMBusinessProcessIssuesSolution" Тогда
				ПроцессXDTO.perfomanceHistory = 
					РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(Выборка.Ссылка);
			КонецЕсли;
			СтрокаОтвета.object = ПроцессXDTO;
			Ответ.items.Добавить(СтрокаОтвета);
		КонецЦикла;	
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении списка задач'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает дерево бизнес-процессов и их задач по условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetTasksTreeRequest
//   Ответ - ОбъектXDTO типа DMGetTasksTreeResponse, неявно возвращаемое значение
//   ИмяТипа - Строка - полное имя типа вида БизнесПроцесс.<...>.
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetTasksTreeResponse или DMError
// 
Функция ПолучитьСписокЗадачПоОбъекту(Сообщение) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMGetTasksTreeResponse");
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	
	МассивБизнесПроцессов = ПолучитьБизнесПроцессыПоЗапросу(Узел, Сообщение.query);
	Если МассивБизнесПроцессов.Количество() > 0 Тогда
		Дерево = Новый ДеревоЗначений;
		
		Дерево.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
		Дерево.Колонки.Добавить("Ссылка");
		Дерево.Колонки.Добавить("РезультатЗавершения");
		
		Для Каждого Строка Из МассивБизнесПроцессов Цикл
			БП = Строка.Ссылка;
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.ID = Строка(БП.УникальныйИдентификатор());
			НоваяСтрока.Ссылка = БП;
			НоваяСтрока.РезультатЗавершения = Строка.РезультатЗавершения;
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БП, Неопределено); 
		КонецЦикла;		
		
		ПостроитьИзДереваDMGetTaskListResponse(Дерево.Строки, Ответ);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

// Получает HTML-представление карточки задачи
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   Строка - ОбъектXDTO типа DMObjectHTMLPresentation, содержащий HTML-представление задачи
//
Функция ПолучитьHTMLФормы(ОбъектИд) Экспорт
	 
	СсылкаНаЗадачу = Неопределено;
	СсылкаНаЗадачу = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Ответ = СоздатьОбъектXDTO("DMObjectHTMLPresentation");
	Ответ.htmlView = "";
	Ответ.name = СсылкаНаЗадачу.Наименование;
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаЗадачу);

	Если НЕ ЗначениеЗаполнено(СсылкаНаЗадачу) Тогда
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(СсылкаНаЗадачу);
	
	Представление = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу, ПараметрыФормы.ИмяФормы);
	Ответ.htmlView = Представление;
	Возврат Ответ;
	
КонецФункции

// Получает заполненный объект XDTO бизнес-процесса по его ObjectId
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   ОбъектXDTO типа, наследующего DMBusinessProcess, с заполненными свойствами
//
Функция ПолучитьБизнесПроцесс(Узел, ОбъектИд) Экспорт
	
	СсылкаНаБизнесПроцесс = Неопределено;
	СсылкаНаБизнесПроцесс = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаБизнесПроцесс)
		ИЛИ СсылкаНаБизнесПроцесс.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектБизнесПроцесс = СсылкаНаБизнесПроцесс.ПолучитьОбъект();
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБизнесПроцесс(Узел, ОбъектИд, ОбъектБизнесПроцесс);
	Если Ответ <> Неопределено Тогда 
		Возврат Ответ;
	КонецЕсли;
	
	Если ОбъектИд.type = "DMBusinessProcessPerformance" Тогда
		Ответ = ПолучитьБПИсполнение(Узел, ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessPerformance_1.2.1.11" Тогда 
		Ответ = ПолучитьБПИсполнение_1_2_1_11(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessAcquaintance" Тогда
		Ответ = ПолучитьБПОзнакомление(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessOrder" Тогда
		Ответ = ПолучитьБППоручение(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessConsideration" Тогда
		Ответ = ПолучитьБПРассмотрение(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessRegistration" Тогда
		Ответ = ПолучитьБПРегистрация(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessApproval" Тогда
		Ответ = ПолучитьБПСогласование(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessApproval_1_2_1_11" Тогда
		Ответ = ПолучитьБПСогласование_1_2_1_11(ОбъектБизнесПроцесс);		
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessConfirmation" Тогда
		Ответ = ПолучитьБПУтверждение(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаВнутреннегоДокумента(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаВходящегоДокумента(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Ответ = ПолучитьБПОбработкаИсходящегоДокумента(ОбъектБизнесПроцесс);
		
	ИначеЕсли ОбъектИд.type = "DMBusinessProcessIssuesSolution" Тогда
		Ответ = ПолучитьБПРешениеВопросовВыполненияЗадач(ОбъектБизнесПроцесс);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает объект XDTO, соответствующий роли исполнителя, по его ObjectId
// 
// Параметры:
//   ОбъектИд - ОбъектXDTO типа DMObjectId
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessExecutorRole, заполненные данными роли
//
Функция ПолучитьРольИсполнителей(ОбъектИД) Экспорт
	
	СсылкаНаРольИсполнителя = Неопределено;
	СсылкаНаРольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessExecutorRole");
	Ответ.name = СсылкаНаРольИсполнителя.Наименование;
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаРольИсполнителя);
	
	Ответ.withoutAddressingObjects = СсылкаНаРольИсполнителя.ИспользуетсяБезОбъектовАдресации;
	Ответ.withAddressingObjects = СсылкаНаРольИсполнителя.ИспользуетсяСОбъектамиАдресации;
	
	Ответ.mainAddressingObjectName = СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.Наименование;
	Ответ.secondaryAddressingObjectName = СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.Наименование;
	Если Ответ.withAddressingObjects Тогда
		Если СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из СсылкаНаРольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения.Типы() Цикл 
				Если Строка(ТипЗначения) = "Корреспондент" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMCorrespondent";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Подразделение" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMSubdivision";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Организация" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMOrganization";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Проект" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMProject";
					Ответ.mainAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения <> Неопределено Тогда
			Для Каждого ТипЗначения Из СсылкаНаРольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения.Типы() Цикл 
				Если Строка(ТипЗначения) = "Корреспондент" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMCorrespondent";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Подразделение" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMSubdivision";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Организация" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMOrganization";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				ИначеЕсли Строка(ТипЗначения) = "Проект" Тогда
					ОписаниеТипа = СоздатьОбъектXDTO("DMType");
					ОписаниеТипа.presentation = Строка(ТипЗначения);
					ОписаниеТипа.xdtoClassName = "DMProject";
					Ответ.secondaryAddressingObjectType.Добавить(ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Передает реквизиты, общие для всех процессов
// 
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Объект) Экспорт
	
	ПередатьЗначениеАвтора(СсылкаНаБизнесПроцесс, Объект);
	ПередатьЗначениеВажности(СсылкаНаБизнесПроцесс, Объект);
	Объект.beginDate = ОбработатьДату(СсылкаНаБизнесПроцесс.ДатаНачала);
	Объект.endDate = ОбработатьДату(СсылкаНаБизнесПроцесс.ДатаЗавершения);
	ПередатьЗначениеПредметаБизнесПроцессаЗадачи(СсылкаНаБизнесПроцесс, Объект);
	Если НЕ (ТипЗнч(СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
			ИЛИ ТипЗнч(СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач")) Тогда 
		ПередатьЗначениеШаблонаБизнесПроцесса(СсылкаНаБизнесПроцесс, Объект);
		Объект.blockedByTemplate = (ШаблоныБизнесПроцессов.
			ДоступностьПоШаблону(СсылкаНаБизнесПроцесс) <> Истина);
	Иначе
		Объект.blockedByTemplate = Ложь;
	КонецЕсли;
	Объект.started = СсылкаНаБизнесПроцесс.Стартован;
	Объект.completed = СсылкаНаБизнесПроцесс.Завершен;
	Если СсылкаНаБизнесПроцесс.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
		Объект.description = СсылкаНаБизнесПроцесс.Описание;
	КонецЕсли;
	Если СсылкаНаБизнесПроцесс.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда
		Если ТипЗнч(СсылкаНаБизнесПроцесс.СрокИсполнения) = Тип("Число") Тогда
			Объект.dueDate = ОбработатьДату(СсылкаНаБизнесПроцесс.СрокИсполненияДатой);
		Иначе
			Объект.dueDate = ОбработатьДату(СсылкаНаБизнесПроцесс.СрокИсполнения);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.dueTimeEnabled = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	Объект.stateEnabled = Ложь;
	
	ОбработкаЗапросовXDTOПереопределяемый.ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Объект);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет общие реквизиты бизнес-процесса по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO, наследующего DMBusinessProcess - источник данных для заполнения
// 
Процедура УстановитьШапкуБизнесПроцесса(БизнесПроцессОбъект, ОбъектXDTO) Экспорт
	
	БизнесПроцессОбъект.Наименование = ОбъектXDTO.name;
	Если БизнесПроцессОбъект.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
		БизнесПроцессОбъект.Описание = ОбъектXDTO.description;
	КонецЕсли;
	Если БизнесПроцессОбъект.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда
		БизнесПроцессОбъект.СрокИсполнения = ?(ОбъектXDTO.dueDate = Неопределено, Дата(1, 1, 1), ОбъектXDTO.dueDate);
	КонецЕсли;
	Если ОбъектXDTO.Установлено("importance") Тогда
    	БизнесПроцессОбъект.Важность = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.importance.objectId);
	КонецЕсли;
	Если ОбъектXDTO.Установлено("target") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.target.objectId);
		Если ТипЗнч(БизнесПроцессОбъект) <> Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач") Тогда
			Если ТипЗнч(БизнесПроцессОбъект) = Тип("БизнесПроцессОбъект.КомплексныйПроцесс")
				и ОбъектXDTO.Установлено("businessProcessTemplate") Тогда
				БизнесПроцессОбъект.Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.businessProcessTemplate.objectId);
				Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(БизнесПроцессОбъект.Шаблон, БизнесПроцессОбъект);
				Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Предмет, Ложь, Истина);
			Иначе
				Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Предмет);
			КонецЕсли;
		Иначе
			БизнесПроцессОбъект.ПредметРассмотрения = Предмет;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектXDTO.Установлено("author") Тогда
		БизнесПроцессОбъект.Автор = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.author.objectId);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БизнесПроцессОбъект.Дата) Тогда
		БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ОбъектXDTO.businessProcessTemplate <> Неопределено Тогда
		Если ТипЗнч(БизнесПроцессОбъект) <> Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач") Тогда
			БизнесПроцессОбъект.Шаблон = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.businessProcessTemplate.objectId);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.УстановитьШапкуБизнесПроцесса(БизнесПроцессОбъект, ОбъектXDTO);
	
КонецПроцедуры

// Передает значение контролера процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеКонтролера(Ссылка, Объект) Экспорт
	
	Объект.controller = СоздатьОбъектDMBusinessProcessTaskExecutor(Ссылка, Ссылка.Контролер, Ссылка.Контролер, "ОсновнойОбъектАдресацииКонтролера", "ДополнительныйОбъектАдресацииКонтролера");
		
КонецПроцедуры

// Заполняет реквизит Контролер и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеКонтролера(БизнесПроцессОбъект, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено("controller") Тогда
		Если ОбъектXDTO.controller.Установлено("role") Тогда
			БизнесПроцессОбъект.Контролер = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.role.objectId);
			Если ОбъектXDTO.controller.Установлено("mainAddressingObject") Тогда
				БизнесПроцессОбъект.ОсновнойОбъектАдресацииКонтролера = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.mainAddressingObject.objectId);
			КонецЕсли;
			Если ОбъектXDTO.controller.Установлено("secondaryAddressingObject") Тогда
				БизнесПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.secondaryAddressingObject.objectId);
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.controller.Установлено("user") Тогда
			БизнесПроцессОбъект.Контролер = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.controller.user.objectId);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит Исполнитель в строке ТЧ Исполнители и связанные с ним реквизиты по данным объекта XDTO
// 
// Параметры:
//   СтрокаСписка - Строка табличной части "Исполнители", подлежащая заполнению
//   ИсполнительXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеИсполнителяВСпискеИсполнителей(СтрокаСписка, ИсполнительXDTO) Экспорт
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		СтрокаСписка.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		СтрокаСписка.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
		Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
			СтрокаСписка.ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);	
		КонецЕсли;
		Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
			СтрокаСписка.ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные бизнес-процесса и возвращает повторно заполненный объект того же типа
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа, наследующего DMBusinessProcess
// Возвращаемое значение:
//   БизнесПроцессСсылка - ссылка на записанный бизнес-процесс
//
Функция ЗаписатьБизнесПроцесс(Узел, Объект, СоздатьНовый) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTOПереопределяемый.ЗаписатьБизнесПроцесс(Узел, Объект, СоздатьНовый);
		Если Ответ <> Неопределено Тогда
			Возврат Ответ;
		КонецЕсли;

		Если ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessPerformance") Тогда
			Ссылка = ЗаписатьБПИсполнение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessPerformance_1.2.1.11") Тогда
			Ссылка = ЗаписатьБПИсполнение_1_2_1_11(Объект, СоздатьНовый);			
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessAcquaintance") Тогда
			Ссылка = ЗаписатьБПОзнакомление(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessOrder") Тогда
			Ссылка = ЗаписатьБППоручение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessConsideration") Тогда
			Ссылка = ЗаписатьБПРассмотрение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessRegistration") Тогда
			Ссылка = ЗаписатьБПРегистрация(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessApproval") Тогда
			Ссылка = ЗаписатьБПСогласование(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessApproval_1.2.1.11") Тогда
			Ссылка = ЗаписатьБПСогласование_1_2_1_11(Объект, СоздатьНовый);			
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessConfirmation") Тогда
			Ссылка = ЗаписатьБПУтверждение(Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessIssuesSolution") Тогда
			Ссылка = ЗаписатьБПРешениеВопросовВыполненияЗадач(Объект, СоздатьНовый);

		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessInternalDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаВнутреннегоДокумента(Узел, Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessIncomingDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаВходящегоДокумента(Узел, Объект, СоздатьНовый);
			
		ИначеЕсли ОбработкаЗапросовXDTO.ПроверитьТип(Объект, "DMBusinessProcessOutgoingDocumentProcessing") Тогда
			Ссылка = ЗаписатьБПОбработкаИсходящегоДокумента(Узел, Объект, СоздатьНовый);
			
		КонецЕсли;
		
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка);
		Ответ = ПолучитьБизнесПроцесс(Узел, ОбъектИд);
					
		Возврат Ответ;
		
	Исключение
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка сохранения процесса'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
	КонецПопытки;
	
КонецФункции

// Запускает бизнес-процесс
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа, наследующего DMBusinessProcess
// Возвращаемое значение:
//   ОбъектXDTO типа DMLaunchBusinessProcessResponse или DMError
//
Функция СтартоватьБизнесПроцесс(Узел, Объект) Экспорт
	
	Попытка
		
		Ответ = СоздатьОбъектXDTO("DMLaunchBusinessProcessResponse");
		
		НачатьТранзакцию();
		РезультатЗаписи = ЗаписатьБизнесПроцесс(Узел, Объект, НЕ ЗначениеЗаполнено(Объект.objectID.id));		
		
		Если ОбработкаЗапросовXDTO.ПроверитьТип(РезультатЗаписи, "DMError") Тогда
			Возврат РезультатЗаписи;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.objectId.id) Тогда
			ObjectIDБизнесПроцесса = РезультатЗаписи.objectId;
		Иначе
			ObjectIDБизнесПроцесса = Объект.ObjectId;
		КонецЕсли;
		
		РезультатЗапуска = ЗапуститьБизнесПроцесс(ObjectIDБизнесПроцесса);
		ЗафиксироватьТранзакцию();
		
		Ответ.businessProcess = РезультатЗапуска;
		
		Возврат Ответ;
		
	Исключение
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка запуска процесса'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Получает бизнес-процесс, заполненный по умолчанию либо по шаблону, если подходит единственный
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetNewBusinessProcessRequest
//   ТипОтвета - Строка - имя XDTO-типа желаемого ответа, обычно DMGetNewBusinessProcessResponse 
// Возвращаемое значение:
//   ОбъектXDTO типа ТипОтвета, обычно DMGetNewBusinessProcessResponse
// 
Функция ПолучитьСостояниеНовогоОбъекта(Сообщение, ТипОтвета) Экспорт
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьСостояниеНовогоОбъекта(Сообщение, ТипОтвета);
	Узел = ОбработкаЗапросовXDTO.УзелИнтегрированнойСистемы(Сообщение);
	
	Если Ответ <> Неопределено Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Ответ = СоздатьОбъектXDTO(ТипОтвета);
	
	Тип = Сообщение.type;
	
	Предмет = Неопределено;
	Если Сообщение.Установлено("targetId") Тогда
		Предмет = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.targetId);
	КонецЕсли;
	
	ШаблонБизнесПроцесса = Неопределено;
	Если ОбработкаЗапросовXDTO.ПроверитьТип(Сообщение, "DMGetBusinessProcessByTemplateRequest") Тогда
		ШаблонБизнесПроцесса = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTemplateId);
	КонецЕсли;
		
	Если Тип = "DMBusinessProcessPerformance"
		ИЛИ Тип = "DMBusinessProcessPerformance_1.2.1.11" Тогда
		БПОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныИсполнения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПИсполнение(Узел, БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessAcquaintance" Тогда
		БПОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныОзнакомления", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПОзнакомление(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessOrder" Тогда
		БПОбъект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныПоручения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБППоручение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessIssuesSolution" Тогда
		БПОбъект = БизнесПроцессы.РешениеВопросовВыполненияЗадач.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет);
		Ответ.object = ПолучитьБПРешениеВопросовВыполненияЗадач(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessConsideration" Тогда
		БПОбъект = БизнесПроцессы.Рассмотрение.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныРассмотрения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПРассмотрение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessRegistration" Тогда
		БПОбъект = БизнесПроцессы.Регистрация.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныРегистрации", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПРегистрация(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessApproval" 
		ИЛИ Тип = "DMBusinessProcessApproval_1.2.1.11" Тогда
		БПОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныСогласования", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПСогласование(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessConfirmation" Тогда
		БПОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
		ЗаполнитьНовыйБизнесПроцессПоШаблону(БПОбъект, Предмет, "ШаблоныУтверждения", ШаблонБизнесПроцесса);
		Ответ.object = ПолучитьБПУтверждение(БПОбъект);
		
	ИначеЕсли Тип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаВнутреннегоДокумента.СоздатьБизнесПроцесс();
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - " + Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(Неопределено);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(БПОбъект.Предметы, БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаВнутреннегоДокумента(БПОбъект);
	ИначеЕсли Тип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаВходящегоДокумента.СоздатьБизнесПроцесс();
		Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - " + Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(Неопределено);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(БПОбъект.Предметы, БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаВходящегоДокумента(БПОбъект);
	ИначеЕсли Тип = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		БПОбъект = БизнесПроцессы.ОбработкаИсходящегоДокумента.СоздатьБизнесПроцесс();
	    Если ЗначениеЗаполнено(Предмет) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, Предмет);
			Если ТипЗнч(БПОбъект.Предметы[0].Предмет) <> ТипЗнч(Предмет) Тогда
				ВызватьИсключение("Невозможно создать процесс для данного типа документов - " + Предмет.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		БПОбъект.Заполнить(Неопределено);
		МассивШаблонов = МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(БПОбъект.Предметы, БПОбъект.Ссылка.Метаданные().Имя);
		Если МассивШаблонов.Количество() = 1 Тогда
			Если НЕ ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
				ШаблонБизнесПроцесса = МассивШаблонов[0];
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ШаблонБизнесПроцесса) Тогда
			БПОбъект.ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
		КонецЕсли;
		Ответ.object = ПолучитьБПОбработкаИсходящегоДокумента(БПОбъект);
	Иначе
		ВызватьИсключение("Данный тип процессов не поддерживается.");
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получает список шаблонов бизнес-процессов, удовлетворяющих условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesResponse
// 
Функция ПолучитьШаблоныБизнесПроцесса(Сообщение) Экспорт
	
	Ответ = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьШаблоныБизнесПроцесса(Сообщение);
	Если Ответ <> Неопределено Тогда
		Если Ответ.businessProcessTemplates.Количество() > 0 Тогда
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = СоздатьОбъектXDTO("DMGetBusinessProcessTemplatesResponse");
	
	Тип = Сообщение.businessProcessType;
	
	ПредметВид = Неопределено;
	
	Если Сообщение.Установлено("businessProcessTargetId") Тогда
		ПредметВид = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTargetId);
	КонецЕсли;
	
	МассивШаблонов = Новый Массив;
	
	Если ЗначениеЗаполнено(ПредметВид) 
		И (ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВнутреннихДокументов")
			Или ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВходящихДокументов")
			Или ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыИсходящихДокументов")) Тогда
		Если ЗначениеЗаполнено(Тип) Тогда
			МассивШаблонов = ПолучитьШаблоныПоВидуДокумента(ПредметВид, Тип);
		Иначе
			МассивШаблонов = Новый Массив;
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныИсполнения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныОзнакомления");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныПоручения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныРассмотрения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныРегистрации");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныСогласования");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныУтверждения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныПриглашения");
			ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ШаблоныКомплексныхБизнесПроцессов");
			
			Если ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаВнутреннегоДокумента");
			ИначеЕсли ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаВходящегоДокумента");
			ИначеЕсли ТипЗнч(ПредметВид) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
				ДобавитьШаблоныПоВидуДокумента(МассивШаблонов, ПредметВид, "ОбработкаИсходящегоДокумента");
			КонецЕсли;
		КонецЕсли;
	Иначе
				
		Если Тип = "DMBusinessProcessPerformance"
			ИЛИ Тип = "DMBusinessProcessPerformance_1.2.1.11" Тогда
			БПОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныИсполнения", Ложь);
		
		ИначеЕсли Тип = "DMBusinessProcessAcquaintance" Тогда
			БПОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныОзнакомления", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessOrder" Тогда
			БПОбъект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныПоручения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessConsideration" Тогда
			БПОбъект = БизнесПроцессы.Рассмотрение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныРассмотрения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessRegistration" Тогда
			БПОбъект = БизнесПроцессы.Регистрация.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныРегистрации", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessApproval"
			ИЛИ Тип = "DMBusinessProcessApproval_1.2.1.11" Тогда
			БПОбъект = БизнесПроцессы.Согласование.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныСогласования", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessConfirmation" Тогда
			БПОбъект = БизнесПроцессы.Утверждение.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ШаблоныУтверждения", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessInternalDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаВнутреннегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаВнутреннегоДокумента", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаВходящегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаВходящегоДокумента", Ложь);
			
		ИначеЕсли Тип = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
			БПОбъект = БизнесПроцессы.ОбработкаИсходящегоДокумента.СоздатьБизнесПроцесс();
			Если ЗначениеЗаполнено(ПредметВид) Тогда
				Мультипредметность.ПередатьПредметыПроцессу(БПОбъект, ПредметВид);
			КонецЕсли;
			МассивШаблонов = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(ПредметВид, "ОбработкаИсходящегоДокумента", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Шаблон Из МассивШаблонов Цикл
		ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
		ОбъектШаблонXDTO.name = Шаблон.Наименование;
		ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Шаблон.Ссылка);
		Ответ.BusinessProcessTemplates.Добавить(ОбъектШаблонXDTO);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает дерево шаблонов бизнес-процессов, удовлетворяющих условиям отбора
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeResponse 
// 
Функция ПолучитьДеревоШаблоновБизнесПроцессов(Сообщение) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMGetBusinessProcessTemplatesTreeResponse");
	
	ПредметБП = Неопределено;
	СозданиеБезПредмета = Истина;
	Если Сообщение.Установлено("businessProcessTargetId") Тогда
		ПредметБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.businessProcessTargetId);
		Если ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВходящиеДокументы") 
			ИЛИ ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВнутренниеДокументы") 
			ИЛИ ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ВидДокументаПредмета = ПредметБП.ВидДокумента;
		КонецЕсли;
		СозданиеБезПредмета = Ложь;
	КонецЕсли;
	
	МассивРекомендованныхШаблонов = Новый Массив;
	МассивОбщихШаблонов = Новый Массив;
	
	// Получение шаблонов БП по виду предмета
	ШаблоныПоПредмету = Новый Массив;
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныИсполнения");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныОзнакомления");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныПоручения");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныРассмотрения");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныРегистрации");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныСогласования");
	ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ШаблоныУтверждения");
	
	ОбработкаЗапросовXDTOПереопределяемый.ДополнитьСписокШаблоновПоПредмету(ШаблоныПоПредмету, ПредметБП);
	
	Если ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаВнутреннегоДокумента");
	ИначеЕсли ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаВходящегоДокумента");
	ИначеЕсли ТипЗнч(ПредметБП) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, ПредметБП, "ОбработкаИсходящегоДокумента");
	КонецЕсли;
	
	КоличествоРекомендуемыхШаблонов = ШаблоныПоПредмету.Количество();
	Если КоличествоРекомендуемыхШаблонов > 0 Тогда
		ГруппаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
		ГруппаШаблонов.name = НСтр("ru = 'Рекомендованные шаблоны'");
		ГруппаШаблонов.hint = СформироватьСводкуПоГруппеЭлементов(ГруппаШаблонов.name, ВидДокументаПредмета);
		// есть шаблоны, привязанные к виду предмета процесса
		// они отображаются в группе "Рекомендованные шаблоны"
		Для Каждого Шаблон Из ШаблоныПоПредмету Цикл
			СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
			СтрокаШаблонов.name = Шаблон.Наименование;
			СтрокаШаблонов.hint = СформироватьСводкуПоШаблону(Шаблон.Ссылка);
			СтрокаШаблонов.businessProcessType = ПолучитьТипПроцессаXDTOПоШаблону(Шаблон.Ссылка);
			
			ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
			ОбъектШаблонXDTO.name = Шаблон.Наименование;
			ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Шаблон.Ссылка);
			СтрокаШаблонов.template = ОбъектШаблонXDTO;
			
			ГруппаШаблонов.elements.Добавить(СтрокаШаблонов);
			
			МассивРекомендованныхШаблонов.Добавить(Шаблон.Ссылка);
		КонецЦикла;
		Ответ.businessProcessTemplatesTree.Добавить(ГруппаШаблонов);
	КонецЕсли;
	
	// Получение шаблонов БП, не привязанных к видам документов
	ПолучитьНеПривязанныеШаблоны(Ответ, МассивОбщихШаблонов,СозданиеБезПредмета,ПредметБП, ВидДокументаПредмета);

	// Получение пустых БП, которые привязаны к БП в меню "Создать на основании"
	// они добавляются в группу "Незаполненные процессы"
	ПолучитьНезаполненныеПроцессы(Ответ, ПредметБП, ВидДокументаПредмета);
	
	// Получение шаблонов БП, которые настроены для других видов документов
	// они попадают в группу "Другие процессы"
	ПолучитьОстальныеШаблоны(Ответ, МассивОбщихШаблонов, МассивРекомендованныхШаблонов, СозданиеБезПредмета, ПредметБП, ВидДокументаПредмета);
	
	Возврат Ответ;
	
КонецФункции

// Изменяет и записывает задачу по объекту DMBusinessProcessTask
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
// Возвращаемое значение:
//   ОбъектXDTO того же типа, описывающий измененную задачу, или DMError
//
Функция ИзменитьЗадачу(Узел, ОбъектXDTO) Экспорт
	
	Попытка 
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Задача = Ссылка.ПолучитьОбъект();
		
		ЗаполнитьОсновныеРеквизитыЗадачи(Задача, ОбъектXDTO);
		
		Если ОбъектXDTO.executed и НЕ Задача.Выполнена Тогда
			ВыполнитьЗадачу(Задача, ОбъектXDTO);
		Иначе
			Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
				БизнесПроцесс = Задача.БизнесПроцесс.ПолучитьОбъект();
				Исполнители = Новый ТаблицаЗначений;
				Исполнители.Колонки.Добавить("НомерИтерации");
				Исполнители.Колонки.Добавить("ЗадачаИсполнителя");
				Исполнители.Колонки.Добавить("ЗадачаПроверяющего");
				Исполнители.Колонки.Добавить("ОтправленоНаДоработку");
				Исполнители.Колонки.Добавить("КомментарийПроверяющего");
				Для каждого СтрокаXDTO из ОбъектXDTO.checkResults Цикл
					СтрокаПроверки = Исполнители.Добавить();
					СтрокаПроверки.НомерИтерации = ОбъектXDTO.iterationNumber;
					СтрокаПроверки.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СтрокаXDTO.executorTask.objectId);
					СтрокаПроверки.ЗадачаПроверяющего = Задача.Ссылка;
					СтрокаПроверки.ОтправленоНаДоработку = СтрокаXDTO.returned;
					СтрокаПроверки.КомментарийПроверяющего = СтрокаXDTO.checkComment;
				КонецЦикла;
				БизнесПроцесс.ДополнительныеСвойства.Вставить("Исполнители", Исполнители);
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача.Ссылка);
				УстановитьПривилегированныйРежим(Истина);
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс.Ссылка);
				БизнесПроцесс.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			Задача.Записать();
		КонецЕсли;
	
		ОбъектИд = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Задача.Ссылка);
		Возврат ПолучитьЗадачуБизнесПроцесса(Узел, ОбъектИд);
	
	Исключение
		
		Ошибка = ОбработкаЗапросовXDTO.СоздатьОбъект("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при изменении задачи'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;	
	
КонецФункции

// Выполняет задачу с заданным результатом  
// 
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
// Возвращаемое значение:
//   Нет
//
Функция ВыполнитьЗадачу(Задача, ОбъектXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	БизнесПроцесс = Задача.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцесс.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача.Ссылка);
	
	Если ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатСогласования",ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.approvalResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ПовторитьСогласование", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатУтверждения", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.confirmationResult.objectId));
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ПовторитьУтверждение", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
			Если ОбъектXDTO.Установлено("registrationResult") Тогда
				БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатРегистрации", ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.registrationResult.objectId));
			Иначе
				БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатРегистрации", Перечисления.РезультатыРегистрации.Зарегистрировано);
			КонецЕсли;
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
			Если ОбъектXDTO.Установлено("returned") Тогда
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ПовторитьРегистрацию", ОбъектXDTO.returned);
			Иначе
				БизнесПроцесс.ДополнительныеСвойства.Вставить("ПовторитьРегистрацию", Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ОтправленоНаДоработку", ОбъектXDTO.returned);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатВыполнения",ОбъектXDTO.executionComment);
		ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("РезультатВыполнения",ОбъектXDTO.resolution);
		КонецЕсли;
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ВариантРассмотрения", Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
		ДанныеЗаполнения.Вставить("ВариантОбработкиРезолюции", Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);		
		БизнесПроцесс.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
		БизнесПроцесс.ДополнительныеСвойства.Вставить("ДанныеЗаполнения",ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
			Исполнители = Новый ТаблицаЗначений;
			Исполнители.Колонки.Добавить("НомерИтерации");
			Исполнители.Колонки.Добавить("ЗадачаИсполнителя");
			Исполнители.Колонки.Добавить("ЗадачаПроверяющего");
			Исполнители.Колонки.Добавить("ОтправленоНаДоработку");
			Исполнители.Колонки.Добавить("КомментарийПроверяющего");
			Для каждого СтрокаXDTO из ОбъектXDTO.checkResults Цикл
				СтрокаПроверки = Исполнители.Добавить();
				СтрокаПроверки.НомерИтерации = ОбъектXDTO.iterationNumber;
				СтрокаПроверки.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СтрокаXDTO.executorTask.objectId);
				СтрокаПроверки.ЗадачаПроверяющего = Задача.Ссылка;
				СтрокаПроверки.ОтправленоНаДоработку = СтрокаXDTO.returned;
				СтрокаПроверки.КомментарийПроверяющего = СтрокаXDTO.checkComment;
				Если НЕ СтрокаПроверки.ОтправленоНаДоработку Тогда
					СтрокаИсполнителя = БизнесПроцесс.Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя);
					Если СтрокаИсполнителя <> Неопределено Тогда
						БизнесПроцесс.Исполнители.Удалить(СтрокаИсполнителя);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			БизнесПроцесс.ДополнительныеСвойства.Вставить("Исполнители", Исполнители);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Задача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Если Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ОтправитьНаУточнение", ОбъектXDTO.returned);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаполнитьЗадачуПриВыполнении(Задача, ОбъектXDTO, БизнесПроцесс);
	
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс.Ссылка);
	БизнесПроцесс.Записать();
	Задача.ВыполнитьЗадачу();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Перенаправляет переданные задачи указанному пользователю	
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMRedirectTasksRequest
// Возвращаемое значение:
//   ОбъектXDTO типа DMOK в случае успеха или DMError в противном случае
//
Функция ПеренаправитьЗадачи(Сообщение) Экспорт
	
	Попытка
		
		Результат = Новый Структура("ДополнительныйОбъектАдресации,
									|Исполнитель,
									|Комментарий,
									|ОсновнойОбъектАдресации,
									|РольИсполнителя");
		Результат.Комментарий = Сообщение.comment;
		
		ИсполнительXDTO = Сообщение.performer;
		
		Если ИсполнительXDTO.Установлено("user") Тогда
			Результат.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
		ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
			Результат.РольИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
			Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
				Результат.ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);
			КонецЕсли;
			Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
				Результат.ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ЗадачаXDTO из Сообщение.tasks Цикл
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ЗадачаXDTO.objectId);
			БизнесПроцессыИЗадачиСервер.ПеренаправитьЗадачу(Ссылка, Результат);
		КонецЦикла;
		
		Ответ = СоздатьОбъектXDTO("DMOK");
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектXDTO("DMError");
		Ошибка.subject = НСтр("ru = 'Ошибка при перенаправлении задачи'");
	    Инфо = ИнформацияОбОшибке();
	    Ошибка.description = ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции	

// Заполняет бизнес-процесс по шаблону
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetBusinessProcessByTemplateRequest
// Возвращаемое значение:
//   DMGetBusinessProcessByTemplateResponse
// 
Функция ЗаполнитьБизнесПроцессПоШаблону(Сообщение) Экспорт
	
	Возврат ПолучитьСостояниеНовогоОбъекта(Сообщение, "DMGetBusinessProcessByTemplateResponse");
	
КонецФункции

// Получает данные задачи бизнес-процесса
// 
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   ОбъектИд - ОбъектXDTO типа ObjectId, описывающий задачу
//   ПолучитьЗависимыеОбъекты - Булево - Истина, если нужно получить родительский процесс и предмет
// Возвращаемое значение:
//   ОбъектXDTO типа, наследующего DMBusinessProcessTask
// 
Функция ПолучитьЗадачуБизнесПроцесса(Узел, ОбъектИд, ПолучитьЗависимыеОбъекты = Ложь) Экспорт
	
	СсылкаНаЗадачу = Неопределено;
	СсылкаНаЗадачу = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектИд);
	
	ТипОбъектаXDTO = ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(СсылкаНаЗадачу);
	
	ЗадачаXDTO = СоздатьОбъектXDTO(ТипОбъектаXDTO);
	
	ЗаполнитьОсновныеСвойстваXDTOЗадачи(ЗадачаXDTO, СсылкаНаЗадачу);
	ЗаполнитьПерсональныеСвойстваЗадачиПоТипу(Узел, ЗадачаXDTO, СсылкаНаЗадачу);
	
	Если ПолучитьЗависимыеОбъекты Тогда
		БизнесПроцессXDTO = ПолучитьБизнесПроцесс(Узел, ЗадачаXDTO.parentBusinessProcess.objectID);
		ЗадачаXDTO.parentBusinessProcess = БизнесПроцессXDTO;
		Если СсылкаНаЗадачу.Предметы.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(СсылкаНаЗадачу.Предметы[0].Предмет) Тогда
				Запрос = ОбработкаЗапросовXDTO.СоздатьОбъект("DMRetrieveRequest");
				Если ЗначениеЗаполнено(Узел) Тогда
					Запрос.dataBaseId = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "Идентификатор");
				КонецЕсли; 
				Объект = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаЗадачу.Предметы[0].Предмет);
				Если Объект.type = "DMFile" Тогда
					Запрос.columnSet.Добавить("name");
					Запрос.columnSet.Добавить("objectId");
					Запрос.columnSet.Добавить("extension");
					Запрос.columnSet.Добавить("modificationDateUniversal");
					Запрос.columnSet.Добавить("size");
	            КонецЕсли;
				Запрос.objectIDs.Добавить(Объект);
				Попытка
					Ответ = ОбработкаЗапросовXDTO.ПолучитьОбъекты(Запрос);
					Предмет = Ответ.objects[0];
				Исключение
					Предмет = СоздатьОбъектXDTO("DMObject");
					УстановитьПривилегированныйРежим(Истина);
					Предмет.name = Строка(СсылкаНаЗадачу.Предметы[0].Предмет);
					Предмет.ObjectID = Объект;
					УстановитьПривилегированныйРежим(Ложь);
				КонецПопытки;
				ЗадачаXDTO.target = Предмет;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	ОбработкаЗапросовXDTOУчетВремени.УстановитьПараметрыУчетаВремени(ЗадачаXDTO, СсылкаНаЗадачу);
	
	Возврат ЗадачаXDTO;
	
КонецФункции

// Возвращает объект Документооборота по объекту XDTO
// 
// Параметры:
//   ИмяТипаБизнесПроцесса - краткое имя типа процесса ("Исполнение")
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcess
//   СоздатьНовый - Булево - Истина, если нужно лишь создать пустой новый объект
// Возвращаемое значение:
// 
Функция ПолучитьОбъектБизнесПроцесс(ИмяТипаБизнесПроцесса, ОбъектXDTO, СоздатьНовый) Экспорт

	Если НЕ СоздатьНовый Тогда
		СсылкаНаБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.objectId);
		Если НЕ ЗначениеЗаполнено(СсылкаНаБП) Тогда
			Возврат Неопределено;
		КонецЕсли;
		БПОбъект = СсылкаНаБП.ПолучитьОбъект();
	Иначе
		БПОбъект = БизнесПроцессы[ИмяТипаБизнесПроцесса].СоздатьБизнесПроцесс();
	КонецЕсли;
	
	Возврат БПОбъект;
	
КонецФункции

// Безопасно записывает объект процесса
// 
// Параметры:
//   БПОбъект - БизнесПроцессОбъект
//
Процедура ЗаписатьБПОбъект(БПОбъект) Экспорт
	
	Если ЗначениеЗаполнено(БПОбъект.Ссылка) Тогда
		// Блокировка объекта
		БПОбъект.Заблокировать();
		
		// Запись объекта
		БПОбъект.Записать();
	
		// Разблокировка объекта
		БПОбъект.Разблокировать();
	Иначе
		// Запись объекта
		БПОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получает лист согласования для указанного объекта.
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DMGetApprovalSheetRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMGetApprovalSheetResponse или DMError
//
Функция ПолучитьЛистСогласования(Сообщение) Экспорт
	
	ПредметСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.object.objectId); 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Исполнитель,
		|	ДатаИсполнения,
		|	РезультатСогласования,
		|	Комментарий
		|ПОМЕСТИТЬ
		|	ВизыСогласования
		|ИЗ
		|	Справочник.ВизыСогласования
		|ГДЕ
		|	Документ = &ПредметСогласования
		|	И НЕ ПометкаУдаления
		|	И НЕ Удалена
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Исполнители.Исполнитель
		|ПОМЕСТИТЬ
		|	ОжиданиеСогласования
		|ИЗ 
		|	БизнесПроцесс.Согласование.Исполнители КАК Исполнители
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	БизнесПроцесс.Согласование.Предметы КАК Предметы
		|ПО
		|	Исполнители.Ссылка = Предметы.Ссылка
		|	И Предметы.Предмет = &ПредметСогласования
		|ГДЕ
		|	НЕ Исполнители.Пройден
		|	И НЕ Исполнители.Ссылка.Завершен
		|	И Исполнители.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И НЕ Исполнители.Исполнитель В (ВЫБРАТЬ Исполнитель ИЗ ВизыСогласования)
		|
		|;///////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ЛистСогласования.Исполнитель,
		|	СведенияОПользователях.Должность,
		|	ЛистСогласования.ДатаИсполнения,
		|	ЛистСогласования.РезультатСогласования,
		|	ЛистСогласования.Комментарий
		|ИЗ 
		|
		|	(ВЫБРАТЬ
		|		Исполнитель,
		|		ДатаИсполнения,
		|		РезультатСогласования,
		|		Комментарий
		|	ИЗ
		|		ВизыСогласования
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Исполнитель,
		|		ДАТАВРЕМЯ(1, 1, 1),
		|		"""",
		|		""""
		|	ИЗ 
		|		ОжиданиеСогласования
		|) КАК ЛистСогласования
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ПО
		|	ЛистСогласования.Исполнитель = СведенияОПользователях.Пользователь
		|";
		
	Запрос.УстановитьПараметр("ПредметСогласования", ПредметСогласования);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Ответ = СоздатьОбъектXDTO("DMGetApprovalSheetResponse");
	Пока Выборка.Следующий() Цикл
		
		Пункт = СоздатьОбъектXDTO("DMApprovalSheetItem");
		Пункт.position = Строка(Выборка.Должность);
		Пункт.name = Строка(Выборка.Исполнитель);
		Пункт.date = Выборка.ДатаИсполнения;
		Пункт.result = ?(ЗначениеЗаполнено(Выборка.РезультатСогласования),
			Строка(Выборка.РезультатСогласования),
			НСтр("ru = 'На согласовании'"));
		Пункт.comment = Выборка.Комментарий;
		
		Ответ.items.Добавить(Пункт);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Получает объект XDTO DMApprovalStateRecord, соответствующий переданной структуре записи.
//
// Параметры:
//   СтруктураЗаписи - Структура:
//      Документ - СправочникСсылка.<...>Документы.
//      Состояние - ПеречислениеСсылка.СостоянияДокументов или Неопределено - последнее состояние.
//      Установил - СправочникСсылка.Пользователи, БизнесПроцессСсылка.
//      ДатаУстановки - Дата - дата и время установки.
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMApprovalStateRecord.
//
Функция ПолучитьЗаписьСостоянияСогласования(СтруктураЗаписи) Экспорт
	
	Ответ = СоздатьОбъектXDTO("DMApprovalStateRecord");
	
	Ответ.id = ОбработкаЗапросовXDTO.ПолучитьIDПоСсылке(СтруктураЗаписи.Документ);
	Ответ.type = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(СтруктураЗаписи.Документ);
	
	Если ЗначениеЗаполнено(СтруктураЗаписи.Состояние) Тогда
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "status", СтруктураЗаписи.Состояние);
		Ответ.name = Строка(СтруктураЗаписи.Установил);
		Ответ.date = СтруктураЗаписи.ДатаУстановки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет дерево шаблонов XDTO не привязанными шаблонами
// 
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeResponse - неявно возвращаемое значение
//   МассивОбщихШаблонов - Массив - содержит элементы типа СправочникСсылка.Шаблон<...>, неявно возвращаемое значение
//   СозданиеБезПредмета - Булево - истина, если процесс создается без предмета
//   ПредметБизнесПроцесса - Произвольный - предмет создаваемого процесса
//   ВидДокументаПредмета - СправочникСсылка.Виды<...>Документов - значение реквизита ВидДокумента предмета
// 
Процедура ПолучитьНеПривязанныеШаблоны(Ответ, МассивОбщихШаблонов, СозданиеБезПредмета, ПредметБизнесПроцесса, ВидДокументаПредмета)
	
	Для каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл		
		
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Если ОснованиеДляВвода = ПредметБизнесПроцесса.Метаданные() Тогда
					ПродолжитьВыполнение = Истина; 
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; // у процесса не определен метод ТипШаблона() в модуле менеджера
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|" + ТипШаблона + ".Ссылка
				|ИЗ
				|	" + ТипШаблона + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО " + ТипШаблона + ".Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|ГДЕ
				|	" + ТипШаблона + ".ПометкаУдаления = ЛОЖЬ
				|И	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса ЕСТЬ NULL
				|%ДополнительныеУсловия%";
				
			ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияОтбораПриПолученииШаблоновПроцессов(Запрос.Текст, ТипШаблона);
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				Если МассивОбщихШаблонов.Найти(Результат.Ссылка) = Неопределено Тогда
					МассивОбщихШаблонов.Добавить(Результат.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	КоличествоОбщихШаблонов = МассивОбщихШаблонов.Количество(); 
	Если КоличествоОбщихШаблонов > 0 Тогда
		// Если найдены шаблоны бизнес-процессов, не привязанные к видам документов,
		// они добавляются в группу "Общие шаблоны"
		ГруппаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
		ГруппаШаблонов.name = НСтр("ru = 'Общие шаблоны'");
		ГруппаШаблонов.hint = СформироватьСводкуПоГруппеЭлементов(ГруппаШаблонов.name, ВидДокументаПредмета);
		
		Для Каждого ОбщийШаблон Из МассивОбщихШаблонов Цикл
			Шаблон = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбщийШаблон, "Наименование, Комментарий");
			
			СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
			СтрокаШаблонов.name = Шаблон.Наименование;
			СтрокаШаблонов.hint = СформироватьСводкуПоШаблону(ОбщийШаблон);
			СтрокаШаблонов.businessProcessType = ПолучитьТипПроцессаXDTOПоШаблону(ОбщийШаблон);
			
			ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
			ОбъектШаблонXDTO.name = Шаблон.Наименование;
			ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ОбщийШаблон);
			
			СтрокаШаблонов.template = ОбъектШаблонXDTO;
			
			ГруппаШаблонов.elements.Добавить(СтрокаШаблонов);
			
		КонецЦикла;
		Ответ.businessProcessTemplatesTree.Добавить(ГруппаШаблонов);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево шаблонов XDTO пустыми бизнес-процессами
// 
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeResponse - неявно возвращаемое значение
//   ПредметПроцесса - Произвольный - предмет создаваемого процесса
//   ВидДокументаПредмета - СправочникСсылка.Виды<...>Документов - значение реквизита ВидДокумента предмета
// 
Процедура ПолучитьНезаполненныеПроцессы(Ответ, ПредметПроцесса, ВидДокументаПредмета)
	
	МетаданныеПроцессы = Метаданные.БизнесПроцессы;
	
	сПроцессов = Новый Соответствие;
	сПроцессов.Вставить(МетаданныеПроцессы.Поручение,"DMBusinessProcessOrder");
	сПроцессов.Вставить(МетаданныеПроцессы.Согласование,"DMBusinessProcessApproval");
	
	ОбработкаЗапросовXDTOПереопределяемый.ДополнитьСоответствиеПроцессовПриПолученииНезаполненныхПроцессов(сПроцессов);
	
	сПроцессов.Вставить(МетаданныеПроцессы.Исполнение,"DMBusinessProcessPerformance");
	сПроцессов.Вставить(МетаданныеПроцессы.Рассмотрение,"DMBusinessProcessConsideration");
	сПроцессов.Вставить(МетаданныеПроцессы.Ознакомление,"DMBusinessProcessAcquaintance");
	сПроцессов.Вставить(МетаданныеПроцессы.Регистрация,"DMBusinessProcessRegistration");
	сПроцессов.Вставить(МетаданныеПроцессы.Утверждение,"DMBusinessProcessConfirmation");
	сПроцессов.Вставить(МетаданныеПроцессы.ОбработкаВнутреннегоДокумента,"DMBusinessProcessInternalDocumentProcessing");
	сПроцессов.Вставить(МетаданныеПроцессы.ОбработкаВходящегоДокумента,"DMBusinessProcessIncomingDocumentProcessing");
	сПроцессов.Вставить(МетаданныеПроцессы.ОбработкаИсходящегоДокумента,"DMBusinessProcessOutgoingDocumentProcessing");
	
	
	ГруппаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
	ГруппаШаблонов.name = НСтр("ru = 'Новые процессы'");
	ГруппаШаблонов.hint = СформироватьСводкуПоГруппеЭлементов(ГруппаШаблонов.name, ВидДокументаПредмета);
	
	КоличествоПустыхПроцессов = 0;
	Для Каждого Соответствие Из сПроцессов Цикл
		БПОбъект = Соответствие.Ключ;
		Попытка
			Если НЕ БизнесПроцессы[БПОбъект.Имя].МожетЗапускатьсяИнтерактивно() Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить; // В модуле менеджера бизнес-процесса 
						// не определена функция МожетЗапускатьсяИнтерактивно()
		КонецПопытки;

		Если ЗначениеЗаполнено(ПредметПроцесса) Тогда
			Для Каждого ОснованиеДляВвода Из БПОбъект.ВводитсяНаОсновании Цикл
				Если ОснованиеДляВвода = ПредметПроцесса.Метаданные() Тогда
					КоличествоПустыхПроцессов = КоличествоПустыхПроцессов + 1;
					
					СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
					СтрокаШаблонов.name = БПОбъект.Синоним;
					СтрокаШаблонов.hint = СформироватьСводкуПоПроцессу("БизнесПроцесс." + БПОбъект.Имя);
					СтрокаШаблонов.businessProcessType = сПроцессов.Получить(БПОбъект);
					ПроцессXDTO = СоздатьОбъектXDTO("DMObject");
					ПроцессXDTO.name = "";
					ПроцессИд = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID");
					ПроцессИд.id = "";
					ПроцессИд.type = сПроцессов.Получить(БПОбъект);
					ПроцессXDTO.objectId = ПроцессИд;
					СтрокаШаблонов.template = ПроцессXDTO;
					
					ГруппаШаблонов.elements.Добавить(СтрокаШаблонов);
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоПустыхПроцессов = КоличествоПустыхПроцессов + 1;
			
			СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
			СтрокаШаблонов.name = БПОбъект.Синоним;
			СтрокаШаблонов.hint = СформироватьСводкуПоПроцессу("БизнесПроцесс." + БПОбъект.Имя);
			СтрокаШаблонов.businessProcessType = сПроцессов.Получить(БПОбъект);
			ПроцессXDTO = СоздатьОбъектXDTO("DMObject");
			ПроцессXDTO.name = "";
			ПроцессИд = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObjectID"); 
			ПроцессИд.id = "";
			ПроцессИд.type = сПроцессов.Получить(БПОбъект);
			ПроцессXDTO.objectId = ПроцессИд;
			СтрокаШаблонов.template = ПроцессXDTO;
			
			ГруппаШаблонов.elements.Добавить(СтрокаШаблонов);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПустыхПроцессов > 0 Тогда
		Ответ.businessProcessTemplatesTree.Добавить(ГруппаШаблонов);
    КонецЕсли;
	
КонецПроцедуры

// Дополняет дерево шаблонов XDTO шаблонами, не вошедшими в рекомендованные и общие шаблоны
// 
// Параметры:
//   Ответ - ОбъектXDTO типа DMGetBusinessProcessTemplatesTreeResponse, неявно возвращаемое значение
//   МассивОбщихШаблонов - Массив - содержит элементы типа СправочникСсылка.Шаблон<...>
//   МассивРекомендованныхШаблонов - Массив - содержит элементы типа СправочникСсылка.Шаблон<...>
//   СозданиеБезПредмета - Булево - истина, если процесс создается без предмета
//   ПредметБизнесПроцесса - Произвольный - предмет создаваемого процесса
//   ВидДокументаПредмета - СправочникСсылка.Виды<...>Документов - значение реквизита ВидДокумента предмета
// 
Процедура ПолучитьОстальныеШаблоны(Ответ, МассивОбщихШаблонов, МассивРекомендованныхШаблонов, СозданиеБезПредмета, ПредметБизнесПроцесса, ВидДокументаПредмета)
	
	МассивШаблоновДляДобавления = Новый Массив;
	Для каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		ПродолжитьВыполнение = Ложь;
		Если НЕ СозданиеБезПредмета Тогда
			Для Каждого ОснованиеДляВвода Из БизнесПроцесс.ВводитсяНаОсновании Цикл
				Если ОснованиеДляВвода = ПредметБизнесПроцесса.Метаданные() Тогда
					ПродолжитьВыполнение = Истина; 
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПродолжитьВыполнение = Истина;
		КонецЕсли;
		
		Если НЕ ПродолжитьВыполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипШаблона = БизнесПроцессы[БизнесПроцесс.Имя].ТипШаблона();
		Исключение
			Продолжить; // в модуле менеджера бизнес-процесса не определен метод ТипШаблона()
		КонецПопытки;
		Если ЗначениеЗаполнено(ТипШаблона) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|" + ТипШаблона + ".Ссылка
				|ИЗ
				|	" + ТипШаблона + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
				|		ПО " + ТипШаблона + ".Ссылка = НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса
				|ГДЕ
				|	" + ТипШаблона + ".ПометкаУдаления = ЛОЖЬ
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивРекомендованных)
				|И НЕ " + ТипШаблона + ".Ссылка В (&МассивОбщих)
				|%ДополнительныеУсловия%";
				
			ОбработкаЗапросовXDTOПереопределяемый.ДополнитьУсловияОтбораПриПолученииШаблоновПроцессов(Запрос.Текст, ТипШаблона);
			
			Запрос.УстановитьПараметр("МассивРекомендованных", МассивРекомендованныхШаблонов);
			Запрос.УстановитьПараметр("МассивОбщих", МассивОбщихШаблонов);
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				Если МассивШаблоновДляДобавления.Найти(Результат.Ссылка) = Неопределено Тогда		
					МассивШаблоновДляДобавления.Добавить(Результат.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	КоличествоОстальныхШаблонов = МассивШаблоновДляДобавления.Количество();
	Если КоличествоОстальныхШаблонов > 0 Тогда
		ГруппаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeGroup");
		ГруппаШаблонов.name = НСтр("ru = 'Другие шаблоны'");
		ГруппаШаблонов.hint = СформироватьСводкуПоГруппеЭлементов(ГруппаШаблонов.name, ВидДокументаПредмета);
		Для Каждого Шаблон Из МассивШаблоновДляДобавления Цикл
			ДанныеШаблона = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Шаблон, "Наименование, Комментарий");
			
			СтрокаШаблонов = СоздатьОбъектXDTO("DMBusinessProcessTemplatesTreeElement");
			СтрокаШаблонов.name = ДанныеШаблона.Наименование;
			СтрокаШаблонов.hint = СформироватьСводкуПоШаблону(Шаблон);
			СтрокаШаблонов.businessProcessType = ПолучитьТипПроцессаXDTOПоШаблону(Шаблон);
			
			ОбъектШаблонXDTO = СоздатьОбъектXDTO("DMBusinessProcessTemplate");
			ОбъектШаблонXDTO.name = Шаблон.Наименование;
			ОбъектШаблонXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Шаблон);
			
			
			СтрокаШаблонов.template = ОбъектШаблонXDTO;
			
			ГруппаШаблонов.elements.Добавить(СтрокаШаблонов);
			
		КонецЦикла;
		Ответ.businessProcessTemplatesTree.Добавить(ГруппаШаблонов);
	КонецЕсли;

КонецПроцедуры

// Устанавливает значение исполнителя задачи по объекту DMUser 
// 
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача к заполнению
//   ИсполнительXDTO - ОбъектXDTO типа DMUser - исполнитель к заполнению в задаче
// 
Процедура УстановитьЗначениеИсполнителяЗадачи(Задача, ИсполнительXDTO)
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		Задача.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.user.objectId);
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		Задача.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.role.ObjectId);
		Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
			Задача.ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.mainAddressingObject.objectId);	
		КонецЕсли;
		Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
			Задача.ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ИсполнительXDTO.secondaryAddressingObject.objectId);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет основные реквизиты задачи по объекту DMBusinessProcessTask
// 
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя - задача к заполнению
//   ОбъектXDTO - ОбъектXDTO типа, наследующего DMBusinessProcessTask
// 
Процедура ЗаполнитьОсновныеРеквизитыЗадачи(Задача, ОбъектXDTO)
	
	Задача.Наименование =   ОбъектXDTO.name;
	Задача.Дата = 			ОбъектXDTO.beginDate;
	Задача.Номер = 			ОбъектXDTO.number;
	Задача.Описание = 		ОбъектXDTO.description;
	Задача.СрокИсполнения = ОбъектXDTO.dueDate;
	Задача.ДатаИсполнения = ОбъектXDTO.endDate;
	Задача.Важность = 		ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.importance.objectID);
	
	УстановитьЗначениеИсполнителяЗадачи(Задача, ОбъектXDTO.performer);
	
	Если ОбъектXDTO.Установлено("executionComment") Тогда
		Задача.РезультатВыполнения = ОбъектXDTO.executionComment;
	КонецЕсли;
	
	Если ОбъектXDTO.Установлено("project") Тогда
		Задача.Проект = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.project.objectID);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя типа объекта XDTO задачи по точке маршрута задачи
// 
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя
// Возвращаемое значение:
//   Строка - имя типа XDTO, соответствующего задаче конкретного процесса в конкретной точке маршрута
// 
Функция ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Задача)
	
	Результат = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьТипОбъектаXDTOЗадачиПоТочкеМаршрута(Задача);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда
		Возврат "DMBusinessProcessOrderTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		Возврат "DMBusinessProcessApprovalTaskApproval";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessApprovalTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		Возврат "DMBusinessProcessConfirmationTaskConfirmation";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessConfirmationTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда
		Возврат "DMBusinessProcessRegistrationTaskRegistration";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessRegistrationTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		Возврат "DMBusinessProcessPerfomanceTaskCheckup";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		Возврат "DMBusinessProcessConsiderationTaskAcquaint";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Возврат "DMBusinessProcessIssuesSolutionTaskQuestion";
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Возврат "DMBusinessProcessIssuesSolutionTaskAnswer";
	Иначе
		Возврат "DMBusinessProcessTask";
	КонецЕсли;
	
КонецФункции

// Возвращает тип XDTO бизнес-процесса по ссылке на шаблон бизнес-процессов
// 
// Параметры:
//   ШаблонСсылка - СправочникСсылка.Шаблоны<...>
// Возвращаемое значение:
//   Строка - имя типа XDTO, наследника DMBusinessProcess
// 
Функция ПолучитьТипПроцессаXDTOПоШаблону(ШаблонСсылка)
	
	Результат = ОбработкаЗапросовXDTOПереопределяемый.ПолучитьТипПроцессаXDTOПоШаблону(ШаблонСсылка);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		Возврат "DMBusinessProcessPerformance"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Возврат "DMBusinessProcessAcquaintance"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныПоручения") Тогда
		Возврат "DMBusinessProcessOrder"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Возврат "DMBusinessProcessConsideration"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Возврат "DMBusinessProcessRegistration"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Возврат "DMBusinessProcessApproval"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Возврат "DMBusinessProcessConfirmation"
	ИначеЕсли ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.ШаблоныСоставныхБизнесПроцессов") Тогда
		Если ШаблонСсылка.ТипШаблона = "ОбработкаВнутреннегоДокумента" Тогда
			Возврат "DMBusinessProcessInternalDocumentProcessing"
		ИначеЕсли ШаблонСсылка.ТипШаблона = "ОбработкаВходящегоДокумента" Тогда
			Возврат "DMBusinessProcessIncomingDocumentProcessing"
		ИначеЕсли ШаблонСсылка.ТипШаблона = "ОбработкаИсходящегоДокумента" Тогда
			Возврат "DMBusinessProcessOutgoingDocumentProcessing"
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает описание для ветки дерева шаблонов бизнес-процессов
// 
// Параметры:
//   ИмяГруппы - краткое наименование ветки
//   ВидДокументаПредмета - СправочникСсылка.Виды<...>Документов
// Возвращаемое значение:
//   Строка - пользовательское представление ветки дерева шаблонов
// 
Функция СформироватьСводкуПоГруппеЭлементов(ИмяГруппы, ВидДокументаПредмета)
	
	Если ИмяГруппы = НСтр("ru = 'Рекомендованные шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, привязанные к данному виду документа.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Общие шаблоны'") Тогда
		Текст = НСтр("ru = 'Шаблоны процессов, не привязанные ни к одному из видов документов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Новые процессы'") Тогда
		Текст = НСтр("ru = 'Ссылки на создание новых, незаполненных процессов.'");
	ИначеЕсли ИмяГруппы = НСтр("ru = 'Другие шаблоны'") Тогда
		Если ЗначениеЗаполнено(ВидДокументаПредмета) Тогда
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к видам документов, отличных от данного.'");
		Иначе
			Текст = НСтр("ru = 'Шаблоны процессов, привязанные к какому-либо виду документов.'");
		КонецЕсли;
	Иначе
		Текст = НСтр("ru = 'Группа шаблонов процессов.'");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает описание для пустых бизнес-процессов дерева шаблонов XDTO 
// 
// Параметры:
//   ТипПроцесса - Строка - полное имя типа бизнес-процесса вида БизнесПроцесс.Исполнение
// Возвращаемое значение:
//   Строка - пользовательское представление этого типа
// 
Функция СформироватьСводкуПоПроцессу(ТипПроцесса)
	
	СтрокаТип = СтрЗаменить(ТипПроцесса, НСтр("ru = 'БизнесПроцесс.'"), "");
	
	Попытка 
		Возврат БизнесПроцессы[СтрокаТип].ПолучитьОписаниеПроцесса();
	Исключение
		Возврат Метаданные.БизнесПроцессы[СтрокаТип].Синоним;
	КонецПопытки;
	
КонецФункции

// Возвращает описание для шаблонов бизнес-процессов дерева шаблонов XDTO
// 
// Параметры:
//   ШаблонСсылка - СправочникСсылка.Шаблоны<...>
// Возвращаемое значение:
//   Строка - пользовательское описание шаблона
// 
Функция СформироватьСводкуПоШаблону(ШаблонСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат ШаблонСсылка.ПолучитьОбъект().СформироватьСводкуПоШаблону();
	Исключение
		Возврат ШаблонСсылка.Наименование;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ БИЗНЕС-ПРОЦЕССОВ ОТДЕЛЬНЫХ ТИПОВ

// Возвращает заполненный объект XDTO по бизнес-процессу Исполнение
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Исполнение
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessPerformance
//
Функция ПолучитьБПИсполнение(Узел, СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessPerformance");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеКонтролера(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(СсылкаНаБизнесПроцесс, Ответ);
	
	Ответ.currentIteration = СсылкаНаБизнесПроцесс.НомерИтерации;
	Ответ.performanceType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.performanceType.name = Строка(СсылкаНаБизнесПроцесс.ВариантИсполнения);
	Ответ.performanceType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ВариантИсполнения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessPerformanceParticipant");
		basePerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(Исполнитель, Исполнитель.Исполнитель, Исполнитель.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");	
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;            
		performer.personalDueDate = ОбработатьДату(Исполнитель.СрокИсполнения);
		performer.personalDescription = Исполнитель.Описание;
		performer.personalTaskName = Исполнитель.НаименованиеЗадачи;
		performer.responsible = Исполнитель.Ответственный;
		performer.performanceOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.performanceOrder.name = Строка(Исполнитель.ПорядокИсполнения);
		performer.performanceOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Исполнитель.ПорядокИсполнения);
		performer.passed = Исполнитель.Пройден;
		Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
			performer.task = ПолучитьЗадачуБизнесПроцесса(Узел, ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Исполнитель.ЗадачаИсполнителя));
		КонецЕсли;
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает по-старому заполненный объект XDTO по бизнес-процессу Исполнение
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Исполнение
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessPerformance_1.2.1.11
//
Функция ПолучитьБПИсполнение_1_2_1_11(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessPerformance_1.2.1.11");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеКонтролера(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(СсылкаНаБизнесПроцесс, Ответ);
	
	// особенная шапка БП Исполнение
	Ответ.performanceType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.performanceType.name = Строка(СсылкаНаБизнесПроцесс.ВариантИсполнения);
	Ответ.performanceType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ВариантИсполнения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessPerformanceParticipant_1.2.1.11");
		basePerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(Исполнитель, Исполнитель.Исполнитель, Исполнитель.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");	
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;
		performer.personalDueDate = ОбработатьДату(Исполнитель.СрокИсполнения);
		performer.personalDescription = Исполнитель.Описание;
		performer.personalTaskName = Исполнитель.НаименованиеЗадачи;
		performer.responsible = Исполнитель.Ответственный;
		performer.performanceOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.performanceOrder.name = Строка(Исполнитель.ПорядокИсполнения);
		performer.performanceOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Исполнитель.ПорядокИсполнения);
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Ознакомление
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Ознакомление
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessAcquaintance
//
Функция ПолучитьБПОзнакомление(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessAcquaintance");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектDMBusinessProcessTaskExecutor(Исполнитель, Исполнитель.Исполнитель, Исполнитель.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");	
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Поручение
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Поручение
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessOrder
//
Функция ПолучитьБППоручение(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessOrder");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеКонтролера(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеПроверяющего(СсылкаНаБизнесПроцесс, Ответ);
	ПередатьЗначениеОдногоИсполнителя(СсылкаНаБизнесПроцесс, Ответ);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);

	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Рассмотрение
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Рассмотрение
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessConsideration
//
Функция ПолучитьБПРассмотрение(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessConsideration");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	Ответ.resolution = СсылкаНаБизнесПроцесс.Резолюция;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	ПередатьЗначениеОдногоИсполнителя(СсылкаНаБизнесПроцесс, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Регистрация
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Регистрация
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessRegistration
//
Функция ПолучитьБПРегистрация(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessRegistration");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	
	ПередатьЗначениеОдногоИсполнителя(СсылкаНаБизнесПроцесс, Ответ);
	Ответ.executionResult = СоздатьОбъектXDTO("DMRegistrationResult");
	Ответ.executionResult.name = Строка(СсылкаНаБизнесПроцесс.РезультатРегистрации);
	ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.РезультатРегистрации);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Согласование
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Согласование
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessApproval
//
Функция ПолучитьБПСогласование(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessApproval");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	

	// особенная шапка Согласования
	Ответ.approvalType = СоздатьОбъектXDTO("DMApprovalType");
	Ответ.approvalType.name = Строка(СсылкаНаБизнесПроцесс.ВариантСогласования);
	Ответ.approvalType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.ВариантСогласования);
	Ответ.durationDays = СсылкаНаБизнесПроцесс.СрокИсполнения;
	Ответ.durationHours = СсылкаНаБизнесПроцесс.СрокИсполненияЧас;
	
	// результат согласования
	Ответ.executionResult = СоздатьОбъектXDTO("DMApprovalResult");
	Ответ.executionResult.name = Строка(СсылкаНаБизнесПроцесс.РезультатСогласования);
	ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.РезультатСогласования);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	// исполнители
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessApprovalParticipant");
		basePerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(Исполнитель, Исполнитель.Исполнитель, Исполнитель.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");	
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;                                  
		performer.ApprovalOrder = СоздатьОбъектXDTO("DMApprovalOrder");
		performer.ApprovalOrder.name = Строка(Исполнитель.ПорядокСогласования);
		performer.ApprovalOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(Исполнитель.ПорядокСогласования);
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает по-старому заполненный объект XDTO по бизнес-процессу Согласование
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Согласование
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessApproval_1
//
Функция ПолучитьБПСогласование_1_2_1_11(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessApproval_1.2.1.11");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	

	// особенная шапка Согласования
	Ответ.approvalType = СоздатьОбъектXDTO("DMBusinessProcessRoutingType");
	Ответ.approvalType.name = Строка(СсылкаНаБизнесПроцесс.ВариантСогласования);
	Ответ.approvalType.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ВариантСогласования);
	Ответ.durationDays = СсылкаНаБизнесПроцесс.СрокИсполнения;
	Ответ.durationHours = СсылкаНаБизнесПроцесс.СрокИсполненияЧас;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	// исполнители
	Для Каждого Исполнитель Из СсылкаНаБизнесПроцесс.Исполнители Цикл
		performer = СоздатьОбъектXDTO("DMBusinessProcessApprovalParticipant_1.2.1.11");
		basePerformer = СоздатьОбъектDMBusinessProcessTaskExecutor(Исполнитель, Исполнитель.Исполнитель, Исполнитель.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");	
		Для Каждого Свойство Из basePerformer.Свойства() Цикл
			Если basePerformer.Установлено(Свойство.Имя) Тогда
				performer[Свойство.Имя] = basePerformer[Свойство.Имя];	
			КонецЕсли;
		КонецЦикла;                                  
		performer.ApprovalOrder = СоздатьОбъектXDTO("DMTaskExecutionOrder");
		performer.ApprovalOrder.name = Строка(Исполнитель.ПорядокСогласования);
		performer.ApprovalOrder.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Исполнитель.ПорядокСогласования);
		Ответ.performers.Добавить(performer);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу Утверждение
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.Утверждение
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessConfirmation
//
Функция ПолучитьБПУтверждение(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessConfirmation");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	
	Ответ.useDigitalSign = СсылкаНаБизнесПроцесс.ПодписыватьЭП;        
	Ответ.executionResult = СоздатьОбъектXDTO("DMConfirmationResult");
	Ответ.executionResult.name = Строка(СсылкаНаБизнесПроцесс.РезультатУтверждения);
	ответ.executionResult.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.РезультатУтверждения);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ.digitalSignEnabled = Константы.ИспользоватьЭлектронныеПодписи.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПередатьЗначениеОдногоИсполнителя(СсылкаНаБизнесПроцесс, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаВходящегоДокумента
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.ОбработкаВходящегоДокумента
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessIncomingDocumentProcessing
//
Функция ПолучитьБПОбработкаВходящегоДокумента(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessIncomingDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "considerationTemplate", СсылкаНаБизнесПроцесс.ШаблонРассмотрения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "performanceAcquaintanceTemplate", СсылкаНаБизнесПроцесс.ШаблонИсполненияОзнакомления);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "orderTemplate", СсылкаНаБизнесПроцесс.ШаблонПоручения);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаВнутреннегоДокумента
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessInternalDocumentProcessing
//
Функция ПолучитьБПОбработкаВнутреннегоДокумента(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessInternalDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "approvalTemplate", СсылкаНаБизнесПроцесс.ШаблонСогласования);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "confirmationTemplate", СсылкаНаБизнесПроцесс.ШаблонУтверждения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "registrationTemplate", СсылкаНаБизнесПроцесс.ШаблонРегистрации);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "considerationTemplate", СсылкаНаБизнесПроцесс.ШаблонРассмотрения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "performanceAcquaintanceTemplate", СсылкаНаБизнесПроцесс.ШаблонИсполненияОзнакомления);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "orderTemplate", СсылкаНаБизнесПроцесс.ШаблонПоручения);
	
	Возврат Ответ;

КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу ОбработкаИсходящегоДокумента
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.ОбработкаИсходящегоДокумента
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessOutgoingDocumentProcessing
//
Функция ПолучитьБПОбработкаИсходящегоДокумента(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessOutgoingDocumentProcessing");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);	
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "approvalTemplate", СсылкаНаБизнесПроцесс.ШаблонСогласования);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "confirmationTemplate", СсылкаНаБизнесПроцесс.ШаблонУтверждения);
	ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(Ответ, "registrationTemplate", СсылкаНаБизнесПроцесс.ШаблонРегистрации);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает заполненный объект XDTO по бизнес-процессу РешениеВопросовВыполненияЗадач
//
// Параметры:
//   СсылкаНаБизнесПроцесс - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcessIssuesSolution
//
Функция ПолучитьБПРешениеВопросовВыполненияЗадач(СсылкаНаБизнесПроцесс)
	
	Ответ = СоздатьОбъектXDTO("DMBusinessProcessIssuesSolution");
	Ответ.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDпоСсылке(СсылкаНаБизнесПроцесс.Ссылка);
	Ответ.name = СсылкаНаБизнесПроцесс.Наименование;
	
	// общая шапка бизнес-процесса
	ПередатьОбщиеРеквизитыБизнесПроцесса(СсылкаНаБизнесПроцесс, Ответ);
	
	Ответ.initiator = СоздатьОбъектXDTO("DMUser");
	Ответ.initiator.name = Строка(СсылкаНаБизнесПроцесс.ИнициаторПроцесса);
	Ответ.initiator.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБизнесПроцесс.ИнициаторПроцесса);
	Ответ.executionComment = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	ОбработкаЗапросовXDTOПереопределяемый.ПолучитьБПРешениеВопросовВыполненияЗадач(Ответ, СсылкаНаБизнесПроцесс);
	
	Задача = СоздатьОбъектXDTO("DMBusinessProcessTask");
	ЗаполнитьОсновныеСвойстваXDTOЗадачи(Задача, СсылкаНаБизнесПроцесс.ПредметРассмотрения, Ложь);
    Ответ.issueTask = Задача;
	
	Ответ.perfomanceHistory = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(СсылкаНаБизнесПроцесс.Ссылка);
	
	Возврат Ответ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ БИЗНЕС-ПРОЦЕССОВ ОТДЕЛЬНЫХ ТИПОВ

// Записывает по переданному объекту XDTO процесс Исполнение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessPerformance
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Исполнение - ссылка на записанный процесс
//
Функция ЗаписатьБПИсполнение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Исполнение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	Если Объект.Установлено("performanceType") Тогда
		БПОбъект.ВариантИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.performanceType.objectId);
	Иначе
		БПОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КонецЕсли;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Исполнении
		НоваяСтрока.СрокИсполнения = ?(Исполнитель.personalDueDate = Неопределено, Дата(1, 1, 1), Исполнитель.personalDueDate);
		НоваяСтрока.Описание = Исполнитель.personalDescription;
		НоваяСтрока.НаименованиеЗадачи = Исполнитель.personalTaskName;
		НоваяСтрока.Ответственный = Исполнитель.responsible;
		Если Исполнитель.Установлено("performanceOrder") Тогда
			НоваяСтрока.ПорядокИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.performanceOrder.objectId);
		КонецЕсли;
		Если Исполнитель.Установлено("task") Тогда
			НоваяСтрока.ЗадачаИсполнителя = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.task.objectId);
		КонецЕсли;
		Если Исполнитель.Установлено("passed") Тогда
			НоваяСтрока.Пройден = Исполнитель.passed;
		КонецЕсли;
	КонецЦикла;
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
		
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Исполнение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessPerformance_1.2.1.11
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Исполнение - ссылка на записанный процесс
//
Функция ЗаписатьБПИсполнение_1_2_1_11(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Исполнение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.performanceType.objectId);
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Исполнении
		НоваяСтрока.СрокИсполнения = ?(Исполнитель.personalDueDate = Неопределено, Дата(1, 1, 1), Исполнитель.personalDueDate);
		НоваяСтрока.Описание = Исполнитель.personalDescription;
		НоваяСтрока.НаименованиеЗадачи = Исполнитель.personalTaskName;
		НоваяСтрока.Ответственный = Исполнитель.responsible;
		НоваяСтрока.ПорядокИсполнения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.performanceOrder.objectId);

	КонецЦикла;
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
		
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Ознакомление (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessAcquaintance
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Ознакомление - ссылка на записанный процесс
//
Функция ЗаписатьБПОзнакомление(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Ознакомление", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
	КонецЦикла;
				
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Поручение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessOrder
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Поручение - ссылка на записанный процесс
//
Функция ЗаписатьБППоручение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Поручение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);	
	
	// Проверяющий
	УстановитьЗначениеПроверяющего(БПОбъект, Объект);
	
	// Контролер
	УстановитьЗначениеКонтролера(БПОбъект, Объект);
				
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Рассмотрение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessConsideration
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Рассмотрение - ссылка на записанный процесс
//
Функция ЗаписатьБПРассмотрение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Рассмотрение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.Резолюция = Объект.resolution;
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);	
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Регистрация (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessRegistration
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Регистрация - ссылка на записанный процесс
//
Функция ЗаписатьБПРегистрация(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Регистрация", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	
	// Исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);	
				
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Согласование (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessApproval
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Согласование - ссылка на записанный процесс
//
Функция ЗаписатьБПСогласование(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Согласование", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.approvalType.objectId);
	БПОбъект.СрокИсполнения = Объект.durationDays;
	БПОбъект.СрокИсполненияЧас = Объект.durationHours;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Согласовании
		НоваяСтрока.ПорядокСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.approvalOrder.objectId);
	КонецЦикла;
				
			
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Согласование (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessApproval_1.2.1.11
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Согласование - ссылка на записанный процесс
//
Функция ЗаписатьБПСогласование_1_2_1_11(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Согласование", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ВариантСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.approvalType.objectId);
	БПОбъект.СрокИсполнения = Объект.durationDays;
	БПОбъект.СрокИсполненияЧас = Объект.durationHours;
	
	// Исполнители
	БПОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Объект.performers Цикл
		НоваяСтрока = БПОбъект.Исполнители.Добавить();
		
		// общие данные исполнителя
		УстановитьЗначениеИсполнителяВСпискеИсполнителей(НоваяСтрока, Исполнитель);
		
		// специфика исполнителя в Согласовании
		НоваяСтрока.ПорядокСогласования = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.approvalOrder.objectId);
	КонецЦикла;
				
			
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс Утверждение (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessConfirmation
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.Утверждение - ссылка на записанный процесс
//
Функция ЗаписатьБПУтверждение(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("Утверждение", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ПодписыватьЭП = Объект.useDigitalSign;
	
	// исполнитель
	УстановитьЗначениеОдногоИсполнителя(БПОбъект, Объект);			
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаВнутреннегоДокумента (возможно, создав новый)
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMBusinessProcessInternalDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаВнутреннегоДокумента(Узел, Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаВнутреннегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонСогласования, Объект, "approvalTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонУтверждения, Объект, "confirmationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонРегистрации, Объект, "registrationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонРассмотрения, Объект, "considerationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонИсполненияОзнакомления, Объект, "performanceAcquaintanceTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонПоручения, Объект, "orderTemplate");			
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаВходящегоДокумента (возможно, создав новый)
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMBusinessProcessIncomingDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаВходящегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаВходящегоДокумента(Узел, Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаВходящегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонРассмотрения, Объект, "considerationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонИсполненияОзнакомления, Объект, "performanceAcquaintanceTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонПоручения, Объект, "orderTemplate");		
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

// Записывает по переданному объекту XDTO процесс ОбработкаИсходящегоДокумента (возможно, создав новый)
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Объект - ОбъектXDTO типа DMBusinessProcessOutgoingDocumentProcessing
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.ОбработкаИсходящегоДокумента - ссылка на записанный процесс
//
Функция ЗаписатьБПОбработкаИсходящегоДокумента(Узел, Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("ОбработкаИсходящегоДокумента", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
		
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонСогласования, Объект, "approvalTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонУтверждения, Объект, "confirmationTemplate");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(Узел, БПОбъект.ШаблонРегистрации, Объект, "registrationTemplate");
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	Возврат БПОбъект.Ссылка;
		
КонецФункции

// Записывает по переданному объекту XDTO процесс РешениеВопросовВыполненияЗадач (возможно, создав новый)
//
// Параметры:
//   Объект - ОбъектXDTO типа DMBusinessProcessIssuesSolution
//   СоздатьНовый - Булево - Истина, если нужно создать новый объект
// Возвращаемое значение:
//   БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - ссылка на записанный процесс
//
Функция ЗаписатьБПРешениеВопросовВыполненияЗадач(Объект, СоздатьНовый)
	
	БПОбъект = ПолучитьОбъектБизнесПроцесс("РешениеВопросовВыполненияЗадач", Объект, СоздатьНовый);
	
	// Запись шапки
	УстановитьШапкуБизнесПроцесса(БПОбъект, Объект);
	БПОбъект.ПредметРассмотрения = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.issueTask.ObjectID);
	БПОбъект.ИнициаторПроцесса = БПОбъект.ПредметРассмотрения.Автор;
	
	ОбработкаЗапросовXDTOПереопределяемый.ЗаписатьБПРешениеВопросовВыполненияЗадач(БПОбъект, Объект, СоздатьНовый);
	
	// Запись объекта
	ЗаписатьБПОбъект(БПОбъект);
	
	РегистрыСведений.ИсторияВыполненияЗадач.ЗаписатьСобытиеПоПроцессу(БПОбъект.Ссылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2:%3%4
			|'"),
			Строка(БПОбъект.Автор),
			Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм'"),
			Символы.ПС,
			БПОбъект.Описание));
	
	Возврат БПОбъект.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ДЕЙСТВИЯ С БИЗНЕС-ПРОЦЕССАМИ

// Рекурсивно заполняет объект XDTO по строкам дерева задач
//
// Параметры:
//   СтрокиОдногоУровня - КоллекцияСтрокДереваЗначений, источник данных
//   ОдинОбъектXDTO - ОбъектXDTO типа DMGetTasksTreeResponse - заполняемый объект
//
Процедура ПостроитьИзДереваDMGetTaskListResponse(СтрокиОдногоУровня, ОдинОбъектXDTO)
	
	Для Каждого СтрокаУровня Из СтрокиОдногоУровня Цикл
		
		Если ТипЗнч(СтрокаУровня.Ссылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БП = СоздатьОбъектXDTO("DMBusinessProcess");
			БП.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СтрокаУровня.Ссылка);
			БП.name = СтрокаУровня.Ссылка.Наименование;
			
			ПередатьЗначениеАвтора(СтрокаУровня.Ссылка, БП);
			ПередатьЗначениеВажности(СтрокаУровня.Ссылка, БП);

			БП.beginDate = СтрокаУровня.Ссылка.ДатаНачала;
			БП.endDate = СтрокаУровня.Ссылка.ДатаЗавершения;
			БП.started = СтрокаУровня.Ссылка.Стартован;
			БП.completed = СтрокаУровня.Ссылка.Завершен;
			БП.completionMark = СтрокаУровня.РезультатЗавершения;
			
			ПередатьЗначениеПредметаБизнесПроцессаЗадачи(СтрокаУровня.Ссылка, БП);
			
			Если СтрокаУровня.Ссылка.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
				БП.description = СтрокаУровня.Ссылка.Описание; 
			КонецЕсли;
			Если СтрокаУровня.Ссылка.Метаданные().Реквизиты.Найти("СрокИсполнения") <> Неопределено Тогда
				Если ТипЗнч(СтрокаУровня.Ссылка.СрокИсполнения) = Тип("Число") Тогда
					БП.dueDate = СтрокаУровня.Ссылка.СрокИсполненияДатой;
				Иначе
					БП.dueDate = СтрокаУровня.Ссылка.СрокИсполнения;
				КонецЕсли;
			КонецЕсли;
			
			ПостроитьИзДереваDMGetTaskListResponse(СтрокаУровня.Строки, БП);
			ОдинОбъектXDTO.BusinessProcesses.Добавить(БП);
		Иначе
			Задача = СоздатьОбъектXDTO("DMBusinessProcessTask");
			ЗаполнитьОсновныеСвойстваXDTOЗадачи(Задача, СтрокаУровня.Ссылка, Ложь);
			Задача.executionMark = СтрокаУровня.РезультатЗавершения;
			ПостроитьИзДереваDMGetTaskListResponse(СтрокаУровня.Строки, Задача);
			ОдинОбъектXDTO.tasks.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно дополняет дерево бизнес-процессов задачами указанного процесса
//
// Параметры:
//   Дерево - ДеревоЗначений - дерево к заполнению
//   БизнесПроцессСсылка - БизнесПроцессСсылка - процесс, задачи которого требуется получить
//   ЗадачаСсылка - устарел
// 
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(БизнесПроцессСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Дата,
		|	ВЫБОР
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА ""ExecutedPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА ""ExecutedAlmostPositive""
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА ""ExecutedNegative""
		|		ИНАЧЕ 			
		|			ВЫБОР
		|				КОГДА Задачи.Выполнена = ИСТИНА
		|					ТОГДА ""ExecutedNeutral""
		|				ИНАЧЕ ""NotExecuted""
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Задачи.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденнаяВетвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка", Истина);
		Если НайденнаяВетвь <> Неопределено Тогда
			Дерево.Строки.Удалить(НайденнаяВетвь);
		КонецЕсли;	
			
		Строка = Неопределено;
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе	
			Строка = Ветвь.Строки.Добавить();
		КонецЕсли;
		
		Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
		
		ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно дополняет дерево бизнес-процессами, подчиненными указанной задаче
//
// Параметры:
//   Дерево - ДеревоЗначений - дерево к заполнению
//   ЗадачаСсылка - ЗадачаСсылка.ЗадачиИсполнителя - задача, процессы которой следует получить
// 
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(Запрос.Текст), "РАЗРЕШЕННЫЕ" ,"") + "
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Дата,
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|ГДЕ
			|   %ОтборВедущаяЗадача%
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		ОбработкаЗапросовXDTOПереопределяемый.УстановитьУсловиеОтбораВедущейЗадачи(Запрос.Текст);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

	Результат = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
		Строка = Ветвь.Строки.Добавить();			
		Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
			
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, ЗадачаСсылка);
			
	КонецЦикла;
	
КонецПроцедуры

// Запускает процесс по ObjectId
//
// Параметры:
//   ObjectIDБизнесПроцесса - ОбъектXDTO типа ObjectId, описывающий бизнес-процесс
//
// Возвращаемое значение:
//   ОбъектXDTO типа DMBusinessProcess, частично заполненный и соответствующий запущенному процессу
// 
Функция ЗапуститьБизнесПроцесс(ObjectIDБизнесПроцесса)
	
	СсылкаНаБП = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ObjectIDБизнесПроцесса);
	БПОбъект = СсылкаНаБП.ПолучитьОбъект();
	ПроверитьПравильностьЗаполненияБизнесПроцесса(БПОбъект);
	
	Если ТипЗнч(БПОбъект.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БПОбъект);
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Результат = РаботаСВизамиСогласования.ПроверитьПересечениеВизИИсполнителей(Предмет, БПОбъект.Исполнители);
			Если Результат = "пересогласовать" Тогда 
				РаботаСВизамиСогласования.ПоместитьЗакрытиеВизыДокументаВИсторию(Предмет); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	БПОбъект.Старт();
	
	Объект = СоздатьОбъектXDTO("DMBusinessProcess");
	Объект.name = СсылкаНаБП.Наименование;
	Объект.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаБП);
	
	Объект.started = Истина;
	Объект.beginDate = БПОбъект.ДатаНачала;
	
	Возврат Объект;
	
КонецФункции

// Возвращает бизнес-процессы, отобранные по заданным условиям
//
// Параметры:
//   Узел - ПланОбменаСсылка.ИнтегрированныеСистемы - узел интегрированной системы
//   Query - ОбъектXDTO типа DMGetTasksTreeQuery, описывающий условия отбора
// Возвращаемое значение:
//   Массив - массив структур, описывающих найденные процессы, со свойствами
//     * Ссылка - БизнесПроцессСсылка - ссылка на процесс
//     * Дата - Дата - дата процесса
//     * РезультатЗавершения - Строка - результат завершения процесса
// 
Функция ПолучитьБизнесПроцессыПоЗапросу(Узел, Query)
	
	ВключатьВыполненные = Истина;
	Если Query.Установлено("withExecuted") Тогда
		ВключатьВыполненные = Query.withExecuted;
	КонецЕсли;
	ВключатьПрерванные = Ложь;
	ВключатьОстановленные = Ложь;
	
	МассивБизнесПроцессов = Новый Массив;
	
	МассивПредметовБизнесПроцессов = Новый Массив;
	Для Каждого ВнешнийОбъект Из Query.externalTarget Цикл
		МассивВнутреннихОбъектов = ОбработкаЗапросовXDTO.ПолучитьОбъектыДОПоВнешнемуОбъекту(
			Узел, ВнешнийОбъект.id, ВнешнийОбъект.type);
		Для Каждого ВнутреннийОбъект Из МассивВнутреннихОбъектов Цикл
			Если МассивПредметовБизнесПроцессов.Найти(ВнутреннийОбъект) = Неопределено 
				И ВнутреннийОбъект <> Неопределено
				И НЕ ВнутреннийОбъект.Ссылка.Пустая() Тогда
				МассивПредметовБизнесПроцессов.Добавить(ВнутреннийОбъект.Ссылка);
				МассивСвязанных = ОбработкаЗапросовXDTOДокументы.ПолучитьСвязанныеДокументы(Узел, ВнутреннийОбъект.Ссылка);
				Для Каждого СвязанныйДокумент Из МассивСвязанных Цикл
					СсылкаНаСвязанный = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(СвязанныйДокумент.relatedDocument.objectId);
					Если СсылкаНаСвязанный <> Неопределено И НЕ СсылкаНаСвязанный.Пустая() Тогда
						МассивПредметовБизнесПроцессов.Добавить(СсылкаНаСвязанный);	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивАвторовБизнесПроцессов = Новый Массив;
	Для Каждого ПользовательАвтор Из Query.author Цикл
		Ссылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПользовательАвтор.objectId.id));
		Если НЕ Ссылка.Пустая() 
			И МассивАвторовБизнесПроцессов.Найти(Ссылка) = Неопределено Тогда
			МассивАвторовБизнесПроцессов.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если Query.businessProcess.Количество() > 0 Тогда
		МассивБизнесПроцессовДляЗапроса = Новый Массив;
		ТипыПроцессов = Новый Массив;
		Для каждого БизнесПроцесс из Query.businessProcess Цикл
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(БизнесПроцесс.Objectid);
			ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
			Если ТипыПроцессов.Найти(ИмяТипа) = Неопределено Тогда
				ТипыПроцессов.Добавить(ИмяТипа);
			КонецЕсли;
			МассивБизнесПроцессовДляЗапроса.Добавить(Ссылка);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		
		Для Каждого ИмяТипа Из ТипыПроцессов Цикл
			Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(Запрос.Текст), "РАЗРЕШЕННЫЕ" ,"") + "
			|	БизнесПроцесс.Ссылка,
			|	БизнесПроцесс.Дата,
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцесс.Завершен = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцесс
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцесс.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|ГДЕ
			|	БизнесПроцесс.Ссылка В (&БизнесПроцессы)";
		КонецЦикла;
			
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", ИмяТипа);
		Запрос.УстановитьПараметр("БизнесПроцессы", МассивБизнесПроцессовДляЗапроса);
		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураПроцесса = Новый Структура("Ссылка, Дата, РезультатЗавершения");
			ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ВыборкаДетальныеЗаписи);
			
			ЭлементПрисутствует = Ложь;
			Для Каждого Элемент Из МассивБизнесПроцессов Цикл
				Если Элемент.Ссылка = ВыборкаДетальныеЗаписи.Ссылка Тогда
					ЭлементПрисутствует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЭлементПрисутствует Тогда
				МассивБизнесПроцессов.Добавить(СтруктураПроцесса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Предмет из Query.target Цикл
		СсылкаНаСвязанный = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Предмет.Objectid);
		МассивПредметовБизнесПроцессов.Добавить(СсылкаНаСвязанный);	
	КонецЦикла;
	
	Если МассивПредметовБизнесПроцессов.Количество() = 0
		И МассивАвторовБизнесПроцессов.Количество() = 0 Тогда
		Возврат МассивБизнесПроцессов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ " + ?(ПустаяСтрока(Запрос.Текст), "РАЗРЕШЕННЫЕ" ,"") + "
			|	БизнесПроцесс.Ссылка,
			|	БизнесПроцесс.Дата,
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА ""ExecutedPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА ""ExecutedAlmostPositive""
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА ""ExecutedNegative""
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцесс.Завершен = ИСТИНА
			|					ТОГДА ""ExecutedNeutral""
			|				ИНАЧЕ ""NotExecuted""
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцесс
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцесс.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|ГДЕ ИСТИНА %Выполнен%%Прерван%%Предмет%%Автор%
			|	И %ОтборВедущаяЗадача%";
			
		ОбработкаЗапросовXDTOПереопределяемый.УстановитьУсловиеОтбораВедущейЗадачиПоПустойСсылке(Запрос.Текст);

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", ТипБизнесПроцесса.ПолноеИмя());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Выполнен%", ?(НЕ ВключатьВыполненные," И (НЕ БизнесПроцесс.Завершен)",""));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Прерван%", ?(НЕ ВключатьПрерванные,
			" И (НЕ БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))",""));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Отложен%", ?(НЕ ВключатьОстановленные,
			" И (НЕ БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен))",""));
		Если МассивПредметовБизнесПроцессов.Количество() > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Предмет%", " И БизнесПроцесс.Предметы.Предмет В(&Предмет)");	
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Предмет%", "");
		КонецЕсли;
		Если МассивАвторовБизнесПроцессов.Количество() > 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Автор%", " И БизнесПроцесс.Автор В(&Автор)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Автор%", "");
		КонецЕсли;
		Если МассивПредметовБизнесПроцессов.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("Предмет", МассивПредметовБизнесПроцессов);	
		КонецЕсли;
		Если МассивАвторовБизнесПроцессов.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("Автор", МассивАвторовБизнесПроцессов);
		КонецЕсли;
				
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
			
	Результат = Запрос.Выполнить();
			
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураПроцесса = Новый Структура("Ссылка, Дата, РезультатЗавершения");
		ЗаполнитьЗначенияСвойств(СтруктураПроцесса, ВыборкаДетальныеЗаписи);
		
		ЭлементПрисутствует = Ложь;
		Для Каждого Элемент Из МассивБизнесПроцессов Цикл
			Если Элемент.Ссылка = ВыборкаДетальныеЗаписи.Ссылка Тогда
				ЭлементПрисутствует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭлементПрисутствует Тогда
			МассивБизнесПроцессов.Добавить(СтруктураПроцесса);
		КонецЕсли;
	КонецЦикла;
	
	 Возврат МассивБизнесПроцессов;
	
 КонецФункции
 
///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТДЕЛЬНЫХ ОБЪЕКТОВ XDTO ПО ДАННЫМ ДО

// Передает значение важности процесса или задачи
// 
// Параметры:
//   Объект - БизнесПроцессОбъект, БизнесПроцессСсылка, ЗадачаОбъект, ЗадачаСсылка - источник данных
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеВажности(Объект, ОбъектXDTO)
	
	ИмяТипа = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Объект.Ссылка);
	Если Найти(ИмяТипа, "Task") > 0 Тогда
		ОбъектXDTO.importance = СоздатьОбъектXDTO("DMBusinessProcessTaskImportance");
	Иначе
		ОбъектXDTO.importance = СоздатьОбъектXDTO("DMBusinessProcessImportance");
	КонецЕсли;
	
	ОбъектXDTO.importance.name = ?(ЗначениеЗаполнено(Объект.Важность), Строка(Объект.Важность), "");
	ОбъектXDTO.importance.objectId = СоздатьОбъектXDTO("DMObjectID");
	Если ЗначениеЗаполнено(Объект.Важность) Тогда
		ОбъектXDTO.importance.objectId.id = ОбщегоНазначения.ИмяЗначенияПеречисления(Объект.Важность);
	Иначе
		ОбъектXDTO.importance.objectId.id = "";
	КонецЕсли;
	ОбъектXDTO.importance.objectId.type = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Объект.Важность);
	
КонецПроцедуры

// Передает значение автора процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка, ЗадачаОбъект, ЗадачаСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеАвтора(Ссылка, Объект)
	
	Объект.author = СоздатьОбъектXDTO("DMUser");
	Объект.author.name = Ссылка.Автор.Наименование;
	Объект.author.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка.Автор);
			
КонецПроцедуры

// Передает значение проверяющего процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеПроверяющего(Ссылка, Объект)
	
	Объект.verifier = СоздатьОбъектDMBusinessProcessTaskExecutor(Ссылка, Ссылка.Проверяющий, Ссылка.Проверяющий, "ОсновнойОбъектАдресацииПроверяющего", "ДополнительныйОбъектАдресацииПроверяющего");
			
КонецПроцедуры

// Передает значение одного исполнителя процесса.
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеОдногоИсполнителя(Ссылка, Объект)
	
	Объект.performer = СоздатьОбъектDMBusinessProcessTaskExecutor(Ссылка, Ссылка.Исполнитель, Ссылка.Исполнитель, "ОсновнойОбъектАдресации", "ДополнительныйОбъектАдресации");
			
КонецПроцедуры

// Передает значение предмета процесса или задачи
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка, ЗадачаОбъект, ЗадачаСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеПредметаБизнесПроцессаЗадачи(Ссылка, Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Ссылка);
	
	Если Предметы.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Предметы[0]) Тогда
			Объект.target = СоздатьОбъектXDTO("DMObject");
			Объект.target.name = Строка(Предметы[0]);
			Объект.target.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Предметы[0]);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Передает значение шаблона процесса
// 
// Параметры:
//   Ссылка - БизнесПроцессОбъект, БизнесПроцессСсылка - источник данных
//   Объект - ОбъектXDTO - заполняемый объект
//
Процедура ПередатьЗначениеШаблонаБизнесПроцесса(Ссылка, Объект)
	
	Если ЗначениеЗаполнено(Ссылка.Шаблон) Тогда
		Объект.businessProcessTemplate = СоздатьОбъектXDTO(ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Ссылка.Шаблон));
		Объект.businessProcessTemplate.name = Ссылка.Шаблон.Наименование;
		Объект.businessProcessTemplate.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Ссылка.Шаблон);
	КонецЕсли;
	
КонецПроцедуры 

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТДЕЛЬНЫХ ОБЪЕКТОВ ДО ПО ДАННЫМ ОБЪЕКТОВ XDTO

// Заполняет реквизит Исполнитель и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеОдногоИсполнителя(БизнесПроцессОбъект, ОбъектXDTO)
	
	Исполнитель = ОбъектXDTO.performer;
	Если Исполнитель.Установлено("user") Тогда
		БизнесПроцессОбъект.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.user.objectId);
	ИначеЕсли Исполнитель.Установлено("role") Тогда
		БизнесПроцессОбъект.Исполнитель = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.role.ObjectId);
		Если Исполнитель.Установлено("mainAddressingObject") Тогда
			БизнесПроцессОбъект.ОсновнойОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.mainAddressingObject.objectId);
		КонецЕсли;
		Если Исполнитель.Установлено("secondaryAddressingObject") Тогда
			БизнесПроцессОбъект.ДополнительныйОбъектАдресации = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Исполнитель.secondaryAddressingObject.objectId);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит Проверяющий и связанные с ним по данным объекта XDTO
// 
// Параметры:
//   БизнесПроцессОбъект - БизнесПроцессОбъект - заполняемый процесс
//   ОбъектXDTO - ОбъектXDTO типа DMBusinessProcessTaskExecutor - источник данных для заполнения
//
Процедура УстановитьЗначениеПроверяющего(БизнесПроцессОбъект, ОбъектXDTO)
	
	Если ОбъектXDTO.Установлено("verifier") Тогда
		Если ОбъектXDTO.verifier.Установлено("role") Тогда
			БизнесПроцессОбъект.Проверяющий = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.role.objectId);
			Если ОбъектXDTO.verifier.Установлено("mainAddressingObject") Тогда
				БизнесПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.mainAddressingObject.objectId);
			КонецЕсли;
			Если ОбъектXDTO.verifier.Установлено("secondaryAddressingObject") Тогда
				БизнесПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.secondaryAddressingObject.objectId);
			КонецЕсли;
		ИначеЕсли ОбъектXDTO.verifier.Установлено("user") Тогда
			БизнесПроцессОбъект.Проверяющий = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ОбъектXDTO.verifier.user.objectId);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет новый процесс РешениеВопросовВыполненияЗадач по умолчанию
//
// Параметры:
//   БПОбъект - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач - процесс к заполнению
//   Предмет - Произвольный - предмет процесса
// 
Процедура ЗаполнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет)
	
	БПОбъект.Автор = Пользователи.ТекущийПользователь();
	БПОбъект.ПредметРассмотрения = Предмет;
	БПОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	БПОбъект.СрокИсполнения = ТекущаяДатаСеанса() + 86400;
	
	Если ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БПОбъект.ИнициаторПроцесса = Предмет.Автор;
	КонецЕсли;
	
	ОбработкаЗапросовXDTOПереопределяемый.ДополнитьНовыйБизнесПроцессРешениеВопросов(БПОбъект, Предмет);
	
КонецПроцедуры

// Вызывает общую проверку правильности заполнения, бросая исключение в случае ошибки
//
Процедура ПроверитьПравильностьЗаполненияБизнесПроцесса(БизнесПроцессОбъект)
	
	ТекстСообщения = "";
	УспешнаяПроверка = ОбработкаЗапросовXDTO.ПроверитьЗаполнение(БизнесПроцессОбъект, ТекстСообщения);
	
	Если НЕ УспешнаяПроверка Тогда
		ВызватьИсключение(ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

// Дополняет массив шаблонов шаблонами, подходящими для указанного документа
// 
Процедура ДобавитьШаблоныПоПредмету(ШаблоныПоПредмету, Предмет, Тип)
	
	ШаблоныПоТипуПроцесса = ШаблоныБизнесПроцессов.ПолучитьШаблоныПоДокументу(Предмет, Тип);
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		ШаблоныПоПредмету.Добавить(Шаблон);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет массив шаблонов шаблонами, подходящими для указанного вида документа
// 
Процедура ДобавитьШаблоныПоВидуДокумента(ШаблоныПоВидуДокумента, ВидДокумента, Тип);
	
	ШаблоныПоТипуПроцесса = ПолучитьШаблоныПоВидуДокумента(ВидДокумента, Тип);
	Для Каждого Шаблон Из ШаблоныПоТипуПроцесса Цикл
		ШаблоныПоВидуДокумента.Добавить(Шаблон);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив шаблонов шаблонами, подходящими для указанного вида документа
// 
Функция ПолучитьШаблоныПоВидуДокумента(ВидДокумента, Тип, ТолькоНастроенные = Истина)
	
	ШаблоныПоДокументу = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
		Возврат ШаблоныПоДокументу;
	КонецЕсли;	
	
	Если ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыВходящихДокументов") 
		И ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыИсходящихДокументов") 
		И ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		
		Возврат ШаблоныПоДокументу;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Тип = "ШаблоныИсполнения" 
		Или Тип = "ШаблоныОзнакомления" 	
		Или Тип = "ШаблоныПоручения"
		Или Тип = "ШаблоныРассмотрения"
		Или Тип = "ШаблоныРегистрации"
		Или Тип = "ШаблоныСогласования"
		Или Тип = "ШаблоныПриглашения"
		Или Тип = "ШаблоныУтверждения"
		Или Тип = "ШаблоныКомплексныхБизнесПроцессов" Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ВидДокумента = &ВидДокумента
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе)
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник." + Тип + ")";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ВидДокумента = &ВидДокумента
		|	И НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления
		|	И НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе
		|	И ТИПЗНАЧЕНИЯ(НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса) = ТИП(Справочник.ШаблоныСоставныхБизнесПроцессов)
		|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ТипШаблона = &ТипШаблона";
		Запрос.УстановитьПараметр("ТипШаблона", Тип);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныПоДокументу.Добавить(Выборка.Шаблон);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоДокументу.Количество() = 0 Тогда
		
		Если Тип = "ШаблоныИсполнения" 
			Или Тип = "ШаблоныОзнакомления"
			Или Тип = "ШаблоныПоручения"
			Или Тип = "ШаблоныРассмотрения"
			Или Тип = "ШаблоныРегистрации"
			Или Тип = "ШаблоныСогласования"
			Или Тип = "ШаблоныПриглашения"
			Или Тип = "ШаблоныКомплексныхБизнесПроцессов"
			Или Тип = "ШаблоныУтверждения" Тогда 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник." + Тип + " КАК Шаблоны
			|ГДЕ
			|	НЕ Шаблоны.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ШаблоныСоставныхБизнесПроцессов.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник.ШаблоныСоставныхБизнесПроцессов КАК ШаблоныСоставныхБизнесПроцессов
			|ГДЕ
			|	ШаблоныСоставныхБизнесПроцессов.ТипШаблона = &ТипШаблона
			|	И НЕ ШаблоныСоставныхБизнесПроцессов.ШаблонВКомплексномПроцессе
			|	И 0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = ШаблоныСоставныхБизнесПроцессов.Ссылка)";
			
			Запрос.УстановитьПараметр("ТипШаблона", Тип);
		КонецЕсли;
		
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблоныПоДокументу.Добавить(Выборка.Шаблон);	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ШаблоныПоДокументу;
	
КонецФункции

// Создает и заполняет объект СоздатьОбъектDMBusinessProcessTaskExecutor
// 
Функция СоздатьОбъектDMBusinessProcessTaskExecutor(СсылкаНаОбъект, СсылкаНаРоль, СсылкаНаПользователя, ИмяСвойстваОсновнойОбъектАдресации, ИмяСвойстваДопОбъектАдресации) Экспорт
	
	Объект = СоздатьОбъектXDTO("DMBusinessProcessTaskExecutor");
	
	Если ЗначениеЗаполнено(СсылкаНаПользователя)
		И ТипЗнч(СсылкаНаПользователя) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.user = СоздатьОбъектXDTO("DMUser");
		Объект.user.name = СсылкаНаПользователя.Наименование;
		Объект.user.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаПользователя);		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаРоль)
		И ТипЗнч(СсылкаНаРоль) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Объект.role = СоздатьОбъектXDTO("DMBusinessProcessExecutorRole");
		Объект.role.name = СсылкаНаРоль.Наименование;
		Объект.role.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаРоль);
		Если ЗначениеЗаполнено(СсылкаНаОбъект[ИмяСвойстваОсновнойОбъектАдресации]) Тогда
			ИмяТипа = СтрЗаменить(СсылкаНаОбъект.ОсновнойОбъектАдресации.Метаданные().ПолноеИмя(), "Справочник.", "Справочники.");
			Объект.mainAddressingObject = СоздатьОбъектXDTO("DMMainAddressingObject");
			Объект.mainAddressingObject.name = СсылкаНаОбъект.ОсновнойОбъектАдресации.Наименование;
			Объект.mainAddressingObject.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъект[ИмяСвойстваОсновнойОбъектАдресации]);					
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаНаОбъект[ИмяСвойстваДопОбъектАдресации]) Тогда
			ИмяТипа = СтрЗаменить(СсылкаНаОбъект.ДополнительныйОбъектАдресации.Метаданные().ПолноеИмя(), "Справочник.", "Справочники.");
			Объект.secondaryAddressingObject = СоздатьОбъектXDTO("DMSecondaryAddressingObject");
			Объект.secondaryAddressingObject.name = СсылкаНаОбъект[ИмяСвойстваДопОбъектАдресации].Наименование;
			Объект.secondaryAddressingObject.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(СсылкаНаОбъект.ДополнительныйОбъектАдресации);	
		КонецЕсли;
	КонецЕсли;

	Возврат Объект;
	
КонецФункции

// Интерфейс к ОбработкаЗапросовXDTO.СоздатьОбъект
// 
Функция СоздатьОбъектXDTO(ТипОбъекта)
	
	Возврат ОбработкаЗапросовXDTO.СоздатьОбъект(ТипОбъекта);
	
КонецФункции

// Заменяет пустую дату на Неопределено, заполненную возвращает как есть
// 
Функция ОбработатьДату(ЗначениеДата)
	
	Если ЗначениеЗаполнено(ЗначениеДата) Тогда
		Возврат ЗначениеДата;
	Иначе
		Возврат Неопределено;        
	КонецЕсли;
	
КонецФункции

#КонецОбласти