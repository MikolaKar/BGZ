////////////////////////////////////////////////////////////////////////////////
// Бизнес процессы и задачи вызов сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получить структуру с описанием формы выполнения задачи.
//
// Параметры
// - ЗадачаСсылка – ЗадачаСсылка.ЗадачаИсполнителя – задача
//
// Возвращаемое значение:
// - Структура – структура с описанием формы выполнения задачи
//
Функция ПолучитьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный тип параметра ЗадачаСсылка (передан: %1; ожидается: %2)'"),
			ТипЗнч(ЗадачаСсылка),
			"ЗадачаСсылка.ЗадачаИсполнителя");
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, "БизнесПроцесс, ТочкаМаршрута");
	Если Реквизиты.БизнесПроцесс = Неопределено Или Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
	ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(
		ЗадачаСсылка,
		Реквизиты.ТочкаМаршрута);
	Возврат ПараметрыФормы;
	
КонецФункции

// Проверяет, находится ли в ячейке отчета ссылка на задачу и в параметре
// ЗначениеРасшифровки возвращает значение расшифровки.
//
Функция ЭтоЗадачаИсполнителю(Знач Расшифровка, Знач ДанныеРасшифровкиОтчета, ЗначениеРасшифровки) Экспорт
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиОтчета);
	ЗначениеРасшифровки = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Возврат ТипЗнч(ЗначениеРасшифровки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	
КонецФункции

// Выполнить задачу ЗадачаСсылка, при необходимости выполнив обработчик
// ОбработкаВыполненияПоУмолчанию модуля менеджера бизнес-процесса, 
// к которому относится задача ЗадачаСсылка.
//
Процедура ВыполнитьЗадачу(ЗадачаСсылка, ДействиеПоУмолчанию = Ложь) Экспорт

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗадачаСсылка);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗадачаОбъект.Прочитать();
		Если ДействиеПоУмолчанию И ЗадачаОбъект.БизнесПроцесс <> Неопределено 
			И НЕ ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
			ТипБизнесПроцесса = ЗадачаОбъект.БизнесПроцесс.Метаданные();
			БизнесПроцессы[ТипБизнесПроцесса.Имя].ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка,
				ЗадачаОбъект.БизнесПроцесс, ЗадачаОбъект.ТочкаМаршрута);
		КонецЕсли;
			
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ВыполнитьЗадачу();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Перенаправить задачи МассивЗадач новому исполнителю, указанному в структуре
// ИнфоОПеренаправлении. 
//
// Параметры
//  МассивЗадач          – Массив    – массив задач для перенаправления
//  ИнфоОПеренаправлении - Структура - содержит новые значения реквизитов адресации задачи
//  ТолькоПроверка       - Булево    - если Истина, то функция не будет выполнять
//                                     физического перенаправления задач, а только 
//                                     проверит возможность перенаправления.
//  МассивПеренаправленныхЗадач - Массив – массив перенаправленных задач.
//                                         Может отличаться по составу элементов от 
//                                         массива МассивЗадач, если какие-то задачи
//                                         не удалось перенаправить.
//
// Возвращаемое значение:
//   Булево   – Истина, если перенаправление выполнено успешно.
//
Функция ПеренаправитьЗадачи(Знач МассивЗадач, Знач ИнфоОПеренаправлении, Знач ТолькоПроверка = Ложь,
	МассивПеренаправленныхЗадач = Неопределено) Экспорт
	
	Результат = Истина;
	Для Каждого Задача Из МассивЗадач Цикл
		
		ЗадачаВыполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Ссылка, "Выполнена");
		Если ЗадачаВыполнена Тогда
			Результат = Ложь;
			Если ТолькоПроверка Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;	
		
		Если ТолькоПроверка Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(МассивПеренаправленныхЗадач) Тогда
			МассивПеренаправленныхЗадач = Новый Массив();
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
			Блокировка.Заблокировать();
							
			// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
			// позволить выполнять перенаправление по команде из формы этой задачи.
			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			
			УстановитьПривилегированныйРежим(Истина);
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Заполнить(ЗадачаОбъект);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, ИнфоОПеренаправлении, 
				"Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации");
			НоваяЗадача.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		
			МассивПеренаправленныхЗадач.Добавить(НоваяЗадача.Ссылка);
			
			ЗадачаОбъект.РезультатВыполнения = ИнфоОПеренаправлении.Комментарий; 
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.ВыполнитьЗадачу();
		
			ПриПеренаправленииЗадачи(ЗадачаОбъект, НоваяЗадача);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Задача.Метаданные(),
				Задача.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Отменяет выполнение задачи.
//
// Параметры:
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача, выполнение которой будет отменять в
//            текущей функции.
//
// Возвращаемое значение:
//   Структура - содержит результаты отмены выполнения.
//     Отказ - Булево - принимает Истина, если не удалось отменить выполнение задачи.
//     ПричинаОтказа - Строка - текстовое описание причины отказа отмены выполнения задачи.
//
Функция ОтменитьВыполнениеЗадачи(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отказ", Ложь);
	РезультатФункции.Вставить("ПричинаОтказа", "");
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, ТочкаМаршрута");
	
	НачатьТранзакцию();
	
	ЗаблокироватьДанныеДляРедактирования(РеквизитыЗадачи.БизнесПроцесс);
	
	ЗадачуМожноОтменить = ЗадачуМожноОтменить(Задача); 
	
	Если ЗадачуМожноОтменить.Отказ Тогда
		
		ПричинаОтказа = НСтр("ru = 'Эту задачу нельзя отменить. %1'");
		
		ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПричинаОтказа, ЗадачуМожноОтменить.ПричинаОтказа);
		
		РезультатФункции.ПричинаОтказа = ПричинаОтказа;
		РезультатФункции.Отказ = Истина;
		ОтменитьТранзакцию();
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	Попытка
	
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать();
		
		Запись = РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.СоздатьМенеджерЗаписи();
		Запись.Объект = Задача;
		Запись.Удалить();
		
		ПроцессОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
		
		Исполнители = ПроцессОбъект.Исполнители;
		НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
		
		НайденнаяСтрока.Пройден = Ложь;
		
		Если РеквизитыЗадачи.ТочкаМаршрута =
			БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
			
			РезультатыСогласования = ПроцессОбъект.РезультатыСогласования;
			НайденнаяСтрока = РезультатыСогласования.Найти(Задача, "ЗадачаИсполнителя");
			
			НайденнаяСтрока.РезультатСогласования =
				Перечисления.РезультатыСогласования.ПустаяСсылка();
			
		КонецЕсли;
		
		ПроцессОбъект.Записать();
		
		ЗадачаОбъект.Выполнена = Ложь;
		ЗадачаОбъект.ДатаИсполнения = '00010101';
		ЗадачаОбъект.Записать();
		
		// Удаление ЭП виз согласования
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВизыСогласования.Ссылка
			|ИЗ
			|	Справочник.ВизыСогласования КАК ВизыСогласования
			|ГДЕ
			|	ВизыСогласования.Источник = &Задача";
		Запрос.УстановитьПараметр("Задача", Задача);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектВизы = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектВизы.Подписана = Ложь;
			ОбъектВизы.Записать();
			
			РаботаСЭП.УдалитьПодписиОбъекта(Выборка.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		РезультатФункции.ПричинаОтказа = ОписаниеОшибки();
		РезультатФункции.Отказ = Истина;
		Возврат РезультатФункции;
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции

// Выполняет проверку возможности отменить выполнение задачи
//
// Параметры:
//   - Задача - ЗадачаССылка.ЗадачаИсполнителя - задача, для которой производится проверка.
//
// Возвращаемое значение:
//   - Структура
//       - Отказ - Булево - принимает значение Истина, если задачу отменить нельзя.
//       - ПричинаОтказа - Строка - содержит причину отказа.
//
Функция ЗадачуМожноОтменить(Задача) Экспорт
	
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Отказ", Ложь);
	РезультатФункции.Вставить("ПричинаОтказа", "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Задача) Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Пустая ссылка на задачу.'");
		Возврат РезультатФункции;
	КонецЕсли;
	
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Задача);
	Если Не ПраваПоОбъекту.Изменение Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Недостаточно прав.'");
		Возврат РезультатФункции;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Задача, "ТочкаМаршрута, БизнесПроцесс, Выполнена, ИсключенаИзПроцесса, ПометкаУдаления");
		
	Если НЕ ЗначениеЗаполнено(РеквизитыЗадачи.ТочкаМаршрута) Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'У задачи не указана точка маршрута.'");
		Возврат РезультатФункции;
	КонецЕсли;	
	
	
	Если НЕ ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'У задачи не указан процесс.'");
		Возврат РезультатФункции;	
	КонецЕсли;
	
	Если НЕ РеквизитыЗадачи.Выполнена Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Задача не выполнена.'");
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если РеквизитыЗадачи.ИсключенаИзПроцесса Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Задача исключена из процесса.'");
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если РеквизитыЗадачи.ПометкаУдаления Тогда
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Задача помечена на удаление.'");
		Возврат РезультатФункции;
	КонецЕсли;
	
	Если РеквизитыЗадачи.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда
		
		ВариантИсполнения = "ВариантИсполнения";
		
		ПорядокВыполненияЗадачи = "ПорядокИсполнения";
		
	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута =
		БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		
		ВариантИсполнения = "ВариантСогласования";
		
		ПорядокВыполненияЗадачи = "ПорядокСогласования";
		
	Иначе
		
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Для задачи не предусмотрена отмена выполнения.'");
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс,
		"Завершен, Исполнители, " + ВариантИсполнения);
	
	Если РеквизитыПроцесса.Завершен Тогда
		
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Задача относится к завершенному процессу.'");
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	ВариантМаршрутизацииЗадачПроцесса = РеквизитыПроцесса[ВариантИсполнения];
	
	Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	
	Исполнители.Сортировать("НомерСтроки Возр");
	
	СтрокаТекущейЗадачи = Исполнители.Найти(Задача,"ЗадачаИсполнителя");
	Если СтрокаТекущейЗадачи = Неопределено Тогда
		
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Задача не найдена в списке исполнителей процесса.'");
		Возврат РезультатФункции;
		
	КонецЕсли;
	
	Если ВариантМаршрутизацииЗадачПроцесса =
		Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пройден", Ложь);
		
		НайденныеСтроки = Исполнители.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат РезультатФункции;
		Иначе
			РезультатФункции.Отказ = Истина;
			РезультатФункции.ПричинаОтказа = НСтр("ru = 'Процесс перешел к следующей точке маршрута.'");
			Возврат РезультатФункции;
		КонецЕсли;
		
	ИначеЕсли ВариантМаршрутизацииЗадачПроцесса =
		Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		
		ЕстьНеИсполненныеЗадачи = Ложь;
		
		// Перебираем все строки таблицы Исполнители у Процесса начиная с предыдущей
		// в обратном порядке.
		ИндексСтроки = СтрокаТекущейЗадачи.НомерСтроки - 2; // Индекс предыдущей строки
		
		Пока ИндексСтроки >= 0 Цикл
			
			ТекущаяСтрока = Исполнители[ИндексСтроки];
			
			Если ТекущаяСтрока.Пройден = Ложь Тогда
				ЕстьНеИсполненныеЗадачи = Истина;
				Прервать;
			КонецЕсли;
			
			Если ТекущаяСтрока[ПорядокВыполненияЗадачи] <>
				Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
				
				Прервать;
				
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
			
		КонецЦикла;
		
		Если ЕстьНеИсполненныеЗадачи Тогда
			Возврат РезультатФункции;
		КонецЕсли;
		
		// Перебираем все строки таблицы Исполнители у Процесса начиная со следующей
		// в обратном порядке.
		ИндексСтроки = СтрокаТекущейЗадачи.НомерСтроки; // Индекс следующей строки
		
		КоличествоИсполнителей = Исполнители.Количество();
		
		Пока ИндексСтроки <= КоличествоИсполнителей -1 Цикл
			
			ТекущаяСтрока = Исполнители[ИндексСтроки];
			
			Если ТекущаяСтрока[ПорядокВыполненияЗадачи] <>
				Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Пройден = Ложь Тогда
				ЕстьНеИсполненныеЗадачи = Истина;
				Прервать;
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
		Если ЕстьНеИсполненныеЗадачи Тогда
			Возврат РезультатФункции;
		КонецЕсли;
		
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = НСтр("ru = 'Процесс перешел на следующий этап.'");
		Возврат РезультатФункции;
		
	Иначе
		
		РезультатФункции.Отказ = Истина;
		РезультатФункции.ПричинаОтказа = 
			НСтр("ru = 'Отмена выполнения предусмотрена только при параллельном или смешанном выполнении.'");
		Возврат РезультатФункции;
		
	КонецЕсли;
	
КонецФункции

// Отмечает указанные задачи как принятые к исполнению
//
Процедура ПринятьЗадачиКИсполнению(Задачи) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Для каждого Задача Из Задачи Цикл
			Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				ЗадачаОбъект.Заблокировать();
				
				Если ЗадачаОбъект.Выполнена
					ИЛИ ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
					ИЛИ ЗадачаОбъект.ПринятаКИсполнению
					ИЛИ ЗадачаОбъект.ПометкаУдаления Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЗадачаОбъект.ПринятаКИсполнению = Истина;
				ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
				Если ЗадачаОбъект.Исполнитель.Пустая() Тогда
					ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
				КонецЕсли;
				
				ЗадачаОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отмечает указанные задачи как не принятые к исполнению
//
Процедура ОтменитьПринятиеЗадачКИсполнению(Задачи) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НовыйМассивЗадач = Новый Массив();
		Для каждого Задача Из Задачи Цикл
			Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				ЗадачаОбъект.Заблокировать();
				
				Если ЗадачаОбъект.Выполнена
					ИЛИ ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
					ИЛИ НЕ ЗадачаОбъект.ПринятаКИсполнению
					ИЛИ ЗадачаОбъект.ПометкаУдаления Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЗадачаОбъект.ПринятаКИсполнению = Ложь;
				ЗадачаОбъект.ДатаПринятияКИсполнению = "00010101000000";
				Если Не ЗадачаОбъект.РольИсполнителя.Пустая() Тогда
					ЗадачаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
				КонецЕсли;
				ЗадачаОбъект.Записать();
				
				НовыйМассивЗадач.Добавить(Задача)
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Задачи = НовыйМассивЗадач;
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает дату завершения указанного бизнес-процесса,
// полученную как максимальная дата исполнения задач бизнес-процесса.
//
// Параметры
//  БизнесПроцессСсылка  - бизнес-процесс
//
// Возвращаемое значение:
//   Дата
//
Функция ДатаЗавершенияБизнесПроцесса(БизнесПроцессСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗадачаИсполнителя.ДатаИсполнения) КАК МаксДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = ИСТИНА";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.МаксДатаИсполнения;
	
КонецФункции

// Возвращает число невыполненных задач по указанным бизнес-процессам
//
Функция ПолучитьЧислоНевыполненныхЗадачБизнесПроцессов(БизнесПроцессы) Экспорт
	
	ЧислоЗадач = 0;
	
	Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
		
		Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоЗадач = ЧислоЗадач + ПолучитьЧислоНевыполненныхЗадачБизнесПроцесса(БизнесПроцесс);
		
	КонецЦикла;
	
	Возврат ЧислоЗадач;
	
КонецФункции

// Возвращает число невыполненных задач по указанному бизнес-процессу
//
Функция ПолучитьЧислоНевыполненныхЗадачБизнесПроцесса(БизнесПроцесс) Экспорт
	
	Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.Выполнена = Ложь
		|	И Задачи.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Возвращает число не завершенных подчиненных процессов по указанному бизнес-процессу
//
Функция ПолучитьЧислоНевыполненныхПодчиненныхПроцессовБизнесПроцесса(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ДанныеБизнесПроцессов.ВедущаяЗадача = Задачи.Ссылка
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.Выполнена = ЛОЖЬ
		|	И Задачи.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО ДанныеБизнесПроцессов.ГлавнаяЗадача = Задачи.Ссылка
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.Выполнена = ЛОЖЬ
		|	И Задачи.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = 0;
	
	Пока Выборка.Следующий() Цикл
		Результат = Результат + 1 + ПолучитьЧислоНевыполненныхПодчиненныхПроцессовБизнесПроцесса(
			Выборка.БизнесПроцесс);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли указанная задача ведущей.
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоВедущаяЗадача(ЗадачаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = БизнесПроцессыИЗадачиСервер.ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция ВыбратьЗавершенныеЗадачиПоАвторам(Знач ДатаВремяОт, Знач ДатаВремяПо)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Номер КАК Номер,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ЗадачаИсполнителя.Наименование КАК Наименование,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Описание КАК Описание,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ИсполнителиЗадач.Исполнитель
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И ЗадачаИсполнителя.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ЗадачаИсполнителя.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И (ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ИСТИНА
		|	И ЗадачаИсполнителя.ДатаИсполнения > &ДатаВремяОт
		|	И ЗадачаИсполнителя.ДатаИсполнения <= &ДатаВремяПо
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И (ЗадачаИсполнителя.Исполнитель ЕСТЬ НЕ NULL 
		|				И ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИЛИ ИсполнителиЗадач.Исполнитель ЕСТЬ НЕ NULL 
		|				И ИсполнителиЗадач.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Автор,
		|	ЗадачаИсполнителя.ДатаИсполнения УБЫВ
		|ИТОГИ ПО
		|	Автор");
	Запрос.Параметры.Вставить("ДатаВремяОт", ДатаВремяОт);
	Запрос.Параметры.Вставить("ДатаВремяПо", ДатаВремяПо);
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

// Обработчик регламентного задания МониторингЗадач.
//
Процедура ПроконтролироватьЗадачи() Экспорт
	
	// При выполнении в регламентном задании переходим безусловно в привилегированный режим.
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	УведомитьАвторовОЗавершенныхЗадачах();
	
	ПросроченныеЗадачи = ВыбратьПросроченныеЗадачи();
	Если ПросроченныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборПисемПоАдресатам = Новый ТаблицаЗначений;
	НаборПисемПоАдресатам.Колонки.Добавить("ПочтовыйАдрес");
	НаборПисемПоАдресатам.Колонки.Добавить("ТекстПисьма");
	НаборПисемПоАдресатам.Колонки.Добавить("КоличествоЗадач");
	НаборПисемПоАдресатам.Колонки.Добавить("ТипПисьма");
	НаборПисемПоАдресатам.Колонки.Добавить("Получатель");
	
	Для каждого ЭлементПросроченныеЗадачи Из ПросроченныеЗадачи Цикл
		ПросроченнаяЗадача = ЭлементПросроченныеЗадачи.Ссылка;
		
		ТекстПисьма = СформироватьПредставлениеЗадачи(ЭлементПросроченныеЗадачи);
		// Задача адресована лично исполнителю?
		Если ЗначениеЗаполнено(ПросроченнаяЗадача.Исполнитель) Тогда
			ПолучательПисьма = "";
			БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПросроченнаяЗадача.Исполнитель, ПолучательПисьма);
			НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, ПросроченнаяЗадача.Исполнитель, ТекстПисьма, "Исполнителю");
			ПолучательПисьма = "";
			БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(ПросроченнаяЗадача.Автор, ПолучательПисьма);
			НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, ПросроченнаяЗадача.Автор, ТекстПисьма, "Автору");
		Иначе
			Исполнители = ВыбратьИсполнителейЗадач(ПросроченнаяЗадача);
			Координаторы = НайтиОтветственныхЗаНазначениеРолей(ПросроченнаяЗадача);
			// Есть хотя бы один исполнитель для измерений ролевой адресации задачи?
			Если Исполнители.Количество() > 0 Тогда
				// Исполнитель не выполняет свои задачи.
				Для каждого Исполнитель Из Исполнители Цикл
					ПолучательПисьма = "";
					БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(Исполнитель.Исполнитель, ПолучательПисьма);
					НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, Исполнитель.Исполнитель, ТекстПисьма, "Исполнителю");
				КонецЦикла;
			Иначе // Задачу исполнять некому.
				СоздатьЗадачуПоНастройкеРолей(ПросроченнаяЗадача, Координаторы);
			КонецЕсли;
			
			Для каждого Координатор Из Координаторы Цикл
				ПолучательПисьма = "";
				БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(Координатор, ПолучательПисьма);
				НайтиПисьмоИДобавитьТекст(НаборПисемПоАдресатам, ПолучательПисьма, Координатор, ТекстПисьма, "Координатору");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПисьмоИзНабора Из НаборПисемПоАдресатам Цикл
		
		Если ПустаяСтрока(ПисьмоИзНабора.ПочтовыйАдрес) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление не было отправлено, так как у пользователя %1 не задан адрес электронной почты.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПисьмоИзНабора.Получатель);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Процессы и задачи.Уведомление о просроченных задачах'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", ПисьмоИзНабора.ПочтовыйАдрес);
		Если ПисьмоИзНабора.ТипПисьма = "Исполнителю" Тогда
			ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас имеются не выполненные в срок задачи:
					|
					|%1'"),
				ПисьмоИзНабора.ТекстПисьма);
			ПараметрыПисьма.Вставить("Текст", ТекстТелаПисьма);
			
			ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас имеются не выполненные в срок задачи (%1)'"),
				Строка(ПисьмоИзНабора.КоличествоЗадач ));
			ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
		ИначеЕсли ПисьмоИзНабора.ТипПисьма = "Автору" Тогда
			ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По созданным вами задачам прошел крайний срок:
					|
					|%1'"),
				ПисьмоИзНабора.ТекстПисьма);
			ПараметрыПисьма.Вставить("Текст", ТекстТелаПисьма);
			
			ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По Вашим задачам истек контрольный срок (%1)'"),
				Строка(ПисьмоИзНабора.КоличествоЗадач));
			ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
		ИначеЕсли ПисьмоИзНабора.ТипПисьма = "Координатору" Тогда
			ТекстТелаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Прошел крайний срок по задачам:
					|
					|%1'"),
				ПисьмоИзНабора.ТекстПисьма);
			ПараметрыПисьма.Вставить("Текст", ТекстТелаПисьма);
			
			ТекстТемыПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Истек контрольный срок задач (%1)'"),
				Строка(ПисьмоИзНабора.КоличествоЗадач));
			ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);
		КонецЕсли;
		
		ТекстСообщения = "";
		
		Попытка
			ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при отправке уведомления о просроченных задачах: %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ОписаниеОшибки);
			УровеньВажностиСобытия = УровеньЖурналаРегистрации.Ошибка;
		КонецПопытки;
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			Кому = ПараметрыПисьма.Кому;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление о просроченных задачах успешно отправлено на адрес %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Кому);
			УровеньВажностиСобытия = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Процессы и задачи.Уведомление о просроченных задачах'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньВажностиСобытия,,,
			ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура УведомитьАвторовОЗавершенныхЗадачах() Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	УстановитьПривилегированныйРежим(Истина);
	ДатаПоследнегоУведомления = Константы.ДатаУведомленияОЗавершенныхЗадачах.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	// Если оповещение ранее не производилось, или последнее оповещение происходило
	// ранее, чем за 3 дня, то отбираем завершенные задачи за последние 3 дня.
	Если (ДатаПоследнегоУведомления = '00010101000000') 
		Или (ТекущаяДата - ДатаПоследнегоУведомления > 3*24*60*60) Тогда
		ДатаПоследнегоУведомления = ТекущаяДата - 3*24*60*60;
	КонецЕсли;
	
	ЗадачиПоАвторам = ВыбратьЗавершенныеЗадачиПоАвторам(ДатаПоследнегоУведомления, ТекущаяДата);
	Для каждого СтрокаАвтора Из ЗадачиПоАвторам.Строки Цикл
		ОтправитьУведомлениеОЗавершенныхЗадачах(СтрокаАвтора.Автор, СтрокаАвтора);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ДатаУведомленияОЗавершенныхЗадачах.Установить(ТекущаяДата);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОтправитьУведомлениеОЗавершенныхЗадачах(Автор, ЗадачиПоАвтору)
	
	ПочтовыйАдресПолучателя = Неопределено;
	БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(Автор, ПочтовыйАдресПолучателя);
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Процессы и задачи.Уведомление о завершенных задачах'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			Автор.Метаданные(),
			Автор,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Строка(Автор)));
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ТекстПисьма = "";
	Заголовок = "";
	Для Каждого Задача Из ЗадачиПоАвтору.Строки Цикл
		ИсторияСобытийЗадач.ЗаписатьСобытие(
			Задача.Ссылка,
			Перечисления.ВидыСобытийЗадач.ОтправленоУведомление);
		ПредставлениеЗадачи = СформироватьПредставлениеЗадачи(Задача);
		Заголовок = ПолучитьПервуюСтроку(ПредставлениеЗадачи);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстПисьма,
			Символы.ПС + "------------------------------------" + Символы.ПС,
			ПредставлениеЗадачи);
		КонецЦикла;
	КоличествоЗадач = ЗадачиПоАвтору.Строки.Количество();
	Если КоличествоЗадач = 1 Тогда
		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнена задача: %1'"),
			Заголовок);
	Иначе
		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнены задачи (%1)'"),
			КоличествоЗадач);
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Текст", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	Попытка
		ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Процессы и задачи.Уведомление о завершенных задачах'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при отправке уведомления о завершенных задачах: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат;
	КонецПопытки;

	ЗафиксироватьТранзакцию();
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Процессы и задачи.Уведомление о завершенных задачах'"),
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"),
			ПочтовыйАдресПолучателя));
	
КонецПроцедуры

// Возвращает массив подчиненных указанной задаче бизнес-процессов
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   массив ссылок на бизнес-процессы
//
Функция ПолучитьБизнесПроцессыГлавнойЗадачи(ЗадачаСсылка) Экспорт
	
	Результат = Новый Массив;
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Попытка
			ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	%1.Ссылка КАК Ссылка
				|ИЗ
				|	%2 КАК %1
				|ГДЕ
				|	%1.ГлавнаяЗадача = &ГлавнаяЗадача", ТипБизнесПроцесса.Имя, ТипБизнесПроцесса.ПолноеИмя());
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		Исключение
			// У бизнес-процесса может и не быть главной задачи
		КонецПопытки
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет задачу по почте с указанным вариантом выполнения и комментарием.
//
// Параметры:
//  Параметры - Структура, содержит два элемента.
//	 ВариантВыполнения - ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач, вариант выполнения задачи.
//	 Комментарий - Строка, комментарий пользователя.
//
Процедура ВыполнитьЗадачуПоПочте(ЗадачаСсылка, Параметры = Неопределено) Экспорт

	ВариантВыполнения = Параметры.ВариантВыполнения;
	
	ПараметрыВыполнения = Новый Структура;
	Если ЗначениеЗаполнено(Параметры.Комментарий) Тогда
		ПараметрыВыполнения.Вставить("РезультатВыполнения", Параметры.Комментарий);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("ИсполнительЗадачи", Параметры.Исполнитель);
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ЗадачаСсылка, "БизнесПроцесс, ТочкаМаршрута");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;
	
	ТочкиМаршрута = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцесс).ТочкиМаршрута;
	
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
			ОтправленоНаДоработку =
				ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
			ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", ОтправленоНаДоработку);
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатПриглашения", 
					Перечисления.РезультатыПриглашения.Принято);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатПриглашения", 
					Перечисления.РезультатыПриглашения.НеПринято);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", Истина);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
				ПараметрыВыполнения.Вставить("ПовторитьПриглашение", Истина);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтложитьПриглашение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ВариантРассмотрения", 
					Перечисления.ВариантыРассмотрения.ВвестиТекстРезолюции);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("ПодтвердитьПриглашение", 
					Перечисления.ВариантыОбработкиРезолюции.НеНаправлять);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтправитьНаУточнение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Согласовать Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.Согласовано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.НеСогласовано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
				ПараметрыВыполнения.Вставить("РезультатСогласования", 
					Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьСогласование", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Утвердить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатУтверждения", 
					Перечисления.РезультатыУтверждения.Утверждено);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатУтверждения", 
					Перечисления.РезультатыУтверждения.НеУтверждено);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьУтверждение", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Проверить Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ОтправленоНаДоработку", Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		Если ТочкаМаршрута = ТочкиМаршрута.Зарегистрировать Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				ПараметрыВыполнения.Вставить("РезультатРегистрации", 
					Перечисления.РезультатыРегистрации.Зарегистрировано);
			ИначеЕсли ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("РезультатРегистрации", 
					Перечисления.РезультатыРегистрации.НеЗарегистрировано);
			КонецЕсли;
		ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
			Если ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				ПараметрыВыполнения.Вставить("ПовторитьРегистрацию", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗадачуСПараметрами(ЗадачаСсылка, ПараметрыВыполнения);

КонецПроцедуры

// Выполнить задачу ЗадачаСсылка с параметрами выполнения, при необходимости выполнив обработчик
// ОбработкаВыполнения модуля менеджера бизнес-процесса,
// к которому относится задача ЗадачаСсылка.
//
Процедура ВыполнитьЗадачуСПараметрами(ЗадачаСсылка, ПараметрыВыполнения = Неопределено) Экспорт

	НачатьТранзакцию();
	Попытка
		ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
		
		Если ПараметрыВыполнения <> Неопределено Тогда
			Если ЗадачаОбъект.БизнесПроцесс <> Неопределено И НЕ ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
				БизнесПроцессМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаОбъект.БизнесПроцесс);
				БизнесПроцессМенеджер.ОбработкаВыполнения(ЗадачаСсылка, ЗадачаОбъект.БизнесПроцесс,
					ЗадачаОбъект.ТочкаМаршрута, ПараметрыВыполнения);
			КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
				ЗадачаОбъект.РезультатВыполнения = ПараметрыВыполнения.РезультатВыполнения;
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ДатаИсполнения") Тогда
				ЗадачаОбъект.ДатаИсполнения = ПараметрыВыполнения.ДатаИсполнения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи") Тогда
			ЗадачаОбъект.Исполнитель= ПараметрыВыполнения.ИсполнительЗадачи;
		КонецЕсли;
		
		ЗадачаОбъект.ВыполнитьЗадачу();
		РазблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
		
		ПротоколированиеРаботыПользователей.ЗаписатьИзменение(ЗадачаСсылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение задачи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			ЗадачаСсылка.Метаданные(),
			ПолучитьНавигационнуюСсылку(ЗадачаСсылка),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Возвращает количество вопросов выполнения задачи.
// При вычислении учитываются права доступа.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - Задача, для которой производится вычисление
//           количества вопросов.
//
// Возвращаемое значение:
//   Число - количество вопросов выполнения.
//
Функция КоличествоВопросовВыполненияЗадачи(Задача) Экспорт

	Если НЕ ЗначениеЗаполнено(Задача) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РешениеВопросовВыполненияЗадач.Ссылка
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &Задача";
		
	Запрос.УстановитьПараметр("Задача", Задача);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции

// Записать бизнес-процесс БизнесПроцессСсылка в общий список,
// задав при этом значения полей из структуры ЗначенияПолей.
// 
Процедура ЗаписатьВСписокБизнесПроцессов(БизнесПроцессСсылка, ЗначенияПолей) Экспорт
	
	ЗначенияПолей.Вставить(
		"ТрудозатратыПлан", 
		РаботаСБизнесПроцессами.ПолучитьСуммарныеТрудозатратыПроцессаЧас(БизнесПроцессСсылка));
	ЗначенияПолей.Вставить("БизнесПроцесс", БизнесПроцессСсылка);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Номер,
		|	ДанныеБизнесПроцессов.Важность,
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.Дата,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.Стартован,
		|	ДанныеБизнесПроцессов.Автор,
		|	ДанныеБизнесПроцессов.ДатаЗавершения,
		|	ДанныеБизнесПроцессов.ОбъектДоступа,
		|	ДанныеБизнесПроцессов.Проект,
		|	ДанныеБизнесПроцессов.ПроектнаяЗадача,
		|	ДанныеБизнесПроцессов.Состояние,
		|	ДанныеБизнесПроцессов.Наименование,
		|	ДанныеБизнесПроцессов.СрокИсполнения,
		|	ДанныеБизнесПроцессов.ТрудозатратыПлан,
		|	ДанныеБизнесПроцессов.ПометкаУдаления,
		|	ДанныеБизнесПроцессов.НомерИтерации,
		|	ДанныеБизнесПроцессов.ОсновнойПредмет,
		|	ДанныеБизнесПроцессов.ДатаНачала
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЕстьРазличия = Ложь;
		Для Каждого КлючЗначение Из ЗначенияПолей Цикл
			Если КлючЗначение.Значение <> Выборка[КлючЗначение.Ключ] Тогда
				ЕстьРазличия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьРазличия Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
	МенеджерЗаписи.Завершен = Выборка.Завершен;
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияПолей);
	БизнесПроцессыИЗадачиПереопределяемый.ПриЗаписиСпискаБизнесПроцессов(МенеджерЗаписи);
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Помечает на удаление задачи указанного бизнес-процесса.
//
// Параметры
//  БизнесПроцессСсылка  - бизнес-процесс
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УстановитьПометкуУдаленияЗадач(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БизнесПроцессСсылка, "ПометкаУдаления");
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		БизнесПроцессыИЗадачиСервер.УстановитьПометкуУдаленияЗадач(БизнесПроцессСсылка, ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

// Пометить на удаление вложенные и подчиненные бизнес-процессы задачи ЗадачаСсылка.
//
// Параметры
//  ЗадачаСсылка                 - ЗадачаСсылка.ЗадачаИсполнителя
//  НовоеЗначениеПометкиУдаления - Булево
//
Процедура ПриПометкеУдаленияЗадачи(ЗадачаСсылка, НовоеЗначениеПометкиУдаления) Экспорт
	
	ОбъектЗадачи = ЗадачаСсылка.Метаданные();
	Если НовоеЗначениеПометкиУдаления И Не ПравоДоступа("ИнтерактивнаяПометкаУдаления", ОбъектЗадачи) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.'");
	КонецЕсли;
	Если Не НовоеЗначениеПометкиУдаления И Не ПравоДоступа("ИнтерактивноеСнятиеПометкиУдаления", ОбъектЗадачи) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Помечаем вложенные бизнес-процессы
		УстановитьПривилегированныйРежим(Истина);
		ВложенныеБизнесПроцессы = БизнесПроцессыИЗадачиСервер.БизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
		Для каждого ВложенныйБизнесПроцесс Из ВложенныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
		// Помечаем подчиненные бизнес-процессы
		ПодчиненныеБизнесПроцессы = ПолучитьБизнесПроцессыГлавнойЗадачи(ЗадачаСсылка);
		Для каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Заблокировать();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записать событие открытия карточки и также записать обращение к объекту
Процедура ЗаписатьСобытиеОткрытаКарточкаИОбращениеКОбъекту(Задача) Экспорт
	
	ИсторияСобытийЗадач.ЗаписатьСобытиеОткрытаКарточка(Задача);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Задача);
	
КонецПроцедуры

// Получает имя формы бизнес-процесса по шаблону бизнес-процесса
Функция ПолучитьИмяФормыПроцессаПоШаблону(Шаблон) Экспорт
	
	ИмяПроцесса = Справочники[Шаблон.Метаданные().Имя].ИмяПроцесса(Шаблон);
	Возврат Метаданные.БизнесПроцессы[ИмяПроцесса].ОсновнаяФормаОбъекта.ПолноеИмя();
	
КонецФункции

// Отмечает указанные бизнес-процессы как активные
//
Процедура СделатьАктивнымБизнесПроцессы(БизнесПроцессы) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
			
			Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			СделатьАктивнымБизнесПроцесс(БизнесПроцесс);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
 		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как активный
//
Процедура СделатьАктивнымБизнесПроцесс(БизнесПроцесс) Экспорт
	
	ИзменитьСостояниеБизнесПроцесса(
		БизнесПроцесс,
		Перечисления.СостоянияБизнесПроцессов.Активен);
	
КонецПроцедуры

// Отмечает указанные бизнес-процессы как остановленные
//
Процедура ОстановитьБизнесПроцессы(БизнесПроцессы) Экспорт
	
	НачатьТранзакцию();
	Попытка 
		Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
			
			Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			ОстановитьБизнесПроцесс(БизнесПроцесс);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отмечает указанный бизнес-процесс как остановленный
//
Процедура ОстановитьБизнесПроцесс(БизнесПроцесс) Экспорт
	
	ИзменитьСостояниеБизнесПроцесса(
		БизнесПроцесс,
		Перечисления.СостоянияБизнесПроцессов.Остановлен);
	
КонецПроцедуры

Процедура ПрерватьБизнесПроцесс(БизнесПроцесс, ПричинаПрерывания) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс);
	Попытка
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Состояние = ПредопределенноеЗначение(
			"Перечисление.СостоянияБизнесПроцессов.Прерван");
		БизнесПроцессОбъект.ПричинаПрерывания = ПричинаПрерывания;
		БизнесПроцессОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(БизнесПроцесс);
	Исключение
		РазблокироватьДанныеДляРедактирования(БизнесПроцесс);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает Истина если задача соответствует указанной точке маршрута
Функция ПроверитьТипЗадачи(Задача, ТочкаМаршрута) Экспорт
	
	Возврат Задача.ТочкаМаршрута = ТочкаМаршрута;
	
КонецФункции

// Помечает на удаление указанные бизнес-процессы
//
Функция ПометитьНаУдалениеБизнесПроцессы(ВыделенныеСтроки) Экспорт
	
	Количество = 0;
	Для каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		БизнесПроцессСсылка = СтрокаТаблицы.БизнесПроцесс;
		Если БизнесПроцессСсылка = Неопределено Или БизнесПроцессСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		БизнесПроцессОбъект.УстановитьПометкуУдаления(Не БизнесПроцессОбъект.ПометкаУдаления);
		Количество = Количество + 1;
	КонецЦикла;
	Возврат ?(Количество = 1, ВыделенныеСтроки[0].БизнесПроцесс, Неопределено);
	
КонецФункции

// Проверяет наличие прав для того, чтобы отметить бизнес-процесс
// как остановленный или активный
//
Функция ЕстьПраваНаОстановкуБизнесПроцесса(БизнесПроцесс) Экспорт
	
	Результат = БизнесПроцессыИЗадачиПереопределяемый.ЕстьПраваНаОстановкуБизнесПроцесса(БизнесПроцесс);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПравоНаИзменениеБП = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(БизнесПроцесс).Изменение;
	
	Возврат ПравоНаИзменениеБП;
	
КонецФункции

Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
	Иначе
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс.Ссылка);
	КонецЕсли;
	
	Возврат МенеджерПроцесса.ТекущиеУчастникиПроцесса(Процесс);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриПеренаправленииЗадачи(ЗадачаОбъект, НоваяЗадачаОбъект) 
	
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено Или ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипБизнесПроцесса = ЗадачаОбъект.БизнесПроцесс.Метаданные();
	Попытка
		БизнесПроцессы[ТипБизнесПроцесса.Имя].ПриПеренаправленииЗадачи(ЗадачаОбъект.Ссылка, НоваяЗадачаОбъект.Ссылка);
	Исключение
		// метод не определен
	КонецПопытки;
	
КонецПроцедуры

// Изменяет состояние бизнес-процесса.
//
// Параметры:
//   - БизнесПроцесс - БизнесПроцессСсылка - ссылка на бизнес-процесс.
//   - НовоеСостояние - ПеречислениеСсылка.СостоянияБизнесПроцессов - новое состояние 
//                      которое необходимо установить процессу из формы
//
Процедура ИзменитьСостояниеБизнесПроцесса(БизнесПроцесс, НовоеСостояние)
	
	Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцесс);
	
	Объект = БизнесПроцесс.ПолучитьОбъект();
	
	Если Объект.Состояние = НовоеСостояние Тогда
		
		РазблокироватьДанныеДляРедактирования(БизнесПроцесс);
		
		Если НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			ВызватьИсключение НСтр("ru = 'Процесс уже активен.'");
		ИначеЕсли НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			ВызватьИсключение НСтр("ru = 'Процесс уже остановлен.'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Объект.Состояние = НовоеСостояние;
	Объект.Записать();
	РазблокироватьДанныеДляРедактирования(БизнесПроцесс);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Мониторинг и контроль исполнения 

Функция ВыгрузитьИсполнителей(ТекстЗапроса, ОсновнойОбъектАдресацииСсылка, ДопОбъектАдресацииСсылка)
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ДопОбъектАдресацииСсылка) Тогда
		Запрос.УстановитьПараметр("ДОА", ДопОбъектАдресацииСсылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресацииСсылка) Тогда
		Запрос.УстановитьПараметр("ООА", ОсновнойОбъектАдресацииСсылка);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиИсполнителейПоРолям(Знач Задача, Знач БазовыйТекстЗапроса)
	
	СписокПользователей = Новый Массив;
	
	ООА = Задача.ОсновнойОбъектАдресации;
	ДОА = Задача.ДополнительныйОбъектАдресации;
	
	Если ЗначениеЗаполнено(ДОА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса +
		"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
		|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДОА";

	ИначеЕсли ЗначениеЗаполнено(ООА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса +
			"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
			|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено";
	Иначе
		ТекстЗапроса = БазовыйТекстЗапроса +
			"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено
			|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено";
	КонецЕсли;
	
	ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, ООА, ДОА);
	
	// Если в задаче не заполнены основной и дополнительный объекты адресации
	Если Не ЗначениеЗаполнено(ДОА) И Не ЗначениеЗаполнено(ООА) Тогда
		Для каждого ЭлементВыгрузки Из ВыгрузкаИсполнителей Цикл
			СписокПользователей.Добавить(ЭлементВыгрузки.Исполнитель);
		КонецЦикла;
		
		Возврат СписокПользователей;
	КонецЕсли;
	
	Если ВыгрузкаИсполнителей.Количество() = 0 И ЗначениеЗаполнено(ДОА) Тогда
		ТекстЗапроса = БазовыйТекстЗапроса +
			"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ООА
			|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено";
		ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, ООА, Неопределено);
	КонецЕсли;
	
	Если ВыгрузкаИсполнителей.Количество() = 0 Тогда
		ТекстЗапроса = БазовыйТекстЗапроса +
			"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено
			|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Неопределено";
		ВыгрузкаИсполнителей = ВыгрузитьИсполнителей(ТекстЗапроса, Неопределено, Неопределено);
	КонецЕсли;
	
	Для Каждого ЭлементВыгрузки Из ВыгрузкаИсполнителей Цикл
		СписокПользователей.Добавить(ЭлементВыгрузки.Исполнитель);
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

Функция НайтиОтветственныхЗаНазначениеРолей(Знач Задача)
	
	БазовыйТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач,
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка
		|	И РолиИсполнителей.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения)";
	
	Ответственные = НайтиИсполнителейПоРолям(Задача, БазовыйТекстЗапроса);
	Возврат Ответственные;
	
КонецФункции

Функция ВыбратьИсполнителейЗадач(Знач Задача)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
		|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", Задача.РольИсполнителя);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", Задача.ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", Задача.ДополнительныйОбъектАдресации);
	Исполнители = Запрос.Выполнить().Выгрузить();
	Возврат Исполнители;
	
КонецФункции

Процедура НайтиПисьмоИДобавитьТекст(
	Знач НаборПисемПоАдресатам,
	Знач ПолучательПисьма,
	Знач ПредставлениеПолучателяПисьма,
	Знач ТекстПисьма,
	Знач ТипПисьма)
	
	ПараметрыОтбора = Новый Структура("ТипПисьма, ПочтовыйАдрес", ТипПисьма, ПолучательПисьма);
	СтрокаПараметрыПисьма = НаборПисемПоАдресатам.НайтиСтроки(ПараметрыОтбора);
	Если СтрокаПараметрыПисьма.Количество() = 0 Тогда
		СтрокаПараметрыПисьма = Неопределено;
	Иначе
		СтрокаПараметрыПисьма = СтрокаПараметрыПисьма[0];
	КонецЕсли;
	
	Если СтрокаПараметрыПисьма = Неопределено Тогда
		СтрокаПараметрыПисьма = НаборПисемПоАдресатам.Добавить();
		СтрокаПараметрыПисьма.ПочтовыйАдрес = ПолучательПисьма;
		СтрокаПараметрыПисьма.ТекстПисьма = "";
		СтрокаПараметрыПисьма.КоличествоЗадач = 0;
		СтрокаПараметрыПисьма.ТипПисьма = ТипПисьма;
		СтрокаПараметрыПисьма.Получатель = ПредставлениеПолучателяПисьма;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПараметрыПисьма.ТекстПисьма) Тогда
		СтрокаПараметрыПисьма.ТекстПисьма =
			СтрокаПараметрыПисьма.ТекстПисьма + Символы.ПС +
			"------------------------------------" + Символы.ПС;
	КонецЕсли;
	
	СтрокаПараметрыПисьма.КоличествоЗадач = СтрокаПараметрыПисьма.КоличествоЗадач + 1;
	СтрокаПараметрыПисьма.ТекстПисьма = СтрокаПараметрыПисьма.ТекстПисьма + ТекстПисьма;
	
КонецПроцедуры

Функция ВыбратьПросроченныеЗадачи()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Описание КАК Описание,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		СрокИсполнения = ТекущаяДатаСеанса();
	Иначе
		СрокИсполнения = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	Возврат ПросроченныеЗадачи;
	
КонецФункции

Функция СоздатьЗадачуПоНастройкеРолей(ЗадачаСсылка, Ответственные)
	
	Для каждого Ответственный Из Ответственные Цикл
		ЗадачаОбъект = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗадачаОбъект.СрокИсполнения = КонецДня(ТекущаяДатаСеанса());
		ЗадачаОбъект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая;
		ЗадачаОбъект.Исполнитель = Ответственный;
		СтрокаПредмета = ЗадачаОбъект.Предметы.Добавить();
		СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		СтрокаПредмета.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(ЗадачаСсылка);
		СтрокаПредмета.Предмет = ЗадачаСсылка;
		
		ЗадачаОбъект.Описание =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задача не может быть исполнена, так как у роли не задано ни одного исполнителя:
				|%1'"),
			Строка(ЗадачаСсылка));
		
		ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Назначить исполнителей: задача не может быть исполнена %1'"),
			Строка(ЗадачаСсылка));
		
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецФункции

Функция ПолучитьПервуюСтроку(ПредставлениеЗадачи)
	
	Поз = Найти(ПредставлениеЗадачи, Символы.ПС);
	Если Поз = 0 Тогда
		Возврат ПредставлениеЗадачи;
	КонецЕсли;
	Возврат Лев(ПредставлениеЗадачи, Поз - 1);
	
КонецФункции

Функция СформироватьПредставлениеЗадачи(ЗадачаСтруктура)
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = "ДЛФ=DD; ДП='не указан'";
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = "ДЛФ=DDT; ДП='не указан'";
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ПредставлениеЗадачи,
		Символы.ПС,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1'
				|"),
			ЗадачаСтруктура.Ссылка));
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Описание) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ЗадачаСтруктура.Описание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.СрокИсполнения) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Крайний срок: %1'"),
				Формат(ЗадачаСтруктура.СрокИсполнения, ФорматДаты)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Исполнитель) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исполнитель: %1'"),
				ЗадачаСтруктура.Исполнитель));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.РольИсполнителя) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Роль: %1'"),
				ЗадачаСтруктура.РольИсполнителя));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ОсновнойОбъектАдресации) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Основной объект адресации: %1'"),
				ЗадачаСтруктура.ОсновнойОбъектАдресации));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ДополнительныйОбъектАдресации) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Доп. объект адресации: %1'"),
				ЗадачаСтруктура.ДополнительныйОбъектАдресации));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ДатаИсполнения) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнено: %1'"),
				Формат(ЗадачаСтруктура.ДатаИсполнения, ФорматДаты)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.РезультатВыполнения) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Комментарий:
					|%1'"),
				ЗадачаСтруктура.РезультатВыполнения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСтруктура.Автор) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автор: %1'"),
				ЗадачаСтруктура.Автор));
	КонецЕсли;
	
	Предметы = Мультипредметность.ПолучитьПредметыЗадачи(ЗадачаСтруктура.Ссылка);
	Если Предметы.Количество() > 0 Тогда
		Для Каждого СтрокаПредмета Из Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи,
					Символы.ПС,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 предмет: %2'"),
						Строка(СтрокаПредмета.РольПредмета),
						ОбщегоНазначенияДокументооборот.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета)));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

Функция ЭтоДокумент(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы")
		Или ТипЗнч(Значение) = Тип("СправочникСсылка.ВходящиеДокументы")
		Или ТипЗнч(Значение) = Тип("СправочникСсылка.ИсходящиеДокументы");
	
КонецФункции

Функция ЭтоВнутреннийДокумент(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВнутренниеДокументы");
	
КонецФункции

Функция ЭтоФайл(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы");
	
КонецФункции

Функция ЭтоПапкаФайлов(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПапкиФайлов");
	
КонецФункции

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	ЭтоДокумент = ЭтоДокумент(Объект);
	ЭтоВнутреннийДокумент = ЭтоВнутреннийДокумент(Объект);
	ЭтоФайл = ЭтоФайл(Объект);
	
	Если Не ЭтоДокумент И Не ЭтоФайл Тогда
		Возврат СокрЛП(Объект);
	КонецЕсли;
	
	ПредставлениеОбъекта = СокрЛП(Объект) + " (" + Объект.Метаданные().ПредставлениеОбъекта + ")";
	
	Если ЭтоВнутреннийДокумент Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеОбъекта,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Папка: %1'"),
				ПолучитьПолныйПутьПапкиДокумента(Объект)));
	ИначеЕсли ЭтоФайл Тогда
		Если ЭтоДокумент(Объект.ВладелецФайла) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеОбъекта,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Владелец: %1'"),
					ПолучитьПредставлениеОбъекта(Объект.ВладелецФайла)));
		ИначеЕсли ЭтоПапкаФайлов(Объект.ВладелецФайла) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеОбъекта,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папка: %1'"),
					ПолучитьПолныйПутьПапкиФайла(Объект)));
		Иначе
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеОбъекта,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Владелец: %1'"),
					СокрЛП(Объект.ВладелецФайла)));
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ПредставлениеОбъекта,
		Символы.ПС,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ссылка: %1'"),
			ПолучитьНавигационнуюСсылку(Объект)));
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

Функция ПолучитьПолныйПутьПапкиДокумента(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Путь = "";
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Папка КАК Папка,
		|	ВнутренниеДокументы.Папка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Папка = РезультатЗапроса[0].Папка;
	Пока ЗначениеЗаполнено(Папка) Цикл
		Путь = РезультатЗапроса[0].Наименование + ?(ПустаяСтрока(Путь), "", "\") + Путь;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПапкиВнутреннихДокументов.Родитель КАК Папка,
			|	ПапкиВнутреннихДокументов.Родитель.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ПапкиВнутреннихДокументов КАК ПапкиВнутреннихДокументов
			|ГДЕ
			|	ПапкиВнутреннихДокументов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Папка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Папка = РезультатЗапроса[0].Папка;
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции

Функция ПолучитьПолныйПутьПапкиФайла(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Путь = "";
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Папка,
		|	Файлы.ВладелецФайла.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Папка = РезультатЗапроса[0].Папка;
	Пока ЗначениеЗаполнено(Папка) Цикл
		Путь = РезультатЗапроса[0].Наименование + ?(ПустаяСтрока(Путь), "", "\") + Путь;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПапкиФайлов.Родитель КАК Папка,
			|	ПапкиФайлов.Родитель.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ПапкиФайлов КАК ПапкиФайлов
			|ГДЕ
			|	ПапкиФайлов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Папка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Папка = РезультатЗапроса[0].Папка;
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции

#КонецОбласти

