// Открывает форму выбора дела
Процедура ВыбратьДело(ЭлементДело, Параметры) Экспорт
	
	ПараметрыФормы = Параметры;
	ПараметрыФормы.Вставить("РежимВыбора", "ИзКарточкиДокумента");
	
	ОткрытьФорму("Справочник.ДелаХраненияДокументов.ФормаВыбора", ПараметрыФормы, ЭлементДело);
	
КонецПроцедуры	

// Открывает форму выбора получателя
Процедура ВыбратьПолучателя(ЭлементПолучатель, РеквизитПолучатель) Экспорт
	
	ПараметрыФормы = Новый Структура("Получатель", РеквизитПолучатель);
	ОткрытьФорму("ОбщаяФорма.ВыборКорреспондентаКонтактноеЛицо", ПараметрыФормы, ЭлементПолучатель);
	
КонецПроцедуры	

// Выполняет проверки перед закрытием документа 
Процедура ПередЗакрытиемДокумента(Объект, Отказ, ФормаДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("СообщениеВопрос", 		НСтр("ru = 'Закрыть карточку?'"));
	ПараметрыФормы.Вставить("СообщениеЗаголовок", 	НСтр("ru = 'Некоторые файлы заняты вами для редактирования:'"));
	ПараметрыФормы.Вставить("Заголовок", 			Строка(Объект.Ссылка));
	ПараметрыФормы.Вставить("ВладелецФайла", 		Объект.Ссылка);
	ПараметрыФормы.Вставить("Редактирует", 			ТекущийПользователь);
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ФормаДокумента", ФормаДокумента);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
				
	РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
	Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗавершениеВопросаОЗакрытииФормыДокументаПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Истина;
		Параметры.ФормаДокумента.Закрыть();
	Иначе
		Параметры.ФормаДокумента.ЗакрытьФормуПриНаличииЗанятыхФайлов = Ложь;
		Если ТипЗнч(Параметры.ФормаДокумента.Объект.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Параметры.ФормаДокумента.ЗакрытьНезарегистрированныйДокумент = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму предупреждения при регистрации документа
Процедура ПредупредитьПриРегистрации(ОписаниеОповещения) Экспорт
	
	ПоказыватьПредупреждениеПриРегистрации = 
		ДелопроизводствоКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСДокументами().ПоказыватьПредупреждениеПриРегистрации;
		
	Если ПоказыватьПредупреждениеПриРегистрации = Истина Тогда 
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ОписаниеОтветаНаВопрос = Новый ОписаниеОповещения(
			"ПредупредитьПриРегистрацииПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриРегистрации",,,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

Процедура ПредупредитьПриРегистрацииПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат ;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
	
КонецПроцедуры

// Открывает форму предупреждения при перерегистрации документа
Функция ПредупредитьПриПеререгистрации(ОписаниеОповещения) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияПриЗакрытииВопроса = Новый ОписаниеОповещения(
		"ПредупредитьПриПеререгистрацииПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Документ будет перерегистрирован. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещенияПриЗакрытииВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецФункции

Процедура ПредупредитьПриПеререгистрацииПродолжение(Ответ, Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ = КодВозвратаДиалога.Да);	
	
КонецПроцедуры

// Открывает форму записи журнала передачи документа
Процедура ОткрытьКарточкуПередачиДокумента(Документ, ВладелецФормы) Экспорт
	
	Количество = Делопроизводство.КоличествоКомуПереданДокумент(Документ);
	
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 Тогда
		ПараметрыФормы = Новый Структура("ПоказатьДержателяДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.ФормаЗаписи", ПараметрыФормы, ВладелецФормы);
	Иначе
		ПараметрыФормы = Новый Структура("ПоказатьДержателейДокумента", Документ);
		ОткрытьФорму("РегистрСведений.ЖурналПередачиДокументов.Форма.ФормаСпискаДокумента", ПараметрыФормы, ВладелецФормы);
	КонецЕсли;	
	
КонецПроцедуры	

// Показывает форму вопроса с возможностью сохранения ответа в персональные настройки
// Параметры:
//		ЭлементВладелец - элемент формы, который будет владельцем открываемой формы с вопросом
//		Заголовок вопроса - заголовок для формы вопроса
//		ТекстВопроса - формулировка вопроса
//		КлючПерсональнойНастройкиПоказаВопроса - ключ персональной настройки, хранящей флаг необходимости показа формы
//		ИмяПерсональнойНастройкиПоказаВопроса - имя персональной настройки, хранящей флаг необходимости показа формы
//		СписокДоступныхВариантов - список доступных вариантов ответов на вопрос
//		ВариантОтветаПоУмолчанию - вариант ответа, который будет помечен как вариант ответа по умолчанию
// Возвращает:
//		Значение типа КодВозвратаДиалога
Процедура ПоказатьРасширеннуюФормуВопроса(
	ЭлементВладелец,
	ЗаголовокВопроса,
	ТекстВопроса,
	КлючПерсональнойНастройкиПоказаВопроса,
	ИмяПерсональнойНастройкиПоказаВопроса,
	СписокДоступныхВариантов,
	ВариантОтветаПоУмолчанию = "Да",
	ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокВопроса);
	ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыФормы.Вставить("СписокДоступныхВариантов", СписокДоступныхВариантов);
	ПараметрыФормы.Вставить("КлючПерсональнойНастройки", КлючПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ИмяПерсональнойНастройки", ИмяПерсональнойНастройкиПоказаВопроса);
	ПараметрыФормы.Вставить("ВариантОтветаПоУмолчанию", ВариантОтветаПоУмолчанию);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПоказатьРасширеннуюФормуВопросаПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПоказыватьФормуВопроса = Делопроизводство.ПолучитьНастройкуПользователя(КлючПерсональнойНастройкиПоказаВопроса,
		ИмяПерсональнойНастройкиПоказаВопроса);
	
	Если ТипЗнч(ПоказыватьФормуВопроса) = Тип("Булево") И НЕ ПоказыватьФормуВопроса Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Неопределено);
	Иначе 
		ОткрытьФорму(
			"ОбщаяФорма.РасширенныйВопрос", 
			ПараметрыФормы, 
			ЭлементВладелец,,,,
			ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьРасширеннуюФормуВопросаПродолжение(Ответ, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ответ) ИЛИ Ответ = Ложь Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ответ); 
		Возврат;
	КонецЕсли;
	
	ЗначениеДляВозврата = Неопределено;
	Выполнить("ЗначениеДляВозврата = КодВозвратаДиалога." + Ответ);
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ЗначениеДляВозврата);
	
КонецПроцедуры

// Копирует файл из временного хранилища на клиента и открывает его для просмотра
//
Процедура ОткрытьФайлИзВременногоХранилища(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось подключить расширение работы с файлами.'"));
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить файл. Возможно он был удален.'"));
		Возврат;
	КонецЕсли;
	
	ПолноеИмяВременногоФайла = ПолучитьПолноеИмяВременногоФайла(ИмяФайла);
	Если ПустаяСтрока(ПолноеИмяВременногоФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось создать временный файл.'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные.Записать(ПолноеИмяВременногоФайла);
	Исключение
		СообщениеОбОшибке = ОписаниеОшибки();
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать временный файл.
			|%1'"),
			СообщениеОбОшибке));
		Возврат;
	КонецПопытки;	
	
	ОткрытьФайлНаДиске(ПолноеИмяВременногоФайла, ИмяФайла);
	
КонецПроцедуры

Процедура ОткрытьФайлНаДиске(ПолноеИмяФайла, ИмяФайла) Экспорт
	Попытка
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	Исключение
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось открыть файл %1
				|%2'"),
			ИмяФайла,
			ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
КонецПроцедуры

Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

Функция ПолучитьПолноеИмяВременногоФайла(ИмяФайла) Экспорт
	#Если ВебКлиент Тогда
		Возврат "";
	#Иначе
		Возврат ПолучитьИмяВременногоКаталога() + "\" + ИмяФайла;
	#КонецЕсли
КонецФункции

#Если Не ВебКлиент Тогда
Функция ПолучитьИмяВременногоКаталога()
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяВременногоКаталога);
	Возврат ИмяВременногоКаталога;
КонецФункции
#КонецЕсли

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоХранилища(Форма, АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоХранилищаЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоХранилищаЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	ПолноеИмяФайла = ПолучитьПолноеИмяВременногоФайла(ПараметрыВыполнения.ИмяФайла);
	
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПараметрыВыполнения.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
		Файл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПолноеИмяФайла,
			Папка,
			ПараметрыВыполнения.Форма,
			Ложь, //НеОткрыватьКарточкуПослеСозданияИзФайла
			ПараметрыВыполнения.ИмяФайла);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	

// Открывает меню выбора папки и сохраняет файл из временного хранилища в указанную папку
// Возвращает ссылку на файл или Неопределено в случае неуспеха
//
Функция СоздатьФайлИзВременногоФайлаНаДиске(Форма, ПолноеИмяФайла, ИмяФайла) Экспорт
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ПараметрыОбработчика.Вставить("ИмяФайла", ИмяФайла);
	Обработчик = Новый ОписаниеОповещения("СоздатьФайлИзВременногоФайлаНаДискеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ВыбратьПапку(Обработчик);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура СоздатьФайлИзВременногоФайлаНаДискеЗавершение(Папка, ПараметрыВыполнения) Экспорт
	
	Попытка
		Файл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПараметрыВыполнения.ПолноеИмяФайла,
			Папка,
			ПараметрыВыполнения.Форма,
			Ложь, //НеОткрыватьКарточкуПослеСозданияИзФайла
			ПараметрыВыполнения.ИмяФайла);
		
	Исключение
		Текст = НСтр("ru = 'Не удалось сохранить файл.'") + Символы.ПС + ОписаниеОшибки();
		ПоказатьПредупреждение(, Текст);
	КонецПопытки;		
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Файл);
	КонецЕсли;
	
КонецПроцедуры	


Функция ВыбратьПапку(ОбработчикРезультата)

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("ВыбратьПапкуЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		
	ОткрытьФорму("Справочник.ПапкиФайлов.ФормаВыбора",,,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции

// Продолжение процедуры (см. выше).
Процедура ВыбратьПапкуЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Или Результат.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Папка = Результат;
	
	Если ТипЗнч(ПараметрыВыполнения.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОбработчикРезультата, Папка);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСтрокуДереваПоСсылке(Ссылка, Дерево, Идентификатор) Экспорт 
	
	Если Идентификатор <> Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Ссылка = Ссылка Тогда 
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
		
		НайтиСтрокуДереваПоСсылке(Ссылка, Строка, Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовком(Значение, Заголовок = "", Надпись = "", Длина = 0, ОписаниеОповещения) Экспорт 
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения(
		"ВвестиСтрокуСЗаголовкомПродолжение",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Значение", Значение);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("Надпись", Надпись);
	ПараметрыФормы.Вставить("Длина", Длина);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводСтрокиСЗаголовком", 
		ПараметрыФормы,,,,,
		ОписаниеОповещенияОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
КонецПроцедуры

Процедура ВвестиСтрокуСЗаголовкомПродолжение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЗначениеЗаполнено(Результат) Тогда 
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;		
	ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	
КонецПроцедуры

// Определить значение параметра по переданной строке 
//
// Параметры
//  Текст				– строка – строка, в которой осуществляется поиск значения
//  ТекстПоиска	 		- строка - строка, для которой ищется значение
//
// Возвращаемое значение:
//   СтрокаКоличество   – строка - строковое представление значения
//
Функция ОпределитьЗначениеПараметраВСтроке(Текст, ТекстПоиска)
	
	СтрокаКоличество = "";
	ДлинаТекстаПоиска = СтрДлина(ТекстПоиска) + 1;
	НачальнаяПозиция = Найти(Текст,ТекстПоиска) + ДлинаТекстаПоиска;
	
	Для НомСимвола = НачальнаяПозиция По СтрДлина(Текст) Цикл
			
		Если Сред(Текст, НомСимвола, 1) = "," Тогда
			Если НачальнаяПозиция = НомСимвола Тогда
				СтрокаКоличество = "0";
			КонецЕсли;	
			Прервать;
		КонецЕсли;
		
		СтрокаКоличество = СтрокаКоличество + Сред(Текст, НомСимвола, 1);
		
	КонецЦикла;
	
	Если ДлинаТекстаПоиска > 0 И Не ЗначениеЗаполнено(СтрокаКоличество) Тогда
		СтрокаКоличество = "0";
	КонецЕсли;	
	
    Возврат СтрокаКоличество;
	
КонецФункции	

// Определяет состав документа по переданной строке
// Параметры:
//		ДокументСсылка  - УправляемаяФорма Входящего, Исходящего или Внутреннего документа  - форма документа, для которого определяется состав
//		СоставСтрока    - Строка - строка определения состава
//		НачальныйСостав - Строка - предыдущий вариант состава
//
// Возвращаемое значение:
//   - Структура – структура с составом документа и отказом, в случае ошибки
//
Функция ПолучитьСоставДокумента(ДокументСсылка, СоставСтрока, НачальныйСостав) Экспорт
	
	Если Не ЗначениеЗаполнено(СоставСтрока) Тогда
		ДокументСсылка.КоличествоЛистов = 0;
		ДокументСсылка.КоличествоПриложений = 0;
		ДокументСсылка.КоличествоЭкземпляров = 0;
		ДокументСсылка.ЛистовВПриложениях = 0;	    
		НачальныйСостав = Неопределено;
		Возврат Новый Структура("Отказ, Состав", Ложь, НачальныйСостав);
	КонецЕсли;	
	
	ИтКоличествоЛистов = 0;
	ИтКоличествоПриложений = 0;
	ИтКоличествоЭкземпляров = 0;
	ИтЛистовВПриложениях = 0;

	Текст = НРег(СоставСтрока);	
	Если Найти(Текст, НСтр("ru = 'листов в приложениях'")) > 0 Тогда
		КоличествоЛистовВПриложениях =  ОпределитьЗначениеПараметраВСтроке(Текст, НСтр("ru = 'листов в приложениях'"));		
		
		Попытка
			Количество = Число(КоличествоЛистовВПриложениях);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов в приложениях ""%1""'"), КоличествоЛистовВПриложениях));
			СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтЛистовВПриложениях = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов в приложениях'") + " " + КоличествоЛистовВПриложениях) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'") + " " + КоличествоЛистовВПриложениях, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов в приложениях'"), "");			
		КонецЕсли;	

	Иначе
		ИтЛистовВПриложениях = 0;
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'листов'")) > 0 Тогда
		КоличествоЛистов =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'листов'"));		
		
		Попытка
			Количество = Число(КоличествоЛистов);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'"), КоличествоЛистов));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока);
		КонецПопытки;	
			
		ИтКоличествоЛистов = Количество;
		
		Если Найти(Текст, НСтр("ru = 'листов'") + " " + КоличествоЛистов) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'") + " " + КоличествоЛистов, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'листов'"), "");			
		КонецЕсли;	
	Иначе
		ИтКоличествоЛистов = 0;	
	КонецЕсли;	
	
	Если Найти(НРег(Текст), НСтр("ru = 'экземпляров'")) > 0 Тогда
		КоличествоЭкземпляров =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'экземпляров'"));		
		
		Попытка
			Количество = Число(КоличествоЭкземпляров);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'"), КоличествоЭкземпляров));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоЭкземпляров = Количество;
		
		Если Найти(Текст, НСтр("ru = 'экземпляров'") + " " + КоличествоЭкземпляров)>0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'") + " " + КоличествоЭкземпляров, "");
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'экземпляров'"), "");			
		КонецЕсли;	

	Иначе
		ИтКоличествоЭкземпляров = 0;		
	КонецЕсли;	
	
	Если ИтКоличествоЭкземпляров < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества экземпляров ""%1""'"), ИтКоличествоЭкземпляров));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
    КонецЕсли;

	Если ИтКоличествоЛистов < 1 Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества листов ""%1""'"), ИтКоличествоЛистов));
		СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
	КонецЕсли;

	Если Найти(НРег(Текст), НСтр("ru = 'приложений'")) > 0 Тогда
		
		КоличествоПриложений =  ОпределитьЗначениеПараметраВСтроке(Текст,  НСтр("ru = 'приложений'"));		
		
		Попытка
			Количество = Число(КоличествоПриложений);
		Исключение
			ОчиститьСообщения();
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректный ввод значения количества приложений ""%1""'"), КоличествоПриложений));
				СоставСтрока = НачальныйСостав;
			Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 
		КонецПопытки;	
			
		ИтКоличествоПриложений = Количество;
		
		Если Найти(Текст, НСтр("ru = 'приложений'") + " " + КоличествоПриложений) > 0 Тогда
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'") + " " + КоличествоПриложений, "");		
		Иначе
			Текст = СтрЗаменить(Текст, НСтр("ru = 'приложений'"), "");			
		КонецЕсли;	
	Иначе
		ИтКоличествоПриложений = 0;	
	КонецЕсли;	
    Текст = СтрЗаменить(Текст, ",", "");		
	
	Если ЗначениеЗаполнено(СокрЛП(Текст)) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Введено некорректное значение состава документа ""%1""'"), СокрЛП(Текст)));
				СоставСтрока = НачальныйСостав;
		Возврат Новый Структура("Отказ, Состав", Истина, СоставСтрока); 		
    КонецЕсли;
	
	ДокументСсылка.КоличествоЛистов = ИтКоличествоЛистов;
	ДокументСсылка.КоличествоПриложений = ИтКоличествоПриложений;
	ДокументСсылка.КоличествоЭкземпляров = ИтКоличествоЭкземпляров;
	ДокументСсылка.ЛистовВПриложениях = ИтЛистовВПриложениях;
	СоставСтрока = ПолучитьСтрокуСоставДокумента(ДокументСсылка);

	Возврат Новый Структура("Отказ, Состав", Ложь, СоставСтрока); ;	
	
КонецФункции	

// Формирует текстовое представление состава документа
//
Функция ПолучитьСтрокуСоставДокумента(Ссылка) Экспорт
	
	СтрокаСостав = ?(Ссылка.КоличествоЛистов > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'листов %1,'") + " ", Ссылка.КоличествоЛистов), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоПриложений > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'приложений %1,'") + " ", Ссылка.КоличествоПриложений), "");	
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.ЛистовВПриложениях > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'листов в приложениях %1,'") + " ", Ссылка.ЛистовВПриложениях), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоЭкземпляров > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'экземпляров %1,'") + " ", Ссылка.КоличествоЭкземпляров), "");		
			
	СтрокаСостав = Врег(Лев(СтрокаСостав,1))+Прав(СтрокаСостав, СтрДлина(СтрокаСостав) - 1);	
	
	Если Прав(СтрокаСостав, 2) = ", " Тогда
		СтрокаСостав = Лев(СтрокаСостав, СтрДлина(СтрокаСостав) - 2);
	КонецЕсли;

	Возврат СтрокаСостав;	
	
КонецФункции	

// Проверяет тип параметра на принадлежность к типу измерения «Документ» регистра сведений «СвязиДокументов»
//
// Параметры
//  ОбъектОснование		– Любая ссылка – объект, на основании которого создается связь
//  СвязуемыйОбъект		– Любая ссылка – объект, который проверяем на возможность создания связи
//
// Возвращаемое значение:
//   Булево - Истина, если объект является одним из проверяемых типов данных
//
Функция ДокументыМожноСвязать(ОбъектОснование, СвязуемыйОбъект) Экспорт
	
	Если ОбъектОснование <> СвязуемыйОбъект
		И (ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ВнутренниеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ВходящиеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ИсходящиеДокументы")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныВнутреннихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныВходящихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.ШаблоныИсходящихДокументов")
		Или ТипЗнч(СвязуемыйОбъект) = Тип("СправочникСсылка.Файлы")) Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции	

// Обновляет данные одного файла в строке списка в карточке документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
Процедура ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал = Ложь) Экспорт 
	
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтруктураДанных = Делопроизводство.ПолучитьДанныеФайлаДляСписка(Файл, ЗаполнитьПризнакОригинал);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик команды "ПометитьНаУдаление" таблицы Файлы в карточке документа
//
// Параметры
//   Форма                - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   ОбработчикОповещения - ОписаниеОповещения - обработчик, в который необходимо
//     передать массив обрабатываемых файлов.
//
Процедура ПометитьФайлыДокументаНаУдаление(Форма, ОписаниеОповещения) Экспорт
	
	ПометкаУдаления = Ложь; НаименованиеФайла = ""; ПодписанЭП = Ложь;
	МассивФайлов = Новый Массив;
	
	Если Форма.Элементы.Обзор.Видимость Тогда 
		ИмяСписка = "Файлы";
	Иначе 
		ИмяСписка = "ФайлыСоздание";
	КонецЕсли;
	
	Если Форма.Элементы[ИмяСписка].ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Форма.Элементы[ИмяСписка].ВыделенныеСтроки.Количество() = 1 Тогда
		ТекущиеДанные = Форма.Элементы[ИмяСписка].ТекущиеДанные;
		МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
		ПометкаУдаления = ТекущиеДанные.ПометкаУдаления;
		НаименованиеФайла = ТекущиеДанные.Наименование;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
	Иначе
		Для Каждого ВыбраннаяСтрока Из Форма.Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			ДанныеСтроки = Форма.Элементы[ИмяСписка].ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
			
			Если Не ПометкаУдаления Тогда 
				ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
			КонецЕсли;
			Если Не ПодписанЭП Тогда
				ПодписанЭП = ДанныеСтроки.ПодписанЭП;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НесколькоФайлов = МассивФайлов.Количество() > 1; 
	
	Если НесколькоФайлов Тогда 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				НаименованиеФайла);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				НаименованиеФайла);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("ПодписанЭП", ПодписанЭП);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры
