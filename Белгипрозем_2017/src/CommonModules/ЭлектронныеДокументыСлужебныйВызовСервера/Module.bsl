////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев = Неопределено, МассивСсылокНаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не МассивСсылокНаВладельцев = Неопределено Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
			|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
		Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	ИначеЕсли Не МассивСсылокНаЭД = Неопределено Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка КАК СсылкаНаЭД,
			|	СообщенияЭДО.Документ КАК ВладелецЭД
			|ИЗ
			|	Справочник.СообщенияЭДО КАК СообщенияЭДО
			|ГДЕ
			|	СообщенияЭДО.Ссылка В(&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивСсылокНаЭД);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.СообщенияЭДО, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЭлектронныйДокумент.Документ);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
				
				ИЛИ ((ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
				ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда

				НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				Если (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
					И НЕ(НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					И СтруктураСводнойИнфПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
					НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
				КонецЕсли;
				
				Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПлатежИсполнен Тогда
					СтруктураСводнойИнфПоСтатусу = Новый Структура;
					СтруктураСводнойИнфПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
					СтруктураСводнойИнфПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
				КонецЕсли;
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И НЕ НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент
				И НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВидЭД") = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Документ");
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВладелецЭД);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(
																						НоваяЗаписьНабора.ЭлектронныйДокумент);
			СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(НоваяЗаписьНабора.ЭлектронныйДокумент);
			НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
			НаборЗаписей.Записать();
		КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект      = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.СообщенияЭДО.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																					СсылкаНаОбъект,
																					ЗначениеЗаполнено(ПрисоединенныйФайл));
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		Если СсылкаНаОбъект.ПометкаУдаления Тогда
			НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																						СсылкаНаОбъект,
																						Истина);
		КонецЕсли;
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.СообщенияЭДО.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		
		НоваяЗаписьНабора.ДействияСНашейСтороны             = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(УникальныйИД, НаправлениеЭД = Неопределено, ВидЭД = Неопределено, ТипЭлементаВерсииЭД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщенияЭДО.Ссылка
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.УникальныйИД = &УникальныйИД
		|	И СообщенияЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Если НаправлениеЭД <> Неопределено Тогда
		Текст = Текст + "
		|И СообщенияЭДО.НаправлениеЭД = &НаправлениеЭД";
	КонецЕсли;
	Если ВидЭД <> Неопределено Тогда
		Текст = Текст + "
		|И СообщенияЭДО.ВидЭД = &ВидЭД";
	КонецЕсли;
	Если ТипЭлементаВерсииЭД <> Неопределено Тогда
		Текст = Текст + "
		|И СообщенияЭДО.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("УникальныйИД",        УникальныйИД);
	Запрос.УстановитьПараметр("НаправлениеЭД",       НаправлениеЭД);
	Запрос.УстановитьПараметр("ВидЭД",               ВидЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки = "", СпособОбменаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если НЕ ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "СпособОбменаЭД, ВерсияФорматаПакета");
	СпособОбменаЭД = ПараметрыПакетаЭД.СпособОбменаЭД;
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
		ИЛИ ПараметрыПакетаЭД.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20 Тогда
		
		Возврат ЭлектронныеДокументыВнутренний.ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД, ПапкаДляРаспаковки);
	КонецЕсли;
	
	// Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение,
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext",
																		  ПакетЭД.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.СоглашениеЭД;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения.
			|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу
		СтруктураОтбора = Новый Структура("Документ", ПакетЭД);
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными
		ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		
		Попытка
			ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// Файл с данными также лежит в виде .zip-архива.
		// В одном пакете может лежать несколько файлов данных, соберем их в массив.
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		
		// Расшифровать файл с данными
		// Найдем файл с информацией о шифровании документа
		ФайлИнформации = Неопределено;
		Для Каждого Файл Из ФайлыАрхива Цикл
			Если Найти(Файл.Имя, "packageDescription") > 0 Тогда
				ФайлИнформации = Файл;
			ИначеЕсли Файл.Расширение <> ".p7s" И Файл.Расширение <> ".zip" Тогда
				МассивФайловДанных.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		// Для последующих действий определим соглашение 
		
		ТекстИнформации = Новый ТекстовыйДокумент;
		ТекстИнформации.Прочитать(ФайлИнформации.ПолноеИмя);
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		
		МассивДобавленныхФайлов = Новый Массив;
		
		Если Не СоответствиеФайлПараметры.Получить("Текст") = Неопределено Тогда
			СоответствиеФайлПараметры.Вставить("ЭтоПроизвольныйЭД", Истина);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры",        СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных",          ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловИзвещений));
		СтруктураВозврата.Вставить("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ПапкаДляРаспаковки,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								СоответствиеЭДИПодписей = Неопределено) Экспорт
								
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоПроизвольныйЭД = СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД");
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "СпособОбменаЭД");
	ЕстьКриптосредствоНаСервере = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			 						И (ВыполнятьАвторизациюНаСервере());
	
	ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Dec",
																	   ПакетЭД.Ссылка.УникальныйИдентификатор());
	
	МассивДобавленныхФайлов = Новый Массив;
	// Попытаемся получить настройки криптографии.
	// Если неудачно, значит средства криптографии не установлены на АРМ
	Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
		Попытка
			МенеджерКриптографии = ПолучитьМенеджерКриптографии();
		Исключение
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина И СтруктураДанныхПодписей.Количество() > 0
		И МенеджерКриптографии = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПакетЭД);

		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Распаковка пакета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ФлагОшибки = Истина;
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПодписей = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.СоглашениеЭД;
		
		Если НЕ ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД) Тогда
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЭтоПроизвольныйЭД = Неопределено Тогда
			ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
			Если ФайлыРасшифровки.Количество() > 0 Тогда
				ФайлСДанными = ФайлыРасшифровки[0];
				
				Попытка
					СтруктураФайлаЭД = ЭлектронныеДокументыВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ФайлСДанными.ПолноеИмя);
					// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
					// в этом случае возьмем НомерЭД из карточки транспортной информации.
					КодРегламента = "";
					Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
						СтруктураФайлаЭД.НомерЭД = СтруктураПодписей.НомерЭД;
					КонецЕсли;
					
					СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
					
					// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами
					СтруктураФайлаЭД.Вставить("Организация", ПакетЭДОбъект.Организация);
					СтруктураФайлаЭД.Вставить("Контрагент",  ПакетЭДОбъект.Контрагент);
					
				Исключение
					ЭтоПроизвольныйЭД = Истина;
				КонецПопытки;
			Иначе
				ЭтоПроизвольныйЭД = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПроизвольныйЭД = Неопределено Тогда
			ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПакетЭД.СоглашениеЭД,
				ЭлектронныеДокументыСлужебный.ОпределитьОбъектПривязки(СтруктураФайлаЭД));
			
			Если ПакетЭДОбъект.СоглашениеЭД.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
					Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭДОбъект.СоглашениеЭД.Контрагент, "Партнер");
					СтруктураФайлаЭД.Вставить("Партнер", Партнер);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьДействующееСоглашение(СтруктураФайлаЭД)
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				
				ЭлектронныеДокументыСлужебный.СообщитьОбОтсутствииСоглашенияЭД(СтруктураФайлаЭД, ОбъектВладелец);
				ФлагОшибки = истина;
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			МаскаФайлаДанных = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "*");
			ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, МаскаФайлаДанных);
			Если ФайлыРасшифровки.Количество() > 0 Тогда
				ФайлСДанными = ФайлыРасшифровки[0];
				СтруктураФайлаЭД = Новый Структура;
				СтруктураФайлаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураФайлаЭД.Вставить("НомерЭД",                        СтруктураПодписей.НомерЭД);
				Если СтруктураПодписей.ДопДанные.ДопПараметры.Свойство("ВнешнийУИД") Тогда
					СтруктураФайлаЭД.Вставить("ВнешнийУИД", СтруктураПодписей.ДопДанные.ДопПараметры.ВнешнийУИД);
				Иначе
					СтруктураФайлаЭД.Вставить("ВнешнийУИД", Неопределено);
				КонецЕсли;
				СтруктураФайлаЭД.Вставить("Организация",                    ПакетЭДОбъект.Организация);
				СтруктураФайлаЭД.Вставить("Контрагент",                     ПакетЭДОбъект.Контрагент);
				СтруктураФайлаЭД.Вставить("ДатаПолучения",                  ТекущаяДатаСеанса());
				СтруктураФайлаЭД.Вставить("НомерВерсииЭД",                  0);
				СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя",      "");
				СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя",       "");
				СтруктураФайлаЭД.Вставить("ДатаФормированияЭДОтправителем", "");
				
				СтрокаСообщения = СоответствиеФайлПараметры.Получить("Текст");
				Попытка
					ОбъектВладелец = ЭлектронныеДокументыПереопределяемый.НайтиСоздатьВходящийДокументИзПроизвольногоЭД(
						СтруктураФайлаЭД, СтруктураФайлаЭД.ВнешнийУИД);
				Исключение
					ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					НСтр("ru = 'создание произвольного ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
				КонецПопытки;
			Иначе
				ФлагОшибки = истина;
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлСДанными.ПолноеИмя);
		
		ДопДанные = "";
		Если СтруктураПодписей.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") И ДопДанные.Количество() > 0 Тогда
			ИмяФайлаДопДанных = "";
			Если ДопДанные.Свойство("ФайлДопДанных", ИмяФайлаДопДанных) Тогда
				ПолноеИмяДопФайла = ПапкаДляРаспаковки + "\" + ИмяФайлаДопДанных;
				СтруктураПараметров.Вставить("ФайлДопДанных", ПолноеИмяДопФайла);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектВладелец <> Неопределено Тогда
			СтруктураЭД = Неопределено;
			НовыйДокумент = ОбъектВладелец;
		Иначе
			СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
			
			// Xsd-схема счета-фактуры не позволяет передавать НомерЭД,
			// в этом случае возьмем НомерЭД из карточки транспортной информации.
			КодРегламента = "";
			Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
				СтруктураЭД.НомерЭД = СтруктураПодписей.НомерЭД;
			КонецЕсли;
			
			Если СтруктураЭД.Свойство("ВладелецЭД") Тогда
				НовыйДокумент = СтруктураЭД.ВладелецЭД;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент) Тогда
			ФлагОшибки = Истина;
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И НЕ Найти(Соглашение.ИдентификаторОрганизации, Символ(65) + Символ(76)) > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// В присоединенные файлы к документу БД поместить файл с данными, подпись к нему,
		// указать его в табличной части транспортного пакета.
		ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПодписей.УникальныйИД, Перечисления.НаправленияЭД.Входящий,
			СтруктураФайлаЭД.ВидЭД);
			
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ДвоичныеДанные);
			СтруктураФайлаЭД.Вставить("УникальныйИД", СтруктураПодписей.УникальныйИД);
			
			ПодписиФайлаДанных = СтруктураПодписей.Подписи;
			СтруктураФайла = ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруФайла(СтруктураДанных.ИмяФайла);
			
			ДобавленныйФайл = ЭлектронныеДокументы.ДобавитьФайл(
														НовыйДокумент,
														СтруктураФайла.ИмяБезРасширения,
														СтруктураФайла.Расширение,
														ТекущаяДатаСеанса(),
														ТекущаяДатаСеанса(),
														АдресВоВременномХранилище,
														Неопределено,
														,
														Справочники.СообщенияЭДО.ПолучитьСсылку());
			
			Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
			
			ЭДВладелец = "";
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				 ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
				Иначе
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
				КонецЕсли;
				// Определяем версию регламента 1С по коду регламента.
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
				Если КодРегламента = "Formalized" ИЛИ КодРегламента = "Invoice" Тогда
					ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
				КонецЕсли;
				
				Если СтруктураЭД = Неопределено Тогда
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                НовыйДокумент);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",                     СтруктураФайлаЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",             Перечисления.НаправленияЭД.Входящий);
					СтруктураОбновленияПараметров.Вставить("НомерЭД",                   СтруктураФайлаЭД.НомерЭД);
					СтруктураОбновленияПараметров.Вставить("Организация",               СтруктураФайлаЭД.Организация);
					СтруктураОбновленияПараметров.Вставить("Контрагент",                СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",             СтруктураФайлаЭД.НомерВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя", СтруктураФайлаЭД.НомерДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",  СтруктураФайлаЭД.ДатаДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("Ответственный",             Ответственный);
					СтруктураОбновленияПараметров.Вставить("Отправитель",               ПакетЭД.Отправитель);
					СтруктураОбновленияПараметров.Вставить("Получатель",                Соглашение.ИдентификаторОрганизации);
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",              Соглашение);
					СтруктураОбновленияПараметров.Вставить("УникальныйИД",              СтруктураФайлаЭД.УникальныйИД);
					СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",       ТипЭлементаВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("ВерсияРегламентаЭДО",       ВерсияРегламентаЭДО);
					СтруктураОбновленияПараметров.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					СтруктураОбновленияПараметров.Вставить("НаименованиеФайла",         СтруктураФайла.ИмяБезРасширения);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					
					Если СтруктураОбновленияПараметров.Свойство("Организация")
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						
						ТекстСообщения = НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении.'");
						УдалитьФайлы(ПапкаДляРасшифровки);
						УдалитьФайлы(ПапкаДляРаспаковки);
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					//Если СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
					//КонецЕсли;
				Иначе
					СтруктураЭД.Вставить("Отправитель",                     ПакетЭД.Отправитель);
					СтруктураЭД.Вставить("Получатель",                      Соглашение.ИдентификаторОрганизации);
					СтруктураЭД.Вставить("Ответственный",                   Ответственный);
					СтруктураЭД.Вставить("СоглашениеЭД",                    Соглашение);
					СтруктураЭД.Вставить("УникальныйИД",                    СтруктураФайлаЭД.УникальныйИД);
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             ТипЭлементаВерсииЭД);
					СтруктураЭД.Вставить("ВерсияРегламентаЭДО",             ВерсияРегламентаЭДО);
					СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					СтруктураЭД.Вставить("НаименованиеФайла",               СтруктураФайла.ИмяБезРасширения);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					Если СтруктураЭД.Свойство("Организация") И ЗначениеЗаполнено(СтруктураЭД.Организация) Тогда
						Если СтруктураЭД.Организация <> Соглашение.Организация Тогда
							
							ТекстСообщения = НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении.'");
							ВызватьИсключение(ТекстСообщения);
						КонецЕсли;
					Иначе
						СтруктураЭД.Вставить("Организация", Соглашение.Организация);
					КонецЕсли;
					Контрагент = "";
					Если НЕ СтруктураЭД.Свойство("Контрагент", Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
						СтруктураЭД.Вставить("Контрагент", ПакетЭД.Контрагент);
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
				КонецЕсли;
				
				ПолноеИмяДопФайла = "";
				Если СтруктураПараметров.Свойство("ФайлДопДанных", ПолноеИмяДопФайла) И ЗначениеЗаполнено(ПолноеИмяДопФайла) Тогда
					Файл = Новый Файл(ПолноеИмяДопФайла);
					ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
					АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
					
					ДобавленныйДопФайл = ЭлектронныеДокументы.ДобавитьФайл(
																	НовыйДокумент,
																	Файл.ИмяБезРасширения,
																	СтрЗаменить(Файл.Расширение, ".", ""),
																	ТекущаяДатаСеанса(),
																	ТекущаяДатаСеанса(),
																	АдресФайла,
																	Неопределено,
																	,
																	Справочники.СообщенияЭДО.ПолучитьСсылку());
					
					Если ЗначениеЗаполнено(ДобавленныйДопФайл) Тогда
						ВспомогательнаяСтруктура = Новый Структура;
						ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
						ВспомогательнаяСтруктура.Вставить("Контрагент", ПакетЭД.Контрагент);
						ВспомогательнаяСтруктура.Вставить("ВладелецЭД", НовыйДокумент);
						ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", Соглашение);
						ВспомогательнаяСтруктура.Вставить("НомерЭД",      СтруктураФайлаЭД.НомерЭД);
						ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураФайлаЭД.УникальныйИД);
						ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
						ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаДокументаОтправителя);
						ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
						
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭДВладелец)
				И (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
				И ЭДВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
				
				СтруктураПараметровЭДВладельца = Новый Структура;
				СтруктураПараметровЭДВладельца.Вставить("ВладелецЭД", ЭДВладелец.Документ);
				СтруктураПараметровЭДВладельца.Вставить("Контрагент", ЭДВладелец.Контрагент);
				СтруктураПараметровЭДВладельца.Вставить("ВидЭД", ЭДВладелец.ВидЭД);
				СтруктураПараметровЭДВладельца.Вставить("НаправлениеЭД", ЭДВладелец.НаправлениеЭД);
				СтруктураПараметровЭДВладельца.Вставить("СоглашениеЭД", ЭДВладелец.СоглашениеЭД);
				ДопустимыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭДВладелец);
				СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, СтруктураПараметровЭДВладельца);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписиФайлаДанных) Тогда
				МассивПодписей = Новый Массив;
				Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
					ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
					ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
					МассивПодписей.Добавить(ДвоичныеДанныеПодписи);
					Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
						СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
						Если СертификатыПодписи.Количество() <> 0 Тогда
							Сертификат = СертификатыПодписи[0];
							ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
							ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
							ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
							ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
																												Сертификат.Субъект);
							ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ДобавленныйФайл);
							Если ЗначениеЗаполнено(ФайлЭД) Тогда
								РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписиФайла(
									ФайлЭД,
									ДвоичныеДанныеПодписи,
									ОтпечатокBase64,
									ДатаУстановкиПодписи,
									"",
									ИмяФайлаПодписи,
									ПредставлениеПользователя,
									Сертификат.Выгрузить());
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
					ОпределитьСтатусыПодписей(ДобавленныйФайл);
				ИначеЕсли НЕ СоответствиеЭДИПодписей = Неопределено Тогда
					СоответствиеЭДИПодписей.Вставить(ДобавленныйФайл, МассивПодписей);
				КонецЕсли;
			КонецЕсли;
			МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
		КонецЕсли;
		
		// Добавим информацию о присоединенном файле в документ пакета электронных документов
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.Документ;
			
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено И ЭтоПроизвольныйЭД = Неопределено Тогда
			ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки,
																									  СоответствиеФайлПараметры,
																									  ПакетЭДОбъект);
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		УдалитьФайлы(ПапкаДляРасшифровки);
		Возврат МассивДобавленныхФайлов;
	Исключение
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
										  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
										  ТекстСообщения);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Возвращает способ обмена электронными документами по пакету.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
// Возвращаемое значение
//  СпособОбменаЭД - ссылка на перечисление СпособыОбменаЭД
//
Функция ПолучитьСпособОбменаЭДИзПакетаЭД(Пакет) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пакет, "СпособОбменаЭД");
	
КонецФункции

// ПЕРЕСМОТРЕТЬ реализацию - Удаляет каталог на сервере.
//
// Параметры:
//  Каталог - Строка - Путь к удаляемому каталогу.
//
Процедура УдалитьКаталог(Каталог) Экспорт
	
	УдалитьФайлы(Каталог);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через веб ресурс банка

// Только для внутреннего использования
Процедура ПолучитьДанныеВыписки(Знач ЭД, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, СоглашениеЭД = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	Если Не ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ЭД) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД");
	
	Организация  = РеквизитыЭД.Организация;
	СоглашениеЭД = РеквизитыЭД.СоглашениеЭД;
	
	ЭлектронныеДокументы.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

// Выполняет добавление ЭП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.СоглашениеЭД, "СпособОбменаЭД");
	ЕстьКриптосредствоНаСервере = СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			 						И ВыполнятьАвторизациюНаСервере();
	Попытка
		НачатьТранзакцию();
		ЭлектронныеДокументы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Если ВыполнятьКриптооперацииНаСервере() ИЛИ ЕстьКриптосредствоНаСервере Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			
		Иначе
			
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0);
			ЭтоЭДПлатежноеПоручение = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
			
			Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоЭДПлатежноеПоручение Тогда
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ЧастичноПодписан,
																		ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭП'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
																					ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
				МассивПЭД = Новый Массив;
				МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() И МассивПакетовДляОтправкиСКлиента.Количество() > 0 Тогда
		ДанныеДляОтправкиВiBank2 = ДанныеДляОтправкиВiBank2(МассивПакетовДляОтправкиСКлиента);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиСКлиента", ДанныеДляОтправкиВiBank2);
	КонецЕсли;
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурСертификатов = Новый Массив;
	Если ВыполнятьАвторизациюНаСервере() Тогда
		
		Попытка
			МассивСтруктурСертификатов = ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
		КонецПопытки;
	КонецЕсли;
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		НачатьТранзакцию();
		
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса());
		
		Попытка
			
			СтРеквизитовПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"СпособОбменаЭД, СоглашениеЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			ТипОтправки = СтРеквизитовПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				Если ТипЗнч(СоотвСоглашенийИСтруктурСертификатов) = Тип("Соответствие") Тогда
					СтСертификата = СоотвСоглашенийИСтруктурСертификатов.Получить(СтРеквизитовПакетаЭД.СоглашениеЭД);
					Если НЕ РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтСертификата) Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				ИначеЕсли МассивСтруктурСертификатов.Количество() > 0 Тогда
					СоотвСоглашений = СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(СтРеквизитовПакетаЭД.СоглашениеЭД);
					СтСертификата = СоотвСоглашений.Получить(СтРеквизитовПакетаЭД.СоглашениеЭД);
				Иначе
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если НЕ (ТипЗнч(СтСертификата) = Тип("Структура") И СтСертификата.Свойство("МаркерРасшифрованный", Маркер)
					И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				Выборка = СтРеквизитовПакетаЭД.ЭлектронныеДокументы.Выбрать();
				Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
					ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
					ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, Наименование");
					Если (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						  ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
						И Не Найти(ПараметрыЭД.Наименование, "AL") > 0 Тогда
						
						РезультатОтправки = РезультатОтправки + КоличествоКОтправке;
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				КоличествоОтправленных = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	СтРеквизитовПакетаЭД.СоглашениеЭД);
				
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = СтРеквизитовПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(СтРеквизитовПакетаЭД.АдресРесурсаКонтрагента,1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтРеквизитовПакетаЭД.СоглашениеЭД,
					"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
					
				ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтРеквизитовПакетаЭД.СоглашениеЭД, "ПрограммаБанка");
				Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
						ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2 Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
				Выборка = СтРеквизитовПакетаЭД.ЭлектронныеДокументы.Выбрать();
				Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
					ЭД = Выборка.ЭлектронныйДокумент;
					Данные = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ЭД);
					Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
					ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
					ПутьКФайлуОтправки = ФайлыОтправки[0].ПолноеИмя;
				
					ОтветБанка = "";
					ЭлектронныеДокументыСлужебный.ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка);
					РезультатОтправки = РезультатОтправки + 1;
					УдалитьФайлы(ПутьКФайлуОтправки);
					ДанныеОтвета = ЭлектронныеДокументыСлужебный.ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
					Если ДанныеОтвета = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					ЭлектронныеДокументыСлужебный.ОбработатьОтветБанка(ДанныеОтвета, ЭД);
					ОбновитьВерсиюЭД(ЭД);
				КонецЕсли;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ЭлектронныеДокументыСлужебный.ПолучитьFTPСоединение(СтРеквизитовПакетаЭД.СоглашениеЭД);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				КаталогОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтРеквизитовПакетаЭД.СоглашениеЭД, "РесурсИсходящихДокументов");
				ЭлектронныеДокументыСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ЭлектронныеДокументыСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ЭлектронныеДокументыСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по соглашению: %1, способ обмена: %2
										|%3 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонСообщения,
																СтРеквизитовПакетаЭД.СоглашениеЭД,
																СтРеквизитовПакетаЭД.СпособОбменаЭД,
																КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по соглашению: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонВидаОперации,
																СтРеквизитовПакетаЭД.СоглашениеЭД,
																СтРеквизитовПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
														ЭД,
														"Документ, Контрагент, ВидЭД, НаправлениеЭД, СоглашениеЭД");
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("ВладелецЭД",     РеквизитыЭД.Документ);
				СтруктураЭД.Вставить("Контрагент",     РеквизитыЭД.Контрагент);
				СтруктураЭД.Вставить("ВидЭД",          РеквизитыЭД.ВидЭД);
				СтруктураЭД.Вставить("НаправлениеЭД",  РеквизитыЭД.НаправлениеЭД);
				СтруктураЭД.Вставить("СоглашениеЭД",   РеквизитыЭД.СоглашениеЭД);
				СтруктураЭД.Вставить("СтатусЭД",       Перечисления.СтатусыЭД.ОшибкаПередачи);
				СтруктураЭД.Вставить("ТекстУточнения", ТекстОшибки);
				
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД);
				ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																				Перечисления.СтатусыПакетовЭД.Отменен,
																				ТекущаяДатаСеанса());
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
		УдалитьФайлы(АдресКаталогаОтправки);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает соответствие с двоичными данными файлов
// и электронными цифровыми подписями к ним.
//
// Параметры:
//  ИмяФайла - Строка, путь к файлу данных.
//  РасшифрованныеДвоичныеДанные - ДвоичныеДанные, двоичные данные файла данных.
//  СоответствиеФайлПараметры - Соответствие, связывает имена файлов данных и электронных цифровых подписей.
//  ЭтоXMLФайл - Булево, признак того, что переданный файл является xml-файлом.
//
Функция ПолучитьСоответствиеДанныхПодписей(ИмяФайла,
										   ПапкаДляРаспаковки,
										   РасшифрованныеДвоичныеДанные,
										   СоответствиеФайлПараметры,
										   ЭтоXMLФайл = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	ФайлРасшифрованногоАрхива = ?(ЭтоXMLФайл,
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml"),
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip"));
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
	РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
	
	// Определить подпись к данному файлу, проверить подпись
	
	ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ИмяФайла).Подписи;
	ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
	
	Если ПодписиФайлаДанных = Неопределено ИЛИ ПодписиФайлаДанных.Количество() = 0 Тогда
		// Если подписей нет, тогда пока продолжаем, но, возможно, что это ошибка
	Иначе
		Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
			ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + ИмяФайлаПодписи;
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
			СтруктураВозврата = Новый Структура("ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи",
				ДвоичныеДанныеФайлаДанных, ДвоичныеДанныеПодписи);
			
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД(ВидОперации, ПодробныйТекстОшибки);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса;
//
// Возвращаемый параметр:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + Строка(Новый УникальныйИдентификатор) + ".test";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

// Только для внутреннего использования
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соглашения

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  СоглашенияЭД - справочник-ссылка или массив ссылок - на соглашение, в рамках которого требуется авторизоваться на сервере ОЭДО.
//    Если не задано - то будет сформировано соответствие по всем действующим соглашениям, со способом обмена - через ОЭДО.
//  МассивСтруктурСертификатов - массив - содержит структуры сертификатов, полученные из личного хранилища
//    клиента или сервере, в зависимости от опции - выполнять авторизацию на сервере/клиенте.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(Знач МассивСоглашений = Неопределено,
																 Знач СтМассивовСтруктурСертификатов = Неопределено) Экспорт
	
	Если ТипЗнч(МассивСоглашений) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		Массив = Новый Массив;
		Массив.Добавить(МассивСоглашений);
	Иначе
		Массив = МассивСоглашений;
	КонецЕсли;
	Результат = СтруктураСоответствийСоглашенийИСертификатов(Массив, СтМассивовСтруктурСертификатов, , Ложь, Истина);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		Для Каждого Элемент Из СоотвСоглашенийИСертификатовАвторизации Цикл
			СоотвСоглашений.Вставить(Элемент.Ключ, СоотвСертификатовИИхСтруктур.Получить(Элемент.Значение));
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// из массива ЭД), по которым требуется определить параметры сертификатов.
//
// Параметры:
//  МассивЭД - массив ссылок - ссылки на ЭД, по соглашениям из которых, требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ВидЭД - перечисление ссылка - вид ЭД, для подписания которого требуется найти сертификат(ы). Имеет смысл только
//    при параметре ДляПодписи = Истина;
//  ДляПодписи - булево - Истина - требуется найти сертификаты для подписи. Имеет смысл только при заполненном
//    параметре ВидЭД;
//  ДляАвторизации - булево - Истина - требуется найти сертификаты для авторизации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи
//    СоотвСоглашенийИСертификатовАвторизации
//    СоотвСертификатовИИхСтруктур
//
Функция СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(Знач МассивЭД,
																Знач СтМассивовСтруктурСертификатов = Неопределено,
																Знач ВидЭД = Неопределено,
																Знач ДляПодписи = Истина,
																Знач ДляАвторизации = Истина) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	МассивСоглашений = Новый Массив;
	Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
		СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "СоглашениеЭД");
		Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
			СоглашениеЭД = ЭДВладелец.Значение.СоглашениеЭД;
			Если МассивСоглашений.Найти(СоглашениеЭД) = Неопределено Тогда
				МассивСоглашений.Добавить(СоглашениеЭД);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСоглашений.Количество() > 0 Тогда
		СтруктураСоответствий = СтруктураСоответствийСоглашенийИСертификатов(МассивСоглашений,
																			 СтМассивовСтруктурСертификатов,
																			 ВидЭД,
																			 ДляПодписи,
																			 ДляАвторизации);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  МассивСоглашений - массив ссылок - ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ВидЭД - перечисление ссылка - вид ЭД, для подписания которого требуется найти сертификат(ы). Имеет смысл только
//    при параметре ДляПодписи = Истина;
//  ДляПодписи - булево - Истина - требуется найти сертификаты для подписи. Имеет смысл только при заполненном
//    параметре ВидЭД;
//  ДляАвторизации - булево - Истина - требуется найти сертификаты для авторизации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи
//    СоотвСоглашенийИСертификатовАвторизации
//    СоотвСертификатовИИхСтруктур
//
Функция СтруктураСоответствийСоглашенийИСертификатов(Знач МассивСоглашений = Неопределено,
													 Знач СтМассивовСтруктурСертификатов = Неопределено,
													 Знач ВидЭД = Неопределено,
													 Знач ДляПодписи = Истина,
													 Знач ДляАвторизации = Истина) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ?(ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении,
		ВыполнятьАвторизациюНаСервере, ВыполнятьКриптооперацииНаСервере());
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивСтруктурСертификатовКлиент = Новый Массив;
	МассивСтруктурСертификатовСервер = Новый Массив;
	
	ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписи");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивСтруктурСертификатовСервер", МассивСтруктурСертификатовСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатовКлиент);
		Если (ДляАвторизации И ВыполнятьАвторизациюНаСервере ИЛИ ДляПодписи И ВыполнятьКриптооперацииНаСервере)
			И НЕ ЗначениеЗаполнено(МассивСтруктурСертификатовСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивСтруктурСертификатовСервер = ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатовСервер = Новый Массив;
				ТекстСообщения = ПолучитьСообщениеОбОшибке("115");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатков = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	Если ТипЗнч(МассивСтруктурСертификатовСервер) = Тип("Массив") Тогда
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатовСервер Цикл
			МассивОтпечатковСервер.Добавить(ЭлементСтруктуры.Отпечаток);
			МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
		КонецЦикла;
	КонецЕсли;
	
	МассивОтпечатковКлиент = Новый Массив;
	Если ТипЗнч(МассивСтруктурСертификатовКлиент) = Тип("Массив") Тогда
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатовКлиент Цикл
			МассивОтпечатковКлиент.Добавить(ЭлементСтруктуры.Отпечаток);
			МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивОтпечатков) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса = "";
		Если ДляПодписи Тогда
			ТекстЗапроса =
				"////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СоглашенияЭДСертификаты.Ссылка КАК СоглашениеЭД,
				|	СертификатыЭПВидыДокументов.Ссылка КАК СертификатПодписи,
				|	СертификатыЭПВидыДокументов.Ссылка.ЗапомнитьПарольКСертификату КАК ЗапомнитьПарольКСертификату,
				|	ВЫБОР
				|		КОГДА СертификатыЭПВидыДокументов.Ссылка.ЗапомнитьПарольКСертификату
				|			ТОГДА СертификатыЭПВидыДокументов.Ссылка.ПарольПользователя
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ПарольПользователя,
				|	СертификатыЭПВидыДокументов.Ссылка.ПрофильНастроекКриптографии,
				|	СертификатыЭПВидыДокументов.Ссылка.Отпечаток,
				|	СертификатыЭПВидыДокументов.Ссылка.Отозван,
				|	СертификатыЭПВидыДокументов.Ссылка.ФайлСертификата,
				|	СертификатыЭПВидыДокументов.Ссылка.ОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
				|	СертификатыЭПВидыДокументов.Ссылка.ДатаОкончания КАК ДатаОкончания
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
				|		ПО СоглашенияЭДСертификаты.Сертификат = СертификатыЭПВидыДокументов.Ссылка
				|ГДЕ
				|	НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
				|	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
				|	И (СертификатыЭПВидыДокументов.Ссылка.Пользователь = &ПустойПользователь
				|			ИЛИ СертификатыЭПВидыДокументов.Ссылка.Пользователь = &ТекущийПользователь)
				|	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи
				|	И СертификатыЭПВидыДокументов.ВидДокумента = &ВидЭД
				|	И СертификатыЭПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковДляПодписи)
				|	И СоглашенияЭДСертификаты.Ссылка.СпособОбменаЭД = &СпособОбменаЭД И &ИспользоватьЭП
				|	И СоглашенияЭДСертификаты.Ссылка.СтатусСоглашения = &СтатусСоглашения
				|	И НЕ СоглашенияЭДСертификаты.Ссылка.ПометкаУдаления
				|	И СоглашенияЭДСертификаты.Ссылка В(&МассивСоглашений)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЗапомнитьПарольКСертификату УБЫВ";
			Запрос.УстановитьПараметр("МассивОтпечатковДляПодписи",
				?(ВыполнятьКриптооперацииНаСервере, МассивОтпечатковСервер, МассивОтпечатковКлиент));
			Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
		КонецЕсли;
		Если ДляАвторизации Тогда
			ТекстЗапроса = ТекстЗапроса + ?(ДляПодписи, "; ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ")
				+ "
				|	СоглашенияЭДСертификаты.Ссылка КАК СоглашениеЭД,
				|	СертификатыЭП.Ссылка КАК СертификатПодписи,
				|	СертификатыЭП.ЗапомнитьПарольКСертификату КАК ЗапомнитьПарольКСертификату,
				|	ВЫБОР
				|		КОГДА СертификатыЭП.ЗапомнитьПарольКСертификату
				|			ТОГДА СертификатыЭП.ПарольПользователя
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК ПарольПользователя,
				|	СертификатыЭП.ПрофильНастроекКриптографии,
				|	СертификатыЭП.Отпечаток,
				|	СертификатыЭП.Отозван,
				|	СертификатыЭП.ФайлСертификата,
				|	СертификатыЭП.ОповещенОСрокеДействия,
				|	СертификатыЭП.ДатаОкончания
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП КАК СертификатыЭП
				|		ПО СоглашенияЭДСертификаты.Сертификат = СертификатыЭП.Ссылка
				|ГДЕ
				|	НЕ СертификатыЭП.ПометкаУдаления
				|	И НЕ СертификатыЭП.Отозван
				|	И (СертификатыЭП.Пользователь = &ПустойПользователь
				|			ИЛИ СертификатыЭП.Пользователь = &ТекущийПользователь
				|			ИЛИ &ЭтоПолноправныйПользователь)
				|	И СертификатыЭП.Отпечаток В(&МассивОтпечатковДляАвторизации)
				|	И СоглашенияЭДСертификаты.Ссылка.СпособОбменаЭД = &СпособОбменаЭД  И &ИспользоватьЭП
				|	И СоглашенияЭДСертификаты.Ссылка.СтатусСоглашения = &СтатусСоглашения
				|	И НЕ СоглашенияЭДСертификаты.Ссылка.ПометкаУдаления
				|	И СоглашенияЭДСертификаты.Ссылка В(&МассивСоглашений)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЗапомнитьПарольКСертификату УБЫВ";
			Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации",
				?(ВыполнятьАвторизациюНаСервере, МассивОтпечатковСервер, МассивОтпечатковКлиент));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
		// Только для работы с соглашениями
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			Запрос.УстановитьПараметр("ЭтоПолноправныйПользователь", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоПолноправныйПользователь", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("СтатусСоглашения",    Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("СпособОбменаЭД",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		Запрос.УстановитьПараметр("ИспользоватьЭП",     ИспользоватьЭП);
		
		Если ЗначениеЗаполнено(МассивСоглашений) Тогда
			Запрос.УстановитьПараметр("МассивСоглашений", МассивСоглашений);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СоглашенияЭДСертификаты.Ссылка В(&МассивСоглашений)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.ВыполнитьПакет();
		
		СоотвСоглашенийИСертификатовПодписи = Новый Соответствие;
		СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		Если ДляАвторизации Тогда
			Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
			МенеджерКриптографииДоступенНаСервере = Ложь;
			Если ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ПолучитьМенеджерКриптографии();
					МенеджерКриптографииДоступенНаСервере = Истина;
				Исключение
					ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					МенеджерКриптографииДоступенНаСервере = Ложь;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоПроходов = ?(ДляПодписи И ДляАвторизации, 2, 1);
		Для Сч = 1 По КоличествоПроходов Цикл
			Выборка = Результат[Сч - 1].Выбрать();
			Если Выборка.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			// Первая выборка, в зависимости от входящих параметров, может быть как для подписи, так и для авторизации.
			// Если ДляПодписи = Истина, то первая выборка всегда по сертификатам подписи.
			ЗаполняемоеСоответствие = ?(ДляПодписи И Сч = 1,
				СоотвСоглашенийИСертификатовПодписи, СоотвСоглашенийИСертификатовАвторизации);
			Пока Выборка.Следующий() Цикл
				// Выбираем по 1 сертификату для каждого соглашения, поэтому, если соглашение уже есть
				// в соответствии, то переходим к следующему элементу выборки:
				Если ЗаполняемоеСоответствие.Получить(Выборка.СоглашениеЭД) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗаполняемоеСоответствие.Вставить(Выборка.СоглашениеЭД, Выборка.СертификатПодписи);
				СтруктураСертификата = Новый Структура("СертификатПодписи, ЗапомнитьПарольКСертификату, ПарольПользователя,
														|Отпечаток, Отозван, ФайлСертификата, ОповещенОСрокеДействия, ДатаОкончания, НастройкиКриптографии");
				ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
				СтруктураСертификата.НастройкиКриптографии = Новый Структура("ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП, АлгоритмПодписи, АлгоритмХеширования, АлгоритмШифрования");
				НастройкиКриптографии = РаботаСЭП.ПрофильНастроекКриптографииПоСертификату(СтруктураСертификата.Отпечаток);
				ЗаполнитьЗначенияСвойств(СтруктураСертификата.НастройкиКриптографии, НастройкиКриптографии);
				Если НЕ (ДляПодписи И Сч = 1) Тогда
					// Заполняем данные для авторизации.
					Если ТипЗнч(СтруктураСертификата.ФайлСертификата) = Тип("ХранилищеЗначения") Тогда
						ПарольПользователя = Неопределено;
						Если Выборка.ЗапомнитьПарольКСертификату Тогда
							ПарольПользователя = Выборка.ПарольПользователя;
						КонецЕсли;
						Расшифровывать = (ПарольПользователя <> Неопределено И МенеджерКриптографииДоступенНаСервере);
						Маркер = ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураСертификата, Соединение, Расшифровывать);
						Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
							Если Расшифровывать Тогда
								СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
							Иначе
								СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СоотвСертификатовИИхСтруктур.Вставить(Выборка.СертификатПодписи, СтруктураСертификата);
				
			КонецЦикла;
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИСертификатовПодписи", СоотвСоглашенийИСертификатовПодписи);
		СтруктураСоответствий.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Определяет наличие доступного соглашения, для получения документов по которому требуется криптография
// 
// Возвращаемое значение:
//  Булево - есть или нет хотя бы одно соглашение
//
Функция ЕстьСоглашенияТребующиеЭП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|			ИЛИ (СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
		|				ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
		|				ИЛИ СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
		|				И НЕ СоглашенияОбИспользованииЭД.СертификатОрганизацииДляРасшифровки = ЗНАЧЕНИЕ(Справочник.СертификатыЭП.ПустаяСсылка))";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ВыполнятьАвторизациюНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ПолучитьМенеджерКриптографии();
			Исключение
				ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				ПроверитьСрокДействияСертификата(СтруктураСертификата.СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Создает новый элемент справочника "СертификатыЭП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.СертификатыЭП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.Организация;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДатаОкончания = СтруктураСертификата.ДействителенДо;
	
	Если СтруктураСертификата.Свойство("Идентификатор") Тогда
		НовыйЭлемент.Идентификатор = СтруктураСертификата.Идентификатор;
	КонецЕсли;
	
	// Проверка сертификата на соответствие 63 ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		НовыйСертификат = Новый СертификатКриптографии(СтруктураСертификата.ДвоичныеДанныеСертификата);
		
		// Корректно работаем только с сертификатами для подписи стандартной структуры.
		Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
			И НовыйСертификат.Субъект.Свойство("T") И НовыйСертификат.Субъект.Свойство("ST") Тогда
			
			Если НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ШаблонФИОВладельца = НСтр("ru = '%1 %2'");
				ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
					НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
			ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
				
				ФИОВладельца = НовыйСертификат.Субъект.CN;
			КонецЕсли;
			НовыйЭлемент.ДолжностьПоСертификату = НовыйСертификат.Субъект.T;
			
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИОВладельца, НовыйЭлемент.Фамилия, НовыйЭлемент.Имя,
				НовыйЭлемент.Отчество);
			НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонНазначения = НСтр("ru = 'Кем выдан: %1
							|Действителен до: %2
							|
							|%3'");
	НовоеНазначение = "";
	ЭлектроннаяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	НовыйЭлемент.Назначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначения, СтруктураСертификата.КемВыдан,
		СтруктураСертификата.ДействителенДо, НовоеНазначение);
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// Функция выполняет формирование, подписание и отправку служебных ЭД.
// Используется при обмене через оператора ЭДО.
//
// Параметры:
//  МассивЭД - массив ссылок на СообщенияЭДО - ЭД, на основании которых надо сформировать соответствующие служебные ЭД.
//  ВидЭД - перечисление ссылка - ВидыЭД (извещение о получении, либо уведомление об уточнении).
//  СтруктураСоответствий - структура - содержит элементы: СоотвСертификатовИИхСтруктур, СоотвСоглашенийИСертификатовПодписи,
//    СоотвСоглашенийИСертификатовАвторизации.
//  ТекстУточнения - строка - текст уточнения (необходим для формирования уведомления об уточнении).
//
// Возвращаемое значение:
//  Структура - содержит элементы: СоотвСоглашенийИМассивовЭДКПодписи
//
Функция ВыполнитьДействияСоСлужебнымиЭД(Знач МассивЭД,
										Знач ВидЭД,
										СтруктураСоответствий,
										Знач ТекстУточнения = "") Экспорт
	
	СтруктураВозврата = Новый Структура;
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	
	Если ТипЗнч(МассивЭД) = Тип("Массив") Тогда
		
		ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
		ВыполнятьКриптооперацииНаСервере = ?(ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении,
			ВыполнятьАвторизациюНаСервере, ВыполнятьКриптооперацииНаСервере());
		НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
		
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("ЭДВладелецСЭД", Новый ОписаниеТипов("СправочникСсылка.СообщенияЭДО"));
		ТЗ_ЭД.Колонки.Добавить("СлужебныйЭД", Новый ОписаниеТипов("СправочникСсылка.СообщенияЭДО"));
		ТЗ_ЭД.Колонки.Добавить("СтатусЭД", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭД"));
		ТЗ_ЭД.Колонки.Добавить("СоглашениеЭД", Новый ОписаниеТипов("СправочникСсылка.СоглашенияОбИспользованииЭД"));
		ТЗ_ЭД.Колонки.Добавить("Сформирован", Новый ОписаниеТипов("Булево"));
		ТЗ_ЭД.Колонки.Добавить("Подписан", Новый ОписаниеТипов("Булево"));
		ТЗ_ЭД.Колонки.Добавить("Отправлен", Новый ОписаниеТипов("Булево"));
		
		Для Каждого ЭДВладелец Из МассивЭД Цикл
			
			СсылкаНаЭД = СформироватьСлужебныйЭД(ЭДВладелец, ТекстУточнения);
			
			ТекСтрока = ТЗ_ЭД.Добавить();
			ТекСтрока.ЭДВладелецСЭД = ЭДВладелец;
			ТекСтрока.Сформирован = Ложь;
			ТекСтрока.Подписан = Ложь;
			ТекСтрока.Отправлен = Ложь;
			
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				
				СтРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СоглашениеЭД, СтатусЭД");
				
				ТекСтрока.СлужебныйЭД = СсылкаНаЭД;
				ТекСтрока.СтатусЭД = СтРеквизитов.СтатусЭД;
				ТекСтрока.СоглашениеЭД = СтРеквизитов.СоглашениеЭД;
				ТекСтрока.Сформирован = Истина;
				КолСформированных = КолСформированных + 1;
			КонецЕсли;
		КонецЦикла;
		
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если ТЗ_ЭД.Количество() > 0 И ТипЗнч(СтруктураСоответствий) = Тип("Структура") И СтруктураСоответствий.Количество() > 0
			И СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
			
			ВремТЗ = ТЗ_ЭД.Скопировать(, "СоглашениеЭД");
			ВремТЗ.Свернуть("СоглашениеЭД");
			
			СоотвСоглашенийИСертификатовПодписи = Неопределено;
			// Подписание на сервере
			Если СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовПодписи", СоотвСоглашенийИСертификатовПодписи)
				И ВыполнятьКриптооперацииНаСервере Тогда
				
				МассивСсылокОбновленияСтатусов = Новый Массив;
				ЕстьПодписанныеЭД = Ложь;
				Для Каждого ТекСтрока Из ВремТЗ Цикл
					Сертификат = СоотвСоглашенийИСертификатовПодписи.Получить(ТекСтрока.СоглашениеЭД);
					Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
						Продолжить;
					КонецЕсли;
					Отбор = Новый Структура("СоглашениеЭД, Сформирован", ТекСтрока.СоглашениеЭД, Истина);
					ТЗКОбработке = ТЗ_ЭД.Скопировать(Отбор);
					МассивЭДкОбработке = ТЗКОбработке.ВыгрузитьКолонку("СлужебныйЭД");
					Если МассивЭДкОбработке.Количество() > 0 Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, Сертификат, СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							ЕстьПодписанныеЭД = Истина;
							Для Каждого Элемент Из МассивЭДкОбработке Цикл
								МассивСсылокОбновленияСтатусов.Добавить(Элемент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьПодписанныеЭД Тогда
					СоответствиеСсылокИСтатусов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылокОбновленияСтатусов, "СтатусЭД");
					Для Каждого Элемент Из СоответствиеСсылокИСтатусов Цикл
						СтрокаТЗ = ТЗ_ЭД.Найти(Элемент.Ключ, "СлужебныйЭД");
						Если СтрокаТЗ <> Неопределено Тогда
							СтрокаТЗ.СтатусЭД = Элемент.Значение.СтатусЭД;
							СтрокаТЗ.Подписан = (СтрокаТЗ.СтатусЭД = Перечисления.СтатусыЭД.Подписан);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСоглашенийИСертификатовАвторизации = Неопределено;
			// Отправка с сервера (авторизация на сервере)
			Если СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
				ИЛИ НЕ НемедленнаяОтправкаЭД Тогда
				
				МенеджерКриптографии = Неопределено;
				Если ВыполнятьАвторизациюНаСервере Тогда
					Попытка
						МенеджерКриптографии = ПолучитьМенеджерКриптографии();
					Исключение
						ТекстСообщения = ПолучитьСообщениеОбОшибке("100");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						МенеджерКриптографии = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
				МассивЭДкОбработке = Новый Массив;
				Для Каждого ТекСтрока Из ВремТЗ Цикл
					Если НемедленнаяОтправкаЭД Тогда
						Сертификат = СоотвСоглашенийИСертификатовАвторизации.Получить(ТекСтрока.СоглашениеЭД);
						Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
						Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
							Продолжить;
						КонецЕсли;
						Маркер = Неопределено;
						МаркерЗашифрованный = Неопределено;
						// В структуре может быть маркер, как расшифрованный, так и зашифрованный.
						// Если расшифрованного маркера нет, то попытаемся расшифровать зашифрованный.
						Если НЕ СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер)
							И СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
							И МенеджерКриптографии <> Неопределено Тогда
							Попытка
								ПроверитьСрокДействияСертификата(СтруктураСертификата.СертификатПодписи);
								СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
								Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
								СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
							Исключение
								Продолжить;
							КонецПопытки;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(Маркер) Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						СтруктураСертификата = Новый Структура;
					КонецЕсли;
					
					Отбор = Новый Структура("СоглашениеЭД, Подписан", ТекСтрока.СоглашениеЭД, Истина);
					ТЗКОбработке = ТЗ_ЭД.Скопировать(Отбор);
					МассивЭДкОбработкеПоСоглашению = ТЗКОбработке.ВыгрузитьКолонку("СлужебныйЭД");
					Если МассивЭДкОбработкеПоСоглашению.Количество() > 0 Тогда
						СоотвСоглашенийИСтруктурСертификатов.Вставить(ТекСтрока.СоглашениеЭД, СтруктураСертификата);
						Для Каждого Элемент Из МассивЭДкОбработкеПоСоглашению Цикл
							МассивЭДкОбработке.Добавить(Элемент);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				ЕстьОтправленныеЭД = Ложь;
				Если МассивЭДкОбработке.Количество() > 0 Тогда
					СтруктураРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДкОбработке, Истина, СоотвСоглашенийИСтруктурСертификатов);
					Отправленных = 0;
					Если СтруктураРезультата.Свойство("КолОтправленных", Отправленных) И Отправленных > 0 Тогда
						КолОтправленных = КолОтправленных + Отправленных;
						ЕстьОтправленныеЭД = Истина;
					КонецЕсли;
					Подготовленных = 0;
					Если СтруктураРезультата.Свойство("КолПодготовленных", Подготовленных) И Подготовленных > 0 Тогда
						КолПодготовленных = КолПодготовленных + Подготовленных;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьОтправленныеЭД Тогда
					СоответствиеСсылокИСтатусов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭДкОбработке, "СтатусЭД");
					Для Каждого Элемент Из СоответствиеСсылокИСтатусов Цикл
						СтрокаТЗ = ТЗ_ЭД.Найти(Элемент.Ключ, "СлужебныйЭД");
						Если СтрокаТЗ <> Неопределено Тогда
							СтрокаТЗ.СтатусЭД = Элемент.Значение;
							СтрокаТЗ.Отправлен = (СтрокаТЗ.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
								ИЛИ СтрокаТЗ.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
								ИЛИ СтрокаТЗ.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ВыполнятьКриптооперацииНаСервере И СоотвСоглашенийИСертификатовПодписи.Количество() > 0 Тогда
				СоотвСоглашенийИМассивовЭД = Новый Соответствие;
				Для Каждого ТекСтрока Из ВремТЗ Цикл
					Если НЕ ЗначениеЗаполнено(ТекСтрока.СоглашениеЭД) Тогда
						Продолжить;
					КонецЕсли;
					Отбор = Новый Структура("СоглашениеЭД, Подписан", ТекСтрока.СоглашениеЭД, Ложь);
					ТЗКОбработке = ТЗ_ЭД.Скопировать(Отбор);
					МассивЭДкОбработке = ТЗКОбработке.ВыгрузитьКолонку("СлужебныйЭД");
					Если МассивЭДкОбработке.Количество() > 0 Тогда
						Сертификат = СоотвСоглашенийИСертификатовПодписи.Получить(ТекСтрока.СоглашениеЭД);
						Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
						Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
							Продолжить;
						КонецЕсли;
						СоотвСоглашенийИМассивовЭД.Вставить(ТекСтрока.СоглашениеЭД, МассивЭДкОбработке);
					КонецЕсли;
				КонецЦикла;
				СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКПодписи", СоотвСоглашенийИМассивовЭД);
			КонецЕсли;
			
			// Т.к. отправка в любом случае выполняется с сервера (авторизация на клиенте - означает, что на клиенте будет
			// выполняться расшифровка маркера), то не отправленными могут быть только не подписанные. В противном случае,
			// если есть подписанные но не отправленные, то это ошибка. Следовательно массив ЭД к отправке - совпадает с
			// массивом ЭД к подписи на клиенте
		КонецЕсли;
	КонецЕсли;
	
	СтСчетчиков = Новый Структура;
	СтСчетчиков.Вставить("КолСформированных", КолСформированных);
	СтСчетчиков.Вставить("КолУтвержденных", КолСформированных);
	СтСчетчиков.Вставить("КолПодписанных", КолПодписанных);
	СтСчетчиков.Вставить("КолПодготовленных", КолПодготовленных);
	СтСчетчиков.Вставить("КолОтправленных", КолОтправленных);
	
	СтруктураВозврата.Вставить("СтруктураСчетчиков", СтСчетчиков);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Помечает на удаление элементы справочника СообщенияЭДО с отбором по владельцу
//
// Параметры: 
//  Ссылка -  ссылка на объект.
//
Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка КАК Ссылка,
		|	СообщенияЭДО.ПометкаУдаления,
		|	СообщенияЭДО.Документ.ПометкаУдаления КАК ВладелецПометкаУдаления
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Документ = &ВладелецФайла
		|	И (СообщенияЭДО.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
		|			ИЛИ СообщенияЭДО.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СообщениеЭДООбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеЭДООбъект.Заблокировать();
		СообщениеЭДООбъект.УстановитьПометкуУдаления(Выборка.ВладелецПометкаУдаления);
		ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(Выборка.Ссылка);
		Если ЗначениеЗаполнено(ФайлЭД) Тогда
			ФайлОбъект = ФайлЭД.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(Выборка.ВладелецПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проводит тест связи с оператором ЭДО.
//
// Параметры:
//  ПараметрыСоглашения  - Структура - содержит реквизиты соглашения
//  ПарольКСертификатуОператора  - строка - пароль к сертификату оператора
//
// Возвращаемое значение:
//  Булево, содержит результат теста
//
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ТестСвязиСТакском(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения);
	
КонецФункции

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(НастройкиОбмена);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.СсылкаНаЭД
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
																								СсылкаНаЭД);
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ПараметрыОткрытияФормы") Тогда
		СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",
															РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// По ссылке на документ определяет есть ли у него э.д.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка
//
// Возвращаемое значение:
//  Булево, факт существования документа
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
		|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.СообщенияЭДО.ПустаяСсылка)
		|	И (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
		|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ПолучитьИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД", "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи", "ИспользоватьЭлектронныеПодписи");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			ИмяСчетаФактурыПолученного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураПолученныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка." + ИмяСчетаФактурыВыданного)
				ИЛИ ИмяСчетаФактурыПолученного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка." + ИмяСчетаФактурыПолученного) Тогда
				
				ТекстСостоянияЭД = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
			ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = СостояниеВерсииЭД(СсылкаНаВладельца);
				ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаВладельца, Ложь);
			Если НЕ ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
				Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
					ТекстСостоянияЭД = Нстр("ru = 'Нет действующего соглашения об использовании ЭД'");
				ИначеЕсли НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					ТекстСостоянияЭД = Нстр("ru = 'Не сформирован'");
				Иначе
					ТекстСостоянияЭД = Нстр("ru = 'Не получен'");
				КонецЕсли;
			Иначе
				Гиперссылка = Истина;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Обмен электронными документами отключен'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.СообщенияЭДО
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.СоглашениеЭД, "ПрограммаБанка, СпособОбменаЭД");
	
	Если РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И (РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ЭД);
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(ФайлЭД.ТекущаяВерсия);
	Пока ВыборкаЭП.Следующий() Цикл
		
		СтрокаЭП = Новый Структура("КомуВыданСертификат, ДатаПодписи, Комментарий, Статус, Объект, АдресПодписи,
			|Отпечаток, Зашифрован, УстановившийПодпись, АдресСертификата, ПодписьВерна, Версия, Статус,
			|СертификатДействителен, ДатаПроверкиПодписи");
		ЗаполнитьЗначенияСвойств(СтрокаЭП, ВыборкаЭП);
		
		ДвоичныеДанныеПодписи = ВыборкаЭП.Подпись.Получить();

		ОшибкиПроверки = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
			ДвоичныеДанныеДокумента, ДвоичныеДанныеПодписи);
			
		СтрокаЭП.ПодписьВерна = Не ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи");
		СтрокаЭП.СертификатДействителен = Не ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиСертификата");
				
		ДанныеПодписи = Новый Структура(
			"УникальныйИдентификатор,
			|Объект,
			|УстановившийПодпись,
			|ДатаПодписи,
			|ПодписьВерна,
			|ТекстОшибкиПроверкиПодписи,
			|СертификатДействителен,
			|ТекстОшибкиПроверкиСертификата");
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, СтрокаЭП);
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, ОшибкиПроверки);
		РаботаСЭП.ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, СтрокаЭП.ДатаПроверкиПодписи, СтрокаЭП.Статус);

		Если Не СтрокаЭП.ПодписьВерна Тогда
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, "", ОшибкиПроверки.ТекстОшибкиПроверкиПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, ЭД, ОбъектМетаданных, ДокументЗагружен) Экспорт
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВидЭД, Родитель");
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ЭД = ПараметрыЭД.Родитель;
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.СообщенияЭДО, ссылка на электронный документ.
// СертификатПодписи  - ссылка - ссылка на элемент справочника Сертификаты ЭП.
//
Функция ПолучитьДвоичныеДанныеФайла(ЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		// Делаем проверку на заполненность полей ФИО в сертификате
		Если Не ЗначениеЗаполнено(СертификатПодписи.Фамилия) ИЛИ Не ЗначениеЗаполнено(СертификатПодписи.Имя) Тогда
			ТекстСообщения = НСтр("ru = 'Операция отменена. Необходимо заполнить поля: ""Фамилия"", ""Имя"".'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ФайлДанныхИзменен = Ложь;
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВидЭД, Организация, НаправлениеЭД");
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеЭД.Записать(ИмяФайла);
			ЗаполнитьДанныеПодписантаЭД(ИмяФайла, ПараметрыЭД.Организация, СертификатПодписи, ПараметрыЭД.ВидЭД);
			ФайлДанныхИзменен = Истина;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеЭД.Записать(ИмяФайла);
			ЗаполнитьДанныеПодписантаСлужебныхЭД(ИмяФайла, ПараметрыЭД.Организация, СертификатПодписи);
			ФайлДанныхИзменен = Истина;
			
		ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара) Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("zip");
			ДвоичныеДанныеЭД.Записать(ИмяФайла);
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки =  ЭлектронныеДокументыСлужебный.РабочийКаталог("ПодписьЭД", ЭД.УникальныйИдентификатор());
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если Не ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"),
					ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Если ФайлыЭД.Количество() > 0 Тогда
				ФайлСДанными = ФайлыЭД[0];
				
				ЗаполнитьДанныеПодписантаЭДCML_206(ФайлСДанными.ПолноеИмя, ПараметрыЭД.Организация, СертификатПодписи);
				
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				ЗипКонтейнер.Добавить(ФайлСДанными.ПолноеИмя);
				Попытка
					ЗипКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование архива ЭД CML при подписи'"),
					ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				
				ФайлДанныхИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если ФайлДанныхИзменен Тогда
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ЭлектронныеДокументы.ОбновитьПрисоединенныйФайл(ЭД, ИнформацияОФайле);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  МассивовСтруктурСертификатов - Массив доступных сертификатов
//  Действие - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  СтруктураСоответствий - Структура -  Ключи структуры соответствий:
//   СоотвСертификатовИИхСтруктур - соответствие (ключи - СертификатыЭП, значения - структуры параметров сертификата);
//   СоотвСоглашенийИСертификатовАвторизации - соответствие (ключи - СоглашенияЭД, значения - СертификатыЭП).
//
// Возвращаемое значение:
//  Структура.
//
Функция ОбработатьСообщенияЭДО(Знач МассивСсылокНаОбъект,
							   Знач МассивовСтруктурСертификатов,
							   Знач Действие,
							   Знач ДопПараметры,
							   СтруктураСоответствий) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", 0);
	СтруктураВозврата.Вставить("КолПодписанных",           0);
	СтруктураВозврата.Вставить("КолПодготовленных",        0);
	СтруктураВозврата.Вставить("ВыполнятьАвторизациюНаСервере",    ВыполнятьАвторизациюНаСервере());
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере());
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД());
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭДКПодписи", Новый Соответствие);
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью", Новый Массив, Новый Массив);
	СтруктураКОтправке.Вставить("САвторизацией", Новый Соответствие);
	СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	
	СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД( , МассивСсылокНаОбъект);
	СтруктураДействий = Неопределено;
	Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить(Элемент.Ключ);
		ЭД = Элемент.Значение;
		СтруктураДействий = ВыполнитьДействияПоЭД(
									МассивВладельцев,
									МассивовСтруктурСертификатов,
									Действие,
									ДопПараметры,
									ЭД,
									СтруктураСоответствий);
		Если СтруктураДействий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СтруктураКОтправке") Тогда
			ДополнитьСоответствие(
					СтруктураВозврата.СтруктураКОтправке.САвторизацией,
					СтруктураДействий.СтруктураКОтправке.САвторизацией);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
													СтруктураВозврата.СтруктураКОтправке.БезПодписи,
													СтруктураДействий.СтруктураКОтправке.БезПодписи,
													Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
													СтруктураВозврата.СтруктураКОтправке.СПодписью,
													СтруктураДействий.СтруктураКОтправке.СПодписью,
													Истина);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("СоотвСертификатовИМассивовЭДКПодписи") Тогда
			ДополнитьСоответствие(
					СтруктураВозврата.СоотвСертификатовИМассивовЭДКПодписи,
					СтруктураДействий.СоотвСертификатовИМассивовЭДКПодписи);
		КонецЕсли;

		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			СтруктураВозврата.КоличествоУтвержденныхЭД = СтруктураВозврата.КоличествоУтвержденныхЭД
														+ СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КолПодготовленных") Тогда
			СтруктураВозврата.КолПодготовленных = СтруктураВозврата.КолПодготовленных + СтруктураДействий.КолПодготовленных;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КолПодписанных") Тогда
			СтруктураВозврата.КолПодписанных = СтруктураВозврата.КолПодписанных + СтруктураДействий.КолПодписанных;
		КонецЕсли;
	КонецЦикла;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.СообщенияЭДО, ссылка на элемент справочника СообщенияЭДО
//  СтруктураСоответствий - Структура -  Ключи структуры соответствий:
//   СоотвСертификатовИИхСтруктур - соответствие (ключи - СертификатыЭП, значения - структуры параметров сертификата);
//   СоотвСоглашенийИСертификатовАвторизации - соответствие (ключи - СоглашенияЭД, значения - СертификатыЭП).
//
// Возвращаемое значение:
//  Структура.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивСтруктурСертификатов,
							  Знач Действия,
							  ДопПараметры = "",
							  Знач ЭД = Неопределено,
							  СтруктураСоответствий) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		МассивСтруктурСертификатовКлиента = Новый Массив;
		Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
			МассивСтруктурСертификатовКлиента.Добавить(ЭлементСтруктуры);
		КонецЦикла;
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивСтруктурСертификатов = ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатов = Новый Массив;
				ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", Истина);
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			КлиентскиеНастройкиКриптографии = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
																							МассивСтруктурСертификатов);
			МассивОтпечатков = ЭлектронныеДокументыСлужебный.ВернутьМассивОтпечатковСтруктуры(КлиентскиеНастройкиКриптографии);
		Исключение
			КлиентскиеНастройкиКриптографии = Новый Массив;
			МассивОтпечатков = Новый Массив;
		КонецПопытки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
									  ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
									
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьАвторизациюНаСервере, ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭП, значение - МассивЭД к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	СтруктураВозврата.Вставить("ВыполнятьАвторизациюНаСервере", ВыполнятьАвторизациюНаСервере);
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	
	СоответствиеСертификатов = Новый Соответствие;
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	Если ЭД = Неопределено И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))";
		Иначе
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
				
				ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
				|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Справочник." + ИмяСчетаФактурыВыданного + "
				|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
				|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ)";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		КолНовыхЭД = 0;
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат СтруктураВозврата; // не найдено действующее соглашение
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка,
			|	СообщенияЭДО.ВидЭД,
			|	СообщенияЭДО.Документ,
			|	СообщенияЭДО.Контрагент,
			|	СообщенияЭДО.НаправлениеЭД,
			|	СообщенияЭДО.Организация,
			|	СообщенияЭДО.СоглашениеЭД,
			|	СообщенияЭДО.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Справочник.СообщенияЭДО КАК СообщенияЭДО
			|ГДЕ
			|	СообщенияЭДО.Ссылка В(&МассивСсылокЭД)
			|";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД = Новый Массив;
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка,
			|	СообщенияЭДО.ВидЭД,
			|	СообщенияЭДО.Документ,
			|	СообщенияЭДО.Контрагент,
			|	СообщенияЭДО.НаправлениеЭД,
			|	СообщенияЭДО.Организация,
			|	СообщенияЭДО.СоглашениеЭД,
			|	СообщенияЭДО.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияЭДО КАК СообщенияЭДО
			|		ПО СостоянияЭД.ЭлектронныйДокумент = СообщенияЭДО.Ссылка
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
			|";
		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(СообщенияЭДО.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	// Утверждение ЭД:
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЭД.Документ КАК ВладелецЭД,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	ВТ_ЭД.СтатусЭД,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|ГДЕ
			|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхЭД = 0;
		КолУтвержденныхРанее = 0;
		НовыйЭД = Неопределено;
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД);
				Если ТранзакцияАктивна() Тогда
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(НовыйЭД) Тогда
			ДопПараметры.Вставить("НовыйЭД",НовыйЭД);
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
		|И (Выбор Когда СообщенияЭДО.НаправлениеЭД = &НаправлениеВходящийЭД
		|		И СообщенияЭДО.ВидЭД В (&МассивИсключаемыхВидовЭД)
		|	Тогда Ложь
		|	Иначе Истина
		|	Конец)";
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящийЭД", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	Если ТипЗнч(СтруктураСоответствий) <> Тип("Структура") Тогда
		СтруктураСоответствий = Новый Структура;
		// Ключи структуры соответствий:
		// СоотвСертификатовИИхСтруктур - соответствие (ключи - СертификатыЭП, значения - структуры параметров сертификата);
		// СоотвСоглашенийИСертификатовАвторизации - соответствие (ключи - СоглашенияЭД, значения - СертификатыЭП)
	КонецЕсли;
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Неопределено;
	СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) <> Тип("Соответствие") Тогда
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью, САвторизацией", Новый Массив, Новый Массив, Новый Соответствие);
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД).
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификат по условиям: по возможности
		// в сертификате должен быть сохранен пароль пользователя и его отпечатка не должно быть среди уже установленных
		// в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СертификатыЭПВидыДок.Ссылка КАК СертификатПодписи,
			|	СертификатыЭПВидыДок.Ссылка.ЗапомнитьПарольКСертификату,
			|	ВЫБОР
			|		КОГДА СертификатыЭПВидыДок.Ссылка.ЗапомнитьПарольКСертификату
			|			ТОГДА СертификатыЭПВидыДок.Ссылка.ПарольПользователя
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ПарольПользователя,
			|	СертификатыЭПВидыДок.Ссылка.Отпечаток,
			|	СертификатыЭПВидыДок.Ссылка.Отозван,
			|	СертификатыЭПВидыДок.Ссылка.Организация КАК ОрганизацияВСертификате,
			|	СертификатыЭПВидыДок.ВидДокумента
			|ПОМЕСТИТЬ ВТ_Сертификаты
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДок
			|		ПО (ВТ_ЭД.Организация = СертификатыЭПВидыДок.Ссылка.Организация
			|				ИЛИ ВТ_ЭД.Контрагент = СертификатыЭПВидыДок.Ссылка.Организация)
			|ГДЕ
			|	НЕ СертификатыЭПВидыДок.Ссылка.Отозван
			|	И НЕ СертификатыЭПВидыДок.Ссылка.ПометкаУдаления
			|	И (СертификатыЭПВидыДок.Ссылка.Пользователь = &ПустойПользователь
			|			ИЛИ СертификатыЭПВидыДок.Ссылка.Пользователь = &ТекущийПользователь)
			|	И ВТ_ЭД.ВидЭД = СертификатыЭПВидыДок.ВидДокумента
			|	И (СертификатыЭПВидыДок.Ссылка.Отпечаток В (&МассивОтпечатков)
			|			ИЛИ СертификатыЭПВидыДок.Ссылка.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2))
			|	И СертификатыЭПВидыДок.ИспользоватьДляПодписи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
			|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
			|	ВТ_Сертификаты.ЗапомнитьПарольКСертификату,
			|	ВТ_Сертификаты.ПарольПользователя,
			|	ВТ_Сертификаты.Отпечаток,
			|	ВТ_Сертификаты.Отозван,
			|	СоглашенияЭД.СпособОбменаЭД,
			|	ВТ_ЭД.Организация,
			|	ВТ_ЭД.Контрагент,
			|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
			|	СоглашенияЭД.ЭтоИнтеркампани,
			|	ВЫБОР
			|		КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАвторизация
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	ВТ_Сертификаты КАК ВТ_Сертификаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияЭДВходящие
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДВходящие.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
			|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.Объект
			|		ПО (ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента)
			|			И (ВТ_ЭД.Организация = ВТ_Сертификаты.ОрганизацияВСертификате
			|				ИЛИ ВТ_ЭД.Контрагент = ВТ_Сертификаты.ОрганизацияВСертификате)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|		ПО ВТ_Сертификаты.СертификатПодписи = СоглашенияЭДСертификаты.Сертификат
			|			И (ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка)
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|					ИЛИ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА НЕ СоглашенияЭДСертификаты.Сертификат ЕСТЬ NULL 
			|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
			|				ТОГДА ИСТИНА
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеВходящий
			|				ТОГДА ВТ_ЭД.Ссылка.ВидЭД = СоглашенияЭДВходящие.ВходящийДокумент
			|						И СоглашенияЭДВходящие.Формировать
			|						И СоглашенияЭДВходящие.ИспользоватьЭП
			|						И &ИспользоватьЭП
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеИсходящий
			|				ТОГДА ВТ_ЭД.Ссылка.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
			|						И СоглашенияЭДИсходящие.Формировать
			|						И СоглашенияЭДИсходящие.ИспользоватьЭП
			|						И &ИспользоватьЭП
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И НЕ СоглашенияЭД.ПометкаУдаления
			|	И СоглашенияЭД.СтатусСоглашения = &СтатусСоглашения
			|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
			|	И ВЫБОР
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеВходящий
			|					И ВТ_ЭД.Ссылка.ВидЭД В (&ВидыЭДСчетаФактуры)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СпособОбменаЭД,
			|	ВТ.Организация,
			|	ВТ.Контрагент,
			|	ВТ.ЭтоИнтеркампани,
			|	ВТ.ТребуетсяАвторизация,
			|	ВТ.СоглашениеЭД
			|ИЗ
			|	ВТ КАК ВТ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СертификатПодписи,
			|	ВТ.ЗапомнитьПарольКСертификату КАК ЗапомнитьПарольКСертификату,
			|	ВТ.ПарольПользователя,
			|	ВТ.Отпечаток,
			|	ВТ.Отозван,
			|	ВТ.ОрганизацияВСертификате КАК Организация,
			|	ВТ.СертификатПодписи.ФайлСертификата КАК ФайлСертификата
			|ИЗ
			|	ВТ КАК ВТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗапомнитьПарольКСертификату УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.УстановленныеПодписи,
			|	СертификатыЭП.Организация
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП КАК СертификатыЭП
			|		ПО ВТ.УстановленныеПодписи = СертификатыЭП.Отпечаток
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписи");
		Запрос.УстановитьПараметр("МассивСтатусов",       МассивСтатусов);
		Запрос.УстановитьПараметр("СтатусСоглашения",     Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("НаправлениеВходящий",  Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий", Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",     МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь",   Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ИспользоватьЭП",      ИспользоватьЭП);
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры", МассивВидовЭД);

		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;

		// После утверждения некоторых ЭД формируется в ответ новый ЭД,
		// поэтому на подпись отправляем новый ЭД
		Если ТипЗнч(ЭД) = Тип("СправочникСсылка.СообщенияЭДО") Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");
			Если (ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				И ЗначениеЗаполнено(НовыйЭД) Тогда
				
				МассивСсылокЭД = Новый Массив;
				МассивСсылокЭД.Добавить(НовыйЭД);
				Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
			КонецЕсли;
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		ДоступныеСертификаты = Результат[2].Выгрузить();
		ТЗ_Сертификатов = Результат[4].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[5].Выгрузить();
		Выборка = Результат[3].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("СоглашениеЭД");
		ТЗ_ЭД.Колонки.Добавить("СертификатПодписи");
		ТЗ_ЭД.Колонки.Добавить("СтруктураСертификата");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(ЭД) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				СоглашениеЭД   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,           "СоглашениеЭД");
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СпособОбменаЭД");
				Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
					ТекстСообщения = Нстр("ru = 'В соглашении об использовании электронных документов %1
												|не найден ни один из доступных сертификатов ЭП'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + СоглашениеЭД + """");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Проверте настройки криптографии.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
				
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				КопияТЗ.Сортировать("ЗапомнитьПарольКСертификату Убыв");
				МассивОтпечатковИсключения = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							СтруктураСертификата = Новый Структура("СертификатПодписи, ЗапомнитьПарольКСертификату, ПарольПользователя, Отпечаток, Отозван, ФайлСертификата");
							СтрокаСертификата = КопияТЗ[0];
							ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.СоглашениеЭД = Выборка.СоглашениеЭД;
							НоваяСтрока.СертификатПодписи = СтрокаСертификата.СертификатПодписи;
							НоваяСтрока.СтруктураСертификата = СтруктураСертификата;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() > 0 Тогда
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = Новый Структура("СертификатПодписи, ЗапомнитьПарольКСертификату, ПарольПользователя, Отпечаток, Отозван, ФайлСертификата");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.СоглашениеЭД = Выборка.СоглашениеЭД;
					НоваяСтрока.СертификатПодписи = СтрокаСертификата.СертификатПодписи;
					НоваяСтрока.СтруктураСертификата = СтруктураСертификата;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					Прервать;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД не требующие авторизации, 2- требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		КолПодписанных = 0;
		Если ВыделятьЭДКОтправкеСАвторизацией Тогда
			// Получим ТЗ ЭД, для отправки которых требуется авторизация и обработаем их отдельно:
			ДопВремТЗ = ТЗ_ЭД.Скопировать(, "СертификатПодписи, СоглашениеЭД, ТребуетсяАвторизация");
			ДопВремТЗ.Свернуть("СертификатПодписи, СоглашениеЭД, ТребуетсяАвторизация");
			ВремТЗ =  ДопВремТЗ.Скопировать(Новый Структура("ТребуетсяАвторизация", Истина),
											"СертификатПодписи, СоглашениеЭД");
			Если ВремТЗ.Количество() > 0 Тогда
				Для Каждого ТекСтрока Из ВремТЗ Цикл
					Отбор = Новый Структура("СертификатПодписи, СоглашениеЭД", ТекСтрока.СертификатПодписи, ТекСтрока.СоглашениеЭД);
					ТЗКОбработке = ТЗ_ЭД.Скопировать(Отбор);
					СтруктураСертификата = ТЗКОбработке.Найти(ТекСтрока.СертификатПодписи, "СертификатПодписи").СтруктураСертификата;
					МассивЭДкОбработке = ТЗКОбработке.ВыгрузитьКолонку("СсылкаНаЭД");
					Если МассивЭДкОбработке.Количество() > 0 Тогда
						МожноПодписать = Ложь;
						СтСертификатаСКлиента = СоотвСертификатовИИхСтруктур.Получить(ТекСтрока.СертификатПодписи);
						ЗапомнитьПарольКСертификату = Неопределено;
						Если ТипЗнч(СтСертификатаСКлиента) = Тип("Структура")
							И СтСертификатаСКлиента.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
							И ЗапомнитьПарольКСертификату = Истина Тогда
							МожноПодписать = Истина;
							СтруктураСертификата = СтСертификатаСКлиента;
						ИначеЕсли СтруктураСертификата.ЗапомнитьПарольКСертификату Тогда
							МожноПодписать = Истина;
						КонецЕсли;
						Если ВыполнятьКриптооперацииНаСервере И МожноПодписать Тогда
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, ТекСтрока.СертификатПодписи, СтруктураСертификата);
							Если Подписан > 0 Тогда
								КолПодписанных = КолПодписанных + Подписан;
							КонецЕсли;
						Иначе
							// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
							// надо будет попытаться их отправить, предварительно получив сертификат авторизации по соглашению ЭД.
							СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ТекСтрока.СоглашениеЭД, МассивЭДкОбработке);
							СоотвСертификатовИМассивовЭД.Вставить(ТекСтрока.СертификатПодписи, МассивЭДкОбработке);
							СоотвСертификатовИИхСтруктур.Вставить(ТекСтрока.СертификатПодписи, СтруктураСертификата);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Получим ТЗ ЭД, не требующих авторизации, для дальнейшей обработки
			ДопВремТЗ = ТЗ_ЭД.Скопировать(, "СертификатПодписи, ТребуетсяАвторизация");
			ДопВремТЗ.Свернуть("СертификатПодписи, ТребуетсяАвторизация");
			ВремТЗ = ДопВремТЗ.Скопировать(Новый Структура("ТребуетсяАвторизация", Ложь), "СертификатПодписи");
		Иначе
			ВремТЗ = ТЗ_ЭД.Скопировать(, "СертификатПодписи");
		КонецЕсли;
		
		ВремТЗ.Свернуть("СертификатПодписи");
		
		Если ВремТЗ.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ВремТЗ Цикл
				Отбор = Новый Структура("СертификатПодписи", ТекСтрока.СертификатПодписи);
				ТЗКОбработке = ТЗ_ЭД.Скопировать(Отбор);
				СтруктураСертификата = ТЗКОбработке.Найти(ТекСтрока.СертификатПодписи, "СертификатПодписи").СтруктураСертификата;
				МассивЭДкОбработке = ТЗКОбработке.ВыгрузитьКолонку("СсылкаНаЭД");
				Если МассивЭДкОбработке.Количество() > 0 Тогда
					МожноПодписать = Ложь;
					СтСертификатаСКлиента = СоотвСертификатовИИхСтруктур.Получить(ТекСтрока.СертификатПодписи);
					ЗапомнитьПарольКСертификату = Неопределено;
					Если ТипЗнч(СтСертификатаСКлиента) = Тип("Структура")
						И СтСертификатаСКлиента.Свойство("ЗапомнитьПарольКСертификату", ЗапомнитьПарольКСертификату)
						И ЗапомнитьПарольКСертификату = Истина Тогда
						МожноПодписать = Истина;
						СтруктураСертификата = СтСертификатаСКлиента;
					ИначеЕсли СтруктураСертификата.ЗапомнитьПарольКСертификату Тогда
						МожноПодписать = Истина;
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(ТекСтрока.СертификатПодписи, СтруктураСертификата);
					Если ВыполнятьКриптооперацииНаСервере И МожноПодписать Тогда
						// Если ЭД подписаны, то для отправки, они будут получены запросом, на следующем этапе (Отправка ЭД).
						Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, ТекСтрока.СертификатПодписи, СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
						КонецЕсли;
					Иначе
						СоотвСертификатовИМассивовЭД.Вставить(ТекСтрока.СертификатПодписи, МассивЭДкОбработке);
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Для Каждого Элемент Из МассивЭДкОбработке Цикл
							СтруктураКОтправке.СПодписью.Добавить(Элемент);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 ИЛИ СоотвСертификатовИМассивовЭД.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
			СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭД);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	Если НЕ СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации) Тогда
		СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
		СтруктураСоответствий.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатовКлиента);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивСоглашений = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивСоглашений.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(МассивСоглашений,
				СтМассивовСтруктурСертификатов);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				СоглашениеЭД = Элемент.Ключ;
				СтруктураСертификата = СоотвСоглашенийИСтруктурСертификатов.Получить(СоглашениеЭД);
				МаркерРасшифрованный = Неопределено;
				МаркерЗашифрованный = Неопределено;
				Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
					И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
						ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
					И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
					СоотвСертификатовИИхСтруктур.Вставить(СтруктураСертификата.СертификатПодписи, СтруктураСертификата);
					СоотвСоглашенийИСертификатовАвторизации.Вставить(СоглашениеЭД, СтруктураСертификата.СертификатПодписи);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	ВТ_ЭД.СтатусЭД,
			|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
			|	СоглашенияЭД.СпособОбменаЭД,
			|	ВЫБОР
			|		КОГДА СоглашенияЭД.СпособОбменаЭД = &СпособОбменаЧерезОЭДО
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАвторизация,
			|	ВЫБОР
			|		КОГДА СоглашенияЭД.СпособОбменаЭД = &СпособОбменаЧерезОЭДО
			|				ИЛИ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
			|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
			|					И СоглашенияЭДВходящие.ИспользоватьЭП
			|					И &ИспользоватьЭП
			|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
			|					И СоглашенияЭДИсходящие.ИспользоватьЭП
			|					И &ИспользоватьЭП
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяПодпись,
			|	ВЫБОР
			|		КОГДА СоглашенияЭД.СпособОбменаЭД <> &СпособОбменаЧерезОЭДО
			|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
			|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки ЕСТЬ NULL 
			|				И &ИспользоватьЭП
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяШифрование
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
			|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияЭДВходящие
			|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДВходящие.Ссылка
			|			И ВТ_ЭД.ВидЭД = СоглашенияЭДВходящие.ВходящийДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
			|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
			|			И ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = &СпособОбменаЧерезОЭДО
			|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
			|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
			|						И СоглашенияЭДВходящие.ИспользоватьЭП
			|						И &ИспользоватьЭП
			|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
			|						И СоглашенияЭДИсходящие.ИспользоватьЭП
			|						И &ИспользоватьЭП
			|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
			|			ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
			|		КОНЕЦ";
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписи");
		Запрос.УстановитьПараметр("СпособОбменаЧерезОЭДО",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		Запрос.УстановитьПараметр("НаправлениеВходящий",        Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭП",            ИспользоватьЭП);
		
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		Тз_Эд_КОтправке = Запрос.Выполнить().Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если Тз_Эд_КОтправке.Количество() > 0 Тогда
			Тз_Эд_СШифрованием = Тз_Эд_КОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				Тз_Эд_СШифрованием = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				Тз_Эд_КОтправке = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись", Ложь);
			ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД"));
			
			Если НЕ НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТз.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзСоглашений = ВремТз.Скопировать();
				ТзСоглашений.Свернуть("СоглашениеЭД");
				МассивСоглашений = ТЗСоглашений.ВыгрузитьКолонку("СоглашениеЭД");
				СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизацииСервер(МассивСоглашений,
					СтМассивовСтруктурСертификатов);
					
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого СоглашениеЭД Из МассивСоглашений Цикл
					СтруктураСертификата = СоотвСоглашенийИСтруктурСертификатов.Получить(СоглашениеЭД);
					Отбор = Новый Структура("СоглашениеЭД", СоглашениеЭД);
					ВремТЗПоСоглашению = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоСоглашению.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТзПоСоглашению.ВыгрузитьКолонку("СсылкаНаЭД");
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						Сертификат = СтруктураСертификата.СертификатПодписи;
						Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
							Для Каждого СсылкаНаЭД Из МассивЭД Цикл
								МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
							КонецЦикла;
							ЛокальноеСоотвСоглашенийИСтруктур.Вставить(СоглашениеЭД, СтруктураСертификата);
						Иначе
							СоотвСертификатовИИхСтруктур.Вставить(Сертификат, СтруктураСертификата);
							СоотвСоглашенийИСертификатовАвторизации.Вставить(СоглашениеЭД, Сертификат);
							// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
							// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
							// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
							// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
							// будет сформирован массив ЭД к отправке.
							// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
							МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(СоглашениеЭД);
							Если МассивЭДОжидающихПодписи = Неопределено Тогда
								МассивЭДОжидающихПодписи = Новый Массив;
							КонецЕсли;
							Для Каждого ЭлементКОтправке Из МассивЭД Цикл
								МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
							КонецЦикла;
							СоотвСоглашенийИМассивовЭДКОтправке.Вставить(СоглашениеЭД, МассивЭДОжидающихПодписи);
						КонецЕсли;
					Иначе
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ТЗ_ЭД_СШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВремТЗ = ТЗ_ЭД_СШифрованием.Скопировать(Отбор);
					МассивЭД = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивЭД);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		
		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция используется для минимизации серверных вызовов, в случае, когда есть несколько массивов ЭД,
// требующих подписания различными сертификатами и в настройках указано выполнение крипто операций на сервере.
//
// Параметры:
//  СоотвСертификатовИМассивовЭДКПодписи - Соответствие - ключ - справочник-ссылка сертификатЭП,
//    значение - массив ссылок на подписываемые ЭД. После подписания ЭД, возможно потребуется их отправка, поэтому
//    в случае, если подписать массив ЭД не удалось - то он удаляется из соответствия.
//  СоотвСертификатовИИхСтруктур - Соответствие - ключ - справочник-ссылка сертификатЭП,
//    значение - структура параметров сертификата ЭП.
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
// Возвращаемое значение:
//  Число - количество подписанных ЭД.
//
Функция ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
								Знач СоотвСертификатовИИхСтруктур,
								МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	КолПодписанных = 0;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если ТипЗнч(СоотвСертификатовИМассивовЭДКПодписи) = Тип("Соответствие")
		И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		МассивКУдалению = Новый Массив;
		Для Каждого Элемент Из СоотвСертификатовИМассивовЭДКПодписи Цикл
			Сертификат = Элемент.Ключ;
			МассивЭД = Элемент.Значение;
			Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(МассивЭД)) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭД, Сертификат, СтруктураСертификата, МассивНеПодписанныхЭД);
			Если Подписан > 0 Тогда
				КолПодписанных = КолПодписанных + Подписан;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивКУдалению Цикл
			СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КолПодписанных;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СоотвСоглашенийИСтруктурСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ЭлектронныеДокументыСлужебный.ОтправкаСформированныхЭД(
													СоотвСоглашенийИСтруктурСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ЭлектронныеДокументыСлужебный.ПолучитьНовыеЭД(
												СоотвСоглашенийИСтруктурСертификатов,
												ПовторноеПолучение);
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	// если маркер протух, получаем его заново, чтобы расшифровать на клиенте
	Если ПовторноеПолучение Тогда
		Для Каждого Элемент ИЗ СоотвСоглашенийИСтруктурСертификатов Цикл
			Элемент.Значение.Вставить("МаркерЗашифрованный", ЗашифрованныйМаркер(Элемент.Значение));
		КонецЦикла
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к
//                              ним.
//  ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//  ПапкаДляРаспаковки - Строка, пусть к временному каталогу
//  МассивЭДИДанныхПодписей - Массив, элементами массива является структура, содержащая ссылку на ЭД и двоичные данные
//                            подписи для последующей обработки на клиенте
//
Функция ОбработатьПодтвержденияДокументовНаСервере(
				СоответствиеФайлПараметры,
				ПакетЭДСсылка,
				ПапкаДляРаспаковки,
				МассивЭДИДанныхПодписей = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЭДИДанныхПодписей = Новый Массив;
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	// Попытаемся получить настройки криптографии.
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МенеджерКриптографии = ПолучитьМенеджерКриптографии();
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'обработка подтверждений ЭД'"), ТекстОшибки, ТекстСообщения);
			Возврат МассивВозврата;
		КонецПопытки;
	КонецЕсли;
	
	// Подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствие.Ключ, Истина);
			Если ФайлыПодписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			УникальныйИД = Неопределено;
			Если НЕ ЭлементСоответствие.Значение.Свойство("НомерЭДТИ", УникальныйИД) Тогда
				ЭлементСоответствие.Значение.Свойство("УникальныйИД", УникальныйИД);
			КонецЕсли;
			ЭлектронныйДокумент = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(
												УникальныйИД,
												НаправлениеИскомогоДокумента,
												,
												Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(ЭлементСоответствие.Значение) = Тип("Структура")
				И ЭлементСоответствие.Значение.Свойство("КодРегламента") И СтрДлина(УникальныйИД) = 36 Тогда
				ЭлектронныйДокумент = Справочники.СообщенияЭДО.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИД));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) ИЛИ ЭлектронныйДокумент.ПолучитьОбъект() = Неопределено
				ИЛИ ЭлектронныеДокументыСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			Если ВыполнятьКриптооперацииНаСервере Тогда
				// Определим сертификаты криптографии из подписи.
				СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
				Если СертификатыПодписи.Количество() <> 0 Тогда
					Сертификат = СертификатыПодписи[0];
					ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
					ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
																										Сертификат.Субъект);
					ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ЭлектронныйДокумент);
					Если ЗначениеЗаполнено(ФайлЭД) Тогда
						РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписиФайла(
							ФайлЭД,
							ДвоичныеДанныеПодписи,
							ОтпечатокBase64,
							ДатаУстановкиПодписи,
							"",
							ЭлементСоответствие.Ключ,
							ПредставлениеПользователя,
							Сертификат.Выгрузить());
					КонецЕсли;			
				КонецЕсли;
				ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			Иначе
				СтруктураЭДИДанныхПодписи = Новый Структура;
				СтруктураЭДИДанныхПодписи.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				СтруктураЭДИДанныхПодписи.Вставить("ДанныеПодписи",       ДвоичныеДанныеПодписи);
				МассивЭДИДанныхПодписей.Добавить(СтруктураЭДИДанныхПодписи);
			КонецЕсли;
			
			Попытка
				НачатьТранзакцию();
				
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолученоПодтверждение,
																		ЭлектронныйДокумент);
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
																						 
																						 
				ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Документ");
				Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
					ПроизвольныйЭДОбъект = ВладелецЭД.ПолучитьОбъект();
					ПроизвольныйЭДОбъект.СтатусДокумента = НовыйСтатусЭД;
					ПроизвольныйЭДОбъект.Записать();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ВладелецЭД;
			МассивВозврата.Добавить(ВладелецЭД);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтр");
	СтруктураАдреса.Вставить("АдрТекст");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//                Неопределено - есть организаций нет или несколько
//
Процедура ОпределитьОрганизацию(Организация) Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник."+НазваниеСправочникаОрганизации+" КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках системы включить опцию использования прямого взаимодействия с банками.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки системы.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращаемое значение - Число (количество обработанных документов)
Функция ОбработатьДвоичныеДанныеПакетаОператораЭДО(
				ПакетЭД,
				ДанныеРаспаковки,
				ПапкаДляРаспаковки,
				ЕстьКриптосредствоНаКлиенте,
				СоответствиеЭДИПодписей,
				СтруктураВозврата) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ОбработатьДвоичныеДанныеПакетаОператораЭДО(ПакетЭД,
																						ДанныеРаспаковки,
																						ПапкаДляРаспаковки,
																						ЕстьКриптосредствоНаКлиенте,
																						СоответствиеЭДИПодписей,
																						СтруктураВозврата);
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
конецПроцедуры

// Перед формированием служебных ЭД (извещений о получении ЭД), из массива ЭД удаляются
// те ЭД, для которых извещения формироваться не должны (например, при получении ТОРГ-12
// титул покупателя при обмене по регламенту 2.0).
//
// Параметры:
//  МассивЭД - Массив электронных документов, на основании которых должны быть сформированы извещения.
//
Процедура УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД) Экспорт
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВерсияРегламентаЭДО, ВидЭД");
	Для Каждого Элемент Из РеквизитыОбъектов Цикл
		Значение = Элемент.Значение;
		Если Значение.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			И (Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
			МассивЭД.Удалить(МассивЭД.Найти(Элемент.Ключ));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответсвие с данными о доступных сертификатах.
//
// Параметры:
//  <СоглашениеЭД> - СправочникСсылка.СоглашениеОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на элемент справочника СертификатыЭП, значение - двоичные данные сертификата
//
Функция ДоступныеСертификаты(СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка,
	|	СертификатыЭП.ФайлСертификата
	|ИЗ
	|	Справочник.СертификатыЭП КАК СертификатыЭП
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СертификатыЭП.ОграничитьДоступКСертификату
	|				ТОГДА СертификатыЭП.Пользователь = &ТекущийПользователь
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.Сертификат
	|			ИЗ
	|				Сертификаты)";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Результат = Запрос.Выполнить().Выбрать();
	ДанныеВозврата = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		ДанныеВозврата.Вставить(Результат.Ссылка, Результат.ФайлСертификата.Получить());
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

// только для внутреннего использования
Функция ПредставлениеИздателя(СтруктураДанных) Экспорт
	
	СтрокаВозврата = "";
	
	Для каждого Элемент ИЗ СтруктураДанных Цикл
		СтрокаВозврата = СтрокаВозврата + Элемент.ключ + "=" + Элемент.Значение + ", ";
	КонецЦикла;
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 2);
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  <ЭДСсылка>  - <СправочникСсылка.СообщенияЭДО> - ссылка на электронный документ
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено
//
Функция ПолучитьФайлПакетаСбербанка(ЭДСсылка, СоглашениеЭД) Экспорт

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ФайлПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("PayDocRu", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request,
												"requestId",
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД"),
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request,
												"orgId",
												ИдентификаторОрганизации,
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл  
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
														DigitalSign,
														"Issuer",
														ПредставлениеИздателя(ДанныеСертификата.Издатель),
														Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("StmtReqType", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"requestId",
													ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД"),
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request, "orgId",
													ИдентификаторОрганизации,
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "StmtReq",  ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru = 'Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
														DigitalSign,
														"Issuer",
														ПредставлениеИздателя(ДанныеСертификата.Издатель),
														Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN",    СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись,             Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ВызватьИсключение Нстр("ru='Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Request, ФайлПакета);
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлПакета);
		УдалитьФайлы(ФайлПакета);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета);
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = СсылкаНаХранилище;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ФайлПакета);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеФайла;

КонецФункции

// Записывает событие в журнал аудита
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ОписаниеСобытия>  - <строка> - текстовое описание события для отражения в журнале
//  <ТекстСообщения>  - <строка> - текст с данными
//
Процедура ЗаписатьСобытиеВЖурналАудита(СоглашениеЭД, ОписаниеСобытия, ТекстСообщения) Экспорт
		
	
КонецПроцедуры

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  <ЭД>  - <СправочникСсылка.СообщенияЭДО> - ссылка на электронный документ
 //  <СтатусЭД>  - <ПеречислениеСсылка.СтатусыЭД> - новый статус электронного документа
 //
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

// Сохраняет идентификаторы запросов для дальнейшего запроса статусов
//
// Параметры
//  <МассивИдентификаторов>  - <Массив> - массив полученных идентификаторов запросов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
Процедура СохранитьИдентификаторы(МассивИдентификаторов, СоглашениеЭД, ВидЭД) Экспорт
	
	
КонецПроцедуры

// Подготавливает текст запроса для получения ночной выписки
//
// Параметры
//  <ИдентификаторЗапроса>  - <строка> - уникальный идентификатор запроса
//  <ИдентификаторОрганизации>  - <строка> - уникальный идентификатор организации в банковской системе
//  <ЭП>  - <строка> - электронная подпись дайджеста
//  <СертификатПодписи>  - <СправочникСсылка.СертификатыЭП> - ссылка на сертификат установленной подписи
//
// Возвращаемое значение:
// <Строка> - текст запроса ночной выписки
//
Функция ТекстЗапросаНочнойВыписки(ИдентификаторЗапроса, ИдентификаторОрганизации, ЭП, СертификатПодписи) Экспорт

	Возврат "";
	
КонецФункции

// Получает массив идентификаторов для дальнейшего формирования запроса в банк 
//         
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - Вид электронного документа
//
Функция МассивИдентификаторовЗапроса(СоглашениеЭД, ВидЭД) Экспорт
	

КонецФункции

// Выполняет необходимые действия для фиксации в учете ответа банка
//
// Параметры
//  <МассивОтветов> - <Массив> - массив строк с ответами
//  <СоглашениеЭД> - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение
//  <ВидЭД> - <Перечисление.ВидыЭД> - вид электронного документа
//  <Идентификатор> - <Массив> - массив новых полученных ЭД
//  <Идентификатор> - <Строка> - идентификатор запроса, на который пришел ответ
//
Процедура ОбработатьОтветыСбербанка(
					МассивОтветов,
					СоглашениеЭД,
					ВидЭД,
					МассивНовыхЭД,
					Идентификатор = Неопределено) Экспорт

	
КонецПроцедуры

// Формирует соответствие установленных на ЭД подписей и данных сертификатов
//
// Параметры:
// ЭД - СправочникСсылка.СообщенияЭДО
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и строки данных сертификатов в формате BASE64
//
Функция ДанныеУстановленныхПодписейИСертификатов(ЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.Подпись,
		|	ЭП.Сертификат
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
		СтрокаЭП = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ПС, "");
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ВК, "");
		СтрокаСертификата = СертификатВФорматеBase64(Выборка.Сертификат);
		СоответствиеВозврата.Вставить(СтрокаЭП, СтрокаСертификата);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Подготавливает строку (дайджест) для дальнейшей подписи в формате Base64
//
// Параметры:
// ИмяФайла - Строка - путь к файлу данных
//
// Возвращаемое значение:
//Строка
//
Функция Дайджест(ИмяФайла, СоглашениеЭД) Экспорт
	
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
	Результат = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	

	ДанныеЗаполнения = Новый СписокЗначений;

	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
			+ Символ(10);
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерДокумента");
		ДанныеЗаполнения.Добавить(НомерДокумента, "AccDoc.AccDocNo");
		КодВидаВалютнойОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КодВидаВалютнойОперации");
		ДанныеЗаполнения.Добавить(КодВидаВалютнойОперации, "AccDoc.CodeVO");
		ДатаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДатаДокумента");
		ДанныеЗаполнения.Добавить(Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"), "AccDoc.DocDate");
		СуммаЧислом = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СуммаЧислом");
		ДанныеЗаполнения.Добавить(Формат(СуммаЧислом, "ЧДЦ=2; ЧРД=.; ЧГ="), "AccDoc.DocSum");
		ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВидПлатежа");
		ДанныеЗаполнения.Добавить(ВидПлатежа, "AccDoc.PaytKind");
		Очередность = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"Очередность");
		ДанныеЗаполнения.Добавить(Очередность, "AccDoc.Priority");
		НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"НазначениеПлатежа");
		ДанныеЗаполнения.Добавить(НазначениеПлатежа, "AccDoc.Purpose");
		ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВидОперации");
		ДанныеЗаполнения.Добавить(ВидОперации, "AccDoc.TransKind");
		ДополнительнаяУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДополнительнаяУслуга");
		ДанныеЗаполнения.Добавить(ДополнительнаяУслуга, "AccDoc.UrgentSBRF");
		НомерКредитногоДоговора = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерКредитногоДоговора");
		ДанныеЗаполнения.Добавить(НомерКредитногоДоговора, "Credit.CredConNum");
		ЦелевоеПоручение = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ЦелевоеПоручение");
		ДанныеЗаполнения.Добавить(ЦелевоеПоручение, "Credit.FlagTargetAssignment");
		ИспользоватьСобственныеСредства = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИспользоватьСобственныеСредства");
		ДанныеЗаполнения.Добавить(ИспользоватьСобственныеСредства, "Credit.FlagUseOwnMeans");
		ДанныеЗаполнения.Добавить(
			ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодБК"),
			"DepartmentalInfo.CBC");
		ПоказательДаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательДаты");
		ДанныеЗаполнения.Добавить(ПоказательДаты, "DepartmentalInfo.DocDate");
		ПоказательНомера = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательНомера");
		ДанныеЗаполнения.Добавить(ПоказательНомера, "DepartmentalInfo.DocNo");
		СтатусСоставителя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"СтатусСоставителя");
		ДанныеЗаполнения.Добавить(СтатусСоставителя, "DepartmentalInfo.DrawerStatus");
		КодОКАТО = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КодОКАТО");
		ДанныеЗаполнения.Добавить(КодОКАТО, "DepartmentalInfo.OKATO");
		ПоказательОснования = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательОснования");
		ДанныеЗаполнения.Добавить(ПоказательОснования, "DepartmentalInfo.PaytReason");
		ПоказательТипа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПоказательТипа");
		ДанныеЗаполнения.Добавить(ПоказательТипа, "DepartmentalInfo.TaxPaytKind");
		ПоказательПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ПоказательПериода");
		ДанныеЗаполнения.Добавить(ПоказательПериода, "DepartmentalInfo.TaxPeriod");
		НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПолучателя, "Payee.Bank.Name");
		НаселенныйПунктБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаселенныйПунктБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПолучателя, "Payee.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипНаселенногоПунктаБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПолучателя, "Payee.Bank.SettlementType");
		БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"БИКБанкаПолучателя");
		ДанныеЗаполнения.Добавить(БИКБанкаПолучателя, "Payee.Bank.Bic");
		СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СчетБанкаПолучателя");
		ДанныеЗаполнения.Добавить(СчетБанкаПолучателя, "Payee.Bank.CorrespAcc");
		ФилиалБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"ФилиалБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПолучателя, "Payee.Filial");
		ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ИННПолучателя");
		ДанныеЗаполнения.Добавить(ИННПолучателя, "Payee.INN");
		КПППолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"КПППолучателя");
		ДанныеЗаполнения.Добавить(КПППолучателя, "Payee.KPP");
		ТекстПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТекстПолучателя");
		ДанныеЗаполнения.Добавить(ТекстПолучателя, "Payee.Name");
		НомерСчетаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерСчетаПолучателя");
		ДанныеЗаполнения.Добавить(НомерСчетаПолучателя, "Payee.PersonalAcc");
		НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПлательщика, "Payer.Bank.Name");
		НаселенныйПунктБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаселенныйПунктБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПлательщика, "Payer.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипНаселенногоПунктаБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПлательщика, "Payer.Bank.SettlementType");
		БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"БИКБанкаПлательщика");
		ДанныеЗаполнения.Добавить(БИКБанкаПлательщика, "Payer.Bank.Bic");
		СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"СчетБанкаПлательщика");
		ДанныеЗаполнения.Добавить(СчетБанкаПлательщика, "Payer.Bank.CorrespAcc");
		ФилиалБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ФилиалБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПлательщика, "Payer.Filial");
		ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИННПлательщика");
		ДанныеЗаполнения.Добавить(ИННПлательщика, "Payer.INN");
		КПППлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КПППлательщика");
		ДанныеЗаполнения.Добавить(КПППлательщика, "Payer.KPP");
		ТекстПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТекстПлательщика");
		ДанныеЗаполнения.Добавить(ТекстПлательщика, "Payer.Name");
		НомерСчетаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"НомерСчетаПлательщика");
		ДанныеЗаполнения.Добавить(НомерСчетаПлательщика, "Payer.PersonalAcc");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
			+ Символ(10);
		ДатаНачалаПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ДатаНачалаПериода");
		ДанныеЗаполнения.Добавить(Формат(ДатаНачалаПериода, "ДФ=yyyy-MM-dd"), "BeginDate");
		ДатаОкончанияПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаОкончанияПериода");
		ДанныеЗаполнения.Добавить(Формат(ДатаОкончанияПериода, "ДФ=yyyy-MM-dd"), "EndDate");
		ТипЗапроса = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ТипЗапроса");
		ДанныеЗаполнения.Добавить(ТипЗапроса, "StmtType");
	ИначеЕсли ВидЭд = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS"
							+ Символ(10);
		УчетнаяЗапись = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"УчетнаяЗапись");
		ДанныеЗаполнения.Добавить(УчетнаяЗапись, "AccountName");
		Исполнитель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"Исполнитель");
		ДанныеЗаполнения.Добавить(Исполнитель, "Author");
		НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"РасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчета, "ComRests.Acc");
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаНачала");
		ДатаНачала = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаНачала, "ComRests.BeginDate");
		ДанныеЗаполнения.Добавить(
			ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БИК"),
			"ComRests.Bic");
		ДатаПредыдущейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаПредыдущейОперации");
		ДатаПредыдущейОперации = Формат(ДатаПредыдущейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПредыдущейОперации, "ComRests.DatePLast");
		ДатаОкончания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДатаКонца");
		ДатаОкончания = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОкончания, "ComRests.EndDate");
		ВходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НачальныйОстаток");
		ВходящийОстаток = Формат(ВходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстаток, "ComRests.EnterBal");
		ВходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВходящийОстатокВНациональнойВалюте");
		ВходящийОстатокВНациональнойВалюте = Формат(ВходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстатокВНациональнойВалюте, "ComRests.EnterBalNat");
		ДатаПоследнейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаОбъекта,
																											"ДатаПоследнейОперации");
		ДатаПоследнейОперации = Формат(ДатаПоследнейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоследнейОперации, "ComRests.LastMovetDate");
		ПлановыйИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПлановыйИсходящийОстаток");
		ПлановыйИсходящийОстаток = Формат(ПлановыйИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстаток, "ComRests.PlanOutBal");
		ПлановыйИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ПлановыйИсходящийОстатокВНациональнойВалюте");
		ПлановыйИсходящийОстатокВНациональнойВалюте = Формат(
															ПлановыйИсходящийОстатокВНациональнойВалюте,
															"ЧДЦ=3; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстатокВНациональнойВалюте, "ComRests.PlanOutBalNat");
		КурсНаНачалоПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КурсНаНачалоПериода");
		КурсНаНачалоПериода = Формат(КурсНаНачалоПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаНачалоПериода, "ComRests.RateIn");
		КурсНаКонецПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КурсНаКонецПериода");
		КурсНаКонецПериода = Формат(КурсНаКонецПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаКонецПериода, "ComRests.RateOut");
		ИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КонечныйОстаток");
		ИсходящийОстаток = Формат(ИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстаток, "ComRests.OutBal");
		ИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИсходящийОстатокВНациональнойВалюте");
		ИсходящийОстатокВНациональнойВалюте = Формат(ИсходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстатокВНациональнойВалюте, "ComRests.OutBalNat");
		ДатаСоставленияВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДатаСоставленияВыписки");
		ДатаСоставленияВыписки = Формат(ДатаСоставленияВыписки, "ДФ=yyyy-MM-ddTЧЧ:мм:сс");
		ДанныеЗаполнения.Добавить(ДатаСоставленияВыписки, "ComRests.StmtDateTime");
		ТипЗапросаВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаОбъекта,
																										"ТипЗапросаВыписки");
		ДанныеЗаполнения.Добавить(ТипЗапросаВыписки, "ComRests.StmtType");
		Кредит = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВсегоПоступило");
		Кредит = Формат(Кредит, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Кредит, "CreditSum");
		КредитВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"КредитВНациональнойВалюте");
		КредитВНациональнойВалюте = Формат(КредитВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(КредитВНациональнойВалюте, "CreditSumNat");
		ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ВсегоСписано");
		Дебет = Формат(ВсегоСписано, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Дебет, "DebetSum");
		ДебетВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ДебетВНациональнойВалюте");
		ДебетВНациональнойВалюте = Формат(ДебетВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ДебетВНациональнойВалюте, "DebetSumNat");
		ДопИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаОбъекта,
																									"ДопИнформация");
		ДанныеЗаполнения.Добавить(ДопИнформация, "DocComment");
		ИдентификаторВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"ИдентификаторВыписки");
		ДанныеЗаполнения.Добавить(ИдентификаторВыписки, "DocId");
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НомерДокумента");
		ДанныеЗаполнения.Добавить(НомерДокумента, "DocNum");
		НаименованиеОрганизации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаОбъекта,
																"НаименованиеОрганизации");
		ДанныеЗаполнения.Добавить(НаименованиеОрганизации, "OrgName");
	КонецЕсли;
	
	ВсегоЗаписей = ДанныеЗаполнения.Количество();
	Индекс = 0;
	Для каждого Элемент из ДанныеЗаполнения Цикл
		Индекс = Индекс + 1;
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				СтрокаВозврата= СтрокаВозврата + Элемент.Представление + "=" + Элемент.Значение
								+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЕсли;
	КонецЦикла;

	Если ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=Accounts" + Символ(10);
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			БИК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БИК");
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НомерСчета");
			СтрокаВозврата = СтрокаВозврата + "Bic=" + БИК + Символ(10) + "Account=" + НомерСчета + Символ(10)+ "#"
							+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Если ВсегоЗаписей > 0 Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=TransInfo" + Символ(10);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДатаСписания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаСписания");
			ДатаСписания = Формат(ДатаСписания, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаСписания, "BankDate.ChargeOffDate=");
			ДатаПеречисления = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПеречисления");
			ДатаПеречисления = Формат(ДатаПеречисления, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПеречисления, "BankDate.Dpp=");
			ДатаПостановкиВКартотеку = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПостановкиВКартотеку");
			ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПостановкиВКартотеку, "BankDate.FileDate=");
			ДатаОтметкиБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтметкиБанкаПолучателя");
			ДатаОтметкиБанкаПолучателя = Формат(ДатаОтметкиБанкаПолучателя, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаОтметкиБанкаПолучателя, "BankDate.RecDate=");
			ДатаПоступленияВБанкПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаПоступленияВБанкПлательщика");
			ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаПоступленияВБанкПлательщика, "BankDate.ReceiptDate=");
			ДатаОтметкиБанкомПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтметкиБанкомПлательщика");
			ДатаОтметкиБанкомПлательщика =  Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаОтметкиБанкомПлательщика, "BankDate.SignDate=");
			НомерДокументаБанка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Номер");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаБанка, "ComTransInfo.BankNumDoc=");
			КодПодразделения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"КодПодразделения");
			КодПодразделения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"КодПодразделения");
			ДанныеЗаполненияСтроки.Добавить(КодПодразделения, "ComTransInfo.BranchCode=");
			ДатаПроводки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаСписано");
			ДатаПроводки = Формат(ДатаПроводки, "ДФ=yyyy-MM-ddTЧЧ:мм:сс");
			ДанныеЗаполненияСтроки.Добавить(ДатаПроводки, "ComTransInfo.CarryDate=");
			ПризнакПриложения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаТЧ,
																											"ПризнакПриложения");
			ПризнакПриложения = Формат(ПризнакПриложения, "БЛ=0; БИ=1");
			ДанныеЗаполненияСтроки.Добавить(ПризнакПриложения, "ComTransInfo.Dc=");
			ВалютаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"ВалютаПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВалютаПлатежа, "ComTransInfo.DocCurr=");
			ДатаРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Дата");
			ДатаРасчетногоДокумента = Формат(ДатаРасчетногоДокумента, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаРасчетногоДокумента, "ComTransInfo.DocDate=");
			НомерРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерРасчетногоДокумента");
			ДанныеЗаполненияСтроки.Добавить(НомерРасчетногоДокумента, "ComTransInfo.DocNum=");
			СуммаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Сумма");
			СуммаДокумента = Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокумента, "ComTransInfo.DocSum=");
			СуммаДокументаВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СуммаДокументаВНациональнойВалюте");
			СуммаДокументаВНациональнойВалюте = Формат(СуммаДокументаВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокументаВНациональнойВалюте, "ComTransInfo.DocSumNat=");
			ОчередностьПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Очередность");
			ОчередностьПлатежа = Формат(ОчередностьПлатежа, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(ОчередностьПлатежа, "ComTransInfo.PaymentOrder=");
			ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВидПлатежа, "ComTransInfo.PaytKind=");
			НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																											СтрокаТЧ,
																											"НазначениеПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НазначениеПлатежа, "ComTransInfo.Purpose=");
			ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидОплаты");
			ДанныеЗаполненияСтроки.Добавить(ВидОперации, "ComTransInfo.TransKind=");
			ДопУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																									СтрокаТЧ,
																									"ДопУслуга");
			ДанныеЗаполненияСтроки.Добавить(ДопУслуга, "ComTransInfo.UrgentSBRF=");
			ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ИдентификаторДокумента");
			ДанныеЗаполненияСтроки.Добавить(ИдентификаторДокумента, "DocId=");
			НаименованиеПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Получатель");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПолучателя, "Payee.Name=");
			СчетПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПолучательСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПолучателя, "Payee.PayeeAcc=");
			ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"ПолучательИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПолучателя, "Payee.PayeeINN=");
			БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"БИКБанкаПолучателя");
			БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"БИКБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПолучателя, "PayeeBank.PayeeBankBic=");
			СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СчетБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПолучателя, "PayeeBank.PayeeBankCorrAcc=");
			НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НаименованиеБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПолучателя, "PayeeBank.PayeeBankName=");
			НаименованиеПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Плательщик1");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПлательщика, "Payer.Name=");
			СчетПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПлательщика, "Payer.PayerAcc=");
			ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПлательщика, "Payer.PayerINN=");
			БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"БИКБанкаПлательщика");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПлательщика, "PayerBank.PayerBankBic=");
			СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СчетБанкаПлательщика");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПлательщика, "PayerBank.PayerBankCorrAcc=");
			НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НаименованиеБанкаПлательщика");
																	
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПлательщика, "PayerBank.PayerBankName=");
			Переоценка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Переоценка");
			ДанныеЗаполненияСтроки.Добавить(Переоценка, "s_TI=");
			КодБюджетнойКлассификации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательКБК");
			ДанныеЗаполненияСтроки.Добавить(КодБюджетнойКлассификации, "DepartmentalInfo.Cbc=");
			ДатаНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательДаты");
			ДанныеЗаполненияСтроки.Добавить(ДатаНалоговогоДокумента, "DepartmentalInfo.DocDate=");
			НомерНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательНомера");
			ДанныеЗаполненияСтроки.Добавить(НомерНалоговогоДокумента, "DepartmentalInfo.DocNo=");
			ПоказательСтатусаНалогоплательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СтатусСоставителя");
			ДанныеЗаполненияСтроки.Добавить(ПоказательСтатусаНалогоплательщика, "DepartmentalInfo.DrawerStatus=");
			КПП102 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлательщикКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП102, "DepartmentalInfo.Kpp102=");
			КПП103 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПолучательКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП103, "DepartmentalInfo.Kpp103=");
			ДанныеЗаполненияСтроки.Добавить(
				ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодОКАТО"),
				"DepartmentalInfo.Okato=");
			ПоказательОснованияПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательОснования");
			ДанныеЗаполненияСтроки.Добавить(ПоказательОснованияПлатежа, "DepartmentalInfo.PaytReason=");
			ТипНалоговогоПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательТип");
			ДанныеЗаполненияСтроки.Добавить(ТипНалоговогоПлатежа, "DepartmentalInfo.TaxPaytKind=");
			НалоговыйПериод = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПоказательПериода");
			ДанныеЗаполненияСтроки.Добавить(НалоговыйПериод, "DepartmentalInfo.TaxPeriod=");
			ДатаДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДатаОтсылкиДок");
			ДатаДокументаКартотека = Формат(ДатаДокументаКартотека, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаДокументаКартотека, "DiffDoc.DocDateCard=");
			НомерДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаКартотека, "DiffDoc.DocNumberCard=");
			ШифрДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ШифрДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(ШифрДокументаКартотека, "DiffDoc.DocShifr=");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СрокАкцепта");
			СрокАкцепта = Формат(СрокАкцепта, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СрокАкцепта, "DiffDoc.LetterOfCreditAcceptDate=");
			ДополнительныеУсловияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДополнУсловия");
			ДанныеЗаполненияСтроки.Добавить(ДополнительныеУсловияАккредитива, "DiffDoc.LetterOfCreditAddCond=");
			ТребуемыеДокументы = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ПлатежПоПредст");
			ДанныеЗаполненияСтроки.Добавить(ТребуемыеДокументы, "DiffDoc.LetterOfCreditDemandDocs=");
			НомерСчетаПоставщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерСчетаПоставщика");
			ДанныеЗаполненияСтроки.Добавить(НомерСчетаПоставщика, "DiffDoc.LetterOfCreditPayAcc=");
			УсловияОплатыАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"Условие1");
			ДанныеЗаполненияСтроки.Добавить(УсловияОплатыАккредитива, "DiffDoc.LetterOfCreditPaymCond=");
			СрокДействияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СрокПлатежа");
			СрокДействияАккредитива = Формат(СрокДействияАккредитива, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(СрокДействияАккредитива, "DiffDoc.LetterOfCreditPeriodVal=");
			ВидАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ВидАккредитива");
			ДанныеЗаполненияСтроки.Добавить(ВидАккредитива, "DiffDoc.LetterOfCreditType=");
			НомерПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"НомерПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НомерПлатежа, "DiffDoc.NumPaymentCard=");
			СодержаниеОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СодержаниеОперации");
			ДанныеЗаполненияСтроки.Добавить(СодержаниеОперации, "DiffDoc.OperContent=");
			УсловиеОплаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
																										СтрокаТЧ,
																										"УсловиеОплаты");
			ДанныеЗаполненияСтроки.Добавить(УсловиеОплаты, "DiffDoc.PayingCondition=");
			СуммаОстаткаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"СуммаОстаткаПлатежа");
			Если НЕ СуммаОстаткаПлатежа = Неопределено Тогда
				СуммаОстаткаПлатежаСтрокой = Формат(СуммаОстаткаПлатежа, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
				ДанныеЗаполненияСтроки.Добавить(СуммаОстаткаПлатежаСтрокой, "DiffDoc.SumRestCard=");
			КонецЕсли;
			ДополнительнаяИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора,
																	СтрокаТЧ,
																	"ДополнительнаяИнформация");
			ДанныеЗаполненияСтроки.Добавить(ДополнительнаяИнформация, "Info=");
			Для каждого Элемент из ДанныеЗаполненияСтроки Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					СтрокаВозврата= СтрокаВозврата + Элемент.Представление + Элемент.Значение + Символ(10);
				КонецЕсли;
			КонецЦикла;
			СтрокаВозврата = СтрокаВозврата + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
		
	КонецЕсли;

		
	Возврат СтрокаBase64(СтрокаВозврата);
	
КонецФункции

// Возвращает строку подписанных данных в формате Base64
//
// Параметры
//  <ЭД> - <СправочникСсылка.СообщенияЭДО> - ссылка на электронный документ
//
// Возвращаемое значение:
//   <Строка>   - данные в формате base64
//
Функция ПодписанныеДанныеBase64(ЭД) Экспорт
	
	ХранилищеДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ПодписанныеДанные");
	ПодписываемыеДанные = ХранилищеДанных.Получить();
	Возврат Base64Строка(ПодписываемыеДанные);
	
КонецФункции

// Преобразует строку данных в формат Base64
//
// Параметры
//  <СтрокаДанных>  - <строка> - строка данных
//
// Возвращаемое значение:
//   <Строка>   - строка в формате base64
//
Функция СтрокаBase64(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5);
	УдалитьФайлы(ВремФайл);
	Возврат СтрокаФорматBase64;

КонецФункции

// Записывает событие в журнал регистрации
//
// Параметры
//  <ИмяСобытия> - <Строка> - Название события
//  <Уровень> - <Строка> - Уровень важности события, возможные значения: "Информация", "Ошибка", "Предупреждение", "Примечание"
//  <Данные> - <Произвольный> - Данные, с которыми связано событие
//  <Комментарий> - <Строка> - Произвольная строка комментария к событию.
//
Процедура ЗаписатьВЖурналРегистрации(ИмяСобытия, Уровень, Данные, Комментарий) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
	ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации[Уровень],
					ОбъектМетаданных,
					Данные,
					Комментарий);
	
КонецПроцедуры

// Сохраняет результат проверки валидности подписей
//
// Параметры
//  <ЭД>  - <СправочникСсылка.СообщенияЭДО> - электронный документ
//  <РезультатПроверки>  - <Массив> - содержит результаты проверки подписей по индексам
//
Процедура ЗафиксироватьРезультатПроверкиЭП(ЭД, РезультатПроверки) Экспорт

	ЭДОбъект = ЭД.ПолучитьОбъект();
	Для Каждого СтрокаПодписи Из ЭДОбъект.ЭлектронныеЦифровыеПодписи Цикл
		Если Не (РезультатПроверки[СтрокаПодписи.НомерСтроки - 1] = Неопределено) Тогда
			СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаПодписи.ПодписьВерна = РезультатПроверки[СтрокаПодписи.НомерСтроки - 1];
		КонецЕсли;
	КонецЦикла;
	ЭДОбъект.Записать();
	
КонецПроцедуры

// Возвращает массив, содержащий тесты запросов состояний платежных поручений на обработке
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение со Сбербанком
//
// Возвращаемое значение:
//   <Массив> - содержит тексты запросов
//
Функция МассивЗапросовСостоянийПлатежныхПоручений(СоглашениеЭД) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.УникальныйИДВнешний,
		|	СообщенияЭДО.СоглашениеЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО (СостоянияЭД.ЭлектронныйДокумент = СообщенияЭДО.Ссылка)
		|ГДЕ
		|	СообщенияЭДО.СоглашениеЭД = &СоглашениеЭД
		|	И СообщенияЭДО.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
		|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении))
		|	И НЕ СообщенияЭДО.УникальныйИДВнешний = """"
		|	И НЕ СообщенияЭДО.ПометкаУдаления
		|	И НЕ СообщенияЭДО.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВозврата;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
			ИдентификаторЗапроса = Новый УникальныйИдентификатор;
			ТекстОшибки = "";
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"requestId",
													Строка(ИдентификаторЗапроса),
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"orgId",
													Выборка.ИдентификаторОрганизации,
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			
			DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
			DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													DocId,
													"docid",
													Выборка.УникальныйИДВнешний,
													Истина,
													ТекстОшибки);
			DocIds.DocId.Добавить(DocId);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
			
			Request.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(Запись, Request);
			ТекстЗапроса = Запись.Закрыть();
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				МассивВозврата.Вставить(ТекстЗапроса);
			КонецЕсли;
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонСообщения,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбработатьИсключениеПоЭДНаСервере(
							НСтр("ru = 'Формирование запроса статуса платежного поручения'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
							ТекстСообщения);

		КонецПопытки
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает номер контейнера, к которому привязан сертификат в токене банка
//
// Параметры
//  <Сертификат>  - <СправочникСсылка.СертификатыЭП> - сертификат подписи
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение со Сбербанком
//
// Возвращаемое значение:
//   <Число> - Номер контейнера, если -1 - в соглашении не указан данный сертификат
//
Функция НомерКонтейнера(Сертификат, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.НомерКонтейнера
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат = &Сертификат
	|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД";
	запрос.УстановитьПараметр("Сертификат",   Сертификат);
	запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Возврат Результат.НомерКонтейнера;
	КонецЕсли;
	
	Возврат -1; //не заполнено табличное поле СертификатыНеобходимыхПодписей
	
КонецФункции

// Определяет сертификат подписи по соглашению и номеру контейнера
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение со Сбербанком
//  <НомерКонтейнера>  - <Число> - номер контейнера
//
// Возвращаемое значение:
//   <СправочникСсылка.СертификатыЭПЦ> или Неопределено - найденный сертификат
//
Функция СертификатИзСоглашенияЭД(СоглашениеЭД, НомерКонтейнера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|	И СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.НомерКонтейнера = &НомерКонтейнера";
	Запрос.УстановитьПараметр("СоглашениеЭД",    СоглашениеЭД);
	Запрос.УстановитьПараметр("НомерКонтейнера", НомерКонтейнера);
	результат = Запрос.Выполнить().Выбрать();
	Если результат.Следующий() Тогда
		Возврат Результат.Сертификат;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Формирует текст запроса состояния обработки отправленных ранее запросов выписки банка
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД, ссылка на соглашение с банком
//
// Возвращаемое значение:
//  Строка - текст для отправки в банк
//
Функция ТекстЗапросаСостоянияЗапросовВыпискиБанка(СоглашениеЭД) Экспорт
	
	МассивИдентификаторов = МассивИдентификаторовДокументовБанка(СоглашениеЭД);
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
		
	
	Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
	ИдентификаторЗапроса = Новый УникальныйИдентификатор;
	ТекстОшибки = "";
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"requestId",
											Строка(ИдентификаторЗапроса),
											Истина,
											ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
											Request,
											"orgId",
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации"),
											Истина,
											ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
		
	DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DocId, "docid", Идентификатор, Истина, ТекстОшибки);
		DocIds.DocId.Добавить(DocId);
	КонецЦикла;
		
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
		
	Request.Проверить();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Request);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Возвращает массив ссылок на сертификаты, которыми может подписан ЭД
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
// Возвращаемое значение:
//   <Массив>   - <Массив подходящих доступных сертификатов>
//
Функция ПолучитьДоступныеБанковскиеСертификаты(СоглашениеЭД, ВидЭД) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	СертификатыЭПВидыДокументов.Ссылка
	                |ИЗ
	                |	Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
	                |ГДЕ
	                |	СертификатыЭПВидыДокументов.Ссылка.Организация = &Организация
	                |	И СертификатыЭПВидыДокументов.ВидДокумента = &ВидЭД
	                |	И (СертификатыЭПВидыДокументов.Ссылка.Пользователь = &Пользователь
	                |			ИЛИ СертификатыЭПВидыДокументов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	                |	И СертификатыЭПВидыДокументов.Ссылка В(&СертификатыСоглашения)
	                |	И НЕ СертификатыЭПВидыДокументов.Ссылка.Отозван
	                |	И НЕ СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления
	                |	И СертификатыЭПВидыДокументов.ИспользоватьДляПодписи";
	Запрос.УстановитьПараметр("Организация",  СоглашениеЭД.Организация);
	Запрос.УстановитьПараметр("ВидЭД",        ВидЭД);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СертификатыСоглашения", СоглашениеЭД.СертификатыПодписейОрганизации.ВыгрузитьКолонку("Сертификат"));
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат.ВыгрузитьКолонку("Ссылка");

КонецФункции

//только для внутреннего использования
Процедура СформироватьЭДЗапросаВыписки(СоглашениеЭД, ДатаНачала, ДатаОкончания, ЭД) Экспорт
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	
	ЕстьОшибка = Ложь;
	ИдентификаторЗапроса="";
	
	ЭлектронныеДокументыВнутренний.СформироватьЗапросВыписки(
										СоглашениеЭД,
										ДатаНачала,
										ДатаОкончания,
										ИдентификаторЗапроса,
										ФайлЗапроса,
										ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлЗапроса);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ИмяФайла = "Запрос выписки за период с %1 по %2";
	ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФайла, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
	ВремяСозданияЭД = ТекущаяДатаСеанса();
	
	ЭД = ЭлектронныеДокументы.ДобавитьФайл(
									СоглашениеЭД,
									ИмяФайла,
									"xml",
									ВремяСозданияЭД,
									ВремяСозданияЭД,
									АдресФайла,
									Неопределено,
									,
									Справочники.СообщенияЭДО.ПолучитьСсылку());
	ДайджестBase64 = Дайджест(ФайлЗапроса, СоглашениеЭД);
	УдалитьФайлы(ФайлЗапроса);
	ПодписанныеДанные = Base64Значение(ДайджестBase64);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭд.ЗапросВыписки);
	СтруктураПараметров.Вставить("УникальныйИД", ИдентификаторЗапроса);
	СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ПодписанныеДанные", ПодписанныеДанные);
	СтруктураПараметров.Вставить("НаименованиеФайла", ИмяФайла);
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
	ЗаписьСостояния = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	ЗаписьСостояния.Период = ТекущаяДатаСеанса();
	ЗаписьСостояния.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	ЗаписьСостояния.СсылкаНаОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "Документ");
	ЗаписьСостояния.ЭлектронныйДокумент = ЭД;
	ЗаписьСостояния.Записать();
		
КонецПроцедуры

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  <ЭДСсылка>  - <СправочникСсылка.СообщенияЭДО> - ссылка на электронный документ
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено
//
Функция ПолучитьФайлПакетаБанка(ЭДСсылка, СоглашениеЭД) Экспорт

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ФайлПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
		 
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("PayDocRu", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request,
												"requestId",
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка,"УникальныйИД"),
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request,
												"orgId",
												ИдентификаторОрганизации,
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД, Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл  
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");	
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign","http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													DigitalSign,
													"Issuer",
													ПредставлениеИздателя(ДанныеСертификата.Издатель),
													Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("StmtReqType", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request, "requestId",
												ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭДСсылка,"УникальныйИД"),
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
												Request,
												"orgId",
												ИдентификаторОрганизации,
												Истина,
												ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "StmtReq", ЭД, Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеЦифровыеПодписи Цикл  
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписи(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");	
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign","http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													DigitalSign,
													"Issuer",
													ПредставлениеИздателя(ДанныеСертификата.Издатель),
													Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.СерийныйНомер);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ВызватьИсключение Нстр("ru='Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Request, ФайлПакета);
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлПакета);
		УдалитьФайлы(ФайлПакета);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета);
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = СсылкаНаХранилище;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ФайлПакета);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеФайла;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Получение реквизитов объектов

// только для внутреннего использования
Функция ИдентификаторОрганизации(СоглашениеЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
	
КонецФункции

// Возвращает ссылку на соглашение ЭД для переданного ЭД
//
// Параметры
//  <ЭД>  - <СправочникСсылка.СообщенияЭДО> - электронный документ
//
// Возвращаемое значение:
//   <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение ЭД
//
Функция СоглашениеЭД(ЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СоглашениеЭД");
	
КонецФункции

// См. эту функцию в модуле ЭлектронныеДокументыСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка
			|ИЗ
			|	Справочник.СообщенияЭДО КАК СообщенияЭДО
			|ГДЕ
			|	СообщенияЭДО.Родитель = &ЭлектронныйДокументВладелец
			|	И НЕ СообщенияЭДО.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		ВозвращаемоеЗначение = СтруктураВерсииЭД.СостояниеВерсииЭД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСНашейСтороны) ИЛИ ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Требуются действия'")+ " " + ТекстСНашейСтороны
				+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
				+ ТекстСоСтороныДругогоУчастника;
		ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
			И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Обмен завершен.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент)
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыЭП.Ссылка КАК Сертификат,
		|	ЭП.Отпечаток
		|ПОМЕСТИТЬ УстановленныеПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭП КАК СертификатыЭП
		|		ПО ЭП.Отпечаток = СертификатыЭП.Отпечаток
		|ГДЕ
		|	ЭП.Объект = &ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Соглашение
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат В
		|				(ВЫБРАТЬ
		|					УстПодп.Сертификат
		|				ИЗ
		|					УстановленныеПодписи КАК УстПодп)";
		
		Запрос.УстановитьПараметр("Соглашение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СоглашениеЭД"));
		Запрос.УстановитьПараметр("ЭД", ЭлектронныйДокумент);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		КонецЕсли;
	Иначе
		// Массив отпечатков всех установленных ЭП на ЭД
		МассивОтпечатковСертификатов = Новый Массив;
		ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ЭлектронныйДокумент);
		Если ЗначениеЗаполнено(ФайлЭД) Тогда
			ПодписиФайлаЭД = РаботаСЭП.ПолучитьЭлектронныеПодписи(ФайлЭД.ТекущаяВерсия);
			Пока ПодписиФайлаЭД.Следующий() Цикл
				МассивОтпечатковСертификатов.Добавить(ПодписиФайлаЭД.Отпечаток);
			КонецЦикла;
		КонецЕсли;
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	СертификатыЭПВидыДокументов.Ссылка КАК СертификатЭП
		|ИЗ
		|	Справочник.СертификатыЭП.ВидыДокументов КАК СертификатыЭПВидыДокументов
		|ГДЕ
		|	СертификатыЭПВидыДокументов.Ссылка.Организация = &Организация
		|	И СертификатыЭПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И СертификатыЭПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И СертификатыЭПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		|	И СертификатыЭПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, СоглашениеЭД");
	Пароль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты по соглашению %1.
						|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.СоглашениеЭД,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при отправке эл.документов по соглашению: %1, способ обмена: %2.
								|(подробности см. в Журнале регистрации).'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.СоглашениеЭД,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru = 'Отправка эл.документов'");
		ОбработатьИсключениеПоЭДНаСервере(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат "Обмен эл.документами: " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД)
	
	// Проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			
			НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																	Перечисления.СтатусыЭД.Утвержден,
																	ПрисоединенныйФайл);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
			СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	Если ТранзакцияАктивна() И ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И (ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
		
		Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		КонецЕсли;
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "Документ");
		ПараметрыЭД = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ВладелецФайла, , ВидЭД);
		
		Если ТипЗнч(ПараметрыЭД) = Тип("Структура") Тогда
			Результат = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
			
			Если Результат = Неопределено Тогда
				ОтменитьТранзакцию();
				ЭлектронныеДокументыСлужебный.СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, ВладелецФайла);
			Иначе
				Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
				ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
					НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
				КонецЕсли;
				
				Если НовыйЭД = Неопределено Тогда
					ОтменитьТранзакцию();
				Иначе
					МассивЭД = Новый Массив;
					МассивЭД.Добавить(НовыйЭД);
					
					НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(НовыйЭД);
					ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(МассивЭД, НастройкиОбмена.ИспользоватьПодпись);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И ВЫБОР
	|			КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|					ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	|					ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
	|				ТОГДА СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
	|						И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|						И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
	|			ИНАЧЕ НЕ(СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи))
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.СообщенияЭДО, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, СтатусЭД, НаправлениеЭД,
	|ВерсияРегламентаЭДО, СоглашениеЭД, Родитель");
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
		Если ПараметрыЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
		   И ПараметрыЭД.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыЭД.Родитель) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.СоглашениеЭД, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли
			
		Иначе
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			ВыбратьПодчиненныеЭД(МассивЭД, МассивПодчиненныхЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ НЕ СтруктураФлагов.ЭСФОтправлен ИЛИ СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (НЕ СтруктураФлагов.ПДППолучен ИЛИ НЕ СтруктураФлагов.ИПЭСФПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден И НЕ СтруктураФлагов.ИПЭСФОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ НЕ СтруктураФлагов.ПДОПолучен
					ИЛИ СтруктураФлагов.ИПЭСФОтправлен И НЕ СтруктураФлагов.ПДОИППолучен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная процедура, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Процедура ВыбратьПодчиненныеЭД(Знач МассивЭДВладельцев, МассивЭД)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Родитель В(&МассивЭДВладельцев)";
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивЭДВладельцев = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Эл Из МассивЭДВладельцев Цикл
			
			МассивЭД.Добавить(Эл);
			
		КонецЦикла;
		ВыбратьПодчиненныеЭД(МассивЭДВладельцев, МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

// Возвращает массив идентификаторов отправленных запросов выписки на которые не была получена выписка
//
// Параметры:
// СоглашениеЭД - СправочникСсылка.СоглашенияЭД
//
// Возвращаемое значение:
// Массив или Неопределено
//
Функция МассивИдентификаторовДокументовБанка(СоглашениеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.УникальныйИДВнешний КАК Идентификатор,
		|	СообщенияЭДО.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.СоглашениеЭД = &СоглашениеЭД
		|	И СообщенияЭДО.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
		|	И НЕ СообщенияЭДО.УникальныйИДВнешний = """"
		|	И СообщенияЭДО.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Доставлен)
		|	И НЕ СообщенияЭДО.ПометкаУдаления";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультата = РезультатЗапроса.Выгрузить();
	
	Возврат ТабРезультата.ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

Процедура СохранитьОтветБанка(ЭД, СоглашениеЭД, Идентификатор, ВидЭД, МассивНовыхЭД)
	
	
КонецПроцедуры

Процедура СохранитьВыпискуБанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД, ВладелецЭД = Неопределено)
	
	
КонецПроцедуры

Функция ВыпискаУжеБылаПолучена(СоглашениеЭД, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СообщенияЭДО.Ссылка
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.СоглашениеЭД = &СоглашениеЭД
		|	И СообщенияЭДО.УникальныйИДВнешний = &УникальныйИДВнешний";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("УникальныйИДВнешний", ВнешнийИдентификатор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СохранитьШтампыБанка(ВыпискаXDTO, СоглашениеЭД)
	
	МассивВнешнихИдентификаторов = Новый Массив;
	Для Каждого ПлатежноеПоручениеXDTO Из ВыпискаXDTO.Docs.TransInfo Цикл
		Если НЕ ПлатежноеПоручениеXDTO.docid = Неопределено Тогда
			МассивВнешнихИдентификаторов.Добавить(ПлатежноеПоручениеXDTO.docid);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВнешнихИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка КАК ЭДПлатежноеПоручение,
		|	СообщенияЭДО.УникальныйИДВнешний,
		|	СообщенияЭДО1.Ссылка КАК ЭДШтамп
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияЭДО КАК СообщенияЭДО1
		|		ПО СообщенияЭДО.Ссылка = СообщенияЭДО1.Родитель
		|ГДЕ
		|	СообщенияЭДО.УникальныйИДВнешний В(&МассивВнешнихИдентификаторов)
		|	И СообщенияЭДО.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		|	И СообщенияЭДО1.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ШтампБанка)";
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШтампXDTO = ВыпискаXDTO.InfoForStamp;
		ВремФайл = ПолучитьИмяВременногоФайла();
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ВыпискаXDTO, ВремФайл);
		ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
		ТекДата = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Выборка.ЭДШтамп) Тогда
			ЭДШтамп = ЭлектронныеДокументы.ДобавитьФайл(
									Выборка.ЭДПлатежноеПоручение,
									Нстр("ru = 'Штамп банка от'")+ " " + Формат(ТекДата, "ДЛФ=DDT"),
									"xml",
									ТекДата,
									ТекДата,
									СсылкаНаХранилище,
									,
									,
									Справочники.СообщенияЭДО.ПолучитьСсылку());
			УдалитьФайлы(ВремФайл);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СоглашениеЭД",                СоглашениеЭД);
			СтруктураПараметров.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ШтампБанка);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", Выборка.ЭДПлатежноеПоручение);
			СтруктураПараметров.Вставить("НаименованиеФайла",           Нстр("ru = 'Штамп банка от'")+ " " + Формат(ТекДата, "ДЛФ=DDT"));
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДШтамп, СтруктураПараметров, Ложь);
		Иначе
			ЭлектронныеДокументыСлужебный.ЗаписатьФайлВИнформационнуюБазу(Выборка.ЭДШтамп, ДвоичныеДанныеФайлаОтвета);
			ЭДШтамп = Выборка.ЭДШтамп;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку с содержимым сертификата в формате Base64
//
// Параметры
//  <СсылкаНаХранилище>  - <Строка> - ссылка на хранилище с двоичными данными сертификата
//
// Возвращаемое значение:
//   <Строка>   - Строка содержит данные сертификата в формате Base64
//
Функция СертификатВФорматеBase64(СсылкаНаХранилище)

	ДвоичныеДанныеСертификата = СсылкаНаХранилище.Получить();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	СтрокаBase64 = "-----BEGIN CERTIFICATE-----" + Символы.ПС + СтрокаBase64 + Символы.ПС + "-----END CERTIFICATE-----";

	Возврат СтрокаBase64;

КонецФункции // СертификатВФорматеBase64()

// Возвращает структуру данных сертификата
//
// Параметры:
// Отпечаток - отпечаток сертификата
//
// Возвращаемое значение:
// Структура, содержит данные сертификата
//
Функция ИнформацияОСертификатеПодписи(Отпечаток)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭП.ФайлСертификата
	|ИЗ
	|	Справочник.СертификатыЭП КАК СертификатыЭП
	|ГДЕ
	|	СертификатыЭП.Отпечаток = &Отпечаток";
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	ВыборкаСертификатов = Запрос.Выполнить().Выбрать();
	Если ВыборкаСертификатов.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		Сертификат = Новый СертификатКриптографии(ВыборкаСертификатов.ФайлСертификата.Получить());
		СтруктураВозврата.Вставить("Издатель",        Сертификат.Издатель);
		СтруктураВозврата.Вставить("СерийныйНомер",   Сертификат.СерийныйНомер);
		СтруктураВозврата.Вставить("ФайлСертификата", ВыборкаСертификатов.ФайлСертификата);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина - чтение данных пакета возможно, иначе - Ложь.
//
Функция ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД)
	
	ЧтениеПакетаВозможно = Истина;
	ЭлектронныеДокументыПереопределяемый.ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно);
	
	Возврат ЧтениеПакетаВозможно;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	ПредставленияПодписей = Новый Массив;
	НашлиДокумент = Ложь;
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ЧтениеХМЛ.Прочитать();
			СоответствиеВозврата.Вставить("Текст", ЧтениеХМЛ.Значение);
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПредставленияПодписей.Очистить();
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			УникальныйИД = "";
			НомерЭД = "";
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "УникальныйИД" Тогда
			ЧтениеХМЛ.Прочитать();
			УникальныйИД = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			НашлиДокумент = Ложь;
			НовыйМассив = ПредставленияПодписей;
			СтруктураПредставления = Новый Структура("Подписи, НомерЭД, УникальныйИД, КодРегламента",
				ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, УникальныйИД, "Nonformalized");
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, СтруктураПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД)
	
	ФайлДанныхОбработан = Ложь;
	Если ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() = 0 Тогда
			СоздатьКаталог(ПапкаДляРасшифровки);
		КонецЕсли;
			
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() > 0 Тогда
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			
			ФайлДанных = СтруктураДанных.ДвоичныеДанные;
			Расширение = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "");
			
			ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(Расширение);
			ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
			
			Если Найти(Расширение, "zip") > 0 И ЭтоПроизвольныйЭД <> Истина Тогда
				ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлРасшифрованногоАрхива);
				Попытка
					ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
					ФайлДанныхОбработан = Истина;
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРасшифровки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				КонецПопытки;
			Иначе
				ФайлДвоичныхДанных = Новый Файл(ФайлРасшифрованногоАрхива);
				КопироватьФайл(ФайлРасшифрованногоАрхива, ПапкаДляРасшифровки + ФайлДвоичныхДанных.Имя);
				ФайлДанныхОбработан = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФайлДанныхОбработан;
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|				И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПлатежИсполнен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|			ИЛИ &СчетФактура
	|			ИЛИ &ПлатежноеПоручение)";
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																	"СчетФактураВыданныйВМетаданных");
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
							Запрос.Текст,
							"&СчетФактура",
							"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник." + ИмяСчетаФактурыВыданного + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СчетФактура", "ЛОЖЬ");
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																	"ПлатежноеПоручениеВМетаданных");
	Если ИмяПлатежногоПоручения <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
							Запрос.Текст,
							"&ПлатежноеПоручение",
							"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник." + ИмяПлатежногоПоручения + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПлатежноеПоручение", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		
		Если Результат.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
				И Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				И Результат.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка Тогда
			ТекстСообщения = НСтр("ru = 'Обработка %1.
					|Для отправки электронного документа необходимо воспользоваться обработкой ""Обмен электронными документами с банком"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСоответствие(Приемник, Источник)
	
	Для Каждого Элемент ИЗ Источник Цикл
		Значение = Приемник.Получить(Элемент.Ключ);
		Если Значение = Неопределено Тогда
			Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Приемник[Элемент.Ключ], Элемент.Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("Документ", Конверт));
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ЭлектронныеДокументы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Только для внутреннего использования
Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь)
	
	ИмяФайлаДопДанных = Неопределено;
	ИмяФайлаДанных = ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДанных) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ИмяФайлаДопДанных = ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ИмяФайлаДопДанных) Тогда
			Возврат;
		КонецЕсли;
		ДопДанныеНаДиске = Новый Файл(ИмяФайлаДопДанных);
		Если НЕ ДопДанныеНаДиске.Существует() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"),
				ИмяФайлаДопДанных);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных);
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"),
			ИмяФайлаДанных);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",		СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ПолноеИмяФайла",	ИмяФайлаДанных);
	СтруктураПараметров.Вставить("НаправлениеЭД",	СсылкаНаЭД.НаправлениеЭД);
	
	Если ИмяФайлаДопДанных <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ИмяФайлаДопДанных);
	КонецЕсли;
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
	
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
		ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", СсылкаНаВладельца);
		Блокировка.Заблокировать();
	
		МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаВладельца;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.ЭлектронныйДокумент <> СсылкаНаЭД Тогда
			МенеджерЗаписи.ЭлектронныйДокумент = СсылкаНаЭД;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	
		ОбновитьВерсиюЭД(СсылкаНаЭД);
	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД)
	
	ИмяФайлаДанных = "";
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог( , СсылкаНаЭД.УникальныйИдентификатор());
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			ИмяФайлаДанных = ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаДанных;
	
КонецФункции

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте
//
// Параметры:
// ЭД - СправочникСсылка.СообщенияЭДО - ссылка на электронный документ.
// МассивРезультатов - массив - содержит данные проверки подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецПопытки;
	
	ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ПолучитьСообщениеОбОшибке("112");
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ФайлЭДТекущаяВерсия = ПолучитьТекущуюВерсиюПодчиненногоФайла(ТекДокумент);
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = СформироватьДанныеПодписи(МенеджерКриптографии, ФайлЭДТекущаяВерсия, ДвоичныеДанныеФайла,
					СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'установка подписи ЭП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
			ОпределитьСтатусыПодписей(ТекДокумент);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				УникальныйИдентификатор = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(НоваяПодписьДвоичныеДанные);
	ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
	
	ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ПодписываемыйОбъектСсылка);
	Если ЗначениеЗаполнено(ФайлЭД) Тогда
		РаботаСФайламиВызовСервера.ЗанестиИнформациюОПодписиФайла(
			ФайлЭД,
			НоваяПодписьДвоичныеДанные,
			Отпечаток,
			ДатаУстановкиПодписи,
			Комментарий,
			ИмяФайлаПодписи,
			КомуВыданСертификат,
			ДвоичныеДанныеСертификата,
			УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// Производить проверку сертификата на сервере.
//
// Параметры:
// Отпечаток - строка - отпечаток сертификата.
// Пароль - строка - пароль сертификата.
// ВыводитьТолькоОшибки - булево - указывает, что выводить нужно только сообщения об ошибках.
// Отказ - булево - истина - если произошла ошибка, иначе Ложь
//
Процедура ТестСертификатаНаСервере(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ, НастройкиКриптографии = Неопределено) Экспорт
				
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на сервере.'");
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ, НастройкиКриптографии);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("110");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на сервере.'");
	
	Сертификат = ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ПолучитьСообщениеОбОшибке("111");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("112");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифровывания.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на сервере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ПолучитьСообщениеОбОшибке("113");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭП на сервере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("114");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции с криптографией

// Создает на сервере менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь, НастройкиКриптографии = Неопределено) Экспорт
	
	Если НастройкиКриптографии = Неопределено Тогда
		
		ОбщиеНастройкиРаботыСЭП = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
		Если ОбщиеНастройкиРаботыСЭП.ПрофильНастроекКриптографии.Количество() = 0 Тогда
			ВызватьИсключение
				НСтр("ru = 'Не найден ни один профиль криптографии.
                      |Обратитесь к администратору.'");
		КонецЕсли;
		
		ПервыйПрофиль = ОбщиеНастройкиРаботыСЭП.ПрофильНастроекКриптографии[0];
		
		ПровайдерЭП = ПервыйПрофиль.ПровайдерЭП;
		ПутьМодуляКриптографии = ПервыйПрофиль.ПутьМодуляКриптографии;
		ТипПровайдераЭП = ПервыйПрофиль.ТипПровайдераЭП;
	
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭП, ПутьМодуляКриптографии, ТипПровайдераЭП);
		
		МенеджерКриптографии.АлгоритмПодписи = ПервыйПрофиль.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = ПервыйПрофиль.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = ПервыйПрофиль.АлгоритмШифрования;
		
	Иначе
		
		МенеджерКриптографии = Новый МенеджерКриптографии(
			НастройкиКриптографии.ПровайдерЭП,
			НастройкиКриптографии.ПутьМодуляКриптографии,
			НастройкиКриптографии.ТипПровайдераЭП);
		ЗаполнитьЗначенияСвойств(МенеджерКриптографии, НастройкиКриптографии);
			
	КонецЕсли;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Возвращает расшифрованные двоичные данные.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные, данные, которое необходимо зашифровать
//  Пароль - Строка, пароль для расшифровки
//
// Возвращаемое значение:
//  ДвоичныеДанные или неопределено - зашифрованные двоичные данные или Неопределено в случае ошибки.
//
Функция РасшифрованныеДанные(ДвоичныеДанные, Пароль) Экспорт
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	// Метод расшифровки генерирует исключение в случае ошибки.
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("113");
		ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'расшифровка пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭП
Функция СформироватьДанныеПодписи(
				МенеджерКриптографии,
				ОбъектДляПодписиСсылка,
				ДвоичныеДанные,
				СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
		
	Возврат ДанныеПодписи;
	
КонецФункции

// Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

// Проверяет наличие на сервере средств для работы с криптографией
//
// Возвращаемое значение:
//   Булево  - истина, если менеджер криптографии создан успешно
Функция ЕстьКриптосредстваНаСервере() Экспорт
	
	Отказ = Ложь;
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат НЕ Отказ;

КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение = НСтр("ru = 'Сертификат не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
															ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Преобразует двоичные данные в строку на сервере.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  <Строка> - Строка в кодировке UTF8
//
Функция СтрокаИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл, КодировкаТекста.UTF8);
		УдалитьФайлы(ВремФайл);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
		Возврат Результат;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

// Создает присоединенные файлы пакетов, зашифрованных на клиенте
//
// Параметры:
// СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам
// СоответствиеПаролейДляЭДО - Соответствие - данные о паролях
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		Если ПакетЭД.СоглашениеЭД.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия20 Тогда
			ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
								ПакетЭД,
								ЭлементПЭД.Значение[0].ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Иначе
			ЭлектронныеДокументыСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		КонецЕсли;
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера) Экспорт
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	Возврат ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Ложь)
	
КонецФункции

// Определяет, где нужно расшифровывать маркер оператора ЭДО.
//
// Возвращаемое значение:
//  Булево - Истина, если расшифровка происходит на сервере или Ложь - если на клиенте
//
Функция ВыполнятьАвторизациюНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстАвторизации.Получить() = Перечисления.КонтекстыРаботыСЭД.НаСервере;
	
КонецФункции

// Определяет, где нужно проводить крипто операции.
//
// Возвращаемое значение:
//  Булево - Истина, если криптография настроена на сервере или Ложь - если на клиенте
//
Функция ВыполнятьКриптооперацииНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстКриптографии.Получить() = Перечисления.КонтекстыРаботыСЭД.НаСервере;
	
КонецФункции

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере = Неопределено,
									 ВыполнятьАвторизациюНаСервере = Неопределено,
									 НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	ВыполнятьАвторизациюНаСервере = ВыполнятьАвторизациюНаСервере();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
КонецПроцедуры

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//  ЭД - СправочникСсылка.СообщенияЭДО, ссылка на электронный документ
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.Сертификат,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект = &ЭД";
	
	СтруктураВозврата = Новый Структура;
	ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ЭД);
	Если Не ЗначениеЗаполнено(ФайлЭД) Тогда
		СтруктураВозврата.Вставить("Подписи", Неопределено);
		Возврат СтруктураВозврата;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭД", ФайлЭД.ТекущаяВерсия);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	ДанныеЭД = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ЭД);
	Если Выборка.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ДанныеЭД", ДанныеЭД);
	КонецЕсли;
	СтруктураВозврата.Вставить("Подписи",  МассивПодписей);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает массив документов, которые могут быть проведены
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив документов, которые можно проводить
//
Функция МассивПроводимыхДокументов(МассивДокументов) Экспорт
	
	МассивПроводныхДокументов = Новый Массив;
	МассивТиповНеПроводныхДокументов = Новый Массив;
	Для каждого Элемент из МассивДокументов Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНеПроводныхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНеПроводныхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводныхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНеПроводногоДокумента Из МассивТиповНеПроводныхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводныхДокументов, ТипНеПроводногоДокумента);
	КонецЦикла;
	
	Возврат МассивПроводныхДокументов;
	
КонецФункции

// Возвращает массив проведенных документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = МассивПроводимыхДокументов(МассивДокументов);
	
	Для Каждого Документ ИЗ МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение значений реквизитов объектов

// Позволяет получить значения реквизитов соглашения об обмене ЭД.
//
// Параметры:
//  Соглашение - справочник-ссылка - ссылка на элемент справочника "Соглашение об обмене ЭД".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция ПрограммаБанка(СоглашениеЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПрограммаБанка");
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ИмяФайла, Организация, СертификатПодписи, ВидЭД)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Получим тег Подписант для обработки.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	ПодписантИП = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ИП");
	Если ПодписантИП.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантИП[0]);
	КонецЕсли;

	ПодписантЮЛ = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ЮЛ");
	Если ПодписантЮЛ.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантЮЛ[0]);
	КонецЕсли;
	
	// Разложим ФИО из сертификата.
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата   = ПараметрыСертификата.Фамилия;
	ИмяСертификата       = ПараметрыСертификата.Имя;
	ОтчествоСертификата  = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.ДолжностьПоСертификату) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.ДолжностьПоСертификату;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация);
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);

	ФИОПодписанта = ДокументDOM.СоздатьЭлемент("ФИО");
	
	ФИОПодписанта.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
	ФИОПодписанта.УстановитьАтрибут("Имя",      ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта.УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ИП");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ИП
		Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 12 Тогда
			ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННФЛ", ДанныеЮрФизЛица.ИНН);
		
		ДанныеСвидетельства = "";
		ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(Организация, ДанныеСвидетельства);
		ПодписантИПЮЛ.УстановитьАтрибут("СвГосРегИП", ДанныеСвидетельства);
	Иначе
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ЮЛ");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ЮЛ
		Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 10 Тогда
			ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННЮЛ", ДанныеЮрФизЛица.ИНН);
		ПодписантИПЮЛ.УстановитьАтрибут("Должн", ДолжностьПоСертификату);
	КонецЕсли;
	
	ПодписантИПЮЛ.ДобавитьДочерний(ФИОПодписанта);
	ПодписантDOM[0].ДобавитьДочерний(ПодписантИПЮЛ);
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		ОтпускГрузDOM = ДокументDOM.ПолучитьЭлементыПоИмени("ОтпускГруз");
		Если ОтпускГрузDOM.Количество() > 0 Тогда
			
			ОтпускРазрешил = ОтпускГрузDOM[0].ПолучитьЭлементыПоИмени("ОтпускРазреш");
			Если ОтпускРазрешил.Количество() > 0 Тогда
				ОтпускГрузDOM[0].УдалитьДочерний(ОтпускРазрешил[0]);
			КонецЕсли;
			ОтпускРазрешил = ДокументDOM.СоздатьЭлемент("ОтпускРазреш");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ОтпускРазрешил.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ОтпускРазрешил.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ОтпускГрузDOM[0].ДобавитьДочерний(ОтпускРазрешил);
		КонецЕсли;
	
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ПолучилГрузDOM = ДокументDOM.ПолучитьЭлементыПоИмени("ПолучилГруз");
		Если ПолучилГрузDOM.Количество() > 0 Тогда
			
			ГрузПолучил = ПолучилГрузDOM[0].ПолучитьЭлементыПоИмени("ГрузПолучил");
			Если ГрузПолучил.Количество() > 0 Тогда
				ПолучилГрузDOM[0].УдалитьДочерний(ГрузПолучил[0]);
			КонецЕсли;
			ГрузПолучил = ДокументDOM.СоздатьЭлемент("ГрузПолучил");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ГрузПолучил.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ГрузПолучил.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ПолучилГрузDOM[0].ДобавитьДочерний(ГрузПолучил);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СдалDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Сдал");
		Если СдалDOM.Количество() > 0 Тогда
			
			ПодписьИсполнителя = СдалDOM[0].ПолучитьЭлементыПоИмени("ПодписьИсполн");
			Если ПодписьИсполнителя.Количество() > 0 Тогда
				СдалDOM[0].УдалитьДочерний(ПодписьИсполнителя[0]);
			КонецЕсли;
			ПодписьИсполнителя = ДокументDOM.СоздатьЭлемент("ПодписьИсполн");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ПодписьИсполнителя.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ПодписьИсполнителя.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			СдалDOM[0].ДобавитьДочерний(ПодписьИсполнителя);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		
		ПринялDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Принял");
		Если ПринялDOM.Количество() > 0 Тогда
			
			ПодписьЗаказчика = ПринялDOM[0].ПолучитьЭлементыПоИмени("ПодписьЗаказ");
			Если ПодписьЗаказчика.Количество() > 0 Тогда
				ПринялDOM[0].УдалитьДочерний(ПодписьЗаказчика[0]);
			КонецЕсли;
			ПодписьЗаказчика = ДокументDOM.СоздатьЭлемент("ПодписьЗаказ");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ПодписьЗаказчика.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ПодписьЗаказчика.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ПринялDOM[0].ДобавитьДочерний(ПодписьЗаказчика);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписантаЭДCML_206(ИмяФайла, Организация, СертификатПодписи)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	КоммерческаяИнформацияDOM = ДокументDOM.ПолучитьЭлементыПоИмени("КоммерческаяИнформация");
	Если КоммерческаяИнформацияDOM.Количество() > 0 И КоммерческаяИнформацияDOM[0].ЕстьАтрибут("ВерсияСхемы") Тогда
		ВерсияСхемы = КоммерческаяИнформацияDOM[0].ПолучитьУзелАтрибута("ВерсияСхемы").ЗначениеУзла;
		
		// Получим тег Подписанты для обработки.
		ПодписантыDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписанты");
		Если ПодписантыDOM.Количество() > 0
			И ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2(), "CML", "")) Тогда
			
			//ПодписантыDOM = ДокументDOM.СоздатьЭлемент("Подписанты");
			Подписант = ПодписантыDOM[0].ПолучитьЭлементыПоИмени("Подписант");
			Если Подписант.Количество() > 0 Тогда
				ПодписантыDOM[0].УдалитьДочерний(Подписант[0]);
			КонецЕсли;
			Подписант = ДокументDOM.СоздатьЭлемент("Подписант");
			
			// Разложим ФИО из сертификата.
			ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
			ФамилияСертификата   = ПараметрыСертификата.Фамилия;
			ИмяСертификата       = ПараметрыСертификата.Имя;
			ОтчествоСертификата  = ПараметрыСертификата.Отчество;
			
			ДолжностьПоСертификату = "---";
			Если ЗначениеЗаполнено(ПараметрыСертификата.ДолжностьПоСертификату) Тогда
				ДолжностьПоСертификату = ПараметрыСертификата.ДолжностьПоСертификату;
			КонецЕсли;
			
			Фамилия = ДокументDOM.СоздатьЭлемент("Фамилия");
			ФамилияТекст = ДокументDOM.СоздатьТекстовыйУзел(ФамилияСертификата);
			Фамилия.ДобавитьДочерний(ФамилияТекст);
			Подписант.ДобавитьДочерний(Фамилия);
			
			Имя = ДокументDOM.СоздатьЭлемент("Имя");
			ИмяТекст = ДокументDOM.СоздатьТекстовыйУзел(ИмяСертификата);
			Имя.ДобавитьДочерний(ИмяТекст);
			Подписант.ДобавитьДочерний(Имя);
			
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				Отчество = ДокументDOM.СоздатьЭлемент("Отчество");
				ОтчествоТекст = ДокументDOM.СоздатьТекстовыйУзел(ОтчествоСертификата);
				Отчество.ДобавитьДочерний(ОтчествоТекст);
				Подписант.ДобавитьДочерний(Отчество);
			КонецЕсли;
			
			Если Не ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация) Тогда
				Должность = ДокументDOM.СоздатьЭлемент("Должность");
				ДолжностьТекст = ДокументDOM.СоздатьТекстовыйУзел(ДолжностьПоСертификату);
				Должность.ДобавитьДочерний(ДолжностьТекст);
				Подписант.ДобавитьДочерний(Должность);
			КонецЕсли;
			ПодписантыDOM[0].ДобавитьДочерний(Подписант);
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
			ЗаписьXML.Закрыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПодписантаСлужебныхЭД(ИмяФайла, Организация, СертификатПодписи)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи.
	ОбъектXML.Закрыть();
	
	// Определим наше пространство имен.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	// Разложим ФИО из сертификата.
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.ДолжностьПоСертификату) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.ДолжностьПоСертификату;
	КонецЕсли;
	
	ПодписантDOM[0].УстановитьАтрибут("Должность", ДолжностьПоСертификату);
	
	ФИОПодписанта = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ФИО");
	
	ФИОПодписанта[0].УстановитьАтрибут("Фамилия", ФамилияСертификата);
	ФИОПодписанта[0].УстановитьАтрибут("Имя",     ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта[0].УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПроверитьСрокДействияСертификата(Сертификат) Экспорт
	
	Если Не (ЗначениеЗаполнено(Сертификат) И ТипЗнч(Сертификат) = Тип("СправочникСписок.СертификатыЭП"))  Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСертификата = РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ТекущаяДатаСеанса();
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		Операция = Нстр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = Нстр("ru = 'Заканчивается срок действия сертификата %1
								|Необходимо получить новый'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(Сертификат));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД) Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СообщенияЭДО.Ссылка,
		|	СообщенияЭДО.Ответственный
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Ссылка В(&МассивЭД)
		|	И СообщенияЭДО.Ответственный <> &Ответственный");
	
	Запрос.УстановитьПараметр("МассивЭД",      МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	ОбщийТекстОшибки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось заблокировать электронный документ (%Объект%). %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	
		Попытка
			СтруктураПараметров = Новый Структура("Ответственный", НовыйОтветственный);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Выборка.Ссылка, СтруктураПараметров, Ложь);
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось выполнить запись электронного документа'") + " (%Объект%). %ОписаниеОшибки%'";
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Позволяет получить значения реквизитов сертификата ЭП.
//
// Параметры:
//  Сертификат ЭП - справочник-ссылка - ссылка на элемент справочника "Сертификаты ЭП".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция РеквизитыСертификата(СертификатЭП) Экспорт
	
	ПараметрыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатЭП,
		"ЗапомнитьПарольКСертификату, ПарольПользователя, Отозван, Отпечаток, ДатаОкончания, ОповещенОСрокеДействия,
		|Фамилия, Имя, Отчество, ДолжностьПоСертификату, Организация, Назначение, ФайлСертификата,
		|Наименование, Идентификатор, ОграничитьДоступКСертификату, Пользователь");
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата", ПараметрыСертификата.ФайлСертификата.Получить());
	
	// В БСП методах необходим параметр
	ПараметрыСертификата.Вставить("Комментарий", "");
	
	Если Не ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
		ПараметрыСертификата.ПарольПользователя = Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСертификата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// Только для внутреннего использования
Функция СформироватьСлужебныйЭД(СсылкаНаЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "НаправлениеЭД, Контрагент, ВидЭД, СтатусЭД,
					|УникальныйИД, СоглашениеЭД, ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, Документ, НомерЭД");
	
	ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
	
	Если ЭтоИзвещение Тогда
		// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
		Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
			
			Возврат "";
		КонецЕсли;

		Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
			ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ПараметрыЭД.ТипЭлементаВерсииЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	АдресВоВременномХранилище = "";
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ТекстУточнения);
	Если НЕ ЗначениеЗаполнено(СтруктураЭД)
		ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		Возврат "";
	КонецЕсли;
	ДатаСозданияФайла = ТекущаяДатаСеанса();
	Попытка
		НачатьТранзакцию();
		ДобавленныйФайл = ЭлектронныеДокументы.ДобавитьФайл(
													ПараметрыЭД.Документ,
													СтруктураЭД.ИдФайла,
													"xml",
													ДатаСозданияФайла,
													УниверсальноеВремя(ТекущаяДатаСеанса()),
													АдресВоВременномХранилище,
													Неопределено,
													,
													Справочники.СообщенияЭДО.ПолучитьСсылку());
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
		СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
		СтруктураПараметров.Вставить("ВидЭД",                       СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
		СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
		СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
		СтруктураПараметров.Вставить("Организация",                 СтруктураЭД.Отправитель);
		СтруктураПараметров.Вставить("Контрагент",                  СтруктураЭД.Получатель);
		СтруктураПараметров.Вставить("СоглашениеЭД",                ПараметрыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.Документ);
		СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
		СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
		Если ЭтоИзвещение Тогда
			ТипЭлементаВерсииЭД = ЭлектронныеДокументыВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
		Иначе
			Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			 ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			Иначе
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
			КонецЕсли;
		КонецЕсли;
		СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ДатаСозданияФайла);
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
		СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",         СсылкаНаЭД.ВерсияРегламентаЭДО);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
		
		Если ЭтоИзвещение И СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД", ПараметрыЭД.НаправлениеЭД);
			СтруктураПараметров.Вставить("ВидЭД",         ПараметрыЭД.ВидЭД);
			СтруктураПараметров.Вставить("Контрагент",    ПараметрыЭД.Контрагент);
			СтруктураПараметров.Вставить("СоглашениеЭД",  ПараметрыЭД.СоглашениеЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",    ПараметрыЭД.Документ);
			СтруктураПараметров.Вставить("СтатусЭД",      ПараметрыЭД.СтатусЭД);
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
//
// Параметры:
// МассивСсылокНаДокументы - массив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьПараметрыРаспаковки(Знач МассивСсылокНаДокументы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
		|	ПакетЭД.СоглашениеЭД.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	СообщенияЭДО.Ссылка,
		|	ПакетЭД.СтатусПакета
		|ИЗ
		|	Документ.ПакетЭД КАК ПакетЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияЭДО КАК СообщенияЭДО
		|		ПО (СообщенияЭДО.Документ = ПакетЭД.Ссылка)
		|ГДЕ
		|	ПакетЭД.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			
			ШаблонСообщения = Нстр("ru = 'Статус пакета %1 отличен от значения ""К распаковке"".");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext",
																		  ВыборкаПакеты.Ссылка.УникальныйИдентификатор());
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Прервать;
		КонецПопытки;

		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		ФайлИнформации      = Неопределено;
		ФайлКарточки        = Неопределено;
		
		Для Каждого ТекФайл Из ФайлыАрхива Цикл
			Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
				ФайлИнформации = ТекФайл;
				Прервать;
			ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
				ФайлКарточки = ТекФайл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРаспаковки = Новый Структура;
		СтруктураРаспаковки.Вставить("ПакетЭД", ВыборкаПакеты.СсылкаНаДокумент);
		
		Если ФайлИнформации <> Неопределено Тогда
			
			ЧтениеХМЛ = Новый ЧтениеXML;
			ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
			НашлиШифрование = Ложь;
			Документ = Неопределено;
			Зашифрован = Ложь;
			Сертификат = "";
			Пока ЧтениеХМЛ.Прочитать() Цикл
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
					НашлиШифрование = Истина;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
					ЧтениеХМЛ.Прочитать();
					Документ = ЧтениеХМЛ.Значение;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
					ЧтениеХМЛ.Прочитать();
					Зашифрован = Булево(ЧтениеХМЛ.Значение);
					Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
					ЧтениеХМЛ.Прочитать();
					Сертификат = ЧтениеХМЛ.Значение;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
					
					Если Зашифрован Тогда
						СтруктураШифрования = Новый Структура;
						СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия10);
						
						Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
							СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
							СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
								ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
						Иначе
							ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
							Продолжить;
						КонецЕсли;
						
						СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
					КонецЕсли;
					
					Документ = Неопределено;
					Зашифрован = Ложь;
					Сертификат = "";
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			ЧтениеХМЛ.Закрыть();
		КонецЕсли;
		
		Если ФайлКарточки <> Неопределено Тогда
			
			ОбъектXML = Новый ЧтениеXML;
			
			Попытка
				ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
				ОбъектXML.Закрыть();
			Если ЭД.Description <> Неопределено
				И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
				И ЭД.Description.AdditionalData <> Неопределено
				И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
				И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
					
					Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
						Если Свойство.Name = "Зашифрован" И Булево(Свойство.Value) Тогда
							
							СтруктураШифрования = Новый Структура;
							СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия20);
							
							Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
								СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
								СтруктураШифрования.Вставить("ПараметрыСертификата", ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
									ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
							Иначе
								ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
								Продолжить;
							КонецЕсли;
							
							СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Исключение
				ОбъектXML.Закрыть();
				
				ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ФайлАрхива);
		
		МассивВозврата.Добавить(СтруктураРаспаковки);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Меняет статус и состояние исполненных платежных поручений по выписке банка
//
// Параметры:
//  ЭДВыписка - СправочникСсылка.СообщенияЭДО - электронный документ выписки банка,
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач ЭДВыписка) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(ЭДВыписка);
	
	Если МассивВнешнихИдентификаторов.Количество()>0 Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СообщенияЭДО.Ссылка
			|ИЗ
			|	Справочник.СообщенияЭДО КАК СообщенияЭДО
			|ГДЕ
			|	СообщенияЭДО.УникальныйИДВнешний В (&МассивИдентификаторов)
			|	И СообщенияЭДО.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
			|	И СообщенияЭДО.СоглашениеЭД = &СоглашениеЭД";
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
		Запрос.УстановитьПараметр("СоглашениеЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВыписка, "СоглашениеЭД"));
		ТабЭД = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаЭД ИЗ ТабЭД Цикл
			СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СтрокаЭД.Ссылка, СтруктураПараметров, Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

// Только для внутреннего использования
Функция МассивИдентификаторовВыпискиБанка(ЭДВыписка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
		
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДВыписка);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, Неопределено);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		МассивСчетов = Новый Массив;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																			ДеревоРазбора,
																			СтрокаБанковскийСчет,
																			"БанковскийСчет.НомерСчета");
			МассивСчетов.Добавить(НомерСчета);
		КонецЦикла;
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
				
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ТекНомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ПлательщикСчет");
			
			ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
			Если ЭтоИсходящийПлатеж Тогда
				ИДВнешний = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																							ДеревоРазбора,
																							СтрокаТЧ,
																							"ИдПлатежа");
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции

// Перемещает элементы из МассивЭД, которые относятся к обмену с банком и требуют специфической обработки
//в МассивЭДБанка
//
// Параметры:
// МассивЭД - Массив - содержит ссылки на электронные документы
// ДанныеДляСпецОбработки - Соответствие - содержит массивы ЭД банков для специальной обработки
//
Процедура ОтделитьЭДДляСпециальнойОбработки(МассивЭД, ДанныеДляСпецОбработки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Ссылка В(&МассивЭД)
		|	И НЕ(СообщенияЭДО.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И (СообщенияЭДО.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|					ИЛИ СообщенияЭДО.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщенияЭДО.Ссылка КАК ЭД,
		|	СообщенияЭДО.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Ссылка В(&МассивЭД)
		|	И СообщенияЭДО.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|	И (СообщенияЭДО.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|			ИЛИ СообщенияЭДО.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2))
		|ИТОГИ ПО
		|	ПрограммаБанка";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивЭД = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ЭД");
	ВыборкаПрограммБанка = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеДляСпецОбработки = Новый Соответствие;
	Пока ВыборкаПрограммБанка.Следующий() Цикл
		МассивСпецЭД = Новый Массив;
		ВыборкаСпецЭД = ВыборкаПрограммБанка.Выбрать();
		Пока ВыборкаСпецЭД.Следующий() Цикл
			МассивСпецЭД.Добавить(ВыборкаСпецЭД.ЭД);
		КонецЦикла;
		ДанныеДляСпецОбработки.Вставить(ВыборкаПрограммБанка.ПрограммаБанка, МассивСпецЭД);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеПодписей(СсылкаНаОбъект)
	
	МассивВозврата = Новый Массив;
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭП.Подпись КАК Подпись,
	               |	ЭП.Сертификат
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеПодписи КАК ЭП
	               |ГДЕ
	               |	ЭП.Объект = &СсылкаНаОбъект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Файлы") Тогда
		Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект.ТекущаяВерсия);
	Иначе
		Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	КонецЕсли;
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
		СтруктураВозврата = Новый Структура("АдресПодписи, Сертификат", АдресПодписи, ДанныеСертификата);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// iBank

// Формирует соответствие данных для обработки на клиенте
//
// Параметры
//  <МассивЭД>  - <Массив> - массив электронных документов
//  <Сертификат> - <СправочникСсылка.СертификатыЭП> - сертификат подписи
//  <СлужебныеДанные> - Соответствие - возращаемые данные для обработки на клиенте
//
Процедура ПодготовитьДанныеДляОбработкиiBank2(Знач МассивЭД, Знач Сертификат, СлужебныеДанные) Экспорт
	
	СлужебныеДанные = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СообщенияЭДО.СоглашениеЭД.Обработка КАК Обработка,
		|	СообщенияЭДО.СоглашениеЭД КАК СоглашениеЭД,
		|	СообщенияЭДО.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.СообщенияЭДО КАК СообщенияЭДО
		|ГДЕ
		|	СообщенияЭДО.Ссылка В(&МассивЭД)
		|ИТОГИ ПО
		|	СоглашениеЭД";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	ВыборкаСоглашений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ФайлСертификата");
	СсылкаНаДанныеСертификата = ПоместитьВоВременноеХранилище(ДанныеСертификата.Получить());
	
	Пока ВыборкаСоглашений.Следующий() Цикл
		ВыборкаЭД = ВыборкаСоглашений.Выбрать();
		ТекМассив = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			ТекМассив.Добавить(ВыборкаЭД.ЭД);
		КонецЦикла;
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ВыборкаСоглашений.Обработка, "ХранилищеОбработки");
		ИмяОбработки = ВнешниеОбработки.Подключить(НавигационнаяСсылка);
		Ключ = Новый Структура(
						"Соглашение, ИмяОбработки, СсылкаНаДанныеСертификата",
						ВыборкаСоглашений.СоглашениеЭД,
						ИмяОбработки,
						СсылкаНаДанныеСертификата);
		СлужебныеДанные.Вставить(Ключ, ТекМассив);
	КонецЦикла;
	
КонецПроцедуры

// Получает структуру данных электронных документов для последующего формирования ЭП
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы
//
// Возвращаемое значение:
// Структура, содержит данные для обработки на клиенте
//
Функция ДанныеДляФормированияЭПiBank2(Знач МассивЭД) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивЭДБезСхем",         Новый Массив);
	СтруктураВозврата.Вставить("МассивЭДСоСхемами",       Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем",        Новый Массив);
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Для Каждого ЭД Из МассивЭД Цикл
		ЭДСхема = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
		Если ЗначениеЗаполнено(ЭДСхема) Тогда
			СтруктураВозврата.МассивЭДСоСхемами.Добавить(ЭД);
			ДвоичныеДанные = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ЭДСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивЭДБезСхем.Добавить(ЭД);
			ДвоичныеДанные = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ЭД);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
		
	УдалитьФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет схемы данных электронных документов
//
// Параметры
//  <МассивЭД>  - <Массив> - содержит ссылки на ЭД
//  <МассивСхемДанных>  - <Массив> - содержит текстовые данные ЭД
//
Процедура СохранитьСхемыДанныхiBank2(Знач МассивЭД, Знач МассивСхемДанных) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Индекс = 0;
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивЭД[Индекс], "Документ");
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		ДопФайл = ЭлектронныеДокументы.ДобавитьФайл(
						ВладелецФайла,
						"СхемаДанных",
						,
						,
						,
						АдресХранилища,
						,
						,
						Справочники.СообщенияЭДО.ПолучитьСсылку());
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
		ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", МассивЭД[Индекс]);
		ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		
	КонецЦикла;
	
	УдалитьФайлы(ВремФайл);

КонецПроцедуры

// Сохраняет подписи электронного документа
//
// Параметры
//  <МассивЭД>  - <Массив> - содержит массив ЭД
//  <МассивПодписей>  - <Массив> - содержит массив данных подписей
//  <Сертификат> - <СправочникСсылка.СертификатыЭП> - ссылка на сертификат подписи
//
Процедура СохранитьДанныеПодписейiBank2(Знач МассивЭД, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Сертификат,
								"Отпечаток, ФайлСертификата, Назначение");
	ЧастиНазначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
																		РеквизитыСертификата.Назначение,
																		Символы.ПС);
	СтрокаВладелец = ЧастиНазначения[0];
	СтрокаВладелец = СтрЗаменить(СтрокаВладелец, "Владелец: ", "");
	
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", МассивПодписей[Индекс]);
		ДанныеПодписи.Вставить("Отпечаток",                  РеквизитыСертификата.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДатаСеанса());
		ДанныеПодписи.Вставить("Комментарий",                "");
		ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
		ДанныеПодписи.Вставить("КомуВыданСертификат",        СтрокаВладелец);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата",  РеквизитыСертификата.ФайлСертификата.Получить());
		ДобавитьПодпись(МассивЭД[Индекс], ДанныеПодписи);
	КонецЦикла

КонецПроцедуры

// Производит подключение внешней обработки iBank2
//
// Параметры
//  <ТекущаяВерсия>  - <Строка> - текущая версия уже подключенной обработки - для исключения повторного подключения
//  <ТекущаяВерсия>  - <Строка> - новая версия обработки, возвращается версия подключенной обработки
//
Функция ПодключитьВнешнююОбработкуiBank2(Знач ТекущаяВерсия = Неопределено, НоваяВерсия = Неопределено) Экспорт

	ОбработкаПодключена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеОтчетыИОбработки.Ссылка,
	|	ДополнительныеОтчетыИОбработки.Версия
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.ИмяОбъекта = ""iBank2""
	|	И ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Если ТекущаяВерсия = Результат.Версия Тогда
			НоваяВерсия = ТекущаяВерсия;
		Иначе
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат.Ссылка, "ХранилищеОбработки");
			ВнешниеОбработки.Подключить(НавигационнаяСсылка);
			НоваяВерсия = Результат.Версия;
		КонецЕсли;
		ОбработкаПодключена = Истина;
	КонецЕсли;
	
	Если Не ОбработкаПодключена Тогда
		ТекстСообщения = Нстр("ru = 'Не найдена внешняя обработка iBank2.
									|Необходимо добавить обработку в справочник ""Дополнительные отчеты и обработки""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ОбработкаПодключена;
	
КонецФункции

// Обработывает ответ банка на отправку платежных документов
//
// Параметры
//  <ПакетыЭД>  Сответствие - в ключе ссылка на документ ПакетЭД
//  <ДанныеОтвета>  - <Соответствие> - данные ответа банка
//  <КоличествоОтправленных>  - <Число> - Количество отправленных пакетов
//
Процедура ОбработатьОтветiBank2(Знач ПакетыЭД, Знач ДанныеОтвета, КоличествоОтправленных) Экспорт
	
	Для Каждого Ответ ИЗ ДанныеОтвета Цикл
		
		Попытка
			НачатьТранзакцию();
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
				Если Ответ.Значение.Статус = "30" Тогда
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
				Иначе
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				СтруктураПараметров.Вставить("УникальныйИДВнешний", Ответ.Значение.Идентификатор);
				КоличествоОтправленных = КоличествоОтправленных + 1;
			Иначе
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
				СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
			КонецЕсли;
			ЭД = Справочники.СообщенияЭДО.ПолучитьСсылку(Ответ.Ключ);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Элемент Из ПакетыЭД Цикл
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(Элемент.Ключ,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса);
	КонецЦикла;

КонецПроцедуры

Функция ОтпечатокBase64iBank2(Знач Отпечаток) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Отпечаток);
	ТекстовыйДокумент.Записать(ВремФайл);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаBase64 = Base64Строка(ДвоичныеДанные);
	УдалитьФайлы(ВремФайл);
	Возврат СтрокаBase64;
	
КонецФункции

Функция ДанныеДляОтправкиВiBank2(ПакетыЭД = Неопределено)
	
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.СоглашениеЭД
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.СоглашениеЭД.ПометкаУдаления
	|	И ПакетЭД.СоглашениеЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И ПакетЭД.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2)
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.ЭлектронныеДокументы.(
	|		ЭлектронныйДокумент,
	|		ЭлектронныйДокумент.ВидЭД
	|	),
	|	ПакетЭД.СоглашениеЭД
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.Сертификат
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.СоглашениеЭД
	|			ИЗ
	|				Пакеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка,
	|	СертификатыЭП.ФайлСертификата,
	|	СертификатыЭП.ЗапомнитьПарольКСертификату,
	|	ВЫБОР
	|		КОГДА СертификатыЭП.ЗапомнитьПарольКСертификату
	|			ТОГДА СертификатыЭП.ПарольПользователя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПарольПользователя
	|ИЗ
	|	Справочник.СертификатыЭП КАК СертификатыЭП
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СертификатыЭП.ОграничитьДоступКСертификату
	|				ТОГДА СертификатыЭП.Пользователь = &ТекущийПользователь
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.Сертификат
	|			ИЗ
	|				Сертификаты)";
	Если НЕ ПакетыЭД = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", ПакетыЭД);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаПакеты = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.ЭлектронныеДокументы.Выбрать();
		СтруктураДанных = Новый Структура;
		Пока ВыборкаЭД.Следующий() Цикл
			ДанныеЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент, Новый УникальныйИдентификатор);
			Если ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
				ДвоичныеДанные.Записать(ВремФайл);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ВремФайл);
				СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
				СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
				СтруктураДанных.Вставить("Ключ",               ВыборкаЭД.ЭлектронныйДокумент.УникальныйИдентификатор());
				Подписи = ДанныеПодписей(ВыборкаЭД.ЭлектронныйДокумент);
				МассивПодписей = Новый Массив;
				Для Каждого ДанныеПодписи ИЗ Подписи Цикл
					СтруктураДанныхПодписи = Новый Структура;
					СтруктураДанныхПодписи.Вставить("АдресПодписи", ДанныеПодписи.АдресПодписи);
					СтруктураДанныхПодписи.Вставить("Сертификат",   ДанныеПодписи.Сертификат);
					МассивПодписей.Добавить(СтруктураДанныхПодписи);
				КонецЦикла;
				СтруктураДанных.Вставить("Подписи", МассивПодписей);
			ИначеЕсли ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ДопДанные Тогда
				СтруктураДанных.Вставить("СлужебныеДанные", ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
			КонецЕсли;
		КонецЦикла;
		ДанныеВозврата.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
	КонецЦикла;
	
	Сертификаты = Новый Массив;
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать();
	Пока ВыборкаСертификатов.Следующий() Цикл
		ДанныеСертификата = Новый Структура();
		ДанныеСертификата.Вставить("СертификатСсылка",            ВыборкаСертификатов.Ссылка);
		ДанныеСертификата.Вставить("ПарольПользователя",          ВыборкаСертификатов.ПарольПользователя);
		ДанныеСертификата.Вставить("ФайлСертификата",             ВыборкаСертификатов.ФайлСертификата.Получить());
		ДанныеСертификата.Вставить("ЗапомнитьПарольКСертификату", ВыборкаСертификатов.ЗапомнитьПарольКСертификату);
		Сертификаты.Добавить(ДанныеСертификата);
	КонецЦикла;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Сертификаты", Сертификаты);
	СтруктураВозврата.Вставить("ПакетыЭД", ДанныеВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// См. эту процедуру в модуле ЭлектронныеДокументы.
Процедура ЗанестиИнформациюОднойПодписи(Знач ПрисоединенныйФайл, Знач ДанныеПодписи) Экспорт
	
	ЭлектронныеДокументы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
	
КонецПроцедуры

// См. эту функцию в модуле ЭлектронныеДокументы.
Функция ДобавитьФайл(Знач ВладелецФайла,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "") Экспорт
	
	Возврат ЭлектронныеДокументы.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		РасширениеБезТочки,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		Описание);
	
КонецФункции

// См. эту функцию в модуле ЭлектронныеДокументы.
Функция ПолучитьТекущуюВерсиюПодчиненногоФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ПрисоединенныйФайл);
	Если ТипЗнч(ФайлЭД) = Тип("СправочникСсылка.Файлы") Тогда
		Возврат ФайлЭД.ТекущаяВерсия;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// См. эту процедуру в модуле ЭлектронныеДокументыСлужебный.
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ЗашифрованныеДанные, Знач МассивОтпечатков) Экспорт
	
	ЭлектронныеДокументыСлужебный.Зашифровать(
		ПрисоединенныйФайл, ЗашифрованныеДанные, МассивОтпечатков);
	
КонецПроцедуры

// См. эту процедуру в модуле ЭлектронныеДокументыСлужебный.
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач РасшифрованныеДанные) Экспорт
	
	ЭлектронныеДокументыСлужебный.Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные);
	
КонецПроцедуры

// Получает все подписи файла.
//
// Подробнее - см. описание ЭлектроннаяПодпись.ПолучитьВсеПодписи().
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	Возврат ЭлектроннаяПодпись.ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор);
	
КонецФункции

Процедура ДобавитьВоВходящиеДокументыФайлыЭДИЭП(МассивДобавленныхФайлов) Экспорт
	
	Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
		Если ТипЗнч(ДобавленныйФайл.Документ) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ФайлЭД = ЭлектронныеДокументы.ПолучитьПодчиненныйФайл(ДобавленныйФайл);
			// копируем файл
			ФайлВходящегоДокумента = РаботаСФайламиВызовСервера.СкопироватьФайл(ФайлЭД, ДобавленныйФайл.Документ);
			ФайлВходящегоДокументаОбъект = ФайлВходящегоДокумента.ПолучитьОбъект();
			ФайлВходящегоДокументаОбъект.ПодписанЭП = Ложь;
			ФайлВходящегоДокументаОбъект.Наименование = Строка(ДобавленныйФайл.ТипЭлементаВерсииЭД);
			ФайлВходящегоДокументаОбъект.Записать();
			// копируем подписи к файлу
			//РаботаСЭП.СкопироватьВсеПодписи(ФайлЭД.ТекущаяВерсия, ФайлВходящегоДокумента.ТекущаяВерсия);
			// генерируем табличный документ и прикрепляем к входящему документу
			//Попытка
			//	ДвоичныеДанные = ЭлектронныеДокументы.ПолучитьДвоичныеДанныеФайла(ДобавленныйФайл);
			//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			//	ДвоичныеДанные.Записать(ИмяВременногоФайла);
			//	ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(
			//		ИмяВременногоФайла,
			//		ДобавленныйФайл.НаправлениеЭД,
			//		ДобавленныйФайл.УникальныйИдентификатор(),
			//		,
			//		ДобавленныйФайл.Наименование);
			//	Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			//		АдресФайлаТД = ПолучитьИмяВременногоФайла("mxl");
			//		ТабличныйДокумент.Записать(АдресФайлаТД);
			//		ДвоичныеДанные = Новый ДвоичныеДанные(АдресФайлаТД);
			//		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			//		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			//			ДобавленныйФайл.Документ,
			//			Строка(ДобавленныйФайл.ТипЭлементаВерсииЭД),
			//			"mxl",
			//			ТекущаяДатаСеанса(),
			//			ТекущаяДатаСеанса(),
			//			ДвоичныеДанные.Размер(),
			//			АдресФайлаВоВременномХранилище,
			//			"",
			//			ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент());
			//	КонецЕсли;
			//Исключение
			//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры