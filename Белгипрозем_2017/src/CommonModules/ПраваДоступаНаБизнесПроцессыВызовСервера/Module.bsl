
// Обработчик подписки ПраваДоступаПередЗаписьюБизнесПроцессов
Процедура ПраваДоступаПередЗаписьюБизнесПроцессовПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		// Получение таблицы участников процесса
		Если Источник.ДополнительныеСвойства.Свойство("УчастникиПроцесса") Тогда
			Участники = Источник.ДополнительныеСвойства.УчастникиПроцесса;
		Иначе
			Участники = ПолучитьТаблицуУчастниковПроцесса(Источник);
			Источник.ДополнительныеСвойства.Вставить("УчастникиПроцесса", Участники);
		КонецЕсли;
		
		// Проверка прав на предметы для записанного ранее процесса
		Если Источник.Стартован Тогда
			
			ПредметыДляПроверки = Мультипредметность.ПредметыДляДействийПроцесса(Источник);
			
			ОбновитьРабочиеГруппыПредметов = Ложь;
			Для Каждого Участник из Участники Цикл
				Если Участник.СодержитсяВНовойВерсии И Не Участник.СодержитсяВСтаройВерсии Тогда
					ОбновитьРабочиеГруппыПредметов = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбновитьРабочиеГруппыПредметов Тогда
				РаботаСРабочимиГруппами.ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(
					Источник, ПредметыДляПроверки);
			КонецЕсли;
			
			Если ПредметыДляПроверки.Количество() > 0
				И МультипредметностьПереопределяемый.ПроверятьПраваУчастниковБизнесПроцессаНаПредметы(Источник) Тогда
				
				МультипредметностьПереопределяемый.ПроверитьПраваУчастниковБизнесПроцессаНаПредметы(
					Источник, ПредметыДляПроверки, Отказ, Участники);
				Если Отказ Тогда
					Возврат
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить(
		"ДополнительныеРеквизиты", 
		Источник.Ссылка.ДополнительныеРеквизиты);
			
КонецПроцедуры

// Обработчик подписки ПраваДоступаПриЗаписиБизнесПроцесов
Процедура ПраваДоступаПриЗаписиБизнесПроцесовПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("УчастникиПроцесса") Тогда
		
		Участники = Источник.ДополнительныеСвойства.УчастникиПроцесса;
		ДобавитьСтарыхИсполнителейЗадачВРабочуюГруппу(Источник.Ссылка, Участники);
		
		НаборУчастниковПроцесса = РегистрыСведений.УчастникиПроцессов.ПолучитьУчастников(Источник.Ссылка);
		
		НаборУчастниковИзменен = Ложь;
		ИзмененныеУчастникиВлияющиеНаДочерниеПроцессы = Участники.СкопироватьКолонки();
		Для Каждого Участник из Участники Цикл
			
			Если Участник.СодержитсяВСтаройВерсии <> Участник.СодержитсяВНовойВерсии Тогда
				Если Участник.ВлияетНаДоступКПодчиненнымОбъектам Тогда
					ЗаполнитьЗначенияСвойств(ИзмененныеУчастникиВлияющиеНаДочерниеПроцессы.Добавить(), Участник);
				КонецЕсли;
				
				// РС УчастникиПроцессов - только добавление новых, старые участники не удаляются
				Если Участник.СодержитсяВНовойВерсии Тогда
					НаборУчастниковИзменен = Истина;
					ЗаполнитьЗначенияСвойств(НаборУчастниковПроцесса.Добавить(), Участник);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ИзмененныеУчастникиВлияющиеНаДочерниеПроцессы.Количество() > 0 Тогда
			ОбновитьРабочиеГруппыДочернихБизнесПроцессов(Источник.Ссылка, 
				ИзмененныеУчастникиВлияющиеНаДочерниеПроцессы);
		КонецЕсли;
		
		Если НаборУчастниковИзменен Тогда
			НаборУчастниковПроцесса.Свернуть("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			РегистрыСведений.УчастникиПроцессов.ЗаписатьНаборПоПроцессу(Источник.Ссылка, НаборУчастниковПроцесса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРабочиеГруппыДочернихБизнесПроцессов(БизнесПроцесс, СписокУчастников)
	
	ДочерниеПроцессы = Новый Массив;
	БизнесПроцессыИЗадачиСервер.ПолучитьДочерниеПроцессы(БизнесПроцесс, ДочерниеПроцессы);
	
	// Заполнение рабочей группы
	Для каждого Эл из ДочерниеПроцессы Цикл
		
		Набор = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Эл);
		Набор.Прочитать();
		
		// Добавление в рабочую группу списка новых пользователей
		Для каждого Пользователь Из СписокУчастников Цикл
			
			// Проверка что этот пользователь уже есть в рабочей группе
			УжеЕсть = Ложь;
			Для каждого ЗаписьНабора Из Набор Цикл
				Если ЗаписьНабора.Участник = Пользователь.Участник
					И ЗаписьНабора.ОсновнойОбъектАдресации = Пользователь.ОсновнойОбъектАдресации 
					И ЗаписьНабора.ДополнительныйОбъектАдресации = Пользователь.ДополнительныйОбъектАдресации Тогда
					УжеЕсть = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не УжеЕсть Тогда
				Запись = Набор.Добавить();
				Запись.Объект = Эл;
				Запись.Участник = Пользователь.Участник;
				Запись.ОсновнойОбъектАдресации = Пользователь.ОсновнойОбъектАдресации;
				Запись.ДополнительныйОбъектАдресации = Пользователь.ДополнительныйОбъектАдресации;
			КонецЕсли;
			
		КонецЦикла;	
		
		Набор.Записать(Истина);
		
		// Рекурсивный вызов для дочерних процессов
		ОбновитьРабочиеГруппыДочернихБизнесПроцессов(Эл, СписокУчастников)
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в рабочую группу старых исполнителей, по которым есть выполненные задачи
Процедура ДобавитьСтарыхИсполнителейЗадачВРабочуюГруппу(БизнесПроцесс, Участники)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Участники, присутствующие только в старой версии объекта
	УдаленныеУчастникиПроцесса = Участники.Скопировать();
	УдаленныеУчастникиПроцесса.Свернуть(
		"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
		"СодержитсяВНовойВерсии");
		
	УдаленныеУчастникиПроцесса.Колонки.Добавить("ПустойООА", Новый ОписаниеТипов("Булево"));
	УдаленныеУчастникиПроцесса.Колонки.Добавить("ПустойДОА", Новый ОписаниеТипов("Булево"));

	КоличествоУдаленных = УдаленныеУчастникиПроцесса.Количество();
	Для Инд = 1 По КоличествоУдаленных Цикл
		ТекущаяСтрока = УдаленныеУчастникиПроцесса[КоличествоУдаленных - Инд];
		Если ТекущаяСтрока.СодержитсяВНовойВерсии Тогда
			УдаленныеУчастникиПроцесса.Удалить(КоличествоУдаленных - Инд);
		Иначе
			ТекущаяСтрока.ПустойООА = Не ЗначениеЗаполнено(ТекущаяСтрока.ОсновнойОбъектАдресации);
			ТекущаяСтрока.ПустойДОА = Не ЗначениеЗаполнено(ТекущаяСтрока.ДополнительныйОбъектАдресации);
		КонецЕсли;
	КонецЦикла;
	
	Если УдаленныеУчастникиПроцесса.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	// Получение старых участников, не входящих в РГ и являющихся исполнителями выполненных задач по процессу
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаУдаленныхУчастников.Участник,
		|	ТаблицаУдаленныхУчастников.ОсновнойОбъектАдресации,
		|	ТаблицаУдаленныхУчастников.ДополнительныйОбъектАдресации,
		|	ТаблицаУдаленныхУчастников.ПустойООА,
		|	ТаблицаУдаленныхУчастников.ПустойДОА
		|ПОМЕСТИТЬ УдаленныеУчастники
		|ИЗ
		|	&ТаблицаУдаленныхУчастников КАК ТаблицаУдаленныхУчастников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдаленныеУчастники.Участник,
		|	УдаленныеУчастники.ОсновнойОбъектАдресации,
		|	УдаленныеУчастники.ДополнительныйОбъектАдресации,
		|	УдаленныеУчастники.ПустойООА,
		|	УдаленныеУчастники.ПустойДОА
		|ПОМЕСТИТЬ НеНайденныеВРабочейГруппе
		|ИЗ
		|	УдаленныеУчастники КАК УдаленныеУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО УдаленныеУчастники.Участник = РабочиеГруппы.Участник
		|			И (УдаленныеУчастники.ПустойООА)
		|			И (РабочиеГруппы.ОсновнойОбъектАдресации = НЕОПРЕДЕЛЕНО)
		|			И (РабочиеГруппы.Объект = &БизнесПроцесс)
		|ГДЕ
		|	РабочиеГруппы.Участник ЕСТЬ NULL 
		|	И УдаленныеУчастники.ПустойООА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдаленныеУчастники.Участник,
		|	УдаленныеУчастники.ОсновнойОбъектАдресации,
		|	УдаленныеУчастники.ДополнительныйОбъектАдресации,
		|	УдаленныеУчастники.ПустойООА,
		|	УдаленныеУчастники.ПустойДОА
		|ИЗ
		|	УдаленныеУчастники КАК УдаленныеУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО УдаленныеУчастники.Участник = РабочиеГруппы.Участник
		|			И УдаленныеУчастники.ОсновнойОбъектАдресации = РабочиеГруппы.ОсновнойОбъектАдресации
		|			И (РабочиеГруппы.ДополнительныйОбъектАдресации = НЕОПРЕДЕЛЕНО)
		|			И (РабочиеГруппы.Объект = &БизнесПроцесс)
		|ГДЕ
		|	РабочиеГруппы.Участник ЕСТЬ NULL 
		|	И (УдаленныеУчастники.ПустойДОА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдаленныеУчастники.Участник,
		|	УдаленныеУчастники.ОсновнойОбъектАдресации,
		|	УдаленныеУчастники.ДополнительныйОбъектАдресации,
		|	УдаленныеУчастники.ПустойООА,
		|	УдаленныеУчастники.ПустойДОА
		|ИЗ
		|	УдаленныеУчастники КАК УдаленныеУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО УдаленныеУчастники.Участник = РабочиеГруппы.Участник
		|			И УдаленныеУчастники.ОсновнойОбъектАдресации = РабочиеГруппы.ОсновнойОбъектАдресации
		|			И УдаленныеУчастники.ДополнительныйОбъектАдресации = РабочиеГруппы.ДополнительныйОбъектАдресации
		|			И (РабочиеГруппы.Объект = &БизнесПроцесс)
		|ГДЕ
		|	РабочиеГруппы.Участник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеНайденныеВРабочейГруппе.Участник,
		|	НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации,
		|	НеНайденныеВРабочейГруппе.ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ ДобавитьВРабочуюГруппу
		|ИЗ
		|	НеНайденныеВРабочейГруппе КАК НеНайденныеВРабочейГруппе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО НеНайденныеВРабочейГруппе.Участник = ЗадачаИсполнителя.Исполнитель
		|			И (ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс)
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеВРабочейГруппе.Участник,
		|	НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации,
		|	НеНайденныеВРабочейГруппе.ДополнительныйОбъектАдресации
		|ИЗ
		|	НеНайденныеВРабочейГруппе КАК НеНайденныеВРабочейГруппе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО НеНайденныеВРабочейГруппе.Участник = ЗадачаИсполнителя.РольИсполнителя
		|			И (НеНайденныеВРабочейГруппе.ПустойООА)
		|			И (ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс)
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеВРабочейГруппе.Участник,
		|	НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации,
		|	НеНайденныеВРабочейГруппе.ДополнительныйОбъектАдресации
		|ИЗ
		|	НеНайденныеВРабочейГруппе КАК НеНайденныеВРабочейГруппе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО НеНайденныеВРабочейГруппе.Участник = ЗадачаИсполнителя.РольИсполнителя
		|			И НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации = ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|			И (НеНайденныеВРабочейГруппе.ПустойДОА)
		|			И (ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс)
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеНайденныеВРабочейГруппе.Участник,
		|	НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации,
		|	НеНайденныеВРабочейГруппе.ДополнительныйОбъектАдресации
		|ИЗ
		|	НеНайденныеВРабочейГруппе КАК НеНайденныеВРабочейГруппе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО НеНайденныеВРабочейГруппе.Участник = ЗадачаИсполнителя.РольИсполнителя
		|			И НеНайденныеВРабочейГруппе.ОсновнойОбъектАдресации = ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|			И НеНайденныеВРабочейГруппе.ДополнительныйОбъектАдресации = ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|			И (ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс)
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДобавитьВРабочуюГруппу.Участник,
		|	ДобавитьВРабочуюГруппу.ОсновнойОбъектАдресации,
		|	ДобавитьВРабочуюГруппу.ДополнительныйОбъектАдресации
		|ИЗ
		|	ДобавитьВРабочуюГруппу КАК ДобавитьВРабочуюГруппу");
		
	Запрос.УстановитьПараметр("ТаблицаУдаленныхУчастников", УдаленныеУчастникиПроцесса);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Набор = РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(БизнесПроцесс.Ссылка);
		Набор.Прочитать();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			Запись.Объект = БизнесПроцесс.Ссылка;
			Запись.Участник = Выборка.Участник;
			Запись.ОсновнойОбъектАдресации = Выборка.ОсновнойОбъектАдресации;
			Запись.ДополнительныйОбъектАдресации = Выборка.ДополнительныйОбъектАдресации;
			
		КонецЦикла;	
		
		Набор.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу участников процесса, привязанных к объекту или ссылке на объект
// Колонки:
//   Участник - ссылка на пользователя или роль
//   ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации - объекты адресации задач
//   СодержитсяВСтаройВерсии, СодержитсяВНовойВерсии - булево, признаки наличия участника 
//    в старой и новой версиях объекта, которые анализируются при назначении прав
//   ИмяРеквизитаОбъекта - строка, используется при выводе сообщения об ошибке, связанной с этим участником
//
Функция ПолучитьТаблицуУчастниковПроцесса(БизнесПроцессОбъект) Экспорт
	
	ТипыУчастников = Новый Массив;
	ТипыУчастников.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыУчастников.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыУчастников.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ТипУчастника = Новый ОписаниеТипов(ТипыУчастников);
	ТипОбъектаАдресации = Метаданные.ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип;
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("Участник", ТипУчастника);
	Участники.Колонки.Добавить("ОсновнойОбъектАдресации", ТипОбъектаАдресации);
	Участники.Колонки.Добавить("ДополнительныйОбъектАдресации", ТипОбъектаАдресации);
	Участники.Колонки.Добавить("ВлияетНаДоступКПодчиненнымОбъектам", ТипБулево);
	Участники.Колонки.Добавить("СодержитсяВСтаройВерсии", ТипБулево);
	Участники.Колонки.Добавить("СодержитсяВНовойВерсии", ТипБулево);
	Участники.Колонки.Добавить("ИмяРеквизитаОбъекта", ТипСтрока);
	
	МетаданныеБП = БизнесПроцессОбъект.Метаданные();
	ИмяБП = МетаданныеБП.Имя;
	ОписанияУчастников = БизнесПроцессы[ИмяБП].ЗаполнитьОписанияУчастников();
	
	ИменаРеквизитов = "";
	
	// Заполнение имен реквизитов для обращения к БД
	Для Каждого ОписаниеУчастника из ОписанияУчастников Цикл
		
		Если ОписаниеУчастника.Свойство("ТабличнаяЧасть") 
			И ЗначениеЗаполнено(ОписаниеУчастника.ТабличнаяЧасть) Тогда
			ИменаРеквизитов = ИменаРеквизитов + ?(ЗначениеЗаполнено(ИменаРеквизитов), ", ", "") 
				+ ОписаниеУчастника.ТабличнаяЧасть;
		Иначе
			ИменаРеквизитов = ИменаРеквизитов + 
			?(ЗначениеЗаполнено(ИменаРеквизитов), ", ", "") + ОписаниеУчастника.ИмяУчастника;
			Если ЗначениеЗаполнено(ОписаниеУчастника.ИмяОсновногоОбъектаАдресации) Тогда
				ИменаРеквизитов = ИменаРеквизитов + ", " + ОписаниеУчастника.ИмяОсновногоОбъектаАдресации;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеУчастника.ИмяДополнительногоОбъектаАдресации) Тогда
				ИменаРеквизитов = ИменаРеквизитов + ", " + ОписаниеУчастника.ИмяДополнительногоОбъектаАдресации;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(БизнесПроцессОбъект.Ссылка, ИменаРеквизитов);
	
	// Заполнение таблицы участников
	Для Каждого ОписаниеУчастника из ОписанияУчастников Цикл
		
		Если ОписаниеУчастника.Свойство("ТабличнаяЧасть") 
			И ЗначениеЗаполнено(ОписаниеУчастника.ТабличнаяЧасть) Тогда
			
			Если ЗначениеЗаполнено(Реквизиты[ОписаниеУчастника.ТабличнаяЧасть]) Тогда
				СтараяТабЧасть = Реквизиты[ОписаниеУчастника.ТабличнаяЧасть].Выгрузить();
				Для Каждого СторкаСтаройТЧ из СтараяТабЧасть Цикл
					НоваяСтрока = Участники.Добавить();
					НоваяСтрока.СодержитсяВСтаройВерсии	= Истина;
					ЗаполнитьСтрокуУчастникаИзИсточникаПоОписанию(НоваяСтрока, СторкаСтаройТЧ, ОписаниеУчастника);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаНовойТЧ из БизнесПроцессОбъект[ОписаниеУчастника.ТабличнаяЧасть] Цикл
				НоваяСтрока = Участники.Добавить();
				НоваяСтрока.СодержитсяВНовойВерсии	= Истина;
				НоваяСтрока.ИмяРеквизитаОбъекта = ОписаниеУчастника.ТабличнаяЧасть
					+ "[" + Формат(СтрокаНовойТЧ.НомерСтроки - 1,"ЧГ=; ЧН=") + "]."
					+ ОписаниеУчастника.ИмяУчастника;
				ЗаполнитьСтрокуУчастникаИзИсточникаПоОписанию(НоваяСтрока, СтрокаНовойТЧ, ОписаниеУчастника);
			КонецЦикла;
			
		Иначе
			
			Если ЗначениеЗаполнено(Реквизиты[ОписаниеУчастника.ИмяУчастника]) Тогда
				НоваяСтрока = Участники.Добавить();
				НоваяСтрока.СодержитсяВСтаройВерсии	= Истина;
				ЗаполнитьСтрокуУчастникаИзИсточникаПоОписанию(НоваяСтрока, Реквизиты, ОписаниеУчастника);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БизнесПроцессОбъект[ОписаниеУчастника.ИмяУчастника]) Тогда
				НоваяСтрока = Участники.Добавить();
				НоваяСтрока.СодержитсяВНовойВерсии	= Истина;
				НоваяСтрока.ИмяРеквизитаОбъекта = ОписаниеУчастника.ИмяУчастника;
				ЗаполнитьСтрокуУчастникаИзИсточникаПоОписанию(НоваяСтрока, БизнесПроцессОбъект, ОписаниеУчастника);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УчастникиСвернутая = Участники.Скопировать();
	УчастникиСвернутая.Свернуть("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, 
		|ВлияетНаДоступКПодчиненнымОбъектам", "СодержитсяВСтаройВерсии, СодержитсяВНовойВерсии");
		
	// Заполнение путей к реквизитам
	УчастникиСвернутая.Колонки.Добавить("ИмяРеквизитаОбъекта", ТипСтрока);
	СтруктураПоиска = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, 
		|ВлияетНаДоступКПодчиненнымОбъектам");
		
	Для Каждого СтрСвернутая из УчастникиСвернутая Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрСвернутая);
		НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.ИмяРеквизитаОбъекта) Тогда
				СтрСвернутая.ИмяРеквизитаОбъекта = НайденнаяСтрока.ИмяРеквизитаОбъекта;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат УчастникиСвернутая;
	
КонецФункции

Процедура ЗаполнитьСтрокуУчастникаИзИсточникаПоОписанию(СтрокаУчастника, Источник, Описание)

	СтрокаУчастника.Участник = Источник[Описание.ИмяУчастника];
	
	Если ЗначениеЗаполнено(Описание.ИмяОсновногоОбъектаАдресации) Тогда
		СтрокаУчастника.ОсновнойОбъектАдресации = Источник[Описание.ИмяОсновногоОбъектаАдресации];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание.ИмяДополнительногоОбъектаАдресации) Тогда
		СтрокаУчастника.ДополнительныйОбъектАдресации = Источник[Описание.ИмяДополнительногоОбъектаАдресации];
	КонецЕсли;
	
	СтрокаУчастника.ВлияетНаДоступКПодчиненнымОбъектам = Описание.ВлияетНаДоступКПодчиненнымОбъектам;
	
КонецПроцедуры
