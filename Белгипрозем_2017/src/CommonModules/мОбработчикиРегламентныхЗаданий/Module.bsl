#Область ОбработчикРегламентногоЗаданиямКопированиеФайловАрхива

//&НаКлиенте
// Обработчик регламентного задания
//  Выбирает из определенного каталога все файлы, за текущую дату.
//  Создает дела и прикрепляет файлы к ним.
Процедура мКопированиеФайловАрхива() Экспорт
	//мОбработчикиРегламентныхЗаданий.ЗаписатьСоединениеСБазой();
	
    //КаталогФайлов = "c:\1С базы\Белгипрозем 2014\Обработки\_Загрузки\_Брест\Загрузка дел из архива\Дела\";
    КаталогФайлов = "\\server\Repository\Data_Warehouse\";
    //КаталогФайлов = "c:\Файлы для исправления1\";
    МассивФайлов = НайтиФайлы(КаталогФайлов, "*-*-*.pdf");
    
    Сегодня = НачалоДня(ТекущаяДата());
    
    // отбираем только измененные сегодня
    МассивДляЗагрузки = Новый Массив;
    Для каждого _Файл Из МассивФайлов Цикл
        Если НачалоДня(_Файл.ПолучитьВремяИзменения()) = Сегодня Тогда
            МассивДляЗагрузки.Добавить(_Файл);
        КонецЕсли; 
    КонецЦикла; 
	
	// создание Дел
	ЗаписьЖурналаРегистрации("Файлов для загрузки " +МассивДляЗагрузки.Количество(), 
	УровеньЖурналаРегистрации.Информация, , ,
	"Файлов для загрузки " +МассивДляЗагрузки.Количество());
	
	ДляДела = мОбработчикиРегламентныхЗаданий.ПолучитьСтруктуруРеквизитовДляДела(); 
	
	Для каждого _Файл Из МассивДляЗагрузки Цикл
        Дело = мОбработчикиРегламентныхЗаданий.СоздатьДело(_Файл, ДляДела);
        
        Если ЗначениеЗаполнено(Дело) Тогда
            // Добавление файла
            МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Дело, Ложь); 
			Если МассивФайлов.Количество() = 0 Тогда
				ПолноеИмяФайла = КаталогФайлов+_Файл+".pdf";
				ИмяФайла = _Файл+".pdf";
                ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
				//ФайлНаДиске = Новый Файл(_Файл.ПолноеИмя);
				Если ФайлНаДиске.Существует() Тогда
					
					//Файл = Новый Файл(ФайлДляДобавления);
					ДобавленныеФайлы = Новый Массив;
					МассивСтруктурВсехФайлов = Новый Массив;
					
					РаботаСФайламиКлиентСервер.СоздатьЭлементСправочникаФайлы(ФайлНаДиске,МассивСтруктурВсехФайлов,Дело,"",
					"", Ложь,ДобавленныеФайлы,ПолноеИмяФайла,"","",Неопределено);
					//РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПолноеИмяФайла, Дело, "", Истина, ИмяФайла, , , ,);
                КонецЕсли; 
			КонецЕсли;
		Иначе
			Сообщить ("Не обработан файл: "+_Файл+".pdf");
        КонецЕсли; 
    Прервать;
	КонецЦикла; 
    
КонецПроцедуры
//&НаСервере

Процедура ЗаписатьСоединениеСБазой() Экспорт
				ЗаписьЖурналаРегистрации("Параментры соединения с базой", 
					УровеньЖурналаРегистрации.Информация, , ,
					СтрокаСоединенияИнформационнойБазы());
        //ЗаписьЖурналаРегистрации("Параментры соединения с базой",,,,СтрокаСоединенияИнформационнойБазы());
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРеквизитовДляДела() Экспорт
	ДляДела = Новый Структура();
	ДляДела.Вставить("Заказчик", Справочники.Корреспонденты.НайтиПоНаименованию("_Архив_"));
	ДляДела.Вставить("ВопросДеятельности", Справочники.ВопросыДеятельности.НайтиПоНаименованию("Землеустройство"));
	ДляДела.Вставить("ГрифДоступа", Справочники.ГрифыДоступа.НайтиПоНаименованию("ДСП"));
	ДляДела.Вставить("Папка", Справочники.ПапкиВнутреннихДокументов.мДела);
	Возврат ДляДела;
КонецФункции // ПолучитьСтруктуруРеквизитовДляДела()
 
&НаСервере
Функция СформироватьРегНомерДела(ИмяБезРасширения)
	КолвоТире = СтрЧислоВхождений(ИмяБезРасширения, "-");
	
	Если КолвоТире = 2  Тогда
		// стандарт
		Позиция = Найти(ИмяБезРасширения, "-");
		
		НомерДоговора = Лев(ИмяБезРасширения, Позиция-1);
		Год2 = Сред(ИмяБезРасширения, Позиция+1, 2);
		НомерЭтапа  = Сред(ИмяБезРасширения, Позиция+4);
	Иначе
		// Пинск
		Если Лев(ИмяБезРасширения, 2) = "Р-" или Лев(ИмяБезРасширения, 2) = "P-"  Тогда
			ИмяБезРасширения = Сред(ИмяБезРасширения, 3);
			
			Позиция = Найти(ИмяБезРасширения, "-");
			
			НомерДоговора = "П-"+Лев(ИмяБезРасширения, Позиция-1);
			Год2 = Сред(ИмяБезРасширения, Позиция+1, 2);
			НомерЭтапа  = Сред(ИмяБезРасширения, Позиция+4);
			
		КонецЕсли;
	КонецЕсли; 
    
    РегНомер = НомерДоговора+"-"+Год2+"/"+НомерЭтапа;
	Попытка
		Год4 = ?(Число(Год2)>30, "19", "20")+Год2;
	Исключение
		Год4 = "1900";
	КонецПопытки;
	
    СтрНомера = Новый Структура();
    СтрНомера.Вставить("РегНомер", РегНомер);
    СтрНомера.Вставить("Год4", Год4);
	СтрНомера.Вставить("НеСоздавать", Ложь);
    
    Возврат СтрНомера;
КонецФункции
 
&НаСервере
Функция СоздатьДело(ИмяБезРасширения, ДляДела) Экспорт
    СтруктураНомера = СформироватьРегНомерДела(ИмяБезРасширения);
	Если СтруктураНомера.НеСоздавать Тогда
		Возврат Неопределено;
	КонецЕсли; 
    
    Дела = Справочники.ВнутренниеДокументы;
    НайденнаяСсылка = Дела.НайтиПоРеквизиту("РегистрационныйНомер", СтруктураНомера.РегНомер);
    Если НайденнаяСсылка = Дела.ПустаяСсылка() Тогда
        Дело = Дела.СоздатьЭлемент();
        Дело.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело;
        Дело.Корреспондент = ДляДела.Заказчик;
        Дело.РегистрационныйНомер = СтруктураНомера.РегНомер;
        СтрокаГода = СтруктураНомера.Год4+"0101000000";
        Дело.ДатаРегистрации = Дата(СтрокаГода);
        Дело.ДатаСоздания = Дата(СтрокаГода);
    	Дело.Наименование = СтруктураНомера.РегНомер;
    	Дело.Содержание = СтруктураНомера.РегНомер;
        Дело.Заголовок = СтруктураНомера.РегНомер;
        Дело.ВопросДеятельности = ДляДела.Вопрос;
        Дело.ГрифДоступа = ДляДела.ГрифДоступа;
        Дело.Папка = ДляДела.Папка;
        Корреспондент = Дело.Корреспонденты.Добавить();
        Корреспондент.Корреспондент = ДляДела.Заказчик;
        Дело.ОбменДанными.Загрузка = Истина;
        Попытка
            Дело.Записать();
            НайденнаяСсылка = Дело.Ссылка;
        Исключение
            Сообщить("Не удалось записать объект """ + Дело + """!
            |" + ОписаниеОшибки(), 60);
        КонецПопытки;
    Иначе
        Перезаписать = Ложь;
        РеквизитыДляЗаписи = Новый Структура(); 
        Если НайденнаяСсылка.ГрифДоступа <> ДляДела.ГрифДоступа Тогда
            РеквизитыДляЗаписи.Вставить("ГрифДоступа", ДляДела.ГрифДоступа);
        КонецЕсли; 
        Если НайденнаяСсылка.ВопросДеятельности <> ДляДела.Вопрос Тогда
            РеквизитыДляЗаписи.Вставить("ВопросДеятельности", ДляДела.Вопрос);
        КонецЕсли; 
        Если НайденнаяСсылка.Папка <> ДляДела.Папка Тогда
            РеквизитыДляЗаписи.Вставить("Папка", ДляДела.Папка);
        КонецЕсли; 
        Если СОкрЛП(НайденнаяСсылка.Заголовок) <> СОкрЛП(СтруктураНомера.РегНомер) Тогда
            РеквизитыДляЗаписи.Вставить("Заголовок", СтруктураНомера.РегНомер);
        КонецЕсли; 
        Если НайденнаяСсылка.Корреспондент <> ДляДела.Заказчик Тогда
            РеквизитыДляЗаписи.Вставить("Корреспондент", ДляДела.Заказчик);
        КонецЕсли;
        
        Если РеквизитыДляЗаписи.Количество() > 0 Тогда
            Дело = НайденнаяСсылка.ПолучитьОбъект();
            Для каждого Рекв Из РеквизитыДляЗаписи Цикл
                Дело[Рекв.Ключ] = Рекв.Значение;
                Если Рекв.Ключ = "Корреспондент" Тогда
                    Корреспондент = Дело.Корреспонденты.Добавить();
                    Корреспондент.Корреспондент = ДляДела.Заказчик;
                КонецЕсли; 
            КонецЦикла;
            Дело.ОбменДанными.Загрузка = Истина;
           
            Попытка
                Дело.Записать();
                НайденнаяСсылка = Дело.Ссылка;
            Исключение
                Сообщить("Не удалось записать объект """ + Дело + """!
                |" + ОписаниеОшибки(), 60);
            КонецПопытки;
        КонецЕсли; 
    КонецЕсли; 
    
    Возврат НайденнаяСсылка;
КонецФункции

#КонецОбласти 

// Обработчик регламентного задания
//  Выбирает задачи на Ознакомление, по которым нет замечаний и оценка Акта проверки =1
//   Задачи закрываются с ознакомлением, а главные задачи, на основании которых они были сформированы
//   выполняются с результатом Согласовано
//   таким образом закрываются автоматически вся цепочка задач при успешном согласовании.
Процедура ОбработкаЗадачПроверкиКачества() Экспорт
    
    // Получим задачи для обработки
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ЗадачаИсполнителяПредметы.Ссылка КАК ЗадачаИсполнителя,
        |	ЗадачаИсполнителяПредметы.Ссылка.Выполнена КАК ЗадачаИсполнителяВыполнена,
        |	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.ГлавнаяЗадача КАК ГлавнаяЗадача,
        |	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.РезультатСогласования КАК РезультатСогласования,
        |	ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.мОзнакомить КАК Ознакомить,
		|	мАктыПроверки.Оценка КАК Оценка,
        |	М_Гродно.Значение КАК ЭтоГродно
        |ИЗ
        |	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мАктыПроверки КАК мАктыПроверки
        |		ПО ЗадачаИсполнителяПредметы.Предмет = мАктыПроверки.Владелец,
        |	Константа.М_Гродно КАК М_Гродно
        |ГДЕ
        |	ЗадачаИсполнителяПредметы.Предмет.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.Дело)
        |	И ЗадачаИсполнителяПредметы.Ссылка.ТочкаМаршрута = &ТочкаМаршрута
        |	И (НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|   ИЛИ НЕ ЗадачаИсполнителяПредметы.Ссылка.БизнесПроцесс.ГлавнаяЗадача.Выполнена)";

		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
    
    РезультатЗапроса = Запрос.Выполнить();
	
	//Сообщить("Задач найдено = " + РезультатЗапроса.Выгрузить().Количество());
    
    Выборка = РезультатЗапроса.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
		ВыполнитьОзнакомление = Ложь;
		ВыполнитьГлавнуюЗадачу = Ложь;
		
       // Ознакомление Автора задачи
		Если Выборка.ЭтоГродно Тогда
			// Для Гродно: если установлено Ознакомить, то Ознакомление автоматически выполнять не надо
			
			ВыполнитьГлавнуюЗадачу = Истина; //всегда
			
			Если Не ЗначениеЗаполнено(Выборка.ГлавнаяЗадача) Тогда
				// Это последняя задача в цепочке, скорее всего у Исполнителя работ - он должен Ознакомиться
				ВыполнитьОзнакомление = Ложь;
			Иначе
				// Это промежуточная точка согласований - ознакамливаем, если Ознакомить
				Если Не Выборка.Ознакомить Тогда
					ВыполнитьОзнакомление = Истина;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			// Выполняем ознакомление автоматически если Оценка = 1 и Согласовано или не Ознакомить 	
			Если Выборка.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			//Если Выборка.Оценка = 1 и 
			//	Выборка.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			    ВыполнитьОзнакомление = Истина;
				
				Если Выборка.Ознакомить Тогда
					// принудительное ознакомление
					ВыполнитьОзнакомление = Ложь;
				КонецЕсли; 
				
				// Выполняем Главную задачу автоматически если Оценка = 1 и Согласовано
				ВыполнитьГлавнуюЗадачу = Истина;
				
			КонецЕсли; 
		КонецЕсли; 
		
		Если ВыполнитьОзнакомление И НЕ Выборка.ЗадачаИсполнителяВыполнена Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ПовторитьСогласование", Ложь);
			ТекущаяЗадача = Выборка.ЗадачаИсполнителя;
			Если Не ТекущаяЗадача.ПометкаУдаления Тогда 
				Попытка
					БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ТекущаяЗадача, ПараметрыВыполнения);
				Исключение
					Сообщить(ТекущаяЗадача.Наименование + " не выполнена!");
				КонецПопытки
			КонецЕсли; 
		КонецЕсли; 
        
        // Согласование ГлавнойЗадачи
		Если ВыполнитьГлавнуюЗадачу Тогда
			ГлавнаяЗадача = Выборка.ГлавнаяЗадача;
			Если ЗначениеЗаполнено(ГлавнаяЗадача) и НЕ ГлавнаяЗадача.ПометкаУдаления Тогда
				ПараметрыВыполнения = Новый Структура;
				ПараметрыВыполнения.Вставить("РезультатСогласования", Выборка.РезультатСогласования);
				ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
				Попытка
					БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ГлавнаяЗадача, ПараметрыВыполнения);
				Исключение
					Сообщить(ГлавнаяЗадача.Наименование + " не выполнена!");
				КонецПопытки
			КонецЕсли;
		КонецЕсли; 
    КонецЦикла;
    
КонецПроцедуры

Процедура мОбработкаОкончанияСрокаОплатыЕРИП() Экспорт
	// Если не рабочий день, то не запускаем.
	// Если рабочий день, то период окончания оплаты выбираем с начала прошлого рабочего дня и до текущего
	График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	Если Не ГрафикиРаботы.ЭтоРабочийДень(ТекущаяДата(), График) Тогда
		Возврат;
	КонецЕсли;
	
	ПредРабочийДень = КалендарныеГрафики.ПредыдущийРабочийДень(График.Календарь, ТекущаяДата()); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбменЕРИП.Договор КАК Договор
		|ПОМЕСТИТЬ Договоры
		|ИЗ
		|	РегистрСведений.мОбменЕРИП КАК мОбменЕРИП
		|ГДЕ
		|	мОбменЕРИП.ОплатитьДо >= &НачПериода
		|	И мОбменЕРИП.ОплатитьДо < &КонПериода
		|	И мОбменЕРИП.Состояние = &Состояние
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(мСметнаяСтоимостьСрезПоследних.Сумма) КАК Сумма,
		|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец КАК Договор
		|ПОМЕСТИТЬ Стоимости
		|ИЗ
		|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(, ЭтапДоговора.Владелец В (Выбрать Договоры.Договор Из Договоры как Договоры)) КАК мСметнаяСтоимостьСрезПоследних
		|ГДЕ
		|	НЕ мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.ПометкаУдаления
		|	И НЕ мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.ИсключенИзДоговора
		|
		|СГРУППИРОВАТЬ ПО
		|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОбороты.Договор КАК Договор,
		|	ЕСТЬNULL(РасчетыСПокупателямиОбороты.СуммаПриход, 0) КАК Оплата
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(, , , Договор В (Выбрать Договоры.Договор Из Договоры как Договоры)) КАК РасчетыСПокупателямиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Стоимости.Договор КАК Договор,
		|	Стоимости.Сумма КАК Сумма,
		|	ЕСТЬNULL(Оплаты.Оплата, 0) КАК Оплата
		|ИЗ
		|	Стоимости КАК Стоимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаты КАК Оплаты
		|		ПО Стоимости.Договор = Оплаты.Договор";
		
	Запрос.УстановитьПараметр("НачПериода", ПредРабочийДень);
	Запрос.УстановитьПараметр("КонПериода", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Состояние", Перечисления.мСостояниеОбменЕРИП.Отправлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сумма = Выборка.Оплата Тогда
			// Все оплачено - ничего делать не надо
			
		ИначеЕсли Выборка.Сумма > Выборка.Оплата и Выборка.Оплата > 0 Тогда
			// Частично оплачено - надо требование на остаток
			Доплатить = Выборка.Сумма - Выборка.Оплата; 
			//Сообщить(""+Выборка.Договор+" Сумма: "+Выборка.Сумма+" Оплата = "+Выборка.Оплата+" Доплатить: "+Доплатить);
			
			мОбменЕРИПСервер.ЗарегистрироватьСостояниеЕРИП(Выборка.Договор,
				Перечисления.мСостояниеОбменЕРИП.ДляОтправки,
				, Доплатить);
			
		ИначеЕсли Выборка.Оплата = 0 Тогда
			// Не оплачено - надо расторгать договор и вернуть поручение
			//Сообщить(""+Выборка.Договор+" Сумма: "+Выборка.Сумма+" Оплата = "+Выборка.Оплата+" Расторгать!");

			// Расторжение только с физ лицами
			Если мРаботаСДоговорами.ЭтоФизЛицо(Выборка.Договор.Корреспондент) Тогда
				
				СостояниеДоговора = мРаботаСДоговорами.ПолучитьСостояниеДоговора(Выборка.Договор);
				
				НачатьТранзакцию();
				
				Если Не Выборка.Договор.НеДействует Тогда
					мРаботаСДоговорами.УстановитьРеквизитДоговора(Выборка.Договор, "НеДействует", Истина);
				КонецЕсли; 
				
				НовоеСостояние = Неопределено;
				
				Если СостояниеДоговора = Перечисления.мСостоянияДоговоров.Подписан Тогда
					НовоеСостояние = Перечисления.мСостоянияДоговоров.Расторгнут;
				ИначеЕсли СостояниеДоговора = Перечисления.мСостоянияДоговоров.НаПодписании Тогда
					НовоеСостояние = Перечисления.мСостоянияДоговоров.НеПодписан;
				КонецЕсли;
				
				Если НовоеСостояние <> Неопределено Тогда
					мРаботаСДоговорами.УстановитьСостояниеДоговора(Выборка.Договор, НовоеСостояние);
				КонецЕсли; 
				
				ЗафиксироватьТранзакцию();
			КонецЕсли;			
			
			// Запуск процесса
			Поручение = СвязиДокументов.ПолучитьСвязанныйДокумент(Выборка.Договор, Справочники.ТипыСвязей.НаОснованииПоручения);
			
			мРаботаСДоговорами.СтартоватьПроцессВозвратПоручения(Поручение);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

// Ищет документы Входящее сообщение СВД с незаполненными отправителями
//  и формирует процесс для их опознания
Процедура мОбработкаНовыхОтправителейВходящихСообщенийСВД() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееСообщениеСВД.Ссылка КАК ВходящееСообщениеСВД,
		|	ВходящееСообщениеСВД.ТранспортПолучения КАК Транспорт
		|ИЗ
		|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
		|ГДЕ
		|	ВходящееСообщениеСВД.Дата МЕЖДУ &Дата1 И &Дата2
		|	И ВходящееСообщениеСВД.КорреспондентОтправитель = &КорреспондентОтправитель
		|	И НЕ ВходящееСообщениеСВД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КорреспондентОтправитель", Справочники.Корреспонденты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ШаблонБП = Справочники.ШаблоныИсполнения.НайтиПоНаименованию("Распознать новых отправителей СМДО");
		
		БП = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		БП.ЗаполнитьПоШаблону(ШаблонБП);
		БП.Дата = ТекущаяДата();
		БП.СрокИсполнения = ТекущаяДата() + 600;
		БП.Записать();
		БП.Старт();
	
	КонецЕсли; 
КонецПроцедуры

