////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщегоНазначения

// Возвращает список возможных бизнес-событий для объекта
Функция ПолучитьСписокВидовБизнесСобытий(ОбъектПодписки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	   
	СписокВидовБизнесСобытий = Новый СписокЗначений;
	
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеПроекта);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Контроль") Тогда
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеФайла);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОсвобождениеФайла);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
		
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.УдалениеИзКатегории);
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		СписокВидовБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
	Иначе
		
		Выборка = Справочники.ВидыБизнесСобытий.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Предопределенный Тогда
				СписокВидовБизнесСобытий.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		СписокВидовБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);

	КонецЕсли;
	
	Возврат СписокВидовБизнесСобытий;
	
КонецФункции

// Возвращает представление конкретного бизнес-события для конкретного объекта
Функция ПолучитьПредставлениеБизнесСобытия(
	ВидСобытия,
	ОбъектПодписки = "",
	ДобавитьПредставлениеОбъекта = Ложь) Экспорт
	
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новый ответ на сообщение обсуждения'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новое сообщение в теме обсуждения'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новый ответ в обсуждении проекта'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеПроекта Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился проект'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новый ответ в обсуждении проектной задачи'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменилась проектная задача'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Контроль") Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подходит срок контроля'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подходит срок задачи'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новый ответ в обсуждении задачи'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача выполнена'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача перенаправлена'");			
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Выполнение задачи отменено'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача прервана'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача остановлена'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача возобновлена'");		
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Новый ответ в обсуждении файла'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Захвачен файл для редактирования'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился файл'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОсвобождениеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Освобожден файл'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Создан новый файл в папке'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Присоединен новый файл к входящему документу'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Получен новый ответ в обсуждении входящего документа'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился входящий документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Перерегистрирован входящий документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Зарегистрирован входящий документ'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Присоединен новый файл к внутреннему документу'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Получен новый ответ в обсуждении внутреннего документа'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился внутренний документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился состав комплекта'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Перерегистрирован внутренний документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Зарегистрирован внутренний документ'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Создан новый внутренний документ в папке'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Присоединен новый файл к исходящему документу'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Получен новый ответ в обсуждении исходящего документа'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменился исходящий документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Перерегистрирован исходящий документ'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Зарегистрирован исходящий документ'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Присоединен новый файл к мероприятию'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Получен новый ответ в обсуждении мероприятия'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеМероприятия Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Изменилось мероприятие'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
			
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Возобновлен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Завершен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Остановлен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Стартован процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Прерван процесс'");			
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Ход выполнения процесса'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Добавлен элемент в категорию'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.УдалениеИзКатегории Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Удален элемент из категории'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Поступила новая задача пользователю'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Перенаправлена задача пользователю'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подошел срок задачи пользователя'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Просрочена задача пользователя'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подошел срок контроля пользователя'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Истек срок контроля'");		
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		
	КонецЕсли;
	
	Если ДобавитьПредставлениеОбъекта Тогда
		ПредставлениеБизнесСобытия = 
			ПредставлениеБизнесСобытия
			+ " """
			+ ПолучитьПредставлениеОбъектУведомления(ОбъектПодписки)
			+ """";
	КонецЕсли;
	
	Возврат ПредставлениеБизнесСобытия;
	
КонецФункции

// Возвращает представление конкретного бизнес-события для конкретного объекта
Функция ПолучитьВозможностьПодпискиНаСобытие(ВидСобытия, ОбъектПодписки) Экспорт
	
	ВозможностьПодпискиНаСобытие = Ложь;
	Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Проекты") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
			ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
			ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
			ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи
			ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Контроль") Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля
			ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи
			ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
			
			ВозможностьПодпискиНаСобытие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозможностьПодпискиНаСобытие;
	
КонецФункции

// Возвращает список возможных способов уведомления
Функция ПолучитьСписокСпособовУведомления() Экспорт
	
	СписокСпособовУведомления = Новый СписокЗначений;
	
	СписокСпособовУведомления.Добавить(Перечисления.СпособыУведомления.ПоПочте);
	
	Возврат СписокСпособовУведомления;
	
КонецФункции

// Возвращает значение подписки на событие в целом, с учетом настроек по умолчанию
Функция ПолучитьПодпискуНаСобытие(
	ВидСобытия,
	Пользователь = Неопределено,
	СписокСпособовУведомления = Неопределено) Экспорт
	
	ПодпискаНаСобытие = Ложь;
	ЕстьЗаписьВРегистре = Ложь;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СписокСпособовУведомления) Тогда
		СписокСпособовУведомлений = ПолучитьСписокСпособовУведомления();
	КонецЕсли;
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(Перечисления.НастройкиУведомлений.Подписка, ВидСобытия);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодпискиНаУведомления.ПодпискаАктивна КАК ПодпискаАктивна
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = &ВидСобытия
		|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
		|	И ПодпискиНаУведомления.Пользователь = &Пользователь
		|	И ПодпискиНаУведомления.СпособУведомления В(&СписокСпособовУведомлений)";
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.УстановитьПараметр("СписокСпособовУведомлений", СписокСпособовУведомления);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();;
	
	Если Выборка.Следующий() Тогда
		ПодпискаПользователя = Выборка.ПодпискаАктивна;
		ЕстьЗаписьВРегистре = Истина;
	Иначе
		ПодпискаПользователя = Ложь;
		ЕстьЗаписьВРегистре = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ПодпискаПользователя = (НЕ ЕстьЗаписьВРегистре И ПодпискаПоУмолчанию)
			ИЛИ (ЕстьЗаписьВРегистре И ПодпискаПользователя);
		
	Иначе
		
		ПодпискаПользователя = ПодпискаПоУмолчанию ИЛИ (ЕстьЗаписьВРегистре И ПодпискаПользователя);
		
	КонецЕсли;
	
	Возврат ПодпискаПользователя;
	
КонецФункции

#КонецОбласти

#Область ОбработкаБизнесСобытий

// Предназначена для обработки произошедших бизнес-событий
Процедура ОбработатьБизнесСобытие(ПроизошедшееСобытие) Экспорт 
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытия = ПроизошедшееСобытие.ВидСобытия;
	Объект = ПроизошедшееСобытие.Источник;
	
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаУведомлений

// Обработка уведомлений в очереди уведомлений
Процедура ОбработатьУведомленияВОчередиУведомлений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Начато регламентное уведомление о новых событиях'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ОтправитьУведомления();
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершено регламентное уведомление о новых событиях'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры

#КонецОбласти

#Область ПодпискаНаУведомления

// Заполняет таблицу подписки на уведомления
Процедура ЗаполнитьПодпискиНаУведомления(ТаблицаПодписок, Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Для Каждого СтрокаПодписки Из ТаблицаПодписок Цикл
		Если СтрокаПодписки.ПодпискаАктивна = 2 Тогда
			
			УдалитьПодпискуНаУведомления(
				СтрокаПодписки.ВидСобытия, 
				СтрокаПодписки.ОбъектПодписки, 
				СтрокаПодписки.СпособУведомления, 
				Пользователь);
			
		Иначе
			
			ДобавитьПодпискуНаУведомления(
				СтрокаПодписки.ВидСобытия, 
				СтрокаПодписки.ОбъектПодписки, 
				СтрокаПодписки.СпособУведомления, 
				Пользователь, СтрокаПодписки.ПодпискаАктивна);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Устанавливает подписку на уведомления по событию
Процедура УстановитьПодпискуНаСобытие(
	ВидСобытия,
	МассивСпособовУведомления,
	ПодпискаАктивна,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Для Каждого СпособУведомления Из МассивСпособовУведомления Цикл
		
		ДобавитьПодпискуНаУведомления(
			ВидСобытия, 
			"", 
			СпособУведомления, 
			Пользователь, 
			ПодпискаАктивна);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив подписок на уведомления по объектам
Процедура ЗаполнитьПодписки(
	МассивПодписок,
	МассивСпособовУведомления,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		
	Для Каждого Подписка Из МассивПодписок Цикл
		Для Каждого СпособУведомления Из МассивСпособовУведомления Цикл
			
			ДобавитьПодпискуНаУведомления(
				Подписка.ВидСобытия, 
				Подписка.ОбъектПодписки, 
				СпособУведомления, Пользователь, 
				Подписка.ПодпискаАктивна);
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиУведомлений

#Область УведомленияОЗадачах

// Записывает настройку уведомления о задачах в регистр сведений
Функция СохранитьНастройкуУведомленияОЗадачах(
	СрокУведомления,
	ЧастотаПриближениеСрока,
	ЧастотаПросроченныеЗадачи,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.НастройкиУведомленияОЗадачах.СохранитьНастройку(
		Пользователь,
		СрокУведомления,
		ЧастотаПриближениеСрока,
		ЧастотаПросроченныеЗадачи);
	
КонецФункции

// Считывает настройку срока уведомления о задачах из регистра сведений
Функция ПолучитьНастройкуУведомленияОЗадачах(Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	НастройкаУведомлений = РегистрыСведений.НастройкиУведомленияОЗадачах.ПолучитьНастройку(Пользователь);
	
	Если НастройкаУведомлений = Неопределено Тогда
		
		СрокПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.СрокУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ЧастотаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ЧастотаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
		НастройкаУведомлений =
			Новый Структура("СрокПодошелСрокЗадачи, ЧастотаПодошелСрокЗадачи, ЧастотаПросроченаЗадача",
				СрокПодошелСрокЗадачи,
				ЧастотаПодошелСрокЗадачи,
				ЧастотаПросроченаЗадача);
		
	ИначеЕсли Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ПодпискаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		Если ПодпискаПодошелСрокЗадачи Тогда
			
			СрокПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.СрокУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
			НастройкаУведомлений.СрокПодошелСрокЗадачи = СрокПодошелСрокЗадачи;
			
			ЧастотаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
			НастройкаУведомлений.ЧастотаПодошелСрокЗадачи = ЧастотаПодошелСрокЗадачи;
			
		КонецЕсли;
		
		ПодпискаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
		Если ПодпискаПросроченаЗадача Тогда
			
			ЧастотаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПросроченаЗадача);
			НастройкаУведомлений.ЧастотаПросроченаЗадача = ЧастотаПросроченаЗадача;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкаУведомлений;
	
КонецФункции

#КонецОбласти

#Область УведомленияОСрокеДействия

// Записывает настройку уведомления об окончании срока действия в регистр сведений
Функция СохранитьНастройкуУведомленияОкончанияСрокаДействия(
	СрокУведомления,
	ЧастотаУведомления,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.НастройкиУведомленияОкончанияСрокаДействия.СохранитьНастройку(
		Пользователь,
		СрокУведомления,
		ЧастотаУведомления);
	
КонецФункции

// Считывает настройку срока уведомления об окончании срока действия
Функция ПолучитьНастройкуУведомленияОкончанияСрокаДействия(Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	НастройкаУведомлений = РегистрыСведений.НастройкиУведомленияОкончанияСрокаДействия.ПолучитьНастройку(Пользователь);
	
	Если НастройкаУведомлений = Неопределено Тогда
		
		СрокУведомления = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.СрокУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		ЧастотаУведомления = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
		НастройкаУведомлений =
			Новый Структура("СрокУведомления, ЧастотаУведомления",
				СрокУведомления,
				ЧастотаУведомления);
		
	ИначеЕсли Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		Подписка = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		Если Подписка Тогда
			
			СрокУведомления = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.СрокУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
			НастройкаУведомлений.СрокУведомления = СрокУведомления;
			
			ЧастотаУведомления = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
			НастройкаУведомлений.ЧастотаУведомления = ЧастотаУведомления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкаУведомлений;
	
КонецФункции

#КонецОбласти

// Устанавливает настройку пользователя
Процедура УстановитьНастройкуПользователя(Пользователь, Настройка, ВидСобытия, Значение) Экспорт
	
	РегистрыСведений.НастройкиУведомлений.УстановитьНастройку(
		Пользователь, Настройка, ВидСобытия, Значение);
	
КонецПроцедуры

// Получает настройку пользователя
Функция ПолучитьНастройкуПользователя(Пользователь, Настройка, ВидСобытия) Экспорт
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		Значение = РегистрыСведений.НастройкиУведомлений.ПолучитьНастройку(
			Пользователь, Настройка, ВидСобытия);
		Если Значение = Неопределено Тогда
			Значение = ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия);
		КонецЕсли;
	Иначе
		Значение = ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Устанавливает подписку на уведомления по умолчанию
Процедура УстановитьНастройкуПоУмолчанию(Настройка, ВидСобытия, Значение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СтароеЗначение = ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия);
		
		РегистрыСведений.НастройкиУведомленийПоУмолчанию.УстановитьНастройку(Настройка, ВидСобытия, Значение);
		СкорректироватьПерсональныеНастройки(Настройка, ВидСобытия, Значение, СтароеЗначение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает подписку на уведомления по умолчанию
Функция ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия) Экспорт
	
	Значение = РегистрыСведений.НастройкиУведомленийПоУмолчанию.ПолучитьНастройку(Настройка, ВидСобытия);
	
	Если Значение = Неопределено Тогда
		Значение = ПолучитьСтандартноеЗначениеНастройки(Настройка, ВидСобытия);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СпособыУведомлений

// Переписывает данные о способе уведомления в регистре сведений
Процедура ЗаполнитьДанныеСпособаУведомления(
	СпособУведомления,
	ДанныеСпособовУведомления,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.СпособыУведомленияПользователей.УдалитьСпособУведомления(
		Пользователь, 
		СпособУведомления);
	
	Для Каждого ДанныеСпособаУведомления Из ДанныеСпособовУведомления Цикл
		
		РегистрыСведений.СпособыУведомленияПользователей.ДобавитьСпособУведомления(
			Пользователь, 
			СпособУведомления, 
			ДанныеСпособаУведомления.АдресЭлектроннойПочты);
		
	КонецЦикла;
	
КонецПроцедуры

// Считывает данные о способе уведомления из регистра сведений
Функция ПолучитьДанныеСпособаУведомления(СпособУведомления, Пользователь = Неопределено,
	ВключатьКонтактнуюИнформацию = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ДанныеИзКонтактнойИнформации = Неопределено;
	
	Если ВключатьКонтактнуюИнформацию Тогда
		
		Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
			БизнесПроцессыИЗадачиПереопределяемый.ПолучитьАдресЭлектроннойПочты(Пользователь, ДанныеИзКонтактнойИнформации);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСпособаУведомления = 
		РегистрыСведений.СпособыУведомленияПользователей.ПолучитьДанныеСпособаУведомления(
			Пользователь, 
			СпособУведомления);
	
	ДанныеСпособаУведомленияНРег = Новый Массив;
	
	Если ЗначениеЗаполнено(ДанныеИзКонтактнойИнформации) Тогда
		ДанныеИзКонтактнойИнформацииНРег = НРег(ДанныеИзКонтактнойИнформации);
		ДанныеСпособаУведомленияНРег.Добавить(ДанныеИзКонтактнойИнформацииНРег);
	КонецЕсли;
	
	Для Каждого АдресУведомления Из ДанныеСпособаУведомления Цикл
		
		АдресУведомленияНРег = НРег(АдресУведомления);
		
		Если ЗначениеЗаполнено(АдресУведомленияНРег)
			И ДанныеСпособаУведомленияНРег.Найти(АдресУведомленияНРег) = Неопределено Тогда
			ДанныеСпособаУведомленияНРег.Добавить(АдресУведомленияНРег);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСпособаУведомленияНРег;
	
КонецФункции

#КонецОбласти

#Область КонтрольСроков

// Обрабатывает регламентное задание контроля срока задач
Процедура КонтрольСрокаЗадача() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Уведомление о подходе сроков задач
	АктивныеЗадачиСПодписчиками = ВыбратьАктивныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОЗадачах(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныеЗадачиСПодписчиками Из АктивныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если ИспользоватьГрафикиРаботы Тогда
			
			График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
			
			Попытка
				СрокЗадачи = 
					КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
						График.Календарь, 
						ТекущаяДата, 
						СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
			Исключение
				
				ТекстПредупреждения =
					НСтр("ru = 'Не удалось получить разность дат по календарю:'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,,
					ТекстПредупреждения);
				
				СрокИсполнения = КонецДня(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
				СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
				СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
				
			КонецПопытки;
			
		Иначе
			
			СрокИсполнения = КонецДня(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
			СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
			СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
			
		КонецЕсли;
		
		Если СрокЗадачи > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаАктивныеЗадачиСПодписчиками.Задача,
				СтрокаАктивныеЗадачиСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
				СтрокаАктивныеЗадачиСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
	КонецЦикла;
	
	// Уведомление о просроченных задачах
	ПросроченныеЗадачиСПодписчиками = ВыбратьПросроченныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОЗадачах(МассивПодписчиков);
	
	Для Каждого СтрокаПросроченныеЗадачиСПодписчиками Из ПросроченныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченныеЗадачи) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченныеЗадачи Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаПросроченныеЗадачиСПодписчиками.Задача,
				СтрокаПросроченныеЗадачиСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ПросроченаЗадача,
				СтрокаПросроченныеЗадачиСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПросроченаЗадача,
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает регламентное задание контроля приближения окончания срока действия
Процедура КонтрольОкончанияСрокаДействия() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе срока действия документа
	АктивныеДокументыСПодписчиками = ВыбратьАктивныеДокументыСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеДокументыСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОкончанияСрокаДействия(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныеДокументыСПодписчиками Из АктивныеДокументыСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеДокументыСПодписчиками.Подписчик, "Пользователь");
		
		ДатаОкончанияДействия = КонецДня(СтрокаАктивныеДокументыСПодписчиками.ДатаОкончанияДействия);
		СрокОкончанияСекунды = ДатаОкончанияДействия - ТекущаяДата;
		СрокОкончания = Окр(СрокОкончанияСекунды / (3600*24));
		
		Если СрокОкончания > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаУведомления) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеДокументыСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаУведомления Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаАктивныеДокументыСПодписчиками.Документ,
			СтрокаАктивныеДокументыСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаАктивныеДокументыСПодписчиками.Документ,
				СтрокаАктивныеДокументыСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
				СтрокаАктивныеДокументыСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
			СтрокаАктивныеДокументыСПодписчиками.Документ,
			СтрокаАктивныеДокументыСПодписчиками.Подписчик);
		
	КонецЦикла;
	
	// Уведомление о завершившихся документах
	НеобработанныеЗавершившиесяДокументыСПодписчиками = ВыбратьЗавершившиесяДокументыСПодписчиками(ТекущаяДата);
	
	Для Каждого СтрокаЗавершившийсяДокументСПодписчиками Из НеобработанныеЗавершившиесяДокументыСПодписчиками Цикл
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаЗавершившийсяДокументСПодписчиками.Документ,
			СтрокаЗавершившийсяДокументСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаЗавершившийсяДокументСПодписчиками.Документ,
				СтрокаЗавершившийсяДокументСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
				СтрокаЗавершившийсяДокументСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
			СтрокаЗавершившийсяДокументСПодписчиками.Документ,
			СтрокаЗавершившийсяДокументСПодписчиками.Подписчик);
		
	КонецЦикла;
	
КонецПроцедуры

// Для закончившихся ранее документов добавляет записи, что уведомления обработаны
Процедура ОтметитьОтправкуУведомленийПоОкончившимсяРанееДокументам(Пользователь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДокументы.Ссылка,
	|	ВнутренниеДокументы.Ответственный,
	|	ВнутренниеДокументы.ДатаНачалаДействия,
	|	ВнутренниеДокументы.ДатаОкончанияДействия
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|ГДЕ
	|	ВнутренниеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ВнутренниеДокументы.Ответственный = &Пользователь
	|	И ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия = ИСТИНА
	|	И ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КОНЕЦПЕРИОДА(ВнутренниеДокументы.ДатаОкончанияДействия, ДЕНЬ) < КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(ВидСобытия, Выборка.Ссылка, Пользователь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Возвращает представление объекта с указанием его типа 
Функция ПолучитьПредставлениеОбъектУведомления(Объект)
	
	Возврат Строка(Объект) + "(" + ТипЗнч(Объект) + ")";
	
КонецФункции

// Возвращает строку для события журнала регистрации
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Уведомление о новых событиях'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Возвращает значение константы ИспользоватьУведомления
Функция ПолучитьИспользоватьУведомления()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьУведомления.Получить();
	
КонецФункции

// Возвращает значение константы РазрешитьИзменятьНастройкиУведомлений
Функция ПолучитьРазрешитьИзменятьНастройкиУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.РазрешитьИзменятьНастройкиУведомлений.Получить();
	
КонецФункции

// Устанавливает значение константы РазрешитьИзменятьНастройкиУведомлений
Процедура УстановитьРазрешитьИзменятьНастройкиУведомлений(РазрешитьИзменятьНастройкиУведомлений) Экспорт
	
	Если РазрешитьИзменятьНастройкиУведомлений <> ПолучитьРазрешитьИзменятьНастройкиУведомлений() Тогда
		Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(РазрешитьИзменятьНастройкиУведомлений);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с параметрами произошедшего события
Функция ПолучитьПараметрыСобытия(Событие)
	
	Попытка
		
		СтрокаXML = Событие.КонтекстСобытия.Получить();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		ПараметрыСобытия = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	Исключение
		
		ПараметрыСобытия = Новый Структура;
		
	КонецПопытки;
	
	Возврат ПараметрыСобытия;
	
КонецФункции

// Возвращает массив способов уведомления по умолчанию
Функция МассивСпособовУведомленияПоУмолчанию(ВидСобытия)
	
	МассивСпособовУведомления = Новый Массив;
	
	СписокСпособовУведомления = ПолучитьСписокСпособовУведомления();
	
	Для Каждого СпособУведомления Из СписокСпособовУведомления Цикл
		
		МассивСпособовУведомления.Добавить(СпособУведомления.Значение);
		
	КонецЦикла;
	
	Возврат МассивСпособовУведомления;
	
КонецФункции

// Возвращает полный путь папки
Функция ПолучитьПолныйПуть(Папка)
	
	ПапкаРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Папка.Ссылка, "Родитель");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
			
			ПолныйПуть = Строка(ПапкаРодитель) + "\" + ПолныйПуть;
			ПапкаРодитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПапкаРодитель, "Родитель");
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПолныйПуть = ПолныйПуть + Строка(Папка.Ссылка);
		
	Иначе
		
		ПолныйПуть = Строка(Папка.Ссылка);
		
	КонецЕсли;
	
	Возврат ПолныйПуть;
	
КонецФункции

// Добавляет значение в массив, если такого значения в нем еще нет
Процедура ДобавитьЗначениеВМассив(Значение, Массив, ДобавленоЗначениеВМассив = Ложь)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
		ДобавленоЗначениеВМассив = Истина;
	Иначе
		ДобавленоЗначениеВМассив = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина если переданная ссылка является ссылкой 
// на поддерживаемый системой уведомлений бизнес-процесс
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка)
	
	Возврат ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Исполнение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Поручение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Приглашение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Регистрация")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Согласование")
		ИЛИ ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Утверждение");
	
КонецФункции

#КонецОбласти

#Область ОбработкаБизнесСобытий

// Определяет тип объекта и вызывает соответствующее добавление уведомления
Процедура ДобавитьУведомлениеПоОбъекту(
	ПроизошедшееСобытие,
	Объект,
	ВидСобытия,
	ОбъектУведомления = Неопределено)
	
	Если ОбъектУведомления = Неопределено Тогда
		
		ОбъектУведомления = Объект;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ДобавитьУведомленияПоСообщению(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда
		
		ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ДобавитьУведомленияПоПроектнойЗадаче(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		ДобавитьУведомленияПоВходящемуДокументу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ДобавитьУведомленияПоВнутреннемуДокументу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПапкиВнутреннихДокументов") Тогда
		
		ДобавитьУведомленияПоПапкеВнутреннихДокументов(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		ДобавитьУведомленияПоИсходящемуДокументу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ДобавитьУведомленияПоМероприятию(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		
		ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		
		ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Объект, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по задаче исполнителя
Процедура ДобавитьУведомленияПоЗадачеИсполнителя(
	ПроизошедшееСобытие,
	ЗадачаИсполнителя,
	ВидСобытия,
	ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если ЗадачаИсполнителя.Выполнена Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		БылИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("БылИсполнитель") Тогда
			Если ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
				БылИсполнительПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'от исполнителя: ""%1""'"),
					ПараметрыСобытия.БылИсполнитель);
			КонецЕсли;
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталИсполнитель") Тогда
			Если ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
				СталИсполнительПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'к исполнителю: ""%1""'"),
					ПараметрыСобытия.СталИсполнитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылИсполнительПредставление)
			ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перенаправлена %1 %2'"),
				БылИсполнительПредставление,
				СталИсполнительПредставление);
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияИсполнителейЗадачи(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		ДобавитьУведомленияПодписчиковПоОбъекту(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Если была выполнена эта задача - тогда уведомим подписчиков
		Если ЗадачаИсполнителя = ОбъектУведомления Тогда
			ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадачаИсполнителя.БизнесПроцесс) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				ЗадачаИсполнителя.БизнесПроцесс,
				ВидСобытия,
				ОбъектУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение задачи
		ДобавитьУведомленияПодписчиковПоСобытию(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ЗадачаИсполнителя.Автор);
		ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления, Ложь, Ложь);
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			
		ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);				
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);	
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по файлу
Процедура ДобавитьУведомленияПоФайлу(ПроизошедшееСобытие, Файл, ВидСобытия, ОбъектУведомления) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			Файл.ВладелецФайла,
			ВидСобытия,
			ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение файла
		ДобавитьУведомленияПодписчиковПоСобытию(Файл, ВидСобытия, ОбъектУведомления, Файл.Автор);
		ДобавитьУведомленияПодписчиковПоСобытию(Файл, ВидСобытия, ОбъектУведомления, Файл.Редактирует);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Файл, ВидСобытия, ОбъектУведомления);

	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Файл, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по папке файлов
Процедура ДобавитьУведомленияПоПапкеФайлов(ПроизошедшееСобытие, Папка, ВидСобытия, ОбъектУведомления) 
	
	ДобавитьУведомленияПодписчиковПоОбъекту(Папка, ВидСобытия, ОбъектУведомления);
	
КонецПроцедуры

// Добавляет уведомление по входящему документу
Процедура ДобавитьУведомленияПоВходящемуДокументу(
	ПроизошедшееСобытие,
	ВходящийДокумент,
	ВидСобытия,
	ОбъектУведомления) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение входящего документа
		ДобавитьУведомленияПодписчиковПоСобытию(
			ВходящийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ВходящийДокумент.Адресат);
		ДобавитьУведомленияПодписчиковПоСобытию(
			ВходящийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ВходящийДокумент.Ответственный);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ВходящийДокумент, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ВходящийДокумент, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по внутреннему документу
Процедура ДобавитьУведомленияПоВнутреннемуДокументу(
	ПроизошедшееСобытие,
	ВнутреннийДокумент,
	ВидСобытия,
	ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда
		
		ДобавитьУведомлениеПоОбъекту(
			ПроизошедшееСобытие,
			ВнутреннийДокумент.Папка,
			ВидСобытия,
			ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		ДобавитьУведомленияПодписчиковПоСобытию(
			ВнутреннийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ВнутреннийДокумент.Подготовил);
		ДобавитьУведомленияПодписчиковПоСобытию(
			ВнутреннийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ВнутреннийДокумент.Утвердил);
		ДобавитьУведомленияПодписчиковПоСобытию(
			ВнутреннийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ВнутреннийДокумент.Ответственный);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ВнутреннийДокумент, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ВнутреннийДокумент, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по папке внутренних документов
Процедура ДобавитьУведомленияПоПапкеВнутреннихДокументов(
	ПроизошедшееСобытие,
	Папка,
	ВидСобытия,
	ОбъектУведомления)
	
	ДобавитьУведомленияПодписчиковПоОбъекту(Папка, ВидСобытия, ОбъектУведомления);
	
КонецПроцедуры

// Добавляет уведомление по исходящему документу
Процедура ДобавитьУведомленияПоИсходящемуДокументу(
	ПроизошедшееСобытие,
	ИсходящийДокумент,
	ВидСобытия,
	ОбъектУведомления) 
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		ДобавитьУведомленияПодписчиковПоСобытию(
			ИсходящийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ИсходящийДокумент.Подготовил);
		ДобавитьУведомленияПодписчиковПоСобытию(
			ИсходящийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ИсходящийДокумент.Подписал);
		ДобавитьУведомленияПодписчиковПоСобытию(
			ИсходящийДокумент,
			ВидСобытия,
			ОбъектУведомления,
			ИсходящийДокумент.Ответственный);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ИсходящийДокумент, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ИсходящийДокумент, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по бизнес-процессам
Процедура ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, БизнесПроцесс, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
			ДобавитьУведомленияПодписчиковПоСобытию(
				БизнесПроцесс,
				ВидСобытия,
				ОбъектУведомления,
				БизнесПроцесс.Автор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ВедущаяЗадача,
				ВидСобытия,
				ОбъектУведомления);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс.ГлавнаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				БизнесПроцесс.ГлавнаяЗадача,
				ВидСобытия,
				ОбъектУведомления);
		КонецЕсли;
		
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
						
		Если ЗначениеЗаполнено(БизнесПроцесс.Автор)
			И БизнесПроцесс.Автор <> ПроизошедшееСобытие.Автор Тогда						
			
			ДобавитьУведомленияПодписчиковПоСобытию(
				БизнесПроцесс,
				ВидСобытия,
				ОбъектУведомления,
				БизнесПроцесс.Автор);
				
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.ПринятаКИсполнению = ИСТИНА
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Задача = ВыборкаДетальныеЗаписи.Ссылка;
			
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				Задача,
				ВидСобытия,
				ОбъектУведомления);
				
		КонецЦикла;		
		
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);		
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по событию
Процедура ДобавитьУведомленияПодписчиковПоСобытию(
	Объект,
	ВидСобытия,
	ОбъектУведомления,
	Подписчик,
	ДополнительноеОписание = Неопределено)
	
	Если ДополнительноеОписание <> Неопределено Тогда
		ТекстУведомления = ДополнительноеОписание;
	Иначе
		ИсточникУведомления = ПолучитьПредставлениеБизнесСобытия(ВидСобытия, Объект, Истина);
		ПричинаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователь подписан на ""%1""'"),
			ПолучитьПредставлениеОбъектУведомления(ВидСобытия));
		ТекстУведомления = СформироватьТекстУведомления(
			ОбъектУведомления,
			ВидСобытия,
			ИсточникУведомления,
			ПричинаУведомления);
	КонецЕсли;
	
	ДобавитьУведомление(ОбъектУведомления, Подписчик, ТекстУведомления, ВидСобытия, Объект, Ложь);
	
КонецПроцедуры

// Записывает уведомления по объекту
Процедура ДобавитьУведомленияПодписчиковПоОбъекту(
	Объект,
	ВидСобытия,
	ОбъектУведомления,
	ДополнительноеОписание = Неопределено)
	
	Если ДополнительноеОписание <> Неопределено Тогда
		ТекстУведомления = ДополнительноеОписание;
	Иначе
		ИсточникУведомления = ПолучитьПредставлениеБизнесСобытия(ВидСобытия, Объект, Истина);
		ПричинаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользователь подписан на ""%1""'"),
			ПолучитьПредставлениеОбъектУведомления(Объект));
		ТекстУведомления = СформироватьТекстУведомления(
			ОбъектУведомления,
			ВидСобытия,
			ИсточникУведомления,
			ПричинаУведомления);
	КонецЕсли;
	
	СписокПодписчиков =
		РегистрыСведений.ПодпискиНаУведомления.ПолучитьМассивПодписчиковПоОбъекту(ВидСобытия, Объект);
	Для Каждого СтрокаПодписчик Из СписокПодписчиков Цикл
		ДобавитьУведомление(
			ОбъектУведомления,
			СтрокаПодписчик,
			ТекстУведомления,
			ВидСобытия,
			Объект,
			Истина);
	КонецЦикла;
	
КонецПроцедуры

// Записывает уведомления по задаче с учетом исполнителей по ролям
Процедура ДобавитьУведомленияИсполнителейЗадачи(
	ЗадачаИсполнителя,
	ВидСобытия,
	ОбъектУведомления,
	ПроверятьНастройки = Ложь,
	ДобавитьПодписчиковНаИсполнителей = Ложь,
	ДополнительноеОписание = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗадачаИсполнителя.Исполнитель) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ЗадачаИсполнителя.Исполнитель,
			ДополнительноеОписание);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(
			ЗадачаИсполнителя.Исполнитель,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		
	Иначе
		
		ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(
			ЗадачаИсполнителя.РольИсполнителя, 
			ЗадачаИсполнителя.ОсновнойОбъектАдресации, 
			ЗадачаИсполнителя.ДополнительныйОбъектАдресации);
		
		Для Каждого СтрокаИсполнитель Из ИсполнителиРоли Цикл
			
			ДобавитьУведомленияПодписчиковПоСобытию(
				ЗадачаИсполнителя,
				ВидСобытия,
				ОбъектУведомления,
				СтрокаИсполнитель.Исполнитель,
				ДополнительноеОписание);
			
			ДобавитьУведомленияПодписчиковПоОбъекту(
				СтрокаИсполнитель.Исполнитель,
				ВидСобытия,
				ОбъектУведомления,
				ДополнительноеОписание);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст уведомления
Функция СформироватьТекстУведомления(
		ОбъектУведомления,
		ВидСобытия,
		ПояснениеУведомления = Неопределено,
		ПричинаУведомления = Неопределено)
	
	ТекстУведомления = "";
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ТекстУведомления,
		Символы.ПС,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Событие: %1 ""%2""'"),
			ВидСобытия,
			ОбъектУведомления));
	
	Если ЗначениеЗаполнено(ПояснениеУведомления) Тогда
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пояснение: %1'"),
				ПояснениеУведомления));
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПричинаУведомления) Тогда
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ТекстУведомления,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Причина уведомления: %1'"),
				ПричинаУведомления));
				
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Записывает уведомления в регистр сведений
Процедура ДобавитьУведомление(
	ОбъектУведомления,
	Пользователь,
	ТекстУведомления,
	ВидСобытия,
	ОбъектПодписки,
	ПодпискаНаОбъект = Ложь) 
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаУведомления = ПолучитьНастройкуУведомления(
		ВидСобытия,
		ОбъектУведомления,
		Пользователь,
		ОбъектПодписки,
		ПодпискаНаОбъект);
	
	Если НастройкаУведомления.ПодпискаАктивна Тогда
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(ОбъектУведомления, Пользователь);
		
		Если ЕстьПраваНаОбъект Тогда
			СпособУведомления = "";
			Для Каждого СпособУведомления Из НастройкаУведомления.СпособыУведомления Цикл
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
					ОбъектУведомления,
					Пользователь,
					СпособУведомления,
					ТекстУведомления,
					ВидСобытия,
					ОбъектПодписки);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
// Функция проверяет наличие подписки на вид события по объекту или просто на вид события
Функция ПолучитьНастройкуУведомления(
	ВидСобытия,
	ОбъектУведомления,
	Пользователь,
	ОбъектПодписки,
	ПодпискаНаОбъект)
	
	Если ПодпискаНаОбъект Тогда
		
		ПодпискаПользователя =
			РегистрыСведений.ПодпискиНаУведомления.ПроверитьПодпискуПоОбъекту(
				ВидСобытия,
				ОбъектПодписки,
				Пользователь);
				
	Иначе
		
		РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
		ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(Перечисления.НастройкиУведомлений.Подписка, ВидСобытия);
		ПодпискаПользователя = РегистрыСведений.ПодпискиНаУведомления.ПроверитьПодпискуПоВидуБизнесСобытия(
			ВидСобытия,
			ОбъектПодписки,
			Пользователь);
		
		Если РазрешитьИзменятьНастройкиУведомлений Тогда
			
			ПодпискаПользователя.ПодпискаАктивна = (НЕ ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПоУмолчанию)
				ИЛИ (ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПользователя.ПодпискаАктивна);
			
		Иначе
			
			ПодпискаПользователя.ПодпискаАктивна = ПодпискаПоУмолчанию
				ИЛИ (ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПользователя.ПодпискаАктивна);
			
		КонецЕсли;
		
		Если ПодпискаПользователя.СпособыУведомления.Количество() = 0 Тогда
			
			ПодпискаПользователя.СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(ВидСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодпискаПользователя.ПодпискаАктивна Тогда
		
		// Обработка специфических случаев, когда посылка уведомления не требуется
		Если ТипЗнч(ОбъектУведомления) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			ПодпискаПользователя.ПодпискаАктивна = 
				ПроверитьПодпискуНаУведомленияПоСообщению(
					ВидСобытия,
					ОбъектУведомления,
					Пользователь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодпискаПользователя;
	
КонецФункции

// Проверяет права доступа пользователя на объект уведомления
Функция ПроверитьПраваДоступа(Объект, Пользователь)
	
	ЕстьПраваНаОбъект = Ложь;
	Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Объект, Пользователь).Чтение Тогда 
		ЕстьПраваНаОбъект = Истина;
	Иначе	
		ЕстьПраваНаОбъект = Ложь;
	КонецЕсли;
	
	Возврат ЕстьПраваНаОбъект;
	
КонецФункции

Функция ПолучитьОтказыОтПодпискиПоВидуБизнесСобытия(ВидСобытия, Пользователь, СпособУведомления)
	
	ОтказыОтПодписки = 
		РегистрыСведений.ПодпискиНаУведомления.ПолучитьОтказОтПодпискиПоВидуБизнесСобытия(
			ВидСобытия,
			Пользователь,
			СпособУведомления);
	
	Возврат ОтказыОтПодписки;
	
КонецФункции

// Добавляет уведомление по сообщению
Процедура ДобавитьУведомленияПоСообщению(
	ПроизошедшееСобытие,
	Сообщение,
	ВидСобытия,
	ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если Сообщение = ОбъектУведомления Тогда
			
			// Объект уведомления является самим сообщением
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					ОбъектУведомления);
			КонецЕсли;
			
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				Сообщение.ВладелецСообщения,
				ВидСобытия,
				ОбъектУведомления);
			
		Иначе
			
			// Объект уведомления является ответом на сообщение
			ДобавитьУведомленияПодписчиковПоСобытию(Сообщение, ВидСобытия, ОбъектУведомления, Сообщение.Автор);
			ДобавитьУведомленияПодписчиковПоОбъекту(Сообщение, ВидСобытия, ОбъектУведомления);
			
			Если ЗначениеЗаполнено(Сообщение.Родитель) Тогда
				ДобавитьУведомлениеПоОбъекту(
					ПроизошедшееСобытие,
					Сообщение.Родитель,
					ВидСобытия,
					ОбъектУведомления);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Сообщение, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по теме
Процедура ДобавитьУведомленияПоТеме(ПроизошедшееСобытие, Тема, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на тему
		ДобавитьУведомленияПодписчиковПоСобытию(Тема, ВидСобытия, ОбъектУведомления, Тема.Автор);
		ДобавитьУведомленияПодписчиковПоОбъекту(Тема, ВидСобытия, ОбъектУведомления);
		
		Если ЗначениеЗаполнено(Тема.Документ) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Тема.Документ, ВидСобытия, ОбъектУведомления);
		КонецЕсли;
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Тема, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по проекту
Процедура ДобавитьУведомленияПоПроекту(ПроизошедшееСобытие, Проект, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		// Объект уведомления является ответом на обсуждение проекта
		Для Каждого ИсполнительПроектнойКоманды Из Проект.ПроектнаяКоманда Цикл
			ДобавитьУведомленияПодписчиковПоСобытию(
				Проект,
				ВидСобытия,
				ОбъектУведомления,
				ИсполнительПроектнойКоманды.Исполнитель);
		КонецЦикла;
		ДобавитьУведомленияПодписчиковПоСобытию(Проект, ВидСобытия, ОбъектУведомления, Проект.Руководитель);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Проект, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Проект, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по проектной задаче
Процедура ДобавитьУведомленияПоПроектнойЗадаче(
	ПроизошедшееСобытие,
	ПроектнаяЗадача,
	ВидСобытия,
	ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение проектной задачи
		Для Каждого ИсполнительПроектнойЗадачи Из ПроектнаяЗадача.Исполнители Цикл
			ДобавитьУведомленияПодписчиковПоСобытию(
				ПроектнаяЗадача,
				ВидСобытия,
				ОбъектУведомления,
				ИсполнительПроектнойЗадачи.Исполнитель);
		КонецЦикла;
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ПроектнаяЗадача, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ПроектнаяЗадача, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по мероприятию
Процедура ДобавитьУведомленияПоМероприятию(
	ПроизошедшееСобытие,
	Мероприятие,
	ВидСобытия,
	ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Объект уведомления является ответом на обсуждение внутреннего документа
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Мероприятие;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		Записи = НаборЗаписей.Выгрузить();
		Для Каждого Запись Из Записи Цикл
			ДобавитьУведомленияПодписчиковПоСобытию(
				Мероприятие,
				ВидСобытия,
				ОбъектУведомления,
				Запись.Исполнитель);
		КонецЦикла;	
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			Мероприятие,
			ВидСобытия,
			ОбъектУведомления,
			Мероприятие.Организатор);
		ДобавитьУведомленияПодписчиковПоСобытию(
			Мероприятие,
			ВидСобытия,
			ОбъектУведомления,
			Мероприятие.Секретарь);
		ДобавитьУведомленияПодписчиковПоСобытию(
			Мероприятие,
			ВидСобытия,
			ОбъектУведомления,
			Мероприятие.Председатель);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Мероприятие, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Мероприятие, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет уведомление по категории данных
Процедура ДобавитьУведомленияПоКатегорииДанных(ПроизошедшееСобытие, Категория, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.УдалениеИзКатегории Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		Если ПараметрыСобытия.Свойство("Объект") Тогда
			ДобавленныйВКатегориюОбъект = ПараметрыСобытия.Объект;
		Иначе
			ДобавленныйВКатегориюОбъект = Категория;
		КонецЕсли;
		
		ДобавитьУведомленияПодписчиковПоОбъекту(
			ОбъектУведомления,
			ВидСобытия,
			ДобавленныйВКатегориюОбъект);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Категория, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет является ли верной подписка на сообщение, чтобы
// автор сообщения не получал уведомления о своих собственных ответах
Функция ПроверитьПодпискуНаУведомленияПоСообщению(ВидСобытия, Сообщение, Пользователь)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		// Не посылать уведомление о создание нового сообщения автору этого сообщения.
		Если Сообщение.Автор = Пользователь Тогда	
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОтправкаУведомлений

// Отправляет уведомления из очереди уведомлений
Функция ОтправитьУведомления()
	
	Уведомления = РегистрыСведений.ОчередьУведомлений.ПолучитьНеотправленныеУведомления();
	
	СформированныеУведомления = Новый ТаблицаЗначений;
	СформированныеУведомления.Колонки.Добавить("Пользователь");
	СформированныеУведомления.Колонки.Добавить("СпособУведомления");
	СформированныеУведомления.Колонки.Добавить("ТемаУведомления");
	СформированныеУведомления.Колонки.Добавить("ТекстУведомления");
	СформированныеУведомления.Колонки.Добавить("Уведомления");
	СформированныеУведомления.Колонки.Добавить("Файлы");
	
	ПолучателиУведомлений = Новый Массив;
	Для Каждого Уведомление Из Уведомления Цикл
		Если ПолучателиУведомлений.Найти(Уведомление.Пользователь) = Неопределено Тогда
			ПолучателиУведомлений.Добавить(Уведомление.Пользователь);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл
		
		СформированныеУведомления.Очистить();
		СпособыУведомления = ПолучитьСписокСпособовУведомления();
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			
			ОбработанныеВидыБизнесСобытий = Новый Массив;
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.СозданиеФайла, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеФайла);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.СозданиеСообщения, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.СозданиеЗадачи, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ПросроченаЗадача,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы, 
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы);
				
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
			
			СформироватьУведомленияПоВидуБизнесСобытия(
				ПолучательУведомления, 
				СпособУведомления.Значение,
				Перечисления.СобытияУведомлений.ПросроченКонтроль,
				Уведомления, 
				СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
			
			СформироватьУведомленияПоСобытиям(
				ПолучательУведомления, 
				СпособУведомления.Значение, 
				ОбработанныеВидыБизнесСобытий, 
				Уведомления, 
				СформированныеУведомления);
			
		КонецЦикла;
			
		Для Каждого СформированноеУведомление Из СформированныеУведомления Цикл
			ОтправитьУведомление(СформированноеУведомление);
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

// Формирует текст уведомления пользователя по заданному виду событий
Процедура СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		УведомленияПодписки = Новый Массив;
		ОбъектыПодписки = Новый Массив;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений")
				ИЛИ ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ПредметОбсуждения = Уведомление.ОбъектПодписки.Документ; 
			Если ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено  Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ТемаОбсуждения = Уведомление.ОбъектПодписки.ВладелецСообщения;
			Уведомление.ОбъектПодписки = ТемаОбсуждения;
			ПредметОбсуждения = ТемаОбсуждения.Документ;
			Если ОбъектыПодписки.Найти(ТемаОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(ТемаОбсуждения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ТемаУведомления =
					СформироватьТемуУведомленияПоОбъектамУведомления(
						ОбъектПодписки,
						ВидСобытия,
						ОбъектыУведомления,
						ПолучательУведомления);
				
				ТекстУведомления = 
					СформироватьТекстУведомленияПоОбъектамУведомления(
						ОбъектПодписки, 
						ВидСобытия, 
						ОбъектыУведомления,
						ПолучательУведомления);
						
				СформированноеУведомление = СформированныеУведомления.Добавить();
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ТемаУведомления = ТемаУведомления;
				СформированноеУведомление.ТекстУведомления = ТекстУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		УведомленияПодписки = Новый Массив;
		ОбъектыПодписки = Новый Массив;
		ОбъектыУведомленияСПодпиской = Новый Массив;
		ОбъектыУведомленияСОтказом = Новый Массив;
		
		БизнесПроцессыРодители = Новый ТаблицаЗначений;
		БизнесПроцессыРодители.Колонки.Добавить("ОбъектПодписки");
		БизнесПроцессыРодители.Колонки.Добавить("Родитель");
		ОтказыОтПодписки = ПолучитьОтказыОтПодпискиПоВидуБизнесСобытия(
			ВидСобытия,
			ПолучательУведомления,
			СпособУведомления);
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если Не ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДобавитьВМассивСПроверкойПодписки(
				Уведомление.Объект,
				Уведомление.ОбъектПодписки,
				ОбъектыПодписки,
				БизнесПроцессыРодители,
				ОтказыОтПодписки,
				ОбъектыУведомленияСПодпиской,
				ОбъектыУведомленияСОтказом);
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЯвляетсяПотомкомОбъектовПодписки(Уведомление.ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено
					И ОбъектыУведомленияСОтказом.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ТемаУведомления =
					СформироватьТемуУведомленияПоОбъектамУведомления(
						ОбъектПодписки,
						ВидСобытия,
						ОбъектыУведомления,
						ПолучательУведомления);
				
				ТекстУведомления = 
					СформироватьТекстУведомленияПоОбъектамУведомления(
						ОбъектПодписки, 
						ВидСобытия, 
						ОбъектыУведомления,
						ПолучательУведомления);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ТемаУведомления = ТемаУведомления;
				СформированноеУведомление.ТекстУведомления = ТекстУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		ВключеноВыполнениеЗадачПоПочте = Ложь;
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
			
			ВключеноВыполнениеЗадачПоПочте = ПолучитьНастройкуПользователя(
				ПолучательУведомления,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте, 
				Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи 
				И ВключеноВыполнениеЗадачПоПочте Тогда
				
				// Если включена возможность выполнения задач по почте, то необходимо формировать
				// отдельное уведомление на каждую задачу.
				Для Каждого Уведомление Из УведомленияПользователя Цикл
					Файлы = Неопределено;
					
					ТемаУведомления = 
						ВыполнениеЗадачПоПочтеСервер.СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
							Уведомление.Объект);
					
					ТекстУведомления = 
						ВыполнениеЗадачПоПочтеСервер.СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
							Уведомление.Объект, ПолучательУведомления, Файлы);
						
					СформированноеУведомление = СформированныеУведомления.Добавить();
					СформированноеУведомление.Пользователь = ПолучательУведомления;
					СформированноеУведомление.СпособУведомления = СпособУведомления;
					СформированноеУведомление.ТемаУведомления = ТемаУведомления;
					СформированноеУведомление.ТекстУведомления = ТекстУведомления;
					СформированноеУведомление.Уведомления = Новый Массив;
					СформированноеУведомление.Уведомления.Добавить(Уведомление);
					СформированноеУведомление.Файлы = Файлы;
					
				КонецЦикла;
			Иначе
				
				ТемаУведомления =
					СформироватьТемуУведомленияПоОбъектамУведомления(
						ОбъектПодписки,
						ВидСобытия,
						ОбъектыУведомления,
						ПолучательУведомления);
				
				ТекстУведомления = 
					СформироватьТекстУведомленияПоОбъектамУведомления(
						ОбъектПодписки, 
						ВидСобытия, 
						ОбъектыУведомления,
						ПолучательУведомления);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ТемаУведомления = ТемаУведомления;
				СформированноеУведомление.ТекстУведомления = ТекстУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			
			ТемаУведомления =
				СформироватьТемуУведомленияПоОбъектамУведомления(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления);
			
			ТекстУведомления = 
				СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, 
					ВидСобытия, 
					ОбъектыУведомления,
					ПолучательУведомления);
			
			СформированноеУведомление = СформированныеУведомления.Добавить();
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ТемаУведомления = ТемаУведомления;
			СформированноеУведомление.ТекстУведомления = ТекстУведомления;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		ДополнительныеОписания = Новый Соответствие;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
				ДополнительныеОписания.Вставить(Уведомление.Объект, Уведомление.ТекстУведомления);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			
			ТемаУведомления =
				СформироватьТемуУведомленияПоОбъектамУведомления(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления);
			
			ТекстУведомления = 
				СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, 
					ВидСобытия, 
					ОбъектыУведомления,
					ПолучательУведомления,
					ДополнительныеОписания);
			
			СформированноеУведомление = СформированныеУведомления.Добавить();
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ТемаУведомления = ТемаУведомления;
			СформированноеУведомление.ТекстУведомления = ТекстУведомления;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Если ОбъектыУведомления.Количество() > 0 Тогда
			
			ТемаУведомления =
				СформироватьТемуУведомленияПоОбъектамУведомления(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления);
			
			ТекстУведомления = 
				СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, 
					ВидСобытия, 
					ОбъектыУведомления,
					ПолучательУведомления);
			
			СформированноеУведомление = СформированныеУведомления.Добавить();
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ТемаУведомления = ТемаУведомления;
			СформированноеУведомление.ТекстУведомления = ТекстУведомления;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			
		КонецЕсли;	
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
				
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		ОбъектыУведомленияПоЗадачам = Новый Массив;
		ОбъектыУведомленияПоПроцессам = Новый Массив;
		
		УведомленияПодписки = Новый Массив;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ОбъектыУведомленияПоЗадачам.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
					ОбъектыУведомленияПоЗадачам.Добавить(Уведомление.ОбъектПодписки);
				КонецЕсли;
			Иначе
			    Если ОбъектыУведомленияПоПроцессам.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
					ОбъектыУведомленияПоПроцессам.Добавить(Уведомление.ОбъектПодписки);
				КонецЕсли;
			КонецЕсли;
			    			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Если ОбъектыУведомленияПоЗадачам.Количество() > 0 Тогда
			
			ТемаУведомления =
				СформироватьТемуУведомленияПоОбъектамУведомления(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомленияПоЗадачам,
					ПолучательУведомления);
			
			ТекстУведомления = 
				СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, 
					ВидСобытия, 
					ОбъектыУведомленияПоЗадачам,
					ПолучательУведомления);
			
			СформированноеУведомление = СформированныеУведомления.Добавить();
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ТемаУведомления = ТемаУведомления;
			СформированноеУведомление.ТекстУведомления = ТекстУведомления;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			
		КонецЕсли;
		
		Если ОбъектыУведомленияПоПроцессам.Количество() > 0 Тогда
			
			ТемаУведомления =
				СформироватьТемуУведомленияПоОбъектамУведомления(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомленияПоПроцессам,
					ПолучательУведомления);
			
			ТекстУведомления = 
				СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, 
					ВидСобытия, 
					ОбъектыУведомленияПоПроцессам,
					ПолучательУведомления);
			
			СформированноеУведомление = СформированныеУведомления.Добавить();
			СформированноеУведомление.Пользователь = ПолучательУведомления;
			СформированноеУведомление.СпособУведомления = СпособУведомления;
			СформированноеУведомление.ТемаУведомления = ТемаУведомления;
			СформированноеУведомление.ТекстУведомления = ТекстУведомления;
			СформированноеУведомление.Уведомления = УведомленияПодписки;
			
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", ПолучательУведомления);
		Отбор.Вставить("СпособУведомления", СпособУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		
		УведомленияПодписки = Новый Массив;
		ОбъектыПодписки = Новый Массив;	
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
		КонецЦикла;
		
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;	
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ТемаУведомления =
					СформироватьТемуУведомленияПоОбъектамУведомления(
						ОбъектПодписки,
						ВидСобытия,
						ОбъектыУведомления,
						ПолучательУведомления);
				
				ТекстУведомления = 
					СформироватьТекстУведомленияПоОбъектамУведомления(
						ОбъектПодписки, 
						ВидСобытия, 
						ОбъектыУведомления,
						ПолучательУведомления);
						
				СформированноеУведомление = СформированныеУведомления.Добавить();
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.ТемаУведомления = ТемаУведомления;
				СформированноеУведомление.ТекстУведомления = ТекстУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст уведомления пользователя по всем видам событий, кроме указанных
Процедура СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТемаУведомления =
			СформироватьТемуУведомленияПоСобытию(
				Уведомление.ОбъектПодписки, 
				Уведомление.ВидСобытия, 
				Уведомление.Объект,
				ПолучательУведомления,
				Уведомление.ТекстУведомления);
		
		ТекстУведомления =
			СформироватьТекстУведомленияПоСобытию(
				Уведомление.ОбъектПодписки, 
				Уведомление.ВидСобытия, 
				Уведомление.Объект,
				ПолучательУведомления,
				Уведомление.ТекстУведомления);
				
		УведомленияПодписки = Новый Массив;
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
		СформированноеУведомление = СформированныеУведомления.Добавить();
		СформированноеУведомление.Пользователь = ПолучательУведомления;
		СформированноеУведомление.СпособУведомления = СпособУведомления;
		СформированноеУведомление.ТемаУведомления = ТемаУведомления;
		СформированноеУведомление.ТекстУведомления = ТекстУведомления;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует тему уведомления пользователя по объекту и произошедшим событиям.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления)
	
	ТемаУведомления = "";
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
			ПредставлениеОбъектаПодписки = 				
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в папке ""%1""'
						|"),
					ПолныйПутьПапки);		
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ПредставлениеОбъектаПодписки = 				
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в входящем документе ""%1""'
						|"),
					ОбъектПодписки.Ссылка);	
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ПредставлениеОбъектаПодписки = 				
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'во внутреннем документе ""%1""'
						|"),
					ОбъектПодписки.Ссылка);	
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ПредставлениеОбъектаПодписки = 				
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в исходящем документе ""%1""'
						|"),
					ОбъектПодписки.Ссылка);	
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
			ПредставлениеОбъектаПодписки = 				
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в мероприятии ""%1""'
						|"),
					ОбъектПодписки.Ссылка);
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новый файл ""%1"" %2'"),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новые файлы (%1) %2'"),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента Тогда 
		
		ПолныйПутьПапки = ПолучитьПолныйПуть(ОбъектПодписки.Ссылка);
		ПредставлениеОбъектаПодписки = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в папке ""%1""'
					|"),
				ПолныйПутьПапки);
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новый документ ""%1"" %2'"),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новые документы (%1) %2'"),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
		КонецЕсли;
	
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки.Ссылка, "ВладелецСообщения");
			ПредставлениеОбъектаПодписки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в теме ""%1""'
						|"),
					ТемаСообщения);
		ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			ПредставлениеОбъектаПодписки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в теме ""%1""'
						|"),
					ОбъектПодписки.Ссылка);
		Иначе
			ПредставлениеОбъектаПодписки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в обсуждении ""%1""'
						|"),
					ОбъектПодписки.Ссылка);
		КонецЕсли;
		
		ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Новое сообщение %1'"),
			ПредставлениеОбъектаПодписки);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новая задача ""%1""'"),
					ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Новые задачи (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перенаправлена задача ""%1""'"),
					ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Задачи перенаправлены (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение задачи ""%1"" отменено'"),
					ОбъектУведомления.Ссылка);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отменено выполнение задач (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия);
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: ""%2""'"),
					ПредставлениеСрока,
					ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подошел срок контроля (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия);
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: ""%2""'"),
					ПредставлениеСрока,
					ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Истекли сроки контроля (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия);
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: ""%2""'"),
					ПредставлениеСрока,
					ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подошел срок выполнения задач (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Приближается окончание срока действия документа ""%1""'"),
					Строка(ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Приближается окончание срока действия документов (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Закончился срок действия документа ""%1""'"),
					Строка(ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Закончился срок действия документов (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = ПолучитьПредставлениеСрока(
				ОбъектУведомления.Исполнитель, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия);
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1: ""%2""'"),
					ПредставлениеСрока,
					ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Просрочены задачи (%1)'"),
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ПредставлениеОбъектаПодписки = "";
			
		Иначе
			
			ПредставлениеОбъектаПодписки =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ' процесса ""%1""'
						|"),
					ОбъектПодписки.Наименование);
			
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнена задача ""%1""'"),
					ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнены задачи (%1)%2'"),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача прервана ""%1""'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс прерван ""%1""'");
			КонецЕсли;
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи прерваны (%1)'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы прерваны (%1)'");
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача остановлена ""%1""'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс остановлен ""%1""'");
			КонецЕсли;
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи остановлены (%1)'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы остановлены (%1)'");
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача возобновлена ""%1""'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс возобновлен ""%1""'");
			КонецЕсли;
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи возобновлены (%1)'");
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы возобновлены (%1)'");
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТемаУведомления,
					КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.СозданиеУведомленияПрограммы Тогда
		
		ТемаУведомления = "Уведомления 1С Документооборот";
		
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует текст уведомления пользователя по объекту и произошедшим событиям.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	ДополнительныеОписания = Неопределено)
	
	ТекстУведомления = "";
	
	Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
		
		Если ДополнительныеОписания <> Неопределено
			И ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
			ДополнительноеОписание = ОбъектыУведомления.Количество();
		Иначе
			ДополнительноеОписание = Неопределено;
		КонецЕсли;
		
		СформироватьОписаниеОбъектаУведомления(
			ОбъектУведомления,
			ТекстУведомления,
			ПолучательУведомления,
			ВидСобытия,
			ДополнительноеОписание);
		
	КонецЦикла;
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, Символы.ПС, "<BR>");
	
	ТекстУведомления = 
		"<html>
		|<body>
		|" + ТекстУведомления + "
		|</body>
		|</html>";
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	ТекстУведомленияИзСобытий)
	
	Возврат ПолучитьПредставлениеБизнесСобытия(ВидСобытия, ОбъектПодписки, Истина);
	
КонецФункции

// Формирует текст уведомления по событию.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	ТекстУведомленияИзСобытий)
	
	ТекстУведомления = "";
	ДобавлятьОписаниеОбъектаПодписки = Истина;
	
	Если ОбъектУведомления <> ОбъектПодписки И ДобавлятьОписаниеОбъектаПодписки Тогда
		СформироватьОписаниеОбъектаУведомления(
			ОбъектПодписки,
			ТекстУведомления,
			ПолучательУведомления,
			ВидСобытия);
		СформироватьОписаниеОбъектаУведомления(
			ОбъектУведомления,
			ТекстУведомления,
			ПолучательУведомления,
			ВидСобытия);
	Иначе
		СформироватьОписаниеОбъектаУведомления(
			ОбъектУведомления,
			ТекстУведомления,
			ПолучательУведомления,
			ВидСобытия);
	КонецЕсли;
	
	ТекстУведомления = СтрЗаменить(ТекстУведомления, Символы.ПС, "<BR>");
	
	ТекстУведомления = 
		"<html>
		|<body>
		|" + ТекстУведомления + "
		|</body>
		|</html>";
	
	Возврат ТекстУведомления;
	
КонецФункции

// Добавляет текстовое представление объекта уведомления к тексту уведомления
Функция СформироватьОписаниеОбъектаУведомления(
	ОбъектУведомления,
	ТекстУведомления,
	ПолучательУведомления,
	ВидСобытия,
	ДополнительноеОписание = Неопределено)
	
	ПредставлениеОбъекта = СформироватьПредставлениеОбъекта(
		ОбъектУведомления,
		ВидСобытия,
		ДополнительноеОписание);
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		ТекстУведомления,
		Символы.ПС+Символы.ПС,
		ПредставлениеОбъекта);
	
КонецФункции

// Формирует текстовое представление объекта
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ДополнительноеОписание)
	
	ПредставлениеОбъекта = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеФайла(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеВнутреннегоДокумента(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеСообщения(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеПроцесса(Объект, ВидСобытия, ДополнительноеОписание);	
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.УведомленияПрограммы") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеУведомленияПрограммы(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контроль") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеКонтрольнойКарточки(Объект, ВидСобытия, ДополнительноеОписание);
		
	Иначе
		
		ДобавитьРеквизитКСтроке(ПредставлениеОбъекта, ТипЗнч(Объект.Ссылка), Объект.Ссылка);
		ДобавитьРеквизитКСтроке(ПредставлениеОбъекта, НСтр("ru = 'Ссылка'"),
			ПолучитьНавигационнуюСсылкуУведомления(Объект));
		
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта
	
КонецФункции

// Формирует текстовое представление файла
Функция СформироватьПредставлениеФайла(Файл, ВидСобытия, ДополнительноеОписание)
	
	ПредставлениеФайла = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеФайла, НСтр("ru = 'Файл'"), Файл.Ссылка);
	Если ЗначениеЗаполнено(Файл.ВладелецФайла) Тогда
		Если ТипЗнч(Файл.ВладелецФайла) = Тип("СправочникСсылка.Файлы") Тогда
			ДобавитьРеквизитКСтроке(ПредставлениеФайла, НСтр("ru = 'Папка'"), ПолучитьПолныйПуть(Файл.ВладелецФайла));
		Иначе 
			ДобавитьРеквизитКСтроке(ПредставлениеФайла, ТипЗнч(Файл.ВладелецФайла), Файл.ВладелецФайла);
		КонецЕсли;
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеФайла, НСтр("ru = 'Автор'"), Файл.Автор);
	ДобавитьРеквизитКСтроке(ПредставлениеФайла, НСтр("ru = 'Дата'"), Файл.ТекущаяВерсияДатаСоздания);
	ДобавитьРеквизитКСтроке(ПредставлениеФайла, НСтр("ru = 'Ссылка'"), ПолучитьНавигационнуюСсылкуУведомления(Файл));
	
	Возврат ПредставлениеФайла;
	
КонецФункции

// Формирует текстовое представление внутреннего документа
Функция СформироватьПредставлениеВнутреннегоДокумента(
	ВнутреннийДокумент,
	ВидСобытия,
	ДополнительноеОписание)
	
	ПредставлениеВнутреннегоДокумента = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Документ'"),
		ВнутреннийДокумент.Ссылка);
	Если ЗначениеЗаполнено(ВнутреннийДокумент.Папка) Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Папка'"),
			ПолучитьПолныйПуть(ВнутреннийДокумент.Папка));
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Подготовил'"),
		ВнутреннийДокумент.Подготовил);
	ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Дата'"),
		ВнутреннийДокумент.ДатаСоздания);
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента Тогда 
		
		СрокДействия = "";
		Если ЗначениеЗаполнено(ВнутреннийДокумент.ДатаНачалаДействия) Тогда
			СрокДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'"),
			Формат(ВнутреннийДокумент.ДатаНачалаДействия, "ДЛФ=D")); 
		КонецЕсли;
		
		Если ВнутреннийДокумент.Бессрочный Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(СрокДействия, ", ", НСтр("ru = 'бессрочный'"));
		ИначеЕсли ЗначениеЗаполнено(ВнутреннийДокумент.ДатаОкончанияДействия) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(СрокДействия,  " ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ' по %1'"),
				Формат(ВнутреннийДокумент.ДатаОкончанияДействия, "ДЛФ=D")));
		КонецЕсли;
		
		ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Срок действия'"), СрокДействия);
		ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Продление'"), ВнутреннийДокумент.ПорядокПродления);
		
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеВнутреннегоДокумента, НСтр("ru = 'Ссылка'"),
		ПолучитьНавигационнуюСсылкуУведомления(ВнутреннийДокумент));
	
	Возврат ПредставлениеВнутреннегоДокумента;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(Задача, ВидСобытия, ДополнительноеОписание) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Задача'"), Задача.Ссылка);
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс)
		И ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда
		
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда
			
			ОписаниеУведомленияЗадачиПоБизнесПроцессу =
				БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача);
			
			Если ЗначениеЗаполнено(ОписаниеУведомленияЗадачиПоБизнесПроцессу) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи,
					Символы.ПС,
					ОписаниеУведомленияЗадачиПоБизнесПроцессу);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		ПредставлениеСрока = ПолучитьПредставлениеСрока(
			Задача.Исполнитель,
			Задача.СрокИсполнения,
			ВидСобытия);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеЗадачи,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Описание'"), Задача.Описание);
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Крайний срок'"),
		Формат(Задача.СрокИсполнения, ФорматДаты));
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Исполнитель'"), Задача.Исполнитель);
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Роль'"), Задача.РольИсполнителя);
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Основной объект адресации'"),
		Задача.ОсновнойОбъектАдресации);
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Доп. объект адресации'"),
		Задача.ДополнительныйОбъектАдресации);
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Выполнено'"),
			Формат(Задача.ДатаИсполнения, ФорматДаты));
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Комментарий'"), Задача.РезультатВыполнения);
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Автор'"), Задача.Автор);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	Если Предметы.Количество() = 1 Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Предмет'"),
			Строка(Предметы[0].Предмет));
	ИначеЕсли Предметы.Количество() > 1 Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Предметы'"),
			МультипредметностьКлиентСервер.ПредметыСтрокой(Предметы));
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(ПредставлениеЗадачи, НСтр("ru = 'Ссылка'"),
		ПолучитьНавигационнуюСсылкуУведомления(Задача));
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление уведомления программы
// 
// Параметры:
//   - Объект - СправочникСсылка.УведомленияПрограммы
//
Функция СформироватьПредставлениеУведомленияПрограммы(Объект)
	
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект, "Описание,Объект");
		
	НавигационнаяСсылкаНаУведомление = ПолучитьНавигационнуюСсылкуУведомления(Объект);
	
	НавигационнаяСсылкаНаОбъектУведомления = "";
	Если РеквизитыУведомления.Объект <> Неопределено Тогда
		НавигационнаяСсылкаНаОбъектУведомления = ПолучитьНавигационнуюСсылкуУведомления(РеквизитыУведомления.Объект);
	КонецЕсли;
	
	ПредставлениеУведомления = Строка(Объект);
	ДобавитьРеквизитКСтроке(ПредставлениеУведомления, НСтр("ru = 'Ссылка на уведомление'"), НавигационнаяСсылкаНаУведомление);
	ДобавитьРеквизитКСтроке(ПредставлениеУведомления, НСтр("ru = 'Ссылка на объект уведомления'"), НавигационнаяСсылкаНаОбъектУведомления);
	ДобавитьРеквизитКСтроке(ПредставлениеУведомления, НСтр("ru = 'Описание'"), РеквизитыУведомления.Описание);
	
	Возврат ПредставлениеУведомления;
	
КонецФункции

// Формирует текстовое представление карточки контроля
Функция СформироватьПредставлениеКонтрольнойКарточки(КарточкаКонтроля, ВидСобытия, ДополнительноеОписание) Экспорт
	
	НадписьНеУказанСрок = НСтр("ru = 'не указан'");
	ФорматДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДЛФ=DD; ДП='%1'",
		НадписьНеУказанСрок);
	
	ПредставлениеКонтроля = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Контрольная карточка'"),
		КарточкаКонтроля.Ссылка);
	Если ЗначениеЗаполнено(ДополнительноеОписание) И ДополнительноеОписание > 1 Тогда 
		ПредставлениеСрока = ПолучитьПредставлениеСрока(
			КарточкаКонтроля.Контролер,
			КарточкаКонтроля.СрокИсполнения,
			ВидСобытия);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеКонтроля,
			Символы.ПС,
			ПредставлениеСрока);
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Описание'"),
		КарточкаКонтроля.Описание);
	
	Если ЗначениеЗаполнено(КарточкаКонтроля.Предмет) Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Предмет'"),
			Контроль.СформироватьПредставлениеПредмета(КарточкаКонтроля.Предмет));
	КонецЕсли;
	
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Срок контроля'"),
		Формат(КарточкаКонтроля.СрокИсполнения, ФорматДаты));
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Кого контролировать'"),
		КарточкаКонтроля.ИсполнителиСтрокой);
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Контролер'"),
		КарточкаКонтроля.Контролер);
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Основной объект адресации'"),
		КарточкаКонтроля.ОсновнойОбъектАдресацииКонтролера);
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Доп. объект адресации'"),
		КарточкаКонтроля.ДополнительныйОбъектАдресацииКонтролера);
	ДобавитьРеквизитКСтроке(ПредставлениеКонтроля, НСтр("ru = 'Ссылка'"),
		ПолучитьНавигационнуюСсылкуУведомления(КарточкаКонтроля));
	
	Возврат ПредставлениеКонтроля;
	
КонецФункции

// Добавить представление реквизита к строке.
//
Процедура ДобавитьРеквизитКСтроке(Строка, ИмяРеквизита, Значение, ДополнительноеЗначение = Неопределено)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительноеЗначение <> Неопределено Тогда
		ПредставлениеРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<b>%1</b>: %2 (%3)",
			ИмяРеквизита, Значение, ДополнительноеЗначение)
	Иначе
		ПредставлениеРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<b>%1</b>: %2",
			ИмяРеквизита, Значение);
	КонецЕсли;
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Строка,
		Символы.ПС,
		ПредставлениеРеквизита);
	
КонецПроцедуры

// Отправляет переданное уведомление
Функция ОтправитьУведомление(СформированноеУведомление)
	
	Если СформированноеУведомление.СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ОтправитьУведомлениеПоПочте(СформированноеУведомление);
	КонецЕсли;
	
КонецФункции

// Отправляет уведомления из очереди уведомлений по почте
Процедура ОтправитьУведомлениеПоПочте(СформированноеУведомление)
	
	АдресаЭлектроннойПочты = ПолучитьДанныеСпособаУведомления(
		Перечисления.СпособыУведомления.ПоПочте,
		СформированноеУведомление.Пользователь,
		Истина);
	
	Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Строка(СформированноеУведомление.Пользователь)));
		ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление);
		Возврат;
	КонецЕсли;
	
	// Формирование массива вложений
	Вложения = Новый Массив();
	Если ЗначениеЗаполнено(СформированноеУведомление.Файлы) Тогда
		Для каждого Вложение Из СформированноеУведомление.Файлы Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить(
				"Данные", РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка));
			СтруктураВложения.Вставить("Имя", Вложение.ИмяФайла);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			
			Вложения.Добавить(СтруктураВложения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл
		
		Попытка
			
			
			ВидМаршрутизации = ВстроеннаяПочтаСервер.ПолучитьВидМаршрутизацииПоАдресу(ПочтовыйАдресПолучателя);
			
			Если ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внешняя Тогда
				
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Тема", СформированноеУведомление.ТемаУведомления);
				ПараметрыПисьма.Вставить("Текст", СформированноеУведомление.ТекстУведомления);
				ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
				ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
				
				Если ЗначениеЗаполнено(Вложения) Тогда
					ПараметрыПисьма.Вставить("Вложения", Новый Массив);
					Для каждого Вложение Из Вложения Цикл
						СтруктураВложения = Новый Структура("Адрес, ИмяФайла");
						СтруктураВложения.Адрес = Вложение.Данные;
						СтруктураВложения.ИмяФайла = Вложение.Имя;
						ПараметрыПисьма.Вложения.Добавить(СтруктураВложения);
					КонецЦикла;
				КонецЕсли;
				
				СообщениеОбОшибке = "";
				УведомлениеОтправлено =
					ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма, , , СообщениеОбОшибке);
				Если Не УведомлениеОтправлено Тогда
					ВызватьИсключение СообщениеОбОшибке;
				КонецЕсли;
				
			ИначеЕсли ВидМаршрутизации = Перечисления.ВидыМаршрутизацииПисем.Внутренняя Тогда
				
				УчетныеЗаписиПолучателя = ВстроеннаяПочтаСервер.ПолучитьУчетныеЗаписиПоАдресу(ПочтовыйАдресПолучателя, Истина);
				Если УчетныеЗаписиПолучателя.Количество() = 0 Тогда 
					ВызватьИсключение НСтр("ru = 'Неверный вид маршрутизации письма. Обратитесь к Администратору.'");
				КонецЕсли;
				
				Предметы = Новый Массив;
				Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
					
					Если Предметы.Найти(Уведомление.Объект) = Неопределено Тогда
						Предметы.Добавить(Уведомление.Объект);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого УчетнаяЗаписьПолучателя Из УчетныеЗаписиПолучателя Цикл 
					
					ВходящееПисьмоОбъект = Документы.ВходящееПисьмо.СоздатьДокумент();
					
					Если Предметы.Количество() = 1 Тогда
						Предмет = Предметы[0];
						Если ЗначениеЗаполнено(Предмет) 
							И ВстроеннаяПочтаСервер.ДоступенПоПравамОтветственнымУчетнойЗаписи(Предмет, УчетнаяЗаписьПолучателя) Тогда 
							ВходящееПисьмоОбъект.Предмет = Предмет;
						КонецЕсли;
					КонецЕсли;
					
					Сообщение = Почта.СформироватьСтруктуруПочтовогоСообщения();
					
					Сообщение.Тема = СформированноеУведомление.ТемаУведомления;
					
					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьПолучателя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Получатели.Добавить(СтруктураПочтовогоАдреса);
					
					УчетнаяЗаписьОтправителя =
						ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
					ДанныеУчетнойЗаписи = Почта.ПолучитьДанныеУчетнойЗаписи(УчетнаяЗаписьОтправителя);
					СтруктураПочтовогоАдреса = Новый Структура;
					СтруктураПочтовогоАдреса.Вставить("Адрес", ДанныеУчетнойЗаписи.АдресЭлектроннойПочты);
					СтруктураПочтовогоАдреса.Вставить("ОтображаемоеИмя", ДанныеУчетнойЗаписи.ОтображаемоеИмя);
					Сообщение.Отправитель = СтруктураПочтовогоАдреса;
					Сообщение.ИмяОтправителя = ДанныеУчетнойЗаписи.ПредставлениеАдресаЭлектроннойПочты;
					
					ДатаСообщения = ТекущаяДатаСеанса();
					Сообщение.ДатаОтправки = ДатаСообщения;
					Сообщение.ДатаПолучения = ДатаСообщения;
					
					ИдентификаторСообщения = Новый УникальныйИдентификатор;
					Сообщение.ИдентификаторСообщения = Строка(ИдентификаторСообщения);
					
					СтруктураТекста = Новый Структура;
					СтруктураТекста.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.HTML);
					СтруктураТекста.Вставить("Текст", СформированноеУведомление.ТекстУведомления);
					СтруктураТекста.Вставить("Кодировка", "");
					Сообщение.Тексты.Добавить(СтруктураТекста);
					
					Сообщение.Размер = ВстроеннаяПочтаСервер.ВычислитьРазмерПочтовогоСообщения(Сообщение);
					
					Сообщение.Вложения = Вложения;
					
					ВстроеннаяПочтаСервер.ЗаполнитьВходящееПисьмоПриВнутреннейМаршрутизации(ВходящееПисьмоОбъект, Сообщение, УчетнаяЗаписьПолучателя);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при отправке уведомления о новых событиях: %1'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление);
			Возврат;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПочтовыйАдресПолучателя));
				
	КонецЦикла;
	
	Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
		УдалитьУведомлениеИзОчередиУведомлений(Уведомление);
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает возникшую ошибку при отправке уведомления 
Процедура ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление)
	
	Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
		
		НовоеЧислоПопыток = 
			РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
				Уведомление.Объект, 
				Уведомление.Пользователь, 
				Уведомление.СпособУведомления,
				Уведомление.ВидСобытия,
				Уведомление.ОбъектПодписки);
		
	КонецЦикла;

КонецПроцедуры

// Удаляет уведомление из очереди уведомлений
Процедура УдалитьУведомлениеИзОчередиУведомлений(Уведомление)
	
	РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
		Уведомление.Объект, 
		Уведомление.Пользователь, 
		Уведомление.СпособУведомления,
		Уведомление.ВидСобытия,
		Уведомление.ОбъектПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив с проверкой подписки, дочерних и ведущих процессов.
// Если в массиве уже есть дочерние бизнес-процессы с подпиской, то удаляет их.
// Если в массиве уже есть ведущий бизнес-процесс с подпиской, то не добавляет.
Процедура ДобавитьВМассивСПроверкойПодписки(
		ОбъектУведомления, 
		ОбъектПодписки, 
		ОбъектыПодписки, 
		БизнесПроцессыРодители, 
		ОтказыОтПодписки,
		ОбъектыУведомленияСПодпиской,
		ОбъектыУведомленияСОтказом)
	
	Если ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки) Тогда
		
		Если ОбъектыУведомленияСПодпиской.Найти(ОбъектУведомления) = Неопределено Тогда
			ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСОтказом);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Родитель", ОбъектПодписки);
	НайденныеПроцессыПотомки = БизнесПроцессыРодители.НайтиСтроки(Отбор);
	Для Каждого СтрокаНайденныйПроцессПотомок Из НайденныеПроцессыПотомки Цикл
		
		ПроцессПотомок = СтрокаНайденныйПроцессПотомок.ОбъектПодписки;
		
		ИндексПотомкаВМассиве = ОбъектыПодписки.Найти(ПроцессПотомок);
		Если ИндексПотомкаВМассиве <> Неопределено Тогда
			ОбъектыПодписки.Удалить(ИндексПотомкаВМассиве);
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ОбъектПодписки", ПроцессПотомок);
		СтрокиПроцессаПотомка = БизнесПроцессыРодители.НайтиСтроки(Отбор);
		Для Каждого СтрокаПроцессаПотомка Из СтрокиПроцессаПотомка Цикл
			БизнесПроцессыРодители.Удалить(СтрокаПроцессаПотомка);
		КонецЦикла;
		
	КонецЦикла;
	
	ИндексВМассивеОтказов = ОбъектыУведомленияСОтказом.Найти(ОбъектУведомления);
	Если ИндексВМассивеОтказов <> Неопределено Тогда
		ОбъектыУведомленияСОтказом.Удалить(ИндексВМассивеОтказов);
	КонецЕсли;
	
	ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСПодпиской);
	
	ДобавитьВМассивСЗаполнениемРодителей(
		ОбъектПодписки,
		ОбъектыПодписки,
		БизнесПроцессыРодители,
		ОтказыОтПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив и заполняет таблицу родителей
Процедура ДобавитьВМассивСЗаполнениемРодителей(
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки)
	
	МассивРодителей = Новый Массив;
	ПолучитьРодителейСПроверкойПодписки(
		ОбъектПодписки,
		МассивРодителей,
		ОтказыОтПодписки,
		ОбъектПодписки);
	
	Для Каждого Родитель Из МассивРодителей Цикл
		
		НоваяСтрока = БизнесПроцессыРодители.Добавить();
		НоваяСтрока.ОбъектПодписки = ОбъектПодписки;
		НоваяСтрока.Родитель = Родитель;
		
	КонецЦикла;
	
	ОбъектыПодписки.Добавить(ОбъектПодписки);
	
КонецПроцедуры

// Получение родителя бизнес-процесса с проверкой подписки
Процедура ПолучитьРодителейСПроверкойПодписки(
	ОбъектРодитель,
	МассивРодителей,
	ОтказыОтПодписки,
	ОбъектПодписки)
	
	Если ТипЗнч(ОбъектРодитель) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЗначениеЗаполнено(ОбъектРодитель.БизнесПроцесс) Тогда
			ПолучитьРодителейСПроверкойПодписки(
				ОбъектРодитель.БизнесПроцесс,
				МассивРодителей,
				ОтказыОтПодписки,
				ОбъектПодписки);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектРодитель, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектРодитель <> ОбъектПодписки Тогда
		МассивРодителей.Добавить(ОбъектРодитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРодитель.ВедущаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ВедущаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ГлавнаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки);
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Проверяет есть ли среди родителей объекта подписки объекта из массива объектов подписки 
// с учетом отказов от уведомлений.
Функция ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки)
	
	Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЯвляетсяПотомкомПоБизнесПроцессу = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектПодписки.БизнесПроцесс) Тогда
			ЯвляетсяПотомкомПоБизнесПроцессу = ЯвляетсяПотомкомОбъектовПодписки(
				ОбъектПодписки.БизнесПроцесс,
				ОбъектыПодписки, 
				ОтказыОтПодписки);
		КонецЕсли;
		
		Возврат ЯвляетсяПотомкомПоБизнесПроцессу;
		
	КонецЕсли;
	
	Если ОбъектыПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектПодписки, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЯвляетсяПотомкомПоВедущейЗадаче = Ложь;
	ЯвляетсяПотомкомПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ВедущаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоВедущейЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ВедущаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоГлавнойЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ГлавнаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Возврат ЯвляетсяПотомкомПоВедущейЗадаче ИЛИ ЯвляетсяПотомкомПоГлавнойЗадаче;
	
КонецФункции

// Проверяет наличие отказа от подписки в иерархии
Функция ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки)
	
	Если ОбъектУведомления = ОбъектПодписки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОтказОтПодпискиВИерархии = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектУведомления.БизнесПроцесс) Тогда
			
			ОтказОтПодпискиВИерархии = ЕстьОтказОтПодпискиВИерархии(
				ОбъектУведомления.БизнесПроцесс,
				ОбъектПодписки,
				ОтказыОтПодписки);
				
		КонецЕсли;
		
		Возврат ОтказОтПодпискиВИерархии;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектУведомления, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ЕстьОтказПоВедущейЗадаче = Ложь;
	ЕстьОтказПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ВедущаяЗадача) Тогда
		
		ЕстьОтказПоВедущейЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ВедущаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ГлавнаяЗадача) Тогда
		
		ЕстьОтказПоГлавнойЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ГлавнаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Возврат ЕстьОтказПоВедущейЗадаче ИЛИ ЕстьОтказПоГлавнойЗадаче;
	
КонецФункции

// Формирует представление срока с учетом использования графика работ
Функция ПолучитьПредставлениеСрока(Исполнитель, СрокИсполненияОбъекта, ВидСобытия)
	
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	ПримерныйСрок = Ложь;
	
	Если ИспользоватьГрафикиРаботы Тогда
		
		График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Исполнитель);
		
		Попытка
			СрокЗадачи = 
				КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
					График.Календарь, 
					ТекущаяДата, 
					СрокИсполненияОбъекта);
		Исключение
			
			ТекстПредупреждения =
				НСтр("ru = 'Не удалось получить разность дат по календарю:'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстПредупреждения);
			
			СрокИсполнения = КонецДня(СрокИсполненияОбъекта);
			СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
			СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
			СрокЗадачи = ?(СрокЗадачи > 0, СрокЗадачи, - СрокЗадачи);
			ПримерныйСрок = Истина;
			
		КонецПопытки;
		
	Иначе
		
		СрокИсполнения = КонецДня(СрокИсполненияОбъекта);
		СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
		СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
		СрокЗадачи = ?(СрокЗадачи > 0, СрокЗадачи, - СрокЗадачи);
		
	КонецЕсли;
	
	ПредставлениеСрока = "";
	ПодписьДней = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(СрокЗадачи);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Подошел срок выполнения задачи'");
			
		Иначе
			
			Если ПодписьДней = НСтр("ru = 'день'") Тогда
				
				ПодписьНачало = НСтр("ru = 'Остался'");
				
			Иначе
				
				ПодписьНачало = НСтр("ru = 'Осталось'");
				
			КонецЕсли;
			
			ПредставлениеСрока = ПодписьНачало + " " + Строка(СрокЗадачи) + " " + ПодписьДней + НСтр("ru = ' на задачу'");
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена'");
			
		Иначе
			
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена на'") + " " + Строка(СрокЗадачи) + " " + ПодписьДней;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Подошел срок контроля'");
			
		Иначе
			
			Если ПодписьДней = НСтр("ru = 'день'") Тогда
				
				ПодписьНачало = НСтр("ru = 'Остался'");
				
			Иначе
				
				ПодписьНачало = НСтр("ru = 'Осталось'");
				
			КонецЕсли;
			
			ПредставлениеСрока = ПодписьНачало + " " + Строка(СрокЗадачи) + " " + ПодписьДней + НСтр("ru = ' до контрольного срока'");
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если СрокЗадачи = 0 Тогда
			
			ПредставлениеСрока = НСтр("ru = 'Просрочен контроль'");
			
		Иначе
			
			ПредставлениеСрока = НСтр("ru = 'Просрочен контроль на'") + " " + Строка(СрокЗадачи) + " " + ПодписьДней;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПримерныйСрок Тогда
		ТекстПримерныйСрок = НСтр("ru = 'Срок примерный'");
		ПредставлениеСрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", ПредставлениеСрока, ТекстПримерныйСрок);
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Добавляет строку табличной части с уведомлением в массив уведомлений в специальную структуру
Процедура ДобавитьУведомлениеВМассив(МассивУведомлений, СтрокаУведомления)
	
	Уведомление = Новый Структура;
	Уведомление.Вставить("Объект", СтрокаУведомления.Объект);
	Уведомление.Вставить("Пользователь", СтрокаУведомления.Пользователь);
	Уведомление.Вставить("СпособУведомления", СтрокаУведомления.СпособУведомления);
	Уведомление.Вставить("ВидСобытия", СтрокаУведомления.ВидСобытия);
	Уведомление.Вставить("ОбъектПодписки", СтрокаУведомления.ОбъектПодписки);
	
	МассивУведомлений.Добавить(Уведомление);
	
КонецПроцедуры

// Формирует текстовое представление сообщения
Функция СформироватьПредставлениеСообщения(Сообщение, ВидСобытия, ДополнительноеОписание)
	
	ПредставлениеСообщения = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Сообщение'"), Сообщение.ТекстСообщения);
	ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Тема'"), Сообщение.ВладелецСообщения);
	Если ЗначениеЗаполнено(Сообщение.ВладелецСообщения) Тогда
		ТемаСообщения = Сообщение.ВладелецСообщения;
		ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Предмет обсуждения'"),
			ТемаСообщения.Документ, ТипЗнч(ТемаСообщения.Документ));
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Автор'"), Сообщение.Автор);
	ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Дата'"), Сообщение.ДатаСоздания);
	ДобавитьРеквизитКСтроке(ПредставлениеСообщения, НСтр("ru = 'Ссылка'"), 
		ПолучитьНавигационнуюСсылкуУведомления(Сообщение));
	
	Возврат ПредставлениеСообщения;
	
КонецФункции

// Формирует текстовое представление бизнес процесса
Функция СформироватьПредставлениеПроцесса(Процесс, ВидСобытия, ДополнительноеОписание)
	
	ПредставлениеПроцесса = "";
	
	ДобавитьРеквизитКСтроке(ПредставлениеПроцесса, ТипЗнч(Процесс.Ссылка), Процесс.Ссылка);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		ДобавитьРеквизитКСтроке(ПредставлениеПроцесса, НСтр("ru = 'Причина прерывания'"), Процесс.ПричинаПрерывания);
	КонецЕсли;
	ДобавитьРеквизитКСтроке(ПредставлениеПроцесса, НСтр("ru = 'Ссылка'"), ПолучитьНавигационнуюСсылкуУведомления(Процесс));
	
	Возврат ПредставлениеПроцесса;
	
КонецФункции  

// Формирует навигационную ссылку.
//
Функция ПолучитьНавигационнуюСсылкуУведомления(Объект)
	
	АдресПубликацииНаВебСервере = Константы.АдресПубликацииНаВебСервере.Получить();
	Если ЗначениеЗаполнено(АдресПубликацииНаВебСервере) Тогда
		Если Прав(АдресПубликацииНаВебСервере, 2) = "/#" Или  Прав(АдресПубликацииНаВебСервере, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликацииНаВебСервере, 1) = "/" Тогда
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "#";
		Иначе
			АдресПубликацииНаВебСервере = АдресПубликацииНаВебСервере + "/#";
		КонецЕсли;
		НавигационнаяСсылка = АдресПубликацииНаВебСервере + ПолучитьНавигационнуюСсылку(Объект);
		НавигационнаяСсылкаУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<a href=%1>%2</a>",
			КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
			НавигационнаяСсылка);
		Возврат НавигационнаяСсылкаУведомления;
	Иначе
		Возврат ПолучитьНавигационнуюСсылку(Объект);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаУведомления

// Записывает подписку на уведомления в регистр сведений
Процедура ДобавитьПодпискуНаУведомления(
	ВидСобытия,
	ОбъектПодписки,
	СпособУведомления,
	Пользователь,
	ПодпискаАктивна)
	
	ПодпискаАктивнаВРегистре = РегистрыСведений.ПодпискиНаУведомления.ПодпискаАктивна(
		ВидСобытия, 
		ОбъектПодписки, 
		Пользователь, 
		СпособУведомления);
		
	Если ПодпискаАктивна <> ПодпискаАктивнаВРегистре Тогда
		РегистрыСведений.ПодпискиНаУведомления.ДобавитьПодпискуНаУведомления(
			ВидСобытия, 
			ОбъектПодписки, 
			Пользователь, 
			СпособУведомления, 
			ПодпискаАктивна);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет подписку на уведомления из регистра сведений
Процедура УдалитьПодпискуНаУведомления(
	ВидСобытия,
	ОбъектПодписки,
	СпособУведомления,
	Пользователь)
	
	РегистрыСведений.ПодпискиНаУведомления.УдалитьПодпискуНаУведомления(
		ВидСобытия, 
		ОбъектПодписки, 
		СпособУведомления, 
		Пользователь);	
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиУведомлений

#Область УведомленияОЗадачах

// Считывает настройки сроков уведомления о задачах из регистра сведений для массив пользователей
Функция ПолучитьНастройкиУведомленияОЗадачах(МассивПользователей)
	
	Если ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокЗадачи.Значение, 3) КАК СрокПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокЗадачи.Значение, 0) КАК ЧастотаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченаЗадача.Значение, 1) КАК ЧастотаПросроченаЗадача
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченаЗадача
			|ГДЕ
			|	НастройкиСрокПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи) КАК СрокУведомления,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи) КАК ЧастотаПриближениеСрока,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПросроченныеЗадачи, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача) КАК ЧастотаПросроченныеЗадачи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОЗадачах КАК НастройкиУведомленияОЗадачах
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОЗадачах.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиПодпискаПодошелСрокЗадачи.Значение, ЛОЖЬ) КАК ПодпискаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиПодпискаПросроченаЗадача.Значение, ЛОЖЬ) КАК ПодпискаПросроченаЗадача,
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокЗадачи.Значение, 3) КАК СрокПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокЗадачи.Значение, 0) КАК ЧастотаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченаЗадача.Значение, 1) КАК ЧастотаПросроченаЗадача
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПросроченаЗадача,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченаЗадача
			|ГДЕ
			|	НастройкиПодпискаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиПодпискаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|	И НастройкиСрокПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокЗадачи = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи)
			|	КОНЕЦ КАК СрокУведомления,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокЗадачи = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи)
			|	КОНЕЦ КАК ЧастотаПриближениеСрока,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПросроченаЗадача = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПросроченныеЗадачи, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача)
			|	КОНЕЦ КАК ЧастотаПросроченныеЗадачи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОЗадачах КАК НастройкиУведомленияОЗадачах
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОЗадачах.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

#КонецОбласти

#Область УведомленияОСрокеДействия

// Считывает настройки сроков уведомления об окончании срока действия для массив пользователей
Функция ПолучитьНастройкиУведомленияОкончанияСрокаДействия(МассивПользователей)
	
	Если ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокДействияДокумента.Значение, 10) КАК СрокПодошелСрокДействияДокумента,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокДействияДокумента.Значение, 0) КАК ЧастотаПодошелСрокДействияДокумента
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокДействияДокумента,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокДействияДокумента
			|ГДЕ
			|	НастройкиСрокПодошелСрокДействияДокумента.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокДействияДокумента.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|	И НастройкиЧастотаПодошелСрокДействияДокумента.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокДействияДокумента.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ЕСТЬNULL(НастройкиУведомленияОкончанияСрокаДействия.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокДействияДокумента) КАК СрокУведомления,
			|	ЕСТЬNULL(НастройкиУведомленияОкончанияСрокаДействия.ЧастотаУведомления, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокДействияДокумента) КАК ЧастотаУведомления
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОкончанияСрокаДействия КАК НастройкиУведомленияОкончанияСрокаДействия
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОкончанияСрокаДействия.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиПодпискаПодошелСрокДействияДокумента.Значение, ЛОЖЬ) КАК ПодпискаПодошелСрокДействияДокумента,
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокДействияДокумента.Значение, 10) КАК СрокПодошелСрокДействияДокумента,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокДействияДокумента.Значение, 0) КАК ЧастотаПодошелСрокДействияДокумента
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПодошелСрокДействияДокумента,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокДействияДокумента,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокДействияДокумента
			|ГДЕ
			|	НастройкиПодпискаПодошелСрокДействияДокумента.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПодошелСрокДействияДокумента.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|	И НастройкиСрокПодошелСрокДействияДокумента.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокДействияДокумента.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|	И НастройкиЧастотаПодошелСрокДействияДокумента.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокДействияДокумента.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокДействияДокумента = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.СрокПодошелСрокДействияДокумента
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОкончанияСрокаДействия.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокДействияДокумента)
			|	КОНЕЦ КАК СрокУведомления,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокДействияДокумента = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокДействияДокумента
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОкончанияСрокаДействия.ЧастотаУведомления, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокДействияДокумента)
			|	КОНЕЦ КАК ЧастотаУведомления
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОкончанияСрокаДействия КАК НастройкиУведомленияОкончанияСрокаДействия
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОкончанияСрокаДействия.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

#КонецОбласти

// Получает стандартное значение настройки.
//
// Параметры:
//  Настройка - ПеречислениеСсылка.НастройкиУведомлений - Настройка, значение которой нужно получить.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события,
//               по которому необходимо получить настройку.
//
// Возвращаемое значение:
//  Булево, Число - Стандартное значение настройки.
//
Функция ПолучитьСтандартноеЗначениеНастройки(Настройка, ВидСобытия)
	
	Значение = Неопределено;
	
	Если Настройка = Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте Тогда
		
		Значение = Ложь;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.УведомленияПрограммы Тогда
		
		Значение = Истина;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.Подписка Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи 
			Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи
			Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи Тогда
			Значение = Истина;
		Иначе
			Значение = Ложь;
		КонецЕсли;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			Значение = 3;
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда
			Значение = 10;
		КонецЕсли;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
			Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента 
			Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
			Значение = 0;
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача 
			Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
			Значение = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Корректирует персональные настройки в соответствии с переданными параметрами. Для всех
// персональных настроек, у которых текущее значение совпадает со старым - устанавливается новое.
// Если старое значение совпадает с новым значением то корректировка не проводится.
//
// Параметры:
//  Настройка - ПеречислениеСсылка.НастройкиУведомлений - Корректируемая настройка.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид
//               события, для которого корректируется настройка.
//  Значение - Булево, Число - Новое значение настройки.
//  СтароеЗначение - Булево, Число - Старое значение настройки.
//
Процедура СкорректироватьПерсональныеНастройки(Настройка, ВидСобытия, Значение, СтароеЗначение)
	
	Если СтароеЗначение = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраСведенийНастроек = Неопределено;
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		ИмяРегистраСведенийНастроек = "НастройкиУведомленияОЗадачах";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента Тогда
		ИмяРегистраСведенийНастроек = "НастройкиУведомленияОкончанияСрокаДействия";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля 
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		ИмяРегистраСведенийНастроек = "НастройкиУведомленияОКонтроле";	
	КонецЕсли;
	
	ИмяНастройки = Неопределено;
	Если (ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля)
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаПриближениеСрока";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи 
		И Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		ИмяНастройки = "СрокУведомления";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаПросроченныеЗадачи";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаПросроченКонтроль";		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаУведомления";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента 
		И Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		ИмяНастройки = "СрокУведомления";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРегистраСведенийНастроек) Или Не ЗначениеЗаполнено(ИмяНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведенийНастроек].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора[ИмяНастройки] = СтароеЗначение Тогда
			ЗаписьНабора[ИмяНастройки] = Значение;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольСроков

// Записывает факт отправки уведомления по объекту в регистр сведений
Процедура ДобавитьОбработанноеУведомление(
	ВидСобытия,
	ОбъектУведомления,
	Пользователь = Неопределено)
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
		ВидСобытия,
		ОбъектУведомления,
		Пользователь);
	
КонецПроцедуры

// Считывает задачи активные на указанную дату с подписчиками
Функция ВыбратьАктивныеЗадачиСПодписчиками(АктивныеНаДату = Неопределено)
	
	Если Не ЗначениеЗаполнено(АктивныеНаДату) Тогда
		АктивныеНаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|			И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|			И ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ АктивныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения > &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
		|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка КАК Задача,
		|	АктивныеЗадачи.Исполнитель КАК Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗадачиСПодпиской
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ИсполнителиЗадач.Исполнитель,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО АктивныеЗадачи.РольИсполнителя = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО АктивныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И АктивныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Исполнитель
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО АктивныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И АктивныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачиСПодпиской.Задача КАК Задача,
		|	АктивныеЗадачиСПодпиской.Подписчик,
		|	АктивныеЗадачиСПодпиской.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗадачиСПодпиской КАК АктивныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи))
		|			И АктивныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗадачиСПодписчиками = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ЗадачиСПодписчиками;
	
КонецФункции

// Считывает задачи просроченные на указанную дату
Функция ВыбратьПросроченныеЗадачиСПодписчиками(СрокИсполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
		СрокИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|			И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|			И ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ ПросроченныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка КАК Задача,
		|	ПросроченныеЗадачи.Исполнитель КАК Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеЗадачиСПодпиской
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ИсполнителиЗадач.Исполнитель,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО ПросроченныеЗадачи.РольИсполнителя = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ПросроченныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И ПросроченныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Исполнитель
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО ПросроченныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И ПросроченныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачиСПодпиской.Задача КАК Задача,
		|	ПросроченныеЗадачиСПодпиской.Подписчик,
		|	ПросроченныеЗадачиСПодпиской.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеЗадачиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеЗадачиСПодпиской КАК ПросроченныеЗадачиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача))
		|			И ПросроченныеЗадачиСПодпиской.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеЗадачиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Считывает документы активные на указанную дату с подписчиками
Функция ВыбратьАктивныеДокументыСПодписчиками(АктивныеНаДату = Неопределено)
	
	Если Не ЗначениеЗаполнено(АктивныеНаДату) Тогда
		АктивныеНаДату = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|			И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|			И ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL";
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	ВнутренниеДокументы.Ответственный КАК Подписчик,
		|	ВнутренниеДокументы.ДатаОкончанияДействия,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ВнутренниеДокументы.Ссылка КАК ОбъектПодписки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО ВнутренниеДокументы.Ответственный = ПользователиСПодпиской.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокДействияДокумента))
		|			И ВнутренниеДокументы.Ссылка = ОбработанныеУведомления.ОбъектУведомления
		|			И ВнутренниеДокументы.Ответственный = ОбработанныеУведомления.Пользователь 
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия
		|	И НЕ ВнутренниеДокументы.НеДействует
		|	И ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И КОНЕЦПЕРИОДА(ВнутренниеДокументы.ДатаОкончанияДействия, ДЕНЬ) >= КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ДокументыСПодписчиками;
	
КонецФункции

// Считывает документы завершившиеся на указанную дату с подписчиками
Функция ВыбратьЗавершившиесяДокументыСПодписчиками(ЗавершившиесяНаДату = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗавершившиесяНаДату) Тогда
		АктивныеНаДату = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ЗакончилсяСрокДействияДокумента)
			|			И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|			И ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL";
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ЗакончилсяСрокДействияДокумента)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Документ,
		|	ВнутренниеДокументы.Ответственный КАК Подписчик,
		|	ВнутренниеДокументы.ДатаОкончанияДействия,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ВнутренниеДокументы.Ссылка КАК ОбъектПодписки
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО ВнутренниеДокументы.Ответственный = ПользователиСПодпиской.Пользователь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ЗакончилсяСрокДействияДокумента))
		|			И ВнутренниеДокументы.Ссылка = ОбработанныеУведомления.ОбъектУведомления
		|			И ВнутренниеДокументы.Ответственный = ОбработанныеУведомления.Пользователь 
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ВнутренниеДокументы.ВидДокумента.УчитыватьСрокДействия
		|	И НЕ ВнутренниеДокументы.НеДействует
		|	И ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И КОНЕЦПЕРИОДА(ВнутренниеДокументы.ДатаОкончанияДействия, ДЕНЬ) < КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|	И ОбработанныеУведомления.ДатаОбработки ЕСТЬ NULL";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", ЗавершившиесяНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДокументыСПодписчиками = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ДокументыСПодписчиками;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Контроль

// Считывает настройки сроков уведомления о контроле из регистра сведений для массива пользователей
Функция ПолучитьНастройкиУведомленияОКонтроле(МассивПользователей)
	
	Если ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокКонтроля.Значение, 3) КАК СрокПодошелСрокКонтроля,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокКонтроля.Значение, 0) КАК ЧастотаПодошелСрокКонтроля,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченКонтроль.Значение, 1) КАК ЧастотаПросроченКонтроль
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокКонтроля,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокКонтроля,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченКонтроль
			|ГДЕ
			|	НастройкиСрокПодошелСрокКонтроля.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокКонтроля.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И НастройкиЧастотаПодошелСрокКонтроля.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокКонтроля.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И НастройкиЧастотаПросроченКонтроль.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченКонтроль.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ЕСТЬNULL(НастройкиУведомленияОКонтроле.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокКонтроля) КАК СрокУведомления,
			|	ЕСТЬNULL(НастройкиУведомленияОКонтроле.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокКонтроля) КАК ЧастотаПриближениеСрока,
			|	ЕСТЬNULL(НастройкиУведомленияОКонтроле.ЧастотаПросроченКонтроль, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченКонтроль) КАК ЧастотаПросроченКонтроль
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОКонтроле КАК НастройкиУведомленияОКонтроле
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОКонтроле.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиПодпискаПодошелСрокКонтроля.Значение, ЛОЖЬ) КАК ПодпискаПодошелСрокКонтроля,
			|	ЕСТЬNULL(НастройкиПодпискаПросроченКонтроль.Значение, ЛОЖЬ) КАК ПодпискаПросроченКонтроль,
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокКонтроля.Значение, 3) КАК СрокПодошелСрокКонтроля,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокКонтроля.Значение, 0) КАК ЧастотаПодошелСрокКонтроля,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченКонтроль.Значение, 1) КАК ЧастотаПросроченКонтроль
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПодошелСрокКонтроля,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПросроченКонтроль,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокКонтроля,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокКонтроля,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченКонтроль
			|ГДЕ
			|	НастройкиПодпискаПодошелСрокКонтроля.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПодошелСрокКонтроля.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И НастройкиПодпискаПросроченКонтроль.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПросроченКонтроль.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
			|	И НастройкиСрокПодошелСрокКонтроля.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокКонтроля.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И НастройкиЧастотаПодошелСрокКонтроля.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокКонтроля.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И НастройкиЧастотаПросроченКонтроль.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченКонтроль.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокКонтроля = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.СрокПодошелСрокКонтроля
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОКонтроле.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокКонтроля)
			|	КОНЕЦ КАК СрокУведомления,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокКонтроля = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокКонтроля
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОКонтроле.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокКонтроля)
			|	КОНЕЦ КАК ЧастотаПриближениеСрока,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПросроченКонтроль = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПросроченКонтроль
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОКонтроле.ЧастотаПросроченКонтроль, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченКонтроль)
			|	КОНЕЦ КАК ЧастотаПросроченКонтроль
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОКонтроле КАК НастройкиУведомленияОКонтроле
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОКонтроле.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Записывает настройку уведомления о контроле в регистр сведений
Функция СохранитьНастройкуУведомленияОКонтроле(
	СрокУведомления,
	ЧастотаПриближениеСрока,
	ЧастотаПросроченКонтроль,
	Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.НастройкиУведомленияОКонтроле.СохранитьНастройку(
		Пользователь,
		СрокУведомления,
		ЧастотаПриближениеСрока,
		ЧастотаПросроченКонтроль);
	
КонецФункции

// Считывает настройку срока уведомления о контроле из регистра сведений
Функция ПолучитьНастройкуУведомленияОКонтроле(Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	НастройкаУведомлений = РегистрыСведений.НастройкиУведомленияОКонтроле.ПолучитьНастройку(Пользователь);
	
	Если НастройкаУведомлений = Неопределено Тогда
		
		СрокПодошелСрокКонтроля = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.СрокУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ЧастотаПодошелСрокКонтроля = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ЧастотаПросроченКонтроль = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПросроченКонтроль);
		
		НастройкаУведомлений =
			Новый Структура("СрокПодошелСрокКонтроля, ЧастотаПодошелСрокКонтроля, ЧастотаПросроченКонтроль",
				СрокПодошелСрокКонтроля,
				ЧастотаПодошелСрокКонтроля,
				ЧастотаПросроченКонтроль);
		
	ИначеЕсли Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ПодпискаПодошелСрокКонтроля = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		Если ПодпискаПодошелСрокКонтроля Тогда
			
			СрокПодошелСрокКонтроля = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.СрокУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
			НастройкаУведомлений.СрокПодошелСрокКонтроля = СрокПодошелСрокКонтроля;
			
			ЧастотаПодошелСрокКонтроля = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
			НастройкаУведомлений.ЧастотаПодошелСрокКонтроля = ЧастотаПодошелСрокКонтроля;
			
		КонецЕсли;
		
		ПодпискаПросроченКонтроль = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПросроченКонтроль);
		Если ПодпискаПросроченКонтроль Тогда
			
			ЧастотаПросроченКонтроль = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПросроченКонтроль);
			НастройкаУведомлений.ЧастотаПросроченКонтроль = ЧастотаПросроченКонтроль;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат НастройкаУведомлений;
	
КонецФункции

// Обрабатывает регламентное задание срока контроля
Процедура КонтрольСрокаКонтроля() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	// Уведомление о подходе сроков
	АктивныеКонтролиСПодписчиками = ВыбратьАктивныеКонтролиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныеЗадачиСПодписчиками Из АктивныеКонтролиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если ИспользоватьГрафикиРаботы Тогда
			
			График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
			
			Попытка
				СрокКонтроля = 
					КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(
						График.Календарь, 
						ТекущаяДата, 
						СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
			Исключение
				
				ТекстПредупреждения =
					НСтр("ru = 'Не удалось получить разность дат по календарю:'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
					+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,,,
					ТекстПредупреждения);
				
				СрокИсполнения = КонецДня(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
				СрокСекунды = СрокИсполнения - ТекущаяДата;
				СрокКонтроля = Окр(СрокСекунды / (3600*24));
				
			КонецПопытки;
			
		Иначе
			
			СрокИсполнения = КонецДня(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
			СрокСекунды = СрокИсполнения - ТекущаяДата;
			СрокКонтроля = Окр(СрокСекунды / (3600*24));
			
		КонецЕсли;
		
		Если СрокКонтроля > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаАктивныеЗадачиСПодписчиками.Контроль,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаАктивныеЗадачиСПодписчиками.Контроль,
				СтрокаАктивныеЗадачиСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ПодошелСрокКонтроля,
				СтрокаАктивныеЗадачиСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.Контроль,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
			
	КонецЦикла;
	
	// Уведомление о просроченном контроле
	ПросроченныеКонтролиСПодписчиками = ВыбратьПросроченныйКонтрольСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеКонтролиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОКонтроле(МассивПодписчиков);
	
	Для Каждого СтрокаПросроченныеЗадачиСПодписчиками Из ПросроченныеКонтролиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченКонтроль) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченКонтроль Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьПраваНаОбъект = ПроверитьПраваДоступа(
			СтрокаПросроченныеЗадачиСПодписчиками.Контроль,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик);
		
		Если Не ЕстьПраваНаОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		СпособыУведомления = МассивСпособовУведомленияПоУмолчанию(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		
		Для Каждого СпособУведомления Из СпособыУведомления Цикл
			РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				СтрокаПросроченныеЗадачиСПодписчиками.Контроль,
				СтрокаПросроченныеЗадачиСПодписчиками.Подписчик,
				СпособУведомления,
				"",
				Перечисления.СобытияУведомлений.ПросроченКонтроль,
				СтрокаПросроченныеЗадачиСПодписчиками.ОбъектПодписки);
		КонецЦикла;
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПросроченКонтроль,
			СтрокаПросроченныеЗадачиСПодписчиками.Контроль,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик);
		
	КонецЦикла;

КонецПроцедуры

// Считывает активные контроли на указанную дату с подписчиками
Функция ВыбратьАктивныеКонтролиСПодписчиками(АктивныеНаДату = Неопределено)
	
	Если Не ЗначениеЗаполнено(АктивныеНаДату) Тогда
		АктивныеНаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО (ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля))
			|			И (ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО)
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И (ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано))
			|			И (ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ)
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Контроль.Ссылка КАК Ссылка,
		|	Контроль.Контролер КАК Исполнитель,
		|	Контроль.СрокИсполнения,
		|	Контроль.ОсновнойОбъектАдресацииКонтролера КАК ОсновнойОбъектАдресации,
		|	Контроль.ДополнительныйОбъектАдресацииКонтролера КАК ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ АктивныеКонтроли
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.СрокИсполнения > &Дата
		|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля)
		|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка КАК Контроль,
		|	АктивныеКонтроли.Исполнитель КАК Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеКонтролиСПодпиской
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО АктивныеКонтроли.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ИсполнителиЗадач.Исполнитель,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Ссылка
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО АктивныеКонтроли.Исполнитель = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО АктивныеКонтроли.Исполнитель = ИсполнителиЗадач.РольИсполнителя
		|			И АктивныеКонтроли.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеКонтроли.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Ссылка
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	АктивныеКонтроли.Исполнитель
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеКонтроли.СрокИсполнения,
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	АктивныеКонтроли КАК АктивныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО АктивныеКонтроли.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеКонтроли.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И АктивныеКонтроли.Исполнитель = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеКонтролиСПодпиской.Контроль КАК Контроль,
		|	АктивныеКонтролиСПодпиской.Подписчик,
		|	АктивныеКонтролиСПодпиской.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеКонтролиСПодпиской КАК АктивныеКонтролиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокКонтроля))
		|			И АктивныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КонтролиСПодписчиками = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат КонтролиСПодписчиками;
	
КонецФункции

// Считывает просроченные на указанную дату контроли
Функция ВыбратьПросроченныйКонтрольСПодписчиками(СрокИсполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
		СрокИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченКонтроль);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО (ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль))
			|			И (ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО)
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И (ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано))
			|			И (ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ)
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
			|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Контроль.Ссылка КАК Ссылка,
		|	Контроль.Контролер КАК Исполнитель,
		|	Контроль.СрокИсполнения,
		|	Контроль.ОсновнойОбъектАдресацииКонтролера КАК ОсновнойОбъектАдресации,
		|	Контроль.ДополнительныйОбъектАдресацииКонтролера КАК ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ ПросроченныеКонтроли
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И Контроль.ПоставленНаКонтроль
		|	И НЕ Контроль.СнятСКонтроля
		|	И Контроль.СрокИсполнения < &Дата
		|	И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль)
		|	И ПодпискиНаУведомления.СпособУведомления <> ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.НеЗадано)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка КАК Контроль,
		|	ПросроченныеКонтроли.Исполнитель КАК Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеКонтролиСПодпиской
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО ПросроченныеКонтроли.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ПросроченныеКонтроли.Исполнитель,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Ссылка
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО ПросроченныеКонтроли.Ссылка = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ПросроченныеКонтроли.Исполнитель = ИсполнителиЗадач.РольИсполнителя
		|			И ПросроченныеКонтроли.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеКонтроли.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Ссылка
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеКонтроли.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Исполнитель
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеКонтроли.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеКонтроли.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеКонтроли.СрокИсполнения,
		|	ПросроченныеКонтроли.Исполнитель
		|ИЗ
		|	ПросроченныеКонтроли КАК ПросроченныеКонтроли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО ПросроченныеКонтроли.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеКонтроли.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И ПросроченныеКонтроли.Исполнитель = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеКонтролиСПодпиской.Контроль КАК Контроль,
		|	ПросроченныеКонтролиСПодпиской.Подписчик,
		|	ПросроченныеКонтролиСПодпиской.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеКонтролиСПодпиской.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеКонтролиСПодпиской КАК ПросроченныеКонтролиСПодпиской
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченКонтроль))
		|			И ПросроченныеКонтролиСПодпиской.Контроль = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеКонтролиСПодпиской.Подписчик = ОбработанныеУведомления.Пользователь";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

#КонецОбласти
