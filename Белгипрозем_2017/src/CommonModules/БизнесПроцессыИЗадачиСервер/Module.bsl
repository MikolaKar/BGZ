////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры подсистемы

// Инициализирует общие параметры формы выполнения задачи.
//
// Параметры:
//  ФормаЗадачи  - УправляемаяФорма  - форма выполнения задачи.
//  ЗадачаОбъект - ЗадачаОбъект      - объект задачи.
//  ЭлементГруппаСостояние - элемент управления формы - группа с информации о
//                                                      состоянии задачи  
//  ЭлементДатаИсполнения  - элемент управления формы - поле с датой исполнения задачи 
//
Процедура ФормаЗадачиПриСозданииНаСервере(ФормаЗадачи, ЗадачаОбъект, 
	ЭлементГруппаСостояние, ЭлементДатаИсполнения) Экспорт
	
	ФормаЗадачи.ТолькоПросмотр = ЗадачаОбъект.Выполнена;
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ЭлементДатаИсполнения.Вид = ?(ИзменятьЗаданияЗаднимЧислом, ВидПоляФормы.ПолеВвода, ВидПоляФормы.ПолеНадписи);

	ЭлементГруппаСостояние.Видимость = ЗадачаОбъект.Выполнена;
	Если ЗадачаОбъект.Выполнена Тогда
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачиКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачиКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__СостояниеЗадачи");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__СостояниеЗадачи", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ДатаИсполненияСтрокой = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=DT"), Формат(ЗадачаОбъект.ДатаИсполнения, "ДЛФ=D"));
		Элемент.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru ='Задача выполнена %1 пользователем %2.'"),
				ДатаИсполненияСтрокой, 
				ИсполнительСтрокой(ЗадачаОбъект.Исполнитель, ЗадачаОбъект.РольИсполнителя,
				ЗадачаОбъект.ОсновнойОбъектАдресации, ЗадачаОбъект.ДополнительныйОбъектАдресации));
	КонецЕсли;
	
	Если БизнесПроцессыИЗадачиВызовСервера.ЭтоВедущаяЗадача(ЗадачаОбъект.Ссылка) Тогда
		Родитель = ?(ЭлементГруппаСостояние <> Неопределено, ЭлементГруппаСостояние, ФормаЗадачи);
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадачаКартинка");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадачаКартинка", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Картинка;
			Элемент.Картинка = БиблиотекаКартинок.Информация;
			Элемент.Высота = 1;
			Элемент.Ширина = 2;
		КонецЕсли;
		
		Элемент = ФормаЗадачи.Элементы.Найти("__ВедущаяЗадача");
		Если Элемент = Неопределено Тогда
			Элемент = ФормаЗадачи.Элементы.Добавить("__ВедущаяЗадача", Тип("ДекорацияФормы"), Родитель);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.Заголовок = НСтр("ru ='Это ведущая задача для вложенных процессов.'");
			Элемент.Высота = 0; // автовысота
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры             

// Вызывается при создании формы списка задач на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка задач
//
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) Экспорт
	
	Если ТипЗнч(СписокЗадачИлиЕгоУсловноеОформление) = Тип("ДинамическийСписок") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
			УсловноеОформление = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
			УсловноеОформление.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
		Иначе
			УсловноеОформление = СписокЗадачИлиЕгоУсловноеОформление.УсловноеОформление;
		КонецЕсли;
	Иначе
		УсловноеОформление = СписокЗадачИлиЕгоУсловноеОформление;
	КонецЕсли;
	
	// недействительные объекты - Исполнитель
	ПредставлениеЭлемента = "Исполнитель недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Исполнитель");
	
	// недействительные объекты - Автор
	ПредставлениеЭлемента = "Автор недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Автор");
	
	// установка оформления для задач, не принятых к исполнению
	ПредставлениеЭлемента = "Задача не принята к исполнению (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение; 
	ЭлементЦветаОформления.Использование = Истина;

	// установка оформления для выполненных задач
	ПредставлениеЭлемента = "Выполненные задачи (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ВыполненнаяЗадача.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// установка оформления для просроченных задач
	ПредставлениеЭлемента = "Просроченные задачи (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
КонецПроцедуры

// Вызывается при создании формы списка бизнес-процессов на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка бизнес-процессов
//
Процедура УстановитьОформлениеБизнесПроцессов(Знач УсловноеОформление) Экспорт

	// недействительные объекты - Исполнитель
	Если УсловноеОформление.ДоступныеПоляПолей.Элементы.Найти("Исполнитель") <> Неопределено Тогда
	
		ПредставлениеЭлемента = "Исполнитель недействителен (стандартная настройка)";
		ЭлементУсловногоОформления =
			ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
		
		ЭлементОтбораДанных =
			ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель.Недействителен");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Истина;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Исполнитель");
		
	КонецЕсли;
	
	// недействительные объекты - Автор
	ПредставлениеЭлемента = "Автор недействителен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор.Недействителен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Автор");
	
	// завершенные процессы
	ПредставлениеЭлемента = "Процесс завершен (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Завершен");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЗавершенныйБизнесПроцесс.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// нестартованные процессы
	ПредставлениеЭлемента = "Процесс не стартован (стандартная настройка)";
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Стартован");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НеСтартованныйБизнесПроцесс.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// прерванные процессы
	Если УсловноеОформление.ДоступныеПоляПолей.Элементы.Найти("Состояние") <> Неопределено Тогда
	
		ПредставлениеЭлемента = "Процесс прерван (стандартная настройка)";
		ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);

		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Перечисления.СостоянияБизнесПроцессов.Прерван;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЗавершенныйБизнесПроцесс.Значение; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строковое представление исполнителя задачи Исполнитель, 
// либо указанного в параметрах РольИсполнителя, ОсновнойОбъектАдресации и ДополнительныйОбъектАдресации.
//
// Параметры:
//  Исполнитель     - ПользовательСсылка  - исполнитель задачи.
//  РольИсполнителя  – Справочники.РолиИсполнителей – роль
//  ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации - произвольный ссылочный тип.
//
// Возвращаемое значение:
//   Строка 
//
Функция ИсполнительСтрокой(Знач Исполнитель, Знач РольИсполнителя,
	Знач ОсновнойОбъектАдресации = Неопределено, Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт

	
	Если НЕ Исполнитель.Пустая() Тогда
		Возврат Строка(Исполнитель)
	ИначеЕсли НЕ РольИсполнителя.Пустая() Тогда
		Возврат РольСтрокой(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	КонецЕсли;
	Возврат НСтр("ru = 'Не указан'");

КонецФункции

// Возвращает строковое представление роли РольИсполнителя.
//
// Параметры
//  РольИсполнителя  – Справочники.РолиИсполнителей – роль
//  ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации - произвольный ссылочный тип.
//
// Возвращаемое значение:
//   Строка 
//
Функция РольСтрокой(Знач РольИсполнителя,
	Знач ОсновнойОбъектАдресации = Неопределено, Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если НЕ РольИсполнителя.Пустая() Тогда
		Результат = Строка(РольИсполнителя);
		Если ОсновнойОбъектАдресации <> Неопределено Тогда
			Результат = Результат + " (" + Строка(ОсновнойОбъектАдресации);
			Если ДополнительныйОбъектАдресации <> Неопределено Тогда
				Результат = Результат + " ," + Строка(ДополнительныйОбъектАдресации);
			КонецЕсли;
			Результат = Результат + ")";
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	Возврат НСтр("ru = 'Не указана'");

КонецФункции

// Помечает на удаление задачи указанного бизнес-процесса.
//
// Параметры
//  БизнесПроцессСсылка  - бизнес-процесс
//  ПометкаУдаления  - Булево - значение свойства ПометкаУдаления.
//
Процедура УстановитьПометкуУдаленияЗадач(БизнесПроцессСсылка, ПометкаУдаления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка 
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			БизнесПроцессСсылка.Метаданные(),
			БизнесПроцессСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Установить формат отображения и редактирования поля формы типа Дата
// в зависимости от настроек подсистемы.
//
// Параметры
//  ПолеДаты  - элемент управления формы, поле со значением типа Дата.
//
Процедура УстановитьФорматДаты(ПолеДаты) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СтрокаФормата = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Если ПолеДаты.Вид = ВидПоляФормы.ПолеВвода Тогда
		ПолеДаты.ФорматРедактирования 	= СтрокаФормата;
	Иначе	
		ПолеДаты.Формат					= СтрокаФормата;
	КонецЕсли;	
	ПолеДаты.Ширина = ?(ИспользоватьДатуИВремяВСрокахЗадач, 0, 8);
	
КонецПроцедуры		

// Проверяет, является ли указанная задача ведущей.
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   Булево
//
Функция БизнесПроцессыВедущейЗадачи(ЗадачаСсылка) Экспорт
	
	Результат = ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции	

// Возвращает массив подчиненных БП
//
Функция ПолучитьПодчиненныеБизнесПроцессы(ВедущаяЗадача) Экспорт
	
	Результат = Новый Массив;
	
	Шаблон =
		"ВЫБРАТЬ
		|	ТаблицаБизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ИмяБизнесПроцесса] КАК ТаблицаБизнесПроцесс
		|ГДЕ
		|	ТаблицаБизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
		|	И ТаблицаБизнесПроцесс.Стартован
		|	И (НЕ ТаблицаБизнесПроцесс.Завершен)";
	
	Для каждого БизнесПроцессМета Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапроса = СтрЗаменить(Шаблон, "[ИмяБизнесПроцесса]", БизнесПроцессМета.Имя);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РешениеВопросовВыполненияЗадач.Ссылка
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &Задача";
	Запрос.УстановитьПараметр("Задача", ВедущаяЗадача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПраваДоступаДляФайловБизнесПроцессов(Процесс, ПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПраваПользователя = Новый Структура("Чтение, Добавление, Изменение, Удаление, УправлениеПравами",
								Истина, Истина, Истина, Истина, Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСубъектовПравДоступа.Пользователь
		|ИЗ
		|	РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО УчастникиПроцессов.Участник = СоставСубъектовПравДоступа.Субъект
		|			И УчастникиПроцессов.ОсновнойОбъектАдресации = СоставСубъектовПравДоступа.ОсновнойОбъектАдресации
		|			И УчастникиПроцессов.ДополнительныйОбъектАдресации = СоставСубъектовПравДоступа.ДополнительныйОбъектАдресации
		|ГДЕ
		|	УчастникиПроцессов.Процесс = &Процесс";
		
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументооборотПраваДоступа.ДобавитьПользователяВСоответствиеПрав(
			ПраваДоступа,
			Выборка.Пользователь,
			Неопределено,
			Неопределено,
			ПраваПользователя);
			
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Выбрать список ролей, которые могут быть назначены в ОсновнойОбъектАдресации,
// и посчитать список назначений.
//
Функция ВыбратьРолиСКоличествомИсполнителей(ОсновнойОбъектАдресации) Экспорт
	Если ОсновнойОбъектАдресации <> Неопределено Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ВнешняяРоль КАК ВнешняяРоль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.ВнешняяРоль,
			|	РолиИсполнителей.Наименование,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ВнешняяРоль КАК ВнешняяРоль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И (ИсполнителиЗадач.ОсновнойОбъектАдресации ЕСТЬ NULL 
			|					ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяБезОбъектовАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.ВнешняяРоль,
			|	РолиИсполнителей.Наименование, 
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	КонецЕсли;		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаЗапроса;
	
КонецФункции

// Выбрать список исполнителей, назначенных на указанную роль.
//
// Результат:
//    Массив - массив элементов справочника Пользователи.
//
Функция ИсполнителиРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	РезультатЗапроса = ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель");	
	
КонецФункции

// Возвращает массив состоящий из текущего пользователя и пользователей, 
// которых замещает текущий пользователь
// 
// Возвращаемое значение:
//  Массив - массив пользователей
//
Функция ИсполнителиЗадачПользователя(ТекущийПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбластиДелегированияПравСостав.Ссылка,
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных
		|ПОМЕСТИТЬ ОбластиСЗадачами
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Задачи)
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДелегированиеПравПользователям.ОтКого КАК Исполнитель
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПравПользователям
		|ГДЕ
		|	ДелегированиеПравПользователям.Кому = &ТекущийПользователь
		|	И ДелегированиеПравПользователям.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|	И НЕ ДелегированиеПравПользователям.ПометкаУдаления
		|	И ДелегированиеПравПользователям.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.ОтКого
		|ИЗ
		|	Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластиСЗадачами КАК ОбластиСЗадачами
		|		ПО ДелегированиеПравОбластиДелегирования.ОбластьДелегирования = ОбластиСЗадачами.Ссылка
		|ГДЕ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.Кому = &ТекущийПользователь
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.Выборочно)
		|	И НЕ ДелегированиеПравОбластиДелегирования.Ссылка.ПометкаУдаления
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ТекущийПользователь";
		
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
КонецФункции

// Есть ли хотя бы один исполнитель, назначенный на указанную роль.
//
// Результат:
//   Булево
//
Функция ЕстьИсполнителиРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	РезультатЗапроса = ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции

Функция ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
	   |	ИсполнителиЗадач.Исполнитель
	   |ИЗ
	   |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	   |ГДЕ
	   |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Если ОсновнойОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса +
	   		"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
	КонецЕсли;		
	Если ДополнительныйОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса +
		 	"	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	КонецЕсли;		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", РольСсылка);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

// Выбрать одного любого исполнителя, назначенного на РольИсполнителя в ОсновнойОбъектАдресации.
// 
Функция ВыбратьИсполнителя(ОсновнойОбъектАдресации, РольИсполнителя) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации");
		
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("РольИсполнителя", РольИсполнителя);
	ВыборкаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ?(ВыборкаЗапроса.Количество() > 0, ВыборкаЗапроса[0].Исполнитель, Справочники.Пользователи.ПустаяСсылка());
	
КонецФункции	

// Выполняет перенаправление (изменение исполнителя) задачи.
//
// Параметры
//  Задача  - ЗадачаИсполнителяСсылка - перенаправляемая задача.
//  ИнфоОПеренаправлении  - Структура - информация о новом исполнителе задачи.
//	ИдентификаторФормы - идентификатор формы, из которой было вызвано перенаправление.
//
// Возвращаемое значение:
//   Булево   - Истина, если перенаправление прошло успешно.
//
Функция ПеренаправитьЗадачу(Знач Задача, Знач ИнфоОПеренаправлении, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПеренаправлениеЗадач") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗадачаВыполнена = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача.Ссылка, "Выполнена");
	Если ЗадачаВыполнена Тогда
		Возврат Результат = Ложь;
	КонецЕсли;
	
	ПраваНаЗадачу = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Задача.Ссылка);
	Если Не ПраваНаЗадачу.Изменение Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для перенаправления задачи.
			|Обратитесь к администратору.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		ВнешняяТранзакция = ТранзакцияАктивна();
		Если Не ВнешняяТранзакция Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка,, ИдентификаторФормы);
		
		// Сохранение старого исполнителя задачи
		Набор = РегистрыСведений.СведенияОбИсполнителяхЗадач.СоздатьНаборЗаписей();
		Набор.Отбор.Задача.Установить(ЗадачаОбъект.Ссылка);
		Если ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			Набор.Отбор.Участник.Установить(ЗадачаОбъект.Исполнитель);
		Иначе
			Набор.Отбор.Участник.Установить(ЗадачаОбъект.РольИсполнителя);
			Набор.Отбор.ОсновнойОбъектАдресации.Установить(ЗадачаОбъект.ОсновнойОбъектАдресации);
			Набор.Отбор.ДополнительныйОбъектАдресации.Установить(ЗадачаОбъект.ДополнительныйОбъектАдресации);
		КонецЕсли;
		
		Запись = Набор.Добавить();
		Запись.Задача = Задача;
		Если ЗначениеЗаполнено(ЗадачаОбъект.Исполнитель) Тогда
			Запись.Участник = ЗадачаОбъект.Исполнитель;
		Иначе	
			Запись.Участник = ЗадачаОбъект.РольИсполнителя;
			Запись.ОсновнойОбъектАдресации = ЗадачаОбъект.ОсновнойОбъектАдресации;
			Запись.ДополнительныйОбъектАдресации = ЗадачаОбъект.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		
		Набор.Записать(Истина);
		
		ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ИнфоОПеренаправлении, 
			"Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации");
		Если Не ПустаяСтрока(ИнфоОПеренаправлении.Комментарий) Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("КомментарийПеренаправления", ИнфоОПеренаправлении.Комментарий);
		КонецЕсли;	
		
		// Установка необходимости обновления прав доступа
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		ЗадачаОбъект.ПринятаКИсполнению = Ложь;
		ЗадачаОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПриПеренаправленииЗадачи(ЗадачаОбъект);
		
		ПротоколированиеРаботыПользователей.ЗаписатьПеренаправлениеЗадачи(Задача.Ссылка);
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Задача.Ссылка, ИдентификаторФормы);
		
		Возврат Результат;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Процедура ПриПеренаправленииЗадачи(ЗадачаОбъект) 
	
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено Или ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ЗадачаОбъект.БизнесПроцесс));
	ЕстьМетодПриПеренаправленииЗадачи = Ложь;
	Попытка
		ЕстьМетодПриПеренаправленииЗадачи = БизнесПроцессы[ТипБизнесПроцесса.Имя].ЕстьМетодПриПеренаправленииЗадачи()
	Исключение
		// Функция "ЕстьМетодПриПеренаправленииЗадачи" может быть не определена для бизнес-процесса этого типа
	КонецПопытки;
	Если ЕстьМетодПриПеренаправленииЗадачи Тогда
		БизнесПроцессы[ТипБизнесПроцесса.Имя].ПриПеренаправленииЗадачи(ЗадачаОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Получить бизнес-процессы ведущей задачи ЗадачаСсылка.
//
Функция ВыбратьБизнесПроцессыВедущейЗадачи(ЗадачаСсылка) Экспорт
	
	Итерация = 1;
	ТекстЗапроса = "";
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
		КонецЕсли;
		ФрагментЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ %3
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ВедущаяЗадача = &ВедущаяЗадача", ТипБизнесПроцесса.Имя, ТипБизнесПроцесса.ПолноеИмя(),
			?(Итерация = 1, "РАЗРЕШЕННЫЕ", ""));
		ТекстЗапроса = ТекстЗапроса + ФрагментЗапроса;
		Итерация = Итерация + 1;
	КонецЦикла;	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
	Результат = Запрос.Выполнить();
	Возврат Результат;
		
КонецФункции	

// Вид события журнала регистрации для событий данной подсистемы.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Процессы и задачи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Вызывается при изменении состояния бизнес-процесса для того, чтобы 
// распространить это изменение состояния на невыполненные задачи этого 
// бизнес-процесса.
//
Процедура ПриИзмененииСостоянияБизнесПроцесса(БизнесПроцесс, СтароеСостояние, НовоеСостояние) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = Ложь";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Задача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Задача.Заблокировать();
		Задача.СостояниеБизнесПроцесса =  НовоеСостояние;
		Задача.Записать();
		
		ПриИзмененииСостоянияЗадачи(Задача.Ссылка, СтароеСостояние, НовоеСостояние);
	КонецЦикла;

КонецПроцедуры

Процедура ПриИзмененииСостоянияЗадачи(ЗадачаСсылка, СтароеСостояние, НовоеСостояние)
	
	// Меняем состояние вложенных бизнес-процессов
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Если НЕ ПравоДоступа("Изменение", МетаданныеБизнесПроцесса) Тогда
		    Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БизнесПроцессы.Ссылка
		|ИЗ
		|	%БизнесПроцесс% КАК БизнесПроцессы
		|ГДЕ
		|   БизнесПроцессы.ВедущаяЗадача = &ВедущаяЗадача
		|   И БизнесПроцессы.ПометкаУдаления = Ложь
		| 	И БизнесПроцессы.Завершен = Ложь";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаСсылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.ДополнительныеСвойства.Вставить("ИзменениеСостоянияВложенногоПроцесса", Истина);
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Меняем состояние подчиненных бизнес-процессов
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь
			| 	И БизнесПроцессы.Завершен = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			БизнесПроцесс.Состояние = НовоеСостояние;
			БизнесПроцесс.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры
	
// Заполняет реквизит ГлавнаяЗадача при создании бизнес-процесса
// на основании другого бизнес-процесса
//
Процедура ЗаполнитьГлавнуюЗадачу(БизнесПроцессОбъект, ДанныеЗаполнения) Экспорт
	
	Если БизнесПроцессыИЗадачиПереопределяемый.ЗаполнитьГлавнуюЗадачу(БизнесПроцессОбъект, ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
		БизнесПроцессОбъект.ГлавнаяЗадача = ДанныеЗаполнения.ЗадачаИсполнителя;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, Представление) Экспорт
	
	Для Каждого ЭлементОформления из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = Представление Тогда
			ЭлементОформления.Отбор.Элементы.Очистить();
			ЭлементОформления.Поля.Элементы.Очистить();
			Возврат ЭлементОформления;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Вставить(0);
	ЭлементОформления.Представление = Представление;
	
	Возврат ЭлементОформления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебный программный интерфейс

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"БизнесПроцессыИЗадачиСервер");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.2.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.6";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеИнформационнойБазыПредметСтрокой";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.2";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеСостоянияИПринятияКИсполнению";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.1";
	Обработчик.Процедура = "БизнесПроцессыИЗадачиСервер.ОбновлениеКодаРолиИсполнителя";
	
КонецПроцедуры	

// Инициализировать предопределенную роль исполнителей ОтветственныйЗаКонтрольИсполнения.
// 
Процедура ОбновлениеИнформационнойБазы() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	РольОбъект = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(РольОбъект.Ссылка);
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	
КонецПроцедуры

// Заполнить новое поле ПредметСтрокой у задачи ЗадачаИсполнителя.
// 
Процедура ОбновлениеИнформационнойБазыПредметСтрокой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК Задачи
		|ГДЕ
		|	Задачи.Предмет <> НЕОПРЕДЕЛЕНО";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ПредметСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(ЗадачаОбъект.Предметы);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
	КонецЦикла;

КонецПроцедуры

// Обработчик подписки ИзменениеПредметаПередЗаписьюБизнесПроцесса
//
Процедура ИзменениеПредметаПередЗаписьюБизнесПроцессаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеПредметы = Неопределено;
	ПредыдущиеПредметы = Неопределено;
	Если Мультипредметность.ИзмененыПредметыДействийПроцесса(Источник, ТекущиеПредметы, ПредыдущиеПредметы) Тогда
		Мультипредметность.ПриИзмененииПредметовБизнесПроцесса(Источник, ТекущиеПредметы, ПредыдущиеПредметы);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет коды в справочнике РолиИсполнителей
Процедура ОбновлениеКодаРолиИсполнителя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка,
		|	РолиИсполнителей.Код
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеКода = ВыборкаДетальныеЗаписи.Код;
		Если ПустаяСтрока(ЗначениеКода) Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеКода) Тогда
			Продолжить;
		КонецЕсли;
		
		РольИсполнителейОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		РольИсполнителейОбъект.КраткоеПредставление = ЗначениеКода;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РольИсполнителейОбъект);
		
	КонецЦикла;

КонецПроцедуры

// Обработчик подписи ЗадачаПриЗаписи
Процедура ПриЗаписиЗадачиСервер(Источник, Знач Предметы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Предметы = Неопределено Тогда
		Предметы = Источник.Предметы;
	КонецЕсли;
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка
    
		Для каждого Строка Из Предметы Цикл
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах");
			ЭлементБлокировки.УстановитьЗначение("Объект", Строка.Предмет);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		КонецЦикла;
		
		// Запись признака ЕстьЗадачи
		Если Источник.ПометкаУдаления
			ИЛИ Источник.Выполнена
			ИЛИ Источник.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			Для каждого Строка Из Предметы Цикл
				Если ЗначениеЗаполнено(Строка.Предмет) Тогда
					ЕстьЗадачи = ОбъектИмеетЗадачи(Строка.Предмет, Источник.Ссылка);
					РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Строка.Предмет, "ЕстьЗадачи", ЕстьЗадачи);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для каждого Строка Из Предметы Цикл
				
				Если ЗначениеЗаполнено(Строка.Предмет) Тогда
					
					ЗаписьИзменилась = Ложь;
					
					МенеджерЗаписи = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект = Строка.Предмет;
					МенеджерЗаписи.Прочитать();
					
					Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Объект) Тогда
						МенеджерЗаписи.Объект =  Строка.Предмет;
						ЗаписьИзменилась = Истина;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Объект) Тогда
						Возврат; // этот тип владельца не рассматриваем
					КонецЕсли;
					
					Если НЕ МенеджерЗаписи.ЕстьЗадачи Тогда
						МенеджерЗаписи.ЕстьЗадачи = Истина;
						ЗаписьИзменилась = Истина;
					КонецЕсли;
					
					Если Источник.Предметы.Найти(Строка.Предмет, "Предмет") = Неопределено Тогда
						Если Не ОбъектИмеетЗадачи(Строка.Предмет, Источник.Ссылка) Тогда
							МенеджерЗаписи.ЕстьЗадачи = Ложь;
							ЗаписьИзменилась = Истина;
						КонецЕсли;	
					КонецЕсли;	
					
					Если ЗаписьИзменилась Тогда
						МенеджерЗаписи.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Пометить на удаление вложенные и подчиненные бизнес-процессы задачи ЗадачаСсылка.
//
// Параметры
//  ЗадачаСсылка                 - ЗадачаСсылка.ЗадачаИсполнителя
//  НовоеЗначениеПометкиУдаления - Булево
//
Процедура ПриПометкеУдаленияЗадачи(ЗадачаСсылка, НовоеЗначениеПометкиУдаления) Экспорт
	
	ОбъектЗадачи = ЗадачаСсылка.Метаданные();
	Если НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивнаяПометкаУдаления", ОбъектЗадачи);
	КонецЕсли;
	Если Не НовоеЗначениеПометкиУдаления Тогда
		ВыполнитьПроверкуПравДоступа("ИнтерактивноеСнятиеПометкиУдаления", ОбъектЗадачи);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Помечаем вложенные бизнес-процессы
		УстановитьПривилегированныйРежим(Истина);
		ВложенныеБизнесПроцессы = БизнесПроцессыВедущейЗадачи(ЗадачаСсылка);
		Для Каждого ВложенныйБизнесПроцесс Из ВложенныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ВложенныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;	
		УстановитьПривилегированныйРежим(Ложь);
		
		// Помечаем подчиненные бизнес-процессы
		ПодчиненныеБизнесПроцессы = БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка);
		Для Каждого ПодчиненныйБизнесПроцесс Из ПодчиненныеБизнесПроцессы Цикл
			БизнесПроцессОбъект = ПодчиненныйБизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.Заблокировать();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НовоеЗначениеПометкиУдаления);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив подчиненных указанной задаче бизнес-процессов
//
// Параметры
//  ЗадачаСсылка  - задача.
//
// Возвращаемое значение:
//   массив ссылок на бизнес-процессы
//
Функция БизнесПроцессыГлавнойЗадачи(ЗадачаСсылка) Экспорт
	
	Результат = Новый Массив;
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		// У бизнес-процесса может и не быть главной задачи
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	%1.Ссылка КАК Ссылка
			|ИЗ
			|	%2 КАК %1
			|ГДЕ
			|	%1.ГлавнаяЗадача = &ГлавнаяЗадача", МетаданныеБизнесПроцесса.Имя, МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	
	
	Возврат Результат;
		
КонецФункции	

// Проверяет, что по объекту есть хоть одна незавершенная задача 
//
Функция ОбъектИмеетЗадачи(Предмет, Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И ЗадачаИсполнителя.Ссылка <> &Ссылка
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("Предмет", Предмет);
	Запрос.Параметры.Вставить("Ссылка", Задача);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Заполняет регистр КешИнформацииОбОбъектах при обновлении базы
Процедура ЗаполнитьРегистрКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Предметы.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК Предметы
		|ГДЕ
		|	Предметы.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И Предметы.Ссылка.Выполнена = ЛОЖЬ
		|	И Предметы.Ссылка.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Предмет = Выборка.Предмет;
		
		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить; // этот тип владельца не рассматриваем
		КонецЕсли;
		
		РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Предмет, "ЕстьЗадачи", Истина); 
		
	КонецЦикла;
	
КонецПроцедуры

// Получает все дочерние бизнес-процессы указанного бизнес-процесса в привилегированном режиме
Процедура ПолучитьДочерниеПроцессы(БизнесПроцесс, МассивПроцессов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &РодительскийПроцесс";

	Запрос.УстановитьПараметр("РодительскийПроцесс", БизнесПроцесс.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивПроцессов.Добавить(ВыборкаДетальныеЗаписи.ДочернийПроцесс);
	КонецЦикла;

КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Возвращает Истина, если используется подсистема ВнешниеЗадачиИБизнесПроцессы
Процедура ПриОпределенииИспользованияВнешнихЗадачИБизнесПроцессов(ПодсистемаИспользуется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи") Тогда
		ПодсистемаИспользуется = Истина;
	Иначе
		ПодсистемаИспользуется = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если задача является внешней. 
//
// Параметры
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ПриОпределенииВнешнейЗадачи(ЗадачаСсылка, ЗадачаВнешняя) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи") Тогда
	Иначе
		ЗадачаВнешняя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вызывается при получении полей представления для бизнес-процессов. Параметры соответствуют
// одноименной процедуре в модуле менеджера бизнес-процесса.
//
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("Дата");
	
КонецПроцедуры

// Вызывается при получении представления для бизнес-процессов. Параметры соответствуют
// одноименной процедуре в модуле менеджера бизнес-процесса.
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстПредставления = НСтр("ru = '%1 от %2'");
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстПредставления,
		Данные.Наименование,
		Данные.Дата);
	
КонецПроцедуры

// Обновить признак принятия к исполнению задач при смене версии конфигурации.
// 
Процедура ОбновлениеСостоянияИПринятияКИсполнению() Экспорт
	
	// Обновления состояния бизнес-процессов и задач
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитСостояние = МетаданныеБизнесПроцесса.Реквизиты.Найти("Состояние");
		Если РеквизитСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Состояние = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДетальныеЗаписи.Ссылка, "Состояние");
			
			Если Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен И  
				Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				
				БизнесПроцесс = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				БизнесПроцесс.Заблокировать();
				БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
				БизнесПроцесс.Записать();
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Обновления принятия к исполнению задач
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи";
		
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Заблокировать();
		
		Если ЗадачаОбъект.Выполнена Тогда
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ЗадачаОбъект.ДатаИсполнения;
		КонецЕсли;	
				
		Если ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Остановлен 
			И ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
				
			ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
			
		КонецЕсли;	
		
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает информацию о прерывании процесса из протокола работы пользователя.
//  В случае если у текущего процесса отсутствует информация о прерывании,
//  то рекурсивно получает информацию у вышестоящего процесса.
//
// Возвращаемое значение:
//  Структура
//   Дата - дата прерывания процесса    	
//   Пользователь - пользователь прервавший процесс
//   ПричинаПрерывания - причина прерывания процесса
//
Функция ПолучитьИнформациюОПрерыванииПроцесса(БизнесПроцесс) Экспорт
	
	КтоИКогдаПрервалПроцесс = ПротоколированиеРаботыПользователей.ИнформацияОПрерыванииПроцессаИзПротокола(
		БизнесПроцесс);
		
	Если КтоИКогдаПрервалПроцесс <> Неопределено Тогда			
		ПричинаПрерывания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			БизнесПроцесс, 
			"ПричинаПрерывания");
		КтоИКогдаПрервалПроцесс.Вставить("ПричинаПрерывания", ПричинаПрерывания);
		Возврат КтоИКогдаПрервалПроцесс;	
	КонецЕсли;	
	
	// Если в текущем процессе нет информации о прерывании, 
	//  значит прервали вышестоящий процесс, необходимо его найти		
	ГлавныеЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		БизнесПроцесс, 
		"ГлавнаяЗадача, ВедущаяЗадача");
	
	ГлавнаяЗадача = Неопределено;
	
	Если ГлавныеЗадачи.ГлавнаяЗадача <> Неопределено
		И НЕ ГлавныеЗадачи.ГлавнаяЗадача.Пустая() Тогда
		ГлавнаяЗадача = ГлавныеЗадачи.ГлавнаяЗадача;
	ИначеЕсли ГлавныеЗадачи.ВедущаяЗадача <> Неопределено
		И НЕ ГлавныеЗадачи.ВедущаяЗадача.Пустая() Тогда
		ГлавнаяЗадача = ГлавныеЗадачи.ВедущаяЗадача;
	КонецЕсли;
	
	Если ГлавнаяЗадача = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроцессГлавнойЗадачи = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		ГлавнаяЗадача, 
		"БизнесПроцесс");
		
	Если Не ЗначениеЗаполнено(ПроцессГлавнойЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;	
		
	Возврат ПолучитьИнформациюОПрерыванииПроцесса(ПроцессГлавнойЗадачи);		
		
КонецФункции

// Отмечает указанные задачи как принятые к исполнению
//
Процедура ПринятьЗадачиКИсполнению(Задачи) Экспорт
	
	НовыйМассивЗадач = Новый Массив();
	НачатьТранзакцию();
	Для каждого Задача Из Задачи Цикл
		Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			
			Если ЗадачаОбъект.Выполнена
				ИЛИ ЗадачаОбъект.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
				ИЛИ ЗадачаОбъект.ПринятаКИсполнению
				ИЛИ ЗадачаОбъект.ПометкаУдаления Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗадачаОбъект.ПринятаКИсполнению = Истина;
			ЗадачаОбъект.ДатаПринятияКИсполнению = ТекущаяДатаСеанса();
			Если ЗадачаОбъект.Исполнитель.Пустая() Тогда
				ЗадачаОбъект.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;	
				
			ЗадачаОбъект.Записать();
			
			НовыйМассивЗадач.Добавить(Задача);
		КонецЕсли;	
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Задачи = НовыйМассивЗадач;
	
КонецПроцедуры

// Формирует список подбора для указания исполнителя в полях
// ввода составного типа (Пользователь и Роль)
Функция СформироватьДанныеВыбораИсполнителя(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Текст
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РолиИсполнителей.Ссылка
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Наименование ПОДОБНО &Текст";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Объявляет служебные события подсистемы БизнесПроцессыИЗадачи:
//
// Серверные события:
//   ПриОпределенииПредставленияПредметаВнешнейЗадачи,
//   ПриОпределенииСпискаФайлов,
//   ПриВыполненииЗадачиИсточника.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
		
КонецПроцедуры
