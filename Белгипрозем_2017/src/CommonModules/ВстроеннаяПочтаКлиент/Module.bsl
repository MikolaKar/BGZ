/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

// Открывает вложенный файл электронного письма
//
// Параметры
// - Ссылка (СправочникСсылка.Файлы)
//
Процедура ОткрытьВложение(Ссылка, УникальныйИдентификаторФормы, УпрощенныйРежимРаботыСФайлами = Ложь) Экспорт
	
	Если Не УпрощенныйРежимРаботыСФайлами Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			Ссылка,
			Неопределено, // Версия
			УникальныйИдентификаторФормы);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ПоказыватьОповещения = Ложь;
		КомандыРаботыСФайламиКлиент.Редактировать(Ссылка, , , ПоказыватьОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ССЫЛКАМИ

// Открывает ссылку в теле письма.
//
Процедура ОткрытьСсылку(Href, Element, ТекущееПисьмо = Неопределено, HTMLДокумент = Неопределено) Экспорт
	
	ВыбраннаяСсылка = Неопределено;
	
	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПустаяСтрока(ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Если Найти(ВыбраннаяСсылка, "javascript:_1c") = 1 Тогда
		
		// FF - используется javascript такого вида
		ПозицияНавигационнойСсылки = Найти(ВыбраннаяСсылка, "e1cib/");
		
		Если ПозицияНавигационнойСсылки <> 0 Тогда
			ВыбраннаяСсылка = 
				"v8doc:" 
				+ Сред(
					ВыбраннаяСсылка, 
					ПозицияНавигационнойСсылки, 
					СтрДлина(ВыбраннаяСсылка) - ПозицияНавигационнойСсылки - 2);
		Иначе
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПозицияРазделителя = Найти(ВыбраннаяСсылка, "#");
	ПозицияВнутреннейНавигационнойСсылки = Найти(ВыбраннаяСсылка, "#e1cib/");
	
	Если ПозицияРазделителя = 1  Тогда
		
		// Safari - передается просто относительная ссылка
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		// Chrome, IE - передаётся полная ссылка
		Если ПозицияРазделителя <> 0 И ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
			
			СтандартнаяОбработка = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#Иначе
	Если Найти(ВыбраннаяСсылка, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) = 1 Тогда
		
		ElementID = Сред(ВыбраннаяСсылка, Найти(ВыбраннаяСсылка, "#") + 1);
		ElementByID = HTMLДокумент.getElementById(ElementID);
		
		Если ElementByID <> Неопределено Тогда
			ElementByID.scrollIntoView(true);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	#КонецЕсли
	
	СхемаСсылки = ОпределитьСхемуСсылки(ВыбраннаяСсылка);
	
	Если СхемаСсылки = "v8doc:" Тогда
		
		ОбработатьСсылку1СДокументооборота(ВыбраннаяСсылка, ТекущееПисьмо, HTMLДокумент);
		
	ИначеЕсли СхемаСсылки = "e1c://" Тогда
		
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		
	ИначеЕсли (СхемаСсылки = "http://" И Найти(ВыбраннаяСсылка, "e1cib") > 0)
		ИЛИ (СхемаСсылки = "https://" И Найти(ВыбраннаяСсылка, "e1cib") > 0) Тогда
		
		Если Не ПерейтиПоВнутреннейНавигационнойСсылке(ВыбраннаяСсылка) Тогда
			ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		КонецЕсли;
		
	ИначеЕсли СхемаСсылки = "http://"
		Или СхемаСсылки = "https://"
		Или СхемаСсылки = "ftp://"
		Или СхемаСсылки = "file://" Тогда
		
		#Если ВебКлиент Тогда
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		#Иначе
		ЗапуститьПриложение(ВыбраннаяСсылка);
		#КонецЕсли
		
	ИначеЕсли СхемаСсылки = "mailto:" Тогда
		
		СоздатьПисьмоНаОснованииСсылкиMailto(ВыбраннаяСсылка);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(ВыбраннаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет схему ссылки
Функция ОпределитьСхемуСсылки(Href)
	
	Если СтрокаНачинаетсяСПодстроки(Href, "v8doc:") Тогда
		
		Возврат "v8doc:";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "http://") Тогда
		
		Возврат "http://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "https://") Тогда
		
		Возврат "https://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "ftp://") Тогда
		
		Возврат "ftp://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "e1c://") Тогда
		
		Возврат "e1c://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "file://") Тогда
		
		Возврат "file://";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Href, "mailto:") Тогда
		
		Возврат "mailto:";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Проверяет, содержит ли ссылка схему
Функция СтрокаНачинаетсяСПодстроки(Строка, Подстрока)
	
	Если Найти(НРег(СокрЛ(Строка)), НРег(Подстрока)) = 1 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает ссылку 1С:Документооборота
Процедура ОбработатьСсылку1СДокументооборота(Ссылка1СДокументооборота, ТекущееПисьмо, HTMLДокумент)
	
	СхемаСсылок1СДокументооборота = "v8doc:";
	
	Если  ОпределитьСхемуСсылки(Ссылка1СДокументооборота) <> СхемаСсылок1СДокументооборота Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка1СДокументооборота = Сред(Ссылка1СДокументооборота, СтрДлина(СхемаСсылок1СДокументооборота) + 1);
	ТипСсылки = ОпределитьТипСсылки1СДокументооборота(Ссылка1СДокументооборота);
	
	Если ТипСсылки = "e1cib/" Тогда
		
		ПерейтиПоНавигационнойСсылке(Ссылка1СДокументооборота);
		
	ИначеЕсли ТипСсылки = "mail/" Тогда
		
		Ссылка1СДокументооборота = Сред(Ссылка1СДокументооборота, СтрДлина(ТипСсылки) + 1);
		
		Если СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "correspondencehistory") Тогда
			
			ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ТекущееПисьмо);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет попытку перехода по внутренней навигационной ссылке
//
Функция ПерейтиПоВнутреннейНавигационнойСсылке(НавигационнаяСсылка)
	
	ПозицияВнутреннейНавигационнойСсылки = Найти(НавигационнаяСсылка, "#e1cib/");
	Если ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВнутренняяНавигационнаяСсылка = Сред(НавигационнаяСсылка, ПозицияВнутреннейНавигационнойСсылки + 1);
	Попытка
		ПерейтиПоНавигационнойСсылке(ВнутренняяНавигационнаяСсылка);
	Исключение
		// Внутренней навигационный ссылки может не быть в базе.
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Определяет тип ссылки 1С:Документооборота
Функция ОпределитьТипСсылки1СДокументооборота(Ссылка1СДокументооборота)
	
	Если СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "e1cib/") Тогда
		
		Возврат "e1cib/";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "mail/") Тогда
		
		Возврат "mail/"
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Формирует ссылку
Функция СформироватьСсылку(
	Ссылка = "",
	ТипСсылки = "",
	ТипТекста = Неопределено,
	Представление = "") Экспорт
	
	Если ТипТекста = Неопределено Тогда
		ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
	КонецЕсли;
	
	СформированнаяСсылка = "";
	
	СформированнаяСсылка = СформированнаяСсылка + Ссылка;
	
	Если Не ПустаяСтрока(Ссылка) Тогда
		
		Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СформированнаяСсылка;
			КонецЕсли;
			
			СформированнаяСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=""%1%2"">%3</a>", 
				ТипСсылки,
				СформированнаяСсылка,
				Представление);
			
		Иначе
			
			СформированнаяСсылка = ТипСсылки + СформированнаяСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СформированнаяСсылка;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПИСЬМАМИ

// Обработка команды "Написать". Открывает форму нового исходящего письма.
//
Процедура СоздатьПисьмо() Экспорт
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо".
//
Процедура СоздатьПисьмоНаОсновании(Ссылка) Экспорт
	
	ПараметрыФормы = Новый Структура("Основание", Ссылка);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо".
//
Процедура СоздатьПисьмоНаОснованииФайлов(Файлы) Экспорт
	
	ПараметрыФормы = Новый Структура("Файлы", Файлы);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка создания письма при клике на ссылку mailto
Процедура СоздатьПисьмоНаОснованииСсылкиMailto(СсылкаMailto) Экспорт
	
	ПараметрыФормы = Новый Структура("СсылкаMailto", СсылкаMailto);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Переслать". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ПереслатьПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Переслать");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Ответить". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ОтветитьНаПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Ответить");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Ответить всем". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ОтветитьВсемНаПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "ОтветитьВсем");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает форму переписки по письму.
//
Процедура ОткрытьДеревоПереписки(Письмо) Экспорт
	
	ПараметрыФормы = Новый Структура("ТекущееПисьмо", Письмо);
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ИсторияПереписки", ПараметрыФормы);
	
КонецПроцедуры

// Получение данных письма и запись текста письма
Процедура СохранитьТекстПисьма(Письмо, УникальныйИдентификатор) Экспорт
	
	ДанныеПисьма = ВстроеннаяПочтаСервер.ПолучитьДанныеПисьмаДляСохраненияТекста(Письмо, УникальныйИдентификатор);	
	
	ЗаписатьТекстПисьма(ДанныеПисьма, УникальныйИдентификатор);

КонецПроцедуры

// Запись текста письма на диск
Процедура ЗаписатьТекстПисьма(
	ДанныеПисьма, 
	УникальныйИдентификатор, 
	ЗапомнитьНовыйПуть = Истина, 
	УказанныйПутьВыбора = Неопределено, 
	УказанноеИмяФайла = Неопределено, 
	НеСпрашиватьВариантСохранения = Ложь) Экспорт

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		ПутьВыбора = ДанныеПисьма.ПутьВыбора;
		
		ВыбранФайл = Ложь;
		Если ЗначениеЗаполнено(УказанныйПутьВыбора) И ЗначениеЗаполнено(УказанноеИмяФайла) Тогда
			ПерезаписатьФайл = Ложь;
			Расширение = "txt";
			ИмяБезРасширения = УказанноеИмяФайла;
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение);
			ИмяСРасширением = 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
			ВыбранФайл = Истина;
			ВыбранныйПутьВыбора = УказанныйПутьВыбора;
			ВыбранноеПолноеИмяФайла = УказанныйПутьВыбора + ИмяСРасширением;
		Иначе
			ПерезаписатьФайл = Истина;
			Расширение = "txt";
			ИмяБезРасширения = ДанныеПисьма.Тема; 
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение);
			ИмяСРасширением = 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
			ВыборФайла.Фильтр = Фильтр;
			ВыборФайла.Каталог = ПутьВыбора;
			
			Если ВыборФайла.Выбрать() Тогда
				ВыбранФайл = Истина;
				ВыбранноеПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
				ВыбранныйПутьВыбора = ВыборФайла.Каталог;				
			КонецЕсли;
		КонецЕсли;
				
		Если ВыбранФайл Тогда
			
			ТекстПояснения =
			НСтр("ru = 'Выполняется сохранение текста письма.
				|Пожалуйста, подождите...'");
			Состояние(ТекстПояснения);
			
			АдресФайла = ДанныеПисьма.АдресФайла;
			ВыбранныйПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ВыбранныйПутьВыбора);
			
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ВыбранноеПолноеИмяФайла", ВыбранноеПолноеИмяФайла);
			ПараметрыВыполнения.Вставить("АдресФайла", АдресФайла);
			ПараметрыВыполнения.Вставить("ПутьКФайлуВКеше", "");
			ПараметрыВыполнения.Вставить("ВыбранныйПутьВыбора", ВыбранныйПутьВыбора);
			ПараметрыВыполнения.Вставить("ПутьВыбора", ПутьВыбора);
			ПараметрыВыполнения.Вставить("ИмяБезРасширения", ИмяБезРасширения);
			ПараметрыВыполнения.Вставить("Расширение", Расширение);
			ПараметрыВыполнения.Вставить("НеСпрашиватьВариантСохранения", НеСпрашиватьВариантСохранения);
			ПараметрыВыполнения.Вставить("ЗапомнитьНовыйПуть", ЗапомнитьНовыйПуть);
			ПараметрыВыполнения.Вставить("ДанныеПисьма", ДанныеПисьма);
			ПараметрыВыполнения.Вставить("ПолноеНаименованиеВерсии", УказанноеИмяФайла);
			
			Файл = Новый Файл(ВыбранноеПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Если ПерезаписатьФайл Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ВыбранноеПолноеИмяФайла);
				Иначе
					
					Файл = РаботаСФайламиКлиент.ПолучитьФайлСЗаданнымИменем(
						ВыбранноеПолноеИмяФайла,
						ВыбранныйПутьВыбора,
						ИмяБезРасширения,
						Расширение,
						"",
						НеСпрашиватьВариантСохранения);
						
					Если Файл = Неопределено Тогда
						Возврат;		
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыбранноеПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			ТекстПисьмаСохранен = Ложь;
			#Если ВебКлиент Тогда
				Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
					НовыйФайл = Новый Файл(ВыбранноеПолноеИмяФайла);
					ТекстПисьмаСохранен = Истина;
				КонецЕсли;
			#Иначе
				Текст = Новый ЗаписьТекста(ВыбранноеПолноеИмяФайла, ДанныеПисьма.Кодировка);
				Текст.Записать(ДанныеПисьма.ТекстПисьма);
				Текст.Закрыть();
				ТекстПисьмаСохранен = Истина;
			#КонецЕсли
			
			Состояние(НСтр("ru = 'Текст письма успешно сохранен в файл'"), , ВыбранноеПолноеИмяФайла);
			Если ЗапомнитьНовыйПуть И ТекстПисьмаСохранен Тогда
				ПутьВыбораПрежний = ПутьВыбора;
				ПутьВыбора = ВыбранныйПутьВыбора;
				ПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ПутьВыбора);
				Если ПутьВыбораПрежний <> ПутьВыбора Тогда
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохраненияПисем", ПутьВыбора);
				КонецЕсли;	
			КонецЕсли;
							
		КонецЕсли;
	Иначе 
		АдресФайла = ДанныеПисьма.АдресФайла;
		
		Если ЗначениеЗаполнено(УказанныйПутьВыбора) И ЗначениеЗаполнено(УказанноеИмяФайла) Тогда
			Расширение = "txt";
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(УказанноеИмяФайла, Расширение);
			ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
		Иначе
			Расширение = "txt";
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ДанныеПисьма.Тема, Расширение);
		КонецЕсли;
		
		ТекстПояснения =
		НСтр("ru = 'Выполняется сохранение текста письма.
			|Пожалуйста, подождите...'");
		Состояние(ТекстПояснения);
		
		ПолучитьФайл(АдресФайла, ИмяСРасширением, Истина);
	КонецЕсли;

КонецПроцедуры

// Функция предназначена для сохранения списка файлов, с запоминанием
// папки для сохранения вложений писем. При повторном сохранении вложений писем
// открывается выбранная в прошлый раз папка для выбора.
Функция СохранитьВложенияКак(СписокФайлов, УникальныйИдентификатор) Экспорт
	
	ДанныеСохраняемыхФайлов = ВстроеннаяПочтаСервер.ПолучитьДанныеФайловДляСохраненияФайлов(СписокФайлов, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьЗавершение",
		ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьФайлы(ОписаниеОповещения, ДанныеСохраняемыхФайлов, УникальныйИдентификатор, "ПапкаДляСохраненияПисем");
	
КонецФункции

Процедура СохранитьЗавершение(КодВозврата, Параметры) Экспорт 
	
	ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'");
	Состояние(ТекстПояснения);
	
КонецПроцедуры

// Функция обирает данные файлов, оставляя в данных сохраняемых файлов только
// файлы, указанные в списке файлов.
Функция ОтобратьДанныеФайловДляСохранения(ДанныеСохраняемыхФайлов, СписокФайлов, ПутьВыбора = Неопределено) Экспорт
	
	СписокДанныхФайлов = Новый СписокЗначений();
	ОбщийРазмер = 0;
	
	Для Каждого СтрокаФайл Из ДанныеСохраняемыхФайлов.СписокДанныхФайлов Цикл
		
		ДанныеФайла = СтрокаФайл.Значение;
		
		Если ЗначениеЗаполнено(ДанныеФайла.Ссылка) Тогда
			
			МассивНайденныхФайлов = СписокФайлов.НайтиСтроки(Новый Структура("Ссылка", ДанныеФайла.Ссылка)); 
			
			Если МассивНайденныхФайлов.Количество() > 0 Тогда
				
				ФайлВСписке = МассивНайденныхФайлов[0];
				
				Наименование = ФайлВСписке.ИмяФайлаДляСохранения;
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Наименование);
				Если ЗначениеЗаполнено(Расширение) Тогда
					Наименование = Лев(Наименование, СтрДлина(Наименование) - СтрДлина(Расширение) - 1);
				КонецЕсли;
				
				ДанныеФайла.ПолноеНаименованиеВерсии = Наименование; 
				ДанныеФайла.Расширение = Расширение;
				СписокДанныхФайлов.Добавить(ДанныеФайла);
				ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			
			МассивНайденныхФайлов = СписокФайлов.НайтиСтроки(Новый Структура("Адрес", ДанныеФайла.НавигационнаяСсылкаТекущейВерсии)); 
			
			Если МассивНайденныхФайлов.Количество() > 0 Тогда
				
				ФайлВСписке = МассивНайденныхФайлов[0];
				
				Наименование = ФайлВСписке.ИмяФайлаДляСохранения;
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Наименование);
				Если ЗначениеЗаполнено(Расширение) Тогда
					Наименование = Лев(Наименование, СтрДлина(Наименование) - СтрДлина(Расширение) - 1);
				КонецЕсли;
				
				ДанныеФайла.ПолноеНаименованиеВерсии = Наименование; 
				ДанныеФайла.Расширение = Расширение;
				СписокДанныхФайлов.Добавить(ДанныеФайла);
				ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоФайлов = СписокФайлов.Количество();
	Если Не ЗначениеЗаполнено(ПутьВыбора) Тогда
		ПутьВыбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохраненияВложенийПочты");
	КонецЕсли;
	
	ДанныеСохраняемыхФайлов = Новый Структура;
	ДанныеСохраняемыхФайлов.Вставить("СписокДанныхФайлов", СписокДанныхФайлов);
	ДанныеСохраняемыхФайлов.Вставить("СписокФайлов", СписокФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ПутьВыбора", ПутьВыбора);
	ДанныеСохраняемыхФайлов.Вставить("КоличествоФайлов", КоличествоФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ОбщийРазмер", ОбщийРазмер);
	
	Возврат ДанныеСохраняемыхФайлов;
	
КонецФункции

// Процедура предназначена для сохранения текста письма и вложений письма в папку.
// Открывает форму сохранения письма.
Процедура СохранитьПисьмо(Письмо, ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Письмо", Письмо);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.СохранениеПисьма", СтруктураПараметры);
	
КонецПроцедуры

// Обработка команды "Скопировать" исходящего письма.
//
Процедура СкопироватьПисьмо(Письмо) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначениеКопирования", Письмо);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура предназначена для создания структуру письма.
Функция СформироватьСтруктуруПисьма(Письмо, ТекстПисьма, ФайлыПисьма, Получатели) Экспорт
	
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("ТемаПисьма", Письмо.Тема);
	СтруктураПисьма.Вставить("УчетнаяЗапись", Письмо.УчетнаяЗапись);
	СтруктураПисьма.Вставить("ДатаОтправки", Письмо.ДатаОтправки);
	СтруктураПисьма.Вставить("Кодировка", Письмо.Кодировка);
	СтруктураПисьма.Вставить("ТекстПисьма", ТекстПисьма);
	СтруктураПисьма.Вставить("ФайлыПисьма", ФайлыПисьма);
	СтруктураПисьма.Вставить("Получатели", Получатели);
	
	Возврат СтруктураПисьма;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// ФОРМА НАСТРОЕК ВСТРОЕННОЙ ПОЧТЫ

// Открывает форму настроек почты.
//
Процедура ОткрытьФормуНастроек() Экспорт
	
	ОткрытьФорму("Обработка.НастройкаПочты.Форма.НастройкиВстроеннойПочты", , , , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//  ОРФОГРАФИЯ

// Проверяет орфографию переданного текста, возвращает Истина если текст изменен
Процедура ПроверитьОрфографиюТекст(ОбработчикРезультата, ТекстПисьма) Экспорт
	
	ТекстДляПроверки = ТекстПисьма;
	СловЗаменено = 0;
	СловПропущено = 0;
	
	Попытка
		Word = Новый COMОбъект("Word.Application");
		
		Если Word.Documents.Count = 0 Тогда
			Word.Documents.Add();
		КонецЕсли;
		
	Исключение
		
		Word = Неопределено;
		
		СтруктураВозврата = Новый Структура("ТекстПисьма, ТекстИзменен", ТекстПисьма, Ложь);
		ВыполнитьОбработкуОповещения(ОбработчикРезультата, СтруктураВозврата);
		
		Возврат;
		
	КонецПопытки;
		
	Текст = ТекстДляПроверки;
	
	Исключения = Новый Соответствие;
	СловаЗамены = Новый Соответствие;
	
	ВсеПрочиеСловаНеПроверяем = Ложь;
	НовыйТекстовыйДокумент = Новый ТекстовыйДокумент();
	
	НомерСтрокиНачальный = 1;
	ПозицияВСтроке = -1;
	СловоЗамены = "";
	СловоОригинальное = "";
	НомерСлова = -1;
	НомерСтрокиТекущий = -1;
	ТекстПисьмаРезультирующий = "";
	
	ПараметрыПроверкиОрфографииТекст = Новый Структура;
	ПараметрыПроверкиОрфографииТекст.Вставить("Текст", Текст);
	ПараметрыПроверкиОрфографииТекст.Вставить("НомерСтрокиНачальный", НомерСтрокиНачальный);
	ПараметрыПроверкиОрфографииТекст.Вставить("ПозицияВСтроке", ПозицияВСтроке); 
	ПараметрыПроверкиОрфографииТекст.Вставить("СловоОригинальное", СловоОригинальное);
	ПараметрыПроверкиОрфографииТекст.Вставить("СловоЗамены", СловоЗамены);
	ПараметрыПроверкиОрфографииТекст.Вставить("НомерСлова", НомерСлова);
	ПараметрыПроверкиОрфографииТекст.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	ПараметрыПроверкиОрфографииТекст.Вставить("Word", Word);
	ПараметрыПроверкиОрфографииТекст.Вставить("Исключения", Исключения); 
	ПараметрыПроверкиОрфографииТекст.Вставить("СловаЗамены", СловаЗамены); 
	ПараметрыПроверкиОрфографииТекст.Вставить("НомерСтрокиТекущий", НомерСтрокиТекущий);
	ПараметрыПроверкиОрфографииТекст.Вставить("СловЗаменено", СловЗаменено);
	ПараметрыПроверкиОрфографииТекст.Вставить("СловПропущено", СловПропущено);
	ПараметрыПроверкиОрфографииТекст.Вставить("Слово", "");
	
	ПараметрыПроверкиОрфографииТекст.Вставить("НоваяСтрока", "");
	ПараметрыПроверкиОрфографииТекст.Вставить("ВсеПрочиеСловаНеПроверяем", ВсеПрочиеСловаНеПроверяем);
	ПараметрыПроверкиОрфографииТекст.Вставить("НовыйТекстовыйДокумент", НовыйТекстовыйДокумент);
	ПараметрыПроверкиОрфографииТекст.Вставить("ДобавочныйСимвол", "");
	
	ПараметрыПроверкиОрфографииТекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	ПараметрыПроверкиОрфографииТекст.Вставить("ТекстПисьмаРезультирующий", ТекстПисьмаРезультирующий);
	
	ПроверитьОрфографиюВБлокеТекста();
	
КонецПроцедуры

Процедура ПроверитьОрфографиюВБлокеТекста() Экспорт
	
	СимволыРазделители = ВстроеннаяПочтаКлиент.ПолучитьСимволыРазделители();
	
	Если Не ПараметрыПроверкиОрфографииТекст.Свойство("ТекстовыйДокумент") Тогда 
		ПараметрыПроверкиОрфографииТекст.Вставить("ТекстовыйДокумент", Новый ТекстовыйДокумент());	
		ПараметрыПроверкиОрфографииТекст.ТекстовыйДокумент.УстановитьТекст(ПараметрыПроверкиОрфографииТекст.Текст);
	КонецЕсли;		
	
	Если Не ПараметрыПроверкиОрфографииТекст.Свойство("КоличествоСтрокТекста") Тогда 
		ПараметрыПроверкиОрфографииТекст.Вставить(
			"КоличествоСтрокТекста", 
			ПараметрыПроверкиОрфографииТекст.ТекстовыйДокумент.КоличествоСтрок());
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографииТекст.Свойство("НомерСтроки") Тогда 
		ПараметрыПроверкиОрфографииТекст.Вставить("НомерСтроки", ПараметрыПроверкиОрфографииТекст.НомерСтрокиНачальный);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографииТекст.Свойство("НомерПервогоСимвола") Тогда 
		ПараметрыПроверкиОрфографииТекст.Вставить("НомерПервогоСимвола", 1);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографииТекст.Свойство("НомерАнализируемогоСимвола") Тогда 
		ПараметрыПроверкиОрфографииТекст.Вставить("НомерАнализируемогоСимвола", 1);
	КонецЕсли;	
	
	ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока 
		+ ПараметрыПроверкиОрфографииТекст.Слово;
		
	Если СтрДлина(ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол) <> 0 Тогда
		ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока 
			+ ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол;
		ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол = "";
	КонецЕсли;
		
	ПараметрыПроверкиОрфографииТекст.Слово = "";	
	
	// Перебор строк
	Для СчСтроки = ПараметрыПроверкиОрфографииТекст.НомерСтроки 
		По ПараметрыПроверкиОрфографииТекст.КоличествоСтрокТекста Цикл
		
		ПараметрыПроверкиОрфографииТекст.НомерСтроки = СчСтроки;
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Всего в тексте %1 строк. Проверяется %2 строка.'"),
			Строка(ПараметрыПроверкиОрфографииТекст.КоличествоСтрокТекста), 
			Строка(ПараметрыПроверкиОрфографииТекст.НомерСтроки));
		Состояние(СтрокаСостояние);
		
		// Получение строки, которую далее будем проверять
		СтрокаИзТекста = ПараметрыПроверкиОрфографииТекст.ТекстовыйДокумент.ПолучитьСтроку(ПараметрыПроверкиОрфографииТекст.НомерСтроки);
		
		Если ПараметрыПроверкиОрфографииТекст.ВсеПрочиеСловаНеПроверяем Тогда
			ПараметрыПроверкиОрфографииТекст.НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаИзТекста);
			Продолжить;
		КонецЕсли;	
		
		Если ПараметрыПроверкиОрфографииТекст.ПозицияВСтроке <> -1 
			И (ПараметрыПроверкиОрфографииТекст.НомерСтроки = ПараметрыПроверкиОрфографииТекст.НомерСтрокиНачальный) Тогда
			ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола = ПараметрыПроверкиОрфографииТекст.ПозицияВСтроке;
		Иначе	
			ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола = 0;
			Если ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола <> 0 Тогда
				ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола = ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола + 1;
			Иначе
				ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола = 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверкиОрфографииТекст.НомерСтрокиТекущий = ПараметрыПроверкиОрфографииТекст.НомерСтроки;
		
		ДлинаСтроки = СтрДлина(СтрокаИзТекста);
		ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока
			+ Лев(СтрокаИзТекста, ПараметрыПроверкиОрфографииТекст.НомерПервогоСимвола - 1);
		ПараметрыПроверкиОрфографииТекст.Слово       = "";
		СловоСобрано = Ложь;
		
		// Посимвольный обход строки для выделения и проверки слов
		Для СчСимволов = ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола 
			По ДлинаСтроки Цикл
			
			ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола = СчСимволов;
			
			ПозицияВСтроке = ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола;
			Символ = Сред(СтрокаИзТекста, ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола, 1);
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда
				
				Если СтрДлина(ПараметрыПроверкиОрфографииТекст.Слово) = 0 Тогда
					ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока + Символ;
				Иначе
					ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол = Символ;
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе
				
				ПараметрыПроверкиОрфографииТекст.Слово = ПараметрыПроверкиОрфографииТекст.Слово + Символ;
				Если ДлинаСтроки = ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола Тогда 
					СловоСобрано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыПроверкиОрфографииТекст.Свойство("Слово") Тогда 
				ПараметрыПроверкиОрфографииТекст.Вставить("Слово", "");
			КонецЕсли;	
			
			Если СловоСобрано Тогда
				
				Результат = ОрфографияОбработатьСлово(ПараметрыПроверкиОрфографииТекст.Слово, СтрокаИзТекста);
				СловоСобрано = Ложь;
				ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола = 
					ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола + 1;
				
				Если Не Результат Тогда
					// Процедура проверки прервана модальным окном и будет продолжена при его закрытии
					Возврат;
				КонецЕсли;	
				
				ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока 
					+ ПараметрыПроверкиОрфографииТекст.Слово;
					
				Если СтрДлина(ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол) <> 0 Тогда
					ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока 
						+ ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол;
					ПараметрыПроверкиОрфографииТекст.ДобавочныйСимвол = "";
				КонецЕсли;
					
				ПараметрыПроверкиОрфографииТекст.Слово = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверкиОрфографииТекст.НоваяСтрока = ПараметрыПроверкиОрфографииТекст.НоваяСтрока 
			+ ПараметрыПроверкиОрфографииТекст.Слово;
		
		ПараметрыПроверкиОрфографииТекст.НомерАнализируемогоСимвола = 1;
		ПараметрыПроверкиОрфографииТекст.НовыйТекстовыйДокумент.ДобавитьСтроку(ПараметрыПроверкиОрфографииТекст.НоваяСтрока);
		ПараметрыПроверкиОрфографииТекст.НоваяСтрока = "";
		
	КонецЦикла;
	
	ЗавершитьПроверкуОрфографии();
	
КонецПроцедуры

Функция ОрфографияОбработатьСлово(Слово, СтрокаИзТекста)
				
	СловоНужноПроверитьWord = Истина;
	
	НаличиеСлова = ПараметрыПроверкиОрфографииТекст.Исключения.Получить(Слово);
	Если НаличиеСлова <> Неопределено Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографииТекст.СловПропущено = ПараметрыПроверкиОрфографииТекст.СловПропущено + 1;
	КонецЕсли;	
	
	ЗамененноеСлово = ПараметрыПроверкиОрфографииТекст.СловаЗамены.Получить(Слово);
	Если ЗамененноеСлово <> Неопределено Тогда
		Слово = ЗамененноеСлово;
		ПараметрыПроверкиОрфографииТекст.СловЗаменено = ПараметрыПроверкиОрфографииТекст.СловЗаменено + 1;
	КонецЕсли;	
	
	Если СловоНужноПроверитьWord Тогда
		
		Если Не ПараметрыПроверкиОрфографииТекст.Word.CheckSpelling(Слово) Тогда
			
			СписокВариантов = Новый СписокЗначений;
			
			ВариантыЗамены = ПараметрыПроверкиОрфографииТекст.Word.getSpellingSuggestions(Слово);
			
			Если ВариантыЗамены.Count <> 0 Тогда
				Для НомерВарианта = 1 По ВариантыЗамены.Count Цикл
					СписокВариантов.Добавить(ВариантыЗамены.Item(НомерВарианта).Name);
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ИсходнаяСтрока,СловоЗамены,СписокВариантов,ПараметрыПроверкиОрфографииТекст");
			ПараметрыФормы.ИсходнаяСтрока = СокрЛП(СтрокаИзТекста);
			ПараметрыФормы.СловоЗамены = Слово;
			ПараметрыФормы.СписокВариантов = СписокВариантов.Скопировать();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиОрфографииВБлокеТекста", ЭтотОбъект);
			ОткрытьФорму(
				"Документ.ИсходящееПисьмо.Форма.ПроверкаОрфографии", 
				ПараметрыФормы,
				,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат Ложь;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	СловоСобрано = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеПроверкиОрфографииВБлокеТекста(КодВозврата, Параметр) Экспорт
	
	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		ПараметрыПроверкиОрфографииТекст.ВсеПрочиеСловаНеПроверяем = Истина;
		Кнопка = "Завершить";
	Иначе
		Кнопка = КодВозврата.Кнопка;
	КонецЕсли;	
	
	СловоИсходное = ПараметрыПроверкиОрфографииТекст.Слово;
	
	Если Кнопка = "Завершить" Тогда
		ПараметрыПроверкиОрфографииТекст.ВсеПрочиеСловаНеПроверяем = Истина;
	КонецЕсли;
	
	Если Кнопка = "ПропуститьВсе" Тогда
		ПараметрыПроверкиОрфографииТекст.Исключения.Вставить(ПараметрыПроверкиОрфографииТекст.Слово, 1);
		ПараметрыПроверкиОрфографииТекст.СловПропущено = ПараметрыПроверкиОрфографииТекст.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Пропустить" Тогда
		ПараметрыПроверкиОрфографииТекст.СловПропущено = ПараметрыПроверкиОрфографииТекст.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Заменить" Тогда
		
		ПараметрыПроверкиОрфографииТекст.СловоОригинальное = ПараметрыПроверкиОрфографииТекст.Слово;
		ПараметрыПроверкиОрфографииТекст.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографииТекст.Слово = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографииТекст.СловЗаменено = ПараметрыПроверкиОрфографииТекст.СловЗаменено + 1;
		
	КонецЕсли;
	
	Если Кнопка = "ЗаменитьВсе" Тогда
		
		ПараметрыПроверкиОрфографииТекст.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографииТекст.СловаЗамены.Вставить(ПараметрыПроверкиОрфографииТекст.Слово, ПараметрыПроверкиОрфографииТекст.СловоЗамены);
		ПараметрыПроверкиОрфографииТекст.СловоОригинальное = ПараметрыПроверкиОрфографииТекст.Слово;
		ПараметрыПроверкиОрфографииТекст.Слово = КодВозврата.СловоЗамены;
		
		ПараметрыПроверкиОрфографииТекст.СловЗаменено = ПараметрыПроверкиОрфографииТекст.СловЗаменено + 1;
		
	КонецЕсли;
	
	Если Кнопка = "ДобавитьИсключение" Тогда
		
		ПараметрыПроверкиОрфографииТекст.Исключения.Вставить(ПараметрыПроверкиОрфографииТекст.Слово, 1);
		ВстроеннаяПочтаКлиент.ДобавитьСловоВИсключенияWord(
			ПараметрыПроверкиОрфографииТекст.Word, 
			ПараметрыПроверкиОрфографииТекст.Слово);
			
	КонецЕсли;
	
	ПроверитьОрфографиюВБлокеТекста(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуОрфографии()
	
	Текст = ПараметрыПроверкиОрфографииТекст.НовыйТекстовыйДокумент.ПолучитьТекст();
	Если Прав(Текст, 1) = Символы.ПС Тогда
		Текст = Лев(Текст, СтрДлина(Текст)-1);
	КонецЕсли;
	
	ТекстПисьма = ПараметрыПроверкиОрфографииТекст.ТекстДляПроверки;
	ТекстИзменен = Ложь;
	
	Если СокрЛП(ПараметрыПроверкиОрфографииТекст.ТекстДляПроверки) <> СокрЛП(Текст) Тогда
		
		// Для текстового письма целиком собираем новый текст (с исправленными словами) и ставим его письму.
		ТекстПисьма = Текст;
		ТекстИзменен = Истина;
		
	КонецЕсли;
	
	ПараметрыПроверкиОрфографииТекст.Word.Quit();
	ПараметрыПроверкиОрфографииТекст.Word = Неопределено;
	
	Состояние();
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка орфографии завершена. 
		|Заменено слов: %1, пропущено слов: %2.'"),
		ПараметрыПроверкиОрфографииТекст.СловЗаменено, ПараметрыПроверкиОрфографииТекст.СловПропущено);
		
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
	СтруктураВозврата = Новый Структура("ТекстПисьма, ТекстИзменен", ТекстПисьма, ТекстИзменен);
	ВыполнитьОбработкуОповещения(ПараметрыПроверкиОрфографииТекст.ОбработчикРезультата, СтруктураВозврата);
	
	ПараметрыПроверкиОрфографииТекст = Неопределено;
	
КонецПроцедуры


// Возвращает символы -разделители
Функция ПолучитьСимволыРазделители() Экспорт 
	
	СимволыРазделители = " .,;:?!-+*/\%=<>[](){}""'|~@#$^&_";
	СимволыРазделители = СимволыРазделители + Символ(9) + Символ(10) + Символ(13) + Символ(160);
	Возврат СимволыРазделители;
	
КонецФункции	

// Добавляет слово в файл исключений Word
Процедура ДобавитьСловоВИсключенияWord(Word, Слово) Экспорт
	
	Попытка
	
		ПользовательскийСловарь = Word.Application.CustomDictionaries.ActiveCustomDictionary;
	    ПолныйПутьФайла = ПользовательскийСловарь.Path + "\" + ПользовательскийСловарь.Name;
		
		Файл = Новый Файл(ПолныйПутьФайла);
		Если Не Файл.Существует() Тогда
			Возврат;
		КонецЕсли;	
		
		Кодировка = ОпределитьКодировкуТекстовогоФайла(ПолныйПутьФайла);
	
		// Дописывать = Истина
		ЗаписьТекста = Новый ЗаписьТекста(ПолныйПутьФайла, Кодировка, , Истина);
		ЗаписьТекста.ЗаписатьСтроку(Слово);
		ЗаписьТекста.Закрыть();
		
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрацииКлиент(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры	

// Вычисляет кодировку 
Функция ОпределитьКодировкуТекстовогоФайла(ПолноеИмяФайла) Экспорт
	
	Кодировка = Неопределено;
	
#Если Не ВебКлиент Тогда	
	
	// Определяем кодировку
		
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекста.Системная);
	
	// Проверяем наличие BOM (Byte order mark)
	Символ0 = ЧтениеТекста.Прочитать(1);
	Символ1 = ЧтениеТекста.Прочитать(1);
	Символ2 = ЧтениеТекста.Прочитать(1);
	
	КодСимвола0 = КодСимвола(Символ0);
	КодСимвола1 = КодСимвола(Символ1);
	КодСимвола2 = КодСимвола(Символ2);
	
	Если КодСимвола0 = 1087 И КодСимвола1 = 187 И КодСимвола2 = 1111 Тогда
		Кодировка = "UTF-8";
	ИначеЕсли КодСимвола0 = 1103 И КодСимвола1 = 1102 Тогда
		Кодировка = "UTF-16";
	Иначе	
		Кодировка = "windows-1251";
	КонецЕсли;
		
#КонецЕсли

	Возврат Кодировка;
	
КонецФункции	

// Делает запись в журнал регистрации
Процедура ЗаписьЖурналаРегистрацииКлиент(ТекстСообщения) Экспорт
	
	ТекстСообщения = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(ТекстСообщения);
	ВстроеннаяПочтаСервер.ЗаписьЖурналаРегистрацииСервер(ТекстСообщения);
	
КонецПроцедуры

// Удаляет на диске (на клиенте) автосохраненные файлы
Процедура УдалитьАвтосохраненныеФайлы() Экспорт
	
#Если Не ВебКлиент Тогда			
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
		
	Если Не АвтоматическиСохранятьВерсииНеотправленногоПисьма Тогда
		Возврат;
	КонецЕсли;	
	
	Каталог = КаталогВременныхФайлов();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		Каталог, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
	МаскаПоиска = "v8cln_Автосохранение_*";	
	
	Попытка
		УдалитьФайлы(Каталог, МаскаПоиска);
	Исключение // не выдаем ошибки
	КонецПопытки;	
#КонецЕсли	

КонецПроцедуры

// Включает периодическую проверку поступления новых писем
//
Процедура ВключитьПроверкуПоступленияНовыхПисем() Экспорт
	
	НастройкиОповещений =
		ВстроеннаяПочтаСервер.ПолучитьНастройкиОповещенийОНовыхПисьмах();
		
	Если НастройкиОповещений.ПроверятьНаличиеНовыхПисем 
		И НастройкиОповещений.ИнтервалПроверкиВМинутах <> 0 Тогда
		
		ИнтервалПроверкиПочты = НастройкиОповещений.ИнтервалПроверкиВМинутах * 60;
		ДатаПоследнейПроверкиПочты = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

// Отключает периодическую проверку поступления новых писем
//
Процедура ОтключитьПроверкуПоступленияНовыхПисем() Экспорт
	
	ИнтервалПроверкиПочты = Неопределено;
	ДатаПоследнейПроверкиПочты = Неопределено;
	
КонецПроцедуры
