
#Область ПрограммныйИнтерфейс

// Проверяет, существует ли указанный объект в базе данных
Функция ЭлементДанныхСуществуетВБазе(ЭлементДанных) Экспорт
	
	ЭлементСуществует = Истина;
	
	Если ТипЗнч(ЭлементДанных) = Тип("ИнформацияОбОшибке")
		Или ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда 
		Возврат ЭлементСуществует;
	КонецЕсли;
	
	Попытка
		МетаданныеЭлементаДанных = ЭлементДанных.Метаданные();
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлементаДанных)
			Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЭлементаДанных) Тогда
			ЭлементСуществует = ОбщегоНазначения.СсылкаСуществует(ЭлементДанных);
		КонецЕсли;
	Исключение
		ЭлементСуществует = Истина;
	КонецПопытки;
	
	Возврат ЭлементСуществует;
	
КонецФункции

// Проверяет доступность по правам указанного объекта для пользователя мобильного клиента
// Параметры:
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	Объект - ссылка на проверяемый объект
Функция ОбъектДоступенТекущемуПользователю(МобильныйКлиент, Объект, ОбщиеПраваНаОбъекты = Неопределено) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		Если Не ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные())
			И Не ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные()) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Объект.Метаданные().Имя = "ШаблоныТекстовПисем" Тогда
			Возврат Объект.Автор = МобильныйКлиент.Пользователь;
		КонецЕсли;

		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
			Объект, 
			МобильныйКлиент.Пользователь);

		Возврат ПраваПоОбъекту.Чтение;
	Исключение
		// У передаваемого объекта невозможно получить метаданные - пропускаем его к передаче.
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

// Добавляет XDTO в массив XDTO, если его там еще не было.
// Параметры:
//	XDTO - сформированный объект XDTO
//	ОбъектыXDTO - соответствие XDTO
Процедура ДобавитьXDTOВМассивXDTO(ЭлементДанных, XDTO, ОбъектыXDTO) Экспорт
	
	Если XDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементДанных)) Тогда

		КлючПоиска = ЭлементДанных.УникальныйИдентификатор();

	Иначе

		Запись = Новый ЗаписьXML();
		Запись.УстановитьСтроку();

		ФабрикаXDTO.ЗаписатьXML(Запись, XDTO);

		КлючПоиска = Запись.Закрыть();

	КонецЕсли;

	Если ОбъектыXDTO[КлючПоиска] = Неопределено Тогда
		ОбъектыXDTO.Вставить(КлючПоиска, XDTO);
	КонецЕсли;

КонецПроцедуры

// Получает краткий текст указанной длины из указанного оригинального текста.
// Удаляются лишние пустые строки.
// Параметры:
//	Текст - исходный текст
//	Длина - длина короткого текста, который необходимо получить
Функция ПолучитьКраткийТекст(Текст, Длина) Экспорт 
	
	Если ТипЗнч(Текст) = Тип("ХранилищеЗначения") Тогда
		Строка = Текст.Получить();
	ИначеЕсли ТипЗнч(Текст) = Тип("Строка") Тогда
		Строка = Текст;
	Иначе
		Возврат "";
	КонецЕсли;
	
	КраткийТекст = Строка;
	
	Пока Найти(КраткийТекст, Символы.ВК) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, Символы.ВК, "");	
	КонецЦикла;
		
	Пока Найти(КраткийТекст, "  ") > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, "  ", " ");
	КонецЦикла;
		
	Пока Найти(КраткийТекст, " " + Символы.ПС) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, " " + Символы.ПС, Символы.ПС);
	КонецЦикла;
	
	Пока Найти(КраткийТекст, Символы.ПС + Символы.ПС) > 0 Цикл
		КраткийТекст = СтрЗаменить(КраткийТекст, Символы.ПС+Символы.ПС, Символы.ПС);
	КонецЦикла;

	Пока Сред(КраткийТекст, 1, 1) = " " Цикл
		КраткийТекст = Сред(КраткийТекст, 2, СтрДлина(КраткийТекст));
	КонецЦикла;
	
	Пока Сред(КраткийТекст, 1, 1) = Символы.ПС Цикл
		КраткийТекст = Сред(КраткийТекст, 2, СтрДлина(КраткийТекст));
	КонецЦикла;
	
	КраткийТекст = Сред(КраткийТекст, 1, Длина);
	
	КраткийТекст = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(КраткийТекст);
	
	Возврат КраткийТекст;
		
КонецФункции

// Обработчик регламентного задания ОбменСМобильнымиРегистрацияИзменений
Процедура ОбменСМобильнымиРегистрацияИзменений() Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") = Ложь Тогда
		Возврат;
	КонецЕсли;

	ОбменСМобильнымиИОффлайн.ВыполнитьРегистрациюИзмененийДляМобильныхУстройств();

КонецПроцедуры

// Выполняет регистрацию изменений одного переданного элемента данных
Процедура ВыполнитьРегистрациюЭлементаДанных(ЭлементДанных) Экспорт

	Попытка

		УзелОбменаДляРегистрацииВсехДанных = ОбменСМобильнымиПовтИсп.ПолучитьУзелДляРегистрацииДанных();

		ВсеУзлы = ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();

		Для Каждого Узел Из ВсеУзлы Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЭлементДанных);
		КонецЦикла;

		УзлыОбмена = ОбменСМобильнымиРегистрацияИзменений.ПолучитьУзлыОбмена(ЭлементДанных);
		Для каждого УзелОбмена из УзлыОбмена Цикл

			Если УзелОбмена = ПланыОбмена.Мобильный.ЭтотУзел() Или УзелОбмена.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;

			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементДанных);

		КонецЦикла;

		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаДляРегистрацииВсехДанных, ЭлементДанных);

	Исключение

		Инфо = ИнформацияОбОшибке();
		МобильныеКлиенты = ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();

		Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				ПодробноеПредставлениеОшибки(Инфо),
				Ложь,
				МобильныйКлиент);

		КонецЦикла;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Получает массив ссылок на узлы плана обмена Мобильный, принадлежащих указанным пользователям.
// Параметры:
//	Пользователи - массив ссылок на Пользователей
Функция ПолучитьУзлыПоПользователям(Пользователи) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("Ссылка"      , ПланыОбмена.Мобильный.ЭтотУзел());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	Мобильный.Пользователь В(&Пользователи)
		|	И Мобильный.ПометкаУдаления = ЛОЖЬ
		|	И Мобильный.Ссылка <> &Ссылка";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// Получает часто используемые параметры синхронизации для обмена с мобильным клиентом
// Параметры:
//	Пользователь - Ссылка на пользователя
Функция ПолучитьПараметрыСинхронизации(Пользователь) Экспорт

	ПараметрыСинхронизации = Новый Структура();

	ПараметрыСинхронизации.Вставить("СинхронизироватьПочту",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты));

	ПараметрыСинхронизации.Вставить("СинхронизироватьЗадачи",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач));

	ПараметрыСинхронизации.Вставить("СинхронизироватьКалендарь",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря));

	ПараметрыСинхронизации.Вставить("МаксимальныйРазмерФайла",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов));

	ПараметрыСинхронизации.Вставить("МаксимальныйРазмер",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов));

	ПараметрыСинхронизации.Вставить("ПериодПервичнойЗагрузки",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки));

	ПараметрыСинхронизации.Вставить("СрокУстареванияДанных",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных));

	ПараметрыСинхронизации.Вставить("ФильтроватьФайлыПоФормату",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ОграничениеФорматовПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ФорматыПередаваемыхФайлов",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ФорматыПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ОбщиеПраваНаОбъекты", Новый Соответствие());

	Возврат ПараметрыСинхронизации;

КонецФункции

// Формирует список по умолчанию форматов передаваемых на мобильный клиент файлов
Функция СписокФорматовФайловПередаваемыхНаМобильныйКлиент() Экспорт

	Возврат ВРег("txt log ini " + 
			"ico wmf emf " + 
			"htm html url mht mhtml " + 
			"doc docx dot rtf xls xlsx ppt pptx " + 
			"jpg jpeg jp2 jpe bmp dib tif tiff gif png " + 
			"pdf "+
			"odt odf odp odg ods");

КонецФункции 

// Проверяет возможность работы с мобильного клиента для текущего пользователя.
// Вызывает исключение в случае отсутсвия разрешения.
// Параметры
// 	Пользователь - ссылка на пользователя
Функция ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь) Экспорт

	Если НЕ РегистрыСведений.РазрешенныеМобильныеПользователи.ИспользованиеМобильногоКлиентаРазрешено(ТекущийПользователь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Формирует шаг отображения готовности для ускорения вывода данных в зависимости от их объема
Функция ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего) Экспорт

	Шаг = Окр(КоличествоОбъектовВсего / 100 * 5);
	Если Шаг = 0 Тогда
		Шаг = 1;
	КонецЕсли;

	Возврат Шаг;

КонецФункции


#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки ОбменСМобильнымиПередЗаписьюФайла
Процедура ОбменСМобильнымиПередЗаписьюФайлаПередЗаписью(Источник, Отказ) Экспорт
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка, "ВладелецФайла, Наименование, ТекущаяВерсияДатаСоздания");
	
	Источник.ДополнительныеСвойства.Вставить("ВладелецФайла", РеквизитыФайла.ВладелецФайла);
	Источник.ДополнительныеСвойства.Вставить("Наименование", РеквизитыФайла.Наименование);
	Источник.ДополнительныеСвойства.Вставить("ТекущаяВерсияДатаСоздания", РеквизитыФайла.ТекущаяВерсияДатаСоздания);
	
КонецПроцедуры

// Обработчик подписки ОбменСМобильнымиПриЗаписиФайла
Процедура ОбменСМобильнымиПриЗаписиФайлаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ВладелецФайла = Источник.ДополнительныеСвойства.ВладелецФайла
		И Источник.Наименование = Источник.ДополнительныеСвойства.Наименование
		И Источник.ТекущаяВерсияДатаСоздания = Источник.ДополнительныеСвойства.ТекущаяВерсияДатаСоздания Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбменаДляРегистрацииВсехДанных = ОбменСМобильнымиПовтИсп.ПолучитьУзелДляРегистрацииДанных();
	ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, Источник);	
		
КонецПроцедуры

#КонецОбласти

#Область ПолученияЗначенийПриОбмене

//Получает представление цвета по значению перечисления
//Параметры:
//	Представление - Строка
Функция ПолучитьЦветПоПредставлению(Представление) ЭКспорт

	Если Представление = "red" Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный;

	ИначеЕсли Представление = "blue" Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий;

	ИначеЕсли Представление = "yellow" Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый;

	ИначеЕсли Представление = "green" Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый;

	ИначеЕсли Представление = "orange" Тогда
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый;

	Иначе
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;

	Возврат Цвет

КонецФункции

//Получает представление цвета по значению перечисления
//Параметры:
//	Представление - Строка
Функция ПолучитьЧастотуПоПредставлению(Представление) ЭКспорт

	Если Представление = "daily" Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
	ИначеЕсли Представление = "weekly" Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;
	ИначеЕсли Представление = "monthly" Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;
	ИначеЕсли Представление = "yearly" Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;
	КонецЕсли;

	Возврат ЧастотаПовторения;

КонецФункции

//Получает тип записи календаря по его представлению
//Параметры:
//	Представление - Строка
Функция ПолучитьСостояниеТипаЗаписиКалендаряПоПредставлению(Представление) ЭКспорт

	Если Представление = "event" Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	ИначеЕсли Представление = "recurrence" Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
	ИначеЕсли Представление = "recurrenceException" Тогда
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия;
	Иначе
		ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	КонецЕсли;

	Возврат ТипЗаписиКалендаря;

КонецФункции

//Получает представление цвета по значению перечисления
//Параметры:
//	Представление - Строка
Функция ПолучитьСостояниеЗаписиПоПредставлению(Представление) ЭКспорт

	Если Представление = "confirmed" Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
	ИначеЕсли Представление = "cancelled" Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
	ИначеЕсли Представление = "tentative" Тогда
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	Иначе
		Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	КонецЕсли;

	Возврат Состояние;

КонецФункции

//Получает тип правила окончания повторения записи календаря по его представлению
//Параметры:
//	Представление - Строка
Функция ПолучитьПравилоОкончанияПовторенияПоПредставлению(Представление) ЭКспорт

	Если Представление = "never" Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
	ИначеЕсли Представление = "byCount" Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;
	ИначеЕсли Представление = "byDate" Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;
	КонецЕсли;

	Возврат ПравилоОкончанияПовторения;

КонецФункции


//Получает представление цвета по значению перечисления
//Параметры:
//	Цвет - Ссылка на значение перечисления типа ЦветаРабочегоКалендаря
Функция ПолучитьПредставлениеЦвета(Цвет) Экспорт

	Если Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный Тогда
		Представление = "red";
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий Тогда
		Представление = "blue";
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый Тогда
		Представление = "yellow";
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый Тогда
		Представление = "green";
	ИначеЕсли Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый Тогда
		Представление = "orange";
	Иначе
		Представление = "none";
	КонецЕсли;

	Возврат Представление;

КонецФункции

//Получает представление цвета по значению перечисления
//Параметры:
//	ЧастотаПовторения - Ссылка на значение перечисления типа ЧастотаПовторения
Функция ПолучитьПредставлениеЧастотыПовторений(ЧастотаПовторения) Экспорт

	Если ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		Представление = "daily";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		Представление = "weekly";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		Представление = "monthly";
	ИначеЕсли ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		Представление = "yearly";
	КонецЕсли;

	Возврат Представление;

КонецФункции

//Получает представление типа записи календаря
//Параметры:
//	ТипЗаписиКалендаря - Ссылка на значение перечисления типа ТипЗаписиКалендаря
Функция ПолучитьПредставлениеТипаЗаписиКалендаря(ТипЗаписиКалендаря) Экспорт

	Если ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие Тогда
		Представление = "event";
	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Представление = "recurrence";
	ИначеЕсли ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ЭлементПовторяющегосяСобытия Тогда
		Представление = "recurrenceException";
	Иначе
		Представление = "event";
	КонецЕсли;

	Возврат Представление;

КонецФункции

//Получает представление цвета по значению перечисления
//Параметры:
//	Состояние - Ссылка на значение перечисления типа СостоянияЗаписейРабочегоКалендаря
Функция ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(Состояние) Экспорт

	Если Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято Тогда
		Представление = "confirmed";
	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено Тогда
		Представление = "cancelled";
	ИначеЕсли Состояние = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом Тогда
		Представление = "tentative";
	Иначе
		Представление = "tentative";
	КонецЕсли;

	Возврат Представление;

КонецФункции

//Получает представление правила окончания повторения записи календаря
//Параметры:
//	ПравилоОкончанияПовторения - Ссылка на значение перечисления типа ПравилаОкончанияПовторения
Функция ПолучитьПредставлениеПравилаОкончанияПовторения(ПравилоОкончанияПовторения) Экспорт

	Если ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
		Представление = "never";
	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
		Представление = "byCount";
	ИначеЕсли ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
		Представление = "byDate";
	КонецЕсли;

	Возврат Представление;

КонецФункции

#КонецОбласти // ПолученияЗначенийПриОбмене

#Область РаботаССообщениямиОбмена

// Создание нового сообщения интегрированных систем и помещение его в очередь.
// У сообщения устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
// Параметры:
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
Функция СоздатьНовоеСообщение(МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	Сообщение.Входящее = Ложь;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();
	
	Сообщение.Записать();
	
	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);
	
	// Установка у сообщения степени готовности 0%
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(Сообщение, 0);
	
	Возврат Сообщение.Ссылка;
	
КонецФункции

// Выполняет выгрузку массива XDTO в XML-файл для последующей передачи данных этого файла мобильному клиенту
// Параметры:
//	ИмяВременногоФайла - имя файла XML на диске
//	ЗаписьXML - объект, с помощью которого выполняется запись в файл
//	ОбъектыXDTO - соответствие объектов XDTO, которые необходимо выгрузить в XML
//	Сообщение - ссылка на СообщениеИнтегрированныхСистем, в которое помещаются данные XML-файлa
Процедура ВыгрузитьМассивXDTOВСообщение(ИмяВременногоФайла, ЗаписьXML, ОбъектыXDTO, Сообщение, МобильныйКлиент) Экспорт
	
	НачалоЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Готовится сообщение из %1 объектов'"),
			Строка(ОбъектыXDTO.Количество())),
			Ложь,
			МобильныйКлиент);
			
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
	// Выгрузка каждого из объектов XDTO в файл XML

	Для Каждого Элемент из ОбъектыXDTO Цикл

		ОбъектXDTO = Элемент.Значение;

		Если ОбъектXDTO = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		Исключение
			Инфо = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным.Выгрузка XDTO в XML'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ОбъектXDTO.Тип().Имя,
				ОбъектXDTO.Тип().Имя + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо));
			КонецПопытки;

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	ДвоичныеДанныеСообщения = Новый ДвоичныеДанные(ИмяВременногоФайла);

	// Файл с сообщением обмена разделяется на части по 5 Мб для стабилизации передачи на мобильный клиент
	МассивЧастейФайла = РазделитьФайл(ИмяВременногоФайла, 5 * 1024 * 1024);

	МассивЧастей = Новый Массив;
	Для Каждого ИмяФайла Из МассивЧастейФайла Цикл
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		// Каждая часть сообщения максимально сжимается
		МассивЧастей.Добавить(Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
		УдалитьФайлы(ИмяФайла);
	КонецЦикла;

	// Запись массива частей файла в содержательную часть сообщения интегрированных систем
	СообщениеОбъект = Сообщение.ПолучитьОбъект(); 
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивЧастей);
	СообщениеОбъект.Записать();

	ОкончаниеЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		Сообщение,
		ДвоичныеДанныеСообщения.Размер(),
		ОбъектыXDTO.Количество());

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьВремяФормирования(
		Сообщение,
		(ОкончаниеЗаполнения - НачалоЗаполнения)/1000);

	// Установка отметки о 100% готовности сообщения после выполнения всех действий по подготовке сообщения.
	// После установки степени готовности в 100% сообщение может быть передано на клиента.
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(Сообщение, 100);

	УдалитьФайлы(ИмяВременногоФайла);
	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подготовлено сообщение объемом %1 байт'"),
			Строка(ДвоичныеДанныеСообщения.Размер())),
			Ложь,
			МобильныйКлиент);
	
КонецПроцедуры

// Обработчик регзадания УдалениеСообщенийИнтеграцииСМобильнымКлиентом.
// Выполняет окончательное удаление помеченных на удаление СообщенийИнтегрированныхСистем, 
// относящихся к интеграции с мобильным клиентом
Процедура УдалениеСообщенийИнтеграцииСМобильнымКлиентом() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеСообщенийИнтеграцииПоКлиенту();
		
КонецПроцедуры

// Обработчик регзадания УдалениеСообщенийИнтеграцииСМобильнымКлиентом.
//	Выполняет окончательное удаление помеченных на удаление СообщенийИнтегрированныхСистем, 
//	относящихся к интеграции с мобильным клиентом
Процедура УдалениеСообщенийИнтеграцииПоКлиенту(МобильныйКлиент = Неопределено) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// удаление устаревших сообщений
	МобильныеКлиенты = ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();
	Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл	
		СрокУстареванияДанных = 
			РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
				МобильныйКлиент.Пользователь,
				Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных);
				
		Если СрокУстареванияДанных = 0 Тогда
			Продолжить;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СообщенияИнтегрированныхСистем.Ссылка
			|ИЗ
			|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
			|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
			|ГДЕ
			|	СообщенияИнтегрированныхСистем.ДатаСоздания < &ДатаСоздания
			|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент";
		Запрос.УстановитьПараметр("ДатаСоздания", ТекущаяДатаСеанса() - СрокУстареванияДанных * 24 * 60 * 60);	
		Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СообщениеОбъект <> Неопределено Тогда
				СообщениеОбъект.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаление сообщений по помеченным на удаление мобильным клиентам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|ГДЕ
		|	ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент.ПометкаУдаления = ИСТИНА";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СообщениеОбъект <> Неопределено Тогда
			СообщениеОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Удаление помеченных на удаление мобильных клиентов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	Мобильный.ПометкаУдаления = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Ссылка);
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
			
КонецПроцедуры

// Обработчик регзадания ОбменСМобильнымиФормированиеСообщений
Процедура ОбменСМобильнымиФормированиеСообщений() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМобильныеКлиенты") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МобильныеКлиенты = ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();
	Для Каждого МобильныйКлиент Из МобильныеКлиенты Цикл
		
		ДатаПоследнегоПодключения = 
			РегистрыСведений.СведенияОМобильныхКлиентах.ПолучитьДатуПоследнейАктивностиКлиента(МобильныйКлиент);
			
		Если ТекущаяДатаСеанса() - ДатаПоследнегоПодключения > 14 * 24 * 60 * 60 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Наименование", МобильныйКлиент.Код);
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
		ЕстьАктивноеЗадание = Ложь;
		Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл
			Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				ЕстьАктивноеЗадание = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьАктивноеЗадание Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание в очереди сообщений нового сообщения с процентом готовности 0.
		Сообщение = СоздатьНовоеСообщение(МобильныйКлиент);
		
		// Наполнение созданного сообщения
		ВерсияКлиента = РегистрыСведений.СведенияОМобильныхКлиентах.ПолучитьВерсию(МобильныйКлиент);
		Если ВерсияКлиента = "1.3.2" Тогда
			ОбменСМобильными_132.СформироватьПакетОбмена(Сообщение, МобильныйКлиент);
		ИначеЕсли ВерсияКлиента = "1.4.2" Тогда
			ОбменСМобильными_142.СформироватьПакетОбмена(Сообщение, МобильныйКлиент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает в очередь входящее сообщение
Процедура ЗаписатьВходящееСообщение(МобильныйКлиент, СообщениеОтСервера) Экспорт
	
	ДанныеСообщения = СообщениеОтСервера.exchangeData.Получить();
	Если ДанныеСообщения = Неопределено Или ТипЗнч(ДанныеСообщения) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор());
	Сообщение.Входящее = Истина;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();
	Сообщение.ДанныеСообщения = СообщениеОтСервера.exchangeData;
	
	Сообщение.Записать();	
	
	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);
		
	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьРазмер(
		Сообщение.Ссылка,
		ДанныеСообщения.Размер());
		
КонецПроцедуры

// Получает массив еще не обработанных входящих сообщений от указанного клиента
Функция ПолучитьВходящиеНеобработанныеСообщения(МобильныйКлиент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|ГДЕ
		|	СообщенияИнтегрированныхСистем.Входящее = ИСТИНА
		|	И СообщенияИнтегрированныхСистем.ДатаОбработки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И СообщенияИнтегрированныхСистем.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Вычисляет формат сообщения обмена от клиента и выполняет обработку сообщения в соответствии с версией формата
Функция ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение) Экспорт

	Данные = Сообщение.ДанныеСообщения.Получить();
	Если Данные = Неопределено ИЛИ ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	Данные.Записать(ИмяВременногоФайла);

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать(); // пропуск тэга Message

	ПространствоИмен = ЧтениеXML.URIПространстваИмен;

	Версия = СтрЗаменить(ПространствоИмен, "http://www.1c.ru/mobileDM", "");

	ЧтениеXML.Закрыть();

	Если Версия = "132" Тогда
		Возврат ОбменСМобильными_132.ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);

	ИначеЕсли Версия = "142" Тогда
		Возврат ОбменСМобильными_142.ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);

	КонецЕсли;

КонецФункции

#КонецОбласти // Рабоча с сообщениями обмена


#КонецОбласти // ПрограммныйИнтерфейс

