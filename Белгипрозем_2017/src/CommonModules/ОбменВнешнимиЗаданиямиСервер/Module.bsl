////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// получает узел из регистра сведений УзлыРолиИсполнителей (если он там есть)
Функция ПолучитьУзелИзРегистраИсточникиВнешнихЗадач(ОбъектСсылка) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// записывает запись в регистр сведений ИсточникиВнешнихЗадач 
Процедура ЗаписатьУзелВРегистрИсточникиВнешнихЗадач(ОбъектСсылка, УзелОбмена) Экспорт
	
КонецПроцедуры

// очищает все записи с данным узлом
Процедура ОчиститьРегистрИсточникиВнешнихЗадач(УзелИсточник) Экспорт 
	
КонецПроцедуры	

// Вернет Истина, если ВерсияФайла принадлежит внешней роли
Функция ВерсияФайлаПринадлежитВнешнейРоли(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Владелец);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК БизнесПроцесс.Поручение).Исполнитель КАК Справочник.РолиИсполнителей).ВнешняяРоль, ЛОЖЬ) КАК ВнешняяРоль
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.Ссылка = &Ссылка";
						   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнешняяРоль;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// Вернет УзелОбмена роли, если ВерсияФайла принадлежит внешней роли
Функция ПолучитьУзелОбменаДляВерсииФайла(Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Владелец);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(Файлы.ВладелецФайла КАК БизнесПроцесс.Поручение).Исполнитель КАК Справочник.РолиИсполнителей).УзелОбмена, НЕОПРЕДЕЛЕНО) КАК УзелОбмена
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |ГДЕ
	               |	Файлы.Ссылка = &Ссылка";
						   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УзелОбмена;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Вернет Истина, если Файл принадлежит внешней роли
Функция ФайлПринадлежитВнешнейРоли(ВладелецФайла) Экспорт
	
	Если ТипЗнч(ВладелецФайла) <> Тип("БизнесПроцессСсылка.Поручение") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВладелецФайла);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(Поручение.Исполнитель КАК Справочник.РолиИсполнителей).ВнешняяРоль, ЛОЖЬ) КАК ВнешняяРоль
	               |ИЗ
	               |	БизнесПроцесс.Поручение КАК Поручение
	               |ГДЕ
	               |	Поручение.Ссылка = &Ссылка";
						   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнешняяРоль;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// Вернет УзелОбмена роли, если Файл принадлежит внешней роли
Функция ПолучитьУзелОбменаДляФайла(ВладелецФайла) Экспорт
	
	Если ТипЗнч(ВладелецФайла) <> Тип("БизнесПроцессСсылка.Поручение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВладелецФайла);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(Поручение.Исполнитель КАК Справочник.РолиИсполнителей).УзелОбмена, НЕОПРЕДЕЛЕНО) КАК УзелОбмена
	               |ИЗ
	               |	БизнесПроцесс.Поручение КАК Поручение
	               |ГДЕ
	               |	Поручение.Ссылка = &Ссылка";
						   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УзелОбмена;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	
