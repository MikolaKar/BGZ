
/////////////////////////////////////////////////////////////////////
//	РАБОТА С СООБЩЕНИЯМИ ОБМЕНА
/////////////////////////////////////////////////////////////////////

// Инициирует обработку входящего сообщения и заполнения ответного сообщения
// Параметры:
//	ДанныеОбмена - хранилище значения с двоичными данными сообщения от клиента
//	НеобходимоОтправитьОтвет - флаг, указывающий на необходимость заполнения ответного сообщения
//	Сообщение - СообщениеИнтегрированныхСистем, которое заполняется в ответ, если это необходимо
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
Процедура ОбработатьСообщенияИСформироватьПакетОбмена(МобильныйКлиент, ИсходящееСообщение) Экспорт

	Попытка

		Сообщения = ОбменСМобильными.ПолучитьВходящиеНеобработанныеСообщения(МобильныйКлиент);

		Для Каждого Сообщение Из Сообщения Цикл
			ОбменСМобильными.ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);
		КонецЦикла;

	Исключение

		Инфо = ИнформацияОбОшибке();

		Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
			Возврат;
		КонецЕсли;

		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Ошибка'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Строка(МобильныйКлиент),
			ПодробноеПредставлениеОшибки(Инфо));

		ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
		ИсходящееСообщение.ПолучитьОбъект().Удалить();

		ВызватьИсключение;

	КонецПопытки;

	Попытка

		Если Не УКлиентаЕстьСинхронизируемыеОбласти(МобильныйКлиент) Тогда

			ТекстПредупреждения = 
				"warning:" + 
				НСтр("ru = 'Не включена синхронизация данных с мобильным клиентом.
					|C сервера на мобильный клиент не передаются никакие данные.
					|Необходимо зайти в персональные настройки в настольном клиенте и включить синхронизацию.'");

			ВызватьИсключение ТекстПредупреждения;

		КонецЕсли;

		СформироватьПакетОбмена(ИсходящееСообщение, МобильныйКлиент);

	Исключение

		Инфо = ИнформацияОбОшибке();

		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным.Формирование сообщения'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			Строка(МобильныйКлиент),
			ПодробноеПредставлениеОшибки(Инфо));

		ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);

		ИсходящееСообщение.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Выполняет формирование сообщения со всеми измененными с момента последней синхронизации данными
// Параметры:
//	Сообщение - ссылка на СообщениеИнтегрированныхСистем, в которое необходимо поместить данные
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный, из которого читаются данные для помещения в сообщение
Процедура СформироватьПакетОбмена(Сообщение, МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	НачалоПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Начало подготовки сообщения'"),
			Ложь,
			МобильныйКлиент);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	Попытка

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();

		// Выборка всех изменений для данного мобильного клиента
		МассивДанныхДляПередачиНаМобильныйКлиент = 
			ОбменСМобильнымиИОффлайн.ПолучитьИзмененныеДанные(МобильныйКлиент);

		КоличествоОбъектовВсего = МассивДанныхДляПередачиНаМобильныйКлиент.Количество();
		ВВыборкеЕстьДанные      = КоличествоОбъектовВсего > 0;

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Данных к выгрузке: %1'"),
				Строка(КоличествоОбъектовВсего)),
			Ложь,
			МобильныйКлиент);

		СчетчикОбъектов         = 0;
		СоответствиеАдресаты    = Новый Соответствие;
		СоответствиеКонтакты    = Новый Соответствие;
		ВозвращаемыеОбъектыXDTO = Новый Соответствие;
		ПользовательУзла        = МобильныйКлиент.Пользователь;
		ПараметрыСинхронизации  = ОбменСМобильными.ПолучитьПараметрыСинхронизации(ПользовательУзла);
		ШагОтображенияПроцентаГотовности = ОбменСМобильными.ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего);

		Для Каждого ЭлементДанных Из МассивДанныхДляПередачиНаМобильныйКлиент Цикл

			СчетчикОбъектов = СчетчикОбъектов + 1;

			Если Не ОбменСМобильными.ЭлементДанныхСуществуетВБазе(ЭлементДанных) Тогда
				Продолжить;
			КонецЕсли;

			ОбменСМобильнымиФормированиеXDTO_132.ПолучитьXDTOИзОбъекта(
				МобильныйКлиент,
				ЭлементДанных,
				ВозвращаемыеОбъектыXDTO,
				ПараметрыСинхронизации,
				СоответствиеАдресаты,
				СоответствиеКонтакты);

			// Расчет процента готовности сообщения.
			// Максимальное значение 99, т.к. необходимо гарантировать, 
			//	что не будет выполняться попытка передать сообщение клиенту до того,
			//	как данные сообщения будут записаны.

			Если СчетчикОбъектов % ШагОтображенияПроцентаГотовности = 0 Тогда
				ПроцентГотовности = Окр(99 * (СчетчикОбъектов/КоличествоОбъектовВсего));
				РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
					Сообщение, ПроцентГотовности);
			КонецЕсли;

		КонецЦикла;

		КонецПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах();

		РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьВремяПодготовки(
			Сообщение,
			(КонецПодготовки - НачалоПодготовки)/1000);

		Если ВВыборкеЕстьДанные Тогда

			МассивКонтакты = Новый Массив;
			Для Каждого КлючЗначение Из СоответствиеКонтакты Цикл
				МассивКонтакты.Добавить(КлючЗначение.Ключ);
			КонецЦикла;

			ЗапросАдресаты = Новый Запрос;
			ЗапросАдресаты.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СведенияОбАдресатах.АдресатСообщения КАК АдресатСообщения
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|ГДЕ
				|	СведенияОбАдресатах.Контакт в (&Контакты)";
			ЗапросАдресаты.УстановитьПараметр("Контакты", МассивКонтакты);
			МассивАдресатовДляПолученияПредставления = ЗапросАдресаты.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

			Для Каждого КлючЗначение Из СоответствиеАдресаты Цикл
				МассивАдресатовДляПолученияПредставления.Добавить(КлючЗначение.Значение);
			КонецЦикла;

			ПредставленияАдресатов = 
				ВстроеннаяПочтаСервер.ПолучитьСоответствиеСПредставлениямиИКонтактамиМассиваАдресатов(
					МассивАдресатовДляПолученияПредставления);

			Для Каждого СтрокаАдресат Из ПредставленияАдресатов Цикл

				XDTOАдресат = ОбменСМобильными_132.СоздатьОбъект("Addressee");

				XDTOАдресат.id           = СтрокаАдресат.Ключ.УникальныйИдентификатор();
				XDTOАдресат.presentation = СтрокаАдресат.Значение.Представление;
				XDTOАдресат.phoneNumbers = "";
				XDTOАдресат.address      = СтрокаАдресат.Значение.Адрес;

				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(СтрокаАдресат, XDTOАдресат, ВозвращаемыеОбъектыXDTO);

			КонецЦикла;

			ОбменСМобильными.ВыгрузитьМассивXDTOВСообщение(ИмяВременногоФайла, ЗаписьXML, ВозвращаемыеОбъектыXDTO, Сообщение, МобильныйКлиент);

			УдалитьФайлы(ИмяВременногоФайла);

		Иначе

			// Если данных к выгрузке нет, то сообщение удаляется из очереди и из базы.
			СообщениеОбъект = Сообщение.ПолучитьОбъект();
			Если СообщениеОбъект <> Неопределено Тогда
				СообщениеОбъект.Удалить();
			КонецЕсли;

			ЗаписьXML.Закрыть();

			УдалитьФайлы(ИмяВременногоФайла);

		КонецЕсли;

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Начало удаления регистрации изменений'"),
			Ложь,
			МобильныйКлиент);

		Для Каждого ЭлементДанных Из МассивДанныхДляПередачиНаМобильныйКлиент Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(МобильныйКлиент, ЭлементДанных);
		КонецЦикла;

		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			НСтр("ru = 'Регистрация изменений удалена'"),
			Ложь,
			МобильныйКлиент);

	Исключение

		ЗаписьXML.Закрыть();

		Если НайтиФайлы(ИмяВременногоФайла).Количество() > 0 Тогда 
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли;

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Читает и обрабатывает данные СообщенияИнтегрированныхСистем
// Параметры
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	ДанныеСообщения - хранилище значения с двоичными данными СообщенияИнтегрированныхСистем
Функция ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение) Экспорт
		
	Данные = Сообщение.ДанныеСообщения.Получить();
	Если Данные = Неопределено ИЛИ ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Массив для пометки писем как готовых о отправке после полной обработки сообщения.
	// В этот массив записываются письма, отправленные на мобильном клиенте.
	ПисьмаКОтправке = Новый Массив;
	
	// Массив для сохранения информации о том, какие связи необходимо будет установить между объектами
	// после обработки данного сообщения.
	СвязиКУстановке = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Данные.Записать(ИмяВременногоФайла);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.Прочитать();
 	ЧтениеXML.Прочитать(); // пропуск тэга Message
	Попытка
		Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
			
			// Выполняется последовательное чтение одного объекта за другим
			ТипXDTO = ФабрикаXDTO.Тип("http://www.1c.ru/mobileDM132", ЧтениеXML.Имя);
		 	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
			
			Если ОбъектXDTO = Неопределено Тогда
				ЧтениеXML.Закрыть();
				УдалитьФайлы(ИмяВременногоФайла);
				ТекстОшибки = НСтр("ru = 'От мобильного клиента получено сообщение неправильного формата'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Попытка
				ОбменСМобильнымиОбработкаXDTO_132.ОбработатьXDTO(ОбъектXDTO, МобильныйКлиент, ПисьмаКОтправке, СвязиКУстановке);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
					СообщениеОбъект = Сообщение.ПолучитьОбъект();
					СообщениеОбъект.ДатаОбработки = ТекущаяДатаСеанса();
					СообщениеОбъект.ПометкаУдаления = Истина;
					СообщениеОбъект.Записать();
					ВызватьИсключение;
				КонецЕсли;
				
				Если Найти(НРег(Инфо.Описание), "info:") > 0 Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Информация'", Метаданные.ОсновнойЯзык.КодЯзыка),
						УровеньЖурналаРегистрации.Информация,
						,
						Строка(МобильныйКлиент),
						ПодробноеПредставлениеОшибки(Инфо));
					ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
				ИначеЕсли Найти(НРег(Инфо.Описание), "warning:") > 0 Тогда
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Обмен с мобильным.Обработка сообщения.Предупреждение'", Метаданные.ОсновнойЯзык.КодЯзыка),
						УровеньЖурналаРегистрации.Предупреждение,
						,
						Строка(МобильныйКлиент),
						ПодробноеПредставлениеОшибки(Инфо));
					ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, Инфо);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		Если СообщениеОбъект <> Неопределено Тогда
			СообщениеОбъект.ДатаОбработки = ТекущаяДатаСеанса();
			СообщениеОбъект.ПометкаУдаления = Истина;
			СообщениеОбъект.Записать();
		КонецЕсли;
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
		Если Инфо.Описание = "СтопДальнейшейОбработки" Тогда
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	// Обходим массив подготовленных к отправке писем и записываем у них дату подготовки к отправке, 
	//	чтобы регламентное задание начало их отправлять.
	Для Каждого ПодготовленноеПисьмо Из ПисьмаКОтправке Цикл
		ПисьмоОбъект = ПодготовленноеПисьмо.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.ПодготовленоКОтправке = ПодготовленноеПисьмо.ПодготовленоКОтправке;
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформациюПоОбъекту(
			НСтр("ru = 'Отправка письма из мобильного клиента'"),
			Строка(ТипЗнч(ПисьмоОбъект)),
			ПисьмоОбъект.Ссылка.УникальныйИдентификатор(),
			Ложь,
			МобильныйКлиент);

		ПисьмоОбъект.Записать();

	КонецЦикла;

	// Обходим массив с настройками связей, которые необходимо создать
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СвязьКУстановке Из СвязиКУстановке Цикл

		Попытка
			СвязиДокументов.СоздатьСвязь(
				СвязьКУстановке.СвязанныйОбъект,
				СвязьКУстановке.Объект,
				СвязьКУстановке.ТипСвязи);

		Исключение

			Инфо = ИнформацияОбОшибке();

			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать связь: '");
			СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				СообщениеОбОшибке,
				Ложь,
				МобильныйКлиент);

			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;

	Возврат Истина;

КонецФункции

/////////////////////////////////////////////////////////////////////
//	РЕГИСТРАЦИЯ ДАННЫХ ДЛЯ МОБИЛЬНЫХ КЛИЕНТОВ
/////////////////////////////////////////////////////////////////////

// При обновлении клиента с 1.3.1 на 1.3.2 выполняет регистрацию 
// дополнительных настроек и данных для передачи на клиент.
Процедура ВыполнитьРегистрациюДанныхПриОбновленииКлиента(МобильныйКлиент) Экспорт
	
	// В версии 1.3.2 добавлена синхронизация подписей к письмам - необходимо передать информацию на клиентов	
	РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
		МобильныйКлиент.Пользователь,
		Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем);

	УзелОбменаДляРегистрацииВсехДанных = ОбменСМобильнымиПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	Выборка = Справочники.ШаблоныТекстовПисем.Выбрать(, МобильныйКлиент.Пользователь);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбменаДляРегистрацииВсехДанных, Выборка.Ссылка);
	КонецЦикла;

	// В версии 1.3.2 изменен способ передачи описания задач - необходимо заново передать задачи,
	//	чтобы в мобильном клиенте новой версии описание задач отобразилось правильно.
	// Будут переданы только неыполненные задачи, назначенные пользователю.
	СинхронизироватьЗадачи = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач);

	Если Не СинхронизироватьЗадачи Тогда
		Возврат;
	КонецЕсли;

	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("Исполнитель"            , МобильныйКлиент.Пользователь);
	ЗапросЗадачи.УстановитьПараметр("СостояниеБизнесПроцесса", Перечисления.СостоянияБизнесПроцессов.Активен);
	ЗапросЗадачи.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПоИсполнителю.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачиПоИсполнителю.Выполнена = ЛОЖЬ
		|	И ЗадачиПоИсполнителю.ПометкаУдаления = ЛОЖЬ
		|	И ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) <> ТИП(БизнесПроцесс.КомплексныйПроцесс)
		|	И ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) <> ТИП(БизнесПроцесс.РешениеВопросовВыполненияЗадач)
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = &СостояниеБизнесПроцесса
		|	И ЗадачиПоИсполнителю.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)";

	Выборка = ЗапросЗадачи.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////
//	Служебные
/////////////////////////////////////////////////////////////////////

Функция УКлиентаЕстьСинхронизируемыеОбласти(МобильныйКлиент) 

	СинхронизироватьПочту = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты);

	Если СинхронизироватьПочту Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьЗадачи = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач);

	Если СинхронизироватьЗадачи Тогда
		Возврат Истина;
	КонецЕсли;

	СинхронизироватьКалендарь = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря);

	Если СинхронизироватьКалендарь Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Создает XDTO с указанным типом
// Параметры
//	ТипОбъекта - строковое представление типа XDTO-пакета MobileDM132
Функция СоздатьОбъект(ТипОбъекта) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/mobileDM132", ТипОбъекта));

КонецФункции

// Формирует сообщение об ошибке и помещает его в очередь сообщений для мобильного клиента.
// Клиент получит это сообщение и отобразит его пользователю.
// Параметры:
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	ИнформацияОбОшибке - объект, содержащий информацию о произошедшей ошибке
Процедура ПоместитьВОчередьСообщениеОбОшибке(МобильныйКлиент, ИнформацияОбОшибке)

	УстановитьПривилегированныйРежим(Истина);

	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	Если Найти(ИнформацияОбОшибке.Описание, "info:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрЗаменить(ПредставлениеОшибки, "info:", ""),
			Ложь,
			МобильныйКлиент);

	ИначеЕсли Найти(ИнформацияОбОшибке.Описание, "warning:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрЗаменить(ПредставлениеОшибки, "warning:", ""),
			Ложь,
			МобильныйКлиент);

	Иначе
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
			ПредставлениеОшибки,
			Ложь,
			МобильныйКлиент);

	КонецЕсли;

	ИмяВременногоФайла      = ПолучитьИмяВременногоФайла("xml");
	ВозвращаемыеОбъектыXDTO = Новый Соответствие;
	ПользовательУзла        = МобильныйКлиент.Пользователь;
	ПараметрыСинхронизации  = ОбменСМобильными.ПолучитьПараметрыСинхронизации(ПользовательУзла);

	Попытка

		ОбменСМобильнымиФормированиеXDTO_132.ПолучитьXDTOИзОбъекта(МобильныйКлиент, ИнформацияОбОшибке, ВозвращаемыеОбъектыXDTO,ПараметрыСинхронизации);

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Message");

		// Выгрузка каждого из объектов XDTO в файл XML
		Для Каждого Элемент из ВозвращаемыеОбъектыXDTO Цикл

			ОбъектXDTO = Элемент.Значение;

			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

		КонецЦикла;

		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();

		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);

		МассивДанных = Новый Массив;
		МассивДанных.Добавить(Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9)));

		// Запись массива частей файла в содержательную часть сообщения интегрированных систем
		Сообщение = ОбменСМобильными.СоздатьНовоеСообщение(МобильныйКлиент);

		СообщениеОбъект = Сообщение.ПолучитьОбъект(); 
		СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивДанных);
		СообщениеОбъект.ДатаСоздания    = ТекущаяДатаСеанса();

		СообщениеОбъект.Записать();

		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;

		РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
			Сообщение,
			ДвоичныеДанныеФайла.Размер(),
			ВозвращаемыеОбъектыXDTO.Количество());

		РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
			Сообщение, 100);

	Исключение

		УдалитьФайлы(ИмяВременногоФайла);

		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры
