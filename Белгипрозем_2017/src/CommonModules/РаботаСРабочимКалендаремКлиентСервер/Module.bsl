////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с рабочим календарем.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Корректирует дату начала и окончания события с учетом настройки "Весь день" и пустых дат.
Процедура СкорректироватьДатуНачалаИОкончания(ДатаНачала, ДатаОкончания, ВесьДень,
	НачальноеЗначениеДатаНачала = Неопределено, НачальноеЗначениеДатаОкончания = Неопределено,
	СохранятьДлительностьПриПереносеДатыОкончания = Ложь) Экспорт
	
	// Очистка времени
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени начала
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
		И ДатаНачала <> НачальноеЗначениеДатаНачала
		И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаОкончания = ДатаНачала;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	// Ввод пустого времени окончания
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
		И ДатаОкончания <> НачальноеЗначениеДатаОкончания
		И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаНачала = ДатаОкончания;
		НачальноеЗначениеДатаНачала = ДатаНачала;
		НачальноеЗначениеДатаОкончания = ДатаОкончания;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальноеЗначениеДатаНачала)
		И ДатаНачала <> НачальноеЗначениеДатаНачала
		И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
		
		НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
		ДатаОкончания = ДатаНачала + НачальнаяДлительность;
		
	КонецЕсли;
	
	Если ВесьДень Тогда
		
		Если ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = КонецДня(ДатаНачала);
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаНачала = НачалоДня(ДатаОкончания);
		КонецЕсли;
		
		Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
			ДатаНачала = НачалоДня(ДатаНачала);
		КонецЕсли;
		
		Если ДатаОкончания <> КонецДня(ДатаОкончания) Тогда
			ДатаОкончания = КонецДня(ДатаОкончания);
		КонецЕсли;
		
	Иначе
		
		ДлительностьСобытияПоУмолчанию = 3600;
		
		Если ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = ДатаНачала + ДлительностьСобытияПоУмолчанию;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаНачала = ДатаОкончания - ДлительностьСобытияПоУмолчанию;
		ИначеЕсли СохранятьДлительностьПриПереносеДатыОкончания
			И ЗначениеЗаполнено(НачальноеЗначениеДатаОкончания)
			И ДатаОкончания <> НачальноеЗначениеДатаОкончания
			И НачальноеЗначениеДатаНачала <= НачальноеЗначениеДатаОкончания Тогда
			
			НачальнаяДлительность = НачальноеЗначениеДатаОкончания - НачальноеЗначениеДатаНачала;
			ДатаНачала = ДатаОкончания - НачальнаяДлительность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачальноеЗначениеДатаНачала = ДатаНачала;
	НачальноеЗначениеДатаОкончания = ДатаОкончания;
	
КонецПроцедуры

// Возвращает дату приведенную к началу периода отображения календаря
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата) - 2 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату приведенную к концу периода отображения календаря
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата) + 604800; // 604800 - число секунд в неделе
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ПланДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата) + 6 * 86400; // 86400 - число секунд в сутках
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(Дата) - 1) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

// Возвращает дату приведенную к началу следующего периода отображения календаря
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = КонецНедели(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = КонецМесяца(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции

// Возвращает дату приведенную к началу предыдущего периода отображения календаря
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(НачалоНедели(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(НачалоМесяца(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата) - 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции

// Приводит переданную дату к началу получаса
Функция НачалоПолучаса(Дата) Экспорт
	
	НачалоПолучаса = НачалоЧаса(Дата);
	
	Если Дата - НачалоПолучаса >= 1800 Тогда
		
		НачалоПолучаса = НачалоПолучаса + 1800;
		
	КонецЕсли;
	
	Возврат НачалоПолучаса;
	
КонецФункции

// Приводит переданную дату к концу получаса
Функция КонецПолучаса(Дата) Экспорт
	
	Если Дата = НачалоЧаса(Дата) ИЛИ Дата = (НачалоЧаса(Дата) + 1800) Тогда
		Возврат Дата;
	КонецЕсли;
	
	КонецПолучаса = КонецЧаса(Дата) + 1;
	
	Если КонецПолучаса - Дата > 1800 Тогда
		
		КонецПолучаса = КонецПолучаса - 1800;
		
	КонецЕсли;
	
	Возврат КонецПолучаса;
	
КонецФункции

// Возвращает массив времен по часам внутри дня
Функция ПолучитьМассивВремен() Экспорт
	
	МассивВремен = Новый Массив;
	
	Дата = Дата(1,1,2);
	
	Для Итератор = 1 По 24 Цикл
		МассивВремен.Добавить(Формат(Дата, "ДФ = 'HH:mm'"));
		Дата = Дата + 3600;
	КонецЦикла;
	
	Возврат МассивВремен;
	
КонецФункции

// Преобразует переданную к дате и время текстом к дате и времени
Функция ПреобразоватьТекстКДате(Дата, Знач ТекстВремя) Экспорт
	
	ТекстВремя = СтрЗаменить(ТекстВремя, " ", "0");
	ДлинаТекстаВремени = СтрДлина(ТекстВремя);
	
	Если ДлинаТекстаВремени = 0 ИЛИ ДлинаТекстаВремени > 5 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	ТекстВремяВФормате = Неопределено;
	
	Если КодСимвола(ПервыйСимвол) = КодСимвола("0") ИЛИ КодСимвола(ПервыйСимвол) = КодСимвола("1") Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ложь);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола("2")Тогда
		
		ТекстВремяВФормате = ПервыйСимвол;
		ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Истина);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) >= КодСимвола("3") И КодСимвола(ПервыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = "0" + ПервыйСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ПервыйСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "00";
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПервыйСимвол) Тогда
		
		ТекстВремяВФормате = "0000";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВремя) Тогда
		ТекстВремяВФормате = Неопределено;
	КонецЕсли;
	
	Если ТекстВремяВФормате = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстВремяВФормате = "00010101" + ТекстВремяВФормате + "00";
	Время = Дата(ТекстВремяВФормате);
	Результат = НачалоДня(Дата) + Час(Время) * 3600 + Минута(Время) * 60;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает развернутость событий весь день в календаре
Процедура УстановитьРазвернутостьСобытийВесьДень(Календарь, СвернутьСобытияВесьДеньВКалендаре) Экспорт
	
	Попытка
		
		Если СвернутьСобытияВесьДеньВКалендаре Тогда
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Истина;
			Календарь.Область("СобытияВсегоДня").Видимость = Ложь;
		Иначе
			Календарь.Область("ПодписьСобытияВсегоДня").Видимость = Ложь;
			Календарь.Область("СобытияВсегоДня").Видимость = Истина;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Возвращает надпись "Перейти к предмету", с указанием конкретного предмета
// Если предмет не заполнен возвращает "Перейти к записи календаря"
Функция УстановитьНадписьИПредметПерехода(ЗаписьКалендаря, Предмет, НадписьПерейти, ПредметПерехода) Экспорт
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
			ПредставлениеПредмета = НСтр("ru = 'проекту'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			ПредставлениеПредмета = НСтр("ru = 'входящему письму'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПредставлениеПредмета = НСтр("ru = 'задаче'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			ПредставлениеПредмета = НСтр("ru = 'исходящему письму'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'файлу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'входящему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'внутреннему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
			ПредставлениеПредмета = НСтр("ru = 'исходящему документу'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			ПредставлениеПредмета = НСтр("ru = 'мероприятию'");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
			ПредставлениеПредмета = НСтр("ru = 'проектной задаче'");
		Иначе
			ПредставлениеПредмета = НСтр("ru = 'предмету'");
		КонецЕсли;
		ПредметПерехода = Предмет;
		
	Иначе
		
		ПредставлениеПредмета = НСтр("ru = 'записи календаря'");
		ПредметПерехода = ЗаписьКалендаря;
		
	КонецЕсли;
	
	НадписьПерейти = НСтр("ru = 'Перейти к'") + " " + ПредставлениеПредмета;
	
КонецФункции

// Возвращает текстовое представление повторения
Функция ПолучитьТекстовоеПредставлениеПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Не повторять'");
		Возврат ПредставлениеПовторения;
		
	ИначеЕсли НастройкиПовторения.ИнтервалПовторения > 1 Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения);
		ПредставлениеПовторения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Каждые %1 %2'"),
				НастройкиПовторения.ИнтервалПовторения,
				ПредставлениеЕдиницыИзмеренияИнтервалаПовторения);
				
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый день'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждую неделю'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый месяц'");
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеПовторения = НСтр("ru = 'Каждый год'");
		
	КонецЕсли;
	
	Если НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		Если НастройкиПовторения.ПовторениеПоДнямНедели[1]
			И НастройкиПовторения.ПовторениеПоДнямНедели[2]
			И НастройкиПовторения.ПовторениеПоДнямНедели[3]
			И НастройкиПовторения.ПовторениеПоДнямНедели[4]
			И НастройкиПовторения.ПовторениеПоДнямНедели[5]
			И НастройкиПовторения.ПовторениеПоДнямНедели[6]
			И НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеПовторения = ПредставлениеПовторения + " - " + НСтр("ru = 'все дни'");
			
		ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНедели[1]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[2]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[3]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[4]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[5]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[6]
			ИЛИ НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
			
			ПредставлениеДнейНедели = "";
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[1] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'понедельник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[2] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'вторник'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[3] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'среда'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[4] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'четверг'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[5] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'пятница'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[6] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'суббота'"));
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНедели[7] Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеДнейНедели,
					", ",
					НСтр("ru = 'воскресенье'"));
			КонецЕсли;
			
			ПредставлениеПовторения = ПредставлениеПовторения + " - " + ПредставлениеДнейНедели;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		Если ЗначениеЗаполнено(НастройкиПовторения.ПовторениеПоДнямМесяца) Тогда
			
			ПредставлениеДняМесяца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1-го числа'"),
				НастройкиПовторения.ПовторениеПоДнямМесяца);
			ПредставлениеПовторения = ПредставлениеПовторения + " - " + ПредставлениеДняМесяца;
			
		Иначе
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 1 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'понедельник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 2 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'вторник'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 3 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'среда'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 4 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'четверг'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последний'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 5 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'пятница'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 6 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'суббота'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последняя'");
			ИначеЕсли НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.ДеньНедели = 7 Тогда
				ПредставлениеДняНедели = НСтр("ru = 'воскресенье'");
				ПредставлениеПорядкаДняНеделиМесяца = НСтр("ru = 'последнее'");
			КонецЕсли;
			
			Если НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения <> -1 Тогда
				ПредставлениеПорядкаДняНеделиМесяца =
					Строка(НастройкиПовторения.ПовторениеПоДнямНеделиВМесяце.НомерВхождения);
			КонецЕсли;
			
			ПредставлениеДняНеделиМесяца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"),
				ПредставлениеПорядкаДняНеделиМесяца,
				ПредставлениеДняНедели);
			
			ПредставлениеПовторения = ПредставлениеПовторения + " - " + ПредставлениеДняНеделиМесяца;
			
		КонецЕсли;
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		МесяцДень = Дата(1,НастройкиПовторения.ПовторениеПоМесяцам, НастройкиПовторения.ПовторениеПоДнямМесяца);
		ПредставлениеДняГода = Формат(МесяцДень, "ДФ='d MMMM'");
		
		ПредставлениеПовторения = ПредставлениеПовторения + " - " + ПредставлениеДняГода;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПовторения.КоличествоПовторов) 
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ПослеЧислаПовторов") Тогда
		
		ПредставлениеРаз = НСтр("ru = 'раз'") + "," + НСтр("ru = 'раза'") + "," + НСтр("ru = 'раз'");
		ПредставлениеКоличестваПовторов = 
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				НастройкиПовторения.КоличествоПовторов, ПредставлениеРаз);
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеКоличестваПовторов;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиПовторения.ДатаОкончанияПовторения)
		И НастройкиПовторения.ПравилоОкончанияПовторения =
			ПредопределенноеЗначение("Перечисление.ПравилаОкончанияПовторения.ДоДаты") Тогда
		
		ПредставлениеДо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'до %1'"),
			Формат(НастройкиПовторения.ДатаОкончанияПовторения, "ДЛФ=DD"));
		
		ПредставлениеПовторения = ПредставлениеПовторения + ", " + ПредставлениеДо;
		
	КонецЕсли;
	
	Возврат ПредставлениеПовторения;
	
КонецФункции

// Возвращает текстовое представление единицы измерения интервала повторения
Функция ПолучитьТекстовоеПредставлениеЕдиницыИзмеренияИнтервалаПовторения(НастройкиПовторения) Экспорт
	
	ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
	
	Если НЕ ЗначениеЗаполнено(НастройкиПовторения.ЧастотаПовторения) Тогда
		
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = "";
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежедневно") Тогда
		
		ПредставлениеДней = НСтр("ru = 'день'") + "," + НСтр("ru = 'дня'") + "," + НСтр("ru = 'дней'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеДней);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Еженедельно") Тогда
		
		ПредставлениеНедель = НСтр("ru = 'неделя'") + "," + НСтр("ru = 'недели'") + "," + НСтр("ru = 'недель'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеНедель);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежемесячно") Тогда
		
		ПредставлениеМесяцев = НСтр("ru = 'месяц'") + "," + НСтр("ru = 'месяца'") + "," + НСтр("ru = 'месяцев'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеМесяцев);
		
	ИначеЕсли НастройкиПовторения.ЧастотаПовторения =
		ПредопределенноеЗначение("Перечисление.ЧастотаПовторения.Ежегодно") Тогда
		
		ПредставлениеЛет = НСтр("ru = 'год'") + "," + НСтр("ru = 'года'") + "," + НСтр("ru = 'лет'");
		ПредставлениеЕдиницыИзмеренияИнтервалаПовторения = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
				НастройкиПовторения.ИнтервалПовторения, ПредставлениеЛет);
		
	КонецЕсли;
	
	Возврат ПредставлениеЕдиницыИзмеренияИнтервалаПовторения;
	
КонецФункции

// Возвращает структуру настройки повторения
Функция ПолучитьСтруктуруНастройкиПовторения(
	ЧастотаПовторения, ИнтервалПовторения, ПравилоОкончанияПовторения,
	КоличествоПовторов, ДатаОкончанияПовторения, ПовторениеПоДнямНедели,
	ПовторениеПоДнямМесяца, ПовторениеПоДнямНеделиВМесяце, ПовторениеПоМесяцам) Экспорт
	
	НастройкиПовторения = Новый Структура;
	НастройкиПовторения.Вставить("ЧастотаПовторения", ЧастотаПовторения);
	НастройкиПовторения.Вставить("ИнтервалПовторения", ИнтервалПовторения);
	НастройкиПовторения.Вставить("ПравилоОкончанияПовторения", ПравилоОкончанияПовторения);
	НастройкиПовторения.Вставить("КоличествоПовторов", КоличествоПовторов);
	НастройкиПовторения.Вставить("ДатаОкончанияПовторения", ДатаОкончанияПовторения);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНедели", ПовторениеПоДнямНедели);
	НастройкиПовторения.Вставить("ПовторениеПоДнямМесяца", ПовторениеПоДнямМесяца);
	НастройкиПовторения.Вставить("ПовторениеПоДнямНеделиВМесяце", ПовторениеПоДнямНеделиВМесяце);
	НастройкиПовторения.Вставить("ПовторениеПоМесяцам", ПовторениеПоМесяцам);
	
	Возврат НастройкиПовторения;
	
КонецФункции

// Возвращает день недели в месяце
Функция ПолучитьДеньНеделиВМесяце(Дата, СУчетомПоследнего = Истина) Экспорт
	
	ДеньНеделиВМесяце = Новый Структура("НомерВхождения, ДеньНедели");
	
	ДеньНеделиВМесяце.ДеньНедели = ДеньНедели(Дата);
	
	НомерНеделиСНачалаМесяца = Цел((Дата - (НачалоМесяца(Дата))) / 604800) + 1; // 604800 - число секунд в неделе
	ДеньНеделиВМесяце.НомерВхождения = НомерНеделиСНачалаМесяца;
	
	Если СУчетомПоследнего Тогда
		НомерНеделиСКонцаМесяца = Цел((КонецМесяца(Дата) - Дата) / 604800) + 1; // 604800 - число секунд в неделе
		Если НомерНеделиСКонцаМесяца = 1 Тогда
			ДеньНеделиВМесяце.НомерВхождения = -1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДеньНеделиВМесяце;
	
КонецФункции

// Возвращает пустое HTML представление
Функция ПолучитьПустоеHTMLПредставление() Экспорт
	
	Возврат "<html><body scroll=auto></body></html>";
	
КонецФункции

// Возвращает первую непустую строку
Функция ВыделитьПервуюСтрокуОписания(Описание) Экспорт
	
	Результат = СокрЛ(Описание);
	Результат = СтрПолучитьСтроку(Результат, 1);
	
	Возврат Результат;
	
КонецФункции

// Возвращает промежуток времени строкой
Функция ПолучитьПромежутокВремениСтрокой(ВремяНачала, ВремяОкончания, ДеньНедели = Неопределено) Экспорт
	
	ПромежутокВремениСтрокой = "";
	
	Если ДеньНедели <> Неопределено Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
			ТРег(ПолучитьДеньНеделиСтрокой(ДеньНедели)));
	КонецЕсли;
	
	ВремяНачалаСтрокой = Формат(ВремяНачала, "ДФ=ЧЧ:мм; ДП=00:00");
	Если ВремяОкончания <> Дата("00010101235959") Тогда
		ВремяОкончанияСтрокой = Формат(ВремяОкончания, "ДФ=ЧЧ:мм; ДП=00:00");
	Иначе
		ВремяОкончанияСтрокой = "00:00";
	КонецЕсли;
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(ПромежутокВремениСтрокой, " ",
		ВремяНачалаСтрокой + " - " + ВремяОкончанияСтрокой);
	
	Возврат ПромежутокВремениСтрокой;
	
КонецФункции

// Возвращает день недели строкой
Функция ПолучитьДеньНеделиСтрокой(ДеньНедели) Экспорт
	
	ДатаДняНедели = Дата(1,1,2 + ДеньНедели); // Дата(1,1,3) - понедельник
	Возврат Формат(ДатаДняНедели,"ДФ=дддд");
	
КонецФункции

// Заменяет повторное вхождение символа на одиночное
Функция СократитьПовторноеВхождениеСимвола(Текст, Символ) Экспорт
	
	ВременныйТекст = Текст;
	
	ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	Пока ПозицияДвойногоСимвола <> 0 Цикл
		ВременныйТекст = СтрЗаменить(ВременныйТекст, Символ + Символ, Символ);
		ПозицияДвойногоСимвола = Найти(ВременныйТекст, Символ + Символ);
	КонецЦикла;
	
	Возврат ВременныйТекст;
	
КонецФункции

// Проверяет образуют ли переданные даты корректный период календаря
Функция ЯвляетсяКорректнымПериодом(ДатаНачала, ДатаОкончания) Экспорт
	
	Возврат ЗначениеЗаполнено(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания)
		И ДатаНачала < ДатаОкончания;
	
КонецФункции

// Формирует представление даты записи календаря
Функция ПолучитьПредставлениеДаты(ДатаНачала, ДатаОкончания, ВесьДень) Экспорт
	
	ПредставлениеДаты = "";
	
	ТекстВремя = Формат(ДатаНачала, "ДФ=ЧЧ:мм") + " - " + Формат(ДатаОкончания, "ДФ=ЧЧ:мм");
	ТекстДата = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	
	Если ВесьДень Тогда
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг'");
	Иначе
		ТекстДатаНачала = Формат(ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
		ТекстДатаОкончания = Формат(ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	КонецЕсли;
	
	Если НачалоДня(ДатаНачала) - НачалоДня(ДатаОкончания) <> 0 Тогда
		ПредставлениеДаты = ТекстДатаНачала + " - " + ТекстДатаОкончания;
	ИначеЕсли ВесьДень Тогда
		ПредставлениеДаты = ТекстДата;
	Иначе
		ПредставлениеДаты = ТекстДата + ", " + ТекстВремя;
	КонецЕсли;
	
	Возврат ТРег(ПредставлениеДаты);
	
КонецФункции

// Формирует структуру времени
Функция СформироватьВремя(ДатаНачала = Неопределено, ДатаОкончания = Неопределено, ВесьДень = Неопределено) Экспорт
	
	Время = Новый Структура("ДатаНачала, ДатаОкончания, ВесьДень");
	Время.ДатаНачала = ДатаНачала;
	Время.ДатаОкончания = ДатаОкончания;
	Время.ВесьДень = ВесьДень;
	
	Возврат Время;
	
КонецФункции

// Проверяет, совпадают ли времена
Функция ВременаСовпадают(Время1, Время2) Экспорт
	
	Возврат Время1.ДатаНачала = Время2.ДатаНачала
		И Время1.ДатаОкончания = Время2.ДатаОкончания
		И Время1.ВесьДень = Время2.ВесьДень;
	
КонецФункции

// Получает индекс цвета в коллекции КоллекцияЦветов.
//
// Параметры:
//  Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря - Цвет, индекс которого необходимо получить.
//
// Возвращаемое значение:
//  Число - Индекс цвета в коллекции.
//
Функция ПолучитьИндексЦвета(Цвет) Экспорт
	
	ИндексЦвета = 0;
	
	Если Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет") Тогда
		ИндексЦвета = 0;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ИндексЦвета = 1;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ИндексЦвета = 2;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ИндексЦвета = 3;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ИндексЦвета = 4;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ИндексЦвета = 5;
	КонецЕсли;
	
	Возврат ИндексЦвета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает второй символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьВторойСимвол(ТекстВремя, ТекстВремяВФормате, Ограничение)
	
	ВторойСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("9") И НЕ Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) >= КодСимвола("0") И КодСимвола(ВторойСимвол) <= КодСимвола("3") И Ограничение Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ВторойСимвол;
		ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ВторойСимвол) = КодСимвола(":") Тогда
		
		ТекстВремяВФормате = "0" + ТекстВремяВФормате;
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВторойСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "000";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает третий символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьТретийСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ТретийСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ТретийСимвол) >= КодСимвола("0") И КодСимвола(ТретийСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ТретийСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ТретийСимвол) >= КодСимвола("6") И КодСимвола(ТретийСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ТретийСимвол;
		
	ИначеЕсли КодСимвола(ТретийСимвол) = КодСимвола(":") Тогда
		
		ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТретийСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает четвертый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьЧетвертыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ЧетвертыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ЧетвертыйСимвол) >= КодСимвола("0") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("5") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ЧетвертыйСимвол;
		ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате);
		
	ИначеЕсли КодСимвола(ЧетвертыйСимвол) >= КодСимвола("6") И КодСимвола(ЧетвертыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0" + ЧетвертыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ЧетвертыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "00";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает пятый символ в текстовом времени. Если недопустимый символ то вернет Неопределено.
Процедура ОбработатьПятыйСимвол(ТекстВремя, ТекстВремяВФормате)
	
	ПятыйСимвол = Сред(ТекстВремя, 1, 1);
	ТекстВремя = Сред(ТекстВремя, 2);
	
	Если КодСимвола(ПятыйСимвол) >= КодСимвола("0") И КодСимвола(ПятыйСимвол) <= КодСимвола("9") Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + ПятыйСимвол;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПятыйСимвол) Тогда
		
		ТекстВремяВФормате = ТекстВремяВФормате + "0";
		
	Иначе
		
		ТекстВремяВФормате = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти