////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для обработки ТекущиеДела
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработчик регламентного задания РасчетПоказателейРаботыПользователей.
// Предназначен для накопления истории значений показателей пользователя. 
// История значений показателей используется в качестве исходных данных 
// для графика загруженности пользователя на рабочем столе.
// 
Процедура РасчетПоказателейРаботыПользователей() Экспорт
	                          
	УстановитьПривилегированныйРежим(Истина);
				
	ПользователиДляРасчета = 
		РегистрыСведений.НастройкиТекущихДел.ПользователиСПризнакомОтображенияГрафикаНагрузки();
			
	РассчитатьПоказателиНагрузкиДляПользователей(ПользователиДляРасчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регламентное задание РасчетПоказателейРаботыПользователей

Процедура РассчитатьПоказателиНагрузкиДляПользователей(ПользователиДляРасчета) Экспорт
	
	Если ПользователиДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета);
	РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета);
		
КонецПроцедуры

Процедура РассчитатьПоказателиПочтыДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту");
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИспользованиеПочты.Пользователь
			|ИЗ
			|	РегистрСведений.ИспользованиеПочты КАК ИспользованиеПочты
			|ГДЕ
			|	ИспользованиеПочты.НастройкаИспользоватьВстроеннуюПочту
			|	И ИспользованиеПочты.Пользователь В(&Пользователи)";

		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		
		ПользователиСПочтой = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		Если ПользователиСПочтой.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПисемТекущихДел.Пользователь КАК Пользователь,
			|	ПапкиПисемТекущихДел.Папка КАК Папка
			|ПОМЕСТИТЬ ПапкиПользователей
			|ИЗ
			|	РегистрСведений.ПапкиПисемТекущихДел КАК ПапкиПисемТекущихДел
			|ГДЕ
			|	ПапкиПисемТекущихДел.Пользователь В(&Пользователи)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Папка,
			|	Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПапкиПользователей.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПапкиПользователей КАК ПапкиПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящиеПисьма
			|		ПО ПапкиПользователей.Папка = ВходящиеПисьма.Папка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
			|		ПО (ВходящиеПисьма.Ссылка = СведенияОПрочтении.Объект)
			|			И (СведенияОПрочтении.Пользователь = ПапкиПользователей.Пользователь)
			|ГДЕ
			|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
			|	И НЕ ВходящиеПисьма.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПапкиПользователей.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиСПочтой);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, Перечисления.ТипыПоказателейРаботы.НепрочитанныеПисьма);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура РассчитатьПоказателиЗадачДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		
		ИсполнителиЗадач = ИсполнителиЗадач(ПользователиДляРасчета);
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИсполнителиЗадач.Пользователь,
			|	ИсполнителиЗадач.Исполнитель,
			|	ИсполнителиЗадач.ОсновнойОбъектАдресации,
			|	ИсполнителиЗадач.ДополнительныйОбъектАдресации
			|ПОМЕСТИТЬ ИсполнителиЗадач
			|ИЗ
			|	&ТаблицаИсполнителейЗадач КАК ИсполнителиЗадач
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации
			|			И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации
			|			И ИсполнителиЗадач.Исполнитель = ЗадачаИсполнителя.ТекущийИсполнитель
			|ГДЕ
			|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсполнителиЗадач.Пользователь";
		
		Запрос.УстановитьПараметр("ТаблицаИсполнителейЗадач", ИсполнителиЗадач);
		
		ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
		
		ОбъектыОбластейДелегирования = Новый Массив;
		ОбластьДелегированияЗадачи = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задача.ЗадачаИсполнителя");
		ОбъектыОбластейДелегирования.Добавить(ОбластьДелегированияЗадачи);
		
		Выборка = ЗначенияПоказателейСУчетомДелегирования(ЗначенияПоказателей, ОбъектыОбластейДелегирования);
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.АктивныеЗадачи); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры	

Процедура РассчитатьПоказателиКалендаряДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");		
	
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ЗаписиРабочегоКалендаря.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
			|ГДЕ
			|	ЗаписиРабочегоКалендаря.Пользователь В(&Пользователи)
			|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
			|	И ЗаписиРабочегоКалендаря.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И ЗаписиРабочегоКалендаря.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиРабочегоКалендаря.Пользователь";
		
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка, 
			Перечисления.ТипыПоказателейРаботы.ЗаписиКалендаря); 
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры	

Процедура РассчитатьПоказателиМероприятийДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УчастникиМероприятия.Исполнитель КАК Пользователь,
			|	УчастникиМероприятия.Мероприятие КАК Мероприятие
			|ПОМЕСТИТЬ ПользователиМероприятия
			|ИЗ
			|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
			|ГДЕ
			|	УчастникиМероприятия.Исполнитель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Организатор,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Организатор В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Председатель,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Председатель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СправочникМероприятия.Секретарь,
			|	СправочникМероприятия.Ссылка
			|ИЗ
			|	Справочник.Мероприятия КАК СправочникМероприятия
			|ГДЕ
			|	СправочникМероприятия.Секретарь В(&Пользователи)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПользователиМероприятия.Пользователь КАК Пользователь,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	ПользователиМероприятия КАК ПользователиМероприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Мероприятия КАК СправочникМероприятия
			|		ПО ПользователиМероприятия.Мероприятие = СправочникМероприятия.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
			|		ПО (СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
			|			И (СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка)
			|ГДЕ
			|	СправочникМероприятия.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И СправочникМероприятия.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|	И НЕ СправочникМероприятия.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ПользователиМероприятия.Пользователь";
			
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.Мероприятия); 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Процедура РассчитатьПоказателиКонтроляДляПользователей(ПользователиДляРасчета)
	
	ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
		
	Если Не ФункционалВключен Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникКонтроль
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";
		СправочникКонтроль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль");
		Запрос.УстановитьПараметр("СправочникКонтроль", СправочникКонтроль);
		ОбластиДелегирования = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Контроль.Контролер КАК Пользователь,
			|	1 КАК Количество
			|ПОМЕСТИТЬ Пользователи
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.ПоставленНаКонтроль
			|	И НЕ Контроль.ПометкаУдаления
			|	И НЕ Контроль.СнятСКонтроля
			|	И Контроль.Контролер В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.Исполнитель,
			|	1
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер)
			|			И (ИсполнителиЗадач.ОсновнойОбъектАдресации = Контроль.ОсновнойОбъектАдресацииКонтролера)
			|			И (ИсполнителиЗадач.ДополнительныйОбъектАдресации = Контроль.ДополнительныйОбъектАдресацииКонтролера)
			|ГДЕ
			|	Контроль.ПоставленНаКонтроль
			|	И НЕ Контроль.ПометкаУдаления
			|	И НЕ Контроль.СнятСКонтроля
			|	И ИсполнителиЗадач.Исполнитель В(&Пользователи)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДелегированиеПрав.Кому,
			|	1
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав КАК ДелегированиеПрав
			|		ПО (ДелегированиеПрав.ОтКого = Контроль.Контролер)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
			|		ПО (ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка)
			|ГДЕ
			|	ДелегированиеПрав.Кому В(&Пользователи)
			|	И ДелегированиеПрав.Действует
			|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
			|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Пользователь,
			|	СУММА(Пользователи.Количество) КАК Количество
			|ИЗ
			|	Пользователи КАК Пользователи
			|
			|СГРУППИРОВАТЬ ПО
			|	Пользователи.Пользователь";
				
		Запрос.УстановитьПараметр("Пользователи", ПользователиДляРасчета);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		РегистрыСведений.ЗначенияПоказателейРаботыПользователя.ДобавитьЗаписиИзВыборкиСТипомПоказателя(
			Выборка,
			Перечисления.ТипыПоказателейРаботы.НаКонтроле); 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ТекущиеДела.РасчетПоказателейРаботыПользователей'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
			
КонецПроцедуры

Функция ИсполнителиЗадач(ПользователиДляРасчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь,
		|	ИсполнителиЗадач.РольИсполнителя КАК Исполнитель,
		|	ИсполнителиЗадач.ОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель В(&ПользователиДляРасчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Ссылка,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В(&ПользователиДляРасчета)";
		
	Запрос.УстановитьПараметр("ПользователиДляРасчета", ПользователиДляРасчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ИсполнителиЗадачПользователяСУчетомДелегированияИРолевойАдресации() Экспорт
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Исполнители = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь);
	Исполнители = ИсполнителиЗадач(Исполнители).ВыгрузитьКолонку("Исполнитель");
	
	Возврат Исполнители;
	
КонецФункции

Функция ПодчиненныеПодразделения() Экспорт
	
	Исполнители = 
		ИсполнителиЗадачПользователяСУчетомДелегированияИРолевойАдресации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Руководитель В(&Руководители)";
	Запрос.УстановитьПараметр("Руководители", Исполнители);
		
	ПодразделенияРуководителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураПредприятия.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделения)";
		
	Запрос.УстановитьПараметр("Подразделения", ПодразделенияРуководителей);
	ПодчиненныеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Подразделение Из ПодразделенияРуководителей Цикл
		Если ПодчиненныеПодразделения.Найти(Подразделение) = Неопределено Тогда
			ПодчиненныеПодразделения.Добавить(Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодчиненныеПодразделения;
	
КонецФункции

Функция ЗначенияПоказателейСУчетомДелегирования(ЗначенияПоказателей, ОбъектыОбластейДелегирования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.ОтКого,
		|	ДелегированиеПрав.Кому
		|ПОМЕСТИТЬ НастройкиДелегированияПрав
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|ГДЕ
		|	ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.ОтКого,
		|	ДелегированиеПравОбластиДелегирования.Ссылка.Кому
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|		ПО ОбластиДелегированияПравСостав.Ссылка = ДелегированиеПравОбластиДелегирования.ОбластьДелегирования
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных В (&ОбъектыОбластейДелегирования)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Пользователь,
		|	ЗначенияПоказателей.Количество
		|ПОМЕСТИТЬ ЗначенияПоказателей
		|ИЗ
		|	&ТаблицаЗначенийПоказателей КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Пользователь,
		|	ЗначенияПоказателей.Количество
		|ПОМЕСТИТЬ ЗначенияПоказателейСУчетомДелегирования
		|ИЗ
		|	ЗначенияПоказателей КАК ЗначенияПоказателей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДелегированиеПрав.Кому,
		|	ЗначенияПоказателей.Количество
		|ИЗ
		|	НастройкиДелегированияПрав КАК ДелегированиеПрав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоказателей КАК ЗначенияПоказателей
		|		ПО ДелегированиеПрав.ОтКого = ЗначенияПоказателей.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателейСУчетомДелегирования.Пользователь,
		|	СУММА(ЗначенияПоказателейСУчетомДелегирования.Количество) КАК Количество
		|ИЗ
		|	ЗначенияПоказателейСУчетомДелегирования КАК ЗначенияПоказателейСУчетомДелегирования
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателейСУчетомДелегирования.Пользователь";
		
	Запрос.УстановитьПараметр("ТаблицаЗначенийПоказателей", ЗначенияПоказателей);
	Запрос.УстановитьПараметр("ОбъектыОбластейДелегирования", ОбъектыОбластейДелегирования);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дерево показателей

// Добавляет в дерево показателей строки групп, объединяющих  показатели
//
// Параметры:
//  Дерево	- ДеревоЗначений - дерево в которое добавляются строки
//
Процедура ДобавитьСтрокиГруппПоказателей(Дерево) Экспорт
	
	ДобавитьСтрокуГруппы(Дерево.Строки, "Почта", НСтр("ru = 'Почта'"), "ТекущиеДелаПочта");
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "Календарь", 
		НСтр("ru = 'Календарь'"),
		"ТекущиеДелаКалендарь");		
	
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "Задачи", НСтр("ru = 'Мои задачи'"), 
		"ТекущиеДелаЗадачи");
		
	ДобавитьСтрокуГруппы(Дерево.Строки, "Контроль", НСтр("ru = 'На контроле'"), 
		"ТекущиеДелаКонтроль");
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "Форум", НСтр("ru = 'Форум'"), 
		"ТекущиеДелаФорум");	
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "Мероприятия", НСтр("ru = 'Мероприятия'"), 
		"ТекущиеДелаМероприятия");
	
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "ЗадачиПодчиненных", НСтр("ru = 'Задачи отдела'"), 
		"ТекущиеДелаЗадачиПодчиненных");
				
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "ВнутренниеДокументы", НСтр("ru = 'Внутренние документы'"), 
		"ТекущиеДелаВнутренниеДокументы");
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "ВходящиеДокументы", НСтр("ru = 'Входящие документы'"), 
		"ТекущиеДелаВходящиеДокументы");
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "ИсходящиеДокументы", НСтр("ru = 'Исходящие документы'"), 
		"ТекущиеДелаИсходящиеДокументы");
	
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "УчетВремени", НСтр("ru = 'Учет времени'"), 
		"ТекущиеДелаУчетВремени");	
		
	ДобавитьСтрокуГруппы(
		Дерево.Строки, "РедактируемыеФайлы", НСтр("ru = 'Редактируемые файлы'"), 
		"ТекущиеДелаРедактируемыеФайлы");		
		
	ДобавитьСтрокуГруппы(Дерево.Строки, "ГрафикНагрузки", НСтр("ru = 'Мои дела'"), 
		"");
	
	ДобавитьСтрокуГруппы(Дерево.Строки, "СписокИзбранное", НСтр("ru = 'Избранное'"), 
		"", 1);
	
	ДобавитьСтрокуГруппы(Дерево.Строки, "СписокПоследние", НСтр("ru = 'Список последних'"), 
		"", 1);
	
КонецПроцедуры

// Добавляет в дерево показателей строки показателей
//
// Параметры:
//  СтрокаГруппы	- СтрокаДереваЗначений - строка дерева, в которое добавляются строки
//
Процедура ДобавитьСтрокиПоказателей(СтрокаГруппы) Экспорт

	Если СтрокаГруппы.Показатель = "Почта" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ПочтаНепрочтенныеПисьмаУчетнойЗаписи1",
			"",,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ПочтаНепрочтенныеПисьмаУчетнойЗаписи2",
			"",,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ПочтаНепрочтенныеПисьмаУчетнойЗаписи3",
			"",,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ПочтаНепрочтенныеПисьмаУчетнойЗаписи4",
			"",,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ПочтаНепрочтенныеПисьмаУчетнойЗаписи5",
			"",,
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "Задачи" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ЗадачиНеПринятые", 
			НСтр("ru = 'Не принятые'"));

		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ЗадачиПросроченные",
			НСтр("ru = 'Просроченные'"),
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЗадачиПодчиненных" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ЗадачиПодчиненныхНеПринятые",
			НСтр("ru = 'Не принятые'"));
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ЗадачиПодчиненныхПросроченные",
			НСтр("ru = 'Просроченные'"),
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "Мероприятия" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияБлижайшее",
			"",
			, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияСегодня",
			НСтр("ru = 'Сегодня'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияЗавтра",
			НСтр("ru = 'Завтра'"),
			,, Истина);

		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияНаНеделе",
			НСтр("ru = 'На этой неделе'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияНаСледующейНеделе",
			НСтр("ru = 'На следующей неделе'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"МероприятияОтсутствуют",
			"");
			
	ИначеЕсли СтрокаГруппы.Показатель = "Календарь" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьБлижайшее",
			"",
			, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьСегодня",
			НСтр("ru = 'Сегодня'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьЗавтра",
			НСтр("ru = 'Завтра'"),
			,, Истина);

		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьНаНеделе",
			НСтр("ru = 'На этой неделе'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьНаСледующейНеделе",
			НСтр("ru = 'На следующей неделе'"),
			,, Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КалендарьОтсутствуют",
			"");
		
	ИначеЕсли СтрокаГруппы.Показатель = "Форум" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ФорумНовыеОтветыНаСообщенияПользователя",
			НСтр("ru = 'Новые ответы'"),,
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ВнутренниеДокументы" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ВнутренниеДокументыСИстекающийСрокомДействия",
			НСтр("ru = 'Срок действия истекает'"));
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ВнутренниеДокументыСИстекшимСрокомДействия",
			НСтр("ru = 'Истекший срок действия'"));
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ВнутренниеДокументыСИстекающимСрокомИсполнения",
			НСтр("ru = 'Срок исполнения истекает'"));
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ВнутренниеДокументыПросроченные",
			НСтр("ru = 'Истекший срок исполнения'"),
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ВходящиеДокументы" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ВходящиеДокументыЗагруженныеНаПроверку",
			НСтр("ru = 'На проверке'"),,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ВходящиеДокументыПросроченные",
			НСтр("ru = 'Просроченные'"),
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ИсходящиеДокументы" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"ИсходящиеДокументыБезОтвета",
			НСтр("ru = 'Без ответа'"));
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ИсходящиеДокументыГотовыеКОтправкеПоСВД",
			НСтр("ru = 'Для отправки по СВД'"),
			Ложь,
			Истина);
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки, 
			"ИсходящиеДокументыВСВДСОшибкой",
			НСтр("ru = 'В СВД с ошибкой'"),
			Истина,
			Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "УчетВремени" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"УчетВремениУчтеноСегодня",
			НСтр("ru = 'Сегодня'"),,
			Истина);
			
	ИначеЕсли СтрокаГруппы.Показатель = "Контроль" Тогда
		
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КонтрольПросрочено",
			НСтр("ru = 'Просроченные'"),
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КонтрольБлижайший",
			"",,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КонтрольПросроченный",
			"",
			Истина,
			Истина);
			
		ДобавитьСтрокуПоказателя(
			СтрокаГруппы.Строки,
			"КонтрольОтсутствует",
			"");
			
	КонецЕсли;
	
КонецПроцедуры

// Добавляет к указанной коллекции строк дерева строку с параметрами показателя
//
// Параметры
//  КоллекцияСтрок	- КоллекцияСтрокДереваЗначений - коллекция строк дерева, в которую добавляется строка
//  Показатель 		- Строка - имя добавляемого показателя
//  Заголовок 		- Строка - заголовок показателя
//  ВыделятьЦветом 	- Булево - признак выделения цветом, Истина - выделять, ложь - нет
//  ЯвляетсяСсылкой - Булево - признак является показатель ссылкой
//
Процедура ДобавитьСтрокуПоказателя(КоллекцияСтрок, Показатель, Заголовок, ВыделятьЦветом = Ложь, ЯвляетсяСсылкой = Ложь, Составной = Ложь)
		
	ДоступностьПоказателя = ПолучитьДоступностьПоказателя(Показатель, КоллекцияСтрок.Родитель.Показатель);
	
	Если НЕ ДоступностьПоказателя Тогда
		Возврат;
	КонецЕсли;

	СтрокаДерева = КоллекцияСтрок.Добавить();
	СтрокаДерева.Показатель = Показатель;
	СтрокаДерева.Заголовок = Заголовок;
	СтрокаДерева.Отображать = Истина;
	СтрокаДерева.ВыделятьЦветом = ВыделятьЦветом;
	СтрокаДерева.ЯвляетсяСсылкой = ЯвляетсяСсылкой;
	СтрокаДерева.Составной = Составной;
	
КонецПроцедуры

// Добавляет к указанной коллекции строк дерева строку с описанием группы показателей
//
// Параметры:
//  КоллекцияСтрок	- КоллекцияСтрокДереваЗначений - коллекция строк дерева, в которую добавляется строка
//  ИмяГруппы		- Строка - имя добавляемой группы показателей
//  Заголовок		- Строка - заголовок группы
//  Картинка		- Строка - имя картинки группы из библиотеки картинок
//  Вид				- Число - вид группы показателей, 0 - обычная группа, 1 - группа содержит таблицу значений
//  ЯвляетсяСсылкой - Булево - признак является группа ссылкой
//
Процедура ДобавитьСтрокуГруппы(КоллекцияСтрок, ИмяГруппы, Заголовок, Картинка = "", Вид = 0, ЯвляетсяСсылкой = Истина)
		
	Если НЕ ГруппаДоступна(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = КоллекцияСтрок.Добавить();
	СтрокаДерева.Показатель = ИмяГруппы;
	СтрокаДерева.Заголовок = Заголовок;
	СтрокаДерева.Отображать = Истина;
	СтрокаДерева.Картинка = Картинка;
	СтрокаДерева.ЯвляетсяСсылкой = ЯвляетсяСсылкой;	
	СтрокаДерева.Вид = Вид;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доступность показателей

// Анализирует, доступна ли указанная группа показателей пользователю,
// исходя из функциональных опций, или еще каких-либо условий
//
// Параметры:
//  ИмяГруппы	- Строка - имя группы, доступность которой анализируется
//
// Возвращаемое значение:
//  Булево		- доступность группы
//
Функция ГруппаДоступна(ИмяГруппы) Экспорт
		
	Результат = Истина;
	
	Если ИмяГруппы = "Почта" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту");
		НастройкаВключена = РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеВстроеннойПочты();
		Результат = ФункционалВключен И НастройкаВключена;
	ИначеЕсли ИмяГруппы = "Задачи" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
		Результат = ФункционалВключен;
	ИначеЕсли ИмяГруппы = "ЗадачиПодчиненных" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ИсполнителиЗадач = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Руководитель В (&ИсполнителиЗадач)";
		Запрос.УстановитьПараметр("ИсполнителиЗадач", ИсполнителиЗадач);
		ТекущийПользовательИмеетПраваНаДоступКЗадачамПодчиненным = НЕ Запрос.Выполнить().Пустой();
		
		РольДоступнаПользователю = ДокументооборотПраваДоступа.ЕстьРоль(
			"РаботаСЗадачамиСотрудниковПодразделения");
		
		Результат = ФункционалВключен
			И (ТекущийПользовательИмеетПраваНаДоступКЗадачамПодчиненным Или РольДоступнаПользователю);
	ИначеЕсли ИмяГруппы = "Мероприятия" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями");
		ЕстьПравоДоступа = ПравоДоступа("Просмотр", Метаданные.Справочники.Мероприятия);
		Результат = ФункционалВключен И ЕстьПравоДоступа;
	ИначеЕсли ИмяГруппы = "Календарь" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
		Результат = ФункционалВключен;
	ИначеЕсли ИмяГруппы = "Форум" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения");
		Результат = ФункционалВключен;
	ИначеЕсли ИмяГруппы = "Контроль" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
		Результат = ФункционалВключен;	
	ИначеЕсли ИмяГруппы = "ВнутренниеДокументы" Тогда
		ЕстьПравоДоступа = ПравоДоступа("Просмотр", Метаданные.Справочники.ВнутренниеДокументы);
		Результат = ЕстьПравоДоступа;
	ИначеЕсли ИмяГруппы = "ВходящиеДокументы" Тогда
		РольДоступнаПользователю = ДокументооборотПраваДоступа.ЕстьРоль(
			"ДобавлениеИзменениеВходящихДокументов");
		Результат = РольДоступнаПользователю;
	ИначеЕсли ИмяГруппы = "ИсходящиеДокументы" Тогда
		ЕстьПравоДоступа = ПравоДоступа("Просмотр", Метаданные.Справочники.ИсходящиеДокументы);
		Результат = ЕстьПравоДоступа;
	ИначеЕсли ИмяГруппы = "УчетВремени" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты");
		Результат = ФункционалВключен;
	ИначеЕсли ИмяГруппы = "РедактируемыеФайлы" Тогда
		ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьХранилищеФайлов");
		Результат = ФункционалВключен;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Анализирует, доступен ли указанный показатель пользователю,
// исходя из роли пользователя, или еще каких-либо условий
//
// Параметры:
//  ИмяПоказателя	- Строка - имя показателя, доступность которого анализируется
//  ИмяГруппы		- Строка - имя группы, в которую входит показатель
//
// Возвращаемое значение:
//  Булево			- доступность показателя
//
Функция ПолучитьДоступностьПоказателя(ИмяПоказателя, ИмяГруппы)
	
	Результат = Истина;
	
	Если ИмяГруппы = "ИсходящиеДокументы" Тогда
		Если ИмяПоказателя = "ИсходящиеДокументыВСВДСОшибкой"
			ИЛИ ИмяПоказателя = "ИсходящиеДокументыГотовыеКОтправкеПоСВД" Тогда
			
			ФункционалВключен = ПолучитьФункциональнуюОпцию("ИспользоватьСВД");
			
			РольДоступнаПользователю = ДокументооборотПраваДоступа.ЕстьРоль("РаботаСЭДО");
			
			Результат = ФункционалВключен И РольДоступнаПользователю;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет показателей

// Получает текст запроса для расчета показателей указанной группы показателей
//
// Параметры:
//  ИмяГруппы	- Строка - имя группы показателей, для которой требуется получить текст запроса
//
// Возвращаемое значение:
//  Строка		- текст запроса
//
Функция ПолучитьТекстаЗапросаДляРасчетаПоказателейГруппы(ИмяГруппы) Экспорт	
	
	Если ИмяГруппы = "Почта" Тогда
		
		Возврат ПолучитьТекстЗапросаДляПочты();
		
	ИначеЕсли ИмяГруппы = "Задачи" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗадач();
		
	ИначеЕсли ИмяГруппы = "ЗадачиПодчиненных" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗадачПодчиненных();
		
	ИначеЕсли ИмяГруппы = "Мероприятия" Тогда
		
		Возврат ПолучитьТекстЗапросаДляМероприятий();
		
	ИначеЕсли ИмяГруппы = "Календарь" Тогда
		
		Возврат ПолучитьТекстЗапросаДляКалендаря();
		
	ИначеЕсли ИмяГруппы = "Форум" Тогда
		
		Возврат ПолучитьТекстЗапросаДляФорума();
		
	ИначеЕсли ИмяГруппы = "ВнутренниеДокументы" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВнутреннихДокументов();
		
	ИначеЕсли ИмяГруппы = "ВходящиеДокументы" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВходящихДокументов();
		
	ИначеЕсли ИмяГруппы = "ИсходящиеДокументы" Тогда
		
		Возврат ПолучитьТекстЗапросаДляИсходящихДокументов();
		
	ИначеЕсли ИмяГруппы = "УчетВремени" Тогда
		
		Возврат ПолучитьТекстЗапросаДляУчетаВремени();
		
	ИначеЕсли ИмяГруппы = "РедактируемыеФайлы" Тогда
		
		Возврат ПолучитьТекстЗапросаДляРедактируемыхФайлов();
		
	ИначеЕсли ИмяГруппы = "Контроль" Тогда
		
		Возврат ПолучитьТекстЗапросаДляКонтроля();
	
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПочты()
		
	ТекстЗапроса =   	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеПисьма.УчетнаяЗапись КАК УчетнаяЗапись,
		|	КОЛИЧЕСТВО(*) КАК КоличествоНепрочтенныхПисем
		|ИЗ
		|	РегистрСведений.ПапкиПисемТекущихДел КАК ПапкиПисемТекущихДел
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящиеПисьма
		|		ПО ПапкиПисемТекущихДел.Папка = ВходящиеПисьма.Папка
		|			И (ПапкиПисемТекущихДел.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|		ПО (ВходящиеПисьма.Ссылка = СведенияОПрочтении.Объект)
		|			И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|ГДЕ
		|	ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|	И НЕ ВходящиеПисьма.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ВходящиеПисьма.УчетнаяЗапись
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВходящиеПисьма.УчетнаяЗапись.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗадач()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК Задачи,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиНеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И (ЗадачаИсполнителя.Исполнитель В (&Исполнители)
		|			ИЛИ 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|					ГДЕ
		|						ИсполнителиЗадач.РольИсполнителя = ЗадачаИсполнителя.РольИсполнителя
		|						И ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|						И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|						И ИсполнителиЗадач.Исполнитель = &ТекущийПользователь)
		|				И ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗадачПодчиненных()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиПодчиненных,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиПодчиненныхНеПринятые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиПодчиненныхПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И НЕ ЗадачаЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаЗадачаИсполнителя.Исполнитель <> &ТекущийПользователь
		|	И (1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|				ГДЕ
		|					ПодчиненностьСотрудников.Подчиненный = ЗадачаЗадачаИсполнителя.Исполнитель
		|					И ПодчиненностьСотрудников.Руководитель В (&Пользователи))
		|			ИЛИ 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|				ГДЕ
		|					ИсполнителиЗадач.РольИсполнителя = ЗадачаЗадачаИсполнителя.РольИсполнителя
		|					И ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачаЗадачаИсполнителя.ОсновнойОбъектАдресации
		|					И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачаЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|					И ИсполнителиЗадач.Исполнитель <> &ТекущийПользователь
		|					И 1 В
		|						(ВЫБРАТЬ
		|							1
		|						ИЗ
		|							РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|						ГДЕ
		|							ПодчиненностьСотрудников.Подчиненный = ИсполнителиЗадач.Исполнитель
		|							И ПодчиненностьСотрудников.Руководитель В (&Пользователи))))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляМероприятий()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоличественныеПоказатели.МероприятияСегодня,
		|	КоличественныеПоказатели.МероприятияЗавтра,
		|	КоличественныеПоказатели.МероприятияНаНеделе,
		|	КоличественныеПоказатели.МероприятияНаСледующейНеделе,
		|	КоличественныеПоказатели.Мероприятия,
		|	СсылкаНаБлижайшее.МероприятияБлижайшее
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СправочникМероприятия.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|							И СправочникМероприятия.ДатаОкончания >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК МероприятияСегодня,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СправочникМероприятия.ДатаНачала <= &КонецЗавтра
		|							И СправочникМероприятия.ДатаОкончания >= &НачалоЗавтра
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК МероприятияЗавтра,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СправочникМероприятия.ДатаНачала <= &КонецНедели
		|							И СправочникМероприятия.ДатаОкончания >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК МероприятияНаНеделе,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА СправочникМероприятия.ДатаНачала <= &КонецСледующейНедели
		|							И СправочникМероприятия.ДатаОкончания >= &НачалоСледующейНедели
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК МероприятияНаСледующейНеделе,
		|		КОЛИЧЕСТВО(*) КАК Мероприятия
		|	ИЗ
		|		Справочник.Мероприятия КАК СправочникМероприятия
		|	ГДЕ
		|		НЕ СправочникМероприятия.ПометкаУдаления
		|		И 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|				ГДЕ
		|					СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|					И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|		И (&ТекущийПользователь В
		|					(ВЫБРАТЬ
		|						УчастникиМероприятия.Исполнитель
		|					ИЗ
		|						РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|					ГДЕ
		|						УчастникиМероприятия.Мероприятие = СправочникМероприятия.Ссылка)
		|				ИЛИ &ТекущийПользователь = СправочникМероприятия.Организатор
		|				ИЛИ &ТекущийПользователь = СправочникМероприятия.Председатель
		|				ИЛИ &ТекущийПользователь = СправочникМероприятия.Секретарь)) КАК КоличественныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			СправочникМероприятия.Ссылка КАК МероприятияБлижайшее
		|		ИЗ
		|			Справочник.Мероприятия КАК СправочникМероприятия
		|		ГДЕ
		|			СправочникМероприятия.ДатаНачала > &ТекущаяДата
		|			И НЕ СправочникМероприятия.ПометкаУдаления
		|			И 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
		|					ГДЕ
		|						СостоянияМероприятий.Мероприятие = СправочникМероприятия.Ссылка
		|						И СостоянияМероприятий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияМероприятий.МероприятиеВСтадииПодготовки))
		|			И (&ТекущийПользователь В
		|						(ВЫБРАТЬ
		|							УчастникиМероприятия.Исполнитель
		|						ИЗ
		|							РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|						ГДЕ
		|							УчастникиМероприятия.Мероприятие = СправочникМероприятия.Ссылка)
		|					ИЛИ &ТекущийПользователь = СправочникМероприятия.Организатор
		|					ИЛИ &ТекущийПользователь = СправочникМероприятия.Председатель
		|					ИЛИ &ТекущийПользователь = СправочникМероприятия.Секретарь)
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			СправочникМероприятия.ДатаНачала) КАК СсылкаНаБлижайшее
		|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляКалендаря()

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоличественныеПоказатели.КалендарьСегодня,
		|	КоличественныеПоказатели.КалендарьЗавтра,
		|	КоличественныеПоказатели.КалендарьНаНеделе,
		|	КоличественныеПоказатели.КалендарьНаСледующейНеделе,
		|	КоличественныеПоказатели.Календарь,
		|	СсылкаНаБлижайшее.КалендарьБлижайшее
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА ЗаписиРабочегоКалендаря.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК КалендарьСегодня,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА ЗаписиРабочегоКалендаря.ДатаНачала <= &КонецЗавтра
		|							И ЗаписиРабочегоКалендаря.ДатаОкончания >= &НачалоЗавтра
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК КалендарьЗавтра,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА ЗаписиРабочегоКалендаря.ДатаНачала <= &КонецНедели
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК КалендарьНаНеделе,
		|		ЕСТЬNULL(СУММА(ВЫБОР
		|					КОГДА ЗаписиРабочегоКалендаря.ДатаНачала <= &КонецСледующейНедели
		|							И ЗаписиРабочегоКалендаря.ДатаОкончания >= &НачалоСледующейНедели
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ), 0) КАК КалендарьНаСледующейНеделе,
		|		КОЛИЧЕСТВО(*) КАК Календарь
		|	ИЗ
		|		Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|	ГДЕ
		|		ЗаписиРабочегоКалендаря.Пользователь = &ТекущийПользователь
		|		И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
		|		И ЗаписиРабочегоКалендаря.ДатаОкончания >= &ТекущаяДата) КАК КоличественныеПоказатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			ЗаписиРабочегоКалендаря.Ссылка КАК КалендарьБлижайшее
		|		ИЗ
		|			Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ГДЕ
		|			ЗаписиРабочегоКалендаря.ДатаНачала > &ТекущаяДата
		|			И ЗаписиРабочегоКалендаря.Пользователь = &ТекущийПользователь
		|			И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления
		|		
		|		УПОРЯДОЧИТЬ ПО
		|			ЗаписиРабочегоКалендаря.ДатаНачала) КАК СсылкаНаБлижайшее
		|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДляФорума()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НовыеОтветы.ФорумНовыеОтветыНаСообщенияПользователя,
		|	ВсеСообщения.Форум
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(*) КАК ФорумНовыеОтветыНаСообщенияПользователя
		|	ИЗ
		|		Справочник.СообщенияОбсуждений КАК СправочникСообщенияОбсуждений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщенияОбсуждений КАК СообщенияРодители
		|			ПО СправочникСообщенияОбсуждений.Родитель = СообщенияРодители.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТемыОбсуждений КАК ТемыСообщений
		|			ПО СправочникСообщенияОбсуждений.ВладелецСообщения = ТемыСообщений.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|			ПО СправочникСообщенияОбсуждений.Ссылка = СведенияОПрочтении.Объект
		|				И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|	ГДЕ
		|		СправочникСообщенияОбсуждений.ПометкаУдаления = ЛОЖЬ
		|		И СправочникСообщенияОбсуждений.Автор <> &ТекущийПользователь
		|		И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
		|		И (ТемыСообщений.Автор = &ТекущийПользователь
		|				ИЛИ СообщенияРодители.Автор = &ТекущийПользователь)) КАК НовыеОтветы,
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(*) КАК Форум
		|	ИЗ
		|		Справочник.ТемыОбсуждений КАК ТемыСообщений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
		|			ПО ТемыСообщений.Ссылка = СведенияОПрочтении.Объект
		|				И (СведенияОПрочтении.Пользователь = &ТекущийПользователь)
		|	ГДЕ
		|		ТемыСообщений.ЭтоГруппа = ЛОЖЬ
		|		И ТемыСообщений.ПометкаУдаления = ЛОЖЬ
		|		И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ) КАК ВсеСообщения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВнутреннихДокументов()
	
	ТекстЗапроса =   	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекающимСрокомДействия), 0) КАК ВнутренниеДокументыСИстекающийСрокомДействия,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекщимСрокомДействия), 0) КАК ВнутренниеДокументыСИстекшимСрокомДействия,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекающимСрокомИсполнения), 0) КАК ВнутренниеДокументыСИстекающимСрокомИсполнения,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекщимСрокомИсполнения), 0) КАК ВнутренниеДокументыПросроченные
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ВнутренниеДокументы.ДатаОкончанияДействия >= &ТекущаяДата
		|					И ВнутренниеДокументы.ДатаОкончанияДействия <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК КоличествоСИстекающимСрокомДействия,
		|		ВЫБОР
		|			КОГДА ВнутренниеДокументы.ДатаОкончанияДействия < &ТекущаяДата
		|					И ВнутренниеДокументы.ПорядокПродления = ЗНАЧЕНИЕ(Перечисление.ПорядокПродления.ДопускаетПродление)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК КоличествоСИстекщимСрокомДействия,
		|		0 КАК КоличествоСИстекающимСрокомИсполнения,
		|		0 КАК КоличествоСИстекщимСрокомИсполнения
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|		И НЕ ВнутренниеДокументы.ПометкаУдаления
		|		И НЕ ВнутренниеДокументы.НеДействует
		|		И (ВнутренниеДокументы.Ответственный = &ТекущийПользователь
		|				ИЛИ ВнутренниеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|					И ВнутренниеДокументы.Подготовил = &ТекущийПользователь)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		ВЫБОР
		|			КОГДА ВнутренниеДокументы.СрокИсполнения >= &ТекущаяДата
		|					И ВнутренниеДокументы.СрокИсполнения <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 2), ДЕНЬ)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ВнутренниеДокументы.СрокИсполнения < &ТекущаяДата
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|	ГДЕ
		|		ВнутренниеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|		И НЕ ВнутренниеДокументы.ПометкаУдаления
		|		И НЕ ВнутренниеДокументы.НеДействует
		|		И (ВнутренниеДокументы.Ответственный = &ТекущийПользователь
		|				ИЛИ ВнутренниеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|					И ВнутренниеДокументы.Подготовил = &ТекущийПользователь)
		|		И НЕ 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|					ГДЕ
		|						ТекущиеСостоянияДокументов.Документ = ВнутренниеДокументы.Ссылка
		|						И ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))) КАК ВложенныйЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВходящихДокументов()
	
	ТекстЗапроса =   	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекщимСрокомИсполнения), 0) КАК ВходящиеДокументыПросроченные,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоНепроверенных), 0) КАК ВходящиеДокументыЗагруженныеНаПроверку
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(*) КАК КоличествоСИстекщимСрокомИсполнения,
		|		0 КАК КоличествоНепроверенных
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|	ГДЕ
		|		ВходящиеДокументы.Ответственный = &ТекущийПользователь
		|		И ВходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|		И ВходящиеДокументы.СрокИсполнения < &ТекущаяДата
		|		И НЕ ВходящиеДокументы.ПометкаУдаления
		|		И НЕ 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|					ГДЕ
		|						ТекущиеСостоянияДокументов.Документ = ВходящиеДокументы.Ссылка
		|						И ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КОЛИЧЕСТВО(*)
		|	ИЗ
		|		Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаЗагруженныхДанных КАК ПроверкаЗагруженныхДанных
		|			ПО ВходящиеДокументы.Ссылка = ПроверкаЗагруженныхДанных.Объект
		|	ГДЕ
		|		ВходящиеДокументы.Ответственный = &ТекущийПользователь
		|		И НЕ ВходящиеДокументы.ПометкаУдаления
		|		И ПроверкаЗагруженныхДанных.Проверен = ЛОЖЬ) КАК ВложенныйЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляИсходящихДокументов()
	
	Если РольДоступна("РаботаСЭДО") Или РольДоступна("ПолныеПрава") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекщимСрокомИсполнения), 0) КАК ИсходящиеДокументыБезОтвета,
			|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСОшибкойВСВДБ), 0) КАК ИсходящиеДокументыВСВДСОшибкой,
			|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоГотовыхКОтправкеПоСВД), 0) КАК ИсходящиеДокументыГотовыеКОтправкеПоСВД
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(*) КАК КоличествоСИстекщимСрокомИсполнения,
			|		0 КАК КоличествоСОшибкойВСВДБ,
			|		0 КАК КоличествоГотовыхКОтправкеПоСВД
			|	ИЗ
			|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|	ГДЕ
			|		(ИсходящиеДокументы.Ответственный = &ТекущийПользователь
			|				ИЛИ ИсходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|					И ИсходящиеДокументы.Подготовил = &ТекущийПользователь)
			|		И НЕ ИсходящиеДокументы.ПометкаУдаления
			|		И ИсходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|		И ИсходящиеДокументы.СрокИсполнения < &ТекущаяДата
			|		И НЕ 1 В
			|					(ВЫБРАТЬ
			|						1
			|					ИЗ
			|						РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|					ГДЕ
			|						СвязиДокументов.Документ = ИсходящиеДокументы.Ссылка
			|						И СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
			|						И СвязиДокументов.СвязанныйДокумент ССЫЛКА Справочник.ВходящиеДокументы)
			|		И 1 В
			|				(ВЫБРАТЬ
			|					1
			|				ИЗ
			|					Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|				ГДЕ
			|					ИсходящиеДокументыПолучатели.Ссылка = ИсходящиеДокументы.Ссылка
			|					И ИсходящиеДокументыПолучатели.Отправлен)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		0,
			|		КОЛИЧЕСТВО(*),
			|		0
			|	ИЗ
			|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
			|			ПО ИсходящиеДокументы.Ссылка = КешИнформацииОбОбъектах.Объект
			|	ГДЕ
			|		(ИсходящиеДокументы.Ответственный = &ТекущийПользователь
			|				ИЛИ ИсходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|					И ИсходящиеДокументы.Подготовил = &ТекущийПользователь)
			|		И НЕ ИсходящиеДокументы.ПометкаУдаления
			|		И КешИнформацииОбОбъектах.СостояниеСВД = ЗНАЧЕНИЕ(Справочник.ВидыСостоянийДокументовВСВД.Ошибка)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		0,
			|		0,
			|		КОЛИЧЕСТВО(*)
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИсходящиеДокументы.Ссылка КАК Ссылка
			|		ИЗ
			|			Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|				ПО (ИсходящиеДокументы.Ссылка = ИсходящиеДокументыПолучатели.Ссылка)
			|		ГДЕ
			|			ИсходящиеДокументы.ГотовКОтправке = ИСТИНА
			|			И ИсходящиеДокументы.ПометкаУдаления = ЛОЖЬ
			|			И ИсходящиеДокументыПолучатели.СпособОтправки = ЗНАЧЕНИЕ(Справочник.СпособыДоставки.СВД)
			|			И ИсходящиеДокументыПолучатели.Отправлен = ЛОЖЬ) КАК ГотовыеКОтправке) КАК ВложенныйЗапрос";
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КоличествоСИстекщимСрокомИсполнения), 0) КАК ИсходящиеДокументыБезОтвета
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(*) КАК КоличествоСИстекщимСрокомИсполнения
			|	ИЗ
			|		Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
			|	ГДЕ
			|		(ИсходящиеДокументы.Ответственный = &ТекущийПользователь
			|				ИЛИ ИсходящиеДокументы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|					И ИсходящиеДокументы.Подготовил = &ТекущийПользователь)
			|		И НЕ ИсходящиеДокументы.ПометкаУдаления
			|		И ИсходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
			|		И ИсходящиеДокументы.СрокИсполнения < &ТекущаяДата
			|		И НЕ 1 В
			|					(ВЫБРАТЬ
			|						1
			|					ИЗ
			|						РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|					ГДЕ
			|						СвязиДокументов.Документ = ИсходящиеДокументы.Ссылка
			|						И СвязиДокументов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет)
			|						И СвязиДокументов.СвязанныйДокумент ССЫЛКА Справочник.ВходящиеДокументы)
			|		И 1 В
			|				(ВЫБРАТЬ
			|					1
			|				ИЗ
			|					Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
			|				ГДЕ
			|					ИсходящиеДокументыПолучатели.Ссылка = ИсходящиеДокументы.Ссылка
			|					И ИсходящиеДокументыПолучатели.Отправлен)) КАК ВложенныйЗапрос";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляУчетаВремени()
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка КАК УчетВремениУчтеноСегодня
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &ТекущийПользователь
		|	И НЕ ЕжедневныйОтчет.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРедактируемыхФайлов()
	
	ТекстЗапроса =   	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК РедактируемыеФайлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Редактирует = &ТекущийПользователь";
				
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьТекстЗапросаДляКонтроля()
	
	ТекстЗапроса =   
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.Количество), 0) КАК Контроль,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.КонтрольПросрочено), 0) КАК КонтрольПросрочено,
	|	БлижайшийКонтроль.Ссылка КАК КонтрольБлижайший
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*) КАК КонтрольПросрочено,
	|		0 КАК Количество
	|	ИЗ
	|		Справочник.Контроль КАК Контроль
	|	ГДЕ
	|		Контроль.ПоставленНаКонтроль
	|		И НЕ Контроль.СнятСКонтроля
	|		И НЕ Контроль.ПометкаУдаления
	|		И Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|		И НАЧАЛОПЕРИОДА(Контроль.СрокИсполнения, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|		И (Контроль.Контролер = &ТекущийПользователь
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ИсполнителиЗадач.Исполнитель
	|					ИЗ
	|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|					ГДЕ
	|						ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер
	|						И ИсполнителиЗадач.ОсновнойОбъектАдресации = Контроль.ОсновнойОбъектАдресацииКонтролера
	|						И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Контроль.ДополнительныйОбъектАдресацииКонтролера)
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ДелегированиеПрав.Кому
	|					ИЗ
	|						Справочник.ДелегированиеПрав КАК ДелегированиеПрав
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
	|							ПО
	|								ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
	|					ГДЕ
	|						ДелегированиеПрав.ОтКого = Контроль.Контролер
	|						И ДелегированиеПрав.Действует
	|						И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
	|							ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		КОЛИЧЕСТВО(*)
	|	ИЗ
	|		Справочник.Контроль КАК Контроль
	|	ГДЕ
	|		Контроль.ПоставленНаКонтроль
	|		И НЕ Контроль.СнятСКонтроля
	|		И НЕ Контроль.ПометкаУдаления
	|		И (Контроль.Контролер = &ТекущийПользователь
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ИсполнителиЗадач.Исполнитель
	|					ИЗ
	|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|					ГДЕ
	|						ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер
	|						И ИсполнителиЗадач.ОсновнойОбъектАдресации = Контроль.ОсновнойОбъектАдресацииКонтролера
	|						И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Контроль.ДополнительныйОбъектАдресацииКонтролера)
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ДелегированиеПрав.Кому
	|					ИЗ
	|						Справочник.ДелегированиеПрав КАК ДелегированиеПрав
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
	|							ПО
	|								ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
	|					ГДЕ
	|						ДелегированиеПрав.ОтКого = Контроль.Контролер
	|						И ДелегированиеПрав.Действует
	|						И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
	|							ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))))) КАК ВложенныйЗапрос,
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Контроль.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА Контроль.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК Приоритет
	|	ИЗ
	|		Справочник.Контроль КАК Контроль
	|	ГДЕ
	|		НЕ Контроль.ПометкаУдаления
	|		И НЕ Контроль.СнятСКонтроля
	|		И Контроль.ПоставленНаКонтроль
	|		И (Контроль.Контролер = &ТекущийПользователь
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ИсполнителиЗадач.Исполнитель
	|					ИЗ
	|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|					ГДЕ
	|						ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер
	|						И ИсполнителиЗадач.ОсновнойОбъектАдресации = Контроль.ОсновнойОбъектАдресацииКонтролера
	|						И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Контроль.ДополнительныйОбъектАдресацииКонтролера)
	|				ИЛИ &ТекущийПользователь В
	|					(ВЫБРАТЬ
	|						ДелегированиеПрав.Кому
	|					ИЗ
	|						Справочник.ДелегированиеПрав КАК ДелегированиеПрав
	|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
	|							ПО
	|								ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
	|					ГДЕ
	|						ДелегированиеПрав.ОтКого = Контроль.Контролер
	|						И ДелегированиеПрав.Действует
	|						И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
	|							ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))))
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Приоритет,
	|		Контроль.СрокИсполнения) КАК БлижайшийКонтроль
	|
	|СГРУППИРОВАТЬ ПО
	|	БлижайшийКонтроль.Ссылка";
			
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает параметры запроса для указанных групп показателей
//
// Параметры
//  Запрос 		- Строка - запрос для получения показателей
//  МассивГрупп - Массив - группы получаемых показателей
//
Процедура УстановитьПараметрыЗапроса(Запрос, МассивГрупп) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекущаяДата  = ТекущаяДатаСеанса();
	ИсполнителиЗадач = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(Пользователь);
	
	// Общие параметры для всех групп показателей
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("Исполнители", ИсполнителиЗадач);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Пользователи", ИсполнителиЗадач);
	
	Если МассивГрупп <> Неопределено Тогда
		Для каждого Группа Из МассивГрупп Цикл
			Если Группа = "Календарь" Или Группа = "Мероприятия" Тогда
				Если Не Запрос.Параметры.Свойство("КонецНедели") Тогда
					Запрос.УстановитьПараметр("КонецНедели", КонецНедели(ТекущаяДата));
					Запрос.УстановитьПараметр("НачалоСледующейНедели", НачалоНедели(КонецНедели(ТекущаяДата) + 1));
					Запрос.УстановитьПараметр("КонецСледующейНедели", КонецНедели(КонецНедели(ТекущаяДата) + 1));
					Запрос.УстановитьПараметр("НачалоЗавтра", НачалоДня(КонецДня(ТекущаяДата) + 1));
					Запрос.УстановитьПараметр("КонецЗавтра", КонецДня(КонецДня(ТекущаяДата) + 1));
				КонецЕсли;
			ИначеЕсли Группа = "Контроль" Тогда 
				
				СправочникКонтроль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль");
				ЗапросПоОбластям = Новый Запрос;
				ЗапросПоОбластям.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОбластиДелегированияПравСостав.Ссылка
				|ИЗ
				|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
				|ГДЕ
				|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникКонтроль
				|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";
				ЗапросПоОбластям.УстановитьПараметр("СправочникКонтроль", СправочникКонтроль);
				ОбластиДелегирования = ЗапросПоОбластям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
				Запрос.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает значения показателей группы из результата запроса и заполняет заданную структуру
//
// Параметры
//  ИмяГруппы					- Строка - имя группы 
//  СтруктураПоказателейГруппы	- Структура - структура для заполнения значениями из запроса
//  РезультатЗапроса			- результат выполнения запроса 
//  Форма						- форма обработки
//
Процедура ЗаполнитьЗначенияПоказателейГруппыИзЗапроса(ИмяГруппы, СтруктураПоказателейГруппы, РезультатЗапроса, Форма) Экспорт
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ИмяГруппы = "Почта" Тогда
		
		УчетныеЗаписиПользователя = Форма.УчетныеЗаписи;
		УчетныеЗаписиПользователя.Очистить();
		
		ПочтаВсегоНепрочитанных = 0;
		КоличествоПоказанных = 0;
		
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоНепрочтенныхПисем = Выборка.КоличествоНепрочтенныхПисем;
			
			Если Индекс < 5 Тогда
				УчетныеЗаписиПользователя.Добавить(Выборка.УчетнаяЗапись);
			
				ЗначениеПоказателя = Строка(Выборка.УчетнаяЗапись) 
					+ ": " + Строка(Выборка.КоличествоНепрочтенныхПисем);
				
				ИмяПоказателяУчетнойЗаписи = "ПочтаНепрочтенныеПисьмаУчетнойЗаписи" + Строка(Индекс);
				СтруктураПоказателейГруппы[ИмяПоказателяУчетнойЗаписи] = ЗначениеПоказателя;
				КоличествоПоказанных = КоличествоПоказанных + КоличествоНепрочтенныхПисем;
			КонецЕсли;
			
			ПочтаВсегоНепрочитанных = ПочтаВсегоНепрочитанных + КоличествоНепрочтенныхПисем;
			
			Если Выборка.Количество() = Индекс И Индекс >= 5 Тогда
				УчетныеЗаписиПользователя.Добавить(Выборка.УчетнаяЗапись);
			
				ЗначениеПоказателя = НСтр("ru = 'другие'") 
					+ ": " + Строка(ПочтаВсегоНепрочитанных - КоличествоПоказанных);
				
				ИмяПоказателяУчетнойЗаписи = "ПочтаНепрочтенныеПисьмаУчетнойЗаписи5";
				СтруктураПоказателейГруппы[ИмяПоказателяУчетнойЗаписи] = ЗначениеПоказателя;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		СтруктураПоказателейГруппы.Почта = ПочтаВсегоНепрочитанных;
		
		Возврат;
	ИначеЕсли ИмяГруппы = "Мероприятия" Тогда
		
		Выборка.Следующий();
		
		Если Выборка.Мероприятия = 0 Тогда
			СтруктураПоказателейГруппы.МероприятияОтсутствуют = НСтр("ru = 'Нет'");
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоказателейГруппы, Выборка);
		Возврат;
		
	ИначеЕсли ИмяГруппы = "Календарь" Тогда
		
		Выборка.Следующий();
		
		Если Выборка.Календарь = 0 Тогда
			СтруктураПоказателейГруппы.КалендарьОтсутствуют = НСтр("ru = 'Нет'");
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоказателейГруппы, Выборка);
		Возврат;
		
	ИначеЕсли ИмяГруппы = "Контроль" Тогда
		
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПоказателейГруппы, Выборка);
		
		Если Выборка.Количество() = 0 Тогда
			СтруктураПоказателейГруппы.КонтрольОтсутствует = НСтр("ru = 'Нет'");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.КонтрольБлижайший) Тогда
			СрокИсполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.КонтрольБлижайший,
				"СрокИсполнения");
				
			Если ЗначениеЗаполнено(СрокИсполнения) И СрокИсполнения < ТекущаяДатаСеанса() Тогда 
				СтруктураПоказателейГруппы.КонтрольПросроченный = Выборка.КонтрольБлижайший;
				СтруктураПоказателейГруппы.КонтрольБлижайший = Неопределено;
			Иначе 
				СтруктураПоказателейГруппы.КонтрольБлижайший = Выборка.КонтрольБлижайший;
				СтруктураПоказателейГруппы.КонтрольПросроченный = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоказателейГруппы, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Получает представление показателя для вывода на форму
//
// Параметры
//  СтрокаПоказателя	- СтрокаДереваЗначений - строка показателя
//
// Возвращаемое значение:
//  Строка				- представление показателя
//
Функция ПолучитьПредставлениеЗначенияПоказателя(СтрокаПоказателя) Экспорт
	
	ПредставлениеПоказателя = "";
	
	Если СтрокаПоказателя.Показатель = "УчетВремениУчтеноСегодня" Тогда
		Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда

			СсылкаНаОбъект = СтрокаПоказателя.Значение;

			Если Не ЗначениеЗаполнено(СсылкаНаОбъект.НачалоДня)
				Или Не ЗначениеЗаполнено(СсылкаНаОбъект.ОкончаниеДня) Тогда

				ПродолжительностьДня = "";

			ИначеЕсли СсылкаНаОбъект.НачалоДня > СсылкаНаОбъект.ОкончаниеДня Тогда
				
				ПродолжительностьДня = "";
				
			Иначе
				
				ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(
					СсылкаНаОбъект.ОкончаниеДня - СсылкаНаОбъект.НачалоДня);
					
			КонецЕсли;

			ДлительностьРабот = ?(ЗначениеЗаполнено(СсылкаНаОбъект.ДлительностьРабот), 
				СсылкаНаОбъект.ДлительностьРабот, 
				"00:00");
				
			// Добавление лидирующего нуля в часы
			Если СтрДлина(ДлительностьРабот) = 4 Тогда
				ДлительностьРабот = "0" + ДлительностьРабот;
			КонецЕсли;
			
			ПредставлениеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 из %2'"),
				ДлительностьРабот, 
				ПродолжительностьДня);
				
		Иначе
			ПредставлениеПоказателя = НСтр("ru = 'Нет отчета за сегодня'");
			Возврат ПредставлениеПоказателя;
		КонецЕсли;
	ИначеЕсли СтрокаПоказателя.Показатель = "МероприятияБлижайшее" Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
			СсылкаНаОбъект = СтрокаПоказателя.Значение;
			
			РеквизитыОбъекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "ДатаНачала, Наименование");
			
			Если НачалоДня(СсылкаНаОбъект.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда 
				ПредставлениеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В %1 - %2'"),
					Формат(РеквизитыОбъекта.ДатаНачала, "ДФ='ЧЧ:мм'"),
					РеквизитыОбъекта.Наименование);
			Иначе
				ПредставлениеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"),
					Формат(РеквизитыОбъекта.ДатаНачала, "ДФ=dd.MM.yyyy"),
					РеквизитыОбъекта.Наименование);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаПоказателя.Показатель = "КонтрольБлижайший" 
		Или СтрокаПоказателя.Показатель = "КонтрольПросроченный" Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
			СсылкаНаОбъект = СтрокаПоказателя.Значение;
			
			РеквизитыОбъекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "СрокИсполнения, Описание");
			
			ПредставлениеПоказателя = Формат(РеквизитыОбъекта.СрокИсполнения, "ДЛФ=D") + " "
				+ СокрЛП(РеквизитыОбъекта.Описание);
		КонецЕсли;
		
	ИначеЕсли СтрокаПоказателя.Показатель = "КалендарьБлижайшее" Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
			СсылкаНаОбъект = СтрокаПоказателя.Значение;
			
			РеквизитыОбъекта = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаОбъект, "ДатаНачала, ОписаниеКраткое");
			
			Если НачалоДня(СсылкаНаОбъект.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда 
				ПредставлениеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В %1 - %2'"),
					Формат(РеквизитыОбъекта.ДатаНачала, "ДФ='ЧЧ:мм'"),
					РеквизитыОбъекта.ОписаниеКраткое);
			Иначе
				ПредставлениеПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"),
					Формат(РеквизитыОбъекта.ДатаНачала, "ДФ=dd.MM.yyyy"),
					РеквизитыОбъекта.ОписаниеКраткое);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПредставлениеПоказателя) Тогда
		ПредставлениеПоказателя = Строка(СтрокаПоказателя.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеПоказателя)
		Или Не ЗначениеЗаполнено(СтрокаПоказателя.Родитель) Тогда
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.Заголовок) Тогда
			
			ПредставлениеПоказателя = СтрокаПоказателя.Заголовок 
				+ ?(ПредставлениеПоказателя <> "", ": " + ПредставлениеПоказателя, "");
				
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПредставлениеПоказателя;
	
КонецФункции
