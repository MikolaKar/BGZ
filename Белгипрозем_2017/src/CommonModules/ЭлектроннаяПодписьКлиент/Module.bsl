////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭП
Функция СформироватьДанныеПодписи(
			МенеджерКриптографии,
			ОбъектДляПодписиСсылка,
			ДвоичныеДанные,
			СтруктураПараметровПодписи) Экспорт
			
	//МиСофт+                          
	Если КомпонентаКриптографии = Неопределено Тогда
		РаботаСЭПКлиент.УстановитьКомпонентуКриптографии();
		Попытка
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии", "V8CryptoAddInNative");
			КомпонентаКриптографии = Новый("AddIn.V8CryptoAddInNative.CryptoExtension");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = ТекущаяДата();
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	Если НЕ КомпонентаКриптографии.УстановитьПровайдера(СтруктураПараметровПодписи.НастройкиКриптографии.ПровайдерЭП, СтруктураПараметровПодписи.НастройкиКриптографии.ТипПровайдераЭП) Тогда
		Сообщить("Провайдер НЕ установлен! " + КомпонентаКриптографии.ОписаниеПоледнейОшибки, СтатусСообщения.ОченьВажное);
		КомпонентаКриптографии = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	КомпонентаКриптографии.АлгоритмПодписи						= МенеджерКриптографии.АлгоритмПодписи;
	КомпонентаКриптографии.АлгоритмХеширования					= МенеджерКриптографии.АлгоритмХеширования;
	КомпонентаКриптографии.АлгоритмШифрования					= МенеджерКриптографии.АлгоритмШифрования;
	КомпонентаКриптографии.ПарольДоступаКЗакрытомуКлючу 		= СтруктураПараметровПодписи.Пароль;
	
	Если НЕ КомпонентаКриптографии.УстановитьСертификатПоОтпечатку( Отпечаток ) Тогда
		Сообщить("Сертификат НЕ установлен! " + КомпонентаКриптографии.ОписаниеПоледнейОшибки, СтатусСообщения.ОченьВажное);
		КомпонентаКриптографии = Неопределено;
		Возврат Неопределено;
	КонецЕсли;

	Попытка
		//Для компоненты криптографии версии 1.2.6.1
		НоваяПодписьДвоичныеДанные = КомпонентаКриптографии.Подписать(Base64Строка(ДвоичныеДанные), Истина);
	Исключение
		//Для компоненты криптографии версии 1.0.0.1
		НоваяПодписьДвоичныеДанные = КомпонентаКриптографии.Подписать(Base64Строка(ДвоичныеДанные));
	КонецПопытки;
	
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
							
	Ошибка = "" + Лев(КомпонентаКриптографии.ОписаниеПоледнейОшибки, Найти(КомпонентаКриптографии.ОписаниеПоледнейОшибки, Символы.ПС)-1);
							
	Если НоваяПодписьДвоичныеДанные = Неопределено Тогда
		Сообщить("Подпись НЕ получена!" + Символы.ПС + ОбъектДляПодписиСсылка + Символы.ПС + Ошибка, СтатусСообщения.ОченьВажное);
		КомпонентаКриптографии = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	КомпонентаКриптографии = Неопределено;
	
	Возврат ДанныеПодписи;
	//МиСофт-
КонецФункции

// Проверяет действительность подписи и корректность сертификата.
//
// Параметры:
//   МенеджерКриптографии  - МенеджерКриптографии - Менеджер криптографии.
//   ДвоичныеДанныеФайла   - ДвоичныеДанные - Файл для проверки.
//   ДвоичныеДанныеПодписи - ДвоичныеДанные - Подпись.
//
// Возвращаемое значение:
//   Структура - Результаты проверки подписи
//     * ТекстОшибкиПроверкиПодписи - Строка
//     * ТекстОшибкиПроверкиСертификата - Строка
//
Функция ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи) Экспорт
	
	Сертификат = Неопределено;
	ОшибкиПроверки = Новый Структура;
		
	Попытка
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиПодписи", КраткоеПредставлениеОшибки(Инфо)); 
	КонецПопытки;
	
	Если Сертификат <> Неопределено Тогда
		Попытка
			МассивРежимовПроверки = Новый Массив;
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
			МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", КраткоеПредставлениеОшибки(Инфо));
		КонецПопытки;
	Иначе
		ОшибкиПроверки.Вставить("ТекстОшибкиПроверкиСертификата", "");
	КонецЕсли;
		
	Возврат ОшибкиПроверки;
	
КонецФункции

// Открывает персональные настройки ЭП.
//
// Параметры:
//   Модально - Булево - Открывать форму поверх всех остальных.
//
Процедура ОткрытьФормуНастройкиЭП() Экспорт
	
	ПараметрыФормы = Новый Структура("ПоказыватьНастройкиШифрования", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПерсональныеНастройкиЭП", ПараметрыФормы);
	
КонецПроцедуры

// Показывает диалог установки расширения работы с криптографией.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ТекстВопроса         - Строка - Текст вопроса.
//   ЗаголовокВопроса     - Строка - Заголовок вопроса.
//
// Значение первого параметра, возвращаемого в обработчик вызывающего кода:
//   РасширениеУстановлено
//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
//       * Неопределено - Пользователь отказался от установки.
//
Процедура УстановитьРасширение(ОбработчикРезультата, ТекстВопроса = "", ЗаголовокВопроса = "") Экспорт
	
	Если ПустаяСтрока(ЗаголовокВопроса) Тогда
		ЗаголовокВопроса = НСтр("ru = 'Расширение работы с криптографией'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо установить
		|расширение работы с криптографией.'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Да, ЗаголовокВопроса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текущую настройку использования электронных подписей.
Функция ИспользоватьЭлектронныеПодписи() Экспорт
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки().ИспользоватьЭлектронныеПодписи;
	
КонецФункции

// По окончании подписания нотифицирует о подписании
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭП
Процедура ИнформироватьОПодписанииОбъекта(ОбъектСсылка) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		ОбъектСсылка);
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	ВозниклиОшибки = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(ВозниклиОшибки);
	Если ВозниклиОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сертификат не найден'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции	

//  Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(Знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаУниверсальная(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции	

// Создает на клиенте менеджер криптографии.  Пароль не устанавливается
//
// Параметры:
//   Отказ - Булево - (по умолчанию Ложь).
//   НастройкиКриптографии - Неопределено либо Структура - если установлено значение неопределено,
//                           тогда будет создан первый подходящий менеджер криптографии, полученный
//                           из справочника ПрофилиНастроекКриптографии.
//     * ПровайдерЭП - Строка -
//     * ТипПровайдераЭП - Число -
//     * АлгоритмПодписи - Строка -
//     * АлгоритмХеширования - Строка -
//     * АлгоритмШифрования - Строка -
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
//
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь, НастройкиКриптографии = Неопределено) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Создание менеджера криптографии по переданным настройкам криптографии
	// (для операций, связанных с доступом к закрытому ключу).
	Если НастройкиКриптографии <> Неопределено Тогда
		
		//МиСофт+
		НастройкиКриптографии.ПутьМодуляКриптографии = ?(НастройкиКриптографии.ПутьМодуляКриптографии = Неопределено, "", НастройкиКриптографии.ПутьМодуляКриптографии);
		//МиСофт-
		
		МенеджерКриптографии = Новый МенеджерКриптографии(
			НастройкиКриптографии.ПровайдерЭП,
			НастройкиКриптографии.ПутьМодуляКриптографии,
			НастройкиКриптографии.ТипПровайдераЭП);
		ЗаполнитьЗначенияСвойств(МенеджерКриптографии, НастройкиКриптографии);
		
	// Создание менеджера криптографии засчет поиска первых подходящих настроек криптографии
	// (для операции работы с хранилищем сертификатов и проверки подписей).
	Иначе
		
		ОбщиеНастройки = ЭлектроннаяПодписьКлиентСервер.ОбщиеНастройки();
		ПрофилиНастроекКриптографии = ОбщиеНастройки.ПрофилиНастроекКриптографии;
		
		Если ПрофилиНастроекКриптографии.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'На найдено ни одного профиля настроек криптографии.
                                    |Обратитесь к администратору.'");
		КонецЕсли;
		
		ПодходящиеНастройкиКриптографииОпределены = Ложь;
				
		Для Каждого ПрофильНастроекКриптографии Из ПрофилиНастроекКриптографии Цикл
			
			Попытка 
				МенеджерКриптографии = Новый МенеджерКриптографии(
					ПрофильНастроекКриптографии.ПровайдерЭП,
					ПрофильНастроекКриптографии.ПутьМодуляКриптографии,
					ПрофильНастроекКриптографии.ТипПровайдераЭП);
				ЗаполнитьЗначенияСвойств(МенеджерКриптографии, ПрофильНастроекКриптографии);
				МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
				ПодходящиеНастройкиКриптографииОпределены = Истина;
				Прервать;
			Исключение
				// Пропускаем ошибки из-за отсутствия установленого провайдера на клиентской машине.
			КонецПопытки;
			
		КонецЦикла;
		
		Если Не ПодходящиеНастройкиКриптографииОпределены Тогда
			ВызватьИсключение НСтр("ru = 'На компьютере не найден ни один провайдер ЭП для выполнения операции.
                                    |Обратитесь к администратору.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Открывает форму просмотра сертификата ЭП
//
// Параметры
//  Отпечаток - Строка - отпечаток сертификата ЭП
//
Процедура ОткрытьСертификат(Отпечаток) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток", СтруктураСертификата, Отпечаток);
		ОткрытьФорму("ОбщаяФорма.СертификатЭП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП
//
// Параметры
//  СтруктураСертификата - Структура с полями сертификата
//  Отпечаток  - Строка - отпечаток сертификата ЭП
//  АдресСертификата - Строка - адрес сертификата во временном хранилище
//
Процедура ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата", 
			СтруктураСертификата, Отпечаток, АдресСертификата);
		ОткрытьФорму("ОбщаяФорма.СертификатЭП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра сертификата ЭП
Процедура ОткрытьСертификатПоОтпечаткуИАдресу(Отпечаток, АдресСертификата) Экспорт
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;	
		
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	Отпечаток = Отпечаток;
	Сертификат = Неопределено;
	СтруктураСертификата = Неопределено;
	Если НЕ ПустаяСтрока(АдресСертификата) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресСертификата);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	Иначе
		СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;	
	
	Если СтруктураСертификата <> Неопределено Тогда
		ОткрытьСертификатСоСтруктурой(СтруктураСертификата, Отпечаток, АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму просмотра подписи ЭП
Процедура ОткрытьПодпись(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентПовтИсп.ЭтоВебКлиентПодMacOS() Тогда
		Возврат;
	КонецЕсли;
		
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	ОбъектУказан = Ложь;
	
	Если ТипЗнч(ТекущиеДанные.Объект) = Тип("Строка") Тогда
		Если НЕ ПустаяСтрока(ТекущиеДанные.Объект) Тогда
			ОбъектУказан = Истина;
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая()) Тогда
		ОбъектУказан = Истина;
	КонецЕсли;
	
	Если ОбъектУказан Тогда
		
		Отпечаток = ТекущиеДанные.Отпечаток;
		Сертификат = Неопределено;
		СтруктураСертификата = Неопределено;
		Если НЕ ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ТекущиеДанные.АдресСертификата);
			Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Иначе
			СтруктураСертификата = ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток);
		КонецЕсли;	
		
		Если СтруктураСертификата <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата, УстановившийПодпись, Комментарий, АдресПодписи, ДатаПодписи", 
				СтруктураСертификата, Отпечаток, ТекущиеДанные.АдресСертификата,
				ТекущиеДанные.УстановившийПодпись, ТекущиеДанные.Комментарий, ТекущиеДанные.АдресПодписи,
				ТекущиеДанные.ДатаПодписи);
			ОткрытьФорму("ОбщаяФорма.ПодписьЭП", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// "Сохранить как" вместе с подписями - все или выбранные
//
// Параметры
//  ФайлСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  ПолноеИмяФайла - Строка - полное имя с путем, под которым сохранен файл
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  МассивСтруктурПодписей - Массив  - массив структур подписей. Если Неопределено - сохраняем все подписи
//
Процедура СохранитьПодписи(ФайлСсылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей) Экспорт
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить(ОсновнойФайл.Имя);
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда 
			ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + "." + РасширениеДляФайловПодписи;
		КонецЕсли;
		
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + "." + РасширениеДляФайловПодписи;
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи);
			
			ПолныйПутьПодписи = Путь;
			ПолныйПутьПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;	
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, СтруктураПодписи.АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		УдалитьИзВременногоХранилища(СтруктураПодписи.АдресПодписи);
	КонецЦикла;
	
	Если МассивСтруктурПодписей.Количество() <> 0 Тогда
		Текст = НСтр("ru = 'Каталог:'") + Символы.ПС;
		Текст = Текст + Путь;
		Текст = Текст + Символы.ПС + Символы.ПС;
		Текст = Текст + НСтр("ru = 'Файлы:'") + Символы.ПС;
		
		Для Каждого ИмяФайла Из МассивИмен Цикл
			Текст = Текст + ИмяФайла + Символы.ПС;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("Текст", Текст);
		ОткрытьФорму("ОбщаяФорма.ОтчетОСохраненииФайлов", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет ЭП из файла (файлов)
//
// Параметры
//  ФайлСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭП
//  МассивФайловПодписей  - Массив структур - массив структур (ПутьКФайлу, Комментарий)
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  ВладелецФайла  - любая ссылка - значение реквизита ВладелецФайла у ФайлСсылка
Функция СформироватьПодписиДляЗанесениюВБазу(ФайлСсылка, МассивФайловПодписей, УникальныйИдентификатор = Неопределено) Экспорт
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
#Если НЕ ВебКлиент Тогда	
		
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДатаПодписи = Дата('00010101');
	
	Для Каждого Элемент Из МассивФайловПодписей Цикл
		
		ИмяФайлаСПутем = Элемент.ПутьКФайлу;
		
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ИмяФайлаСПутем);
		
		Если Сертификаты.Количество() <> 0 Тогда
			
			Сертификат = Сертификаты[0];
			
			НоваяПодписьДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
			
			Файл = Новый Файл(ИмяФайлаСПутем);
			ИмяФайлаПодписи = Файл.Имя;
			
			Отпечаток = Base64Строка(Сертификат.Отпечаток);
			КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
			ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
			
			ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
				ФайлСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Элемент.Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				"", // АдресФайла
				ДвоичныеДанныеСертификата);
			
			МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецЕсли	

	Возврат МассивДанныхДляЗанесенияВБазу;

КонецФункции

// Сохраняет подпись на диск
Процедура СохранитьПодпись(АдресПодписи) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы электронных подписей (*.%1)|*.%1|Все файлы (*.*)|*.*'"),
		РасширениеДляФайловПодписи);
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
		ПередаваемыеФайлы.Добавить(Описание);
		
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подпись сохранена в файл
			           |""%1"".'"),
			ДиалогОткрытияФайла.ПолноеИмяФайла);
		
		Состояние(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

// Обработчик результата работы процедуры "УстановитьРасширение".
Процедура УстановитьРасширениеПослеОтвета(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("УстановитьРасширениеПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСКриптографией(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Неопределено);
	КонецЕсли;
КонецПроцедуры

// Обработчик результата работы процедуры "УстановитьРасширениеПослеОтвета".
Процедура УстановитьРасширениеПослеЗавершения(ДополнительныеПараметры) Экспорт
	Результат = ПодключитьРасширениеРаботыСКриптографией();
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, Результат);
КонецПроцедуры

#КонецОбласти
