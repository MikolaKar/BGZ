
Процедура СоздатьКонтактноеЛицоПриЗаписи(Источник, Отказ) Экспорт
	Корреспондент = Источник.Ссылка;
    
	Если Источник.ЭтоГруппа Тогда
	    Возврат;
	КонецЕсли; 
	
	Если Делопроизводство.КорреспондентЮрЛицо(Корреспондент) Тогда
	    Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Представление
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец";

	Запрос.УстановитьПараметр("Владелец", Корреспондент);

	Результат = Запрос.Выполнить().Выгрузить();

	Если Результат.Количество() = 0 Тогда
		Лицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Лицо.УстановитьНовыйКод();
		Лицо.Владелец = Корреспондент;
		Лицо.Наименование = Источник.Наименование;
		Лицо.ФизЛицо      = Корреспондент.ФизЛицо;
		Лицо.Записать();
	КонецЕсли; 	
КонецПроцедуры

Процедура М_ПриЗаписиВнутреннегоДокументаПриЗаписи(Источник, Отказ) Экспорт
    // устанавливаем дополнительные связи между документами (с Договором)
    Если ЗначениеЗаполнено(Источник.ЭтапДоговора) Тогда
        СвязиДокументов.УстановитьСвязь(Источник.Ссылка, Неопределено, Источник.ЭтапДоговора.Владелец, Справочники.ТипыСвязей.ОтноситсяКДоговору);
	КонецЕсли;
	
     // устанавливаем номер геопортала для Дела
    Если Источник.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
        Источник.мНомерГеопортала = мРаботаСДоговорами.СоздатьНомерГеопортала(Источник.ДатаРегистрации, Источник.ЧисловойНомер, Источник.ЭтапДоговора.НомерЭтапа);
    КонецЕсли; 
    
    // фиксируем план расхода материалов для Дела
	Если Источник.ВидДокумента = Справочники.ВидыВнутреннихДокументов.Дело Тогда
		МассивРасходов = мРаботаСоСметами.ПолучитьМассивПланРасходовМатериалов(Источник.Ссылка, Источник.Корреспондент);
		мРаботаСоСметами.ЗаписатьПланРасходМатериалов(МассивРасходов, Источник.Ссылка);
	КонецЕсли; 
	
	// запись допсоглашения или договора
	Если Источник.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот Тогда
		Если ЗначениеЗаполнено(Источник.мДатаНачалаДействияДокумента) Тогда
			// Было изменение даты начала действия
			// Запись планового срока в этапы, которые требуют Даты предоставления документов
			МассивЭтапов = мРаботаСДоговорами.ПолучитьЭтапыДоговораСУчетомДатыПодписания(Источник.Ссылка, ТекущаяДата());
			Если МассивЭтапов.Количество() > 0 Тогда
				Для каждого ЭтапДоговора Из МассивЭтапов Цикл
					// Записать дату подписания
					ВидДатыДоговора = Справочники.мВидыДатДоговоров.ДатаПодписанияЗаказчиком;
					УстанавливаемаяДата = Источник.мДатаНачалаДействияДокумента;
					ПериодЗаписи = ТекущаяДата();
					Основание = Источник.Ссылка;
					мРаботаСДоговорами.ЗаписатьДатуЭтапаДоговора(ЭтапДоговора, ВидДатыДоговора, УстанавливаемаяДата, ПериодЗаписи, Основание);
					
					// Записать дату предоставления документов для этапа
					ВидДатыДоговора = Справочники.мВидыДатДоговоров.ДатаПредоставленияДокументов;
					УстанавливаемаяДата = Источник.мДатаНачалаДействияДокумента;
					ПериодЗаписи = ТекущаяДата();
					Основание = Источник.Ссылка;
					мРаботаСДоговорами.ЗаписатьДатуЭтапаДоговора(ЭтапДоговора, ВидДатыДоговора, УстанавливаемаяДата, ПериодЗаписи, Основание);
					
					// расчет и запись планового срока
					ПланируемыйСрок = мРаботаСДоговорами.РассчитатьПлановыйСрокВыполненияДоговора(ЭтапДоговора, , Истина);
					ПериодЗаписи = Макс(Источник.мДатаНачалаДействияДокумента, ЭтапДоговора.ДатаПредоставленияРешения); 
					мРаботаСДоговорами.ЗаписатьПлановыйСрок(ЭтапДоговора, ПланируемыйСрок, ПериодЗаписи, ЭтапДоговора);
				КонецЦикла; 	
			КонецЕсли; 
		Иначе
			// Было удаление даты начала действия
			// Запись планового срока в этапы, которые требуют Даты предоставления документов
			МассивЭтапов = мРаботаСДоговорами.ПолучитьЭтапыДоговораСУчетомДатыПодписания(Источник.Ссылка, ТекущаяДата());
			Если МассивЭтапов.Количество() > 0 Тогда
				Для каждого ЭтапДоговора Из МассивЭтапов Цикл
					// Очистить дату подписания заказчиком
					ВидДатыДоговора = Справочники.мВидыДатДоговоров.ДатаПодписанияЗаказчиком;
					УстанавливаемаяДата = Источник.мДатаНачалаДействияДокумента;
					ПериодЗаписи = ТекущаяДата();
					Основание = Источник.Ссылка;
					мРаботаСДоговорами.ЗаписатьДатуЭтапаДоговора(ЭтапДоговора, ВидДатыДоговора, УстанавливаемаяДата, ПериодЗаписи, Основание);
					
					// Очистить дату предоставления документов для этапа
					ВидДатыДоговора = Справочники.мВидыДатДоговоров.ДатаПредоставленияДокументов;
					УстанавливаемаяДата = Источник.мДатаНачалаДействияДокумента;
					ПериодЗаписи = ТекущаяДата();
					Основание = Источник.Ссылка;
					мРаботаСДоговорами.ЗаписатьДатуЭтапаДоговора(ЭтапДоговора, ВидДатыДоговора, УстанавливаемаяДата, ПериодЗаписи, Основание);
					
					// расчет и запись планового срока
					ПланируемыйСрок = Дата(1,1,1);
					мРаботаСДоговорами.ЗаписатьПлановыйСрок(ЭтапДоговора, ПланируемыйСрок, ПериодЗаписи, ЭтапДоговора);
				КонецЦикла; 	
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Сохраняем реквизиты Акта выполненных работ
	Если Источник.ВидДокумента = Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот Тогда
		
		Если мРаботаСДоговорами.СуществуетРегНомер(Источник.РегистрационныйНомер, Источник.Ссылка, Источник.ВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				Источник,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли; 
		
		мРаботаСДоговорами.ЗаписатьРеквизитыАктаВыполненныхРабот(Источник);
		
		// Обработка Результата проверки
		Если Источник.ДополнительныеСвойства.Свойство("РезультатПроверки") Тогда
			Замечание = Источник.ДополнительныеСвойства.РезультатПроверки;
			Если ЗначениеЗаполнено(Замечание) и Замечание <> Справочники.мЗамечанияПроверкиАктов.Проверен Тогда
				// Есть замечания по акту
				мРаботаСДоговорами.ЗаписатьЗамечаниеПроверкиАкта(Источник.Ссылка, Замечание);
			Иначе	
				// Замечаний нет - акт проверен
				мРаботаСДоговорами.УдалитьЗамечаниеПроверкиАкта(Источник.Ссылка);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура М_ПриКопированииМсходящегоДокументаПриКопировании(Источник, ОбъектКопирования) Экспорт
    Источник.Подготовил = ОбъектКопирования.Подготовил;
    Источник.Подписал = ОбъектКопирования.Подписал;
    Источник.Подразделение = ОбъектКопирования.Подразделение;
КонецПроцедуры

Процедура М_ОбработкаЗаполненияИсходящегоДокументаОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
    ОснованиеЗаполнения = ДанныеЗаполнения;
    
    Если ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
        
        Если ОснованиеЗаполнения.ВидДокумента.ЯвляетсяКомплектомДокументов Тогда
            КомплектИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(ОснованиеЗаполнения);
            Источник.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'О заключении договоров подряда от %2 № '"), 
            СтрЗаменить(Формат(ОснованиеЗаполнения.РегистрационныйНомер, "ЧГ=0"), Символы.НПП, ""), 
            Формат(ОснованиеЗаполнения.ДатаРегистрации, "ДЛФ=D"));
            Для каждого СтрокаЭлемента Из КомплектИнфо.Элементы Цикл
                Источник.Заголовок = Источник.Заголовок + СокрЛП(СтрокаЭлемента.РегистрационныйНомер) + ", № ";
            КонецЦикла; 		
            Источник.Заголовок = Лев(Источник.Заголовок, СтрДлина(Источник.Заголовок) - 4);		
            
        ИначеЕсли ОснованиеЗаполнения.ВидДокумента.Родитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот Тогда
            Источник.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'О заключении договора подряда от %2 № %1'"), 
            СтрЗаменить(Формат(ОснованиеЗаполнения.РегистрационныйНомер, "ЧГ=0"), Символы.НПП, ""), 
            Формат(ОснованиеЗаполнения.ДатаРегистрации, "ДЛФ=D"));
        ИначеЕсли ОснованиеЗаполнения.ВидДокумента.Наименование = "Дело" Тогда
            Источник.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка ""%1""'"), ОснованиеЗаполнения.Заголовок);
        Иначе	
            Источник.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отправка ""%1""'"), ОснованиеЗаполнения.Заголовок);
        КонецЕсли; 
        
        // Добавить полное наименование дела в заголовок исходящего документа
        Если ОснованиеЗаполнения.ВидДокумента.Наименование = "Дело" Тогда
            Источник.Заголовок = Источник.Заголовок + " " + ОснованиеЗаполнения.Заголовок;
        КонецЕсли; 
        
        Источник.Подписал = ОснованиеЗаполнения.Утвердил;
        Источник.ГрифДоступа = ОснованиеЗаполнения.ГрифДоступа;
        Источник.ВопросДеятельности = ОснованиеЗаполнения.ВопросДеятельности;
        Источник.Организация = ОснованиеЗаполнения.Организация;
        Источник.Проект = ОснованиеЗаполнения.Проект;
        
    КонецЕсли;
        
КонецПроцедуры

Процедура мПриЗаписиСметыПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
    
    //// Изменение этапа договора в соответствии со сметой
    //ЭтапДоговора = Источник.ЭтапДоговора;
    //Если ЗначениеЗаполнено(ЭтапДоговора) Тогда
    //    Если ЭтапДоговора.Смета <> Источник ИЛИ
    //        ЭтапДоговора.Стоимость <> Источник.Итого ИЛИ
    //        ЭтапДоговора.СуммаНДС <> Источник.НДС ИЛИ
    //        ЭтапДоговора.СтоимостьСНДС <> Источник.КОплате  Тогда
    //        
    //        ЭтапДоговора = Источник.ЭтапДоговора.ПолучитьОбъект();
    //        ЭтапДоговора.Смета = Источник.Ссылка;
    //        ЭтапДоговора.Стоимость = Источник.Итого;
    //        ЭтапДоговора.СуммаНДС = Источник.НДС;
    //        ЭтапДоговора.СтоимостьСНДС = Источник.КОплате;
    //        Попытка
    //            ЭтапДоговора.Записать();
    //        Исключение
    //            Сообщить("Не удалось записать Этап договора!");
    //        КонецПопытки;
    //    КонецЕсли; 
    //КонецЕсли; 
    
    // Запись в договор Подписал от Заказчика из карточки
    Договор = Источник.ЭтапДоговора.Владелец;
    КонтактноеЛицо = "";
    Если ЗначениеЗаполнено(Источник.КарточкаОбъектаРабот) Тогда
        КонтактноеЛицо = Источник.КарточкаОбъектаРабот.КонтактноеЛицо;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
        Если Договор.ПодписалОтКорреспондента <> КонтактноеЛицо Тогда
            ДоговорОбъект = Договор.ПолучитьОбъект();
            Строка = ДоговорОбъект.Корреспонденты[0];
    	    Строка.ПодписалОтКорреспондента = КонтактноеЛицо;
            Попытка
                ДоговорОбъект.Записать();
            Исключение
                Сообщить("Не удалось записать в договор Подписал от корреспондента!");
            КонецПопытки;
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

Процедура мУстановитьПометкуУдаленияСтрокИКолонокНормВремени(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда 
        Возврат;  
	КонецЕсли; 
	
	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	Если Источник.ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		мРаботаСоСметами.УстановитьПометкуУдаленияСтрокИКолонокНормВремени(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

Процедура мУстановитьПометкуУдаленияПодиненныхСборникНормВремениПередЗаписью(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда 
        Возврат;  
	КонецЕсли; 
	
	Если Источник.ЭтоНовый() Тогда 
        Возврат;  
	КонецЕсли; 
	
	ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	Если Источник.ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		УстановитьПривилегированныйРежим(Истина);
		мРаботаСоСметами.УстановитьПометкуУдаленияПримечанийИТаблицНормВремени(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

// Изменение ИсполнителиДляСписков в Заявках
// Изменение Исполнителей в Этапах работ, при условии, что Этапы не заактированы
Процедура мИсполнителиРаботПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
    
	Заявка = Источник.Владелец;
    
    // Что бы понять можно ли изменять Исполнителей - получим количество незаактированных этапов и общее количество этапов
    // Если общее количество этапов = 0, значит договора еще нет, - изменять можно
    // Если общее количество этапов > 0, этапы есть изменять можно только незаактированные 
    
    СтруктураОтвета = Новый Структура("Всего, Этапы");
    
    мРаботаСДоговорами.ПолучитьНеЗаактированныеЭтапыПоЗаявке(Заявка, СтруктураОтвета);
    
    МожноИзменять = Ложь;
    
    Если СтруктураОтвета.Всего = 0 Тогда
    
        МожноИзменять = Истина;
    
    ИначеЕсли СтруктураОтвета.Этапы.Количество() > 0 Тогда
    
        МожноИзменять = Истина;
    
    КонецЕсли; 
    
    Если Не МожноИзменять Тогда
        Отказ = Истина;
        Сообщить("Исполнителей нельзя изменять, т.к. нет незаактированных этапов договоров!");
        Возврат;
    КонецЕсли; 
   
    // Изменение Исполнителя в Этапах договоров
    ИзменитьИсполнителейВЭтапахДоговоров(Источник, СтруктураОтвета);
    
	// Изменение ИсполнителиДляСписков в Заявках
    ИзменитьИсполнителейДляСписковВЗаявках(Источник, Заявка);
    
КонецПроцедуры

Процедура ИзменитьИсполнителейВЭтапахДоговоров(Источник, СтруктураОтвета)
    Исполнитель = Источник.Пользователь;
    Для каждого Этап Из СтруктураОтвета.Этапы Цикл
        
        ТабИсполнители = Этап.Исполнители;
        СтрокаТаб = ТабИсполнители.Найти(Исполнитель, "Исполнитель");
        
        Если СтрокаТаб = Неопределено Тогда
            Если Источник.ПометкаУдаления Тогда
                // Исполнителя нет - он помечен на удаление - ничего делать не надо
            Иначе
                // Исполнителя нет - он добавлен - добавляем
                ЭтапОбъект = Этап.ПолучитьОбъект();
                НовСтрока = ЭтапОбъект.Исполнители.Добавить();
                НовСтрока.Исполнитель = Исполнитель;
                НовСтрока.КТУ = 1;
                
                // Если Подразделение исполнителя отличается от подразделения в этапе,
                //  надо изменить в этапе. Только для первого исполнителя в списке
				Если ЭтапОбъект.Исполнители.Количество() > 0 Тогда
					ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(ЭтапОбъект.Исполнители[0].Исполнитель);
					Если ЗначениеЗаполнено(ПодразделениеИсполнителя) Тогда
						ЭтапОбъект.Подразделение = ПодразделениеИсполнителя;
					КонецЕсли; 
				КонецЕсли; 
                
                Попытка
                    ЭтапОбъект.Записать();
                Исключение
                    Сообщить("Не удалось записать Этап!");
                    Отказ = Истина;
                КонецПопытки;
            КонецЕсли;    
        Иначе	
            Если Источник.ПометкаУдаления Тогда
                
                // Исполнитель есть - он помечен на удаление - удаляем
                ИндексСтроки = ТабИсполнители.Индекс(СтрокаТаб);
                ЭтапОбъект = Этап.ПолучитьОбъект();
                ЭтапОбъект.Исполнители.Удалить(ИндексСтроки);
				
                // Если Подразделение исполнителя отличается от подразделения в этапе,
                //  надо изменить в этапе. Только для первого исполнителя в списке
				Если ЭтапОбъект.Исполнители.Количество() > 0 Тогда
					ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(ЭтапОбъект.Исполнители[0].Исполнитель);
					Если ЗначениеЗаполнено(ПодразделениеИсполнителя) Тогда
						ЭтапОбъект.Подразделение = ПодразделениеИсполнителя;
					КонецЕсли; 
				КонецЕсли; 
				
                Попытка
                    ЭтапОбъект.Записать();
                Исключение
                    Сообщить("Не удалось записать Этап!");
                    Отказ = Истина;
                КонецПопытки;
            Иначе
                // Если Подразделение исполнителя отличается от подразделения в этапе,
                //  надо изменить в этапе. Только для первого исполнителя в списке
				Если Этап.Исполнители.Количество() > 0 Тогда
					ПодразделениеИсполнителя = РаботаСПользователями.ПолучитьПодразделение(Этап.Исполнители[0].Исполнитель);
					Если ЗначениеЗаполнено(ПодразделениеИсполнителя) Тогда
						Если Этап.Подразделение <> ПодразделениеИсполнителя Тогда
							ЭтапОбъект = Этап.ПолучитьОбъект();
							ЭтапОбъект.Подразделение = ПодразделениеИсполнителя;
							Попытка
								ЭтапОбъект.Записать();
							Исключение
								Сообщить("Не удалось записать Этап!");
								Отказ = Истина;
							КонецПопытки;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
            КонецЕсли;    
        КонецЕсли; 
    КонецЦикла; 

КонецПроцедуры

Процедура ИзменитьИсполнителейДляСписковВЗаявках(Источник, Заявка)

   Записывать = Истина;
    
    Если Источник.ПометкаУдаления Тогда
        // Исключаем исполнителя из списка
        Если Найти(Заявка.ИсполнителиДляСписков, Источник.Наименование) = 0  Тогда
            // записывать не надо
            Записывать = Ложь;
        КонецЕсли; 
        
        Если Записывать Тогда
            ЗаявкаОбъект = Заявка.ПолучитьОбъект();
            
            ЗаявкаОбъект.ИсполнителиДляСписков = СтрЗаменить(ЗаявкаОбъект.ИсполнителиДляСписков, Источник.Наименование, ""); 
            ЗаявкаОбъект.ИсполнителиДляСписков = СтрЗаменить(ЗаявкаОбъект.ИсполнителиДляСписков, ", , ", ", ");
			
			Если Лев(ЗаявкаОбъект.ИсполнителиДляСписков, 2) = ", " Тогда
				ЗаявкаОбъект.ИсполнителиДляСписков = Сред(ЗаявкаОбъект.ИсполнителиДляСписков, 3);
			КонецЕсли; 
            
            Если Прав(ЗаявкаОбъект.ИсполнителиДляСписков, 2) = ", " Тогда
                ЗаявкаОбъект.ИсполнителиДляСписков = Лев(ЗаявкаОбъект.ИсполнителиДляСписков, СтрДлина(ЗаявкаОбъект.ИсполнителиДляСписков)-2);
            КонецЕсли; 
            
            Попытка
                ЗаявкаОбъект.Записать();
            Исключение
                Сообщить("Не удалось записать Входящий документ (Заявку)!");
                Отказ = Истина;
            КонецПопытки;
        КонецЕсли; 
    Иначе
        // Добавляем исполнителя в список
        Если Найти(Заявка.ИсполнителиДляСписков, Источник.Наименование) > 0  Тогда
            // записывать не надо
            Записывать = Ложь;
        КонецЕсли; 
        Если Записывать Тогда
            ЗаявкаОбъект = Заявка.ПолучитьОбъект();
            Префикс = "";
            Если ЗначениеЗаполнено(ЗаявкаОбъект.ИсполнителиДляСписков) Тогда
                Префикс = ", ";
            КонецЕсли; 
            ЗаявкаОбъект.ИсполнителиДляСписков = ЗаявкаОбъект.ИсполнителиДляСписков + Префикс + СокрЛП(Источник.Наименование);
            Попытка
                ЗаявкаОбъект.Записать();
            Исключение
                Сообщить("Не удалось записать Входящий документ (Заявку)!");
                Отказ = Истина;
            КонецПопытки;
        КонецЕсли; 
    КонецЕсли;

КонецПроцедуры

Процедура мЗадачаИсполнителяПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	Предметы = Источник.Предметы;
    
    // Добавляет Договор для Процесса Создать Акт выполненных работ
    Если Источник.БизнесПроцесс.Шаблон = Справочники.ШаблоныИсполнения.СоздатьАктВыполненныхРабот Тогда
        // Добавить договор в предметы
        ВидДокРодитель = Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот;
        ВидДокДело = Справочники.ВидыВнутреннихДокументов.Дело;
        ЕстьДоговор = Ложь;
        Договор = "";
        Для каждого Строка Из Предметы Цикл
            Если Строка.Предмет.ВидДокумента.Родитель = ВидДокРодитель Тогда
                ЕстьДоговор = Истина;
            ИначеЕсли Строка.Предмет.ВидДокумента = ВидДокДело Тогда    	
                Если ЗначениеЗаполнено(Строка.Предмет.ЭтапДоговора) Тогда
                    Договор = Строка.Предмет.ЭтапДоговора.Владелец;
                КонецЕсли; 
            КонецЕсли; 
		КонецЦикла;
    	Если Не ЕстьДоговор и ЗначениеЗаполнено(Договор) Тогда
            НовыйПредмет = Источник.Предметы.Добавить();
            НовыйПредмет.Предмет = Договор;
            НовыйПредмет.ИмяПредмета = Справочники.ИменаПредметов.НайтиПоНаименованию("Договор", Истина);
            НовыйПредмет.РольПредмета = Перечисления.РолиПредметов.Основной;
        КонецЕсли; 
    КонецЕсли; 
КонецПроцедуры

// Сохраняет состояние поручения и причину возврата (если есть)
Процедура мПриЗаписиВходящегоДокументаПриЗаписи(Источник, Отказ) Экспорт
	Если Не ЗначениеЗаполнено(Источник.РегистрационныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокПоручение = Справочники.ВидыВходящихДокументов.ПоручениеНаВыполнениеРабот;
	
	Если Источник.ВидДокумента = ВидДокПоручение Тогда
		
		// Записать состояние Поручения
		Пользователь = Пользователи.ТекущийПользователь();
		Подразделение = РаботаСПользователями.ПолучитьПодразделение(Пользователь);
		
		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			Состояние = Перечисления.мСостоянияПоручения.Зарегистрировано;
		Иначе
			Если Источник.ДополнительныеСвойства.Свойство("СостояниеПоручения") Тогда
				Состояние = Источник.ДополнительныеСвойства.СостояниеПоручения;
			КонецЕсли; 
		КонецЕсли; 
		
		Набор = РегистрыСведений.мСостоянияПоручений.СоздатьНаборЗаписей();
		Набор.Отбор.Поручение.Установить(Источник.Ссылка);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			НовЗапись = Набор.Добавить();
			НовЗапись.Период = ТекущаяДата();
			НовЗапись.Поручение = Источник.Ссылка;
			НовЗапись.Состояние = Состояние;
			НовЗапись.Подразделение = Подразделение;
			НовЗапись.Пользователь = Пользователь;
			Набор.Записать(Ложь);
		Иначе
			Индекс = Набор.Количество() - 1;
			ПоследнееСостояние = Набор[Индекс].Состояние;
			Если ПоследнееСостояние <> Состояние Тогда
				ДатаЗаписи = ТекущаяДата();
				Набор = РегистрыСведений.мСостоянияПоручений.СоздатьНаборЗаписей();
				Набор.Отбор.Поручение.Установить(Источник.Ссылка);
				Набор.Отбор.Период.Установить(ДатаЗаписи);
				Набор.Прочитать();
				
				НовЗапись = Набор.Добавить();
				НовЗапись.Период = ДатаЗаписи;
				НовЗапись.Поручение = Источник.Ссылка;
				НовЗапись.Состояние = Состояние;
				НовЗапись.Подразделение = Подразделение;
				НовЗапись.Пользователь = Пользователь;
				Набор.Записать(Ложь);
			КонецЕсли; 
		КонецЕсли; 
		
		// Записать Причину возврата Поручения
		Причина = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПричинаВозвратаПоручения") Тогда
			Причина = Источник.ДополнительныеСвойства.ПричинаВозвратаПоручения;
		КонецЕсли; 
		
		Набор = РегистрыСведений.мПричиныВозвратаПоручений.СоздатьНаборЗаписей();
		Набор.Отбор.Поручение.Установить(Источник.Ссылка);
		Набор.Прочитать();
		
		Если Состояние = Перечисления.мСостоянияПоручения.Возвращено Тогда
			// Причина должна быть указана
			Если Не ЗначениеЗаполнено(Причина) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Укажите причину возврата поручения.";
				Сообщение.Сообщить(); 
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
			
			Если Набор.Количество() = 0 Тогда
				НовЗапись = Набор.Добавить();
				НовЗапись.Поручение = Источник.Ссылка;
				НовЗапись.Причина = Причина;
				Набор.Записать(Истина);
			Иначе
				ТекПричина = Набор[0].Причина;
				Если ТекПричина <> Причина Тогда
					НовЗапись = Набор.Добавить();
					НовЗапись.Поручение = Источник.Ссылка;
					НовЗапись.Причина = Причина;
					Набор.Записать(Истина);
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			// Причины возврата не должно быть
			Если Набор.Количество() > 0 Тогда
				Набор.Удалить(0);
				Набор.Записать(Истина);
		    КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура мПроцессИсполнитьЗадачаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли;
	
	Если Источник.Выполнена Тогда
		Возврат;	
	КонецЕсли; 
	
	// Изменение состояния поручения
	
	// Проверка наличия Поручения
	Поручение = Неопределено;
	Если Источник.Предметы.Количество() > 0 Тогда
		Предмет = Источник.Предметы[0].Предмет;
		Если ТипЗнч(Предмет)= Тип("СправочникСсылка.ВходящиеДокументы") Тогда
			Если Предмет.ВидДокумента.Наименование = "Поручение на выполнение работ" Тогда	
				Поручение = Предмет;
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Поручение) Тогда
		Возврат;
	КонецЕсли; 
	
	// 
	Пользователь = Источник.ТекущийИсполнитель;
	Если ЗначениеЗаполнено(Источник.ТекущийОсновнойОбъектАдресации) Тогда
		Подразделение = Источник.ТекущийОсновнойОбъектАдресации;
	Иначе
		// по пользователю
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			Подразделение = РаботаСПользователями.ПолучитьПодразделение(Пользователь);
		Иначе
			// выбрана роль без основного объекта адресации - Вопрос с подразделением...
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	БП = Источник.БизнесПроцесс.Шаблон;
	Если БП = Справочники.ШаблоныИсполнения.ИсполнитьПоручение Тогда
		Состояние = Перечисления.мСостоянияПоручения.ВРаботе;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.УточнитьДопИнформацию Тогда		
		Состояние = Перечисления.мСостоянияПоручения.УточнениеИнформации;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.ЗапроситьДопИнформацию Тогда		
		Состояние = Перечисления.мСостоянияПоручения.ЗапросИнформации;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.ИсполнитьПоручениеДопИнф Тогда		
		Состояние = Перечисления.мСостоянияПоручения.ВРаботеДопИнформация;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.ВернутьПоручение Тогда		
		Состояние = Перечисления.мСостоянияПоручения.Возвращено;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.ПодготовитьДоговор Тогда		
		Состояние = Перечисления.мСостоянияПоручения.СоставлениеДоговора;
		
	ИначеЕсли БП = Справочники.ШаблоныИсполнения.НазначитьИсполнителя Тогда		
		Состояние = Перечисления.мСостоянияПоручения.НазначениеИсполнителя;
		
	КонецЕсли; 
	
	// Запись состояния
	Параметры = мРаботаСДоговорами.ПараметрыСостоянияПоручения();
	Параметры.Период = ТекущаяДата();
	Параметры.Поручение = Поручение;
	Параметры.Состояние = Состояние;
	Параметры.Подразделение = Подразделение;
	Параметры.Пользователь = Пользователь;
	
	мРаботаСДоговорами.УстановитьСостояниеПоручения(Параметры);
	
КонецПроцедуры

Процедура мПриЗаписиИсходящегоДокументаПриЗаписи(Источник, Отказ) Экспорт
	// Изменить состояние Поручения если это: 
	//  1) Возврат поручения 
	//  2) Отправка договора на подписание
	// Завершить задачу Запросить информацию если это ЗапросИнформацииКПоручению
	// Изменения только при установленной дате отправки
	
	// Проверка Дата отправки
	Получатели = Источник.Получатели;
	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Получатели[0].ДатаОтправки) Тогда
		Возврат;
	КонецЕсли; 
	
	// Измененение состояния
	Если Источник.ВидДокумента = Справочники.ВидыИсходящихДокументов.ВозвратПоручения Тогда
		
		Поручение = СвязиДокументов.ПолучитьСвязанныйДокумент(Источник.Ссылка, Справочники.ТипыСвязей.ОтправленВОтветНа);
		Если НЕ ЗначениеЗаполнено(Поручение) Тогда
			Возврат;
		КонецЕсли;
		
		// Завершение процесса "Исполнить поручение"
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Исполнить поручение");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		// Изменение состония Поручения
		Параметры = мРаботаСДоговорами.ПараметрыСостоянияПоручения();
		Параметры.Период = ТекущаяДата();
		Параметры.Поручение = Поручение;
		Параметры.Состояние = Перечисления.мСостоянияПоручения.Возвращено;
		
		мРаботаСДоговорами.УстановитьСостояниеПоручения(Параметры);
	
	ИначеЕсли Источник.ВидДокумента = Справочники.ВидыИсходящихДокументов.ЗапросИнформацииКПоручению Тогда
		
		Поручение = СвязиДокументов.ПолучитьСвязанныйДокумент(Источник.Ссылка, Справочники.ТипыСвязей.ОтправленВОтветНа);
		Если НЕ ЗначениеЗаполнено(Поручение) Тогда
			Возврат;
		КонецЕсли;
		
		// Завершение процесса "Запросить доп. информацию"
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Запросить доп. информацию");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		// Изменение состония Поручения
		Параметры = мРаботаСДоговорами.ПараметрыСостоянияПоручения();
		Параметры.Период = ТекущаяДата();
		Параметры.Поручение = Поручение;
		Параметры.Состояние = Перечисления.мСостоянияПоручения.ЗапросИнформации;
		
		мРаботаСДоговорами.УстановитьСостояниеПоручения(Параметры);
		
	ИначеЕсли Источник.ВидДокумента = Справочники.ВидыИсходящихДокументов.ПисьмоОЗаключенииДоговора Тогда
		
		Договор = СвязиДокументов.ПолучитьСвязанныйДокумент(Источник.Ссылка, Справочники.ТипыСвязей.ПерепискаПоДоговору); 
		Если НЕ ЗначениеЗаполнено(Договор) Тогда
			Возврат;
		КонецЕсли;
		
		Поручение = СвязиДокументов.ПолучитьСвязанныйДокумент(Договор, Справочники.ТипыСвязей.НаОснованииПоручения);
		Если НЕ ЗначениеЗаполнено(Поручение) Тогда
			Возврат;
		КонецЕсли;
		
		Параметры = мРаботаСДоговорами.ПараметрыСостоянияПоручения();
		Параметры.Период = ТекущаяДата();
		Параметры.Поручение = Поручение;
		Параметры.Состояние = Перечисления.мСостоянияПоручения.ДоговорСоставлен;
		Параметры.Подразделение = "";
		Параметры.Пользователь = "";
		
		мРаботаСДоговорами.УстановитьСостояниеПоручения(Параметры);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписьюДатыДоговоровПередЗаписью(Источник, Отказ, Замещение) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры









