// -------------------------------------------------------------------------------------------------
// Работа с сериализованной контактной информацией
//

// Преобразует контактную информацию XDTO в XML, возвращает строку
//
//  Параметры:
//      ОбъектXDTOИнформации - объект XDTO контактной информации
//
Функция СериализацияКонтактнойИнформации(ОбъектXDTOИнформации) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	
	Если ОбъектXDTOИнформации<>Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTOИнформации);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
КонецФункции

// Преобразует XML в объект XDTO контактной информации
//
//  Параметры:
//      Текст        - строка XML
//      ОжидаемыйТип - необязательная ссылка на перечисление типа КИ для контроля типов
//
Функция ДесериализацияКонтактнойИнформации(Текст, ОжидаемыйВид=Неопределено, Представление = "") Экспорт
	
	Если ТипЗнч(ОжидаемыйВид)=Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ОжидаемыйТип = ОжидаемыйВид.Тип
	Иначе
		ОжидаемыйТип = ОжидаемыйВид;
	КонецЕсли;
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеФакс                  = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		НайденТип = ?(Результат.Состав=Неопределено, Неопределено, Результат.Состав.Тип());
		
		Если ОжидаемыйТип=ПеречислениеАдрес И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается адрес'");
		ИначеЕсли ОжидаемыйТип=ПеречислениеАдресЭлектроннойПочты И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
		ИначеЕсли ОжидаемыйТип=ПеречислениеВебСтраница И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается веб-страница'");
		ИначеЕсли ОжидаемыйТип=ПеречислениеТелефон И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон'");
		ИначеЕсли ОжидаемыйТип=ПеречислениеФакс И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон'");
		ИначеЕсли ОжидаемыйТип=ПеречислениеДругое И НайденТип<>ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается ""другое""'");
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(Текст)=Тип("СписокЗначений") Тогда
		//Представление = "";
		ЭтоНовый = Текст.Количество()=0;
	Иначе
		//Представление = "";
        //Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип=ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = ДесериализацияАдреса(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип=ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип=ПеречислениеФакс Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
		Иначе
			Результат = ДесериализацияФакса(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип=ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип=ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип=ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, не указан ожидаемый тип'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разбирает представление КИ и возвращает XDTO
//
//  Параметры:
//      Текст        - строка XML
//      ОжидаемыйТип - ссылка на вид КИ или перечисление типа КИ для контроля типов
//
Функция ПарсингКонтактнойИнформации(Текст, ОжидаемыйВид) Экспорт
	
	Если ТипЗнч(ОжидаемыйВид)=Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ОжидаемыйТип = ОжидаемыйВид.Тип
	Иначе
		ОжидаемыйТип = ОжидаемыйВид;
	КонецЕсли;
	
	Если ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат ДесериализацияАдреса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);    
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);    
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат ДесериализацияТелефона("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат ДесериализацияФакса("", Текст, ОжидаемыйТип);
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат ДесериализацияПрочейКонтактнойИнформации("", Текст, ОжидаемыйТип);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Разбирает представление КИ и возвращает строку XML
//
//  Параметры:
//      Текст        - строка XML
//      ОжидаемыйТип - ссылка на вид КИ или перечисление типа КИ для контроля типов
//
Функция ПарсингКонтактнойИнформацииXML(Текст, ОжидаемыйВид) Экспорт
	Возврат СериализацияКонтактнойИнформации(
	ПарсингКонтактнойИнформации(Текст, ОжидаемыйВид)
	);
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса
//
//  Параметры:
//      ЗначенияПолей - строка с сериализованной информацией, значения полей
//      Представление - представление старший-младший, используется для попытки разбора, 
//                      если ЗначенияПолей пусто
//      ОжидаемыйТип  - необязательный тип для контроля
//
Функция ДесериализацияАдреса(ЗначенияПолей, Представление="", ОжидаемыйТип=Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ЗначенияПолей);
	
	РазбиратьПоПолям = ТипЗначения=Тип("СписокЗначений") Или ТипЗначения=Тип("Структура") 
	Или (ТипЗначения=Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей));
	
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
    //// Разбираем из представления по классификаторам
    //Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
    //
    //Если Вариант=Неопределено Тогда
    //	// Нет подсистемы классификатора
    //ИначеЕсли Вариант=Перечисления["ВариантыАдресногоКлассификатора"].КЛАДР Тогда
    	Возврат ДесериализацияАдресаПоПредставлениюКЛАДР(Представление);
    //КонецЕсли;
	
	// Пустой объект с представлением
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	Возврат Результат;
КонецФункции  

// Преобразует строку в XDTO контактную информацию телефона
//
//  Параметры:
//      ЗначенияПолей - строка с сериализованной информацией, значения полей
//      Представление - представление старший-младший, используется для попытки разбора, 
//                      если ЗначенияПолей пусто
//      ОжидаемыйТип  - необязательный тип для контроля
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление="", ОжидаемыйТип=Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO контактную информацию Факса
//
//  Параметры:
//      ЗначенияПолей - строка с сериализованной информацией, значения полей
//      Представление - представление старший-младший, используется для попытки разбора, 
//                      если ЗначенияПолей пусто
//      ОжидаемыйТип  - необязательный тип для контроля
//
Функция ДесериализацияФакса(ЗначенияПолей, Представление="", ОжидаемыйТип=Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию 
//
//  Параметры:
//      ЗначенияПолей - строка с сериализованной информацией, значения полей
//      Представление - представление старший-младший, используется для попытки разбора, 
//                      если ЗначенияПолей пусто
//      ОжидаемыйТип  - необязательный тип для контроля
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление="", ОжидаемыйТип=Неопределено) Экспорт
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип<>Неопределено Тогда
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

//  Читает и устанавливает представление для контактной информации. Объект может измениться.
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO или XML строка контактной информации
//      НовоеЗначение  - необязательное устанавливаемое новое представление в XDTOИнформация
//
Функция ПредставлениеКонтактнойИнформации(XDTOИнформация, НовоеЗначение=Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация)=Тип("Строка");
	Если НадоСериализовать И Не КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(XDTOИнформация) Тогда
		// Старая версия значений полей, возвращаем саму строку
		Возврат XDTOИнформация;
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, ДесериализацияКонтактнойИнформации(XDTOИнформация), XDTOИнформация);
	Если НовоеЗначение<>Неопределено Тогда
		ОбъектXDTO.Представление = НовоеЗначение;
	КонецЕсли;
	
	Если НадоСериализовать Тогда
		XDTOИнформация = СериализацияКонтактнойИнформации(ОбъектXDTO);
	КонецЕсли;
	Возврат ОбъектXDTO.Представление
КонецФункции

//  Читает и устанавливает комментарий для контактной информации
//
//  Параметры:
//      XDTOИнформация - ОбъектXDTO или XML строка контактной информации. Объект может измениться
//      НовоеЗначение  - необязательный устанавливаемый новый комментарий XDTOИнформация
//
Функция КомментарийКонтактнойИнформации(XDTOИнформация, НовоеЗначение=Неопределено) Экспорт
	НадоСериализовать = ТипЗнч(XDTOИнформация)=Тип("Строка");
	Если НадоСериализовать И Не КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(XDTOИнформация) Тогда
		// Старая версия значений полей, комментарий не поддерживается
		Возврат "";
	КонецЕсли;
	
	ОбъектXDTO = ?(НадоСериализовать, ДесериализацияКонтактнойИнформации(XDTOИнформация), XDTOИнформация);
	Если НовоеЗначение<>Неопределено Тогда
		ОбъектXDTO.Комментарий = НовоеЗначение;
	КонецЕсли;
	
	Если НадоСериализовать Тогда
		XDTOИнформация = СериализацияКонтактнойИнформации(ОбъектXDTO);
	КонецЕсли;
	Возврат ОбъектXDTO.Комментарий
КонецФункции

//  Формирует и возвращает представление контактной информации
//
//  Параметры:
//      Информация    - объект XDTO контактной информации, или строковое значение полей
//      ВидИнформации - ссылка на справочник вида КИ
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация)=Тип("ОбъектXDTO") Тогда
		Если Информация.Состав=Неопределено Тогда
			// Что было, то и будет
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации=ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации=ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав, ВидИнформации);
			
		КонецЕсли;
		
		// Заглушка на другие типы
		Если ТипЗнч(ТипИнформации)=Тип("ОбъектXDTO") И ТипИнформации.Свойства.Получить("Значение")<>Неопределено Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		Возврат Строка(Информация.Состав);
	КонецЕсли;
	
	// Старый формат или новый десериализованный
	Если ВидИнформации.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НоваяИнфо = ДесериализацияАдреса(Информация,,Перечисления.ТипыКонтактнойИнформации.Адрес);
		Возврат СформироватьПредставлениеКонтактнойИнформации(НоваяИнфо, ВидИнформации);
	КонецЕсли;
	
	Возврат СокрЛП(Информация);
КонецФункции

//  Возвращает флаг того, что переданный адрес - Белорусский
//
//  Параметры:
//      XDTOАдрес - объект XDTO КИ или адреса
//
Функция ЭтоБелорусскийАдрес(XDTOАдрес) Экспорт
	Возврат БелорусскийАдрес(XDTOАдрес)<>Неопределено;
КонецФункции

//  Возвращает извлеченный XDTO Белорусского адреса или Неопределено для адреса иностранного
//
//  Параметры:
//      ОбъектИнформации - объект XDTO КИ или адреса
//
Функция БелорусскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации)=ТипXDTO Тогда
		ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
		
		Если ОбъектИнформации.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес)=ТипXDTO И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес)=ТипXDTO И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "АдресРБ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


//  Возвращает представление адреса
//
//  Параметры:
//      XDTOАдрес     - объект XDTO адреса
//      ВидИнформации - ссылка на справочник вида КИ или структура
//
Функция ПредставлениеАдреса(XDTOАдрес, ВидИнформации) Экспорт
	
	//ПРАВИЛА ОКАЗАНИЯ УСЛУГ ПОЧТОВОЙ СВЯЗИ
	// (в ред. постановлений Совмина от 16.03.2005 N 285,
	// от 03.10.2006 N 1297, от 13.12.2007 N 1737,
	// от 23.12.2008 N 2010, от 02.01.2009 N 1,от 19.05.2009 N 646, от 20.08.2010 N 1214)
	//	70. На внутренних почтовых отправлениях адрес должен быть написан на белорусском 
	//	или русском языке. Адрес должен быть точным и полным и содержать следующие данные: 
	//	фамилия, имя, отчество или наименование юридического лица, 
	//	название улицы, номер дома, корпуса, квартиры, 
	//	название населенного пункта, почтовый код, название отделения почтовой связи, название района, название области. 
	//	При адресовании почтовых отправлений в города почтовый код указывается перед названием города.
	
	Страна = СокрЛП(XDTOАдрес.Страна);
	АдресРБ = XDTOАдрес.Состав;
	
	Если ТипЗнч(АдресРБ)<>Тип("ОбъектXDTO") Тогда
		Возврат ?(ПустаяСтрока(Страна), "", Страна + ", ") + СокрЛП(АдресРБ);
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресРБ.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "АдресРБ") Тогда
        Представление = "";
        Если ЗначениеЗаполнено(АдресРБ.Улица) Тогда
            Если ЗначениеЗаполнено(АдресРБ.НаименованиеТипаУлицы) Тогда
                // Улица из классификатора
                Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
                Представление, "",
                АдресРБ.НаименованиеТипаУлицы, АдресРБ.Улица);       
            Иначе
                // Улица введена вручную
                Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
                Представление, "",
                АдресРБ.Улица, "");       
            КонецЕсли; 
        КонецЕсли; 
        Если ЗначениеЗаполнено(АдресРБ.Дом) Тогда
            Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
                АдресРБ.ТипДома, АдресРБ.Дом);       
        КонецЕсли; 
        Если ЗначениеЗаполнено(АдресРБ.Корпус) Тогда
            Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
                АдресРБ.ТипКорпуса, АдресРБ.Корпус);       
        КонецЕсли; 
        Если ЗначениеЗаполнено(АдресРБ.Квартира) Тогда
            Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
                АдресРБ.ТипКвартиры, АдресРБ.Квартира);       
        КонецЕсли; 
        
        Если СокрЛП(АдресРБ.ТипНаселенногоПункта) = "г." Тогда
            Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
             Представление, "",
               АдресРБ.Индекс, "",
                АдресРБ.ТипНаселенногоПункта, АдресРБ.НаселенныйПункт,
                );
        Иначе
            Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
             Представление, "",
               АдресРБ.ТипНаселенногоПункта, АдресРБ.НаселенныйПункт,
                АдресРБ.Индекс, "",
                );
        КонецЕсли; 
        Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
            АдресРБ.Сельсовет," с/с", 
            АдресРБ.Район," р-н", 
            АдресРБ.Область," обл."
            );
        
    КонецЕсли;
    
    Если Страна = "БЕЛАРУСЬ" Тогда
        
        Страна = Неопределено;
        
    КонецЕсли; 
    Возврат КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
        Представление, "",
        Страна, ""
        );
	
КонецФункции

//  Возвращает представление телефона
//
//  Параметры:
//      XDTOДанные    - объект XDTO номера телефона
//      ВидИнформации - необязательная ссылка на справочник вида КИ
//
Функция ПредставлениеТелефона(XDTOДанные, ВидИнформации=Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		""
	);
КонецФункции    

//  Возвращает представление факса
//
//  Параметры:
//      XDTOДанные    - объект XDTO номера телефона
//      ВидИнформации - необязательная ссылка на справочник вида КИ
//
Функция ПредставлениеФакса(XDTOДанные, ВидИнформации=Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		""
	);
КонецФункции    

// -------------------------------------------------------------------------------------------------

// Возвращает флаг того, что текущий пользователь может загружать или очищать адресный классификатор
Функция ЕстьВозможностьИзмененияАдресногоКлассификатора() Экспорт
	
	Вариант = КонтактнаяИнформацияКлиентСервер.ИспользуемыйАдресныйКлассификатор();
	Если Вариант=Неопределено Тогда
		// Нет классификатора
		Возврат Ложь;
	ИначеЕсли Вариант=Перечисления["ВариантыАдресногоКлассификатора"].КЛАДР Тогда
		ОбъектКонтроля = Метаданные.РегистрыСведений.Найти("АдресныйКлассификатор");
		Возврат ОбъектКонтроля<>Неопределено И ПравоДоступа("Изменение", ОбъектКонтроля);
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Внутреннее для сериализации
Функция ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип=Неопределено)
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип, Представление);
	КонецЕсли;
	
	Если ОжидаемыйТип<>Неопределено Тогда
		Если ОжидаемыйТип<>Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Представление = Представление;
	Результат.Комментарий   = "";
	Результат.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	АдресБелорусский = Истина;
	НазваниеБеларуси  = ВРег(Справочники.СтраныМира.Беларусь.Наименование);
	
    //ЭлементКвартира = Неопределено;
    //ЭлементКорпус   = Неопределено;
    //ЭлементДом      = Неопределено;
	
	// Белорусский
    //АдресРБ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРБ"));
	АдресРБ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	// Общий
	Адрес = Результат.Состав;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей=Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей=Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(
			УправлениеКонтактнойИнформациейКлиентСервер.СтрокаПолей(ЗначенияПолей, Ложь)
		); 
	Иначе        
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
    //ТипКвартирыНеопределен = Истина;
    //ТипКорпусаНеопределен  = Истина;
    //ТипДомаНеопределен     = Истина;
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			АдресРБ.Индекс = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение)<>НазваниеБеларуси Тогда
				АдресБелорусский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля="ОБЛАСТЬ" Тогда
			АдресРБ.Область = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="РАЙОН" Тогда
			АдресРБ.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="СЕЛЬСОВЕТ" Тогда
			АдресРБ.Сельсовет = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="ТИПНАСЕЛЕННОГОПУНКТА" Тогда
			АдресРБ.ТипНаселенногоПункта = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="НАСЕЛЕННЫЙПУНКТ" Тогда
			АдресРБ.НаселенныйПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="НАИМЕНОВАНИЕТИПАУЛИЦЫ" Тогда
			АдресРБ.НаименованиеТипаУлицы = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="УЛИЦА" Тогда
			АдресРБ.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="ТИПДОМА" Тогда
			АдресРБ.ТипДома = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="ДОМ" Тогда
			АдресРБ.Дом = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="ТИПКОРПУСА" Тогда
			АдресРБ.ТипКорпуса = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="КОРПУС" Тогда
			АдресРБ.Корпуса = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="ТИПКВАРТИРЫ" Тогда
			АдресРБ.ТипКвартиры = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля="КВАРТИРА" Тогда
			АдресРБ.Квартира = ЭлементСписка.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Адрес.Состав = ?(АдресБелорусский, АдресРБ, Представление);
    Результат.Состав = ?(АдресБелорусский, АдресРБ, Представление);
	
	Возврат Результат;
КонецФункции


Функция ДесериализацияАдресаПоПредставлениюКЛАДР(Представление)
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	
	СтрокиЧастейАдреса = КонтактнаяИнформацияКлиентСервер.ЧастиАдреса(Представление);
	КоличествоЧастей = СтрокиЧастейАдреса.Количество();
	Если КоличествоЧастей=0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Адрес = Результат.Состав;
	
	// Страна - определяем по классификатору стран.
	СтранаРоссия = Справочники.СтраныМира.Беларусь;
	Страна = Справочники.СтраныМира.НайтиПоНаименованию(СтрокиЧастейАдреса[0].Наименование, Истина);
	Если ЗначениеЗаполнено(Страна) Тогда 
		Адрес.Страна = Страна.Наименование;
		// Если явно не Россия, то возвращаемся
		Если Страна<>СтранаРоссия Тогда
			Адрес.Состав = Представление;
			Возврат Результат;
		КонецЕсли;
		СтрокиЧастейАдреса.Удалить(0);
	КонецЕсли;
	
	// Считаем это все российским адресом
	Адрес.Страна = СтранаРоссия.Наименование;
	Адрес.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	АдресРФ = Адрес.Состав;
	
    //// Создадим затычку под район
    //СвРайМО(АдресРФ);
	
	// Индекс. Определяем по всем цифрам в первом элементе
	Наименование = СтрокиЧастейАдреса[0].Наименование;
	Индекс = Неопределено;
	Если СтрДлина(Наименование)=6 Тогда
		Попытка
			Индекс = Число(Наименование);
		Исключение
			;
		КонецПопытки;
	КонецЕсли;
    //Если Индекс<>Неопределено Тогда
    //	// Определили индекс
    //	ПочтовыйИндексАдреса(АдресРФ, Индекс);
    //	СтрокиЧастейАдреса.Удалить(0);
    //КонецЕсли;
	
    //// Части адреса до зданий
    //ЧастиАдреса = СписокРеквизитовНаселенныйПунктКЛАДР();
    //Для Каждого КлючЗначение Из СписокРеквизитовУлицаКЛАДР() Цикл
    //	ЧастиАдреса.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
    //КонецЦикла;
	
    //Для Каждого КлючЗначение Из ЧастиАдреса Цикл
    //	Если СтрокиЧастейАдреса.Количество()=0 Тогда
    //		Прервать;
    //	КонецЕсли;
    //	
    //	ИдентификаторЧасти = КлючЗначение.Ключ;
    //	Наименование = СтрокиЧастейАдреса[0].Наименование;
    //	Сокращение   = СтрокиЧастейАдреса[0].Сокращение;
    //	ВариантыДанных      = СписокАнализаЭлементаАдресаКЛАДР(Наименование, Сокращение, ИдентификаторЧасти, ЧастиАдреса, Ложь, Истина, 2);
    //	КоличествоВариантов = ВариантыДанных.Количество();
    //	
    //	// Если нет вариантов, то возможно это уровень ниже
    //	Если КоличествоВариантов=1 Тогда
    //		// Найдено точно, ставим части адреса для ограничения остального 
    //		Приемник = КлючЗначение.Значение;
    //		Источник = ВариантыДанных[0].Значение.Значение;
    //		Приемник.КодКлассификатора = Источник.Код;
    //		Приемник.Наименование = Источник.Наименование;
    //		Приемник.Сокращение   = Источник.Сокращение;
    //		Приемник.Значение     = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Приемник.Наименование, Приемник.Сокращение);
    //		
    //		// И в результат
    //		АдресРФ.Установить(Приемник.ПутьXPath, Приемник.Значение);
    //		
    //		СтрокиЧастейАдреса.Удалить(0);
    //	ИначеЕсли КоличествоВариантов>0 Тогда
    //		// Есть много вариантов, не учитываем
    //		СтрокиЧастейАдреса.Удалить(0);
    //	КонецЕсли;
    //	
    //КонецЦикла;
	
    //// Остальное пытаемся распихать с конца по домам и квартирам, если не получилось - оставляем
    //ТаблицаЗданийПомещений = ТаблицаЗначений("Тип, Значение");
    //ИндексСтроки = СтрокиЧастейАдреса.Количество() - 1;
    //Пока ИндексСтроки>=0 Цикл
    //	Строка = СтрокиЧастейАдреса[ИндексСтроки];
    //	
    //	Тип = СокрЛП(СтрЗаменить(Строка.Наименование, "№", ""));
    //	Если КонтактнаяИнформацияКлиентСерверПовтИсп.КодСериализацииОбъектаАдресации(Тип)<>Неопределено Тогда
    //		НоваяСтрока = ТаблицаЗданийПомещений.Добавить();
    //		НоваяСтрока.Значение = СокрЛП(СтрЗаменить(Строка.Сокращение, "№", ""));
    //		НоваяСтрока.Тип      = Тип;
    //		СтрокиЧастейАдреса.Удалить(ИндексСтроки);
    //	КонецЕсли;
    //	
    //	ИндексСтроки = ИндексСтроки - 1;
    //КонецЦикла;
    //ЗданияИПомещенияАдреса(АдресРФ, Новый Структура("Здания, Помещения", ТаблицаЗданийПомещений, ТаблицаЗданийПомещений));
	
    //// Все, что осталось - склеиваем и ставим в населенный пункт
    //Остаток = "";
    //Для Каждого Строка Из СтрокиЧастейАдреса Цикл
    //	Остаток = Остаток + " " + КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(Строка.Наименование, Строка.Сокращение);
    //КонецЦикла;
    //Если Не ПустаяСтрока(Остаток) Тогда
    //	АдресРФ.НаселПункт = СокрЛП("" + АдресРФ.НаселПункт + СокрЛП(Остаток));
    //КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление="", ОжидаемыйТип=Неопределено)
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоСтрокаXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации
		Возврат ДесериализацияКонтактнойИнформации(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	
	Если ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	ИначеЕсли ОжидаемыйТип=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса"));
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	Если СписокЗначенийПолей<>Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			Если Поле="КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
			ИначеЕсли Поле="КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
			ИначеЕсли Поле="НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
			ИначеЕсли Поле="ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если Лев(Добавочный, 1) = "," Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если Лев(СокрЛ(Представление),1)="+" Тогда
			// Была попытка явно указать код страны, оставляем страну в покое
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции  

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала=Неопределено, ДопустимоКромеЦифр="")
	
	Если ПозицияНачала=Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала<=ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ>="0" И Символ<="9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или Найти(ДопустимоКромеЦифр, Символ)>0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции
Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр="", Направление=Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс<>Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ>="0" И Символ<="9") Или Найти(ДопустимоКромеЦифр, Символ)=0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Получение глубокого свойства объекта
Функция ЗначениеСвойстваПоXPath(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств=1 Тогда
		Возврат ОбъектXTDO.Получить(СтрокаСвойств);
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств=0, Неопределено, ОбъектXTDO);
	Для Индекс=1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));     
		Если Результат=Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Установка глубокого свойства объекта
Процедура УстановитьСвойствоПоXPath(ОбъектXTDO, XPath, Значение) Экспорт
	
	// Переносов строки в XPath не ожидаем
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств=1 Тогда
		ОбъектXTDO.Установить(СтрокаСвойств, Значение);
		Возврат;
	ИначеЕсли ЧислоСвойств<1 Тогда
		Возврат;
	КонецЕсли;
		
	РодительскийОбъект = Неопределено;
	ТекущийОбъект      = ОбъектXTDO;
	Для Индекс=1 По ЧислоСвойств Цикл
		
		ТекущееИмя = СтрПолучитьСтроку(СтрокаСвойств, Индекс);
		Если ТекущийОбъект.Установлено(ТекущееИмя) Тогда
			РодительскийОбъект = ТекущийОбъект;
			ТекущийОбъект = ТекущийОбъект.ПолучитьXDTO(ТекущееИмя);
		Иначе
			НовыйТип = ТекущийОбъект.Свойства().Получить(ТекущееИмя).Тип;
			ТипТипа = ТипЗнч(НовыйТип);
			Если ТипТипа=Тип("ТипОбъектаXDTO") Тогда
				НовыйОбъект = ФабрикаXDTO.Создать(НовыйТип);
				ТекущийОбъект.Установить(ТекущееИмя, НовыйОбъект);
				РодительскийОбъект = ТекущийОбъект;
				ТекущийОбъект = НовыйОбъект; 
			ИначеЕсли ТипТипа=Тип("ТипЗначенияXDTO") Тогда
				// Непосредственное значение
				ТекущийОбъект.Установить(ТекущееИмя, Значение);
				РодительскийОбъект = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РодительскийОбъект<>Неопределено Тогда
		РодительскийОбъект.Установить(ТекущееИмя, Значение);
	КонецЕсли;
	
КонецПроцедуры
