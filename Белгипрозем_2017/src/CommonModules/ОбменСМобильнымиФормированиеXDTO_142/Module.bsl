
#Область ПрограммныйИнтерфейс

// Получает XDTO из переданного объекта данных
Процедура ПолучитьXDTOИзОбъекта(
		МобильныйКлиент,
		ЭлементДанных,
		ОбъектыXDTO,
		ПараметрыСинхронизации,
		СоответствиеАдресаты = Неопределено,
		СоответствиеКонтакты = Неопределено,
		ПринудительноВыгрузитьФайлПолностью = Ложь) Экспорт

	СинхронизироватьПочту     = ПараметрыСинхронизации.СинхронизироватьПочту;
	СинхронизироватьЗадачи    = ПараметрыСинхронизации.СинхронизироватьЗадачи;
	СинхронизироватьКалендарь = ПараметрыСинхронизации.СинхронизироватьКалендарь;

	Если СоответствиеАдресаты = Неопределено Тогда
		СоответствиеАдресаты = Новый Соответствие;
	КонецЕсли;

	Если СоответствиеКонтакты = Неопределено Тогда
		СоответствиеКонтакты = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда

		Объект         = ЭлементДанных.Ссылка;
		ПометкаУдаленя = ЭлементДанных.ПометкаУдаления;

		Если ПометкаУдаленя = Неопределено Тогда
			ПометкаУдаленя = Ложь;
		КонецЕсли;

	Иначе
		Объект = ЭлементДанных;

		Попытка
			ПометкаУдаленя = ЭлементДанных.ПометкаУдаленя;
		Исключение
			ПометкаУдаленя = Ложь;
		КонецПопытки;

	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("УдалениеОбъекта") Тогда

		XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект.Ссылка);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект.Ссылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

		Возврат;

	КонецЕсли;

	Если Не ОбменСМобильными.ОбъектДоступенТекущемуПользователю(МобильныйКлиент, Объект, 
			ПараметрыСинхронизации.ОбщиеПраваНаОбъекты) Тогда

		XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект.Ссылка);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект.Ссылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

		Возврат;

	КонецЕсли;

	Попытка
		Если ПометкаУдаленя Тогда
			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект.Ссылка);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект.Ссылка, XDTOУдалениеОбъекта, ОбъектыXDTO);
			Возврат;
		КонецЕсли;
	Исключение
		// "Объект" может быть не ссылочного типа
	КонецПопытки;

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		СоответствиеАдресаты.Вставить(НРег(Объект.Адрес), Объект);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.РолиИсполнителей")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Корреспонденты")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда

		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
			XDTOПользователь = ПолучитьXDTOПоПользователю(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOПользователь, ОбъектыXDTO);

		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			XDTOРоль = ПолучитьXDTOПоРоли(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOРоль, ОбъектыXDTO);

		КонецЕсли;

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		СоответствиеКонтакты.Вставить(Объект, Истина);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПапкиПисем") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		XDTOПапкаПисем = ПолучитьXDTOИзПапкиПисем(Объект, МобильныйКлиент);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOПапкаПисем, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		XDTOУчетнаяЗапись = ПолучитьXDTOИзУчетнойЗаписи(Объект, МобильныйКлиент);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOУчетнаяЗапись, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		ПапкиВСинхронизации = ОбменСМобильнымиПовтИсп.ПолучитьСинхронизируемыеПапкиПисем(МобильныйКлиент);
		ПапкаПисьма         = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

		Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOУдалениеОбъекта, ОбъектыXDTO);
			Возврат;
		КонецЕсли;

		XDTOВходящееПисьмо = ПолучитьXDTOИзВходящегоПисьма(Объект, ПараметрыСинхронизации, МобильныйКлиент);
		Если XDTOВходящееПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOВходящееПисьмо, ОбъектыXDTO);

		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Объект);
		XDTOНахождениеПисьмаВВетке = ПолучитьXDTOИзНахожденияПисьмаВВетке(Объект, ВеткаПереписки);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ВеткаПереписки, XDTOНахождениеПисьмаВВетке, ОбъектыXDTO);

		ДобавитьКорневоеПисьмоВеткиВМассивXDTO(ВеткаПереписки, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		ПапкиВСинхронизации = ОбменСМобильнымиПовтИсп.ПолучитьСинхронизируемыеПапкиПисем(МобильныйКлиент);
		ПапкаПисьма         = РегистрыСведений.ПисьмаВПапках.ПолучитьПапку(Объект);

		Если ПапкиВСинхронизации.Найти(ПапкаПисьма) = Неопределено Тогда
			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOУдалениеОбъекта, ОбъектыXDTO);
			Возврат;
		КонецЕсли;

		XDTOИсходящееПисьмо = ПолучитьXDTOИзИсходящегоПисьма(Объект, ПараметрыСинхронизации, МобильныйКлиент);
		Если XDTOИсходящееПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOИсходящееПисьмо, ОбъектыXDTO);

		ВеткаПереписки = РегистрыСведений.ПисьмаВеток.ПолучитьВетку(Объект);
		XDTOНахождениеПисьмаВВетке = ПолучитьXDTOИзНахожденияПисьмаВВетке(Объект, ВеткаПереписки);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ВеткаПереписки, XDTOНахождениеПисьмаВВетке, ОбъектыXDTO);

		ДобавитьКорневоеПисьмоВеткиВМассивXDTO(ВеткаПереписки, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда

		XDTOФайл = ПолучитьXDTOИзФайла(Объект, МобильныйКлиент, ПараметрыСинхронизации, ПринудительноВыгрузитьФайлПолностью);
		Если XDTOФайл <> Неопределено Тогда
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOФайл, ОбъектыXDTO);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтении") Тогда
		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		XDTOСостояниеПрочтения = ПолучитьXDTOИзСведенийОПрочтении(Объект, ПараметрыСинхронизации);

		Если XDTOСостояниеПрочтения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOСостояниеПрочтения, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПисьмаВПапках") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		ПапкиВСинхронизации = ОбменСМобильнымиПовтИсп.ПолучитьСинхронизируемыеПапкиПисем(МобильныйКлиент);
		Для Каждого ЗаписьРегистра Из Объект Цикл

			Если ПапкиВСинхронизации.Найти(ЗаписьРегистра.Папка) = Неопределено Тогда

				XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(ЗаписьРегистра.Письмо);
				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ЗаписьРегистра.Письмо, XDTOУдалениеОбъекта, ОбъектыXDTO);

				Продолжить;

			КонецЕсли;

			XDTOПапкаПисем = ПолучитьXDTOИзЗаписиРегистраПапкиПисем(ЗаписьРегистра);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ЗаписьРегистра, XDTOПапкаПисем, ОбъектыXDTO);

		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом") Тогда

		Если Объект.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Запись Из Объект Цикл

			Если Запись.ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.СинхронизацияПапокПисем Тогда

				XDTOСинхронизируемыеПапки = ПолучитьXDTOИзСинхронизацияПапокПисемСМобильнымКлиентом(Объект);
				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект,XDTOСинхронизируемыеПапки, ОбъектыXDTO);

				Для Каждого СинхронизируемаяПапка Из XDTOСинхронизируемыеПапки.folderIds Цикл
					ПапкаСсылка = Справочники.ПапкиПисем.ПолучитьСсылку(СинхронизируемаяПапка);
					XDTOПапка = ПолучитьXDTOИзПапкиПисем(ПапкаСсылка, МобильныйКлиент);
					ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ПапкаСсылка, XDTOПапка, ОбъектыXDTO);
				КонецЦикла;

			ИначеЕсли Запись.ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем Тогда
				XDTOШаблоныТекстов = ПолучитьXDTOИзНастроекШаблоновПисем(МобильныйКлиент);
				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Запись, XDTOШаблоныТекстов, ОбъектыXDTO);

			ИначеЕсли Запись.ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.МаксимальныйРазмерФайла Тогда
				XDTOНастройкаМаксимальногоРазмераФайлов = ПолучитьXDTOИзМаксимальногоРазмераФайла(Объект, ПараметрыСинхронизации, МобильныйКлиент);
				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Запись, XDTOНастройкаМаксимальногоРазмераФайлов, ОбъектыXDTO);

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ШаблоныТекстовПисем") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат;
		КонецЕсли;

		Если Не Объект.ПометкаУдаления Тогда
			XDTOШаблонТекста = ПолучитьXDTOПоШаблонуТекстаПисьма(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOШаблонТекста, ОбъектыXDTO);
		Иначе
			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOУдалениеОбъекта, ОбъектыXDTO);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("ИнформацияОбОшибке") Тогда

		XDTOИнформацияОбОшибке = ПолучитьXDTOПоСведениямОбОшибке(Объект);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOИнформацияОбОшибке, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда

		Если Не СинхронизироватьКалендарь Тогда
			Возврат;
		КонецЕсли;

		XDTOЗаписьРабочегоКалендаря = ПолучитьXDTOПоЗаписиРабочегоКалендаря(Объект, ПараметрыСинхронизации);

		Если XDTOЗаписьРабочегоКалендаря = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOЗаписьРабочегоКалендаря, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.НастройкиОтображенияЗаписейРабочегоКалендаря") Тогда
		Если Не СинхронизироватьКалендарь Тогда
			Возврат;
		КонецЕсли;

		XDTOНастройкиРабочегоКалендаря = ПолучитьXDTOПоНастройкеРабочегоКалендаря(Объект);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOНастройкиРабочегоКалендаря, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		Если Не СинхронизироватьЗадачи Тогда
			Возврат;
		КонецЕсли;

		ПолучитьXDTOИзЗадачи(Объект, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ИсторияСобытийЗадач") Тогда

		Если Не СинхронизироватьЗадачи Тогда
			Возврат;
		КонецЕсли;

		ПолучитьXDTOИзЗадачи(Объект.Отбор.Задача.Значение, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("БизнесПроцессСсылка.Исполнение") Тогда

		Если Не СинхронизироватьЗадачи Тогда
			Возврат;
		КонецЕсли;

		Если Объект.ПометкаУдаления
			Или Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда

			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Объект.Ссылка);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект.Ссылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

			УстановитьПривилегированныйРежим(Истина);

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", Объект);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗадачаИсполнителя.Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл

				XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(Выборка.Ссылка);
				ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Выборка.Ссылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

			КонецЦикла;

			Возврат;

		КонецЕсли;

		XDTOИсполнение = ПолучитьXDTOПоПроцессуИсполнение(Объект, ОбъектыXDTO, МобильныйКлиент);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOИсполнение, ОбъектыXDTO);

	ИначеЕсли ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ПисьмаВеток") Тогда

		Для Каждого Запись Из Объект Цикл
			XDTOНахождениеПисьмаВВетке = ПолучитьXDTOИзНахожденияПисьмаВВетке(Запись.Письмо, Запись.ВеткаПереписки);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Запись.Письмо, XDTOНахождениеПисьмаВВетке, ОбъектыXDTO);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контроль") Тогда
		РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, 
			"Автор, ДатаПостановкиНаКонтроль, ДатаСнятияСКонтроля, Контролер, Описание, 
				|ПоставленНаКонтроль, СрокИсполнения, Исполнители, Источник, Предмет, ВерсияДанных,
				|Наименование, СнятСКонтроля, Ссылка");

		Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
		Пока Исполнители.Следующий() Цикл

			ПолучитьXDTOИзОбъекта(
				МобильныйКлиент,
				Исполнители.Исполнитель,
				ОбъектыXDTO,
				ПараметрыСинхронизации,
				СоответствиеАдресаты,
				СоответствиеКонтакты,
				ПринудительноВыгрузитьФайлПолностью);

		КонецЦикла;

		Если ЗначениеЗаполнено(РеквизитыКонтроля.Предмет) Тогда

			ПолучитьXDTOИзОбъекта(
				МобильныйКлиент,
				РеквизитыКонтроля.Предмет,
				ОбъектыXDTO,
				ПараметрыСинхронизации,
				СоответствиеАдресаты,
				СоответствиеКонтакты,
				ПринудительноВыгрузитьФайлПолностью);

			ПолучитьXDTOВсехПодчиненныхФайлов(РеквизитыКонтроля.Предмет, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент);

		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыКонтроля.Источник) Тогда

			ПолучитьXDTOИзОбъекта(
				МобильныйКлиент,
				РеквизитыКонтроля.Источник,
				ОбъектыXDTO,
				ПараметрыСинхронизации,
				СоответствиеАдресаты,
				СоответствиеКонтакты,
				ПринудительноВыгрузитьФайлПолностью);

			ПолучитьXDTOВсехПодчиненныхФайлов(РеквизитыКонтроля.Источник, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент);

		КонецЕсли;

		Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
		Пока Исполнители.Следующий() Цикл

			Если ЗначениеЗаполнено(Исполнители.Источник) Тогда

				ПолучитьXDTOИзОбъекта(
					МобильныйКлиент,
					Исполнители.Источник,
					ОбъектыXDTO,
					ПараметрыСинхронизации,
					СоответствиеАдресаты,
					СоответствиеКонтакты,
					ПринудительноВыгрузитьФайлПолностью);

				ПолучитьXDTOВсехПодчиненныхФайлов(Исполнители.Источник, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент);

			КонецЕсли;

		КонецЦикла;

		XDTOКонтроль = ПолучитьXDTOПоКонтролю(РеквизитыКонтроля, ОбъектыXDTO, МобильныйКлиент);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOКонтроль, ОбъектыXDTO);

	Иначе

		Если Не СинхронизироватьЗадачи Тогда
			Возврат;
		КонецЕсли;

		Попытка
			XDTOПредметПроцесса = ПолучитьXDTOПоПредметуПроцесса(Объект);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Объект, XDTOПредметПроцесса, ОбъектыXDTO);
		Исключение
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФнукции

Процедура ПолучитьXDTOВсехПодчиненныхФайлов(Владелец, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент)

	Файлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Владелец);

	Для Каждого Файл Из Файлы Цикл
		XDTOФайл = ПолучитьXDTOИзФайла(Файл, МобильныйКлиент,ПараметрыСинхронизации);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Файл, XDTOФайл, ОбъектыXDTO);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьXDTOИзАдресатаПочтовыхСообщений(АдресатСсылка)

	ПредставлениеИКонтактАдресата = ОбменСМобильнымиПовтИсп.ПолучитьПредставлениеИКонтактАдресата(АдресатСсылка);
	РеквизитыОбъекта              = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АдресатСсылка, "Адрес");

	Если Не ЗначениеЗаполнено(РеквизитыОбъекта.Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;

	XDTOАдресат = ОбменСМобильными_142.СоздатьОбъект("Addressee");
	XDTOАдресат.id           = АдресатСсылка.УникальныйИдентификатор();
	XDTOАдресат.presentation = ПредставлениеИКонтактАдресата.Представление;
	XDTOАдресат.phoneNumbers = "";
	XDTOАдресат.address      = РеквизитыОбъекта.Адрес;

	Возврат XDTOАдресат;

КонецФункции

Функция ПолучитьXDTOИзПапкиПисем(СсылкаНаПапку, МобильныйКлиент)

	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПапку, "Наименование, ВидПапки, Родитель");

	XDTOПапкаПисем = ОбменСМобильными_142.СоздатьОбъект("MailFolder");
	XDTOПапкаПисем.id         = СсылкаНаПапку.УникальныйИдентификатор();
	XDTOПапкаПисем.caption    = Строка(РеквизитыОбъекта.Наименование);
	XDTOПапкаПисем.folderType = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВидыПапокПисем.Общая);

	Если ЗначениеЗаполнено(РеквизитыОбъекта.ВидПапки) Тогда
		XDTOПапкаПисем.folderType = ОбщегоНазначения.ИмяЗначенияПеречисления(РеквизитыОбъекта.ВидПапки);
	КонецЕсли;

	XDTOПапкаПисем.parentFolderId = УникальныйИдентификаторПустой();

	СинхронизируемыеПапки = ОбменСМобильнымиПовтИсп.ПолучитьСинхронизируемыеПапкиПисем(МобильныйКлиент);
	Если ЗначениеЗаполнено(РеквизитыОбъекта.Родитель) И 
		СинхронизируемыеПапки.Найти(РеквизитыОбъекта.Родитель) <> Неопределено Тогда

		XDTOПапкаПисем.parentFolderId = РеквизитыОбъекта.Родитель.УникальныйИдентификатор();

	КонецЕсли;

	XDTOПапкаПисем.mailAccountId = УникальныйИдентификаторПустой();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Папка", СсылкаНаПапку);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиУчетныхЗаписей.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|ГДЕ
		|	ПапкиУчетныхЗаписей.Папка = &Папка";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		XDTOПапкаПисем.mailAccountId = Выборка.УчетнаяЗапись.УникальныйИдентификатор();
	КонецЕсли;

	Возврат XDTOПапкаПисем;

КонецФункции

Функция ПолучитьXDTOИзУчетнойЗаписи(СсылкаУчетнаяЗапись, МобильныйКлиент)

	УстановитьПривилегированныйРежим(Истина);

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаУчетнаяЗапись, "АдресЭлектроннойПочты");

	XDTOУчетнаяЗапись = ОбменСМобильными_142.СоздатьОбъект("MailAccount");
	XDTOУчетнаяЗапись.id = Строка(СсылкаУчетнаяЗапись.УникальныйИдентификатор());
	XDTOУчетнаяЗапись.address = Реквизиты.АдресЭлектроннойПочты;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"      , СсылкаУчетнаяЗапись);
	Запрос.УстановитьПараметр("Пользователь", МобильныйКлиент.Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписи.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписи
		|ГДЕ
		|	УчетныеЗаписи.Ссылка = &Ссылка
		|	И УчетныеЗаписи.ОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь";
	РезультатЗапроса = Запрос.Выполнить();

	XDTOУчетнаяЗапись.canBeUsedForSending = Не РезультатЗапроса.Пустой();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|ГДЕ
		|	Мобильный.Ссылка = &Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			Выборка.ИдентификаторПользователяИБ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	УчетнаяЗаписьПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВстроеннаяПочта",
		"ОсновнаяУчетнаяЗапись",
		Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка(),
		,
		ПользовательИБ.Имя);

	XDTOУчетнаяЗапись.isDefaultAccount = (УчетнаяЗаписьПоУмолчанию = СсылкаУчетнаяЗапись);

	Возврат XDTOУчетнаяЗапись;

КонецФункции

// Получает XDTO из указанного входящего письма для указанного мобильного клиента
Функция ПолучитьXDTOИзВходящегоПисьма(СсылкаВходящееПисьмо, ПараметрыСинхронизации, МобильныйКлиент, КакПредмет = Ложь)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаВходящееПисьмо, 
		"Дата, ТекстПисьмаПростойТекстХранилище, ОтправительАдресат, ВидМаршрутизации");

	// если письмо является предметом для задачи или процесса тогда оно выгружается без
	// ограничения по срокам
	Если НЕ КакПредмет Тогда

		// Объект может устареть и не подлежит выгрузке на клиент
		Если Реквизиты.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	XDTOАдресат = ПолучитьXDTOИзАдресатаПочтовыхСообщений(Реквизиты.ОтправительАдресат);

	Если XDTOАдресат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивXDTO = Новый Массив;

	XDTOВходящееПисьмо = ОбменСМобильными_142.СоздатьОбъект("IncomingMail");
	XDTOВходящееПисьмо.body         = Реквизиты.ТекстПисьмаПростойТекстХранилище;
	XDTOВходящееПисьмо.from         = XDTOАдресат;
	XDTOВходящееПисьмо.wasAnswered  = Ложь;
	XDTOВходящееПисьмо.wasForwarded = Ложь;

	Выборка = ПолучитьКешИнформацииПоПисьму(СсылкаВходящееПисьмо);
	Если Выборка.Следующий() Тогда
		XDTOВходящееПисьмо.wasAnswered  = Выборка.ОтправленОтвет;
		XDTOВходящееПисьмо.wasForwarded = Выборка.Переслан;
	КонецЕсли;

	ТаблицаПолучатели = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияУВходящегоПисьма(СсылкаВходящееПисьмо);
	Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл

		XDTOАдресат = ОбменСМобильными_142.СоздатьОбъект("Addressee");
		XDTOАдресат.id           = СтрокаПолучатель.ПочтовыйАдресат.УникальныйИдентификатор();
		XDTOАдресат.presentation = СтрокаПолучатель.Представление;
		XDTOАдресат.phoneNumbers = "";
		XDTOАдресат.address      = СтрокаПолучатель.Адрес;

		Если СтрокаПолучатель.ТипАдреса = "Кому:" Тогда
			XDTOВходящееПисьмо.to.Добавить(XDTOАдресат);

		ИначеЕсли СтрокаПолучатель.ТипАдреса = "Копия:" Тогда
			XDTOВходящееПисьмо.cc.Добавить(XDTOАдресат);

		КонецЕсли;

	КонецЦикла;

	ЗаполнитьОбщуюЧастьXDTOПисьмо(XDTOВходящееПисьмо, СсылкаВходящееПисьмо, МобильныйКлиент);

	Возврат XDTOВходящееПисьмо;

КонецФункции

// Получает XDTO из указанного исходящего письма для указанного мобильного клиента
Функция ПолучитьXDTOИзИсходящегоПисьма(СсылкаИсходящееПисьмо, ПараметрыСинхронизации, МобильныйКлиент, КакПредмет = Ложь)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаИсходящееПисьмо,
		"Дата, ПодготовленоКОтправке, ДатаОтправки, ТекстХранилище, ПисьмоОснование, ТипОтвета, ВидМаршрутизации");

	// если письмо является предметом для задачи или процесса тогда оно выгружается без
	// ограничения по срокам
	Если НЕ КакПредмет Тогда

		// Объект может устареть и не подлежит выгрузке на клиент
		Если Реквизиты.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	XDTOИсходящееПисьмо = ОбменСМобильными_142.СоздатьОбъект("OutgoingMail");
	ТаблицаПолучатели   = ВстроеннаяПочтаСервер.ПолучитьТаблицуПолучателейКомуКопияСкрытаяУИсходящегоПисьма(СсылкаИсходящееПисьмо);

	Для Каждого СтрокаПолучатель Из ТаблицаПолучатели Цикл

		XDTOАдресат = ОбменСМобильными_142.СоздатьОбъект("Addressee");
		XDTOАдресат.id           = СтрокаПолучатель.Адресат.УникальныйИдентификатор();
		XDTOАдресат.presentation = СтрокаПолучатель.Представление;
		XDTOАдресат.phoneNumbers = "";
		XDTOАдресат.address      = СтрокаПолучатель.Адрес;

		Если СтрокаПолучатель.ТипАдреса = "Кому:" Тогда
			XDTOИсходящееПисьмо.to.Добавить(XDTOАдресат);

		ИначеЕсли СтрокаПолучатель.ТипАдреса = "Копия:" Тогда
			XDTOИсходящееПисьмо.cc.Добавить(XDTOАдресат);

		ИначеЕсли СтрокаПолучатель.ТипАдреса = "Скрытая копия:" Тогда
			XDTOИсходящееПисьмо.bcc.Добавить(XDTOАдресат);

		КонецЕсли;

	КонецЦикла;

	XDTOИсходящееПисьмо.readyToBeSent = Реквизиты.ПодготовленоКОтправке;
	XDTOИсходящееПисьмо.wasSent       = ЗначениеЗаполнено(Реквизиты.ДатаОтправки);
	XDTOИсходящееПисьмо.body          = Реквизиты.ТекстХранилище;
	XDTOИсходящееПисьмо.wasAnswered   = Ложь;
	XDTOИсходящееПисьмо.wasForwarded  = Ложь;
	XDTOИсходящееПисьмо.hasAnswer     = Ложь;

	Выборка = ПолучитьКешИнформацииПоПисьму(СсылкаИсходящееПисьмо);
	Если Выборка.Следующий() Тогда
		XDTOИсходящееПисьмо.wasAnswered  = Выборка.ОтправленОтвет;
		XDTOИсходящееПисьмо.wasForwarded = Выборка.Переслан;
		XDTOИсходящееПисьмо.hasAnswer    = Выборка.ПолученОтвет;
	КонецЕсли;

	Если ЗначениеЗаполнено(Реквизиты.ПисьмоОснование) И ЗначениеЗаполнено(Реквизиты.ТипОтвета) Тогда

		XDTOПисьмоОснование = ОбменСМобильными_142.СоздатьОбъект("Reference");
		Если ТипЗнч(Реквизиты.ПисьмоОснование) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
			XDTOПисьмоОснование.type = "IncomingMail";
		Иначе
			XDTOПисьмоОснование.type = "OutgoingMail";
		КонецЕсли;

		XDTOПисьмоОснование.id = Реквизиты.ПисьмоОснование.УникальныйИдентификатор();
		XDTOИсходящееПисьмо.baseMail   = XDTOПисьмоОснование;
		Если ЗначениеЗаполнено(Реквизиты.ТипОтвета) Тогда
			XDTOИсходящееПисьмо.answerType = ОбщегоНазначения.ИмяЗначенияПеречисления(Реквизиты.ТипОтвета);
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьОбщуюЧастьXDTOПисьмо(XDTOИсходящееПисьмо, СсылкаИсходящееПисьмо, МобильныйКлиент);

	Возврат XDTOИсходящееПисьмо;

КонецФункции

Функция ПолучитьКешИнформацииПоПисьму(ПисьмоСсылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ПисьмоСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КешИнформацииОбОбъектах.Переслан,
		|	КешИнформацииОбОбъектах.ОтправленОтвет,
		|	КешИнформацииОбОбъектах.ПолученОтвет
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|ГДЕ
		|	КешИнформацииОбОбъектах.Объект = &Объект";

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка;

КонецФункции

Процедура ЗаполнитьОбщуюЧастьXDTOПисьмо(XDTOПисьмо, СсылкаПисьмо, МобильныйКлиент) 

	УстановитьПривилегированныйРежим(Истина);

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаПисьмо,
		"Важность, Папка, Тема, УчетнаяЗапись, Дата, ЕстьВложения, ПометкаУдаления, ВерсияДанных");

	XDTOПисьмо.id = Строка(СсылкаПисьмо.УникальныйИдентификатор());
	Если ЗначениеЗаполнено(Реквизиты.Важность) Тогда
		XDTOПисьмо.importance = ОбщегоНазначения.ИмяЗначенияПеречисления(Реквизиты.Важность);
	Иначе
		XDTOПисьмо.importance = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВажностьПисем.Обычная);
	КонецЕсли;

	XDTOПисьмо.subject   = Реквизиты.Тема;
	XDTOПисьмо.folderId  = Реквизиты.Папка.УникальныйИдентификатор();
	XDTOПисьмо.accountId = Реквизиты.УчетнаяЗапись.УникальныйИдентификатор();

	Если ЗначениеЗаполнено(Реквизиты.Дата) Тогда
		XDTOПисьмо.creationDate = Реквизиты.Дата;
	Иначе
		XDTOПисьмо.creationDate = ТекущаяДатаСеанса();
	КонецЕсли;

	XDTOПисьмо.hasAttachment     = Реквизиты.ЕстьВложения;
	XDTOПисьмо.markedForDeletion = Реквизиты.ПометкаУдаления;
	XDTOПисьмо.dataVersion       = Реквизиты.ВерсияДанных;

	КраткийТекст = ОбменСМобильными.ПолучитьКраткийТекст(XDTOПисьмо.body.Получить(), 500);

	XDTOПисьмо.shortText = Новый ХранилищеЗначения(КраткийТекст, Новый СжатиеДанных(9));
	XDTOПисьмо.wasRead   = РегистрыСведений.СведенияОПрочтении.ОбъектБылПрочтен(СсылкаПисьмо, МобильныйКлиент.Пользователь);

КонецПроцедуры

Функция ПолучитьXDTOИзФайла(СсылкаФайл, МобильныйКлиент, ПараметрыСинхронизации, ВыгрузитьПринудительноПолностью = Ложь) 

	СинхронизироватьПочту     = ПараметрыСинхронизации.СинхронизироватьПочту;
	СинхронизироватьЗадачи    = ПараметрыСинхронизации.СинхронизироватьЗадачи;
	МаксимальныйРазмерФайла   = ПараметрыСинхронизации.МаксимальныйРазмерФайла;
	ДанныеФайла               = РаботаСФайламиВызовСервера.ПолучитьДанныеФайла(СсылкаФайл);
	
	// ограничим список файлов выгружаемых на устройство теми которые там можно просмотреть
	// остальные - будут переданы по запросу пользователя
	ФильтроватьФайлыПоФормату = ПараметрыСинхронизации.ФильтроватьФайлыПоФормату;
	Если ФильтроватьФайлыПоФормату Тогда
		ФорматыПередаваемыхФайлов   = ПараметрыСинхронизации.ФорматыПередаваемыхФайлов;
		ЕстьОграничениеПоРасширению = 
			НЕ ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(ФорматыПередаваемыхФайлов, ДанныеФайла.Расширение);
	Иначе
		ЕстьОграничениеПоРасширению = Ложь;
	КонецЕсли;

	Если ВыгрузитьПринудительноПолностью Тогда
		ТолькоЗаголовок = Ложь;

	ИначеЕсли ЕстьОграничениеПоРасширению Тогда
		ТолькоЗаголовок = Истина;

	Иначе
		ТолькоЗаголовок = 
			МаксимальныйРазмерФайла > 0
			И ДанныеФайла.Размер > МаксимальныйРазмерФайла * 1024;
	КонецЕсли;

	ОбъектФайл = ОбменСМобильными_142.СоздатьОбъект("File");
	ОбъектФайл.id         = ДанныеФайла.Ссылка.УникальныйИдентификатор();
	ОбъектФайл.name       = ДанныеФайла.ПолноеНаименованиеВерсии;
	ОбъектФайл.extension  = ДанныеФайла.Расширение;
	ОбъектФайл.size       = ДанныеФайла.Размер;
	ОбъектФайл.baseFileId = УникальныйИдентификаторПустой();

	XDTOВладелец = ОбменСМобильными_142.СоздатьОбъект("Reference");
	XDTOВладелец.id = ДанныеФайла.Владелец.УникальныйИдентификатор();

	Если ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат Неопределено;
		КонецЕсли;

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеФайла.Владелец,
			"Дата");

		// Объект может устареть и не подлежит выгрузке на клиент
		Если РеквизитыВладельца.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			Возврат Неопределено;
		КонецЕсли;

		XDTOВладелец.type = "IncomingMail";

	ИначеЕсли ТипЗнч(ДанныеФайла.Владелец) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		Если Не СинхронизироватьПочту Тогда
			Возврат Неопределено;
		КонецЕсли;

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеФайла.Владелец,
			"Дата");

		// Объект может устареть и не подлежит выгрузке на клиент
		Если РеквизитыВладельца.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
			Возврат Неопределено;
		КонецЕсли;

		XDTOВладелец.type = "OutgoingMail";

	ИначеЕсли ЗначениеЗаполнено(ДанныеФайла.Владелец) Тогда

		Если Не СинхронизироватьЗадачи Тогда
			Возврат Неопределено;
		КонецЕсли;

		XDTOВладелец.type = "ActionTarget";

	Иначе
		XDTOВладелец.type = "";

	КонецЕсли;

	ОбъектФайл.owner = XDTOВладелец;

	Если Не ТолькоЗаголовок Тогда
		Попытка
			ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(СсылкаФайл);
			ОбъектФайл.fileData = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		Исключение
			ОбъектФайл.fileData = Новый ХранилищеЗначения(Неопределено);
			ТолькоЗаголовок     = Истина;
		КонецПопытки;
	Иначе
		ОбъектФайл.fileData = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;

	ОбъектФайл.headerOnly = ТолькоЗаголовок;

	Возврат ОбъектФайл;

КонецФункции

Функция ПолучитьXDTOИзСведенийОПрочтении(НаборЗаписей, ПараметрыСинхронизации)

	XDTOСостояниеПрочтения = ОбменСМобильными_142.СоздатьОбъект("ObjectReadState");
	XDTOСостояниеПрочтения.id = НаборЗаписей.Отбор.Объект.Значение.УникальныйИдентификатор();

	Если ТипЗнч(НаборЗаписей.Отбор.Объект.Значение) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		XDTOСостояниеПрочтения.objectType = "IncomingMail";

	ИначеЕсли ТипЗнч(НаборЗаписей.Отбор.Объект.Значение) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		XDTOСостояниеПрочтения.objectType = "OutgoingMail";

	КонецЕсли;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		XDTOСостояниеПрочтения.wasRead = Ложь;

	Иначе
		XDTOСостояниеПрочтения.wasRead = НаборЗаписей[0].Прочтен;

	КонецЕсли;

	Возврат XDTOСостояниеПрочтения;

КонецФункции

Функция ПолучитьXDTOУдалениеОбъектаПоСсылке(Ссылка)

	XDTOУдалениеОбъекта = ОбменСМобильными_142.СоздатьОбъект("ObjectDeletion");
	XDTOУдалениеОбъекта.id = Ссылка.УникальныйИдентификатор();

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		XDTOУдалениеОбъекта.objectType = "IncomingMail";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		XDTOУдалениеОбъекта.objectType = "OutgoingMail";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		XDTOУдалениеОбъекта.objectType = "Task";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		XDTOУдалениеОбъекта.objectType = "CalendarEvent";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ШаблоныТекстовПисем") Тогда
		XDTOУдалениеОбъекта.objectType = "MailTextTemplate";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		XDTOУдалениеОбъекта.objectType = "File";

	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контроль") Тогда
		XDTOУдалениеОбъекта.objectType = "Control";

	Иначе
		XDTOУдалениеОбъекта.objectType = "ActionTarget";
	КонецЕсли;

	Возврат XDTOУдалениеОбъекта;

КонецФункции

Функция ПолучитьXDTOИзСинхронизацияПапокПисемСМобильнымКлиентом(Объект)

	XDTOСинхронизируемыеПапки = ОбменСМобильными_142.СоздатьОбъект("MailFolderSynchronizationSettings");

	НаборПапки = РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.СоздатьНаборЗаписей();
	НаборПапки.Отбор.Пользователь.Установить(Объект.Отбор.Пользователь.Значение, Истина);
	НаборПапки.Прочитать();

	Для Каждого Запись Из НаборПапки Цикл
		XDTOСинхронизируемыеПапки.folderIds.Добавить(Запись.Папка.УникальныйИдентификатор());
	КонецЦикла;

	Возврат XDTOСинхронизируемыеПапки;

КонецФункции

Функция ПолучитьXDTOИзЗаписиРегистраПапкиПисем(ЗаписьРегистра)

	XDTOПисьмоВПапке = ОбменСМобильными_142.СоздатьОбъект("ObjectInFolder");

	Если ТипЗнч(ЗаписьРегистра.Папка) = Тип("СправочникСсылка.ПапкиПисем") Тогда

		XDTOПисьмоВПапке.folderType = "MailFolder";
		XDTOПисьмоВПапке.folderId   = ЗаписьРегистра.Папка.уникальныйИдентификатор();

	Иначе

		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Передача папок типа ""%1"" в ObjectInFolder не реализовано'"),
			Строка(ТипЗнч(ЗаписьРегистра.Письмо)));

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;
	
	XDTOПисьмоВПапке.objectId = ЗаписьРегистра.Письмо.УникальныйИдентификатор();

	Если ТипЗнч(ЗаписьРегистра.Письмо) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		XDTOПисьмоВПапке.objectType = "IncomingMail";

	ИначеЕсли ТипЗнч(ЗаписьРегистра.Письмо) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		XDTOПисьмоВПапке.objectType = "OutgoingMail";

	Иначе

		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Передача объектов типа ""%1"" в ObjectInFolder не реализовано'"),
			Строка(ТипЗнч(ЗаписьРегистра.Письмо)));

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Возврат XDTOПисьмоВПапке;

КонецФункции

Функция ПолучитьXDTOПоШаблонуТекстаПисьма(СсылкаШаблонТекста)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаШаблонТекста,
		"ВерсияДанных, Шаблон, Наименование");

	XDTOШаблонТекста = ОбменСМобильными_142.СоздатьОбъект("MailTextTemplate");
	XDTOШаблонТекста.id          = СсылкаШаблонТекста.УникальныйИдентификатор();
	XDTOШаблонТекста.dataVersion = Реквизиты.ВерсияДанных;
	XDTOШаблонТекста.text        = Реквизиты.Шаблон;
	XDTOШаблонТекста.name        = Реквизиты.Наименование;

	Возврат XDTOШаблонТекста;

КонецФункции

Функция ПолучитьXDTOИзНастроекШаблоновПисем(МобильныйКлиент)

	Пользователь = МобильныйКлиент.Пользователь;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		Пользователь.ИдентификаторПользователяИБ);

	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПодписьДляНовыхПисем =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПодписьДляНовыхПисем",
			Справочники.ШаблоныТекстовПисем.ПустаяСсылка(),
			,
			ПользовательИБ.Имя);

	ПодписьПриОтветеИПересылке =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПодписьПриОтветеИПересылке",
			Справочники.ШаблоныТекстовПисем.ПустаяСсылка(),
			,
			ПользовательИБ.Имя);

	XDTOНастройкиПодписи = ОбменСМобильными_142.СоздатьОбъект("MailFooterSettings");
	XDTOНастройкиПодписи.newMailFooterId      = УникальныйИдентификаторПустой();
	XDTOНастройкиПодписи.responseMailFooterId = УникальныйИдентификаторПустой();

	Если ЗначениеЗаполнено(ПодписьДляНовыхПисем) Тогда
		XDTOНастройкиПодписи.newMailFooterId = ПодписьДляНовыхПисем.УникальныйИдентификатор();
	КонецЕсли;

	Если ЗначениеЗаполнено(ПодписьПриОтветеИПересылке) Тогда
		XDTOНастройкиПодписи.responseMailFooterId = ПодписьПриОтветеИПересылке.УникальныйИдентификатор();
	КонецЕсли;

	Возврат XDTOНастройкиПодписи;

КонецФункции

Функция ПолучитьXDTOИзМаксимальногоРазмераФайла(Объект, ПараметрыСинхронизации, МобильныйКлиент)

	XDTOМаксимальныйРазмерФайла = ОбменСМобильными_142.СоздатьОбъект("MaxFileSizeToDownloadSetting");
	XDTOМаксимальныйРазмерФайла.fileSize = ПараметрыСинхронизации.МаксимальныйРазмер;

	Возврат XDTOМаксимальныйРазмерФайла;

КонецФункции

Функция ПолучитьXDTOПоСведениямОбОшибке(ИнформацияОбОшибке)

	XDTOОшибка = ОбменСМобильными_142.СоздатьОбъект("LogRecord");

	XDTOОшибка.recordType = "Error";
	Если Найти(ИнформацияОбОшибке.Описание, "info:") Тогда
		XDTOОшибка.recordType = "Information";
	ИначеЕсли Найти(ИнформацияОбОшибке.Описание, "warning:") Тогда
		XDTOОшибка.recordType = "Warning";
	КонецЕсли;

	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "info:", "");
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "warning:", "");

	Если XDTOОшибка.recordType = "Information"
		Или XDTOОшибка.recordType = "Warning" Тогда

		XDTOОшибка.description = ОписаниеОшибки;

	Иначе

		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "info:", "");
		ПодробноеОписаниеОшибки = СтрЗаменить(ПодробноеОписаниеОшибки, "warning:", "");
		ТекстИсключенияПодробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При синхронизации на сервере произошла ошибка:
				|%1
				|
				|#Текст ошибки (для администратора):#
				|%2'"),
			ОписаниеОшибки,
			ПодробноеОписаниеОшибки);

		XDTOОшибка.description = ТекстИсключенияПодробно;

	КонецЕсли;

	Возврат XDTOОшибка;

КонецФункции

Функция ПолучитьXDTOПоПредметуПроцесса(СсылкаНаОбъект) 

	XDTOОбщийПредметПроцесса = ОбменСМобильными_142.СоздатьОбъект("ActionTarget");
	XDTOОбщийПредметПроцесса.id               = СсылкаНаОбъект.УникальныйИдентификатор();
	XDTOОбщийПредметПроцесса.presentation     = Строка(СсылкаНаОбъект);
	XDTOОбщийПредметПроцесса.typePresentation = Строка(ТипЗнч(СсылкаНаОбъект));

	ПредставлениеДокумент = ПолучитьСодержаниеПредмета(СсылкаНаОбъект);

	Если ТипЗнч(ПредставлениеДокумент) = Тип("ТабличныйДокумент") Тогда

		ИмяФайла = ПолучитьИмяВременногоФайла("html");

		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);

		XDTOОбщийПредметПроцесса.detailsFormat = "html";

	ИначеЕсли ТипЗнч(ПредставлениеДокумент) = Тип("ФорматированныйДокумент") Тогда

		ИмяФайла = ПолучитьИмяВременногоФайла("txt");

		ПредставлениеДокумент.Записать(ИмяФайла, ТипФайлаФорматированногоДокумента.TXT);

		XDTOОбщийПредметПроцесса.detailsFormat = "txt";

	Иначе

		ИмяФайла     = ПолучитьИмяВременногоФайла("txt");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);

		СтрокаДляЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные данного типа (%1) пока не отображаются на мобильном клиенте'"),
			ТипЗнч(СсылкаНаОбъект));

		ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
		ЗаписьТекста.Закрыть();

		XDTOОбщийПредметПроцесса.detailsFormat = "txt";

	КонецЕсли;

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);

	XDTOОбщийПредметПроцесса.details = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));

	УдалитьФайлы(ИмяФайла);

	Возврат XDTOОбщийПредметПроцесса;

КонецФункции

// Формирует печатную форму для представления предмета задачи или процесса на мобильном клиенте
// Параметры:
// Объект - ссылка на объект или документ, находящийся в составе плана обмена Мобильный, 
//			который может быть предметом процесса
//
// Возвращаемое значение:
//	Табличный документ или форматированный документ с печатной формой предмета в зависимости 
Функция ПолучитьСодержаниеПредмета(Объект) 

	Перем КоллекцияПечатныхФорм, ПараметрыВывода;

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки",  Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы",   Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов",       Ложь);
		ПараметрыПечати.Вставить("ЭЦП",                Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи",     Ложь);
		ПараметрыПечати.Вставить("Рассмотрение",       Ложь);
		ПараметрыПечати.Вставить("Исполнение",         Ложь);
		ПараметрыПечати.Вставить("Ознакомление",       Ложь);
		ПараметрыПечати.Вставить("Поручения",          Ложь);
		ПараметрыПечати.Вставить("Задачи",             Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",       Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",    Истина);
		ПараметрыПечати.Вставить("Резолюции",          Истина);

		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.ВходящиеДокументы", 
			"Карточка", 
			Объект,
			ПараметрыПечати,
			КоллекцияПечатныхФорм, 
			Неопределено, 
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
		ПараметрыПечати.Вставить("Утверждение", 		Истина);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.ИсходящиеДокументы", 
			"Карточка", 
			Объект,
			ПараметрыПечати,
			КоллекцияПечатныхФорм, 
			Неопределено, 
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РеквизитыКарточки", 	Истина);
		ПараметрыПечати.Вставить("ПриложенныеФайлы", 	Истина);
		ПараметрыПечати.Вставить("ВерсииФайлов", 		Ложь);
		ПараметрыПечати.Вставить("ЭЦП", 				Ложь);
		ПараметрыПечати.Вставить("СвязанныеДокументы", 	Ложь);
		ПараметрыПечати.Вставить("ЖурналПередачи", 		Ложь);
	 	ПараметрыПечати.Вставить("Согласование", 		Истина);
		ПараметрыПечати.Вставить("Утверждение", 		Истина);
		ПараметрыПечати.Вставить("Рассмотрение", 		Истина);
		ПараметрыПечати.Вставить("Исполнение", 			Ложь);
		ПараметрыПечати.Вставить("Ознакомление", 		Ложь);
		ПараметрыПечати.Вставить("Поручения", 			Ложь);
		ПараметрыПечати.Вставить("Задачи", 				Ложь);
		ПараметрыПечати.Вставить("ДопРеквизиты",		Истина);
		ПараметрыПечати.Вставить("СоставКомплекта",		Истина);
		ПараметрыПечати.Вставить("ИсторияСрокаДействия",Ложь);
		ПараметрыПечати.Вставить("Резолюции",			Истина);

		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.ВнутренниеДокументы", 
			"Карточка", 
			Объект,
			ПараметрыПечати,
			КоллекцияПечатныхФорм, 
			Неопределено, 
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Корреспонденты") Тогда

		ПараметрыПечати = Новый Структура;

		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.Корреспонденты", 
			"Карточка",
			Объект,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			Неопределено,
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия") Тогда

		ВОтдельномДокументе  = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе;
		ВТаблице             = Перечисления.ТипыПрограммыПротокола.ВТаблице;
		ВМатериалах          = Перечисления.ТипыПрограммыПротокола.ВМатериалах;
		РеквизитыМероприятия = 
			ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект,
				"ТипПротокола, ТипПрограммы, ВидМероприятия");

		ТипПротокола = РеквизитыМероприятия.ТипПротокола;
		ТипПрограммы = РеквизитыМероприятия.ТипПрограммы;
		ПротокольноеМероприятие = РеквизитыМероприятия.ВидМероприятия.ПротокольноеМероприятие;

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("ЗаголовокОтчета"               , "");
		ПараметрыПечати.Вставить("ВыводитьДатуИМестоПроведения"  , Истина);
		ПараметрыПечати.Вставить("ВыводитьУчастников"            , Истина);
		ПараметрыПечати.Вставить("ВыводитьПредседателяИСекретаря", ПротокольноеМероприятие);
		ПараметрыПечати.Вставить("ВыводитьПрограмму"             , (ТипПрограммы = ВТаблице));
		ПараметрыПечати.Вставить("ВыводитьПротокол"              , (ТипПротокола = ВТаблице И ПротокольноеМероприятие));

		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.Мероприятия",
			"Карточка",
			Объект,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			Неопределено,
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда

		МассивОбъектов = Новый Массив();
		МассивОбъектов.Добавить(Объект);

		ПараметрыПечати = Новый Структура;
		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.ТемыОбсуждений", 
			"Карточка",
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			Неопределено,
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда

		МассивОбъектов = Новый Массив();
		МассивОбъектов.Добавить(Объект);

		ПараметрыПечати = Новый Структура;
		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.СообщенияОбсуждений", 
			"Карточка", 
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			Неопределено,
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда

		МассивОбъектов = Новый Массив();
		МассивОбъектов.Добавить(Объект);

		ПараметрыПечати = Новый Структура;
		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.Проекты", 
			"Карточка", 
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм, 
			Неопределено, 
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда

		МассивОбъектов = Новый Массив();
		МассивОбъектов.Добавить(Объект);

		ПараметрыПечати = Новый Структура;
		УправлениеПечатью.СформироватьПечатныеФормы(
			"Справочник.ПроектныеЗадачи", 
			"Карточка", 
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм, 
			Неопределено, 
			ПараметрыВывода);

		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			Если КоллекцияПечатныхФорм[0].ТабличныйДокумент <> Неопределено Тогда
				Возврат КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Объект) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

		ТекстHTML = ВстроеннаяПочтаСервер.СформироватьHTMLПредставлениеПисьма(
			Объект,
			Новый УникальныйИдентификатор,
			Истина, // ВыводитьШапку
			Истина, // СокращенныйСписокАдресатов
			Ложь); // ВключитьРежимРедактированияHTML

		ФорматированныйДок = Новый ФорматированныйДокумент();
		ФорматированныйДок.УстановитьHTML(ТекстHTML, Новый Структура());

		Возврат ФорматированныйДок;

	Иначе

		ВызватьИсключение НСтр("ru = 'Ошибка при получении содержания. Неизвестный тип объекта: '") + ТипЗнч(Объект);

	КонецЕсли;

КонецФункции

Функция ПолучитьXDTOПоЗаписиРабочегоКалендаря(Объект, ПараметрыСинхронизации)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект,
		"ДатаОкончания, ДатаОкончанияПовторения");

	// Если настроено повторение то объект должен передаваться до тех пор пока оно действует
	// и не меньше срока устаревания данных
	Если ЗначениеЗаполнено(Реквизиты.ДатаОкончанияПовторения) Тогда
		ГраницаУстареванияДанных = Реквизиты.ДатаОкончанияПовторения;
	Иначе
		ГраницаУстареванияДанных = Реквизиты.ДатаОкончания;
	КонецЕсли;

	// Объект может устареть и не подлежит выгрузке на клиент
	Если ГраницаУстареванияДанных < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
		Возврат Неопределено;
	КонецЕсли;

	XDTO = ОбменСМобильными_142.СоздатьОбъект("CalendarEvent");
	XDTO.id          = Объект.Ссылка.УникальныйИдентификатор();
	XDTO.description = Объект.Описание;
	XDTO.daylong     = Объект.ВесьДень;
	XDTO.startDate   = Объект.ДатаНачала;
	XDTO.endDate     = Объект.ДатаОкончания;
	XDTO.status      = ОбменСМобильными.ПолучитьПредставлениеСостоянияЗаписиРабочегоКалендаря(Объект.Состояние);
	XDTO.type        = ОбменСМобильными.ПолучитьПредставлениеТипаЗаписиКалендаря(Объект.ТипЗаписиКалендаря);

	Если Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		
		XDTO.recurrenceStartDate = Объект.ДатаНачалаПовторения;
		XDTO.recurrenceEndDate   = Объект.ДатаОкончанияПовторения;
		XDTO.interval   = Объект.ИнтервалПовторения;
		XDTO.byMonthDay = Объект.ПовторениеПоДнямМесяца;
		XDTO.byMonth    = Объект.ПовторениеПоМесяцам;
		XDTO.count      = Объект.КоличествоПовторов;
		XDTO.frequency  = ОбменСМобильными.ПолучитьПредставлениеЧастотыПовторений(Объект.ЧастотаПовторения);
		XDTO.endRule    = ОбменСМобильными.ПолучитьПредставлениеПравилаОкончанияПовторения(Объект.ПравилоОкончанияПовторения);

		Для Каждого ДеньПовторения Из Объект.ПовторениеПоДням Цикл

			XDTOДеньПовторения = ОбменСМобильными_142.СоздатьОбъект("RecurrenceDay");
			XDTOДеньПовторения.day        = ДеньПовторения.ДеньНедели;
			XDTOДеньПовторения.occurrence = ДеньПовторения.НомерВхождения;
			XDTO.byDay.Добавить(XDTOДеньПовторения);

		КонецЦикла;

		Для Каждого ИсключениеПовторения Из Объект.ИсключенияПовторения Цикл

			XDTOИсключениеПовторения = ОбменСМобильными_142.СоздатьОбъект("RecurrenceException");
			XDTOИсключениеПовторения.date = ИсключениеПовторения.ДатаИсключения;
			XDTOИсключениеПовторения.id   = ИсключениеПовторения.ЗаписьИсключения.УникальныйИдентификатор();
			XDTO.recurrenceException.Добавить(XDTOИсключениеПовторения);

		КонецЦикла;

	КонецЕсли;

	Цвет = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(Объект.Ссылка);

	XDTO.color       = ОбменСМобильными.ПолучитьПредставлениеЦвета(Цвет);
	XDTO.dataVersion = Объект.ВерсияДанных;

	Возврат XDTO;

КонецФункции

Функция ПолучитьXDTOПоНастройкеРабочегоКалендаря(НаборЗаписей)

	Если НаборЗаписей.Отбор.Настройка.Значение <> Перечисления.НастройкиЗаписейРабочегоКалендаря.Цвет
		Или Не ЗначениеЗаполнено(НаборЗаписей.Отбор.Событие.Значение)
		Или НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Цвет = НаборЗаписей[0].ЗначениеНастройки;

	XDTO = ОбменСМобильными_142.СоздатьОбъект("ObjectColor");
	XDTO.id    = НаборЗаписей.Отбор.Событие.Значение.УникальныйИдентификатор();
	XDTO.color = ОбменСМобильными.ПолучитьПредставлениеЦвета(Цвет);

	Возврат XDTO;

КонецФункции

Функция ПолучитьXDTOПоПользователю(СсылкаПользователь)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаПользователь,
		"Наименование, КонтактнаяИнформация");

	Если Не ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;

	XDTOПользователь = ОбменСМобильными_142.СоздатьОбъект("User");
	XDTOПользователь.id           = СсылкаПользователь.УникальныйИдентификатор();
	XDTOПользователь.presentation = Реквизиты.Наименование;

	КонтактнаяИнформация = Реквизиты.КонтактнаяИнформация.Выбрать();
	Пока КонтактнаяИнформация.Следующий() Цикл

		Если КонтактнаяИнформация.Вид <> Справочники.ВидыКонтактнойИнформации.EmailПользователя Тогда
			Продолжить;
		КонецЕсли;

		Представление = КонтактнаяИнформация.Представление;

		Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
			Представление,
			Реквизиты.Наименование);

		XDTOПользователь.addressee = ПолучитьXDTOИзАдресатаПочтовыхСообщений(Адресат);

	КонецЦикла;

	Возврат XDTOПользователь;

КонецФункции

Функция ПолучитьXDTOПоРоли(СсылкаРоль)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаРоль,
		"Наименование, КонтактнаяИнформация");

	XDTOРоль = ОбменСМобильными_142.СоздатьОбъект("Role");
	XDTOРоль.id           = СсылкаРоль.УникальныйИдентификатор();
	XDTOРоль.presentation = Реквизиты.Наименование;

	КонтактнаяИнформация = Реквизиты.КонтактнаяИнформация.Выбрать();

	Пока КонтактнаяИнформация.Следующий() Цикл

		Если КонтактнаяИнформация.Вид <> Справочники.ВидыКонтактнойИнформации.EmailРоли Тогда
			Продолжить;
		КонецЕсли;

		Представление = КонтактнаяИнформация.Представление;
		Адресат       = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(
			Представление,
			Реквизиты.Наименование);

		XDTOРоль.addressee = ПолучитьXDTOИзАдресатаПочтовыхСообщений(Адресат);

	КонецЦикла;

	Возврат XDTOРоль;

КонецФункции

Процедура ПодготовитьЗадачуКВыгрузке(СсылкаЗадача, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаЗадача,
		"БизнесПроцесс, Наименование, Автор, Описание, СрокИсполнения, Важность, Дата, Выполнена, ДатаИсполнения,
		|РезультатВыполнения, СостояниеБизнесПроцесса, ВерсияДанных");

	Если ТипЗнч(Реквизиты.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипЗнч(Реквизиты.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;

	XDTOЗадача = ОбменСМобильными_142.СоздатьОбъект("Task");

	ЗаполнитьВариантыВыполненияЗадачи(XDTOЗадача, СсылкаЗадача);

	XDTOЗадача.id               = СсылкаЗадача.УникальныйИдентификатор();
	XDTOЗадача.presentation     = Реквизиты.Наименование;
	XDTOЗадача.authorId         = Реквизиты.Автор.УникальныйИдентификатор();
	XDTOЗадача.shortDescription = ОбменСМобильными.ПолучитьКраткийТекст(Реквизиты.Описание, 500);
	XDTOЗадача.deadline         = Реквизиты.СрокИсполнения;
	XDTOЗадача.importance       = "normal";

	Если Реквизиты.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		XDTOЗадача.importance = "low";
	ИначеЕсли Реквизиты.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		XDTOЗадача.importance = "high";
	КонецЕсли;

	XDTOЗадача.creationDate = Реквизиты.Дата;
	Если Реквизиты.Выполнена Тогда
		XDTOЗадача.executionDate = Реквизиты.ДатаИсполнения;
	Иначе
		XDTOЗадача.executionDate = Дата(1,1,1);
	КонецЕсли;

	ПредставлениеФормы = ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаЗадача);
	XDTOЗадача.formPresentation = Новый ХранилищеЗначения(ПредставлениеФормы, Новый СжатиеДанных(9));

	XDTOЗадача.executionMark    = "NotExecuted";
	Если Реквизиты.Выполнена Тогда
		Результат = ПолучитьРезультатВыполненияЗадачи(СсылкаЗадача);

		Если Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			XDTOЗадача.executionMark = "ExecutedPositive";

		ИначеЕсли Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			XDTOЗадача.executionMark = "ExecutedNegative";

		ИначеЕсли Результат = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			XDTOЗадача.executionMark = "ExecutedAlmostPositive";

		КонецЕсли;

	КонецЕсли;

	ДобавитьПредметыКЗадаче(XDTOЗадача, ОбъектыXDTO, СсылкаЗадача, ПараметрыСинхронизации, МобильныйКлиент);

	XDTOЗадача.executionResult = Реквизиты.РезультатВыполнения;
	XDTOЗадача.processState    = "Active";
	Если Реквизиты.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		XDTOЗадача.processState = "Stopped";
	КонецЕсли;

	XDTOЗадача.dataVersion = Реквизиты.ВерсияДанных;

	ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Реквизиты.Автор, ПолучитьXDTOПоПользователю(Реквизиты.Автор), ОбъектыXDTO);
	ОбменСМобильными.ДобавитьXDTOВМассивXDTO(СсылкаЗадача, XDTOЗадача, ОбъектыXDTO);

КонецПроцедуры

Функция ПолучитьРезультатВыполненияЗадачи(СсылкаЗадача)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", СсылкаЗадача);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыВыполненияПроцессовИЗадач.Результат
		|ИЗ
		|	РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|ГДЕ
		|	РезультатыВыполненияПроцессовИЗадач.Объект = &Объект";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Результат;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура ЗаполнитьВариантыВыполненияЗадачи(XDTOЗадача, Объект)

	Если Объект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			1, 
			НСтр("ru = 'Согласен'"),
			НСтр("ru = 'Согл.'"), 
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			2,
			НСтр("ru = 'Согласен с замечаниями'"),
			НСтр("ru = 'Согл. с замеч.'"),
			"ExecutedAlmostPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			3, 
			НСтр("ru = 'Не согласен'"),
			НСтр("ru = 'Не согл.'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
			Или Объект.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			ДобавитьВариантИсполнения(
				XDTOЗадача,
				Объект,
				1,
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(
				XDTOЗадача,
				Объект,
				1,
				НСтр("ru = 'Завершить согласование'"),
				НСтр("ru = 'Завершить'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(
				XDTOЗадача,
				Объект,
				2,
				НСтр("ru = 'Повторить согласование'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			1,
			НСтр("ru = 'Утверждено'"),
			НСтр("ru = 'Утверждено'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			2,
			НСтр("ru = 'Не утверждено'"),
			НСтр("ru = 'Не утверждено'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(
				XDTOЗадача,
				Объект,
				1,
				НСтр("ru = 'Завершить утверждение'"),
				НСтр("ru = 'Завершить'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				2, 
				НСтр("ru = 'Повторить утверждение'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			1,
			НСтр("ru = 'Наложить резолюцию'"),
			НСтр("ru = 'Рассмотрено'"),
			"ExecutedAlmostPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			2,
			НСтр("ru = 'Направить на исполнение'"),
			НСтр("ru = 'На исполнение'"),
			"ExecutedAlmostPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться 
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			1,
			НСтр("ru = 'Ознакомился'"),
			НСтр("ru = 'Ознакомился'"),
			"ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
		Или Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			1,
			НСтр("ru = 'Выполнено'"),
			НСтр("ru = 'Выполнено'"),
			"ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача,
			Объект,
			1,
			НСтр("ru = 'Завершить исполнение'"),
			НСтр("ru = 'Завершить'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			2, 
			НСтр("ru = 'Вернуть на доработку'"),
			НСтр("ru = 'На доработку'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать
		Или  Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Контролировать Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			1, 
			НСтр("ru = 'Снять с контроля'"),
			НСтр("ru = 'Снять с контроля'"),
			"ExecutedPositive");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			1, 
			НСтр("ru = 'Завершить поручение'"),
			НСтр("ru = 'Завершить'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			2, 
			НСтр("ru = 'Вернуть на доработку'"),
			НСтр("ru = 'На доработку'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			1, 
			НСтр("ru = 'Зарегистрировано'"),
			НСтр("ru = 'Зарег.'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			2, 
			НСтр("ru = 'Не зарегистрировано'"),
			НСтр("ru = 'Не зарег.'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться Тогда	

		Если Объект.БизнесПроцесс.РезультатРегистрации = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

		Иначе
			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				1, 
				НСтр("ru = 'Ознакомился'"),
				НСтр("ru = 'Ознакомился'"),
				"ExecutedPositive");

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				2, 
				НСтр("ru = 'Повторить регистрацию'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNegative");

		КонецЕсли;

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			1, 
			НСтр("ru = 'Принять приглашение'"),
			НСтр("ru = 'Принять'"),
			"ExecutedPositive");

		ДобавитьВариантИсполнения(
			XDTOЗадача, 
			Объект, 
			2, 
			НСтр("ru = 'Отклонить приглашение'"),
			НСтр("ru = 'Отклонить'"),
			"ExecutedNegative");

	ИначеЕсли Объект.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда

		Если Объект.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками
			Или Объект.БизнесПроцесс.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				1, 
				НСтр("ru = 'Подтвердить приглашения'"),
				НСтр("ru = 'Подтвердить'"),
				"ExecutedPositive");

		Иначе

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				2, 
				НСтр("ru = 'Повторить приглашения'"),
				НСтр("ru = 'Повторить'"),
				"ExecutedNeutral");

			ДобавитьВариантИсполнения(
				XDTOЗадача, 
				Объект, 
				3, 
				НСтр("ru = 'Отменить приглашения'"),
				НСтр("ru = 'Отменить'"),
				"ExecutedNegative");

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВариантИсполнения(
		XDTOЗадача, 
		Объект,
		Результат,
		ПредставлениеДляБольшогоЭкрана,
		ПредставлениеДляМаленькогоЭкрана,
		Оценка)

	ВариантВыполнения = ОбменСМобильными_142.СоздатьОбъект("TaskExecutionResultVariant");

	ВариантВыполнения.executionResult         = Результат;
	ВариантВыполнения.presentationBigScreen   = ПредставлениеДляБольшогоЭкрана;
	ВариантВыполнения.presentationSmallScreen = ПредставлениеДляМаленькогоЭкрана;
	ВариантВыполнения.resultMark              = Оценка;

	XDTOЗадача.executionResultVariants.Добавить(ВариантВыполнения);

КонецПроцедуры

Процедура ДобавитьПредметыКЗадаче(XDTOЗадача, ОбъектыXDTO, СсылкаЗадача, ПараметрыСинхронизации, МобильныйКлиент)

	Для Каждого ПредметЗадачи Из СсылкаЗадача.Предметы Цикл

		Если ПредметЗадачи.Предмет = Неопределено
			Или Не ЗначениеЗаполнено(ПредметЗадачи.Предмет) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ПредметЗадачи.Предмет) = Тип("СправочникСсылка.Файлы") Тогда

			XDTOПрикрепленныйПредмет = ОбменСМобильными_142.СоздатьОбъект("AttachedProcessTarget");
			XDTOПрикрепленныйПредмет.id   = ПредметЗадачи.Предмет.УникальныйИдентификатор();
			XDTOПрикрепленныйПредмет.type = "File";

			XDTOФайл = ПолучитьXDTOИзФайла(ПредметЗадачи.Предмет, МобильныйКлиент, ПараметрыСинхронизации);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ПредметЗадачи.Предмет, XDTOФайл, ОбъектыXDTO);

			XDTOЗадача.targets.Добавить(XDTOПрикрепленныйПредмет);

		ИначеЕсли ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда

			XDTO = ПолучитьXDTOИзВходящегоПисьма(ПредметЗадачи.Предмет, ПараметрыСинхронизации, МобильныйКлиент, Истина);

			Если XDTO = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			XDTOПрикрепленныйПредмет = ОбменСМобильными_142.СоздатьОбъект("AttachedProcessTarget");
			XDTOПрикрепленныйПредмет.id   = ПредметЗадачи.Предмет.УникальныйИдентификатор();
			XDTOПрикрепленныйПредмет.type = "IncomingMail";

			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ПредметЗадачи.Предмет, XDTO, ОбъектыXDTO);

			XDTOЗадача.targets.Добавить(XDTOПрикрепленныйПредмет);

		ИначеЕсли ТипЗнч(ПредметЗадачи.Предмет) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда

			XDTO = ПолучитьXDTOИзИсходящегоПисьма(ПредметЗадачи.Предмет, ПараметрыСинхронизации, МобильныйКлиент, Истина);

			Если XDTO = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			XDTOПрикрепленныйПредмет = ОбменСМобильными_142.СоздатьОбъект("AttachedProcessTarget");
			XDTOПрикрепленныйПредмет.id   = ПредметЗадачи.Предмет.УникальныйИдентификатор();
			XDTOПрикрепленныйПредмет.type = "OutgoingMail";

			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ПредметЗадачи.Предмет, XDTO, ОбъектыXDTO);

			XDTOЗадача.targets.Добавить(XDTOПрикрепленныйПредмет);

		Иначе

			XDTOпредметПроцесса = ПолучитьXDTOПоПредметуПроцесса(ПредметЗадачи.Предмет);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ПредметЗадачи.Предмет, XDTOпредметПроцесса, ОбъектыXDTO);

			XDTOПрикрепленныйПредмет = ОбменСМобильными_142.СоздатьОбъект("AttachedProcessTarget");
			XDTOПрикрепленныйПредмет.id   = ПредметЗадачи.Предмет.УникальныйИдентификатор();
			XDTOПрикрепленныйПредмет.type = "ActionTarget";

			ПолучитьXDTOВсехПодчиненныхФайлов(ПредметЗадачи.Предмет, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент);

			XDTOЗадача.targets.Добавить(XDTOПрикрепленныйПредмет);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьXDTOИзЗадачи(ЗадачаСсылка, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO) 

	УстановитьПривилегированныйРежим(Истина);

	Если ЗадачаСсылка.ПометкаУдаления 
		Или ЗадачаСсылка.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван
		Или ЗадачаСсылка.БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда

		XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(ЗадачаСсылка);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ЗадачаСсылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

		Возврат;

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", МобильныйКлиент.Пользователь);
	Запрос.УстановитьПараметр("Ссылка"     , ЗадачаСсылка);
	Запрос.Текст =  
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка = &Ссылка
		|	И (ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|			ИЛИ 1 В
		|					(ВЫБРАТЬ
		|						1
		|					ИЗ
		|						РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|					ГДЕ
		|						ИсполнителиЗадач.РольИсполнителя = ЗадачаИсполнителя.РольИсполнителя
		|						И ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|						И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|						И ИсполнителиЗадач.Исполнитель = &Исполнитель)
		|				И ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда

		XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(ЗадачаСсылка);
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ЗадачаСсылка, XDTOУдалениеОбъекта, ОбъектыXDTO);
		Возврат;

	КонецЕсли;
	
	Для Каждого Предмет Из ЗадачаСсылка.Предметы Цикл

		Если Предмет.РольПредмета = Перечисления.РолиПредметов.Заполняемый
			И Не ЗначениеЗаполнено(Предмет.Предмет) Тогда

			XDTOУдалениеОбъекта = ПолучитьXDTOУдалениеОбъектаПоСсылке(ЗадачаСсылка);
			ОбменСМобильными.ДобавитьXDTOВМассивXDTO(ЗадачаСсылка, XDTOУдалениеОбъекта, ОбъектыXDTO);

			Возврат;

		КонецЕсли;

	КонецЦикла;

	ПодготовитьЗадачуКВыгрузке(ЗадачаСсылка, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент);

КонецПроцедуры

Функция ПолучитьXDTOПоПроцессуИсполнение(Объект, МассивXDTO, МобильныйКлиент) 

	XDTOИсполнение = ОбменСМобильными_142.СоздатьОбъект("ExecutionProcess");

	XDTOИсполнение.id          = Объект.Ссылка.УникальныйИдентификатор();
	XDTOИсполнение.description = Объект.Описание;
	XDTOИсполнение.name        = Объект.Наименование;
	XDTOИсполнение.deadline    = Объект.СрокИсполнения;
	XDTOИсполнение.importance  = "normal";

	Если Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Низкая Тогда
		XDTOИсполнение.importance = "low";
	ИначеЕсли Объект.Важность = перечисления.ВариантыВажностиЗадачи.Высокая Тогда
		XDTOИсполнение.importance = "high";
	КонецЕсли;

	Для Каждого Исполнитель Из Объект.Исполнители Цикл

		Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			XDTOИсполнитель = ОбменСМобильными_142.СоздатьОбъект("User");
		ИначеЕсли ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			XDTOИсполнитель = ОбменСМобильными_142.СоздатьОбъект("Role");
		КонецЕсли;

		XDTOИсполнитель.id           = Исполнитель.Исполнитель.УникальныйИдентификатор();
		XDTOИсполнитель.presentation = Строка(Исполнитель.Исполнитель);

		XDTOИсполнение.performers.Добавить(XDTOИсполнитель);

	КонецЦикла;

	XDTOИсполнение.creationDate = Объект.Дата;
	XDTOИсполнение.startDate    = Объект.ДатаНачала;
	XDTOИсполнение.endDate      = Объект.ДатаЗавершения;

	XDTOИсполнение.executionHistory = "";
	МенеджерЗаписиРегистра = РегистрыСведений.ИсторияВыполненияЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.БизнесПроцесс = Объект.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		XDTOИсполнение.executionHistory = МенеджерЗаписиРегистра.Описание;
	КонецЕсли;

	XDTOИсполнение.mainTaskId = Новый УникальныйИдентификатор();
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		XDTOИсполнение.mainTaskId = Объект.ГлавнаяЗадача.УникальныйИдентификатор();
	КонецЕсли;

	XDTOИсполнение.dataVersion = Объект.ВерсияДанных;
	XDTOИсполнение.state       = "Active";
	Если Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		XDTOИсполнение.state = "Stopped";
	КонецЕсли;

	Возврат XDTOИсполнение;

КонецФункции

Функция ПолучитьXDTOИзНахожденияПисьмаВВетке(ПисьмоСсылка, ВеткаПереписки );

	XDTOПисьмоВВетке = ОбменСМобильными_142.СоздатьОбъект("LetterInMailThread");

	XDTOПисьмоВВетке.letter     = ПолучитьXDTOПоСсылке(ПисьмоСсылка);
	XDTOПисьмоВВетке.threadId   = ВеткаПереписки.УникальныйИдентификатор();
	XDTOПисьмоВВетке.rootLetter = ПолучитьXDTOПоСсылке(ВеткаПереписки.КорневоеПисьмо);

	Возврат XDTOПисьмоВВетке;

КонецФункции

Процедура ПолучитьXDTOИзИсполнителя(Исполнитель, ОбъектыXDTO)

	XDTOИсполнитель = Неопределено;
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		XDTOИсполнитель = ПолучитьXDTOПоПользователю(Исполнитель)

	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		XDTOИсполнитель = ПолучитьXDTOПоРоли(Исполнитель)

	КонецЕсли;

	Если Не XDTOИсполнитель = Неопределено Тогда
		ОбменСМобильными.ДобавитьXDTOВМассивXDTO(Исполнитель, 
			XDTOИсполнитель,
			ОбъектыXDTO);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьXDTOПоКонтролю(РеквизитыКонтроля, ОбъектыXDTO, МобильныйКлиент)

	Если ЗначениеЗаполнено(РеквизитыКонтроля.ДатаСнятияСКонтроля) или РеквизитыКонтроля.СнятСконтроля Тогда
		XDTOУдаление = ПолучитьXDTOУдалениеОбъектаПоСсылке(РеквизитыКонтроля.Ссылка);
		Возврат XDTOУдаление;
	КонецЕсли;

	XDTOКонтроль = ОбменСМобильными_142.СоздатьОбъект("Control");
	XDTOКонтроль.authorId         = РеквизитыКонтроля.Автор.УникальныйИдентификатор();
	XDTOКонтроль.controlStartDate = РеквизитыКонтроля.ДатаПостановкиНаКонтроль;
	XDTOКонтроль.controlEndDate   = РеквизитыКонтроля.ДатаСнятияСКонтроля;
	XDTOКонтроль.controller       = ПолучитьXDTOПоСсылке(РеквизитыКонтроля.Контролер);
	XDTOКонтроль.description      = РеквизитыКонтроля.Описание;
	XDTOКонтроль.active           = РеквизитыКонтроля.ПоставленНаКонтроль;
	XDTOКонтроль.deactivated      = РеквизитыКонтроля.СнятСКонтроля;
	XDTOКонтроль.deadline         = РеквизитыКонтроля.СрокИсполнения;
	XDTOКонтроль.id               = РеквизитыКонтроля.Ссылка.УникальныйИдентификатор();
	XDTOКонтроль.dataVersion      = РеквизитыКонтроля.ВерсияДанных;
	XDTOКонтроль.source           = ПолучитьXDTOПоСсылке(РеквизитыКонтроля.Источник);
	XDTOКонтроль.target           = ПолучитьXDTOПоСсылке(РеквизитыКонтроля.Предмет);
	XDTOКонтроль.name             = РеквизитыКонтроля.Наименование;

	Исполнители = РеквизитыКонтроля.Исполнители.Выбрать();
	Пока Исполнители.Следующий() Цикл

		XDTOИсполнительКонтроля = ОбменСМобильными_142.СоздатьОбъект("ControlPerformer");

		XDTOИсполнительКонтроля.main              = Исполнители.Ответственный;
		XDTOИсполнительКонтроля.performer         = ПолучитьXDTOПоСсылке(Исполнители.Исполнитель);
		XDTOИсполнительКонтроля.taskIsExecuted    = Исполнители.Исполнено;
		XDTOИсполнительКонтроля.taskExecutionDate = Исполнители.ДатаИсполнения;
		XDTOИсполнительКонтроля.source            = ПолучитьXDTOПоСсылке(Исполнители.Источник);
		XDTOИсполнительКонтроля.controlEndDate    = Исполнители.ДатаКонтроля;
		XDTOИсполнительКонтроля.taskControlled    = Исполнители.Проконтролировано;

		XDTOКонтроль.performers.Добавить(XDTOИсполнительКонтроля);

		ПолучитьXDTOИзИсполнителя(Исполнители.Исполнитель, ОбъектыXDTO)

	КонецЦикла;

	ОбменСМобильными.ДобавитьXDTOВМассивXDTO(РеквизитыКонтроля.Автор, 
		ПолучитьXDTOПоПользователю(РеквизитыКонтроля.Автор), 
		ОбъектыXDTO);

	ПолучитьXDTOИзИсполнителя(РеквизитыКонтроля.Контролер, ОбъектыXDTO);

	Возврат XDTOКонтроль;

КонецФункции

Функция ПолучитьXDTOПоСсылке(ОбъектСсылка)

	Если ОбъектСсылка = Неопределено Или Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;

	XDTOСсылка = ОбменСМобильными_142.СоздатьОбъект("Reference");
	XDTOСсылка.id = ОбъектСсылка.УникальныйИдентификатор();

	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		XDTOСсылка.type = "User";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		XDTOСсылка.type = "Role";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		XDTOСсылка.type = "IncomingMail";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		XDTOСсылка.type = "OutgoingMail";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		XDTOСсылка.type = "ExecutionProcess";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		XDTOСсылка.type = "Task";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		XDTOСсылка.type = "CalendarEvent";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		XDTOСсылка.type = "File";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВеткиПереписки") Тогда
		XDTOСсылка.type = "MailThread";

	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.АдресатыПочтовыхСообщений") Тогда
		XDTOСсылка.type = "Addressee";

	Иначе
		XDTOСсылка.type = "ActionTarget";

	КонецЕсли;

	Возврат XDTOСсылка;

КонецФункции

Процедура ДобавитьКорневоеПисьмоВеткиВМассивXDTO(ВеткаПереписки, ПараметрыСинхронизации, МобильныйКлиент, ОбъектыXDTO)

	КорневоеПисьмо = ВеткаПереписки.КорневоеПисьмо;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КорневоеПисьмо,
		"Дата");

	// Объект может устареть и не подлежит выгрузке на клиент
	Если Реквизиты.Дата < (ТекущаяДата() - ПараметрыСинхронизации.СрокУстареванияДанных * 86400) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(КорневоеПисьмо) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		XDTOПисьмо = ПолучитьXDTOИзВходящегоПисьма(КорневоеПисьмо, ПараметрыСинхронизации, МобильныйКлиент);

	ИначеЕсли ТипЗнч(КорневоеПисьмо) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		XDTOПисьмо = ПолучитьXDTOИзИсходящегоПисьма(КорневоеПисьмо, ПараметрыСинхронизации, МобильныйКлиент);

	КонецЕсли;

	Если XDTOПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбменСМобильными.ДобавитьXDTOВМассивXDTO(КорневоеПисьмо, XDTOПисьмо, ОбъектыXDTO);
	ПолучитьXDTOВсехПодчиненныхФайлов(КорневоеПисьмо, ОбъектыXDTO, ПараметрыСинхронизации, МобильныйКлиент)

КонецПроцедуры


#Область ПолучениеПредставленияКарточкиЗадачиВHTML

Процедура СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение)

	БизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаЗадачу, "БизнесПроцесс");

	//список исполнителей
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", ТочкаМаршрутаОтвИсполнение);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Ответственный_исполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.Исполнитель
		|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
		|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)";

	СформироватьТаблицуИсполнителей(Результат, Запрос, "Ход исполнения:");

КонецПроцедуры

Процедура СформироватьТаблицуИсполнителей(Результат, Запрос, Заголовок)

	Выборка = Запрос.Выполнить().Выгрузить();

	Если Выборка.Количество() > 0 Тогда

		Результат = Результат + "&nbsp;<span class = ""TextStyle""><b>" + Заголовок + "</b></span>";
		Результат = Результат + "&nbsp;<table border=""1"" class = ""TextStyle""><tbody><tr  align=""center"" class = ""PropName"">";

		Для Каждого Столбец Из Выборка.Колонки Цикл
			Результат = Результат + "<td><b>" + СтрЗаменить(Столбец.Имя,"_"," ") + "</b></td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Выборка Цикл

		Результат = Результат + "<tr class = ""PropValue"">";

		Для Счетчик = 0 ПО Выборка.Колонки.Количество()-1 Цикл
			Результат = Результат + "<td>" + ?(ЗначениеЗаполнено(СтрокаТаблицы[Счетчик]), СтрокаТаблицы[Счетчик], "&nbsp;") + "</td>";
		КонецЦикла;

		Результат = Результат + "</tr>";

	КонецЦикла;

	Если Выборка.Количество() > 0 Тогда
		Результат = Результат + "</tbody></table>";
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьHTMLПредставлениеФормыЗадачи(СсылкаНаЗадачу) 

	ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(СсылкаНаЗадачу);
	ИмяФормы       = ПараметрыФормы.Имяформы;

	//заголовок HTML
	Результат = 
		"<html>
		|<head>
			|<meta name=""viewport"" %content% http-equiv=""Content-Type""/>
		|</head>
		|<body>
			|<div style = ""font-family:Arial;font-size:14px;"">";
	Результат = СтрЗаменить(Результат, "%content%", "content = ""text/html,width=device-width,initial-scale=1""");
	//Заполняется шапка, общая для всех задач
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		СсылкаНаЗадачу,
		"Наименование,
		|Описание,
		|СрокИсполнения,
		|Важность,
		|Автор,
		|БизнесПроцесс");
	БизнесПроцесс = РеквизитыЗадачи.БизнесПроцесс;
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		БизнесПроцесс,
		"ДатаНачала");

	//Задача
	Результат = 
		Результат + 
		ПолучитьHTMLреквизита(НСтр("ru = 'Задача'"), СтрЗаменить(РеквизитыЗадачи.Наименование, """","'"));

	//Автор
	Результат = 
		Результат + 
		ПолучитьHTMLреквизита(НСтр("ru = 'Автор'"), СтрЗаменить(РеквизитыЗадачи.Автор, """","'"));

	//Описание
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Описание) Тогда
		Результат = 
			Результат + 
			ПолучитьHTMLреквизита(НСтр("ru = 'Описание'"),  РеквизитыЗадачи.Описание);
	КонецЕсли;

	//Срок
	Если ЗначениеЗаполнено(РеквизитыЗадачи.СрокИсполнения) Тогда
		Результат = 
			Результат + 
			ПолучитьHTMLреквизита(НСтр("ru = 'Срок'"), Формат(РеквизитыЗадачи.СрокИсполнения,"ДФ='dd.MM.yyyy ЧЧ:мм'"), Ложь);
	КонецЕсли;

	//Важность
	Результат = 
		Результат + 
		ПолучитьHTMLреквизита(НСтр("ru = 'Важность'"), Строка(РеквизитыЗадачи.Важность), Ложь);

	//Дата
	Результат = 
		Результат + 
		ПолучитьHTMLреквизита(НСтр("ru = 'Дата'"), РеквизитыБизнесПроцесса.ДатаНачала, Ложь);

	//история выполнения
	ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(БизнесПроцесс);
	Если ЗначениеЗаполнено(ИсторияВыполнения) Тогда
		ИсторияВыполнения = СтрЗаменить(ИсторияВыполнения, Символы.ПС, "<br/>");
		Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'История выполнения'"), ИсторияВыполнения, Истина);
	КонецЕсли;

	//Дополняем форму задачи элементами, специфичными только для нее
	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") Тогда

		Если ИмяФормы = "БизнесПроцесс.Исполнение.Форма.ФормаЗадачиОтвИсполнителя" Тогда

			//список соисполнителей
			Результат = Результат + "</tbody></table>";

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
			Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА ЗадачаИсполнителя.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
				|			ТОГДА ЗадачаИсполнителя.Исполнитель
				|		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
				|	КОНЕЦ КАК Исполнитель,
				|	ЗадачаИсполнителя.Наименование,
				|	ЗадачаИсполнителя.Выполнена,
				|	ЗадачаИсполнителя.ДатаИсполнения КАК Дата_исполнения,
				|	ЗадачаИсполнителя.СрокИсполнения КАК Срок_исполнения,
				|	ЗадачаИсполнителя.РезультатВыполнения КАК Результат_выполнения
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";

			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Соисполнители:'"));

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Поручение") Тогда

		Если Имяформы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиКонтролера" Тогда
			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Выполнить);
			ТочкиМаршрута.Добавить(БизнесПроцессы.Поручение.ТочкиМаршрута.Проверить);
			ТочкаМаршрутаОтвИсполнение = Неопределено;
			СформироватьТаблЧастьФормыКонтролера(Результат, СсылкаНаЗадачу, ТочкиМаршрута, ТочкаМаршрутаОтвИсполнение);
		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда
			НайденнаяСтрока = БизнесПроцесс.РезультатыСогласования.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);
		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться" Тогда

			//Цикл
			НайденнаяСтрока =  БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			
			//Результат согласования
			РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
			СтрокиИтерации = БизнесПроцесс.РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
					Прервать;
				КонецЕсли;
				
				Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
					РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
				КонецЕсли;
			КонецЦикла;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Результат согласования'"), РезультатСогласования, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Утверждение") Тогда

		Если Имяформы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации, Ложь);

		КонецЕсли;

		Если Имяформы = "БизнесПроцесс.Утверждение.Форма.ФормаЗадачиОзнакомиться" Тогда

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(СсылкаНаЗадачу, "ЗадачаИсполнителя");
			НомерИтерации   = "";
			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			// результат утверждения
			РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
			СтрокиИтерации = БизнесПроцесс.РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерации));
			Для Каждого Строка Из СтрокиИтерации Цикл

				РезультатВыполнения = Строка.ЗадачаИсполнителя.РезультатВыполнения;
				УтверждающееЛицо = Строка.ЗадачаИсполнителя.Исполнитель;
				ДатаУтверждения = Строка.ЗадачаИсполнителя.ДатаИсполнения;

				Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
					РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
					Прервать;
				КонецЕсли;

			КонецЦикла;

			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Результат утверждения'"), РезультатУтверждения, Ложь);
			Результат = Результат + ПолучитьHTMLреквизита(НСтр("ru = 'Цикл'"), НомерИтерации);

		КонецЕсли;

	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда

		РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			БизнесПроцесс,
			"ДатаНачала,
			|ДатаЗавершения,
			|МестоПроведения,
			|РезультатПриглашения,
			|НомерИтерации");

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаНачала) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата начала мероприятия'"), 
				Формат(РеквизитыПроцесса.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаЗавершения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Дата завершения'"), 
				Формат(РеквизитыПроцесса.ДатаЗавершения, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;

		Если ЗначениеЗаполнено(РеквизитыПроцесса.МестоПроведения) Тогда
			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Место проведения'"), 
				РеквизитыПроцесса.МестоПроведения);
		КонецЕсли;

		Если ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОзнакомиться" Тогда

			Если РеквизитыПроцесса.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками
				Или РеквизитыПроцесса.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками Тогда
				Результат = Результат + ПолучитьHTMLреквизита(
					НСтр("ru = 'Цикл'"), 
					РеквизитыПроцесса.НомерИтерации);
			КонецЕсли;

			Результат = Результат + ПолучитьHTMLреквизита(
				НСтр("ru = 'Результат'"), 
				РеквизитыПроцесса.РезультатПриглашения);

			ТочкиМаршрута = Новый Массив;
			ТочкиМаршрута.Добавить(БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить);

			НайденнаяСтрока = БизнесПроцесс.РезультатыОзнакомлений.Найти(
				СсылкаНаЗадачу, "ЗадачаИсполнителя");

			Если НайденнаяСтрока <> Неопределено Тогда 
				НомерИтерации = НайденнаяСтрока.НомерИтерации;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс); 
			Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
			Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЗадачаЗадачаИсполнителя.Исполнитель КАК Участник,
				|	ЗадачаЗадачаИсполнителя.ДатаИсполнения КАК Дата_ответа,
				|	РезультатыПриглашения.РезультатПриглашения КАК Результат,
				|	РезультатыПриглашения.ЯвкаОбязательна КАК Явка_обязательна
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
				|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Приглашение.РезультатыПриглашения КАК РезультатыПриглашения
				|		ПО ЗадачаЗадачаИсполнителя.Ссылка = РезультатыПриглашения.ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
				|	И ЗадачаЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
				|	И РезультатыПриглашения.НомерИтерации = &НомерИтерации";


			СформироватьТаблицуИсполнителей(Результат, Запрос, НСтр("ru = 'Участники:'"));

		КонецЕсли;

	КонецЕсли;

	//закрываем HTML
	Результат = Результат + "</div></body></html>";

	Возврат Результат;

КонецФункции

Функция ПолучитьHTMLреквизита(ИмяРеквизита, ЗначениеРеквизита, Вертикально = Ложь)

	ЗначениеРеквизитаСтр = "&nbsp;";

	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда

		Если ТипЗнч(ЗначениеРеквизита) <> Тип("Строка") Тогда
			ЗначениеРеквизитаСтр = Строка(ЗначениеРеквизита);
		Иначе
			ЗначениеРеквизитаСтр = ЗначениеРеквизита;
		КонецЕсли;

	КонецЕсли;

	Если Вертикально Тогда
		Результат = "<p><b>" + ИмяРеквизита + ":</b></p><p>" + ЗначениеРеквизитаСтр + "</p>";
	Иначе
		Результат = "<p><b>" + ИмяРеквизита + ":</b> " + ЗначениеРеквизитаСтр + "</p>";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти


#КонецОбласти
