////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентСервер: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	ТекстСостоянияЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка);
	
	Если НЕ Форма = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстСостоянияЭД", ТекстСостоянияЭД);
		СтруктураПараметров.Вставить("ВидОперации", "УстановкаГиперссылки");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Гиперссылка);
		#Если  ТолстыйКлиентОбычноеПриложение Тогда
			ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#Иначе
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено.'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции

// Определяет отбор динамического списка в зависимости от наличия режима совместимости
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Возврат Список.КомпоновщикНастроек.Настройки.Отбор;
	Иначе
		Возврат Список.Отбор;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Определяет необходимость конкретного действия из перечня действий.
//
// Параметры:
//  ПереченьДействий - Строка, перечень действий, которые должны быть совершены с объектом
//  Действие - Строка, конкретное действие, которое нужно найти в перечне действий
// 
// Возвращаемое значение:
//  Булево - Если действие найдено - возвращается Истина, иначе Ложь
//
Функция ЕстьДействие(ПереченьДействий, Действие) Экспорт
	
	Если Найти(ПереченьДействий, Действие) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со служебными ЭД

// В функции выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
// формирование, утверждение, подписание, отправка.
//
// Параметры:
//  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
//    документы, владельцы обрабатываемых служебных ЭД).
//  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
//    и уведомление об уточнении).
//  ТекстУведомления - строка - текст уведомления, введенный пользователем, отклонившим ЭД (имеет смысл,
//    только для ВидЭД = УведомлениеОбУточнении).
//
// Возвращаемое значение:
//  Булево - Истина - действия со служебными ЭД выполнены, иначе - Ложь.
//
Функция СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления = "") Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	
	Если ТипЗнч(МассивЭД) = Тип("Массив") Тогда
		// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
		// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
		// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
		// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
		НемедленнаяОтправкаЭД = Неопределено;
		ВыполнятьАвторизациюНаСервере = Неопределено;
		ВыполнятьКриптооперацииНаСервере = Неопределено;
		ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере,
			ВыполнятьАвторизациюНаСервере, НемедленнаяОтправкаЭД);
		Если МассивЭД.Количество() > 0 И ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении") Тогда
			ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД);
			ВыполнятьКриптооперацииНаСервере = ВыполнятьАвторизациюНаСервере;
		КонецЕсли;
		Если МассивЭД.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		СтМассивовСтруктурСертификатов = Новый Структура;
		Если НЕ ВыполнятьКриптооперацииНаСервере ИЛИ (НЕ ВыполнятьАвторизациюНаСервере И НемедленнаяОтправкаЭД) Тогда
			#Если Не Сервер И Не ВнешнееСоединение Тогда
				Попытка
					МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
				Исключение
					МассивСтруктурСертификатов = Новый Массив;
				КонецПопытки;
				СтМассивовСтруктурСертификатов.Вставить("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатов);
			#КонецЕсли
		КонецЕсли;
		СтруктураСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(
			МассивЭД, СтМассивовСтруктурСертификатов, ВидЭД, Истина, НемедленнаяОтправкаЭД);
		#Если Не Сервер И Не ВнешнееСоединение Тогда
			СоотвСертификатовИИхСтруктур = Неопределено;
			Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
				Попытка
					МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					МенеджерКриптографии = Неопределено;
				КонецПопытки;
				
				МассивКУдалению = Новый Массив;
				Для Каждого Элемент Из СоотвСертификатовИИхСтруктур Цикл
					СтруктураСертификата = Элемент.Значение;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
						
						ЭлектронныеДокументыСлужебныйКлиент.ПроверитьСрокДействияСертификата(Элемент.Ключ);
						Если Не ЭлектронныеДокументыСлужебныйКлиент.ПолучитьПарольКСертификату(Элемент.Ключ, СтруктураСертификата,
							НСтр("ru = 'Подписание служебных электронных документов'")) Тогда
							
							МассивКУдалению.Добавить(Элемент.Ключ);
							Продолжить;
						КонецЕсли;
						
						// Если в системе настроена отложенная отправка, то маркеры не нужны.
						Если Не НемедленнаяОтправкаЭД Тогда
							Продолжить;
						КонецЕсли;
						Маркер = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если НЕ СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер)
							И СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
							И МенеджерКриптографии <> Неопределено Тогда
							Попытка
								СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
								Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
								СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Удалим из соответствия сертификаты, по которым пользователь отказался ввести пароль.
				Для Каждого Элемент Из МассивКУдалению Цикл
					СоотвСертификатовИИхСтруктур.Удалить(Элемент);
				КонецЦикла;
			КонецЕсли;
		#КонецЕсли
		
		СтСоотвСоглашенийИМассивовЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияСоСлужебнымиЭД(МассивЭД,
			ВидЭД, СтруктураСоответствий, ТекстУведомления);
		
		СтруктураСчетчиков = СтСоотвСоглашенийИМассивовЭД.СтруктураСчетчиков;
		КолСформированных = КолСформированных + СтруктураСчетчиков.КолСформированных;
		КолУтвержденных   = КолУтвержденных + СтруктураСчетчиков.КолУтвержденных;
		КолПодписанных    = КолПодписанных + СтруктураСчетчиков.КолПодписанных;
		КолПодготовленных = КолПодготовленных + СтруктураСчетчиков.КолПодготовленных;
		КолОтправленных   = КолОтправленных + СтруктураСчетчиков.КолОтправленных;
		
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
			
			СоотвСоглашенийИСертификатовПодписи = Неопределено;
			СоотвСоглашенийИСертификатовАвторизации = Неопределено;
			СоотвСоглашенийИМассивовЭД = Неопределено;
			МассивЭДКОтправке = Новый Массив;
			СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
			
			Если СтСоотвСоглашенийИМассивовЭД.Свойство("СоотвСоглашенийИМассивовЭДКПодписи", СоотвСоглашенийИМассивовЭД)
				И СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовПодписи", СоотвСоглашенийИСертификатовПодписи)
				И СоотвСоглашенийИМассивовЭД.Количество() > 0 И СоотвСоглашенийИСертификатовПодписи.Количество() > 0
				И НЕ ВыполнятьКриптооперацииНаСервере Тогда
				
				Если НЕ СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации",
					СоотвСоглашенийИСертификатовАвторизации) Тогда
					СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
				КонецЕсли;
				
				Для Каждого Элемент Из СоотвСоглашенийИМассивовЭД Цикл
					СоглашениеЭД = Элемент.Ключ;
					Сертификат = СоотвСоглашенийИСертификатовПодписи.Получить(СоглашениеЭД);
					Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
						Продолжить;
					КонецЕсли;
					МассивЭДкОбработке = Элемент.Значение;
					Если МассивЭДкОбработке.Количество() > 0 Тогда
						
						#Если Сервер ИЛИ ВнешнееСоединение Тогда
							Подписан = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, Сертификат, СтруктураСертификата);
						#Иначе
							Подписан = ЭлектронныеДокументыСлужебныйКлиент.ПодписатьЭДОпределеннымСертификатом(МассивЭДкОбработке, Сертификат, СтруктураСертификата);
						#КонецЕсли
						
						// Добавим подписанные ЭД в массив к отправке и сформируем соответствие соглашений и структур сертификатов.
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							ДобавитьВМассивКОтправке = Ложь;
							Сертификат = СоотвСоглашенийИСертификатовАвторизации.Получить(СоглашениеЭД);
							Если ЗначениеЗаполнено(Сертификат) ИЛИ НЕ НемедленнаяОтправкаЭД Тогда
								СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
								Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
									СоотвСоглашенийИСтруктурСертификатов.Вставить(СоглашениеЭД, СтруктураСертификата);
									ДобавитьВМассивКОтправке = Истина;
								КонецЕсли;
							КонецЕсли;
							// Если в системе настроена отложенная отправка, то сертификаты авторизации не нужны.
							Если НЕ НемедленнаяОтправкаЭД ИЛИ ДобавитьВМассивКОтправке Тогда
								Для Каждого ПодписанныйЭД Из МассивЭДкОбработке Цикл
									МассивЭДКОтправке.Добавить(ПодписанныйЭД);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивЭДКОтправке.Количество() > 0 Тогда
				СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправке,
					Истина, СоотвСоглашенийИСтруктурСертификатов);
				Отправленных = 0;
				Если СтруктураРезультата.Свойство("КолОтправленных", Отправленных) И Отправленных > 0 Тогда
					КолОтправленных = КолОтправленных + Отправленных;
				КонецЕсли;
				Подготовленных = 0;
				Если СтруктураРезультата.Свойство("КолПодготовленных", Подготовленных) И Подготовленных > 0 Тогда
					КолПодготовленных = КолПодготовленных + Подготовленных;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОбработанныеЭД = Ложь;
	Если КолСформированных + КолПодписанных + КолОтправленных > 0 Тогда
		
		#Если Не (Сервер Или ВнешнееСоединение) Тогда
			Оповестить("ОбновитьСостояниеЭД");
		#КонецЕсли
		ЕстьОбработанныеЭД = Истина;
	КонецЕсли;
	
	Возврат ЕстьОбработанныеЭД;
	
КонецФункции
