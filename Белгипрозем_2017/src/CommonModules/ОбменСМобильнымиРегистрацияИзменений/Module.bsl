// Возвращает массив узлов обмена, на которых следует зарегистрировать изменения указанного элемента данных
Функция ПолучитьУзлыОбмена(ЭлементДанных) Экспорт

	ТипЭлемента = ТипЗнч(ЭлементДанных);

	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом") Тогда
		Если ЭлементДанных.Количество() > 0 Тогда
			Пользователь = ЭлементДанных.Отбор.Пользователь.Значение;
			Возврат ОбменСМобильнымиПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);
		КонецЕсли;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Пользователи")
		Или ТипЭлемента = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Возврат ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Корреспонденты")
		Или ТипЭлемента = Тип("СправочникСсылка.КонтактныеЛица")
		Или ТипЭлемента = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат ПолучитьУзлыОбменаПоКонтакту(ЭлементДанных);

	ИначеЕсли ТипЭлемента =Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		Возврат ПолучитьУзлыОбменаПоЛичномуАдресату(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПапкиПисем") Тогда
		Возврат ПолучитьУзлыОбменаПоПапкеПисем(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Возврат ПолучитьУзлыОбменаПоУчетнойЗаписи(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЭлемента = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		Возврат ПолучитьУзлыОбменаПоПисьму(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Файлы") Тогда
		Возврат ПолучитьУзлыОбменаПоФайлу(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СведенияОПрочтении") Тогда
		Возврат ПолучитьУзлыОбменаПоСведениямОПрочтении(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПисьмаВПапках") Тогда
		Возврат ПолучитьУзлыОбменаПоПисьмамВПапках(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ШаблоныТекстовПисем")  Тогда
		Возврат ПолучитьУзлыОбменаПоШаблонуТекстаПисем(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		Возврат ПолучитьУзлыОбменаПоЗаписиКалендаря(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.НастройкиОтображенияЗаписейРабочегоКалендаря") Тогда
		ЗаписьКалендаря = ЭлементДанных.Отбор.Событие.Значение;
		Возврат ПолучитьУзлыОбменаПоЗаписиКалендаря(ЗаписьКалендаря);

	ИначеЕсли ТипЭлемента = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат ПолучитьУзлыОбменаПоЗадаче(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Возврат ПолучитьУзлыОбменаПоИсполнению(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Контроль") Тогда
		Возврат ПолучитьУзлыОбменаПоКонтролю(ЭлементДанных);

	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПисьмаВеток") Тогда
		Возврат ПолучитьУзлыПоНахождениюПисьмаВВетке(ЭлементДанных)

	Иначе

		Попытка
			// Если встретился такой ЭлементДанных, особенная регистрация изменений которого не требуется, то
			// попробуем зарегистрировать его как предмет задачи.
			ИтоговыйМассив = Новый Массив;
			ДобавитьУзлыОбменаПоПредметуЗадачи(ЭлементДанных, ИтоговыйМассив);

			// Также зарегистрируем этот элемент данных как предмет контроля
			ДобавитьУзлыОбменаПоПредметуКонтроля(ЭлементДанных, ИтоговыйМассив);

			Возврат ИтоговыйМассив;
		Исключение
			// ЭлементДанных может иметь такой тип метаданных, что поиск задач по нему как по предмету
			// завершится с ошибкой. В этом случае вернем пустой массив - изменение ЭлементаДанных
			// не будет никуда передано.
			Возврат Новый Массив;
		КонецПопытки;

	КонецЕсли;

КонецФункции

Функция ПолучитьУзлыОбменаПоКонтакту(КонтактСсылка)
	
	ИтоговыйМассив = Новый Массив;
	Если Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить() Тогда
		ЗапросПолучениеУзлов = Новый Запрос;
		ЗапросПолучениеУзлов.Текст = 
			"ВЫБРАТЬ
			|	Мобильный.Ссылка
			|ИЗ
			|	ПланОбмена.Мобильный КАК Мобильный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
			|			ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаДляОбъектов.Дескриптор
			|		ПО Мобильный.Пользователь = ПраваПоДескрипторамДоступа.Пользователь
			|ГДЕ
			|	ПраваПоДескрипторамДоступа.Чтение = ИСТИНА
			|	И ДескрипторыДоступаДляОбъектов.Объект = &Объект
			|	И Мобильный.ПометкаУдаления = ЛОЖЬ";
			
		ЗапросПолучениеУзлов.УстановитьПараметр("Объект", КонтактСсылка);
		ИтоговыйМассив = ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Иначе
		ИтоговыйМассив = ОбменСМобильнымиПовтИсп.ПолучитьВсеУзлы();
	КонецЕсли;
	
	ДобавитьУзлыОбменаПоПредметуЗадачи(КонтактСсылка, ИтоговыйМассив);
	ДобавитьУзлыОбменаПоПредметуКонтроля(КонтактСсылка, ИтоговыйМассив);
	Возврат ИтоговыйМассив;
	
КонецФункции

Функция ПолучитьУзлыОбменаПоЛичномуАдресату(ЛичныйАдресатСсылка)
	
	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
		|		ПО Мобильный.Пользователь = ЛичныеАдресаты.Пользователь
		|ГДЕ
		|	ЛичныеАдресаты.Ссылка = &Ссылка
		|	И Мобильный.ПометкаУдаления = ЛОЖЬ";
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ЛичныйАдресатСсылка);
	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

Функция ПолучитьУзлыОбменаПоПапкеПисем(ПапкаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Пользователь
		|ИЗ
		|	РегистрСведений.СинхронизацияПапокПисемСМобильнымКлиентом КАК СинхронизацияПапокПисемСМобильнымКлиентом
		|ГДЕ
		|	СинхронизацияПапокПисемСМобильнымКлиентом.Папка = &Папка";
	Запрос.УстановитьПараметр("Папка", ПапкаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивПользователей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если МассивПользователей.Найти(Выборка.Пользователь) = Неопределено Тогда
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ОбменСМобильными.ПолучитьУзлыПоПользователям(МассивПользователей);
		
КонецФункции

Функция ПолучитьУзлыОбменаПоУчетнойЗаписи(УчетнаяЗаписьСсылка)

	ЗапросОтвественные = Новый Запрос;
	ЗапросОтвественные.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Пользователь Как Пользователь
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочтыОтветственныеЗаОбработкуПисем.Ссылка = &Ссылка";
	ЗапросОтвественные.УстановитьПараметр("Ссылка", УчетнаяЗаписьСсылка);
	МассивПользователей = ЗапросОтвественные.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");

	СоставРабочейГруппы = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(УчетнаяЗаписьСсылка);
	Для Каждого УчастникРабочейГруппы Из СоставРабочейГруппы Цикл
		Если ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(УчастникРабочейГруппы.Участник);
		ИначеЕсли ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ПользователиГруппы = РаботаСПользователями.ПолучитьПользователейГруппыПользователей(УчастникРабочейГруппы.Участник, Истина);
			Для Каждого ПользовательГруппы Из ПользователиГруппы Цикл
				МассивПользователей.Добавить(ПользовательГруппы);
			КонецЦикла;
		ИначеЕсли ТипЗнч(УчастникРабочейГруппы.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ДобавитьИсполнителейРолиВМассивПользователей(
				УчастникРабочейГруппы.Участник,
				УчастникРабочейГруппы.ОсновнойОбъектАдресации,
				УчастникРабочейГруппы.ДополнительныйОбъектАдресации,
				МассивПользователей);
		КонецЕсли;
	КонецЦикла;

	Возврат ОбменСМобильными.ПолучитьУзлыПоПользователям(МассивПользователей);

КонецФункции

Процедура ДобавитьИсполнителейРолиВМассивПользователей(
	Роль, 
	ОсновнойОбъектАдресации, 
	ДополнительныйОбъектАдресации, 
	МассивПользователей)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
		|	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", Роль);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	ИсполнителиЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Для Каждого ИсполнительЗадачи Из ИсполнителиЗадачи Цикл
		МассивПользователей.Добавить(ИсполнительЗадачи);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьУзлыОбменаПоПисьму(ПисьмоСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КраткиеОписанияПисем.Папка,
		|	КраткиеОписанияПисем.УчетнаяЗапись
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК КраткиеОписанияПисем
		|ГДЕ
		|	КраткиеОписанияПисем.Ссылка = &Письмо";
	Запрос.УстановитьПараметр("Письмо", ПисьмоСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Папка = Выборка.Папка;
	УчетнаяЗапись = Выборка.УчетнаяЗапись;
	
	// Для передачи письма на мобильный клиент необходимо, чтобы папка и учетная запись письма 
	//	находились в списке синхронизируемых для пользователя, которому принадлежит мобильный клиент.
	МассивУзловПоПапке = ПолучитьУзлыОбменаПоПапкеПисем(Папка);
	МассивУзловПоУчетнойЗаписи = ПолучитьУзлыОбменаПоУчетнойЗаписи(УчетнаяЗапись);
	
	ИтоговыйМассивУзлов = Новый Массив;
	Для Каждого Узел Из МассивУзловПоПапке Цикл
		Если МассивУзловПоУчетнойЗаписи.Найти(Узел) <> Неопределено Тогда
			ИтоговыйМассивУзлов.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьУзлыОбменаПоПредметуЗадачи(ПисьмоСсылка, ИтоговыйМассивУзлов);
	ДобавитьУзлыОбменаПоПредметуКонтроля(ПисьмоСсылка, ИтоговыйМассивУзлов);
	Возврат ИтоговыйМассивУзлов;
	
КонецФункции

Функция ПолучитьУзлыОбменаПоФайлу(ФайлСсылка)
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла");
	ИтоговыйМассив = ПолучитьУзлыОбмена(ВладелецФайла);
	ДобавитьУзлыОбменаПоПредметуЗадачи(ФайлСсылка, ИтоговыйМассив);
	ДобавитьУзлыОбменаПоПредметуКонтроля(ФайлСсылка, ИтоговыйМассив);	
	Возврат ИтоговыйМассив;	
	
КонецФункции

Функция ПолучитьУзлыОбменаПоСведениямОПрочтении(НаборЗаписейРегистра)
	
	Объект = НаборЗаписейРегистра.Отбор.Объект.Значение; 
	Пользователь = НаборЗаписейРегистра.Отбор.Пользователь.Значение;
	УзлыПоОбъекту = ПолучитьУзлыОбмена(Объект);
	УзлыПоПользователю = ОбменСМобильнымиПовтИсп.ПолучитьУзлыОбменаПоВладельцу(Пользователь);
	
	ИтоговыйМассив = Новый Массив;
	Для Каждого Узел Из УзлыПоОбъекту Цикл
		Если УзлыПоПользователю.Найти(Узел) <> Неопределено Тогда
			ИтоговыйМассив.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговыйМассив;
	
КонецФункции

Функция ПолучитьУзлыОбменаПоПисьмамВПапках(НаборЗаписейРегистра)

	Письмо        = НаборЗаписейРегистра.Отбор.Письмо.Значение;
	УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "УчетнаяЗапись");

	Возврат ПолучитьУзлыОбмена(УчетнаяЗапись);

КонецФункции

Функция ПолучитьУзлыОбменаПоШаблонуТекстаПисем(ШаблонТекстаПисьмаСсылка)
	
	ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонТекстаПисьмаСсылка, "Владелец");
	Возврат ОбменСМобильнымиПовтИсп.ПолучитьУзлыОбменаПоВладельцу(ВладелецШаблона);
	
КонецФункции

Функция ПолучитьУзлыОбменаПоЗаписиКалендаря(ЗаписьКалендаряСсылка)

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ЗаписьКалендаряСсылка);
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|		ПО Мобильный.Пользователь = ЗаписиРабочегоКалендаря.Пользователь
		|			И (ЗаписиРабочегоКалендаря.Ссылка = &Ссылка)
		|ГДЕ
		|	Мобильный.ПометкаУдаления = ЛОЖЬ";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьУзлыОбменаПоЗадаче(ЗадачаСсылка)

	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "БизнесПроцесс");

	Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Возврат Новый Массив;
	КонецЕсли;

	МассивПользователей = ПолучитьМассивПользователейПоЗадаче(ЗадачаСсылка);

	Возврат ОбменСМобильными.ПолучитьУзлыПоПользователям(МассивПользователей);

КонецФункции

// Получает массив пользователей, которые имеют отношение к задаче: 
//	автор, исполнители, старые исполнители, другие участники процесса.
// Параметры:
//	Задача - ссылка на ЗадачуИсполнителя
Функция ПолучитьМассивПользователейПоЗадаче(Задача)

	МассивПользователей = Новый Массив;

	// Автор
	МассивПользователей.Добавить(Задача.Автор);

	// Исполнитель
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		МассивПользователей.Добавить(Задача.Исполнитель);
	Иначе
		ДобавитьИсполнителейРолиВМассивПользователей(
			Задача.РольИсполнителя, 
			Задача.ОсновнойОбъектАдресации, 
			Задача.ДополнительныйОбъектАдресации, 
			МассивПользователей);
	КонецЕсли;

	// Старые исполнители задачи
	СтарыеИсполнители = РегистрыСведений.СведенияОбИсполнителяхЗадач.ПолучитьИсполнителей(Задача.Ссылка);
	Для каждого Эл Из СтарыеИсполнители Цикл
		Если ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Эл.Участник);
		ИначеЕсли ТипЗнч(Эл.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ДобавитьИсполнителейРолиВМассивПользователей(
				Эл.Участник, 
				Эл.ОсновнойОбъектАдресации, 
				Эл.ДополнительныйОбъектАдресации, 
				МассивПользователей);
		КонецЕсли;
	КонецЦикла;

	// Участники процесса
	ВсеУчастники = РаботаСБизнесПроцессами.ПолучитьВсехУчастниковПроцесса(Задача.БизнесПроцесс);
	Для Каждого Эл Из ВсеУчастники Цикл
		Если ТипЗнч(Эл.Значение.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивПользователей.Добавить(Эл.Значение.Участник);
		Иначе
			ДобавитьИсполнителейРолиВМассивПользователей(
				Эл.Значение.Участник, 
				Эл.Значение.ОсновнойОбъектАдресации,
				Эл.Значение.ДополнительныйОбъектадресации,
				МассивПользователей);
		КонецЕсли;
	КонецЦикла;

	Возврат МассивПользователей;

КонецФункции

Функция ПолучитьУзлыОбменаПоИсполнению(ИсполнениеСсылка)

	ЗапросПолучениеУзлов = Новый Запрос;
	ЗапросПолучениеУзлов.УстановитьПараметр("Ссылка", ИсполнениеСсылка);
	ЗапросПолучениеУзлов.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение КАК Исполнение
		|		ПО Мобильный.Пользователь = Исполнение.Автор
		|ГДЕ
		|	Исполнение.Ссылка = &Ссылка
		|	И Мобильный.ПометкаУдаления = ЛОЖЬ";

	Возврат ЗапросПолучениеУзлов.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

Функция ПолучитьУзлыОбменаПоКонтролю(КонтрольСсылка)
	
	РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КонтрольСсылка,
		"Контролер, ОсновнойОбъектАдресацииКонтролера, ДополнительныйОбъектАдресацииКонтролера");
		
	МассивПользователей = Новый Массив;
	Если ТипЗнч(РеквизитыКонтроля.Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПользователей.Добавить(РеквизитыКонтроля.Контролер);
		// добавление делегатов контролера
		ЗапросДелегаты = Новый Запрос;
		ЗапросДелегаты.Текст = 
			"ВЫБРАТЬ
			|	ДелегированиеПрав.Кому
			|ИЗ
			|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
			|		ПО ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
			|ГДЕ
			|	ДелегированиеПрав.ОтКого = &Контролер
			|	И ДелегированиеПрав.Действует
			|	И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
			|			ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В (&ОбластиДелегирования))";
		ЗапросДелегаты.УстановитьПараметр("Контролер", РеквизитыКонтроля.Контролер);
		
		СправочникКонтроль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль");
		ЗапросДелегирование = Новый Запрос;
		ЗапросДелегирование.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОбластиДелегированияПравСостав.Ссылка
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
			|ГДЕ
			|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникКонтроль
			|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления";
		ЗапросДелегирование.УстановитьПараметр("СправочникКонтроль", СправочникКонтроль);
		ОбластиДелегирования = ЗапросДелегирование.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ЗапросДелегаты.УстановитьПараметр("ОбластиДелегирования", ОбластиДелегирования);
		ВыборкаДелегаты = ЗапросДелегаты.Выполнить().Выбрать();
		Пока ВыборкаДелегаты.Следующий() Цикл
			МассивПользователей.Добавить(ВыборкаДелегаты.Кому);		
		КонецЦикла;
	Иначе
		ДобавитьИсполнителейРолиВМассивПользователей(
			РеквизитыКонтроля.Контролер, 
			РеквизитыКонтроля.ОсновнойОбъектАдресацииКонтролера, 
			РеквизитыКонтроля.ДополнительныйОбъектАдресацииКонтролера, 
			МассивПользователей); 
	КонецЕсли;
	
	Возврат ОбменСМобильными.ПолучитьУзлыПоПользователям(МассивПользователей); 
	
КонецФункции

Функция ПолучитьУзлыПоНахождениюПисьмаВВетке(НаборЗаписейРегистра)
	
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	ПисьмоСсылка = НаборЗаписейРегистра.Отбор.Письмо.Значение;
	Возврат ПолучитьУзлыОбменаПоПисьму(ПисьмоСсылка); 
	
КонецФункции

Процедура ДобавитьУзлыОбменаПоПредметуЗадачи(ПредметСсылка, МассивУзлов)

	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("Предмет", ПредметСсылка);
	ЗапросЗадачи.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &Предмет";

	МассивЗадач = ЗапросЗадачи.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл

		МассивУзловПоЗадаче = ПолучитьУзлыОбменаПоЗадаче(ЗадачаСсылка);

		Для Каждого Узел Из МассивУзловПоЗадаче Цикл
			МассивУзлов.Добавить(Узел);
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьУзлыОбменаПоПредметуКонтроля(ПредметСсылка, МассивУзлов)
	
	КарточкиКонтроля = Контроль.КарточкиКонтроляПоПредмету(ПредметСсылка);
	Для Каждого Карточка Из КарточкиКонтроля Цикл
		РеквизитыКарточки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Карточка, 
			"ПометкаУдаления, СнятСКонтроля");
		Если РеквизитыКарточки.ПометкаУдаления Или РеквизитыКарточки.СнятСКонтроля Тогда
			Продолжить;
		КонецЕсли;		
		
		УзлыОбменаПоКонтролю = ПолучитьУзлыОбменаПоКонтролю(Карточка);
		Для Каждого Узел Из УзлыОбменаПоКонтролю Цикл
			МассивУзлов.Добавить(Узел);	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует изменения данных почты при первом подключении мобильного клиента
Функция ЗарегистрироватьПочтуДляПервичнойЗагрузки(МобильныйКлиент) Экспорт
	
	СинхронизироватьПочту = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияПочты);
			
	Если Не СинхронизироватьПочту Тогда
		Возврат Ложь;
	КонецЕсли;			
			
	ПапкиПисемДляСинхронизации =  
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			МобильныйКлиент.Пользователь, Истина);
				
	Если ПапкиПисемДляСинхронизации.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
			
	ПериодЗагрузки = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки);		
				
	МассивДанныхДляРегистрации = Новый Массив;	
	ЗарегистрироватьПисьмаДляПервичнойЗагрузки(МобильныйКлиент, МассивДанныхДляРегистрации);
	СоставПланаОбмена = МобильныйКлиент.Метаданные().Состав;
	
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		Если ПолноеИмяОбъекта = "Справочник.ПапкиПисем" Тогда
			
			Для Каждого Папка Из ПапкиПисемДляСинхронизации Цикл
				МассивДанныхДляРегистрации.Добавить(Папка);	
			КонецЦикла;
			
		ИначеЕсли ПолноеИмяОбъекта = "Справочник.ШаблоныТекстовПисем" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ШаблоныТекстовПисем.Ссылка
				|ИЗ
				|	Справочник.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
				|ГДЕ
				|	ШаблоныТекстовПисем.ПометкаУдаления = &ПометкаУдаления
				|	И ШаблоныТекстовПисем.Владелец = &ПользовательИлиГруппа";
			Запрос.УстановитьПараметр("ПользовательИлиГруппа", МобильныйКлиент.Пользователь);
			Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
			МенеджерЗаписи = РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = МобильныйКлиент.Пользователь;
			МенеджерЗаписи.ВидНастройки = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем;
			МенеджерЗаписи.Записать();
			
			НаборЗаписей = РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Значение = МобильныйКлиент.Пользователь;
			НаборЗаписей.Отбор.Пользователь.Использование = Истина;
			НаборЗаписей.Отбор.ВидНастройки.Значение = Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем;
			НаборЗаписей.Отбор.ВидНастройки.Использование = Истина;
			
			МассивДанныхДляРегистрации.Добавить(НаборЗаписей);
						
		ИначеЕсли ПолноеИмяОбъекта = "Справочник.УчетныеЗаписиЭлектроннойПочты" Тогда
						
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	УчетныеЗаписиЭлектроннойПочты.Ссылка
				|ИЗ
				|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
				|ГДЕ
				|	УчетныеЗаписиЭлектроннойПочты.ВариантИспользования = &ВариантИспользования
				|	И УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = &ПометкаУдаления
				|	И УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем.Пользователь = &Пользователь";
			Запрос.УстановитьПараметр("ВариантИспользования", Перечисления.ВариантыИспользованияПочты.Встроенная);
			Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
			Запрос.УстановитьПараметр("Пользователь", МобильныйКлиент.Пользователь);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);				
			КонецЦикла;
			
		ИначеЕсли ПолноеИмяОбъекта = "Справочник.АдресатыПочтовыхСообщений" Тогда
			
			СоответствиеАдресаты = Новый Соответствие;
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения КАК Адресат,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.Пользователи)
				|	И СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления = ЛОЖЬ
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(СведенияОбАдресатах.Контакт) = ТИП(Справочник.РолиИсполнителей)
				|	И СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления = ЛОЖЬ
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СведенияОбАдресатах.АдресатСообщения,
				|	СведенияОбАдресатах.АдресатСообщения.Адрес
				|ИЗ
				|	РегистрСведений.СведенияОбАдресатах КАК СведенияОбАдресатах
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
				|		ПО СведенияОбАдресатах.Контакт = ЛичныеАдресаты.Ссылка
				|ГДЕ
				|	ЛичныеАдресаты.Пользователь = &Пользователь
				|	И СведенияОбАдресатах.АдресатСообщения.ПометкаУдаления = ЛОЖЬ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 500
				|	ИспользованиеАдресатовПользователями.Адресат КАК Адресат,
				|	ИспользованиеАдресатовПользователями.Адресат.Адрес КАК Адрес
				|ИЗ
				|	РегистрСведений.ИспользованиеАдресатовПользователями КАК ИспользованиеАдресатовПользователями
				|ГДЕ
				|	ИспользованиеАдресатовПользователями.Пользователь = &Пользователь
				|	И ИспользованиеАдресатовПользователями.Адресат.ПометкаУдаления = ЛОЖЬ
				|
				|УПОРЯДОЧИТЬ ПО
				|	ИспользованиеАдресатовПользователями.ДатаПоследнегоИспользования УБЫВ";
				
			Запрос.УстановитьПараметр("Пользователь", МобильныйКлиент.Пользователь);	
			МассивРезультатовЗапросов = Запрос.ВыполнитьПакет();			
			Для Каждого РезультатЗапроса Из МассивРезультатовЗапросов Цикл
				Если РезультатЗапроса = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СоответствиеАдресаты.Вставить(НРег(СокрЛП(Выборка.Адрес)),Выборка.Адресат);
				КонецЦикла;			
			КонецЦикла;
		
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого Элемент Из МассивДанныхДляРегистрации Цикл
		Попытка
			ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Элемент);	
		Исключение
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регистрация изменений для мобильного'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, Элемент, ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствиеАдресаты Цикл
		Попытка
			ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, КлючЗначение.Значение);	
		Исключение
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Регистрация изменений для мобильного'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, Элемент, ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Регистрирует изменения данных писем при первом подключении мобильного клиента
Функция ЗарегистрироватьПисьмаДляПервичнойЗагрузки(МобильныйКлиент, МассивДанныхДляРегистрации) Экспорт

	ПапкиПисемДляСинхронизации = 
		РегистрыСведений.СинхронизацияПапокПисемСМобильнымКлиентом.ПолучитьПапкиДляСинхронизации(
			МобильныйКлиент.Пользователь, Истина);

	ПериодЗагрузки = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки);

	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДатаСеанса() - ПериодЗагрузки * 24 * 60 * 60);

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	ЖурналДокументов.ЭлектроннаяПочта КАК Таблица
		|ГДЕ
		|	Таблица.Папка В(&Папки)
		|	И Таблица.Дата >= &ДатаНачалаВыгрузки
		|	И НЕ Таблица.ПометкаУдаления";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	Запрос.УстановитьПараметр("Пользователь"      , МобильныйКлиент.Пользователь);
	Запрос.УстановитьПараметр("Папки"             , ПапкиПисемДляСинхронизации);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		МассивДанныхДляРегистрации.Добавить(Выборка.Ссылка);
		Файлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Выборка.Ссылка);

		Для Каждого Файл Из Файлы Цикл
			МассивДанныхДляРегистрации.Добавить(Файл);
		КонецЦикла;

	КонецЦикла;
	
КонецФункции

// Регистрирует изменения данных задач при первом подключении мобильного клиента
Функция ЗарегистрироватьЗадачиДляПервичнойЗагрузки(МобильныйКлиент) Экспорт 

	СинхронизироватьЗадачи = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияЗадач);

	Если Не СинхронизироватьЗадачи Тогда
		Возврат Ложь;
	КонецЕсли;

	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.УстановитьПараметр("Исполнитель", МобильныйКлиент.Пользователь);
	ЗапросЗадачи.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПоИсполнителю.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Исполнитель, ) КАК ЗадачиПоИсполнителю
		|ГДЕ
		|	НЕ ЗадачиПоИсполнителю.Выполнена
		|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
		|	И ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) <> ТИП(БизнесПроцесс.КомплексныйПроцесс)
		|	И ТИПЗНАЧЕНИЯ(ЗадачиПоИсполнителю.БизнесПроцесс) <> ТИП(БизнесПроцесс.РешениеВопросовВыполненияЗадач)
		|	И ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	НЕ РолиИсполнителей.ПометкаУдаления
		|	И РолиИсполнителей.ИспользуетсяБезОбъектовАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Исполнение.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение КАК Исполнение
		|ГДЕ
		|	Исполнение.Автор = &Исполнитель
		|	И НЕ Исполнение.ПометкаУдаления
		|	И НЕ Исполнение.Завершен";

	Выборка = ЗапросЗадачи.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Выборка.Ссылка);
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Регистрирует изменения данных календаря при первом подключении мобильного клиента
Функция ЗарегистрироватьКалендарьДляПервичнойЗагрузки(МобильныйКлиент) Экспорт 

	СинхронизироватьКалендарь = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияКалендаря);

	Если Не СинхронизироватьКалендарь Тогда
		Возврат Ложь;
	КонецЕсли;

	ПериодЗагрузки = 
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			МобильныйКлиент.Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки);

	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДатаСеанса() - ПериодЗагрузки * 24 * 60 * 60);

	ЗапросЗаписиКалендаря = Новый Запрос;
	ЗапросЗаписиКалендаря.УстановитьПараметр("Пользователь"      , МобильныйКлиент.Пользователь);
	ЗапросЗаписиКалендаря.УстановитьПараметр("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	ЗапросЗаписиКалендаря.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиРабочегоКалендаря.Ссылка
		|ИЗ
		|	Справочник.ЗаписиРабочегоКалендаря КАК ЗаписиРабочегоКалендаря
		|ГДЕ
		|	ЗаписиРабочегоКалендаря.Пользователь = &Пользователь
		|	И ЗаписиРабочегоКалендаря.ДатаНачала >= &ДатаНачалаВыгрузки
		|	И НЕ ЗаписиРабочегоКалендаря.ПометкаУдаления";

	Выборка = ЗапросЗаписиКалендаря.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, Выборка.Ссылка);
	КонецЦикла;

	Возврат Истина;

КонецФункции

Процедура ЗарегистрироватьКонтрольДляПервичнойЗагрузки(МобильныйКлиент) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контролер"         , МобильныйКлиент.Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата"       , ТекущаяДата());
	Запрос.УстановитьПараметр("СправочникКонтроль", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Контроль"));
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПравСостав.Ссылка
		|ПОМЕСТИТЬ ОбластиДелегирования
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных = &СправочникКонтроль
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контроль.Ссылка
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	НЕ Контроль.ПометкаУдаления
		|	И НЕ Контроль.СнятСКонтроля
		|	И (Контроль.Контролер = &Контролер
		|			ИЛИ &Контролер В
		|				(ВЫБРАТЬ
		|					ИсполнителиЗадач.Исполнитель
		|				ИЗ
		|					РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|				ГДЕ
		|					ИсполнителиЗадач.РольИсполнителя = Контроль.Контролер
		|					И ИсполнителиЗадач.ОсновнойОбъектАдресации = Контроль.ОсновнойОбъектАдресацииКонтролера
		|					И ИсполнителиЗадач.ДополнительныйОбъектАдресации = Контроль.ДополнительныйОбъектАдресацииКонтролера)
		|			ИЛИ &Контролер В
		|				(ВЫБРАТЬ
		|					ДелегированиеПрав.Кому
		|				ИЗ
		|					Справочник.ДелегированиеПрав КАК ДелегированиеПрав
		|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ТаблЧастьОбластиДелегирования
		|						ПО
		|							ДелегированиеПрав.Ссылка = ТаблЧастьОбластиДелегирования.Ссылка
		|				ГДЕ
		|					ДелегированиеПрав.ОтКого = Контроль.Контролер
		|					И ДелегированиеПрав.Действует
		|					И (ДелегированиеПрав.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|						ИЛИ ТаблЧастьОбластиДелегирования.ОбластьДелегирования В
		|							(ВЫБРАТЬ
		|								ОбластиДелегирования.Ссылка
		|							ИЗ
		|								ОбластиДелегирования КАК ОбластиДелегирования))))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОбластиДелегирования";

	КонтрольВыборка = Запрос.Выполнить().Выбрать();
	Пока КонтрольВыборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(МобильныйКлиент, КонтрольВыборка.Ссылка);
	КонецЦикла;

КонецПроцедуры
