////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ДЛЯ РАБОТЫ С РЕЗОЛЮЦИЯМИ
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру ключевых реквизитов резолюции.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьСтруктуруКлючевыхРеквизитовРезолюции() Экспорт
	
	МассивИмен = Справочники.Резолюции.ПолучитьИменаКлючевыхРеквизитов();
	
	СтруктураРезолюции = Новый Структура;
	
	Для Каждого Имя Из МассивИмен Цикл
		СтруктураРезолюции.Вставить(Имя);
	КонецЦикла;
		
	Возврат СтруктураРезолюции;
	
КонецФункции

// Возвращает резолюции документа.
//
// Параметры:
//  Документ - ссылка на внутренний или входящий документ.
//  ТолькоАктивные - Булево - возвращать только не помеченные на удаление резолюции
//                   (по умолчанию Истина).
//  ПолучитьДанныеЭП - Булево - возвращать информацию об электронной подписи резолюции
//                     (по умолчанию Ложь).
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьРезолюции(Документ, ТолькоАктивные = Истина, ПолучитьДанныеЭП = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Резолюции.Ссылка,
			|	Резолюции.ПометкаУдаления,
			|	Резолюции.АвторРезолюции,
			|	Резолюции.ВнесРезолюцию,
			|	Резолюции.ДатаРезолюции,
			|	Резолюции.Документ,
			|	Резолюции.Источник,
			|	Резолюции.Подписана,
			|	Резолюции.ТекстРезолюции,
			|	ЭП.ДатаПодписи КАК ДатаПодписи,
			|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭП.ПодписьВерна КАК ПодписьВерна,
			|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
			|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|	ПО ЭП.Объект = Резолюции.Ссылка
			|ГДЕ
			|	Резолюции.Документ = &Документ";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Резолюции.Ссылка,
			|	Резолюции.ПометкаУдаления,
			|	Резолюции.АвторРезолюции,
			|	Резолюции.ВнесРезолюцию,
			|	Резолюции.ДатаРезолюции,
			|	Резолюции.Документ,
			|	Резолюции.Источник,
			|	Резолюции.Подписана,
			|	Резолюции.ТекстРезолюции
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|ГДЕ
			|	Резолюции.Документ = &Документ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + " И Резолюции.ПометкаУдаления = Ложь";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Резолюции.ДатаРезолюции УБЫВ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает резолюции документа на указанную дату.
//
// Параметры:
//  Документ - ссылка на внутренний или входящий документ.
//  ДатаРезолюции - Дата - дата, на которую необходимо найти резолюцию.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьРезолюциюПоДате(Документ, ДатаРезолюции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Ссылка
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Документ = &Документ
		|	И Резолюции.ДатаРезолюции = &ДатаРезолюции
		|	И Резолюции.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ДатаРезолюции", ДатаРезолюции);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Заполняет резолюции для формы.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма
//  ТолькоАктивные - Булево - возвращать только не помеченные на удаление резолюции
//                 (по умолчанию Истина).
//
Процедура ЗаполнитьСписокРезолюций(ЭтаФорма, ТолькоАктивные = Истина) Экспорт
	
	Документ = ЭтаФорма.Объект.Ссылка;
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Документ, ТолькоАктивные, Истина);
	
	ТаблицаРезолюций = ЭтаФорма.Резолюции;
	ТаблицаРезолюций.Очистить();
	
	Если Резолюции.Количество() = 1 Тогда
		ТекСтрока = Резолюции.Получить(0);
		
		НоваяСтрока = ТаблицаРезолюций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Объект = ТекСтрока.Ссылка;
		
		ЭтаФорма.Резолюция = ТекСтрока.Ссылка;
		ЭтаФорма.РезолюцияАвторРезолюции = ТекСтрока.АвторРезолюции;
		ЭтаФорма.РезолюцияДатаРезолюции = ТекСтрока.ДатаРезолюции;
		ЭтаФорма.РезолюцияТекстРезолюции = ТекСтрока.ТекстРезолюции;
		ЭтаФорма.РезолюцияВнесРезолюцию = ТекСтрока.ВнесРезолюцию;
		
		Если ТекСтрока.Подписана Тогда
			ЭтаФорма.РезолюцияИнформацияОбЭП = РаботаСРезолюциямиКлиентСервер.ПолучитьИнформациюОбЭПРезолюции(ТекСтрока);
		КонецЕсли;
	ИначеЕсли Резолюции.Количество() > 1 Тогда	
		Для ш = 0 По Резолюции.Количество() - 1 Цикл
			ТекСтрока = Резолюции.Получить(ш);
			
			НоваяСтрока = ТаблицаРезолюций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Объект = ТекСтрока.Ссылка;
			НоваяСтрока.КартинкаСтатусаПодписи = 0;
			Если ТекСтрока.Подписана Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
					НоваяСтрока.КартинкаСтатусаПодписи = 1;
				Иначе
					НоваяСтрока.КартинкаСтатусаПодписи = ?(ТекСтрока.ПодписьВерна, 2, 3);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭтаФорма.КоличествоРезолюций = Резолюции.Количество();
	КоличествоРезолюций = ЭтаФорма.КоличествоРезолюций;
	
	// установка видимости
	СтраницыРезолюций = ЭтаФорма.Элементы.ГруппаРезолюции.ПодчиненныеЭлементы.ГруппаСтраницыРезолюций;
	ГруппаНетРезолюций = ЭтаФорма.Элементы.ГруппаНетРезолюций;
	Если КоличествоРезолюций = 0 Тогда
		ГруппаНетРезолюций.Видимость = Истина;
		СтраницыРезолюций.Видимость = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИСТИНА
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|ГДЕ
			|	Резолюции.Документ = &Документ
			|	И Резолюции.ПометкаУдаления";
		Запрос.УстановитьПараметр("Документ", Документ);
		КоличествоУдаленныхРезолюций = Запрос.Выполнить().Выбрать().Количество();
		Если КоличествоУдаленныхРезолюций = 0 Тогда
			ЭтаФорма.Элементы.ПоказатьУдаленныеРезолюции.Видимость = Ложь;
		Иначе
			ЭтаФорма.Элементы.ПоказатьУдаленныеРезолюции.Видимость = Истина;
			ЭтаФорма.Элементы.ПоказатьУдаленныеРезолюции.Заголовок = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Показать удаленные (%1)'"),
					КоличествоУдаленныхРезолюций);
		КонецЕсли;
	ИначеЕсли КоличествоРезолюций = 1 Тогда
		ГруппаНетРезолюций.Видимость = Ложь;
		СтраницыРезолюций.Видимость = Истина;
		СтраницыРезолюций.ТекущаяСтраница = СтраницыРезолюций.ПодчиненныеЭлементы.ГруппаОднаРезолюция;
	Иначе
		ГруппаНетРезолюций.Видимость = Ложь;
		СтраницыРезолюций.Видимость = Истина;
		СтраницыРезолюций.ТекущаяСтраница = СтраницыРезолюций.ПодчиненныеЭлементы.ГруппаСписокРезолюций;
	КонецЕсли;
	
	ЭтаФорма.Элементы.ГруппаРезолюцииКоманднаяПанель.Видимость = КоличествоРезолюций > 0;
	
	Если ЭтаФорма.КоличествоРезолюций = 1 Тогда
		ЭтаФорма.Элементы.РезолюцияИнформацияОбЭП.Видимость = ЭтаФорма.Резолюция.Подписана;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность подписания резолюции для текущего пользователя.
//
// Параметры:
//  Резолюция - ссылка или объект справочника Резолюции.
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьДоступНаПодписание(Резолюция) Экспорт
	
	Если ТипЗнч(Резолюция) = Тип("СправочникСсылка.Резолюции")
		ИЛИ ТипЗнч(Резолюция) = Тип("СправочникОбъект.Резолюции") Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		// Подписать резолюцию может только автор либо внесший резолюцию.
		Возврат Резолюция.ВнесРезолюцию = ТекущийПользователь ИЛИ Резолюция.АвторРезолюции = ТекущийПользователь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Устанавливает / снимает пометку на удаление на резолюцию.
//
// Возвращаемое значение:
//  Истина, если установка пометки прошла успешно.
//
Функция УстановитьПометкуНаУдаление(Резолюция, ЗначениеПометкиУдаления) Экспорт

	Попытка
		ОбъектРезолюции = Резолюция.Ссылка.ПолучитьОбъект();
		ОбъектРезолюции.Заблокировать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
	ОбъектРезолюции.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
	ОбъектРезолюции.Разблокировать();
	
	Возврат Истина;
	
КонецФункции	

// Определяет, является ли пользователем автором либо внесшим резолюцию.
//
// Параметры:
//  Резолюция - ссылка на справочник Резолюции
//  Пользователь - ссылка на справочник Пользователи - если не задан, то проверяется текущий
//                 пользователь.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоАвторРезолюции(Резолюция, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если ТипЗнч(Резолюция.АвторРезолюции) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Возврат Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ Пользователь = Резолюция.ВнесРезолюцию;
	Иначе
		Возврат Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ Пользователь = Резолюция.АвторРезолюции
			ИЛИ Пользователь = Резолюция.ВнесРезолюцию;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
