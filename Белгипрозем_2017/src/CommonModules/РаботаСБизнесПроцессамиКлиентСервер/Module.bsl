////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес процессами клиент сервер
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру параметров участника процесса.
//
Функция ПолучитьСтруктуруПараметровУчастника(
	Участник, УчастникСтрокой, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Участник", Участник);
	Результат.Вставить("УчастникСтрокой", УчастникСтрокой);
	Результат.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Результат.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление участника процесса. Если участником является роль, то
// в представление добавляются объекты адресации.
//
// Параметры:
//   Участник - СправочникСсылка.Пользователи
//            - СправочникСсылка.РолиИсполнителей
//   ОсновнойОбъектАдресации - ссылка на основной объект адресации исполнителя
//   ДополнительныйОбъектАдресации - ссылка на дополнительный объект адресации исполнителя
//
Функция ПредставлениеУчастникаПроцесса(
	Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	Результат = Строка(Участник);
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
			Результат = Результат + ", " + ОсновнойОбъектАдресации;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
			Результат = Результат + ", " + ДополнительныйОбъектАдресации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет таблицу исполнителей на дубли
// Если в таблице присутствуют дубли, то пользователю выводится сообщение
// и переменной Отказ присваивается значение Истина.
//
// Параметры:
//   Исполнители - таблица исполнителей в форме.
//   ПутьКТаблицеВФорме - Строка - путь в форме к таблице исполнителей.
//   Отказ - Булево - принимает Истина, если найдены дубли исполнителей.
//
Процедура ПроверитьНаДублиТаблицуИсполнителей(
	Исполнители, ПутьКТаблицеВФорме, Отказ, УчитыватьШаги = Истина) Экспорт
	
	КоличествоИсполнителей = Исполнители.Количество();
	
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Исполнители[Инд1];
		
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Исполнители[Инд2];
			
			Если УчитыватьШаги Тогда
				Шаг1 = Строка1.Шаг;
				Шаг2 = Строка2.Шаг;
			Иначе
				Шаг1 = Неопределено;
				Шаг2 = Неопределено;
			КонецЕсли;
			
			Если Строка1.Исполнитель = Строка2.Исполнитель
				И Шаг1 = Шаг2
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке исполнителей!'"), 
					Строка(Строка2.Исполнитель));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					ПутьКТаблицеВФорме + "[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			ИначеЕсли (Строка1.Исполнитель = Строка2.Исполнитель 
				И Шаг1 = Шаг2
				И ТипЗнч(Строка1.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
				И Строка1.ОсновнойОбъектАдресации = Строка2.ОсновнойОбъектАдресации
				И Строка1.ДополнительныйОбъектАдресации = Строка2.ДополнительныйОбъектАдресации) Тогда 
				
				Если ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) И ЗначениеЗаполнено(Строка2.ДополнительныйОбъектАдресации) Тогда 	
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2, %3)"" указан дважды в списке исполнителей!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации),
						Строка(Строка2.ДополнительныйОбъектАдресации));
					
				ИначеЕсли ЗначениеЗаполнено(Строка2.ОсновнойОбъектАдресации) Тогда 
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1 (%2)"" указан дважды в списке исполнителей!'"),
						Строка(Строка2.Исполнитель),
						Строка(Строка2.ОсновнойОбъектАдресации));
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исполнитель ""%1"" указан дважды в списке исполнителей!'"), 
						Строка(Строка2.Исполнитель));
					
				КонецЕсли;	
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,,
					ПутьКТаблицеВФорме + "[" + Формат(Строка2.НомерСтроки-1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие функции и процедуры для механизма бизнес-процесса "Согласование"

Функция ЗаполнитьШагСогласования(Таблица) Экспорт 
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Шаг = 0;
	КонецЦикла;	
	
	КоличествоСтрок = Таблица.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		
		Строка = Таблица[Инд];
		Если Не ЗначениеЗаполнено(Строка.ПорядокСогласования) Тогда 
			Прервать;
		КонецЕсли;	
		
		Если Инд = 0 Тогда 
			Строка.Шаг = 1;
			Продолжить;
		КонецЕсли;	
		
		ПредыдущаяСтрока = Таблица[Инд-1];
		Если Строка.ПорядокСогласования = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим") Тогда 
			Строка.Шаг = ПредыдущаяСтрока.Шаг;
		ИначеЕсли Строка.ПорядокСогласования = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего") Тогда 
			Строка.Шаг = ПредыдущаяСтрока.Шаг + 1;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции	

Функция ПолучитьДанныеПроцессаСогласование(Объект, РассчитатьШаг = Ложь) Экспорт 
	
	МассивИсполнителей = Новый Массив;
	Для Каждого Строка Из Объект.Исполнители Цикл
		ДанныеИсполнителя = Новый Структура;
		ДанныеИсполнителя.Вставить("Исполнитель", Строка.Исполнитель);
		ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		ДанныеИсполнителя.Вставить("ЗадачаИсполнителя", Строка.ЗадачаИсполнителя);
		ДанныеИсполнителя.Вставить("ПорядокСогласования", Строка.ПорядокСогласования);
		ДанныеИсполнителя.Вставить("Пройден", Строка.Пройден);
		Если Объект.РазныеСроки Тогда 
			ДанныеИсполнителя.Вставить("ДлительностьИсполненияДни", Строка.СрокИсполнения);
			ДанныеИсполнителя.Вставить("ДлительностьИсполненияЧасы", Строка.СрокИсполненияЧас);
		Иначе
			ДанныеИсполнителя.Вставить("ДлительностьИсполненияДни", Объект.СрокИсполнения);
			ДанныеИсполнителя.Вставить("ДлительностьИсполненияЧасы", Объект.СрокИсполненияЧас);
		КонецЕсли;	
		
		Если РассчитатьШаг Тогда
			ДанныеИсполнителя.Вставить("Шаг", 0);
			ДанныеИсполнителя.Вставить("СрокИсполненияДатой", '00010101');
		Иначе	
			ДанныеИсполнителя.Вставить("Шаг", Строка.Шаг);
			ДанныеИсполнителя.Вставить("СрокИсполненияДатой", Строка.СрокИсполненияДатой);
		КонецЕсли;	
		
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЦикла;	
	
	Если РассчитатьШаг Тогда 
		ЗаполнитьШагСогласования(МассивИсполнителей);
	КонецЕсли;	
	
	БизнесПроцессСтруктура = Новый Структура;
	БизнесПроцессСтруктура.Вставить("Ссылка", Объект.Ссылка);
	БизнесПроцессСтруктура.Вставить("ДатаНачала", Объект.ДатаНачала);
	БизнесПроцессСтруктура.Вставить("Стартован", Объект.Стартован);
	БизнесПроцессСтруктура.Вставить("ВариантСогласования", Объект.ВариантСогласования);
	БизнесПроцессСтруктура.Вставить("НомерИтерации", Объект.НомерИтерации);
	БизнесПроцессСтруктура.Вставить("МассивИсполнителей", МассивИсполнителей);
	
	Возврат БизнесПроцессСтруктура;
	
КонецФункции

Процедура ЗаполнитьСрокиСогласованияДатой(Форма, НоваяИтерация = Ложь) Экспорт 
	
	Объект = Форма.Объект;
	
	БизнесПроцессСтруктура = ПолучитьДанныеПроцессаСогласование(Объект);
	МассивИсполнителей = БизнесПроцессСтруктура.МассивИсполнителей;
	
	Если НоваяИтерация Тогда 
		#Если Сервер Тогда
			ДатаНачалаИтерации = ТекущаяДатаСеанса();
		#Иначе
			ДатаНачалаИтерации = ТекущаяДата();
		#КонецЕсли
		Для Каждого Строка Из МассивИсполнителей Цикл
			Строка.ЗадачаИсполнителя = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
		КонецЦикла;	
	Иначе
		ДатаНачалаИтерации = '00010101';
	КонецЕсли;	
	
	РаботаСБизнесПроцессами.РассчитатьСрокиСогласованияДатой(
		МассивИсполнителей, 
		БизнесПроцессСтруктура, 
		ДатаНачалаИтерации,
		Форма.ОжидаемыйСрокСогласования,
		Форма.ОжидаемаяДлительностьДней,
		Форма.ОжидаемаяДлительностьЧасов);
	
	Индекс = 0;
	Для Каждого ДанныеИсполнителя Из МассивИсполнителей Цикл
		Объект.Исполнители[Индекс].СрокИсполненияДатой = ДанныеИсполнителя.СрокИсполненияДатой;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры	

Функция РассчитатьОбщийСрокСогласования(Исполнители) Экспорт 
	
	ОбщийСрокИсполненияДатой = '00010101';
	Для Каждого Строка Из Исполнители Цикл
		Если Не ЗначениеЗаполнено(Строка.СрокИсполненияДатой) Тогда 
			ОбщийСрокИсполненияДатой = '00010101';
			Прервать;
		ИначеЕсли Строка.СрокИсполненияДатой > ОбщийСрокИсполненияДатой Тогда 
			ОбщийСрокИсполненияДатой = Строка.СрокИсполненияДатой;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ОбщийСрокИсполненияДатой;
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// Общие функции и процедуры для механизма бизнес-процесса "Исполнение"

// Заполняет номера шагов в таблице исполнителей
Процедура ЗаполнитьШаг(РеквизитТаблица, ПеренумероватьТаблицу = Ложь, РеквизитПорядок = "ПорядокИсполнения") Экспорт
	
	Для каждого Строка Из РеквизитТаблица Цикл
		Строка.Шаг = 0;
	КонецЦикла;
	
	Если ПеренумероватьТаблицу Тогда
		НомерСтроки = 1;
		Для каждого Строка Из РеквизитТаблица Цикл
			Строка.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоСтрок = РеквизитТаблица.Количество();
	Для Инд = 0 По КоличествоСтрок - 1 Цикл
		Строка = РеквизитТаблица[Инд];
		Если Не ЗначениеЗаполнено(Строка[РеквизитПорядок]) Тогда
			Прервать;
		КонецЕсли;
		
		Если Строка.Ответственный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Инд = 0 Тогда
			Строка.Шаг = 1;
			Продолжить;
		КонецЕсли;
		
		Если Не РеквизитТаблица[Инд-1].Ответственный Тогда
			ПредыдущаяСтрока = РеквизитТаблица[Инд-1];
		Иначе
			Если Инд > 1 Тогда
				ПредыдущаяСтрока = РеквизитТаблица[Инд-2];
			Иначе
				ПредыдущаяСтрока = РеквизитТаблица[Инд-1];
			КонецЕсли;
		КонецЕсли;
		Если Строка[РеквизитПорядок] = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим") Тогда
			Строка.Шаг = ПредыдущаяСтрока.Шаг; 
			Если ПредыдущаяСтрока.Ответственный И Инд = 1 Тогда
				Строка.Шаг = 1;
			конецЕсли;
		ИначеЕсли Строка[РеквизитПорядок] = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего") Тогда
			Строка.Шаг = ПредыдущаяСтрока.Шаг + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьМассивИсполнителейКПередаче(Исполнители)
	
	МассивИсполнителей = Новый Массив;
	Для Каждого Строка Из Исполнители Цикл
		ДанныеИсполнителя = Новый Структура;
		
		ДанныеИсполнителя.Вставить("Шаг", Строка.Шаг);
		ДанныеИсполнителя.Вставить("Исполнитель", Строка.Исполнитель);
		ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации", Строка.ОсновнойОбъектАдресации);
		ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации", Строка.ДополнительныйОбъектАдресации);
		ДанныеИсполнителя.Вставить("СрокИсполнения", Строка.СрокИсполнения);
		ДанныеИсполнителя.Вставить("Ответственный", Строка.Ответственный);
		Если Строка.Свойство("ЗадачаИсполнителя") Тогда
			ДанныеИсполнителя.Вставить("ЗадачаИсполнителя", Строка.ЗадачаИсполнителя);
		Иначе
			ДанныеИсполнителя.Вставить("ЗадачаИсполнителя", ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка"));
		КонецЕсли;
		ДанныеИсполнителя.Вставить("ПорядокИсполнения", Строка.ПорядокИсполнения);
		Если Строка.Свойство("Пройден") Тогда
			ДанныеИсполнителя.Вставить("Пройден", Строка.Пройден);
		Иначе
			ДанныеИсполнителя.Вставить("Пройден", Ложь);
		КонецЕсли;
		ДанныеИсполнителя.Вставить("ТрудозатратыПланИсполнителя", Строка.ТрудозатратыПланИсполнителя);
		ДанныеИсполнителя.Вставить("ДлительностьИсполненияДни", Строка.ДлительностьИсполненияДни);
		ДанныеИсполнителя.Вставить("ДлительностьИсполненияЧасы", Строка.ДлительностьИсполненияЧасы);
		
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
	КонецЦикла;
	Возврат МассивИсполнителей;
	
КонецФункции

Процедура ВыполнитьРасчетДлительностейИСроков(Исполнители, ДатаНачалаРасчета, СтрокаДляРасчетаДлительности = Неопределено) Экспорт
	
	МассивИсполнителей = ПодготовитьМассивИсполнителейКПередаче(Исполнители);
	
	РаботаСБизнесПроцессами.ВычислитьДлительностиИСроки(МассивИсполнителей, ДатаНачалаРасчета, СтрокаДляРасчетаДлительности);
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из МассивИсполнителей Цикл
		ЗаполнитьЗначенияСвойств(
			Исполнители[Индекс],
			СтрокаТаблицы);
		Индекс = Индекс + 1;
	КонецЦикла;		
	
КонецПроцедуры

Процедура ВыполнитьРасчетСроковИДлительностей(Исполнители, ДатаНачалаРасчета) Экспорт
	
	МассивИсполнителей = ПодготовитьМассивИсполнителейКПередаче(Исполнители);
	
	РаботаСБизнесПроцессами.ВычислитьСрокиИДлительности(МассивИсполнителей, ДатаНачалаРасчета);
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из МассивИсполнителей Цикл
		ЗаполнитьЗначенияСвойств(
			Исполнители[Индекс],
			СтрокаТаблицы);
		Индекс = Индекс + 1;
	КонецЦикла;		
	
КонецПроцедуры

Процедура ВыполнитьРасчетСроков(Исполнители, ДатаНачалаРасчета) Экспорт
	
	МассивИсполнителей = ПодготовитьМассивИсполнителейКПередаче(Исполнители);	
	
	РаботаСБизнесПроцессами.ВычислитьСрокиИсполнения(МассивИсполнителей, ДатаНачалаРасчета);
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из МассивИсполнителей Цикл
		ЗаполнитьЗначенияСвойств(
			Исполнители[Индекс],
			СтрокаТаблицы);
		Индекс = Индекс + 1;
	КонецЦикла;		
	
КонецПроцедуры

Процедура ВыполнитьРасчетДлительностей(Исполнители, ДатаНачалаРасчета) Экспорт
	
	МассивИсполнителей = ПодготовитьМассивИсполнителейКПередаче(Исполнители);
	
	РаботаСБизнесПроцессами.ВычислитьДлительности(МассивИсполнителей, ДатаНачалаРасчета);
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из МассивИсполнителей Цикл
		ЗаполнитьЗначенияСвойств(
			Исполнители[Индекс],
			СтрокаТаблицы);
		Индекс = Индекс + 1;
	КонецЦикла;		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие функции и процедуры для механизма бизнес-процесса "Ознакомление"

Функция ЗаполнитьНомерСтрокиВТаблицеИсполнителей(Таблица) Экспорт
	
	НомерСтроки = 1;
	
	Для Каждого Строка Из Таблица Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецФункции	

#КонецОбласти



