/////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С РАБОЧЕЙ ГРУППОЙ ДОКУМЕНТА

// Перезаписывает участников рабочей группы документа
// Перезаписывает документ
//
// Параметры:
// Ссылка (любая ссылка, которая может хранится в измерении Объект РС РабочиеГруппы)
// Участники (ТаблицаЗначений)
// - Участник (СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей, СправочникСсылка.РолиИсполнителей)
// - ОсновнойОбъектАдресации (Характеристика.ОбъектыАдресацииЗадач)
// - ДополнительныйОбъектАдресации (Характеристика.ОбъектыАдресацииЗадач)
// ОбновитьПраваДоступа (Булево). Указывает на необходимость обновления прав доступа
//
Процедура ПерезаписатьРабочуюГруппуОбъекта(Ссылка, Знач Участники, ОбновитьПраваДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешнаяяТранзакция = ТранзакцияАктивна();
	Если Не ВнешнаяяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Участники.Свернуть("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(Ссылка, Участники, ОбновитьПраваДоступа);
		
		Если Не ВнешнаяяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешнаяяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;                                                	
	
КонецПроцедуры

// Перезаписывает рабочие группы предметов бизнес-процесса
//
// Параметры:
//	 - БизнесПроцессОбъект - БизнесПроцессОбъект - бизнес процесс объект для которого производится
//							  запись рабочих групп.
//	 - Предметы - Массив - массив предметов бизнес-процесса.
//
Процедура ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(БизнесПроцессОбъект, Предметы) Экспорт
	
	Если ТипЗнч(Предметы) <> Тип("Массив")
		ИЛИ Предметы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МетаданныеБизнесПроцессов = Метаданные.БизнесПроцессы;
	
	МассивТиповБизнесПроцессов = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцеса ИЗ МетаданныеБизнесПроцессов Цикл
		МассивТиповБизнесПроцессов.Добавить(Тип("БизнесПроцессОбъект." + МетаданныеБизнесПроцеса.Имя));
	КонецЦикла;
	
	ТипБизнесПроцесса = ТипЗнч(БизнесПроцессОбъект);
	
	Если МассивТиповБизнесПроцессов.Найти(ТипБизнесПроцесса) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерБизнесПроцесса = БизнесПроцессы[БизнесПроцессОбъект.Метаданные().Имя];
	
	Если НЕ МенеджерБизнесПроцесса.ЕстьМетодДобавитьУчастниковВТаблицу() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		
		// Формирование рабочей группы перед проверкой прав
		Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
			
			РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Предмет);
			
			МенеджерБизнесПроцесса.ДобавитьУчастниковВТаблицу(РабочаяГруппа, БизнесПроцессОбъект);
			
			РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(Предмет, РабочаяГруппа, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа.
//
// Параметры:
// Объект (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы и др.)
// Участники (ТаблицаЗначений)
// - Участник (СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей, СправочникСсылка.РолиИсполнителей)
// - ОсновнойОбъектАдресации (Характеристика.ОбъектыАдресацииЗадач)
// - ДополнительныйОбъектАдресации (Характеристика.ОбъектыАдресацииЗадач)
// ОбновитьПраваДоступа - если установлен, то будет вызвано обновление прав доступа для указанного предмета
// 
Процедура ДобавитьУчастниковВРабочуюГруппуОбъекта(Объект, Участники, ОбновитьПраваДоступа = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект);
		Для каждого УчастникиСтрока Из Участники Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
		КонецЦикла;
		ТаблицаНабора.Свернуть("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		ПерезаписатьРабочуюГруппуОбъекта(Объект, ТаблицаНабора, ОбновитьПраваДоступа);
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из источника
//
// Параметры:
// Документ (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы)
// Источник (СправочникСсылка.ВходящиеДокументы, СправочникСсылка.ИсходящиеДокументы, СправочникСсылка.ВнутренниеДокументы, БизнесПроцессСсылка)
// 
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Документ, Источник, ЗаписатьДокумент = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = ПолучитьРабочуюГруппуДокумента(Документ);
	КоличествоУчастниковБыло = ТаблицаУчастников.Количество();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник);
	Если ТаблицаУчастников.Количество() <> КоличествоУчастниковБыло Тогда
		ПерезаписатьРабочуюГруппуОбъекта(Документ, ТаблицаУчастников, ЗаписатьДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, ДокументСсылка)
	
	ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцессПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|ГДЕ
		|	БизнесПроцессПредметы.Предмет = &Предмет";
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.Проекты") Тогда
		ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса] КАК БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|		ПО БизнесПроцесс.Ссылка = БизнесПроцессПредметы.Ссылка
		|ГДЕ
		|	(БизнесПроцесс.Проект = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет В
		|				(ВЫБРАТЬ
		|					ПроектныеЗадачи.Ссылка
		|				ИЗ
		|					Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|				ГДЕ
		|					ПроектныеЗадачи.Владелец = &Предмет))"
	КонецЕсли;
	
	Для каждого МетаданныеБизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		
		ТекстЗапросаБизнесПроцессы = СтрЗаменить(
			ШаблонЗапросаБизнесПроцессы, "[ВидБизнесПроцесса]", МетаданныеБизнесПроцесс.Имя);
			
		Запрос = Новый Запрос(ТекстЗапросаБизнесПроцессы);
		Запрос.Параметры.Вставить("Предмет", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет рабочую группу
//
Процедура ПерезаполнитьРабочуюГруппуДокумента(Документ, ЗаписатьДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Документ);
	ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Документ);
	ДобавитьУчастниковВРабочуюГруппуОбъекта(Документ, ТаблицаУчастников, ЗаписатьДокумент);
	
КонецПроцедуры

// Перезаполняет рабочую группу в форме документа
//
Процедура ПерезаполнитьРабочуюГруппуНаФорме(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	
	ТипИсточника = ТипЗнч(Форма.Объект.Ссылка);
	ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
	ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
	Попытка
		ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
	Исключение
		// Метода может не быть.
	КонецПопытки;
	Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
		Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаУчастников, Форма.Объект);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Форма.Объект.Ссылка);
	КонецЕсли;
	
	Форма.РабочаяГруппаТаблица.Очистить();
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Добавляет к набору участников рабочей группы переданного источника
Процедура ДобавитьУчастниковИзИсточника(ТаблицаНабора, Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяБизнесПроцесса = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = БизнесПроцессы[ИмяБизнесПроцесса].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			БизнесПроцессы[ИмяБизнесПроцесса].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участника в переданную таблицу.
Процедура ДобавитьУчастникаВТаблицуНабора(
	ТаблицаНабора,
	Участник,
	ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Отбор.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Отбор.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Если ТаблицаНабора.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаНабора.Добавить();
	СтрокаТаблицы.Участник = Участник;
	СтрокаТаблицы.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
	СтрокаТаблицы.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	
КонецПроцедуры

Процедура ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
	ТаблицаНабора,
	БизнесПроцесс,
	ИмяТабличнойЧасти) Экспорт
	
	Для каждого ИсполнителиСтрока Из БизнесПроцесс[ИмяТабличнойЧасти] Цикл
		Если Не ЗначениеЗаполнено(ИсполнителиСтрока.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, ИсполнителиСтрока.Исполнитель);
			
		ИначеЕсли ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ДобавитьУчастникаВТаблицуНабора(
				ТаблицаНабора,
				ИсполнителиСтрока.Исполнитель,
				ИсполнителиСтрока.ОсновнойОбъектАдресации,
				ИсполнителиСтрока.ДополнительныйОбъектАдресации);
				
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный исполнитель.'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРабочуюГруппуДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Документ);
	
КонецФункции

Процедура ФормаДокументаДобавитьУчастника(
	Форма,
	Участник,
	ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено)
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Отбор.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Отбор.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Если Форма.РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.РабочаяГруппаТаблица.Добавить();
	СтрокаТаблицы.Участник = Участник;
	СтрокаТаблицы.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
	СтрокаТаблицы.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

Процедура ФормаШаблонаДобавитьУчастника(
	Форма,
	РабочаяГруппаТаблица,
	Участник,
	ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено)
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Отбор.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Отбор.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Если РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = РабочаяГруппаТаблица.Добавить();
	СтрокаТаблицы.Участник = Участник;
	СтрокаТаблицы.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
	СтрокаТаблицы.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
КонецПроцедуры

Процедура ФормаДокументаДобавитьУчастников(Форма, РабочаяГруппаТаблица) Экспорт
	
	Для каждого РабочаяГруппаТаблицаСтрока Из РабочаяГруппаТаблица Цикл
		ФормаДокументаДобавитьУчастника(
			Форма,
			РабочаяГруппаТаблицаСтрока.Участник,
			РабочаяГруппаТаблицаСтрока.ОсновнойОбъектАдресации,
			РабочаяГруппаТаблицаСтрока.ДополнительныйОбъектАдресации);
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Обработка настройки рабочей группы при создания формы документа
// Вызывается из процедур документов ПриСозданииНаСервере
//
Процедура ДокументПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
	ДокументПриИзмененииВидаДокумента(Форма);
	
КонецПроцедуры

// Обработчик события формы
// Устанавливает параметры спика рабочей группы,
// устанавливает реквизит формы КоличествоУчастниковРабочейГруппы
// устанавливает условное оформление списка рабочей группы
// Вызывается из процедур документов ПриЧтенииНаСервере
//
Процедура ДокументПриЧтенииНаСервере(Форма) Экспорт
	
	Форма.РабочаяГруппаТаблица.Очистить();
	ФормаДокументаДобавитьУчастников(Форма, ПолучитьРабочуюГруппуДокумента(Форма.Объект.Ссылка));
	Форма.РабочаяГруппаТаблица.Сортировать("Иконка, ЭтоРоль Убыв, Участник");
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Форма.Объект) Тогда
		ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СсылкаНаОбъект = Форма.Объект.Ссылка;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СсылкаНаОбъект) Тогда
			Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(СсылкаНаОбъект) Тогда
				// Для не новых документов добавляем новых участников по документу.
				ПредыдущиеУчастники = ПолучитьПустуюТаблицуУчастников();
				ДобавитьУчастниковИзИсточника(ПредыдущиеУчастники, СсылкаНаОбъект);
				ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
				
				ТипИсточника = ТипЗнч(СсылкаНаОбъект);
				ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
				ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
				Попытка
					ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
				Исключение
					// Метода может не быть.
				КонецПопытки;
				Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
					Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаУчастников, Форма.Объект);
				КонецЕсли;
				
				Отбор = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				УдаляемыеСтроки = Новый Массив;
				Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
					ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
					НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
					КонецЕсли;
				КонецЦикла;
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					ТаблицаУчастников.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗаписи.Вставить("ЭтоНовый", Ложь);
	Иначе
		ПараметрыЗаписи.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппа", Форма.РабочаяГруппаТаблица.Выгрузить());
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПослеЗаписиНаСервере(Форма, ПараметрыЗаписи) Экспорт
	
	СсылкаНаОбъект = Форма.Объект.Ссылка;
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаНаОбъект);
	Форма.ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = Форма.ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
		Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
		
	КонецЦикла;
	
	ДокументПриЧтенииНаСервере(Форма);
	
КонецПроцедуры

// Обработчик события формы
Процедура ДокументПриИзмененииВидаДокумента(Форма) Экспорт
	
	ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма);
	ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма);
	
КонецПроцедуры

// Обработчик события формы ОбработкаВыбора документа
//
Процедура ДокументОбработкаВыбора(Форма, ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущаяСтрока = Форма.Элементы.РабочаяГруппаТаблица.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение.РольИсполнителя;
			ТекущиеДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ТекущиеДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Форма.РабочаяГруппаТаблица.Очистить();
		Для каждого РабочаяГруппаСтрока Из ВыбранноеЗначение Цикл
			ФормаДокументаДобавитьУчастника(
				Форма,
				РабочаяГруппаСтрока.Исполнитель,
				РабочаяГруппаСтрока.ОсновнойОбъектАдресации,
				РабочаяГруппаСтрока.ДополнительныйОбъектАдресации);
		КонецЦикла;
		Форма.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = Форма.Элементы.РабочаяГруппаТаблица.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение[0].Значение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		Для Индекс = 1 по ВыбранноеЗначение.Количество() - 1 Цикл
			ФормаДокументаДобавитьУчастника(
				Форма,
				ВыбранноеЗначение[Индекс].Значение);
			Форма.Модифицированность = Истина;
		КонецЦикла;
	Иначе
		ТекущаяСтрока = Форма.Элементы.РабочаяГруппаТаблица.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы ОбработкаВыбора шаблона документа
//
Процедура ШаблонОбработкаВыбора(Форма, ВыбранноеЗначение, РабочаяГруппаТаблица, РабочаяГруппаЭлемент) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение.РольИсполнителя;
			ТекущиеДанные.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
			ТекущиеДанные.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		РабочаяГруппаТаблица.Очистить();
		Для каждого РабочаяГруппаСтрока Из ВыбранноеЗначение Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				РабочаяГруппаСтрока.Исполнитель,
				РабочаяГруппаСтрока.ОсновнойОбъектАдресации,
				РабочаяГруппаСтрока.ДополнительныйОбъектАдресации);
		КонецЦикла;
		Форма.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение[0].Значение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		Для Индекс = 1 по ВыбранноеЗначение.Количество() - 1 Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				ВыбранноеЗначение[Индекс].Значение);
			Форма.Модифицированность = Истина;
		КонецЦикла;	
	Иначе
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы шаблона документа ПриСозданииНаСервере
//
Процедура ШаблонПриСозданииНаСервере(Форма) Экспорт
	
	ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме шаблона документа
//
Процедура ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппа.ЭтоРоль");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаУчастник");
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме документа
//
Процедура ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма) Экспорт
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ЭтоРоль");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
КонецПроцедуры

// Возвращает список значений, содержащий подходящих участников
//
Функция СформироватьДанныеВыбораУчастника(Текст, ВключатьАвтоподстановку = Ложь) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка,
		|	СведенияОПользователях.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РолиИсполнителей.Ссылка,
		|	NULL
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование ПОДОБНО &Текст
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка,
		|	NULL
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	ГруппыПользователей.Наименование ПОДОБНО &Текст");
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда 
			ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Выборка.Подразделение) + ")");
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ВключатьАвтоподстановку Тогда 
		ДоступныеФункции = ШаблоныДокументов.ПолучитьСписокДоступныхФункций();
		Для Каждого ЭлементСписка Из ДоступныеФункции Цикл
			Если НРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) = НРег(Текст) Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Устанавливает в строке реквизиты, необходимые для условного оформления
//
Процедура УстановитьРеквизитыУсловногоОформления(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЭтоРоль = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Если ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ТекущиеДанные.Иконка = 1;
			ТекущиеДанные.ЭтоРоль = Истина;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			ТекущиеДанные.Иконка = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("Строка") Тогда
			ТекущиеДанные.Иконка = 4;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников из шаблона в таблицу.
//
Процедура ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма)
	
	ШаблонДокумента = Форма.Объект.Шаблон;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого РабочаяГруппаСтрока Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("Строка") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Форма.Объект);
				
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ГруппыПользователей")
			 Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, ЗначениеАвтоподстановки);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
					ЗначениеАвтоподстановки.РольИсполнителя,
					ЗначениеАвтоподстановки.ОсновнойОбъектАдресации,
					ЗначениеАвтоподстановки.ДополнительныйОбъектАдресации);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи")
					 Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.ГруппыПользователей")
					 Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, ЗначениеАвтоподстановкиЭлемент);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда 
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							ЗначениеАвтоподстановкиЭлемент.ОсновнойОбъектАдресации,
							ЗначениеАвтоподстановкиЭлемент.ДополнительныйОбъектАдресации);
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
					КонецЕсли;
					
				КонецЦикла;
			Иначе
				ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.Пользователи")
			  Или ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			  
			ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, РабочаяГруппаСтрока.Участник);
			
		ИначеЕсли ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			ДобавитьУчастникаВТаблицуНабора(
				ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.ОсновнойОбъектАдресации,
				РабочаяГруппаСтрока.ДополнительныйОбъектАдресации);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из шаблона
//
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(Форма) Экспорт
	
	ШаблонДокумента = Форма.Объект.Шаблон;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем таблицу участников рабочей группы с учетом автоподстановок
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	
КонецПроцедуры

// Возвращает признак автоматического заполнения состава участников рабочей группы
// Параметры:
// Объект (СправочникСсылка.ВнутренниеДокументы,
// 		СправочникСсылка.ВходящиеДокументы,
// 		СправочникСсылка.ИсходящиеДокументы,
//
Функция ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Владелец.ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|Владелец.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И РеквизитыОбъекта.ВладелецВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ВладелецЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
			
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ПроектныеЗадачи") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Владелец,
			"ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И РеквизитыОбъекта.ВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ЭтоГруппа,
			|ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И Не РеквизитыОбъекта.ЭтоГруппа
			И РеквизитыОбъекта.ВидПроектаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ВидПроекта, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов")
			И Не Объект.ЭтоГруппа
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ЭтоГруппа,
			|ВидМероприятия.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат Не РеквизитыОбъекта.ЭтоГруппа
			И РеквизитыОбъекта.ВидМероприятияАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Мероприятия") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ВидМероприятия, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
			
		Возврат Не Объект.ЭтоГруппа
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		СвязанныйПредметИПользователь =
			РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныйПредметИПользователя(Объект);
		
		Возврат СвязанныйПредметИПользователь = Неопределено;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ЗаписиРабочегоКалендаря") Тогда
		
		СвязанныйПредметИПользователь =
			РегистрыСведений.СвязанныеЗаписиКалендаря.ПолучитьСвязанныйПредметИПользователя(Объект.Ссылка);
		
		Возврат СвязанныйПредметИПользователь = Неопределено;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВходящиеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы,
			|ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов")
			И РеквизитыОбъекта.ВидДокументаАвтоматическиВестиСоставУчастниковРабочейГруппы = Истина
			И РеквизитыОбъекта.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ИсходящиеДокументы") Тогда
		
		АвтоматическиДобавлятьУчастниковРГ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ВидДокумента, "АвтоматическиВестиСоставУчастниковРабочейГруппы");
		
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов")
			И АвтоматическиДобавлятьУчастниковРГ = Истина
			И Объект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак "Необходимо отобразить на форме флаг запрета автоматического
// добавления участников рабочей группы"
// Параметрыы:
// Документ (СправочникСсылка.ВходящиеДокументы, СправочникОбъект.ВходящиеДокументы,
// СправочникСсылка.ВнутренниеДокументы, СправочникОбъект.ВнутренниеДокументы,
// СправочникСсылка.ИсходящиеДокументы, СправочникОбъект.ИсходящиеДокументы)
//
Функция ОтображатьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Документ)
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
		Возврат Документ.ВидМероприятия.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Документ.ВидПроекта.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыДокументов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документ.ВидДокумента.АвтоматическиВестиСоставУчастниковРабочейГруппы;
	
КонецФункции

// Возвращает настройку ОбязательноеЗаполнениеРабочихГруппДокументов
//
Функция ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыПроектов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Возврат Ложь;
		КонецЕсли;	
		Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	КонецЕсли;
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыВнутреннихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыИсходящихДокументов") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидДокумента.ОбязательноеЗаполнениеРабочихГруппДокументов;
	
КонецФункции

// Отображает в карточке документа или флаг запрета автоматического добавления участников
// рабочей группы или информационную надпись, в зависимости от настройки вида документа
//
Процедура ОтобразитьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма) Экспорт
	
	ОтображатьФлаг = ОтображатьФлагЗапретаАвтоматическогоДобавленияУчастниковРабочейГруппы(Форма.Объект);
	Форма.Элементы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы.Видимость = ОтображатьФлаг;
	
КонецПроцедуры

// При необходимости добавляет в рабочую группу документа ТекущегоПользователя
// Только для новых документов
//
Процедура ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма)
	
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидМероприятия) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидПроекта) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Форма.Объект.ВидДокумента) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РабочаяГруппаТаблица.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Участник = ПараметрыСеанса.ТекущийПользователь;
	РабочаяГруппаТаблицаСтрока = Форма.РабочаяГруппаТаблица.Добавить();
	РабочаяГруппаТаблицаСтрока.Участник = Участник;
	УстановитьРеквизитыУсловногоОформления(РабочаяГруппаТаблицаСтрока);
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК

// Обработчик подписки РабочиеГруппыБизнесПроцессыПередЗаписью
//
Процедура РабочиеГруппыБизнесПроцессыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоНовый = Источник.ЭтоНовый();
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	Если Не ЭтоНовый Тогда
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ПредыдущиеПредметы = Мультипредметность.ПолучитьПредметыПроцесса(Источник.Ссылка);
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
			ПредыдущийПроект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "Проект");
			Если Источник.Проект <> ПредыдущийПроект Тогда
				Если ЗначениеЗаполнено(ПредыдущийПроект) Тогда
					Источник.ДополнительныеСвойства.Вставить("ПредыдущийПроект", ПредыдущийПроект);
				КонецЕсли;
			Иначе 
				// Формирование списка старых участников рабочей группы 
				ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);	
			КонецЕсли;
		КонецЕсли;
		
		Если Мультипредметность.ИзмененыПредметыПроцесса(Источник) Тогда
			Источник.ДополнительныеСвойства.Вставить("ПредыдущиеПредметы", ПредыдущиеПредметы);
		Иначе
			// Формирование списка старых участников рабочей группы 
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
			Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
				Источник.ДополнительныеСвойства.ПредыдущиеУчастники = ТаблицаУчастников;
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыБизнесПроцессыПриЗаписи
//
Процедура РабочиеГруппыБизнесПроцессыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Источник);

	// Для нового бизнес-процесса в рабочую группу добавляем всех участников бизнес-процесса
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		Для Каждого Предмет Из Предметы Цикл 
			Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
				// если предмет - проектная задача, то заполняется рабочая группа ее проекта
				Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "Владелец");
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Проект, Источник.Ссылка);
			Иначе
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Предмет, Источник.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
			И ЗначениеЗаполнено(Источник.Проект) Тогда
			ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка);
		КонецЕсли;
		
		// Обновление прав всех ведущих и главных процессов
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	Иначе
		
		ПредыдущиеПредметы = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеПредметы") Тогда
			ПредыдущиеПредметы = Источник.ДополнительныеСвойства.ПредыдущиеПредметы;
		КонецЕсли;
		ПредыдущийПроект = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущийПроект") Тогда
			ПредыдущийПроект = Источник.ДополнительныеСвойства.ПредыдущийПроект;
		КонецЕсли;

		// Формирование списка отличий старой рабочей группы от новой.
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
			ПредыдущиеУчастники = Источник.ДополнительныеСвойства.ПредыдущиеУчастники;
			Отбор = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			УдаляемыеСтроки = Новый Массив;
			Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
				НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
				КонецЕсли;
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ТаблицаУчастников.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение рабочих групп, если у процесса изменился предмет или проект
					
		// Если предмет изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если Предметы.Количество() > 0 И Мультипредметность.ИзмененыПредметыПроцесса(Источник) Тогда
			Для Каждого Предмет Из Предметы Цикл 
				Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
					// Если предмет - проектная задача, то заполняется рабочая группа ее проекта
					Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "Владелец");
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Проект, Источник.Ссылка);
				Иначе
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Предмет, Источник.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
		Иначе // предмет не изменился
			Для Каждого Предмет Из Предметы Цикл 
				Если ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Предмет) Тогда
					// Если предмет - проектная задача, то заполняется рабочая группа ее проекта
					Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "Владелец");
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Проект, ТаблицаУчастников);
				Иначе
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Предмет, ТаблицаУчастников);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Если проект изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И ЗначениеЗаполнено(Источник.Проект) Тогда
			Если ПредыдущийПроект <> Источник.Проект Тогда
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка);
			Иначе // проект не изменился
				ДобавитьУчастниковВРабочуюГруппуОбъекта(Источник.Проект, ТаблицаУчастников);
			КонецЕсли;
		КонецЕсли;
		
		// Обновление прав всех ведущих и главных процессов
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление рабочих групп всех родительских процессов
Процедура ОбновитьРабочиеГруппыРодительскихПроцессов(Процесс, ТаблицаУчастников) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс)
		Или Не ЗначениеЗаполнено(ТаблицаУчастников) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Обновление ведущего процесса
	ВедущаяЗадача = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Процесс, "ВедущаяЗадача");
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		РодительскийПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВедущаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			
			СтруктураПоиска = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
					
				// Рекурсивный вызов	
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
	// Обновление главного процесса
	Если ЗначениеЗаполнено(Процесс.ГлавнаяЗадача) Тогда
		РодительскийПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Процесс.ГлавнаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			
			СтруктураПоиска = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
					
				// Рекурсивный вызов	
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыДокументыПередЗаписью
//
Процедура РабочиеГруппыДокументыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыДокументыПриЗаписи
//
Процедура РабочиеГруппыДокументыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Если Не Источник.ДополнительныеСвойства.Свойство("ДобавитьУчастниковПоДокументу") Тогда
		Возврат;
	КонецЕсли;
	Если Не Источник.ДополнительныеСвойства.ДобавитьУчастниковПоДокументу Тогда
		Возврат;
	КонецЕсли;
		
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		// Для нового документа в рабочую группу добавляем всех участников этого документа
		ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Ссылка, Источник.Ссылка, Ложь);
	Иначе
		// Если документ не новый, то добавляем только новых участников рабочей группы
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		ПредыдущиеУчастники = Источник.ДополнительныеСвойства.ПредыдущиеУчастники;
		Отбор = Новый Структура("Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		УдаляемыеСтроки = Новый Массив;
		Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
			ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
			НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
			КонецЕсли;
		КонецЦикла;
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ТаблицаУчастников.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		Если ТаблицаУчастников.Количество() > 0 Тогда
			ДобавитьУчастниковВРабочуюГруппуОбъекта(Источник.Ссылка, ТаблицаУчастников, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчие подписки РабочиеГруппыВидыДокументовПередЗаписью
//
Процедура РабочиеГруппыВидыДокументовПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ОбязательноеЗаполнениеРабочихГруппДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееЗначение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		Источник.Ссылка,
		"ОбязательноеЗаполнениеРабочихГруппДокументов");
	Если ПредыдущееЗначение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЗаполнитьРабочиеГруппы", Истина);
	
КонецПроцедуры

// Обработка подписки РабочиеГруппыВидыДокументовПриЗаписи
//
Процедура РабочиеГруппыВидыДокументовПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗаполнитьРабочиеГруппы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.ЗаполнитьРабочиеГруппы Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВидДокументаПриУстановкеОбязательногоЗаполненияРабочихГруппДокументов(Источник.Ссылка);
	Исключение
		Отказ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВидДокументаПриУстановкеОбязательногоЗаполненияРабочихГруппДокументов(ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вид документа.'");
	КонецЕсли;
	
	ТекстЗапросаДокументы =
		"ВЫБРАТЬ
		|	Документы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.[Вид] КАК Документы
		|ГДЕ
		|	Документы.[ИмяРеквизитаВид] = &ВидДокумента";
		
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВнутреннихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ВнутренниеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыВходящихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ВходящиеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыИсходящихДокументов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "ИсходящиеДокументы");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидДокумента");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "Мероприятия");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидМероприятия");
	ИначеЕсли ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыПроектов") Тогда
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[Вид]", "Проекты");
		ТекстЗапросаДокументы = СтрЗаменить(ТекстЗапросаДокументы, "[ИмяРеквизитаВид]", "ВидПроекта");		
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный вид документа.'");
	КонецЕсли;
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		Запрос = Новый Запрос(ТекстЗапросаДокументы);
		Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПерезаполнитьРабочуюГруппуДокумента(Выборка.Ссылка, Истина);
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИБ

// Обработчик обновления ИБ
//
Процедура ОбновлениеИнформационнойБазыПерейтиНаверсию_1_2_0_2() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Переносим информацию из личного доступа в рабочие группы
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВнутренниеДокументыЛичныйДоступ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы.ЛичныйДоступ_Удалить КАК ВнутренниеДокументыЛичныйДоступ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВходящиеДокументыЛичныйДоступ.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы.ЛичныйДоступ_Удалить КАК ВходящиеДокументыЛичныйДоступ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсходящиеДокументыЛичныйДоступ.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы.ЛичныйДоступ_Удалить КАК ИсходящиеДокументыЛичныйДоступ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		Для каждого ЛичныйДоступСтрока Из Выборка.Ссылка.ЛичныйДоступ_Удалить Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, ЛичныйДоступСтрока.Пользователь);
		КонецЦикла;
		ПерезаписатьРабочуюГруппуОбъекта(Выборка.Ссылка, ТаблицаУчастников, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую таблицу участников рабочей группы
Функция ПолучитьПустуюТаблицуУчастников() Экспорт

	Возврат РегистрыСведений.РабочиеГруппы.ПолучитьПустуюТаблицуУчастников();
	
КонецФункции
