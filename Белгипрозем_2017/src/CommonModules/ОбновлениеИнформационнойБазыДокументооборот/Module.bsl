////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации Документооборот
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	//МиСофт+
	Описание.Имя = "ДокументооборотКОРПДляБеларуси";
	Описание.Версия = Метаданные.Версия;
	//МиСофт-
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника";
	Обработчик.Приоритет = 1;
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.УдалитьНеиспользуемыеДескрипторы";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнитьПраваПредопределенных";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.УдалитьИзПрофилейСсылкиНаУдаленныеРоли";
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПервыйЗапуск";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Пользователи.СоздатьАдминистратора";
	
	// Обработчики, выполняемые при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_6_1";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_1";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.7.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_2";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_3";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_1";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_2";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_3";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_4";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_6";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_2_1";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ИсправлениеПризнакаНаличияНеисполненныхЗадачУОбъекта";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.1";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРесурсаСостояниеВРегистреДанныеБизнесПроцессов";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_2_3";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_2_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ЗаполнениеРеквизитаСостояниеВПроцессахРешениеВопросВыполненияЗадач";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновлениеПравДоступаШаблоновПроцессов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОбновлениеРеквизитовДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.3.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_3_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_3_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.3.5";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОчиститьИнформациюОДескрипторахПроцессовИЗадач";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.3.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_3_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ОчиститьИнформациюОДескрипторахПроцессовИЗадачНемедленно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.3.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_3_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_4_1";
	
	Обработчик = Обработчики.Добавить();
//{{MRG[ <-> ]
	Обработчик.Версия = "1.4.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_4_2";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	Обработчик.Версия = "1.4.4.3";
//	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_4_3";
//}}MRG[ <-> ]
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_5_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_6_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_6_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_7_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.321";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_321";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.323";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_323";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.324";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_324";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.327";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_327";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.328";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_328";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.334";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_334";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.346";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_346";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.385";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_385";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.400";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_400";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.401";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_401";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.402";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_402";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.4.8.413";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_8_413";
	
	Возврат Обработчики;
	
КонецФункции

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт


КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсияИБ     - Строка - версия ИБ до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсияИБ        - Строка - версия ИБ после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков
//                                             обновления, сгруппированных по номеру версии.
//  Итерирование по выполненным обработчикам:
//		Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//	
//			Если Версия.Версия = "*" Тогда
//				группа обработчиков, которые выполняются всегда
//			Иначе
//				группа обработчиков, которые выполняются для определенной версии 
//			КонецЕсли;
//	
//			Для Каждого Обработчик Из Версия.Строки Цикл
//				...
//			КонецЦикла;
//	
//		КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево -	если Истина, то выводить форму с описанием 
//											обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт


КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений системы.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновлений.
//   
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт


КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	// Предыдущее имя конфигурации, с которой нужно выполнить переход.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы
		|ИЗ
		|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
		|ГДЕ
		|	ВерсииПодсистем.ЭтоОсновнаяКонфигурация = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	ПредыдущееИмяКонфигурации = Запрос.Выполнить().Выгрузить()[0].ИмяПодсистемы;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПервыйЗапуск_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_1_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_2_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_2_7_3_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_1_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_2_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_1_4_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_3_2_1_СПРОФНаКОРП";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = ПредыдущееИмяКонфигурации;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДокументооборот.ПерейтиНаВерсию_1_4_1_5";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт


КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ.

// Обработчик первого запуска
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеКонтактнойИнформациейДокументооборот.КонтактнаяИнформацияОбновлениеИБ();
	
	// обновление с версии ПРОФ
	ПерейтиНаВерсию_КОРП_СВерсииПРОФ();
	
	// нумератор для входящих
	НумераторОбъект = Справочники.Нумераторы.ВходящиеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		НумераторОбъект.Записать();
	КонецЕсли;	
	
	// нумератор для исходящих
	НумераторОбъект = Справочники.Нумераторы.ИсходящиеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		НумераторОбъект.Записать();
	КонецЕсли;
	
	// нумератор для внутренних
	НумераторОбъект = Справочники.Нумераторы.ВнутренниеДокументы.ПолучитьОбъект();
	Если ПустаяСтрока(НумераторОбъект.ФорматНомера) Тогда 
		НумераторОбъект.Периодичность = Перечисления.ПериодичностьНумераторов.Год;
		НумераторОбъект.ФорматНомера  = "[Номер]";
		НумераторОбъект.Записать();
	КонецЕсли;	
	
	// способы доставки
	СпособыДоставки = Новый СписокЗначений;
	СпособыДоставки.Добавить("Почта");
	СпособыДоставки.Добавить("Email");
	СпособыДоставки.Добавить("Факс");
	СпособыДоставки.Добавить("Курьер");
	СпособыДоставки.Добавить("Фельдсвязь");
	
	Для Каждого СпособДоставки Из СпособыДоставки Цикл
		Если Справочники.СпособыДоставки.НайтиПоНаименованию(СпособДоставки.Значение).Пустая() Тогда
			СпособДоставкиОбъект = Справочники.СпособыДоставки.СоздатьЭлемент();
			СпособДоставкиОбъект.Наименование = СпособДоставки.Значение;
			СпособДоставкиОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	// функциональные опции
	Константы.ИспользоватьБизнесПроцессыИЗадачи.Установить(Истина);
	Константы.ИспользоватьХранилищеФайлов.Установить(Истина);
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	Константы.ИспользоватьНоменклатуруДел.Установить(Истина);
	Константы.ИспользоватьЖурналПередачиДокументов.Установить(Истина);
	Константы.ИспользоватьСоставДокументов.Установить(Истина);
	
	Константы.ИспользоватьВидыВходящихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыИсходящихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыВнутреннихДокументов.Установить(Истина);
	Константы.ИспользоватьВидыДокументов.Установить(Истина);
	
	Константы.ИспользоватьФайлыУВходящихДокументов.Установить(Истина);
	Константы.ИспользоватьФайлыУИсходящихДокументов.Установить(Истина);
	
	Константы.ИспользоватьСвязиДокументов.Установить(Истина);
	Константы.ИспользоватьРезолюцииВДокументах.Установить(Истина);
	
	Константы.ИзменятьЗаданияЗаднимЧислом.Установить(Истина);
	Константы.ИспользоватьПеренаправлениеЗадач.Установить(Истина);
	
	Константы.ИспользоватьСостоянияДокументов.Установить(Истина);
	Константы.ОграничиватьДоступностьПолейПоСостоянию.Установить(Истина);
	Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Установить(Истина);
	
	Константы.ИспользоватьСпискиРассылкиПоКорреспондентам.Установить(Истина);
	Константы.ИзменениеФайловMSWordТолькоНаСервере.Установить(Ложь);
	
	Константы.ИспользоватьАвтозаполнениеФайлов.Установить(Истина);
	Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	
	Константы.ИспользоватьВопросыВыполненияЗадач.Установить(Истина);
	Константы.ОчищатьДанныеДляПолнотекстовогоПоиска.Установить(Истина);
	
	Константы.ОсновнаяЕдиницаДлительности.Установить(Перечисления.ЕдиницыДлительности.Час);
	Константы.ОсновнаяЕдиницаТрудозатрат.Установить(Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Установить(Истина);
	КонецЕсли;
	
	// начальное заполнение профилей групп доступа
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили();
	
	// Генерация групп доступа, одноименных с профилями
	СоздатьГруппуДоступа("Пользователи", Истина);
	
	// Перед созданием пустых групп права доступа отключаем, чтобы не было лишних пересчетов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	СоздатьГруппуДоступа("Делопроизводители", Ложь);
	СоздатьГруппуДоступа("Контроль задач и бизнес-процессов", Ложь);
	СоздатьГруппуДоступа("Работа с входящими и исходящими документами", Ложь);
	СоздатьГруппуДоступа("Ответственные за НСИ", Ложь);
	СоздатьГруппуДоступа("Руководители подразделений", Ложь);
	СоздатьГруппуДоступа("Контроль ежедневных отчетов", Ложь);
	СоздатьГруппуДоступа("Руководители проектов", Ложь);
	СоздатьГруппуДоступа("Ответственные за ЭДО", Ложь);
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Справочник "Организации"
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Юридический адрес организации'"), Истина, Ложь, Ложь);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Фактический адрес организации'"), Истина, Ложь, Ложь);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,
		НСтр("ru='Телефон организации'"), Истина, Ложь, Ложь);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,
		НСтр("ru='Факс организации'"), Истина, Ложь, Ложь);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
		НСтр("ru='Адрес электронной почты организации'"), Истина, Ложь, Ложь);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Почтовый адрес организации'"), Истина, Ложь, Ложь);
	
	НастроитьПрофильИГруппуДоступаАдминистраторы();

	// электронная подпись
	ЭлектроннаяПодпись.ЗаполнитьНазначенияСертификатовЭП();
	
	// комментарии к предопределенным типам связи
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПолученОтвет, 		НСтр("ru = 'Ссылка на входящий документ, полученный в ответ на исходящий'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтправленОтвет, 		НСтр("ru = 'Ссылка на исходящий документ, отправленный в ответ на входящий'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПовторноеОбращение, 	НСтр("ru = 'Cсылка из первичного на повторное обращение'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПервичноеОбращение, 	НСтр("ru = 'Cсылка из повторного на первичное обращение'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПредметПереписки, 	НСтр("ru = 'Cсылка из входящих и исходящих на предмет переписки'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПерепискаПоПредмету,	НСтр("ru = 'Ссылка на входящие и исходящие документы, при помощи которых ведется переписка по предмету'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ВОтветНаПереадресованное, НСтр("ru = 'Cсылка на входящий документ, полученный при переадресации, в ответ на который отправляется ответ переадресовавшему'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтветПереадресовавшему, 	НСтр("ru = 'Ссылка на исходящий документ, отправленный в качестве ответа переадресовавшему'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПереадресованДокументом, 	НСтр("ru = 'Cсылка из входящего на документ, который его переадресовал'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПереадресацияДокумента, 	НСтр("ru = 'Ссылка из исходящего на документ, который он переадресовывает'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.Дубликат, 				НСтр("ru = 'Cсылка из основного обращения на дубликат'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОсновноеОбращение, 		НСтр("ru = 'Cсылка из дубликата на основное обращение'"));

	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ДелаетНеДействующим, 		НСтр("ru = 'Cсылка из документа, который отменяет (расторгает) другие документы'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НеДействуетВСоответствии, НСтр("ru = 'Ссылка из отмененного документа на тот, который его отменяет'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 	 НСтр("ru = 'Cсылка из входящего на документ, в ответ на который он получен'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, НСтр("ru = 'Cсылка из исходящего на документ, в ответ на который он отправлен'"));
	
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НаОснованииПисьма, НСтр("ru = 'Cсылка из входящих, исходящих, внутренних документов и проектов на входящее или исходящее письмо'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПисьмоОснование,   НСтр("ru = 'Cсылка из входящего или исходящего письма на входящий, исходящий, внутренний документ или проект'"));
	
	// Предмет переписки - Переписка по предмету 
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);

	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПредметПереписки, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПерепискаПоПредмету, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// Первичное обращение - Повторное обращение	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПервичноеОбращение, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПовторноеОбращение, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// В ответ на - Получен ответ
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПолученОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// В ответ на - Отправлен ответ	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтправленОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ВОтветНаПереадресованное, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтветПереадресовавшему, 
		Перечисления.ХарактерСвязей.Единичная, 
		Истина);
		
	// ВОтветНаПереадресованное - ОтветПереадресовавшему
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПереадресованДокументом, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПереадресацияДокумента, 
		Перечисления.ХарактерСвязей.Единичная, 
		Истина);	
		
	// Дубликат - ОсновноеОбращение
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОсновноеОбращение, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.Дубликат, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// НеДействуетВСоответствии - ДелаетНеДействующим
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.НеДействуетВСоответствии, 
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ДелаетНеДействующим, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);	
		
	// В ответ на - Получен ответ
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ПолученВОтветНа, 
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ПолученОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// В ответ на - Отправлен ответ	
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОтправленВОтветНа, 
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(), 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.ОтправленОтвет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
		
	// Входящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо отправлено в ответ на входящее
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ получен в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученВОтветНаПисьмо,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящее письмо отправлено в ответ на входящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ отправлен в ответ на входящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаДокумент,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Пересылка входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Пересылка исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Входящего письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);	
		
	// Исходящее письмо отправлено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтвет,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Мероприятия на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Мероприятия на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// заполнение валют по умолчанию
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	//Мисофт+
	СоздатьВалюту("974", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", КлассификаторТаблица);
	СоздатьВалюту("643", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", КлассификаторТаблица);
	СоздатьВалюту("840", "доллар, доллара, долларов, м, цент, цента, центов, м, 2", КлассификаторТаблица);
	СоздатьВалюту("978", "евро, евро, евро, м, цент, цента, центов, м, 2", КлассификаторТаблица);
	
	СправочникСсылка = Справочники.Валюты.НайтиПоКоду("974"); // рубль
	//Мисофт-
	
	Константы.ОсновнаяВалюта.Установить(СправочникСсылка);
	
	// заполнение справочника ВидыБизнесСобытий
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеВнутреннегоДокумента, НСтр("ru='Создание внутреннего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеВходящегоДокумента, НСтр("ru='Создание входящего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеИсходящегоДокумента, НСтр("ru='Создание исходящего документа'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеВнутреннегоДокумента, НСтр("ru='Изменение внутреннего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеВходящегоДокумента, НСтр("ru='Изменение входящего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеИсходящегоДокумента, НСтр("ru='Изменение исходящего документа'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияВнутреннегоДокумента, НСтр("ru='Регистрация внутреннего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента, НСтр("ru='Регистрация входящего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.РегистрацияИсходящегоДокумента, НСтр("ru='Регистрация исходящего документа'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияВнутреннегоДокумента, НСтр("ru='Перерегистрация внутреннего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента, НСтр("ru='Перерегистрация входящего документа'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеререгистрацияИсходящегоДокумента, НСтр("ru='Перерегистрация исходящего документа'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса, НСтр("ru='Старт процесса'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса, НСтр("ru='Завершение процесса'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса, НСтр("ru='Остановка процесса'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса, НСтр("ru='Возобновление процесса'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ЗахватФайлаДляРедактирования, НСтр("ru='Захват файла для редактирования'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОсвобождениеФайла, НСтр("ru='Освобождение файла'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеФайла, НСтр("ru='Создание файла'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеФайла, НСтр("ru='Изменение файла'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеКорреспондента, НСтр("ru='Создание корреспондента'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеСоставаКомплекта, НСтр("ru='Изменение состава комплекта'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеЗадачи,			НСтр("ru='Создание задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,	НСтр("ru='Перенаправление задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалитьПросроченаЗадача,	НСтр("ru='Просрочена задача'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,			НСтр("ru='Задача выполнена'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалитьПодошелСрокЗадачи,	НСтр("ru='Подошел срок задачи'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию, НСтр("ru='Добавление в категорию'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалениеИзКатегории, НСтр("ru='Удаление из категории'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеСообщения, НСтр("ru='Создание сообщения'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, НСтр("ru='Прерывание процесса'"));	
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, НСтр("ru='Отмена выполнения задачи'"));
	
	Константы.СрокХраненияБизнесСобытий.Установить(7); // ставим срок хранения бизнес-событий - 7 дней
	
	// Связи документов.
	СвязиДокументов.ПерейтиНаВерсию_1_2_1_3();
	
	РаботаСФайламиВызовСервера.ИнициализироватьКонстантуХранитьФайлыВТомахНаДиске();
	
	// все тома хранения файлов переносим в группу "Группа по умолчанию"
	Группа = Справочники.ТомаХраненияФайлов.НайтиПоНаименованию("Группа по умолчанию", Истина);
	Если Группа = Неопределено ИЛИ Группа = Справочники.ТомаХраненияФайлов.ПустаяСсылка() Тогда
		Группа = Справочники.ТомаХраненияФайлов.СоздатьГруппу();
		Группа.Наименование = "Группа по умолчанию";
		Группа.Записать();
	КонецЕсли;
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	
	// обновление графиков работы
	Выборка = Справочники.ГрафикиРаботы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГрафикРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне = 8;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе = 40;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце = 20;
		КонецЕсли;
		ГрафикРаботыОбъект.Записать();
	КонецЦикла;
	
	// Заполнение предопределенных состояний документа в СВД
	Выборка = Справочники.ВидыСостоянийДокументовВСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 10;
			Состояние.НомерКартинкиВКоллекции = 1;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Отправлен Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 20;
			Состояние.НомерКартинкиВКоллекции = 2;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 30;
			Состояние.НомерКартинкиВКоллекции = 3;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 40;
			Состояние.НомерКартинкиВКоллекции = 4;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Ошибка Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 60;
			Состояние.НомерКартинкиВКоллекции = 6;
			Состояние.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП();
	
	Константы.СрокХраненияПротоколаДоставкиПочты.Установить(30); // 30 дней
	
	Попытка
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
		Если ЗначениеЗаполнено(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем) Тогда 
			Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем);
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ВыполнятьОтправкуВОтдельномРегламентномЗадании = Истина;
		Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Установить(ВыполнятьОтправкуВОтдельномРегламентномЗадании);
	КонецЕсли;
	
	СоздатьВидПроекта(НСтр("ru = 'Общий'"), Ложь);
	
	// Начальное создание поставляемых областей делегирования
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Строка.ИмяПредопределенного;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
	// создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль);
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;	
	
	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// Загрузка типовых инструкций
	Константы.ИспользоватьИнструкции.Установить(Истина);
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	

	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	НастройкиВыполненияЗадачПоПочте = ВыполнениеЗадачПоПочтеСервер.ПолучитьНастройкиПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(
		НастройкиВыполненияЗадачПоПочте.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(
		НастройкиВыполненияЗадачПоПочте.СрокХраненияПротоколовВыполненияЗадачПоПочте);
		
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'");
	РазделОбщиеТемыОбъект.Записать();
	
	УстановитьНастройкиУведомленийПоУмолчанию();

	ПодпискаОтменаВыполненияЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);

	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		ПодпискаОтменаВыполненияЗадачи);
		
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И (НЕ ВидыКонтактнойИнформации.ЗапрещатьВводНекорректного
		|			ИЛИ НЕ ВидыКонтактнойИнформации.ПроверятьКорректность)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ВидКИОбъект.ЗапрещатьВводНекорректного = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
	// Создание первого элемента справочника ПрофилиНастроекКриптографии и перенос записей из
	// РС ПутиМодулейКриптографииСерверовLinux в одноименную ТЧ справочника.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ПрофилиНастроекКриптографии КАК ПрофилиНастроекКриптографии";
	НетПрофилейКриптографии = Запрос.Выполнить().Пустой();	
	ПровайдерЭП = Константы.ПровайдерЭП.Получить();
	
	Если НетПрофилейКриптографии И ЗначениеЗаполнено(ПровайдерЭП) Тогда
		
		ПрофильНастроекКриптографии = Справочники.ПрофилиНастроекКриптографии.СоздатьЭлемент();
		ПрофильНастроекКриптографии.Наименование = ПровайдерЭП;
		ПрофильНастроекКриптографии.ПровайдерЭП = ПровайдерЭП;
		ПрофильНастроекКриптографии.ТипПровайдераЭП = Константы.ТипПровайдераЭП.Получить();
		ПрофильНастроекКриптографии.АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
		ПрофильНастроекКриптографии.АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
		ПрофильНастроекКриптографии.АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УдалитьПутиМодулейКриптографииСерверовLinux.ИмяКомпьютера,
			|	УдалитьПутиМодулейКриптографииСерверовLinux.Комментарий,
			|	УдалитьПутиМодулейКриптографииСерверовLinux.ПутьМодуляКриптографии
			|ИЗ
			|	РегистрСведений.УдалитьПутиМодулейКриптографииСерверовLinux КАК УдалитьПутиМодулейКриптографииСерверовLinux";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрофильНастроекКриптографии.ПутиМодулейКриптографииСерверовLinux.Добавить();
			НоваяСтрока.ИмяКомпьютера = Выборка.ИмяКомпьютера;
			НоваяСтрока.ПутьМодуляКриптографии = Выборка.ПутьМодуляКриптографии;
			НоваяСтрока.Комментарий = Выборка.Комментарий;
		КонецЦикла;
		
		ПрофильНастроекКриптографии.Записать();
		
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// замена предопределенного значения ДругаяИнформацияОрганизации
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, Перечисления.ТипыКонтактнойИнформации.Другое, НСтр("ru = 'Любая другая контактная информация'"), Истина, Ложь, Ложь, 7);
		
	// БЭД
	//Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	//Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Ложь);
	
	//МиСофт+
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаКриптографии");
	#КонецЕсли
	//МиСофт-
	
КонецПроцедуры

Процедура ПервыйЗапуск_СПРОФНаКОРП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПерейтиНаВерсию_КОРП_СВерсииПРОФ();
	
	// функциональные опции
	Константы.ОсновнаяЕдиницаДлительности.Установить(Перечисления.ЕдиницыДлительности.Час);
	Константы.ОсновнаяЕдиницаТрудозатрат.Установить(Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас);
	
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Установить(Истина);
	КонецЕсли;
	
	// начальное заполнение профилей групп доступа
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили();
	
	// Перед созданием пустых групп права доступа отключаем, чтобы не было лишних пересчетов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	СоздатьГруппуДоступа("Руководители проектов", Ложь);
	СоздатьГруппуДоступа("Ответственные за ЭДО", Ложь);
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// комментарии к предопределенным типам связи
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.НаОснованииПисьма, НСтр("ru = 'Cсылка из входящих, исходящих, внутренних документов и проектов на входящее или исходящее письмо'"));
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ПисьмоОснование,   НСтр("ru = 'Cсылка из входящего или исходящего письма на входящий, исходящий, внутренний документ или проект'"));
	
	// Входящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Внутренний документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыВнутреннихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Проект на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Проекты.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаПисьмо,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо отправлено в ответ на входящее
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящий документ получен в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученВОтветНаПисьмо,
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящее письмо отправлено в ответ на входящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыВходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Исходящий документ отправлен в ответ на входящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ОтправленВОтветНаПисьмо,
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтветныйДокумент,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Входящее письмо получено в ответ на исходящий документ
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПолученоВОтветНаДокумент,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.ВидыИсходящихДокументов.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПолученоОтветноеПисьмо,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Пересылка входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Пересылка исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПересланоПисьмом,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Множественная,
		Справочники.ТипыСвязей.ПересылкаПисьма,
		Перечисления.ХарактерСвязей.Единичная,
		Истина);
		
	// Входящего письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Исходящее письмо на основании проекта
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);	
		
	// Исходящее письмо отправлено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтвет,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Мероприятия на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Мероприятия на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// заполнение справочника ВидыБизнесСобытий
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ДобавлениеВКатегорию, НСтр("ru='Добавление в категорию'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.УдалениеИзКатегории, НСтр("ru='Удаление из категории'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеМероприятия, НСтр("ru='Создание мероприятия'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеМероприятия, НСтр("ru='Изменение мероприятия'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроекта, НСтр("ru='Создание проекта'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроекта, НСтр("ru='Изменение проекта'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеПроектнойЗадачи, НСтр("ru='Создание проектной задачи'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ИзменениеПроектнойЗадачи, НСтр("ru='Изменение проектной задачи'"));
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.СозданиеСообщения, НСтр("ru='Создание сообщения'"));
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, НСтр("ru='Прерывание процесса'"));	
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, НСтр("ru='Отмена выполнения задачи'"));
	
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	
	// обновление графиков работы
	Выборка = Справочники.ГрафикиРаботы.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГрафикРаботыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВДне = 8;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихЧасовВНеделе = 40;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце) Тогда
			ГрафикРаботыОбъект.КоличествоРабочихДнейВМесяце = 20;
		КонецЕсли;
		ГрафикРаботыОбъект.Записать();
	КонецЦикла;
	
	// Заполнение предопределенных состояний документа в СВД
	Выборка = Справочники.ВидыСостоянийДокументовВСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 10;
			Состояние.НомерКартинкиВКоллекции = 1;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Отправлен Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 20;
			Состояние.НомерКартинкиВКоллекции = 2;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 30;
			Состояние.НомерКартинкиВКоллекции = 3;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 40;
			Состояние.НомерКартинкиВКоллекции = 4;
			Состояние.Записать();
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыСостоянийДокументовВСВД.Ошибка Тогда
			Состояние = Выборка.Ссылка.ПолучитьОбъект();
			Состояние.Позиция = 60;
			Состояние.НомерКартинкиВКоллекции = 6;
			Состояние.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП();
	
	Константы.СрокХраненияПротоколаДоставкиПочты.Установить(30); // 30 дней
	
	Попытка
		ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем = Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Получить();
		Если ЗначениеЗаполнено(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем) Тогда 
			Константы.ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем.Установить(ПользовательРегламентногоЗаданияПолучениеИОтправкаПисем);
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
	ВыполнятьОтправкуВОтдельномРегламентномЗадании = Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Получить();
	Если ВыполнятьОтправкуВОтдельномРегламентномЗадании = Ложь Тогда
		ВыполнятьОтправкуВОтдельномРегламентномЗадании = Истина;
		Константы.ВыполнятьОтправкуВОтдельномРегламентномЗадании.Установить(ВыполнятьОтправкуВОтдельномРегламентномЗадании);
	КонецЕсли;
	
	СоздатьВидПроекта(НСтр("ru = 'Общий'"), Ложь);
	
	// Начальное создание поставляемых областей делегирования
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = Строка.ИмяПредопределенного;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
	// создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль);
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;	
	
	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	НастройкиВыполненияЗадачПоПочте = ВыполнениеЗадачПоПочтеСервер.ПолучитьНастройкиПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(
		НастройкиВыполненияЗадачПоПочте.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(
		НастройкиВыполненияЗадачПоПочте.СрокХраненияПротоколовВыполненияЗадачПоПочте);
		
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'");
	РазделОбщиеТемыОбъект.Записать();
	
	ПодпискаОтменаВыполненияЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);

	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		ПодпискаОтменаВыполненияЗадачи);
		
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И (НЕ ВидыКонтактнойИнформации.ЗапрещатьВводНекорректного
		|			ИЛИ НЕ ВидыКонтактнойИнформации.ПроверятьКорректность)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ВидКИОбъект.ЗапрещатьВводНекорректного = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ.

//МиСофт
Функция УстановитьКоличествоИтераций(КоличествоИтераций)
	//МиСофт+
	КоличествоИтераций = КоличествоИтераций + 1;
	Если КоличествоИтераций >= 1000 Тогда
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		КоличествоИтераций = 0;
		НачатьТранзакцию();
	КонецЕсли;
	Возврат КоличествоИтераций;
	//МиСофт-
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ.

Процедура ПерейтиНаВерсию_1_2_6_1() Экспорт
	
	// Исходящее письмо отправлено в ответ на исходящее письмо
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа,
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ОтправленОтвет,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	// Перезаполнение регистра ПодчиненностьСотрудников
	НаборЗаписей = РегистрыСведений.ПодчиненностьСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	УправлениеДоступомВызовСервераДокументооборот.ЗаполнитьПодчиненностьПользователей();
		
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_2_7_1() Экспорт
	
	// Начальное создание поставляемых областей делегирования
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
		Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
	// Перенос делегирования в справочник из регистра
	Если Метаданные.РегистрыСведений.Найти("УдалитьДелегированиеПравПользователям") <> Неопределено Тогда 
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УдалитьДелегированиеПравПользователям.ОтКого,
		|	УдалитьДелегированиеПравПользователям.Кому,
		|	УдалитьДелегированиеПравПользователям.ДатаПередачи,
		|	УдалитьДелегированиеПравПользователям.Комментарий,
		|	УдалитьДелегированиеПравПользователям.Ответственный
		|ИЗ
		|	РегистрСведений.УдалитьДелегированиеПравПользователям КАК УдалитьДелегированиеПравПользователям");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав
			|ГДЕ
			|	ДелегированиеПрав.ОтКого = &ОтКого И ДелегированиеПрав.Кому = &Кому");
			Запрос.УстановитьПараметр("ОтКого", Выборка.ОтКого);
			Запрос.УстановитьПараметр("Кому", Выборка.Кому);
			
			Если Запрос.Выполнить().Пустой() Тогда 
				ДелегированиеОбъект = Справочники.ДелегированиеПрав.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ДелегированиеОбъект, Выборка);
				
				ДелегированиеОбъект.ВариантДелегирования = Перечисления.ВариантыДелегированияПрав.ВсеПрава;
				ДелегированиеОбъект.Записать();
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Расчет прав должностей для заполнения дескрипторов файлов
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Справочник.Должности");
	
	// Заполнение реквизита дескриптора ЭтоПустойДескриптор
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоДескрипторамДоступа.Дескриптор
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДескрипторДоступа =  Выборка.Дескриптор;
		Если ЗначениеЗаполнено(ДескрипторДоступа.ВидОбъекта) 
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ВладелецОбъекта)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ВопросДеятельности)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ГрифДоступа)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.Организация)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.Проект)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.УчетнаяЗаписьПочты)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.УдалитьПапка)
			ИЛИ ДескрипторДоступа.Корреспонденты.Количество() > 0
			ИЛИ ДескрипторДоступа.Пользователи.Количество() > 0
			ИЛИ ДескрипторДоступа.РабочаяГруппа.Количество() > 0
			ИЛИ ДескрипторДоступа.ФизическиеЛица.Количество() > 0 
			ИЛИ ДескрипторДоступа.НастройкаПрав.Количество() > 0
			ИЛИ ДескрипторДоступа.Группа = Истина
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиВнутреннихДокументов")
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиФайлов") 
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиПисем") Тогда
			Продолжить;
		Иначе
			ДескрипторОбъект = ДескрипторДоступа.ПолучитьОбъект();
			ДескрипторОбъект.ЭтоПустойДескриптор = Истина;
			ДескрипторОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	// заполнение вида маршрутизации у адресата
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресатыПочтовыхСообщений.Ссылка
	|ИЗ
	|	Справочник.АдресатыПочтовыхСообщений КАК АдресатыПочтовыхСообщений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_2_7_1_СПРОФНаКОРП() Экспорт
	
	// Заполнение реквизита дескриптора ЭтоПустойДескриптор
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоДескрипторамДоступа.Дескриптор
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступа КАК ПраваПоДескрипторамДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО ПраваПоДескрипторамДоступа.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДескрипторДоступа =  Выборка.Дескриптор;
		Если ЗначениеЗаполнено(ДескрипторДоступа.ВидОбъекта) 
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ВладелецОбъекта)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ВопросДеятельности)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.ГрифДоступа)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.Организация)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.Проект)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.УчетнаяЗаписьПочты)
			ИЛИ ЗначениеЗаполнено(ДескрипторДоступа.УдалитьПапка)
			ИЛИ ДескрипторДоступа.Корреспонденты.Количество() > 0
			ИЛИ ДескрипторДоступа.Пользователи.Количество() > 0
			ИЛИ ДескрипторДоступа.РабочаяГруппа.Количество() > 0
			ИЛИ ДескрипторДоступа.ФизическиеЛица.Количество() > 0 
			ИЛИ ДескрипторДоступа.НастройкаПрав.Количество() > 0
			ИЛИ ДескрипторДоступа.Группа = Истина
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиВнутреннихДокументов")
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиФайлов") 
			ИЛИ ДескрипторДоступа.ИдентификаторОбъектаМетаданных = 
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ПапкиПисем") Тогда
			Продолжить;
		Иначе
			ДескрипторОбъект = ДескрипторДоступа.ПолучитьОбъект();
			ДескрипторОбъект.ЭтоПустойДескриптор = Истина;
			ДескрипторОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_2_7_2() Экспорт
	
	// перенос роли РегистрацияВнутреннихДокументов в профиль Делопроизводители
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РегистрацияВнутреннихДокументов");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "eeb325ab-db51-11de-a544-00179ab398dc"; // идентификатор профиля Делопроизводители
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
				
				// обновление вида доступа
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ГруппыДоступа.Ссылка
				|ИЗ
				|	Справочник.ГруппыДоступа КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Профиль = &Профиль";
				Запрос.УстановитьПараметр("Профиль", Профиль);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ГруппаДоступаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
					СтрокаВидыВнутренних = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов, "ВидДоступа");
					ЗначенияДоступаВидыВнутренних = ГруппаДоступаОбъект.ЗначенияДоступа.НайтиСтроки(
						Новый Структура("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов));
					
					Если СтрокаВидыВнутренних <> Неопределено // доступ запрещен для внутренних без исключений
						И Не СтрокаВидыВнутренних.ДоступРазрешен
						И ЗначенияДоступаВидыВнутренних.Количество() = 0 Тогда 
						
						СтрокаВидыВходящих  = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов, "ВидДоступа");
						СтрокаВидыИсходящих = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов, "ВидДоступа");
						
						Если СтрокаВидыВходящих <> Неопределено И СтрокаВидыВходящих.ДоступРазрешен
						   И СтрокаВидыИсходящих <> Неопределено И СтрокаВидыИсходящих.ДоступРазрешен Тогда 
							
							СтрокаВидыВнутренних.ДоступРазрешен = Истина;
							ГруппаДоступаОбъект.Записать();
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
				
		КонецЕсли;
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока <> Неопределено Тогда 
				ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// создание поставляемых настроек доступности
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого Строка Из ОписаниеНастроекДоступности Цикл
		
		НастройкаДоступностиСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
		|ГДЕ
		|	НастройкиДоступностиПоСостоянию.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", НастройкаДоступностиСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			НастройкаОбъект = Справочники.НастройкиДоступностиПоСостоянию.СоздатьЭлемент();
			НастройкаОбъект.УстановитьСсылкуНового(НастройкаДоступностиСсылка);
		Иначе // Обновление существующей настройки	 
			НастройкаОбъект = НастройкаДоступностиСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		НастройкаОбъект.Наименование = Строка.Наименование;
		НастройкаОбъект.ТипДокумента = Строка.ТипДокумента;
		НастройкаОбъект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
		
		ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Строка.Роль);
		
		НастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(НастройкаОбъект.ТипДокумента, Строка.Роль);
		НастройкаОбъект.НастройкиДоступности.Очистить();
		НастройкаОбъект.НастройкиДоступности.Загрузить(НастройкиДоступности);
		
		НастройкаОбъект.Записать();
	КонецЦикла;	
	
	// заполнение ТипТекста Исх писем
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Документы.ИсходящееПисьмо.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТипТекста) Тогда 
			ПисьмоОбъект = Выборка.ПолучитьОбъект();
			ПисьмоОбъект.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст;
			ПисьмоОбъект.ОбменДанными.Загрузка = Истина;
			ПисьмоОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Перенос настроек встроенной почты
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяПользователя = ПользовательИБ.Имя;
		
		СтароеЗначение =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиПрочтения",
				"ИспользоватьАвтоматическоеПрочтение",,,
				ИмяПользователя);
		
		Если СтароеЗначение <> Неопределено Тогда
			
			ТекущееЗначениеПрочтениеПочты =
				ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
					"ВстроеннаяПочта",
					"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",,,
					ИмяПользователя);
			Если ТекущееЗначениеПрочтениеПочты = Неопределено Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"ВстроеннаяПочта",
					"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
					СтароеЗначение,,
					ИмяПользователя);
			КонецЕсли;
			
			ТекущееЗначениеПрочтениеФорума =
				ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
					"НастройкиПрочтения",
					"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",,,
					ИмяПользователя);
			Если ТекущееЗначениеПрочтениеФорума = Неопределено Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"НастройкиПрочтения",
					"ПомечатьСообщенияФорумаКакПрочтенныеПриПрочтенныеПриПросмотреВОбластиЧтения",
					СтароеЗначение,,
					ИмяПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение констант для формирования служебной информации при ответе и пересылке
	Константы.СокращатьИнформациюОПисьмеПриОтвете.Установить(Ложь);
	Константы.СокращатьИнформациюОПисьмеПриПересылке.Установить(Ложь);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриОтвете.Установить(Истина);
	Константы.ПомечатьКаждуюСтрокуИсходногоПисьмаПриПересылке.Установить(Истина);
	Константы.СокращатьПредставлениеАдресатов.Установить(Истина);
	Константы.ЧислоАдресатовДляКраткогоПредставления.Установить(30);
	Константы.СимволЦитированияВПереписке.Установить("> ");
	Константы.ВидЦитированияПриОтветеВФорматеHTML.Установить(Перечисления.ВидыЦитированияПриОтвете.ВертикальнаяПолоса);
	
	// Заполнение шаблонов процессов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	МассивИменСправочников = Новый Массив;
	МассивИменСправочников.Добавить("ШаблоныИсполнения");
	МассивИменСправочников.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	МассивИменСправочников.Добавить("ШаблоныОзнакомления");
	МассивИменСправочников.Добавить("ШаблоныПоручения");
	МассивИменСправочников.Добавить("ШаблоныПриглашения");
	МассивИменСправочников.Добавить("ШаблоныРассмотрения");
	МассивИменСправочников.Добавить("ШаблоныРегистрации");
	МассивИменСправочников.Добавить("ШаблоныСогласования");
	МассивИменСправочников.Добавить("ШаблоныСоставныхБизнесПроцессов");
	МассивИменСправочников.Добавить("ШаблоныУтверждения");
	
	ТекстЗапроса = "";
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	ШаблонПроцесса.Ссылка,
		|	%ПолеСИменемСправочника%
		|ИЗ
		|	Справочник.%ИмяСправочника% КАК ШаблонПроцесса
		|ГДЕ
		|	Выразить(ШаблонПроцесса.НаименованиеБизнесПроцесса КАК Строка(250)) = """"";
		
	Для Каждого ИмяСправочника из МассивИменСправочников Цикл
		
		ПолеСИменемСправочника = """" + ИмяСправочника + """" + ?(ТекстЗапроса = "", " КАК ИмяСправочника", "");
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "",
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|") + ШаблонТекстаЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСправочника%", ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСИменемСправочника%", ПолеСИменемСправочника);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.НаименованиеБизнесПроцесса = ШаблоныБизнесПроцессов.НаименованиеПроцессаПоУмолчанию(
												Выборка.ИмяСправочника, Выборка.Ссылка);
		ШаблонОбъект.ДобавлятьНаименованиеПредмета = Истина;
		ШаблонОбъект.Записать();
	КонецЦикла;
    ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_7_2_СПРОФНаКОРП() Экспорт
	
	// перенос роли РегистрацияВнутреннихДокументов в профиль Делопроизводители
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РегистрацияВнутреннихДокументов");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "eeb325ab-db51-11de-a544-00179ab398dc"; // идентификатор профиля Делопроизводители
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
				
				// обновление вида доступа
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ГруппыДоступа.Ссылка
				|ИЗ
				|	Справочник.ГруппыДоступа КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Профиль = &Профиль";
				Запрос.УстановитьПараметр("Профиль", Профиль);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					ГруппаДоступаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
					СтрокаВидыВнутренних = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов, "ВидДоступа");
					ЗначенияДоступаВидыВнутренних = ГруппаДоступаОбъект.ЗначенияДоступа.НайтиСтроки(
						Новый Структура("ВидДоступа", ПланыВидовХарактеристик.ВидыДоступа.ВидыВнутреннихДокументов));
					
					Если СтрокаВидыВнутренних <> Неопределено // доступ запрещен для внутренних без исключений
						И Не СтрокаВидыВнутренних.ДоступРазрешен
						И ЗначенияДоступаВидыВнутренних.Количество() = 0 Тогда 
						
						СтрокаВидыВходящих  = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыВходящихДокументов, "ВидДоступа");
						СтрокаВидыИсходящих = ГруппаДоступаОбъект.ВидыДоступа.Найти(ПланыВидовХарактеристик.ВидыДоступа.ВидыИсходящихДокументов, "ВидДоступа");
						
						Если СтрокаВидыВходящих <> Неопределено И СтрокаВидыВходящих.ДоступРазрешен
						   И СтрокаВидыИсходящих <> Неопределено И СтрокаВидыИсходящих.ДоступРазрешен Тогда 
							
							СтрокаВидыВнутренних.ДоступРазрешен = Истина;
							ГруппаДоступаОбъект.Записать();
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
				
		КонецЕсли;
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока <> Неопределено Тогда 
				ПрофильОбъект.Роли.Удалить(НайденнаяСтрока);
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение шаблонов процессов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	МассивИменСправочников = Новый Массив;
	МассивИменСправочников.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	МассивИменСправочников.Добавить("ШаблоныПриглашения");
	
	ТекстЗапроса = "";
	ШаблонТекстаЗапроса = "ВЫБРАТЬ
		|	ШаблонПроцесса.Ссылка,
		|	%ПолеСИменемСправочника%
		|ИЗ
		|	Справочник.%ИмяСправочника% КАК ШаблонПроцесса
		|ГДЕ
		|	Выразить(ШаблонПроцесса.НаименованиеБизнесПроцесса КАК Строка(250)) = """"";
		
	Для Каждого ИмяСправочника из МассивИменСправочников Цикл
		
		ПолеСИменемСправочника = """" + ИмяСправочника + """" + ?(ТекстЗапроса = "", " КАК ИмяСправочника", "");
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "",
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|") + ШаблонТекстаЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяСправочника%", ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСИменемСправочника%", ПолеСИменемСправочника);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.НаименованиеБизнесПроцесса = ШаблоныБизнесПроцессов.НаименованиеПроцессаПоУмолчанию(
												Выборка.ИмяСправочника, Выборка.Ссылка);
		ШаблонОбъект.ДобавлятьНаименованиеПредмета = Истина;
		ШаблонОбъект.Записать();
	КонецЦикла;
    ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_7_3() Экспорт
	
	// Конвертация папок поиска на новую систему хранения настроек
	Выборка = Справочники.ПапкиПоиска.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПапкаОбъект = Выборка.ПолучитьОбъект();	
		ТаблицаНастроек = ПапкаОбъект.НастройкаОтбора.Получить();
		Если ТаблицаНастроек <> Неопределено И ТипЗнч(ТаблицаНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ТаблицаУсловий = Новый ТаблицаЗначений;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("ПеречислениеСсылка.ВидыУсловийПоискаПисем"));	
			НоваяКолонка = ТаблицаУсловий.Колонки.Добавить(
				"ВидУсловия", 
				Новый ОписаниеТипов(Массив));
				
			Массив = Новый Массив;
			Массив.Добавить(Тип("Строка"));	
			НоваяКолонка = ТаблицаУсловий.Колонки.Добавить(
				"ПредставлениеЗначенияУсловия", 
				Новый ОписаниеТипов(Массив));
				
			Массив = Новый Массив;
			Массив.Добавить(Тип("СписокЗначений"));	
			НоваяКолонка = ТаблицаУсловий.Колонки.Добавить(
				"ЗначенияУсловия", 
				Новый ОписаниеТипов(Массив));
			
			Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийПоискаПисем Цикл
				НоваяСтрока = ТаблицаУсловий.Добавить();
				НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
				НоваяСтрока.ПредставлениеЗначенияУсловия = "";
				НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
				
				Если ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий Тогда
					НоваяСтрока.ЗначенияУсловия.Добавить(Перечисления.ТипыЛогическойСвязи.И);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Элемент Из ТаблицаНастроек.Элементы Цикл
				Если ТипЗнч(Элемент) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Важность") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ИмеетВажность, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Тема") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Адресаты") Тогда
									
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.Кому, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("От_кого") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ПолученоОт, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Ссылка.Комментарий") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.КомментарийСодержитСлова, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Дата") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ЗаПериод, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Флаг") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ОтмеченоФлагом, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Папка") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ХранитсяВПапке, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Прочтено") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.Прочтено, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ОтправленОтвет") 
					ИЛИ Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ПолученОтвет") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ЕстьОтвет, 
						"ВидУсловия");
					Если Строка.ЗначенияУсловия.Количество() = 0 Тогда 
						Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					Иначе
						Строка.ЗначенияУсловия[0] = Строка.ЗначенияУсловия[0] Или Элемент.ПравоеЗначение;
					КонецЕсли;	
										
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("Переслан") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.Переслано, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
					
				ИначеЕсли Элемент.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных("ЕстьВложения") Тогда
					
					Строка = ТаблицаУсловий.Найти(
						Перечисления.ВидыУсловийПоискаПисем.ИмеетВложения, 
						"ВидУсловия");
					Строка.ЗначенияУсловия.Добавить(Элемент.ПравоеЗначение);
										
				КонецЕсли;	
				
			КонецЦикла;
			
			Для Каждого Строка Из ТаблицаУсловий Цикл
				Строка.ПредставлениеЗначенияУсловия = 
					ПолучитьПредставлениеСпискаЗначенийДляУсловия(
						Строка.ВидУсловия, Строка.ЗначенияУсловия);
			КонецЦикла;
			
			ПапкаОбъект.НастройкаОтбора = Новый ХранилищеЗначения(ТаблицаУсловий);
			ПапкаОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ПапкиПоискаВыборка = Справочники.ПапкиПоиска.Выбрать();
	Пока ПапкиПоискаВыборка.Следующий() Цикл
		
		ПапкаОбъект = ПапкиПоискаВыборка.ПолучитьОбъект();
		ТаблицаНастроек = ПапкаОбъект.НастройкаОтбора.Получить();
		Если ТаблицаНастроек = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Строка Из ТаблицаНастроек Цикл
			
			Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ХранитсяВПапке Тогда
				Если Строка.ЗначенияУсловия.Количество() = 0 Тогда
					Строка.ЗначенияУсловия.Добавить("МоиПапки");
				КонецЕсли;
			КонецЕсли;
			Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи Тогда
				Если Строка.ЗначенияУсловия.Количество() = 0 Тогда
					Строка.ЗначенияУсловия.Добавить("МоиУчетныеЗаписи");
				КонецЕсли;
			КонецЕсли;
			Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.Удалено Тогда
				Если Строка.ЗначенияУсловия.Количество() = 0 Тогда
					Строка.ЗначенияУсловия.Добавить(Ложь);
				КонецЕсли; 
			КонецЕсли;
			Если Строка.ВидУсловия = Перечисления.ВидыУсловийПоискаПисем.ВыбратьПервые Тогда
				Если Строка.ЗначенияУсловия.Количество() = 0 Тогда
					Строка.ЗначенияУсловия.Добавить(0);
				КонецЕсли; 
			КонецЕсли;
			
		КонецЦикла;
		ПапкаОбъект.НастройкаОтбора = Новый ХранилищеЗначения(ТаблицаНастроек);
		ПапкаОбъект.Записать();
		
	КонецЦикла;
	
	ПеренестиНастройкиУведомленияВидаСобытия(
		Справочники.ВидыБизнесСобытий.УдалитьПодошелСрокЗадачи,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		
	ПеренестиНастройкиУведомленияВидаСобытия(
		Справочники.ВидыБизнесСобытий.УдалитьПросроченаЗадача,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
	// Очистка некорректных записей в регистре ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	(ДанныеБизнесПроцессов.БизнесПроцесс = НЕОПРЕДЕЛЕНО
		|			ИЛИ ДанныеБизнесПроцессов.БизнесПроцесс ЕСТЬ NULL )";
		
	Таблица = Запрос.Выполнить().Выгрузить();		
	Для каждого Строка Из Таблица Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Строка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Строка.Завершен;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	// Заполнение производственного календаря 2013
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2013Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_2_7_3_СПРОФНаКОРП() Экспорт
	
	ПеренестиНастройкиУведомленияВидаСобытия(
		Справочники.ВидыБизнесСобытий.УдалитьПодошелСрокЗадачи,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	
	ПеренестиНастройкиУведомленияВидаСобытия(
		Справочники.ВидыБизнесСобытий.УдалитьПросроченаЗадача,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	
	// Заполнение производственного календаря 2013
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2013Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_1() Экспорт
	
	// заполнение табл части Корреспонденты
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ВнутренниеДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Корреспондент)
		 Или ЗначениеЗаполнено(Выборка.КонтактноеЛицо)
		 Или ЗначениеЗаполнено(Выборка.ПодписалОтКорреспондента) Тогда 
			
			Если Выборка.Корреспонденты.Количество() = 0 Тогда 
				Документ = Выборка.ПолучитьОбъект();
				
				Строка = Документ.Корреспонденты.Добавить();
				Строка.Корреспондент = Документ.Корреспондент;
				Строка.КонтактноеЛицо = Документ.КонтактноеЛицо;
				Строка.ПодписалОтКорреспондента = Документ.ПодписалОтКорреспондента;	
				
				Документ.ОбменДанными.Загрузка = Истина;
				Документ.Записать();
				
				КорреспондентыДляСписков = Делопроизводство.ПолучитьКорреспондентовДляСписков(
					Документ.Корреспонденты.Выгрузить());
				РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
					Документ.Ссылка, "КорреспондентыДляСписков", КорреспондентыДляСписков);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныВнутреннихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Шаблон.Корреспондент)
		 Или ЗначениеЗаполнено(Шаблон.КонтактноеЛицо) Тогда 
			
			Если Шаблон.Корреспонденты.Количество() = 0 Тогда 
				Строка = Шаблон.Корреспонденты.Добавить();
				Строка.Корреспондент = Шаблон.Корреспондент;
				Строка.КонтактноеЛицо = Шаблон.КонтактноеЛицо;
				
				Шаблон.ОбменДанными.Загрузка = Истина;
				Шаблон.Записать(); 
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Очистка поля "Исполнитель" у ведущих задач
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.ВедущаяЗадача
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	Не (ДанныеБизнесПроцессов.ВедущаяЗадача.Исполнитель = &Исполнитель
		|	И ДанныеБизнесПроцессов.ВедущаяЗадача.РольИсполнителя = &РольИсполнителя)";
	Запрос.УстановитьПараметр("Исполнитель", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("РольИсполнителя", Справочники.РолиИсполнителей.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.ВедущаяЗадача.ПолучитьОбъект();
		ЗадачаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		ЗадачаОбъект.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса, НСтр("ru='Прерывание процесса'"));	
	
	// Перенос предметов процессов и задач из реквизита "УдалитьПредмет" в табличные части
	ПеренестиПредметыПроцессовИЗадачВТабличныеЧасти();
	
	// Перенос электронных подписей из ТЧ ЭлектронныеЦифровыеПодписи справочников:
	// - ВерсииФайлов
	// - ВнутренниеДокументы
	// - ВходящиеДокументы
	// - ИсходящиеДокументы
	// в РС ЭлектронныеПодписи.
	ПеренестиЭПИзТабличныхЧастейВРегистрСведений();
	
	// Перенос записей из РС ВизыСогласования в справочник ВизыСогласования и в
	// РС ЭлектронныеПодписи
	ПеренестиВизыСогласованияИзРегистраСведенийВСправочник();
	
	// Перенос резолюций из табличных частей Резолюции справочников:
	// - ВнутренниеДокументы
	// - ВходящиеДокументы
	// в справочник Резолюции.
	ПеренестиРезолюцииИзТабличныхЧастейВСправочник();
	
	// Загрузка типовых инструкций
	Константы.ИспользоватьИнструкции.Установить(Истина);
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	
КонецПроцедуры

Процедура ПеренестиЭПИзТабличныхЧастейВРегистрСведений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработаныВсеЭП = Ложь;
	
	Пока Не ОбработаныВсеЭП Цикл
		
		ОбработаноЭП = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 250
			|	ЭП.Ссылка,
			|	ЭП.ДатаПодписи,
			|	ЭП.ИмяФайлаПодписи,
			|	ЭП.Комментарий,
			|	ЭП.КомуВыданСертификат,
			|	ЭП.Отпечаток,
			|	ЭП.Подпись,
			|	ЭП.УстановившийПодпись,
			|	ЭП.Сертификат
			|ИЗ
			|	Справочник.ВерсииФайлов.УдалитьЭлектронныеЦифровыеПодписи КАК ЭП
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ПеремещенныеЭП
			|		ПО ЭП.Ссылка = ПеремещенныеЭП.Объект
			|			И ЭП.ДатаПодписи = ПеремещенныеЭП.ДатаПодписи
			|			И ЭП.УстановившийПодпись = ПеремещенныеЭП.УстановившийПодпись
			|ГДЕ
			|	ПеремещенныеЭП.УникальныйИдентификатор ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 250
			|	ЭП.Ссылка,
			|	ЭП.ДатаПодписи,
			|	ЭП.ИмяФайлаПодписи,
			|	ЭП.Комментарий,
			|	ЭП.КомуВыданСертификат,
			|	ЭП.Отпечаток,
			|	ЭП.Подпись,
			|	ЭП.УстановившийПодпись,
			|	ЭП.Сертификат
			|ИЗ
			|	Справочник.ВнутренниеДокументы.УдалитьЭлектронныеЦифровыеПодписи КАК ЭП
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ПеремещенныеЭП
			|		ПО ЭП.Ссылка = ПеремещенныеЭП.Объект
			|			И ЭП.ДатаПодписи = ПеремещенныеЭП.ДатаПодписи
			|			И ЭП.УстановившийПодпись = ПеремещенныеЭП.УстановившийПодпись
			|ГДЕ
			|	ПеремещенныеЭП.УникальныйИдентификатор ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 250
			|	ЭП.Ссылка,
			|	ЭП.ДатаПодписи,
			|	ЭП.ИмяФайлаПодписи,
			|	ЭП.Комментарий,
			|	ЭП.КомуВыданСертификат,
			|	ЭП.Отпечаток,
			|	ЭП.Подпись,
			|	ЭП.УстановившийПодпись,
			|	ЭП.Сертификат
			|ИЗ
			|	Справочник.ВходящиеДокументы.УдалитьЭлектронныеЦифровыеПодписи КАК ЭП
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ПеремещенныеЭП
			|		ПО ЭП.Ссылка = ПеремещенныеЭП.Объект
			|			И ЭП.ДатаПодписи = ПеремещенныеЭП.ДатаПодписи
			|			И ЭП.УстановившийПодпись = ПеремещенныеЭП.УстановившийПодпись
			|ГДЕ
			|	ПеремещенныеЭП.УникальныйИдентификатор ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 250
			|	ЭП.Ссылка,
			|	ЭП.ДатаПодписи,
			|	ЭП.ИмяФайлаПодписи,
			|	ЭП.Комментарий,
			|	ЭП.КомуВыданСертификат,
			|	ЭП.Отпечаток,
			|	ЭП.Подпись,
			|	ЭП.УстановившийПодпись,
			|	ЭП.Сертификат
			|ИЗ
			|	Справочник.ИсходящиеДокументы.УдалитьЭлектронныеЦифровыеПодписи КАК ЭП
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ПеремещенныеЭП
			|		ПО ЭП.Ссылка = ПеремещенныеЭП.Объект
			|			И ЭП.ДатаПодписи = ПеремещенныеЭП.ДатаПодписи
			|			И ЭП.УстановившийПодпись = ПеремещенныеЭП.УстановившийПодпись
			|ГДЕ
			|	ПеремещенныеЭП.УникальныйИдентификатор ЕСТЬ NULL ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Создание ЭП
			ЭП = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			ЭП.ДатаПодписи = Выборка.ДатаПодписи;
			ЭП.Объект = Выборка.Ссылка;
			ЭП.УстановившийПодпись = Выборка.УстановившийПодпись;
			ЭП.Версия = 1;
			ЭП.ИмяФайлаПодписи = Выборка.ИмяФайлаПодписи;
			ЭП.Комментарий = Выборка.Комментарий;
			ЭП.КомуВыданСертификат = Выборка.КомуВыданСертификат;
			ЭП.Отпечаток = Выборка.Отпечаток;
			ЭП.Подпись = Выборка.Подпись;
			ЭП.ПодписьВерна = Ложь;
			ЭП.Сертификат = Выборка.Сертификат;
			ЭП.Записать();
			
			ОбработаноЭП = ОбработаноЭП + 1;
			
		КонецЦикла;
		
		Если ОбработаноЭП < 250 Тогда
			ОбработаныВсеЭП = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиВизыСогласованияИзРегистраСведенийВСправочник()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработаныВсеВизы = Ложь;
	
	Пока Не ОбработаныВсеВизы Цикл
		
		ОбработаноВиз = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	Визы.Документ,
			|	Визы.Исполнитель,
			|	Визы.ОсновнойОбъектАдресации,
			|	Визы.ДополнительныйОбъектАдресации,
			|	Визы.ПомещенаВИсторию,
			|	Визы.ДатаПомещенияВИсторию,
			|	Визы.Удалена,
			|	Визы.РезультатСогласования,
			|	Визы.Комментарий,
			|	Визы.ДатаИсполнения,
			|	Визы.Подписан,
			|	Визы.ДатаПодписи,
			|	Визы.Подпись,
			|	Визы.КомуВыданСертификат,
			|	Визы.Сертификат,
			|	Визы.УстановившийПодпись,
			|	Визы.КомментарийКПодписи,
			|	Визы.Автор,
			|	Визы.ПоместилВИсторию,
			|	Визы.УстановилРезультат,
			|	Визы.Источник
			|ИЗ
			|	РегистрСведений.УдалитьВизыСогласования КАК Визы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВизыСогласования КАК ПеремещенныеВизы
			|		ПО Визы.Документ = ПеремещенныеВизы.Документ
			|			И (Визы.Исполнитель = ПеремещенныеВизы.Исполнитель
			|				ИЛИ Визы.Исполнитель = ПеремещенныеВизы.РольИсполнителя)
			|			И Визы.ОсновнойОбъектАдресации = ПеремещенныеВизы.ОсновнойОбъектАдресации
			|			И Визы.ДополнительныйОбъектАдресации = ПеремещенныеВизы.ДополнительныйОбъектАдресации
			|			И Визы.ПомещенаВИсторию = ПеремещенныеВизы.ПомещенаВИсторию
			|			И Визы.ДатаПомещенияВИсторию = ПеремещенныеВизы.ДатаПомещенияВИсторию
			|			И Визы.Удалена = ПеремещенныеВизы.Удалена
			|ГДЕ
			|	(ПеремещенныеВизы.Ссылка ЕСТЬ NULL 
			|			ИЛИ ПеремещенныеВизы.Ссылка = ЗНАЧЕНИЕ(Справочник.ВизыСогласования.ПустаяСсылка))";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Перенос визы
			Виза = Справочники.ВизыСогласования.СоздатьЭлемент();
			Виза.Наименование = РаботаСВизамиСогласования.ПолучитьНаименованиеВизы(Выборка.Документ);
			Виза.Автор = Выборка.Автор;
			Виза.ДатаИсполнения = Выборка.ДатаИсполнения;
			Виза.ДатаПомещенияВИсторию = Выборка.ДатаПомещенияВИсторию;
			Виза.Документ = Выборка.Документ;
			Виза.ДополнительныйОбъектАдресации = Выборка.ДополнительныйОбъектАдресации;
			Если ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				Виза.Исполнитель = Выборка.Исполнитель;
			ИначеЕсли ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Виза.РольИсполнителя = Выборка.Исполнитель;
			КонецЕсли;
			Виза.Источник = Выборка.Источник;
			Виза.Комментарий = Выборка.Комментарий;
			Виза.ОсновнойОбъектАдресации = Выборка.ОсновнойОбъектАдресации;
			Виза.Подписана = Выборка.Подписан;
			Виза.ПоместилВИсторию = Выборка.ПоместилВИсторию;
			Виза.ПомещенаВИсторию = Выборка.ПомещенаВИсторию;
			Виза.РезультатСогласования = Выборка.РезультатСогласования;
			Виза.Удалена = Выборка.Удалена;
			Виза.УстановилРезультат = Выборка.УстановилРезультат;
			Виза.Записать();
			
			// Перенос подписи
			Если Виза.Подписана Тогда
				ЭП = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
				ЭП.ДатаПодписи = Выборка.ДатаПодписи;
				ЭП.Объект = Виза.Ссылка;
				ЭП.УстановившийПодпись = Выборка.УстановившийПодпись;
				ЭП.Версия = 1;
				ЭП.Комментарий = Выборка.КомментарийКПодписи;
				ЭП.КомуВыданСертификат = Выборка.КомуВыданСертификат;
				ЭП.Подпись = Выборка.Подпись;
				ЭП.ПодписьВерна = Ложь;
				ЭП.Сертификат = Выборка.Сертификат;
				ЭП.Записать();
			КонецЕсли;
			
			ОбработаноВиз = ОбработаноВиз + 1;
			
		КонецЦикла;
		
		Если ОбработаноВиз < 100 Тогда
			ОбработаныВсеВизы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиРезолюцииИзТабличныхЧастейВСправочник()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработаныВсеРезолюции = Ложь;
	
	Пока Не ОбработаныВсеРезолюции Цикл
		
		ОбработаноРезолюций = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 500
			|	Резолюции.Ссылка,
			|	Резолюции.АвторРезолюции,
			|	Резолюции.ДатаРезолюции,
			|	Резолюции.Резолюция,
			|	Резолюции.Рассмотрение
			|ИЗ
			|	Справочник.ВнутренниеДокументы.УдалитьРезолюции КАК Резолюции
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Резолюции КАК ПеремещенныеРезолюции
			|		ПО Резолюции.Ссылка = ПеремещенныеРезолюции.Документ
			|			И Резолюции.АвторРезолюции = ПеремещенныеРезолюции.АвторРезолюции
			|			И Резолюции.ДатаРезолюции = ПеремещенныеРезолюции.ДатаРезолюции
			|			И ((ВЫРАЗИТЬ(Резолюции.Резолюция КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(ПеремещенныеРезолюции.ТекстРезолюции КАК СТРОКА(1000))))
			|			И Резолюции.Рассмотрение = ПеремещенныеРезолюции.Источник
			|ГДЕ
			|	(ПеремещенныеРезолюции.Ссылка ЕСТЬ NULL 
			|			ИЛИ ПеремещенныеРезолюции.Ссылка = ЗНАЧЕНИЕ(Справочник.Резолюции.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 500
			|	Резолюции.Ссылка,
			|	Резолюции.АвторРезолюции,
			|	Резолюции.ДатаРезолюции,
			|	Резолюции.Резолюция,
			|	Резолюции.Рассмотрение
			|ИЗ
			|	Справочник.ВходящиеДокументы.УдалитьРезолюции КАК Резолюции
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Резолюции КАК ПеремещенныеРезолюции
			|		ПО Резолюции.Ссылка = ПеремещенныеРезолюции.Документ
			|			И Резолюции.АвторРезолюции = ПеремещенныеРезолюции.АвторРезолюции
			|			И Резолюции.ДатаРезолюции = ПеремещенныеРезолюции.ДатаРезолюции
			|			И ((ВЫРАЗИТЬ(Резолюции.Резолюция КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(ПеремещенныеРезолюции.ТекстРезолюции КАК СТРОКА(1000))))
			|			И Резолюции.Рассмотрение = ПеремещенныеРезолюции.Источник
			|ГДЕ
			|	(ПеремещенныеРезолюции.Ссылка ЕСТЬ NULL 
			|			ИЛИ ПеремещенныеРезолюции.Ссылка = ЗНАЧЕНИЕ(Справочник.Резолюции.ПустаяСсылка))";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Перенос резолюции
			Резолюция = Справочники.Резолюции.СоздатьЭлемент();
			Резолюция.Наименование = РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Выборка.Ссылка);
			Резолюция.АвторРезолюции = Выборка.АвторРезолюции;
			Резолюция.ВнесРезолюцию = Выборка.АвторРезолюции;
			Резолюция.ДатаРезолюции = Выборка.ДатаРезолюции;
			Резолюция.Документ = Выборка.Ссылка;
			Резолюция.Источник = Выборка.Рассмотрение;
			Резолюция.Подписана = Ложь;
			Резолюция.ТекстРезолюции = Выборка.Резолюция;
			Резолюция.Записать();
			
			ОбработаноРезолюций = ОбработаноРезолюций + 1;
			
		КонецЦикла;
		
		Если ОбработаноРезолюций < 100 Тогда
			ОбработаныВсеРезолюции = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_1_СПРОФНаКОРП() Экспорт
	
	// заполнение табл части Корреспонденты
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ВнутренниеДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Корреспондент)
		 Или ЗначениеЗаполнено(Выборка.КонтактноеЛицо)
		 Или ЗначениеЗаполнено(Выборка.ПодписалОтКорреспондента) Тогда 
			
			Если Выборка.Корреспонденты.Количество() = 0 Тогда 
				Документ = Выборка.ПолучитьОбъект();
				
				Строка = Документ.Корреспонденты.Добавить();
				Строка.Корреспондент = Документ.Корреспондент;
				Строка.КонтактноеЛицо = Документ.КонтактноеЛицо;
				Строка.ПодписалОтКорреспондента = Документ.ПодписалОтКорреспондента;	
				
				Документ.ОбменДанными.Загрузка = Истина;
				Документ.Записать();
				
				КорреспондентыДляСписков = Делопроизводство.ПолучитьКорреспондентовДляСписков(
					Документ.Корреспонденты.Выгрузить());
				РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
					Документ.Ссылка, "КорреспондентыДляСписков", КорреспондентыДляСписков);
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Выборка = Справочники.ШаблоныВнутреннихДокументов.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = Выборка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Шаблон.Корреспондент)
		 Или ЗначениеЗаполнено(Шаблон.КонтактноеЛицо) Тогда 
			
			Если Шаблон.Корреспонденты.Количество() = 0 Тогда 
				Строка = Шаблон.Корреспонденты.Добавить();
				Строка.Корреспондент = Шаблон.Корреспондент;
				Строка.КонтактноеЛицо = Шаблон.КонтактноеЛицо;
				
				Шаблон.ОбменДанными.Загрузка = Истина;
				Шаблон.Записать(); 
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_2() Экспорт
	
	// Заполнение реквизитов "Документ" и "ТекстОшибки" у сообщений СВД
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьИсторияСостоянийДокументовВСВД.Документ,
		|	УдалитьИсторияСостоянийДокументовВСВД.ДатаУстановки,
		|	УдалитьИсторияСостоянийДокументовВСВД.Сообщение,
		|	УдалитьИсторияСостоянийДокументовВСВД.Состояние,
		|	УдалитьИсторияСостоянийДокументовВСВД.ИдентификаторСессии,
		|	УдалитьИсторияСостоянийДокументовВСВД.ТекстОшибки
		|ИЗ
		|	РегистрСведений.УдалитьИсторияСостоянийДокументовВСВД КАК УдалитьИсторияСостоянийДокументовВСВД";	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Сообщение) И ЗначениеЗаполнено(Выборка.Документ) Тогда
			СообщениеОбъект = Выборка.Сообщение.ПолучитьОбъект();
			СообщениеОбъект.Документ = Выборка.Документ;
			СообщениеОбъект.ТекстОшибки = Выборка.ТекстОшибки;		
			Если Выборка.Состояние = Справочники.ВидыСостоянийДокументовВСВД.ВОчередиНаОтправку
				Или Выборка.Состояние = Справочники.ВидыСостоянийДокументовВСВД.Отправлен Тогда
				СообщениеОбъект.ВидСообщения = Перечисления.ВидыСообщенийСВД.ОсновнойДокумент;
			ИначеЕсли Выборка.Состояние = Справочники.ВидыСостоянийДокументовВСВД.ДоставленКонтрагенту Тогда
				СообщениеОбъект.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОДоставке;
			ИначеЕсли Выборка.Состояние = Справочники.ВидыСостоянийДокументовВСВД.ЗарегистрированПолучателем Тогда
				СообщениеОбъект.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОРегистрации;
			ИначеЕсли Выборка.Состояние = Справочники.ВидыСостоянийДокументовВСВД.Ошибка Тогда
				СообщениеОбъект.ВидСообщения = Перечисления.ВидыСообщенийСВД.УведомлениеОбОшибке;
			КонецЕсли;
			
			СообщениеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение реквизита "Документ" у сообщений-уведомлений.
	// В версии до 1.2.7 в регистре ИсторияСостоянийДокументовВСВД неправильно записывались сообщения.
	СообщенияВыборка = ЖурналыДокументов.СообщенияСВД.Выбрать();
	Пока СообщенияВыборка.Следующий() Цикл
		Если ТипЗнч(СообщенияВыборка.Ссылка) = Тип("ДокументСсылка.ВходящееСообщениеСВД") Тогда
			СообщениеОбъект = СообщенияВыборка.ПолучитьОбъект();
			ЗапросСообщения = Новый Запрос;
			ЗапросСообщения.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИсходящееСообщениеСВД.Документ
				|ИЗ
				|	Документ.ИсходящееСообщениеСВД КАК ИсходящееСообщениеСВД
				|ГДЕ
				|	ИсходящееСообщениеСВД.ДатаОтправки > ДАТАВРЕМЯ(1, 1, 1)
				|	И (ИсходящееСообщениеСВД.ИдентификаторСессии = &ИдентификаторСессии
				|	ИЛИ ИсходящееСообщениеСВД.ИдентификаторСообщения = &ИдентификаторСессии)";
					
			ЗапросСообщения.УстановитьПараметр("ИдентификаторСессии", СообщенияВыборка.ИдентификаторСессии);
			ВыборкаСообщения = ЗапросСообщения.Выполнить().Выбрать();
			Если ВыборкаСообщения.Следующий() Тогда
				СообщениеОбъект.Документ = ВыборкаСообщения.Документ;
				СообщениеОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Заполнение реквизита "Документ" у сообщений СВД
	Выборка = ЖурналыДокументов.СообщенияСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ Первые 1
			|	СвязиДокументов.Документ
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ГДЕ
			|	СвязиДокументов.СвязанныйДокумент = &СвязанныйДокумент";
		Запрос.УстановитьПараметр("СвязанныйДокумент", Выборка.Ссылка);
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаИзЗапроса.Следующий() Тогда
			СообщениеОбъект = Выборка.ПолучитьОбъект();
			СообщениеОбъект.Документ = ВыборкаИзЗапроса.Документ;
			СообщениеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	//Удаление записей из регистра "СвязиДокументов", относящиеся к сообщениям СВД
	Выборка = ЖурналыДокументов.СообщенияСВД.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязиДокументов.Документ,
			|	СвязиДокументов.ТипСвязи,
			|	СвязиДокументов.СвязанныйДокумент,
			|	СвязиДокументов.СвязаннаяСтрока,
			|	СвязиДокументов.УдалитьСвязанныйДокумент
			|ИЗ
			|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
			|ГДЕ
			|	СвязиДокументов.СвязанныйДокумент = &СвязанныйДокумент";
		Запрос.УстановитьПараметр("СвязанныйДокумент", Выборка.Ссылка);
		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаИзЗапроса.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.СвязиДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаИзЗапроса);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// обновление прав
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Документ.ВходящееСообщениеСВД");
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Документ.ИсходящееСообщениеСВД");
	
	Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(Истина);
	
	// настройки нумерации
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Если Метаданные.Справочники.ВидыВнутреннихДокументов.Реквизиты.Найти("УдалитьНумератор") <> Неопределено Тогда 
		
		Запрос = Новый Запрос; 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.УдалитьНумератор КАК Нумератор,
		|	ВидыВнутреннихДокументов.УдалитьСпособНумерации КАК СпособНумерации,
		|	ВидыВнутреннихДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыВходящихДокументов.УдалитьНумератор,
		|	ВидыВходящихДокументов.УдалитьСпособНумерации,
		|	ВидыВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыИсходящихДокументов.УдалитьНумератор,
		|	ВидыИсходящихДокументов.УдалитьСпособНумерации,
		|	ВидыИсходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидДокумента = Выборка.ВидДокумента;
			МенеджерЗаписи.ТипДокумента = Нумерация.ПолучитьТипДокументаПоВиду(Выборка.ВидДокумента);
			МенеджерЗаписи.Нумератор = Выборка.Нумератор;
			МенеджерЗаписи.СпособНумерации = Выборка.СпособНумерации;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
		
		Если Не Делопроизводство.ИспользоватьВидыВходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
		Если Не Делопроизводство.ИспользоватьВидыИсходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если Не Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	
	// Заполнить главную задачу в регистре ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Важность КАК Важность,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Состояние КАК Состояние,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	(ДанныеБизнесПроцессов.ГлавнаяЗадача = &ПустаяСсылка
		|				И ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача <> &ПустаяСсылка
		|			ИЛИ ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|			ИЛИ ДанныеБизнесПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.ПустаяСсылка))";
	Запрос.УстановитьПараметр("ПустаяСсылка", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Выборка.Завершен;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ГлавнаяЗадача = Выборка.ГлавнаяЗадача;
		МенеджерЗаписи.Состояние = Выборка.Состояние;
		МенеджерЗаписи.Важность = Выборка.Важность;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Установить у системной учетной записи опцию "Использовать для легкой почты"
	СистемнаяУчетнаяЗаписьОбъект = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СистемнаяУчетнаяЗаписьОбъект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Легкая;
	СистемнаяУчетнаяЗаписьОбъект.Записать();
	
	// Установить настройки по умолчанию для механизма выполнения задач по почте
	НастройкиВыполненияЗадачПоПочте = ВыполнениеЗадачПоПочтеСервер.ПолучитьНастройкиПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(
		НастройкиВыполненияЗадачПоПочте.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(
		НастройкиВыполненияЗадачПоПочте.СрокХраненияПротоколовВыполненияЗадачПоПочте);
		
	// Заполнить предметы, значения автоподстановки и условия в шаблонах процессов
	ЗаполнитьПредметыШаблоновПроцессов();
	
	// Заполнение папок и прав мероприятий
	ПапкаОбщиеМероприятияОбъект = Справочники.ПапкиМероприятий.СоздатьЭлемент();
	ПапкаОбщиеМероприятияОбъект.Заполнить(Неопределено);
	ПапкаОбщиеМероприятияОбъект.Наименование = НСтр("ru = 'Общие мероприятия'");
	ПапкаОбщиеМероприятияОбъект.Записать();
	ЗаполнитьПраваПапкиМероприятий(ПапкаОбщиеМероприятияОбъект.Ссылка);
	
	СозданныеПапки = Новый ТаблицаЗначений;
	СозданныеПапки.Колонки.Добавить("НоваяСсылка");
	СозданныеПапки.Колонки.Добавить("СтараяСсылка");
	
	Выборка = Справочники.Мероприятия.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда 
			
			НайденнаяПапка = Справочники.ПапкиМероприятий.НайтиПоНаименованию(Выборка.Наименование, Истина);
			
			Если Не ЗначениеЗаполнено(НайденнаяПапка) Тогда 
				НоваяПапкаОбъект = Справочники.ПапкиМероприятий.СоздатьЭлемент();
				НоваяПапкаОбъект.Заполнить(Неопределено);
			Иначе
				НоваяПапкаОбъект = НайденнаяПапка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
				СтрокаРодитель = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка");
				НоваяПапкаОбъект.Родитель = СтрокаРодитель.НоваяСсылка;
			КонецЕсли;
			НоваяПапкаОбъект.Наименование = Выборка.Наименование;
			НоваяПапкаОбъект.Записать();
			
			ЗаполнитьПраваПапкиМероприятий(НоваяПапкаОбъект.Ссылка);
			
			НоваяСтрока = СозданныеПапки.Добавить();
			НоваяСтрока.СтараяСсылка = Выборка.Ссылка;
			НоваяСтрока.НоваяСсылка = НоваяПапкаОбъект.Ссылка;
			
			Если НЕ Выборка.ПометкаУдаления Тогда
				СтараяПапкаОбъект = Выборка.ПолучитьОбъект();
				СтараяПапкаОбъект.ПометкаУдаления = Истина;
				СтараяПапкаОбъект.Записать();
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
				СтрокаРодитель = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка");
				НоваяПапка = СтрокаРодитель.НоваяСсылка;
			Иначе
				НоваяПапка = ПапкаОбщиеМероприятияОбъект.Ссылка;
			КонецЕсли;
			
			Если Выборка.Папка <> НоваяПапка Тогда 
				НайденноеМероприятия = Выборка.ПолучитьОбъект();
				НайденноеМероприятия.Папка = НоваяПапка;
				НайденноеМероприятия.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление папок мероприятий в область делегирования - Мероприятия
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиМероприятий", "51c24c1c-4a25-4c32-9100-a6482eb3b00e");
	
	// Добавление области делигирования - Календарь
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		Если Строка.Идентификатор <> "57da031c-e234-423a-8a94-b2fb8cf5463d" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
			|ГДЕ
			|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление прав на использование напоминаний
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("ИспользованиеНапоминаний");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Добавление прав папок форума
	ЗаполнитьПраваПапкиФорума(ПредопределенноеЗначение("Справочник.ПапкиФорума.ТемыДокументов"));
	
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'");
	РазделОбщиеТемыОбъект.Записать();
	ЗаполнитьПраваПапкиФорума(РазделОбщиеТемыОбъект.Ссылка);
	
	СозданныеПапки = Новый ТаблицаЗначений;
	СозданныеПапки.Колонки.Добавить("НоваяСсылка");
	СозданныеПапки.Колонки.Добавить("СтараяСсылка");
	
	Выборка = Справочники.ТемыОбсуждений.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда 
			
			НайденнаяПапка = Справочники.ПапкиФорума.НайтиПоНаименованию(Выборка.Наименование, Истина);
			
			Если Не ЗначениеЗаполнено(НайденнаяПапка) Тогда 
				НайденнаяПапкаОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
				НайденнаяПапкаОбъект.Заполнить(Неопределено);
			Иначе
				НайденнаяПапкаОбъект = НайденнаяПапка.ПолучитьОбъект();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
				
				СтрокаРодитель = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка");
				НайденнаяПапкаОбъект.Родитель = СтрокаРодитель.НоваяСсылка;
				
			КонецЕсли;
			
			НайденнаяПапкаОбъект.Наименование = Выборка.Наименование;
			НайденнаяПапкаОбъект.Записать();
			ЗаполнитьПраваПапкиФорума(НайденнаяПапкаОбъект.Ссылка);
			
			НоваяСтрока = СозданныеПапки.Добавить();
			НоваяСтрока.СтараяСсылка = Выборка.Ссылка;
			НоваяСтрока.НоваяСсылка = НайденнаяПапкаОбъект.Ссылка;
			
			Если НЕ Выборка.ПометкаУдаления Тогда
				СтараяПапкаОбъект = Выборка.ПолучитьОбъект();
				СтараяПапкаОбъект.ПометкаУдаления = Истина;
				СтараяПапкаОбъект.Записать();
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Документ) Тогда
				НоваяПапка = ПредопределенноеЗначение("Справочник.ПапкиФорума.ТемыДокументов");
			Иначе
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда 
					СтрокаРодитель = СозданныеПапки.Найти(Выборка.Родитель, "СтараяСсылка");
					НоваяПапка = СтрокаРодитель.НоваяСсылка;
				Иначе
					НоваяПапка = РазделОбщиеТемыОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.Папка <> НоваяПапка Тогда
				НайденнаяТема = Выборка.ПолучитьОбъект();
				НайденнаяТема.Папка = НоваяПапка;
				НайденнаяТема.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Справочник.СообщенияОбсуждений");
	
	// Добавление папок форума в область делегирования - Форум
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиФорума", "53a00d1c-e080-4d3a-8a9e-bfd68cf5463d");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_2_СПРОФНаКОРП() Экспорт
	
	// настройки нумерации
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Если Метаданные.Справочники.ВидыВнутреннихДокументов.Реквизиты.Найти("УдалитьНумератор") <> Неопределено Тогда 
		
		Запрос = Новый Запрос; 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыВнутреннихДокументов.УдалитьНумератор КАК Нумератор,
		|	ВидыВнутреннихДокументов.УдалитьСпособНумерации КАК СпособНумерации,
		|	ВидыВнутреннихДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыВнутреннихДокументов КАК ВидыВнутреннихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыВходящихДокументов.УдалитьНумератор,
		|	ВидыВходящихДокументов.УдалитьСпособНумерации,
		|	ВидыВходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыВходящихДокументов КАК ВидыВходящихДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыИсходящихДокументов.УдалитьНумератор,
		|	ВидыИсходящихДокументов.УдалитьСпособНумерации,
		|	ВидыИсходящихДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыИсходящихДокументов КАК ВидыИсходящихДокументов";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидДокумента = Выборка.ВидДокумента;
			МенеджерЗаписи.ТипДокумента = Нумерация.ПолучитьТипДокументаПоВиду(Выборка.ВидДокумента);
			МенеджерЗаписи.Нумератор = Выборка.Нумератор;
			МенеджерЗаписи.СпособНумерации = Выборка.СпособНумерации;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
		
		Если Не Делопроизводство.ИспользоватьВидыВходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
		
		Если Не Делопроизводство.ИспользоватьВидыИсходящихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ИсходящиеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если Не Делопроизводство.ИспользоватьВидыВнутреннихДокументов() Тогда 
			МенеджерЗаписи = РегистрыСведений.НастройкиНумерации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы;
			МенеджерЗаписи.Нумератор = Справочники.Нумераторы.ВнутренниеДокументы;
			МенеджерЗаписи.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	
	// Заполнить главную задачу в регистре ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Важность КАК Важность,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Состояние КАК Состояние,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	(ДанныеБизнесПроцессов.ГлавнаяЗадача = &ПустаяСсылка
		|				И ДанныеБизнесПроцессов.БизнесПроцесс.ГлавнаяЗадача <> &ПустаяСсылка
		|			ИЛИ ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|			ИЛИ ДанныеБизнесПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.ПустаяСсылка))";
	Запрос.УстановитьПараметр("ПустаяСсылка", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Выборка.Завершен;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ГлавнаяЗадача = Выборка.ГлавнаяЗадача;
		МенеджерЗаписи.Состояние = Выборка.Состояние;
		МенеджерЗаписи.Важность = Выборка.Важность;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Заполнить предметы, значения автоподстановки и условия в шаблонах процессов
	ЗаполнитьПредметыШаблоновПроцессов();
	
	// Добавление папок мероприятий в область делегирования - Мероприятия
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиМероприятий", "51c24c1c-4a25-4c32-9100-a6482eb3b00e");
	
	// Добавление области делигирования - Календарь
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		Если Строка.Идентификатор <> "57da031c-e234-423a-8a94-b2fb8cf5463d" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
			|ГДЕ
			|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление прав на использование напоминаний
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ОбъектМетаданныхРоль = Метаданные.Роли.Найти("ИспользованиеНапоминаний");
	Если ОбъектМетаданныхРоль <> Неопределено Тогда
		
		Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
				ПрофильОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Добавление прав папок форума
	ЗаполнитьПраваПапкиФорума(ПредопределенноеЗначение("Справочник.ПапкиФорума.ТемыДокументов"));
	
	РазделОбщиеТемыОбъект = Справочники.ПапкиФорума.СоздатьЭлемент();
	РазделОбщиеТемыОбъект.Заполнить(Неопределено);
	РазделОбщиеТемыОбъект.Наименование = НСтр("ru = 'Общие темы'");
	РазделОбщиеТемыОбъект.Записать();
	ЗаполнитьПраваПапкиФорума(РазделОбщиеТемыОбъект.Ссылка);
	
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Справочник.СообщенияОбсуждений");
	
	// Добавление папок форума в область делегирования - Форум
	ВключитьМетаданноеВОбластьДелигирования("Справочник.ПапкиФорума", "53a00d1c-e080-4d3a-8a9e-bfd68cf5463d");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_3() Экспорт
	
	// Очистка настроек быстрого поиска писем
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяПользователя = ПользовательИБ.Имя;
		
		МассивНастроек = Новый Массив;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСписка",
			"ОтборВПапке",
			МассивНастроек,,
			ИмяПользователя);
		
	КонецЦикла;
	
	// Перенос настроек флагов по умолчанию для почты.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяПользователя = ПользовательИБ.Имя;
		ПеренестиНастройку(
			ИмяПользователя,
			"ВстроеннаяПочта",
			"ОсновнойФлаг",
			"ФлагиОбъектов",
			"ФлагПоУмолчаниюДляПисем");
	КонецЦикла;
	
	// Пометка на удаление пустых тем обсуждений без сообщений
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникТемыОбсуждений.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СообщенияОбсуждений.Ссылка) КАК КоличествоСообщений
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК СправочникТемыОбсуждений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|		ПО (СообщенияОбсуждений.ВладелецСообщения = СправочникТемыОбсуждений.Ссылка)
		|ГДЕ
		|	СправочникТемыОбсуждений.ПометкаУдаления = ЛОЖЬ
		|	И СправочникТемыОбсуждений.ЭтоГруппа = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СправочникТемыОбсуждений.Ссылка";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоСообщений = 0 Тогда
			ТемаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ТемаОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Мероприятия на основании входящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ВходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
	
	// Мероприятия на основании исходящего письма
	СвязиДокументов.СоздатьНастройкуСвязи(
		Справочники.ТипыСвязей.НаОснованииПисьма,
		Справочники.Мероприятия.ПустаяСсылка(),
		Документы.ИсходящееПисьмо.ПустаяСсылка(),
		Перечисления.ХарактерСвязей.Единичная,
		Справочники.ТипыСвязей.ПисьмоОснование,
		Перечисления.ХарактерСвязей.Множественная,
		Истина);
		
	МаксимальныйРазмерВнешнегоИсходящегоПисьма = 20;
	Константы.МаксимальныйРазмерВнешнегоИсходящегоПисьма.Установить(МаксимальныйРазмерВнешнегоИсходящегоПисьма);
	
	УстановитьНастройкиУведомленийПоУмолчанию();
	
	//Заполение результатов БП Регистрация
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	//Для запущенных задач по регирстрации
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Процесс
		|ПОМЕСТИТЬ ПроцессыБезРезультатов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Регистрация.Ссылка КАК Ссылка,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрацияРезультатыРегистрации.НомерСтроки) КАК КоличествоРезультатов
		|	ИЗ
		|		БизнесПроцесс.Регистрация КАК Регистрация
		|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация.РезультатыРегистрации КАК РегистрацияРезультатыРегистрации
		|			ПО (РегистрацияРезультатыРегистрации.Ссылка = Регистрация.Ссылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Регистрация.Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.КоличествоРезультатов = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцессыБезРезультатов.Процесс,
		|	ЕСТЬNULL(ЗадачаИсполнителя.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) КАК Задача
		|ИЗ
		|	ПроцессыБезРезультатов КАК ПроцессыБезРезультатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ПроцессыБезРезультатов.Процесс = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута.Ссылка = &ТочкаМаршрута";
		
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Регистрация.ТочкиМаршрута.Зарегистрировать);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Задача) Тогда
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			
			НоваяСтрока = ПроцессОбъект.РезультатыРегистрации.Добавить();
			НоваяСтрока.НомерИтерации = 1;
			НоваяСтрока.ЗадачаИсполнителя = Выборка.Задача;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Для запущенных задач на ознакомление с регистрацией
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Процесс
		|ПОМЕСТИТЬ ПроцессыБезРезультатов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Регистрация.Ссылка КАК Ссылка,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрацияРезультатыОзнакомлений.НомерСтроки) КАК КоличествоРезультатов
		|	ИЗ
		|		БизнесПроцесс.Регистрация КАК Регистрация
		|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Регистрация.РезультатыОзнакомлений КАК РегистрацияРезультатыОзнакомлений
		|			ПО (РегистрацияРезультатыОзнакомлений.Ссылка = Регистрация.Ссылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Регистрация.Ссылка) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.КоличествоРезультатов = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцессыБезРезультатов.Процесс,
		|	ЕСТЬNULL(ЗадачаИсполнителя.Ссылка, ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)) КАК Задача
		|ИЗ
		|	ПроцессыБезРезультатов КАК ПроцессыБезРезультатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ПроцессыБезРезультатов.Процесс = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута.Ссылка = &ТочкаМаршрута";
		
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Задача) Тогда
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			
			НоваяСтрока = ПроцессОбъект.РезультатыОзнакомлений.Добавить();
			НоваяСтрока.НомерИтерации = 1;
			НоваяСтрока.ЗадачаИсполнителя = Выборка.Задача;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_4() Экспорт
	
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Справочник.ВизыСогласования");
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.Резолюции");
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.ТемыОбсуждений");
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.СообщенияОбсуждений");
	
	// заполнение настройки доступности для поля ПредметПереписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ИсходящиеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ПредметПереписки", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ВОтветНа");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ПредметПереписки";
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.Доступность = Строка.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
	// доступность поля СпособОтправки для Делопроизводителя
	НастрокаДоступности = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(Новый УникальныйИдентификатор("972ffd63-60eb-410b-b28c-13b42b446d94"));
	Если ЗначениеЗаполнено(НастрокаДоступности) Тогда 
		НастрокаДоступностиОбъект = НастрокаДоступности.ПолучитьОбъект();
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды, Состояние", "СпособОтправки", Перечисления.СостоянияДокументов.Зарегистрирован);
		НайденныеСтроки = НастрокаДоступностиОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			Если НайденнаяСтрока.Доступность <> 1 Тогда 
				НайденнаяСтрока.Доступность = 1;
				НастрокаДоступностиОбъект.Записать();
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// заполнение настроек для состояния НеЗарегистрирован
	Выборка = Справочники.НастройкиДоступностиПоСостоянию.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НастройкиДоступности.Найти(Перечисления.СостоянияДокументов.НеЗарегистрирован, 
			"Состояние") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		ВыборкаОбъект = Выборка.ПолучитьОбъект();
		
		Если ВыборкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НаРегистрации);
		Иначе
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НеСогласован);
		КонецЕсли;	
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.НеЗарегистрирован;
			НоваяСтрока.ИмяПоляКоманды = НайденнаяСтрока.ИмяПоляКоманды;
			НоваяСтрока.Доступность = НайденнаяСтрока.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
	// Установка признака ПоставляемыйПрофильИзменен
	//   он мог быть ошибочно установлен в Истина в предыдущих версиях
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступа.Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|ГДЕ
		|	НЕ ПрофилиГруппДоступа.ЭтоГруппа");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Изменен = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен(ПрофильОбъект);
		Если ПрофильОбъект.ПоставляемыйПрофильИзменен <> Изменен Тогда
			ПрофильОбъект.ПоставляемыйПрофильИзменен = Изменен;
			ПрофильОбъект.ОбменДанными.Загрузка = Истина;
			ПрофильОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Установка типа записи календаря, если он оказался незаполненным
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ЗаписиРабочегоКалендаря.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТипЗаписиКалендаря) Тогда 
			Объект = Выборка.ПолучитьОбъект();
			Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Замена обращений к предопределенным элементам КИ в правилах автозаполнения
	СтрокаПоискаЮрАдрес = "Справочники.ВидыКонтактнойИнформации.ЮридическийАдресОрганизации";
	СтрокаЗаменыЮрАдрес = "Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации";
	СтрокаПоискаФактАдрес = "Справочники.ВидыКонтактнойИнформации.ФактическийАдресОрганизации";
	СтрокаЗаменыФактАдрес = "Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов.ДанныеДляАвтозаполнения КАК ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения
		|ГДЕ
		|	ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.ВыражениеОбработкиРезультатаЗамены ПОДОБНО &СтрокаПоискаЮрАдрес
		|	ИЛИ ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.ВыражениеОбработкиРезультатаЗамены ПОДОБНО &СтрокаПоискаФактАдрес");
		
	Запрос.УстановитьПараметр("СтрокаПоискаФактАдрес", "%" + СтрокаПоискаФактАдрес + "%");
	Запрос.УстановитьПараметр("СтрокаПоискаЮрАдрес", "%" + СтрокаПоискаЮрАдрес + "%");
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПравилоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТЧ из ПравилоОбъект.ДанныеДляАвтозаполнения Цикл
			Если Найти(СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены, СтрокаПоискаФактАдрес) > 0 Тогда
				СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены = СтрЗаменить(
					СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены, СтрокаПоискаФактАдрес, СтрокаЗаменыФактАдрес);
			КонецЕсли;
			Если Найти(СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены, СтрокаПоискаЮрАдрес) > 0 Тогда
				СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены = СтрЗаменить(
					СтрокаТЧ.ВыражениеОбработкиРезультатаЗамены, СтрокаПоискаЮрАдрес, СтрокаЗаменыЮрАдрес);
			КонецЕсли;
		КонецЦикла;
		ПравилоОбъект.ОбменДанными.Загрузка = Истина;
		ПравилоОбъект.Записать();
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_3_1_4_СПРОФНаКОРП() Экспорт
	
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.ТемыОбсуждений");
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.СообщенияОбсуждений");
	
	// заполнение настройки доступности для поля ПредметПереписки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ИсходящиеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ПредметПереписки", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ВОтветНа");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ПредметПереписки";
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.Доступность = Строка.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
	// доступность поля СпособОтправки для Делопроизводителя
	НастрокаДоступности = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(Новый УникальныйИдентификатор("972ffd63-60eb-410b-b28c-13b42b446d94"));
	Если ЗначениеЗаполнено(НастрокаДоступности) Тогда 
		НастрокаДоступностиОбъект = НастрокаДоступности.ПолучитьОбъект();
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды, Состояние", "СпособОтправки", Перечисления.СостоянияДокументов.Зарегистрирован);
		НайденныеСтроки = НастрокаДоступностиОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			Если НайденнаяСтрока.Доступность <> 1 Тогда 
				НайденнаяСтрока.Доступность = 1;
				НастрокаДоступностиОбъект.Записать();
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;	
	
	// заполнение настроек для состояния НеЗарегистрирован
	Выборка = Справочники.НастройкиДоступностиПоСостоянию.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НастройкиДоступности.Найти(Перечисления.СостоянияДокументов.НеЗарегистрирован, 
			"Состояние") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		ВыборкаОбъект = Выборка.ПолучитьОбъект();
		
		Если ВыборкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НаРегистрации);
		Иначе
			ОтборСтрок = Новый Структура("Состояние", Перечисления.СостоянияДокументов.НеСогласован);
		КонецЕсли;	
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.НеЗарегистрирован;
			НоваяСтрока.ИмяПоляКоманды = НайденнаяСтрока.ИмяПоляКоманды;
			НоваяСтрока.Доступность = НайденнаяСтрока.Доступность;
		КонецЦикла;	
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
	// Установка типа записи календаря, если он оказался незаполненным
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Выборка = Справочники.ЗаписиРабочегоКалендаря.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТипЗаписиКалендаря) Тогда 
			Объект = Выборка.ПолучитьОбъект();
			Объект.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_3_1_6() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ЭлектронныеПодписи.Объект,
		|	ЭлектронныеПодписи.УстановившийПодпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Резолюции КАК Резолюции
		|		ПО ЭлектронныеПодписи.Объект = Резолюции.Ссылка
		|ГДЕ
		|	ЭлектронныеПодписи.Версия = 2
		|	И ЭлектронныеПодписи.Объект ССЫЛКА Справочник.Резолюции
		|	И Резолюции.Источник <> Неопределено";
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		Запись.ДатаПодписи = Выборка.ДатаПодписи;
		Запись.Объект = Выборка.Объект;
		Запись.УстановившийПодпись = Выборка.УстановившийПодпись;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Версия = 1;
			Запись.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_2_1() Экспорт
	
	//Перенос значений из реквизита УдалитьЗадача в измерение Задача для записей
	//регистра сведений ПротоколВыполненияЗадачПоПочте.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколВыполненияЗадачПоПочте.Период,
		|	ПротоколВыполненияЗадачПоПочте.ИдентификаторСообщения,
		|	ПротоколВыполненияЗадачПоПочте.РезультатВыполнения,
		|	ПротоколВыполненияЗадачПоПочте.Задача
		|ИЗ
		|	РегистрСведений.ПротоколВыполненияЗадачПоПочте КАК ПротоколВыполненияЗадачПоПочте
		|ГДЕ
		|	ПротоколВыполненияЗадачПоПочте.УдалитьЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ПротоколВыполненияЗадачПоПочте.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Запись.Прочитать();
		Запись.Задача = Запись.УдалитьЗадача;
		Запись.УдалитьЗадача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		Запись.Записать();
		
	КонецЦикла;
	
	// Перенос сведений об узлах плана обмена Мобильный в регистр сведений СведенияОМобильныхКлиентах
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Мобильный.Ссылка,
		|	Мобильный.УдалитьОписаниеКлиента,
		|	Мобильный.УдалитьДатаПоследнейАктивности
		|ИЗ
		|	ПланОбмена.Мобильный КАК Мобильный";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.СведенияОМобильныхКлиентах.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.МобильныйКлиент = Выборка.Ссылка;
		МенеджерЗаписиРегистра.ДатаПоследнейАктивности = Выборка.УдалитьДатаПоследнейАктивности;
		МенеджерЗаписиРегистра.Описание = Выборка.УдалитьОписаниеКлиента;
		МенеджерЗаписиРегистра.ВерсияКлиента = "1.3.1";
		МенеджерЗаписиРегистра.Записать();
	КонецЦикла;
	
	// заполнение настройки доступности для поля ДобавлениеОригиналов
	НастройкиДоступностиПоУмолчанию = 
		Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ДобавлениеОригиналов", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РольНастройки = "Пользователь";
		Для Каждого Строка Из НастройкиДоступностиПоУмолчанию цикл
			Если Строка.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор()) Тогда 
				РольНастройки = Строка.Роль;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ДобавлениеФайлов");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ДобавлениеОригиналов";
			НоваяСтрока.Состояние = Строка.Состояние;
			Если НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.Зарегистрирован 
				И РольНастройки = "Пользователь" Тогда 
				НоваяСтрока.Доступность = 2; // нет
			Иначе	
				НоваяСтрока.Доступность = 1; // да
			КонецЕсли;	
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
	// Обновление прав делегирования с учетом сроков действия.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелегированиеПрав.Ссылка,
		|	ДелегированиеПрав.ПометкаУдаления,
		|	ДелегированиеПрав.УдалитьДатаПередачи
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПрав";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элемент = Выборка.Ссылка.ПолучитьОбъект();
		Элемент.ДатаНачалаДействия = Выборка.УдалитьДатаПередачи;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент);
		Элемент = Неопределено;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Обновление виз согласования
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВизыСогласования.Ссылка
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВизыСогласования.Исполнитель) = ТИП(Справочник.РолиИсполнителей)
	|	И ВизыСогласования.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВизаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ВизаОбъект.Исполнитель)
			И ТипЗнч(ВизаОбъект.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей")
			И Не ЗначениеЗаполнено(ВизаОбъект.РольИсполнителя) Тогда 
			ВизаОбъект.РольИсполнителя = ВизаОбъект.Исполнитель;
			ВизаОбъект.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВизаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_2_1_СПРОФНаКОРП() Экспорт
	
	//Перенос значений из реквизита УдалитьЗадача в измерение Задача для записей
	//регистра сведений ПротоколВыполненияЗадачПоПочте.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПротоколВыполненияЗадачПоПочте.Период,
		|	ПротоколВыполненияЗадачПоПочте.ИдентификаторСообщения,
		|	ПротоколВыполненияЗадачПоПочте.РезультатВыполнения,
		|	ПротоколВыполненияЗадачПоПочте.Задача
		|ИЗ
		|	РегистрСведений.ПротоколВыполненияЗадачПоПочте КАК ПротоколВыполненияЗадачПоПочте
		|ГДЕ
		|	ПротоколВыполненияЗадачПоПочте.УдалитьЗадача <> ЗНАЧЕНИЕ(Задача.ЗадачаИсполнителя.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.ПротоколВыполненияЗадачПоПочте.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Запись.Прочитать();
		Запись.Задача = Запись.УдалитьЗадача;
		Запись.УдалитьЗадача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		Запись.Записать();
		
	КонецЦикла;
	
	// заполнение настройки доступности для поля ДобавлениеОригиналов
	НастройкиДоступностиПоУмолчанию = 
		Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВыборкаОбъект.НастройкиДоступности.Найти(
				"ДобавлениеОригиналов", "ИмяПоляКоманды") <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		РольНастройки = "Пользователь";
		Для Каждого Строка Из НастройкиДоступностиПоУмолчанию цикл
			Если Строка.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор()) Тогда 
				РольНастройки = Строка.Роль;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		ОтборСтрок = Новый Структура("ИмяПоляКоманды", "ДобавлениеФайлов");
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(ОтборСтрок);
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "ДобавлениеОригиналов";
			НоваяСтрока.Состояние = Строка.Состояние;
			Если НоваяСтрока.Состояние = Перечисления.СостоянияДокументов.Зарегистрирован 
				И РольНастройки = "Пользователь" Тогда 
				НоваяСтрока.Доступность = 2; // нет
			Иначе	
				НоваяСтрока.Доступность = 1; // да
			КонецЕсли;	
		КонецЦикла;	
		ВыборкаОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_2_3() Экспорт
	
	// Заполнение ресурса ДатаВМиллиСекундах регистра ОчередьОбновленияПравДоступа	
	
	// Проверка наличия необработанных записей
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|ГДЕ
		|	ОчередьОбновленияПравДоступа.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ОчередьОбновленияПравДоступа.ДатаВМиллиСекундах = 0");
		
	Результат = Запрос.Выполнить();
	ЕстьНеобработанныеЗаписиОчереди = Не Результат.Пустой();
	
	Если ЕстьНеобработанныеЗаписиОчереди Тогда
		
		// Для обхода проблемы с превышением ограничения для числа, возвращаемого функцией РАЗНОСТЬДАТ
		НачалоГода = НачалоГода(ТекущаяДата());
		НачалоГодаВМиллисекундах = ОбщегоНазначенияДокументооборот.ДатаВМиллисекундах(НачалоГода);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьОбновленияПравДоступа.Объект,
			|	ОчередьОбновленияПравДоступа.Приоритет,
			|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав,
			|	ОчередьОбновленияПравДоступа.Дата,
			|	&НачалоГодаВМиллисекундах + РАЗНОСТЬДАТ(&НачалоГода, ОчередьОбновленияПравДоступа.Дата, СЕКУНДА) * 1000 КАК ДатаВМиллиСекундах
			|ИЗ
			|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
			|ГДЕ
			|	ОчередьОбновленияПравДоступа.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И ОчередьОбновленияПравДоступа.ДатаВМиллиСекундах = 0");
			
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода);
		Запрос.УстановитьПараметр("НачалоГодаВМиллисекундах", НачалоГодаВМиллисекундах);
		Результат = Запрос.Выполнить();
		
		НаборЗаписейОчереди = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьНаборЗаписей();
		НаборЗаписейОчереди.Загрузить(Результат.Выгрузить());
		НаборЗаписейОчереди.Записать();
		
	КонецЕсли;
	
	// Перенос сроков проектных задач в регистр
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектныеЗадачи.УдалитьНачалоФакт КАК НачалоФакт,
	|	ПроектныеЗадачи.УдалитьОкончаниеФакт КАК ОкончаниеФакт,
	|	ПроектныеЗадачи.УдалитьДлительностьФакт КАК ДлительностьФакт,
	|	ПроектныеЗадачи.УдалитьЕдиницаДлительностиФакт КАК ЕдиницаДлительностиФакт,
	|	ПроектныеЗадачи.УдалитьТекущийПланНачало КАК ТекущийПланНачало,
	|	ПроектныеЗадачи.УдалитьТекущийПланОкончание КАК ТекущийПланОкончание,
	|	ПроектныеЗадачи.УдалитьТекущийПланДлительность КАК ТекущийПланДлительность,
	|	ПроектныеЗадачи.УдалитьТекущийПланЕдиницаДлительности КАК ТекущийПланЕдиницаДлительности,
	|	ПроектныеЗадачи.Ссылка КАК ПроектнаяЗадача
	|ИЗ
	|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СрокиПроектныхЗадач.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПроектнаяЗадача = Выборка.ПроектнаяЗадача;
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда 
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	// Уставновка признака АвтоматическиРассчитыватьПланПроекта
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВыборкаОбъект.АвтоматическиРассчитыватьПланПроекта = Истина;
		ВыборкаОбъект.ОбменДанными.Загрузка = Истина;
		ВыборкаОбъект.Записать();
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Установка уникальности дат для неподписанных резолюций документа, созданных до версии 1.3.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Резолюции.Ссылка) КАК КоличествоРезолюций,
		|	Резолюции.ДатаРезолюции,
		|	Резолюции.Документ
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|СГРУППИРОВАТЬ ПО
		|	Резолюции.ДатаРезолюции,
		|	Резолюции.Документ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоРезолюций = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос2 = Новый Запрос;
		Запрос2.Текст =
			"ВЫБРАТЬ
			|	Резолюции.Ссылка,
			|	Резолюции.ДатаРезолюции,
			|	Резолюции.Подписана
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|ГДЕ
			|	Резолюции.Документ = &Документ";
		Запрос2.УстановитьПараметр("Документ", Выборка.Документ);
		ТаблицаРезолюций = Запрос2.Выполнить().Выгрузить();
		
		СуществующиеДатыРезолюций = Новый Соответствие;
		
		// Резолюции версии 1.2.8 могли уже подписать
		Для Каждого ТекущаяРезолюция Из ТаблицаРезолюций Цикл
			Если ТекущаяРезолюция.Подписана Тогда
				СуществующиеДатыРезолюций.Вставить(ТекущаяРезолюция.ДатаРезолюции, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекущаяРезолюция Из ТаблицаРезолюций Цикл
			
			Резолюция = ТекущаяРезолюция;
			
			// Если дата совпала, то устанавливаем новую (только для не подписанных)
			Если СуществующиеДатыРезолюций.Получить(ТекущаяРезолюция.ДатаРезолюции) <> Неопределено Тогда
				
				// Подписанные резолюции не можем обработать, так как подпись станет неверна
				Если Не ТекущаяРезолюция.Подписана Тогда
					
					НоваяДатаРезолюции = ТекущаяРезолюция.ДатаРезолюции + 1;
					Пока СуществующиеДатыРезолюций.Получить(НоваяДатаРезолюции) <> Неопределено Цикл
						НоваяДатаРезолюции = НоваяДатаРезолюции + 1;
					КонецЦикла;
					
					Попытка
						
						ЗаблокироватьДанныеДляРедактирования(ТекущаяРезолюция.Ссылка);
						
						Резолюция = ТекущаяРезолюция.Ссылка.ПолучитьОбъект();
						Резолюция.ДатаРезолюции = НоваяДатаРезолюции;
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(Резолюция);
						
						РазблокироватьДанныеДляРедактирования(ТекущаяРезолюция.Ссылка);
						
					Исключение
						// Объект уже заблокирован
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СуществующиеДатыРезолюций.Вставить(Резолюция.ДатаРезолюции, Истина);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение измерения УникальныйИдентификат РС ЭлектронныеПодписи
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.УникальныйИдентификатор,
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ЭлектронныеПодписи.Объект,
		|	ЭлектронныеПодписи.УстановившийПодпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.УникальныйИдентификатор) Тогда
			МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДатаПодписи = Выборка.ДатаПодписи;
			МенеджерЗаписи.Объект = Выборка.Объект;
			МенеджерЗаписи.УстановившийПодпись = Выборка.УстановившийПодпись;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Перенос значений реквизитов Инструкций в ТЧ УсловияОтображения
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Инструкции.Ссылка,
		|	Инструкции.УдалитьВидДокумента,
		|	Инструкции.УдалитьСостояниеДокумента,
		|	Инструкции.УдалитьГрифДоступа,
		|	Инструкции.УдалитьВопросДеятельности
		|ИЗ
		|	Справочник.Инструкции КАК Инструкции
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Инструкции.УсловияОтображения КАК ИнструкцииУсловияОтображения
		|		ПО (ИнструкцииУсловияОтображения.Ссылка = Инструкции.Ссылка)
		|ГДЕ
		|	ИнструкцииУсловияОтображения.Ссылка ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектИнструкции = Выборка.Ссылка.ПолучитьОбъект();
		Если ОбъектИнструкции = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ОбъектИнструкции.УсловияОтображения.Добавить();
		НоваяСтрока.ВидДокумента = Выборка.УдалитьВидДокумента;
		НоваяСтрока.СостояниеДокумента = Выборка.УдалитьСостояниеДокумента;
		НоваяСтрока.ГрифДоступа = Выборка.УдалитьГрифДоступа;
		НоваяСтрока.ВопросДеятельности = Выборка.УдалитьВопросДеятельности;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИнструкции);
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение бизнес-события ОтменаВыполненияЗадачи
	СоздатьВидБизнесСобытий(Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи, НСтр("ru='Отмена выполнения задачи'"));
	
	ПодпискаОтменаВыполненияЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи);

	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
		ПодпискаОтменаВыполненияЗадачи);
		
	// Заполнение признака проверки электронных адресов в видах КИ
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКИ
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И (НЕ ВидыКонтактнойИнформации.ЗапрещатьВводНекорректного
		|			ИЛИ НЕ ВидыКонтактнойИнформации.ПроверятьКорректность)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидКИОбъект = Выборка.ВидКИ.ПолучитьОбъект();
		ВидКИОбъект.ПроверятьКорректность = Истина;
		ВидКИОбъект.ЗапрещатьВводНекорректного = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКИОбъект);
	КонецЦикла;
	
	// Очистка настроек комплексных процессов и шаблонов комплексных процессов
	//	от подвисших настроек предшественников, которые ссылаются на несуществующие действия
	МассивНекорректных = Новый Массив;
	ПроцессыВыборка = БизнесПроцессы.КомплексныйПроцесс.Выбрать();
	Пока ПроцессыВыборка.Следующий() Цикл
		Для Каждого Запись Из ПроцессыВыборка.ПредшественникиЭтапов Цикл
			ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(ПроцессыВыборка.Этапы, Запись.ИдентификаторПредшественника);
			ЭтапПоследователь = ПолучитьЭтапПоИдентификатору(ПроцессыВыборка.Этапы, Запись.ИдентификаторПоследователя);
			Если Не Запись.ИдентификаторПредшественника = УникальныйИдентификаторПустой()
				И Не Запись.ИдентификаторПоследователя = УникальныйИдентификаторПустой() Тогда
				Если ЭтапПредшественник = Неопределено Или ЭтапПоследователь = Неопределено Тогда
					МассивНекорректных.Добавить(ПроцессыВыборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПроцессыВыборка = Справочники.ШаблоныКомплексныхБизнесПроцессов.Выбрать();
	Пока ПроцессыВыборка.Следующий() Цикл
		Для Каждого Запись Из ПроцессыВыборка.ПредшественникиЭтапов Цикл
			ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(ПроцессыВыборка.Этапы, Запись.ИдентификаторПредшественника);
			ЭтапПоследователь = ПолучитьЭтапПоИдентификатору(ПроцессыВыборка.Этапы, Запись.ИдентификаторПоследователя);
			Если Не Запись.ИдентификаторПредшественника = УникальныйИдентификаторПустой()
				И Не Запись.ИдентификаторПоследователя = УникальныйИдентификаторПустой() Тогда
				Если ЭтапПредшественник = Неопределено Или ЭтапПоследователь = Неопределено Тогда
					МассивНекорректных.Добавить(ПроцессыВыборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого Ссылка Из МассивНекорректных Цикл
		Объект = Ссылка.ПолучитьОбъект();
		Пока Истина Цикл
			Удален = Ложь;
			Для Каждого Запись Из Объект.ПредшественникиЭтапов Цикл
				ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(Объект.Этапы, Запись.ИдентификаторПредшественника);
				ЭтапПоследователь = ПолучитьЭтапПоИдентификатору(Объект.Этапы, Запись.ИдентификаторПоследователя);
				Если Не Запись.ИдентификаторПредшественника = УникальныйИдентификаторПустой()
					И Не Запись.ИдентификаторПоследователя = УникальныйИдентификаторПустой() Тогда
					Если ЭтапПредшественник = Неопределено Или ЭтапПоследователь = Неопределено Тогда
						Объект.ПредшественникиЭтапов.Удалить(Запись);
						Удален = Истина;
						Объект.ОбменДанными.Загрузка = Истина; // отключить всю бизнес-логику при записи
						Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов"); 
						Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
						Объект.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 			
			Если Удален = Ложь Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Разделение регистра ЗначенияУсловийПриОбработкеПисем на два регистра.
	// Один, ЗначенияУсловийПриОбработкеПисем, для хранения условий отбора писем для правил обработки писем
	// Второй, ЗначенияДействийПриОбработкеПисем, для хранения действий правил обработки писем
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияУсловийПриОбработкеПисем.ВидУсловия,
		|	ЗначенияУсловийПриОбработкеПисем.Правило,
		|	ЗначенияУсловийПриОбработкеПисем.ПараметрУсловия,
		|	ЗначенияУсловийПриОбработкеПисем.Порядок,
		|	ЗначенияУсловийПриОбработкеПисем.ЭтоЗначенияИсключения
		|ИЗ
		|	РегистрСведений.ЗначенияУсловийПриОбработкеПисем КАК ЗначенияУсловийПриОбработкеПисем";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ВидУсловия) <> Тип("ПеречислениеСсылка.ВидыДействийПриОбработкеВходящихПисем")
			И ТипЗнч(Выборка.ВидУсловия) <> Тип("ПеречислениеСсылка.ВидыДействийПриОбработкеИсходящихПисем") Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЗначенияДействийПриОбработкеПисем.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидДействия = Выборка.ВидУсловия;
		МенеджерЗаписи.Правило = Выборка.Правило;
		Если Выборка.ВидУсловия = Перечисления.ВидыДействийПриОбработкеВходящихПисем.ОтветитьСУказаннымТекстом Тогда
			МенеджерЗаписи.ТекстАвтоответа = Выборка.ПараметрУсловия;
		Иначе
			МенеджерЗаписи.ПараметрДействия = Выборка.ПараметрУсловия;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписиРегистра = РегистрыСведений.ЗначенияУсловийПриОбработкеПисем.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, Выборка);
		МенеджерЗаписиРегистра.Удалить();
	КонецЦикла;
	
	// Создание первого элемента справочника ПрофилиНастроекКриптографии и перенос записей из
	// РС ПутиМодулейКриптографииСерверовLinux в одноименную ТЧ справочника.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ПрофилиНастроекКриптографии КАК ПрофилиНастроекКриптографии";
	НетПрофилейКриптографии = Запрос.Выполнить().Пустой();	
	ПровайдерЭП = Константы.ПровайдерЭП.Получить();
	
	Если НетПрофилейКриптографии И ЗначениеЗаполнено(ПровайдерЭП) Тогда
		
		ПрофильНастроекКриптографии = Справочники.ПрофилиНастроекКриптографии.СоздатьЭлемент();
		ПрофильНастроекКриптографии.Наименование = ПровайдерЭП;
		ПрофильНастроекКриптографии.ПровайдерЭП = ПровайдерЭП;
		ПрофильНастроекКриптографии.ТипПровайдераЭП = Константы.ТипПровайдераЭП.Получить();
		ПрофильНастроекКриптографии.АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
		ПрофильНастроекКриптографии.АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
		ПрофильНастроекКриптографии.АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УдалитьПутиМодулейКриптографииСерверовLinux.ИмяКомпьютера,
			|	УдалитьПутиМодулейКриптографииСерверовLinux.Комментарий,
			|	УдалитьПутиМодулейКриптографииСерверовLinux.ПутьМодуляКриптографии
			|ИЗ
			|	РегистрСведений.УдалитьПутиМодулейКриптографииСерверовLinux КАК УдалитьПутиМодулейКриптографииСерверовLinux";

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПрофильНастроекКриптографии.ПутиМодулейКриптографииСерверовLinux.Добавить();
			НоваяСтрока.ИмяКомпьютера = Выборка.ИмяКомпьютера;
			НоваяСтрока.ПутьМодуляКриптографии = Выборка.ПутьМодуляКриптографии;
			НоваяСтрока.Комментарий = Выборка.Комментарий;
		КонецЦикла;
		
		ПрофильНастроекКриптографии.Записать();
		
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_2_4() Экспорт
	
	// замена предопределенного значения ДругаяИнформацияОрганизации
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, Перечисления.ТипыКонтактнойИнформации.Другое,
		НСтр("ru = 'Любая другая контактная информация'"), Истина, Ложь, Ложь, 7);
		
	СтарыйВидКИ = Неопределено;	
		
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяПредопределенныхДанных = "УдалитьДругаяИнформацияОрганизации" Тогда 
			СтарыйВидКИ = Выборка.Ссылка;
			СтарыйВидКИОбъект = Выборка.ПолучитьОбъект();
			СтарыйВидКИОбъект.УстановитьПометкуУдаления(Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
		
	Если СтарыйВидКИ <> Неопределено Тогда 
		ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", СтарыйВидКИ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОрганизацииОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого Строка Из ОрганизацииОбъект.КонтактнаяИнформация Цикл
				Если Строка.Вид = СтарыйВидКИ Тогда 
					Строка.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
				КонецЕсли;	
			КонецЦикла;	
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацииОбъект);
		КонецЦикла;	
		
		ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	КонецЕсли;
	
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	СтарыеНаборы = Новый Массив;
	// замена предопределенного значения Справочник_БанковскиеСчета
	СтарыеНаборы.Добавить("Удалить_Справочник_БанковскиеСчета");
	СтарыеНаборы.Добавить("Удалить_Справочник_БанковскиеСчетаКорреспондента");
	СтарыеНаборы.Добавить("Удалить_Справочник_БанковскиеСчета_Общие");
	СтарыеНаборы.Добавить("Удалить_Справочник_БанковскиеСчетаОрганизации");
	// замена предопределенного значения БизнесПроцесс_РешениеВопросовВыполненияЗадач	
	СтарыеНаборы.Добавить("УдалитьБизнесПроцесс_РешениеВопросовВыполненияЗадач");
	СтарыеНаборы.Добавить("УдалитьБизнесПроцесс_РешениеВопросовВыполненияЗадач_ОзнакомлениеСРезультатомРассмотрения");
	СтарыеНаборы.Добавить("УдалитьБизнесПроцесс_РешениеВопросовВыполненияЗадач_РассмотрениеИнициатором");
	СтарыеНаборы.Добавить("УдалитьБизнесПроцесс_РешениеВопросовВыполненияЗадач_Общие");
	
	Для Каждого СтарыйНабор Из СтарыеНаборы Цикл
		
		СтарыйНаборСсылка = Неопределено;	
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.ВыбратьИерархически();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяПредопределенныхДанных = СтарыйНабор Тогда 
				СтарыйНаборСсылка = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтарыйНаборСсылка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтарыйНаборОбъект = СтарыйНаборСсылка.ПолучитьОбъект();
		СтарыйНаборОбъект.УстановитьПометкуУдаления(Истина);
		
		Если СтарыйНаборОбъект.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если СтарыйНаборОбъект.ДополнительныеРеквизиты.Количество() = 0 И
			СтарыйНаборОбъект.ДополнительныеСведения.Количество() = 0 
		Тогда 
			Продолжить;
		КонецЕсли;	
		
		НовыйНабор = СтрЗаменить(СтарыйНабор, "Удалить_", "");
		НовыйНаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений[НовыйНабор];
		НовыйНаборОбъект = НовыйНаборСсылка.ПолучитьОбъект();
		
		Если НовыйНаборОбъект.ДополнительныеРеквизиты.Количество() > 0
			Или НовыйНаборОбъект.ДополнительныеСведения.Количество() > 0
		Тогда 
			Продолжить;
		КонецЕсли;	
		
		НовыйНаборОбъект.КоличествоРеквизитов = СтарыйНаборОбъект.КоличествоРеквизитов;
		НовыйНаборОбъект.КоличествоСведений = СтарыйНаборОбъект.КоличествоСведений;
		
		НовыйНаборОбъект.ДополнительныеРеквизиты.Загрузить(СтарыйНаборОбъект.ДополнительныеРеквизиты.Выгрузить());
		НовыйНаборОбъект.ДополнительныеСведения.Загрузить(СтарыйНаборОбъект.ДополнительныеСведения.Выгрузить());
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборОбъект);
		
	КонецЦикла;	
			
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение производственного календаря 2014
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2014Год();
		
	// Удаление групп форума
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТемыОбсуждений.Ссылка
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК ТемыОбсуждений
		|ГДЕ
		|	ТемыОбсуждений.ЭтоГруппа = ИСТИНА
		|	И ТемыОбсуждений.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГруппаТемОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаТемОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТемыОбсуждений.Ссылка
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК ТемыОбсуждений
		|ГДЕ
		|	ТемыОбсуждений.ЭтоГруппа = ЛОЖЬ
		|	И ТемыОбсуждений.Родитель <> ЗНАЧЕНИЕ(Справочник.ТемыОбсуждений.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТемаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТемаОбъект.Родитель = Справочники.ТемыОбсуждений.ПустаяСсылка();
		ТемаОбъект.Записать();
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	
	// Удаление групп мероприятий
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.ЭтоГруппа = ИСТИНА
		|	И Мероприятия.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГруппаМероприятийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ГруппаМероприятийОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.ЭтоГруппа = ЛОЖЬ
		|	И Мероприятия.Родитель <> ЗНАЧЕНИЕ(Справочник.Мероприятия.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МероприятиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		МероприятиеОбъект.Родитель = Справочники.Мероприятия.ПустаяСсылка();
		МероприятиеОбъект.Записать();
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Добавление роли ИзменениеЗначенийДополнительныхСвойств в профиль Пользователи,
	// если профиль изменен по сравнению с поставляемым
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	МетаданныеРольИзменениеДопСвойств = Метаданные.Роли.Найти("ИзменениеЗначенийДополнительныхСвойств");
	Если МетаданныеРольИзменениеДопСвойств <> Неопределено Тогда
		
		РольИзменениеДопСвойств = 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРольИзменениеДопСвойств);
		
		Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
		Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
		
		Если ЗначениеЗаполнено(Профиль) Тогда 
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(РольИзменениеДопСвойств, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = РольИзменениеДопСвойств;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	
	// замена предопределенного значения Справочник ВидыБизнесСобытий
	СтарыеВидыБизнесСобытий = Новый Массив;
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ВыполнениеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ИзменениеСоставаКомплекта");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ОтменаВыполненияЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ПеренаправлениеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_СозданиеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_СозданиеФайла");

	Для Каждого СтарыйВид Из СтарыеВидыБизнесСобытий Цикл
		
		СтарыйВидСсылка = Неопределено;	
		
		Выборка = Справочники.ВидыБизнесСобытий.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяПредопределенныхДанных = СтарыйВид Тогда 
				СтарыйВидСсылка = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтарыйВидСсылка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтарыйВидОбъект = СтарыйВидСсылка.ПолучитьОбъект();
		СтарыйВидОбъект.УстановитьПометкуУдаления(Истина);
		
		НовыйВидИмя = СтрЗаменить(СтарыйВид, "Удалить_", "");
		
		// заменим ссылки на виды бизнес-событий с префиксом Удалить_
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДетекторыБизнесСобытий.Ссылка
		               |ИЗ
		               |	Справочник.ДетекторыБизнесСобытий КАК ДетекторыБизнесСобытий
		               |ГДЕ
		               |	ДетекторыБизнесСобытий.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);					  
		ВыборкаДетекторы = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетекторы.Следующий() Цикл
			ДетекторОбъект = ВыборкаДетекторы.Ссылка.ПолучитьОбъект();
			ДетекторОбъект.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			ДетекторОбъект.Записать();
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия,
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия,
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия,
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса,
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие
		               |ИЗ
		               |	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		               |ГДЕ
		               |	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия";
		Запрос.УстановитьПараметр("ВидБизнесСобытия", СтарыйВидСсылка);					  
		ВыборкаПравила = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПравила.Следующий() Цикл
				
			МенеджерЗаписи = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПравила);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ВидБизнесСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия,
		               |	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.Обработчик
		               |ИЗ
		               |	РегистрСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий КАК СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий
		               |ГДЕ
		               |	СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);					  
		ВыборкаСвязь = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСвязь.Следующий() Цикл
				
			МенеджерЗаписи = РегистрыСведений.СвязьПользовательскихОбработчиковБизнесСобытийИВидаСобытий.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаСвязь);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПодпискиНаБизнесСобытия.ВидСобытия,
		               |	ПодпискиНаБизнесСобытия.Потребитель
		               |ИЗ
		               |	РегистрСведений.ПодпискиНаБизнесСобытия КАК ПодпискиНаБизнесСобытия
		               |ГДЕ
		               |	ПодпискиНаБизнесСобытия.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);					  
		ВыборкаПодписки = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПодписки.Следующий() Цикл
				
			МенеджерЗаписи = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПодписки);
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
	КонецЦикла;	
	
	// Очистка права Регистрация для настроек доступности пользователей
	НастройкиДоступностиПоСостояниям = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого НастройкаДоступности Из НастройкиДоступностиПоСостояниям Цикл
		Если НастройкаДоступности.Роль <> "Пользователь" Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаСсылка = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьСсылку(
			Новый УникальныйИдентификатор(НастройкаДоступности.Идентификатор));
		
		Если Не ОбщегоНазначения.СсылкаСуществует(НастройкаСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НастрокаДоступностиОбъект = НастройкаСсылка.ПолучитьОбъект();
		Для Каждого Строка Из НастрокаДоступностиОбъект.НастройкиДоступности Цикл
			Если Строка.ИмяПоляКоманды = "Регистрация" И Строка.Доступность = 1 Тогда
				Строка.Доступность = 0;
			КонецЕсли;
		КонецЦикла;
		НастрокаДоступностиОбъект.Записать();
	КонецЦикла;
	
	// БЭД
	//Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	//Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Установить(Ложь);
	
	// Переопределение дескрипторов проектных задач
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
	КонецЦикла;
	
	// обновление реквизитов документов
	ОбновлениеРеквизитовДокументов(Новый Структура("ОбработкаЗавершена",Истина));
	
	// Пометка на удаление пустых тем обсуждений без сообщений
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникТемыОбсуждений.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СообщенияОбсуждений.Ссылка) КАК КоличествоСообщений
		|ИЗ
		|	Справочник.ТемыОбсуждений КАК СправочникТемыОбсуждений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщенияОбсуждений КАК СообщенияОбсуждений
		|		ПО (СообщенияОбсуждений.ВладелецСообщения = СправочникТемыОбсуждений.Ссылка)
		|ГДЕ
		|	СправочникТемыОбсуждений.ПометкаУдаления = ЛОЖЬ
		|	И СправочникТемыОбсуждений.ЭтоГруппа = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СправочникТемыОбсуждений.Ссылка";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоСообщений = 0 Тогда
			ТемаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ТемаОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Подсистема "Оценка производительности" - начальное заполнение списка ключевых операций
	ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций();
	
	// Обновление виз согласования
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВизыСогласования.Ссылка,
	|	ВизыСогласования.Исполнитель,
	|	ВизыСогласования.РольИсполнителя,
	|	ВизыСогласования.Источник
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Исполнитель)
			И Не ЗначениеЗаполнено(Выборка.РольИсполнителя)
			И ЗначениеЗаполнено(Выборка.Источник)
			И ТипЗнч(Выборка.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") 
		Тогда 
			ВизаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ВизаОбъект, Выборка.Источник,
				"Исполнитель,РольИсполнителя,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации");
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВизаОбъект);
		КонецЕсли;	
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_3_3_3() Экспорт
	
	// Удаление неиспользуемых видов доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	УдаляемыеВидыДоступа = Новый Массив;
	УдаляемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.Пользователи);
	УдаляемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ДополнительныеСведения);
	УдаляемыеВидыДоступа.Добавить(ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступаВидыДоступа.Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
		|ГДЕ
		|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа В(&УдаляемыеВидыДоступа)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПрофилиГруппДоступаЗначенияДоступа.Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ПрофилиГруппДоступаЗначенияДоступа
		|ГДЕ
		|	ПрофилиГруппДоступаЗначенияДоступа.ВидДоступа В(&УдаляемыеВидыДоступа)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГруппыДоступаВидыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
		|ГДЕ
		|	ГруппыДоступаВидыДоступа.ВидДоступа В(&УдаляемыеВидыДоступа)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГруппыДоступаЗначенияДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
		|ГДЕ
		|	ГруппыДоступаЗначенияДоступа.ВидДоступа В(&УдаляемыеВидыДоступа)");
		
	Запрос.УстановитьПараметр("УдаляемыеВидыДоступа", УдаляемыеВидыДоступа);
	
	ИзменяемыеТЧ = Новый Массив;
	ИзменяемыеТЧ.Добавить("ВидыДоступа");
	ИзменяемыеТЧ.Добавить("ЗначенияДоступа");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ТЧ Из ИзменяемыеТЧ Цикл
			КолСтрок = ИзменяемыйОбъект[ТЧ].Количество();
			Для Сч = 1 По КолСтрок Цикл
				ТекущаяСтрока = ИзменяемыйОбъект[ТЧ][КолСтрок - Сч];
				Если УдаляемыеВидыДоступа.Найти(ТекущаяСтрока.ВидДоступа) <> Неопределено Тогда
					ИзменяемыйОбъект[ТЧ].Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ИзменяемыйОбъект.Записать();
		
	КонецЦикла;
		
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_3_5() Экспорт
	
	// Заполнение регистров СоставСубъектовПравДоступа и УчастникиПроцессов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные();
	РегистрыСведений.УчастникиПроцессов.ОбновитьВсеДанные();
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Обновление прав шаблонов процессов, подчиненных комплексным процессам
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
	
	ИменаШаблоновПроцессов = Новый Массив;
	ИменаШаблоновПроцессов.Добавить("ШаблоныИсполнения");
	ИменаШаблоновПроцессов.Добавить("ШаблоныОзнакомления");
	ИменаШаблоновПроцессов.Добавить("ШаблоныПоручения");
	ИменаШаблоновПроцессов.Добавить("ШаблоныРассмотрения");
	ИменаШаблоновПроцессов.Добавить("ШаблоныРегистрации");
	ИменаШаблоновПроцессов.Добавить("ШаблоныСогласования");
	ИменаШаблоновПроцессов.Добавить("ШаблоныСоставныхБизнесПроцессов");
	ИменаШаблоновПроцессов.Добавить("ШаблоныУтверждения");
	ИменаШаблоновПроцессов.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	ИменаШаблоновПроцессов.Добавить("ШаблоныПриглашения");
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ТаблицаШаблонов.Ссылка
		|ИЗ
		|	Справочник.%ИмяСправочника% КАК ТаблицаШаблонов
		|ГДЕ
		|	ТаблицаШаблонов.ВладелецШаблона ССЫЛКА БизнесПроцесс.КомплексныйПроцесс";
			
	Для Каждого ИмяШаблона Из ИменаШаблоновПроцессов Цикл
			
		Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "%ИмяСправочника%", ИмяШаблона));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаОбъекта(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Переопределение дескрипторов файлов процессов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаДляФайлов.ВладелецФайла
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляФайлов КАК ДескрипторыДоступаДляФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|				ПО ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|			ПО ДескрипторыДоступаФайлов.ДескрипторВладельца = ДескрипторыДоступаОбъектов.Ссылка
		|		ПО ДескрипторыДоступаДляФайлов.Дескриптор = ДескрипторыДоступаФайлов.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель = &ГруппаБизнесПроцессы");
		
	Запрос.УстановитьПараметр("ГруппаБизнесПроцессы", Справочники.ИдентификаторыОбъектовМетаданных.БизнесПроцессы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОпределитьДескрипторДоступаФайлаПоВладельцу(Выборка.ВладелецФайла);
	КонецЦикла;
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	// Заполнение реквизита задачи ТекущийИсполнитель
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ЗадачаИсполнителя.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.РольИсполнителя
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК ТекущийИсполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТекущийОсновнойОбъектАдресации,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТекущийДополнительныйОбъектАдресации
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ТекущийИсполнитель = НЕОПРЕДЕЛЕНО");
		
	РезультатПустой = Ложь;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 1000; // Для предотвращения бесконечного цикла
	
	Пока Не РезультатПустой И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ТекущийИсполнитель = Выборка.ТекущийИсполнитель;
			ЗадачаОбъект.ТекущийОсновнойОбъектАдресации = Выборка.ТекущийОсновнойОбъектАдресации;
			ЗадачаОбъект.ТекущийДополнительныйОбъектАдресации = Выборка.ТекущийДополнительныйОбъектАдресации;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_3_7() Экспорт
	
	// Заполнение новых служебных реквизитов задач
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ЗадачаИсполнителя.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТекущийОсновнойОбъектАдресации,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ТОГДА ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТекущийДополнительныйОбъектАдресации
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации <> ВЫБОР
		|			КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				ТОГДА ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ");
		
	РезультатПустой = Ложь;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 1000; // Для предотвращения бесконечного цикла
	
	Пока Не РезультатПустой И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ТекущийОсновнойОбъектАдресации = Выборка.ТекущийОсновнойОбъектАдресации;
			ЗадачаОбъект.ТекущийДополнительныйОбъектАдресации = Выборка.ТекущийДополнительныйОбъектАдресации;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_2() Экспорт
	
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.СообщенияОбсуждений");
	
	// Загрузка новых инструкций
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_3() Экспорт
	
	// Обновление состава субъектов
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные();
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_4() Экспорт
	
	//Заполнение порядка проектных задач по проектам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		РаботаСПроектами.ЗаполнитьПорядокПроектныхЗадач(Выборка.Ссылка);
	КонецЦикла;	
	
	// Переименование профиля ОтветственныеЗаОбменЭД в ОтветственныеЗаЭДО и
	// добавление роли РаботаСЭДО.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ИдентификаторПрофиляОтветственныеЗаЭДО = "2be49dd2-337f-4b3a-af9d-17fe9f8325ec";
	ПрофильОтветственныеЗаЭДО = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
		ИдентификаторПрофиляОтветственныеЗаЭДО);
	Если ЗначениеЗаполнено(ПрофильОтветственныеЗаЭДО) Тогда
		
		ПрофильОбъект = ПрофильОтветственныеЗаЭДО.ПолучитьОбъект();
		ПрофильОбъект.Наименование = "Ответственные за ЭДО";
		ОбъектМетаданныхРоль = Метаданные.Роли.Найти("РаботаСЭДО");
		Если ОбъектМетаданныхРоль <> Неопределено Тогда
			Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхРоль);
			НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
			Если НайденнаяСтрока = Неопределено Тогда 
				НоваяСтрока = ПрофильОбъект.Роли.Добавить();
				НоваяСтрока.Роль = Роль;
			КонецЕсли;
		КонецЕсли;
		ПрофильОбъект.Записать();
		
		// Переименование группы доступа
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ГруппыДоступа.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ГруппыДоступа КАК ГруппыДоступа
			|ГДЕ
			|	ГруппыДоступа.Профиль = &ПрофильГруппыДоступа";
		Запрос.УстановитьПараметр("ПрофильГруппыДоступа", ПрофильОбъект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ГруппаОбъект.Наименование = ПрофильОбъект.Наименование;
			ГруппаОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Обновление дескрипторов доступа
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта("Справочник.СообщенияЭДО");
	ОбновитьПраваСправочникаПоИмениОбъекта("Документ.ВходящееСообщениеСВД");
	ОбновитьПраваСправочникаПоИмениОбъекта("Документ.ИсходящееСообщениеСВД");
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_5() Экспорт
	
	// Добавление области делигирования - Контроль
	ОписаниеОбластейДелегирования = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	Для Каждого Строка Из ОписаниеОбластейДелегирования Цикл
		
		Если Строка.Идентификатор <> "2fa99374-2682-4bf8-bc92-6ebe2b0e9e0e" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьДелегированияСсылка = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
			|ГДЕ
			|	ОбластиДелегированияПрав.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ОбластьДелегированияСсылка);
		
		Если Запрос.Выполнить().Пустой() Тогда // Элемента данных нет, нужно создать новый
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(ОбластьДелегированияСсылка);
			ОбластьОбъект.Наименование = Строка.Наименование;
			Для Каждого ПолноеИмя Из Строка.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьПрава", Истина);
			ОбластьОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_4_1_6() Экспорт
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	// Заполнение измерения ОбъектМетаданных регистра ДескрипторыДоступаДляФайлов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	ДескрипторыДоступаДляФайлов.ВладелецФайла,
		|	ТИПЗНАЧЕНИЯ(ДескрипторыДоступаДляФайлов.ВладелецФайла) КАК ТипВладельца,
		|	ДескрипторыДоступаДляФайлов.Дескриптор,
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляФайлов КАК ДескрипторыДоступаДляФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО ДескрипторыДоступаДляФайлов.Дескриптор.ДескрипторВладельца = ДескрипторыДоступаОбъектов.Ссылка
		|ГДЕ
		|	ДескрипторыДоступаДляФайлов.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
		|	И ДескрипторыДоступаДляФайлов.ВладелецФайла <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 5000
		|	ДескрипторыДоступаДляФайлов.ВладелецФайла,
		|	ТИПЗНАЧЕНИЯ(ДескрипторыДоступаДляФайлов.ВладелецФайла),
		|	ДескрипторыДоступаДляФайлов.Дескриптор,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляФайлов КАК ДескрипторыДоступаДляФайлов
		|ГДЕ
		|	ДескрипторыДоступаДляФайлов.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
		|	И ДескрипторыДоступаДляФайлов.Дескриптор.ВладелецФайла <> НЕОПРЕДЕЛЕНО
		|	И ДескрипторыДоступаДляФайлов.ВладелецФайла <> НЕОПРЕДЕЛЕНО");
		
	ЕстьЗаписи = Истина;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 10000; // Для предотвращения бесконечного цикла
	
	Пока ЕстьЗаписи И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		ЕстьЗаписи = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИдентификаторОбъектаМетаданных = Выборка.ИдентификаторОбъектаМетаданных;
			Если Не ЗначениеЗаполнено(ИдентификаторОбъектаМетаданных) Тогда
				ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Выборка.ТипВладельца);
			КонецЕсли;
			
			Набор = РегистрыСведений.ДескрипторыДоступаДляФайлов.СоздатьНаборЗаписей();
			Набор.Отбор.ВладелецФайла.Установить(Выборка.ВладелецФайла);
			Строка = Набор.Добавить();
			Строка.ВладелецФайла = Выборка.ВладелецФайла;
			Строка.Дескриптор = Выборка.Дескриптор;
			Строка.ОбъектМетаданных = ИдентификаторОбъектаМетаданных;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
		КонецЦикла;
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_7() Экспорт
	
	// Очистка записей очереди, относящихся к правам процессов и задач
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав,
		|	ОчередьОбновленияПравДоступа.Приоритет
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|			ПО ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|		ПО ОчередьОбновленияПравДоступа.Объект = ДескрипторыДоступаОбъектов.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель В(&ОбрабатываемыеИОМ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав,
		|	ОчередьОбновленияПравДоступа.Приоритет
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ОчередьОбновленияПравДоступа.Объект = ЗадачаИсполнителя.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОчередьОбновленияПравДоступа.Объект,
		|	ОчередьОбновленияПравДоступа.ОбновлениеЗависимыхПрав,
		|	ОчередьОбновленияПравДоступа.Приоритет
		|ИЗ
		|	РегистрСведений.ОчередьОбновленияПравДоступа КАК ОчередьОбновленияПравДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ОчередьОбновленияПравДоступа.Объект = ДанныеБизнесПроцессов.БизнесПроцесс");
	
	ОбрабатываемыеИОМ = Новый Массив;
	ОбрабатываемыеИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.БизнесПроцессы);
	ОбрабатываемыеИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Задачи);
	
	Запрос.УстановитьПараметр("ОбрабатываемыеИОМ", ОбрабатываемыеИОМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьОбновленияПравДоступа.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_1_10() Экспорт
	
	// Обновление прав на темы форума, созданные на основании задач
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ДескрипторыДоступаОбъектов.ВладелецОбъекта = ЗадачаИсполнителя.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки = ЗНАЧЕНИЕ(Справочник.ТемыОбсуждений.ПустаяСсылка)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОбновитьПраваДоступаПоДескриптору(Выборка.Ссылка);
	КонецЦикла;
	
	// Обновление прав дескрипторов файлов процессов
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		| ДескрипторыДоступаФайлов.Ссылка
		|ИЗ
		| Справочник.ДескрипторыДоступаФайлов КАК ДескрипторыДоступаФайлов
		|  ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|  ПО ДескрипторыДоступаФайлов.ВладелецФайла = ДанныеБизнесПроцессов.БизнесПроцесс");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаФайлов.ОбновитьПрава(Выборка.Ссылка, Неопределено, Истина);
	КонецЦикла;
	
	// Замена предопределенного значения Справочник ВидыБизнесСобытий
	СтарыеВидыБизнесСобытий = Новый Массив;
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ВыполнениеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ИзменениеСоставаКомплекта");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ОтменаВыполненияЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_ПеренаправлениеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_СозданиеЗадачи");
	СтарыеВидыБизнесСобытий.Добавить("Удалить_СозданиеФайла");
	
	Для Каждого СтарыйВид Из СтарыеВидыБизнесСобытий Цикл
		
		СтарыйВидСсылка = Неопределено;
		
		Выборка = Справочники.ВидыБизнесСобытий.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяПредопределенныхДанных = СтарыйВид Тогда 
				СтарыйВидСсылка = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтарыйВидСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйВидИмя = СтрЗаменить(СтарыйВид, "Удалить_", "");
		
		// Произошедшие бизнес-события
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПроизошедшиеБизнесСобытия.Ссылка
		               |ИЗ
		               |	Справочник.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		               |ГДЕ
		               |	ПроизошедшиеБизнесСобытия.ВидСобытия = &ВидСобытия
		               |	И ПроизошедшиеБизнесСобытия.Обработано = ЛОЖЬ
		               |	И ПроизошедшиеБизнесСобытия.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);
		ВыборкаПроизошедшиеБизнесСобытия = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПроизошедшиеБизнесСобытия.Следующий() Цикл
			ПроизошедшееБизнесСобытие = ВыборкаПроизошедшиеБизнесСобытия.Ссылка.ПолучитьОбъект();
			ПроизошедшееБизнесСобытие.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			ПроизошедшееБизнесСобытие.Записать();
		КонецЦикла;
		
		// Настройки уведомлений по умолчанию
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиУведомленийПоУмолчанию.Настройка,
		               |	НастройкиУведомленийПоУмолчанию.ВидСобытия
		               |ИЗ
		               |	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
		               |ГДЕ
		               |	НастройкиУведомленийПоУмолчанию.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);
		ВыборкаНастройкиУведомленийПоУмолчанию = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНастройкиУведомленийПоУмолчанию.Следующий() Цикл
			
			СуществующаяЗапись = РегистрыСведений.НастройкиУведомленийПоУмолчанию.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СуществующаяЗапись, ВыборкаНастройкиУведомленийПоУмолчанию);
			СуществующаяЗапись.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			СуществующаяЗапись.Прочитать();
			
			МенеджерЗаписи = РегистрыСведений.НастройкиУведомленийПоУмолчанию.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаНастройкиУведомленийПоУмолчанию);
			МенеджерЗаписи.Прочитать();
			Если СуществующаяЗапись.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		// Настройки уведомлений
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиУведомлений.Пользователь,
		               |	НастройкиУведомлений.Настройка,
		               |	НастройкиУведомлений.ВидСобытия
		               |ИЗ
		               |	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		               |ГДЕ
		               |	НастройкиУведомлений.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);
		ВыборкаНастройкиУведомлений = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНастройкиУведомлений.Следующий() Цикл
			
			СуществующаяЗапись = РегистрыСведений.НастройкиУведомлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СуществующаяЗапись, ВыборкаНастройкиУведомлений);
			СуществующаяЗапись.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			СуществующаяЗапись.Прочитать();
			
			МенеджерЗаписи = РегистрыСведений.НастройкиУведомлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаНастройкиУведомлений);
			МенеджерЗаписи.Прочитать();
			Если СуществующаяЗапись.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		// Очередь уведомлений
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОчередьУведомлений.Объект,
		               |	ОчередьУведомлений.Пользователь,
		               |	ОчередьУведомлений.СпособУведомления,
		               |	ОчередьУведомлений.ВидСобытия,
		               |	ОчередьУведомлений.ОбъектПодписки
		               |ИЗ
		               |	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
		               |ГДЕ
		               |	ОчередьУведомлений.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);
		ВыборкаОчередьУведомлений = Запрос.Выполнить().Выбрать();
		Пока ВыборкаОчередьУведомлений.Следующий() Цикл
			
			СуществующаяЗапись = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СуществующаяЗапись, ВыборкаОчередьУведомлений);
			СуществующаяЗапись.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			СуществующаяЗапись.Прочитать();
			
			МенеджерЗаписи = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаОчередьУведомлений);
			МенеджерЗаписи.Прочитать();
			Если СуществующаяЗапись.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписки на уведомления
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПодпискиНаУведомления.ВидСобытия,
		               |	ПодпискиНаУведомления.ОбъектПодписки,
		               |	ПодпискиНаУведомления.Пользователь,
		               |	ПодпискиНаУведомления.СпособУведомления
		               |ИЗ
		               |	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		               |ГДЕ
		               |	ПодпискиНаУведомления.ВидСобытия = &ВидСобытия";
		Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСсылка);
		ВыборкаПодпискиНаУведомления = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПодпискиНаУведомления.Следующий() Цикл
			
			СуществующаяЗапись = РегистрыСведений.ПодпискиНаУведомления.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СуществующаяЗапись, ВыборкаПодпискиНаУведомления);
			СуществующаяЗапись.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
			СуществующаяЗапись.Прочитать();
			
			МенеджерЗаписи = РегистрыСведений.ПодпискиНаУведомления.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПодпискиНаУведомления);
			МенеджерЗаписи.Прочитать();
			Если СуществующаяЗапись.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.ВидСобытия = Справочники.ВидыБизнесСобытий[НовыйВидИмя];
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_3_1() Экспорт
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Константы.ИспользоватьФоновуюМаршрутизациюКомплексныхПроцессов.Установить(Истина);
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныВнутреннихДокументов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныВнутреннихДокументов КАК ШаблоныВнутреннихДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныВнутреннихДокументов.Корреспонденты КАК ШаблоныВнутреннихДокументовКорреспонденты
	|		ПО ШаблоныВнутреннихДокументов.Ссылка = ШаблоныВнутреннихДокументовКорреспонденты.Ссылка
	|ГДЕ
	|	ШаблоныВнутреннихДокументов.Корреспондент <> ЗНАЧЕНИЕ(Справочник.Корреспонденты.ПустаяСсылка)
	|	И ШаблоныВнутреннихДокументовКорреспонденты.Корреспондент ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Строка = ШаблонОбъект.Корреспонденты.Добавить();
		Строка.Корреспондент = ШаблонОбъект.Корреспондент;
		Строка.КонтактноеЛицо = ШаблонОбъект.КонтактноеЛицо;
				
		ШаблонОбъект.ОбменДанными.Загрузка = Истина;
		ШаблонОбъект.Записать(); 
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_4_1() Экспорт
	
	Если Метаданные.Справочники.ИсходящиеДокументы.Реквизиты.Найти("УдалитьПолучателиДляСписков") <> Неопределено  
	   И Метаданные.Справочники.ВнутренниеДокументы.Реквизиты.Найти("УдалитьКорреспондентыДляСписков") <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеДокументы.Ссылка,
		|	ИсходящиеДокументы.УдалитьПолучателиДляСписков КАК КорреспондентыДляСписков
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
		|		ПО ИсходящиеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеРеквизитыДокументов.КорреспондентыДляСписков, """") КАК СТРОКА(1000))) = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.УдалитьКорреспондентыДляСписков
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбщиеРеквизитыДокументов КАК ОбщиеРеквизитыДокументов
		|		ПО ВнутренниеДокументы.Ссылка = ОбщиеРеквизитыДокументов.Документ
		|ГДЕ
		|	(ВЫРАЗИТЬ(ЕСТЬNULL(ОбщиеРеквизитыДокументов.КорреспондентыДляСписков, """") КАК СТРОКА(1000))) = """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
				Выборка.Ссылка, "КорреспондентыДляСписков", Выборка.КорреспондентыДляСписков);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПерейтиНаВерсию_1_4_4_3() Экспорт
	
	// Удаление информации о дескрипторах справочника Контроль и ПВХ ДополнительныеРеквизитыИСведения
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ДескрипторыДоступаДляОбъектов.Объект,
	|	ДескрипторыДоступаДляОбъектов.ОбъектМетаданных,
	|	ДескрипторыДоступаДляОбъектов.Дескриптор
	|ИЗ
	|	РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
	|		ПО ДескрипторыДоступаДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
	|ГДЕ
	|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ОбрабатываемыеИОМ)");
	
	ОбрабатываемыеИОМ = Новый Массив;
	ОбрабатываемыеИОМ.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.Контроль));
	ОбрабатываемыеИОМ.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения));
	
	Запрос.УстановитьПараметр("ОбрабатываемыеИОМ", ОбрабатываемыеИОМ);

	ЕстьЗаписи = Истина;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 1000; // Для предотвращения бесконечного цикла

	Пока ЕстьЗаписи И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		ЕстьЗаписи = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Удалить();
			
		КонецЦикла;
	КонецЦикла;
	
	//МиСофт+
	ПерейтиНаВерсию_1_4_5_1();
	ПерейтиНаВерсию_1_4_6_1();
	ПерейтиНаВерсию_1_4_6_2();
	ПерейтиНаВерсию_1_4_7_1();
	ПерейтиНаВерсию_1_4_8_3();
	ПерейтиНаВерсию_1_4_9_3();
	ПерейтиНаВерсию_1_4_9_4();
	//МиСофт-
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_5_1() Экспорт
	
	// Заполнение реквизита ИмяМакетаТиповой справочника Инструкции.
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	ХешиТиповыхИнструкций = ХешиТиповыхИнструкций();
	Выборка = Справочники.Инструкции.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстИнструкции = Выборка.Ссылка.ТекстИнструкции.Получить();
		ТекстТелаИнструкции = РаботаСИнструкциями.ТелоИнструкцииИзHTML(ТекстИнструкции);
		ХешДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
		ХешДанных.Добавить(ТекстТелаИнструкции);
		ХешИнструкции = Строка(ХешДанных.ХешСумма);
		ИмяМакетаТиповой = ХешиТиповыхИнструкций.Получить(ХешИнструкции);
		Если ИмяМакетаТиповой = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектИнструкции = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектИнструкции.ИмяМакетаТиповой = ИмяМакетаТиповой;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИнструкции);
	КонецЦикла;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Обновляем типовые инструкции.
	РаботаСИнструкциями.ЗагрузитьТиповыеИнструкции();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_6_1() Экспорт
	
	// Добавление в настройки доступности по состоянию поля "Адресат" внутреннего документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НастройкиДоступностиПоСостоянию.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВнутренниеДокументы)
	|	И НЕ ""Адресат"" В
	|				(ВЫБРАТЬ
	|					НастройкиДоступности.ИмяПоляКоманды
	|				ИЗ
	|					Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
	|				ГДЕ
	|					НастройкиДоступности.Ссылка = НастройкиДоступностиПоСостоянию.Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НайденныеСтроки = ВыборкаОбъект.НастройкиДоступности.НайтиСтроки(
			Новый Структура("ИмяПоляКоманды", "Подготовил"));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = ВыборкаОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = "Адресат";
			НоваяСтрока.Состояние = Строка.Состояние;
			НоваяСтрока.Доступность = Строка.Доступность;
		КонецЦикла;		
		ВыборкаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_6_2() Экспорт
	
	// Привязка поставляемых областей делегирования к предопределенным элементам
	ОписанияОбластей = НастраиваемоеДелегированиеПрав.ОписанияНачальногоЗаполненияОбластейДелегирования();
	ОписанияОбластейПоСсылкам = Новый Соответствие;
	СсылкиНаПредопределенныеОбласти = Новый Массив;
	
	Для Каждого ОписаниеОбласти Из ОписанияОбластей Цикл
		
		СсылкаНаОбласть = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОписаниеОбласти.Идентификатор));
			
		СсылкиНаПредопределенныеОбласти.Добавить(СсылкаНаОбласть);
		ОписанияОбластейПоСсылкам.Вставить(СсылкаНаОбласть, ОписаниеОбласти);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиДелегированияПрав.Ссылка,
		|	ОбластиДелегированияПрав.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА ОбластиДелегированияПрав.Ссылка В (&ПредопределенныеОбласти)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПредопределенный
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	НЕ ОбластиДелегированияПрав.Предопределенный
		|	И (ОбластиДелегированияПрав.Ссылка В (&ПредопределенныеОбласти)
		|			ИЛИ НЕ ОбластиДелегированияПрав.ПометкаУдаления)");
		
	Запрос.УстановитьПараметр("ПредопределенныеОбласти", СсылкиНаПредопределенныеОбласти);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.ЭтоПредопределенный Тогда
			
			ОписаниеОбласти = ОписанияОбластейПоСсылкам.Получить(Выборка.Ссылка);
			ОбластьОбъект.ИмяПредопределенныхДанных = ОписаниеОбласти.ИмяПредопределенного;
			ОбластьОбъект.ПометкаУдаления = Ложь;
			
			ОбластьОбъект.Состав.Очистить();
			Для Каждого ПолноеИмя Из ОписаниеОбласти.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			
		Иначе
			ОбластьОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		ОбластьОбъект.Записать();
		
	КонецЦикла;
	
	// Добавление удаленных ранее предопределенных областей
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиДелегированияПрав.Ссылка
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|ГДЕ
		|	ОбластиДелегированияПрав.Предопределенный");
		
	ПредопределенныеОбласти = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Эл Из ОписанияОбластейПоСсылкам Цикл
		Если ПредопределенныеОбласти.Найти(Эл.Ключ) = Неопределено Тогда
			
			ОписаниеОбласти = Эл.Значение;
			
			ОбластьОбъект = Справочники.ОбластиДелегированияПрав.СоздатьЭлемент();
			ОбластьОбъект.УстановитьСсылкуНового(Эл.Ключ);
			ОбластьОбъект.Наименование = ОписаниеОбласти.Наименование;
			ОбластьОбъект.ИмяПредопределенныхДанных = ОписаниеОбласти.ИмяПредопределенного;
			
			Для Каждого ПолноеИмя Из ОписаниеОбласти.Состав Цикл
				НоваяСтрока = ОбластьОбъект.Состав.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
			КонецЦикла;
			ОбластьОбъект.Записать();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_7_1() Экспорт
	
	// Перенос реквизита Корреспондент в табличную часть
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДокументы.Ссылка
	|ИЗ
	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
	|		ПО ВнутренниеДокументы.Ссылка = ВнутренниеДокументыКорреспонденты.Ссылка
	|ГДЕ
	|	ВнутренниеДокументы.Корреспондент <> ЗНАЧЕНИЕ(Справочник.Корреспонденты.ПустаяСсылка)
	|	И ВнутренниеДокументыКорреспонденты.Корреспондент ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Документ = Выборка.Ссылка.ПолучитьОбъект();
				
		Строка = Документ.Корреспонденты.Добавить();
		Строка.Корреспондент = Документ.Корреспондент;
		Строка.КонтактноеЛицо = Документ.КонтактноеЛицо;
		Строка.ПодписалОтКорреспондента = Документ.ПодписалОтКорреспондента;	
				
		Документ.ОбменДанными.Загрузка = Истина;
		Документ.Записать();
				
		КорреспондентыДляСписков = Делопроизводство.ПолучитьКорреспондентовДляСписков(
			Документ.Корреспонденты.Выгрузить());
			
		РегистрыСведений.ОбщиеРеквизитыДокументов.ЗаписатьОбщийРеквизитДокумента(
			Документ.Ссылка, "КорреспондентыДляСписков", КорреспондентыДляСписков);
	КонецЦикла;	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);			
	
	
	// Добавление прав на "Все функции" и "Сохранение данных пользователей"
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ДобавляемыеРоли = Новый Массив;
	ДобавляемыеРоли.Добавить(Метаданные.Роли.Найти("РежимВсеФункции"));
	ДобавляемыеРоли.Добавить(Метаданные.Роли.Найти("СохранениеДанныхПользователя"));
	
	Идентификатор = "c999acb1-d5f5-11de-a544-00179ab398dc"; // идентификатор профиля Пользователи
	Профиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Профиль) Тогда 
		
		ПрофильОбъект = Профиль.ПолучитьОбъект();
		Для Каждого МетаданныеРоли Из ДобавляемыеРоли Цикл
			
			Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
			
			Если ЗначениеЗаполнено(Роль) Тогда
				НайденнаяСтрока = ПрофильОбъект.Роли.Найти(Роль, "Роль");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ПрофильОбъект.Роли.Добавить();
					НоваяСтрока.Роль = Роль;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
		
	КонецЕсли;
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
	// Заполнение производственного календаря 2015
	КалендарныеГрафики.СоздатьПроизводственныйКалендарьНа2015Год();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_3() Экспорт
	
	// Добавление роли АдминистраторСистемы в профиль Администраторы,
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	МетаданныеРоли = Метаданные.Роли.АдминистраторСистемы;
	ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеРоли);
	ПрофильОбъект = Справочники.ПрофилиГруппДоступа.Администратор.ПолучитьОбъект();
	
	Если ПрофильОбъект.Роли.Найти(ИдентификаторРоли, "Роль") = Неопределено Тогда 
		НоваяСтрока = ПрофильОбъект.Роли.Добавить();
		НоваяСтрока.Роль = ИдентификаторРоли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_9_3() Экспорт
	
	// Заполнение измерения Завершен регистра ДанныеБизнесПроцессов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Завершен <> ДанныеБизнесПроцессов.УдалитьЗавершен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс = Выборка.БизнесПроцесс;
		МенеджерЗаписи.Завершен = Выборка.Завершен;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Завершен = МенеджерЗаписи.УдалитьЗавершен;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_9_4() Экспорт
	
	ОбновитьПраваСправочникаПоИмениОбъекта("Справочник.Мероприятия");
	
КонецПроцедуры

// Удаляет из профилей идентификаторы ролей, удаленных из метаданных
// 
Процедура УдалитьИзПрофилейСсылкиНаУдаленныеРоли() Экспорт
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступаРоли.Ссылка КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль,
		|	ПрофилиГруппДоступаРоли.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ПрофилиГруппДоступаРоли.Роль = ИдентификаторыОбъектовМетаданных.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Профиль,
		|	НомерСтроки УБЫВ");
	
	ПрофилиСУдаленнымиРолями = Запрос.Выполнить().Выгрузить();
	ВсеУдаленныеРоли = ПрофилиСУдаленнымиРолями.ВыгрузитьКолонку("Роль");
	
	УдаленныеРоли = Новый Соответствие;
	ПроверенныеРоли = Новый Соответствие;
	
	Для Каждого Роль Из ВсеУдаленныеРоли Цикл
		
		Если ПроверенныеРоли.Получить(Роль) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Роль);
		Исключение
			// Если объект метаданных не найден, значит роль действительно нужно удалить из профиля
			УдаленныеРоли.Вставить(Роль, Истина);
		КонецПопытки;
		
		ПроверенныеРоли.Вставить(Роль, Истина);
		
	КонецЦикла;
	
	ПрофильОбъект = Неопределено;
	ТекущийПрофиль = Неопределено;
	
	Для Каждого Стр Из ПрофилиСУдаленнымиРолями Цикл
		
		Если Стр.Профиль <> ТекущийПрофиль Тогда
			Если ПрофильОбъект <> Неопределено Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
			КонецЕсли;
			ПрофильОбъект = Неопределено;
			ТекущийПрофиль = Стр.Профиль;
		КонецЕсли;
		
		Если УдаленныеРоли.Получить(Стр.Роль) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПрофильОбъект = Неопределено Тогда
			ПрофильОбъект = Стр.Профиль.ПолучитьОбъект();
		КонецЕсли;
		
		ПрофильОбъект.Роли.Удалить(Стр.НомерСтроки - 1);
		
	КонецЦикла;
	
	Если ПрофильОбъект <> Неопределено Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
	КонецЕсли;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

// Возвращает хеши текстов типовых инструкций.
//
Функция ХешиТиповыхИнструкций()
	
	Хеши = Новый Соответствие;
	Хеши.Вставить("97 AB 0E 49 17 69 41 D3 8D 9A 33 29 41 31 58 8C D7 06 83 D3", "Дело");
	Хеши.Вставить("12 C1 8D 55 EA 76 69 89 71 A7 27 ED 69 D9 9E B5 6E 53 03 20", "ДокументыВнутренние");
	Хеши.Вставить("96 0D 6C 1F 82 FB 56 B7 71 53 08 20 28 BE B8 49 BD 17 E3 B5", "ДокументыВнутренние");
	Хеши.Вставить("53 9D DE 4E 25 15 D3 55 94 F7 7D 58 21 F0 85 13 C3 BA 90 94", "ДокументыВнутренниеДоговорныеАкт");
	Хеши.Вставить("28 60 26 1C 62 BA 29 C3 97 FC 02 DB 33 84 6A FE A9 EC 91 43", "ДокументыВнутренниеДоговорныеАкт");
	Хеши.Вставить("57 82 87 93 3F 0E B3 29 7C 6B DE 88 5E D9 71 E5 3A 55 27 DC", "ДокументыВнутренниеДоговорныеДоговорНетиповойФормы");
	Хеши.Вставить("22 70 EE 3F 04 86 7C 20 B4 11 C9 4A 35 C8 0C EB 50 0F D1 67", "ДокументыВнутренниеДоговорныеДоговорТиповойФормы");
	Хеши.Вставить("CC 2C 2E 69 B6 D1 2A E7 0E 12 D5 64 72 A8 69 DD 05 E2 6F 70", "ДокументыВнутренниеИнформационноСправочныеАкт");
	Хеши.Вставить("EB 4D C9 56 D9 B4 86 26 7E 1D 80 AC 7C CB 9E B5 B1 1C 74 73", "ДокументыВнутренниеИнформационноСправочныеАкт");
	Хеши.Вставить("F2 CD 00 DF 60 DE E5 FF D0 01 9D 86 09 A7 E6 12 D1 CE 04 00", "ДокументыВнутренниеИнформационноСправочныеЗаявление");
	Хеши.Вставить("DB C2 42 13 8A 05 BE F7 81 A1 3A E3 B9 8C 32 18 88 60 55 F0", "ДокументыВнутренниеИнформационноСправочныеЗаявление");
	Хеши.Вставить("25 BD FB F6 D5 2B E3 51 D7 A7 09 D5 0B 5D 04 71 88 A5 2E 53", "ДокументыВнутренниеИнформационноСправочныеКоммерческоеПисьмо");
	Хеши.Вставить("1A 8B C7 EE 9D CC 81 AC DD 79 98 CC 84 C9 2B 7D 5C 3F AA FB", "ДокументыВнутренниеИнформационноСправочныеОбъяснительнаяЗаписка");
	Хеши.Вставить("D0 CE 48 7B 84 FB 58 8C 34 AF 5A 4A 44 DC 58 2E 3C 1B 97 55", "ДокументыВнутренниеИнформационноСправочныеПротокол");
	Хеши.Вставить("16 52 41 28 CD 81 64 B6 19 D4 93 49 BF 72 6A 62 01 7C B4 59", "ДокументыВнутренниеИнформационноСправочныеСлужебнаяЗаписка");
	Хеши.Вставить("83 64 FD D2 AD 8B 99 26 26 FF 9D ED C7 91 E5 F0 89 CB A1 DC", "ДокументыВнутренниеИнформационноСправочныеСлужебнаяЗаписка");
	Хеши.Вставить("1A A8 6E 85 F5 B2 B6 79 E1 16 B4 08 73 7A 6F C0 A4 55 09 19", "ДокументыВнутренниеОрганизационноПравовыеДолжностнаяИнструкция");
	Хеши.Вставить("87 D1 DC C0 C6 B0 29 1A 7D EB D8 1E FC 8F B8 98 01 4F 07 C1", "ДокументыВнутренниеОрганизационноПравовыеДолжностнаяИнструкция");
	Хеши.Вставить("B1 30 C0 67 40 C5 5B 6F 7B 1B AE 19 5B 40 1A A7 F3 65 9F 5C", "ДокументыВнутренниеОрганизационноПравовыеПоложениеОПодразделении");
	Хеши.Вставить("41 25 37 07 BB E9 5F 5F 5B C0 AD A6 CE D2 30 95 32 33 06 68", "ДокументыВнутренниеОрганизационноРаспорядительныеПриказ");
	Хеши.Вставить("A4 BC C4 20 3A 7F 14 D3 F7 B2 D8 C6 4F C2 F1 61 97 84 D2 14", "ДокументыВнутренниеОрганизационноРаспорядительныеРаспоряжение");
	Хеши.Вставить("90 09 AF 36 BA 0F 96 7A F4 63 AB 2F 3A E0 66 E4 25 EE C4 BA", "ДокументыВнутренниеОрганизационноРаспорядительныеРешение");
	Хеши.Вставить("3E 18 46 1B B9 40 1B B5 61 AB 29 B9 60 7F B7 9A 66 A7 9E B1", "ДокументыВнутренниеРегистрация");
	Хеши.Вставить("ED 11 2D 36 2E 64 64 2F EF 4C A3 A3 2F 96 53 47 B6 91 EB B3", "ДокументыВнутренниеРегламентныеИнструкция");
	Хеши.Вставить("C1 FD F4 B2 4F 30 BA 47 18 58 95 AD 7D E1 77 8C 66 3A 51 46", "ДокументыВнутренниеРегламентныеМетодика");
	Хеши.Вставить("B5 E4 2C 16 72 A5 AE 8A 25 42 73 B7 ED E3 0F AF 4B 23 22 DB", "ДокументыВнутренниеРегламентныеМетодика");
	Хеши.Вставить("BC 4D A3 24 45 CA 2D 8E F6 12 09 5C 53 1B 9D 03 A3 72 8E F0", "ДокументыВнутренниеРегламентныеПолитика");
	Хеши.Вставить("26 94 AC 47 81 8B B0 D9 1D DF 8B 34 35 9F D3 D1 0C 1A 8C FE", "ДокументыВнутренниеРегламентныеПоложение");
	Хеши.Вставить("DB D3 DE D7 EB B7 0A 37 B5 BD 41 7B D6 F4 D8 DA 38 64 36 93", "ДокументыВнутренниеРегламентныеПоложение");
	Хеши.Вставить("8D 09 AA 28 66 23 9B 56 69 9D CE 7A AA A8 92 D5 DE CC 28 12", "ДокументыВнутренниеРегламентныеПравила");
	Хеши.Вставить("9B 32 DF 46 C9 F2 49 D8 82 C7 03 23 EE F6 4D DD 73 60 BE C5", "ДокументыВнутренниеРегламентныеТехнологическаяКартаОперации");
	Хеши.Вставить("04 9C A2 08 49 1B 7A 73 0A 22 E3 F8 63 38 CD 11 2C E8 E4 49", "ДокументыВходящиеРегистрация");
	Хеши.Вставить("C3 25 78 08 43 B9 AE 68 FE C7 96 76 85 93 9E 1C 15 7F 36 B1", "ДокументыВходящиеРегистрация");
	Хеши.Вставить("99 E6 43 3A 79 B5 E7 FE 2D B0 E4 54 85 D3 37 C3 EA 9A 9F 25", "ДокументыИсходящиеОтправка");
	Хеши.Вставить("D5 39 F3 D2 9F 15 6F 28 20 38 A7 E8 F0 65 9D D9 3F 7D 59 BB", "ДокументыИсходящиеОтправка");
	Хеши.Вставить("AB 91 D6 33 16 25 44 E6 52 FD DC C8 F1 75 A3 06 05 4F BE 89", "ДокументыИсходящиеРегистрация");
	Хеши.Вставить("98 D5 9D E9 17 8E EC 2E 64 AF 6C 58 55 7F 08 D3 13 11 C4 06", "ДокументыИсходящиеСлужебныеПисьма");
	Хеши.Вставить("49 18 A1 4E BA 81 ED 3F 72 B8 1F E1 65 6A DC A7 D3 3E 01 F1", "ДокументыИсходящиеСлужебныеПисьма");
	Хеши.Вставить("31 EA 6F FA 26 52 77 13 16 54 99 56 6A E9 7B 53 9B DF CA E2", "ДокументыИсходящиеСправка");
	Хеши.Вставить("B7 69 9E 32 F4 39 7A 4F 41 23 9D E5 C7 A9 EC 29 1C CA 2B F9", "ЕжедневныйОтчет");
	Хеши.Вставить("DE CF D6 6B BD 3F 8F AD 15 91 EA C8 75 B6 96 65 A3 07 FF 6E", "ЕжедневныйОтчет");
	Хеши.Вставить("C6 31 23 63 23 94 49 C6 DD 70 7B CD 8E E6 5D 8D 35 69 93 63", "ЖурналПередачи");
	Хеши.Вставить("46 C4 4A 64 3C 20 C1 9E C6 D0 16 72 D2 A7 58 EC 54 AF 6F C8", "ЖурналПередачи");
	Хеши.Вставить("BC E1 08 94 9B D7 94 99 DC A8 DE E9 50 69 9A 39 A5 13 57 70", "ЗадачаНаИсполнение");
	Хеши.Вставить("A2 A1 49 74 7A 00 F0 E9 CC 58 70 26 EA A4 33 12 9A C2 10 B9", "ЗадачаНаИсполнениеОтветственному");
	Хеши.Вставить("5D 93 69 AB 49 DE 32 2D 82 39 BC 50 AF 69 9E 5D 46 28 D7 77", "ЗадачаНаОзнакомление");
	Хеши.Вставить("B3 BB 69 A8 6F 85 B7 AB BB 6D CD 31 D6 83 0D 21 C9 06 21 E2", "ЗадачаНаОзнакомлениеСРассмотрением");
	Хеши.Вставить("8B 69 3E 7C 9D A3 38 ED 02 B8 C6 B3 3A 79 6C 35 F1 89 17 81", "ЗадачаНаОзнакомлениеСРассмотрением");
	Хеши.Вставить("9F 80 4D C9 57 60 96 32 3F 75 6C 8B B8 78 65 0A 82 2B 9E 29", "ЗадачаНаОзнакомлениеСРегистрацией");
	Хеши.Вставить("6F D3 35 71 5E 8E E2 95 EE 56 64 D6 BE 6C FE 3A F9 08 57 DC", "ЗадачаНаОзнакомлениеССогласованием");
	Хеши.Вставить("68 13 96 25 7C F7 8D AA 9D D4 95 26 61 D2 20 D2 7F 59 E8 A8", "ЗадачаНаОзнакомлениеСУтверждением");
	Хеши.Вставить("CA 51 8B D6 0D 32 EC D9 B3 7E 82 24 FB 73 B3 D9 54 6B F4 CC", "ЗадачаНаПоручение");
	Хеши.Вставить("CB E1 FB 13 EA 3F 71 92 A0 63 F8 80 A2 2C E5 64 E5 48 C9 D7", "ЗадачаНаПоручение");
	Хеши.Вставить("CF 43 A2 A9 4E 46 04 15 57 61 7B 0F 6F AA FD 31 44 7A 57 83", "ЗадачаНаРассмотрение");
	Хеши.Вставить("F2 01 DA 8C 57 E0 60 57 9D D9 01 3B 61 47 8A 5C BE 49 F6 15", "ЗадачаНаРассмотрение");
	Хеши.Вставить("70 CF 13 7D 24 CF 8A 22 84 E9 E0 C5 88 C3 9D 01 8D 3A 6F 5C", "ЗадачаНаСогласование");
	Хеши.Вставить("AB FD A6 C3 9C DE 00 B7 3E F0 48 B1 27 C3 61 D7 1E 49 22 90", "ЗадачаНаСогласование");
	Хеши.Вставить("03 41 5D 40 A2 58 C8 BE EA E3 FF 81 E2 94 E0 4E 08 52 C8 83", "ЗадачаНаУтверждение");
	Хеши.Вставить("5E BD C3 DB 9E 16 35 CE C4 93 5C 9F B9 BE C6 B9 B9 75 6D F8", "Задачи");
	Хеши.Вставить("6E 0C C5 08 5E 6A 2C 81 FC 40 37 5D A3 A2 F0 DC 05 D4 FA 16", "Задачи");
	Хеши.Вставить("0A E9 1D 80 F0 82 74 E2 02 9B 5B CF 41 D8 39 69 10 11 20 9E", "НоменклатураДел");
	Хеши.Вставить("74 35 A6 9D 71 1B C5 01 6F 08 49 03 04 F8 43 13 7A A7 9C B2", "ПроцессИсполнение");
	Хеши.Вставить("AD DA 01 34 2D 5C D5 95 83 25 02 1F 7D 2D 60 9D 6C 62 AD B4", "ПроцессИсполнение");
	Хеши.Вставить("8B 0F 5A EA E3 F5 0E 1C 52 27 2F CD 99 E8 BC 53 E3 14 83 4D", "ПроцессИсполнениеНаправитьПриказ");
	Хеши.Вставить("AE 9D A3 A1 E3 B3 05 47 53 F1 B9 31 AB 09 26 9B C7 6A CF E5", "ПроцессОбработкаВнутреннегоДокумента");
	Хеши.Вставить("6D D3 DB 56 53 B2 C2 1D CE BC 24 0F 13 7D BE BD 46 37 B2 F2", "ПроцессОбработкаВходящегоДокумента");
	Хеши.Вставить("87 E1 60 A2 56 F0 EC 2F 94 82 E7 EC FE 5C 13 6C 4C 27 C8 D6", "ПроцессОбработкаИсходящегоДокумента");
	Хеши.Вставить("0D C4 5B 64 31 BF 5C A3 EF 0A 42 B7 71 F9 F0 7B C8 F3 F6 AF", "ПроцессОзнакомление");
	Хеши.Вставить("44 6A A6 7D 86 47 32 D1 5F FF BB 7C 50 32 37 2E 9B E1 55 5E", "ПроцессОзнакомление");
	Хеши.Вставить("4C 13 91 16 CE 20 5B 03 13 C2 71 80 EE AC 8E 20 3D 9C ED D8", "ПроцессПоручение");
	Хеши.Вставить("A2 45 C4 FA 36 F3 33 67 FF 82 2B 61 16 14 E1 EF 97 60 C9 C6", "ПроцессПоручение");
	Хеши.Вставить("E4 38 A9 34 E7 B9 14 6C 4C 74 3E 4A 85 54 3D A3 0C 18 B8 DD", "ПроцессРассмотрение");
	Хеши.Вставить("F0 82 61 34 E8 FA 36 64 08 33 BD 7E 34 83 F1 5E 85 FE FC F0", "ПроцессРассмотрение");
	Хеши.Вставить("65 D4 D6 74 A8 3D 3F E3 FC CA 38 F5 A8 66 A3 49 E1 49 67 2F", "ПроцессРегистрация");
	Хеши.Вставить("42 A5 06 2A 67 3F 29 0C 2F 3F 22 CB 1F B4 20 DC 15 B4 32 D1", "ПроцессРегистрация");
	Хеши.Вставить("29 E0 A0 C9 B6 E9 B9 52 C2 C9 49 EC B9 8E D5 87 FA 3F 38 FE", "ПроцессСогласование");
	Хеши.Вставить("B5 BC C8 9D 75 88 F2 22 F1 0A A4 B1 47 D1 35 04 F1 3E 6F BC", "ПроцессСогласование");
	Хеши.Вставить("1E D7 BE AE AD 90 42 C0 49 20 B2 89 69 4B DB 33 AD 01 6D E6", "ПроцессУтверждение");
	Хеши.Вставить("A6 4B 37 46 66 A9 54 38 43 94 A0 DB A1 F9 0F 48 A7 D3 D7 6C", "ПроцессУтверждение");
	Хеши.Вставить("35 5F 88 1A 2C 2E A7 15 FF 45 EB E5 10 AF C4 C0 D7 7A 89 5A", "ЭлектроннаяПодпись");
	
	Возврат Хеши;
	
КонецФункции

Функция ПолучитьЭтапПоИдентификатору(Этапы, ИдентификаторЭтапа)
	
	Для Каждого Этап Из Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			Возврат Этап;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Исправление признака наличия неисполненных задач у предметов (вх/ихс/внутр. документов и т.д.).
//
Процедура ИсправлениеПризнакаНаличияНеисполненныхЗадачУОбъекта(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	КешИнформацииОбОбъектах.Объект
		|ИЗ
		|	РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ЗадачаИсполнителяПредметы.Предмет КАК Предмет
		|		ИЗ
		|			Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ГДЕ
		|			НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|			И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса В (ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен), ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка))
		|			И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления) КАК ПредметыСАктивнымиЗадачами
		|		ПО КешИнформацииОбОбъектах.Объект = ПредметыСАктивнымиЗадачами.Предмет
		|ГДЕ
		|	КешИнформацииОбОбъектах.ЕстьЗадачи = ИСТИНА
		|	И ПредметыСАктивнымиЗадачами.Предмет ЕСТЬ NULL
		|	И КешИнформацииОбОбъектах.Объект <> НЕОПРЕДЕЛЕНО";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
		
	// Запрос для определения наличия неисполненных задач по объекту.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	НЕ ЗадачаИсполнителяПредметы.Ссылка.Выполнена
		|	И ЗадачаИсполнителяПредметы.Ссылка.СостояниеБизнесПроцесса В (ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен), ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка))
		|	И НЕ ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления
		|	И ЗадачаИсполнителяПредметы.Предмет = &Предмет";
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах");
			ЭлементБлокировки.УстановитьЗначение("Объект", Выборка.Объект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Предмет", Выборка.Объект);
			
			Если Запрос.Выполнить().Пустой() Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Выборка.Объект, "ЕстьЗадачи", Ложь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение ресурса Состояние в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеРесурсаСостояниеВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)
		|	И ДанныеБизнесПроцессов.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(Запись.Состояние) Тогда
				
				РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.БизнесПроцесс, "Состояние");
				
				Если ЗначениеЗаполнено(РеквизитыПроцесса) Тогда
					
					ЗаполнитьЗначенияСвойств(Запись, РеквизитыПроцесса);
					
					Запись.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(Выборка.БизнесПроцесс);
			
		Исключение
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение состояния процессов РешениеВопросовВыполненияЗадач.
// Так же заполняется состояние в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеРеквизитаСостояниеВПроцессахРешениеВопросВыполненияЗадач(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			НачатьТранзакцию();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Процесс);
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
			
			ЗначенияПолей = Новый Структура("Состояние", Перечисления.СостоянияБизнесПроцессов.Активен);
			
			БизнесПроцессыИЗадачиВызовСервера.ЗаписатьВСписокБизнесПроцессов(ПроцессОбъект.Ссылка,
				ЗначенияПолей);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Процесс);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Продолжить;
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаление информации о дескрипторах процессов и задач в отложенном режиме
//
Процедура ОчиститьИнформациюОДескрипторахПроцессовИЗадач(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ДескрипторыДоступаДляОбъектов.Объект,
		|	ДескрипторыДоступаДляОбъектов.ОбъектМетаданных,
		|	ДескрипторыДоступаДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|			ПО ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|		ПО ДескрипторыДоступаДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель В(&ПапкиИОМ)");
		
	МассивПапокИОМ = Новый Массив;
	МассивПапокИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.БизнесПроцессы);
	МассивПапокИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Задачи);
		
	Запрос.УстановитьПараметр("ПапкиИОМ", МассивПапокИОМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Запись = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Удалить();
			
			ДескрипторСсылка = Выборка.Дескриптор;
			ЗаблокироватьДанныеДляРедактирования(ДескрипторСсылка);
			ДескрипторОбъект = ДескрипторСсылка.ПолучитьОбъект();
			ДескрипторОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

// Удаление информации о дескрипторах процессов и задач
//
Процедура ОчиститьИнформациюОДескрипторахПроцессовИЗадачНемедленно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
		|	ДескрипторыДоступаДляОбъектов.Объект,
		|	ДескрипторыДоступаДляОбъектов.ОбъектМетаданных,
		|	ДескрипторыДоступаДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|			ПО ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
		|		ПО ДескрипторыДоступаДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель В(&ПапкиИОМ)");
		
	МассивПапокИОМ = Новый Массив;
	МассивПапокИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.БизнесПроцессы);
	МассивПапокИОМ.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.Задачи);
		
	Запрос.УстановитьПараметр("ПапкиИОМ", МассивПапокИОМ);
	
	ЕстьЗаписи = Истина;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 1000; // Для предотвращения бесконечного цикла
	
	Пока ЕстьЗаписи И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		ЕстьЗаписи = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Удалить();
				
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права доступа шаблоно процессов.
//
Процедура ОбновлениеПравДоступаШаблоновПроцессов(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыОбъектовМетаданных = Новый Массив;
	
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныИсполнения));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныКомплексныхБизнесПроцессов));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныОзнакомления));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныПоручения));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныПриглашения));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныРассмотрения));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныРегистрации));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныСогласования));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныСоставныхБизнесПроцессов));
			
	ИдентификаторыОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныУтверждения));
	
	ИдентификаторыВладельцевОбъектовМетаданных = Новый Массив;
	
	ИдентификаторыВладельцевОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Справочники.ШаблоныКомплексныхБизнесПроцессов));
			
	ИдентификаторыВладельцевОбъектовМетаданных.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.БизнесПроцессы.КомплексныйПроцесс));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДескрипторыДоступаОбъектов.Ссылка,
		|	ДескрипторыДоступаОбъектов.ДескрипторВладельца
		|ПОМЕСТИТЬ ДескрипторыШаблонов
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ИдентификаторыОбъектовМетаданных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДескрипторыШаблонов.Ссылка
		|ИЗ
		|	ДескрипторыШаблонов КАК ДескрипторыШаблонов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаВладельцев
		|		ПО ДескрипторыШаблонов.ДескрипторВладельца = ДескрипторыДоступаВладельцев.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов.РабочаяГруппа КАК ДескрипторыДоступаОбъектовРабочаяГруппа
		|		ПО ДескрипторыШаблонов.Ссылка = ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка
		|ГДЕ
		|	ДескрипторыДоступаОбъектовРабочаяГруппа.Ссылка ЕСТЬ NULL 
		|	И НЕ ЕСТЬNULL(ДескрипторыДоступаВладельцев.ИдентификаторОбъектаМетаданных, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)) В (&ИдентификаторыВладельцевОбъектовМетаданных)";
	Запрос.УстановитьПараметр("ИдентификаторыОбъектовМетаданных", ИдентификаторыОбъектовМетаданных);
	Запрос.УстановитьПараметр(
		"ИдентификаторыВладельцевОбъектовМетаданных", ИдентификаторыВладельцевОбъектовМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ДескрипторОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаТаблицы = ДескрипторОбъект.РабочаяГруппа.Добавить();
			СтрокаТаблицы.Участник = Справочники.ГруппыПользователей.ВсеПользователи;
			ДескрипторОбъект.Записать();
			
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
			
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеРеквизитовДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 300
		|	Документы.Ссылка
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК Документы
		|ГДЕ
		|	(Документы.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы <> Документы.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы
		|			ИЛИ Документы.Шаблон <> Документы.УдалитьШаблон)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документы.ДатаСоздания УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Параметры.ОбработкаЗавершена = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Шаблон = ДокументОбъект.УдалитьШаблон;
		ДокументОбъект.ЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы = 
			ДокументОбъект.УдалитьЗапретитьАвтоматическоеДобавлениеУчастниковРабочейГруппы;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;	
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_КОРП_СВерсииПРОФ()
	
	// сперва найдем виды бизнес-событий - помеченные на удаление и не-предопределенные. 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыБизнесСобытий.Ссылка КАК Ссылка,
		|	ВидыБизнесСобытий.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
		|ГДЕ
		|	ВидыБизнесСобытий.ПометкаУдаления = ИСТИНА
		|	И ВидыБизнесСобытий.Предопределенный = ЛОЖЬ";
	
	ТаблицаСтарыхВидовСобытий = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовСобытий = Новый Соответствие;
	ВидыСобытий = Новый Массив;
	
	// затем найдем им соответствие - по Наименованию - среди предопределенных, не-помеченных на удаление
	Для Каждого Строка Из ТаблицаСтарыхВидовСобытий Цикл
		
		СтарыйВидСобытий = Строка.Ссылка;
		НовыйВидСобытий = НайтиНовыйВидСобытий(Строка.Наименование);
		
		Если ЗначениеЗаполнено(НовыйВидСобытий) Тогда
			СоответствиеВидовСобытий[СтарыйВидСобытий] = НовыйВидСобытий;
			ВидыСобытий.Добавить(СтарыйВидСобытий);
		КонецЕсли;	
		
	КонецЦикла;
	
	// заменим старые ссылки на новые - в ПроизошедшиеБизнесСобытия
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Ссылка КАК Ссылка,
		|	ПроизошедшиеБизнесСобытия.ВидСобытия КАК ВидСобытия
		|ИЗ
		|	Справочник.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.ВидСобытия В(&ВидыСобытий)";
	Запрос.УстановитьПараметр("ВидыСобытий", ВидыСобытий);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СобытияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СобытияОбъект.ВидСобытия = СоответствиеВидовСобытий[Выборка.ВидСобытия];
		СобытияОбъект.Записать();
		
	КонецЦикла;	
	
	// заменим старые ссылки на новые - в ПравилаАвтоматическогоЗапускаБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия КАК ВидБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК КлассИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ОрганизацияИсточникаБизнесСобытия КАК ОрганизацияИсточникаБизнесСобытия,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия В(&ВидыСобытий)";
	Запрос.УстановитьПараметр("ВидыСобытий", ВидыСобытий);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БизнесСобытияВызовСервера.УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
			Выборка.ВидБизнесСобытия, 
			Выборка.ШаблонБизнесПроцесса,
			Выборка.КлассИсточникаБизнесСобытия, 
			Выборка.ОрганизацияИсточникаБизнесСобытия);
			
		БизнесСобытияВызовСервера.СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(
			СоответствиеВидовСобытий[Выборка.ВидБизнесСобытия], 
			Выборка.ШаблонБизнесПроцесса,
			Выборка.КлассИсточникаБизнесСобытия, 
			Неопределено, 
			Выборка.ОрганизацияИсточникаБизнесСобытия);
			
	КонецЦикла;	
	
КонецПроцедуры	

Функция НайтиНовыйВидСобытий(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыБизнесСобытий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыБизнесСобытий КАК ВидыБизнесСобытий
		|ГДЕ
		|	ВидыБизнесСобытий.ПометкаУдаления = ЛОЖЬ
		|	И ВидыБизнесСобытий.Предопределенный = ИСТИНА
		|	И ВидыБизнесСобытий.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", Наименование);	
	
	ТаблицаВидов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВидов.Количество() = 1 Тогда
		Возврат ТаблицаВидов[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Функция ПолучитьПредставлениеСпискаЗначенийДляУсловия(ВидУсловия, СписокЗначений)
	
	Представление = "";
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат Представление;
	КонецЕсли;

	Если ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ТемаСодержитУказанныеСлова")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ПолученоОт")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.Кому")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ИмеетВажность") 
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтмеченоФлагом")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ХранитсяВПапке")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКУчетнойЗаписи")
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ОтноситсяКПроекту") 
		ИЛИ ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.КомментарийСодержитСлова") Тогда
		
		Для Каждого ЭлементСписка Из СписокЗначений Цикл
			СтрокаДляДобавления = Строка(ЭлементСписка.Значение);
			Если ЭлементСписка.Значение = "МоиПапки" Тогда
				СтрокаДляДобавления = НСтр("ru = 'Мои папки'");
			ИначеЕсли ЭлементСписка.Значение = "МоиУчетныеЗаписи" Тогда
				СтрокаДляДобавления = НСтр("ru = 'Мои учетные записи'");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Представление) Тогда	
				Представление = СтрокаДляДобавления;
			Иначе
				Представление = Представление + ";" + СтрокаДляДобавления;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидУсловия = ПредопределенноеЗначение("Перечисление.ВидыУсловийПоискаПисем.ЗаПериод") Тогда	
		
		Если СписокЗначений.Количество() = 2 Тогда
			ДатаПосле = СписокЗначений[0].Значение;
			ДатаДо = СписокЗначений[1].Значение;
			
			Если ЗначениеЗаполнено(ДатаПосле) Тогда
			Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'С %1'"),
				Формат(ДатаПосле, "ДЛФ=D"));
			Конецесли;
			
			Если ЗначениеЗаполнено(ДатаДо) Тогда
				Если ЗначениеЗаполнено(Представление) Тогда
					Представление = Представление + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = ' и по %1'"),
							Формат(ДатаДо, "ДЛФ=D"));
				Иначе
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По %1'"),
						Формат(ДатаДо, "ДЛФ=D"));	
				КонецЕсли;
			Конецесли;
		КонецЕсли;
	Иначе
		Представление = Строка(СписокЗначений[0].Значение);
	КонецЕсли;

	Возврат Представление;
	
КонецФункции

Функция ЗаполнитьУчастниковНастройкиПоСостоянию(НастройкаОбъект, Роль)
	
	НастройкаОбъект.ИспользоватьДля.Очистить();
	
	Если Роль = "Пользователь" Тогда 
		
		НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
		НоваяСтрока.Участник = Справочники.ГруппыПользователей.ВсеПользователи;
	
	ИначеЕсли Роль = "Делопроизводитель" Тогда 
		
		Если НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВходящиеДокументы Тогда 
			РольДелопроизводитель = "Роль.ДобавлениеИзменениеВходящихДокументов";
		ИначеЕсли НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ИсходящиеДокументы Тогда 
			РольДелопроизводитель = "Роль.РегистрацияИсходящихДокументов";
		ИначеЕсли НастройкаОбъект.ТипДокумента = Перечисления.ТипыОбъектов.ВнутренниеДокументы Тогда 	
			РольДелопроизводитель = "Роль.РегистрацияВнутреннихДокументов";
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	НЕ ГруппыДоступа.ПометкаУдаления
		|	И ГруппыДоступа.Профиль В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПрофилиГруппДоступаРоли.Ссылка
		|			ИЗ
		|				Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|			ГДЕ
		|				ПрофилиГруппДоступаРоли.Роль = &Роль
		|				И НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Роль", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РольДелопроизводитель));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = НастройкаОбъект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Выборка.Ссылка;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецФункции	

Процедура ЗаполнитьПредставлениеВПерепискеСРангом() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	СведенияОПользователях.Ранг КАК Ранг
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО (СведенияОПользователях.Пользователь = Пользователи.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
		
	ТаблицыПользователей = Запрос.Выполнить().Выгрузить();	
	
	Для Каждого Строка Из ТаблицыПользователей Цикл
		
		ПользовательОбъект = Строка.Ссылка.ПолучитьОбъект();
		
		СтрокаРанга = ПользователиДокументооборот.ПолучитьСтрокуРанга(Строка.Ранг);
		
		ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.ПредставлениеВПереписке;
		Если ПустаяСтрока(ПользовательОбъект.ПредставлениеВПерепискеСРангом) Тогда
			ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.Наименование;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(СтрокаРанга) Тогда
			ПользовательОбъект.ПредставлениеВПерепискеСРангом = ПользовательОбъект.ПредставлениеВПерепискеСРангом + " " + СтрокаРанга;
		КонецЕсли;	
		 
		ПользовательОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеДескрипторы() Экспорт 
	
	// удаление при обновлении ПРОФ дескрипторов регистра СостоянияДокументов
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СостоянияДокументов");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ИсторияСобытийЗадач");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СведенияОТемахОбсуждений");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ИсторияСостоянийДокументов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ТекущиеСостоянияДокументов");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СостоянияМероприятий");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ИсторияСостоянийМероприятий");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.УчастникиМероприятия");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СвязиДокументов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ДополнительныеСведения");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СостоянияДелХраненияДокументов");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.НастройкаПовторенияБизнесПроцессов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ВизыСогласования");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ОтветственныеЛицаОрганизаций");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ОбщиеРеквизитыДокументов");
	
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ДанныеБизнесПроцессов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ВерсииОбъектов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.НастройкаШаблоновБизнесПроцессов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ЖурналПередачиДокументов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ИсторияСроковДействияДокументов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.КатегорииОбъектов");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач");
	Справочники.ДескрипторыДоступаРегистров.УдалитьВсеДескрипторыРегистра("РегистрСведений.СведенияОбАдресатах");
	
КонецПроцедуры	

Процедура ВыполнитьКоррекциюЗадачИПроцессовПослеПереходаСПРОФНаКОРП()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен;
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка)";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ПроцессОбъект.Записать();
		
	КонецЦикла;
	
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

Процедура ПеренестиНастройку(
		ИмяПользователя,
		СтарыйКлюч,
		СтароеИмяНастройки,
		НовыйКлюч,
		НовоеИмяНастройки,
		Соответствие = Неопределено)
	
	ТекущееЗначение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			НовыйКлюч,
			НовоеИмяНастройки,,,
			ИмяПользователя);
	
	СтароеЗначение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			СтарыйКлюч,
			СтароеИмяНастройки,,,
			ИмяПользователя);
	
	Если Соответствие <> Неопределено Тогда
		СтароеЗначение = Соответствие.Получить(СтароеЗначение);
	КонецЕсли;
	
	Если ТекущееЗначение = Неопределено
		И СтароеЗначение <> Неопределено Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			НовыйКлюч,
			НовоеИмяНастройки,
			СтароеЗначение,,
			ИмяПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиКонтактыИзКонтактыПользователейВГруппыКонтактовПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьКонтактыПользователей.Контакт,
		|	УдалитьКонтактыПользователей.КонтактнаяИнформация,
		|	УдалитьКонтактыПользователей.Пользователь,
		|	УдалитьКонтактыПользователей.Тип,
		|	УдалитьКонтактыПользователей.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.УдалитьКонтактыПользователей КАК УдалитьКонтактыПользователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		
		Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(
			Выборка.Контакт, Выборка.КонтактнаяИнформация, , Выборка.Пользователь);
		
	КонецЦикла;		
	
КонецПроцедуры	

Процедура ПеренестиНастройкиУведомленияВидаСобытия(СтарыйВидСобытия, НовыйВидСобытия)
	
	// РегистрСведений ОбработанныеУведомления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработанныеУведомления.ВидСобытия,
	|	ОбработанныеУведомления.ОбъектУведомления,
	|	ОбработанныеУведомления.Пользователь
	|ИЗ
	|	РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
	|ГДЕ
	|	ОбработанныеУведомления.ВидСобытия = &ВидСобытия";
	Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОбработанныеУведомления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидСобытия = Выборка.ВидСобытия;
		МенеджерЗаписи.ОбъектУведомления = Выборка.ОбъектУведомления;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ВидСобытия = НовыйВидСобытия;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// РегистрСведений ОчередьУведомлений
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьУведомлений.Объект,
	|	ОчередьУведомлений.Пользователь,
	|	ОчередьУведомлений.СпособУведомления,
	|	ОчередьУведомлений.ВидСобытия,
	|	ОчередьУведомлений.ОбъектПодписки
	|ИЗ
	|	РегистрСведений.ОчередьУведомлений КАК ОчередьУведомлений
	|ГДЕ
	|	ОчередьУведомлений.ВидСобытия = &ВидСобытия";
	Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ОчередьУведомлений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Выборка.Объект;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.СпособУведомления = Выборка.СпособУведомления;
		МенеджерЗаписи.ВидСобытия = Выборка.ВидСобытия;
		МенеджерЗаписи.ОбъектПодписки = Выборка.ОбъектПодписки;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ВидСобытия = НовыйВидСобытия;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// РегистрСведений ПодпискиНаУведомления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодпискиНаУведомления.ВидСобытия,
	|	ПодпискиНаУведомления.ОбъектПодписки,
	|	ПодпискиНаУведомления.Пользователь,
	|	ПодпискиНаУведомления.СпособУведомления
	|ИЗ
	|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
	|ГДЕ
	|	ПодпискиНаУведомления.ВидСобытия = &ВидСобытия";
	Запрос.УстановитьПараметр("ВидСобытия", СтарыйВидСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ПодпискиНаУведомления.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидСобытия = Выборка.ВидСобытия;
		МенеджерЗаписи.ОбъектПодписки = Выборка.ОбъектПодписки;
		МенеджерЗаписи.Пользователь = Выборка.Пользователь;
		МенеджерЗаписи.СпособУведомления = Выборка.СпособУведомления;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ВидСобытия = НовыйВидСобытия;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// РегистрСведений ПодпискиНаБизнесСобытия
	БизнесСобытияВызовСервера.УдалитьПодпискуНаБизнесСобытия(СтарыйВидСобытия, 
				Перечисления.ПотребителиБизнесСобытий.РассылкаУведомлений);
	
КонецПроцедуры

Процедура СоздатьВидБизнесСобытий(ВидСобытия, ПолноеНаименование)
	
	Элемент = ВидСобытия.ПолучитьОбъект();
	
	Элемент.Наименование = ПолноеНаименование;
	Элемент.ДатаСоздания = ТекущаяДатаСеанса();
	Элемент.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Элемент.Записать();
	
КонецПроцедуры	

Процедура СоздатьВалюту(Код, ПараметрыПрописиНаРусском, КлассификаторТаблица)

	СтрокаТаблицы = КлассификаторТаблица.Найти(Код, "Code");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СправочникСсылка = Справочники.Валюты.НайтиПоКоду(Код);
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		КонецЕсли;
		
		СправочникОбъект.Код = Код;
		СправочникОбъект.Наименование = СтрокаТаблицы.CodeSymbol;
		СправочникОбъект.НаименованиеПолное = СтрокаТаблицы.Name;
		СправочникОбъект.ЗагружаетсяИзИнтернета = СтрокаТаблицы.RBCLoading;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
        СправочникОбъект.Записать();

	КонецЕсли;

КонецПроцедуры // СоздатьВалюту()

Процедура СоздатьГруппуДоступа(ИмяГруппы, ВключатьГруппуВсеПользователи)
	
	Если Справочники.ГруппыДоступа.НайтиПоНаименованию(ИмяГруппы).Пустая() Тогда 
		
		Группа = Справочники.ГруппыДоступа.СоздатьЭлемент();
		Группа.Наименование = ИмяГруппы;
		Группа.Профиль = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(ИмяГруппы);
		
		Если ВключатьГруппуВсеПользователи Тогда
			Строка = Группа.Пользователи.Добавить();
			Строка.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
		КонецЕсли;
		
		// Добавим виды доступа
		Для каждого СтрокаТЧ Из Группа.Профиль.ВидыДоступа Цикл
			НоваяСтрока = Группа.ВидыДоступа.Добавить();
			НоваяСтрока.ВидДоступа      = СтрокаТЧ.ВидДоступа;
			Если НоваяСтрока.ВидДоступа <> ПланыВидовХарактеристик.ВидыДоступа.Пользователи Тогда
				НоваяСтрока.ДоступРазрешен  = Истина;
			Иначе	
				НоваяСтрока.ДоступРазрешен  = Ложь;
			КонецЕсли;	
		КонецЦикла;
		
		Группа.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция СоздатьВидПроекта(Наименование, АвтоматическиВестиСостав)
	
	ВидПроектаОбъект = Справочники.ВидыПроектов.СоздатьЭлемент();
	ВидПроектаОбъект.Наименование = Наименование;
	ВидПроектаОбъект.АвтоматическиВестиСоставУчастниковРабочейГруппы = АвтоматическиВестиСостав;
	ВидПроектаОбъект.Записать();
	Возврат ВидПроектаОбъект.Ссылка;

КонецФункции

// Обновление предопределенных элементов
// Справочник.ПрофилиГруппДоступа.Администратор,
// Справочник.ГруппыДоступа.Администраторы
// при переходе на версию БСП 1.0.6.2
//
Процедура НастроитьПрофильИГруппуДоступаАдминистраторы() Экспорт
	
	ГруппаДоступа = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
	ГруппаДоступа.Профиль = Справочники.ПрофилиГруппДоступа.Администратор;
	Администратор = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
	Если Администратор <> Неопределено И Администратор <> Справочники.Пользователи.ПустаяСсылка() Тогда
		СтрокаТЧ = ГруппаДоступа.Пользователи.Добавить();
		СтрокаТЧ.Пользователь = Администратор;
	КонецЕсли;	
	ГруппаДоступа.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПраваПредопределенных() Экспорт
	
	// Шаблоны файлов
	Шаблоны = Справочники.ПапкиФайлов.Шаблоны;
	ТаблицаНастроек = РегистрыСведений.НастройкиПравОбъектов.Прочитать(Шаблоны).Настройки;
	Если ТаблицаНастроек.Количество() = 0 Тогда
		Настройка = ТаблицаНастроек.Добавить();
		Настройка.ВладелецНастройки = Шаблоны;
		Настройка.НаследованиеРазрешено = Истина;
		Настройка.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
		Настройка.ЧтениеПапокИФайлов = Истина;
		РегистрыСведений.НастройкиПравОбъектов.Записать(Шаблоны, ТаблицаНастроек, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Перенос предметов процессов и задач из реквизита "УдалитьПредмет" в табличные части
// при переходе на версию 1.3.1.1
//
Процедура ПеренестиПредметыПроцессовИЗадачВТабличныеЧасти()
	
	// Отключение механизма прав для увеличения быстродействия
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.УдалитьПредмет КАК Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
		|	И ЗадачаИсполнителяПредметы.Ссылка ЕСТЬ NULL ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Строка = ЗадачаОбъект.Предметы.Добавить();
		Строка.РольПредмета = Перечисления.РолиПредметов.Основной;
		Строка.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Выборка.Предмет);
		Строка.Предмет = Выборка.Предмет;
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
	// Перенос предметов процессов в табличные части
	Запрос = Новый Запрос;
	
	Для Каждого Процесс Из Метаданные.БизнесПроцессы Цикл
		ИмяПроцесса = Процесс.Имя;
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст),"",
			 "
			 |
			 |ОБЪЕДИНИТЬ ВСЕ
			 |")
			+ "ВЫБРАТЬ
			   |	Процесс.Ссылка,
			   |	Процесс.УдалитьПредмет КАК Предмет
			   |ИЗ
			   |	БизнесПроцесс.%ИмяПроцесса% КАК Процесс
			   |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.%ИмяПроцесса%.Предметы КАК ПроцессПредметы
			   |		ПО ПроцессПредметы.Ссылка = Процесс.Ссылка
			   |ГДЕ
			   |	Процесс.УдалитьПредмет <> НЕОПРЕДЕЛЕНО
			   |	И ПроцессПредметы.Ссылка ЕСТЬ NULL";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%ИмяПроцесса%", ИмяПроцесса);
	КонецЦикла;
			   
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеДействий = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Выборка.Предмет);
		
		ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Строка = ПроцессОбъект.Предметы.Добавить();
		Строка.РольПредмета = Перечисления.РолиПредметов.Основной;
		Строка.ИмяПредмета = ИмяПредмета;
		Строка.Предмет = Выборка.Предмет;
		ДействияПроцесса = СоответствиеДействий.Получить(ТипЗнч(Выборка.Ссылка));
		
		Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Выборка.Ссылка) Тогда
			Если ДействияПроцесса = Неопределено Тогда
				Если ТипЗнч(Выборка.Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента") 
					Или ТипЗнч(Выборка.Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") 
					Или ТипЗнч(Выборка.Ссылка) = Тип("БизнесПроцессСсылка.ОбработкаИсходящегоДокумента") Тогда
					
					ДействияПроцесса = Мультипредметность.ПолучитьВложенныеПроцессы(Выборка.Ссылка);
				Иначе
					ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(Выборка.Ссылка);
				КонецЕсли;
				СоответствиеДействий.Вставить(ТипЗнч(Выборка.Ссылка), ДействияПроцесса);
			КонецЕсли;
				
			Для Каждого Действие Из ДействияПроцесса Цикл
				СтрокаЗадачи = ПроцессОбъект.ПредметыЗадач.Добавить();
				СтрокаЗадачи.ТочкаМаршрута = Действие;
				СтрокаЗадачи.ИмяПредмета = Строка.ИмяПредмета;
			КонецЦикла;
		Иначе
			ДействияПроцесса = Мультипредметность.ПолучитьДействияКомплексногоПроцесса(ПроцессОбъект);
			Для Каждого Действие Из ДействияПроцесса Цикл
				СтрокаЗадачи = ПроцессОбъект.ПредметыЗадач.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗадачи, Действие);
				СтрокаЗадачи.ИмяПредмета = Строка.ИмяПредмета;
			КонецЦикла;
			
			Для Каждого Строка Из ПроцессОбъект.ПредшественникиЭтапов Цикл
				Если ЗначениеЗаполнено(Строка.УсловиеПерехода) Тогда
					Строка.ИмяПредметаУсловия = ИмяПредмета;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ПроцессОбъект.ОбменДанными.Загрузка = Истина;
		ПроцессОбъект.Записать();
		
	КонецЦикла;
	
	// Включение механизма прав доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры

// Заполняет предметы, условия и значения автоподстановки в шаблонах процессов
// при переходе на версию 1.3.1.2
//
Процедура ЗаполнитьПредметыШаблоновПроцессов()
	
	// Отключение механизма прав для увеличения быстродействия
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Ложь);
	
	ИмяПредметаСтрокойПоУмолчанию = НСтр("ru='Предмет'");
	ИмяПредметаПоУмолчанию = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредмета(ИмяПредметаСтрокойПоУмолчанию);
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить("ШаблоныИсполнения");
	ТипыШаблонов.Добавить("ШаблоныОзнакомления");
	ТипыШаблонов.Добавить("ШаблоныПоручения");
	ТипыШаблонов.Добавить("ШаблоныПриглашения");
	ТипыШаблонов.Добавить("ШаблоныРассмотрения");
	ТипыШаблонов.Добавить("ШаблоныРегистрации");
	ТипыШаблонов.Добавить("ШаблоныСогласования");
	ТипыШаблонов.Добавить("ШаблоныУтверждения");
	ТипыШаблонов.Добавить("ШаблоныКомплексныхБизнесПроцессов");
	
	ЗначенияАвтоподстановки = Новый Массив;
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Автор документа'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Непосредственный руководитель автора документа'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все руководители автора документа'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все подчиненные автора документа'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Все коллеги автора документа'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Руководитель организации'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Ответственный за документ'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Участники мероприятия'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Председатель мероприятия'"));
	ЗначенияАвтоподстановки.Добавить(НСтр("ru='Секретарь мероприятия'"));
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	Для Каждого ТипШаблона Из ТипыШаблонов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
		|ОБЪЕДИНИТЬ ВСЕ")
		+ "
		|ВЫБРАТЬ
		|	Шаблон.Ссылка,
		|	Шаблон.ВладелецШаблона,
		|	Шаблон.ШаблонВКомплексномПроцессе
		|ИЗ
		|	Справочник.%Таблица% КАК Шаблон
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%Таблица%.Предметы КАК ПредметыШаблона
		|		ПО Шаблон.Ссылка = ПредметыШаблона.Ссылка
		|ГДЕ
		|	ПредметыШаблона.Ссылка ЕСТЬ NULL
		|	И НЕ Шаблон.ЭтоГруппа";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", ТипШаблона);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Исполнитель,Проверяющий,Контролер");
		
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("Исполнитель", "Исполнители");
		
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДействий = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Записывать = Ложь;
		
		Если ТипЗнч(Выборка.ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Выборка.ВладелецШаблона, "УдалитьПредмет");
			Если ЗначениеЗаполнено(Предмет) Тогда
				ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(Предмет);
				ИмяПредметаСтрокой = Строка(ИмяПредмета);
				Записывать = Истина;
			Иначе
				ИмяПредмета = ИмяПредметаПоУмолчанию;
				ИмяПредметаСтрокой = ИмяПредметаСтрокойПоУмолчанию;
			КонецЕсли;
		Иначе
			ИмяПредмета = ИмяПредметаПоУмолчанию;
			ИмяПредметаСтрокой = ИмяПредметаСтрокойПоУмолчанию;
		КонецЕсли;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СтрокаПредмета = ШаблонОбъект.Предметы.Добавить();
		СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
		СтрокаПредмета.ИмяПредмета = ИмяПредмета;
		
		ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Выборка.Ссылка);
		ДействияПроцесса = СоответствиеДействий.Получить(ПроцессСсылка);
		Если ДействияПроцесса = Неопределено Тогда
			ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
			СоответствиеДействий.Вставить(ПроцессСсылка, ДействияПроцесса);
		КонецЕсли;
			
		Для Каждого Действие Из ДействияПроцесса Цикл
			СтрокаЗадачи = ШаблонОбъект.ПредметыЗадач.Добавить();
			СтрокаЗадачи.ТочкаМаршрута = Действие;
			СтрокаЗадачи.ИмяПредмета = ИмяПредмета;
		КонецЦикла;
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
			Для Каждого Этап Из ШаблонОбъект.Этапы Цикл
				ПроцессЭтапа = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Этап.ШаблонБизнесПроцесса);
				ДействияЭтапа = СоответствиеДействий.Получить(ПроцессЭтапа);
				Если ДействияЭтапа = Неопределено Тогда
					ДействияЭтапа = Мультипредметность.ПолучитьДействияПроцесса(ПроцессЭтапа);
					СоответствиеДействий.Вставить(ПроцессЭтапа, ДействияЭтапа);
				КонецЕсли;
				Для Каждого Подэтап Из ДействияЭтапа Цикл
					СтрокаЗадачи = ШаблонОбъект.ПредметыЗадач.Добавить();
					СтрокаЗадачи.ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
					СтрокаЗадачи.ШаблонБизнесПроцесса = Этап.ШаблонБизнесПроцесса;
					СтрокаЗадачи.ТочкаМаршрута = Подэтап;
					СтрокаЗадачи.ИмяПредмета = ИмяПредмета;
					Записывать = Истина;
				КонецЦикла;
			КонецЦикла;
			Если ШаблонОбъект.ПредметыЗадач.Количество() > 0 И ШаблонОбъект.Предметы.Количество() = 0 Тогда
				СтрокаПредмета = ШаблонОбъект.Предметы.Добавить();
				СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной;
				СтрокаПредмета.ИмяПредмета = ИмяПредмета;
				Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ШаблонМетаданные = Выборка.Ссылка.Метаданные();
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			Если ШаблонМетаданные.Реквизиты.Найти(Реквизит) <> Неопределено Тогда
				Если ТипЗнч(ШаблонОбъект[Реквизит]) = Тип("Строка") И ЗначенияАвтоподстановки.Найти(ШаблонОбъект[Реквизит]) <> Неопределено Тогда
					ШаблонОбъект[Реквизит] = ИмяПредметаСтрокой + "." + ШаблонОбъект[Реквизит];
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого ЭлементСоответствия Из СоответствиеТаблиц Цикл
			Если ШаблонМетаданные.ТабличныеЧасти.Найти(ЭлементСоответствия.Значение) <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект[ЭлементСоответствия.Значение] Цикл
					Если ТипЗнч(Строка[ЭлементСоответствия.Ключ]) = Тип("Строка") 
					   И ЗначенияАвтоподстановки.Найти(Строка[ЭлементСоответствия.Ключ]) <> Неопределено Тогда
						Строка[ЭлементСоответствия.Ключ] = ИмяПредметаСтрокой + "." + Строка[ЭлементСоответствия.Ключ];
						Записывать = Истина;
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЦикла;
		
		Если ШаблонМетаданные.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			Если ШаблонМетаданные.ТабличныеЧасти.Исполнители.Реквизиты.Найти("Условие") <> Неопределено Тогда
				Для Каждого Строка Из ШаблонОбъект.Исполнители Цикл
					Если ЗначениеЗаполнено(Строка.Условие) Тогда
						Строка.ИмяПредметаУсловия = ИмяПредмета;
						Записывать = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ШаблонМетаданные.ТабличныеЧасти.Найти("ПредшественникиЭтапов") <> Неопределено Тогда
			Для Каждого Строка Из ШаблонОбъект.ПредшественникиЭтапов Цикл
				Если ЗначениеЗаполнено(Строка.УсловиеПерехода) Тогда
					Строка.ИмяПредметаУсловия = ИмяПредмета;
					Записывать = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Записывать Тогда
			ШаблонОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Включение механизма прав доступа
	ДокументооборотПраваДоступа.УстановитьИспользованиеПравДоступа(Истина);
	
КонецПроцедуры 

Процедура ЗаполнитьПраваПапкиМероприятий(СсылкаНаПапку)
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
	Если ОписаниеПрав.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ОписаниеПрав.Добавить();
	Строка.ВладелецНастройки = СсылкаНаПапку;
	Строка.ЧтениеПапокИМероприятий = Истина;
	Строка.ДобавлениеПапокИМероприятий = Истина; 
	Строка.ИзменениеПапокИМероприятий = Истина;
	Строка.ИзменениеПапокМероприятий = Неопределено;
	Строка.ПометкаУдаленияПапокИМероприятий = Истина;
	Строка.УправлениеПравами = Неопределено;
	Строка.НаследованиеРазрешено = Истина;
	Строка.НастройкаРодителя = Ложь;
	Строка.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаПапку, ОписаниеПрав, Истина);
	
КонецПроцедуры

Процедура ВключитьМетаданноеВОбластьДелигирования(ПолноеИмяМетаданного, ИдентификаторОбластиДелегирования)
	
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяМетаданного);
	
	ОбластьДелегирования = Справочники.ОбластиДелегированияПрав.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторОбластиДелегирования));
	Если ЗначениеЗаполнено(ОбластьДелегирования) Тогда
		
		ОбластьДелегированияОбъект = ОбластьДелегирования.ПолучитьОбъект();
		НайденнаяСтрока = ОбластьДелегированияОбъект.Состав.Найти(ИдентификаторОбъектаМетаданных, "ОбъектМетаданных");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ОбластьДелегированияОбъект.Состав.Добавить();
			НоваяСтрока.ОбъектМетаданных = ИдентификаторОбъектаМетаданных;
			ОбластьДелегированияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПраваПапкиФорума(СсылкаНаПапку) Экспорт
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(СсылкаНаПапку).Настройки;
	Если ОписаниеПрав.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ОписаниеПрав.Добавить();
	Строка.ВладелецНастройки = СсылкаНаПапку;
	Строка.ЧтениеПапокИТем = Истина;
	Строка.ДобавлениеТемИСообщений = Истина; 
	Строка.ИзменениеТемИСообщений = Неопределено;
	Строка.ИзменениеПапок = Неопределено;
	Строка.ПометкаУдаленияТемИСообщений = Неопределено;
	Строка.УправлениеПравами = Неопределено;
	Строка.НаследованиеРазрешено = Истина;
	Строка.НастройкаРодителя = Ложь;
	Строка.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(СсылкаНаПапку, ОписаниеПрав, Истина);
	
КонецПроцедуры

Процедура УстановитьНастройкиУведомленийПоУмолчанию()
	
	ПодпискаОкончаниеСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента);
	ПодпискаПеренаправлениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
	ПодпискаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	ПодпискаПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
	ПодпискаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	ПодпискаСозданиеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	ИспользоватьВыполнениеЗадачПоПочте = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	ПодпискаВыполнениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	ПодпискаСозданиеСообщения = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения);
	ПодпискаОстановкаИПрерываниеПроцесса = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
	
	СрокПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	СрокПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);
		
	
	ЧастотаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	ЧастотаПриближениеОкончанияСрокаДействия = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента);	
	ЧастотаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ЗакончилсяСрокДействияДокумента,
		ПодпискаОкончаниеСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
		ПодпискаПеренаправлениеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		ПодпискаПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		ПодпискаПриближениеОкончанияСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		ПодпискаПросроченаЗадача);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ПодпискаСозданиеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи,
		ИспользоватьВыполнениеЗадачПоПочте);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи,
		ПодпискаВыполнениеЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеСообщения,
		ПодпискаСозданиеСообщения);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса,
		ПодпискаОстановкаИПрерываниеПроцесса);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		СрокПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		СрокПриближениеОкончанияСрокаДействия);
	
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
		ЧастотаПодошелСрокЗадачи);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокДействияДокумента,
		ЧастотаПриближениеОкончанияСрокаДействия);
	РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача,
		ЧастотаПросроченаЗадача);
	
КонецПроцедуры

// Обновляет права справочника и файлов
Процедура ОбновитьПраваСправочникаПоИмениОбъекта(ПолноеИмяОбъекта)
	
	ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта(ПолноеИмяОбъекта);
	ОбновитьПраваДескрипторовОбъектов(ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ОбновитьПраваДескрипторовОбъектов(ПолноеИмяОбъекта)
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных";

	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", ИдентификаторОбъектаМетаданных);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Выполняет начальное заполнение справочника "Ключевые операции"
//
// Параметры:
//	Нет
// Возвращаемое значение:
//	Нет
//
Функция ВыполнитьНачальноеЗаполнениеСпискаКлючевыхОпераций() Экспорт
	
	СписокКлючевыхОпераций = Новый Структура;
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыЗаписать",		"Внутренние документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыОтборПоКатегориям", "Внутренние документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыОтборПоПапке",	"Внутренние документы Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыВыполнениеКомандыСоздать",		"Внутренние документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ВнутренниеДокументыОткрытиеФормыФормаСпискаСПапками", "Внутренние документы Открытие формы: Список с папками");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыЗаписать",		"Входящие документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыОтборПоКатегориям","Входящие документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыВыполнениеКомандыСоздать",		"Входящие документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыОткрытиеФормыОбращенияГраждан",	"Входящие документы Открытие формы: Список обращений граждан");
	СписокКлючевыхОпераций.Вставить("ВходящиеДокументыОткрытиеФормыФормаСписка",		"Входящие документы Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыЗадачиПодчиненных",	"Задача исполнителя Открытие формы: Задачи подчиненных");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыМоиЗадачи",			"Задача исполнителя Открытие формы: Мои задачи");
	СписокКлючевыхОпераций.Вставить("ЗадачаИсполнителяОткрытиеФормыФормаСписка",		"Задача исполнителя Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыИсполнено",				"Исполнение Выполнение команды: Исполнено");
	СписокКлючевыхОпераций.Вставить("ИсполнениеВыполнениеКомандыСтартовать",			"Исполнение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыЗаписать",		"Исходящие документы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыОтборПоКатегориям","Исходящие документы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыВыполнениеКомандыСоздать",		"Исходящие документы Выполнение команды: Создать");
	СписокКлючевыхОпераций.Вставить("ИсходящиеДокументыОткрытиеФормыФормаСписка",		"Исходящие документы Открытие формы: Форма списка");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыОзнакомился",			"Ознакомление Выполнение команды: Ознакомился");
	СписокКлючевыхОпераций.Вставить("ОзнакомлениеВыполнениеКомандыСтартовать",			"Ознакомление Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПолнотекстовыйПоискВыполнениеКомандыНайти",		"Полнотекстовый поиск Выполнение команды: Найти");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыВыполнено",				"Поручение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("ПоручениеВыполнениеКомандыСтартовать",				"Поручение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыНеПринято",			"Приглашение Выполнение команды: Не принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыПринято",				"Приглашение Выполнение команды: Принято");
	СписокКлючевыхОпераций.Вставить("ПриглашениеВыполнениеКомандыСтартовать",			"Приглашение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыВыполнено",			"Рассмотрение Выполнение команды: Выполнено");
	СписокКлючевыхОпераций.Вставить("РассмотрениеВыполнениеКомандыСтартовать",			"Рассмотрение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыЗарегистрировано",		"Регистрация Выполнение команды: Зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыНеЗарегистрировано",	"Регистрация Выполнение команды: Не зарегистрировано");
	СписокКлючевыхОпераций.Вставить("РегистрацияВыполнениеКомандыСтартовать",			"Регистрация Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыНеСогласовано",		"Согласование Выполнение команды: Не согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласовано",			"Согласование Выполнение команды: Согласовано");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСогласованоСЗамечаниями","Согласование Выполнение команды: Согласовано с замечаниями");
	СписокКлючевыхОпераций.Вставить("СогласованиеВыполнениеКомандыСтартовать",			"Согласование Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыНеУтверждено",			"Утверждение Выполнение команды: Не утверждено");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыСтартовать",			"Утверждение Выполнение команды: Стартовать");
	СписокКлючевыхОпераций.Вставить("УтверждениеВыполнениеКомандыУтверждено",			"Утверждение Выполнение команды: Утверждено");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыЗаписать",					"Файлы Выполнение команды: Записать");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоКатегориям",			"Файлы Выполнение команды: Отбор по категориям");
	СписокКлючевыхОпераций.Вставить("ФайлыВыполнениеКомандыОтборПоПапке",				"Файлы Выполнение команды: Отбор по папке");
	СписокКлючевыхОпераций.Вставить("ФайлыОткрытиеФормыХранилищеФайлов",				"Файлы Открытие формы: Хранилище файлов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(КлючевыеОперации.Приоритет) КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Приоритет) Тогда
		Приоритет = Выборка.Приоритет + 1;
	Иначе
		Приоритет = 1;
	КонецЕсли;
	
	Для Каждого КлючеваяОперация Из СписокКлючевыхОпераций Цикл
		КлючеваяОперацияСсылка = ОценкаПроизводительностиВызовСервераПовтИсп.ПолучитьКлючевуюОперациюПоИмени(КлючеваяОперация.Ключ);
		КлючеваяОперацияОбъект = КлючеваяОперацияСсылка.ПолучитьОбъект();
		КлючеваяОперацияОбъект.Наименование = КлючеваяОперация.Значение;
		Если КлючеваяОперацияОбъект.ЦелевоеВремя = 0 Тогда
			КлючеваяОперацияОбъект.ЦелевоеВремя = 1;
		КонецЕсли;
		Если КлючеваяОперацияОбъект.Приоритет = 0 Тогда
			КлючеваяОперацияОбъект.Приоритет = Приоритет;
			Приоритет = Приоритет + 1;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючеваяОперацияОбъект.МинимальноДопустимыйУровень) Тогда
			КлючеваяОперацияОбъект.МинимальноДопустимыйУровень = Перечисления.УровниПроизводительности.Хорошо;
		КонецЕсли;
		КлючеваяОперацияОбъект.Записать();
		
	КонецЦикла;
	
КонецФункции

// Заполняет уникальные идентификаторы исполнителей процессов Исполнения.
//
Процедура ЗаполнитьУникальныеИдентификаторыИсполнителейПроцессовИсполнения(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИсполнениеИсполнители.Ссылка КАК Ссылка,
		|	ИсполнениеИсполнители.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.Исполнители КАК ИсполнениеИсполнители
		|ГДЕ
		|	ИсполнениеИсполнители.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсполнениеРезультатыИсполнения.Ссылка,
		|	ИсполнениеРезультатыИсполнения.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыИсполнения КАК ИсполнениеРезультатыИсполнения
		|ГДЕ
		|	ИсполнениеРезультатыИсполнения.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИсполнениеРезультатыПроверки.Ссылка,
		|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
		|ГДЕ
		|	ИсполнениеРезультатыПроверки.ИдентификаторИсполнителя = &ИдентификаторИсполнителя
		|ИТОГИ ПО
		|	Ссылка");
		
	УникальныйИдентификаторПустой = УникальныйИдентификаторПустой();
	
	Запрос.УстановитьПараметр("ИдентификаторИсполнителя", УникальныйИдентификаторПустой);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПроцессОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПроцессОбъект.ОбменДанными.Загрузка = Истина;
			ВыборкаПодчиненныхЗадач = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПодчиненныхЗадач.Следующий() Цикл
				УникальныйИдентификаторЗадачи = Новый УникальныйИдентификатор;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЗадачаИсполнителя", ВыборкаПодчиненныхЗадач.ЗадачаИсполнителя);
				
				НайденныеСтроки = ПроцессОбъект.Исполнители.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
				НайденныеСтроки = ПроцессОбъект.РезультатыИсполнения.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
				НайденныеСтроки = ПроцессОбъект.РезультатыПроверки.НайтиСтроки(СтруктураОтбора);
				Для Каждого Стр Из НайденныеСтроки Цикл
					Стр.ИдентификаторИсполнителя = УникальныйИдентификаторЗадачи;
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого Стр Из ПроцессОбъект.Исполнители Цикл
				Если Стр.ИдентификаторИсполнителя = УникальныйИдентификаторПустой Тогда
					Стр.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
				КонецЕсли;
			КонецЦикла;
			
			ПроцессОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет регистр сведений ПредметыПроцессов и ресурсы НомерИтерации,
// ОсновнойПредмет, ДатаНачала записей в регистре сведений ДанныеБизнесПроцессов
//
Процедура ЗаполнениеДанныхПоБизнесПроцессам_1_4_9_2(Параметры) Экспорт
	
	КлючевоеСловоВЫБРАТЬ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|";
	КлючевоеСловоПОМЕСТИТЬ = "
		|ПОМЕСТИТЬ ПредметыПроцессов";
	КлючевоеСловоОБЪЕДИНИТЬ = "";
	
	ТекстЗапроса = "";
	
	МетаданныеПроцессов = Метаданные.БизнесПроцессы;
	
	Для Каждого МетаданныеПроцесса Из МетаданныеПроцессов Цикл
		
		ТекстЗапроса = ТекстЗапроса
			+ КлючевоеСловоОБЪЕДИНИТЬ
			+ КлючевоеСловоВЫБРАТЬ
			+ 
			"	Предметы.Ссылка,
			|	Предметы.НомерСтроки,
			|	Предметы.РольПредмета,
			|	Предметы.Предмет"
			+ КлючевоеСловоПОМЕСТИТЬ + "
			|ИЗ
			|	БизнесПроцесс." + МетаданныеПроцесса.Имя + ".Предметы КАК Предметы";
		
		КлючевоеСловоВЫБРАТЬ = "ВЫБРАТЬ
			|";
		КлючевоеСловоОБЪЕДИНИТЬ = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КлючевоеСловоПОМЕСТИТЬ = "";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
		+ "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен КАК Завершен,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.НомерИтерации КАК НомерИтерации,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.ДатаНачала КАК ДатаНачала,
		|	ПредметыПроцессов.НомерСтроки,
		|	ПредметыПроцессов.Предмет,
		|	ПредметыПроцессов.РольПредмета
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыПроцессов КАК ПредметыПроцессов
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПредметыПроцессов.Ссылка
		|ГДЕ
		|	ДанныеБизнесПроцессов.ОсновнойПредмет = НЕОПРЕДЕЛЕНО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредметыПроцессов.НомерСтроки
		|ИТОГИ ПО
		|	БизнесПроцесс";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПредметов = Выборка.Выбрать();
		ВыборкаПредметов.Следующий();
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", ВыборкаПредметов.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = ВыборкаПредметов.БизнесПроцесс;
			Запись.Завершен = ВыборкаПредметов.Завершен;
			Запись.Прочитать();
			Запись.НомерИтерации = ВыборкаПредметов.НомерИтерации;
			Запись.ДатаНачала = ВыборкаПредметов.ДатаНачала;
			
			ОсновныеПредметы = Новый Массив;
			ВсеПредметы = Новый Массив;
			
			ОбходНеЗавершен = Истина;
			
			Пока ОбходНеЗавершен Цикл
				
				Если ЗначениеЗаполнено(ВыборкаПредметов.НомерСтроки) Тогда
					Если ВыборкаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
						ОсновныеПредметы.Добавить(ВыборкаПредметов.Предмет);
					КонецЕсли;
					ВсеПредметы.Добавить(ВыборкаПредметов.Предмет);
				КонецЕсли;
				
				ОбходНеЗавершен = ВыборкаПредметов.Следующий();
				
			КонецЦикла;
			
			КоличествоОсновныхПредметов = ОсновныеПредметы.Количество();
			ОбщееКоличествоПредметов = ВсеПредметы.Количество();
			
			КоличествоПредметов = 0;
			
			Если КоличествоОсновныхПредметов = 1 Тогда
				Запись.ОсновнойПредмет = ОсновныеПредметы[0];
				КоличествоПредметов = 1;
			ИначеЕсли КоличествоОсновныхПредметов > 0 Тогда
				КоличествоПредметов = КоличествоОсновныхПредметов;
			ИначеЕсли ОбщееКоличествоПредметов = 1 Тогда
				Запись.ОсновнойПредмет = ВсеПредметы[0];
				КоличествоПредметов = 1;
			ИначеЕсли ОбщееКоличествоПредметов > 0 Тогда
				КоличествоПредметов = ОбщееКоличествоПредметов;
			КонецЕсли;
			
			Если КоличествоПредметов > 1 Тогда
				ПодписьПредмет = ОбщегоНазначенияДокументооборотКлиентСервер.ПредметИсчисленияПрописью(
					КоличествоПредметов,
					НСтр("ru = 'предмет'") + "," + НСтр("ru = 'предмета'") + "," + НСтр("ru = 'предметов'"));
				
				Запись.ОсновнойПредмет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"),
					КоличествоПредметов,
					ПодписьПредмет);
			ИначеЕсли КоличествоПредметов = 0 Или Не ЗначениеЗаполнено(Запись.ОсновнойПредмет) Тогда
				Запись.ОсновнойПредмет = НСтр("ru = 'Нет предметов'");
			КонецЕсли;
			
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеНомераВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.БизнесПроцесс.Номер КАК НовыйНомер
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Номер <> ДанныеБизнесПроцессов.БизнесПроцесс.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Выборка.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			Запись.Номер = Выборка.НовыйНомер;
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеСрокаИсполненияВРегистреДанныеБизнесПроцессов(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен КАК Завершен,
		|	Согласование.СрокИсполненияДатой КАК СрокИсполнения
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Согласование КАК Согласование
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = Согласование.Ссылка
		|			И ДанныеБизнесПроцессов.Завершен = Согласование.Завершен
		|ГДЕ
		|	ДанныеБизнесПроцессов.СрокИсполнения <> Согласование.СрокИсполненияДатой";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеБизнесПроцессов");
			ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Выборка.БизнесПроцесс);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запись = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьМенеджерЗаписи();
			Запись.БизнесПроцесс = Выборка.БизнесПроцесс;
			Запись.Завершен = Выборка.Завершен;
			Запись.Прочитать();
			Запись.СрокИсполнения = Выборка.СрокИсполнения;
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_2_103() Экспорт
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчастка,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Адрес земельного участка'"), Истина, Ложь, Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Адрес земельного участка'"), Истина, Ложь, Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОбъектаРабот,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Адрес земельного участка'"), Истина, Ложь, Ложь);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		НСтр("ru='Почтовый адрес'"), Истина, Ложь, Ложь);
	 Сообщить("Ок!");
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_4_2() Экспорт
	
	// Удаление информации о дескрипторах справочника Контроль и ПВХ ДополнительныеРеквизитыИСведения
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ДескрипторыДоступаДляОбъектов.Объект,
	|	ДескрипторыДоступаДляОбъектов.ОбъектМетаданных,
	|	ДескрипторыДоступаДляОбъектов.Дескриптор
	|ИЗ
	|	РегистрСведений.ДескрипторыДоступаДляОбъектов КАК ДескрипторыДоступаДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
	|		ПО ДескрипторыДоступаДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
	|ГДЕ
	|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ОбрабатываемыеИОМ)");
	
	ОбрабатываемыеИОМ = Новый Массив;
	ОбрабатываемыеИОМ.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Справочники.Контроль));
	ОбрабатываемыеИОМ.Добавить(
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения));
	
	Запрос.УстановитьПараметр("ОбрабатываемыеИОМ", ОбрабатываемыеИОМ);

	ЕстьЗаписи = Истина;
	НомерИтерации = 0;
	ОграничениеКоличестваИтераций = 1000; // Для предотвращения бесконечного цикла

	Пока ЕстьЗаписи И НомерИтерации < ОграничениеКоличестваИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
		Результат = Запрос.Выполнить();
		ЕстьЗаписи = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.ДескрипторыДоступаДляОбъектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.Удалить();
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_321() Экспорт
	// Установление возможности печати паспортных данных физлиц
	Если Константы.М_Брест.Получить() Тогда
		Константы.мПечататьПаспортныеДанныеФизЛиц.Установить(Ложь);
	Иначе	
		Константы.мПечататьПаспортныеДанныеФизЛиц.Установить(Истина);
	КонецЕсли; 
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_323() Экспорт
	// Перемещения предопределенного ДопСоглашения в другую папку
	Если ЗначениеЗаполнено(Справочники.ВидыВнутреннихДокументов.ДопСоглашения.Родитель) Тогда
		Объект = Справочники.ВидыВнутреннихДокументов.ДопСоглашения.ПолучитьОбъект();
		Объект.Родитель = Справочники.ВидыВнутреннихДокументов.ПустаяСсылка();
		Объект.Записать();
	КонецЕсли; 
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_324() Экспорт
	
	ПерейтиНаВерсию_1_4_9_3();
	ПерейтиНаВерсию_1_4_9_4();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_327() Экспорт
	
	// Перевод шаблонов проверки дела в предопределенные
	ПеренестиШаблон("Проверка дела 1", Справочники.ШаблоныСогласования.ПроверкаДела1Уровня);
	ПеренестиШаблон("Проверка дела 2", Справочники.ШаблоныСогласования.ПроверкаДела2Уровня);
	ПеренестиШаблон("Проверка дела 3", Справочники.ШаблоныСогласования.ПроверкаДела3Уровня);
	
	// Удаление лишних записей в РС ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Завершен <> ДанныеБизнесПроцессов.БизнесПроцесс.Завершен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		НаборЗаписей = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
		НаборЗаписей.Отбор.Завершен.Установить(Выборка.Завершен);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_328() Экспорт
	
	// Перевод шаблонов проверки дела в предопределенные
	ИсправитьШаблон("Проверка дела 1", Справочники.ШаблоныСогласования.ПроверкаДела1Уровня);
	ИсправитьШаблон("Проверка дела 2", Справочники.ШаблоныСогласования.ПроверкаДела2Уровня);
	ИсправитьШаблон("Проверка дела 3", Справочники.ШаблоныСогласования.ПроверкаДела3Уровня);
	
	// Удаление лишних записей в РС ДанныеБизнесПроцессов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Завершен
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.Завершен <> ДанныеБизнесПроцессов.БизнесПроцесс.Завершен";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл   
		НаборЗаписей = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(Выборка.БизнесПроцесс);
		НаборЗаписей.Отбор.Завершен.Установить(Выборка.Завершен);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_334() Экспорт
	
	// Запись периода в РС мНормыВремени
	НачГода = НачалоГода(ТекущаяДата());
	НВ = РегистрыСведений.мНормыВремени.Выбрать();
	Пока НВ.Следующий() Цикл
		Запись = НВ.ПолучитьМенеджерЗаписи();
		Запись.Прочитать();
		
		Запись.Период = НачГода;	
		Запись.Записать(Истина);
	КонецЦикла; 
	
	Константы.М_ШаблонУсловияДоговораПоУмолчанию.Установить(Справочники.мШаблоныУсловийДоговоров.НайтиПоНаименованию("Предоплата 100%", Истина));
	
	// Добавление видов работ в замечания
	
	ЕстьВР = Справочники.мВидыРаботПоДоговорам.НайтиПоКоду("0000000068");    //Проект отвода
	Добавить1 = Справочники.мВидыРаботПоДоговорам.НайтиПоКоду("0000000097"); //Деление (раздел)
	Добавить2 = Справочники.мВидыРаботПоДоговорам.НайтиПоКоду("0000000098"); //Слияние
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мКлассификаторЗамечанийВидыРабот.Ссылка КАК Ссылка,
		|	мКлассификаторЗамечанийВидыРабот.ВидРабот КАК ВидРабот
		|ИЗ
		|	Справочник.мКлассификаторЗамечаний.ВидыРабот КАК мКлассификаторЗамечанийВидыРабот
		|ГДЕ
		|	мКлассификаторЗамечанийВидыРабот.ВидРабот = &ВидРабот";
	
	Запрос.УстановитьПараметр("ВидРабот", ЕстьВР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Замечание = Выборка.Ссылка.ПолучитьОбъект();
		ВидыРабот = Замечание.ВидыРабот;
		
		Записывать = Ложь;
		Если ЗначениеЗаполнено(Добавить1)Тогда
			ИскСтрока = ВидыРабот.Найти(Добавить1, "ВидРабот");
			Если ИскСтрока = Неопределено Тогда
				НовСтрока = ВидыРабот.Добавить();
				НовСтрока.ВидРабот = Добавить1;
				НовСтрока.ВидПроверки = Перечисления.М_ВидыПроверкиКачества.Камеральная;
				Записывать = Истина;
			КонецЕсли; 
		КонецЕсли; 
		Если ЗначениеЗаполнено(Добавить2)Тогда
			ИскСтрока = ВидыРабот.Найти(Добавить2, "ВидРабот");
			Если ИскСтрока = Неопределено Тогда
				НовСтрока = ВидыРабот.Добавить();
				НовСтрока.ВидРабот = Добавить2;
				НовСтрока.ВидПроверки = Перечисления.М_ВидыПроверкиКачества.Камеральная;
				Записывать = Истина;
			КонецЕсли; 
		КонецЕсли;
		Если Записывать Тогда
			Замечание.Записать();
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_346() Экспорт
	
	Сборник = Справочники.мСборникиНормВремени.НайтиПоНаименованию("Нормы времени для юр лиц.");
	МенеджерЗаписи = РегистрыСведений.мСборникУтвержден.СоздатьМенеджерЗаписи(); 
	
	МенеджерЗаписи.Период   = '20150101000000'; 
	МенеджерЗаписи.СборникНормВремени = Сборник; 
	МенеджерЗаписи.Утвержден = Сборник.УдалитьУтвержден; 
	
	МенеджерЗаписи.Записать(); 

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_381() Экспорт
	
	// Заполнение полных наименований добавленных видов платежей госрегистрации
	Спр = Справочники.мВидыПлатежейГосРегистрации.ГоспошлинаЮрЛица.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Выдача (или оформление) документов, удостоверяющих право пользования, право пожизненно наследуемого владения земельным участком, право собственности на земельный участок организациям.";
	Спр.Записать();
	
	Спр = Справочники.мВидыПлатежейГосРегистрации.РегистрацияОдногоОбъектаЮрЛица.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Государственная регистрация одного объекта государственной регистрации, за исключением договора";
	Спр.Записать();
	
	Спр = Справочники.мВидыПлатежейГосРегистрации.РегистрацияКаждогоПоследующегоОбъектаЮрЛица.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Государственная регистрация одного объекта государственной регистрации, за исключением договора";
	Спр.Записать();
	
	Спр = Справочники.мВидыПлатежейГосРегистрации.СоставлениеВыдачаПланаЗемельногоУчастка.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Составление и выдача земельно-кадастрового плана земельного участка (при наличии сведений о геодезических координатах поворотных точек границы земельного участка) в случае государственной регистрации создания, изменения земельного участка, возникновения, перехода, прекращения прав, ограничений (обременений) прав на земельный участок, а также сервитута" ;
	Спр.Записать();
	
	Спр = Справочники.мВидыПлатежейГосРегистрации.РегистрацияОграниченийДо6.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Государственная регистрация одновременно не более 5 последующих объектов государственной регистрации (возникновения, перехода, прекращения ограничений прав на земельный участок)";
	Спр.Записать();

	Спр = Справочники.мВидыПлатежейГосРегистрации.РегистрацияОграниченийБолее5.ПолучитьОбъект();
	Спр.ПолноеНаименование = "Государственная регистрация одновременно более 5 последующих объектов государственной регистрации (возникновения, перехода, прекращения ограничений прав на земельный участок)";
	Спр.Записать();

КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_385() Экспорт
	
	// Создание справочника Виды начислений
	Спр = Справочники.мВидыНачислений.НайтиПоНаименованию("Оклад");
	Если Не ЗначениеЗаполнено(Спр) Тогда
		Спр = Справочники.мВидыНачислений.СоздатьЭлемент();
		Спр.УстановитьНовыйКод();
		Спр.Наименование = "Оклад";
		Спр.ТипНачисления = Перечисления.мТипыНачислений.Оклад;
		Спр.Записать();
	КонецЕсли;
	Спр = Справочники.мВидыНачислений.НайтиПоНаименованию("Премия");
	Если Не ЗначениеЗаполнено(Спр) Тогда
		Спр = Справочники.мВидыНачислений.СоздатьЭлемент();
		Спр.УстановитьНовыйКод();
		Спр.Наименование = "Премия";
		Спр.ТипНачисления = Перечисления.мТипыНачислений.Премия;
		Спр.Записать();
	КонецЕсли;
	Спр = Справочники.мВидыНачислений.НайтиПоНаименованию("Доплата");
	Если Не ЗначениеЗаполнено(Спр) Тогда
		Спр = Справочники.мВидыНачислений.СоздатьЭлемент();
		Спр.УстановитьНовыйКод();
		Спр.Наименование = "Доплата";
		Спр.ТипНачисления = Перечисления.мТипыНачислений.Доплата;
		Спр.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_400() Экспорт
	
	// Создание справочника Рентабельность
	СпрСсылка = Справочники.мРентабельность.НайтиПоНаименованию("Рентабельность 25%");
	Если Не ЗначениеЗаполнено(СпрСсылка) Тогда
		Спр = Справочники.мРентабельность.СоздатьЭлемент();
		Спр.УстановитьНовыйКод();
		Спр.Наименование = "Рентабельность 25%";
		Спр.Записать();
		СпрСсылка = Спр.Ссылка;
	КонецЕсли;
	
	// Заполнение константы
	Константы.мРентабельностьПоУмолчанию.Установить(СпрСсылка);
	
	// Заполнение смет
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСметы.Ссылка
		|ИЗ
		|	Справочник.мСметы КАК мСметы
		|ГДЕ
		|	НЕ мСметы.ПометкаУдаления
		|	И мСметы.Рентабельность = ЗНАЧЕНИЕ(Справочник.мРентабельность.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Смета = Выборка.Ссылка.ПолучитьОбъект();
		Смета.Рентабельность = СпрСсылка;
		Смета.ОбменДанными.Загрузка = Истина;
		Смета.Записать();
	КонецЦикла;
	
	// Заполнение норм времени
 	НаборЗаписей = РегистрыСведений.мСтоимостьНормоЧаса.СоздатьНаборЗаписей();
    НаборЗаписей.Прочитать();
    Для каждого Запись из НаборЗаписей Цикл
        Если Не ЗначениеЗаполнено(Запись.Рентабельность) Тогда
            Запись.Рентабельность = СпрСсылка;    
        КонецЕсли;  
    КонецЦикла;
    НаборЗаписей.Записать();
	
	// Создание предопределенных видов работ
	СпрВРдог = Справочники.мВидыРаботПоДоговорам.НайтиПоНаименованию("Разработка градостроительного паспорта земельного участка");
	Если Не ЗначениеЗаполнено(СпрВРдог) Тогда
		Спр = Справочники.мВидыРаботПоДоговорам.СоздатьЭлемент();
		Спр.Код = "0000000126";
		Спр.Наименование = "Разработка градостроительного паспорта земельного участка";
		Спр.ПолноеНаименование = "Разработка градостроительного паспорта земельного участка";
		Спр.ВидЭкономическойДеятельности = ВидЭкономическойДеятельности("71110");
		Спр.ВидПродукции = ВидПродукции("71.11.01");
		Спр.Записать();
		СпрВРдог = Спр.Ссылка;
		Сообщить("Создан элемент Вид работ по договорам: Разработка градостроительного паспорта земельного участка");
	КонецЕсли;
	
	// ВР юр лиц
	СпрВРюрлиц = Справочники.мВидыРаботЮрЛица.НайтиПоНаименованию("Разработка градостроительного паспорта земельного участка");
	Если Не ЗначениеЗаполнено(СпрВРюрлиц) Тогда
		Спр = Справочники.мВидыРаботЮрЛица.СоздатьЭлемент();
		Спр.Код = "0000000126";
		Спр.Наименование = "Разработка градостроительного паспорта земельного участка";
		Спр.ПолноеНаименование = "Разработка градостроительного паспорта земельного участка";
		Спр.ВидРаботПоДоговорам = СпрВРдог;
		Спр.ПредметДоговора = "разработка градостроительного паспорта";
		Спр.РезультатРаботы = "Разработанный градостроительный паспорт передается Заказчику работ.";
		Спр.МоментОплаты = "подписания настоящего договора";
		Спр.СрокОплаты = "в течение 10 (десяти) рабочих дней";
		Попытка
			Спр.Записать();
		Исключение
			Спр.УстановитьНовыйКод();
			Спр.Записать();
		КонецПопытки;
		СпрВРюрлиц = Спр.Ссылка;
		Сообщить("Создан элемент Вид работ юрлиц: Разработка градостроительного паспорта земельного участка");
	КонецЕсли;
	
	Попытка
		Справочники.мВидыРаботЮрЛица.РазработкаГрадостроительногоПаспорта.ПолучитьОбъект().Удалить();
		Объект = СпрВРюрлиц.ПолучитьОбъект();
		Объект.ИмяПредопределенныхДанных = "РазработкаГрадостроительногоПаспорта";
		Объект.Наименование = "Разработка градостроительного паспорта земельного участка";
		Объект.Записать();
	Исключение
	
	КонецПопытки; 
	
	// Создание предопределенных видов работ
	СпрВРдог = Справочники.мВидыРаботПоДоговорам.НайтиПоНаименованию("Установление нефиксированных границ");
	Если Не ЗначениеЗаполнено(СпрВРдог) Тогда
		Спр = Справочники.мВидыРаботПоДоговорам.СоздатьЭлемент();
		Спр.Код = "0000000095";
		Спр.Наименование = "Установление нефиксированных границ";
		Спр.ПолноеНаименование = "Установление нефиксированных границ предоставленного земельного участка на местности";
		Спр.ВидЭкономическойДеятельности = ВидЭкономическойДеятельности("71123");
		Спр.ВидПродукции = ВидПродукции("71.11.01");
		Спр.Записать();
		СпрВРдог = Спр.Ссылка;
		Сообщить("Создан элемент Вид работ по договорам: Разработка градостроительного паспорта земельного участка");
	КонецЕсли;
	
	// ВР юр лиц
	СпрВРюрлиц = Справочники.мВидыРаботЮрЛица.НайтиПоНаименованию("Установление нефиксированных границ ЛЭП");
	Если Не ЗначениеЗаполнено(СпрВРюрлиц) Тогда
		Спр = Справочники.мВидыРаботЮрЛица.СоздатьЭлемент();
		Спр.Код = "0000000157";
		Спр.Наименование = "Установление нефиксированных границ ЛЭП";
		Спр.ПолноеНаименование = "Установление нефиксированных границ земельных участков линий электропередача";
		Спр.ВидРаботПоДоговорам = СпрВРдог;
		Спр.ПредметДоговора = "землеустроительное дело по установлению нефиксированных границ земельных участков линий электропередач";
		Спр.РезультатРаботы = "Подготовленное землеустроительное дело по установлению нефиксированных границ земельных участков линий электропередач передается Подрядчиком в исполнительный комитет.";
		Спр.МоментОплаты = "подписания настоящего договора";
		Спр.СрокОплаты = "в течение 10 (десяти) рабочих дней";
		Попытка
			Спр.Записать();
		Исключение
			Спр.УстановитьНовыйКод();
			Спр.Записать();
		КонецПопытки;
		СпрВРюрлиц = Спр.Ссылка;
		Сообщить("Создан элемент Вид работ юрлиц: Разработка градостроительного паспорта земельного участка");
	КонецЕсли;
	
	Попытка
		Справочники.мВидыРаботЮрЛица.УстановлениеНефиксированныхГраницЛЭП.ПолучитьОбъект().Удалить();
		Объект = СпрВРюрлиц.ПолучитьОбъект();
		Объект.ИмяПредопределенныхДанных = "УстановлениеНефиксированныхГраницЛЭП";
		Объект.Наименование = "Установление нефиксированных границ ЛЭП";
		Объект.Записать();
	Исключение
	
	КонецПопытки; 
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_401() Экспорт
	
	// установка комментария к новому типу связи
	СвязиДокументов.УстановитьКомментарийТипаСвязи(Справочники.ТипыСвязей.ОтноситсяК,   НСтр("ru = 'Cсылка из подчиненного документа на входящий, исходящий, внутренний документ или проект'"));
	
	// Относится к - Имеет 
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.ОтноситсяК, 
		Справочники.ВидыВнутреннихДокументов.Нормализация,
		Справочники.ВидыВнутреннихДокументов.Дело, 
		Перечисления.ХарактерСвязей.Единичная, 
		Справочники.ТипыСвязей.Имеет, 
		Перечисления.ХарактерСвязей.Множественная, 
		Истина);
	
	//  Имеет - Относится к
	СвязиДокументов.СоздатьНастройкуСвязи(Справочники.ТипыСвязей.Имеет, 
		Справочники.ВидыВнутреннихДокументов.Дело,
		Справочники.ВидыВнутреннихДокументов.Нормализация, 
		Перечисления.ХарактерСвязей.Множественная, 
		Справочники.ТипыСвязей.ОтноситсяК, 
		Перечисления.ХарактерСвязей.Единичная, 
		Истина);
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_4_8_402() Экспорт
	
	// Заполнение регистра сведений мНастройкаПечатиТитульныхЛистовДел
	РегистрыСведений.мНастройкаПечатиТитульныхЛистовДел.ЗаполнитьРегистрДанными();
	
КонецПроцедуры
Процедура ПерейтиНаВерсию_1_4_8_413() Экспорт
	
	// Привязка вида вх док к предопределенному "Поручение на выполнение работ"
	Отбор = Новый Структура("Наименование", "Поручение на выполнение работ"); 
	Выборка = Справочники.ВидыВходящихДокументов.Выбрать(, , Отбор);
	ЭлОбычный = "";
	ЭлПредопределенный = "";
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИмяПредопределенныхДанных) Тогда
			ЭлПредопределенный = Выборка.Ссылка;
		Иначе	
			ЭлОбычный = Выборка.Ссылка;
		КонецЕсли; 
	КонецЦикла; 
	
	// Если оба заполнены и обычный не помечен на удаление
	Если ЗначениеЗаполнено(ЭлПредопределенный) и ЗначениеЗаполнено(ЭлОбычный)
		и НЕ ЭлОбычный.ПометкаУдаления Тогда
		// Отвязка предопределенного
		ОбъектДанных = ЭлПредопределенный.ПолучитьОбъект();
		ИмяПредопределенныхДанных = ОбъектДанных.ИмяПредопределенныхДанных;
		ОбъектДанных.ИмяПредопределенныхДанных = "";
		ОбъектДанных.ПометкаУдаления = Истина;
		ОбъектДанных.Записать(); 
		
		// Привязка обычного
		ОбъектДанных = ЭлОбычный.ПолучитьОбъект();
		ОбъектДанных.ИмяПредопределенныхДанных = ИмяПредопределенныхДанных; 
		ОбъектДанных.Записать(); 
	КонецЕсли; 
	
КонецПроцедуры

Функция ВидЭкономическойДеятельности(КодВида)
	ВидЭД = Справочники.мВидыЭкономическойДеятельности.НайтиПоКоду(КодВида);
	Если Не ЗначениеЗаполнено(ВидЭД) Тогда
		Спр = Справочники.мВидыЭкономическойДеятельности.СоздатьЭлемент();
		Спр.Код = КодВида;
		Если КодВида = "71110" Тогда
			Спр.Наименование = "Деятельность в области архитектуры (разр. проект.)";
		ИначеЕсли КодВида = "71123" Тогда
			Спр.Наименование = "Геодезическая и картографическая деятельность";
		КонецЕсли; 
		Спр.Записать();
		ВидЭД = Спр.Ссылка;
	КонецЕсли;
	
	Возврат ВидЭД;
КонецФункции 
 
Функция ВидПродукции(КодВида)
	ВидПродукции = Справочники.мКлассификаторПродукции.НайтиПоКоду(КодВида);
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		Спр = Справочники.мКлассификаторПродукции.СоздатьЭлемент();
		Спр.Код = КодВида;
		Если КодВида = "71.11.01" Тогда
			Спр.Наименование = "Услуги в области архитектурной деятельности";
		КонецЕсли; 
		Спр.Записать();
		ВидПродукции = Спр.Ссылка;
	КонецЕсли;
	
	Возврат ВидПродукции;
КонецФункции 
 
Процедура ПеренестиШаблон(Имя, НаКакой)
	
	Шаблон = Справочники.ШаблоныСогласования.НайтиПоНаименованию(Имя);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ШаблонПред = НаКакой.ПолучитьОбъект();
		ИмяПредопределенныхДанных = ШаблонПред.ИмяПредопределенныхДанных;
		ШаблонПред.ИмяПредопределенныхДанных = "";
		ШаблонПред.ПометкаУдаления = Истина;
		ШаблонПред.Записать();
		ОбъектНеПредопределенный = Шаблон.ПолучитьОбъект();
		ОбъектНеПредопределенный.ИмяПредопределенныхДанных = ИмяПредопределенныхДанных;
		ОбъектНеПредопределенный.Записать();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИсправитьШаблон(Имя, НаКакой)
	
	Шаблон = Справочники.ШаблоныСогласования.НайтиПоНаименованию(Имя);
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Если Шаблон = НаКакой и Шаблон.ПометкаУдаления Тогда
			ОбъектШаблон = Шаблон.ПолучитьОбъект();
			ОбъектШаблон.ПометкаУдаления = Ложь;
			ОбъектШаблон.Записать();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
#КонецОбласти
