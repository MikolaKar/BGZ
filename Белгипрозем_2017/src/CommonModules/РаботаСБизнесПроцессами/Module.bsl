
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура УстановитьФорматДаты(ПолеДаты) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ПолеДаты.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Если ПолеДаты.Вид = ВидПоляФормы.ПолеВвода Тогда
		ПолеДаты.ФорматРедактирования = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	КонецЕсли;	
	
КонецПроцедуры		

Функция НайтиВложенныйБизнесПроцесс(ВедущаяЗадача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Согласование.Ссылка
	|ИЗ
	|	БизнесПроцесс.Согласование КАК Согласование
	|ГДЕ
	|	Согласование.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ознакомление.Ссылка
	|ИЗ
	|	БизнесПроцесс.Ознакомление КАК Ознакомление
	|ГДЕ
	|	Ознакомление.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Исполнение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Исполнение КАК Исполнение
	|ГДЕ
	|	Исполнение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Утверждение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Утверждение КАК Утверждение
	|ГДЕ
	|	Утверждение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Регистрация.Ссылка
	|ИЗ
	|	БизнесПроцесс.Регистрация КАК Регистрация
	|ГДЕ
	|	Регистрация.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Поручение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Поручение КАК Поручение
	|ГДЕ
	|	Поручение.ВедущаяЗадача = &ВедущаяЗадача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Рассмотрение.Ссылка
	|ИЗ
	|	БизнесПроцесс.Рассмотрение КАК Рассмотрение
	|ГДЕ
	|	Рассмотрение.ВедущаяЗадача = &ВедущаяЗадача";
	
	Запрос.УстановитьПараметр("ВедущаяЗадача", ВедущаяЗадача);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции	

//Получает значение функциональной опции ИспользоватьДатуИВремяВСрокахЗадач
Функция ПолучитьИспользованиеДатыИВремениВСрокахЗадач() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
КонецФункции

// Проверяет доступность интерактивной установки/снятия пометки удаления
// бизнес-процесса.
// Если объект еще не помечен на удаление и текущему
// пользователю доступно право интерактивной пометки удаления
// бизнес-процесса, то функция возвращает Истину, иначе Ложь.
// Если объект уже помечен на удаление и текущему пользователю
// доступно право интерактивного снятия пометки удаления, то
// функция возвращает Истину, иначе Ложь.
//
// Параметры:
//	 - СсылкаНаОбъект - БизнесПроцессСсылка - ссылка на любой бизнес-процесс
//						конфигурации.
//
// Возвращаемое значение:
// - Булево
//
Функция ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(СсылкаНаОбъект);
		Результат = ПраваПоОбъекту.Изменение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Помечает/снимает пометку удаления с бизнес-процессов. В случае если у пользователя нет прав, то
// генерируется исключение.
//
// Параметры:
//	 - СсылкаНаОбъект - БизнесПроцессСсылка
//
Процедура ПометитьНаУдалениеБизнесПроцесс(СсылкаНаОбъект) Экспорт
	
	СписокТиповБизнесПроцессов = Новый СписокЗначений;
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		СписокТиповБизнесПроцессов.Добавить(
			Тип("БизнесПроцессСсылка." + БизнесПроцесс.Имя));
	КонецЦикла;
	
	Если СписокТиповБизнесПроцессов.НайтиПоЗначению(ТипЗнч(СсылкаНаОбъект)) <> Неопределено
		И ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		
		Если ПроверитьДоступностьПометкиУдаленияБизнесПроцесса(СсылкаНаОбъект) = Ложь Тогда
			ВызватьИсключение "У вас не достаточно прав для установки/снятия пометки удаления.";
		КонецЕсли;
		
		Попытка
			БизнесПроцессОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(НЕ БизнесПроцессОбъект.ПометкаУдаления);
		Исключение
			
			ОписаниеОшибки = "При установке/снятии пометки удаления произошла ошибка.";
			
			ВызватьИсключение ОписаниеОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует и записывает рабочую группу
// Используется в обработке ПередЗаписью процесса
Процедура СформироватьРабочуюГруппу(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Участники = Новый Массив;
	
	// Участники родительских процессов
	// 	только для новых объектов - для ранее записанных эти пользователи уже входят в рабочую группу
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьМассивУчастниковРодительскихПроцессов(Объект, Участники);
	КонецЕсли;
	
	// Удаленные участники процесса - бывший автор и т.п.
	Если Объект.ДополнительныеСвойства.Свойство("УчастникиПроцесса") Тогда
		ТаблицаУчастниковПроцесса = Объект.ДополнительныеСвойства.УчастникиПроцесса;
	Иначе
		ТаблицаУчастниковПроцесса = 
			ПраваДоступаНаБизнесПроцессыВызовСервера.ПолучитьТаблицуУчастниковПроцесса(Объект);
		Объект.ДополнительныеСвойства.Вставить("УчастникиПроцесса", ТаблицаУчастниковПроцесса);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника из ТаблицаУчастниковПроцесса Цикл
		Если СтрокаУчастника.СодержитсяВСтаройВерсии И Не СтрокаУчастника.СодержитсяВНовойВерсии
			И СтрокаУчастника.ВлияетНаДоступКПодчиненнымОбъектам Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
			ЗаполнитьЗначенияСвойств(ДанныеУчастника, СтрокаУчастника);
			
			Участники.Добавить(ДанныеУчастника);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Участники.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СсылкаОбъекта = Объект.Ссылка;
		Иначе
			СсылкаНового = Объект.ПолучитьСсылкуНового();
			Если Не ЗначениеЗаполнено(СсылкаНового) Тогда
				ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка));
				СсылкаНового = БизнесПроцессы[ТипБизнесПроцесса.Имя].ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНового);
			КонецЕсли;
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
		
		РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
		
		Для каждого Эл Из Участники Цикл
			
			Если ЗначениеЗаполнено(Эл) Тогда
				
				Строка = РабочаяГруппа.Добавить();
				
				Если ТипЗнч(Эл) = Тип("СправочникСсылка.Пользователи") Тогда
					Строка.Участник = Эл;
				Иначе	
					Строка.Участник = Эл.Участник;
					Строка.ОсновнойОбъектАдресации = Эл.ОсновнойОбъектАдресации;
					Строка.ДополнительныйОбъектАдресации = Эл.ДополнительныйОбъектАдресации;
				КонецЕсли;	

			КонецЕсли;	
			
		КонецЦикла;	
		
		// Запись итоговой рабочей группы
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			СсылкаОбъекта,
			РабочаяГруппа,
			Ложь); //ОбновитьПраваДоступа
		
		// Установка необходимости обновления прав доступа
		Объект.ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьМассивУчастниковРодительскихПроцессов(Объект, Участники)
		
	// Пользователи от бизнес-процесса ведущей задачи
	Если Не Объект.ВедущаяЗадача.Пустая() Тогда
		
		ВедущийБизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ВедущаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все ведущие бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ВедущийБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ВедущийБизнесПроцесс));
		Попытка
			
			ПользователиВедущегоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ВедущийБизнесПроцесс);
				
			Для каждого Эл Из ПользователиВедущегоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;	
	
	// Пользователи от бизнес-процесса главной задачи
	Если Не Объект.ГлавнаяЗадача.Пустая() Тогда
		
		ГлавныйБизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ГлавнаяЗадача, "БизнесПроцесс");
		
		// Рекурсивно вызываем все главные бизнес-процессы выше по иерархии
		ЗаполнитьМассивУчастниковРодительскихПроцессов(ГлавныйБизнесПроцесс, Участники);
		
		ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ГлавныйБизнесПроцесс));
		Попытка
			
			ПользователиГлавногоБизнесПроцесса = 
				БизнесПроцессы[ТипБизнесПроцесса.Имя].УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(ГлавныйБизнесПроцесс);
				
			Для каждого Эл Из ПользователиГлавногоБизнесПроцесса Цикл
				Участники.Добавить(Эл);
			КонецЦикла;
			
		Исключение
			// Функция "ПользователиВедущегоБизнесПроцесса" может отсутствовать у бизнес-процесса 
			// данного типа
		КонецПопытки;	
		
	КонецЕсли;			
	
КонецПроцедуры

Функция ПроверитьПередЗаписью(Объект) Экспорт
	
	// Проверка на зацикливание главной задачи
	Если Объект.ЭтоНовый() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ГлавнаяЗадача.БизнесПроцесс = Объект.Ссылка Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

// Получает всех пользователей, имеющих доступ к процессу.
// Этот список будет скопирован в список доступа "На чтение" к задачам этого процесса
Функция ПолучитьВсехУчастниковПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(ПроцессСсылка) Тогда
		Возврат ВсеУчастники;
	КонецЕсли;	
	
	// Обработка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(ПроцессСсылка);
		
	Для Каждого УчастникРабочейГруппы Из РабочаяГруппа Цикл
		
		Если Не ЗначениеЗаполнено(УчастникРабочейГруппы.Участник) Тогда 
			Продолжить;
		КонецЕсли;	
		
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", УчастникРабочейГруппы.Участник);
		ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", УчастникРабочейГруппы.ОсновнойОбъектАдресации);
		ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", УчастникРабочейГруппы.ДополнительныйОбъектАдресации);
		
		Ключ = Строка(УчастникРабочейГруппы.Участник.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(УчастникРабочейГруппы.ОсновнойОбъектАдресации) Тогда
			Ключ = Ключ + Строка(УчастникРабочейГруппы.ОсновнойОбъектАдресации.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(УчастникРабочейГруппы.ДополнительныйОбъектАдресации) Тогда
			Ключ = Ключ + Строка(УчастникРабочейГруппы.ДополнительныйОбъектАдресации.УникальныйИдентификатор());
		КонецЕсли;
		
		Если ВсеУчастники.Получить(Ключ) = Неопределено Тогда
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
		КонецЕсли;	
		
	КонецЦикла;	
	
	// Обработка участников процесса
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессСсылка);
	УчастникиПроцесса = МенеджерПроцесса.ВсеУчастникиПроцесса(ПроцессСсылка);
	
	Для Каждого ДанныеУчастника Из УчастникиПроцесса Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеУчастника.Участник) Тогда 
			Продолжить;
		КонецЕсли;	
		
		Ключ = Строка(ДанныеУчастника.Участник.УникальныйИдентификатор());
		Если ЗначениеЗаполнено(ДанныеУчастника.ОсновнойОбъектАдресации) Тогда
			Ключ = Ключ + Строка(ДанныеУчастника.ОсновнойОбъектАдресации.УникальныйИдентификатор());
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеУчастника.ДополнительныйОбъектАдресации) Тогда
			Ключ = Ключ + Строка(ДанныеУчастника.ДополнительныйОбъектАдресации.УникальныйИдентификатор());
		КонецЕсли;
		
		Если ВсеУчастники.Получить(Ключ) = Неопределено Тогда
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
		КонецЕсли;	
		
	КонецЦикла;
	
	// Обработка проекта
	Проект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроцессСсылка, "Проект");
	Если ЗначениеЗаполнено(Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда 
		
			ДанныеУчастника = Новый Структура;
			ДанныеУчастника.Вставить("Участник", РуководительПроекта);
			ДанныеУчастника.Вставить("ОсновнойОбъектАдресации", Неопределено);
			ДанныеУчастника.Вставить("ДополнительныйОбъектАдресации", Неопределено);
		
			Ключ = Строка(РуководительПроекта.УникальныйИдентификатор());
		
			ВсеУчастники.Вставить(Ключ, ДанныеУчастника);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ВсеУчастники;
	
КонецФункции

Функция ЗаполнитьДеревоЗадач(Предмет) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	
	Дерево.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Ссылка");
		
	ДобавитьЗадачиПоПредмету(Дерево, Предмет);
	
	Возврат Дерево;
	
КонецФункции

Процедура ДобавитьЗадачиПоПредмету(Дерево, Предмет)
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПредметыПроцесса.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК ПредметыПроцесса
			|ГДЕ
			|	ПредметыПроцесса.Предмет = &Предмет
			|	И ПредметыПроцесса.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПредметыПроцесса.Ссылка.Дата";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Предмет", Предмет);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = Дерево.Строки.Добавить();
			
			Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, Неопределено);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, ЗадачаСсылка) Экспорт
	
	Ветвь = Дерево.Строки.Найти(Строка(БизнесПроцессСсылка.УникальныйИдентификатор()), "ID", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденнаяВетвь = Дерево.Строки.Найти(Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()), "ID", Истина);
		Если НайденнаяВетвь <> Неопределено Тогда
			Дерево.Строки.Удалить(НайденнаяВетвь);
		КонецЕсли;	
			
		Строка = Неопределено;
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе	
			Строка = Ветвь.Строки.Добавить();
		КонецЕсли;
			
		Строка.ID = ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
						
	КонецЦикла;
	
КонецПроцедуры

//Возвращает список значений всех задач по указанному бизнес-процессу
Функция ПолучитьМассивЗадачПоБизнесПроцессу(БизнесПроцессСсылка, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс." + БизнесПроцессСсылка.Метаданные().Имя + ".Точки КАК ТочкиМаршрута
		|		ПО ЗадачаИсполнителя.ТочкаМаршрута = ТочкиМаршрута.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

//Возвращает массив ссылок на бизнес-процессы, подчиненные указанной задаче
Функция ПолучитьПодчиненныеЗадачеБизнесПроцессы(ЗадачаСсылка, РеквизитПоиска, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	Результат = Новый Массив;
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.%1 КАК БизнесПроцесс
			|ГДЕ
			|	БизнесПроцесс.%2 = &ЗадачаПараметр",
			ТипБизнесПроцесса.Имя, РеквизитПоиска);
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗадачаПараметр", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции

// Возвращает Истина если указанный процесс является дочерним
Функция ЭтоДочернийПроцесс(ПроцессОбъект) Экспорт
	
	// Проверка ведущей задачи
	Если ЗначениеЗаполнено(ПроцессОбъект.ВедущаяЗадача) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка главной задачи
	Попытка
		Если ЗначениеЗаполнено(ПроцессОбъект.ГлавнаяЗадача) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		// У процесса может не быть свойства "ГлавнаяЗадача"
	КонецПопытки;	
	
	Возврат Ложь;
	
КонецФункции

// Получает суммарные трудозатраты всех участников процесса
// Параметры:
//	ПроцессОбъект - объект типа БизнесПроцессОбъект.(...)
Функция ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(ПроцессОбъект) Экспорт
	
	МетаданныеПроцесса = ПроцессОбъект.Метаданные();
	Сумма = 0;
	Если МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено 
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланИсполнителя;
	ИначеЕсли МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено
		И МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено Тогда
		Для Каждого Строка Из ПроцессОбъект.Исполнители Цикл
			Сумма = Сумма + Строка.ТрудозатратыПланИсполнителя;  
		КонецЦикла;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланПроверяющего") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланПроверяющего;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланКонтролера") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Контролер) <> Неопределено Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	Если МетаданныеПроцесса.Реквизиты.Найти("Автор") <> Неопределено
		И МетаданныеПроцесса.Реквизиты.Найти("ТрудозатратыПланАвтора") <> Неопределено
		И ЗначениеЗаполнено(ПроцессОбъект.Автор) <> Неопределено Тогда
		Сумма = Сумма + ПроцессОбъект.ТрудозатратыПланАвтора;
	КонецЕсли;
		
	Возврат Сумма;
	
КонецФункции

Процедура ПроверитьСоответствиеПроцессаПроектнойЗадаче(ПроцессОбъект, Отказ) Экспорт
	
	МетаданныеПроцесса = ПроцессОбъект.Метаданные();
	
	Проект = ПроцессОбъект.Проект;
	ПроектнаяЗадача = ПроцессОбъект.ПроектнаяЗадача;
	
	Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
	
		Если ПроектнаяЗадача.Исполнители.Количество() = 0 Тогда
			
			Если ПроектнаяЗадача.ТекущийПланТрудозатраты = 0 Тогда
				// В проектной задаче ничего не указано - ни исполнителей, ни общих трудозатрат.
				// Никаких дополнительных проверок не проводится.
			Иначе
				// В проектной задаче не указаны исполнители, но указаны общие трудозатраты.
				// Проверяем соответствие общих трудозатрат по процессу и общих трудозатрат проектной задачи.
				СуммарныеТрудозатратыПроцесса = РаботаСБизнесПроцессами.ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(ПроцессОбъект);
				Если СуммарныеТрудозатратыПроцесса > ПроектнаяЗадача.ТекущийПланТрудозатраты Тогда
					
					СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Общие трудозатраты процесса превышают плановые трудозатраты проектной задачи ""%1""'"),
						Строка(ПроектнаяЗадача));
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СообщениеПользователю, 
						ПроцессОбъект,
						"ПроектЗадача",
						,
						Отказ);
				КонецЕсли;	
					
			КонецЕсли;
			
		Иначе
			
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
				Для Каждого ИсполнительПроцесса Из ПроцессОбъект.Исполнители Цикл
					ИндексИсполнителя = ПроцессОбъект.Исполнители.Индекс(ИсполнительПроцесса);
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ИсполнительПроцесса.Исполнитель,
							ИсполнительПроцесса.ОсновнойОбъектАдресации,
							ИсполнительПроцесса.ДополнительныйОбъектАдресации);	
					
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].Исполнитель",, 
								Отказ);
							
					ИначеЕсли МетаданныеПроцесса.ТабличныеЧасти.Исполнители.Реквизиты.Найти("ТрудозатратыПланИсполнителя") <> Неопределено
						И Трудозатраты > 0 И Трудозатраты < ИсполнительПроцесса.ТрудозатратыПланИсполнителя Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты исполнителя ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].ТрудозатратыПланИсполнителя",, 
								Отказ);						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Исполнитель,
							ПроцессОбъект.ОсновнойОбъектАдресации,
							ПроцессОбъект.ДополнительныйОбъектАдресации);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнитель",, 
								Отказ);
								
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланИсполнителя Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты исполнителя ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Исполнитель),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланИсполнителя",, 
								Отказ);	
								
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Проверяющий,
							ПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего,
							ПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Проверяющий ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Проверяющий),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Проверяющий",, 
								Отказ);
								
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланПроверяющего Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты проверяющего ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Проверяющий),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланПроверяющего",, 
								Отказ);	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПроцессОбъект.Контролер) Тогда
					
					Трудозатраты = Справочники.ПроектныеЗадачи.ПолучитьПлановыеТрудозатратыИсполнителяПроектнойЗадачи(
							ПроектнаяЗадача,
							ПроцессОбъект.Контролер,
							ПроцессОбъект.ОсновнойОбъектАдресацииКонтролера,
							ПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера);
							
					Если Трудозатраты = Неопределено Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Контролер ""%1"" не найден среди исполнителей проектной задачи ""%2""'"),
								Строка(ПроцессОбъект.Контролер),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Контролер",, 
								Отказ);
						
					ИначеЕсли Трудозатраты > 0 И Трудозатраты < ПроцессОбъект.ТрудозатратыПланКонтролера Тогда
						
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Трудозатраты контролера ""%1"" превышают указанные в проектной задаче ""%2""'"),
								Строка(ПроцессОбъект.Контролер),
								Строка(ПроектнаяЗадача));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"ТрудозатратыПланКонтролера",, 
								Отказ);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
		
		Если Не Проект.СписыватьЗатратыНаПроект Тогда 
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для проекта ""%1"" запрещено отнесение трудозатрат на проект в целом'"),
				Строка(Проект));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Сообщение,,
				"ПроектЗадача",, 
				Отказ);	
		КонецЕсли;		
		
		Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
			Для Каждого ИсполнительПроцесса Из ПроцессОбъект.Исполнители Цикл
				
				ИндексИсполнителя = ПроцессОбъект.Исполнители.Индекс(ИсполнительПроцесса);
				Если Проект.ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ИсполнительПроцесса.Исполнитель,
						ИсполнительПроцесса.ОсновнойОбъектАдресации,
						ИсполнительПроцесса.ДополнительныйОбъектАдресации);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Исполнитель ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
								Строка(ИсполнительПроцесса.Исполнитель),
								Строка(Проект));
								
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Сообщение,
								ПроцессОбъект,
								"Исполнители[" + Строка(ИндексИсполнителя) + "].Исполнитель",, 
								Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МетаданныеПроцесса.Реквизиты.Найти("Исполнитель") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Исполнитель) Тогда
				Если Проект.ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Исполнитель,
						ПроцессОбъект.ОсновнойОбъектАдресации,
						ПроцессОбъект.ДополнительныйОбъектАдресации);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исполнитель ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
							Строка(ПроцессОбъект.Исполнитель),
							Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"ИсполнительСтрокой",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Если МетаданныеПроцесса.Реквизиты.Найти("Проверяющий") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Проверяющий) Тогда
				Если Проект.ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Проверяющий,
						ПроцессОбъект.ОсновнойОбъектАдресацииПроверяющего,
						ПроцессОбъект.ДополнительныйОбъектАдресацииПроверяющего);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Проверяющий ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
							Строка(ПроцессОбъект.Проверяющий),
							Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"ПроверяющийСтрокой",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		
		Если МетаданныеПроцесса.Реквизиты.Найти("Контролер") <> Неопределено Тогда
			Если ЗначениеЗаполнено(ПроцессОбъект.Контролер) Тогда
				Если Проект.ПроектнаяКоманда.Количество() > 0 Тогда
					
					ИсполнительНайден = РаботаСПроектами.НайтиИсполнителяРольВКомандеПроекта(
						Проект,
						ПроцессОбъект.Контролер,
						ПроцессОбъект.ОсновнойОбъектАдресацииКонтролера,
						ПроцессОбъект.ДополнительныйОбъектАдресацииКонтролера);
					
					Если Не ИсполнительНайден Тогда
						Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролер ""%1"" не найден среди участников проектной команды проекта ""%2""'"),
						Строка(ПроцессОбъект.Контролер),
						Строка(Проект));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Сообщение,
							ПроцессОбъект,,
							"КонтролерСтрокой",
							Отказ);
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		
	КонецЕсли;	
		
КонецПроцедуры

Функция ПолучитьФактическиеТрудозатратыПоЗадаче(Задача) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Трудозатраты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ФактическиеТрудозатраты.Длительность), 0) КАК Длительность
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	ФактическиеТрудозатраты.Источник = &Источник И Не Удалена";
	Запрос.УстановитьПараметр("Источник", Задача);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Трудозатраты;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Задача.ПроектнаяЗадача) Тогда 
		ЕдиницаТрудозатрат = Задача.ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
		ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроектнойЗадачи(Задача.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Задача.Проект) Тогда 
		ЕдиницаТрудозатрат = Задача.Проект.ЕдиницаТрудозатратЗадач;
		ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроекта(Задача.Проект);
	Иначе
		ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
		ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
	КонецЕсли;
	
	Трудозатраты = РаботаСПроектами.ПересчитатьТрудозатраты(
		Выборка.Длительность / 60, 
		Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута, 
		ЕдиницаТрудозатрат,
		ГрафикРаботы);
	
	Возврат Трудозатраты;
	
КонецФункции	

Функция ПолучитьСуммарныеТрудозатратыПроцессаЧас(БизнесПроцесс) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах") Тогда
		Возврат 0;
	КонецЕсли;	
	
	ПлановыеТрудозатраты = РаботаСБизнесПроцессами.ПолучитьСуммарныеПлановыеТрудозатратыПроцесса(БизнесПроцесс);
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	ГрафикРаботы = Константы.ОсновнойГрафикРаботы.Получить();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		РеквизитыПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(БизнесПроцесс, "Проект, ПроектнаяЗадача");
		Проект = РеквизитыПроцесса.Проект;
		ПроектнаяЗадача = РеквизитыПроцесса.ПроектнаяЗадача;
		
		Если ЗначениеЗаполнено(ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ПроектнаяЗадача.ТекущийПланЕдиницаТрудозатрат;
			ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроектнойЗадачи(ПроектнаяЗадача);
		ИначеЕсли ЗначениеЗаполнено(Проект) Тогда 
			ЕдиницаТрудозатрат = Проект.ЕдиницаТрудозатратЗадач;
			ГрафикРаботы = РаботаСПроектами.ПолучитьГрафикРаботыПроекта(Проект);
		КонецЕсли;
	КонецЕсли;
	
	ПлановыеТрудозатратыЧас = РаботаСПроектами.ПересчитатьТрудозатраты(
		ПлановыеТрудозатраты, 
		ЕдиницаТрудозатрат,
		Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас,
		ГрафикРаботы);
	
	Возврат ПлановыеТрудозатратыЧас; 
	
КонецФункции	

Процедура РассчитатьСрокиСогласованияДатой(Исполнители, 
		БизнесПроцесс, 
		ДатаНачалаИтерации = '00010101',
		ОжидаемыйСрокСогласования = '00010101',
		ОжидаемаяДлительностьДней = 0,
		ОжидаемаяДлительностьЧасов = 0) Экспорт 
	
	// получение даты начала итерации
	Если Не ЗначениеЗаполнено(ДатаНачалаИтерации) Тогда 
		ДатаНачалаИтерации = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(БизнесПроцесс.Ссылка)
			И БизнесПроцесс.Стартован 
			И БизнесПроцесс.НомерИтерации > 0 Тогда 
			
			ДатаНачалаИтерации = БизнесПроцесс.ДатаНачала;
			Если БизнесПроцесс.НомерИтерации > 1 Тогда 
				НайденныеСтроки = БизнесПроцесс.Ссылка.РезультатыСогласования.НайтиСтроки(
					Новый Структура("НомерИтерации", БизнесПроцесс.НомерИтерации));
				Если НайденныеСтроки.Количество() > 0 Тогда 
					ДатаНачалаИтерации = НайденныеСтроки[0].ЗадачаИсполнителя.Дата;
					Для Инд = 1 По НайденныеСтроки.ВГраница() Цикл
						Если НайденныеСтроки[Инд].ЗадачаИсполнителя.Дата < ДатаНачалаИтерации Тогда 
							ДатаНачалаИтерации = НайденныеСтроки[Инд].ЗадачаИсполнителя.Дата;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Исполнители Цикл
		
		Если ОбщегоНазначения.СсылкаСуществует(Строка.ЗадачаИсполнителя) И ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
			Строка.СрокИсполненияДатой = Строка.ЗадачаИсполнителя.СрокИсполнения;
			Продолжить;
		КонецЕсли;
			
		СрокНаПредыдущемШаге = ПолучитьСрокСогласованияДатойНаПредыдущемШаге(Исполнители, Строка, ДатаНачалаИтерации, БизнесПроцесс);
		Если Не ЗначениеЗаполнено(СрокНаПредыдущемШаге) Тогда 
			Строка.СрокИсполненияДатой = '00010101';
			Продолжить;
		КонецЕсли;	
			
		Если Не ЗначениеЗаполнено(Строка.ДлительностьИсполненияДни)
		   И Не ЗначениеЗаполнено(Строка.ДлительностьИсполненияЧасы) Тогда 
			Строка.СрокИсполненияДатой = '00010101';
			Продолжить;
		КонецЕсли;	
				
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Строка.Исполнитель);
			КонецЕсли;
			
			Строка.СрокИсполненияДатой = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
				График,
				СрокНаПредыдущемШаге,
				Строка.ДлительностьИсполненияДни,
				Строка.ДлительностьИсполненияЧасы);
		Иначе
			Строка.СрокИсполненияДатой = СрокНаПредыдущемШаге +
				Строка.ДлительностьИсполненияДни * 24 * 3600 +
				Строка.ДлительностьИсполненияЧасы * 3600;
		КонецЕсли;
		
	КонецЦикла;
	
	ОжидаемыйСрокСогласования = РаботаСБизнесПроцессамиКлиентСервер.РассчитатьОбщийСрокСогласования(Исполнители);
	
	Если ЗначениеЗаполнено(ОжидаемыйСрокСогласования) И ОжидаемыйСрокСогласования >= ДатаНачалаИтерации Тогда 
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		Результат = ПолучитьРазностьДатВДняхИЧасах(ГрафикРаботы, ДатаНачалаИтерации, ОжидаемыйСрокСогласования);
		
		ОжидаемаяДлительностьДней = Результат.КоличествоПолныхРабочихДней;
		ОжидаемаяДлительностьЧасов = Результат.КоличествоПолныхРабочихЧасов;
	Иначе
		ОжидаемаяДлительностьДней = 0;
		ОжидаемаяДлительностьЧасов = 0;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьСрокСогласованияДатойНаПредыдущемШаге(Исполнители, Строка, ДатаНачалаИтерации, БизнесПроцесс) Экспорт
	
	Если БизнесПроцесс.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		
		Возврат ДатаНачалаИтерации;
			
	ИначеЕсли БизнесПроцесс.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		
		Поз = Исполнители.Найти(Строка);
		Если Поз = 0 Тогда 
			Возврат ДатаНачалаИтерации;
		Иначе
			Возврат Исполнители[Поз-1].СрокИсполненияДатой;
		КонецЕсли;	
		
	ИначеЕсли БизнесПроцесс.ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 	
		
		Если Строка.Шаг <= 1 Тогда 
			Возврат ДатаНачалаИтерации;
		Иначе	
			МаксимальныйСрок = '00010101'; 
			Для Каждого Исполнитель Из Исполнители Цикл
				Если Исполнитель.Шаг = Строка.Шаг - 1 Тогда 
					Если Исполнитель.СрокИсполненияДатой > МаксимальныйСрок Тогда
						МаксимальныйСрок = Исполнитель.СрокИсполненияДатой;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Возврат МаксимальныйСрок;
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецФункции

Процедура РассчитатьДлительностиСогласованияПоДате(ДанныеСтроки) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.СрокИсполненияДатой) Тогда 
		ДанныеСтроки.ДлительностьДней = 0;
		ДанныеСтроки.ДлительностьЧасов = 0;
		Возврат;
	КонецЕсли;	
	
	ДатаНачала = ДанныеСтроки.ЗадачаИсполнителя.Дата;
	ДатаОкончания = ДанныеСтроки.СрокИсполненияДатой;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
		ДатаНачала = ДатаНачала - Секунда(ДатаНачала);
		ДатаОкончания = ДатаОкончания - Секунда(ДатаОкончания);
	Иначе
		ДатаНачала = НачалоДня(ДатаНачала);
		ДатаОкончания = НачалоДня(ДатаОкончания);
	КонецЕсли;	
	
	ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	Если ТипЗнч(ДанныеСтроки.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(ДанныеСтроки.Исполнитель);
	КонецЕсли;
	
	Результат = ПолучитьРазностьДатВДняхИЧасах(ГрафикРаботы, ДатаНачала, ДатаОкончания);
	
	ДанныеСтроки.ДлительностьДней = Результат.КоличествоПолныхРабочихДней;
	ДанныеСтроки.ДлительностьЧасов = Результат.КоличествоПолныхРабочихЧасов;
	
КонецПроцедуры	

Функция ПолучитьРазностьДатВДняхИЧасах(ГрафикРаботы, ДатаНачала, ДатаОкончания)
	
	КоличествоПолныхРабочихДней = 0;
	КоличествоПолныхРабочихЧасов = 0;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		
		Если ДатаОкончания - НачалоДня(ДатаОкончания) >= ДатаНачала - НачалоДня(ДатаНачала) Тогда 
			
			КоличествоПолныхРабочихДней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы.Календарь, ДатаНачала, ДатаОкончания);
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
				врДатаОкончания = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(ГрафикРаботы, ДатаНачала, КоличествоПолныхРабочихДней);
				ДлительностьПериодаСек = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(ГрафикРаботы, врДатаОкончания, ДатаОкончания);
				КоличествоПолныхРабочихЧасов = Цел(ДлительностьПериодаСек / 3600);
			КонецЕсли;	
			
		ИначеЕсли ДатаОкончания-24*3600 >= ДатаНачала Тогда
			
			КоличествоПолныхРабочихДней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы.Календарь, ДатаНачала, ДатаОкончания-24*3600);
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
				врДатаОкончания = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(ГрафикРаботы, ДатаНачала, КоличествоПолныхРабочихДней);
				ДлительностьПериодаСек = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(ГрафикРаботы, врДатаОкончания, ДатаОкончания);
				КоличествоПолныхРабочихЧасов = Цел(ДлительностьПериодаСек / 3600);
			КонецЕсли;
		Иначе	
			
			КоличествоПолныхРабочихДней = 0;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда 
				ДлительностьПериодаСек = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(ГрафикРаботы, ДатаНачала, ДатаОкончания);
				КоличествоПолныхРабочихЧасов = Цел(ДлительностьПериодаСек / 3600);
			КонецЕсли;	
			
		КонецЕсли;	
			
	Иначе
		ДлительностьПериодаСек = ДатаОкончания - ДатаНачала;
		КоличествоПолныхРабочихДней = Цел(ДлительностьПериодаСек/(3600*24));
		КоличествоПолныхРабочихЧасов = Цел((ДлительностьПериодаСек - КоличествоПолныхРабочихДней*3600*24)/3600);
	КонецЕсли;	
	
	Возврат Новый Структура("КоличествоПолныхРабочихДней, КоличествоПолныхРабочихЧасов",
		КоличествоПолныхРабочихДней, КоличествоПолныхРабочихЧасов);
	
КонецФункции	

////////////
// Общие функции и процедуры для механизма бизнес-процесса "Исполнение"
//////////// 

// Загружает список исполнителей из временного хранилища в список исполнителей
Процедура ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища, РеквизитТаблица) Экспорт
	
	Исполнители = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// добавление появившихся строк
	Для Каждого Строка Из Исполнители Цикл
		ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
			Строка.Исполнитель, 
			Строка.ОсновнойОбъектАдресации, 
			Строка.ДополнительныйОбъектАдресации);
		
		Если РеквизитТаблица.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = РеквизитТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ИндексСтроки = РеквизитТаблица.Индекс(НоваяСтрока);
		Если ИндексСтроки > 0 Тогда 
			НоваяСтрока.ПорядокИсполнения = РеквизитТаблица[ИндексСтроки-1].ПорядокИсполнения;
		Иначе
			НоваяСтрока.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
		КонецЕсли;	
	КонецЦикла;	
	
	// удаление пропавших строк
	КоличествоСтрок = РеквизитТаблица.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = РеквизитТаблица[КоличествоСтрок - Инд];
		ПараметрыОтбора = Новый Структура("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации", 
			Строка.Исполнитель, 
			Строка.ОсновнойОбъектАдресации, 
			Строка.ДополнительныйОбъектАдресации);
		
		Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;		
		РеквизитТаблица.Удалить(Строка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВычислитьСрокиИсполнения(МассивИсполнителей, ДатаНачалаПроцесса) Экспорт
	
	Для Каждого Исполнитель Из МассивИсполнителей Цикл
		
		СрокНаПредыдущемШаге = ПолучитьСрокНаШаге(МассивИсполнителей, Исполнитель.Шаг - 1, ДатаНачалаПроцесса);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Исполнитель.Исполнитель);
			КонецЕсли;
			Исполнитель.СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
				График,
				СрокНаПредыдущемШаге,
				Исполнитель.ДлительностьИсполненияДни,
				Исполнитель.ДлительностьИсполненияЧасы);
			Даты = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Исполнитель.СрокИсполнения, График);
			Если Исполнитель.СрокИсполнения - НачалоДня(Исполнитель.СрокИсполнения)
				> Даты.ОкончаниеДня - НачалоДня(Даты.ОкончаниеДня) Тогда
				Исполнитель.СрокИсполнения = НачалоДня(Исполнитель.СрокИсполнения) + (Даты.ОкончаниеДня - НачалоДня(Даты.ОкончаниеДня));	
			КонецЕсли;
			Если Исполнитель.СрокИсполнения - НачалоДня(Исполнитель.СрокИсполнения)
				< Даты.НачалоДня - НачалоДня(Даты.НачалоДня) Тогда
				Исполнитель.СрокИсполнения = НачалоДня(Исполнитель.СрокИсполнения) + (Даты.НачалоДня - НачалоДня(Даты.НачалоДня));	
			КонецЕсли;
		Иначе
			Исполнитель.СрокИсполнения = СрокНаПредыдущемШаге +
				Исполнитель.ДлительностьИсполненияДни * 24 * 3600 +
				Исполнитель.ДлительностьИсполненияЧасы * 3600;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычислитьДлительности(МассивИсполнителей, ДатаНачалаПроцесса, СтрокаДляРасчетаДлительности = Неопределено) Экспорт
	
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	НомерСтроки = -1;
	Для Каждого Исполнитель Из МассивИсполнителей Цикл
		Если Не ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		Если СтрокаДляРасчетаДлительности <> Неопределено 
			И НомерСтроки <> СтрокаДляРасчетаДлительности Тогда
			Продолжить;
		КонецЕсли;
		СрокНаПредыдущемШаге = ПолучитьСрокНаШаге(МассивИсполнителей, Исполнитель.Шаг - 1, ДатаНачалаПроцесса);
		Если ИспользоватьГрафикиРаботы Тогда
			График = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();

			Даты = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Исполнитель.СрокИсполнения, График);
			Если Исполнитель.СрокИсполнения - НачалоДня(Исполнитель.СрокИсполнения)
				> Даты.ОкончаниеДня - НачалоДня(Даты.ОкончаниеДня) Тогда
				Исполнитель.СрокИсполнения = НачалоДня(Исполнитель.СрокИсполнения) + (Даты.ОкончаниеДня - НачалоДня(Даты.ОкончаниеДня));	
			КонецЕсли;
			Если Исполнитель.СрокИсполнения - НачалоДня(Исполнитель.СрокИсполнения)
				< Даты.НачалоДня - НачалоДня(Даты.НачалоДня) Тогда
				Исполнитель.СрокИсполнения = НачалоДня(Исполнитель.СрокИсполнения) + (Даты.НачалоДня - НачалоДня(Даты.НачалоДня));	
			КонецЕсли; 
			Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				График = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Исполнитель.Исполнитель);
			КонецЕсли;
			Дни = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(График.Календарь, СрокНаПредыдущемШаге, Исполнитель.СрокИсполнения);
			
			Если ИспользоватьВремяВСрокахЗадач Тогда
				Разница1 = СрокНаПредыдущемШаге - НачалоДня(СрокНаПредыдущемШаге);
				Разница2 = Исполнитель.СрокИсполнения - НачалоДня(Исполнитель.СрокИсполнения);
				
				Если Разница1 < Разница2 Тогда
					Часы = Окр((Разница2 - Разница1) / 3600);
					ВременнаяДатаНачала = 
						НачалоДня(Исполнитель.СрокИсполнения)
						+ (СрокНаПредыдущемШаге
						- НачалоДня(СрокНаПредыдущемШаге));
					ТаблицаРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(
						График,  
						ВременнаяДатаНачала, 
						Исполнитель.СрокИсполнения);

					ДлительностьПерерывов = 0;
					Для Счетчик = 1 По ТаблицаРабочегоВремени.Количество() - 1 Цикл
	                	ДлительностьПерерывов = ДлительностьПерерывов
							+ Окр((ТаблицаРабочегоВремени[Счетчик].ДатаНачала 
									- ТаблицаРабочегоВремени[Счетчик-1].ДатаОкончания) / 3600);
					КонецЦикла;
					Часы = Часы - ДлительностьПерерывов;			
				ИначеЕсли Разница1 > Разница2 И Разница1 - Разница2 > 60 Тогда
					КоличествоВыходных = Окр((Исполнитель.СрокИсполнения - СрокНаПредыдущемШаге)/(24*3600)) - Дни;
					Дни = Дни - 1;
					ВременнаяДата = СрокНаПредыдущемШаге + (Дни + КоличествоВыходных) * 24 * 3600;	
					Дельта = 1800;
					СуммаРабочегоВремени = 0;                             
					Пока ВременнаяДата < Исполнитель.СрокИсполнения Цикл
						ВременнаяДата = ВременнаяДата + Дельта;
						Если Графикиработы.ЭтоРабочаяДатаВремя(График, ВременнаяДата) Тогда
							СуммаРабочегоВремени = СуммаРабочегоВремени + Дельта;	
						КонецЕсли;						
					КонецЦикла;
					Часы = Окр((СуммаРабочегоВремени / 3600));
				Иначе
					Если Дни = 0 Тогда
						Дни = 1;
					КонецЕсли;
					Часы = 0;
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
			ДлительностьСек = Исполнитель.СрокИсполнения - СрокНаПредыдущемШаге;
			Если ДлительностьСек <= 0 Тогда
				Дни = 1;
				Часы = 0;
			Иначе
				Дни = Окр(ДлительностьСек / (3600*24));
				Если ИспользоватьВремяВСрокахЗадач Тогда
					ОстатокСек = ДлительностьСек - Дни*3600*24;
					Часы = Окр(ОстатокСек / 3600);
				КонецЕсли;
							
				Исполнитель.ДлительностьИсполненияДни = Дни;
				Если ИспользоватьВремяВСрокахЗадач Тогда
					Исполнитель.ДлительностьИсполненияЧасы = Часы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Исполнитель.ДлительностьИсполненияДни = Дни;
		Если ИспользоватьВремяВСрокахЗадач Тогда
			Исполнитель.ДлительностьИсполненияЧасы = Часы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВычислитьДлительностиИСроки(МассивИсполнителей, ДатаНачалаПроцесса, СтрокаДляРасчетаДлительности = Неопределено) Экспорт
	
	ВычислитьДлительности(МассивИсполнителей, ДатаНачалаПроцесса, СтрокаДляРасчетаДлительности);
	ВычислитьСрокиИсполнения(МассивИсполнителей, ДатаНачалаПроцесса);
		
КонецПроцедуры

Процедура ВычислитьСрокиИДлительности(МассивИсполнителей, ДатаНачалаПроцесса) Экспорт
	
	ВычислитьСрокиИсполнения(МассивИсполнителей, ДатаНачалаПроцесса);
	ВычислитьДлительности(МассивИсполнителей, ДатаНачалаПроцесса);
		
КонецПроцедуры

Функция ПолучитьСрокНаШаге(МассивИсполнителей, Шаг, ДатаНачалаПроцесса) Экспорт
	
	Если Шаг <= 0 Тогда
		Возврат ?(ЗначениеЗаполнено(ДатаНачалаПроцесса), ДатаНачалаПроцесса, ТекущаяДатаСеанса());
	Иначе
		МаксимальныйСрок = ?(ЗначениеЗаполнено(ДатаНачалаПроцесса), ДатаНачалаПроцесса, ТекущаяДатаСеанса());
		Для Каждого Исполнитель Из МассивИсполнителей Цикл
			Если Исполнитель.Шаг = Шаг
				И Не Исполнитель.Ответственный Тогда 
				Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя)
					И Исполнитель.ЗадачаИсполнителя.ДатаИсполнения > МаксимальныйСрок Тогда
					МаксимальныйСрок = Исполнитель.ЗадачаИсполнителя.ДатаИсполнения;
				ИначеЕсли Исполнитель.СрокИсполнения > МаксимальныйСрок Тогда
					МаксимальныйСрок = Исполнитель.СрокИсполнения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат МаксимальныйСрок;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ФормаЗадачиПриСозданииНаСервере(
	Форма, 
	Объект, 
	ЭлементСрокИсполнения, 
	ЭлементДатаИсполнения, 
	ЭлементПредмет = Неопределено) Экспорт
	
	ПротоколированиеРаботыПользователей.ЗаписатьОткрытие(Объект.Ссылка);
	
	Форма.НачальныйПризнакВыполнения = Объект.Выполнена;
	Форма.ТолькоПросмотр = Объект.Выполнена;
	
	Если Объект.Выполнена И Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	Если Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Форма.Элементы.ГруппаИсполнение.Видимость = Ложь;
		Если Форма.Элементы.Найти("ГруппаОстановлена") <> Неопределено Тогда
			Форма.Элементы.ГруппаОстановлена.Видимость = Ложь;			
		КонецЕсли;	
		Если Форма.Элементы.Найти("ГруппаПрерван") <> Неопределено Тогда
			Форма.Элементы.ГруппаПрерван.Видимость = Истина;
			Форма.Элементы.ДекорацияПричинаПрерывания.Заголовок = НСтр("ru = 'Задача прервана'");
		КонецЕсли;	                                        		
		Форма.ТолькоПросмотр = Истина;				
	ИначеЕсли Объект.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		Форма.Элементы.ГруппаИсполнение.Видимость = Ложь;
		Если Форма.Элементы.Найти("ГруппаОстановлена") <> Неопределено Тогда
			Форма.Элементы.ГруппаОстановлена.Видимость = Истина;
		КонецЕсли;	
		Если Форма.Элементы.Найти("ГруппаПрерван") <> Неопределено Тогда
			Форма.Элементы.ГруппаПрерван.Видимость = Ложь;					
		КонецЕсли;	                                        				
		Форма.ТолькоПросмотр = Истина;
	Иначе
		Если Форма.Элементы.Найти("ГруппаОстановлена") <> Неопределено Тогда
			Форма.Элементы.ГруппаОстановлена.Видимость = Ложь;      		
		КонецЕсли;		
		Если Форма.Элементы.Найти("ГруппаПрерван") <> Неопределено Тогда
			Форма.Элементы.ГруппаПрерван.Видимость = Ложь;					
		КонецЕсли;	                                        				
	КонецЕсли;		
		
	Если Не Объект.Выполнена Тогда
		Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Форма.ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ЭлементПредмет <> Неопределено Тогда
		ЭлементПредмет.Гиперссылка = ЗначениеЗаполнено(Объект.Предмет);
		Форма.ПредметСтрокой = ОбщегоНазначенияДокументооборот.ПредметСтрокой(Объект.Предмет);
	КонецЕсли;
	
	ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(Форма);
	
	ЭлементОтображатьУдаленныеПриложения = Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюОтображатьУдаленные");
	Если ЭлементОтображатьУдаленныеПриложения <> Неопределено Тогда
		Форма.ОтображатьУдаленныеПриложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Форма.ИмяФормы,
			"ОтображатьУдаленныеПриложения",
			Ложь);
		ЭлементОтображатьУдаленныеПриложения.Пометка = Форма.ОтображатьУдаленныеПриложения;
	КонецЕсли;
	
	ЭлементОтображатьУдаленныеФайлы = Форма.Элементы.Найти("ФайлыКонтекстноеМенюОтображатьУдаленные");
	Если ЭлементОтображатьУдаленныеФайлы <> Неопределено Тогда
		ОтображатьУдаленныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Форма.ИмяФормы,
			"ОтображатьУдаленныеФайлы",
			Ложь);
		ЭлементОтображатьУдаленныеФайлы.Пометка = ОтображатьУдаленныеФайлы;
		Форма.Файлы.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеФайлы);
	КонецЕсли;
	
	УстановитьФорматДаты(ЭлементСрокИсполнения);
	УстановитьФорматДаты(Форма.Элементы.Дата);
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ЭлементДатаИсполнения.ТолькоПросмотр = Не ИзменятьЗаданияЗаднимЧислом;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Форма.Элементы.ДатаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Форма.Элементы.ДатаИсполненияВремя.ТолькоПросмотр = Не ИзменятьЗаданияЗаднимЧислом;
	
	// Заполняем поле "Исполнитель"
	Если НЕ Объект.Исполнитель.Пустая() Тогда
		Форма.ИсполнительСтрокой = Объект.Исполнитель;
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Истина;
	Иначе
		Форма.ИсполнительСтрокой = Строка(Объект.РольИсполнителя);
		
		Если Объект.ОсновнойОбъектАдресации <> Неопределено И НЕ Объект.ОсновнойОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ОсновнойОбъектАдресации;
		КонецЕсли;	
		
		Если Объект.ДополнительныйОбъектАдресации <> Неопределено И НЕ Объект.ДополнительныйОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
	УстановитьИсполнителя(Форма, Объект);
	
	Если Объект.Выполнена Тогда
		Форма.Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
		Форма.Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
	Иначе	
		Форма.Элементы.ГруппаКомандыВыполнения.Видимость = Истина;
		Форма.Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ФормаПринятьКИсполнению") <> Неопределено Тогда
		Если Форма.Объект.ПринятаКИсполнению = Истина Тогда
			Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Ложь;
			Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Истина;
		Иначе	
			Форма.Элементы.ФормаПринятьКИсполнению.Доступность = Истина;
			Форма.Элементы.ФормаОтменитьПринятиеКИсполнению.Доступность = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	// Заполняем реквизит ПолноеОписаниеЗадачи
	Если Форма.Элементы.Найти("ПолноеОписаниеЗадачи") <> Неопределено Тогда
		
		Если Не ПустаяСтрока(Объект.Описание) Тогда
			Форма.ПолноеОписаниеЗадачи = Форма.ПолноеОписаниеЗадачи + Объект.Описание;
		КонецЕсли;	
		
		ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(Объект.БизнесПроцесс);
		Если Не ПустаяСтрока(ИсторияВыполнения) Тогда
			
			Форма.ПолноеОписаниеЗадачи = 
				Форма.ПолноеОписаниеЗадачи 
				+ Символы.ПС 
				+ Символы.ПС
				+ НСТР("ru = 'История выполнения:'")
				+ Символы.ПС 
				+ "------------------------------------"
				+ Символы.ПС 
				+ ИсторияВыполнения;
			
		КонецЕсли
		
	КонецЕсли;	
	// Закончили заполнять реквизит ПолноеОписаниеЗадачи	
	
	Попытка
		Если Форма.Объект.СрокИсполнения < ТекущаяДатаСеанса() И Форма.Объект.СрокИсполнения <> '00010101000000' Тогда 
			Форма.ЗадачаПросрочена = Истина;
		КонецЕсли;	
	Исключение	
		// У формы может не быть реквизита ЗадачаПросрочена
	КонецПопытки;
	
	ЗаполнитьДеревоПриложений(Форма);
	ОбновитьДоступностьКомандДереваПриложений(Форма);
	
	// Обработчик подсистемы "Свойства"
	ИмяГруппыДопРеквизитов = "ГруппаДополнительныеРеквизиты";
	Если Форма.Элементы.Найти("ГруппаДополнительныеРеквизиты") = Неопределено Тогда
		ИмяГруппыДопРеквизитов = Неопределено;
	КонецЕсли;	
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, Объект, ИмяГруппыДопРеквизитов);
	РаботаСБизнесПроцессами.ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, Объект.БизнесПроцесс);
	
	// Учет проектов
	Если ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат") 
	   И Форма.Элементы.Найти("ТрудозатратыФакт") <> Неопределено 
	Тогда 
	
	    Форма.ТрудозатратыФакт = ПолучитьФактическиеТрудозатратыПоЗадаче(Объект.Ссылка);
		
		ТекстПодсказки = НСтр("ru = 'Для указания трудозатрат используйте команды
									|""Включить хронометраж"" и ""Указать трудозатраты""'");
		Форма.Элементы.ТрудозатратыФакт.Подсказка = ТекстПодсказки;
		
		УстановитьПривилегированныйРежим(Истина);
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатратФакт = Строка(Объект.ПроектнаяЗадача.ЕдиницаТрудозатратФакт);
			ЕдиницаТрудозатратФакт = ВРег(Лев(ЕдиницаТрудозатратФакт, 1)) + Сред(ЕдиницаТрудозатратФакт, 2);
			Форма.Элементы.ТрудозатратыФакт.Заголовок = ЕдиницаТрудозатратФакт;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда
			ЕдиницаТрудозатратЗадач = Строка(Объект.Проект.ЕдиницаТрудозатратЗадач);
			ЕдиницаТрудозатратЗадач = ВРег(Лев(ЕдиницаТрудозатратЗадач, 1)) + Сред(ЕдиницаТрудозатратЗадач, 2);
			
			Форма.Элементы.ТрудозатратыФакт.Заголовок = ЕдиницаТрудозатратЗадач;
		Иначе
			ЕдиницаТрудозатратЗадач = Строка(Константы.ОсновнаяЕдиницаТрудозатрат.Получить());
			ЕдиницаТрудозатратЗадач = ВРег(Лев(ЕдиницаТрудозатратЗадач, 1)) + Сред(ЕдиницаТрудозатратЗадач, 2);
			
			Форма.Элементы.ТрудозатратыФакт.Заголовок = ЕдиницаТрудозатратЗадач;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СформироватьУведомлениеДляИсполненияЗадачиПоПочте") <> Неопределено Тогда
		Форма.Элементы.СформироватьУведомлениеДляИсполненияЗадачиПоПочте.Доступность =
			ВыполнениеЗадачПоПочтеСервер.ПроверитьДоступностьФормированияУведомлений(Объект.Ссылка);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ДекорацияЗадатьВопросАвтору") <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыВыполненияЗадач") Тогда
			БизнесПроцессыИЗадачиКлиентСервер.ЗаполнитьЗаголовокДекорацииЗадатьВопросАвтору(Форма);
		Иначе
			Форма.Элементы.ДекорацияЗадатьВопросАвтору.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач") Тогда
		
		Если Форма.Элементы.Найти("ЗадачаЗадачаИсполнителяСогласоватьПереносСрока") <> Неопределено Тогда
			Форма.Элементы.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Видимость = 
				ЗначениеЗаполнено(Форма.Объект.СрокИсполнения);
		КонецЕсли;
		
		Если Форма.Элементы.Найти("СрокИсполнения") <> Неопределено
			И Форма.Элементы.СрокИсполнения.Вид = ВидПоляФормы.ПолеНадписи
			И ЗначениеЗаполнено(Форма.Объект.СрокИсполнения) Тогда
			
			Форма.Элементы.СрокИсполнения.ГиперСсылка = Истина;
			Форма.Элементы.СрокИсполнения.Подсказка =
				НСтр("ru = 'Кликните чтобы запросить изменение срока'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение элемента формы "Исполнитель"
Процедура УстановитьИсполнителя(Форма, Объект) Экспорт
	
	Если НЕ Объект.Исполнитель.Пустая() Тогда
		Форма.ИсполнительСтрокой = Объект.Исполнитель;
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Истина;
	Иначе
		Форма.ИсполнительСтрокой = Строка(Объект.РольИсполнителя);
		
		Если Объект.ОсновнойОбъектАдресации <> Неопределено И НЕ Объект.ОсновнойОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ОсновнойОбъектАдресации;
		КонецЕсли;	
		
		Если Объект.ДополнительныйОбъектАдресации <> Неопределено И НЕ Объект.ДополнительныйОбъектАдресации.Пустая() Тогда
			Форма.ИсполнительСтрокой = Форма.ИсполнительСтрокой + ", " + Объект.ДополнительныйОбъектАдресации;
		КонецЕсли;	
		Форма.Элементы.ИсполнительСтрокой.КнопкаОткрытия = Ложь;
	КонецЕсли;

КонецПроцедуры	
	
Процедура ОбновитьДоступностьКомандДереваПриложений(Форма) Экспорт
	
	ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма);
	
КонецПроцедуры	

Процедура ЗаполнитьДеревоПриложений(Форма) Экспорт
	
	ЗаполнитьДеревоПриложенийПоПредметам(Форма, Форма.Объект.Предметы);
			
КонецПроцедуры

Процедура ЗаполнитьДеревоПриложенийПоПредметам(Форма, Предметы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Форма.Элементы.Найти("ДеревоПриложений") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоПриложений");
	Дерево.Строки.Очистить();
	
	ОтображатьУдаленныеПриложения = Форма.ОтображатьУдаленныеПриложения;
	
	Если НЕ ОтображатьУдаленныеПриложения Тогда
		
		КоличествоПредметов = 0;
		
		Для Каждого СтрПредмет ИЗ Предметы Цикл
			Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПредметов = Предметы.Количество();
	КонецЕсли;
	
	Если КоличествоПредметов = 0 Тогда
		ЗначениеВДанныеФормы(Дерево, Форма.ДеревоПриложений);
		Форма.Элементы.ДекорацияЗаголовокПриложений.Заголовок = НСтр("ru='Предметы:'");
		Возврат;
	Иначе
		Форма.Элементы.ДекорацияЗаголовокПриложений.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Предметы (%1):'"), КоличествоПредметов);
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если Не ОтображатьУдаленныеПриложения И СтрокаПредмета.Предмет.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Дерево.Строки.Добавить();
		Строка.Наименование = ОбщегоНазначенияДокументооборот.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП");
					
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
				
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет, ОтображатьУдаленныеПриложения);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоПриложений);
	
	Форма.Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
	Форма.Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			
КонецПроцедуры

Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет, ОтображатьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание,
		|	Файлы.ИндексКартинки,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ПометкаУдаления,
		|	Файлы.ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = СтрокаПредмета.Строки.Добавить();
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает представление предмета в карточке задачи.
// Если предмет задан, то он отображается в виде гиперссылки,
// если не задан, то в виде надписи Предмет не задан.
//
Процедура ФормаЗадачиИсполнителяУстановитьВидимостьПредмета(Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда	
		ПредметыЗадачи = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Форма.Объект);
		Если ПредметыЗадачи.Количество() > 0 Тогда
			Если Форма.Элементы.Найти("ПредметГиперссылка") <> Неопределено Тогда
				Форма.Элементы.ПредметГиперссылка.Видимость = Истина;
				Форма.Элементы.ПредметГиперссылка.Гиперссылка = Истина;
			КонецЕсли;
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				Форма.ПредметСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Форма.Объект.Предметы);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				// реквизита может не быть
			КонецПопытки;
		Иначе
			Если Форма.Элементы.Найти("ПредметГиперссылка") <> Неопределено Тогда
				Форма.Элементы.ПредметГиперссылка.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (Форма.Элементы.Найти("УстановитьПредмет") <> Неопределено) Или (Форма.Элементы.Найти("ДобавитьПредмет") <> Неопределено) Тогда
		ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает реквизит формы ТипПредмета и заполняет список выбора.
//
Процедура ФормаБизнесПроцессаУстановитьТипПредмета(Форма) Экспорт
	ИмяТипаПредмета = "";
	Если ЗначениеЗаполнено(Форма.Объект.Предмет) Тогда
		ИмяТипаПредмета = Строка(ТипЗнч(Форма.Объект.Предмет));
	КонецЕсли;
	СписокТипов = РаботаСФайламиВызовСервера.ПолучитьПредставленияТипов(Форма.Объект.Ссылка.Метаданные().Реквизиты.Предмет.Тип.Типы());
	Форма.ТипПредмета = "";
	Форма.Элементы.ТипПредмета.СписокВыбора.Очистить();
	Для Каждого Запись Из СписокТипов Цикл
		Форма.Элементы.ТипПредмета.СписокВыбора.Добавить(Запись.Значение, Запись.Представление);
		Если ИмяТипаПредмета = Запись.Представление Тогда
			Форма.ТипПредмета = Запись.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Устанавливает видимость команды УстановитьПредмет в карточке задачи в зависимости от ее состояния
//
Процедура ФормаЗадачиИсполнителяУстановитьДоступностьКомандыУстановитьПредмет(Форма) Экспорт
	Доступность = Не Форма.Объект.Выполнена;
	Если Форма.Элементы.Найти("УстановитьПредмет") <> Неопределено Тогда
		Форма.Элементы.УстановитьПредмет.Видимость = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("ГруппаДобавитьУдалить") <> Неопределено Тогда
		Форма.Элементы.ГруппаДобавитьУдалить.Видимость = Доступность;
	КонецЕсли;
	Если Форма.Элементы.Найти("ДеревоПриложенийКонтекстноеМенюГруппаДобавитьУдалить") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложенийКонтекстноеМенюГруппаДобавитьУдалить.Видимость = Доступность;
	КонецЕсли;
КонецПроцедуры

// Устанавливает видимость команды ИзменитьПредмет в карточке бизнес-процесса в зависимости от его состояния
//
Процедура ФормаБизнесПроцессаУстановитьДоступностьКомандыИзменитьПредмет(Форма) Экспорт
	
	Форма.Элементы.ИзменитьПредмет.Видимость = Форма.Объект.Стартован 
		И Не Форма.Объект.Завершен
		И Форма.Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван;	
	
КонецПроцедуры

// Включает/выключает отображение файлов, помеченных на удаление
//
Процедура ФормаБизнесПроцессаОтображатьУдаленныеФайлы(Форма) Экспорт
	
	Файлы = Форма.Файлы;
	Элементы = Форма.Элементы;
	
	ОтображатьУдаленныеФайлы = Не Файлы.Параметры.Элементы.Найти("ОтображатьУдаленные").Значение;
	Файлы.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленныеФайлы);
	
	Элементы.ФайлыКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленныеФайлы;
	Элементы.Файлы.Обновить();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Форма.ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		ОтображатьУдаленныеФайлы);
	
КонецПроцедуры

// Устанавливает доступность элементов формы процесса в зависимости от состояния процесса
//
// Параметры:
//   - Форма - Управляемая форма бизнес-процесса
//
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(Форма) Экспорт
	
	// Вычисление признака отложенного старта
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НастройкаОтложенногоСтарта", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	НастройкаОтложенногоСтарта = СтруктураПоиска.НастройкаОтложенногоСтарта;;
	
	ПроцессСтартованОтложенно = Ложь;
	Если ЗначениеЗаполнено(НастройкаОтложенногоСтарта) Тогда
		ПроцессСтартованОтложенно = 
			НастройкаОтложенногоСтарта.Состояние = Перечисления.СостоянияОтложенныхПроцессов.ГотовКСтарту
			ИЛИ НастройкаОтложенногоСтарта.Состояние = Перечисления.СостоянияОтложенныхПроцессов.Стартован;
	КонецЕсли;
	
	// Установка видимости кнопок ФормаСтартИЗакрыть и ФормаЗаписатьИЗакрыть
	Если Форма.Объект.ПометкаУдаления
		ИЛИ Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		ИЛИ Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		Форма.Элементы.ФормаСтартИЗакрыть.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
		
	ИначеЕсли Форма.Объект.Стартован ИЛИ ПроцессСтартованОтложенно Тогда
		Форма.Элементы.ФормаСтартИЗакрыть.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	Иначе
		Форма.Элементы.ФормаСтартИЗакрыть.Видимость = Истина;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = 
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость;
		
	Форма.Элементы.ФормаСтартИЗакрыть.КнопкаПоУмолчанию = 
		Форма.Элементы.ФормаСтартИЗакрыть.Видимость;
		
	// Установка свойств для группы ГруппаОтложенСтарт и ее подчиненных элементов
	Если НЕ Форма.Объект.Стартован
		И ЗначениеЗаполнено(НастройкаОтложенногоСтарта) Тогда
		
		Если НастройкаОтложенногоСтарта.Состояние =
				Перечисления.СостоянияОтложенныхПроцессов.ГотовКСтарту Тогда // Если процесс был запущен отложено.
				
			ТекстДекорации = НСтр("ru = 'Старт отложен до %1'");
			ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
			ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд ММММ гггг, ЧЧ:мм'", "ДФ='дд ММММ гггг'");
			
			Форма.Элементы.ДекорацияСтартОтложенТекст.Заголовок = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстДекорации,
					Формат(НастройкаОтложенногоСтарта.ДатаОтложенногоСтарта, ФорматДаты));
			Форма.Элементы.ГруппаОтложенСтарт.Видимость = Истина;
			Форма.Элементы.ДекорацияСтартОтложенТекст.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
			Форма.Элементы.ДекорацияСтартОтложен.Картинка = БиблиотекаКартинок.ЧасыПроцессОтложен;
			Форма.Элементы.ДекорацияСтартОтложенТекст.Гиперссылка = Ложь;
			
		ИначеЕсли НастройкаОтложенногоСтарта.Состояние = 
				Перечисления.СостоянияОтложенныхПроцессов.СтартОтменен Тогда // Если при запуске были ошибки.
				
			Форма.Элементы.ДекорацияСтартОтложенТекст.Заголовок =
				НастройкаОтложенногоСтарта.ПричинаОтменыОтложенногоСтарта;
			Форма.Элементы.ГруппаОтложенСтарт.Видимость = Истина;
			Форма.Элементы.ДекорацияСтартОтложенТекст.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Форма.Элементы.ДекорацияСтартОтложен.Картинка =
				БиблиотекаКартинок.ЧасыСВосклицательнымЗнакомПроцессОтложен;
				
			Форма.Элементы.ДекорацияСтартОтложенТекст.Гиперссылка = Истина;
			
		Иначе
			Форма.Элементы.ГруппаОтложенСтарт.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		Форма.Элементы.ГруппаОтложенСтарт.Видимость = Ложь;
	КонецЕсли;
	
	// Установка доступности элементов формы в зависимости
	// от прав доступа на бизнес-процесс.
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если НЕ Форма.Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(Форма.Объект.Ссылка).Изменение;
	КонецЕсли;
	
	Форма.Элементы.ФормаНастроитьОтложенныйСтарт.Доступность = 
		Форма.Элементы.ФормаНастроитьОтложенныйСтарт.Доступность
		И (ПравоНаИзменениеБизнесПроцесса
			ИЛИ Форма.Объект.Ссылка.Пустая());
	
	ОбновитьДоступностьПолейСостояния(Форма, ПравоНаИзменениеБизнесПроцесса);
	
КонецПроцедуры

// Устанавливает доступность команд остановки и продолжения и поля состояния
//
// Параметры:
//   - Форма - Управляемая форма бизнес-процесса
//   - ПравоНаИзменениеБизнесПроцесса - Булево - принимает значение Истина, если
//                                      процесс доступен для изменения, иначе Ложь.
//
Процедура ОбновитьДоступностьПолейСостояния(Форма, ПравоНаИзменениеБизнесПроцесса) Экспорт
		
	Если Форма.Объект.Завершен Тогда
		Форма.Элементы.ГруппаОстановлен.Видимость = Ложь;	
		Форма.Элементы.ГруппаПрерван.Видимость = Ложь;
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрервать.Видимость = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Форма.Элементы.ГруппаОстановлен.Видимость = Ложь;				
		Форма.Элементы.ГруппаПрерван.Видимость = Истина;
		
		ОтобразитьНаФормеПричинуПрерывания(Форма);		
		
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрервать.Видимость = Ложь;		
		Форма.ТолькоПросмотр = Истина;
		
	ИначеЕсли Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
		Форма.Элементы.ГруппаОстановлен.Видимость = Истина;
		Форма.Элементы.ГруппаПрерван.Видимость = Ложь;
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Истина;
		Форма.Элементы.ФормаПрервать.Видимость = Истина;		
		Форма.ТолькоПросмотр = Истина;
	ИначеЕсли Форма.Объект.Стартован Тогда
		Форма.Элементы.ГруппаОстановлен.Видимость = Ложь;
		Форма.Элементы.ГруппаПрерван.Видимость = Ложь;
		Форма.Элементы.ФормаОстановить.Видимость = Истина;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрервать.Видимость = Истина;		
		Форма.ТолькоПросмотр = Ложь;
	Иначе
		Форма.Элементы.ГруппаОстановлен.Видимость = Ложь;
		Форма.Элементы.ГруппаПрерван.Видимость = Ложь;
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Форма.Элементы.ФормаПрервать.Видимость = Ложь;
		Форма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// Установка видимостью кнопок ФормаПрервать, ФормаОстановить, ФормаПродолжитьБизнесПроцесс
	// в зависимости от наличия ведущей задачи (при вхождении в комплексный или составной процесс).
	Если ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		Форма.Элементы.ФормаПрервать.Видимость = Ложь;
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Элементы.ФормаПрервать.Доступность = Ложь;		
		Форма.Элементы.ФормаОстановить.Доступность = Ложь;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Доступность = Ложь;
	Иначе	
		Форма.Элементы.ФормаПрервать.Доступность = Истина;		
		Форма.Элементы.ФормаОстановить.Доступность = Истина;
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Доступность = Истина;		
	КонецЕсли;
	
	// Установка доступности кнопок ФормаПрервать, ФормаОстановить, ФормаПродолжитьБизнесПроцесс
	// с учетом прав доступа на бизнес-процесс.
	
	Форма.Элементы.ФормаПрервать.Доступность = 
		Форма.Элементы.ФормаПрервать.Доступность
		И ПравоНаИзменениеБизнесПроцесса;
		
	Форма.Элементы.ФормаОстановить.Доступность = 
		Форма.Элементы.ФормаОстановить.Доступность
		И ПравоНаИзменениеБизнесПроцесса;
		
	Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Доступность = 
		Форма.Элементы.ФормаПродолжитьБизнесПроцесс.Доступность
		И ПравоНаИзменениеБизнесПроцесса;
	
КонецПроцедуры

Процедура ОтобразитьНаФормеПричинуПрерывания(Форма) Экспорт
	
	ПричинаПрерывания = Форма.Объект.ПричинаПрерывания;
	Если ПустаяСтрока(ПричинаПрерывания) Тогда
		Форма.Элементы.ДекорацияПричинаПрерывания.Заголовок = НСтр("ru = 'Процесс прерван'");	
	Иначе			
		ЗаголовокДекорации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процесс прерван: %1'"),
			ПричинаПрерывания);
		Форма.Элементы.ДекорацияПричинаПрерывания.Заголовок = ЗаголовокДекорации;	
	КонецЕсли;				
	
КонецПроцедуры

Функция ЗначенияДополнительныхРеквизитовИзменились(ПерваяТабличнаяЧасть, ВтораяТабличнаяЧасть)
	
	Результат = Ложь;
	
	Если ПерваяТабличнаяЧасть.Количество() <> ВтораяТабличнаяЧасть.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого СтрокаПервойТабличнойЧасти Из ПерваяТабличнаяЧасть Цикл
		НайденнаяСтрока = ВтораяТабличнаяЧасть.Найти(СтрокаПервойТабличнойЧасти.Свойство, "Свойство");
		Если НайденнаяСтрока = Неопределено
			ИЛИ НайденнаяСтрока <> Неопределено
			И НайденнаяСтрока.Значение <> СтрокаПервойТабличнойЧасти.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//Выполняет копирование значений доп.реквизитов источника на форму бизнес-процесса. 
//Копируются значения совпадающих доп.реквизитов.
//
//Параметры:
//				ИсточникСсылка - ссылка на объект, значения доп.реквизитов которого копируются на форму
//				ФормаПроцесса - форма, на которую выполняется копирование значений доп.реквизитов
Процедура СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(ИсточникСсылка, ФормаПроцесса, КопироватьВсеРеквизиты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(ИсточникСсылка) 
		ИЛИ ИсточникСсылка.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено 
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из ИсточникСсылка.ДополнительныеРеквизиты Цикл
		СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
		МассивСтрок = ФормаПроцесса.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			ОписаниеДопРеквизитаНаФорме = МассивСтрок[0];
			Если ФормаПроцесса.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр И КопироватьВсеРеквизиты
				ИЛИ НЕ ФормаПроцесса.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр Тогда
				ФормаПроцесса[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение] = Реквизит.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Выполняет копирование значений доп.реквизитов из объекта-источника в объект-приемник
//Копируются значения совпадающих доп.реквизитов.
Процедура СкопироватьЗначенияДопРеквизитов(ИсточникОбъект, ПриемникОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИсточникОбъект = Неопределено
		ИЛИ ИсточникОбъект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
	
	Если ТипЗнч(ПриемникОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		ДоступныеНаборыСвойствЗадачи = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ПриемникОбъект.Ссылка);	
	Иначе
		ДоступныеНаборыСвойствЗадачи = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ПриемникОбъект);
	КонецЕсли;
	
	Для Каждого Реквизит Из ИсточникОбъект.ДополнительныеРеквизиты Цикл
		Для Каждого ДоступныйНабор Из ДоступныеНаборыСвойствЗадачи Цикл
			Для Каждого СтрокаТабЧасти ИЗ ДоступныйНабор.Набор.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", СтрокаТабЧасти.Свойство);
				Если ТаблицаДопРеквизитов.НайтиСтроки(СтруктураПоиска).Количество() = 0 
					И Реквизит.Свойство = СтрокаТабЧасти.Свойство Тогда
					НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
					НоваяСтрока.Свойство = СтрокаТабЧасти.Свойство;
					НоваяСтрока.Значение = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДопРеквизит Из ТаблицаДопРеквизитов Цикл
		СтруктураПоиска = Новый Структура("Свойство", ДопРеквизит.Свойство);
		НайденныеСтроки = ПриемникОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаСвойства = НайденныеСтроки[0];
		Иначе
			СтрокаСвойства = ПриемникОбъект.ДополнительныеРеквизиты.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСвойства, ДопРеквизит, "Свойство,Значение");
	КонецЦикла;

	//для задач дополнительно обрабатывается предмет бизнес-процесса
	Если ТипЗнч(ПриемникОбъект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И  БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИсточникОбъект.Ссылка)) Тогда
		// Заполним свойства по всем предметам начиная с первого
		Для каждого СтрокаПредмета из ИсточникОбъект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				СкопироватьЗначенияДопРеквизитов(СтрокаПредмета.Предмет, ПриемникОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает режим ТолькоПросмотр у наследованных доп.реквизитов
Процедура ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, ИсточникКопирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИсточникКопирования = Неопределено 
		ИЛИ ИсточникКопирования.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено 
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОписаниеДопРеквизитаНаФорме Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		ДопРеквизитЕстьВИсточникеКопирования = Ложь;
		ЗначениеДопРеквизитаВИсточникеКопирования = Неопределено;
		Для каждого ДопРеквизитИсточника Из ИсточникКопирования.ДополнительныеРеквизиты Цикл
			Если ДопРеквизитИсточника.Свойство = ОписаниеДопРеквизитаНаФорме.Свойство Тогда
				ДопРеквизитЕстьВИсточникеКопирования = Истина;
				ЗначениеДопРеквизитаВИсточникеКопирования = ДопРеквизитИсточника.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Элементы[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение].ТолькоПросмотр = ДопРеквизитЕстьВИсточникеКопирования 
			И ЗначениеДопРеквизитаВИсточникеКопирования = Форма[ОписаниеДопРеквизитаНаФорме.ИмяРеквизитаЗначение];
			
	КонецЦикла;
	
	//для задач дополнительно обрабатывается предмет бизнес-процесса
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И  БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИсточникКопирования.Ссылка)) Тогда
		Для каждого СтрокаПредмета из ИсточникКопирования.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, СтрокаПредмета.Предмет);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция НаборыДопРеквизитовПересекаются(Объект1, Объект2)
	
	ДоступныеНаборыСвойств1 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект1);	
	ДоступныеНаборыСвойств2 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект2);
	
	Для Каждого ДоступныйНабор1 Из ДоступныеНаборыСвойств1 Цикл
		Для Каждого СтрокаТабЧасти1 ИЗ ДоступныйНабор1.Набор.ДополнительныеРеквизиты Цикл
			
			Для Каждого ДоступныйНабор2 Из ДоступныеНаборыСвойств2 Цикл
				Для Каждого СтрокаТабЧасти2 ИЗ ДоступныйНабор2.Набор.ДополнительныеРеквизиты Цикл
					Если СтрокаТабЧасти1.Свойство = СтрокаТабЧасти2.Свойство Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//обработчик записи предмета бизнес-процесса
Процедура ПредметБизнесПроцессаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизитыИзменились = ЗначенияДополнительныхРеквизитовИзменились(Источник.ДополнительныеСвойства.ДополнительныеРеквизиты, Источник.ДополнительныеРеквизиты);
	Если Не ДопРеквизитыИзменились Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		ТекстЗапроса = "";
		Для Каждого ОбъектМетаданных Из Метаданные.БизнесПроцессы Цикл
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ")
			+ "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(ПустаяСтрока(ТекстЗапроса),"РАЗРЕШЕННЫЕ","") + "
			|	Предметы.Ссылка
			|ИЗ
			|	БизнесПроцесс.%Таблица%.Предметы КАК Предметы
			|ГДЕ
			|	Предметы.Предмет = &Предмет И Предметы.РольПредмета = &Основной";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Таблица%", ОбъектМетаданных.Имя);
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
		Запрос.УстановитьПараметр("Основной", Перечисления.РолиПредметов.Основной);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			БизнесПроцессыПоПредмету = Результат.Выбрать();
			Пока БизнесПроцессыПоПредмету.Следующий() Цикл
				БизнесПроцессОбъект = БизнесПроцессыПоПредмету.Ссылка.ПолучитьОбъект();
				Если НаборыДопРеквизитовПересекаются(Источник, БизнесПроцессОбъект) Тогда
					ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
					СкопироватьЗначенияДопРеквизитов(Источник, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
				ОбновитьДопРеквизитыУЗадачБизнесПроцесса(БизнесПроцессОбъект, Источник);
			КонецЦикла;
		КонецЕсли;
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Источник.Метаданные(),
			Источник.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДопРеквизитыУЗадачБизнесПроцесса(ОбъектБизнесПроцесс, Предмет)
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка
		МассивЗадачБизнесПроцесса = ПолучитьМассивЗадачПоБизнесПроцессу(ОбъектБизнесПроцесс.Ссылка, Истина);
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Задача Из МассивЗадачБизнесПроцесса Цикл

			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			Если НаборыДопРеквизитовПересекаются(ОбъектБизнесПроцесс, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектБизнесПроцесс, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			Если НаборыДопРеквизитовПересекаются(Предмет, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ЗадачаОбъект, Предмет);
		КонецЦикла;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Задача.Ссылка.Метаданные(),
			Задача.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ОбъектЗадача, Предмет)
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		МассивБизнесПроцессовВедущаяЗадача = ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ВедущаяЗадача", Истина);
		Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовВедущаяЗадача Цикл		
			БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
			Если НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
			Если НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
		КонецЦикла;

		Если Метаданные.БизнесПроцессы.Исполнение.Реквизиты.Найти("ГлавнаяЗадача") <> Неопределено Тогда
			МассивБизнесПроцессовГлавнаяЗадача = ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ГлавнаяЗадача", Истина);
			Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовГлавнаяЗадача Цикл
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
				Если НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
				Если НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			БизнесПроцессОбъект.Метаданные(),
			БизнесПроцессОбъект.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПредметБизнесПроцессаПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	Источник.ДополнительныеСвойства.Вставить(
			"ДополнительныеРеквизиты", 
			Источник.Ссылка.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормы(Предмет, Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписыватьВсеРеквизиты = (Форма.Объект.Ссылка.Метаданные().Реквизиты.Найти("ГлавнаяЗадача") = Неопределено) 
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.ГлавнаяЗадача);
	
	//копирование доп.реквизитов предмета бизнес-процесса в процесс
	СкопироватьЗначенияДопРеквизитовВФормуБизнесПроцесса(Предмет, Форма, ЗаписыватьВсеРеквизиты);
	
	//скопированные элементы редактирования устанавливаются в доступ "на чтение"
	ЗаблокироватьНаФормеСкопированныеДопРеквизиты(Форма, Предмет);

КонецПроцедуры

Процедура РезультатыВыполненияПередЗаписьюБизнесПроцесса(Источник, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Если Источник.Завершен И Не ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "Завершен") Тогда
			Источник.ДополнительныеСвойства.Вставить("ОбработатьЗавершениеБизнесПроцесса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура БизнесПроцессПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Запись результата выполнения процесса
	Если Источник.ДополнительныеСвойства.Свойство("ОбработатьЗавершениеБизнесПроцесса") Тогда
		
		РезультатВыполнения = Неопределено;
		
		МетаданныеИсточника = Источник.Метаданные();
		МенеджерПроцесса = БизнесПроцессы[МетаданныеИсточника.Имя];
		
		ЕстьМетодРезультатВыполненияПроцесса = Ложь;
		Попытка
			ЕстьМетодРезультатВыполненияПроцесса = МенеджерПроцесса.ЕстьМетодРезультатВыполненияПроцесса();
		Исключение
			// В модуле менеджера процесса может не быть метода ЕстьМетодРезультатВыполненияПроцесса
		КонецПопытки;
		
		Если ЕстьМетодРезультатВыполненияПроцесса Тогда
			РезультатВыполнения = МенеджерПроцесса.РезультатВыполненияПроцесса(Источник.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
			РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(Источник.Ссылка, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление сведений о дочерних процессах
	Если ЭтоДочернийПроцесс(Источник) Тогда
		
		РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Источник.Ссылка, Источник.ВедущаяЗадача);
		Попытка
			РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Источник.Ссылка, Источник.ГлавнаяЗадача);
		Исключение	
			// У процесса может не быть свойства ГлавнаяЗадача
		КонецПопытки;
		
		// Обновление рабочей группы родительских процессов
		ТаблицаУчастников = Новый Массив;
		ВсеУчастники = ПолучитьВсехУчастниковПроцесса(Источник.Ссылка);
		Для каждого Эл Из ВсеУчастники Цикл
			Ст = Новый Структура;
			Ст.Вставить("Участник", Эл.Значение.Участник);
			Ст.Вставить("ОсновнойОбъектАдресации", Эл.Значение.ОсновнойОбъектАдресации);
			Ст.Вставить("ДополнительныйОбъектАдресации", Эл.Значение.ДополнительныйОбъектАдресации);
			ТаблицаУчастников.Добавить(Ст);
		КонецЦикла;
		
		РаботаСРабочимиГруппами.ОбновитьРабочиеГруппыРодительскихПроцессов(
			Источник.Ссылка, ТаблицаУчастников);
		
	КонецЕсли;	
	
	// Обновление дополнительных реквизитов
	Если Источник.ДополнительныеСвойства.Свойство("ДополнительныеРеквизиты") Тогда
		
		ДопРеквизитыИзменились = ЗначенияДополнительныхРеквизитовИзменились(Источник.ДополнительныеСвойства.ДополнительныеРеквизиты, Источник.ДополнительныеРеквизиты);
		Если Не ДопРеквизитыИзменились Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ВнешняяТранзакция = ТранзакцияАктивна();
			Если Не ВнешняяТранзакция Тогда
				НачатьТранзакцию();
			КонецЕсли;
			Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Источник,, Истина);
			Для Каждого Предмет Из Предметы Цикл
				ОбновитьДопРеквизитыУЗадачБизнесПроцесса(Источник, Предмет);
			КонецЦикла;
			Если Не ВнешняяТранзакция Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		Исключение 
			Инфо = ИнформацияОбОшибке();
			Если Не ВнешняяТранзакция Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник.Ссылка,
				ПодробноеПредставлениеОшибки(Инфо));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает видимость элемента управления ОтменитьВыполнение
//
// Параметры:
//   Форма - УправляемаяФорма - форма задачи
//
Процедура УстановитьВидимостьКомандыОтменитьВыполнениеЗадачи(Форма) Экспорт
	
	ЗадачуМожноОтменить = БизнесПроцессыИЗадачиВызовСервера.ЗадачуМожноОтменить(Форма.Объект.Ссылка);
	Форма.Элементы.ОтменитьВыполнение.Видимость = НЕ ЗадачуМожноОтменить.Отказ;
	
КонецПроцедуры

// Обновляет отображение элементов формы после отмены выполнения задачи
//
// Параметры:
//   Форма - УправляемаяФорма - форма задачи
//   Объект - ДанныеФормыСтруктура (ЗадачаОбъект.ЗадачаИсполнителя) - основной объект формы.
//
Процедура ФормаЗадачиОбновитьОтображениеЭлементовПослеОтменыВыполнения(Форма, Объект) Экспорт
	
	Форма.Прочитать();
	
	Форма.НачальныйПризнакВыполнения = Объект.Выполнена;
	
	Форма.ТолькоПросмотр = Объект.Выполнена;
	
	Если Форма.Элементы.Найти("ДеревоПриложений") <> Неопределено Тогда
		Форма.Элементы.ДеревоПриложений.ИзменятьСоставСтрок = Истина;
	КонецЕсли;
	
	Объект.ДатаИсполнения = ТекущаяДатаСеанса();
	
	Форма.Элементы.ГруппаКомандыВыполнения.Видимость = Истина;
	Форма.Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
	
	Если Форма.Элементы.Найти("ПолноеОписаниеЗадачи") <> Неопределено Тогда
		
		Форма.ПолноеОписаниеЗадачи = "";
		
		Если Не ПустаяСтрока(Объект.Описание) Тогда
			Форма.ПолноеОписаниеЗадачи = Форма.ПолноеОписаниеЗадачи + Объект.Описание;
		КонецЕсли;	
		
		ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(Объект.БизнесПроцесс);
		Если Не ПустаяСтрока(ИсторияВыполнения) Тогда
			
			Форма.ПолноеОписаниеЗадачи = 
			Форма.ПолноеОписаниеЗадачи 
			+ Символы.ПС 
			+ Символы.ПС
			+ НСТР("ru = 'История выполнения:'")
			+ Символы.ПС 
			+ "------------------------------------"
			+ Символы.ПС 
			+ ИсторияВыполнения;
			
		КонецЕсли
		
	КонецЕсли;
	
	ОбновитьДоступностьКомандДереваПриложений(Форма);
	
	Форма.Элементы.ДобавитьПредмет.Доступность = Истина;
	
	Форма.Элементы.ОтменитьВыполнение.Видимость = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
// Общие обработчики форм бизнес-процессов

// Выполняет проверки перед записью на сервере бизнес-процесса из формы
//
// Параметры:
//   Отказ - Булево
//   ТекущийОбъект - БизнесПроцессОбъект
//   ПараметрыЗаписи - Структура
//   Форма - УправляемаяФорма - форма бизнес-процесс
//
Процедура ПередЗаписьюНаСервереФормаБизнесПроцесса(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	
	// Проверка заполнения наименования
	Если ТекущийОбъект.Стартован
		И НЕ ЗначениеЗаполнено(ТекущийОбъект.Наименование) Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru = 'Поле ""Наименование"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Форма.Объект.Ссылка,
			"Объект.Наименование");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервереФормаБизнесПроцесса(ТекущийОбъект, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Форма.Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Форма.Объект);
	УстановитьПривилегированныйРежим(Ложь);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти
