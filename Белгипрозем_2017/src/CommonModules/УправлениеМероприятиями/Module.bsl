////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с мероприятиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает актуальные состояния мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояния которого будут получены.
//
// Возвращаемое значение:
//  Массив - Массив состояний мероприятия.
//
Функция ПолучитьВсеСостоянияМероприятия(Мероприятие) Экспорт
	
	МассивСостояний = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат МассивСостояний;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятий.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий КАК СостоянияМероприятий
	|ГДЕ
	|	СостоянияМероприятий.Мероприятие = &Мероприятие";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат МассивСостояний;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Состояние");
	
КонецФункции

// Получает актуальное состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет получено.
//  Тип - Строка - Тип состояния мероприятия, которое необходимо получить.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияМероприятий - Состояние мероприятия указанного типа.
//
Функция ПолучитьСостояниеМероприятия(Мероприятие, Тип) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	КонецЕсли;	
	
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	МассивСостояний = ПолучитьВсеСостоянияМероприятия(Мероприятие);
	
	Для Каждого Состояние Из МассивСостояний Цикл
		Если СоответствиеСостояний.Получить(Состояние) = Тип Тогда 
			Возврат Состояние;
		КонецЕсли;	
	КонецЦикла;	

	Возврат Перечисления.СостоянияМероприятий.ПустаяСсылка();
	
КонецФункции

// Устанавливает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет установлено.
//  Период - Дата - Момент времени установки состояния.
//  Состояние - ПеречислениеСсылка.СостоянияМероприятий - Состояние, которое будет установлено.
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Объект, который устанавливает состояние.
//
Процедура ЗаписатьСостояниеМероприятия(Мероприятие, Период, Состояние, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// история
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
	// состояние
	СоответствиеСостояний = ПолучитьСоответствиеСостояний();
	ТекущееСостояние = ПолучитьСостояниеМероприятия(Мероприятие, СоответствиеСостояний.Получить(Состояние));
	
	МенеджерЗаписи = РегистрыСведений.СостоянияМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = ТекущееСостояние;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры	

// Очищает состояние мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого будет очищено.
//  НачальноеСостояние - ПеречислениеСсылка.СостоянияМероприятий - Состояние, которое будет очищено.
//
Процедура ОчиститьСостояниеМероприятия(Мероприятие, НачальноеСостояние) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияМероприятий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Мероприятие = Мероприятие;
	МенеджерЗаписи.Состояние = НачальноеСостояние;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

// Удаляет все состояния мероприятия, установленные объектом Установил.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, состояние которого удаляются.
//  Установил - БизнесПроцессСсылка, СправочникСсылка.Пользователи - Объект, который устанавливал состояния.
//
Процедура УдалитьСостоянияМероприятия(Мероприятие, Установил) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// история
	Набор = РегистрыСведений.ИсторияСостоянийМероприятий.СоздатьНаборЗаписей();
	Набор.Отбор.Мероприятие.Установить(Мероприятие);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	// состояния
	Набор = РегистрыСведений.СостоянияМероприятий.СоздатьНаборЗаписей();
	Набор.Отбор.Мероприятие.Установить(Мероприятие);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
КонецПроцедуры	

// Возвращает ключ актуального состояния документа.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого будет получен ключ состояния.
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи - Ключ записи состояния мероприятия.
//
Функция ПолучитьКлючСостоянияМероприятия(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияМероприятийСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.СостоянияМероприятий.СрезПоследних(, Мероприятие = &Мероприятие) КАК СостоянияМероприятийСрезПоследних";
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат РегистрыСведений.СостоянияМероприятий.СоздатьКлючЗаписи( Новый Структура("Период, Мероприятие", Выборка.Период, Мероприятие) );
	
КонецФункции

// Возвращает Истина, если переданное значение является мероприятием, с учетом
// функциональной опции ИспользоватьУправлениеМероприятиями.
//
// Параметры:
//  Объект - СправочникСсылка.Мероприятия - Проверяемый объект.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлен объект, 
//                если он является мероприятием.
//
// Возвращаемое значение:
//  Булево - Признак того является ли объект мероприятием.
//
Функция ЭтоМероприятие(Объект, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Мероприятия") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Мероприятие = Объект;
	Возврат Истина;
	
КонецФункции	

// Возвращает Истина, если переданное значение является мероприятием (протоколом, программой).
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                материалом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоМатериалМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Возврат ЭтоПротоколМероприятия(Документ, Мероприятие) 
		Или ЭтоПрограммаМероприятия(Документ, Мероприятие);
	
КонецФункции	

// Возвращает Истина, если переданное значение является протоколом мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                протоколом которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПротоколМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПротокол = &Протокол
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Протокол", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если переданное значение является программой мероприятия.
//
// Параметры:
//  Документ - СправочникСсылка.ВнутренниеДокументы - Проверяемый документ.
//  Мероприятие - СправочникСсылка.Мероприятия - Параметр, в который будет установлено мероприятие,
//                программой которого является документ.
//
// Возвращаемое значение:
//  Булево - Признак, является ли документ материалом мероприятия.
//
Функция ЭтоПрограммаМероприятия(Документ, Мероприятие = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.МатериалПрограмма = &Программа
	|	И (НЕ Мероприятия.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Программа", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Мероприятие = Выборка.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Возвращает следующее мероприятие.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить
//                следующее мероприятие.состояние которого будет получено.
//
// Возвращаемое значение:
//  СправочникСсылка.Мероприятия - Следующее мероприятие.
//
Функция ПолучитьСледующееМероприятие(Мероприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Мероприятия.Ссылка
	|ИЗ
	|	Справочник.Мероприятия КАК Мероприятия
	|ГДЕ
	|	Мероприятия.ПредыдущееМероприятие = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Мероприятия.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции	

// Возвращает участников мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, для которого необходимо получить участников.
//  ИсключитьКорреспондентов - Булево - Признак необходимости исключения корреспондентов из списка участников.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Участники мероприятия.
//   * Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, участник которого указан в строке.
//   * Исполнитель - СправочникСсылка.Корреспонденты, СправочникСсылка.ЛичныеАдресаты,
//                   СправочникСсылка.РолиИсполнителей, СправочникСсылка.Пользователи,
//                   СправочникСсылка.КонтактныеЛица - Участник мероприятия.
//   * ОсновнойОбъектАдресации - СправочникСсылка.Корреспонденты, СправочникСсылка.Проекты,
//                               СправочникСсылка.Подразделения, СправочникСсылка.Организации
//                               - Основной объект адресации, если участник является ролью.
//   * ДополнительныйОбъектАдресации - СправочникСсылка.Корреспонденты, СправочникСсылка.Проекты,
//                                     СправочникСсылка.Подразделения, СправочникСсылка.Организации
//                                     - Дополнительный объект адресации, если участник является ролью.
//   * ЯвкаОбязательна - Булево - Признак обязательной явки участника.
//   * Отсутствовал - Булево - Признак того что участник отсутствовал.
//   * СостояниеПриглашения - ПеречислениеСсылка.СостоянияПриглашения - Состояние приглашения участника.
//   * Порядок - Число - Порядок сортировки участников.
//
Функция ПолучитьУчастниковМероприятия(Мероприятие, ИсключитьКорреспондентов = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Мероприятие);
	НаборЗаписей.Прочитать();
	
	Записи = НаборЗаписей.Выгрузить();
	
	Если ИсключитьКорреспондентов Тогда 
		КоличествоЗаписей = Записи.Количество();
		Для Инд = 1 По КоличествоЗаписей Цикл
			Запись = Записи[КоличествоЗаписей-Инд];
			Если ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
					Или ТипЗнч(Запись.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда 
				Продолжить;
			КонецЕсли;
			Записи.Удалить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Записи.Сортировать("Порядок");
	
	Возврат Записи;
	
КонецФункции	

// Устанавливает состояние мероприятия из бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, из которого устанавливается состояние мероприятия.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута, из которой устанавливается
//                  состояние мероприятия.Текстовое описание параметра процедуры (функции).
//
Процедура УстановитьСостояниеМероприятияИзБизнесПроцесса(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат;
	КонецЕсли;	
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(БизнесПроцесс,, Истина);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Состояние = Неопределено;
		Мероприятие = Неопределено;
		
		Если ЭтоМероприятие(Предмет) Тогда 
			Мероприятие = Предмет;
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда 
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ЗапроситьМатериалы" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПровестиМероприятие" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "ПодготовитьПротокол" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол" Тогда 
						Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 	
						Состояние = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
						КонецЕсли;
					ИначеЕсли БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму" Тогда 
						Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена;
						Иначе	
							Состояние = Перечисления.СостоянияМероприятий.ПрограммаУтверждена;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Старт Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление;
					КонецЕсли;	
					
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Ознакомление.ТочкиМаршрута.Завершение Тогда 
					
					Если БизнесПроцесс.ЭтапОбработкиПредмета = "ОзнакомитьСМатериалами" Тогда 
						Состояние = Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились;
					КонецЕсли;	
						
				КонецЕсли;
				
			КонецЕсли;	
			
			
		ИначеЕсли ЭтоПротоколМероприятия(Предмет, Мероприятие) Тогда 
			
			Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение Тогда 	
					Состояние = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
				
				Если ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколСогласован;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 	
				
				Если ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка Тогда 
					Состояние = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
				ИначеЕсли ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата Тогда 	
					Если БизнесПроцесс.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
						Состояние = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
					Иначе	
						Состояние = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если Состояние <> Неопределено Тогда 
			УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
				Мероприятие, 
				ТекущаяДата(), 
				Состояние, 
				БизнесПроцесс.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры			

// Заполняет бизнес-процесс по мероприятию
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Заполняемый бизнес-процесс.
//  ДанныеЗаполнения - Структура, СправочникСсылка.ВнутренниеДокументы - Данные, по которым
//                     будет заполнен бизнес-процесс.
//
Процедура ЗаполнитьБизнесПроцессПоМероприятию(БизнесПроцесс, ДанныеЗаполнения) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда 
		Возврат;
	КонецЕсли;
	
	Мероприятие = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОперацияМероприятия") Тогда 
		
		Мероприятие = ДанныеЗаполнения.Мероприятие;
		ОперацияМероприятия = ДанныеЗаполнения.ОперацияМероприятия;
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);

			БизнесПроцесс.ЭтапОбработкиПредмета = ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "ЗапроситьМатериалы" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предоставить материалы по мероприятию ""%1""'"), Строка(Мероприятие));
				Программа = Мероприятие.Программа.Выгрузить(,"Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				Программа.Свернуть("Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
				
				Для Каждого Строка Из Программа Цикл
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Строка.Исполнитель;
				КонецЦикла;	
				БизнесПроцесс.СрокИсполнения = Мероприятие.ДатаНачала; 
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ИсполнитьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Исполнить протокол мероприятия ""%1""'"), Строка(Мероприятие));
				Для Каждого Строка Из Мероприятие.Протокол Цикл
					Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
						Продолжить;
					КонецЕсли;	
					
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Строка.Исполнитель;
					НоваяСтрока.ОсновнойОбъектАдресации = Строка.ОсновнойОбъектАдресации;
					НоваяСтрока.ДополнительныйОбъектАдресации = Строка.ДополнительныйОбъектАдресации;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.Описание = Строка.Решили;
				КонецЦикла;	
					
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ПровестиМероприятие" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Провести мероприятие ""%1""'"), Строка(Мероприятие));
				НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = Мероприятие.Председатель;
				БизнесПроцесс.СрокИсполнения = Мероприятие.ДатаОкончания; 
				БизнесПроцесс.Проверяющий = Неопределено;
				
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "ПодготовитьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подготовить протокол мероприятия ""%1""'"), Строка(Мероприятие));
				НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
				НоваяСтрока.Исполнитель = Мероприятие.Секретарь;
				
			КонецЕсли;	
			
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Ознакомление") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "ОзнакомитьСМатериалами" Тогда 
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ознакомиться с материалами по мероприятию ""%1""'"), Строка(Мероприятие));
				
				Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
				Для Каждого Строка Из Участники Цикл
					НоваяСтрока = БизнесПроцесс.Исполнители.Добавить();
					НоваяСтрока.Исполнитель = Строка.Исполнитель;
				КонецЦикла;	
				БизнесПроцесс.СрокИсполнения = Мероприятие.ДатаНачала; 
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда 

			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, ДанныеЗаполнения.Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ДанныеЗаполнения.ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "СогласоватьПротокол" Тогда 	
				
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласовать протокол мероприятия ""%1""'"), Строка(Мероприятие));
				
				Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
				БизнесПроцесс.Исполнители.Загрузить(Участники);
				
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, ДанныеЗаполнения.Мероприятие);
			
			БизнесПроцесс.ЭтапОбработкиПредмета = ДанныеЗаполнения.ОперацияМероприятия;
			
			Если ДанныеЗаполнения.ОперацияМероприятия = "УтвердитьПротокол" Тогда 
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Утвердить протокол мероприятия ""%1""'"), Строка(Мероприятие));
				БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			ИначеЕсли ДанныеЗаполнения.ОперацияМероприятия = "УтвердитьПрограмму" Тогда 	
				БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Утвердить программу мероприятия ""%1""'"), Строка(Мероприятие));
				БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			КонецЕсли;	
			
		КонецЕсли;	
		
	ИначеЕсли ЭтоПротоколМероприятия(ДанныеЗаполнения, Мероприятие) Тогда 
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "СогласоватьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Согласовать протокол мероприятия ""%1""'"), Строка(Мероприятие));
			Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие, Истина);
			БизнесПроцесс.Исполнители.Загрузить(Участники);
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Утвердить протокол мероприятия ""%1""'"), Строка(Мероприятие));
			БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			
		ИначеЕсли ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Исполнение") Тогда
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "ИсполнитьПротокол";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исполнить протокол мероприятия ""%1""'"), Строка(Мероприятие));
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПрограммаМероприятия(ДанныеЗаполнения, Мероприятие) Тогда 
		
		Если ТипЗнч(БизнесПроцесс.Ссылка) = Тип("БизнесПроцессСсылка.Утверждение") Тогда 
			
			ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие);
			БизнесПроцесс.ЭтапОбработкиПредмета = "УтвердитьПрограмму";
			БизнесПроцесс.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Утвердить программу мероприятия ""%1""'"), Строка(Мероприятие));
			БизнесПроцесс.Исполнитель = Мероприятие.Председатель;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Меняет папку для массива мероприятий на новую.
//
// Параметры:
//  МассивМероприятий - Массив - Мероприятия, у которых необходимо изменить папку.
//  НоваяПапка - СправочникСсылка.ПапкиМероприятий - Новая папка мероприятий.
//
// Возвращаемое значение:
//  Булево - Успешное изменение папки мероприятий.
//
Функция ИзменитьПапкуМероприятий(МассивМероприятий, НоваяПапка) Экспорт
	
	// Не указана новая папка
	Если Не ЗначениеЗаполнено(НоваяПапка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Нет элементов в массиве
	Если МассивМероприятий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Папка не изменилась
	Если МассивМероприятий[0].Папка = НоваяПапка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка прав мероприятий
	Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
		Если Не ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(МероприятиеСсылка).Изменение Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права на изменение мероприятия ""%1"".'"),
				Строка(МероприятиеСсылка));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого МероприятиеСсылка Из МассивМероприятий Цикл
			ЗаблокироватьДанныеДляРедактирования(МероприятиеСсылка);
			МероприятиеОбъект = МероприятиеСсылка.ПолучитьОбъект();
			МероприятиеОбъект.Папка = НоваяПапка;
			МероприятиеОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// По части наименования формирует список для выбора участника мероприятия.
//
// Параметры:
//  Текст - часть наименования, по которому выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораУчастника(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	Пользователи.Ссылка КАК Ссылка,
	|	СведенияОПользователях.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ПО Пользователи.Ссылка = СведенияОПользователях.Пользователь
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Текст
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	РолиИсполнителей.Ссылка,
	|	NULL
	|ИЗ
	|	Справочник.РолиИсполнителей КАК РолиИсполнителей
	|ГДЕ
	|	РолиИсполнителей.Наименование ПОДОБНО &Текст
	|	И РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	Корреспонденты.Ссылка,
	|	NULL
	|ИЗ
	|	Справочник.Корреспонденты КАК Корреспонденты
	|ГДЕ
	|	Корреспонденты.Наименование ПОДОБНО &Текст
	|	И Корреспонденты.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Владелец
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Наименование ПОДОБНО &Текст
	|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ЛичныеАдресаты.Ссылка КАК ЛичныеАдресатыСсылка,
	|	NULL
	|ИЗ
	|	Справочник.ЛичныеАдресаты КАК ЛичныеАдресаты
	|ГДЕ
	|	ЛичныеАдресаты.Наименование ПОДОБНО &Текст
	|	И ЛичныеАдресаты.Пользователь = &Пользователь
	|	И ЛичныеАдресаты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда 
			ДанныеВыбора.Добавить(Выборка.Ссылка, Строка(Выборка.Ссылка) + " (" + Строка(Выборка.Подразделение) + ")");
		Иначе	
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает соответствие состояний мероприятия.
// Краткое словесное описание назначения и/или принципов работы процедуры (функции).
//
// Возвращаемое значение:
//  Соответствие - Соответствие состояний мероприятий и типов состояний.
//
Функция ПолучитьСоответствиеСостояний()
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПриглашенияОтправлены, 	"СостояниеПриглашений");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПриглашенияНеПриняты, 	"СостояниеПриглашений");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПриглашенияПриняты, 	"СостояниеПриглашений");
	
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении, "СостояниеПрограммы");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПрограммаУтверждена, 	"СостояниеПрограммы");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена, 	"СостояниеПрограммы");
	
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены, 		"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление, 	"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих, 		"СостояниеМатериаловВыступающих");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились, 			"СостояниеМатериаловВыступающих");
	
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколГотовиться, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколПодготовлен, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколНаСогласовании, "СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколСогласован, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколНеСогласован, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколНаУтверждении, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколНеУтвержден, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколУтвержден, 		"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколНаИсполнении, 	"СостояниеПротокола");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.ПротоколИсполнен, 		"СостояниеПротокола");
	
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки, 	"СостояниеМероприятия");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.МероприятиеОтменено, 			"СостояниеМероприятия");
	Соответствие.Вставить(Перечисления.СостоянияМероприятий.МероприятиеПроведено, 			"СостояниеМероприятия");
	
	Возврат Соответствие;
	
КонецФункции

// Добавляет предмет-мероприятие к бизнес-процессу.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс, к которому добавляем мероприятие.
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие, которое добавляем в бизнес-процесс.
//
Процедура ДобавитьПредметМероприятиеКБизнесПроцессу(БизнесПроцесс, Мероприятие)

	Строка = БизнесПроцесс.Предметы.Добавить();
	Строка.РольПредмета = Перечисления.РолиПредметов.Основной;
	Строка.ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
		Мероприятие);
	Строка.Предмет = Мероприятие;
	
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(БизнесПроцесс.Ссылка);
	
	Для Каждого Действие Из ДействияПроцесса Цикл
		НоваяСтрока = БизнесПроцесс.ПредметыЗадач.Добавить();
		НоваяСтрока.ИмяПредмета = Строка.ИмяПредмета;
		НоваяСтрока.ТочкаМаршрута = Действие;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти