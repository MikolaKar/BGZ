// Возвращает строку СтоимостьДоговора
Функция СтоимостьДоговора(ВладелецФайла) Экспорт
	РезультатОбработки = "";
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ЭтапыДоговоров.СтоимостьСНДС КАК Стоимость,
    |	ЭтапыДоговоров.СуммаНДС КАК СуммаНДС,
    |	ЭтапыДоговоров.СтавкаНДС КАК СтавкаНДС
    |ИЗ
    |	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
    |ГДЕ
    |	НЕ ЭтапыДоговоров.ПометкаУдаления И
    |	ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0) И
    |	ЭтапыДоговоров.Владелец В(&МассивОбъектов)";
    
    Запрос.УстановитьПараметр("МассивОбъектов", ВладелецФайла);
    ТаблицаЭтапы = Запрос.Выполнить().Выгрузить();
    
    СтоимостьДоговора = ТаблицаЭтапы.Итог("Стоимость");
    
    РублиРБ = Константы.ОсновнаяВалюта.Получить();
    СтоимостьДоговораПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ТаблицаЭтапы.Итог("Стоимость"), РублиРБ, Истина);
    ПозицияРублей = Найти(СтоимостьДоговораПрописьюПолная, "бело");
    СтоимостьДоговораПрописью = Лев(СтоимостьДоговораПрописьюПолная, ПозицияРублей-2);
    Рубли = СокрП(Сред(СтоимостьДоговораПрописьюПолная, ПозицияРублей));
    
    РезультатОбработки = "" + СтоимостьДоговора + " (" + СтоимостьДоговораПрописью + ") " + Рубли;
    
    Если ТаблицаЭтапы.Итог("СуммаНДС") > 0 Тогда
        СуммаНДСПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ТаблицаЭтапы.Итог("СуммаНДС"), РублиРБ, Истина);
        ПозицияРублей = Найти(СуммаНДСПрописьюПолная, "бело");
        СуммаНДСПрописью = Лев(СуммаНДСПрописьюПолная, ПозицияРублей-2);
        Рубли = СокрП(Сред(СуммаНДСПрописьюПолная, ПозицияРублей));
        
        ЗначениеСтавки = "";
        Для каждого Стр Из ТаблицаЭтапы Цикл
            Если ЗначениеЗаполнено(Стр.СтавкаНДС) Тогда
                Если Стр.СтавкаНДС.Ставка > 0 Тогда
                    ЗначениеСтавки = Стр.СтавкаНДС.Ставка; 
                    Прервать;
                КонецЕсли; 
            КонецЕсли; 
        КонецЦикла; 
        
        РезультатОбработки = РезультатОбработки + ", в том числе НДС по ставке " + ЗначениеСтавки +"% в сумме "+ ТаблицаЭтапы.Итог("СуммаНДС") + " (" + СуммаНДСПрописью + ") " + Рубли;
    Иначе
        РезультатОбработки = РезультатОбработки + ", без НДС"
    КонецЕсли;

    Возврат РезультатОбработки;
КонецФункции // СтоимостьДоговора()


Функция РеквизитыФизЛица(ФизЛицо, Дата=Неопределено) Экспорт
    //РезультатОбработки = "Паспорт: " + СерияНомер + "
	//|Идентификационный номер: "+ ЛичныйНомер+ "
    //|Выдан: " + Выдан + "
    //|Адрес постоянного местожительства: " + Адрес + "
	//|Почтовый адрес: "+ ПочтовыйАдрес+"
    //|" + Телефон; 
	
	РезультатОбработки = "";
	
	Запрос =новый запрос;
	
		Запрос.Текст= "ВЫБРАТЬ
		              |	ФизическиеЛица.ЛичныйНомер
		              |ИЗ
		              |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		              |ГДЕ
		              |	ФизическиеЛица.Ссылка = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
    		                	
	РезультатСправочник  = Запрос.Выполнить().Выгрузить();
	
	Если РезультатСправочник.Количество()=0 Тогда
		НоваяСтрока = РезультатСправочник.Добавить();
		НоваяСтрока.ЛичныйНомер = "";
	КонецЕсли;
	
	Если Константы.мПечататьПаспортныеДанныеФизЛиц.Получить() Тогда
		Если РезультатСправочник[0].ЛичныйНомер = "" Тогда
			
			ДанныеПаспорта = ПаспортныеДанныеФизЛица(ФизЛицо, Дата);
			ВидДокумента   = ДанныеПаспорта.ВидДокумента;
			СерияНомер     = "" + Строка(ДанныеПаспорта.Серия) + " №" + Строка(ДанныеПаспорта.Номер) + ", ";
			ЛичныйНомер    = "" + Строка(Данныепаспорта.КодПодразделения);
			Выдан          = Строка(ДанныеПаспорта.КемВыдан);
			Если Выдан<>"" тогда
				Если ЛичныйНомер="" И СерияНомер<>" №, " Тогда
					РезультатОбработки = Строка(РезультатОбработки) + " "+ВидДокумента+": " + Строка(СерияНомер) +Символы.ПС +
						"Выдан: " + Строка(Выдан) + Символы.ПС;
				ИначеЕсли СерияНомер = " №, " И ЛичныйНомер <> "" Тогда
					РезультатОбработки = Строка(РезультатОбработки)+"Идентификационный номер: "+Строка(ЛичныйНомер)+Символы.ПС+"Выдан: " + Строка(Выдан) + Символы.ПС;
				ИначеЕсли ЛичныйНомер<>"" И СерияНомер<>"" Тогда
					РезультатОбработки = Строка(РезультатОбработки) + " " + ВидДокумента + ": " + Строка(СерияНомер) +Символы.ПС + 
					"Идентификационный номер: "+Строка(ЛичныйНомер)+Символы.ПС+"Выдан: " + Строка(Выдан) + Символы.ПС;
				КонецЕсли;	
			Иначе
				Если ЛичныйНомер="" И СерияНомер<>" №, " Тогда
					РезультатОбработки = Строка(РезультатОбработки) + " " + ВидДокумента + ": " + Строка(СерияНомер) + Символы.ПС;
				ИначеЕсли СерияНомер=" №, " И ЛичныйНомер <>"" Тогда
					РезультатОбработки = Строка(РезультатОбработки)+"Идентификационный номер: "+Строка(ЛичныйНомер)+ Символы.ПС;
				ИначеЕсли ЛичныйНомер<>"" И СерияНомер<>"" Тогда
					РезультатОбработки = Строка(РезультатОбработки) + " " + ВидДокумента + ": " + Строка(СерияНомер) +Символы.ПС + 
						"Идентификационный номер: "+Строка(ЛичныйНомер)+Символы.ПС;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			РезультатОбработки = Строка(РезультатОбработки) + "Идентификационный номер паспорта: "+Строка(РезультатСправочник[0].ЛичныйНомер)+Символы.ПС;
		КонецЕсли;
	КонецЕсли; 

		
	Адрес         = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ФизЛицо, Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица);
	ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ФизЛицо,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица);
	ДомТелефон    = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ФизЛицо, Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица);
	СотТелефон    = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ФизЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица);
	Телефон       = ?(СокрЛП(ДомТелефон)<>"", "Тел.: "+СокрЛП(ДомТелефон) + "", "");
	Если СокрЛП(Телефон)="" Тогда
		Телефон = ?(СокрЛП(СотТелефон)<>"", "Моб. тел.: "+СокрЛП(СотТелефон), "");
	Иначе
		Телефон = Телефон + ?(СокрЛП(СотТелефон)<>"", ", моб. тел.: "+СокрЛП(СотТелефон), "");
	КонецЕсли; 
	
	Если ПочтовыйАдрес<>Адрес И ПочтовыйАдрес<>"" Тогда
		РезультатОбработки = РезультатОбработки + "Адрес постоянного местожительства: " + Адрес + Символы.ПС+
		"Почтовый адрес: " + ПочтовыйАдрес + Символы.ПС + Телефон;
	Иначе 
		РезультатОбработки = РезультатОбработки + "Адрес постоянного местожительства: " + Адрес + Символы.ПС+Телефон; 
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

//Возвращает отформатированную строку с Серией и номером документа
	//или идентификационный номер документа ФизЛицо
Функция ПолучитьПаспортныеДанныеФизлица(Корреспондент,Дата)Экспорт
	
	Запрос = Новый Запрос;
	ВидСправочника = ПолучитьТипЗнчВладельцаРеквизитов(Корреспондент);
	
	Если ВидСправочника = "Корреспонденты" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	Корреспонденты.ФизЛицо,
		|	ФизическиеЛица.ЛичныйНомер
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Корреспонденты.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Корреспонденты.ФизЛицо = &ФизЛицо";
		
		Запрос.УстановитьПараметр("ФизЛицо",Корреспондент.ФизЛицо);
		
	ИначеЕсли ВидСправочника = "КонтактныеЛица" Тогда
    	Запрос.Текст = "ВЫБРАТЬ
    	              |	ФизическиеЛица.ЛичныйНомер,
    	              |	КонтактныеЛица.Ссылка
    	              |ИЗ
    	              |	Справочник.КонтактныеЛица КАК КонтактныеЛица
    	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
    	              |		ПО КонтактныеЛица.ФизЛицо = ФизическиеЛица.Ссылка
    	              |ГДЕ
    	              |	КонтактныеЛица.физЛицо = &ФизЛицо";
					  
		Запрос.УстановитьПараметр("ФизЛицо",Корреспондент.ФизЛицо);
   	КонецЕсли;		
	                 	
	РезультатСправочник  = Запрос.Выполнить().Выгрузить();
	СтранаКорреспондента = ПолучитьСтрануКорреспондента(Корреспондент);
	
	Если РезультатСправочник[0].ЛичныйНомер <> "" Тогда
		РезультатОбработки = "идентификационный номер паспорта " + Строка(РезультатСправочник[0].ЛичныйНомер);
	Иначе 
		ДанныеПаспорта = Гр_ПравилаАвтозаполненияШаблонов.ПаспортныеДанныеФизЛица(Корреспондент.ФизЛицо);
		Если ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Вид на жительство") Тогда
			РезультатОбработки = "идентификационный номер вида на жительства" + Строка(ДанныеПаспорта.КодПодразделения);
		Иначе 
			Если ДанныеПаспорта.Серия <> "" Или ДанныеПаспорта.Номер <> "" Тогда
				Если ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Паспорт негражданина") тогда
					РезультатОбработки = "серия и номер паспорта негражданина " + Трег(Строка(СклонениеПоПадежам.обСклонениеСтроки(СтранаКорреспондента,2 ,"Имя","Ж"))) +
										 " " + Строка(ДанныеПаспорта.Серия) + Строка(ДанныеПаспорта.Номер);
				ИначеЕсли ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Иностранный паспорт") Тогда
					РезультатОбработки = "серия и номер иностранного паспорта " + Строка(ДанныеПаспорта.Серия) + " №" + Строка(ДанныеПаспорта.Номер);
				ИначеЕсли ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении Тогда
					РезультатОбработки = "серия и номер свидетельства о рождении " + Строка(ДанныеПаспорта.Серия) + " №" + Строка(данныеПаспорта.Номер);
				ИначеЕсли ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера Тогда
					РезультатОбработки = "серия и номер удостоверения личности " + Строка(ДанныеПаспорта.Серия) + " №" + Строка(данныеПаспорта.Номер)+" выданный "+Строка(ДанныеПаспорта.КемВыдан);
				ИначеЕсли ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРБ Тогда
					РезультатОбработки = "серия и номер паспорта " + Строка(ДанныеПаспорта.Серия) + " №" + Строка(данныеПаспорта.Номер); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки
КонецФункции

//Возвращает структуру паспортных данных ФизЛицо:
	//ВидДокумента, Серия, Номер,КодПодразделения, КемВыдан
Функция ПаспортныеДанныеФизЛица(ФизЛицо,Дата=Неопределено) Экспорт
	
	Запрос1=Новый Запрос;
	Запрос1.Текст="ВЫБРАТЬ
	|	ДокументыФизическихЛиц.ВидДокумента,
	|	ДокументыФизическихЛиц.Серия,
	|	ДокументыФизическихЛиц.Номер,
	|	ДокументыФизическихЛиц.КодПодразделения,
	|	ДокументыФизическихЛиц.КемВыдан
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|ГДЕ
	|	ДокументыФизическихЛиц.Физлицо = &Физлицо
	|	" + ?(Дата <> Неопределено, "И ДокументыФизическихЛиц.Период <= &ДатаСреза", "") + "";
	
	Запрос1.УстановитьПараметр("ФизЛицо",ФизЛицо);
	Запрос1.УстановитьПараметр("ДатаСреза",Дата);
	
	ВыборкаДетальныеЗаписи=Запрос1.Выполнить().Выбрать();
	
	ДанныеПаспорта = Новый Структура("ВидДокумента, Серия, Номер, КодПодразделения, КемВыдан");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеПаспорта, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ДанныеПаспорта
	
КонецФункции

// меняет слово Руководитель в тексте:
//именуемое в дальнейшем «Подрядчик», в лице Руководитель, с одной стороны
Функция Руководитель(ВладелецФайла) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ВнутреннийДокумент.Утвердил КАК Утвердил,
    |	СведенияОПользователях.Должность КАК Должность,
	|	ДействиеДоверенностей.НомерДоверенности КАК НомерДоверенности,
	|	ДействиеДоверенностей.Период КАК ДатаДоверенности
    |ИЗ
    |	Справочник.ВнутренниеДокументы КАК ВнутреннийДокумент
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
    |		ПО ВнутреннийДокумент.Утвердил = СведенияОПользователях.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеДоверенностей КАК ДействиеДоверенностей
	|		ПО ВнутреннийДокумент.Утвердил = ДействиеДоверенностей.Пользователь
    |ГДЕ
    |	ВнутреннийДокумент.Ссылка В(&МассивОбъектов)
	|	И ВнутреннийДокумент.ДатаРегистрации МЕЖДУ ДействиеДоверенностей.ДатаНачала И ДействиеДоверенностей.ДатаОкончания";
    
    Запрос.УстановитьПараметр("МассивОбъектов", ВладелецФайла);
    
    ВыборкаШапкаДоговора = Запрос.Выполнить().Выбрать();
    ВыборкаШапкаДоговора.Следующий();
	
    РезультатОбработки = СклонениеПоПадежам.обСклонениеСтроки(ВыборкаШапкаДоговора.Должность, "Р", "Должность");
	ФИОО               = СклонениеПоПадежам.ПросклонятьСтрокуФИО(ВладелецФайла.Утвердил, "", "Р", "ФИО");
    РезультатОбработки = НРег(РезультатОбработки) + " " + ФизическиеЛица.ФамилияИнициалыФизЛица(ФИОО); 
    ПолСсылка          = СклонениеПоПадежам.ПолучитьПол(ВладелецФайла.Утвердил);
	
	Если ПолСсылка = Перечисления.ПолФизическогоЛица.Женский тогда 
        РезультатОбработки = РезультатОбработки + ", действующей на основании ";
    Иначе
        РезультатОбработки = РезультатОбработки + ", действующего на основании ";
    КонецЕсли;
    
    НомерДоверенности = СокрЛП(ВыборкаШапкаДоговора.НомерДоверенности) ;
	
	Если Лев(НомерДоверенности, 5) = "Устав" Тогда
        РезультатОбработки = РезультатОбработки + "Устава";
    Иначе
        РезультатОбработки = РезультатОбработки + НомерДоверенности+ " от " + Формат(ВыборкаШапкаДоговора.ДатаДоверенности, "ДЛФ = DD");
    КонецЕсли;    
    
    Возврат РезультатОбработки;
	
КонецФункции // Руководитель()

// Возвращает юридический адрес
Функция ПолучитьЮридическийАдрес(ВладелецРеквизитов) Экспорт
	
	РезультатОбработки = "";
	ВидСправочника = ПолучитьТипЗнчВладельцаРеквизитов(ВладелецРеквизитов);
	Если ВидСправочника = "Корреспонденты" Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента;
	ИначеЕсли ВидСправочника = "Организации" Тогда
    	ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;    
	Иначе
		Сообщить("Юридический адрес не определен для "+ВладелецРеквизитов+"!");
    	Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатОбработки = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ВладелецРеквизитов, ВидКИ);    
	
    Возврат РезультатОбработки;

КонецФункции // ПолучитьЮридическийАдрес()

// Возвращает расчетный счет для ВладелецРеквизитов
Функция ПолучитьРасчетныйСчет(ВладелецРеквизитов) Экспорт
    РезультатОбработки = "";
	
	ВидСправочника = ПолучитьТипЗнчВладельцаРеквизитов(ВладелецРеквизитов);
	
	Если Не ЗначениеЗаполнено(ВидСправочника) Тогда
    	Возврат РезультатОбработки;
	КонецЕсли; 
	
    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВладелецРеквизитов.ОсновнойБанковскийСчет.НомерСчета КАК ПолучательСчет,
		|	ВладелецРеквизитов.ОсновнойБанковскийСчет.Банк.Код КАК ПолучательМФО,
		|	ВладелецРеквизитов.ОсновнойБанковскийСчет.Банк.Адрес КАК ПолучательАдрес,
		|	ВладелецРеквизитов.ОсновнойБанковскийСчет.Банк.Наименование КАК ПолучательБанк
		|ИЗ
		|	Справочник."+ВидСправочника+" КАК ВладелецРеквизитов
		|ГДЕ
		|	ВладелецРеквизитов.Ссылка =  &МассивСсылка";

	Запрос.УстановитьПараметр("МассивСсылка", ВладелецРеквизитов);

	Результат = Запрос.Выполнить().Выгрузить();
    
	Если Результат.Количество() > 0 Тогда
        РезультатОбработки = "" + Результат[0].ПолучательСчет + " " + Результат[0].ПолучательБанк + " " + Результат[0].ПолучательАдрес + ", МФО " + Результат[0].ПолучательМФО;
    КонецЕсли; 
    
    Возврат РезультатОбработки;

КонецФункции // ПолучитьРасчетныйСчет()

//Возвращает доп. реквизит Корреспондента страна(старый вариант) или реквизит Страна справочника Корреспондент
Функция ПолучитьСтрануКорреспондента(Корреспондент) Экспорт
	
	Страна    = Справочники.СтраныМира.ПустаяСсылка();
	Если Не (ТипЗнч(Корреспондент) = Тип("СправочникСсылка.Корреспонденты")) Тогда
		Возврат Страна;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|Корреспонденты.Ссылка КАК Корреспондент
	|ПОМЕСТИТЬ Корреспонденты
	|ИЗ
	|	Справочник.Корреспонденты КАК Корреспонденты
	|ГДЕ
	|	Корреспонденты.Ссылка = &Корреспондент
	|;
	|///////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Корреспонденты.Корреспондент КАК Корреспондент,
	|	КорреспондентыДополнительныеРеквизиты.Значение КАК Страна
	|ПОМЕСТИТЬ Страны
	|ИЗ
	|	Корреспонденты КАК Корреспонденты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.ДополнительныеРеквизиты КАК КорреспондентыДополнительныеРеквизиты
	|		ПО Корреспонденты.Корреспондент = КорреспондентыДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	КорреспондентыДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				Корреспонденты.Корреспондент
	|			ИЗ
	|				Корреспонденты КАК Корреспонденты)
	|	И КорреспондентыДополнительныеРеквизиты.Свойство.Наименование ПОДОБНО ""%Страна%""
	|;
	|///////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Корреспонденты.Корреспондент как корр,
	|	Страны.Страна как страна
	|ИЗ
	|	Корреспонденты КАК Корреспонденты,
	|	Страны КАК Страны";
	
	Запрос.УстановитьПараметр("Корреспондент",Корреспондент);
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	Если Результат.Количество() > 0 Тогда//раньше Страну заполняли в доп реквизитах Корреспондента
		Страна = Результат[0].Страна;
	Иначе//теперь есть реквизит в спр.Корреспонденты
		Страна = Корреспондент.мСтрана;
	КонецЕсли;
	
	Возврат Страна;
КонецФункции

// Возвращает телефон
Функция ПолучитьТелефон(ВладелецРеквизитов) Экспорт
    РезультатОбработки = "";
    
	ВидСправочника = ПолучитьТипЗнчВладельцаРеквизитов(ВладелецРеквизитов);
	
	Если ВидСправочника = "Корреспонденты" Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента;
	ИначеЕсли ВидСправочника = "Организации" Тогда
    	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;    
	Иначе
		Сообщить("Телефон не определен для "+ВладелецРеквизитов+"!");
    	Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатОбработки = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ВладелецРеквизитов, ВидКИ);    
	
    Возврат РезультатОбработки;
    
КонецФункции // ПолучитьТелефон()

// Возвращает Факс
Функция ПолучитьФакс(ВладелецРеквизитов) Экспорт
	РезультатОбработки = "";
	
	ВидСправочника = ПолучитьТипЗнчВладельцаРеквизитов(ВладелецРеквизитов);
	
	Если ВидСправочника = "Корреспонденты" Тогда
		ВидКИ = " ";
	ИначеЕсли ВидСправочника = "Организации" Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;    
	Иначе
		Сообщить("Телефон не определен для "+ВладелецРеквизитов+"!");
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатОбработки = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ВладелецРеквизитов, ВидКИ);    
	
	Возврат РезультатОбработки;
	
КонецФункции // ПолучитьФакс()

Функция ПолучитьТипЗнчВладельцаРеквизитов(ВладелецРеквизитов)
	ВидСправочника = "";
	Если ТипЗнч(ВладелецРеквизитов) = Тип("СправочникСсылка.Корреспонденты") Тогда
		ВидСправочника = "Корреспонденты";
	ИначеЕсли ТипЗнч(ВладелецРеквизитов) = Тип("СправочникСсылка.Организации") Тогда
		ВидСправочника = "Организации";
	ИначеЕсли ТипЗнч(ВладелецРеквизитов) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		видСправочника="КонтактныеЛица";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидСправочника) Тогда
		Сообщить("Не удалось определить тип значения для владельца реквизитов: "+ ВладелецРеквизитов+"!");
	КонецЕсли; 

    Возврат ВидСправочника;
КонецФункции // ПолучитьТипЗнчВладельцаРеквизитов()

Функция ПолучитьКоличествоСтрокНаимЭтапа(ВидРабот,ОбъектРабот)  Экспорт
	КоличествоСтрок=0;
	Количество=49;
	Для j=0 по 1 Цикл
		Если j=0 тогда
			Строкус = Строка(ВидРабот)+",";
		Иначе
			Строкус = Строка(СокрЛП(ОбъектРабот));	
		КонецЕсли;
		
		Индекс = 1; 
		Количество = 49;
		Кол = Количество;
		а = Истина;
		
		Пока СтрДлина(Строкус)>0 Цикл
			Если СтрДлина(Строкус)<Количество Тогда		
				Строкус         = СтрЗаменить(Строкус,Строкус,"");
				а               = Ложь;
				КоличествоСтрок = КоличествоСтрок + 1;	
			Иначе
				Стр = Сред(Строкус,Индекс,Количество);
				Пока а=True Цикл
					Если Сред(Стр,кол,1)=" " И Сред(Строкус,Индекс+количество,1)<>" " И Сред(Строкус,Индекс+Количество,1)<>"," И Сред(Строкус,Индекс+Количество,1)<>"." Тогда
						Стр     = Сред(Строкус,Индекс,кол);
						Строкус = СтрЗаменить(Строкус,Стр,"");
						а       = Истина;
					ИначеЕсли Сред(Строкус,Индекс+количество,1)=" " ИЛИ Сред(Строкус,Индекс+количество,1)="," ИЛИ Сред(Строкус,Индекс+количество,1)="." ИЛИ Сред(Строкус,Индекс+Количество,1)=Символы.ПС Тогда 
						Стр     = Сред(Строкус,Индекс,кол);
						Строкус = СтрЗаменить(Строкус,Стр,"");
						а       = false;
					иначе 
						кол = кол - 1;
					КонецЕсли;
					Если кол=1 тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;	 
				
				а               = true;			
				КоличествоСтрок = КоличествоСтрок + 1;		
				Кол             = Количество;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
		
		Если КоличествоСтрок<3 тогда
				Пока КоличествоСтрок<>3 Цикл
					КоличествоСтрок = КоличествоСтрок + 1;		
				КонецЦикла;
		КонецЕсли;			
	
	Возврат КоличествоСтрок
КонецФункции

// Возвращает наши реквизиты
Функция ПолучитьНашиРеквизиты() Экспорт
	Реквизиты = Новый Структура();
	
	Реквизиты.Вставить("НашеНаименование", Константы.НашаОрганизация.Получить().ПолноеНаименование);
	Реквизиты.Вставить("НашАдрес",         Гр_ПравилаАвтозаполненияШаблонов.ПолучитьЮридическийАдрес(Константы.НашаОрганизация.Получить()));
	Реквизиты.Вставить("НашРасчетныйСчет", Гр_ПравилаАвтозаполненияШаблонов.ПолучитьРасчетныйСчет(Константы.м_основнаяорганизация.Получить()));
	Реквизиты.Вставить("НашУНП",           Константы.НашаОрганизация.Получить().ИНН);
	Реквизиты.Вставить("НашОКПО",          Константы.НашаОрганизация.Получить().КодПоОКПО);
	
	Возврат Реквизиты;
КонецФункции // ПолучитьНашиРеквизиты()

Функция ПолучитьЗаказчиковДоговораФизЛиц(Договор)Экспорт
	
	ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	 
	й  = 0;
	Пока й <> ТЗ.Количество() Цикл
		Если ТЗ[й].Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ТЗ.Удалить(й);
			й = й - 1;
		КонецЕсли;
		й = й + 1;
	КонецЦикла;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат " ";
	КонецЕсли;
	
	РезультатОбработки = "";
	Результатт         = Договор;
	ДатаРег            = Результатт.ДатаРегистрации;
	
	Группа1     = "";
	Группа2     = "";
	Группа4     = "";
	Группа3     = "";
	ТекстОшибки = "";
	
	//Группа1-Заказчики Корреспондент = Подписал, Заполнено КонтактноеЛицо.ФизЛицо
	//Группа2-Заказчики Корреспондент <> Подписал, С довереностью
	//Группа3-Несовершенолетние Заказчики
	//Группа4-Заказчики Корреспондент <> Подписал, С не заполнено Подписал.Физлицо 
	//												     или (С незаполненной доверенностью и ДР у корреспондента) 
	н = 0;	
	Пока н < ТЗ.Количество() Цикл
		
		Корреспондент        = ТЗ[н].Корреспондент;
		Подписал             = ТЗ[н].Подписал;
		ДанныеПаспорта       = Гр_ПравилаАвтозаполненияШаблонов.ПаспортныеДанныеФизЛица(Корреспондент.ФизЛицо,ДатаРег);
		СтранаКорреспондента = Гр_ПравилаАвтозаполненияШаблонов.ПолучитьСтрануКорреспондента(Корреспондент);
		Гражданин            = "";//"гражданин Русских Данута Мартиновна, " 
		
		Если ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Паспорт негражданина") Тогда
			Если СтранаКорреспондента = Справочники.СтраныМира.ПустаяСсылка() Тогда
				Гражданин = " ОШИБКА:НЕ ЗАПОЛНЕНА СТРАНА, ПАСПОРТ НЕГРАЖДАНИНА КОТОРОЙ УДОСТОВЕРЯЕТ ЛИЧНОСТЬ ";
			ИначеЕсли СтранаКорреспондента = Справочники.СтраныМира.Беларусь Тогда
				Гражданин = " ОШИБКА:В БЕЛАРУСИ НЕ ВЫДАЮТ ДОКУМЕНТ ПАСПОРТ НЕГРАЖДАНИНА, ЗАПОЛНИТЕ СТРАНУ ";
			Иначе//гражданин печатать не нужно
			КонецЕсли;
			
		Иначе
			Если (СтранаКорреспондента = Справочники.СтраныМира.ПустаяСсылка()) или (СтранаКорреспондента = Справочники.СтраныМира.Беларусь) Тогда
				Гражданин = "гражданин ";
			Иначе
				Гражданин = "гражданин " + Трег(Строка(СклонениеПоПадежам.обСклонениеСтроки(СтранаКорреспондента, 2 , "Имя", "Ж") ) ) + " ";
			КонецЕсли;
		КонецЕсли;
		
		Заказчики = Гражданин + Корреспондент + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Корреспондент,ДатаРег);
		
		Если Корреспондент.ФизЛицо = Подписал.ФизЛицо Тогда
			Группа1 = Строка(Группа1)  + Строка(Заказчики) +  ", "; 
			
			ТЗ.Удалить(н);
			н = н - 1;
		ИначеЕсли Корреспондент.ФизЛицо <> Подписал.ФизЛицо и ЗначениеЗаполнено(Подписал.ФизЛицо) Тогда
			
			ДействуетНаОсновании = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Подписал, Справочники.ВидыКонтактнойИнформации.ДействуетНаОсновании);
			Если ДействуетНаОсновании <> "" Тогда
				Доверенность = "в  лице " + СклонениеПоПадежам.ПросклонятьСтрокуФИО(Подписал, "", "Р", "ФИО") + ", " 
				+ Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Подписал,ДатаРег) + ", ";
				
				ПолСсылка = СклонениеПоПадежам.ПолучитьПол(Подписал);
				
				Если ПолСсылка = Перечисления.ПолФизическогоЛица.Женский тогда 	
					Доверенность = Строка(Доверенность) + "действующей";
				Иначе
					Доверенность = Строка(Доверенность) + "действующего";
				КонецЕсли;
				
				ДействуетНаОсновании  = СтрЗаменить(ДействуетНаОсновании, "Доверенность" , "доверенности");
				ДействуетНаОсновании  = СтрЗаменить(ДействуетНаОсновании, "доверенность" , "доверенности");
				Доверенность          = Строка(Доверенность) + " на основании " + Строка(ДействуетНаОсновании) + ", ";
				
				Если н = ТЗ.Количество()-1 Тогда
					Группа2 = Строка(Группа2) + Строка(Заказчики) +  ", " + Строка(Доверенность) + " ";
				Иначе
					Группа2 = Строка(Группа2) + Строка(Заказчики) +  ", " + Строка(Доверенность) + " и ";
				КонецЕсли;
				
				ТЗ.Удалить(н);
				н = н - 1;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Корреспондент.ФизЛицо.ДатаРождения) Тогда
				ТекстОшибки = Строка(ТекстОшибки) + "Ошибка заполнения контактного лица у корреспондента " + Строка(Корреспондент) + ". Не заполнено действует на основании." + Символы.ПС;
				Группа4 = Строка(Группа4) + Строка(Заказчики) +", ";
				ТЗ.Удалить(н);
				н = н - 1;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ТЗ[н].Подписал.ФизЛицо)  Тогда
			Сообщить("ОШИБКА ЗАПОЛНЕНИЯ: у корреспондента " + Строка(Корреспондент) + " в контактном лице не заполнено ФизЛицо");
			Группа4 = Строка(Группа4) + Строка(Заказчики) + ", ";
			ТЗ.Удалить(н);
			н = н - 1;
		КонецЕсли;	
		н = н + 1;
	КонецЦикла;
	
	ТабКон = ТЗ.Скопировать();
	ТабКон.Свернуть("ПодписалФизЛицо");
	
	//Отбор несовершенолетних
	н = 0;
	т = 0;
	Пока н < ТабКон.Количество()  Цикл
		Пока т < ТЗ.Количество()  Цикл
			Корреспондент = ТЗ[т].Корреспондент;
			Подписал      = ТЗ[т].Подписал;
			Дата          = ДобавитьМесяц(Корреспондент.Физлицо.ДатаРождения, (18 * 12));			
			Если ТабКон[н].ПодписалФизЛицо = Подписал.ФизЛицо И ТекущаяДата() < Дата Тогда
				Дети           = Строка(Дети) + Строка(Корреспондент) + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Корреспондент, ДатаРег) + ", ";
				КонтактноеЛицо = Подписал;
				ТЗ.Удалить(т);
				т = т - 1;
			КонецЕсли;
			Если ТЗ.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			т = т + 1;
		КонецЦикла;	
		н = н + 1;
		т = 0;
		
		Если (Дети <> "") И (КонтактноеЛицо <> "") Тогда
			Группа3 = Строка(Группа3)+ строка(КонтактноеЛицо) + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(КонтактноеЛицо,ДатаРег ) + ", в интересах несовершеннолетних " + Дети+ ", 767676";
		КонецЕсли;
		
		Дети = "";
	КонецЦикла;
	
	Если ТекстОшибки = "" Тогда
		Если Группа1 <> "" Тогда	
			РезультатОбработки = Строка(РезультатОбработки) + Строка(Группа1);
		КонецЕсли;
		
		Если Группа2 <> "" Тогда
			РезультатОбработки = ?(РезультатОбработки <> "",Строка(РезультатОбработки)+" а также "+Строка(Группа2),Строка(РезультатОбработки)+Строка(Группа2));
		КонецЕсли;
		
		Если Группа3 <> "" Тогда
			РезультатОбработки = ?(РезультатОбработки <> "",Строка(РезультатОбработки)+" а также "+Строка(Группа3),Строка(РезультатОбработки)+Строка(Группа3));
		КонецЕсли;
		
		Если Группа4 <> "" Тогда
			РезультатОбработки = ?(РезультатОбработки <> "",Строка(РезультатОбработки)+" а также "+Строка(Группа4),Строка(РезультатОбработки)+Строка(Группа4));
		КонецЕсли;
	иначе
		РезультатОбработки = Текстошибки;
	КонецЕсли;
	
	РезультатОбработки = СтрЗаменить(РезультатОбработки,"  и  а"," а ");
	РезультатОбработки = ?(результатт.Корреспонденты.Количество() > 1, Строка(РезультатОбработки) + "именуемые " , Строка(РезультатОбработки) + "именуемый(ая) ");
	
	Возврат РезультатОбработки
КонецФункции

Функция ТекстЗапросаПоВидуРаботы()//удалить бы или переделать?
	Текст = "ВЫБРАТЬ
	|	ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК ВидРаб
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
	|ГДЕ
	|	НЕ ЭтапыДоговоров.ПометкаУдаления
	|	и ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|	И ЭтапыДоговоров.Владелец = &Договор
	|	И ЭтапыДоговоров.ВидРабот.ВидРаботПоДоговорам = &ВидРаботы";	
	
	Возврат Текст
КонецФункции

Функция ДобавлениеАбзацаДоговора(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК ВР,
	|	ЭтапыДоговоров.ОбъектРабот КАК ОР,
	|	ЭтапыДоговоров.ВидДней,
	|	ЭтапыДоговоров.ДлительностьВыполненияРабот КАК Дни,
	|	ЭтапыДоговоров.ШаблонУсловийДоговора КАК Условие
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
	|ГДЕ
	|	НЕ ЭтапыДоговоров.ПорядокВыполненияСовместно
	|	И НЕ ЭтапыДоговоров.ПометкаУдаления
	|	И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|	И ЭтапыДоговоров.Владелец = &МассивОбъектов";
	
	Запрос.УстановитьПараметр("МассивОбъектов", Договор);
	Результат1 = Запрос.Выполнить().Выгрузить();
	Если Результат1.Количество()>0 Тогда
		Результат1.Свернуть("ВР, ОР, ВидДней, Дни, Условие");
		
		Результат1.Свернуть("ВР, ВидДней, Дни, Условие");
		
		Счет 			= 0;
		ВидРаботы = "";
		ДниРаботы = "";
		Предоплата = "";
		флПоПредоплате = 1;
		Для i = 0 по Результат1.Количество() - 1 Цикл
			Если i = 0 Тогда//по первому этапу отмечает договор по предоплате или по факту
				флПоПредоплате = результат1[i].Условие.УчетДатыПредоплаты;
			КонецЕсли;
			ВидРаботы = Строка(Результат1[i].ВР);
			
			Если Результат1[i].ВидДней = Перечисления.ВидыДней.Рабочие Тогда
				ВидДня = "рабочих";
			ИначеЕсли Результат1[i].ВидДней = Перечисления.ВидыДней.Календарные Тогда
				ВидДня = "календарных";
			Иначе 
				ВидДня = "";
			КонецЕсли;
			
			ДниРаботы = Строка(Результат1[i].Дни) + " " + Строка(ВидДня);
			
			Если результат1[i].Дни > 1 И результат1[i].Дни < 5 Тогда
				ДниРаботы = Строка(ДниРаботы) + " дня ";
			Иначе
				ДниРаботы = Строка(ДниРаботы) + " дней ";
			КонецЕсли;
			
			Если Результат1[i].Условие.УчетДатыПредоставленияРешения Тогда
				Предоплата = "после получения Подрядчиком выписки из решения местного исполнительно-распорядительного органа";
			КонецЕсли;		
			
			Если результат1[i].Условие.УчетДатыПредоплаты тогда
				Если Предоплата <> "" Тогда
					Предоплата = Предоплата + " и перечисления предоплаты в размере " + Результат1[i].Условие.ПроцентПредоплаты + "% от стоимости данного вида работ";
				Иначе
					Предоплата = " и исчисляется с момента перечисления предоплаты в размере " + Результат1[i].Условие.ПроцентПредоплаты + "% от стоимости данного вида работ";
				КонецЕсли;
			Иначе
				Если Предоплата <>"" Тогда
					Предоплата = Предоплата + " и подписания договора";
				Иначе
					Предоплата = " и исчисляется с момента подписания договора";
				КонецЕсли;
			КонецЕсли;
			
			Если Результат1[i].Условие.УчетДатыВыполненияПредыдущегоЭтапа Тогда
				Предоплата = Строка(Предоплата) + ", а также после выполнения работы «" + Результат1[i-1].ВР + "»" ;
			КонецЕсли;
			Предоплата = Строка(предоплата) + ".";
				
			РезультатОбработки = Строка(РезультатОбработки) + "Срок выполнения работы «" + ВидРаботы + "» составляет " + ДниРаботы + Предоплата +
			?(флПоПредоплате," Стороны договорились, что момент оплаты - это дата поступления на расчетный счет Подрядчика денежных средств за выполнение работ.","") + ?(i = Результат1.Количество() - 1,"",Символы.ПС);
			Предоплата = "";
		КонецЦикла;
		Если флПоПредоплате тогда
			Если Результат1.Количество() = 1 Тогда
				РезультатОбработки = Строка(РезультатОбработки) + " Предоплата по договору должна быть произведена Заказчиком в срок не более 30 календарных дней с момента составления настоящего Договора." + Символы.ПС;
			Иначе 
				РезультатОбработки = Строка(РезультатОбработки) + " Предоплата по виду работ «" + Результат1[0].ВР + "» должна быть произведена Заказчиком в срок не более 30 календарных дней с момента составления настоящего Договора." + Символы.ПС;
			КонецЕсли;
			РезультатОбработки = Строка(РезультатОбработки) + "Подрядчик оставляет за собой право приступить к выполнению работ до внесения предоплаты.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки
КонецФункции

Функция ДобавлениеАбзацевПоГосРегистрации(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботПредварительноеСогласование.Получить());
	Результат1=Запрос.Выполнить().Выгрузить();
	
	РезультатОбработки="";
	Индекс=5;
	Если результат1.Количество()>0 тогда
		РезультатОбработки=Символы.ПС+"3."+Строка(Индекс)+". При заключении договора субподряда на выполнение работ по предоставлению заключений уполномоченных государственных органов,"+
		"необходимых для выполнения данного вида работ,  уплаченная Подрядчиком по договору субподряда сумма, возмещается Заказчиком на основании счет-фактуры и (или) актов, прилагаемых"+
		"к Договору, путем заключения Дополнительного соглашения.";
		Индекс=Индекс+1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботГосРегистрации.Получить());
	Результат1=Запрос.Выполнить().Выгрузить();
	
	Если результат1.Количество()>0 тогда
		РезультатОбработки=Строка(РезультатОбработки)+Символы.ПС+"3."+Строка(Индекс)+". Для выполнения работ по этапу Договора «Оказание услуг по обращению за государственной регистрацией "+
		"созданного земельного участка» Заказчик обязуется оплатить услуги по государственной регистрации созданного земельного участка и возникновение права на него (0.7 базовой величины), "+
		"за выдачу земельно-кадастрового плана земельного участка (0.3 базовой величины) на расчетный счет РУП «Гродненское агентство по государственной регистрации и земельному кадастру» и "+
		" государственную пошлину (0.5 базовой величины) за выдачу свидетельства (удостоверения) о государственной регистрации права  пожизненного наследуемого  владения или частной "+
		"собственности на земельный участок на расчетный счет финансового отдела по месту нахождения земельного участка. Оригиналы квитанций предоставить в Дочернее унитарное предприятие "+
		"«Проектный институт Гродногипрозем» Республиканского унитарного предприятия «Проектный институт Белгипрозем» в течение 5 рабочих дней с момента оплаты настоящего договора. Стоимость "+
		"услуг определена в соответствии с п.22.1.1., п.22.17.13. Указа Президента Республики Беларусь «Об  административных процедурах, осуществляемых государственными органами и иными "+
		"организациями по заявлениям граждан» №200 от 26.04.2010г. и изменяется в случае изменения   законодательства."+Символы.ПС+"3."+Строка(Индекс+1)+". В случае, если суммы,  уплаченной "+
		"за работу РУП «Гродненское агентство по государственной регистрации и земельному кадастру», его филиалов и бюро по Гродненской области, недостаточно для покрытия расходов по "+
		"государственной регистрации  в связи  с наличием ограничений по использованию земель в охранных зонах ЛЭП, водоемов, газопроводов и др. и (или) изменением законодательства, Заказчик "+
		"обязуется произвести оплату оставшейся части платы за работу по государственной регистрации, в отношении которых им не внесена плата для совершения регистрационного действия, путем "+
		"перечисления денежных средств на расчетный счет РУП «Гродненское агентство по государственной регистрации и земельному кадастру», его филиалов и бюро по Гродненской области. В данном "+
		"случае квитанцию для производства оплаты выдает РУП «Гродненское агентство по государственной регистрации и земельному кадастру», его филиал (бюро) по Гродненской области."+Символы.ПС+
		"3."+Строка(Индекс+2)+". Свидетельство (удостоверение) о государственной регистрации земельного участка и возникновения права на него  изготавливается в одном экземпляре, которое Заказчик "+
		"самостоятельно получает в РУП «Гродненское агентство по государственной регистрации и земельному кадастру» либо его соответствующем филиале (бюро) по месту нахождения земельного участка.";
	КонецЕсли;
	
	Возврат РезультатОбработки
КонецФункции

Функция ПолучитьПереченьРаботДоговора(Договор)   Экспорт
	Запрос = Новый Запрос;
	Запрос.текст="ВЫБРАТЬ
	|	ЭтапыДоговоров.ВидРабот.полноеНаименование КАК ВР,
	|	ЭтапыДоговоров.ОбъектРабот Как ОР
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
	|ГДЕ
	| НЕ ЭтапыДоговоров.ПорядокВыполненияСовместно 
	|	И НЕ ЭтапыДоговоров.ПометкаУдаления
	|	И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|	И ЭтапыДоговоров.Владелец =(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", Договор);
	Результат1 = Запрос.Выполнить().Выгрузить();
	
	Результат1.Свернуть("ВР,ОР");
	Счет = 0;
	
	Для i = 0 по Результат1.Количество() - 1 Цикл
		Если результат1[i].ВР <> " " Тогда
			РезультатОбработки = Строка(РезультатОбработки) + "              -" + СокрЛП(Строка(Результат1[i].ВР)) + " ";
		КонецЕсли;	
		
		Для j = i + 1 по результат1.Количество() - 1 Цикл
			Если Результат1[i].ВР = Результат1[j].ВР И результат1[i].ВР <> " " тогда
				Результат1[j].ВР = " ";
				
				Если Счет = 0 тогда
					РезультатОбработки = Строка(РезультатОбработки) + "по объектам: " + СокрЛП(Результат1[i].ОР.ПолноеНаименование);
					Если Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию("Договор с физ. лицами") Тогда
						РезультатОбработки = Строка(РезультатОбработки) + " по адресу " + СокрЛП(Результат1[i].ОР.АдресЗемельногоУчастка) + "; ";
					Иначе
						РезультатОбработки = Строка(РезультатОбработки) + ";";
					КонецЕсли;
				КонецЕсли;
				
				РезультатОбработки = Строка(РезультатОбработки) + СокрЛП(Результат1[j].ОР.ПолноеНаименование);
				Если Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию("Договор с физ. лицами") Тогда
					РезультатОбработки = Строка(РезультатОбработки) + " по адресу " + СокрЛП(Результат1[j].ОР.АдресЗемельногоУчастка) + "; ";
				Иначе
					РезультатОбработки = Строка(РезультатОбработки) + ";";
				КонецЕсли;
				Счет = Счет + 1;
			КонецЕсли;	
		КонецЦикла;
		
		Если Счет = 0 и Результат1[i].ВР <> " " Тогда
			РезультатОбработки = Строка(РезультатОбработки) + "по объекту: " + СокрЛП(Результат1[i].ОР.ПолноеНаименование);
			Если Договор.ВидДокумента = Справочники.ВидыВнутреннихДокументов.НайтиПоНаименованию("Договор с физ. лицами") Тогда
				РезультатОбработки = Строка(РезультатОбработки) + " по адресу " + Результат1[i].ОР.АдресЗемельногоУчастка + "; ";
			Иначе
				РезультатОбработки = Строка(РезультатОбработки) + ";";
			КонецЕсли;
		КонецЕсли;
		
		Счет = 0;
		
		Если Результат1[i].ВР <> " " Тогда
			РезультатОбработки = Строка(РезультатОбработки) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОбработки
КонецФункции

Функция ПолучитьТекстУказаДогвора(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботДелениеРаздел.Получить());
	Результат1=Запрос.Выполнить().Выгрузить();
	
	РезультатОбработки="";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботСлияние.Получить());
	Результат2=Запрос.Выполнить().Выгрузить();
	
	Если Результат1.Количество()>0 или результат2.Количество()>0 Тогда
		РезультатОбработки="в соответствии с требованиями Технического кодекса установившейся практики ТКП 272-2010 (03150) деление (раздел), слияние земельных участков, требования к осуществлению, утвержденного приказом Госкомимущества РБ от 14.12.2010г. №446,";
	КонецЕсли;
	
	результатОбработки=?(результатОбработки="","предусмотренные Указом Президента Республики Беларусь от 27.12.2007 г. №667 «Об изъятии и предоставлении земельных участков», ",Строка(результатОбработки)+" ");
	
	Возврат РезультатОбработки
КонецФункции

Функция ДобавлениеАбзацевПоУстановлению(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботУстановлениеГраницы.Получить());
	Результат1 = Запрос.Выполнить().Выгрузить();
	
	РезультатОбработки="";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботСлияние.Получить());
	Результат2 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботДелениеРаздел.Получить());
	Результат3 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор",Договор);
	Запрос.УстановитьПараметр("ВидРаботы",Константы.Гр_ВидРаботВосстановлениеГраниц.Получить());
	Результат4 = Запрос.Выполнить().Выгрузить();
	
	Если Результат1.Количество()>0 или Результат2.Количество()>0 или  Результат3.Количество()>0 ИЛИ Результат4.Количество()>0 Тогда
		РезультатОбработки=Символы.ПС+"6.4.3. Если при установлении границы земельного участка усматриваются признаки самовольного занятия земельных участков (например, на земельном участке расположены капитальные строения (здания, сооружения), ограждения, их части, не принадлежащие кандидату в правообладатели в отношении земельного участка, или самовольно им возведенные (реконструированные)."+Символы.ПС+
		"6.4.4. Если при выполнении полевых работ Заказчиком не обеспечивается доступ на земельный участок. "+Символы.ПС+
		"6.4.5. В отношении земельного участка имеет место неразрешенный земельный спор. "+Символы.ПС+
		"6.4.6. В случае не поступления от Заказчика в срок, указанный подрядчиком, информации в письменном виде, содержащей обязательство присутствовать при повторном выезде на местность для выполнения работ по установлению, восстановлению фиксированной границы земельного участка."+Символы.ПС+
		"6.4.7. В случае отказа Заказчика от подписания акта об ознакомлении заинтересованных сторон с установленной (восстановленной) границей земельного участка на  местности. "+Символы.ПС+
		"6.4.8. В случае не поступления к подрядчику в течение двух месяцев со дня совершения отметки вступившего в силу решения (постановления) о разрешении возникшего земельного спора."+Символы.ПС+
		"6.4.9. Если при выполнении подготовительных или полевых работ по установлению границ земельных участков общего пользования садоводческого товарищества, дачного кооператива и (или) члена садоводческого товарищества, дачного кооператива выясняется, что местоположение, линейные размеры границ, площадь этих участков не соответствуют указанным в утвержденном проекте организации и застройки территории садоводческого товарищества, дачного кооператива или согласованном в установленном порядке плане земельных участков, передаваемых в частную собственность, пожизненное наследуемое владение граждан, постоянное пользование садоводческого товарищества, дачного кооператива.";
	КонецЕсли;
	
	Возврат РезультатОбработки
КонецФункции

Функция ПолучитьПодписиИсполнителяДоговора(Договор) Экспорт
	Подразделение = Договор.Подразделение;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ОтделИсполнителя             = Подразделение;
		ОтделИсполнителяНаименование = Подразделение.Наименование;
				
		Исполнитель          = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОтделИсполнителя, "Руководитель");
		НачОтдел             = ФизическиеЛица.ФамилияИнициалыФизЛица(Исполнитель.ФизЛицо);
		ДолжностьИсполнителя = РаботаСПользователями.ПолучитьДолжность(Исполнитель).Наименование;
		ТелефонИсполнителя   = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Исполнитель, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОтделИсполнителяНаименование = "Ошибка! Заполните Подразделение Договора";
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(НачОтдел) Тогда
		ИсполнительКратко = " ";
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ДолжностьИсполнителя) Тогда
		ДолжностьИсполнителя = " ";
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТелефонИсполнителя) Тогда
		ТелефонИсполнителя = " ";
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИсполнительКратко",    Строка(НачОтдел));
	СтруктураПараметров.Вставить("ОтделИсполнителя",     ОтделИсполнителяНаименование);
	СтруктураПараметров.Вставить("ДолжностьИсполнителя", ДолжностьИсполнителя);
	СтруктураПараметров.Вставить("ТелефонИсполнителя",   ТелефонИсполнителя);
	
	Возврат СтруктураПараметров;
КонецФункции 

Функция ВозвращаетСтруктуруЭтапаДляТаблицы(ЭтапДоговора) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	мЭтапыДоговоров.ОбъектРабот,
	               |	мЭтапыДоговоров.ВидРабот,
	               |	мЭтапыДоговоров.СтавкаНДС,
	               |	мЭтапыДоговоров.ОсвобождениеОтНДС КАК Статья,
	               |	мЭтапыДоговоров.СуммаНДС,
	               |	мЭтапыДоговоров.СтоимостьСНДС,
	               |	мЭтапыДоговоров.ДлительностьВыполненияРабот КАК Длина,
	               |	мЭтапыДоговоров.ПорядокВыполненияСовместно КАК Совместно,
	               |	мЭтапыДоговоров.ВидДней,
	               |	мЭтапыДоговоров.ОбъектРабот.АдресЗемельногоУчастка КАК Адрес
	               |ИЗ
	               |	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	               |ГДЕ
	               |	НЕ мЭтапыДоговоров.ПометкаУдаления
	               |	и ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	               |	И мЭтапыДоговоров.Ссылка = &ЭтапДоговора";
	Запрос.УстановитьПараметр("ЭтапДоговора",ЭтапДоговора);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СтруктураСтроки = Новый Структура;
	Если РезультатЗапроса.Количество()>0 Тогда
		Этап = РезультатЗапроса[0];
		
		ВидРабот = Этап.ВидРабот.ПолноеНаименование;
		Вид1     = Лев(ВидРабот,250);
		Вид2     = СтрЗаменить(Видработ,Вид1,""); 
		
		ОбъектРабот  = СокрЛП(Этап.ОбъектРабот.ПолноеНаименование);
		Объект1      = Лев(ОбъектРабот,250);
		Объект2      = СтрЗаменить(ОбъектРабот,Объект1,"");
		
		СтоимостьДоговора = Этап.СтоимостьСНДС;
		Если Этап.СтавкаНДС <> Справочники.мСтавкиНДС.БезНДС Тогда
			СтоимостьДоговора = Строка(СтоимостьДоговора) + " в т.ч. НДС по ст. " + Этап.СтавкаНДС + "% - " + Этап.СуммаНДС;
		КонецЕсли;
		Если Этап.Статья = Справочники.мОсвобождениеОтНДС.ПустаяСсылка() Тогда
			Статья = "";
		Иначе
			Статья = Этап.Статья.ДляПечати;
		КонецЕсли;
		Если Этап.ВидДней = Перечисления.ВидыДней.Рабочие Тогда
			ВидДня="рабочих";
		ИначеЕсли Этап.ВидДней = Перечисления.ВидыДней.Календарные Тогда
			ВидДня="календарных";
		Иначе 
			ВидДня="";
		КонецЕсли;
		СтруктураСтроки.Вставить("Вид1",           Вид1);
		СтруктураСтроки.Вставить("Вид2",           Вид2);
		СтруктураСтроки.Вставить("Объект1",        Объект1);
		СтруктураСтроки.Вставить("Объект2",        Объект2);
		СтруктураСтроки.Вставить("СтоимостьЭтапа", СтоимостьДоговора);
		СтруктураСтроки.Вставить("Статья",         Статья);
		СтруктураСтроки.Вставить("СрокВыполнения", Этап.Длина);
		СтруктураСтроки.Вставить("ВидДней",        ВидДня);
		СтруктураСтроки.Вставить("Совместно",      Этап.Совместно);
		СтруктураСтроки.Вставить("Адрес",          Этап.Адрес);
	Иначе
		СтруктураСтроки.Вставить("Вид1",           "");
		СтруктураСтроки.Вставить("Вид2",           "");
		СтруктураСтроки.Вставить("Объект1",        "");
		СтруктураСтроки.Вставить("Объект2",        "");
		СтруктураСтроки.Вставить("СтоимостьЭтапа", "");
		СтруктураСтроки.Вставить("Статья",         "");
		СтруктураСтроки.Вставить("СрокВыполнения", "");
		СтруктураСтроки.Вставить("ВидДней",        "");
		СтруктураСтроки.Вставить("Совместно",      "");
		СтруктураСтроки.Вставить("Адрес",          "");
	КонецЕсли;

	Возврат СтруктураСтроки;
КонецФункции

Функция ВозвращаетПоВидамРаботСуммуНДС(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.текст="ВЫБРАТЬ
	|	ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК ВР,
	|	ЭтапыДоговоров.СтавкаНДС КАК Ставка,
	|	ЭтапыДоговоров.СуммаНДС КАК Сумма,
	|	ЭтапыДоговоров.ОсвобождениеОтНДС.ДляПечати КАК Статья
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
	|ГДЕ
	|	НЕ ЭтапыДоговоров.ПометкаУдаления
	|	и ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	|	И ЭтапыДоговоров.Владелец = &МассивОбъектов";
	
	Запрос.УстановитьПараметр("МассивОбъектов", Договор);
	Результат1         = Запрос.Выполнить().Выгрузить();
	Валюта             = Константы.ОсновнаяВалюта.Получить();
	РезультатОбработки = " ";
	
	ВТ = результат1.Скопировать();
	ВТ.Свернуть("Ставка,Статья","Сумма");
	ВидыРабот = "";
	счетчик   = 0;
	Результат1.Свернуть("ВР,Ставка,Статья","Сумма");
	
	Для каждого СтрокиВТ Из ВТ Цикл
		Для каждого СтрокиО из Результат1 Цикл
			Если СтрокиО.Ставка = СтрокиВТ.Ставка и строкиО.Статья = СтрокиВТ.статья Тогда
				Видыработ = Строка(ВидыРабот) + " «" + СтрокиО.ВР + "», ";
				счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		ВидыРабот = ВидыРабот + "3455";
		ВидыРабот = СтрЗаменить(ВидыРабот,", 3455"," ");
		
		Если СтрокиВТ.Ставка <> справочники.мСтавкиНДС.БезНДС  Тогда
			текст = ?( Счетчик>1, "по видам работ ", "по виду работы ");
		Иначе 
			текст = ?( Счетчик>1, "виды работ ", "вид работы ");
		КонецЕсли;
		
		СтоимостьЭтаповПрописьюПолная = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокиВТ.сумма, Валюта, Истина);
		ПозицияРублей                 = Найти(СтоимостьЭтаповПрописьюПолная, "бело");
		СтоимостьЭтаповПрописью       = Лев(СтоимостьЭтаповПрописьюПолная, ПозицияРублей-2);
		Рубли                         = СокрП(Сред(СтоимостьЭтаповПрописьюПолная, ПозицияРублей));		
		РезультатОбработки            = Строка(РезультатОбработки) + Строка(текст) + Строка(ВидыРабот) + ?(СтрокиВТ.Ставка <> справочники.мСтавкиНДС.БезНДС,
		"НДС по ставке " + Строка(СтрокиВТ.Ставка) + "% - " + Строка(СтрокиВТ.сумма) + " (" + Строка(СтоимостьЭтаповПрописью) + ") " 
		+ Рубли, Строка(СтрокиВТ.Ставка)) + ?(СтрокиВТ.Статья = Null,", ",", согласно " + строка(СтрокиВТ.Статья) + ", ");
		
		Счетчик = 0;
		Видыработ = "";
	КонецЦикла;	
	
	РезультатОбработки = РезультатОбработки+"ап3255";
	РезультатОбработки = СтрЗаменить(РезультатОбработки,", ап3255",".");
	
	Возврат РезультатОбработки;
КонецФункции

Функция ВозвращаетТаблицуИнвесторов(Договор) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнутренниеДокументыИнвесторы.Корреспондент,
	               |	ВнутренниеДокументыИнвесторы.ПодписалОтКорреспондента КАК Подписал,
	               |	ВнутренниеДокументыИнвесторы.ПодписалОтКорреспондента.ФизЛицо КАК ПодписалФизЛицо,
	               |	ВнутренниеДокументыИнвесторы.Процент
	               |ИЗ
	               |	Справочник.ВнутренниеДокументы.Инвесторы КАК ВнутренниеДокументыИнвесторы
	               |ГДЕ
	               |	ВнутренниеДокументыИнвесторы.Ссылка = &Договор";
	Запрос.УстановитьПараметр("Договор",Договор);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

Функция ВозвращаетТаблицуЗаказчиков(Договор) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнутренниеДокументыКорреспонденты.Корреспондент ,
	               |	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента КАК Подписал,
	               |	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента.ФизЛицо КАК ПодписалФизЛицо,
	               |	ВнутренниеДокументыКорреспонденты.Процент
	               |ИЗ
	               |	Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
	               |ГДЕ
	               |	ВнутренниеДокументыКорреспонденты.Ссылка = &Договор";
	Запрос.УстановитьПараметр("Договор",Договор);
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат
КонецФункции

Функция ПолучитьСтрокуРуководителяЗаказчика(ПодписалОтКорреспондента)
	Если ЗначениеЗаполнено(ПодписалОтКорреспондента) Тогда
		Должность = ПодписалОтКорреспондента.Должность;
	Иначе
		Должность = "";
	КонецЕсли;
	
	РезультатОбработки = СклонениеПоПадежам.обСклонениеСтроки(Должность, "Р", "Должность");
	РезультатОбработки = РезультатОбработки + " " + СклонениеПоПадежам.ПросклонятьСтрокуФИО(ПодписалОтКорреспондента, "", "Р", "ФИО");
	ПолСсылка          = СклонениеПоПадежам.ПолучитьПол(ПодписалОтКорреспондента);
	
	Если ПолСсылка = Перечисления.ПолФизическогоЛица.Женский тогда 
		РезультатОбработки = РезультатОбработки + ", действующей";
	Иначе
		РезультатОбработки = РезультатОбработки + ", действующего";
	КонецЕсли;
	
	ДействуетНаОсновании = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ПодписалОтКорреспондента, Справочники.ВидыКонтактнойИнформации.ДействуетНаОсновании);
	
	РезультатОбработки = РезультатОбработки + " на основании "+ДействуетНаОсновании;	
	Возврат РезультатОбработки;
КонецФункции // ПолучитьСтрокуРуководителя()

Функция ПолучитьШапкуЗаказчиковЮрЛица(Договор, Заказчик = Истина) Экспорт
	Если Заказчик Тогда
		ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	Иначе
		ТЗ = ВозвращаетТаблицуИнвесторов(Договор);
	КонецЕсли;
	
	Массив = Новый Массив;
	Для каждого Строки ИЗ ТЗ Цикл
		Если Строки.Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Заказчик     = Строки.Корреспондент.ПолноеНаименование;
			Руководитель = ", в лице " + ПолучитьСтрокуРуководителяЗаказчика(Строки.Подписал);
			Массив.Добавить(Строка(Заказчик) + Строка(Руководитель));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив
КонецФункции

Функция ПолучитьЗаказчиковДляПодписиФизЛица(Договор, Заказчик = Истина) Экспорт
	Если Заказчик Тогда
		ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	Иначе
		ТЗ = ВозвращаетТаблицуИнвесторов(Договор);
	КонецЕсли;
	
	Массив = Новый Массив;	
	ТЗ1    = Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("Заказчик",,"Заказчик");
	
	Для каждого корр Из  ТЗ Цикл
		Если Не ЗначениеЗаполнено(корр.Корреспондент.ФизЛицо.ДатаРождения)
				И корр.Корреспондент.ФизЛицо <> корр.Подписал.ФизЛицо
				И ЗначениеЗаполнено(Корр.Подписал.ФизЛицо)	
				И корр.Корреспондент.ЮрфизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				
			НоваяСтрока          = ТЗ1.Добавить();
			НоваяСтрока.Заказчик = Корр.подписал.Наименование;
		ИначеЕсли Не ЗначениеЗаполнено(корр.Корреспондент.ФизЛицо.ДатаРождения) 
					И корр.Корреспондент.ЮрфизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					
			НоваяСтрока          = ТЗ1.Добавить();
			НоваяСтрока.Заказчик = корр.Корреспондент.Наименование;
		КонецЕсли;
	КонецЦикла;
		
	ТЗ1.Свернуть("Заказчик");
	
	Для каждого Строки из ТЗ1 Цикл				
		Массив.Добавить(ФизическиеЛица.ФамилияИнициалыФизЛица(Строки.Заказчик,,,,Ложь));
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Функция ПолучитьРеквизитыЮрЛица(Договор, Заказчик = Истина) Экспорт 
	Если Заказчик Тогда
		ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	Иначе
		ТЗ = ВозвращаетТаблицуИнвесторов(Договор);
	КонецЕсли;
	Массив = Новый Массив;
	Для каждого Строки из ТЗ Цикл
		Если Строки.Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Организация    = СокрЛП(Строки.Корреспондент.ПолноеНаименование);
			Адрес          = СокрЛП(Гр_ПравилаАвтозаполненияШаблонов.ПолучитьЮридическийАдрес(Строки.Корреспондент));
			РасчетныйСчет  = СокрЛП(Гр_ПравилаАвтозаполненияШаблонов.ПолучитьРасчетныйСчет(Строки.Корреспондент));
			Телефон        = СокрЛП(Гр_ПравилаАвтозаполненияШаблонов.ПолучитьТелефон(Строки.Корреспондент));
			ИНН 		   = СокрЛП(Строки.Корреспондент.ИНН);
			ОКПО		   = СокрЛП(Строки.Корреспондент.КодПоОКПО);
			Массив.Добавить(Строка(Организация) + Символы.ПС + Строка(Адрес) + Символы.ПС + Строка(РасчетныйСчет) + Символы.ПС +
				Строка(ИНН) + Символы.ПС + Строка(ОКПО) + Символы.ПС + Строка(Телефон) + Символы.ПС + Строка(Строки.Подписал) + 
				Символы.ПС + Строка(Строки.Подписал.Должность));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Функция ПолучитьРеквизитыФизЛица(Договор, Заказчик = Истина) Экспорт 
	Если Заказчик Тогда
		ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	Иначе
		ТЗ = ВозвращаетТаблицуИнвесторов(Договор);
	КонецЕсли;
	
	Массив = Новый Массив;
	
	ТЗ1=Новый ТаблицаЗначений;
	ТЗ1.Колонки.Добавить("Реквизиты",,"Реквизиты");
	ТЗ1.Колонки.Добавить("Заказчик",,"Заказчик");
	
	Для каждого корр Из  ТЗ Цикл
		Если Не ЗначениеЗаполнено(корр.Корреспондент.ФизЛицо.ДатаРождения)
			И корр.Корреспондент.ЮрфизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда	
			Строки = Гр_ПравилаАвтозаполненияШаблонов.РеквизитыФизЛица(корр.Корреспондент.ФизЛицо);
			
			НоваяСтрока = ТЗ1.Добавить();
			НоваяСтрока.Реквизиты = Строки;
			НоваяСтрока.Заказчик  = Строка(корр.Корреспондент);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого корр Из ТЗ Цикл
		Если корр.Корреспондент.ФизЛицо <> корр.Подписал.ФизЛицо 
				И Не ЗначениеЗаполнено(корр.Корреспондент.ФизЛицо.ДатаРождения) 
				И ЗначениеЗаполнено(Корр.Подписал.ФизЛицо)
				И Корр.Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				
			Строки = Гр_ПравилаАвтозаполненияШаблонов.РеквизитыФизЛица(корр.Подписал.ФизЛицо);
			
			НоваяСтрока           = ТЗ1.Добавить();
			НоваяСтрока.Реквизиты = Строки;
			НоваяСтрока.Заказчик  = Строка(Корр.Подписал);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ1.Свернуть("Реквизиты,Заказчик");
	
	Для каждого Строки из ТЗ1 Цикл			
		Массив.Добавить(Строка(Строки.Заказчик) + Символы.ПС + Строка(Строки.Реквизиты));
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Функция ПолучитьШапкуЗаказчиковДоговораФизЛиц(Договор, Заказчик = Истина)Экспорт
	
	Если Заказчик Тогда
		ТЗ = ВозвращаетТаблицуЗаказчиков(Договор);
	Иначе 
		ТЗ = ВозвращаетТаблицуИнвесторов(Договор);
	КонецЕсли;
	
	й = 0;
	Пока й <> ТЗ.Количество() Цикл
		Если ТЗ[й].Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ТЗ.Удалить(й);
			й = й - 1;
		КонецЕсли;
		й = й + 1;
	КонецЦикла;
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РезультатОбработки = "";
	Результатт         = Договор;
	ДатаРег            = Результатт.ДатаРегистрации;
	
	н = 0;
	
	Группа1     = Новый Массив;
	Группа2     = Новый Массив;
	Группа4     = Новый Массив;
	Группа3     = Новый Массив;
	ТекстОшибки = "";
	
	//Группа1-Заказчики Корреспондент = Подписал, Заполнено КонтактноеЛицо.ФизЛицо
	//Группа2-Заказчики Корреспондент <> Подписал, С довереностью
	//Группа3-Несовершенолетние Заказчики
	//Группа4-Заказчики Корреспондент <> Подписал, С не заполнено Подписал.Физлицо 
	//												     или (С незаполненной доверенностью и ДР у корреспондента) 
		
	Пока н < ТЗ.Количество() Цикл
		
		Корреспондент        = ТЗ[н].Корреспондент;
		Подписал             = ТЗ[н].Подписал;
		ДанныеПаспорта       = Гр_ПравилаАвтозаполненияШаблонов.ПаспортныеДанныеФизЛица(Корреспондент.ФизЛицо,ДатаРег);
		СтранаКорреспондента = Гр_ПравилаАвтозаполненияШаблонов.ПолучитьСтрануКорреспондента(Корреспондент);
		Гражданин            = "";//"гражданин Русских Данута Мартиновна, " 
		
		Если ДанныеПаспорта.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Паспорт негражданина") Тогда
			Если СтранаКорреспондента = Справочники.СтраныМира.ПустаяСсылка() Тогда
				Гражданин = " ОШИБКА:НЕ ЗАПОЛНЕНА СТРАНА, ПАСПОРТ НЕГРАЖДАНИНА КОТОРОЙ УДОСТОВЕРЯЕТ ЛИЧНОСТЬ ";
			ИначеЕсли СтранаКорреспондента = Справочники.СтраныМира.Беларусь Тогда
				Гражданин = " ОШИБКА:В БЕЛАРУСИ НЕ ВЫДАЮТ ДОКУМЕНТ ПАСПОРТ НЕГРАЖДАНИНА, ЗАПОЛНИТЕ СТРАНУ ";
			Иначе//гражданин печатать не нужно
			КонецЕсли;
			
		Иначе
			Если (СтранаКорреспондента = Справочники.СтраныМира.ПустаяСсылка()) или (СтранаКорреспондента = Справочники.СтраныМира.Беларусь) Тогда
				Гражданин = "гражданин ";
			Иначе
				Гражданин = "гражданин " + Трег(Строка(СклонениеПоПадежам.обСклонениеСтроки(СтранаКорреспондента, 2 , "Имя", "Ж") ) ) + " ";
			КонецЕсли;
		КонецЕсли;
		
		Заказчики = Гражданин + Корреспондент + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Корреспондент,ДатаРег);
		
		Если Корреспондент.ФизЛицо = Подписал.ФизЛицо Тогда
			Группа1.Добавить(Заказчики);
			
			ТЗ.Удалить(н);
			н = н - 1;
		ИначеЕсли Корреспондент.ФизЛицо <> Подписал.ФизЛицо и ЗначениеЗаполнено(Подписал.ФизЛицо) Тогда
			
			ДействуетНаОсновании = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Подписал, Справочники.ВидыКонтактнойИнформации.ДействуетНаОсновании);
			Если ДействуетНаОсновании <> "" Тогда
				Доверенность = "в  лице " + СклонениеПоПадежам.ПросклонятьСтрокуФИО(Подписал, "", "Р", "ФИО") + ", " 
								+ Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Подписал,ДатаРег) + ", ";
				
				ПолСсылка = СклонениеПоПадежам.ПолучитьПол(Подписал);
				
				Если ПолСсылка = Перечисления.ПолФизическогоЛица.Женский тогда 	
					Доверенность = Строка(Доверенность) + "действующей";
				Иначе
					Доверенность = Строка(Доверенность) + "действующего";
				КонецЕсли;
				ДействуетНаОсновании  = СтрЗаменить(ДействуетНаОсновании, "Доверенность" , "доверенности");
				ДействуетНаОсновании  = СтрЗаменить(ДействуетНаОсновании, "доверенность" , "доверенности");
				Доверенность          = Строка(Доверенность) + " на основании " + Строка(ДействуетНаОсновании) + ", ";
				
				Группа2.Добавить(Строка(Заказчики) +  ", " + Строка(Доверенность));
				
				ТЗ.Удалить(н);
				н = н - 1;
			ИначеЕсли НЕ ЗначениеЗаполнено(Корреспондент.ФизЛицо.ДатаРождения) Тогда
				ТекстОшибки = Строка(ТекстОшибки)+ "ОШИБКА ЗАПОЛНЕНИЯ КОНТАКТНОГО ЛИЦА: у корреспондента " + Строка(Корреспондент) + ". Не заполнено действует на основании." + Символы.ПС;
				ТЗ.Удалить(н);
				н = н - 1;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(Подписал.ФизЛицо)  Тогда
			Сообщить("ОШИБКА ЗАПОЛНЕНИЯ: у корреспондента " + Строка(ТЗ[н].Корреспондент) + " в контактном лице не заполнено ФизЛицо");
			Группа4.Добавить(Заказчики);
			ТЗ.Удалить(н);
			н = н - 1;
		КонецЕсли;	
		н = н + 1;
	КонецЦикла;
	
	ТабКон = ТЗ.Скопировать();
	ТабКон.Свернуть("ПодписалФизЛицо");
	
	//Отбор несовершенолетних
	н = 0;
	т = 0;
	Пока н < ТабКон.Количество()  Цикл
		Пока т < ТЗ.Количество()  Цикл
			Корреспондент = ТЗ[т].Корреспондент;
			Подписал      = ТЗ[т].Подписал;
			Дата = ДобавитьМесяц(Корреспондент.Физлицо.ДатаРождения, (18 * 12));
			Если ТабКон[н].ПодписалФизЛицо = Подписал.ФизЛицо И ТекущаяДата() < Дата Тогда
				Дети           = Строка(Дети) + Строка(Корреспондент) + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(Корреспондент, ДатаРег) + ", ";
				КонтактноеЛицо = Подписал;
				ТЗ.Удалить(т);
				т = т - 1;
			КонецЕсли;
			Если ТЗ.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			т = т + 1;
		КонецЦикла;	
		н = н + 1;
		т = 0;
		
		Если Дети <> "" И КонтактноеЛицо <> "" Тогда
			Группа3.Добавить(Строка(КонтактноеЛицо) + ", " + Гр_ПравилаАвтозаполненияШаблонов.ПолучитьПаспортныеДанныеФизлица(КонтактноеЛицо,ДатаРег ) + ", в интересах несовершеннолетних " + Дети);
		КонецЕсли;
		
		Дети = "";
	КонецЦикла;
	
	Массив = Новый Массив;
	Если ТекстОшибки = "" Тогда
		Для й = 0 по Группа1.ВГраница() Цикл
			Массив.Добавить(Группа1[й]);
		КонецЦикла;
		Массив.Добавить("Стоп");
		
		Для й = 0 по Группа2.ВГраница() Цикл
			Массив.Добавить(Группа2[й]);
		КонецЦикла;
		Массив.Добавить("Стоп");
		
		Для й = 0 по Группа3.ВГраница() Цикл
			Массив.Добавить(Группа3[й]);
		КонецЦикла;
		Массив.Добавить("Стоп");
		
		Для й = 0 по Группа4.ВГраница() Цикл
			Массив.Добавить(Группа4[й]);
		КонецЦикла;
	иначе
		Массив.Добавить(Текстошибки);
	КонецЕсли;
		
	Возврат Массив
КонецФункции

// меняет слово Руководитель в тексте:
//именуемое в дальнейшем «Подрядчик», в лице Руководитель, с одной стороны
Функция ВозвращетСтрокуНашегоРуководителя() Экспорт  
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОПользователях.Должность КАК Должность,
	|	ДействиеДоверенностей.НомерДоверенности КАК НомерДоверенности,
	|	ДействиеДоверенностей.Период КАК ДатаДоверенности,
	|	СведенияОПользователях.Пользователь КАК Руководство
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеДоверенностей КАК ДействиеДоверенностей
	|		ПО СведенияОПользователях.Пользователь = ДействиеДоверенностей.Пользователь
	|ГДЕ
	|	ДействиеДоверенностей.Пользователь = &Пользователь";
	
	Руководитель = Константы.РуководительПредприятия.Получить();
	Запрос.УстановитьПараметр("Пользователь", Руководитель);
	
	ВыборкаШапкаДоговора = Запрос.Выполнить().Выбрать();
	ВыборкаШапкаДоговора.Следующий();
	
	РезультатОбработки = СклонениеПоПадежам.обСклонениеСтроки(ВыборкаШапкаДоговора.Должность, "Р", "Должность");
	ФИОО               = СклонениеПоПадежам.ПросклонятьСтрокуФИО(ВыборкаШапкаДоговора.Руководство, "", "Р", "ФИО");
	РезультатОбработки = НРег(РезультатОбработки) + " " + ФизическиеЛица.ФамилияИнициалыФизЛица(ФИОО); 
	ПолСсылка          = СклонениеПоПадежам.ПолучитьПол(Руководитель);
	
	Если ПолСсылка = Перечисления.ПолФизическогоЛица.Женский тогда 
		РезультатОбработки = РезультатОбработки + ", действующей на основании ";
	Иначе
		РезультатОбработки = РезультатОбработки + ", действующего на основании ";
	КонецЕсли;
	
	Если Лев(ВыборкаШапкаДоговора.НомерДоверенности, 5) = "Устав" Тогда
		РезультатОбработки = РезультатОбработки + "Устава";
	Иначе
		РезультатОбработки = РезультатОбработки + ВыборкаШапкаДоговора.НомерДоверенности + " от " + Формат(ВыборкаШапкаДоговора.ДатаДоверенности, "ДЛФ = DD");
	КонецЕсли;    
	
    Возврат РезультатОбработки;
	
КонецФункции // Руководитель()

Функция АбзацыПорядокИСрокВыпЮЛ(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыДоговоров.ВидРабот.Ссылка КАК ВРСсылка,
	               |	ЭтапыДоговоров.ВидДней,
	               |	ЭтапыДоговоров.ДлительностьВыполненияРабот КАК Дни,
	               |	ЭтапыДоговоров.ШаблонУсловийДоговора КАК Условие
	               |ИЗ
	               |	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
	               |ГДЕ
	               |	НЕ ЭтапыДоговоров.ПорядокВыполненияСовместно
	               |	И НЕ ЭтапыДоговоров.ПометкаУдаления
	               |	И ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
	               |	И ЭтапыДоговоров.Владелец = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	тзСроковУсловийВР = Запрос.Выполнить().Выгрузить();
	
	//нельзя использовать предыдущий запрос, т к этапы, выполняющиеся совместно с другим, не попадут в выборку
	ЗапросПоВР = Новый Запрос;
	ЗапросПоВР.Текст = "ВЫБРАТЬ
					|	ЭтапыДоговоров.ВидРабот.Ссылка КАК ВР,
					|	ЭтапыДоговоров.ВидРабот.ВидРаботПоДоговорам КАК ВРПоДоговорам,
					|   ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК НаименованиеВР
					|ИЗ
					|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
					|ГДЕ
					|	НЕ ЭтапыДоговоров.ПометкаУдаления
					|	и ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)
					|	И ЭтапыДоговоров.Владелец = &Договор";
					
	ЗапросПоВР.УстановитьПараметр("Договор", Договор);
	тзВРпоДоговору = ЗапросПоВР.Выполнить().Выгрузить();
	тзВРпоДоговору.Свернуть("ВР,ВРПоДоговорам,НаименованиеВР");
	
	
	флЕстьРазработкаПроектаОтвода = Ложь;
	Если тзВРпоДоговору.Найти(Справочники.мВидыРаботЮрЛица.РазработкаПроектаОтвода,"ВР") <> Неопределено Тогда
		флЕстьРазработкаПроектаОтвода = Истина;
	КонецЕсли;
	
	флЕстьУбытки = Ложь;
	Если (тзВРпоДоговору.Найти("определение ориентировочного размера убытков","НаименованиеВР") <> Неопределено) ИЛИ //Поиск по наименованию в спр ВР для ЮЛ
		(тзВРпоДоговору.Найти("определение фактического размера убытков","НаименованиеВР") <> Неопределено) Тогда
		флЕстьУбытки = Истина;
	КонецЕсли;
	
	Если тзСроковУсловийВР.Количество() > 0 Тогда
		
		тзСроковУсловийВР.Свернуть("ВРСсылка, ВидДней, Дни, Условие");
		
		ВидРаботы             = Справочники.мВидыРаботЮрЛица.ПустаяСсылка();
		ВидРаботыСтр          = "";
		ВидРаботыПервый       = Справочники.мВидыРаботЮрЛица.ПустаяСсылка();
		ВидРаботыПредыдущий   = Справочники.мВидыРаботЮрЛица.ПустаяСсылка();
		ШаблонУсловий         = "";
		ВидДнейПлановогоСрока = "";
		ДниРаботы             = "";
		Предоплата            = "";
		флПоПредоплате        = 1;
		Для i = 0 по тзСроковУсловийВР.Количество() - 1 Цикл
			
			Если i = 0 Тогда//по первому этапу
				//отмечаем договор по предоплате или по факту
				флПоПредоплате  = тзСроковУсловийВР[i].Условие.УчетДатыПредоплаты;
				//запоминаем вид работ первого этапа
				ВидРаботыПервый = тзСроковУсловийВР[i].ВРСсылка;
			КонецЕсли;
			
			ВидРаботы             = тзСроковУсловийВР[i].ВРСсылка;
			ВидРаботыСтр          = ВидРаботы.ПолноеНаименование;
			ШаблонУсловий         = тзСроковУсловийВР[i].Условие;
			ВидДнейПлановогоСрока = тзСроковУсловийВР[i].ВидДней;
			
			Если ВидДнейПлановогоСрока = Перечисления.ВидыДней.Рабочие Тогда
				ВидДня = "рабочих";
			ИначеЕсли ВидДнейПлановогоСрока = Перечисления.ВидыДней.Календарные Тогда
				ВидДня = "календарных";
			Иначе 
				ВидДня = "";
			КонецЕсли;
			
			ДниРаботы = Строка(тзСроковУсловийВР[i].Дни) + " " + Строка(ВидДня);
			
			Если тзСроковУсловийВР[i].Дни > 1 И тзСроковУсловийВР[i].Дни < 5 Тогда
				ДниРаботы = Строка(ДниРаботы) + " дня";
			Иначе
				ДниРаботы = Строка(ДниРаботы) + " дней";
			КонецЕсли;
			
			Предоплата = "";
			Если ШаблонУсловий.УчетДатыПредоставленияРешения Тогда
				Предоплата = " после получения Подрядчиком выписки из решения местного исполнительно-распорядительного органа ";
			КонецЕсли;		
					
			Если ШаблонУсловий.УчетДатыПредоплаты тогда
				Если Предоплата <> "" Тогда
					Предоплата = Предоплата + " и перечисления предоплаты в размере " + ШаблонУсловий.ПроцентПредоплаты + "% от стоимости данного вида работ";
				Иначе
					Предоплата = ", исчисляется с момента перечисления предоплаты в размере " + ШаблонУсловий.ПроцентПредоплаты + "% от стоимости данного вида работ";
				КонецЕсли;
			Иначе
				Если Предоплата <> "" Тогда
					Предоплата = Предоплата + " и подписания договора";
				Иначе
					Предоплата = ", исчисляется с момента подписания договора";
				КонецЕсли;
			КонецЕсли;
			
			Если ШаблонУсловий.УчетДатыВыполненияПредыдущегоЭтапа Тогда
				Предоплата = Строка(Предоплата) + " и изготовления землеустроительного дела по виду работы «" + ВидРаботыПредыдущий.ПолноеНаименование + "»" ;
			КонецЕсли;
			
			Если (	ВидРаботы.ВидРаботПоДоговорам = Константы.Гр_ВидРаботУстановлениеГраницы.Получить() ИЛИ
					ВидРаботы.ВидРаботПоДоговорам = Константы.Гр_ВидРаботУстанНефиксированныхГраниц.Получить() )
					И флЕстьРазработкаПроектаОтвода Тогда
				//Предоплата = Строка(Предоплата) + ", а также, при наличии потерь сельскохозяйственной службы и лесохозяйственного производства, при условии предоставления, копии платежного поручения об их возмещении в соответствии с решением ";
				Предоплата = Строка(Предоплата) + ", при условии предоставления в соответствии с решением копии платежного поручения о возмещении потерь сельскохозяйственного и лесохозяйственного производства, при их наличии";
			КонецЕсли;
			
			Предоплата = Строка(Предоплата) + ".";
			
			
			//Если это установление фикс/нефикс границ и есть Разработка или Убытки и Шаблон Условий - предоплата: уточним необходимость полной оплаты Разработки или Убытков
			МоментОплатыСтр = "";
			Если флПоПредоплате 
					И (	ВидРаботы.ВидРаботПоДоговорам = Константы.Гр_ВидРаботУстановлениеГраницы.Получить() ИЛИ
						ВидРаботы.ВидРаботПоДоговорам = Константы.Гр_ВидРаботУстанНефиксированныхГраниц.Получить() )
					И (флЕстьРазработкаПроектаОтвода ИЛИ флЕстьУбытки)
			Тогда
				ПослеОплатыВидовРаботСтр = "";
				Если (флЕстьРазработкаПроектаОтвода И флЕстьУбытки) Тогда
					ПослеОплатыВидовРаботСтр = "«Разработка проекта отвода земельного участка» и «Определение ориентировочного/фактического размера убытков»";
				ИначеЕсли флЕстьРазработкаПроектаОтвода Тогда
					ПослеОплатыВидовРаботСтр = "«Разработка проекта отвода земельного участка»";
				Иначе//флЕстьУбытки
					ПослеОплатыВидовРаботСтр = "«Определение ориентировочного/фактического размера убытков»";
				КонецЕсли;
				МоментОплатыСтр     =  " Оплата работы «"+ВидРаботыСтр+"» - это дата поступления на расчетный счет Подрядчика денежных средств "
										+ "за выполнение работы исключительно после 100% оплаты работ"+?((флЕстьРазработкаПроектаОтвода И флЕстьУбытки)," ","ы ")+ПослеОплатыВидовРаботСтр+". "
										+ "В случае перечисления Заказчиком денежной суммы досрочно, пеня и проценты за пользование денежными средствами не взимаются."
			ИначеЕсли флПоПредоплате Тогда
				МоментОплатыСтр = " Стороны договорились, что момент оплаты - это дата поступления на расчетный счет Подрядчика денежных средств за выполнение работ.";
			КонецЕсли;
			
			//Склеиваем
			РезультатОбработки = Строка(РезультатОбработки) + "Срок выполнения работы «" + ВидРаботыСтр + "» составляет " + ДниРаботы 
									+ Предоплата + МоментОплатыСтр
									+ ?(i = тзСроковУсловийВР.Количество() - 1,"",Символы.ПС);
			//запомним ВР предыдущего этапа
			ВидРаботыПредыдущий = ВидРаботы;
		КонецЦикла;
		
		Если флПоПредоплате тогда
			Если тзСроковУсловийВР.Количество() = 1 Тогда
				РезультатОбработки = Строка(РезультатОбработки) + Символы.ПС + "Предоплата по договору должна быть произведена %ЗаказчикомИнвестором% в срок не более 45 календарных дней с момента составления настоящего Договора.";
			Иначе 
				РезультатОбработки = Строка(РезультатОбработки) + Символы.ПС + "Предоплата по виду работ «" + ВидРаботыПервый.ПолноеНаименование + "» должна быть произведена %ЗаказчикомИнвестором% в срок не более 45 календарных дней с момента составления настоящего Договора.";
			КонецЕсли;
			РезультатОбработки = Строка(РезультатОбработки) + " Подрядчик оставляет за собой право приступить к выполнению работ до внесения предоплаты.";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатОбработки
КонецФункции

Функция АбзацыУстановлениеСрокДействияЮЛ(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботУстановлениеГраницы.Получить());
	Установление = Запрос.Выполнить().Выгрузить();
		
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботФормированиеЗемУч.Получить());
	Формирование = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор",Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботВосстановлениеГраниц.Получить());
	Восстановление = Запрос.Выполнить().Выгрузить();
	
	Если Установление.Количество()>0 ИЛИ Формирование.Количество()>0 ИЛИ Восстановление.Количество()>0 Тогда
		Текст = Символы.ПС + "7.6.3. Если при установлении границы земельного участка усматриваются признаки самовольного занятия земельных участков (например, на земельном участке " +
					"расположены капитальные строения (здания, сооружения), ограждения, их части, не принадлежащие кандидату в правообладатели в отношении земельного участка, "+
					"или самовольно им возведенные (реконструированные)." + Символы.ПС +
				"7.6.4. Если при выполнении полевых работ Заказчиком не обеспечивается доступ на земельный участок."+ Символы.ПС +
				"7.6.5. В отношении земельного участка имеет место неразрешенный земельный спор. " + Символы.ПС +
				"7.6.6. В случае не поступления от Заказчика в срок, указанный подрядчиком, информации в письменном виде, содержащей обязательство присутствовать при повторном выезде "+
					"на местность для выполнения работ по установлению, восстановлению фиксированной границы земельного участка." + Символы.ПС +
				"7.6.7. В случае отказа Заказчика от подписания акта об ознакомлении заинтересованных сторон с установленной (восстановленной) границей земельного участка на местности." + Символы.ПС + 
				"7.6.8. В случае не поступления к подрядчику в течение двух месяцев со дня совершения отметки вступившего в силу решения (постановления) о разрешении возникшего земельного спора." + Символы.ПС +
				"7.6.9. Если при выполнении подготовительных или полевых работ по установлению границ земельных участков общего пользования садоводческого товарищества, дачного кооператива и (или) " +
					"члена садоводческого товарищества, дачного кооператива выясняется, что местоположение, линейные размеры границ, площадь этих участков не соответствуют указанным в утвержденном " +
					"проекте организации и застройки территории садоводческого товарищества, дачного кооператива или согласованном в установленном порядке плане земельных участков, передаваемых в " +
					"частную собственность, пожизненное наследуемое владение граждан, постоянное пользование садоводческого товарищества, дачного кооператива.";
	Иначе
		Текст = "";			
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

Функция ИсточникФинансированияАбзацОтвественностьСторон(ИсточникФинанс) Экспорт
	СобственныеСредства = "6.1. В случае просрочки выполнения работ по вине подрядчика, %ЗаказчикиИнвестор% имеет право на взыскание неустойки в размере 0,1%  от стоимости невыполненных работ за каждый день просрочки выполнения." + Символы.ПС +
						  "             6.2. За несвоевременную оплату выполненных по настоящему договору работ, %ЗаказчикИнвестор62% уплачивает подрядчику неустойку в размере 0,1% от суммы долга за каждый день просрочки платежа.";
						  
	Бюджет = "6.1. За невыполнение или ненадлежащее выполнение обязательств по настоящему Договору Подрядчик  и %ЗаказчикиИнвестор% несут ответственность в соответствии с действующим законодательством Республики Беларусь. " + Символы.ПС +
		   	 "              6.2. В случае невыполнения Подрядчиком работ, составляющих предмет Договора, в установленные сроки,  он уплачивает %ЗаказчикуИнвестору62% за каждый день просрочки пеню в соответствии с Указом Президента Республики Беларусь от 29.06.2000г. №359";
			 
	Если Справочники.мИсточникиФинансирования.НайтиПоНаименованию(ИсточникФинанс,,Справочники.мИсточникиФинансирования.Бюджет)<> Справочники.мИсточникиФинансирования.ПустаяСсылка() Тогда
		Возврат Бюджет;
		
	ИначеЕсли Справочники.мИсточникиФинансирования.НайтиПоНаименованию(ИсточникФинанс,,Справочники.мИсточникиФинансирования.СобственныеСредства)<> Справочники.мИсточникиФинансирования.ПустаяСсылка() Тогда
		Возврат СобственныеСредства;
		
	ИначеЕсли ИсточникФинанс = Справочники.мИсточникиФинансирования.Бюджет.Наименование Тогда
		Возврат Бюджет;
		
	ИначеЕсли ИсточникФинанс = Справочники.мИсточникиФинансирования.СобственныеСредства.Наименование Тогда 
		 Возврат СобственныеСредства;
		 
	Иначе
		Возврат "Ошибка! Выбран источник не из Бюджета и не из Собственных средств"; 
	КонецЕсли;
КонецФункции

Функция АбзацДопУсловияЮЛ(Договор) Экспорт
	Текст = Символы.ПС + "8.5. При выполнении работ по формированию земельного участка и(или) установлению (восстановлению) границы земельного "+
		"участка на местности Заказчик предоставляет за свой счет межевые знаки и рабочую силу для их постановки. По договоренности между "+
		"Сторонами межевые знаки могут быть предоставлены Подрядчиком с отнесением их стоимости на общую стоимость выполнения работ путем включения в смету.";	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботУстановлениеГраницы.Получить());
	Установление = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботВосстановлениеГраниц.Получить());
	Восстановление = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботУстанНефиксированныхГраниц.Получить());
	Нефиксированные = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботФормированиеЗемУч.Получить());
	Формирование = Запрос.Выполнить().Выгрузить();
	
	Если Установление.Количество()>0 ИЛИ Восстановление.Количество()>0 ИЛИ Нефиксированные.Количество()>0 ИЛИ Формирование.Количество()>0 Тогда
		Возврат Текст;
	Иначе	
	    Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ВозвратИсточникаФинансирования(ИсточникФинанс, Договор, Инвесторы = Ложь) Экспорт

	СобственныеСредства = "_________________________________________________________";						  
	Бюджет              = "__________________________ бюджет";
	
	Если Инвесторы Тогда
		Запрос = Новый запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВнутренниеДокументыКорреспонденты.Процент КАК Процент,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент КАК Корреспондент,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
		|ГДЕ
		|	ВнутренниеДокументыКорреспонденты.Ссылка = &Договор";
		Запрос.УстановитьПараметр("Договор", Договор);
		тзЗаказчиков = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВнутренниеДокументыИнвесторы.Процент КАК Процент,
		|	ВнутренниеДокументыИнвесторы.Корреспондент КАК Корреспондент,
		|   ВнутренниеДокументыИнвесторы.Корреспондент.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Инвесторы КАК ВнутренниеДокументыИнвесторы
		|ГДЕ
		|   ВнутренниеДокументыИнвесторы.Ссылка = &Договор
		|";
		Запрос.УстановитьПараметр("Договор",Договор);
		тзИнвесторов = Запрос.Выполнить().Выгрузить();

		//Инвестор-Заказчик у нас относится к Заказчикам
		Для каждого Инвестор из тзИнвесторов цикл
			Стр_тзЗаказчиков = тзЗаказчиков.Найти(Инвестор.Корреспондент,"Корреспондент");
			Если Стр_тзЗаказчиков <> Неопределено Тогда
				Стр_тзЗаказчиков.Процент = Инвестор.Процент;
				тзИнвесторов.Удалить(Инвестор);
			КонецЕсли;
		КонецЦикла;
		
		//Очистим всех Заказчиков, которые не участвуют в оплате
		Для каждого Заказчик из тзЗаказчиков цикл
			Если Заказчик.Процент = 0 Тогда
				тзЗаказчиков.Удалить(Заказчик);
			КонецЕсли;
		КонецЦикла;
		
		//Проверим в сумме процент оплат равен ли 100
		ПроцентИнвесторов = тзИнвесторов.Итог("Процент");
		ПроцентЗаказчиков = тзЗаказчиков.Итог("Процент");
		ПроцентИтого      = ПроцентИнвесторов + ПроцентЗаказчиков;
		Если ПроцентИтого <> 100 Тогда
			Текст = "Ошибка!Проверьте %оплаты у Заказчиков "+?(Инвесторы," и Инвесторов ","")+". Суммарный % составляет "+ПроцентИтого;
			Возврат Текст;
		КонецЕсли;
		
		//Выясним есть ли в таблицах ЮЛ, за счет которых, можно округления ФЛ сделать
		флЕстьЮЛЗаказчик = 0;
		Если тзЗаказчиков.Найти(Перечисления.ЮрФизЛицо.ЮрЛицо,"ЮрФизЛицо") <> Неопределено Тогда
			флЕстьЮЛЗаказчик = 1;
		КонецЕсли;
		флЕстьЮЛИнвестор = 0;
		Если тзИнвесторов.Найти(Перечисления.ЮрФизЛицо.ЮрЛицо,"ЮрФизЛицо") <> Неопределено Тогда
			флЕстьЮЛИнвестор = 1;
		КонецЕсли;
		Если ПроцентИнвесторов = 100 Тогда
			Текст = "" + ПроцентИнвесторов + "% от стоимости работ - Инвестор ______________________________";
		Иначе
			Текст =   ?(ПроцентИнвесторов,"" + ПроцентИнвесторов + "% от стоимости работ - Инвестор _________________________"+?(ПроцентЗаказчиков,"; ",""),"") 
			+ ?(ПроцентЗаказчиков,"" + ПроцентЗаказчиков + "% от стоимости работ - Заказчик ______________________________, ","");
		КонецЕсли;		
				
		Возврат Текст;
		 
	ИначеЕсли Справочники.мИсточникиФинансирования.НайтиПоНаименованию(ИсточникФинанс,,Справочники.мИсточникиФинансирования.Бюджет)<> Справочники.мИсточникиФинансирования.ПустаяСсылка() Тогда
		Возврат Бюджет;
		
	ИначеЕсли Справочники.мИсточникиФинансирования.НайтиПоНаименованию(ИсточникФинанс,,Справочники.мИсточникиФинансирования.СобственныеСредства)<> Справочники.мИсточникиФинансирования.ПустаяСсылка() Тогда
		Возврат СобственныеСредства;
		
	ИначеЕсли ИсточникФинанс = Справочники.мИсточникиФинансирования.Бюджет.Наименование Тогда
		Возврат Бюджет;
		
	ИначеЕсли ИсточникФинанс = Справочники.мИсточникиФинансирования.СобственныеСредства.Наименование Тогда 
		 Возврат СобственныеСредства;
		 
	Иначе
		Возврат "Ошибка! Выбран источник не из Бюджета и не из Собственных средств"; 
	КонецЕсли;

КонецФункции

Функция ВидАктаВСтоимостиЮЛ(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВидуРаботы();
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ВидРаботы", Константы.Гр_ВидРаботУстановлениеГраницы.Получить());
	Установление = Запрос.Выполнить().Выгрузить();
	
	Если Установление.Количество()>0 Тогда
		Возврат " об ознакомлении заинтересованных сторон с установленной (восстановленной) границей земельного участка на местности";
	Иначе
		Возврат "сдачи-приемки";
	КонецЕсли;
	
КонецФункции

Функция ПроцентОплатыЗаказчикаИнвестора(Договор) Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВнутренниеДокументыКорреспонденты.Процент КАК Процент,
	|	ВнутренниеДокументыКорреспонденты.Корреспондент КАК Корреспондент,
	|	ВнутренниеДокументыКорреспонденты.Корреспондент.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
	|ГДЕ
	|	ВнутренниеДокументыКорреспонденты.Ссылка = &Договор";
	Запрос.УстановитьПараметр("Договор", Договор);
	тзЗаказчиков = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВнутренниеДокументыИнвесторы.Процент КАК Процент,
	|	ВнутренниеДокументыИнвесторы.Корреспондент КАК Корреспондент,
	|   ВнутренниеДокументыИнвесторы.Корреспондент.ЮрФизЛицо КАК ЮрФизЛицо
	|ИЗ
	|	Справочник.ВнутренниеДокументы.Инвесторы КАК ВнутренниеДокументыИнвесторы
	|ГДЕ
	|   ВнутренниеДокументыИнвесторы.Ссылка = &Договор
	|";
	Запрос.УстановитьПараметр("Договор",Договор);
	тзИнвесторов = Запрос.Выполнить().Выгрузить();
	
	//Инвестор-Заказчик у нас относится к Заказчикам
	Для каждого Инвестор из тзИнвесторов цикл
		Стр_тзЗаказчиков = тзЗаказчиков.Найти(Инвестор.Корреспондент,"Корреспондент");
		Если Стр_тзЗаказчиков <> Неопределено Тогда
			Стр_тзЗаказчиков.Процент = Инвестор.Процент;
			тзИнвесторов.Удалить(Инвестор);
		КонецЕсли;
	КонецЦикла;
	
	//Очистим всех Заказчиков, которые не участвуют в оплате
	Для каждого Заказчик из тзЗаказчиков цикл
		Если Заказчик.Процент = 0 Тогда
			тзЗаказчиков.Удалить(Заказчик);
		КонецЕсли;
	КонецЦикла;
	
	//Проверим в сумме процент оплат равен ли 100
	ПроцентИнвесторов = тзИнвесторов.Итог("Процент");
	ПроцентЗаказчиков = тзЗаказчиков.Итог("Процент");
	ПроцентИтого      = ПроцентИнвесторов + ПроцентЗаказчиков;
	Если ПроцентИтого <> 100 Тогда
		Текст = "Ошибка!Проверьте %оплаты у Заказчиков "+?(тзИнвесторов.Количество()," и Инвесторов ","")+". Суммарный % составляет "+ПроцентИтого;
		Возврат Текст;
	КонецЕсли;
	
	//Заполним суммы этапов договора с разрезе ставок НДС
	Запрос.Текст = "ВЫБРАТЬ
    |	ЭтапыДоговоров.СтоимостьСНДС КАК Стоимость,
    |	ЭтапыДоговоров.СуммаНДС КАК СуммаНДС,
    |	ЭтапыДоговоров.СтавкаНДС КАК СтавкаНДС
    |ИЗ
    |	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
    |ГДЕ
    |	НЕ ЭтапыДоговоров.ПометкаУдаления И
    |	ЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0) И
    |	ЭтапыДоговоров.Владелец В(&Договор)";
	
	Запрос.УстановитьПараметр("Договор",Договор);
	
	СуммыПоДоговору = Запрос.Выполнить().Выгрузить();
	СтавкиНДС       = СуммыПоДоговору.Скопировать(,"СтавкаНДС");
	СтавкиНДС.Свернуть("СтавкаНДС");
	
	СуммаДоговора = СуммыПоДоговору.Итог("Стоимость");
	НДСДоговора   = СуммыПоДоговору.Итог("СуммаНДС");
	
	Если СуммаДоговора = 0 Тогда
		Текст = "Ошибка!Сумма договора 0";
		Возврат Текст;
	Иначе
		
		//До какой величины округлять суммы Физическим лицам.
		ОкруглятьФизЛицамСуммуДо = -2;
		ОкруглятьЮрЛицамСуммуДо  = 0;
		ОкруглятьСуммуНДСДо      = 0;
		
		ТипСуммы = Новый ОписаниеТипов("Число");
		
		//______________________РАСПРЕДЕЛЕНИЕ СУММ ДОГОВОРА___________________________________
		//
		//Выясним есть ли в таблицах ЮЛ, за счет которых, можно округления ФЛ сделать
		флЕстьЮЛЗаказчик = 0;
		Если тзЗаказчиков.Найти(Перечисления.ЮрФизЛицо.ЮрЛицо,"ЮрФизЛицо") <> Неопределено Тогда
			флЕстьЮЛЗаказчик = 1;
		КонецЕсли;
		флЕстьЮЛИнвестор = 0;
		Если тзИнвесторов.Найти(Перечисления.ЮрФизЛицо.ЮрЛицо,"ЮрФизЛицо") <> Неопределено Тогда
			флЕстьЮЛИнвестор = 1;
		КонецЕсли;
		
		//Распределим предварительно сумму между таблицами Заказчиков и Инвесторов
		Если флЕстьЮЛЗаказчик И флЕстьЮЛИнвестор Тогда//в обеих таблицах есть ЮЛ, округляем в каждой
			СуммаДоговораЗ = Окр(СуммаДоговора*ПроцентЗаказчиков*0.01,ОкруглятьЮрЛицамСуммуДо);
			НДСДоговораЗ   = Окр(НДСДоговора*ПроцентЗаказчиков*0.01,ОкруглятьСуммуНДСДо);
			СуммаДоговораИ = СуммаДоговора - СуммаДоговораЗ;
			НДСДоговораИ   = НДСДоговора - НДСДоговораЗ;
		ИначеЕсли (флЕстьЮЛЗаказчик И ПроцентЗаказчиков)ИЛИ                       //только в таблице Заказчиков есть ЮЛ и Заказчик платит
			((НЕ флЕстьЮЛЗаказчик)И(НЕ флЕстьЮЛИнвестор)И ПроцентЗаказчиков) Тогда//или вообще нет ЮЛ, но Заказчик платит. Округляем за счет Заказчика
			СуммаДоговораИ     = Окр(СуммаДоговора*ПроцентИнвесторов*0.01,ОкруглятьФизЛицамСуммуДо);
			СуммаДоговораЗ     = СуммаДоговора - СуммаДоговораИ;
			//из-за округления, процент распределения суммы изменился
			ПроцентИнвесторов1 = СуммаДоговораИ/?(НЕ СуммаДоговора,1,СуммаДоговора)*100;
			НДСДоговораИ       = Окр(НДСДоговора*ПроцентИнвесторов1*0.01,ОкруглятьСуммуНДСДо);
			НДСДоговораЗ       = НДСДоговора - НДСДоговораИ;
		ИначеЕсли (флЕстьЮЛИнвестор  И ПроцентЗаказчиков)ИЛИ                     //только в таблице Инвесторов есть ЮЛ и Инвестор платит 
			((НЕ флЕстьЮЛЗаказчик)И(НЕ флЕстьЮЛИнвестор)И ПроцентИнвесторов)Тогда//или вообще нет ЮЛ, но Инвестор платит. Округляем за счет Инвестора
			СуммаДоговораЗ = Окр(СуммаДоговора*ПроцентЗаказчиков*0.01,ОкруглятьФизЛицамСуммуДо);
			СуммаДоговораИ = СуммаДоговора - СуммаДоговораЗ;
			//из-за округления, процент распределения суммы изменился
			ПроцентЗаказчиков1 = СуммаДоговораЗ/?(НЕ СуммаДоговора,1,СуммаДоговора)*100;
			НДСДоговораЗ       = Окр(НДСДоговора*ПроцентЗаказчиков1*0.01,ОкруглятьСуммуНДСДо);
			НДСДоговораИ       = НДСДоговора - НДСДоговораЗ;
		Иначе
			Текст = "Ошибка!Распределим предварительно сумму между таблицами Заказчиков и Инвесторов:никто не платит???";
			Возврат Текст;
		КонецЕсли;	
		
		
		//Отсортируем таблицу, чтобы ЮЛ следовали в конце, на счет последнего ложится округление
		тзИнвесторов.Сортировать("ЮрФизЛицо Возр",);
		//Распределим сумму по таблице Заказчиков
		тзИнвесторов.Колонки.Добавить("Сумма",ТипСуммы);
		тзИнвесторов.Колонки.Добавить("НДС"  ,ТипСуммы);
		
		КоличествоСтрок = тзИнвесторов.Количество()-1;
		Для н = 0 По КоличествоСтрок Цикл
			Если н = КоличествоСтрок Тогда//это последняя строка, округления за счет нее
				тзИнвесторов[н].Сумма = СуммаДоговораИ - тзИнвесторов.Итог("Сумма");
				тзИнвесторов[н].НДС   = НДСДоговораИ   - тзИнвесторов.Итог("НДС");
			Иначе
				СуммаИСтроки = ?(тзИнвесторов[н].ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо,
				Окр(СуммаДоговора*тзИнвесторов[н].Процент*0.01,ОкруглятьЮрЛицамСуммуДо),//ЮЛ
				Окр(СуммаДоговора*тзИнвесторов[н].Процент*0.01,ОкруглятьФизЛицамСуммуДо));//ФЛ
				тзИнвесторов[н].Сумма = СуммаИСтроки;
				//из-за округления, процент распределения суммы изменился
				ПроцентИнвестора = СуммаИСтроки/?(НЕ СуммаДоговораИ,1,СуммаДоговораИ)*100;
				тзИнвесторов[н].НДС = Окр(НДСДоговораИ*ПроцентИнвестора*0.01,ОкруглятьСуммуНДСДо);
			КонецЕсли;			
		КонецЦикла;
		
		//Отсортируем таблицу, чтобы ЮЛ следовали в конце, на счет последнего ложится округление
		тзЗаказчиков.Сортировать("ЮрФизЛицо Возр",);
		//Распределим сумму по таблице Заказчиков
		тзЗаказчиков.Колонки.Добавить("Сумма",ТипСуммы);
		тзЗаказчиков.Колонки.Добавить("НДС"  ,ТипСуммы);
		
		КоличествоСтрок = тзЗаказчиков.Количество()-1;
		Для н = 0 По КоличествоСтрок Цикл
			Если н = КоличествоСтрок Тогда//это последняя строка, округления за счет нее
				тзЗаказчиков[н].Сумма = СуммаДоговораЗ - тзЗаказчиков.Итог("Сумма");
				тзЗаказчиков[н].НДС   = НДСДоговораЗ   - тзЗаказчиков.Итог("НДС");
			Иначе
				СуммаЗСтроки = ?(тзЗаказчиков[н].ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо,
				Окр(СуммаДоговора*тзЗаказчиков[н].Процент*0.01,ОкруглятьЮрЛицамСуммуДо),//ЮЛ
				Окр(СуммаДоговора*тзЗаказчиков[н].Процент*0.01,ОкруглятьФизЛицамСуммуДо));//ФЛ
				тзЗаказчиков[н].Сумма = СуммаЗСтроки;
				//из-за округления, процент распределения суммы изменился
				ПроцентЗаказчика = СуммаЗСтроки/?(НЕ СуммаДоговораЗ,1,СуммаДоговораЗ)*100;
				тзЗаказчиков[н].НДС = Окр(НДСДоговораЗ*ПроцентЗаказчика*0.01,ОкруглятьСуммуНДСДо);
			КонецЕсли;			
		КонецЦикла;
		
		//сформируем итоговые строки по суммам для вывода
		стрЗаказчикСумма = СокрЛП(мРаботаСДоговорами.СуммаЧисломИПрописью(СуммаДоговораЗ, Договор.Валюта)) + ", ";
		стрИнвесторСумма = СокрЛП(мРаботаСДоговорами.СуммаЧисломИПрописью(СуммаДоговораИ, Договор.Валюта)) + ", ";
		
		//сформируем итоговые строки по НДС для вывода
		//найдем ставку с Процентом отличным от 0(2ух разных ненулевых ставок быть не может)
		стрЗаказчикНДС = "";
		стрИнвесторНДС = "";
		СтавкаНДС = "";
		Для каждого Ставка из СтавкиНДС цикл
			Если Ставка.СтавкаНДС.Ставка > 0 Тогда
				СтавкаНДС = Ставка.СтавкаНДС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтавкаНДС = "" Тогда
			Текст = "Ошибка!В этапах договора не выбраны СтавкиНДС";
			Возврат Текст;
		Иначе
			стрЗаказчикНДС = " в т.ч. НДС по ставке "+СтавкаНДС.Ставка+"% - "+СокрЛП(мРаботаСДоговорами.СуммаЧисломИПрописью(НДСДоговораЗ, Договор.Валюта));
			стрИнвесторНДС = " в т.ч. НДС по ставке "+СтавкаНДС.Ставка+"% - "+СокрЛП(мРаботаСДоговорами.СуммаЧисломИПрописью(НДСДоговораИ, Договор.Валюта));
		КонецЕсли;
		
		текстИнвесторОплачивает = "- Инвестор оплачивает " + ПроцентИнвесторов + "% от стоимости Договора, что составляет - " + стрИнвесторСумма+стрИнвесторНДС;
		текстЗаказчикОплачивает = "- Заказчик оплачивает " + ПроцентЗаказчиков + "% от стоимости Договора, что составляет - " + стрЗаказчикСумма+стрЗаказчикНДС;
		Текст                   = Символы.ПС + "Оплата распределяется между Заказчиком и Инвестором  на основании  следующим образом:"
									+ ?(ПроцентИнвесторов,Символы.ПС + текстИнвесторОплачивает,"") + ?(ПроцентЗаказчиков,Символы.ПС + текстЗаказчикОплачивает,"");
		//Сообщить(Символы.ПС + Текст + ?(ПроцентИнвесторов,Символы.ПС + текстИнвесторОплачивает,"") + ?(ПроцентЗаказчиков,Символы.ПС + текстЗаказчикОплачивает,""));
		
		Возврат Текст;
	КонецЕсли;
	
	Возврат  Текст;
КонецФункции
