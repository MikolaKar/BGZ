
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура, вызываемая при начале работы системы. Используется для
// конфигураций, основанных на библиотеке стандартных подсистем (БСП)
// Параметры:
//	ПараметрыРаботыКлиентаПриЗапуске - ФиксированнаСтруктура - см.
//		процедуру ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиентаПриЗапуске
// 
Процедура ПриНачалеРаботыСистемы(ПараметрыРаботыКлиентаПриЗапуске = Неопределено) Экспорт
	
	ПараметрыИПП = Неопределено;
	Если ПараметрыРаботыКлиентаПриЗапуске <> Неопределено Тогда
		ПараметрыРаботыКлиентаПриЗапуске.Свойство("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	КонецЕсли;
	
	ВыполнитьСценарий("systemStartNew", , , ПараметрыИПП);
	
КонецПроцедуры

// Выполняет подключение пользователя к сервису Интернет-поддержки
// пользователей: аутентификация пользователя, восстановление пароля
// пользователя, регистрация нового пользователя, регистрация программного
// продукта.
// При успешном завершении процесса подключения Интернет-поддержки, возвращаются
// введенные пользователем логин и пароль через объект ОписаниеОповещения.
//
// Параметры:
//	ОписаниеОповещенияОЗавершении - ОписаниеОповещения - обработчик оповещения о
//		завершении процесса подключения к Интернет-поеддержке. В качестве
//		результата в обработчик оповещения возвращается значение: Неопределено -
//		если подключение Интернет-поддержки не было выполнено успешно; Если
//		пользователь успешно завершил подключение Интернет-поддержки, тогда
//		в обработчик оповещения возвращается объект типа Структура с полями:
//			* Логин - Строка - введенный логин;
//			* Пароль - введенный пароль.
//
Процедура ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещенияОЗавершении) Экспорт
	
	МестоЗапуска = "connectIPP";
	
	ОбработчикиРезультата = НовыйОбработчикиЗавершенияБизнесПроцесса();
	ОбработчикиРезультата.ОповещенияОбАвторизации.Добавить(ОписаниеОповещенияОЗавершении);
	
	ВыполнитьСценарий(МестоЗапуска, , , , ОбработчикиРезультата);
	
КонецПроцедуры

// Открытие информационного окна из меню.
//
// Параметры:
// СтартовыеПараметры - Структура - передаваемые стартовые параметры,
//	ключ структуры - имя параметра, значение - значение параметра.
//
Процедура СтартоватьМеханизмИзМеню(СтартовыеПараметры = Неопределено) Экспорт
	
	МестоЗапуска = "handStartNew";
	
	// Выполнение сценария интерент-поддержки.
	ВыполнитьСценарий(МестоЗапуска, СтартовыеПараметры);
	
КонецПроцедуры

// Общая (универсальная) процедура для запуска бизнес-процесса
// интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма (имя кнопки);
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра.
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение"
//
Процедура СтартоватьМеханизм(МестоЗапуска, СтартовыеПараметры = Неопределено, Повторно = Ложь) Экспорт
	
	// Выполнение сценария интерент-поддержки.
	ВыполнитьСценарий(МестоЗапуска, СтартовыеПараметры, Повторно);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервисные экспортные процедуры и функции инетрнет-поддержки пользователей

// Определяет, зарегистрирована ли текущая конфигурация в сервисе
// интернет-поддержки.
//
// Параметры:
//	ОшибкаОбращенияКВебСервису - Булево - в параметре возвращается Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//			произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
#Если ВебКлиент Тогда
	ЭтоВебКлиент = Истина;
#Иначе
	ЭтоВебКлиент = Ложь;
#КонецЕсли
	
	ОбращениеССервера = Ложь;
	ПараметрыИПП      = Неопределено;
	КонфигурацияЗарегистрирована = ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(
		ОбращениеССервера,
		ПараметрыИПП,
		ЭтоВебКлиент,
		ОшибкаОбращенияКВебСервису);
	
	Если ОбращениеССервера Тогда
		
		Возврат КонфигурацияЗарегистрирована;
		
	Иначе
		
		// Обращение к веб-сервису ИПП из клиента 1С:Предприятия
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.КонфигурацияЗарегистрированаВСервисеИПП(
			,
			ОшибкаОбращенияКВебСервису,
			,
			ПараметрыИПП);
		
	КонецЕсли;
	
КонецФункции

// Открывает форму настройки параметров интернет-поддержки пользователей.
// Параметры:
//	ВладелецФормы - УправляемаяФорма, Неопределено - владелец открываемой формы
//	БлокироватьОкноВладельца - Булево - Истина, если форма должна быть открыта
//		в режиме блокирования окна владельца.
//
// Возвращаемое значение:
//	УправляемаяФорма - открытая форма параметров интернет-поддержки
//		пользователей.
//
Функция ОткрытьФормуНастроекПараметровПодключения(
	ВладелецФормы = Неопределено,
	БлокироватьОкноВладельца = Истина) Экспорт
	
	РежимОткрытияОкна = ?(БлокироватьОкноВладельца,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
		РежимОткрытияОкнаФормы.Независимый);
	
	Возврат ОткрытьФорму("ОбщаяФорма.ПараметрыПодключенияКИнтернетПоддержке",
		,
		ВладелецФормы,
		Ложь,
		,
		,
		,
		РежимОткрытияОкна);
	
КонецФункции

// Устарела. Необходимо использовать процедуру
// ПодключитьИнтернетПоддержкуПользователей().
// Будет удалена из программного интерфейса в следующей версии библиотеки.
// Подключение интернет-поддержки пользователей (или смена пользователя ИПП)
// из формы настроек ИПП.
//
// Параметры:
// СтартовыеПараметры - Структура - передаваемые стартовые параметры,
//	ключ структуры - имя параметра, значение - значение параметра.
//
Процедура ПодключитьИнтернетПоддержку(СтартовыеПараметры = Неопределено) Экспорт
	
	МестоЗапуска = "connectIPP";
	
	// Выполнение сценария интерент-поддержки.
	ВыполнитьСценарий(МестоЗапуска, СтартовыеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с электронным документооборотом

// Запуск механизма работы с сервисом оператора ЭДО
//
// Параметры:
// СертификатЭЦП - Произвольный - сертификат ЭЦП;
// Организация - Произвольный - организация, организация, с которой связан
//		сертификат;
// ВариантБизнесПроцесса - Строка - имя действия ЭДО.Возможные значения:
//		"taxcomGetID"  - запуск получения (регистрации) нового идентификатора
//		"taxcomPrivat" - вход в личный кабинет абонента ЭДО.
// ИдентификаторОрганизации - Строка - идентификатор организации в системе ЭДО;
// ПарольСертификатаЭЦП - Строка, Неопределено - пароль используемого
//		во избежание повторного ввода пароля;
// УникальныйИдентификаторФормы (УникальныйИдентификатор) - идентификатор формы,
//	из которой был вызван метод. Используется как источник события при
//	оповещении формы-инициатора о результате.
//
Процедура СтартоватьМеханизмРаботыСОператоромЭДО(
	СертификатЭЦП,
	Организация,
	ВариантБизнесПроцесса,
	ИдентификаторОрганизации = "",
	ПарольСертификатаЭЦП = Неопределено,
	УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Проверка заполнения необходимых полей
	ТекстОшибки      = "";
	ТекстСообщения   = "";
	КоличествоОшибок = 0;
	
	Если НЕ ЗначениеЗаполнено(СертификатЭЦП) Тогда
		
		ТекстОшибки = НСтр("ru = '""Сертификат абонента""'");
		КоличествоОшибок = КоличествоОшибок + 1;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'и'") + " ";
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + НСтр("ru = '""Организация""'");
		КоличествоОшибок = КоличествоОшибок + 1;
		
	КонецЕсли;
	
	// Проверка остальных параметров дублирует проверку библиотеки ЭДО.
	// При совместной работе с библиотекой ЭДО эти проверки всегда будут
	// проходить со значением Истина
	Если КоличествоОшибок > 0 Тогда
		
		Если КоличествоОшибок = 1 Тогда
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поле'") + " ";
		Иначе
			ДопТекст = НСтр("ru = 'Пожалуйста, заполните поля'") + " ";
		КонецЕсли;
		
		ТекстСообщения = ДопТекст + ТекстОшибки;
		
		Если ВариантБизнесПроцесса = "taxcomGetID" Тогда
			ТекстСообщения = ТекстСообщения
				+ " " + НСтр("ru = 'до получения уникального идентификатора участника обмена ЭД'");
		ИначеЕсли ВариантБизнесПроцесса = "taxcomPrivat" Тогда
			ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'до перехода в личный кабинет'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	// Запуск механизма
	Если ВариантБизнесПроцесса = "taxcomGetID" Тогда
		
		Если ПустаяСтрока(ИдентификаторОрганизации) Тогда
			// Это получение идентификатора
			ТекстОповещенияПользователя = 
			НСтр("ru = 'Получение уникального идентификатора участника обмена ЭД будет доступно
					   |после подключения к сервису интернет-поддержки пользователей и проверки
					   |подлинности владельца указанного в соглашении сертификата абонента.
					   |Продолжить?'");
		Иначе
			ТекстОповещенияПользователя =
			НСтр("ru = 'Добавление нового сертификата в соглашение будет выполнено
					   |после подключения к сервису интернет-поддержки пользователей и проверки
					   |подлинности владельца указанного в соглашении сертификата абонента.
					   |Продолжить?'");
		КонецЕсли;
		
	ИначеЕсли ВариантБизнесПроцесса = "taxcomPrivat" Тогда
		
		ТекстОповещенияПользователя = 
		НСтр("ru = 'Вход в личный кабинет участника обмена ЭД будет доступен
				   |после подключения к сервису интернет-поддержки пользователей и проверки
				   |подлинности владельца указанного в соглашении сертификата абонента.
				   |Продолжить?'");
		
	Иначе
		
		ТекстПредупреждения = СтрЗаменить(
			НСтр("ru = 'Ошибка встраивания механизма интернет-поддержки пользователей.
						|Указан неверный вариант бизнес-процесса (%1).'"),
			"%1",
			ВариантБизнесПроцесса);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	СтартовыеПараметрыЭДО = Новый Структура;
	СтартовыеПараметрыЭДО.Вставить("IDCertificateED"   , СертификатЭЦП);
	СтартовыеПараметрыЭДО.Вставить("IDOrganizationED"  , Организация);
	СтартовыеПараметрыЭДО.Вставить("identifierTaxcomED", ИдентификаторОрганизации);
	
	Если ПарольСертификатаЭЦП <> Неопределено Тогда
		СтартовыеПараметрыЭДО.Вставить("passwordCertificateED", ПарольСертификатаЭЦП);
	КонецЕсли;
	
	Если УникальныйИдентификаторФормы <> Неопределено Тогда
		СтартовыеПараметрыЭДО.Вставить("IDParentForm", УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИдентификаторОрганизации) И ВариантБизнесПроцесса = "taxcomGetID" Тогда
		СтартовыеПараметрыЭДО.Вставить("ToAddCert", "YES");
	КонецЕсли;
	
	ДопПараметрыОповещения = Новый Структура("ВариантБизнесПроцесса, СтартовыеПараметрыЭДО",
		ВариантБизнесПроцесса,
		СтартовыеПараметрыЭДО);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОНачалеБизнесПроцессаЭДО",
		ЭтотОбъект,
		ДопПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстОповещенияПользователя, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполнение сценария запуска механизма интернет-поддержки пользователей.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска механизма. Возможные значения:
//		"systemStartNew" - запуск при запуске программы;
//		"handStartNew" - ручной запуск из меню;
//		"connectIPP" - запуск по кнопке "Подключить интернет-поддержку"
//		"taxcomGetID" - получение уникального идентификатора Такском;
//		"taxcomPrivat" - вход в личный кабинет 1С:Такском;
//	СтартовыеПараметры - Структура - стартовые параметры механизма.
//		ключ структуры соответствует имени параметра, значение - значению
//		параметра. Состав параметров произвольный;
//	Повторно - Булево - признак того, что механизм запускается из формы ошибки
//		подключения (ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету)
//		кнопкой "Повторить подключение";
//	ПараметрыРаботыИПП - Структура, Неопределено - параметры ИПП при запуске.
//		* УправляющаяСтруктураЗапуска - Структура - если запуск запрещен (см.
//			функцию ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам;
//		* ПараметрыКонтекстаВзаимодействия - Структура, ФиксированнаяСтруктура -
//			см. функцию ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия;
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса (см. функцию
//		НовыйОбработчикиЗавершенияБизнесПроцесса())
//
Процедура ВыполнитьСценарий(
	МестоЗапуска,
	СтартовыеПараметры = Неопределено,
	Повторно = Ложь,
	ПараметрыИПП = Неопределено,
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено)
	
	ТипПараметрыРаботыИПП = ТипЗнч(ПараметрыИПП);
	
	ПараметрыКонтекстаВзаимодействия = Неопределено;
	Если ТипПараметрыРаботыИПП = Тип("Структура")
		ИЛИ ТипПараметрыРаботыИПП = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ПараметрыИПП.Свойство("УправляющаяСтруктураЗапуска") Тогда
			ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, ПараметрыИПП.УправляющаяСтруктураЗапуска);
			ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
			Возврат;
		Иначе
			ПараметрыИПП.Свойство("ПараметрыКонтекстаВзаимодействия", ПараметрыКонтекстаВзаимодействия);
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Если ПараметрыКонтекстаВзаимодействия <> Неопределено Тогда
			ПараметрыСозданияКонтекста = Неопределено;
		Иначе
			ПараметрыСозданияКонтекста = Новый Структура("МестоЗапуска, ПовторныйЗапуск, СтартовыеПараметры",
				МестоЗапуска,
				Повторно,
				СтартовыеПараметры);
		КонецЕсли;
		
		ВызовСервиса(
			ПараметрыКонтекстаВзаимодействия,
			ПараметрыСозданияКонтекста,
			ОбработчикиЗавершенияБизнесПроцесса);
		
	Исключение
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
			Новый Структура("МестоЗапуска, СтартовыеПараметры, ОписаниеОшибки",
				МестоЗапуска,
				СтартовыеПараметры,
				НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'")));
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действия при запрете запуска ИПП по каким-либо причинам.
// Параметры:
//	МестоЗапуска - Строка - имя кнопки запуска ИПП;
//	СтруктураЗапуска - Структура - управляющая структура запуска.
//		(см. функцию  ОпределитьВозможностьЗапускаПоМестуИПараметрам()
//		общего модуля ИнтернетПоддержкаПользователейКлиентСервер)
//
Процедура ОбработатьСтруктуруЗапускаИПП(МестоЗапуска, Знач СтруктураЗапуска) Экспорт
	
	Если СтруктураЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураЗапуска.Действие = "Возврат" Тогда
		
		Состояние();
		
	ИначеЕсли СтруктураЗапуска.Действие = "ПоказатьСообщение" Тогда
		
		Состояние();
		
		Если МестоЗапуска = "systemStartNew" Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				СтруктураЗапуска.Сообщение,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		Иначе
			ПоказатьПредупреждение(,
				СтруктураЗапуска.Сообщение,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ пользователя на вопрос из СтартоватьМеханизмРаботыСОператоромЭДО()
//
Процедура ПриОтветеНаВопросОНачалеБизнесПроцессаЭДО(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСценарий(ДопПараметры.ВариантБизнесПроцесса, ДопПараметры.СтартовыеПараметрыЭДО);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка команд сервиса ИПП

// Вызывается стартовым механизмом для выполнения первого обращения к
// веб-сервису ИПП и получения команд от веб-сервиса для дальнейшего
// их выполнения.
//
// Параметры:
//	ПараметрыКонтекстаВзаимодействияПриЗапуске - Структура, Неопределено -
//		уже созданный или отсутствующий контекст;
//	ПараметрыСозданияКонтекста - Структура - параметры создания
//		нового контекста взаимодействия, если контекст не существует;
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса (см. функцию
//		НовыйОбработчикиЗавершенияБизнесПроцесса())
//
Процедура ВызовСервиса(
	ПараметрыКонтекстаВзаимодействияПриЗапуске,
	ПараметрыСозданияКонтекста,
	ОбработчикиЗавершенияБизнесПроцесса)
	
	Если ПараметрыКонтекстаВзаимодействияПриЗапуске = Неопределено Тогда
		
		КонтекстВзаимодействия = Неопределено;
		
	Иначе
		
		Если ТипЗнч(ПараметрыКонтекстаВзаимодействияПриЗапуске) = Тип("ФиксированнаяСтруктура") Тогда
			КонтекстВзаимодействия = ЗначениеИзФиксированногоТипа(ПараметрыКонтекстаВзаимодействияПриЗапуске);
		Иначе
			КонтекстВзаимодействия = ПараметрыКонтекстаВзаимодействияПриЗапуске;
		КонецЕсли;
		
		ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
		Если НЕ ОсновныеПараметры.ОбращениеССервера Тогда
			// Определение параметров прокси-сервера для клиентского приложения
			ПараметрыПроксиСервера = Неопределено;
			ИнтернетПоддержкаПользователейКлиентПереопределяемый.НастройкиПроксиСервера(ПараметрыПроксиСервера);
			КонтекстВзаимодействия.СетевыеПараметрыИПП.ПараметрыПроксиСервера = ПараметрыПроксиСервера;
		КонецЕсли;
		
		КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
			ОбработчикиЗавершенияБизнесПроцесса);
		
	КонецЕсли;
	
	// Параметры, передаваемые сервису при первом вызове и сохраняемые на стороне
	// сервера ИПП в сеансовых переменных.
	ДополнительныеСтартовыеПараметры = Новый Массив;
	ДополнительныеСтартовыеПараметры.Добавить("libraryVersion");
	ДополнительныеСтартовыеПараметры.Добавить("APIVersion");
	ДополнительныеСтартовыеПараметры.Добавить("versionConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("versionPlatform");
	ДополнительныеСтартовыеПараметры.Добавить("nameConfiguration");
	ДополнительныеСтартовыеПараметры.Добавить("language");
	ДополнительныеСтартовыеПараметры.Добавить("enterPoint");
	
	ОбработкаКомандСервиса(
		КонтекстВзаимодействия,
		Неопределено,
		Неопределено,
		,
		,
		ДополнительныеСтартовыеПараметры,
		,
		ПараметрыСозданияКонтекста,
		ОбработчикиЗавершенияБизнесПроцесса);
	
КонецПроцедуры

// Процедура получает команды от веб-сервиса и выполняет их на стороне клиента
// или передает управление серверу 1С:Предприятия.
//
// Параметры:
// КонтекстВзаимодействия - Структура - контекст взаимодействия с
//		сервисом ИПП (см. функцию ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()).
// ТекущаяФорма - УправляемаяФорма - форма, вызвавшая метод для выполнения
//		команд сервиса;
// ПараметрыЗапроса - Массив - массив элементов типа Структура:
//		* Имя - Строка - имя параметра;
//		* Значение - Произвольный - значение параметра;
//		* БизнесПроцесс - Строка - имя бизнес-процесса, к которому относится параметр;
// КонтекстОбработчика - Структура - контекст обработчика команд (см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд();
// ПараметрыОбращенияКСервисуИПП - Структура - дополнительные параметры
//		обращения к сервису ИПП:
//	* ОбработатьОтвет - Булево - Истина, если необходимо обработать ответ
//			сервиса;
//	* ОтобразитьСостояниеОбращения - Булево - Истина, если необходимо отобразить
//			состояние обращения к сервису ИПП;
//	* ОчиститьСессиюПередВыполнениемЗапроса - Булево - Истина, если перед
//			выполнением запроса необходимо удалить сессионные параметры;
// ПродолжитьВыполнение - Булево - Истина, если необходимо продолжить выполнение
//		без обращения к сервису ИПП;
// ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса (см. функцию
//		НовыйОбработчикиЗавершенияБизнесПроцесса())
//
Процедура ОбработкаКомандСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	ПараметрыЗапроса,
	КонтекстОбработчика = Неопределено,
	ПараметрыОбращенияКСервисуИПП = Неопределено,
	ДополнительныеПараметрыЗапроса = Неопределено,
	ПродолжитьВыполнение = Ложь,
	ПараметрыСозданияКонтекста = Неопределено,
	ОбработчикиЗавершенияБизнесПроцесса = Неопределено) Экспорт
	
	ОтобразитьСостояниеОбращения = Истина;
	ОбработатьОтвет              = Истина;
	НеобходимоОчиститьСессию     = Ложь;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет") Тогда
			ОбработатьОтвет = ПараметрыОбращенияКСервисуИПП.ОбработатьОтвет;
		КонецЕсли;
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОтобразитьСостояниеОбращения") Тогда
			ОтобразитьСостояниеОбращения = ПараметрыОбращенияКСервисуИПП.ОтобразитьСостояниеОбращения;
		КонецЕсли;
		
		Если ПараметрыОбращенияКСервисуИПП.Свойство("ОчиститьСессиюПередВыполнениемЗапроса") Тогда
			НеобходимоОчиститьСессию = ПараметрыОбращенияКСервисуИПП.ОчиститьСессиюПередВыполнениемЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтобразитьСостояниеОбращения = Истина Тогда
		ОтобразитьСостояниеОбращениеКСервису();
	КонецЕсли;
	
	Если НеобходимоОчиститьСессию = Истина И КонтекстВзаимодействия <> Неопределено Тогда
		ОчиститьСессию(КонтекстВзаимодействия);
	КонецЕсли;
	
	// Если контекст обработчика команд не задан, тогда необходимо подготовить его структуру
	Если КонтекстОбработчика = Неопределено Тогда
		// Создание контекста обработчика команд
		КонтекстОбработчика = ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд();
	КонецЕсли;
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		ОсновныеПараметры = Неопределено;
	Иначе
		ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	КонецЕсли;
	
	Если НЕ ПродолжитьВыполнение Тогда
		
		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		// Если выполняется первое обращение, тогда необходимо
		// получить команды от веб-сервиса
		
		Если КонтекстВзаимодействия = Неопределено Тогда
			
			// Обработка первого запуска при незаданном контексте взаимодействия
			// создание на стороне сервера ИБ контекста взаимодействия и первое
			// обращение к сервису ИПП (для минимизации клиент-серверных вызовов)
			ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
				Неопределено,
				ПараметрыЗапроса,
				КонтекстОбработчика,
				Ложь,
				ПараметрыОбращенияКСервисуИПП,
				ДополнительныеПараметрыЗапроса,
				КонтекстВзаимодействия,
				ПараметрыСозданияКонтекста);
			
			Если КонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска") Тогда
				ОбработатьСтруктуруЗапускаИПП(ПараметрыСозданияКонтекста.МестоЗапуска,
					КонтекстВзаимодействия.УправляющаяСтруктураЗапуска);
				ОповеститьОЗавершенииБизнесПроцесса(ОбработчикиЗавершенияБизнесПроцесса, Неопределено);
				Возврат;
			КонецЕсли;
			
			КонтекстВзаимодействия.Вставить("ОбработчикиЗавершенияБизнесПроцесса",
				ОбработчикиЗавершенияБизнесПроцесса);
			
			ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
			Если НЕ ОсновныеПараметры.ОбращениеССервера Тогда
				
				ПараметрыПроксиСервера = Неопределено;
				ИнтернетПоддержкаПользователейКлиентПереопределяемый.НастройкиПроксиСервера(ПараметрыПроксиСервера);
				КонтекстВзаимодействия.СетевыеПараметрыИПП.Вставить("ПараметрыПроксиСервера", ПараметрыПроксиСервера);
				
				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ДополнительныеПараметрыЗапроса,
					ПараметрыЗапроса);
				
				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);
				
			КонецЕсли;
			
		Иначе
			
			// При последующих запусках все выполняется в штатном режиме
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				
				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					ПараметрыЗапроса,
					КонтекстОбработчика,
					Ложь,
					ПараметрыОбращенияКСервисуИПП,
					ДополнительныеПараметрыЗапроса);
				
			Иначе
				
				ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
					КонтекстВзаимодействия.КСКонтекст,
					ДополнительныеПараметрыЗапроса,
					ПараметрыЗапроса);
				
				ДобавитьКомандыСервиса(
					КонтекстВзаимодействия,
					ПараметрыЗапроса,
					КонтекстОбработчика);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если обрабатывать ответ сервиса не требуется, тогда возврат
	Если ОбработатьОтвет <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПрерватьОбработкуКоманд = Ложь;
	Попытка
		
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку
			И НЕ ПрерватьОбработкуКоманд Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера);
			
			Если ТипКоманды = -1 Тогда
				// Если тип команды (клиентская или серверная) определить не удалось,
				// тогда пропустить команду
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 1 Тогда
				
				// Выполнение команды на клиенте
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(
					КонтекстВзаимодействия,
					ТекущаяФорма,
					ТекущаяКоманда,
					КонтекстОбработчика,
					ПрерватьОбработкуКоманд);
				
			Иначе
				// Если команда серверная, тогда передать управление серверу 1С:Предприятия
				// При повторном вызове, обращение к веб-сервису не выполняется
				// поэтому сессионные параметры не передаются
				ИнтернетПоддержкаПользователейВызовСервера.ОбработкаКомандСервиса(
					КонтекстВзаимодействия.КСКонтекст,
					Неопределено,
					КонтекстОбработчика,
					Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение:'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	Если ОтобразитьСостояниеОбращения = Истина Тогда
		Состояние();
	КонецЕсли;
	
	ДопСвойства = КонтекстОбработчика.ДопСвойства;
	Если ДопСвойства.Свойство("ИзмененЛогинПользователя") Тогда
		
		КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
		ЛогинПользователяИИП = ДопСвойства.ИзмененЛогинПользователя;
		ДопСвойства.Удалить("ИзмененЛогинПользователя");
		КСКонтекст.Логин = ЛогинПользователяИИП;
		Оповестить("ИнтернетПоддержкаИзменениеДанныхАвторизации",
			Новый Структура("Логин", ЛогинПользователяИИП));
		
		Если ПустаяСтрока(ЛогинПользователяИИП) Тогда
			
			// Выход пользователя
			Если КонтекстВзаимодействия.Свойство("ВведенныеЛогинИПароль") Тогда
				КонтекстВзаимодействия.Удалить("ВведенныеЛогинИПароль");
			КонецЕсли;
			
		Иначе
			
			ВведенныеЛогинИПароль = Новый Структура("Логин, Пароль",
				ЛогинПользователяИИП,
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "password"));
			
			КонтекстВзаимодействия.Вставить("ВведенныеЛогинИПароль", ВведенныеЛогинИПароль);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрерватьОбработкуКоманд И НЕ КонтекстОбработчика.ПроизошлаОшибка Тогда
		// При возникновении асинхронного действия необходимо прервать обработку
		// команд сервиса. Выполнение будет инициировано завершением асинхронного
		// действия.
		Возврат;
	КонецЕсли;
	
	// Если в процессе выполнения произошла ошибка, тогда выполнить обработку ошибки
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		
		ЗакрытьВсеФормы(КонтекстВзаимодействия);
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
		// Завершение сеанса
		Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
			
			// Завершение сеанса на сервере информационной базы
			ИнтернетПоддержкаПользователейВызовСервера.ЗавершитьСеансИнтернетПоддержки(
				КонтекстВзаимодействия.КСКонтекст,
				КонтекстОбработчика);
			
			Если КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() > 0 Тогда
				// Осталось только действие закрытия сеанса, т.е. требуется отправить
				// из клиентского приложения команду завершения бизнес-процесса
				ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение" Тогда
			
			ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
			ПараметрыФормы.Вставить("ОписаниеОшибки",
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
			ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
				ПараметрыФормы);
			
		ИначеЕсли КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение"
			И НЕ ПустаяСтрока(КонтекстОбработчика.ПользовательскоеОписаниеОшибки) Тогда
			
			ПоказатьПредупреждение(,
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки,
				,
				НСтр("ru = 'Интернет-поддержка пользователей'"));
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли КонтекстОбработчика.ВыполнитьОстановку Тогда
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
		Если КонтекстОбработчика.Свойство("ОписаниеПричиныОстановки") Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Интернет-поддержка пользователей'"),
				,
				КонтекстОбработчика.ОписаниеПричиныОстановки,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		КонецЕсли;
		
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		
	ИначеЕсли КонтекстВзаимодействия.Свойство("БизнесПроцессУспешноЗавершен")
		И КонтекстВзаимодействия.БизнесПроцессУспешноЗавершен = Истина Тогда
		
		ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
			КонтекстВзаимодействия);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команды в стек команд контекста обработчика команд
//
Процедура ДобавитьКомандыСервиса(
	КонтекстВзаимодействия,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	Попытка
		
		Если КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено Тогда
			КонтекстВзаимодействия.ОписаниеСервисаИПП = ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
				ОсновныеПараметры.ИмяWSОпределения,
				КонтекстВзаимодействия.СетевыеПараметрыИПП);
		КонецЕсли;
		
		ОписаниеСервисаИПП = КонтекстВзаимодействия.ОписаниеСервисаИПП;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису интернет-поддержки.'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИПП,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры);
		
		// После первого вызова необходимо отключить таймаут сети, т.к.
		// проверка обращения по таймауту уже выполнена
		Если КонтекстВзаимодействия.СетевыеПараметрыИПП.ТаймаутСети <> 0 Тогда
			КонтекстВзаимодействия.СетевыеПараметрыИПП.ТаймаутСети = 0;
			ИнтернетПоддержкаПользователейКлиентСервер.ИзменитьТаймаутОбращения(ОписаниеСервисаИПП, 0);
		КонецЕсли;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки = НСтр("ru = 'Ошибка при получении данных с сервера интернет-поддержки.'");
		КонецЕсли;
		
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

// Выполняет заданную команду сервиса.
//
Процедура ВыполнитьКомандуСервиса(
	КонтекстВзаимодействия,
	ТекущаяФорма,
	СтруктураКоманды,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ТипЗнч(ИмяКоманды) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = НРег(СокрЛП(ИмяКоманды));
	
	Если ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			Ложь);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "setcodesregion" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.СохранитьВПараметрахКодыРегионов(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "ui.open" Тогда
		ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "ui.close" Тогда
		ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "system.halt" Тогда
		ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "performtheaction.decode" Тогда
		
		ПрерватьОбработкуКоманд = Истина;
		РасшифроватьКонтрольныйМаркерЭЦПСервера(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТекущаяФорма);
		
	ИначеЕсли ИмяКоманды = "message.show" Тогда
		ПоказатьСообщениеПользователю(
			СтруктураКоманды,
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика,
			ПрерватьОбработкуКоманд);
		
	ИначеЕсли ИмяКоманды = "question.show" Тогда
		ЗадатьВопросПользователю(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "input.field" Тогда
		ВвестиДанные(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(
			КонтекстВзаимодействия.КСКонтекст,
			СтруктураКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды открытия формы.
//
Процедура ОткрытьВнутреннююФорму(КонтекстВзаимодействия, ТекущаяФорма, СтруктураКоманды)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	УРЛ = Неопределено;
	СтруктураКоманды.Свойство("УРЛ", УРЛ);
	
	ТекстФормы = Неопределено;
	СтруктураКоманды.Свойство("Текст", ТекстФормы);
	
	// Замена параметров в тексте формы
	Если ТекстФормы <> Неопределено Тогда
		Если Найти(ТекстФормы, "%Логин%") Тогда
			СтрокаЗамены = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"login");
			ТекстФормы = СтрЗаменить(ТекстФормы, "%Логин%", СтрокаЗамены);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);
		
		ИмяОткрываемойСтраницы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойСтраницы", ИмяОткрываемойСтраницы);
		
		Если ИмяОткрываемойФормы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Заголовок = Неопределено;
		ПараметрыФормы.Свойство("Заголовок", Заголовок);
		
		Текст = Неопределено;
		ПараметрыФормы.Свойство("Текст", Текст);
		
		Если ИмяОткрываемойФормы = "Вопрос" Тогда
			
			ТекстПредупреждения = ?(Текст = Неопределено, ТекстФормы, Текст);
			
			ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, ТекущаяФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииОКВСтатическойФормеПредупреждения",
				ЭтотОбъект,
				ДопПараметры);
			
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения, , Заголовок);
			
		ИначеЕсли ИмяОткрываемойФормы = "ВсплывающаяПодсказка" Тогда
			ПоказатьОповещениеПользователя(
				Заголовок,
				,
				ТекстФормы,
				БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
			
		Иначе
			
			Если ТекущаяФорма <> Неопределено Тогда
				ЗакрытьФормуПрограммно(ТекущаяФорма);
			КонецЕсли;
			
			Если ИмяОткрываемойСтраницы <> Неопределено Тогда
				ОсновныеПараметры.Вставить("Страница", ИмяОткрываемойСтраницы);
			КонецЕсли;
			
			ПараметрыОткрытияФормы = СформироватьПараметрыОткрытияФормы(
				КонтекстВзаимодействия.КСКонтекст,
				ИмяОткрываемойФормы);
			
			Если УРЛ <> Неопределено Тогда
				ПараметрыОткрытияФормы.Вставить("УРЛ", УРЛ);
			КонецЕсли;
			
			ОткрываемаяФорма = ПолучитьФорму(КонтекстВзаимодействия.ПутьКФормам + ИмяОткрываемойФормы,
				ПараметрыОткрытияФормы);
				
			Попытка
				ОткрываемаяФорма.КонтекстВзаимодействия = КонтекстВзаимодействия;
			Исключение
			КонецПопытки;
			
			ОткрываемаяФорма.Открыть();
			
		КонецЕсли;
		
		Если ПараметрыФормы.Свойство("УспешноеЗавершениеБизнесПроцесса") Тогда
			КонтекстВзаимодействия.Вставить("БизнесПроцессУспешноЗавершен", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготовка параметров для открытия внутренней формы.
//
Функция СформироватьПараметрыОткрытияФормы(КСКонтекст, ИмяОткрываемойФормы) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыНовойФормы = Новый Структура;
	
	// Во все формы передается значение параметра login
	ПараметрыНовойФормы.Вставить("login",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login"));
	
	Если ИмяОткрываемойФормы = "ОбщаяАвторизация" ИЛИ ИмяОткрываемойФормы = "АвторизацияУпрощенная" Тогда
		
		ПараметрыНовойФормы.Вставить("МестоЗапуска", КСКонтекст.ОсновныеПараметры.МестоЗапуска);
		ПараметрыНовойФормы.Вставить("password",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"password"));
		ПараметрыНовойФормы.Вставить("savePassword",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"savePassword"));
	
	ИначеЕсли ИмяОткрываемойФормы = "ОбщаяРегНомер" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		
	ИначеЕсли ИмяОткрываемойФормы = "ОбщаяПинкод" Тогда
		ПараметрыНовойФормы.Вставить("regnumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"regnumber"));
		ПараметрыНовойФормы.Вставить("pincode",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"pincode"));
		
	ИначеЕсли ИмяОткрываемойФормы = "ВосстановлениеПароля" Тогда
		ПараметрыНовойФормы.Вставить("login",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"login"));
		ПараметрыНовойФормы.Вставить("email",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"email"));
		
	ИначеЕсли ИмяОткрываемойФормы = "РегистрацияНовогоПользователя" Тогда
		ПараметрыНовойФормы.Вставить("login",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"login"));
		ПараметрыНовойФормы.Вставить("password",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"password"));
		ПараметрыНовойФормы.Вставить("email",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"email"));
		ПараметрыНовойФормы.Вставить("SecondName",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"SecondName"));
		ПараметрыНовойФормы.Вставить("FirstName",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"FirstName"));
		ПараметрыНовойФормы.Вставить("MiddleName",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"MiddleName"));
		ПараметрыНовойФормы.Вставить("City",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"City"));
		ПараметрыНовойФормы.Вставить("phoneNumber",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"phoneNumber"));
		ПараметрыНовойФормы.Вставить("workPlace",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст,"workPlace"));
		
	ИначеЕсли ИмяОткрываемойФормы = "Последняя" Тогда
		ПараметрыНовойФормы.Вставить("ХешОбновленияИнформационногоОкна", КСКонтекст.ХешОбновленияИнформационногоОкна);
		
	ИначеЕсли ИмяОткрываемойФормы = "txУникальныйИдентификатор" Тогда
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		ПараметрыНовойФормы.Вставить("IDOrganizationED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDOrganizationED"));
		ПараметрыНовойФормы.Вставить("ToAddCert",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ToAddCert"));
		
	ИначеЕсли ИмяОткрываемойФормы = "txЗаявкаНаРегистрацию" Тогда
		ПараметрыНовойФормы.Вставить("statusApplicationFormED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "statusApplicationFormED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("nameCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "nameCertificateED"));
		ПараметрыНовойФормы.Вставить("orgindED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "orgindED"));
		ПараметрыНовойФормы.Вставить("postindexED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "postindexED"));
		ПараметрыНовойФормы.Вставить("addressregionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressregionED"));
		ПараметрыНовойФормы.Вставить("coderegionED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codregionED"));
		ПараметрыНовойФормы.Вставить("addresstownshipED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresstownshipED"));
		ПараметрыНовойФормы.Вставить("addresscityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresscityED"));
		ПараметрыНовойФормы.Вставить("addresslocalityED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresslocalityED"));
		ПараметрыНовойФормы.Вставить("addressstreetED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressstreetED"));
		ПараметрыНовойФормы.Вставить("addressbuildingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressbuildingED"));
		ПараметрыНовойФормы.Вставить("addresshousingED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addresshousingED"));
		ПараметрыНовойФормы.Вставить("addressapartmentED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressapartmentED"));
		ПараметрыНовойФормы.Вставить("addressphoneED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "addressphoneED"));
		ПараметрыНовойФормы.Вставить("agencyED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "agencyED"));
		ПараметрыНовойФормы.Вставить("innED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "innED"));
		ПараметрыНовойФормы.Вставить("kppED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "kppED"));
		ПараметрыНовойФормы.Вставить("ogrnED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "ogrnED"));
		ПараметрыНовойФормы.Вставить("codeimnsED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeimnsED"));
		ПараметрыНовойФормы.Вставить("lastnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "lastnameED"));
		ПараметрыНовойФормы.Вставить("firstnameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "firstnameED"));
		ПараметрыНовойФормы.Вставить("middlenameED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "middlenameED"));
		ПараметрыНовойФормы.Вставить("identifierTaxcomED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "identifierTaxcomED"));
		ПараметрыНовойФормы.Вставить("IDCertificateED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
		
	ИначеЕсли ИмяОткрываемойФормы = "txИзменениеТарифа" Тогда
		ПараметрыНовойФормы.Вставить("freePackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "freePackagesED"));
		ПараметрыНовойФормы.Вставить("unallocatedPackagesED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "unallocatedPackagesED"));
		ПараметрыНовойФормы.Вставить("begindatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "begindatetarifED"));
		ПараметрыНовойФормы.Вставить("enddatetarifED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "enddatetarifED"));
		ПараметрыНовойФормы.Вставить("dateRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "dateRequestED"));
		ПараметрыНовойФормы.Вставить("numberRequestED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "numberRequestED"));
		ПараметрыНовойФормы.Вставить("applicationStatusED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "applicationStatusED"));
		ПараметрыНовойФормы.Вставить("codeErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
		ПараметрыНовойФормы.Вставить("textErrorED",
			ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
		
	КонецЕсли;
	
	Возврат ПараметрыНовойФормы;
	
КонецФункции

// Выполнение команды закрытия внутренней формы.
//
Процедура ЗакрытьВнутреннююФорму(КонтекстВзаимодействия, СтруктураКоманды)
	
	ФормыОбработки    = КонтекстВзаимодействия.ФормыОбработки;
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыФормы = Неопределено;
	СтруктураКоманды.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	Если ПараметрыФормы <> Неопределено Тогда
		
		ИмяОткрываемойФормы = Неопределено;
		ПараметрыФормы.Свойство("ИмяОткрываемойФормы", ИмяОткрываемойФормы);
		
		Если ИмяОткрываемойФормы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПутьКФормам = "";
		Если ТипЗнч(КонтекстВзаимодействия) = Тип("Структура")
			И КонтекстВзаимодействия.Свойство("ПутьКФормам") Тогда
			ПутьКФормам = КонтекстВзаимодействия.ПутьКФормам;
		КонецЕсли;
		
		Форма = ФормыОбработки[ПутьКФормам + ИмяОткрываемойФормы];
		
		Если Форма = Неопределено ИЛИ НЕ Форма.Открыта() Тогда
			Возврат;
		КонецЕсли;
		
		ЗакрытьФормуПрограммно(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды сервиса "Задать вопрос пользователю".
//
Процедура ЗадатьВопросПользователю(КонтекстВзаимодействия, Форма, СтруктураКоманды)
	
	ТипВопроса = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипВопроса);
	
	Если ТипВопроса = "richanswer" Тогда
		
		СписокКнопок = СтруктураКоманды.Кнопки;
		
	Иначе
		
		СписокКнопок = Новый СписокЗначений;
		Для каждого ЭлементКнопка Из СтруктураКоманды.Кнопки Цикл
			Если ЭлементКнопка.Значение = "yes" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Да);
			ИначеЕсли ЭлементКнопка.Значение = "no" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет);
			ИначеЕсли ЭлементКнопка.Значение = "cancel" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			ИначеЕсли ЭлементКнопка.Значение = "ok" Тогда
				СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДопПараметрыВопроса = Новый Структура("КонтекстВзаимодействия, ТипВопроса, Форма",
		КонтекстВзаимодействия,
		ТипВопроса,
		Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросКомандыВопрос",
		ЭтотОбъект,
		ДопПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, СписокКнопок, , , СтруктураКоманды.Заголовок);
	
КонецПроцедуры

// Асинхронный обработчик ответа пользователя при выполнении команды
// ЗадатьВопросПользователю()
//
Процедура ПриОтветеНаВопросКомандыВопрос(РезультатВопроса, ДопПараметры) Экспорт
	
	Если ДопПараметры.ТипВопроса = "richanswer" Тогда
		ОтветСервису = РезультатВопроса;
		
	Иначе
		ОтветСервису = "Cancel";
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОтветСервису = "Yes";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			ОтветСервису = "No";
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОтветСервису = "OK";
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "answer", ОтветСервису));
	
	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, ПараметрыЗапроса);
	
КонецПроцедуры

// Выполнение команды сервиса "Показать сообщение пользователю".
//
Процедура ПоказатьСообщениеПользователю(
	СтруктураКоманды,
	КонтекстВзаимодействия,
	ТекущаяФорма,
	КонтекстОбработчика,
	ПрерватьОбработкуКоманд)
	
	ТипСообщения = Неопределено;
	СтруктураКоманды.Свойство("Тип", ТипСообщения);
	
	Если ТипСообщения = "usernotification" Тогда
		
		ПоказатьОповещениеПользователя(
			СтруктураКоманды.Заголовок,
			,
			СтруктураКоманды.ТекстСообщения,
			БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
		
	Иначе
		
		ПрерватьОбработкуКоманд = Истина;
		ДопПараметрыОповещения = Новый Структура("КонтекстВзаимодействия, Форма, КонтекстОбработчика",
			КонтекстВзаимодействия,
			ТекущаяФорма,
			КонтекстОбработчика);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриНажатииОКВФормеСообщенияПользователю",
			ЭтотОбъект,
			ДопПараметрыОповещения);
		
		ПоказатьПредупреждение(ОписаниеОповещения, СтруктураКоманды.ТекстСообщения, , СтруктураКоманды.Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик нажатия кнопки "ОК" в форме сообщения пользователю
// при выполнении команды сервиса "Показать сообщение пользователю".
//
Процедура ПриНажатииОКВФормеСообщенияПользователю(ДопПараметры) Экспорт
	
	ОбработкаКомандСервиса(
		ДопПараметры.КонтекстВзаимодействия,
		ДопПараметры.Форма,
		,
		ДопПараметры.КонтекстОбработчика,
		,
		,
		Истина);
	
КонецПроцедуры

// Асинхронный обработчик нажатия пользователем кнопки "ОК" при выполнении
// команды открытия статической формы.
//
Процедура ПриНажатииОКВСтатическойФормеПредупреждения(ДопПараметры) Экспорт
	
	ОбработкаКомандСервиса(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, Неопределено);
	
КонецПроцедуры

// Выполнение команды сервиса "Ввести данные". При выполнении
// открывается универсальная форма ввода данных
// Обработка.ИнтернетПоддержкаПользователей.Форма.ВводДанных
//
Процедура ВвестиДанные(КонтекстВзаимодействия, Форма, СтруктураКоманды)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ДопПараметры = Новый Структура("Форма, КонтекстВзаимодействия", Форма, КонтекстВзаимодействия);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриВводеДанныхПользователем",
		ЭтотОбъект,
		ДопПараметры);
	
	ИмяФормыВводаДанных = КонтекстВзаимодействия.ПутьКФормам + "ВводДанных";
	ОткрытьФорму(ИмяФормыВводаДанных,
		СтруктураКоманды.ПараметрыФормы,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

// Асинхронный обработчик ввода данных пользователем в результате выполнения
// команды ПриВводеДанныхПользователем()
//
Процедура ПриВводеДанныхПользователем(ВведенныеДанные, ДопПараметры) Экспорт
	
	Форма = ДопПараметры.Форма;
	КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;
	
	ПараметрыЗапроса = Новый Массив;
	Если ВведенныеДанные <> Неопределено И ВведенныеДанные <> КодВозвратаДиалога.Отмена Тогда
		ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", "value", ВведенныеДанные));
	КонецЕсли;
	
	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса);
	
КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КонтекстВзаимодействия, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	
	ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
		КонтекстВзаимодействия.КСКонтекст,
		, // добавляется только "session_id"
		ПараметрыЗапроса);
	
	// Смена подключения
	КонтекстВзаимодействия.ОписаниеСервисаИПП = Неопределено;
	
	// Обратиться к новому веб-сервису за командами, и записать их в стек команд
	ДобавитьКомандыСервиса(
		КонтекстВзаимодействия,
		ПараметрыЗапроса,
		КонтекстОбработчика);
	
КонецПроцедуры

// Расшифрование кодограммы, присланной сервисом ИПП для подтверждения
// подлинности владельца сертификата. Кодограмма хранится в сессионном параметре
// с именем "markerED".
//
// Параметры:
// КонтекстВзаимодействия - Структура - см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
// СтруктураКоманды Структура - данные команды сервиса ИПП.
// КонтекстОбработчика - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
// ТекущаяФорма - УправляемаяФорма - текущая форма ИПП;
//
Процедура РасшифроватьКонтрольныйМаркерЭЦПСервера(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТекущаяФорма)
	
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	Если ЭтоВебКлиент
		И НЕ ОсновныеПараметры.ВыполнятьАвторизациюСертификатаНаСервере
		И НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для продолжения работы необходимо установить расширение для работы с криптографией.
			|Установить расширение для работы с криптографией?'");
		
		ДопПараметрыВопроса = Новый Структура;
		ДопПараметрыВопроса.Вставить("СтруктураКоманды"      , СтруктураКоманды);
		ДопПараметрыВопроса.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
		ДопПараметрыВопроса.Вставить("ТекущаяФорма"          , ТекущаяФорма);
		ДопПараметрыВопроса.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОтветеНаВопросОбУстановкеРасширенияДляРаботыСКриптографией",
			ЭтотОбъект,
			ДопПараметрыВопроса);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		РасшифроватьКонтрольныйМаркерЭЦПСервераПродолжение(
			КонтекстВзаимодействия,
			СтруктураКоманды,
			КонтекстОбработчика,
			ТекущаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа об установке расширения для работы с криптографией в
// РасшифроватьКонтрольныйМаркерЭЦПСервера()
//
Процедура ПриОтветеНаВопросОбУстановкеРасширенияДляРаботыСКриптографией(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УстановкаРасширенияДляРаботыСКриптографиейЗавершение",
			ЭтотОбъект,
			ДопПараметры);
		
		НачатьУстановкуРасширенияРаботыСКриптографией(ОписаниеОповещения);
		
	Иначе
		
		ЗавершитьБизнесПроцесс(ДопПараметры.КонтекстВзаимодействия);
		ТекстПредупреждения = НСтр("ru = 'Расширение для работы с криптографией не установлено.
			|Продолжение невозможно.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru = 'Интернет-поддержка пользователей'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный обработчик завершения процесса установки расширения для работы с
// криптографией.
//
Процедура УстановкаРасширенияДляРаботыСКриптографиейЗавершение(ДопПараметры) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		
		ЗавершитьБизнесПроцесс(ДопПараметры.КонтекстВзаимодействия);
		
	Иначе
		
		РасшифроватьКонтрольныйМаркерЭЦПСервераПродолжение(
			ДопПараметры.КонтекстВзаимодействия,
			ДопПараметры.СтруктураКоманды,
			ДопПараметры.КонтекстОбработчика,
			ДопПараметры.ТекущаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение расширования контрольного маркера идентификации.
//
Процедура РасшифроватьКонтрольныйМаркерЭЦПСервераПродолжение(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ТекущаяФорма) Экспорт
	
	ДанныеДляРасшифрования = Неопределено;
	СтруктураКоманды.Свойство("ДанныеДляРасшифрования", ДанныеДляРасшифрования);
	
	Если ДанныеДляРасшифрования = Неопределено Тогда
		
		ПараметрыДляРасширования = ИнтернетПоддержкаПользователейКлиентСервер.СессионныеПараметрыДляРасшифрования(
			КонтекстВзаимодействия.КСКонтекст);
		
		УдаляемыеПараметры = Неопределено;
		ДанныеДляРасшифрования = ИнтернетПоддержкаПользователейВызовСервера.ПолучитьДанныеДляРасшифрования(
			ПараметрыДляРасширования,
			УдаляемыеПараметры,
			КонтекстОбработчика.ПроизошлаОшибка,
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки);
		
		Если КонтекстОбработчика.ПроизошлаОшибка Тогда
			ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			ПоказатьПредупреждение(,
				КонтекстОбработчика.ПользовательскоеОписаниеОшибки,
				,
				НСтр("ru = 'Ошибка'"));
			Возврат;
		КонецЕсли;
		
		Если УдаляемыеПараметры <> Неопределено Тогда
			ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
				КонтекстВзаимодействия.КСКонтекст,
				УдаляемыеПараметры,
				КонтекстОбработчика);
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметрыОбработчика = Новый Структура;
	ДопПараметрыОбработчика.Вставить("СтруктураКоманды"      , СтруктураКоманды);
	ДопПараметрыОбработчика.Вставить("КонтекстОбработчика"   , КонтекстОбработчика);
	ДопПараметрыОбработчика.Вставить("ДанныеДляРасшифрования", ДанныеДляРасшифрования);
	ДопПараметрыОбработчика.Вставить("ТекущаяФорма"          , ТекущаяФорма);
	ДопПараметрыОбработчика.Вставить("РучнойВводПароля"      , Ложь);
	ДопПараметрыОбработчика.Вставить("КонтекстВзаимодействия", КонтекстВзаимодействия);
	
	Если ДанныеДляРасшифрования.ПарольДоступаЭЦП <> Неопределено Тогда
		
		НепосредственноеРасшифрованиеКонтрольногоМаркера(
			ДанныеДляРасшифрования.ПарольДоступаЭЦП,
			ДопПараметрыОбработчика);
		
	Иначе
		
		ПарольСертификатаЭЦП = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"passwordCertificateED");
		
		Если ПарольСертификатаЭЦП <> Неопределено Тогда
			
			НепосредственноеРасшифрованиеКонтрольногоМаркера(ПарольСертификатаЭЦП, ДопПараметрыОбработчика);
			
		Иначе
			
			ДопПараметрыОбработчика.РучнойВводПароля = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НепосредственноеРасшифрованиеКонтрольногоМаркера",
				ЭтотОбъект,
				ДопПараметрыОбработчика);
			
			ИнтернетПоддержкаПользователейКлиентПереопределяемый.ПолучитьПарольЭЦПНачало(
				ДанныеДляРасшифрования.СертификатЭЦП,
				ДанныеДляРасшифрования.ПарольДоступаЭЦП,
				ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Непосредственное расширование контрольного маркера идентификации после
// выполнения всех асинхронных действий.
//
Процедура НепосредственноеРасшифрованиеКонтрольногоМаркера(ПарольЭЦП, ДопПараметры) Экспорт
	
	КонтекстВзаимодействия = ДопПараметры.КонтекстВзаимодействия;
	КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	КонтекстОбработчика    = ДопПараметры.КонтекстОбработчика;
	ДанныеДляРасшифрования = ДопПараметры.ДанныеДляРасшифрования;
	ТекущаяФорма           = ДопПараметры.ТекущаяФорма;
	
	Если ТипЗнч(ПарольЭЦП) <> Тип("Строка") Тогда
		ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
		Возврат;
	КонецЕсли;
	
	ДанныеДляРасшифрования.ПарольДоступаЭЦП = ПарольЭЦП;
	
	// Расшифрование контрольного маркера на сервере или на клиенте
	ПолноеОписаниеОшибки              = "";
	РасшифрованныйМаркерИдентификации = Неопределено;
	Если ОсновныеПараметры.ВыполнятьАвторизациюСертификатаНаСервере Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.РасшифроватьМаркерИдентификацииВладельцаСертификата(
			ДанныеДляРасшифрования,
			РасшифрованныйМаркерИдентификации,
			ПолноеОписаниеОшибки);
		
	Иначе
		
		ИнтернетПоддержкаПользователейКлиентСерверПереопределяемый.РасшифроватьМаркерИдентификацииВладельцаСертификата(
			ДанныеДляРасшифрования,
			РасшифрованныйМаркерИдентификации,
			ПолноеОписаниеОшибки);
		
	КонецЕсли;
	
	Если ТипЗнч(РасшифрованныйМаркерИдентификации) = Тип("ДвоичныеДанные") Тогда
		
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьПараметрКонтекста(
			КСКонтекст,
			"openMarkerED",
			РасшифрованныйМаркерИдентификации,
			"sessionParameter");
		
		ОбработкаКомандСервиса(
			КонтекстВзаимодействия,
			ТекущаяФорма,
			,
			КонтекстОбработчика,
			,
			,
			Истина);
		
	Иначе
		
		Если ПустаяСтрока(ПарольЭЦП) И НЕ ДопПараметры.РучнойВводПароля Тогда
			
			// Обход ошибки библиотеки электронных документов - в стартовые параметрах механизма
			// вместо введенного пользователем пароля передается пустая строка.
			// Выполняется попытка ввода пароля пользователем
			
			ДопПараметры.Вставить("РучнойВводПароля", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"НепосредственноеРасшифрованиеКонтрольногоМаркера",
				ЭтотОбъект,
				ДопПараметры);
			
			ИнтернетПоддержкаПользователейКлиентПереопределяемый.ПолучитьПарольЭЦПНачало(
				ДанныеДляРасшифрования.СертификатЭЦП,
				ДанныеДляРасшифрования.ПарольДоступаЭЦП,
				ОписаниеОповещения);
			
			Возврат;
			
		Иначе
			
			ЗавершитьБизнесПроцесс(КонтекстВзаимодействия);
			
			Если НЕ ОсновныеПараметры.ВыполнятьАвторизациюСертификатаНаСервере Тогда
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					НСтр("ru = 'Ошибка при расшифровании контрольного маркера.'")
						+ ПолноеОписаниеОшибки);
				// Иначе ошибка была записана при серверном вызове в
			КонецЕсли;
			
			Если РасшифрованныйМаркерИдентификации = 1 Тогда
				ПользовательскоеОписаниеОшибки =
					НСтр("ru = 'Ошибка настройки модуля криптографии. Подробнее см. в журнале регистрации.'");
			ИначеЕсли РасшифрованныйМаркерИдентификации = 2 Тогда
				ПользовательскоеОписаниеОшибки =
					НСтр("ru = 'Не удалось проверить подлинность сертификата. Возможно, пароль к закрытому
						|ключу сертификата введен неверно. Подробнее см. в журнале регистрации.'");
			Иначе
				
				ПользовательскоеОписаниеОшибки = НСтр("ru = 'Неверный формат расшифрованного маркера.'");
				
			КонецЕсли;
			
			ПоказатьПредупреждение(, ПользовательскоеОписаниеОшибки, , НСтр("ru = 'Ошибка'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды останова механизма ИПП. Закрытие всех форм,
// при необходимости отображается форма ошибки обращения к серсису ИПП
// и записывается ошибка в журнал регистрации.
//
Процедура ОстановитьМеханизм(КонтекстВзаимодействия, СтруктураКоманды)
	
	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодОшибки = Неопределено;
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("errorCode", КодОшибки) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СокрЛП(Строка(КодОшибки)) <> "0" И КодОшибки <> Неопределено Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(КодОшибки);
		ПараметрыФормы = ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия);
		ПараметрыФормы.Вставить("ОписаниеОшибки", КодОшибки);
		ОткрытьФорму("ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
			ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для организации бизнес-процессов

// Отправка на сервер управляющей команды для освобождения ресурсов сервиса.
// Обработка ответа сервиса не выполняется.
//
Процедура ЗавершитьБизнесПроцесс(КонтекстВзаимодействия) Экспорт
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОЗавершенииБизнесПроцесса(КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса,
		КонтекстВзаимодействия);
	
	ЗакрытьВсеФормы(КонтекстВзаимодействия);
	ПараметрыОбращенияКСервисуИПП = Новый Структура;
	ПараметрыОбращенияКСервисуИПП.Вставить("ОбработатьОтвет"             , Ложь);
	ПараметрыОбращенияКСервисуИПП.Вставить("ОтобразитьСостояниеОбращения", Ложь);
	
	ОбработатьКомандуФормы(КонтекстВзаимодействия, Неопределено, "CloseBP", ПараметрыОбращенияКСервисуИПП);
	
	КэшWSDLОписаний = Неопределено;
	ОсновныеПараметры = КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры;
	ОсновныеПараметры.Свойство("КэшWSDLОписаний", КэшWSDLОписаний);
	Если КэшWSDLОписаний <> Неопределено Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ОчиститьКэшWSDLОписаний(КэшWSDLОписаний);
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП с заданным параметром.
// Передается один параметр с заданным именем и значением "true".
//
Процедура ОбработатьКомандуФормы(
	КонтекстВзаимодействия,
	Форма,
	ИмяКоманды,
	ПараметрыОбращенияКСервисуИПП = Неопределено) Экспорт
	
	ПараметрыЗапроса        = Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("Имя, Значение", ИмяКоманды, "true"));
	
	ОбработкаКомандСервиса(КонтекстВзаимодействия, Форма, ПараметрыЗапроса, , ПараметрыОбращенияКСервисуИПП);
	
КонецПроцедуры

// Просмотр причины отклонения заявки ЭДО в диалоге предупреждения.
//
Процедура ПоказатьПричинуОтклоненияЗаявкиЭДО(КонтекстВзаимодействия) Экспорт
	
	ОписаниеПричины = ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия);
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ОписаниеПричины.КодОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Код ошибки: %1'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОписаниеПричины.КодОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ОписаниеПричины.ТекстОшибки;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПричины.ТекстОшибки) Тогда
		ТекстСообщения = НСтр("Неизвестная ошибка. Обратитесь в службу техподдержки");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

// Обработка выхода пользователя из ИПП (нажатие ссылки "Выход" на форме).
//
Процедура ОбработатьВыходПользователя(КонтекстВзаимодействия, Форма) Экспорт
	
	ДопПараметры = Новый Структура("КонтекстВзаимодействия, Форма", КонтекстВзаимодействия, Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеПользователяНаВопросОВыходе", ЭтотОбъект, ДопПараметры);
	
	ТекстВопроса = ВопросПриВыходеАвторизированногоПользователя(КонтекстВзаимодействия);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Асинхронный обработчик ответа пользователя на вопрос о выходе из ИПП в
// процедуре ОбработатьВыходПользователя().
//
Процедура ПриОтветеПользователяНаВопросОВыходе(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьВсеФормы(ДопПараметры.КонтекстВзаимодействия);
		ИнтернетПоддержкаПользователейВызовСервера.ОчиститьНастройкиИПППользователя();
		ОбработатьКомандуФормы(ДопПараметры.КонтекстВзаимодействия, ДопПараметры.Форма, "exitUser");
	КонецЕсли;
	
КонецПроцедуры

// Открытие диалога отправки сообщения в службу тех. поддержки ИПП.
//
Процедура ОткрытьДиалогОтправкиЭлектронногоПисьма(КонтекстВзаимодействия, ПараметрыПисьма) Экспорт
	
	КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	
	Если ТипЗнч(ПараметрыПисьма) <> Тип("Структура") Тогда
		ПараметрыПисьма = Новый Структура;
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("login",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "login"));
	ПараметрыПисьма.Вставить("regnumber",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "regnumber"));
	ПараметрыПисьма.Вставить("pincode",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "pincode"));
	ПараметрыПисьма.Вставить("codeErrorED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "codeErrorED"));
	ПараметрыПисьма.Вставить("textErrorED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "textErrorED"));
	ПараметрыПисьма.Вставить("IDCertificateED",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));
	
	ФормаОтправкиЭлектронногоПисьма = ПолучитьФорму(
		КонтекстВзаимодействия.ПутьКФормам + "ОтправкаЭлектронногоПисьма",
		ПараметрыПисьма);
	
	ФормаОтправкиЭлектронногоПисьма.КонтекстВзаимодействия = КонтекстВзаимодействия;
	ФормаОтправкиЭлектронногоПисьма.Открыть();
	
КонецПроцедуры

// Непосредственная отправка электронного сообщения в службу тех. поддержки ИПП
//
Функция ОтправитьЭлектронноеСообщениеСлужбеТехПоддержки(СтруктураСообщения, КонтекстВзаимодействия) Экспорт
	
	Если КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.ОбращениеССервера Тогда
		Возврат ИнтернетПоддержкаПользователейВызовСервера.ОтправитьЭлектронноеПисьмоЧерезСервис(
			СтруктураСообщения,
			КонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.СетевыеПараметрыИПП);
	Иначе
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.ОтправитьЭлектронноеПисьмоЧерезСервис(
			СтруктураСообщения,
			КонтекстВзаимодействия.СетевыеПараметрыИПП);
	КонецЕсли;
	
КонецФункции

// Возвращает пустой список обработчиков оповещения о завершении
// бизнес-процесса.
//
// Возвращаемое значение:
//	Структура - пустой список обработчиков оповещения о завершении
//				бизнес-процесса.
//		* ОповещенияОбАвторизации - Массив - массив обработчиков
//			объектов ОписаниеОповещения - обработчиков оповещений о выполненной
//			авторизации пользователя.
//		* Обработано - Булево - Истина, если оповещение выполнено,
//			Ложь - в противном случае.
//
Функция НовыйОбработчикиЗавершенияБизнесПроцесса()
	
	Результат = Новый Структура;
	Результат.Вставить("ОповещенияОбАвторизации", Новый Массив);
	Результат.Вставить("Обработано"             , Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет вызов обработчиков оповещения о завершении бизнес-процесса.
//
// Параметры:
//	ОбработчикиЗавершенияБизнесПроцесса - Структура - обработчики оповещения о
//		завершении бизнес-процесса (см. функцию
//		НовыйОбработчикиЗавершенияБизнесПроцесса())
//	КонтекстВзаимодействия - Структура, Неопределено - контекст бизнес-процесса.
//		см. функцию
//		ИнтернетПоддержкаПользователейВызовСервера.НовыйКонтекстВзаимодействия()
//
Процедура ОповеститьОЗавершенииБизнесПроцесса(
	ОбработчикиЗавершенияБизнесПроцесса,
	КонтекстВзаимодействия)
	
	Если ОбработчикиЗавершенияБизнесПроцесса = Неопределено
		ИЛИ ОбработчикиЗавершенияБизнесПроцесса.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	// Оповещение об авторизации
	Если КонтекстВзаимодействия = Неопределено
		ИЛИ НЕ КонтекстВзаимодействия.Свойство("БизнесПроцессУспешноЗавершен")
		ИЛИ НЕ КонтекстВзаимодействия.БизнесПроцессУспешноЗавершен
		ИЛИ НЕ КонтекстВзаимодействия.Свойство("ВведенныеЛогинИПароль") Тогда
		РезультатДляОповещения = Неопределено;
	Иначе
		РезультатДляОповещения = КонтекстВзаимодействия.ВведенныеЛогинИПароль;
	КонецЕсли;
	
	Для каждого Обработчик Из ОбработчикиЗавершенияБизнесПроцесса.ОповещенияОбАвторизации Цикл
		ВыполнитьОбработкуОповещения(Обработчик, РезультатДляОповещения);
	КонецЦикла;
	
	ОбработчикиЗавершенияБизнесПроцесса.Обработано = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с параметрами ИПП в контексте взаимодействия

// Удаление сессионных параметров контекста.
//
Процедура ОчиститьСессию(КонтекстВзаимодействия)
	
	СессионныеПараметры = КонтекстВзаимодействия.КСКонтекст.СессионныеПараметры;
	КоличествоПараметров = СессионныеПараметры.Количество();
	Если КоличествоПараметров > 0 Тогда
		Для ОбратныйИндекс = 1 По КоличествоПараметров Цикл
			Индекс = КоличествоПараметров - ОбратныйИндекс;
			Если СессионныеПараметры[Индекс].ОбластьВидимости <> "startUp" Тогда
				СессионныеПараметры.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Чтение причины отклонения заявки ЭДО из сессионных параметров.
//
Функция ПолучитьПричинуОтклоненияЗаявки(КонтекстВзаимодействия)
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"codeErrorED"));
	Результат.Вставить("ТекстОшибки",
		ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"textErrorED"));
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейсные процедуры и функции

// Отображение состояния обращения к веб-сервису ИПП.
//
Процедура ОтобразитьСостояниеОбращениеКСервису()
	
	Состояние(
		,
		,
		НСтр("ru = 'Ожидание ответа от сервера интернет-поддержки пользователей'"),
		БиблиотекаКартинок.ИнтернетПоддержкаПользователей);
	
КонецПроцедуры

// Закрытие всех форм контекста.
//
Процедура ЗакрытьВсеФормы(КонтекстВзаимодействия)
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	Если ТипЗнч(ФормыОбработки) = Тип("Соответствие") Тогда
		ТипУправляемаяФорма = Тип("УправляемаяФорма");
		Для каждого КлючЗначение Из ФормыОбработки Цикл
			Форма = КлючЗначение.Значение;
			Если ТипЗнч(Форма) = ТипУправляемаяФорма И Форма.Открыта() Тогда
				Форма.ПрограммноеЗакрытие = Истина;
				Форма.Закрыть();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Программное закрытие формы контекста ИПП.
//
Процедура ЗакрытьФормуПрограммно(ЗакрываемаяФорма)
	
	Если ЗакрываемаяФорма <> Неопределено Тогда
		
		Если ЗакрываемаяФорма.Открыта() Тогда
			
			Попытка
				ЗакрываемаяФорма.ПрограммноеЗакрытие = Истина;
			Исключение
			КонецПопытки;
			
			ЗакрываемаяФорма.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, открыта ли заданная форма контекста.
//
Функция ФормаОткрыта(КонтекстВзаимодействия, ИмяПроверяемойФормы) Экспорт
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	
	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
	КонецЕсли;
	
	ПроверяемаяФорма = ФормыОбработки[ИмяПроверяемойФормы];
	Если ПроверяемаяФорма = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ПроверяемаяФорма.Открыта();
	КонецЕсли;
	
КонецФункции

// Регистрация открытой внутренней формы ИПП в контексте взаимодействия.
//
Процедура ОбработатьОткрытиеФормы(КонтекстВзаимодействия, ОткрытаяФорма) Экспорт
	
	Если КонтекстВзаимодействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормыОбработки = КонтекстВзаимодействия.ФормыОбработки;
	
	Если ТипЗнч(ФормыОбработки) <> Тип("Соответствие") Тогда
		ФормыОбработки = Новый Соответствие;
	КонецЕсли;
	ФормыОбработки[ОткрытаяФорма.ИмяФормы] = ОткрытаяФорма;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Вспомогательная функция для преобразования значения из фиксированного типа.
// Параметры:
//	ЗначениеФиксированногоТипа - Произвольный - значение фиксированного типа
//		из которого необходимо получить значение нефиксированного типа.
//
// Возвращаемое значение:
//	Произвольный - полученное значение аналогичного нефиксированного типа.
//
Функция ЗначениеИзФиксированногоТипа(ЗначениеФиксированногоТипа)
	
	Результат = Неопределено;
	ТипЗначения = ТипЗнч(ЗначениеФиксированногоТипа);
	
	Если ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		
		Результат = Новый Структура;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("ФиксированноеСоответствие") Тогда
		
		Результат = Новый Соответствие;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;
		
	Иначе
		
		Результат = ЗначениеФиксированногоТипа;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет текст вопроса при выходе авторизованного пользователя из ИПП.
//
Функция ВопросПриВыходеАвторизированногоПользователя(КонтекстВзаимодействия) Экспорт
	
	ЛогинПользователя = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КонтекстВзаимодействия.КСКонтекст,
		"login");
	
	ТекстВопроса = НСтр("ru = 'Подключение пользователя с логином %1 к интернет-поддержке будет
					|прекращено. Для нового подключения нужно заново ввести логин и пароль.
					|Перейти к авторизации нового пользователя?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЛогинПользователя);
	
	Возврат ТекстВопроса;
	
КонецФункции

// Итерационное копирование списка значений.
//
Процедура СкопироватьСписокЗначенийИтерационно(Источник, Приемник) Экспорт
	
	Приемник.Очистить();
	Для каждого ЭлементИсточника Из Источник Цикл
		Приемник.Добавить(ЭлементИсточника.Значение, ЭлементИсточника.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры формы "ОбщаяФорма.ИнтернетПоддержкаПользователейОшибкаДоступаКИнтернету",
// формаируемые из контекста взаимодействия с сервисом ИПП.
//
Функция ПараметрыФормыОшибкиОбращения(КонтекстВзаимодействия)
	
	КСКонтекст = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыФормыОшибкиДоступа = Новый Структура("МестоЗапуска, СтартовыеПараметры",
		ОсновныеПараметры.МестоЗапуска,
		КонтекстВзаимодействия.СтартовыеПараметрыМеханизма);
	
	Возврат ПараметрыФормыОшибкиДоступа;
	
КонецФункции

#КонецОбласти
