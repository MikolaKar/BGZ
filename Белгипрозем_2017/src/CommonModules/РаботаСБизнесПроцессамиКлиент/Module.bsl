
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами клиент
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверки перед стартом бизнес-процесса
Процедура ПередСтартомБизнесПроцесса(
	Объект, 
	Отказ,
	ИдентификаторФормыПроцесса,
	ПараметрыЗаписиПроцесса) Экспорт
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	
	Если Предметы.Количество() > 0 Тогда
		
		Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			// Если при старте процесса пользователь еще не отвечал на вопрос о старте с незарегистрированными документами или 
			// он ответил отрицательно на один из следующих за этим вопросов, будет задач вопрос о старте при занятых файлах у документов.
			Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриНезарегистрированныхДокументах") Тогда
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриНезарегистрированныхДокументах", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
				
				НезарегистрированныеПредметы = Новый Массив;
				Для каждого Предмет из Предметы Цикл
					Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
						РегистрационныйНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "РегистрационныйНомер");
						Если ПустаяСтрока(РегистрационныйНомер) Тогда
							НезарегистрированныеПредметы.Добавить(Предмет);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отправить'"));
				Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
				
				Если НезарегистрированныеПредметы.Количество() = 1 Тогда
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" не зарегистрирован. 
						|Отправить на рассмотрение?'"), Предмет);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, НСТР("ru = 'Запуск процесса'"));
					Отказ = Истина;
					Возврат;
				ИначеЕсли НезарегистрированныеПредметы.Количество() > 1 Тогда
					СтрокаПредметов = "";
					Для каждого Предмет из НезарегистрированныеПредметы Цикл
						СтрокаПредметов = СтрокаПредметов + Символы.ПС + Строка(Предмет)
					КонецЦикла;
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документы %1 не зарегистрированы. 
						|Отправить на рассмотрение?'"), СтрокаПредметов);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, НСТР("ru = 'Запуск процесса'"));
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивДокументов = Новый Массив;
		МассивЗанятыхФайлов = Новый Массив;
		
		Для каждого Предмет из Предметы Цикл
			Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
				МассивДокументов.Добавить(Предмет);
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				Редактирует = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "Редактирует");
				Если ЗначениеЗаполнено(Редактирует) Тогда
					МассивЗанятыхФайлов.Добавить(Предмет);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если при старте процесса пользователь еще не отвечал на вопрос о старте с занятыми файлами документов или 
		// он ответил отрицательно на один из следующих за этим вопросов, будет задан вопрос о старте при занятых файлах у документов.
		Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриЗанятыхФайлахДокументов") Тогда
			Если МассивДокументов.Количество() > 0 Тогда
				
				СообщениеВопрос = НСтр("ru = 'Выполнить запуск процесса?'");
				СообщениеЗаголовок = НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования:'");
				Заголовок = НСтр("ru = 'Запуск процесса'");
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СообщениеВопрос", СообщениеЗаголовок);
				ПараметрыФормы.Вставить("СообщениеЗаголовок", СообщениеЗаголовок);
				ПараметрыФормы.Вставить("Заголовок", Заголовок);
				ПараметрыФормы.Вставить("ВладелецФайла", МассивДокументов);
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриЗанятыхФайлахДокументов", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
				// Открываем диалог с занятыми файлами документов и прерываем процесс записи процесса.
				// Процесс записи будет начат заново, когда пользователь ответ утвердительно.
				// В этом случае вопрос уже не будет задан повторно.
				РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
				Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если при старте процесса пользователь еще не отвечал на вопрос о старте при занятых файлах или 
		// он ответил отрицательно на один из следующих за этим вопросов, будет задач вопрос о старте при занятых файлах.
		Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриЗанятыхФайлах") Тогда
			Если МассивЗанятыхФайлов.Количество() > 0 Тогда
				
				ПараметрыОбработчикаОповещения = Новый Структура;
				ПараметрыОбработчикаОповещения.Вставить("ИдентификаторФормыПроцесса", ИдентификаторФормыПроцесса);
				ПараметрыОбработчикаОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписиПроцесса);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеВопросаОСтартеПриЗанятыхФайлах", 
					ЭтотОбъект,
					ПараметрыОбработчикаОповещения);
					
				ТекстВопроса = НСтр("ru = 'Некоторые приложенные файлы заняты для редактирования. Выполнить запуск процесса?'");
				Если МассивЗанятыхФайлов = 1 Тогда
					ТекстВопроса = НСтр("ru = 'Приложенный файл занят для редактирования. Выполнить запуск процесса?'");
				КонецЕсли;
				
				// Открываем диалог с вопросом и прерываем процесс записи процесса.
				// Процесс записи будет начат заново, когда пользователь ответ утвердительно.
				// В этом случае вопрос уже не будет задан повторно.
				ПоказатьВопрос(
					ОписаниеОповещения,
					ТекстВопроса,
					РежимДиалогаВопрос.ДаНет,,
					КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Запуск процесса'"));
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПараметрыЗаписиПроцесса.Свойство("СтартоватьПриОшибкахВПроектах") Тогда
		РаботаСПроектамиКлиент.ПередСтартомБизнесПроцесса(Объект, Отказ, ПараметрыЗаписиПроцесса, ИдентификаторФормыПроцесса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВопросаОСтартеПриНезарегистрированныхДокументах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриНезарегистрированныхДокументах", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеВопросаОСтартеПриЗанятыхФайлахДокументов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриЗанятыхФайлахДокументов", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеВопросаОСтартеПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил утвердительно, то информируем форму процесса о том,
		//	что запуск может быть возобновлен.
		Параметры.ПараметрыЗаписиПроцесса.Вставить("СтартоватьПриЗанятыхФайлах", Истина);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ИдентификаторФормы", Параметры.ИдентификаторФормыПроцесса);
		ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", Параметры.ПараметрыЗаписиПроцесса);
		Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	Иначе
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриНезарегистрированныхДокументах");
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриЗанятыхФайлахДокументов");
		Параметры.ПараметрыЗаписиПроцесса.Удалить("СтартоватьПриЗанятыхФайлах");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСрокВыполненияПроцессаПередСтартом(Объект, Форма, ПараметрыЗаписи, Отказ) Экспорт
	
	// Если пользователь ранее не ответил на вопрос о запуске процесса при некорректном сроке выполнения
	// утвердительно, то покажем ему вопрос о том, необходимо ли стартовать процесс, 
	// если общий срок его меньше текущей даты.
	// Если пользователь уже ответил на вопрос, то проверка общего срока пропускается.
	Если Не ПараметрыЗаписи.Свойство("СтартоватьЕслиОбщийСрокМеньшеТекущего") Тогда
		Если ЗначениеЗаполнено(Объект.СрокИсполнения) И Объект.СрокИсполнения < НачалоДня(Объект.Дата) Тогда 
			ТекстВопроса = НСтр("ru = 'Общий срок исполнения меньше даты создания процесса. Выполнить запуск процесса?'");
			Оп = Новый ОписаниеОповещения("ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке", Форма, ПараметрыЗаписи);
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет); 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюПриСтартеЗавершениеВопросаОбОбщемСроке(Результат, Параметры, Форма) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Если пользователь ответил положительно, то сохраняем результат его ответа и заново
		//	запускаем процесс записи карточки процесса с параметром "старт"
		Параметры.Вставить("СтартоватьЕслиОбщийСрокМеньшеТекущего", Истина);
		
		Если Форма.Записать(Параметры) Тогда
			Форма.Закрыть();
		КонецЕсли;
		
	Иначе
		// Если пользователь ответил отрицательно на данный вопрос, то сбросим его ответ на все предыдущие вопросы,
		//	чтобы при следующем старте процесса все вопросы начались заново.
		Параметры.Удалить("СтартоватьПриЗанятыхФайлахДокументов");
		Параметры.Удалить("СтартоватьПриЗанятыхФайлах");
		Параметры.Удалить("СтартоватьЕслиОбщийСрокМеньшеТекущего");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет открытие карточки "Исполнителя", если он установлен
Процедура ОткрытьИсполнителя(Исполнитель) Экспорт
	
	Если Не Исполнитель.Пустая() Тогда
		ПоказатьЗначение(, Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНаличиеЗанятыхФайлов(Объект, ОписаниеОповещения) Экспорт
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	
	Если Предметы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		Возврат Истина;
	КонецЕсли;
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	
	МассивДокументов = Новый Массив;
	МассивЗанятыхФайлов = Новый Массив;
	
	Для каждого Предмет из Предметы Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
			МассивДокументов.Добавить(Предмет);
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			Редактирует = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "Редактирует");
			Если ЗначениеЗаполнено(Редактирует) Тогда
				МассивЗанятыхФайлов.Добавить(Предмет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("МассивЗанятыхФайлов", МассивЗанятыхФайлов);
	ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОВыполненииПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	Если МассивДокументов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СообщениеВопрос", НСтр("ru = 'Выполнить задачу?'"));
		ПараметрыФормы.Вставить("СообщениеЗаголовок", НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования:'"));
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выполнение задачи'"));
		ПараметрыФормы.Вставить("ВладелецФайла", МассивДокументов);
		ПараметрыФормы.Вставить("Редактирует", ТекущийПользователь);
		
		РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
		
		Если ПараметрыФормы.КоличествоЗанятыхФайлов = 0 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецФункции

Процедура ВопросОВыполненииПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Параметры.МассивЗанятыхФайлов.Количество() > 0 Тогда
		Если Параметры.МассивЗанятыхФайлов = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Приложенный файл занят для редактирования. Выполнить задачу?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Некоторые приложенные файлы заняты для редактирования. Выполнить задачу?'");
		КонецЕсли;
		
		ПоказатьВопрос(
			Параметры.ОписаниеОповещения,
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНет, , 
			КодВозвратаДиалога.Нет, 
			НСТР("ru = 'Выполнение задачи'"));
	Иначе
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		ПоказатьПредупреждение( ,
			НСтр("ru = 'Невозможно установить главную задачу процессу, входящему в составной или комплексный процесс.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("КромеЗадачБизнесПроцесса", Форма.Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъектаПродолжение", ЭтотОбъект, Форма);
		
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора", ПараметрыФормы,
		Форма.Элементы.ГлавнаяЗадача,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъектаПродолжение(ВыбранноеЗначение, Форма) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Форма.Объект.ГлавнаяЗадача = ВыбранноеЗначение;
		Форма.Элементы.ГлавнаяЗадача.Видимость = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает указанную строку текущей в дереве приложений в карточке задачи
Процедура УстановитьТекущуюСтрокуВДеревеПриложений(Форма, ЭлементыДерева, ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве = Неопределено) Экспорт
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Форма.Элементы.ДеревоПриложений.Развернуть(Элемент.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;

	ЧислоСтрокДерева = ЭлементыДерева.Количество();
	ТекущаяСтрокаДерева = -1;
	
	Для каждого Эл Из ЭлементыДерева Цикл
		
		ТекущаяСтрокаДерева = ТекущаяСтрокаДерева + 1;
		
		Если Эл.Ссылка = ТекущаяСсылкаВДереве Или (ЗначениеЗаполнено(Эл.ИмяПредмета) И Эл.ИмяПредмета = ТекущееИмяПредметаВДереве) Тогда
			Форма.Элементы.ДеревоПриложений.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
			Возврат;
		Иначе
			УстановитьТекущуюСтрокуВДеревеПриложений(
				Форма,
				Эл.ПолучитьЭлементы(),
				ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве);
		КонецЕсли;
			 
	КонецЦикла;
	
	Если ТекущаяСтрокаДерева >= 0 И Не ЗначениеЗаполнено(Форма.Элементы.ДеревоПриложений.ТекущаяСтрока) Тогда
		Если ТипЗнч(Эл.ПолучитьРодителя()) <> Тип("ДанныеФормыЭлементДерева") Тогда
			Форма.Элементы.ДеревоПриложений.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность команд работы с файлами в карточке задачи
Процедура УстановитьДоступностьКомандРаботыСФайлами(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт

	ОткрытьКарточкуДоступность = Истина;
	ОткрытьДляПросмотраДоступность = Истина;
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	УдалитьПредметДоступность = Истина;
	СохранитьКакДоступность = Истина;
	
	Если ЧислоПредметов = Неопределено Тогда
		Попытка
			ЧислоПредметов = Форма.Объект.Предметы.Количество();
		Исключение
			// Если в форме нет реквизита Объект, то ничего не делаем.
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ОбщаяДоступность = (ЧислоПредметов > 0);
	
	Если Приложения.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Приложения.ТекущиеДанные.Ссылка;
		
		КоличествоВыделенныхСтрок = Приложения.ВыделенныеСтроки.Количество() = 1;
		
		Если КоличествоВыделенныхСтрок = 1
			И Не Приложения.ТекущиеДанные.ДоступноУдаление Тогда
			УдалитьПредметДоступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если Приложения.ТекущиеДанные.РедактируетДругойПользователь
				ИЛИ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не Приложения.ТекущиеДанные.РедактируетТекущийПользователь
				ИЛИ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			ОткрытьДляПросмотраДоступность = Ложь;
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		Если КоличествоВыделенныхСтрок = 1 И Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ОткрытьДляПросмотраДоступность = Ложь;
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			УдалитьПредметДоступность = Ложь;
			СохранитьКакДоступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.УдалитьПредмет.Доступность = ОбщаяДоступность И УдалитьПредметДоступность;
	Форма.Элементы.ОткрытьКарточку.Доступность = ОбщаяДоступность И ОткрытьКарточкуДоступность;
	Форма.Элементы.ОткрытьДляПросмотра.Доступность = ОбщаяДоступность И ОткрытьДляПросмотраДоступность;
	Форма.Элементы.Редактировать.Доступность = ОбщаяДоступность И РедактироватьДоступность;
	Форма.Элементы.ЗакончитьРедактирование.Доступность = ОбщаяДоступность И ЗакончитьРедактированиеДоступность;
	
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Доступность = ОбщаяДоступность И ОткрытьКарточкуДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = ОбщаяДоступность И СохранитьКакДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьДляПросмотра.Доступность = ОбщаяДоступность И ОткрытьДляПросмотраДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность = ОбщаяДоступность И РедактироватьДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность = ОбщаяДоступность И ЗакончитьРедактированиеДоступность;
	Форма.Элементы.ДеревоПриложенийКонтекстноеМенюУдалитьПредмет.Доступность = ОбщаяДоступность И УдалитьПредметДоступность;
	
КонецПроцедуры

// Обработка команды "Закончить редактирование" в карточке задачи
Процедура ЗакончитьРедактированиеТекущегоФайла(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
	
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Приложения", Приложения);
		ПараметрыОбработчика.Вставить("ЧислоПредметов", ЧислоПредметов);
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
			Обработчик,
			Приложения.ТекущиеДанные.Ссылка,
			Форма.УникальныйИдентификатор,
			Приложения.ТекущиеДанные.ХранитьВерсии,
			Приложения.ТекущиеДанные.РедактируетТекущийПользователь,
			Приложения.ТекущиеДанные.Редактирует);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка команды "Редактировать" в карточке задачи
Процедура РедактироватьТекущийФайл(Форма, Приложения, ЧислоПредметов = Неопределено) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Форма", Форма);
		ПараметрыОбработчика.Вставить("Приложения", Приложения);
		ПараметрыОбработчика.Вставить("ЧислоПредметов", ЧислоПредметов);
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Приложения.ТекущиеДанные.Ссылка);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандРаботыСФайламиПослеРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКомандРаботыСФайлами(ПараметрыВыполнения.Форма, ПараметрыВыполнения.Приложения, 
		ПараметрыВыполнения.ЧислоПредметов);	
	
КонецПроцедуры

// Обработка события Выбор у дерева приложений в карточке задачи
Процедура ДеревоПриложенийВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Элементы.ДеревоПриложений.ТекущиеДанные;
		ТекущаяСтрока = ТекущиеДанные.Ссылка;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
			
			КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
			Если КакОткрывать = "ОткрыватьКарточку" Тогда
				ПоказатьЗначение(, ТекущаяСтрока);
				Возврат;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
				ТекущаяСтрока,
				Неопределено,
				Форма.УникальныйИдентификатор);
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
			ПараметрыОбработчика.Вставить("Форма", Форма);
			ПараметрыОбработчика.Вставить("Элемент", Элемент);
			Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
			
			РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Форма.Элементы.Редактировать.Доступность);
			
		Иначе
			
			ПоказатьЗначение(, ТекущаяСтрока);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("ОбновитьКоманды", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоманды(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКомандРаботыСФайлами(ПараметрыВыполнения.Форма, ПараметрыВыполнения.Элемент);
	
КонецПроцедуры

// Обработка команды Просмотреть в  дереве приложений в карточке задачи
Процедура ОткрытьТекущийФайлДляПросмотра(Форма, Приложения) Экспорт
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			Приложения.ТекущиеДанные.Ссылка,
			Неопределено,
			Форма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка команды Сохранить как в дереве приложений в карточке задачи
Процедура СохранитьТекущийФайл(Форма, Приложения) Экспорт
	
	Если Приложения.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Приложения.ТекущиеДанные.Ссылка;
	Если Приложения.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Приложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Приложения.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокОбъектов", СписокФайловДляВыгрузки);
			ОткрытьФорму("Справочник.Файлы.Форма.ВыгрузкаФайловНаДиск",
				ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, Форма.УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, Форма.УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, Форма.УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, Форма.УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Помечает/снимает пометку удаления с бизнес-процессов. В случае если у пользователя нет прав, то
// генерируется исключение.
//
// Параметры:
//	 - СсылкаНаОбъект - УправляемаяФорма - форма объекта из которой следует выполнить действие.
//
Процедура ПометитьНаУдалениеБизнесПроцесс(ФормаОбъекта) Экспорт
	
	Если ТипЗнч(ФормаОбъекта) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита = Новый Структура;
	СтруктураПоискаРеквизита.Вставить("Объект", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта);
	
	Если ТипЗнч(СтруктураПоискаРеквизита.Объект) <> Тип("ДанныеФормыСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита.Очистить();
	СтруктураПоискаРеквизита.Вставить("Ссылка", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта.Объект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПоискаРеквизита.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаРеквизита.Очистить();
	СтруктураПоискаРеквизита.Вставить("ПометкаУдаления", Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРеквизита, ФормаОбъекта.Объект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПоискаРеквизита.ПометкаУдаления) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОбъекта.Модифицированность Тогда
		
		Если ФормаОбъекта.Объект.ПометкаУдаления Тогда
			ТекстВопроса =
				НСтр("ru = 'Для снятия отметки удаления необходимо записать внесенные вами изменения. Записать данные?'");
		Иначе
			ТекстВопроса =
				НСтр("ru = 'Для установки отметки удаления необходимо записать внесенные вами изменения. Записать данные?'");
		КонецЕсли;
		
	Иначе
		
		ФормаОбъекта.ЗаблокироватьДанныеФормыДляРедактирования();
		
		Если ФормаОбъекта.Объект.ПометкаУдаления Тогда
			ТекстВопросФормат =
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'");
		Иначе
			ТекстВопросФормат =
				НСтр("ru = 'Пометить ""%1"" на удаление?'");
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстВопросФормат,
			Строка(ФормаОбъекта.Объект.Ссылка));
		
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПометитьНаУдалениеБизнесПроцессЗавершение", ЭтотОбъект, ФормаОбъекта);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеБизнесПроцессЗавершение(Ответ, ФормаОбъекта) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОбъекта.Модифицированность Тогда
		ФормаОбъекта.Записать();
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ПометитьНаУдалениеБизнесПроцесс(
		ФормаОбъекта.Объект.Ссылка);
		
	Оповестить("БизнесПроцессИзменен", ФормаОбъекта.Объект.Ссылка);
	
	ОповеститьОбИзменении(ФормаОбъекта.Объект.Ссылка);
	
КонецПроцедуры

// Обработка команды ЗаписатьИЗакрыть в форме процесса
Процедура ЗаписатьИЗакрыть(Команда, Форма) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьФормуПослеЗаписи", Истина);
	
	Если Форма.Записать(ПараметрыЗаписи) Тогда
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие обработчики полей-участников процессов

Процедура УчастникПриИзменении(Элемент,
	Форма, ПараметрыУчастника) Экспорт
	
	Участник = ПараметрыУчастника.Участник;
	ОсновнойОбъектАдресации = ПараметрыУчастника.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = ПараметрыУчастника.ДополнительныйОбъектАдресации;
	УчастникСтрокой = ПараметрыУчастника.УчастникСтрокой;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект", Форма.Объект);
	ПараметрыОповещения.Вставить("Участник", Участник);
	ПараметрыОповещения.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ПараметрыОповещения.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("УчастникСтрокой", УчастникСтрокой);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("УчастникПриИзмененииЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьОбъектыАдресацииРоли(
		Форма.Объект,
		Участник, 
		ОсновнойОбъектАдресации, 
		ДополнительныйОбъектАдресации, 
		Форма,
		ОписаниеОповещения);
	
	Попытка
		Форма.ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	Исключение
	КонецПопытки;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура УчастникПриИзмененииЗавершение(Результат ,Параметры) Экспорт
	
	Объект = Параметры.Объект;
	Участник = Параметры.Участник;
	ОсновнойОбъектАдресации = Параметры.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = Параметры.ДополнительныйОбъектАдресации;
	УчастникСтрокой = Параметры.УчастникСтрокой;
	Форма = Параметры.Форма;
	
	Форма[УчастникСтрокой] = 
		РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
			Объект[Участник],
			Объект[ОсновнойОбъектАдресации],
			Объект[ДополнительныйОбъектАдресации]);
	
КонецПроцедуры

Процедура УчастникОчистка(Элемент, СтандартнаяОбработка,
	Форма, ПараметрыУчастника) Экспорт
	
	Участник = ПараметрыУчастника.Участник;
	УчастникСтрокой = ПараметрыУчастника.УчастникСтрокой;
	ОсновнойОбъектАдресации = ПараметрыУчастника.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = ПараметрыУчастника.ДополнительныйОбъектАдресации;
	
	СтандартнаяОбработка = Ложь;
	
	Форма.Объект[Участник] = Форма.ПользователиПустаяСсылка;
	Форма.Объект[ОсновнойОбъектАдресации] = Неопределено;
	Форма.Объект[ДополнительныйОбъектАдресации] = Неопределено;
	
	Форма[УчастникСтрокой] = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Форма.Объект[Участник],
		Форма.Объект[ОсновнойОбъектАдресации],
		Форма.Объект[ДополнительныйОбъектАдресации]);
	
КонецПроцедуры

Процедура УчастникОткрытие(Элемент, СтандартнаяОбработка,
	Форма, ПараметрыУчастника) Экспорт
	
	Участник = ПараметрыУчастника.Участник;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Форма.Объект[Участник]) Тогда
		ПоказатьЗначение(,Форма.Объект[Участник]);
	КонецЕсли;
	
КонецПроцедуры

Процедура УчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
	Форма, ПараметрыУчастника) Экспорт
	
	Участник = ПараметрыУчастника.Участник;
	УчастникСтрокой = ПараметрыУчастника.УчастникСтрокой;
	ОсновнойОбъектАдресации = ПараметрыУчастника.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = ПараметрыУчастника.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Форма.Объект[Участник] = ВыбранноеЗначение.РольИсполнителя;
		Форма.Объект[ОсновнойОбъектАдресации] = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Форма.Объект[ДополнительныйОбъектАдресации] = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		
		Форма.Модифицированность = Истина;
	Иначе
		Форма.Объект[Участник] = ВыбранноеЗначение;
		Форма.Объект[ОсновнойОбъектАдресации] = Неопределено;
		Форма.Объект[ДополнительныйОбъектАдресации] = Неопределено;
	КонецЕсли;
	
	Форма[УчастникСтрокой] = РаботаСБизнесПроцессамиКлиентСервер.ПредставлениеУчастникаПроцесса(
		Форма.Объект[Участник],
		Форма.Объект[ОсновнойОбъектАдресации],
		Форма.Объект[ДополнительныйОбъектАдресации]);
	
КонецПроцедуры

Процедура УчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура УчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
	Форма, ПараметрыУчастника) Экспорт
	
	Участник = ПараметрыУчастника.Участник;
	ОсновнойОбъектАдресации = ПараметрыУчастника.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = ПараметрыУчастника.ДополнительныйОбъектАдресации;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПользователями.СформироватьДанныеВыбораИсполнителя(Текст);
	Иначе
		Форма.Объект[Участник] = Форма.ПользователиПустаяСсылка;
		Форма.Объект[ОсновнойОбъектАдресации] = Неопределено;
		Форма.Объект[ДополнительныйОбъектАдресации] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие функции и процедуры для механизма бизнес-процесса "Исполнение"

// Выполняет перемещение исполнителя вверх в таблице
Процедура ПереместитьВверх(ЭлементТаблица, РеквизитТаблица, Модифицированность, ПеренумероватьТаблицу = Ложь) Экспорт
	
	ТекущиеДанные =ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 2
		И РеквизитТаблица[0].Ответственный Тогда
		Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	РеквизитТаблица.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1);
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица, ПеренумероватьТаблицу);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Выполняет перемещение исполнителя вниз в таблице
Процедура ПереместитьВниз(ЭлементТаблица, РеквизитТаблица, Модифицированность, ПеренумероватьТаблицу = Ложь) Экспорт
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = 1
		И ТекущиеДанные.Ответственный Тогда
		Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки = РеквизитТаблица.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитТаблица.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1);
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица, ПеренумероватьТаблицу);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Устанавливает или снимает отметку с ответственного исполнителя
Процедура НазначитьОтветственным(
	ЭлементТаблица,
	ЭлементНазначитьОтветственным,
	РеквизитТаблица,
	Модифицированность) Экспорт
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки > 1 И Не ТекущиеДанные.Ответственный Тогда
		Текст = НСтр("ru = 'Ответственным может быть назначен только первый исполнитель в списке.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из РеквизитТаблица Цикл
		Если Строка.НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
			Строка.Ответственный = Не Строка.Ответственный;
		ИначеЕсли Строка.Ответственный Тогда
			Строка.Ответственный = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементНазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Модифицированность = Истина;
	
КонецПроцедуры

// Проставляет порядок исполнения у исполнителей в зависимости от выбранного варианта исполнения
Процедура ПриИзмененииВариантаИсполнения(
	ВариантИсполнения,
	ПредыдущийВариантИсполнения,
	ЭлементСрокИсполненияИсполнителя,
	РеквизитТаблица,
	ПеренумероватьТаблицу = Ложь) Экспорт
	
	Если ВариантИсполнения = ПредыдущийВариантИсполнения Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		Для каждого Строка Из РеквизитТаблица Цикл
			Если ПредыдущийВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
				Строка.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего");
			ИначеЕсли ПредыдущийВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
				Строка.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим");
			КонецЕсли;
			Попытка
				Если Строка.ДлительностьИсполненияДни = 0 И Строка.ДлительностьИсполненияЧасы = 0 Тогда
					Строка.ДлительностьИсполненияДни = 1;	
				КонецЕсли;
			Исключение
				// Ничего не делаем, т.к. если работа ведется с исполнителями шаблона исполнения, этих реквизитов нет
			КонецПопытки;
		КонецЦикла;
		ЭлементСрокИсполненияИсполнителя.АвтоотметкаНезаполненного = Истина;
		
	ИначеЕсли ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Параллельно") Тогда
		Для каждого Строка Из РеквизитТаблица Цикл
			Строка.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим");
		КонецЦикла;
		ЭлементСрокИсполненияИсполнителя.АвтоотметкаНезаполненного = Ложь;
		
	ИначеЕсли ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно") Тогда
		Для каждого Строка Из РеквизитТаблица Цикл
			Строка.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ПослеПредыдущего");
			Попытка
				Если Строка.ДлительностьИсполненияДни = 0 И Строка.ДлительностьИсполненияЧасы = 0 Тогда
					Строка.ДлительностьИсполненияДни = 1;	
				КонецЕсли;
			Исключение
				// Ничего не делаем, т.к. если работа ведется с исполнителями шаблона исполнения, этих реквизитов нет
			КонецПопытки;
		КонецЦикла;
		ЭлементСрокИсполненияИсполнителя.АвтоотметкаНезаполненного = Истина;
		
	КонецЕсли;
	ПредыдущийВариантИсполнения = ВариантИсполнения;
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица, ПеренумероватьТаблицу);
	
КонецПроцедуры

// Обработчик события начала редактирования таблицы исполнителей
Процедура ИсполнителиПриНачалеРедактирования(РеквизитТаблица, ЭлементТаблица, ВариантИсполнения, ПеренумероватьТаблицу = Ложь, РеквизитПорядок = "ПорядокИсполнения") Экспорт
	
	ЭлементТаблица.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно") Тогда
		ТекущаяСтрока = РеквизитТаблица.НайтиПоИдентификатору(ЭлементТаблица.ТекущаяСтрока);
		ИндексСтроки = РеквизитТаблица.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0 Тогда
			ЭлементТаблица.ТекущиеДанные.ПорядокИсполнения = РеквизитТаблица[ИндексСтроки-1].ПорядокИсполнения;
		Иначе
			ЭлементТаблица.ТекущиеДанные.ПорядокИсполнения = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЗадач.ВместеСПредыдущим");
		КонецЕсли;
	КонецЕсли;
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(РеквизитТаблица, ПеренумероватьТаблицу, РеквизитПорядок);
	ЭлементТаблица.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

// Проверяет корректность заполнения данных в таблице исполнителей
Процедура ПроверитьКорректностьЗаполнения(
	ОбъектСсылка,
	РеквизитТаблица,
	СрокИсполнения,
	ВариантИсполнения,
	ПутьРеквизитаОбщийСрок,
	ПутьРеквизитаТаблица,
	Отказ) Экспорт
	
	Если РеквизитТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальныйНомерШага = 1;
	Для каждого Исполнитель Из РеквизитТаблица Цикл
		Если Исполнитель.Шаг > МаксимальныйНомерШага Тогда
			МаксимальныйНомерШага = Исполнитель.Шаг;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка, что сроки исполнения задач обычных исполнителей
	// не вступают в противоречие с общим сроком бизнес-процесса.
	МаксимальныйСрокНаШаге = МаксимальныйСрокНаШаге(РеквизитТаблица, МаксимальныйНомерШага);
	Если ЗначениеЗаполнено(СрокИсполнения)
		И ЗначениеЗаполнено(МаксимальныйСрокНаШаге)
		И МаксимальныйСрокНаШаге > СрокИсполнения Тогда
		Для Счетчик = 0 По РеквизитТаблица.Количество() - 1 Цикл
			ОднаСтрока = РеквизитТаблица[Счетчик];
			Если ОднаСтрока.СрокИсполнения > СрокИсполнения Тогда
				Если ТипЗнч(ОбъектСсылка) <> Тип("БизнесПроцессСсылка.Исполнение")
					ИЛИ ТипЗнч(ОбъектСсылка) = Тип("БизнесПроцессСсылка.Исполнение")
					И (НЕ ЗначениеЗаполнено(ОднаСтрока.ЗадачаИсполнителя)
					ИЛИ ЗначениеЗаполнено(ОднаСтрока.ЗадачаИсполнителя)
					И Не ОднаСтрока.Пройден) Тогда
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Срок исполнения задачи для %1 больше общего срока завершения процесса'"),
						ОднаСтрока.Исполнитель);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						,
						ПутьРеквизитаТаблица + "[" + Строка(Счетчик) + "].СрокИсполнения",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка правильности указания срока исполнения для ответственного исполнителя.
	Если ЗначениеЗаполнено(РеквизитТаблица[0].СрокИсполнения)
		И РеквизитТаблица[0].Ответственный
		И ЗначениеЗаполнено(СрокИсполнения)
		И РеквизитТаблица[0].СрокИсполнения > СрокИсполнения Тогда
		Текст = НСтр("ru = 'Срок исполнения задачи ответственного исполнителя больше общего срока завершения процесса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			ПутьРеквизитаТаблица + "[0].СрокИсполнения",
			,
			Отказ);
	КонецЕсли;
	
	// Проверка ввода порядка согласования
	Для каждого Строка Из РеквизитТаблица Цикл
		Если ВариантИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Смешанно")
			И Не ЗначениеЗаполнено(Строка.ПорядокИсполнения) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено поле ""Порядок согласования"" в строке %1 списка ""Лист согласования""!'"), Строка.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				ПутьРеквизитаТаблица + "[" + Формат(Строка.НомерСтроки-1, "ЧГ=0") + "].ПорядокСогласования",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет максимальный срок среди исполнителей одного шага
Функция МаксимальныйСрокНаШаге(РеквизитТаблица, НомерШага)
	
	МаксимальныйСрок = Дата(1,1,1);
	
	Для каждого Исполнитель Из РеквизитТаблица Цикл
		Если Исполнитель.Шаг = НомерШага И Исполнитель.СрокИсполнения > МаксимальныйСрок Тогда
			МаксимальныйСрок = Исполнитель.СрокИсполнения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальныйСрок;
	
КонецФункции

// Обрабатывает изменение исполнителя в таблице исполнителей
Процедура ВыбратьОбъектыАдресацииРоли(
	Объект,
	Исполнитель,
	ОсновнойОбъектАдресации,
	ДополнительныйОбъектАдресации,
	Форма,
	ОповещениеПослеЗавершения = Неопределено) Экспорт
	
	Если ТипЗнч(Объект[Исполнитель]) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект[Исполнитель]) Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект[Исполнитель], "ИспользуетсяСОбъектамиАдресации") Тогда
			
			ПараметрыФормы = Новый Структура("РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации",
				Объект[Исполнитель], Объект[ОсновнойОбъектАдресации], Объект[ДополнительныйОбъектАдресации]);
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Объект", Объект);
			ПараметрыОповещения.Вставить("Исполнитель", Исполнитель);
			ПараметрыОповещения.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыОповещения.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			ПараметрыОповещения.Вставить("ОповещениеПослеЗавершения", ОповещениеПослеЗавершения);
				
			ОписаниеОповещения = 
				Новый ОписаниеОповещения("ВыбратьОбъектыАдресацииРолиЗавершение", ЭтотОбъект, ПараметрыОповещения);
				
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя",
				ПараметрыФормы, Форма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПослеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьОбъектыАдресацииРолиЗавершение(Результат, Параметры) Экспорт
	
	Объект = Параметры.Объект;
	Исполнитель = Параметры.Исполнитель;
	ОсновнойОбъектАдресации = Параметры.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации = Параметры.ДополнительныйОбъектАдресации;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект[Исполнитель] = Результат.РольИсполнителя;
		Объект[ОсновнойОбъектАдресации] = Результат.ОсновнойОбъектАдресации;
		Объект[ДополнительныйОбъектАдресации] = Результат.ДополнительныйОбъектАдресации;
		
	Иначе
		
		Объект[Исполнитель] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Объект[ОсновнойОбъектАдресации] = Неопределено;
		Объект[ДополнительныйОбъектАдресации] = Неопределено;
		
	КонецЕсли;
	
	Если Параметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с доступными действиями для строки таблицы
//
// Параметры:
//   СтрокаТаблицы - текущие данные динамического списка
//
// Возвращаемое значение:
//   Структура - доступные действия над процессом текущей строки
//      Остановить - Булево - признак того что текущий процесс можно остановить
//      Продолжить - Булево - признак того что текущий процесс можно продолжить (сделать активным)
//
Функция ДоступныеДействияПоИзменениюСостоянияПроцесса(СтрокаТаблицы) Экспорт
	
	ДоступныеДействия = Новый Структура;
	ДоступныеДействия.Вставить("Остановить", Ложь);
	ДоступныеДействия.Вставить("Продолжить", Ложь);
	
	Если СтрокаТаблицы.Завершен
		ИЛИ НЕ СтрокаТаблицы.Стартован
		ИЛИ СтрокаТаблицы.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка")
		ИЛИ НЕ СтрокаТаблицы.ВедущаяЗадача.Пустая() Тогда
		
		ДоступныеДействия.Остановить = Ложь;
		ДоступныеДействия.Продолжить = Ложь;
		
	ИначеЕсли СтрокаТаблицы.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен") Тогда
			
		ДоступныеДействия.Остановить = Истина;
		ДоступныеДействия.Продолжить = Ложь;
		
	ИначеЕсли СтрокаТаблицы.Состояние = 
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		
		ДоступныеДействия.Остановить = Ложь;
		ДоступныеДействия.Продолжить = Истина;
		
	КонецЕсли;
	
	Возврат ДоступныеДействия;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКнопокИзмененияСостоянияПроцессов(Форма) Экспорт
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ДоступныеДействия = Новый Структура;
		ДоступныеДействия.Вставить("Остановить", Истина);
		ДоступныеДействия.Вставить("Продолжить", Истина);
		
	Иначе
		ДоступныеДействия = 
			ДоступныеДействияПоИзменениюСостоянияПроцесса(ТекущиеДанные);
	КонецЕсли;
	
	Форма.Элементы.СписокОстановить.Доступность = ДоступныеДействия.Остановить;
	Форма.Элементы.СписокПродолжитьБизнесПроцесс.Доступность = ДоступныеДействия.Продолжить;
	
	Форма.Элементы.СписокКонтекстноеМенюОстановить.Доступность = ДоступныеДействия.Остановить;
	Форма.Элементы.СписокКонтекстноеМенюПродолжитьБизнесПроцесс.Доступность = ДоступныеДействия.Продолжить;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Общие обработчики форм бизнес-процессов

// Выполняет обработку оповещения в форме бизнес процесса.
// процедура предназначена для вызова из форм объектов бизнес-процессов
//
Процедура ОбработкаОповещенияФормаБизнесПроцесса(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
 	Если ИмяСобытия = "БизнесПроцессИзменен" И Источник <> Форма Тогда
		Если Параметр = Форма.Объект.Ссылка
			ИЛИ (ТипЗнч(Параметр) = Тип("Массив")
				И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено) Тогда
			
			Форма.Прочитать();
			
			Попытка
				Форма.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
			Исключение
				// У формы может и не быть процедуры ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса.
			КонецПопытки;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СтартПроцессаПослеВопроса"
		И Параметр.ИдентификаторФормы = Форма.УникальныйИдентификатор Тогда
		
		Если Параметр.ПараметрыЗаписиПроцесса.Свойство(
			"ПроверкаПередОткрытиемФормыОтложенногоСтарта") Тогда
			
			Форма.ПроверитьЗаполнениеПроцессаДляОтложенногоСтарта(
				Ложь, Параметр.ПараметрыЗаписиПроцесса, Истина);
			
		ИначеЕсли Параметр.ПараметрыЗаписиПроцесса.Свойство(
			"ИзменениеОтложенногоПроцесса") Тогда
			
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса)
				И Параметр.ПараметрыЗаписиПроцесса.Свойство(
					"ЗакрытьФормуПослеЗаписи") Тогда
				
				Форма.Закрыть();
			КонецЕсли;
			
		ИначеЕсли Параметр.ПараметрыЗаписиПроцесса.Свойство(
			"ИзменениеСостоянияПроцесса") Тогда
			
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса) Тогда
			
				ПоказатьОповещениеПользователя(
					Параметр.ПараметрыЗаписиПроцесса.
						СообщениеПриИзмененииСостоянияПроцесса,
					ПолучитьНавигационнуюСсылку(Форма.Объект.Ссылка),
					Строка(Форма.Объект.Ссылка),
					БиблиотекаКартинок.Информация32);
					ОповеститьОбИзменении(Форма.Объект.Ссылка);
				ОповеститьОбИзменении(Форма.Объект.Ссылка);
				
			КонецЕсли;
			
		Иначе
			Если Форма.Записать(Параметр.ПараметрыЗаписиПроцесса)
				И Параметр.ПараметрыЗаписиПроцесса.Свойство(
					"ЗакрытьФормуПослеЗаписи") Тогда
				
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
