
// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка 
// 
Функция ПредметСтрокой(СсылкаНаПредмет, ИмяПредмета = Неопределено) Экспорт
	
	Результат = "";
	ОбщегоНазначенияПереопределяемый.УстановитьПредставлениеПредмета(СсылкаНаПредмет, Результат); 
	
	Если ПустаяСтрока(Результат) Тогда
		Если СсылкаНаПредмет = Неопределено или СсылкаНаПредмет.Пустая() Тогда
			Если ИмяПредмета = Неопределено Тогда
				Результат = НСтр("ru = 'не введен'");
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (не введен)'"),Строка(ИмяПредмета));
			КонецЕсли;
		Иначе
			МетаданныеПредмета = СсылкаНаПредмет.Метаданные();
			Если ИмяПредмета = Неопределено Тогда
				ПредставлениеОбъекта = МетаданныеПредмета.ПредставлениеОбъекта;
				Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
					ПредставлениеОбъекта = МетаданныеПредмета.Представление();
				КонецЕсли;
			Иначе
				ПредставлениеОбъекта = Строка(ИмяПредмета);
			КонецЕсли;
			
			ПредставлениеСсылки = Строка(СсылкаНаПредмет);
			
			Если МетаданныеПредмета.Имя = "Файлы" Тогда
				ОписаниеФайла = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаПредмет, "Описание");
				Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
					ПредставлениеСсылки = ПредставлениеСсылки + ", " + ОписаниеФайла;
				КонецЕсли;
			КонецЕсли;
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", ПредставлениеСсылки, ПредставлениеОбъекта);

		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истину, если клиентское приложение является веб клиентом,
// иначе Ложь.
//
Функция ПриложениеЯвляетсяВебКлиентом() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Выполняется в привилегированном режиме.
// 
Функция ЗначенияРеквизитовОбъектаВПривилегированномРежиме(Ссылка, Реквизиты) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// Выполняется в привилегированном режиме.
//
Функция ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Ссылка, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы
// для нескольких объектов. Выполняется в привилегированном режиме.
// 
Функция ЗначенияРеквизитовОбъектовВПривилегированномРежиме(МассивСсылок, ИменаРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// Выполняется в привилегированном режиме.
//
Функция ЗначениеРеквизитаОбъектовВПривилегированномРежиме(МассивСсылок, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита);
	
КонецФункции

// Получает текущую дату в миллисекундах
//  
// Параметры:
//  ДатаВремя - Дата - преобразуемая дата
//
// Возвращаемое значение:
//  Число - количество миллисекунд, прошедших от 01.01.0001 00:00:00 до текущей даты
// 
Функция ТекущаяДатаВМиллисекундах() Экспорт

	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() + (ТекущаяДата() - ТекущаяУниверсальнаяДата()) * 1000;
			
КонецФункции
		
// Получает дату в миллисекундах
//
// Параметры:
//  ДатаВремя - Дата - преобразуемая дата
//
// Возвращаемое значение:
//  Число - количество миллисекунд, прошедших от 01.01.0001 00:00:00 до переданной даты (на начало секунды)
// 
Функция ДатаВМиллисекундах(ДатаВремя) Экспорт
	
	ПустаяДата = Дата('00010101000000');
	Результат = (ДатаВремя - ПустаяДата) * 1000;
	
	Возврат Результат;
	
КонецФункции

// Преобразует дату в миллисекундах в дату
//
// Параметры:
//  ДатаВМиллисекундах - количество миллисекунд начиная с 01.01.0001 00:00:00
//
// Возвращаемое значение:
//  Дата
// 
Функция ПреобразоватьМиллисекундыВДату(ДатаВМиллисекундах) Экспорт
	
	ПустаяДата = Дата('00010101000000');
	Результат = ПустаяДата + ДатаВМиллисекундах / 1000;
	
	Возврат Результат;
	
КонецФункции
