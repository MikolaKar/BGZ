Функция УдалитьНППЧисло(Значение) Экспорт
	//Сообщить("ТипЗнч(Значение)="+ТипЗнч(Значение)+" _ "+Значение);
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Число(СтрЗаменить(Значение, Символы.НПП, ""));
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Если Найти("0123456789", Лев(СокрЛ(Значение),1)) > 0 Тогда
			Возврат Число(Значение);
		Иначе 
			Возврат Значение;
		КонецЕсли; 
	Иначе	
		Возврат Значение;
	КонецЕсли;	
КонецФункции // УдалитьНППЧисло()

&НаСервере
Функция ПолучитьДатуСоздания(Значение, ИмяПараметра, ВидСпр, Дата1, Дата2) Экспорт
    Если Не ЗначениеЗаполнено(Значение) Тогда
        Если ИмяПараметра = "НачНомер" Тогда
            Возврат Дата("00010101000000");
        Иначе
            Возврат ТекущаяДата();
        КонецЕсли; 
    Иначе

        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |	ИсходящиеДокументы.ДатаРегистрации
        |ИЗ
        |	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
        |ГДЕ
//        |	(ИсходящиеДокументы.РегистрационныйНомер ПОДОБНО &РегистрационныйНомер
//        |			ИЛИ ИсходящиеДокументы.ЧисловойНомер = &ЧисловойНомер)
        |			ИсходящиеДокументы.ЧисловойНомер = &ЧисловойНомер
        |	И ИсходящиеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2";
        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсходящиеДокументы", ВидСпр);
        //Запрос.УстановитьПараметр("РегистрационныйНомер", "%"+Значение+"%");
        Запрос.УстановитьПараметр("ЧисловойНомер", Число(Значение));
        Запрос.УстановитьПараметр("Дата1", Дата1);
        Запрос.УстановитьПараметр("Дата2", Дата2);
        
        Результат = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = Результат.Выбрать();
        
        Если ВыборкаДетальныеЗаписи.Следующий() Тогда
            
            Возврат ВыборкаДетальныеЗаписи.ДатаРегистрации;
        КонецЕсли;
    КонецЕсли;
	// нет таких номеров
	Если ИмяПараметра = "НачНомер" Тогда
		Возврат Дата("00010101000000");
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли; 
КонецФункции // ПолучитьДатуСоздания()

Функция ПолучитьСуммуДляОтчета4УН(Оплата, ОплатаДо, Заактировано, ЗаактированоДо) Экспорт
    
    СуммаДляОтчета = 0;
   
    Если ТипЗнч(Оплата) <> Тип("Число") Тогда
        Оплата = 0;
    КонецЕсли; 
    Если ТипЗнч(ОплатаДо) <> Тип("Число") Тогда
        ОплатаДо = 0;
    КонецЕсли; 
    Если ТипЗнч(Заактировано) <> Тип("Число") Тогда
        Заактировано = 0;
    КонецЕсли; 
    Если ТипЗнч(ЗаактированоДо) <> Тип("Число") Тогда
        ЗаактированоДо = 0;
    КонецЕсли; 
    
    // Учет частично отраженных оплат  в предыдущих периодах
    ОстатокОплатыДо = 0;
    Если ОплатаДо > 0 Тогда
        ОстатокОплатыДо = Макс(ОплатаДо - ЗаактированоДо, 0);
    КонецЕсли; 
    
    // Учет частично отраженных актов  в предыдущих периодах
    ОстатокЗаактированоДо = 0;
    Если ЗаактированоДо > 0 Тогда
        ОстатокЗаактированоДо = Макс(ЗаактированоДо - ОплатаДо, 0);
    КонецЕсли; 
    
    Если Оплата > 0 или Заактировано > 0 Тогда
    
        СуммаДляОтчета = Мин(Макс(Оплата, ОстатокОплатыДо), Макс(Заактировано, ОстатокЗаактированоДо));	
    
    КонецЕсли; 
    
    Возврат СуммаДляОтчета;

КонецФункции // ПолучитьСуммуДляОтчета4УН()

// Используется в СКД отчет ДоговораКИсполнению
&НаСервере
Функция ПолучитьПроизводственныйКалендарь() Экспорт
	Возврат ПолучитьКалендарь("Производственный календарь");
КонецФункции // ПолучитьПроизводственныйКалендарь()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьКалендарь(ИмяКалендаря) Экспорт
	Возврат Справочники.Календари.НайтиПоНаименованию(ИмяКалендаря);
КонецФункции // ПолучитьКалендарь()

// Используется в СКД отчет ДоговораКИсполнению
&НаСервере
Функция ПолучитьРазностьДат(ВидДней, Календарь, ДатаНачала, ДатаОкончания) Экспорт
    
    Если ВидДней = Перечисления.ВидыДней.Календарные Тогда
        Дней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/3600/24;
    Иначе    
        Дней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Календарь, НачалоДня(ДатаНачала), НачалоДня(ДатаОкончания));
    КонецЕсли; 

    Возврат	Дней;
КонецФункции // ПолучитьРазностьДат()
    
// Функция возвращает дату, которая отличается указанной даты на количество дней,
// входящих в указанный график
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата
//	КоличествоДней	- количество дней, на которые нужно увеличить дату начала, тип Число
//
// Возвращаемое значение
//	Дата			- дата, увеличенная на количество дней, входящих в график
//
&НаСервере
Функция ПолучитьДатуПоКалендарю(Календарь="", Знач ДатаОт, Знач КоличествоДней) Экспорт
	
    Если Не ЗначениеЗаполнено(Календарь) Тогда
        Календарь = Справочники.Календари.НайтиПоНаименованию("Производственный");
    КонецЕсли; 
    
	МассивДат = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаОт, КоличествоДней);
	
	Возврат МассивДат;
	
КонецФункции
    
