
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла (ключи структуры: "Расширение, ПолноеНаименование, АдресХранилища");
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла) Экспорт
	
	
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
			ДанныеФайла.Расширение);
		
		Расширение = ДанныеФайла.Расширение;
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение,
			Расширение);
		ВыборФайла.Фильтр = Фильтр;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.АдресХранилища;
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
				ДанныеФайла.Расширение);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
				|Пожалуйста, подождите.'"), ИмяФайла);
				
			Состояние(ТекстПояснения);
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу,
				ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.АдресХранилища;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименование,
																		ДанныеФайла.Расширение);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполняется сохранение файла ""%1""...
			|Пожалуйста, подождите.'"), ИмяФайла);
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Только для внутреннего использования
Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
	
	СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("Ключ, СсылкаНаМассивСертификатов",
		СсылкаНаЭД, СсылкаНаМассивСертификатов);
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.СообщенияЭДО.Форма.ФормаПросмотраЭД", ПараметрыФормы, , СсылкаНаЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.СообщенияЭДО.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы, СсылкаНаЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Справочник.СообщенияЭДО.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает данные по сертификатам, разрешенным для использования для авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов, массив соглашений передается явно в параметрах, либо "вытаскивается"
// из массива ЭД (для передачи которых требуется авторизация на сервере Такском).
//
// Параметры:
//  МассивСоглашений - массив ссылок - ссылки на соглашения, по которым требуется определить сертификаты;
//  МассивЭД - массив ссылок - ссылки на ЭД, по соглашениям из которых, требуется определить сертификаты;
//
// Возвращаемое значение:
//  Структура соответствий - ключ - соглашение об обмене ЭД, значение - структура параметров сертификата авторизации.
//
Функция СоотвСоглашенийИСтруктурСертификатовДляАвторизации(МассивСоглашений = Неопределено, МассивЭД = Неопределено) Экспорт
	
	ВозврСоответствие = Новый Соответствие;
	Отказ = Ложь;
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписи") Тогда
		МассивСтруктурСертификатов = Новый Массив;
		ВыполнятьАвторизациюНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере();
		СтМассивовСтруктурСертификатов = Новый Структура;
		Если Не ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
			Исключение
				МассивСтруктурСертификатов = Новый Массив;
				
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьСоглашенияТребующиеЭП() Тогда
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
			
			СтМассивовСтруктурСертификатов.Вставить("МассивСтруктурСертификатовКлиент", МассивСтруктурСертификатов);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(МассивЭД) Тогда
			СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовПоМассивуЭД(
				МассивЭД, СтМассивовСтруктурСертификатов, , Ложь, Истина);
		Иначе
			СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатов(
				МассивСоглашений, СтМассивовСтруктурСертификатов, , Ложь, Истина);
		КонецЕсли;
		// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
		// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
		// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
		// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
		// На основании соответствия соглашений и сертификатов авторизации и соглашения сертификатов и структур параметров,
		// сформируем соответствие соглашений и структур сертификатов, необходимое для выполнения отправки ЭД через ОЭДО.
		СоотвСертификатовИИхСтруктур = Неопределено;
		СоотвСоглашенийИСертификатовАвторизации = Неопределено;
		Если СтСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СтСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
			И СоотвСоглашенийИСертификатовАвторизации.Количество() > 0 Тогда
			Если НЕ ВыполнятьАвторизациюНаСервере Тогда
				Попытка
					МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
			Если НЕ Отказ Тогда
				Для Каждого Элемент Из СоотвСоглашенийИСертификатовАвторизации Цикл
					СоглашениеЭД = Элемент.Ключ;
					Сертификат = Элемент.Значение;
					Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(СоглашениеЭД))Тогда
						Продолжить;
					КонецЕсли;
					СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Тогда
						ВозврСоответствие.Вставить(СоглашениеЭД, СтруктураСертификата);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозврСоответствие;
	
КонецФункции

// Только для внутреннего использования
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ВыводитьСообщения = Истина) Экспорт
	
	ЗашифрованныйМаркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера);
	Если ЗашифрованныйМаркер <> Неопределено Тогда
		МенеджерКриптографииСоздан = Истина;
		Попытка
			НастройкиКриптографии = Неопределено;
			Если СтруктураПараметровЗапросаМаркера.Свойство("НастройкиКриптографии", НастройкиКриптографии) Тогда
				МенеджерКриптографии = Новый МенеджерКриптографии(
													НастройкиКриптографии.ПровайдерЭП,
													НастройкиКриптографии.ПутьМодуляКриптографии,
													НастройкиКриптографии.ТипПровайдераЭП);
				МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
				МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
				МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
			Иначе
				МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
			КонецЕсли;
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровЗапросаМаркера.ПарольПользователя;
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МенеджерКриптографииСоздан = Ложь;
		КонецПопытки;
		Если МенеджерКриптографииСоздан Тогда
			ДанныеРасшифрованы = Истина;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ДанныеРасшифрованы = Ложь;
			КонецПопытки;
			Если ДанныеРасшифрованы Тогда
				Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныеДвоичныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	КонецЕсли;

	Возврат ПройденУспешно;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + Строка(Новый УникальныйИдентификатор) + ".test";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ЭлектронныеДокументыСлужебныйВызовСервера.ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ШаблонСообщения = НСтр("ru = 'Указанный каталог ""%1"" не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПутьККаталогу);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Выводит результат проверки корректности сертификата криптографии.
//
// Параметры
//  Сертификат - СправочникСсылка.СертификатыЭП - ссылка на сертификат;
//  ПараметрыСертификата - структура - перечень параметров сертификата;
//  НаКлиенте - Булево - выполнять проверку сертификата на клиенте.
//  НаСервере - Булево - выполнять проверку сертификата на сервере.
//  ВыводитьТолькоОшибки - Булево - флаг вывода сообщений только об ошибках или всех событиях.
//  Отказ - Булево - ошибка при тестировании сертификата
//  УникальныйИдентификатор - Уникальный идентификатор формы, для корректного вывода сообщений
//
Процедура ТестНастроекСертификата(
					Сертификат,
					ПараметрыСертификата,
					НаКлиенте = Ложь,
					НаСервере = Ложь,
					ВыводитьТолькоОшибки = Ложь,
					Отказ = Ложь,
					УникальныйИдентификатор = Неопределено,
					ОписаниеОповещения = Неопределено) Экспорт
					
	ПроверитьСрокДействияСертификата(Сертификат);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	ПараметрыВыполнения.Вставить("НаСервере", НаСервере);
	ПараметрыВыполнения.Вставить("НаКлиенте", НаКлиенте);
	ПараметрыВыполнения.Вставить("ВыводитьТолькоОшибки", ВыводитьТолькоОшибки);
	ПараметрыВыполнения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Обработчик = Новый ОписаниеОповещения("ТестНастроекСертификатаЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ПолучитьПарольКСертификатуАсинхронно(Сертификат, ПараметрыСертификата, НСтр("ru = 'Проверка сертификата'"),, Обработчик);
	
КонецПроцедуры

Процедура ТестНастроекСертификатаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	СтруктураВозврата = Результат.СтруктураВозврата;
	ПараметрыСертификата = ПараметрыВыполнения.ПараметрыСертификата;
	
	Если Не Результат.ПарольПолучен Тогда
		Если ПараметрыВыполнения.ОписаниеОповещения <> Неопределено Тогда
			РезультатОбработчика = Новый Структура;
			РезультатОбработчика.Вставить("Успешно", Ложь);
			РезультатОбработчика.Вставить("ПараметрыСертификата", ПараметрыСертификата);
			РезультатОбработчика.Вставить("Отказ", Ложь);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, РезультатОбработчика);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата.Вставить("ЗапомнитьПарольКСертификату", СтруктураВозврата.ЗапомнитьПарольКСертификату);
	ПараметрыСертификата.Вставить("ПарольПользователя",          СтруктураВозврата.ПарольПользователя);
	ПараметрыСертификата.Вставить("НастройкиКриптографии",       СтруктураВозврата.НастройкиКриптографии);
	
	НаСервере = ПараметрыВыполнения.НаСервере;
	НаКлиенте = ПараметрыВыполнения.НаКлиенте;
	ВыводитьТолькоОшибки = ПараметрыВыполнения.ВыводитьТолькоОшибки;
	
	// Проверка сертификата на соответствие 63-ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		
		НовыйСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
		Если Не НовыйСертификат.Субъект.Свойство("SN") Тогда
			
			ТекстСообщения = НСтр("ru = 'Сертификат не соответствует федеральному закону Российской Федерации от 6 апреля 2011 г. N 63-ФЗ ""Об электронной подписи"".
										|Рекомендуется перейти на квалифицированный сертификат ключа подписи (КСКП) по 63-ФЗ.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	ОтказКлиент = Ложь;
	Если НаКлиенте Тогда
		ТестСертификатаНаКлиенте(
			ПараметрыСертификата.Отпечаток,
			ПарольПользователя,
			ВыводитьТолькоОшибки,
			ОтказКлиент,
			ПараметрыСертификата.НастройкиКриптографии);
		Если ОтказКлиент И НЕ НаСервере Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ОтказСервер = Ложь;
	Если НаСервере Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ТестСертификатаНаСервере(
			ПараметрыСертификата.Отпечаток,
			ПарольПользователя,
			ВыводитьТолькоОшибки,
			ОтказСервер,
			ПараметрыСертификата.НастройкиКриптографии);
		Если ОтказСервер И (ОтказКлиент ИЛИ НЕ НаКлиенте) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОписаниеОповещения <> Неопределено Тогда
		РезультатОбработчика = Новый Структура;
		РезультатОбработчика.Вставить("Успешно", Истина);
		РезультатОбработчика.Вставить("ПараметрыСертификата", ПараметрыСертификата);
		РезультатОбработчика.Вставить("Отказ", Отказ);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, РезультатОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет срок действия сертификата
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыЭП - ссылка на проверяемый сертификат
//
Процедура ПроверитьСрокДействияСертификата(Сертификат) Экспорт
	
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
	РазностьДат = РеквизитыСертификата.ДатаОкончания - ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НЕ РеквизитыСертификата.ОповещенОСрокеДействия И РазностьДат > 0 И РазностьДат < 60*60*24*31 Тогда
		ПараметрыФормы = Новый Структура("Сертификат", Сертификат);
		ИдентификаторФормы = Сертификат.УникальныйИдентификатор();
		ОкнаКлиентскогоПриложения = ПолучитьОкна();
		ПоказыватьОкно = Истина;
		Если НЕ ОкнаКлиентскогоПриложения = Неопределено Тогда
			Для Каждого Окно Из ОкнаКлиентскогоПриложения Цикл
				СодержимоеОкна = Окно.ПолучитьСодержимое();
				Если СодержимоеОкна <> Неопределено И СодержимоеОкна.КлючУникальности = ИдентификаторФормы Тогда
					ПоказыватьОкно = Ложь;
					Окно.Активизировать();
					Возврат;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
		Если ПоказыватьОкно Тогда
			ОткрытьФорму(
				"Справочник.СертификатыЭП.Форма.ОповещениеОбОкончанииСрокаДействия",
				ПараметрыФормы,
				,
				ИдентификаторФормы,
				ВариантОткрытияОкна.ОтдельноеОкно);
		КонецЕсли;
		Операция = НСтр("ru = 'Проверка срока действия сертификата'");
		ТекстОшибки = НСтр("ru = 'Заканчивается срок действия сертификата'")+ " " + Сертификат
					+ Символы.ПС + НСтр("ru = 'Необходимо получить новый'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Метод получает пароль пользователя к сертификату ЭП
//
// Параметры:
//  СертификатЭП - СправочникСсылка - элемент справочника Сертификаты ЭП;
//  ПараметрыСертификата - структура - список параметров сертификата для подписи;
//  ВидОперации - строка - вид операции, для выполнения которой получается пароль пользователя;
//  ОбъектыДляОбработки - массив или ссылка на ЭД - один или список объектов ИБ для обработки;
//
// Возвращаемое значение:
//  ПарольПолучен - булево - признак получения пароля пользователя.
//
Функция ПолучитьПарольКСертификату(СертификатЭП, ПараметрыСертификата, ВидОперации,
	ОбъектыДляОбработки = Неопределено) Экспорт
	
	ПарольПолучен = Ложь;
	ПарольПользователя = Неопределено;
	
	// Установка признака возможности сохранения пароля.
	ЗапросПароляДляСертификата = ВидОперации = "Сохранение пароля в сертификате";
	
	Если ПараметрыСертификата.Свойство("ЗапомнитьПарольКСертификату")
		И ПараметрыСертификата.ЗапомнитьПарольКСертификату
		И Не ЗапросПароляДляСертификата Тогда
		
		ПарольПолучен = Истина;
	Иначе
		Если ОбъектыДляОбработки = Неопределено Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",                ВидОперации);
			ПараметрыФормы.Вставить("ЗапросПароляДляСертификата", ЗапросПароляДляСертификата);
			ПараметрыФормы.Вставить("СертификатЭП",               СертификатЭП);
			
			СтруктураВозврата = ОткрытьФормуМодально("Справочник.СертификатыЭП.Форма.ЗапросПароляДляХранения",
				ПараметрыФормы);
		Иначе
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",                ВидОперации);
			ПараметрыФормы.Вставить("СертификатЭП",               СертификатЭП);
			ПараметрыФормы.Вставить("ОбъектыДляОбработки",        ОбъектыДляОбработки);
			
			СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭПШифрование", ПараметрыФормы);
		КонецЕсли;
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			
			ПараметрыСертификата.Вставить("ЗапомнитьПарольКСертификату", СтруктураВозврата.ЗапомнитьПарольКСертификату);
			ПараметрыСертификата.Вставить("ПарольПользователя",          СтруктураВозврата.ПарольПользователя);
			ПараметрыСертификата.Вставить("НастройкиКриптографии",       СтруктураВозврата.НастройкиКриптографии);
			
			ПарольПолучен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПарольПолучен;
	
КонецФункции

// Метод получает пароль пользователя к сертификату ЭП
//
// Параметры:
//  СертификатЭП - СправочникСсылка - элемент справочника Сертификаты ЭП;
//  ПараметрыСертификата - структура - список параметров сертификата для подписи;
//  ВидОперации - строка - вид операции, для выполнения которой получается пароль пользователя;
//  ОбъектыДляОбработки - массив или ссылка на ЭД - один или список объектов ИБ для обработки;
//
// Возвращаемое значение:
//  ПарольПолучен - булево - признак получения пароля пользователя.
//
Процедура ПолучитьПарольКСертификатуАсинхронно(СертификатЭП, ПараметрыСертификата, ВидОперации,
	ОбъектыДляОбработки = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	// Установка признака возможности сохранения пароля.
	ЗапросПароляДляСертификата = ВидОперации = "Сохранение пароля в сертификате";
	
	Если ПараметрыСертификата.Свойство("ЗапомнитьПарольКСертификату")
		И ПараметрыСертификата.ЗапомнитьПарольКСертификату
		И Не ЗапросПароляДляСертификата Тогда
		
		Если ОписаниеОповещения <> Неопределено Тогда
			Результат = Новый Структура;
			Результат.Вставить("ПарольПолучен", Истина);
			Результат.Вставить("СтруктураВозврата", Неопределено);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		КонецЕсли;
	Иначе
		
		Если ОбъектыДляОбработки = Неопределено Тогда
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",                ВидОперации);
			ПараметрыФормы.Вставить("ЗапросПароляДляСертификата", ЗапросПароляДляСертификата);
			ПараметрыФормы.Вставить("СертификатЭП",               СертификатЭП);
			
			ПараметрыОбработчика = Новый Структура;
			Если ОписаниеОповещения <> Неопределено Тогда
				ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения(
				"ПолучитьПарольКСертификатуЗавершение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ОткрытьФорму(
				"Справочник.СертификатыЭП.Форма.ЗапросПароляДляХранения",
				ПараметрыФормы,,,,,
				Обработчик,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",                ВидОперации);
			ПараметрыФормы.Вставить("СертификатЭП",               СертификатЭП);
			ПараметрыФормы.Вставить("ОбъектыДляОбработки",        ОбъектыДляОбработки);
			
			ПараметрыОбработчика = Новый Структура;
			Если ОписаниеОповещения <> Неопределено Тогда
				ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			КонецЕсли;
			
			Обработчик = Новый ОписаниеОповещения(
				"ПолучитьПарольКСертификатуЗавершение",
				ЭтотОбъект,
				ПараметрыОбработчика);
			
			ОткрытьФорму(
				"ОбщаяФорма.ЗапросПароляНаЭПШифрование",
				ПараметрыФормы,,,,,
				Обработчик,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПарольКСертификатуЗавершение(СтруктураВозврата, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
		Если ПараметрыВыполнения.ОписаниеОповещения <> Неопределено Тогда
			Результат = Новый Структура;
			Результат.Вставить("ПарольПолучен", Ложь);
			Результат.Вставить("СтруктураВозврата", Неопределено);
			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОписаниеОповещения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("ПарольПолучен", Истина);
		Результат.Вставить("СтруктураВозврата", СтруктураВозврата);
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, НовыйЭД = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ДопПараметры = Новый Структура;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
	ДопПараметры.Свойство("НовыйЭД", НовыйЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент ИЗ ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Только для внутреннего использования
Функция ВыбратьПоместитьФайлЭДВХранилище(АдресВХранилище, Файл, УникальныйИдентификатор) Экспорт
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	ФлагИспользованияЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписи");
	Если НЕ ФлагИспользованияЭП Тогда
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	ПроверитьСрокДействияСертификата(СертификатПодписи);
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДОпределеннымСертификатом(
																ДобавленныеФайлы,
																СертификатПодписи,
																ПараметрыСертификата,
																МассивНеПодписанныхЭД);
	КонецЕсли;
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь, ПараметрыСертификата.НастройкиКриптографии);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка сертификата на корректность'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ДобавленныеФайлы Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			Если ЭлектронныеДокументыКлиентПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
					НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ФайлЭДТекущаяВерсия = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьТекущуюВерсиюПодчиненногоФайла(ТекДокумент);	
					ДвоичныеДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
					ДанныеПодписи = ЭлектроннаяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
						ФайлЭДТекущаяВерсия, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
					ОпределитьСтатусыПодписей(ТекДокумент);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Ошибка подписи. Необходимо провести тест сертификата криптографии для: %1.
					|%2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭП'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
					МассивНеПодписанныхЭД.Добавить(ТекДокумент);
				КонецПопытки;
			Иначе
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МенеджерКриптографии = Неопределено;
		Если Не ВыполнятьАвторизациюНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь, СтруктураСертификата.НастройкиКриптографии);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Расшифрован = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(
																								СтруктураСертификата);
		КонецЕсли;
		
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный  = Неопределено;
		СертификатПодписи    = Неопределено;
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный)
			И СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи) Тогда
			
			ПроверитьСрокДействияСертификата(СертификатПодписи);
			Если ПолучитьПарольКСертификату(СертификатПодписи, СтруктураСертификата,
					НСтр("ru = 'Авторизация на сервере Такском'")) Тогда
				Если МенеджерКриптографии <> Неопределено Тогда
					Попытка
						СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
						Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
						Если ЗначениеЗаполнено(Маркер) Тогда
							Расшифрован = Истина;
							СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка пакетов

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров
//
Функция ПодготовитьИОтправитьПЭД(ДобавленныеФайлы,
								 ПризнакПодписи,
								 СоотвСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								ПризнакПодписи,
																								СоотвСоглашенийИСтруктурСертификатов);

	Если СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами();
			Возврат СтруктураРезультата;
		КонецЕсли;

		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;
				
		// По концепции БЭД электронный документ в пакете один.
		СоответствиеДанныхПакетов = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДанныхПакетов(
												СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте);
		Для Каждого ЭлементПакет Из СоответствиеДанныхПакетов Цикл
			Для Каждого ДанныеЭД ИЗ ЭлементПакет.Значение Цикл
	
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат СтруктураРезультата;
				КонецПопытки;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ЗашифрованныеДвоичныеДанные = МенеджерКриптографии.Зашифровать(НеЗашифрованныеДанные, МассивСертификатов);
				ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДвоичныеДанные);
			КонецЦикла;
		КонецЦикла;
		КолОтправленных = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанныхПакетов,
			СоотвСоглашенийИСтруктурСертификатов,
			КолОтправленных);
		СтруктураРезультата.КолОтправленных = СтруктураРезультата.КолОтправленных + КолОтправленных;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;

КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД, СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.СообщенияЭДО
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	
	РезультатПроверки = Новый Массив;
	
	Для Каждого СтрокаЭП Из СтруктураСодержимогоЭД.Подписи Цикл
		
		СтруктураЗаписи = Новый Структура;
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
			МенеджерКриптографии.ПроверитьПодпись(СтруктураСодержимогоЭД.ДанныеЭД, СтрокаЭП.Подпись);
			СтруктураЗаписи.Вставить("Результат", Истина);
			РезультатПроверки.Добавить(СтруктураЗаписи);
		Исключение
			СтруктураЗаписи.Вставить("Результат", Ложь);
			РезультатПроверки.Добавить(СтруктураЗаписи);
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка электронной подписи'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.СообщенияЭДО, ссылка на элемент справочника СообщенияЭДО,
//       если нужно обработать только один ЭД
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД = Неопределено) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Подписать")
		ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Отправить") Тогда
		Попытка
			МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
			ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", Истина);
		КонецПопытки;
	КонецЕсли;
	
	СтруктураСоответствий = Новый Структура;
	
	Если МассивСсылокНаОбъект.Количество() > 0
		И ТипЗнч(МассивСсылокНаОбъект[0]) = Тип("СправочникСсылка.СообщенияЭДО") Тогда
		СтруктураДействий = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьСообщенияЭДО(МассивСсылокНаОбъект,
																									  МассивСтруктурСертификатов,
																									  Действие,
																									  ДопПараметры,
																									  СтруктураСоответствий);
		Если СтруктураДействий = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
	Иначе
		СтруктураДействий = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																							МассивСтруктурСертификатов,
																							Действие,
																							ДопПараметры,
																							ЭД,
																							СтруктураСоответствий);
	КонецЕсли;
	
	Если СтруктураДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьАвторизациюНаСервере = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	
	Если ТипЗнч(СтруктураДействий) = Тип("Структура") Тогда
		СтруктураДействий.Свойство("ВыполнятьАвторизациюНаСервере", ВыполнятьАвторизациюНаСервере);
		СтруктураДействий.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		СтруктураДействий.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ СтруктураДействий.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ СтруктураДействий.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		// Подписание ЭД:
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СоотвСертификатовИИхСтруктур = Неопределено;
		СоотвСертификатовИМассивовЭДКПодписи = Неопределено;
		Если СтруктураСоответствий.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И СтруктураДействий.Свойство("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи) Тогда
			
			МассивСертификатовКУдалению = Новый Массив;
			Для Каждого ТекЭл Из СоотвСертификатовИМассивовЭДКПодписи Цикл
				
				СертификатПодписи = ТекЭл.Ключ;
				СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(СертификатПодписи);
				
				ПроверитьСрокДействияСертификата(СертификатПодписи);
				
				ПарольПользователя = Неопределено;
				Если Не ПолучитьПарольКСертификату(СертификатПодписи, СтруктураСертификата,
					НСтр("ru = 'Подписание электронных документов'"), ТекЭл.Значение) Тогда
					Для Каждого НеПодписанныйЭД Из ТекЭл.Значение Цикл
						МассивЭДКУдалениюИзОтправки.Добавить(НеПодписанныйЭД);
					КонецЦикла;
					МассивСертификатовКУдалению.Добавить(СертификатПодписи);
					Продолжить;
				КонецЕсли;
				МассивЭД = ТекЭл.Значение;
				ДанныеСпецОбработки = Новый Соответствие;
				// Некоторые банки используют собственные средства криптографии.
				ЭлектронныеДокументыСлужебныйВызовСервера.ОтделитьЭДДляСпециальнойОбработки(МассивЭД, ДанныеСпецОбработки);
				КолПодписанныхДокументовБанка = 0;
				Для Каждого ЭлементСоответствия ИЗ ДанныеСпецОбработки Цикл
					ТекущееКоличество = 0;
					Если ЭлементСоответствия.Ключ = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
						МассивЭДБанка = ЭлементСоответствия.Значение;
						Если МассивЭДБанка.Количество() > 0 Тогда
							#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
								ПодписатьЭДСбербанкаОпределеннымСертификатом(
												МассивЭДБанка,
												СертификатПодписи,
												ТекущееКоличество);
							#Иначе
								ТекстСообщения = Нстр("ru = 'Подписать документы Сбербанка возможно только в режиме толстого клиента'");
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
					КолПодписанныхДокументовБанка = КолПодписанныхДокументовБанка + ТекущееКоличество;
				КонецЦикла;
				КолПодписанных = 0;
				Если НЕ ВыполнятьКриптооперацииНаСервере И МассивЭД.Количество() > 0 Тогда
					КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД,
						СертификатПодписи, СтруктураСертификата, МассивЭДКУдалениюИзОтправки);
				КонецЕсли;
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных + КолПодписанныхДокументовБанка;
			КонецЦикла;
			Для Каждого Элемент Из МассивСертификатовКУдалению Цикл
				СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
			КонецЦикла;
			Если ВыполнятьКриптооперацииНаСервере И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0 Тогда
				РезультатПодписания = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
					СоотвСертификатовИИхСтруктур, МассивЭДКУдалениюИзОтправки);
			КонецЕсли;
		КонецЕсли;
		
		// Отправка ЭД:
		
		СоотвСоглашенийИСертификатовАвторизации = Неопределено;
		СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
		СтруктураКОтправке = Неопределено;
		Если СтруктураДействий.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
			
			МассивКОтправке = Неопределено;
			Если СтруктураКОтправке.Свойство("БезПодписи", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив")
					И МассивКОтправке.Количество() > 0 Тогда
				СтРезультат = ПодготовитьИОтправитьПЭД(МассивКОтправке, Ложь);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультат.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультат.КолПодготовленных;
			КонецЕсли;
			
			Если НЕ (СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
				И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
			КонецЕсли;
			Если НЕ (СтруктураКОтправке.Свойство("СПодписью", МассивКОтправке) И ТипЗнч(МассивКОтправке) = Тип("Массив")) Тогда
				МассивКОтправке = Новый Массив;
			ИначеЕсли МассивЭДКУдалениюИзОтправки.Количество() > 0 Тогда
				МассивКУдалению = Новый Массив;
				Для Каждого ОтправляемыйЭД Из МассивКОтправке Цикл
					Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) <> Неопределено Тогда
						МассивКУдалению.Добавить(ОтправляемыйЭД);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемыйЭД Из МассивКУдалению Цикл
					МассивКОтправке.Удалить(МассивКОтправке.Найти(УдаляемыйЭД));
				КонецЦикла;
			КонецЕсли;
			
			СоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
			Если НЕ (СтруктураСоответствий.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
				И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
			КонецЕсли;
			
			Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				СоглашениеЭД = ТекЭл.Ключ;
				МассивЭД = Новый Массив;
				Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
					Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
						МассивЭД.Добавить(ОтправляемыйЭД);
					КонецЕсли;
				КонецЦикла;
				Если МассивЭД.Количество() > 0 Тогда
					СертификатАвторизации = СоотвСоглашенийИСертификатовАвторизации.Получить(СоглашениеЭД);
					Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(СертификатАвторизации) Тогда
						// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
						// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату)
						СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(СертификатАвторизации);
						
						ПроверитьСрокДействияСертификата(СертификатАвторизации);
						Если ПолучитьПарольКСертификату(СертификатАвторизации, СтруктураСертификата,
								НСтр("ru = 'Авторизация на сервере Такском'")) Тогда
							
							Если РасшифроватьМаркерИзСтруктурыСертификата(СтруктураСертификата, ВыполнятьАвторизациюНаСервере) Тогда
								СоотвСоглашенийИСтруктурСертификатов.Вставить(СоглашениеЭД, СтруктураСертификата);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Для Каждого Элемент Из МассивЭД Цикл
						МассивКОтправке.Добавить(Элемент);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если МассивКОтправке.Количество() > 0 Тогда
				СтРезультата = ПодготовитьИОтправитьПЭД(МассивКОтправке, Истина, СоотвСоглашенийИСтруктурСертификатов);
				ИтогКолОтправленных = ИтогКолОтправленных + СтРезультата.КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + СтРезультата.КолПодготовленных;
			КонецЕсли;
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД");
		
		Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Показать") Тогда
			МассивОбработки = "";
			Если СтруктураДействий.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
				Для Каждого ТекЭл Из МассивОбработки Цикл
					ОткрытьЭДДляПросмотра(ТекЭл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	ВывестиИнформациюОбОбработанныхЭД(
			ИтогКолНовыхЭД,
			ИтогКолУтвержденныхЭД,
			ИтогКолПодписанных,
			ИтогКолПодготовленных,
			ИтогКолОтправленных);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	СоотвСоглашенийИСтруктурСертификатов = СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	ТребуетсяПовторитьПолучение = Ложь;
	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
																	СоотвСоглашенийИСтруктурСертификатов,
																	ТребуетсяПовторитьПолучение);
	//если маркер протух:
	Если ТребуетсяПовторитьПолучение Тогда
		НовСоотвСоглашенийИСтруктурСертификатов = Новый Соответствие;
		Для Каждого Элемент ИЗ СоотвСоглашенийИСтруктурСертификатов Цикл
			
			Элемент.Значение.Удалить("МаркерРасшифрованный");
			Элемент.Значение.Вставить("ЗапомнитьПарольКСертификату", Истина);
			Если РасшифроватьМаркерИзСтруктурыСертификата(Элемент.Значение, Ложь) Тогда
				НовСоотвСоглашенийИСтруктурСертификатов.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		ДопСтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
																			НовСоотвСоглашенийИСтруктурСертификатов,
																			ТребуетсяПовторитьПолучение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.НовыеДокументы.МассивВозврата,
				ДопСтруктураВозврата.НовыеДокументы.МассивВозврата);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СтруктураВозврата.НовыеДокументы.ПараметрыРаспаковки,
				ДопСтруктураВозврата.НовыеДокументы.ПараметрыРаспаковки);
	КонецЕсли;
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		СтруктураШифрования = Неопределено;
		СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
		Если СтруктураШифрования <> Неопределено Тогда
			Если ПолучитьПарольКСертификату(СтруктураШифрования.Сертификат, СтруктураШифрования.ПараметрыСертификата,
				НСтр("ru = 'Расшифровать пакет электронных документов'"), СтруктураРаспаковки.ПакетЭД) Тогда
				
				СтруктураШифрования.Вставить("ПарольПользователя", СтруктураШифрования.ПараметрыСертификата.ПарольПользователя);
			КонецЕсли;
		КонецЕсли;
		ДанныеРаспаковки = Неопределено;
		СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки);
		
		РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования, ДанныеРаспаковки);
	КонецЦикла;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен электронными документами с банками

//только для внутреннего использования
Процедура РазобратьЭДВыпискаБанка(ЭД) Экспорт
	
	Перем СсылкаНаХранилище, Организация, СоглашениеЭД, МассивСчетов;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭД,
																	СсылкаНаХранилище,
																	МассивСчетов,
																	Организация,
																	СоглашениеЭД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.РазобратьФайлВыписки(ЭД,
																	СсылкаНаХранилище,
																	Организация,
																	МассивСчетов,
																	СоглашениеЭД);
	
	
КонецПроцедуры

// Проверяет наличие связи с банком и выводит сообщение о результате
//
//
Процедура ПроверитьНаличиеСвязиСБанком(СоглашениеЭД, ИдентификаторНазначения) Экспорт
	
	ПрограммаБанка = ЭлектронныеДокументыСлужебныйВызовСервера.ПрограммаБанка(СоглашениеЭД);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда
			ТестСоглашенияСбербанк(СоглашениеЭД);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);

	ПараметрыРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьПараметрыРаспаковки(МассивПЭД);
	Если ПараметрыРаспаковки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоРаспакованоЭД = 0;
	Для Каждого СтруктураРаспаковки Из ПараметрыРаспаковки Цикл
		
		СтруктураШифрования = Неопределено;
		СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования);
		Если СтруктураШифрования <> Неопределено Тогда
			Если ПолучитьПарольКСертификату(СтруктураШифрования.Сертификат, СтруктураШифрования.ПараметрыСертификата,
				НСтр("ru = 'Расшифровать пакет электронных документов'"), СтруктураРаспаковки.ПакетЭД) Тогда
				
				СтруктураШифрования.Вставить("ПарольПользователя", СтруктураШифрования.ПараметрыСертификата.ПарольПользователя);
			КонецЕсли;
		КонецЕсли;
		
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, СтруктураШифрования);
		Если Не КоличествоРаспакованныхДокументов = Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

Процедура ТестСоглашенияСбербанк(СоглашениеЭД)
	
КонецПроцедуры

// Осуществляет отправку платежных поручений в банк
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы к отправке
//  <КолОтправленных>  - <число> - количество отправленных платежных документов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьПлатежныеПорученияСбербанк(МассивЭД, КолОтправленных, СоглашениеЭД) Экспорт


КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьСостоянияПлатежныхПоручений(СоглашениеЭД) Экспорт


КонецПроцедуры

// Отправляет в банк запрос на ночные выписки
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//
Процедура ОтправитьЗапросНаНочныеВыписки(СоглашениеЭД) Экспорт
	

КонецПроцедуры

// Получает статусы и идентификаторы отправленных платежных документов
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисление.ВидыЭД> - вид электронного документа
//
Процедура ПолучитьРезультатыОбработкиЗапросов(СоглашениеЭД, ВидЭД) Экспорт
		
	
КонецПроцедуры

// Отправляет в банк запрос на получение готовых  выписок банка
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//
Процедура ОтправитьЗапросНаПолучениеГотовыхВыписок(СоглашениеЭД) Экспорт
	
	
КонецПроцедуры

// только для внутреннего использования
Процедура ЗапроситьВыпискуСбербанк(СоглашениеЭД, Организация, ДатаНачала, ДатаОкончания, Ночная = Ложь, ЭД = Неопределено) Экспорт
	
		
КонецПроцедуры

#КонецЕсли

#Если НЕ ВебКлиент Тогда

//Получает данные сертификата с токена банка
//
// Возвращаемое значение:
//  Структура - содержит двоичные данные и идентификатор сертификата банка
//
Функция ПолучитьДанныеСертификатаНаТокене() Экспорт
	
	АвторизацияВыполнена = Ложь;
	АвторизоватьсяНаТокене(Неопределено, АвторизацияВыполнена);
	Если НЕ АвторизацияВыполнена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы();
	Если НомерБизнесСистемы = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторСертификата = ПолучитьИдентификаторСертификата();
	Если Не ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификата(ИдентификаторСертификата);
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	СтруктураВозврата.Вставить("ИдентификаторСертификата",  ИдентификаторСертификата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет подпись для документа сбербанка с использованием токена
//
// Параметры
//  <ДобавленныеФайлы>  - <Массив> - содержит ссылки на электронные документы
//  <СертификатПодписи>  - <СправочникСсылка.СертификатыЭП> - ссылка на сертификат подписи
//  <КоличествоПодписанныхЭД>  - <Число> - количество удачно подписанных ЭД
//
Процедура ПодписатьЭДСбербанкаОпределеннымСертификатом(
								ДобавленныеФайлы,
								СертификатПодписи,
								КоличествоПодписанныхЭД) Экспорт
	
	
КонецПроцедуры

// Устанавливает зашифрованный канал с банком через токен
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <КаналСоздан>  - <Булево> - признак, что канал создан
//
Процедура УстановитьВиртуальныйКанал(СоглашениеЭД, КаналСоздан) Экспорт
	
	КаналСоздан = Ложь;
	
КонецПроцедуры

// Определяет валидность установленных подписей и сохраняет результат в ЭД
//
// Параметры: 
// <СправочникСсылка.СообщенияЭДО> - ссылка на электронный документ
//
Процедура ОпределитьСтатусыПодписейСберБанка(ЭД) Экспорт
	

КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  СтруктураШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//  ДанныеРаспаковки - Структура, содержит распакованные данные пакета
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, СтруктураШифрования, ДанныеРаспаковки = Неопределено)
	
	Перем ПапкаДляРаспаковки;
	МассивВозврата = Новый Массив;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД);
		КонецЕсли;
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьКриптосредствоНаКлиенте = Ложь;
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
				ЕстьКриптосредствоНаКлиенте = Истина;
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		ДанныеРаспаковки.Свойство("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			СтруктураВозврата       = Новый Структура;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
																									ПакетЭД,
																									ДанныеРаспаковки,
																									ПапкаДляРаспаковки,
																									ЕстьКриптосредствоНаКлиенте,
																									СоответствиеЭДИПодписей,
																									СтруктураВозврата);
			МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
			МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
			МассивВладельцев                    = СтруктураВозврата.МассивВладельцев;
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
				И НЕ МенеджерКриптографии = Неопределено Тогда
				
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;

			Если КоличествоОбработанныхДокументов > 0 Тогда
				Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивВладельцев);
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
		КонецЕсли;
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			МассивЭДИДанныхПодписей = Новый Массив;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПакетЭД,
															ПапкаДляРаспаковки,
															МассивЭДИДанныхПодписей);
			Если МассивЭДИДанныхПодписей.Количество() > 0 Тогда
				Для Каждого Элемент ИЗ МассивЭДИДанныхПодписей Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Элемент.ДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.ЭлектронныйДокумент,
															Элемент.ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(
															Сертификат.Субъект),
															Сертификат.Выгрузить());
						ОпределитьСтатусыПодписей(Элемент.ЭлектронныйДокумент);
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
				
				// Обработать пришедшие извещения от оператора
				// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
					СтруктураДанных.ИмяФайла, ПапкаДляРаспаковки, СтруктураДанных.ДвоичныеДанные,
					ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
				
				Если МассивСтруктурПодписей <> Неопределено Тогда
					ФлагОшибки = Ложь;
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
							Попытка
								ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
							Исключение
								ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
								ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
								ФлагОшибки = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					
					Если ФлагОшибки Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
																								 МассивСтруктурПодписей,
																								 СтруктураДанных,
																								 ДанныеРаспаковки.СоответствиеФайлПараметры,
																								 ПапкаДляРаспаковки);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			Если СтруктураШифрования <> Неопределено Тогда
				Если СтруктураШифрования.Свойство("ПарольПользователя") Тогда
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
																								СтруктураДанных.ДвоичныеДанные,
																								СтруктураШифрования.ПарольПользователя);
						Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
							Возврат Неопределено;
						КонецЕсли;
					Иначе
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольПользователя;
						// Метод расшифровки генерирует исключение в случае ошибки.
						Попытка
							РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(СтруктураДанных.ДвоичныеДанные);
						Исключение
							ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
																		НСтр("ru = 'расшифровка пакета ЭД'"),
																		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																		ТекстСообщения);
							Возврат Неопределено;
						КонецПопытки;
					КонецЕсли;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					ШаблонСообщения = НСтр("ru = '%1. Не указан пароль к сертификату расшифровки: %2.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103"), СтруктураШифрования.Сертификат);
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'расшифровка пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																					СтруктураДанных.ИмяФайла,
																					ПапкаДляРаспаковки,
																					СтруктураДанных.ДвоичныеДанные,
																					ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			СоответствиеЭДИПодписей = Новый Соответствие;
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД,
																					МассивСтруктурПодписей,
																					СтруктураДанных,
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ПапкаДляРаспаковки,
																					ЕстьОшибкаРаспаковки,
																					ЕстьКриптосредствоНаКлиенте,
																					СоответствиеЭДИПодписей);
																					
			Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
				И Не МенеджерКриптографии = Неопределено
				И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ОбщегоНазначенияКлиент.ДатаСеанса(),
															"",
															,
															ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;
			// создаем входящий документ и копируем подписи
			ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьВоВходящиеДокументыФайлыЭДИЭП(МассивДобавленныхФайлов);
			Если Не ЕстьОшибкаРаспаковки Тогда
				Если ЗначениеЗаполнено(ТипДанных)
					И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
					И ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСпособОбменаЭДИзПакетаЭД(
						ПакетЭД) = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
					
					ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
					ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивДобавленныхФайлов, ВидЭД);
				КонецЕсли;
				
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
		ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьКаталог(ПапкаДляРаспаковки);
		
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ТестСертификатаНаКлиенте(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ, НастройкиКриптографии = Неопределено)
									
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Возврат;
	КонецЕсли;
		
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ, НастройкиКриптографии);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
                                 |%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на компьютере.'");
	
	Сертификат = ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на компьютере.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
                                 |%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на компьютере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭП на компьютере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
                                 |%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

#Если НЕ ВебКлиент Тогда

Процедура ПодключитьМенеджерДляРаботыСБанком()
	
	
КонецПроцедуры

Функция АдресWSDLСхемыСбербанк(Тестовый = Ложь)
	
	
КонецФункции

Процедура АвторизоватьсяНаТокене(СоглашениеЭД, АвторизацияВыполнена, ПовторнаяАвторизация = Ложь)
	
	АвторизацияВыполнена = Ложь;
	
КонецПроцедуры

Функция ПолучитьНомерБизнесСистемы()
	
	НомерБизнесСистемы = -1;
	Возврат НомерБизнесСистемы;
	
КонецФункции

Процедура ОчиститьДанныеАвторизации()
	
	
КонецПроцедуры

Процедура ЗавершитьСессиюНаТокене(СессияЗавершена)
	
	СессияЗавершена = Истина;
	
КонецПроцедуры

Функция ПолучитьИдентификаторСертификата()

	Возврат "";
	
КонецФункции

Функция ДвоичныеДанныеСертификата(ИдентификаторСертификата)
	
	Возврат Неопределено;

КонецФункции

#КонецЕсли

#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда

Процедура ИнициализироватьWSОпределение()
	
	
КонецПроцедуры

#КонецЕсли

// Выводит оповещение о смене ответственного
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры
