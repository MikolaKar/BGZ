// Возвращает доступное поле по полю компоновки
&НаСервере
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
&НаСервере
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
  
	СтандартнаяОбработка = Ложь;
    
    // Получить ЭтапДоговора для расшифровки
    РасшифровываемоеЗначение = ПолучитьРасшифровкуНаСервере(Расшифровка, ДанныеРасшифровки); 
    
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));

    ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
    ПараметрВыполненногоДействия = Неопределено;
    ДоступныеДействия = Новый Массив;
    ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
    ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
    
    ДополнительныеПунктыМеню = Новый СписокЗначений;
    ОбщаяСтрока = "Расшифровать задолженность " + """" + Строка(ТипЗнч(РасшифровываемоеЗначение)) + " = " + РасшифровываемоеЗначение + """";
    ДополнительныеПунктыМеню.Добавить( 1, ОбщаяСтрока);

    //Выдаем меню расшифровки, считываем реакцию пользователя 
    ОбработкаРасшифровки.ВыбратьДействие(Расшифровка, ВыполненноеДействие, ПараметрВыполненногоДействия, ДоступныеДействия, ДополнительныеПунктыМеню,,Результат);
    
    Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
    ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
        //Имитация стандартного действия
        ОткрытьЗначение(ПараметрВыполненногоДействия);
        
    ИначеЕсли ТипЗнч(ВыполненноеДействие) = Тип("Число") Тогда // Тут требуется наша расшифровка
        
        ФормаР = ПолучитьФорму("Отчет.мДолжникиРасшифровка.Форма.ФормаОтчета", , , РасшифровываемоеЗначение); //Форма Расшифровки.
        
        КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
        КомпоновщикНастроекР = ФормаР.Отчет.КомпоновщикНастроек;
        
        //Заполняем настройки отчета расшифровки
        //УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщикНастроек, КомпоновщикНастроекР, "ЭтапДоговора");
        //УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщикНастроек, КомпоновщикНастроекР, "Контрагент");
        //УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщикНастроекР, Строка(ТипЗнч(РасшифровываемоеЗначение)), РасшифровываемоеЗначение, ВидСравненияКомпоновкиДанных.Равно);
        //УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщикНастроекР, "ЭтапДоговора", РасшифровываемоеЗначение, ВидСравненияКомпоновкиДанных.Равно);

        Период = ПолучитьЗначениеПераметраКомпоновщикаНастроек(ЭтаФорма.Отчет.КомпоновщикНастроек, "Период");
        УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщикНастроекР, "Период", Период);
        УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщикНастроекР, "ЭтапДоговора", РасшифровываемоеЗначение);

        //Формируем и выводим отчет-расшифровку
        СтруктураВозврата = ОбработатьРасшифровкуНаСервере(ФормаР.Отчет, "ОтчетОбъект.мДолжникиРасшифровка", ФормаР.Результат, ФормаР.ДанныеРасшифровки, ФормаР.УникальныйИдентификатор);
        ФормаР.Результат = СтруктураВозврата.Результат;
        ФормаР.ДанныеРасшифровки = СтруктураВозврата.ДанныеРасшифровки;
        ФормаР.Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;  //Избавление от надписи. Отчет не сформирован
        ФормаР.Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
        ФормаР.Открыть();

    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасшифровки(Расшифровка, СтруктураДанных, ОбъектРасшифровки=Неопределено)

    Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
    ОбъектРасшифровки = Данные.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
    Если Данные <> Неопределено Тогда
        Для каждого ЭлементДанных Из СтруктураДанных Цикл
            Родитель = Данные.Элементы[Расшифровка];
            Пока Истина Цикл
                МассивРодителей = Родитель.ПолучитьРодителей();
                Если МассивРодителей.Количество() = 0 Тогда
                    Прервать;
                КонецЕсли;
                Родитель = Родитель.ПолучитьРодителей()[0];
                Если ТипЗнч(Родитель) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
                    Если ЭлементДанных.Значение = Неопределено Тогда
                        Поле = Родитель.ПолучитьПоля().Найти(ЭлементДанных.Ключ);
                    Иначе
                        Поле = Родитель.ПолучитьПоля().Найти(ЭлементДанных.Значение);
                    КонецЕсли; 
                    Если Поле <> Неопределено Тогда
                        СтруктураДанных.Вставить(ЭлементДанных.Ключ, Поле.Значение);
                        Прервать;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        
        КонецЦикла; 
    КонецЕсли; 
    
    Возврат СтруктураДанных;
    
КонецФункции 

&НаСервере
Функция ПолучитьРасшифровкуНаСервере(Расшифровка, Адрес)
    
    _ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Адрес);
    МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, _ДанныеРасшифровки, , истина);
    
    Для каждого Поле Из МассивПолей Цикл
    
    	Если Поле.Поле = "ЭтапДоговора" Тогда
            Возврат Поле.Значение;        
        КонецЕсли; 
    КонецЦикла; 
    
    Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщикНастроекР, ИмяОтбора, Значение, ВидСравнения, Использование = Истина)
    ПолеЭлементаОтбора = КомпоновщикНастроекР.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяОтбора).Поле;

    ИДЭлмОтбора = "";
    Для Каждого Элемент Из КомпоновщикНастроекР.Настройки.Отбор.Элементы Цикл
        Если Элемент.ЛевоеЗначение = ПолеЭлементаОтбора Тогда ИДЭлмОтбора = Элемент.ИдентификаторПользовательскойНастройки; Прервать; КонецЕсли;
    КонецЦикла;

    КоллекцияР = КомпоновщикНастроекР.ПользовательскиеНастройки.Элементы; //Пользовательские настройки

    Если ИДЭлмОтбора = "" Тогда //Не нашли среди стандартных настроек
        Для Каждого Элемент Из КоллекцияР Цикл //Ищем отбор, и добавляем в него.
            //Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
            Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
                ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяОтбора);
                ОтборНайден = Ложь;
                Для Каждого ЭлементОтбора Из Элемент.Элементы Цикл
                    Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора Тогда ОтборНайден = Истина; Прервать; КонецЕсли;
                КонецЦикла;
                Если Не ОтборНайден Тогда
                    ЭлементОтбора = Элемент.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
                    Элемент.Элементы[0].ЛевоеЗначение = ПолеОтбора;
                    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбора);
                КонецЕсли;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    Иначе
        ЭлементОтбора = КоллекцияР.Найти(ИДЭлмОтбора);
    КонецЕсли;

    Если ЭлементОтбора <> Неопределено Тогда
        ЭлементОтбора.ПравоеЗначение = Значение;
        ЭлементОтбора.Использование = Использование;
        ЭлементОтбора.ВидСравнения = ВидСравнения;
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеОтбораКомпоновщикаНастроекПоОбразцу(КомпоновщикНастроек, КомпоновщикНастроекР, ИмяОтбора)

    Коллекция = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы; //Коллекция элементов пользовательчких настроек в текущем отчете
    Отбор = КомпоновщикНастроек.Настройки.Отбор;
    ПолеЭлементаОтбора = Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяОтбора).Поле;
    ИДЭлмОтбора = "";
    Для Каждого Элемент Из Отбор.Элементы Цикл
        Если Элемент.ЛевоеЗначение = ПолеЭлементаОтбора Тогда ИДЭлмОтбора = Элемент.ИдентификаторПользовательскойНастройки; Прервать; КонецЕсли;
    КонецЦикла;
    ЭлементОтбора = Коллекция.Найти(ИДЭлмОтбора);

    УстановитьЗначениеОтбораКомпоновщикаНастроек(КомпоновщикНастроекР, ИмяОтбора, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Использование);
    
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщикНастроек, ИмяПараметра)
    ИДНастройки = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра).ИдентификаторПользовательскойНастройки;
    Коллекция = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
    Возврат Коллекция.Найти(ИДНастройки).Значение;
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеПераметраКомпоновщикаНастроек(КомпоновщикНастроекР, ИмяПараметра, Значение)
    
    ИДНастройкиПараметраР = КомпоновщикНастроекР.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра).ИдентификаторПользовательскойНастройки;
    
    КоллекцияР = КомпоновщикНастроекР.ПользовательскиеНастройки.Элементы; //Пользовательские настройки
    
    КоллекцияР.Найти(ИДНастройкиПараметраР).Значение = Значение;
    КоллекцияР.Найти(ИДНастройкиПараметраР).Использование = Истина;
КонецПроцедуры

&НаСервере
Функция ОбработатьРасшифровкуНаСервере(Знач ОтчетХ, ИмяТипаОтчета ,Знач РезультатХ, Знач ДанныеРасшифровкиХ, Знач ИДФормы)
    
    ОтчетОбъект = ДанныеФормыВЗначение(ОтчетХ, Тип(ИмяТипаОтчета)); //Для компоновки результата
    РезультатХ.Очистить();
    ОтчетОбъект.СкомпоноватьРезультат(РезультатХ, ДанныеРасшифровкиХ);                                  //Собственно формирование отчета
    
    АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиХ, ИДФормы);                //Запоминаем расшифровку (с ИД формы)
    Возврат Новый Структура("Результат,ДанныеРасшифровки", РезультатХ, АдресДанныеРасшифровки);         //Возвращаем результат и Адрес расщифровки
КонецФункции

