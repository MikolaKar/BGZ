#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Ложь, Ложь, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Задолженность поставщикам по срокам долга на " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy; ДП=...");
	
КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПросроченнаяЗадолженность = ПолучитьПросроченнуюЗадолженность(ПараметрыОтчета, ПараметрыОтчета.Период);

	ВнешниеНаборыДанных = Новый Структура("ПросроченнаяЗадолженность", ПросроченнаяЗадолженность);
	
	Возврат ВнешниеНаборыДанных;
		                                
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
    //ВидыСубконтоКД = Новый СписокЗначений;
    //ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    //ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    //
    //БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыСубконтоКД", ВидыСубконтоКД);
    //
    //ИсключенныеСчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2);
    //БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсключенныеСчета", ИсключенныеСчета);
    //
    мОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
    //
    //Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") И ЗначениеЗаполнено(ПараметрыОтчета.Подразделение) Тогда
    //	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Подразделение", ПараметрыОтчета.Подразделение,,, Истина);
    //КонецЕсли;

	КоличествоИнтервалов = ПараметрыОтчета.Интервалы.Количество();
	
	УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	// Группировка
	мОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Дополнительные данные
	мОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);

	мОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ЗадолженностьПоставщикамПоСрокамДолга").Размещение.Вставить(Метаданные.Подсистемы.УчетНалогиОтчетность.Подсистемы.ОтчетыДляРуководителя.Подсистемы.РасчетыСПоставщиками, "");
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	КоличествоПолейПериодов = Схема.НаборыДанных.ОсновнойНабор.Поля.Количество() - 5;
	Для Индекс = 1 По КоличествоПолейПериодов Цикл
		ПолеДляУдаления = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти("ОстатокПериода" + Индекс);
		Если ПолеДляУдаления <> Неопределено Тогда
			Схема.НаборыДанных.ОсновнойНабор.Поля.Удалить(ПолеДляУдаления);
		КонецЕсли; 
	КонецЦикла;
	
	Схема.ПоляИтога.Очистить();
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ОстатокДолга";
	ПолеИтога.Выражение   = "Сумма(ОстатокДолга)";
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "ПросроченнаяЗадолженность";
	ПолеИтога.Выражение   = "Сумма(ПросроченнаяЗадолженность)";	
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	мОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОстатокДолга");
	мОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПросроченнаяЗадолженность");
	                                                                            
	ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПапкаСПолями.Заголовок = НСтр("ru = 'Общая задолженность по срокам долга'");
	Индекс = 1;
	ЗначениеПоследнего = 0;
	Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
		ИмяПоля = "ОстатокПериода" + Индекс;
		Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти(ИмяПоля);
		Если Поле = Неопределено Тогда
			Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		КонецЕсли;
		Поле.Поле        = ИмяПоля;
		Поле.ПутьКДанным = ИмяПоля;
		Поле.Заголовок   = Интервал.Представление;
		Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
		мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
		мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
		мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
		Поле.ОграничениеИспользования.Группировка = Ложь;
		Поле.ОграничениеИспользованияРеквизитов.Группировка = Ложь;
		
		ПолеИтога = Схема.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоля;
		ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
		
		мОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
		Индекс = Индекс + 1;
		ЗначениеПоследнего = Интервал.Значение;
	КонецЦикла;
	
	ИмяПоля = "ОстатокПериода" + Индекс;
	Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;	
	Поле.Заголовок   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Свыше %1 дней'"), ЗначениеПоследнего);
	Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0));
	мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=0");
	мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	мОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
	мОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПапкаСПолями, ИмяПоля);
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "Диаграмма" Тогда
			ЭлементСтруктуры.Выбор.Элементы.Очистить();
			Для Каждого ВыбранноеПоле Из ПапкаСПолями.Элементы Цикл
				мОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ЭлементСтруктуры.Выбор, ВыбранноеПоле.Поле);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек)

	Сутки = 60 * 60 * 24;
	
	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("ИмяИнтервала");
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	ДатаКон = ?(ПараметрыОтчета.Период = '00010101', ТекущаяДата(), ПараметрыОтчета.Период);
	ПараметрыОтчета.Интервалы.Сортировать("Значение Возр");
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.ИмяИнтервала    = Интервал.Представление;
		НоваяСтрока.НомерИнтервала  = Индекс;
		Если Первый Тогда  
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон);
			ПредыдущееЗначение = Интервал.Значение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон)  - (ПредыдущееЗначение + 1) * Сутки;
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		ИмяПараметра = "НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
		
		ИмяПараметра = "КонецИнтервала" + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для каждого СтрокаИнтервала из ТабИнтервалы Цикл
		мОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		мОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПросроченнуюЗадолженность(ПараметрыОтчета, КонДата)
		
    //ВидыСубконтоКД = Новый СписокЗначений;
    //ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
    //ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
    //
    //Запрос = Новый Запрос;
    //Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
    //Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
    //Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
    //Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПоставщикам.Получить());
    //Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(КонДата));
    //Запрос.УстановитьПараметр("ИсключенныеСчета", мОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));
    //
    //Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
    //
    //ТекстЗапросаПоОстаткам = "
    //|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    //|	СчетаКонтрагентов.Ссылка КАК Счет
    //|ПОМЕСТИТЬ СчетаКД
    //|ИЗ
    //|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
    //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    //|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
    //|		ИЗ
    //|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
    //|		ГДЕ
    //|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
    //|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
    //|ГДЕ
    //|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
    //|	И НЕ СчетаКонтрагентов.Ссылка.Забалансовый
    //|	И НЕ СчетаКонтрагентов.Ссылка В ИЕРАРХИИ (&ИсключенныеСчета)

    //|ИНДЕКСИРОВАТЬ ПО
    //|	Счет
    //|;
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ РАЗРЕШЕННЫЕ
    //|	ВложенныйЗапрос.Организация КАК Организация,
    //|	ВложенныйЗапрос.Контрагент КАК Контрагент,
    //|	ВложенныйЗапрос.Договор КАК Договор,
    //|	ЕСТЬNULL(ВложенныйЗапрос.Подразделение, Неопределено) КАК Подразделение,
    //|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
    //|	ВложенныйЗапрос.СуммаОстаток КАК ОстатокДолга
    //|ПОМЕСТИТЬ ОстаткиДолга
    //|ИЗ
    //|	(ВЫБРАТЬ
    //|		ВзаиморасчетыОстатки.Организация КАК Организация,
    //|		ВзаиморасчетыОстатки.Подразделение КАК Подразделение,
    //|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
    //|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
    //|		ВЫБОР
    //|			КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
    //|				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
    //|			ИНАЧЕ &СтандартныйСрокОплатыПокупателей
    //|		КОНЕЦ КАК СрокОплаты,
    //|		ВзаиморасчетыОстатки.Счет КАК Счет,
    //|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокКт КАК СуммаОстаток
    //|	ИЗ
    //|		РегистрБухгалтерии.Хозрасчетный.Остатки(
    //|				&ГраницаОстатков,
    //|				Счет В
    //|					(ВЫБРАТЬ
    //|						СчетаКД.Счет
    //|					ИЗ
    //|						СчетаКД КАК СчетаКД),
    //|				&ВидыСубконтоКД,
    //|				ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку))
    //|					И Организация = &Организация) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос
    //|
    //|ИНДЕКСИРОВАТЬ ПО
    //|	Контрагент,
    //|	Договор
    //|;
    //|
    //|////////////////////////////////////////////////////////////////////////////////
    //|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    //|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
    //|ИЗ
    //|	ОстаткиДолга КАК ОстаткиДолга
    //|
    //|УПОРЯДОЧИТЬ ПО
    //|	СрокОплаты";
    //
    //Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
    //	ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "И Организация = &Организация", "");
    //КонецЕсли;
    //Запрос.Текст = ТекстЗапросаПоОстаткам;
    //
    //МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
    //
    //Если МассивСроковОплаты.Количество() = 0 Тогда
    //	МассивСроковОплаты.Добавить(0);
    //КонецЕсли;
    //
    //ТекстОстатки = 
    //"ВЫБРАТЬ
    //|	ОстаткиДолга.Организация,
    //|	ЕСТЬNULL(ОстаткиДолга.Подразделение, Неопределено) КАК Подразделение,
    //|	ОстаткиДолга.Контрагент,
    //|	ОстаткиДолга.Договор,
    //|	ОстаткиДолга.СрокОплаты,
    //|	ОстаткиДолга.ОстатокДолга,
    //|	СУММА(ЕСТЬNULL(Обороты.УвеличениеДолга, 0)) КАК УвеличениеДолга
    //|ИЗ
    //|	ОстаткиДолга КАК ОстаткиДолга";
    //
    //ТекстОборотыПоСроку = 
    //"ВЫБРАТЬ
    //|	ВзаиморасчетыОбороты.Организация КАК Организация,
    //|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, Неопределено) КАК Подразделение,
    //|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
    //|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
    //|	ВЫБОР
    //|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
    //|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
    //|		ИНАЧЕ 0
    //|	КОНЕЦ - ВЫБОР
    //|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
    //|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
    //|		ИНАЧЕ 0
    //|	КОНЕЦ КАК УвеличениеДолга
    //|ПОМЕСТИТЬ Обороты1
    //|ИЗ
    //|	РегистрБухгалтерии.Хозрасчетный.Обороты(
    //|			&НачалоИнтервала1,
    //|			&КонецИнтервала,
    //|			,
    //|				Счет В
    //|					(ВЫБРАТЬ
    //|						СчетаКД.Счет
    //|					ИЗ
    //|						СчетаКД КАК СчетаКД),
    //|			&ВидыСубконтоКД,
    //|			(Субконто1, Субконто2) В
    //|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
    //|						ОстаткиДолга.Контрагент,
    //|						ОстаткиДолга.Договор
    //|					ИЗ
    //|						ОстаткиДолга КАК ОстаткиДолга
    //|					ГДЕ
    //|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
    //|				И Организация = &Организация,
    //|			,
    //|			) КАК ВзаиморасчетыОбороты
    //|
    //|ОБЪЕДИНИТЬ ВСЕ
    //|
    //|ВЫБРАТЬ
    //|	ВзаиморасчетыОбороты.Организация,
    //|	ЕСТЬNULL(ВзаиморасчетыОбороты.Подразделение, Неопределено),
    //|	ВзаиморасчетыОбороты.Субконто1,
    //|	ВзаиморасчетыОбороты.Субконто2,
    //|	-(ВЫБОР
    //|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
    //|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
    //|		ИНАЧЕ 0
    //|	КОНЕЦ - ВЫБОР
    //|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
    //|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
    //|		ИНАЧЕ 0
    //|	КОНЕЦ)
    //|ИЗ
    //|	РегистрБухгалтерии.Хозрасчетный.Обороты(
    //|			&НачалоИнтервала1,
    //|			&КонецИнтервала,
    //|			,
    //|				Счет В
    //|					(ВЫБРАТЬ
    //|						СчетаКД.Счет
    //|					ИЗ
    //|						СчетаКД КАК СчетаКД),
    //|			&ВидыСубконтоКД,
    //|			(Субконто1, Субконто2) В
    //|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
    //|						ОстаткиДолга.Контрагент,
    //|						ОстаткиДолга.Договор
    //|					ИЗ
    //|						ОстаткиДолга КАК ОстаткиДолга
    //|					ГДЕ
    //|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
    //|				И Организация = &Организация,
    //|			,
    //|			&ВидыСубконтоКД) КАК ВзаиморасчетыОбороты
    //|ГДЕ
    //|	ВзаиморасчетыОбороты.Субконто1 = ВзаиморасчетыОбороты.КорСубконто1
    //|	И ВзаиморасчетыОбороты.Субконто2 = ВзаиморасчетыОбороты.КорСубконто2";
    //
    //Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
    //	ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация = &Организация", "");
    //КонецЕсли;
    //
    //МаксКоличествоЧастей = 10;
    //КоличествоСроковОплаты = МассивСроковОплаты.Количество();
    //ОстатокОтДеления = КоличествоСроковОплаты % МаксКоличествоЧастей;
    //
    //КоличествоЧастей = (КоличествоСроковОплаты - ОстатокОтДеления) / МаксКоличествоЧастей + ?(ОстатокОтДеления > 0, 1, 0);
    //ТекстОборотыПоВсемСрокам = "";
    //ТекстВсеОбороты = "";
    //Для ИндексЧасти = 1 По КоличествоЧастей Цикл
    //	НачальныйИндекс = МаксКоличествоЧастей * (ИндексЧасти - 1) + 1;
    //	КонечныйИндекс  = Мин(КоличествоСроковОплаты, МаксКоличествоЧастей * ИндексЧасти);
    //	ТекстОбороты = "";
    //	
    //	Для ИндексЗапроса = НачальныйИндекс По КонечныйИндекс Цикл
    //		СрокОплаты = МассивСроковОплаты[ИндексЗапроса - 1];
    //		Запрос.УстановитьПараметр("НачалоИнтервала" + ИндексЗапроса, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
    //		Запрос.УстановитьПараметр("СрокОплаты" + ИндексЗапроса, СрокОплаты);
    //		
    //		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + ИндексЗапроса);
    //		ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + ИндексЗапроса);
    //		Если ИндексЗапроса = НачальныйИндекс Тогда
    //			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "ПОМЕСТИТЬ Обороты" + ИндексЧасти);
    //		Иначе
    //			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "");
    //		КонецЕсли;
    //		
    //		ТекстОбороты = ТекстОбороты
    //		+ ?(ПустаяСтрока(ТекстОбороты), "", "
    //		|
    //		|ОБЪЕДИНИТЬ ВСЕ
    //		|") 
    //		+ ТекстОборотыПоСрокуНом;
    //		
    //	КонецЦикла;
    //	
    //	ТекстВсеОбороты = ТекстВсеОбороты + ТекстОбороты + " 
    //	|
    //	|ИНДЕКСИРОВАТЬ ПО
    //	|	Организация,
    //	|	Подразделение,
    //	|	Контрагент,
    //	|	Договор
    //	|;
    //	|
    //	|////////////////////////////////////////////////////////////////////////////////
    //	|";
    //	
    //	
    //	ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
    //	+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
    //	|
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|") 
    //	+ "
    //	|ВЫБРАТЬ 
    //	|	Обороты" + ИндексЧасти + ".Организация,
    //	|	Обороты" + ИндексЧасти + ".Подразделение,
    //	|	Обороты" + ИндексЧасти + ".Контрагент,
    //	|	Обороты" + ИндексЧасти + ".Договор,
    //	|	Обороты" + ИндексЧасти + ".УвеличениеДолга
    //	|ИЗ
    //	|	Обороты" + ИндексЧасти + " КАК Обороты" + ИндексЧасти;
    //КонецЦикла;
    //
    //ТекстОстаткиИОбороты = ТекстОстатки + "
    //|ЛЕВОЕ СОЕДИНЕНИЕ
    //|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
    //|	ПО ОстаткиДолга.Организация = Обороты.Организация
    //|		И ЕСТЬNULL(ОстаткиДолга.Подразделение, Неопределено) = ЕСТЬNULL(Обороты.Подразделение, Неопределено)
    //|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
    //|		И ОстаткиДолга.Договор = Обороты.Договор
    //|СГРУППИРОВАТЬ ПО
    //|	ОстаткиДолга.Организация,
    //|	ЕСТЬNULL(ОстаткиДолга.Подразделение, НЕОПРЕДЕЛЕНО),
    //|	ОстаткиДолга.Контрагент,
    //|	ОстаткиДолга.Договор,
    //|	ОстаткиДолга.ОстатокДолга,
    //|	ОстаткиДолга.СрокОплаты";
    //
    //ТекстПросрочено =
    //"ВЫБРАТЬ
    //|	ОстаткиИОбороты.Организация,
    //|	ОстаткиИОбороты.Подразделение,
    //|	ОстаткиИОбороты.Контрагент,
    //|	ОстаткиИОбороты.Договор,
    //|	ОстаткиИОбороты.СрокОплаты,
    //|	ОстаткиИОбороты.ОстатокДолга,
    //|	ОстаткиИОбороты.ОстатокДолга - 
    //|		ВЫБОР
    //|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
    //|				ТОГДА ОстаткиИОбороты.ОстатокДолга
    //|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
    //|		КОНЕЦ КАК ПросроченнаяЗадолженность
    //|ИЗ
    //|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
    //|ГДЕ
    //|	ОстаткиИОбороты.ОстатокДолга - 
    //|		ВЫБОР
    //|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
    //|				ТОГДА ОстаткиИОбороты.ОстатокДолга
    //|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
    //|		КОНЕЦ > 0";
    //
    //Запрос.Текст = ТекстВсеОбороты + ТекстПросрочено;
    //
    //Возврат Запрос.Выполнить().Выгрузить();
    //
КонецФункции
#КонецЕсли