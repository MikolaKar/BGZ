
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьОграниченияПравДоступа = 
		ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа");
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");

	Элементы.ЗадачиМнеСрок.Формат = ФорматДатыДляКолонок;
	Элементы.ЗадачиМнеСоздана.Формат = ФорматДатыДляКолонок;
	
	Элементы.СписокСрокИсполнения.Формат = ФорматДатыДляКолонок;
	Элементы.СписокДата.Формат = ФорматДатыДляКолонок;
	
	Элементы.ЗадачиОтМеняСрокИсполнения.Формат = ФорматДатыДляКолонок;
	Элементы.ЗадачиОтМеняДата.Формат = ФорматДатыДляКолонок;
	
	Элементы.НовыйСрокВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Элементы.СтарыйСрок.Формат = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	КонецЕсли;

	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Исполнители = БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь);
	
	ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь",
		ТекущийПользователь);
	ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра(
		"Исполнители",
		Исполнители);
	ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		НачалоДня(ТекущаяДатаСеанса()));
	
	ЗадачиОтМеняИсполнители.Параметры.УстановитьЗначениеПараметра(
		"Исполнители",
		Исполнители);
		
	ЗадачиОтМеняПроекты.Параметры.УстановитьЗначениеПараметра(
		"Исполнители",
		Исполнители);
	ЗадачиОтМеняПроекты.Параметры.УстановитьЗначениеПараметра(
		"ИмяГруппыБезПроекта", 
		НСтр("ru = 'Без проекта'"));
		
	ЗадачиОтМеняФлаги.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь",
		ТекущийПользователь);
	ЗадачиОтМеняФлаги.Параметры.УстановитьЗначениеПараметра(
		"Исполнители",
		Исполнители);
	ЗадачиОтМеняФлаги.Параметры.УстановитьЗначениеПараметра(
		"БезФлага", 
		НСтр("ru = 'Без флага'"));
	
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ИмяГруппыБезПроекта", 
		НСтр("ru = 'Без проекта'"));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ТекущийПользователь",
		ТекущийПользователь);
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"Исполнители",
		БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь));
	ЗадачиМнеСписок.Параметры.УстановитьЗначениеПараметра(
		"ТекущаяДата",
		НачалоДня(ТекущаяДатаСеанса()));
		
	СохраненныеРеквизиты = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеРеквизиты) = Тип("Соответствие") Тогда
		Для каждого КлючЗначение Из СохраненныеРеквизиты Цикл
			Если КлючЗначение.Ключ <> "ПоказыватьОбластьПросмотраЗадачи" Тогда
				ЭтаФорма[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборЗадачиОтМеня();
	УстановитьГруппировкуЗадачОтМеня(Элементы, ЗадачиОтМеняВидГруппировки);
	УстановитьПараметрыГруппировокВЗадачахОтМеняСервер();
	
	ОбновитьДеревоЗадачМнеСервер();
	УстановитьВидимостьДанныхЗадачи(Элементы, Ложь);
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные);
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиОтМеня.УсловноеОформление);
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиМнеСписок.УсловноеОформление);
	
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеАвтообновление.Видимость = Ложь;
		Элементы.ЗадачиОтМеняКонтекстноеМенюЗадачиОтМеняАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.ЗадачиМнеКонтекстноеМенюЗадачиМнеАвтообновление.Видимость = Истина;
		Элементы.ЗадачиОтМеняКонтекстноеМенюЗадачиОтМеняАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьРезультатВыполнения = Истина;
		
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Элементы.СписокСостояниеКонтроля.Видимость = Ложь;
		Элементы.ЗадачиОтМеняСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
    
    ИдентификаторОбъектовМетаданныхЗадачи = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Задачи");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		
		БизнесПроцесс = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
		
		МультипредметностьВызовСервера.ОбработатьДобавлениеПредметаЗадачи(
			ЗадачиМнеТекущаяЗадача, БизнесПроцесс, Параметр.Файл, УникальныйИдентификатор);
			
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "ЗадачаИзменена"
		ИЛИ ИмяСобытия = "Перенаправление_ЗадачаИсполнителя" Тогда
		
		ОбновитьСписокЗадачМне();
		
		Если ЗадачиМнеПоказыватьВыполненные Тогда
			ЗадачиМнеТекущаяЗадача = Неопределено;
			ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
		КонецЕсли;
		
		ОбновитьСписокЗадачОтМеня();
		
	ИначеЕсли ИмяСобытия = "БизнесПроцессСтартован" Тогда
		
		ОбновитьСписокЗадачМне();
		ОбновитьСписокЗадачОтМеня();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ОбновитьДеревоПриложений();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьСписки();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОбновитьСписки();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Истина);

КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	ПриИзмененииНовогоСрока(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессПредметаРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", БизнесПроцессПредметаРассмотрения);
	ПараметрыФормы.Вставить("ЗаявкаНаПеренос", ЗадачиМнеТекущийБизнесПроцесс);
	
	ОткрытьФорму(ИмяФормыДляОткрытияКарточкиПроцесса, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеАвторы

&НаКлиенте
Процедура АвторыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Автор"
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор <> ЗадачиМнеТекущийАвтор Тогда
	
		ЗадачиМнеТекущийАвтор = Элементы.ЗадачиМнеАвторы.ТекущиеДанные.Автор;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеПроекты

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Проект" 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные <> Неопределено 
		И Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект <> ЗадачиМнеТекущийПроект Тогда
	
		ЗадачиМнеТекущийПроект = Элементы.ЗадачиМнеПроекты.ТекущиеДанные.Проект;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриАктивизацииСтроки(Элемент)
	
	ТочкиМаршрутаТекущиеДанные = Элементы.ЗадачиМнеТочкиМаршрута.ТекущиеДанные;
	
	Если ЗадачиМнеВидГруппировки = "ТочкаМаршрута" 
		И ТочкиМаршрутаТекущиеДанные <> Неопределено 
		И ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута <> ЗадачиМнеТекущаяТочкаМаршрута Тогда
	
		ЗадачиМнеТекущаяТочкаМаршрута = ТочкиМаршрутаТекущиеДанные.ТочкаМаршрута;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеФлаги

&НаКлиенте
Процедура ЗадачиМнеФлагиПриАктивизацииСтроки(Элемент)
	
	Если ЗадачиМнеВидГруппировки = "Флаг"
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные <> Неопределено
		И Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг <> ЗадачиМнеТекущийФлаг Тогда
	
		ЗадачиМнеТекущийФлаг = Элементы.ЗадачиМнеФлаги.ТекущиеДанные.Флаг;
	
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахМне", 0.2, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМне

&НаКлиенте
Процедура ЗадачиМнеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиМнеНомерФлага Тогда
		СтрокаТаблицы = ЗадачиМне.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗадачиМне.ТекущиеДанные = Неопределено Тогда
		Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
			ПодключитьОбработчикОжидания("УстановитьСтраницуНетЗадачи", 0.2, Истина);
		КонецЕсли;
		ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
		УстановитьДоступностьКомандПринятияКИсполнению();
	Иначе
		Если Элементы.ЗадачиМне.ТекущиеДанные.Ссылка <> ЗадачиМнеТекущаяЗадача Тогда
			
			ЗадачиМнеТекущаяЗадача = Элементы.ЗадачиМне.ТекущиеДанные.Ссылка;
			ЗадачиМнеТекущийИсполнитель = Элементы.ЗадачиМне.ТекущиеДанные.Исполнитель;
			ЗадачиМнеТекущийБизнесПроцесс = Элементы.ЗадачиМне.ТекущиеДанные.БизнесПроцесс;
			
			Если Элементы.ЗадачиМне.ТекущиеДанные.Выполнена Тогда
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
			Иначе
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению =
					Элементы.ЗадачиМне.ТекущиеДанные.ПринятаКИсполнению;
			КонецЕсли;
			
			РодительТекущегоЭлемента = КорневойРодительЭлементаДерева(Элементы.ЗадачиМне.ТекущиеДанные);
			ЗадачиМнеТекущийИндекс = ЗадачиМне.ПолучитьЭлементы().Индекс(
				РодительТекущегоЭлемента);
				
			УстановитьДоступностьКомандПринятияКИсполнению();
			
			Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
				ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.НомерФлага Тогда
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СтандартнаяОбработка = Ложь;
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиОтМеняИсполнители

&НаКлиенте
Процедура ЗадачиОтМеняИсполнителиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗадачиОтМеняИсполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекущийИсполнитель = Элементы.ЗадачиОтМеняИсполнители.ТекущиеДанные.Ссылка;
	НовыйОсновнойОбъектАдресации = Элементы.ЗадачиОтМеняИсполнители.ТекущиеДанные.ОсновнойОбъектАдресации;
	НовыйДополнительныйОбъектАдресации = Элементы.ЗадачиОтМеняИсполнители.ТекущиеДанные.ДополнительныйОбъектАдресации;
	
	Если ЗадачиОтМеняВидГруппировки = "Исполнитель"
		И НовыйТекущийИсполнитель <> Неопределено
		И (НовыйТекущийИсполнитель <> ЗадачиОтМеняТекущийИсполнитель
			ИЛИ НовыйОсновнойОбъектАдресации <> ЗадачиОтМеняОсновнойОбъектАдресации
			ИЛИ НовыйДополнительныйОбъектАдресации <> ЗадачиОтМеняДополнительныйОбъектАдресации) Тогда
		
		ЗадачиОтМеняТекущийИсполнитель = НовыйТекущийИсполнитель;
		ЗадачиОтМеняОсновнойОбъектАдресации = НовыйОсновнойОбъектАдресации;
		ЗадачиОтМеняДополнительныйОбъектАдресации = НовыйДополнительныйОбъектАдресации;
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахОтМеня", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиОтМеняПроекты

&НаКлиенте
Процедура ЗадачиОтМеняПроектыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЗадачиОтМеняПроекты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекущийПроект = Элементы.ЗадачиОтМеняПроекты.ТекущиеДанные.Ссылка;
	
	Если ЗадачиОтМеняВидГруппировки = "Проект"
		И НовыйТекущийПроект <> Неопределено
		И НовыйТекущийПроект <> ЗадачиОтМеняТекущийПроект Тогда
		
		ЗадачиОтМеняТекущийПроект = НовыйТекущийПроект;
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахОтМеня", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиОтМеняФлаги

&НаКлиенте
Процедура ЗадачиОтМеняФлагиПриАктивизацииСтроки(Элемент)
	
	УстановитьПараметрыГруппировокВЗадачахОтМеняПриВыбореФлага();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиОтМеня

&НаКлиенте
Процедура ЗадачиОтМеняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиОтМеняНомерФлага Тогда
		Если ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиОтМеня);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗадачиОтМеня.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Если ЗадачиОтМеняВидГруппировки = "Исполнитель" Тогда
			Элементы.ЗадачиОтМеняИсполнители.Обновить();
		ИначеЕсли ЗадачиОтМеняПроекты = "Проект" Тогда
			Элементы.ЗадачиОтМеняИсполнители.Обновить();
		ИначеЕсли ЗадачиОтМеняВидГруппировки = "Флаг" Тогда
			Элементы.ЗадачиОтМеняФлаги.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		
		ОчиститьСообщения();
		СообщениеОбОшибке = "";
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьПредметПродолжение",
			ЭтотОбъект,
			Новый Структура);

		ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка, СтандартнаяОбработка, ОписаниеОповещения);
			
	Иначе
	
		РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
			ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СтраницыЗадач.ТекущаяСтраница = Элементы.СтраницаЗадачиМне Тогда
		
		РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(ЭтаФорма, Элемент, 
			ДеревоПриложений.ПолучитьЭлементы().Количество());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ДеревоПриложений.ТолькоПросмотр Или Объект.Выполнена Тогда 
		Возврат;
	КонецЕсли;
	
	ВладелецФайлаСписка = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьБизнесПроцесс(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОткрытьПроцесс(Элементы.ЗадачиМнеСписок);
	Иначе
		ОткрытьПроцесс(Элементы.ЗадачиМне);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияИсполнения(Команда)
	
	ПараметрыФормы = Новый Структура("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИсторияИсполнения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияСогласования(Команда)
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	
	ОткрытьФорму(
		"БизнесПроцесс.Согласование.Форма.ФормаИсторияСогласования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияУтверждения(Команда)
	
	ПараметрыФормы = Новый Структура("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ОткрытьФорму("БизнесПроцесс.Утверждение.Форма.ФормаИсторияУтверждения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#Область КомандыЗадачиМне

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМнеСписок);
	Иначе
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеПоказатьВыполненные(Команда)
	
	ЗадачиМнеПоказыватьВыполненные = Не ЗадачиМнеПоказыватьВыполненные;
	
	УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные);
	
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеАвтообновление(Команда)

	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	Иначе
		МассивЗадач = Новый Массив;
		Для каждого Идентификатор Из Элементы.ЗадачиМне.ВыделенныеСтроки Цикл
			Строка = ЗадачиМне.НайтиПоИдентификатору(Идентификатор);
			МассивЗадач.Добавить(Строка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ВыбраноЗадач = МассивЗадач.Количество();
	
	Если ВыбраноЗадач = 0 
		или ВыбраноЗадач = 1 И ТипЗнч(МассивЗадач[0]) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач, ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Истина;
	УстановитьДоступностьКомандПринятияКИсполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
	Иначе
		МассивЗадач = Новый Массив;
		Для каждого Идентификатор Из Элементы.ЗадачиМне.ВыделенныеСтроки Цикл
			Строка = ЗадачиМне.НайтиПоИдентификатору(Идентификатор);
			МассивЗадач.Добавить(Строка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОтменитьПринятиеЗадачКИсполнению(МассивЗадач, ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
	ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Ложь;
	УстановитьДоступностьКомандПринятияКИсполнению();

КонецПроцедуры

// Сортировка списка Задачи мне

&НаКлиенте
Процедура ЗадачиМнеСортироватьСрокуИсполнения(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "СрокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьДатеСоздания(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "Дата");

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСортироватьПоФлагу(Команда)
	
	СортироватьДеревоПоКолонке("ЗадачиМне", "НомерФлага");
	
КонецПроцедуры

// Группировка в списке Задачи мне

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Автор");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("ТочкаМаршрута");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеСгруппироватьПоФлагу(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьЗадачиМнеПоВиду("");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗадачиОтМеня

&НаКлиенте
Процедура ЗадачиОтМеняНаписатьПисьмо(Команда)
	
	ТекущиеДанные = Элементы.ЗадачиОтМеня.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПочтовыхАдресов = Новый СписокЗначений;
	
	ЗаполнитьСписокАдресов(ТекущиеДанные.Исполнитель, СписокПочтовыхАдресов);
	
	Если Не ЗначениеЗаполнено(СписокПочтовыхАдресов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняОткрытьПроцесс(Команда)
	
	ОткрытьПроцесс(Элементы.ЗадачиОтМеня);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняОткрытьЗадачу(Команда)
	
	ОткрытьЗадачуИзСписка(Элементы.ЗадачиОтМеня);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняАвтообновление(Команда)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПоказатьВыполненные(Команда)
	
	ЗадачиОтМеняПоказыватьВыполненные = Не ЗадачиОтМеняПоказыватьВыполненные;
	
	УстановитьОтборЗадачиОтМеня();	
	
КонецПроцедуры

// Группировка в списке Задачи от меня

&НаКлиенте
Процедура ЗадачиОтМеняСгруппироватьПоИсполнителю(Команда)
	
	СгруппироватьЗадачиОтМеняПоВиду("Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняСгруппироватьПоПроекту(Команда)
		
	СгруппироватьЗадачиОтМеняПоВиду("Проект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняСгруппироватьПоФлагу(Команда)
	
	СгруппироватьЗадачиОтМеняПоВиду("Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняСгруппироватьПоБезГруппировки(Команда)
		
	СгруппироватьЗадачиОтМеняПоВиду("");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыМиниКарточкиЗадачи

&НаКлиенте
Процедура ЗадачаПереключитьХронометраж(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПереключитьХронометраж(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУказатьТрудозатраты(Команда)
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ЗадачиМнеТекущаяЗадача, "Выполнена, ДатаИсполнения");
	
	ДатаОтчета = ТекущаяДата();
	Если РеквизитыЗадачи.Выполнена Тогда
		ДатаОтчета = РеквизитыЗадачи.ДатаИсполнения;
	КонецЕсли;	
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ЗадачиМнеТекущаяЗадача,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		РеквизитыЗадачи.Выполнена,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗаписать(Команда)

	Если НЕ ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	ЗаписатьЗадачу(ТекстПредупреждения);
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
			Строка(ЗадачиМнеТекущаяЗадача),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправить(Команда)
	
	ЗадачаВыполнена = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗадачиМнеТекущаяЗадача, "Выполнена");
	
	Если ЗадачаВыполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Уже выполненную задачу нельзя перенаправить.'"));
		Возврат;
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачу(ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКарточкуЗадачи(Команда)
	
	НеПоказыватьОбластьПросмотраЗадачи = Не НеПоказыватьОбластьПросмотраЗадачи;
	
	УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи);
	
	Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
		Если ЗначениеЗаполнено(ЗадачиМнеТекущаяЗадача) Тогда
			ОбновитьЗадачу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаОткрытьКарточку(Команда)
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМнеСписок);
	Иначе
		ОткрытьЗадачуИзСписка(Элементы.ЗадачиМне);
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды работы с деревом приложений

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	НовыйИмяПредмета = Неопределено;
	Предмет = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьПредметПродолжение",
		ЭтотОбъект,
		Новый Структура);

	ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
		НовыйИмяПредмета, Предмет,, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредмет(Команда)
	
	ВыделенныеСтрокиПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыделеннаяСтр);
		ВыделенныеСтрокиПредметов.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоПриложенийУдалениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ВыделенныеСтрокиПредметов);
		
	МультипредметностьКлиент.ПолученоПодтверждениеОбУдаленииПредмета(Объект, ВыделенныеСтрокиПредметов, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ОткрытьКарточкуПредмета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьДляПросмотра(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	РаботаСБизнесПроцессамиКлиент.РедактироватьТекущийФайл(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗакончитьРедактированиеТекущегоФайла(
		ЭтаФорма, Элементы.ДеревоПриложений, ДеревоПриложений.ПолучитьЭлементы().Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	РаботаСБизнесПроцессамиКлиент.СохранитьТекущийФайл(ЭтаФорма, Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомандаОбновитьДеревоПриложений(Команда)
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// Команды выполнения задач

// Процесс Исполнение

&НаКлиенте
Процедура ЗадачаИсполнено(Команда) 
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Исполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнитель(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.ОтветственноеИсполнение") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Задача не может быть завершена, пока не выполнены все задачи исполнителей'"),,,
			"Исполнители");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПроверяемыхСтрок =
		ПолучитьСтрокиТабЧастиРезультатыПроверкиДляЗадачиПроверяющего(ЗадачиМнеТекущаяЗадача);
	
	КоличествоСтрок = СписокПроверяемыхСтрок.Количество();
	
	Если КоличествоСтрок > 1 Тогда
		
		ЗначениеПервогоЭлемента = СписокПроверяемыхСтрок[0].Значение;
		
		Если ТипЗнч(ЗначениеПервогоЭлемента) = Тип("Структура")
			И ЗначениеПервогоЭлемента.Свойство("НомерСтроки")
			И ЗначениеПервогоЭлемента.Свойство("КомментарийПроверяющего")
			И ЗначениеПервогоЭлемента.Свойство("ОтправленоНаДоработку") Тогда
			
			ЕстьОшибки = Ложь;
			
			Сообщения = Новый Массив;
			
			ТекстОшибкиЗаполненКомментарий =
				НСтр("ru = 'Комментарий может быть заполнен только для возвращаемой задачи'");
			
			ТекстОшибкиОтмеченыЗадачиДляВозврата = НСтр("ru = 'Отмечены задачи, возвращаемые на доработку'");
			
			Для Каждого СтрокаТабЧасти Из СписокПроверяемыхСтрок Цикл
				
				Если СтрокаТабЧасти.Значение.ОтправленоНаДоработку = Истина Тогда
					
					СтруктураСообщения = Новый Структура;
					СтруктураСообщения.Вставить("Текст", ТекстОшибкиОтмеченыЗадачиДляВозврата);
					СтруктураСообщения.Вставить("Поле", "Исполнители["
						+ (СтрокаТабЧасти.Значение.НомерСтроки - 1)
						+ "].ОтправленоНаДоработку");
					
					Сообщения.Добавить(СтруктураСообщения);
					
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
				Если СтрокаТабЧасти.Значение.КомментарийПроверяющего <> "" Тогда
					
					СтруктураСообщения = Новый Структура;
					СтруктураСообщения.Вставить("Текст", ТекстОшибкиЗаполненКомментарий);
					СтруктураСообщения.Вставить("Поле", "Исполнители["
						+ (СтрокаТабЧасти.Значение.НомерСтроки - 1)
						+ "].КомментарийПроверяющего");
					
					Сообщения.Добавить(СтруктураСообщения);
					
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьОшибки Тогда
				
				БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
				
				СтруктураПараметровОповещения = Новый Структура;
				СтруктураПараметровОповещения.Вставить("СсылкаНаЗадачу", ЗадачиМнеТекущаяЗадача);
				СтруктураПараметровОповещения.Вставить("Сообщения", Сообщения);
				
				Оповестить("ПерейтиКТаблицеИсполнителей", СтруктураПараметровОповещения);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли КоличествоСтрок = 1 Тогда
		
		Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Комментарий может быть заполнен только для возвращаемой задачи'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,,
				"РезультатВыполнения");
				
			Возврат;
			
		КонецЕсли;
		
		ЗаписатьПроцессИсполнениеПриВозвратеНаДоработку(
			ЗадачиМнеТекущийБизнесПроцесс,
			СписокПроверяемыхСтрок,
			ЗадачиМнеТекущаяЗадача,
			РезультатВыполнения,
			Ложь);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	СписокПроверяемыхСтрок =
		ПолучитьСтрокиТабЧастиРезультатыПроверкиДляЗадачиПроверяющего(ЗадачиМнеТекущаяЗадача);
			
	КоличествоСтрок = СписокПроверяемыхСтрок.Количество();
	
	Если КоличествоСтрок = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Не заполнен комментарий'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОбОшибке,,
				"РезультатВыполнения");
				
			Возврат;
			
		КонецЕсли;
		
		Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СписокПроверяемыхСтрок", СписокПроверяемыхСтрок);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗадачаВернутьНаДоработкуИсполнениеПродолжение",
			ЭтотОбъект,
			ПараметрыОповещения);

		РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
					
	ИначеЕсли КоличествоСтрок > 1 Тогда
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
		
		СтруктураПараметровОповещения = Новый Структура;
		СтруктураПараметровОповещения.Вставить("СсылкаНаЗадачу", ЗадачиМнеТекущаяЗадача);
		Оповестить("ПерейтиКТаблицеИсполнителей", СтруктураПараметровОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.Контролер") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

// Процесс Ознакомление

&НаКлиенте
Процедура ЗадачаОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Ознакомление.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеВыполнено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Выполнить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Контролировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Комментарий может быть заполнен только для возвращаемой задачи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработку(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Поручение.ТочкаМаршрута.Проверить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(РезультатВыполнения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен комментарий'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринято(Команда, ОбработанныеВопросы = Неопределено)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ОбработанныеВопросы = Неопределено Тогда
		ОбработанныеВопросы = Новый Структура;
	КонецЕсли;
	
	Если Не ОбработанныеВопросы.Свойство("ЗанятостьИсполнителей") Тогда
		
		ИсключенияЗанятости = Новый Массив;
		Для Каждого Предмет Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			Если Предмет.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Основной")
				И ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
				ИсключенияЗанятости.Добавить(Предмет.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Команда", Команда);
		ПараметрыОбработчика.Вставить("ОбработанныеВопросы", ОбработанныеВопросы);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьПользователей(
				ЗадачиМнеТекущийИсполнитель, ДатаНачалаМероприятия, ДатаОкончанияМероприятия,
				ИспользоватьРабочийКалендарь, ИсключенияЗанятости, Истина, ОписаниеОповещения) Тогда
			Возврат;
		КонецЕсли;
		
		ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
		
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринято(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Пригласить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсторияПриглашения(Команда)
	
	ПараметрыФормы = Новый Структура("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ОткрытьФорму("БизнесПроцесс.Приглашение.Форма.ФормаИсторияПриглашения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПовторитьЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("БизнесПроцесс.Приглашение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников", ЭтотОбъект);
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		ТекстВопроса =
			Нстр("ru = 'Есть не принявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Приглашение.ТочкаМаршрута.Оповестить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ЗадачаРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Резолюция"" не заполнено'"),,
				"РезультатВыполнения",,Отказ);
	КонецЕсли;
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
		ЭтотОбъект);
		
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотреноНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть") Тогда
		
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРассмотренияЗадачи(
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеОбработано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"ВариантОбработкиРезолюции",
		ПредопределенноеЗначение("Перечисление.ВариантыОбработкиРезолюции.НеНаправлять"));
		
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаИсполнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеНаИсполнение", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРассмотрениеНаправитьНаОзнакомление(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(ЗадачиМнеТекущаяЗадача);
	Оповестить("ПерейтиКГруппеОзнакомление", ЗадачиМнеТекущаяЗадача);
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачиМнеТекущаяЗадача,
		ТипыДокументов,
		Истина);
		
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		
		Если ЗначениеЗаполнено(Предмет) Тогда 
			ОчиститьСообщения();
			Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(
				Предмет, "РегистрационныйНомер") = "" Тогда 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" не зарегистрирован!
							|Для регистрации откройте карточку документа и нажмите кнопку ""№"" (Зарегистрировать)'"),
						Строка(Предмет)),,
					"ДеревоПриложений");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрировано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Зарегистрировать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДеревоПриложений.ПолучитьЭлементы().Количество() > 0 Тогда
		ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,,Истина);
		ОчиститьСообщения();
		Для каждого Предмет из ОсновныеПредметы Цикл
			Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Предмет, "РегистрационныйНомер") <> "" Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ ""%1"" зарегистрирован!
							|Для завершения задачи нажмите кнопку ""Зарегистрировано"".'"),
						Строка(Предмет)),,
				"ДеревоПриложений");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отказа в регистрации'"),, 
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Регистрация.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРегистрацияПовторитьПродолжение",
		ЭтотОбъект);

	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.Регистрация.Форма.ФормаИзменениеПараметров", ПараметрыФормы,
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры		

// Процесс РешениеВопросовВыполненияЗадач

&НаКлиенте
Процедура ЗадачаРешениеВопросовРассмотрено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Текст = НСтр("ru = 'Поле ""Комментарий"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения",
			,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовОтправитьНаУточнение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.ОзнакомлениеСРезультатомРассмотрения") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Текст = НСтр("ru = 'При отправке на уточнение требуется указать комментарий.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправитьНаУточнение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
		
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренести(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаРешениеВопросовПеренестиПродолжение",
		ЭтотОбъект);

	ОчиститьСообщения();
	Если Не ТребуетсяРучноеИзменениеСрока Тогда
		// Проверка заполнения обязательных полей
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(НовыйСрок) Тогда
			Текст = НСтр("ru = 'Не указан новый срок исполнения.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"НовыйСрок",
				,
				Отказ);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(БизнесПроцессПредметаРассмотрения) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
		    // Получение списка текущих активных задач, срок исполнения которых будет изменен
			СписокЗадач = ПолучитьСписокАктивныхЗадач(БизнесПроцессПредметаРассмотрения);
			Если СписокЗадач.Количество() > 1 Тогда
				// Если количество задач, которых затрагивает перенос срока, больше 1, 
				//	то выводится информационное окно.
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Задача", ПредметРассмотрения);
				ПараметрыФормы.Вставить("МассивЗадач", СписокЗадач);
				ПараметрыФормы.Вставить("НовыйСрок", НовыйСрок);
				ПараметрыФормы.Вставить("Процесс", БизнесПроцессПредметаРассмотрения);
				ПараметрыФормы.Вставить("СтарыйСрок", СтарыйСрок);
				ОткрытьФорму(
					"БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ИнформацияОЗатрагиваемыхЗадачах", 
					ПараметрыФормы, 
					ЭтаФорма,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				Возврат;	
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ПереносСроковВыполненияЗадач.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
		ПредметРассмотрения, ЗадачиМнеТекущийБизнесПроцесс) = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо вручную изменить срок на карточке процесса'"),
			,
			"БизнесПроцессПредметаРассмотрения");
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРешениеВопросовНеПереносить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> ПредопределенноеЗначение(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ТочкаМаршрута.РассмотрениеИнициатором") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на заполнение обязательного комментария при отказе перенести срок
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ОчиститьСообщения();
		Текст = НСтр("ru = 'Не заполнено поле ""Комментарий"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ЗадачаСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованоСЗамечаниями(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеСогласовано(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Согласовать") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаСогласованиеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСогласование(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
    КонецЕсли;
    
    //1С-Минск +
    // если повторно отправляет исполнитель, то текущий уровень должен быть Исполнитель, иначе уровень проверяющего
    Дело = ПолучитьДелоИзЗадачи(ЗадачиМнеТекущаяЗадача);
    Если ЗначениеЗаполнено(Дело) Тогда
        ТекИсполнитель = ПользователиКлиентСервер.ТекущийПользователь();
        ИсполнительДела = мПроверкаДела.ПолучитьИсполнителяДела(Дело);
    
        Если ТекИсполнитель = ИсполнительДела Тогда
            //Если мПроверкаДела.ПолучитьУровеньШаблонаПроверкиДела(ЗадачиМнеТекущийБизнесПроцесс) = 1 Тогда
            // Запись состояния дела
            ТекУровеньПроверки = ПредопределенноеЗначение("Перечисление.мУровниПроверки.Исполнитель");
        Иначе
            ТекУровеньПроверки = мПроверкаДела.ПолучитьУровеньПроверкиДелаПоПроцессу(ЗадачиМнеТекущийБизнесПроцесс);
        КонецЕсли; 
        
        Подразделение = РаботаСПользователями.ПолучитьПодразделение(ТекИсполнитель);
        Состояние = ПредопределенноеЗначение("Перечисление.мСостоянияДела.НаправленоНаПроверку");
        мПроверкаДела.ЗаписатьСостояниеДела(Дело, Состояние, ТекущаяДата(), Подразделение, ТекИсполнитель, ТекУровеньПроверки);  
        
        ПоказатьОповещениеПользователя("Дело "+Дело+" отправлено на проверку!");
    КонецЕсли; 
    //1С-Минск -
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровСогласования", ЭтотОбъект, ПараметрыОбработчика);
	
	ОткрытьФорму(
		"БизнесПроцесс.Согласование.Форма.ФормаИзменениеПараметров", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры
    
//1С-Минск + 
&НаСервереБезКонтекста
Функция ПолучитьДелоИзЗадачи(ЗадачиМнеТекущаяЗадача)
    Для каждого Стр Из ЗадачиМнеТекущаяЗадача.Предметы  Цикл
        Если ЗначениеЗаполнено(Стр.Предмет) Тогда
            Возврат Стр.Предмет;
        КонецЕсли;     
    КонецЦикла; 
    Возврат Неопределено;
КонецФункции // ПолучитьДелоИзЗадачи()
//1С-Минск - 
 

// Процесс Утверждение

&НаКлиенте
Процедура ЗадачаУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеУтверждено(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отклонения документа '"),,
			"РезультатВыполнения");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения", 
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено"));
	ПараметрыЗаписи.Вставить("КлючеваяОперация", "УтверждениеВыполнениеКомандыНеУтверждено");
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеОзнакомился(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУтверждение(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Ложь);
	
	ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаУтверждениеПовторить(Команда)
	
	Если ТочкаМаршрутаТекущейЗадачи <> 
		ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ПараметрыОбработчика = Новый Структура();
	ПараметрыОбработчика.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеИзмененияПараметровУтверждения", ЭтотОбъект, ПараметрыОбработчика);
	ОткрытьФорму(
		"БизнесПроцесс.Утверждение.Форма.ФормаИзменениеПараметров",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРаботыСФлагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииНовогоСрока(ИзмененаДата)
	
	// Если в поле "Новый срок" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Время>. Это значение исправляется.
	Если ЗначениеЗаполнено(НовыйСрок) и НовыйСрок < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(НовыйСрок);
		МинутаДаты = Минута(НовыйСрок);
		СекундаДаты = Секунда(НовыйСрок);
		НовыйСрок = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);
	КонецЕсли;
	Если ИзмененаДата И НовыйСрок < КонецДня(НовыйСрок)
		ИЛИ НЕ ИспользоватьДатуИВремяВСрокахЗадач Тогда
		НовыйСрок = КонецДня(НовыйСрок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСрок) Тогда
		ДлительностьПереноса = 
			ПереносСроковВыполненияЗадач.ПолучитьПодписьДлительностьПереноса(
				ТекущийПользователь,
				СтарыйСрок,
				НовыйСрок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Список)

	Если Список.ТекущиеДанные <> Неопределено 
		И ТипЗнч(Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда		
		ПоказатьЗначение(, Список.ТекущиеДанные.БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписки()
	
	Если Элементы.СтраницыЗадач.ТекущаяСтраница = Элементы.СтраницаЗадачиМне Тогда
		ОбновитьСписокЗадачМне();
	Иначе
		ОбновитьСписокЗадачОтМеня();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуИзСписка(Список)
	
	Если Список.Имя = "ЗадачиМне" Тогда
		Если Список.ТекущиеДанные <> Неопределено Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(
				Список.ТекущиеДанные.Ссылка);		
		КонецЕсли;	
	Иначе
		Если Список.ТекущаяСтрока = Неопределено 
			Или ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
	
		БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	МассивЗадач = Новый Массив;
	
	УстановитьФлагЗадачам = Ложь;
	
	Если Элементы.СтраницыЗадач.ТекущаяСтраница = Элементы.СтраницаЗадачиМне Тогда
		Если Элементы.ЗадачиМне.Видимость Тогда
			ВыделенныеСтроки = Элементы.ЗадачиМне.ВыделенныеСтроки;
			Для Каждого Стр Из ВыделенныеСтроки Цикл
				СтрокаДерева = ЗадачиМне.НайтиПоИдентификатору(Стр);
				МассивЗадач.Добавить(СтрокаДерева.Ссылка);
			КонецЦикла;
			УстановитьФлагЗадачам = Истина;
		ИначеЕсли Элементы.ЗадачиМнеСписок.Видимость Тогда
			МассивЗадач = Элементы.ЗадачиМнеСписок.ВыделенныеСтроки;
			УстановитьФлагЗадачам = Истина;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыЗадач.ТекущаяСтраница = Элементы.СтраницаЗадачиОтМеня Тогда
		МассивЗадач = Элементы.ЗадачиОтМеня.ВыделенныеСтроки;
		УстановитьФлагЗадачам = Истина;
	КонецЕсли;
	
	ИтоговыйМассивЗадач = Новый Массив;
	Для Каждого СтрокаМассива Из МассивЗадач Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ИтоговыйМассивЗадач.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если УстановитьФлагЗадачам Тогда
		Результат = РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ИтоговыйМассивЗадач, Флаг);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗадачиМне

&НаКлиенте
Процедура УстановитьДоступностьКомандПринятияКИсполнению() 
	
	Если ЗадачиМнеТекущаяЗадачаПринятаКИсполнению <> Неопределено Тогда

		ДоступностьКомандыПринятьКИсполнению = 
			НЕ ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
			
		ДоступностьКомандыОтменитьПринятиеКИсполнению = 
			ЗадачиМнеТекущаяЗадачаПринятаКИсполнению;
		
	Иначе
		
		ДоступностьКомандыПринятьКИсполнению = Ложь;
		ДоступностьКомандыОтменитьПринятиеКИсполнению = Ложь;
		
	КонецЕсли;
	
	Элементы.ПринятьКИсполнению.Доступность = ДоступностьКомандыПринятьКИсполнению;
		
	Элементы.ОтменитьПринятиеКИсполнению.Доступность = ДоступностьКомандыОтменитьПринятиеКИсполнению;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		
		Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность =
			ДоступностьКомандыПринятьКИсполнению;
	
		Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность =
			ДоступностьКомандыОтменитьПринятиеКИсполнению;
		
	Иначе
		Элементы.ЗадачиМнеКонтекстноеМенюПринятьКИсполнению.Доступность =
			ДоступностьКомандыПринятьКИсполнению;
	
		Элементы.ЗадачиМнеКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность =
			ДоступностьКомандыОтменитьПринятиеКИсполнению;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриАктивизацииСтрокиЗадачиМнеСписок()
	
	ТекущаяСтрока = Элементы.ЗадачиМнеСписок.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
			ПодключитьОбработчикОжидания("УстановитьСтраницуНетЗадачи", 0.2, Истина);
		КонецЕсли;
		
		ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
		УстановитьДоступностьКомандПринятияКИсполнению();
		
	Иначе
		Если ТекущаяСтрока <> ЗадачиМнеТекущаяЗадача Тогда
			
			ЗадачиМнеТекущаяЗадача = ТекущаяСтрока;
			ЗадачиМнеТекущийИсполнитель = Элементы.ЗадачиМнеСписок.ТекущиеДанные.Исполнитель;
			ЗадачиМнеТекущийБизнесПроцесс = Элементы.ЗадачиМнеСписок.ТекущиеДанные.БизнесПроцесс;
			
			Если Элементы.ЗадачиМнеСписок.ТекущиеДанные.Выполнена Тогда
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = Неопределено;
			Иначе
				ЗадачиМнеТекущаяЗадачаПринятаКИсполнению = 
					Элементы.ЗадачиМнеСписок.ТекущиеДанные.ПринятаКИсполнению;
			КонецЕсли;
				
			УстановитьДоступностьКомандПринятияКИсполнению();
				
			Если Не НеПоказыватьОбластьПросмотраЗадачи Тогда
				ПодключитьОбработчикОжидания("ОбновитьЗадачу", 0.2, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КорневойРодительЭлементаДерева(ЭлементДерева)
	
	РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат КорневойРодительЭлементаДерева(РодительЭлемента);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиОбъектВДеревеПоСсылке(КоллекцияОбъектовОдногоУровня, ИскомыйОбъект, Индекс)
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из КоллекцияОбъектовОдногоУровня Цикл
		Если СтрокаОбъекта.Ссылка = ИскомыйОбъект Тогда
			Индекс = СтрокаОбъекта.ПолучитьИдентификатор();
		Иначе
			НайтиОбъектВДеревеПоСсылке(СтрокаОбъекта.ПолучитьЭлементы(), ИскомыйОбъект, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийОбъектВДеревеПоСсылке(ДеревоЭлемент, ДеревоРеквизит, ТекущийОбъект, ЗадачиМнеТекущийИндекс)
	
	Если ТекущийОбъект <> Неопределено И
		НЕ ТекущийОбъект.Пустая() Тогда
		Индекс = -1;
		НайтиОбъектВДеревеПоСсылке(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийОбъект, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		Иначе
			// Если задача не найдена в дереве (после выполнения), то
			// установить фокус на позицию выполненной задачи 
			КоличествоЭлементовВКорне = ДеревоРеквизит.ПолучитьЭлементы().Количество();
			
			Если ЗадачиМнеТекущийИндекс > 0 И КоличествоЭлементовВКорне > 1 Тогда
				Если ЗадачиМнеТекущийИндекс > КоличествоЭлементовВКорне - 1 Тогда
					НовыйИндекс = КоличествоЭлементовВКорне - 1;
				Иначе
					НовыйИндекс = ЗадачиМнеТекущийИндекс;
				КонецЕсли;

				ЭлементДерева = ДеревоРеквизит.ПолучитьЭлементы().Получить(НовыйИндекс);
				ДеревоЭлемент.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьДеревоПоКолонке(РеквизитДерево, ИмяКолонки)
		
	Если ЗадачиМнеСортироватьПо = ИмяКолонки Тогда
		Если ЗадачиМнеНаправлениеСортировки = "Возр" Тогда
			ЗадачиМнеНаправлениеСортировки = "Убыв";
		Иначе
			ЗадачиМнеНаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		ЗадачиМнеСортироватьПо = ИмяКолонки;
		ЗадачиМнеНаправлениеСортировки = "Возр";
	КонецЕсли;
		
	Дерево = РеквизитФормыВЗначение(РеквизитДерево);
		
	Дерево.Строки.Сортировать(
		ЗадачиМнеСортироватьПо + " " + ЗадачиМнеНаправлениеСортировки, 
		Ложь);
	
	ЗначениеВДанныеФормы(Дерево, ЭтаФорма[РеквизитДерево]);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоЗадачамМне()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителяЗадачиПоИсполнителю.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаИсполнителяЗадачиПоИсполнителю.Выполнена = ЛОЖЬ
		|						И ЗадачаИсполнителяЗадачиПоИсполнителю.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаИсполнителяЗадачиПоИсполнителю.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю КАК ЗадачаИсполнителяЗадачиПоИсполнителю
		|ГДЕ
		|	ЗадачаИсполнителяЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И НЕ ЗадачаИсполнителяЗадачиПоИсполнителю.ПометкаУдаления
		|	И НЕ ЗадачаИсполнителяЗадачиПоИсполнителю.ИсключенаИзПроцесса";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборЗадачиМне(Элементы, ЗадачиМнеПоказыватьВыполненные)
	
	Элементы.ЗадачиМнеПоказатьВыполненные.Пометка = ЗадачиМнеПоказыватьВыполненные;
	
	Элементы.ЗадачиМнеСписок.Видимость = ЗадачиМнеПоказыватьВыполненные;
	Элементы.ЗадачиМне.Видимость = Не ЗадачиМнеПоказыватьВыполненные;
	
	Элементы.КнопкиПоискаПоСпискуЗадачиМнеСписок.Видимость = Элементы.ЗадачиМнеСписок.Видимость;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗадачу(ТекстПредупреждения)
	
	ЗадачаОбъект = ЗадачиМнеТекущаяЗадача.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
	
	ЗадачаОбъект.РезультатВыполнения = РезультатВыполнения;
	ЗадачаОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗадачу()
	
	ЗаписатьСобытиеПоЗадаче =
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий <> ЗадачиМнеТекущаяЗадача;
	
	РезультатОбработки = ОбновитьДанныеЗадачи(ЗадачиМнеТекущаяЗадача, ТекущийПользователь,
		ОтображатьУдаленныеПриложения, ЗаписатьСобытиеПоЗадаче);
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ЗадачиМнеПоследняяЗадачаСЗаписаннойИсторийСобытий = ЗадачиМнеТекущаяЗадача;
	КонецЕсли;
	
	ПолноеОписаниеЗадачи = РезультатОбработки.ПолноеОписаниеЗадачи;
    
    ТочкаМаршрутаТекущейЗадачи = РезультатОбработки.ТочкаМаршрутаТекущейЗадачи;
	
	Если ОбновитьРезультатВыполнения Тогда
		РезультатВыполнения = РезультатОбработки.РезультатВыполнения;
	Иначе
		ОбновитьРезультатВыполнения = Истина;
	КонецЕсли;
	
	ПредметЗадачи = РезультатОбработки.ПредметЗадачи;
	Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница = Элементы[РезультатОбработки.СтраницаКнопокЗадачи];
	
	// Установить значения реквизитов
	Если ТипЗнч(РезультатОбработки.ДополнительныеРеквизиты) = Тип("Структура") Тогда
		Для каждого Реквизит Из РезультатОбработки.ДополнительныеРеквизиты Цикл
			ЭтаФорма[Реквизит.Ключ] = Реквизит.Значение;
		КонецЦикла;
	КонецЕсли;
	
	// Установить свойства элементов
	Если ТипЗнч(РезультатОбработки.СвойстваЭлементов) = Тип("Структура") Тогда
		Для каждого Элемент Из РезультатОбработки.СвойстваЭлементов Цикл
			НайденныйЭлемент = Элементы[Элемент.Ключ];
			Для каждого СвойствоЭлементаИЗначение Из Элемент.Значение Цикл
				ИмяСвойства = СвойствоЭлементаИЗначение.Ключ;
				ЗначениеСвойства = СвойствоЭлементаИЗначение.Значение;
				
				Если ИмяСвойства = "ТекущаяСтраница" Тогда
					НайденныйЭлемент[ИмяСвойства] = Элементы[ЗначениеСвойства];
					Продолжить;
				КонецЕсли;
				
				НайденныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ЗадачаЗаписать.Доступность = Не РезультатОбработки.Выполнена;
	Элементы.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Доступность = Не РезультатОбработки.Выполнена;
	
	ЭлементыДерева = ДеревоПриложений.ПолучитьЭлементы();
	
	ЭлементыДерева.Очистить();
	ЗаполнитьДеревоПриложений(ЭлементыДерева, РезультатОбработки.МассивПриложений);
	Элементы.ДеревоПриложений.Отображение = ОтображениеТаблицы.Дерево;
	Элементы.ДеревоПриложений.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	
	Для Каждого ЭлементДереваВерхнегоУровня ИЗ ЭлементыДерева Цикл
		Элементы.ДеревоПриложений.Развернуть(ЭлементДереваВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ДекорацияЗаголовокПриложений = РезультатОбработки.ДекорацияЗаголовокПриложений;
	
	УстановитьВидимостьДанныхЗадачи(Элементы, Истина);
	
	//1С-Минск+
	Если Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница.Имя = "ГруппаКнопокСогласование" Тогда
		Если М_УправлениеФормамиДОРБСервер.ЭтоПроцессПроверкиДела(ЗадачиМнеТекущаяЗадача) Тогда
			Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница.ПодчиненныеЭлементы.ГруппаСогласованиеКнопки.ПодчиненныеЭлементы.ГруппаСогласованиеТолькоКнопки.ПодчиненныеЭлементы.СогласованоСЗамечаниями.Видимость = Ложь;
		Иначе
			Элементы.ГруппаВидыКнопокЗадачи.ТекущаяСтраница.ПодчиненныеЭлементы.ГруппаСогласованиеКнопки.ПодчиненныеЭлементы.ГруппаСогласованиеТолькоКнопки.ПодчиненныеЭлементы.СогласованоСЗамечаниями.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли;
    
    Если Элементы.ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаНеСогласовано.Видимость Тогда
        Если мПроверкаДела.ПолучитьУровеньШаблонаПроверкиДела(ЗадачиМнеТекущийБизнесПроцесс) = 1 Тогда
            // на уровне 1 нельзя завершить согласование - только повторить
            Если РезультатСогласованияЗадачи = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
                Элементы.ЗавершитьСогласование.Доступность = Ложь;
                Элементы.ПовторитьСогласование.Доступность = Истина;
            КонецЕсли;
        КонецЕсли; 
	КонецЕсли;
	
	Элементы.ВнестиДатуРешения.Видимость = ЭтоЗадачаВнесенияДатыРешения(ЗадачиМнеТекущаяЗадача);
	//1С-Минск-
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЗадачаВнесенияДатыРешения(ЗадачиМнеТекущаяЗадача)
	Возврат Найти(ЗадачиМнеТекущаяЗадача.БизнесПроцесс.Шаблон.Наименование, "Внести дату получения решения")>0;	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьДанныеЗадачи(
	Задача,
	ТекущийПользователь,
	ОтображатьУдаленныеПриложения,
	ЗаписатьСобытиеПоЗадаче)
	
	Результат = Новый Структура(
		"ПолноеОписаниеЗадачи, 
		|ПредметЗадачи, 
		|РезультатВыполнения, 
		|СтраницаКнопокЗадачи, 
		|Выполнена, 
		|ДополнительныеРеквизиты, 
		|СвойстваЭлементов,
		|МассивПриложений,
		|ДекорацияЗаголовокПриложений,
		|ТочкаМаршрутаТекущейЗадачи");
		
	ДополнительныеРеквизиты = Новый Структура;
	СвойстваЭлементов = Новый Структура;
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		Задача, 
		"БизнесПроцесс, Описание, Наименование, ТочкаМаршрута, Выполнена, РезультатВыполнения, Исполнитель, РольИсполнителя");
	
	Результат.РезультатВыполнения = РеквизитыЗадачи.РезультатВыполнения;
	Результат.Выполнена = РеквизитыЗадачи.Выполнена;
	
	ТочкаМаршрутаСсылка = РеквизитыЗадачи.ТочкаМаршрута;
	Результат.ТочкаМаршрутаТекущейЗадачи = ТочкаМаршрутаСсылка;
	ТипБизнесПроцесса = ТипЗнч(РеквизитыЗадачи.БизнесПроцесс);
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ТочкиМаршрутаПроцесса = 
			БизнесПроцессы[РеквизитыЗадачи.БизнесПроцесс.Метаданные().Имя].ТочкиМаршрута;
	Иначе
		ТочкиМаршрутаПроцесса = Неопределено;
	КонецЕсли;
	
	СтраницаКнопокЗадачи = "ГруппаКнопокПерейтиКФормеЗадачи";
	
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс)
		Или РеквизитыЗадачи.Выполнена Тогда

	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрение";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРассмотрениеОбработано";
			
			ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(
				Задача,
				РеквизитыЗадачи, 
				ДополнительныеРеквизиты, 
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
				
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.РассмотрениеИнициатором Тогда
			ВидВопроса = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
				РеквизитыЗадачи.БизнесПроцесс, 
				"ВидВопроса");
				
			Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
				
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовПереносСрока";
				
				ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(
					Задача,
					РеквизитыЗадачи, 
					ДополнительныеРеквизиты, 
					СвойстваЭлементов);

			Иначе
				СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовАвтор";
			КонецЕсли;
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОзнакомлениеСРезультатомРассмотрения Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРешениеВопросовИсполнитель";
		КонецЕсли;
			
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Поручение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Выполнить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПоручениеПроверяющий";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролер Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокКомплексныйПроцесс";
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Зарегистрировать Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрация";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокРегистрацияОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Пригласить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашение";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Оповестить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОповестить";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокПриглашениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Согласовать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласование";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
				
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			
			СтраницаКнопокЗадачи = "ГруппаКнопокСогласованиеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
                
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Утвердить Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждение";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждение(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
		
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокУтверждениеОзнакомиться";
			
			ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
		
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Исполнить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнение";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Контролировать Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеКонтролер";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.ОтветственноеИсполнение Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеОтвИсполнитель";
		ИначеЕсли ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Проверить Тогда
			СтраницаКнопокЗадачи = "ГруппаКнопокИсполнениеПроверяющий";
			
			ПолучитьРеквизитыИСвойстваЗадачиИсполненияПроверить(
				Задача,
				РеквизитыЗадачи,
				ДополнительныеРеквизиты,
				СвойстваЭлементов);
			
		КонецЕсли;
	
	ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда	
		
		Если ТочкаМаршрутаСсылка = ТочкиМаршрутаПроцесса.Ознакомиться Тогда 
			СтраницаКнопокЗадачи = "ГруппаКнопокОзнакомление";
		КонецЕсли;
	
	КонецЕсли;
	
	Результат.СтраницаКнопокЗадачи = СтраницаКнопокЗадачи;
	
	Результат.ПолноеОписаниеЗадачи = HTMLОписаниеЗадачи(
		РеквизитыЗадачи, ТекущийПользователь, ДополнительныеРеквизиты);
	
	// Хронометраж
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Задача,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	СвойстваЭлементов.Вставить("ПереключитьХронометраж", Новый Соответствие);
	СвойстваЭлементов.Вставить("УказатьТрудозатраты", Новый Соответствие);
	СвойстваЭлементов.Вставить("ДобавитьПредмет", Новый Соответствие);
	
	СвойстваЭлементов.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	СвойстваЭлементов.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	СвойстваЭлементов.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	ДополнительныеРеквизиты.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	ДополнительныеРеквизиты.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	ДополнительныеРеквизиты.Вставить("ВключенХронометраж", ВключенХронометраж);
	ДополнительныеРеквизиты.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	ДополнительныеРеквизиты.Вставить("ВидыРабот", ВидыРабот);
	ДополнительныеРеквизиты.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Результат.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
	Результат.СвойстваЭлементов = СвойстваЭлементов;
	
	// список приложений
	СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
		Результат.МассивПриложений, Результат.ДекорацияЗаголовокПриложений);
	
	Если ЗаписатьСобытиеПоЗадаче Тогда
		ИсторияСобытийЗадач.ЗаписатьСобытиеОткрытаКарточка(Задача);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьМассивПриложенийПоПредметам(Задача, ОтображатьУдаленныеПриложения, 
	МассивПриложений, ДекорацияЗаголовокПриложений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = Задача.Предметы;
	МассивПриложений = Новый Массив;
	
	Если НЕ ОтображатьУдаленныеПриложения Тогда
		
		КоличествоПредметов = 0;
		
		Для Каждого СтрПредмет ИЗ Предметы Цикл
			Если НЕ ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			ИначеЕсли НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрПредмет.Предмет, "ПометкаУдаления") Тогда
				КоличествоПредметов = КоличествоПредметов + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		КоличествоПредметов = Предметы.Количество();
	КонецЕсли;
	
	Если КоличествоПредметов = 0 Тогда
		ДекорацияЗаголовокПриложений = НСтр("ru='Предметы:'");
		Возврат;
	Иначе
		
		ДекорацияЗаголовокПриложений = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Предметы (%1):'"), КоличествоПредметов);
	КонецЕсли;
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
	
		Если СтрокаПредмета.Предмет <> Неопределено И ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			Если Не ОтображатьУдаленныеПриложения И СтрокаПредмета.Предмет.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
			
		Строка.ДочерниеЭлементы = Новый Массив;	
		
		Строка.Наименование = ОбщегоНазначенияДокументооборот.ПредметСтрокой(СтрокаПредмета.Предмет, СтрокаПредмета.ИмяПредмета);
		Строка.Ссылка = СтрокаПредмета.Предмет;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаПредмета);
		
		Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				РеквизитыФайла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Строка.Ссылка, 
					"ИндексКартинки, ХранитьВерсии, Редактирует, ПометкаУдаления, ПодписанЭП");
					
				Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
					Строка.ТипФайла = Строка.ТипФайла + 1;
				КонецЕсли;	
				Строка.ТипФайла = РеквизитыФайла.ИндексКартинки;
				
				Строка.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
				Строка.Редактирует = РеквизитыФайла.Редактирует;
				Если Не Строка.Редактирует.Пустая() Тогда
					Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
						Строка.РедактируетТекущийПользователь = Истина;
					Иначе	
						Строка.РедактируетДругойПользователь = Истина;
					КонецЕсли;	
				КонецЕсли;
				Строка.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
			Иначе
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Строка.ИмяПредмета) Тогда
				Строка.ТипФайла = МультипредметностьКлиентСервер.УстановитьКартинкуПоРолиПредмета(
					СтрокаПредмета.РольПредмета, ?(СтрокаПредмета.Предмет = Неопределено, Ложь, СтрокаПредмета.Предмет.ПометкаУдаления));
			Иначе
				Если СтрокаПредмета.Предмет <> Неопределено Тогда
					Строка.ТипФайла = ?(СтрокаПредмета.Предмет.ПометкаУдаления, 11, 10); // Простое изображение листа
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		ДобавитьФайлыВДеревоПриложений(Строка, СтрокаПредмета.Предмет, ОтображатьУдаленныеПриложения);
		МассивПриложений.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВДеревоПриложений(СтрокаПредмета, Предмет, ОтображатьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.Описание,
		|	Файлы.ИндексКартинки,
		|	Файлы.ХранитьВерсии,
		|	Файлы.Редактирует,
		|	Файлы.ПометкаУдаления,
		|	Файлы.ПодписанЭП
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

	Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = Новый Структура(
			"Наименование,
			|Ссылка,
			|ТипФайла,
			|ХранитьВерсии,
			|РедактируетТекущийПользователь,
			|Редактирует,
			|РедактируетДругойПользователь,
			|ИмяПредмета,
			|ОбязательноеЗаполнение,
			|ДоступноУдаление,
			|РольПредмета,
			|ДочерниеЭлементы,
			|ПодписанЭП");
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Описание) Тогда
			Строка.Наименование = Строка.Наименование + ", " + ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		
		Строка.ТипФайла = ВыборкаДетальныеЗаписи.ИндексКартинки;
		Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Строка.ТипФайла = Строка.ТипФайла + 1;
		КонецЕсли;	
		
		Строка.ХранитьВерсии = ВыборкаДетальныеЗаписи.ХранитьВерсии;
		Строка.Редактирует = ВыборкаДетальныеЗаписи.Редактирует;
		Если Не Строка.Редактирует.Пустая() Тогда
			Если Строка.Редактирует = ПользователиКлиентСервер.ТекущийПользователь() Тогда
				Строка.РедактируетТекущийПользователь = Истина;
			Иначе	
				Строка.РедактируетДругойПользователь = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Строка.ПодписанЭП = ВыборкаДетальныеЗаписи.ПодписанЭП;
		
		СтрокаПредмета.ДочерниеЭлементы.Добавить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция HTMLОписаниеЗадачи(Знач РеквизитыЗадачи, ТекущийПользователь, ДополнительныеРеквизиты)
	
	СтрокаПолноеОписаниеЗадачи = РеквизитыЗадачи.Описание;
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) Тогда
		ИсторияВыполнения = РегистрыСведений.ИсторияВыполненияЗадач.ИсторияПоБизнесПроцессу(
			РеквизитыЗадачи.БизнесПроцесс);
		
		Если Не ПустаяСтрока(ИсторияВыполнения) Тогда
			СтрокаПолноеОписаниеЗадачи = 
				СтрокаПолноеОписаниеЗадачи
				+ ?(ЗначениеЗаполнено(СтрокаПолноеОписаниеЗадачи),
					"" + Символы.ПС + Символы.ПС, "")
				+ НСТР("ru = 'История выполнения:'")
				+ Символы.ПС 
				+ "------------------------------------"
				+ Символы.ПС 
				+ ИсторияВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПолноеОписаниеЗадачи = СтрЗаменить(СтрокаПолноеОписаниеЗадачи, Символы.ПС, "<br>");
	
	ТекстHTML = "<html>
	 |<head>  	  	
	 | <style>
	 |  h1 {	 
	 |   font-size: 9pt;	 
	 |	 font-family:MS Shell Dlg; 
	 |  } 
	 |  p {
	 |   font-size: 8pt;	 
	 |	 font-family:MS Shell Dlg; 
	 |  }
	 |	BODY {
	 |	 margin: 0px; 
	 |	 padding: 3px;   	 
	 |	} 
	 | </style>	 
	 |</head>
	 |<body scroll=auto>";

	// Отображаем Кому в мини-карточке, если задача делегирована либо назначена роли.
	ОписаниеИсполнителя = "";
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		Если РеквизитыЗадачи.Исполнитель <> ТекущийПользователь Тогда
			ОписаниеИсполнителя = Строка(РеквизитыЗадачи.Исполнитель);
		КонецЕсли;
	Иначе
		ОписаниеИсполнителя = Строка(РеквизитыЗадачи.РольИсполнителя);
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "<h1>" + РеквизитыЗадачи.Наименование + "</h1>";
	Если ЗначениеЗаполнено(ОписаниеИсполнителя) Тогда
		ОписаниеИсполнителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСТР("ru = 'Кому: %1'"),
			ОписаниеИсполнителя);
			
		ТекстHTML = ТекстHTML + "<p>" + ОписаниеИсполнителя + "</p>";
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Свойство("НомерИтерацииЗадачи") 
		И ДополнительныеРеквизиты.НомерИтерацииЗадачи > 0 Тогда
		
		ИтерацияЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСТР("ru = 'Цикл: %1'"),
			ДополнительныеРеквизиты.НомерИтерацииЗадачи);
			
		ТекстHTML = ТекстHTML + "<p>" + ИтерацияЗадачи + "</p>";
	КонецЕсли;
	
	ТекстHTML = ТекстHTML + "<p>" + СтрокаПолноеОписаниеЗадачи + "</p>";
	ТекстHTML = ТекстHTML + "</body></html>";
	
	Возврат ТекстHTML;

КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРешениеВопросовПереносСрока(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ПредметРассмотрения, НовыйСрок");
		
	РеквизитыПредмета = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыБизнесПроцесса.ПредметРассмотрения,
		"БизнесПроцесс, СрокИсполнения");
	
	// Инициализация реквизитов карточки
	ДополнительныеРеквизиты.Вставить(
		"ПредметРассмотрения",
		РеквизитыБизнесПроцесса.ПредметРассмотрения);
	ДополнительныеРеквизиты.Вставить(
		"БизнесПроцессПредметаРассмотрения",
		РеквизитыПредмета.БизнесПроцесс);
	ДополнительныеРеквизиты.Вставить(
		"ИмяФормыДляОткрытияКарточкиПроцесса",
		"БизнесПроцесс." + 
		РеквизитыПредмета.БизнесПроцесс.Метаданные().Имя + ".ФормаОбъекта");

	ДополнительныеРеквизиты.Вставить("СтарыйСрок", РеквизитыПредмета.СрокИсполнения);
	ДополнительныеРеквизиты.Вставить("НовыйСрок", РеквизитыБизнесПроцесса.НовыйСрок);
	ДополнительныеРеквизиты.Вставить(
		"ДлительностьПереноса",
		ПереносСроковВыполненияЗадач.ПолучитьПодписьДлительностьПереноса(
			ДополнительныеРеквизиты.БизнесПроцессПредметаРассмотрения.Автор,
			ДополнительныеРеквизиты.СтарыйСрок,
			ДополнительныеРеквизиты.НовыйСрок));
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		ДополнительныеРеквизиты.БизнесПроцессПредметаРассмотрения);
		
	ТребуетсяРучноеИзменениеСрока = НЕ МенеджерПроцесса.ВозможноАвтоматическоеИзменениеОбщегоСрока(
		ДополнительныеРеквизиты.БизнесПроцессПредметаРассмотрения);
			
	ДополнительныеРеквизиты.Вставить(
		"ТребуетсяРучноеИзменениеСрока",
		ТребуетсяРучноеИзменениеСрока);
		
	СвойстваЭлементов.Вставить("ДекорацияЗнакВниманиеРучной", Новый Соответствие);
	СвойстваЭлементов.ДекорацияЗнакВниманиеРучной.Вставить("Видимость", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("ДекорацияЗаголовокСсылкаПроцесса", Новый Соответствие);
	СвойстваЭлементов.ДекорацияЗаголовокСсылкаПроцесса.Вставить("Ширина",
		?(ТребуетсяРучноеИзменениеСрока, 0, 8));
	
	СвойстваЭлементов.Вставить("НовыйСрокДата", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокДата.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
	СвойстваЭлементов.Вставить("НовыйСрокВремя", Новый Соответствие);
	СвойстваЭлементов.НовыйСрокВремя.Вставить("ТолькоПросмотр", ТребуетсяРучноеИзменениеСрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"ДатаНачалаМероприятия, ДатаОкончанияМероприятия, МестоПроведения");
	
	ДополнительныеРеквизиты.Вставить(
		"ДатаНачалаМероприятия",
		РеквизитыБизнесПроцесса.ДатаНачалаМероприятия);
	ДополнительныеРеквизиты.Вставить(
		"МестоПроведения",
		РеквизитыБизнесПроцесса.МестоПроведения);
	ДополнительныеРеквизиты.Вставить(
		"ДатаОкончанияМероприятия",
		РеквизитыБизнесПроцесса.ДатаОкончанияМероприятия);
		
	ДополнительныеРеквизиты.Вставить(
		"ИспользоватьРабочийКалендарь",
		ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь"));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОповестить(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс,
		"РезультатПриглашения");
	
	// результат приглашения
	СвойстваЭлементов.Вставить("РезультатПриглашенияОповестить", Новый Соответствие);
	ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияЗадачи",
			РеквизитыБизнесПроцесса.РезультатПриглашения);
	
	Если РеквизитыБизнесПроцесса.РезультатПриглашения = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РеквизитыБизнесПроцесса.РезультатПриглашения = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение подтверждено с указанным местом и временем'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	Иначе
		ДополнительныеРеквизиты.Вставить(
			"РезультатПриглашенияОповестить",
			НСтр("ru = 'Приглашение отменено с указанным местом и временем'"));
		СвойстваЭлементов.РезультатПриглашенияОповестить.Вставить(
			"ЦветТекста",
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиПриглашениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыПриглашения");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыПриглашения = РеквизитыБизнесПроцесса.РезультатыПриглашения.Выгрузить();

	// номер итерации
	СвойстваЭлементов.Вставить("РезультатПриглашения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаПриглашениеОзнакомитьсяКнопкиСтраницы", Новый Соответствие);
		
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат приглашения
	РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками;
	СтрокиИтерации = РезультатыПриглашения.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
	
	ЕстьПринятые = Ложь;
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда 
			ЕстьПринятые = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПринятые Тогда 
		РезультатПриглашенияЗадачи = Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками;
	Иначе	
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда 
				Если Строка.ЯвкаОбязательна Тогда 
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками;
					Прервать;
				Иначе
					РезультатПриглашенияЗадачи = 
						Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// цвет результата
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	Иначе
		
		СвойстваЭлементов.РезультатПриглашения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда 
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринято");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаПринятоОбязательными");
			
	ИначеЕсли РезультатПриглашенияЗадачи = 
		Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками
		Или РезультатПриглашенияЗадачи = 
			Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками Тогда
			
		СвойстваЭлементов.ГруппаПриглашениеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаПриглашениеОзнакомитьсяКнопкиСтраницаНеПринято");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатПриглашенияЗадачи", РезультатПриглашенияЗадачи);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыСогласования");
	
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер итерации	
	СвойстваЭлементов.Вставить("РезультатСогласования", Новый Соответствие);	
	СвойстваЭлементов.Вставить("ГруппаСогласованиеОзнакомитьсяКнопкиСтраницы", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат согласования
	РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано;
	СтрокиИтерации = РезультатыСогласования.НайтиСтроки(
		Новый Структура("НомерИтерации", 
		НомерИтерацииЗадачи));
		
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано;
			Прервать;
		КонецЕсли;
		
		Если Строка.РезультатСогласования = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
			
			РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			
		КонецЕсли;
	КонецЦикла;
	
	// цвет результата
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.Согласовано 
		Или РезультатСогласованияЗадачи = 
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
		
	ИначеЕсли РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		
		СвойстваЭлементов.РезультатСогласования.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
		
	КонецЕсли;
	
	// страница кнопок
	Если РезультатСогласованияЗадачи = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаНеСогласовано");
	Иначе
		СвойстваЭлементов.ГруппаСогласованиеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаСогласованиеОзнакомитьсяКнопкиСтраницаСогласовано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатСогласованияЗадачи", РезультатСогласованияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиСогласованиеСогласовать(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыСогласования");
	
	РезультатыСогласования = РеквизитыБизнесПроцесса.РезультатыСогласования.Выгрузить();
	
	// номер цикла
	НомерИтерацииЗадачи = 0;	
	НайденнаяСтрока = РезультатыСогласования.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	
	ПодписыватьЭП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
		РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП");
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждение(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	Если НЕ (ТипЗнч(РеквизитыЗадачи) = Тип("Структура")
		И РеквизитыЗадачи.Свойство("БизнесПроцесс")) Тогда
		Возврат;
	КонецЕсли;
	
	ПодписыватьЭП = 
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП");
	
	Если НЕ ЗначениеЗаполнено(ПодписыватьЭП) Тогда
		ПодписыватьЭП = Ложь;
	КонецЕсли;
	
	ПодписыватьЭП = ПодписыватьЭП
		И РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование();
		
	ДополнительныеРеквизиты.Вставить("ПодписыватьРезультатВыполненияЭП", ПодписыватьЭП);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиУтверждениеОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыУтверждения");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыУтверждения = РеквизитыБизнесПроцесса.РезультатыУтверждения.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатУтверждения", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаУтверждениеОзнакомитьсяКнопкиСтраницы", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат утверждения
	РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено;
	СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
			РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.Утверждено Тогда
		СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			СвойстваЭлементов.РезультатУтверждения.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;

	// страница кнопок
	Если РезультатУтвержденияЗадачи = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаНеУтверждено");
	Иначе
		СвойстваЭлементов.ГруппаУтверждениеОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаУтверждениеОзнакомитьсяКнопкиСтраницаУтверждено");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатУтвержденияЗадачи", РезультатУтвержденияЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРегистрацияОзнакомиться(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		РеквизитыЗадачи.БизнесПроцесс, 
		"РезультатыОзнакомлений, РезультатыРегистрации");
		
	РезультатыОзнакомлений = РеквизитыБизнесПроцесса.РезультатыОзнакомлений.Выгрузить();
	РезультатыРегистрации = РеквизитыБизнесПроцесса.РезультатыРегистрации.Выгрузить();
	
	// номер итерации
	СвойстваЭлементов.Вставить("РезультатРегистрации", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаРегистрацияОзнакомитьсяКнопкиСтраницы", Новый Соответствие);
	СвойстваЭлементов.Вставить("ГруппаРегистрацияОзнакомитьсяКомментарий", Новый Соответствие);
	
	НомерИтерацииЗадачи = 0;
	НайденнаяСтрока = РезультатыОзнакомлений.Найти(
		Задача, 
		"ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
	КонецЕсли;
	
	// результат регистрации
	РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано;
	СтрокиИтерации = РезультатыРегистрации.НайтиСтроки(
		Новый Структура("НомерИтерации",
		НомерИтерацииЗадачи));
	Для Каждого Строка Из СтрокиИтерации Цикл
		Если Строка.РезультатРегистрации = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда 
			РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// цвет надписи
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
		СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи);
	ИначеЕсли РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
			СвойстваЭлементов.РезультатРегистрации.Вставить(
			"ЦветТекста", 
			ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	КонецЕсли;
	
	// страница кнопок
	Если РезультатРегистрацииЗадачи = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаНеЗарегистрировано");
	Иначе
		СвойстваЭлементов.ГруппаРегистрацияОзнакомитьсяКнопкиСтраницы.Вставить(
			"ТекущаяСтраница",
			"ГруппаРегистрацияОзнакомитьсяКнопкиСтраницаЗарегистрировано");
	КонецЕсли;
	
	ДополнительныеРеквизиты.Вставить("НомерИтерацииЗадачи", НомерИтерацииЗадачи);
	ДополнительныеРеквизиты.Вставить("РезультатРегистрацииЗадачи", РезультатРегистрацииЗадачи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиИсполненияПроверить(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	СвойстваЭлементов.Вставить("КомментарийИсполненияПроверяющий", Новый Соответствие);
	
	СписокПроверяемыхСтрок =
		ПолучитьСтрокиТабЧастиРезультатыПроверкиДляЗадачиПроверяющего(
			Задача);
			
	КоличествоСтрок = СписокПроверяемыхСтрок.Количество();
	
	ДоступностьКомментария = Ложь;
	
	Если КоличествоСтрок = 1 Тогда
		ДоступностьКомментария = Истина
	КонецЕсли;
	
	СвойстваЭлементов.КомментарийИсполненияПроверяющий.Вставить(
			"Доступность",
			ДоступностьКомментария);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотрено(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителяПредметы.Предмет
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ЗадачаИсполнителяПредметы.Предмет.ВидДокумента.ПодписыватьРезолюцииЭП = ИСТИНА
		|	И ЗадачаИсполнителяПредметы.Ссылка = &Задача";
		
	Запрос.УстановитьПараметр("Задача", Задача);
	ПодписыватьРезультатВыполненияЭП = НЕ Запрос.Выполнить().Пустой();
	
	ДополнительныеРеквизиты.Вставить(
		"ПодписыватьРезультатВыполненияЭП", ПодписыватьРезультатВыполненияЭП);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыИСвойстваЗадачиРассмотреноОбработано(Задача, Знач РеквизитыЗадачи, ДополнительныеРеквизиты, СвойстваЭлементов)
	
	СвойстваЭлементов.Вставить("Обработано", Новый Соответствие);
	
	ДоступностьКнопкиОбработано = Ложь;
	
	ВедущийБизнесПроцесс = Задача.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс;
	Если НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВнутреннегоДокумента")
		И НЕ ТипЗнч(ВедущийБизнесПроцесс) = Тип("БизнесПроцессСсылка.ОбработкаВходящегоДокумента") Тогда
		
		ДоступностьКнопкиОбработано = Истина;
		
	КонецЕсли;
	
	СвойстваЭлементов.Обработано.Вставить("Доступность", ДоступностьКнопкиОбработано);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОбластиПросмотраЗадачи(Элементы, НеПоказыватьОбластьПросмотраЗадачи)
		
	Элементы.СтраницыПросмотрЗадачи.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ДекорацияРазделительОбластиПросмотра.Видимость = Не НеПоказыватьОбластьПросмотраЗадачи;
	Элементы.ПоказатьОбластьПросмотраЗадачи.Пометка = Не НеПоказыватьОбластьПросмотраЗадачи;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДанныхЗадачи(Элементы, ПоказыватьДанныеЗадачи)
	
	Если ПоказыватьДанныеЗадачи Тогда
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаПросмотрЗадачи;
	Иначе
		Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуНетЗадачи()
	
	ТекущийЭлемент = Элементы.ЗадачиМне;
	
	Элементы.СтраницыПросмотрЗадачи.ТекущаяСтраница = Элементы.СтраницаНетЗадачи;
	
КонецПроцедуры	

&НаКлиенте
Процедура СгруппироватьЗадачиМнеПоВиду(НовыйВидГруппировки)
	
	Если ЗадачиМнеВидГруппировки = НовыйВидГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиМнеВидГруппировки = НовыйВидГруппировки;
	
	УстановитьГруппировкуЗадачМне(ЭтаФорма);
	
	ОбновитьСписокЗадачМне();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировкуЗадачМне(ЭтаФорма)
	
	ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьСгруппироватьПоБезГруппировки.Пометка = Ложь;
	ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Ложь;
	
	ЭтаФорма.Элементы.СписокАвтор.Видимость = Истина;
	ЭтаФорма.Элементы.ЗадачиМнеАвтор.Видимость = Истина;
	ЭтаФорма.Элементы.СтраницыГруппировки.Видимость = Истина;
	
	Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
		ЭтаФорма.Элементы.СписокСгруппироватьПоАвтору.Пометка = Истина;
		ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаАвторы;
		ЭтаФорма.Элементы.ЗадачиМнеАвтор.Видимость = Ложь;
		ЭтаФорма.Элементы.СписокАвтор.Видимость = Ложь;
	ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
		ЭтаФорма.Элементы.СписокСгруппироватьПоПроекту.Пометка = Истина;
		ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаПроекты;
	ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
		ЭтаФорма.Элементы.СписокСгруппироватьПоТочкеМаршрута.Пометка = Истина;
		ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаТочкиМаршрута;
	ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
		ЭтаФорма.Элементы.СписокСгруппироватьПоФлагу.Пометка = Истина;
		ЭтаФорма.Элементы.СтраницыГруппировки.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФлаги;
	ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "" Тогда
		ЭтаФорма.Элементы.СписокСгруппироватьСгруппироватьПоБезГруппировки.Пометка = Истина;
		ЭтаФорма.Элементы.СтраницыГруппировки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачМне()
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		ОбновитьСписокВыполненныхЗадачМнеСервер();
	Иначе
		ОбновитьДеревоЗадачМнеСервер();
	КонецЕсли;
	
	УстановитьТекущееЗначениеГруппировкиЗадачМне();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыполненныхЗадачМнеСервер()
	
	СформироватьГруппировкиЗадачМне();
	Элементы.ЗадачиМнеСписок.Обновить();
	ОбновитьИтогиПоЗадачамМне();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееЗначениеГруппировкиЗадачМне()
	
	УстановитьПараметрыГруппировокПриАктивизации = Ложь;
	
	Если ЗадачиМнеВидГруппировки = "Автор" Тогда
		Если ЗадачиМнеТекущийАвтор <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Автор", ЗадачиМнеТекущийАвтор);
			НайденныеСтроки = ЗадачиМнеАвторы.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийАвтор = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеАвторы.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				УстановитьПараметрыГруппировокПриАктивизации = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" Тогда
		Если ЗадачиМнеТекущийПроект <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Проект", ЗадачиМнеТекущийПроект);
			НайденныеСтроки = ЗадачиМнеПроекты.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийПроект = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеПроекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				УстановитьПараметрыГруппировокПриАктивизации = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
		Если ЗадачиМнеТекущаяТочкаМаршрута <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ТочкаМаршрута", ЗадачиМнеТекущаяТочкаМаршрута);
			НайденныеСтроки = ЗадачиМнеТочкиМаршрута.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущаяТочкаМаршрута = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеТочкиМаршрута.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				УстановитьПараметрыГруппировокПриАктивизации = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" Тогда
		Если ЗадачиМнеТекущийФлаг <> Неопределено Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Флаг", ЗадачиМнеТекущийФлаг);
			НайденныеСтроки = ЗадачиМнеФлаги.НайтиСтроки(ПараметрыПоиска);
			ЗадачиМнеТекущийФлаг = Неопределено;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗадачиМнеФлаги.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
				УстановитьПараметрыГруппировокПриАктивизации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УстановитьПараметрыГруппировокПриАктивизации Тогда
		УстановитьПараметрыГруппировокВЗадачахМне();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировокВЗадачахМне()
	
	УстановитьПараметрыГруппировокВЗадачахМнеСервер(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыГруппировокВЗадачахМнеСервер(ЭтаФорма)
	
	Если ЭтаФорма.ЗадачиМнеПоказыватьВыполненные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Автор",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Проект",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"ТочкаМаршрута",
			Неопределено,
			Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЭтаФорма.ЗадачиМнеСписок,
			"Флаг",
			Неопределено,
			Ложь);
			
		Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
			
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЭтаФорма.ЗадачиМнеСписок,
					"Автор",
					ЭтаФорма.ЗадачиМнеТекущийАвтор);
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЭтаФорма.ЗадачиМнеСписок,
					"Проект",
					ЭтаФорма.ЗадачиМнеТекущийПроект);
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
					
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ЭтаФорма.ЗадачиМнеСписок,
				"ТочкаМаршрута",
				ЭтаФорма.ЗадачиМнеТекущаяТочкаМаршрута);
		ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
					
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ЭтаФорма.ЗадачиМнеСписок,
				"Флаг",
				ЭтаФорма.ЗадачиМнеТекущийФлаг);
		КонецЕсли;
	Иначе
		ЗадачиЭлементы = ЭтаФорма.ЗадачиМнеПолный.ПолучитьЭлементы();
		
		ЭтаФорма.ЗадачиМне.ПолучитьЭлементы().Очистить();
		
		Для Каждого Задача Из ЗадачиЭлементы Цикл
			
			ПоказыватьЗадачу = Истина;
			Если ЭтаФорма.ЗадачиМнеВидГруппировки = "Автор" Тогда
				ПоказыватьЗадачу = Задача.Автор = ЭтаФорма.ЗадачиМнеТекущийАвтор;
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Проект" Тогда
				ПоказыватьЗадачу = Задача.Проект = ЭтаФорма.ЗадачиМнеТекущийПроект;
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
				ПоказыватьЗадачу = Задача.ТочкаМаршрута = ЭтаФорма.ЗадачиМнеТекущаяТочкаМаршрута;
			ИначеЕсли ЭтаФорма.ЗадачиМнеВидГруппировки = "Флаг" Тогда
				ПоказыватьЗадачу = Задача.Флаг = ЭтаФорма.ЗадачиМнеТекущийФлаг;
			КонецЕсли;
			
			Если ПоказыватьЗадачу Тогда
				СкопироватьУзелДерева(Задача, ЭтаФорма.ЗадачиМне);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма.ЗадачиМнеТекущаяЗадача <> Неопределено 
			И НЕ ЭтаФорма.ЗадачиМнеТекущаяЗадача.Пустая() Тогда
			Задача = ЭтаФорма.ЗадачиМнеТекущаяЗадача;
			ЭтаФорма.ЗадачиМнеТекущаяЗадача = Неопределено;
			
			УстановитьТекущийОбъектВДеревеПоСсылке(
				ЭтаФорма.Элементы.ЗадачиМне, ЭтаФорма.ЗадачиМне, Задача, ЭтаФорма.ЗадачиМнеТекущийИндекс);
		Иначе
			// Выделить первую задачу в списке
			КоллекцияЗадач = ЭтаФорма.ЗадачиМне.ПолучитьЭлементы();
			Если КоллекцияЗадач.Количество() > 0 Тогда
				ЭтаФорма.Элементы.ЗадачиМне.ТекущаяСтрока = 
					КоллекцияЗадач[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьУзелДерева(УзелИсточник, УзелПриемник)

	НоваяСтрока = УзелПриемник.ПолучитьЭлементы().Добавить();

	ЗаполнитьЗначенияСвойств(НоваяСтрока, УзелИсточник);

	Для Каждого ПодчиненнаяСтрока Из УзелИсточник.ПолучитьЭлементы() Цикл
		СкопироватьУзелДерева(ПодчиненнаяСтрока, НоваяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗадачМнеСервер()
	
	ДеревоЗадач = РеквизитФормыВЗначение("ЗадачиМне");
	ДеревоЗадач.Строки.Очистить();
	
	СформироватьДеревоЗадачМне(ДеревоЗадач);
	
	СформироватьГруппировкиЗадачМне(ДеревоЗадач);
	
	Если ПустаяСтрока(ЗадачиМнеСортироватьПо) Тогда
		ЗадачиМнеСортироватьПо = "СрокИсполнения";
		ЗадачиМнеНаправлениеСортировки = "Возр";
	КонецЕсли;
	
	ДеревоЗадач.Строки.Сортировать(
		ЗадачиМнеСортироватьПо + " " + ЗадачиМнеНаправлениеСортировки,
		Ложь);
	
	ЗначениеВДанныеФормы(ДеревоЗадач, ЗадачиМнеПолный);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьГруппировкиЗадачМне(ДеревоЗадач = Неопределено)
	
	Если ЗадачиМнеВидГруппировки = "Автор" Тогда
		СформироватьСписокАвторов(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "Проект" Тогда
		СформироватьСписокПроектов(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "ТочкаМаршрута" Тогда
		СформироватьСписокТочекМаршрута(ДеревоЗадач);
	ИначеЕсли ЗадачиМнеВидГруппировки = "Флаг" Тогда
		СформироватьСписокФлагов(ДеревоЗадач);
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево задач в списке задачи мне
&НаСервере
Процедура СформироватьДеревоЗадачМне(Дерево)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбластиДелегированияПравСостав.Ссылка,
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных
		|ПОМЕСТИТЬ ОбластиСЗадачами
		|ИЗ
		|	Справочник.ОбластиДелегированияПрав.Состав КАК ОбластиДелегированияПравСостав
		|ГДЕ
		|	ОбластиДелегированияПравСостав.ОбъектМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Задачи)
		|	И НЕ ОбластиДелегированияПравСостав.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДелегированиеПравПользователям.ОтКого КАК Исполнитель,
		|	НЕОПРЕДЕЛЕНО КАК ОсновнойОбъектАдресации,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ ИсполнителиЗадач
		|ИЗ
		|	Справочник.ДелегированиеПрав КАК ДелегированиеПравПользователям
		|ГДЕ
		|	ДелегированиеПравПользователям.Кому = &ТекущийПользователь
		|	И ДелегированиеПравПользователям.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.ВсеПрава)
		|	И НЕ ДелегированиеПравПользователям.ПометкаУдаления
		|	И ДелегированиеПравПользователям.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.ОтКого,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Справочник.ДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбластиСЗадачами КАК ОбластиСЗадачами
		|		ПО ДелегированиеПравОбластиДелегирования.ОбластьДелегирования = ОбластиСЗадачами.Ссылка
		|ГДЕ
		|	ДелегированиеПравОбластиДелегирования.Ссылка.Кому = &ТекущийПользователь
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.ВариантДелегирования = ЗНАЧЕНИЕ(Перечисление.ВариантыДелегированияПрав.Выборочно)
		|	И НЕ ДелегированиеПравОбластиДелегирования.Ссылка.ПометкаУдаления
		|	И ДелегированиеПравОбластиДелегирования.Ссылка.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ТекущийПользователь,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсполнителиЗадач.РольИсполнителя,
		|	ИсполнителиЗадач.ОсновнойОбъектАдресации,
		|	ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель = &ТекущийПользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.ПредметСтрокой,
		|	ЗадачаИсполнителя.Проект,
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ЗадачаИсполнителя.Важность
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ЗадачаИсполнителя.ТекущийИсполнитель = ИсполнителиЗадач.Исполнитель
		|			И ЗадачаИсполнителя.ТекущийОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ЗадачаИсполнителя.ТекущийДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|ГДЕ
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|;
		|
		|%2
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.ПредметСтрокой,
		|	ЗадачаИсполнителя.Проект,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|			ТОГДА &ИмяГруппыБезПроекта
		|		ИНАЧЕ ЗадачаИсполнителя.Проект.Представление
		|	КОНЕЦ КАК ПредставлениеПроекта,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ИСТИНА КАК Показывать,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочена,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачаИсполнителя.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ
		|					1 КАК Поле1
		|				ИЗ
		|					РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|				ГДЕ
		|					ДочерниеБизнесПроцессы.СвязующаяЗадача = ЗадачаИсполнителя.Ссылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьАктивныеПроцессы,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.ТекущийИсполнитель = &ТекущийПользователь
		|			ТОГДА -1
		|		КОГДА ЗадачаИсполнителя.ТекущийИсполнитель ССЫЛКА Справочник.Пользователи
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК Картинка,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача
		|ИЗ
		|	ЗадачиСRLS КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачаИсполнителя.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачаИсполнителя.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиМнеВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА Задачи.Выполнена = ЛОЖЬ
		|						И Задачи.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И Задачи.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиМнеПросроченные
		|ИЗ
		|	ЗадачиСRLS КАК Задачи";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
	
	Если ИспользоватьОграниченияПравДоступа Тогда
		ИндексРезультата = 3;
		ИмяВТЗадачи = "Задачи";
		ОграничениеRLS = 
			"////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Задачи.Ссылка,
			|	Задачи.Дата,
			|	Задачи.Наименование,
			|	Задачи.СрокИсполнения,
			|	Задачи.ПринятаКИсполнению,
			|	Задачи.Выполнена,
			|	Задачи.Автор,
			|	Задачи.БизнесПроцесс,
			|	Задачи.ТочкаМаршрута,
			|	Задачи.ПредметСтрокой,
			|	Задачи.Проект,
			|	Задачи.Исполнитель,
			|	Задачи.ТекущийИсполнитель,
			|	Задачи.Важность
			|ПОМЕСТИТЬ ЗадачиСRLS
			|ИЗ
			|	Задачи КАК Задачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|			ПО УчастникиПроцессов.Участник = СоставСубъектовПравДоступа.Субъект
			|				И УчастникиПроцессов.ОсновнойОбъектАдресации = СоставСубъектовПравДоступа.ОсновнойОбъектАдресации
			|				И УчастникиПроцессов.ДополнительныйОбъектАдресации = СоставСубъектовПравДоступа.ДополнительныйОбъектАдресации
			|		ПО Задачи.БизнесПроцесс = УчастникиПроцессов.Процесс
			|ГДЕ
			|	СоставСубъектовПравДоступа.Пользователь = &ТекущийПользователь
			|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи"")
			|;";
	Иначе
		ИндексРезультата = 2;
		ИмяВТЗадачи = "ЗадачиСRLS";
		ОграничениеRLS = "";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяВТЗадачи,
		ОграничениеRLS);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗадач = Результат[ИндексРезультата + 1].Выгрузить();
	
	ЗадачиВДереве = Новый Соответствие;
	ВложенныеЗадачи = Новый Массив;
	
	// Заполнение корневых задач
	Для Каждого Строка Из ТаблицаЗадач Цикл
		Если ЗначениеЗаполнено(Строка.ГлавнаяЗадача) Тогда
			ВложенныеЗадачи.Добавить(Строка);
		Иначе
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
			ЭтоКорневаяЗадача = Истина;
			ЗадачиВДереве.Вставить(Строка.Ссылка, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение вложенных задач
	Для Каждого СтрокаВложеннойЗадачи Из ВложенныеЗадачи Цикл
		СтрокаКорневойЗадачи = ЗадачиВДереве.Получить(СтрокаВложеннойЗадачи.ГлавнаяЗадача);
		Если СтрокаКорневойЗадачи = Неопределено Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаКорневойЗадачи.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаВложеннойЗадачи);
		ЗадачиВДереве.Вставить(СтрокаВложеннойЗадачи.Ссылка, СтрокаДерева);
	КонецЦикла;
	
	// Заполнение статистики по задачам
	Выборка = Результат[ИндексРезультата + 2].Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	
КонецПроцедуры

// Формирует список авторов при группировки по авторам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокАвторов(ДеревоЗадач)
	
	ТаблицаАвторы = РеквизитФормыВЗначение("ЗадачиМнеАвторы");
	
	ТаблицаАвторы.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПоИсполнителю.Автор,
			|	ЗадачиПоИсполнителю.Автор.Представление КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(, ) КАК ЗадачиПоИсполнителю
			|ГДЕ
			|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
			|	И НЕ ЗадачиПоИсполнителю.ИсключенаИзПроцесса
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиПоИсполнителю.Автор,
			|	ЗадачиПоИсполнителю.Автор.Представление";
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаАвтора = ТаблицаАвторы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАвтора, Выборка);
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаАвтора.Количество;
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаАвтора = ТаблицаАвторы.Найти(Задача.Автор, "Автор");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаАвтора = Неопределено Тогда
				СтрокаАвтора = ТаблицаАвторы.Добавить();
				СтрокаАвтора.Автор = Задача.Автор;
				СтрокаАвтора.Представление = Строка(Задача.Автор);
				СтрокаАвтора.Количество = КоличествоЭлементов;
			Иначе
				СтрокаАвтора.Количество = СтрокаАвтора.Количество 
				+ КоличествоЭлементов;
			КонецЕсли;
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + КоличествоЭлементов;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаАвторы.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаАвторы, "ЗадачиМнеАвторы");
	
КонецПроцедуры

// Формирует список проектов при группировки по проектам в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокПроектов(ДеревоЗадач)
	
	ТаблицаПроекты = РеквизитФормыВЗначение("ЗадачиМнеПроекты");
	
	ТаблицаПроекты.Очистить();
	
	ОбщееКоличествоЗадач = 0;
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПоИсполнителю.Проект,
			|	ВЫБОР
			|		КОГДА ЗадачиПоИсполнителю.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
			|			ТОГДА &ИмяГруппыБезПроекта
			|		ИНАЧЕ ЗадачиПоИсполнителю.Проект.Представление
			|	КОНЕЦ КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(, ) КАК ЗадачиПоИсполнителю
			|ГДЕ
			|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
			|	И НЕ ЗадачиПоИсполнителю.ИсключенаИзПроцесса
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиПоИсполнителю.Проект,
			|	ВЫБОР
			|		КОГДА ЗадачиПоИсполнителю.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
			|			ТОГДА &ИмяГруппыБезПроекта
			|		ИНАЧЕ ЗадачиПоИсполнителю.Проект.Представление
			|	КОНЕЦ";
			
		Запрос.УстановитьПараметр("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаПроекта = ТаблицаПроекты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроекта, Выборка);
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + СтрокаПроекта.Количество;
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаПроекта = ТаблицаПроекты.Найти(Задача.Проект, "Проект");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаПроекта = Неопределено Тогда
				СтрокаПроекта = ТаблицаПроекты.Добавить();
				СтрокаПроекта.Проект = Задача.Проект;
				СтрокаПроекта.Представление = Задача.ПредставлениеПроекта;
				СтрокаПроекта.Количество = КоличествоЭлементов;
			Иначе
				СтрокаПроекта.Количество = СтрокаПроекта.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;		
			
			ОбщееКоличествоЗадач = ОбщееКоличествоЗадач + КоличествоЭлементов;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПроекты.Сортировать("Представление Возр");
	
	ЗначениеВРеквизитФормы(ТаблицаПроекты, "ЗадачиМнеПроекты");
	
КонецПроцедуры

// Формирует список точек маршрута при группировки по точке маршрута в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокТочекМаршрута(ДеревоЗадач)

	ТаблицаТочкиМаршрута = РеквизитФормыВЗначение("ЗадачиМнеТочкиМаршрута");
	
	ТаблицаТочкиМаршрута.Очистить();
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПоИсполнителю.ТочкаМаршрута,
			|	ЗадачиПоИсполнителю.ТочкаМаршрута.Представление КАК Представление,
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(, ) КАК ЗадачиПоИсполнителю
			|ГДЕ
			|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
			|	И НЕ ЗадачиПоИсполнителю.ИсключенаИзПроцесса
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиПоИсполнителю.ТочкаМаршрута,
			|	ЗадачиПоИсполнителю.ТочкаМаршрута.Представление";
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТочкиМаршрута, Выборка);
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Найти(Задача.ТочкаМаршрута, "ТочкаМаршрута");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаТочкиМаршрута = Неопределено Тогда
				СтрокаТочкиМаршрута = ТаблицаТочкиМаршрута.Добавить();
				СтрокаТочкиМаршрута.ТочкаМаршрута = Задача.ТочкаМаршрута;
				СтрокаТочкиМаршрута.Представление = Строка(Задача.ТочкаМаршрута);
				СтрокаТочкиМаршрута.Количество = КоличествоЭлементов;
			Иначе
				СтрокаТочкиМаршрута.Количество = СтрокаТочкиМаршрута.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаТочкиМаршрута.Сортировать("Представление Возр");

	ЗначениеВРеквизитФормы(ТаблицаТочкиМаршрута, "ЗадачиМнеТочкиМаршрута");
	
КонецПроцедуры

// Формирует список флагов при группировки по флагу в списке задачи мне
//
&НаСервере
Процедура СформироватьСписокФлагов(ДеревоЗадач)
	
	ТаблицаФлагов = РеквизитФормыВЗначение("ЗадачиМнеФлаги");
	
	ТаблицаФлагов.Очистить();
	
	БезФлага = НСтр("ru = 'Без флага'");
	
	Если ЗадачиМнеПоказыватьВыполненные Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПоИсполнителю.Ссылка КАК Задача,
			|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
			|	ВЫБОР
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
			|			ТОГДА 1
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
			|			ТОГДА 2
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
			|			ТОГДА 3
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
			|			ТОГДА 4
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
			|			ТОГДА 5
			|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
			|			ТОГДА 6
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НомерФлага
			|ПОМЕСТИТЬ Задачи
			|ИЗ
			|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(, ) КАК ЗадачиПоИсполнителю
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
			|		ПО ЗадачиПоИсполнителю.Ссылка = ФлагиОбъектов.Объект
			|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
			|ГДЕ
			|	ЗадачиПоИсполнителю.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И НЕ ЗадачиПоИсполнителю.ПометкаУдаления
			|	И НЕ ЗадачиПоИсполнителю.ИсключенаИзПроцесса
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Задача) КАК Количество,
			|	Задачи.Флаг КАК Флаг,
			|	ВЫБОР
			|		КОГДА Задачи.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)
			|			ТОГДА &БезФлага
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Задачи.Флаг)
			|	КОНЕЦ КАК Представление,
			|	Задачи.НомерФлага
			|ИЗ
			|	Задачи КАК Задачи
			|
			|СГРУППИРОВАТЬ ПО
			|	Задачи.Флаг,
			|	Задачи.НомерФлага";
			
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
		Запрос.УстановитьПараметр("БезФлага", БезФлага);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицыФлагов = ТаблицаФлагов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФлагов, Выборка);
		КонецЦикла;
	Иначе
		Для Каждого Задача Из ДеревоЗадач.Строки Цикл
			СтрокаТаблицыФлагов = ТаблицаФлагов.Найти(Задача.Флаг, "Флаг");
			
			КоличествоЭлементов = ПолучитьКоличествоЭлементовВУзлеДерева(Задача);
			
			Если СтрокаТаблицыФлагов = Неопределено Тогда
				СтрокаТаблицыФлагов = ТаблицаФлагов.Добавить();
				СтрокаТаблицыФлагов.Флаг = Задача.Флаг;
				
				Если ЗначениеЗаполнено(Задача.Флаг) Тогда
					СтрокаТаблицыФлагов.Представление = Строка(Задача.Флаг);
				Иначе
					СтрокаТаблицыФлагов.Представление = БезФлага;
				КонецЕсли;
				
				СтрокаТаблицыФлагов.Количество = КоличествоЭлементов;
				СтрокаТаблицыФлагов.НомерФлага = РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(Задача.Флаг);
			Иначе
				СтрокаТаблицыФлагов.Количество = СтрокаТаблицыФлагов.Количество 
					+ КоличествоЭлементов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаФлагов.Сортировать("НомерФлага Возр");

	ЗначениеВРеквизитФормы(ТаблицаФлагов, "ЗадачиМнеФлаги");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭлементовВУзлеДерева(Узел);
	
	Количество = 1;
	
	Для каждого Элемент Из Узел.Строки Цикл
		Количество = Количество + ПолучитьКоличествоЭлементовВУзлеДерева(Элемент);
	КонецЦикла; 
	
	Возврат Количество;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыГруппировокВЗадачахОтМеня()

	УстановитьПараметрыГруппировокВЗадачахОтМеняСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыГруппировокВЗадачахОтМеняСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня, "Исполнитель", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня, "ОсновнойОбъектАдресации", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня, "ДополнительныйОбъектАдресации", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня, "Проект", Неопределено, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня, "Флаг", Неопределено, Ложь);
				
	Если ЗадачиОтМеняВидГруппировки = "Исполнитель" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЗадачиОтМеня, "Исполнитель", ЗадачиОтМеняТекущийИсполнитель);
		Если ТипЗнч(ЗадачиОтМеняТекущийИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если ЗначениеЗаполнено(ЗадачиОтМеняОсновнойОбъектАдресации) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЗадачиОтМеня, "ОсновнойОбъектАдресации", ЗадачиОтМеняОсновнойОбъектАдресации);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗадачиОтМеняДополнительныйОбъектАдресации) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					ЗадачиОтМеня, "ДополнительныйОбъектАдресации", ЗадачиОтМеняДополнительныйОбъектАдресации);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Проект" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЗадачиОтМеня, "Проект", ЗадачиОтМеняТекущийПроект);
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Флаг" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			ЗадачиОтМеня, "Флаг", ЗадачиОтМеняТекущийФлаг);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиОтМеня

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокАдресов(ПользовательСсылка, СписокПочтовыхАдресов)
	
	ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		ПользовательСсылка,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
	Если ТаблицаКонтактовEmail.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресПользователя = ТаблицаКонтактовEmail[0].Значение;
	
	АдресИнфо = Новый Структура("Контакт, Адрес, ОтображаемоеИмя",
		ПользовательСсылка, АдресПользователя, Строка(ПользовательСсылка));
		
	СписокПочтовыхАдресов.Добавить(АдресИнфо);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачОтМеня()

	Если ЗадачиОтМеняВидГруппировки = "Исполнитель" Тогда
		ЗадачиОтМеняТекущийИсполнитель = Неопределено;
		Элементы.ЗадачиОтМеняИсполнители.Обновить();
		Элементы.ЗадачиОтМеня.Обновить();
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Проект" Тогда
		ЗадачиОтМеняТекущийПроект = Неопределено;
		Элементы.ЗадачиОтМеняПроекты.Обновить();
		Элементы.ЗадачиОтМеня.Обновить();
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Флаг" Тогда
		ЗадачиОтМеняТекущийФлаг = Неопределено;
		Элементы.ЗадачиОтМеняФлаги.Обновить();
		СписокЗадачОбновлен = Ложь;
		УстановитьПараметрыГруппировокВЗадачахОтМеняПриВыбореФлага(СписокЗадачОбновлен);
		Если Не СписокЗадачОбновлен Тогда
			Элементы.ЗадачиОтМеня.Обновить();
		КонецЕсли;
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "" Тогда
		УстановитьПараметрыГруппировокВЗадачахОтМеня();
		Элементы.ЗадачиОтМеня.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗадачиОтМеня()

	Элементы.ЗадачиОтМеняПоказатьВыполненные.Пометка = ЗадачиОтМеняПоказыватьВыполненные;
	
	Элементы.ЗадачиОтМеняРезультатЗавершения.Видимость = ЗадачиОтМеняПоказыватьВыполненные;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеня,
		"Выполнена",
		Ложь,
		Не ЗадачиОтМеняПоказыватьВыполненные);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеняИсполнители, 
		"Выполнена",
		Ложь,
		Не ЗадачиОтМеняПоказыватьВыполненные);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеняПроекты, 
		"Выполнена",
		Ложь,
		Не ЗадачиОтМеняПоказыватьВыполненные);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ЗадачиОтМеняФлаги, 
		"Выполнена",
		Ложь,
		Не ЗадачиОтМеняПоказыватьВыполненные);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьЗадачиОтМеняПоВиду(НовыйВидГруппировки)
	
	Если ЗадачиОтМеняВидГруппировки = НовыйВидГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиОтМеняВидГруппировки = НовыйВидГруппировки;
	
	ПараметрыКомпоновки = Новый Структура("Исполнитель, РольИсполнителя, Проект, Флаг");
	Для Каждого ИмяПараметра Из ПараметрыКомпоновки Цикл
		Параметр = ЗадачиОтМеня.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра.Ключ));
		Если Параметр <> Неопределено И Параметр.Использование Тогда 
			Параметр.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;

	ЗадачиОтМеняТекущийИсполнитель = Неопределено;
	ЗадачиОтМеняТекущийПроект = Неопределено;
	ЗадачиОтМеняТекущийФлаг = Неопределено;
	
	УстановитьГруппировкуЗадачОтМеня(Элементы, ЗадачиОтМеняВидГруппировки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГруппировкуЗадачОтМеня(Элементы, ЗадачиОтМеняВидГруппировки)
	
	Элементы.ЗадачиОтМеняСгруппироватьПоИсполнителю.Пометка = Ложь;
	Элементы.ЗадачиОтМеняСгруппироватьПоПроекту.Пометка = Ложь;
	Элементы.ЗадачиОтМеняСгруппироватьПоБезГруппировки.Пометка = Ложь;
	Элементы.ЗадачиОтМеняСгруппироватьПоФлагу.Пометка = Ложь;
	
	Элементы.СтраницыГруппировкиОтМеня.Видимость = Истина;
	
	Элементы.ГруппаЗадачиОтМеняИсполнитель.Видимость = Истина;
	
	Если ЗадачиОтМеняВидГруппировки = "Исполнитель" Тогда
		Элементы.ЗадачиОтМеняСгруппироватьПоИсполнителю.Пометка = Истина;
		Элементы.ГруппаЗадачиОтМеняИсполнитель.Видимость = Ложь;
		
		Элементы.СтраницыГруппировкиОтМеня.ТекущаяСтраница = Элементы.СтраницаОтМеняИсполнители;
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Проект" Тогда
		Элементы.ЗадачиОтМеняСгруппироватьПоПроекту.Пометка = Истина;
		
		Элементы.СтраницыГруппировкиОтМеня.ТекущаяСтраница = Элементы.СтраницаОтМеняПроекты;
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "Флаг" Тогда
		Элементы.ЗадачиОтМеняСгруппироватьПоФлагу.Пометка = Истина;
		
		Элементы.СтраницыГруппировкиОтМеня.ТекущаяСтраница = Элементы.СтраницаОтМеняФлаги;
	ИначеЕсли ЗадачиОтМеняВидГруппировки = "" Тогда
		Элементы.ЗадачиОтМеняСгруппироватьПоБезГруппировки.Пометка = Истина;
		Элементы.СтраницыГруппировкиОтМеня.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыГруппировокВЗадачахОтМеняПриВыбореФлага(СписокЗадачОбновлен = Ложь)
	
	Если Элементы.ЗадачиОтМеняФлаги.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекущийФлаг = Элементы.ЗадачиОтМеняФлаги.ТекущиеДанные.Флаг;
	
	Если ЗадачиОтМеняВидГруппировки = "Флаг"
		И НовыйТекущийФлаг <> Неопределено
		И НовыйТекущийФлаг <> ЗадачиОтМеняТекущийФлаг Тогда
		
		ЗадачиОтМеняТекущийФлаг = НовыйТекущийФлаг;
		
		ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировокВЗадачахОтМеня", 0.2, Истина);
		
		СписокЗадачОбновлен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автообновление

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"Автообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьРезультатВыполнения =
			Элементы.ЗадачиМне.ТекущиеДанные = Неопределено;
		ОбновитьСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ВидыРабот,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	    ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ЗадачиМнеТекущаяЗадача,
	ЭтаФорма.Команды.ПереключитьХронометражНеМеняяПодсказку,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииВыполненияЗадач

&НаСервере
Процедура ВыполнитьЗадачу(ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
		ПараметрыЗаписи.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("РезультатВыполнения", РезультатВыполнения);
	
	БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ЗадачиМнеТекущаяЗадача, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиенте(ПараметрыЗаписи = Неопределено)
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиентеПродолжение(
	Результат, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи <> Неопределено
		И ПараметрыЗаписи.Свойство("КлючеваяОперация") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			ПараметрыЗаписи.КлючеваяОперация);
		
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи()
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ЗадачиМнеТекущаяЗадача, "ДатаИсполнения");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжениеВыполненияЗадачиПослеВводаВремени",
		ЭтотОбъект);

	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(ОпцияИспользоватьУчетВремени,
		РеквизитыЗадачи.ДатаИсполнения, ЗадачиМнеТекущаяЗадача, ВключенХронометраж, 
		ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВидыРабот, СпособУказанияВремени, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияЗадачиПослеВводаВремени(Результат, Параметры) Экспорт 

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(ЗадачиМнеТекущаяЗадача),
		Строка(ЗадачиМнеТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", ЗадачиМнеТекущаяЗадача);
	Оповестить("ЗадачаИзменена", ЗадачиМнеТекущаяЗадача, ЭтаФорма);

КонецПроцедуры

// Процесс Исполнение

&НаСервереБезКонтекста
Функция ЕстьНевыполненныеЗадачиИсполнителей(ЗадачиМнеТекущаяЗадача)
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ЗадачиМнеТекущаяЗадача, "БизнесПроцесс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Получает список номеров строк в табличной части РезультатыПроверки процесса Исполнение
// по задаче ЗадачаПроверяющего.
&НаСервереБезКонтекста
Функция ПолучитьСтрокиТабЧастиРезультатыПроверкиДляЗадачиПроверяющего(ЗадачаПроверяющего)
	
	СписокНомеровСтрок = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнениеРезультатыПроверки.НомерСтроки,
		|	ИсполнениеРезультатыПроверки.НомерИтерации КАК НомерИтерации,
		|	ИсполнениеРезультатыПроверки.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего КАК ЗадачаПроверяющего,
		|	ИсполнениеРезультатыПроверки.ОтправленоНаДоработку КАК ОтправленоНаДоработку,
		|	ИсполнениеРезультатыПроверки.КомментарийПроверяющего КАК КомментарийПроверяющего,
		|	ВЫБОР
		|		КОГДА ИсполнениеРезультатыПроверки.ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОтвИсполнение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтвИсполнение
		|ИЗ
		|	БизнесПроцесс.Исполнение.РезультатыПроверки КАК ИсполнениеРезультатыПроверки
		|ГДЕ
		|	ИсполнениеРезультатыПроверки.ЗадачаПроверяющего = &ЗадачаПроверяющего
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсполнениеРезультатыПроверки.НомерСтроки";
		
	Запрос.УстановитьПараметр("ЗадачаПроверяющего", ЗадачаПроверяющего);
	Запрос.УстановитьПараметр("ТочкаМаршрутаОтвИсполнение", БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураСтроки.Вставить("НомерИтерации", Выборка.НомерИтерации);
		СтруктураСтроки.Вставить("ЗадачаИсполнителя", Выборка.ЗадачаИсполнителя);
		СтруктураСтроки.Вставить("ЗадачаПроверяющего", Выборка.ЗадачаПроверяющего);
		СтруктураСтроки.Вставить("ОтправленоНаДоработку", Выборка.ОтправленоНаДоработку);
		СтруктураСтроки.Вставить("КомментарийПроверяющего", Выборка.КомментарийПроверяющего);
		СтруктураСтроки.Вставить("ОтвИсполнение", Выборка.ОтвИсполнение);
		
		СписокНомеровСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат СписокНомеровСтрок;
	
КонецФункции

&НаКлиенте
Процедура ЗадачаИсполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ИсполнениеВыполнениеКомандыИсполнено");
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаИсполненоОтвИсполнительПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ИсполнениеВыполнениеКомандыИсполнено");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьИсполнениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПроцессИсполнениеПриВозвратеНаДоработку(
		ЗадачиМнеТекущийБизнесПроцесс,
		Параметры.СписокПроверяемыхСтрок,
		ЗадачиМнеТекущаяЗадача,
		РезультатВыполнения,
		Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ЗадачиМнеТекущийБизнесПроцесс);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров",
		ЭтотОбъект);

	ОткрытьФорму("БизнесПроцесс.Исполнение.Форма.ФормаИзменениеПараметров", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры	

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуИсполнениеИзменениеПараметров(Результат, Параметры) Экспорт

	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПроцессИсполнениеПриВозвратеНаДоработку(
	Процесс, Исполнители, Задача, КомментарийПроверяющего, ОтправитьНаДоработку)
	
	ТаблицаИсполнители = Новый ТаблицаЗначений;
	ТаблицаИсполнители.Колонки.Добавить("НомерИтерации");
	ТаблицаИсполнители.Колонки.Добавить("ЗадачаИсполнителя");
	ТаблицаИсполнители.Колонки.Добавить("ЗадачаПроверяющего");
	ТаблицаИсполнители.Колонки.Добавить("ОтправленоНаДоработку");
	ТаблицаИсполнители.Колонки.Добавить("КомментарийПроверяющего");
	ТаблицаИсполнители.Колонки.Добавить("ОтвИсполнение");
	
	Для Каждого Исполнитель Из Исполнители Цикл
		НоваяСтрока = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Исполнитель.Значение);
		НоваяСтрока.ОтправленоНаДоработку = ОтправитьНаДоработку;
		НоваяСтрока.КомментарийПроверяющего = КомментарийПроверяющего;
	КонецЦикла;
	
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", Задача);
	ПроцессОбъект.ДополнительныеСвойства.Вставить("Исполнители", ТаблицаИсполнители);
	ПроцессОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Комплексный процесс

&НаКлиенте
Процедура ЗадачаКомплексныйПроцессПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Ознакомления

&НаКлиенте
Процедура ЗадачаОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ОзнакомлениеВыполнениеКомандыОзнакомился");
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Поручение

&НаКлиенте
Процедура ЗадачаПоручениеПроконтролированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаЗавершитьПоручениеПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаВернутьНаДоработкуПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтправленоНаДоработку", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Приглашение

&НаКлиенте
Процедура ЗадачаПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПриглашениеВыполнениеКомандыПринято");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.Принято"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеПринято", Предмет);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПринятоЗавершениеВопросаОЗанятостиПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОбработанныеВопросы.Вставить("ЗанятостьИсполнителей", Истина);
	ЗадачаПринято(ДополнительныеПараметры.Команда, ДополнительныеПараметры.ОбработанныеВопросы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеПринятоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПриглашениеВыполнениеКомандыНеПринято");
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить(
		"РезультатПриглашения", 
		ПредопределенноеЗначение("Перечисление.РезультатыПриглашения.НеПринято"));

	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашениеОтклонено", Предмет);
	КонецЦикла;
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПовторитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьПриглашение", Истина);
	ПараметрыЗаписи.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", ДополнительныеПараметры.УникальныйИдентификаторФормыИзмененияПараметров);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		Оповестить("ПриглашенияОтправлены", Предмет);
	КонецЦикла;
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПослеВопросаОбИсключенииУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов",
		ЭтотОбъект);

	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеПодтвердитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПодтвердитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Если РезультатПриглашенияЗадачи = ПредопределенноеЗначение(
		"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками") Тогда 
		Оповестить("ИсключеныУчастники", ЗадачиМнеТекущаяЗадача);
	КонецЕсли;		
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОтложитьПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОтложитьПриглашение", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриглашениеОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗадачу();
	
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПоручениеВыполненоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"ПоручениеВыполнениеКомандыВыполнено");
	
	ВыполнитьЗадачу();	
		
	ОповеститьПослеВыполненияЗадачи();	
	
КонецПроцедуры

// Процесс Рассмотрение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
			Возврат;
		КонецЕсли;
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		МассивРезолюций = Новый Массив;
		МассивРезолюцийДляПодписания = Новый Массив;
		МассивАдресов = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		
		ПредметыЗадачи = ДеревоПриложений.ПолучитьЭлементы();
		
		Для Каждого Предмет Из ПредметыЗадачи Цикл
			Если ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				СтруктураРезолюцииДляПодписания.Документ = Предмет.Ссылка;
				СтруктураРезолюцииДляПодписания.ДатаРезолюции = ДатаФормированияРезолюций;
				СтруктураРезолюцииДляПодписания.АвторРезолюции = ЗадачиМнеТекущийИсполнитель;
				СтруктураРезолюцииДляПодписания.ВнесРезолюцию = ЗадачиМнеТекущийИсполнитель;
				СтруктураРезолюцииДляПодписания.ТекстРезолюции = РезультатВыполнения;
				
				МассивРезолюцийДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
				
				СтруктураРезолюции = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				ЗаполнитьЗначенияСвойств(СтруктураРезолюции, СтруктураРезолюцииДляПодписания);
				СтруктураРезолюции.Вставить(
					"Наименование",
					РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет.Ссылка));
				
				МассивРезолюций.Добавить(СтруктураРезолюции);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРезолюцийДляПодписания.Количество() > 0 Тогда
			
			ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подписать резолюции предметов'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП",
					ЭтотОбъект,
					ДатаФормированияРезолюций);
				
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивРезолюцийДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов,,
				ЗаголовокФормыВыбораСертификата,ОписаниеОповещения);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
		
	ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП(
	Результат, ДатаФормированияРезолюций) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	ПодписиКРезолюциямПредметов = Новый Структура;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из МассивДанныхДляЗанесенияВРегистр Цикл
		
		Резолюция = ДанныеДляЗанесенияВРегистр.ОбъектСсылка;
		
		Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Предмет_%1_%2'"),
			СтрЗаменить(Строка(Резолюция.Документ.УникальныйИдентификатор()), "-", ""),
			Формат(Резолюция.ДатаРезолюции, "ДФ=yyyyMMddHHmmss"));
		
		ПодписиКРезолюциямПредметов.Вставить(Ключ, ДанныеДляЗанесенияВРегистр);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения",
		ДатаФормированияРезолюций);
	
	ПараметрыЗаписи.Вставить(
		"ПодписыватьЭП",
		ПодписыватьРезультатВыполненияЭП);
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКРезолюциямПредметов",
		ПодписиКРезолюциямПредметов);
		
	ПараметрыЗаписи.Вставить(
		"ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
		
	ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
		
		ВыполнитьЗадачу(ПараметрыЗаписи);
		
		Если ПараметрыЗаписи.Свойство("ПодписыватьЭП")
			И ПараметрыЗаписи.ПодписыватьЭП = Истина
			И ПараметрыЗаписи.Свойство("ПодписиКРезолюциямПредметов")
			И ТипЗнч(ПараметрыЗаписи.ПодписиКРезолюциямПредметов) = Тип("Структура")
			И ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
			
			ПодписиКРезолюциямПредметов = ПараметрыЗаписи.ПодписиКРезолюциямПредметов;
			
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачиМнеТекущаяЗадача, "Предметы");
			ТаблицаПредметов = РеквизитыЗадачи.Предметы.Выгрузить();
			
			Для Каждого Предмет Из ТаблицаПредметов Цикл
			
				Предмет = Предмет.Предмет;
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
					ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
					
					Резолюции = РаботаСРезолюциями.ПолучитьРезолюциюПоДате(
						Предмет, ПараметрыЗаписи.ДатаИсполнения);
					
					Если Резолюции.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектРезолюции = Резолюции[0].Ссылка.ПолучитьОбъект();
					
					Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Предмет_%1_%2'"),
						СтрЗаменить(Строка(Предмет.УникальныйИдентификатор()), "-", ""),
						Формат(ПараметрыЗаписи.ДатаИсполнения, "ДФ=yyyyMMddHHmmss"));
					
					Если Не ПодписиКРезолюциямПредметов.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеПодписи = ПодписиКРезолюциямПредметов[Ключ];
					
					РаботаСЭП.ЗанестиИнформациюОПодписи(
						ОбъектРезолюции.Ссылка,
						ДанныеПодписи.НоваяПодписьДвоичныеДанные, 
						ДанныеПодписи.Отпечаток,
						ДанныеПодписи.ДатаПодписи,
						ДанныеПодписи.Комментарий, 
						ДанныеПодписи.ИмяФайлаПодписи,
						ДанныеПодписи.КомуВыданСертификат,
						ДанныеПодписи.ДвоичныеДанныеСертификата);
					ОбъектРезолюции.Подписана = Истина;
					ОбъектРезолюции.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(ЗадачиМнеТекущаяЗадача);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРассмотренияЗадачи(ВариантРассмотрения)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ЗадачиМнеТекущаяЗадача);
	ОткрытаяФорма = ОткрытьФорму(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя", ПараметрыОткрытия);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗадачаСсылка", ЗадачиМнеТекущаяЗадача);
	ПараметрыОповещения.Вставить(
		"ВариантРассмотрения", 
		ВариантРассмотрения);
	Оповестить("ПерейтиКРезультатуРассмотренияЗадачи", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

// Процесс Регистрация

&НаКлиенте
Процедура ЗадачаЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РегистрацияВыполнениеКомандыЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаНеЗарегистрированоПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"РегистрацияВыполнениеКомандыНеЗарегистрировано");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РезультатРегистрации",
		ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.НеЗарегистрировано"));
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияОзнакомилсяПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Ложь);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаРегистрацияПовторитьПродолжение(Результат, Параметры) Экспорт 
		
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПовторитьРегистрацию", Истина);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс РешениеВопросовВыполненияЗадач

&НаСервереБезКонтекста
Функция ПолучитьСписокАктивныхЗадач(БизнесПроцессСсылка) 
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗадачаРешениеВопросовПеренестиПродолжение(Результат, Параметры) Экспорт 

	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПереносСрока", Истина);
	
	ПараметрыЗаписи.Вставить("БизнесПроцессПредметаРассмотрения", БизнесПроцессПредметаРассмотрения);
	ПараметрыЗаписи.Вставить("ПредметРассмотрения", ПредметРассмотрения);
	ПараметрыЗаписи.Вставить("НовыйСрок", НовыйСрок);
	ПараметрыЗаписи.Вставить("СтарыйСрок", СтарыйСрок);
	ПараметрыЗаписи.Вставить("ТребуетсяРучноеИзменениеСрока", ТребуетсяРучноеИзменениеСрока);
	
	ВыполнитьЗадачу(ПараметрыЗаписи);

	ОповеститьПослеВыполненияЗадачи();

КонецПроцедуры

// Процесс Согласование

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы(
	Результат, РезультатСогласования) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи",
			ЭтотОбъект,
			РезультатСогласования);
			
	РаботаСВизамиСогласованияКлиент.ПроверитьВизуИсполнителяЗадачи(ЗадачиМнеТекущаяЗадача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи(
	Результат, РезультатСогласования) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
			Возврат;
		КонецЕсли;
	
		ДатаФормированияРезолюций = ТекущаяДата();
		
		РезультатСогласованияДляПодписи = 
			?(РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"),
				ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"),
				РезультатСогласования);
		
		МассивВизДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
				
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				СтруктураВизыДляПодписания = РаботаСВизамиСогласованияКлиент.ПолучитьСтруктуруВизДляПодписания();
				СтруктураВизыДляПодписания.Документ = Предмет;
				СтруктураВизыДляПодписания.ДатаИсполнения = ДатаФормированияРезолюций;
				СтруктураВизыДляПодписания.РезультатСогласования = РезультатСогласованияДляПодписи;
				СтруктураВизыДляПодписания.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
				
				МассивВизДляПодписания.Добавить(СтруктураВизыДляПодписания);
				
			КонецЕсли;
		КонецЦикла;
				
		Если МассивВизДляПодписания.Количество() > 0 Тогда
			
			Если МассивВизДляПодписания.Количество() = 1 Тогда
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись визы согласования'");
			Иначе
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись виз согласования'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДатаФормированияРезолюций", ДатаФормированияРезолюций);
			ПараметрыОповещения.Вставить("ОсновныеПредметы", ОсновныеПредметы);
			ПараметрыОповещения.Вставить("РезультатСогласования", РезультатСогласования);
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП",
					ЭтотОбъект,
					ПараметрыОповещения);
			
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивВизДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ,
				ЗаголовокФормыВыбораСертификата, ОписаниеОповещения);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", 
		РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласованоСЗамечаниями");
			
	ИначеЕсли Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыНеСогласовано");
			
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	ПодписиКВизамСогласования = Новый СписокЗначений;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из МассивДанныхДляЗанесенияВРегистр Цикл
		
		ПодписиКВизамСогласования.Добавить(ДанныеДляЗанесенияВРегистр);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКВизамСогласования", ПодписиКВизамСогласования);
			
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения", Параметры.ДатаФормированияРезолюций);
		
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", Параметры.РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из Параметры.ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровСогласования(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;	
		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПовторитьСогласование", Истина);
	ПараметрыЗаписи.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	ВыполнитьЗадачу(ПараметрыЗаписи);
		
	ОповеститьОбИзменении(ЗадачиМнеТекущаяЗадача);
	
	ИнформацияОЗадаче = Новый Структура;
	ИнформацияОЗадаче.Вставить("Ссылка", ЗадачиМнеТекущаяЗадача);
	ИнформацияОЗадаче.Вставить("БизнесПроцесс", ЗадачиМнеТекущийБизнесПроцесс);
	Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Процесс Утверждение

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
			Возврат;
		КонецЕсли;
	
		ОсновныеПредметы = МультипредметностьКлиентСервер.
			ПолучитьМассивПредметовОбъекта(ЗадачиМнеТекущаяЗадача,, Истина);
		
		МассивПредметовДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
		
		Для Каждого Предмет из ОсновныеПредметы Цикл
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				
				МассивПредметовДляПодписания.Добавить(Предмет);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПредметовДляПодписания.Количество() > 0 Тогда
			
			Если МассивПредметовДляПодписания.Количество() = 1 Тогда
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись предмета'");
			Иначе
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись предметов'");
			КонецЕсли;
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП",
					ЭтотОбъект);
			
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивПредметовДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ,
				ЗаголовокФормыВыбораСертификата,
				ОписаниеОповещения);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");

	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"МассивДанныхДляЗанесенияВРегистр",
		Результат.МассивДанныхДляЗанесенияВРегистр);
	ПараметрыЗаписи.Вставить(
		"МассивАдресов",
		Результат.МассивАдресов);
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровУтверждения(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Истина);
	ПараметрыЗаписи.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомПриложений

&НаКлиенте
Процедура ЗаполнитьДеревоПриложений(ЭлементыДерева, МассивПриложений)
	
	Для Каждого ЭлементПриложение Из МассивПриложений Цикл
		
		СтрокаПредмета = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредмета, ЭлементПриложение);	
		
		Для Каждого ДочернееПриложение Из ЭлементПриложение.ДочерниеЭлементы Цикл
			Строка = СтрокаПредмета.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ДочернееПриложение);	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПриложений()
	
	ТекущаяСтрокаВДереве = Неопределено;
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
	КонецЕсли;	
		
	ОбновитьДеревоПриложенийСервер();
	
	Если ТекущаяСтрокаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСтрокаВДереве);
	КонецЕсли;	
		
	РаботаСБизнесПроцессамиКлиент.УстановитьДоступностьКомандРаботыСФайлами(
		ЭтаФорма, 
		Элементы.ДеревоПриложений,
		ДеревоПриложений.ПолучитьЭлементы().Количество());
		
	ДекорацияЗаголовокПриложений = Элементы.ДекорацияЗаголовокПриложений.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПриложенийСервер()
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоПриложенийПоПредметам(ЭтаФорма, ЗадачиМнеТекущаяЗадача.Предметы);
	
КонецПроцедуры	

&НаКлиенте
// Возвращает Истина - предмет успешно добавлен, или Ложь - не удалось установить предмет.
// СообщениеОбОшибке - сообщение об ошибке, если предмет установить не удалось.
//
Процедура ДобавитьПредметЗадачи(Форма, Задача, 
	СообщениеОбОшибке = Неопределено, ИмяПредмета = Неопределено, Предмет = Неопределено, СтандартнаяОбработка = Истина,
	ОписаниеОповещения)
	
	РеквизитыЗадачи = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Задача, 
		"ПометкаУдаления, БизнесПроцесс");
	
	СообщениеОбОшибке = "";
	СтандартнаяОбработка = Ложь;
	
	Если РеквизитыЗадачи.ПометкаУдаления Тогда
		Если ИмяПредмета = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя добавить предмет в помеченную на удаление задачу.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя установить предмет в помеченной на удаление задаче.'");
		КонецЕсли;
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БизнесПроцесс", РеквизитыЗадачи.БизнесПроцесс);
	ПараметрыОткрытия.Вставить("ПроверкаЗаполнения", Истина);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	
	Если ИмяПредмета <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИмяПредмета", ИмяПредмета);
	КонецЕсли;
	
	СписокИменПредметов = Новый СписокЗначений;
	МассивВидов = Новый Массив;
	ПолучитьМассивИменПредметовОбъекта(ДеревоПриложений.ПолучитьЭлементы(), МассивВидов);
	СписокИменПредметов.ЗагрузитьЗначения(МассивВидов);
	ПараметрыОткрытия.Вставить("ИменаПредметов", СписокИменПредметов);
	
	Если Предмет = Неопределено Тогда
		ИмяФормыДляОткрытия = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
	Иначе
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			Если РаботаСоСканеромКлиент.ДоступнаКомандаСканировать() Тогда
				ИмяФормыДляОткрытия = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайлаСоСканера";
			Иначе
				ИмяФормыДляОткрытия = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайла";
			КонецЕсли;
		Иначе
			ИмяФормыДляОткрытия = "ОбщаяФорма.ВыборПредметаБизнесПроцессаБыстрый";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОписания.Вставить("ИмяПредмета", ИмяПредмета);
	
	Описание = Новый ОписаниеОповещения(
		"ДобавитьПредметЗадачиПродолжение",
		ЭтотОбъект,
		ПараметрыОписания);
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыОткрытия,,,,,
		Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает массив имен предметов объекта (процесса, шаблона или задачи)
//
&НаКлиенте
Процедура ПолучитьМассивИменПредметовОбъекта(Элементы, МассивВидов)
	
	Для Каждого СтрокаПредмета Из Элементы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПредмета.ИмяПредмета) Тогда
			МассивВидов.Добавить(СтрокаПредмета.ИмяПредмета);
		КонецЕсли;
		
		ПолучитьМассивИменПредметовОбъекта(СтрокаПредмета.ПолучитьЭлементы(), МассивВидов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметЗадачиПродолжение(РезультатОткрытия, Параметры) Экспорт 
	
	Если Не (ТипЗнч(РезультатОткрытия) = Тип("Структура") Или ТипЗнч(РезультатОткрытия) = Тип("Массив")) Тогда
		// Предмет не выбран
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	ИмяПредмета = Параметры.ИмяПредмета;
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		Если ИмяПредмета = Неопределено Тогда
			ИмяПредмета = РезультатОткрытия.ИмяПредмета;
		КонецЕсли;
		
		Попытка
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ЗадачиМнеТекущаяЗадача,
				УникальныйИдентификатор,
				РезультатОткрытия.ИмяПредмета,
				РезультатОткрытия.Предмет, 
				Ложь);
			
		Исключение
			Если ИмяПредмета = Неопределено Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось добавить предмет в задачу:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Иначе
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить предмет в задаче:
				|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		
		Для Каждого Результат Из РезультатОткрытия Цикл
			Попытка
				МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
			ЗадачиМнеТекущаяЗадача,
			УникальныйИдентификатор,
				Результат.ИмяПредмета,
				Результат.Предмет, 
				Ложь);
			Исключение
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить предмет в задаче:
					|%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);

				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеОповещения.ДополнительныеПараметры.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийУдалениеНаКлиентеПродолжение(Результат, ВыделенныеСтрокиПредметов) Экспорт


	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	СообщениеОбОшибке = "";
	
	ИменаУдаляемыхПредметов = Новый Массив;
	Для Каждого ВыделеннаяСтр Из ВыделенныеСтрокиПредметов Цикл
		Если ВыделеннаяСтр.ДоступноУдаление Тогда
			ИменаУдаляемыхПредметов.Добавить(ВыделеннаяСтр.ИмяПредмета);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаУдаляемыхПредметов.Количество() = 0 Тогда
		
		КоличествоВыделенныхСтрок = ВыделенныеСтрокиПредметов.Количество();
		Если КоличествоВыделенныхСтрок = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Удалить текущий предмет можно только в карточке процесса.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Удалить выделенные предметы можно только в карточке процесса.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	Если Не УдалитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке, ИменаУдаляемыхПредметов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,
			"ДеревоПриложений");
		Возврат;
	КонецЕсли;
	
	ОбновитьДеревоПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметПродолжение(Результат, Параметры) Экспорт 

	Если Результат Тогда 
		ОбновитьДеревоПриложений();
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Параметры.СообщениеОбОшибке,,
			"ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина - предмет успешно удален, или Ложь - не удалось удалить предмет.
//
&НаКлиенте
Функция УдалитьПредметЗадачи(Форма, Задача, СообщениеОбОшибке = Неопределено, ИменаПредметов)
	
	СообщениеОбОшибке = "";

	
	ПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача, "ПометкаУдаления");
	
	Если ПометкаУдаления Тогда
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Нельзя удалять предметы из помеченной на удаление задачи.'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Нельзя очищать предметы в помеченной на удаление задаче.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ПредметыЗадачи = Новый Массив;
		
		Для Каждого ИмяПредмета Из ИменаПредметов Цикл
			Предмет = Новый Структура();
			Предмет.Вставить("ИмяПредмета", ИмяПредмета);
			Предмет.Вставить("Предмет", Неопределено);
			
			ПредметыЗадачи.Добавить(Предмет);
		КонецЦикла;
		
		МультипредметностьВызовСервера.ИзменитьПредметыКорневогоБизнесПроцесса(
			Задача,
			Форма.УникальныйИдентификатор,
			ПредметыЗадачи,

			Истина);
			
	Исключение
		
		Если ИменаПредметов.Количество() = 1 Тогда
			ПредставлениеПредметов = НСтр("ru = 'предмет'");
		Иначе
			ПредставлениеПредметов = НСтр("ru = 'предметы'");
		КонецЕсли;
		
		Если ИменаПредметов[0] = Неопределено Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить %1 из задачи:
					|%2'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить %1 в задаче:
					|%1'"), ПредставлениеПредметов,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
				
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуПредмета()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Ссылка);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			И ЗначениеЗаполнено(ТекущиеДанные.ИмяПредмета) Тогда
			
			ОчиститьСообщения();
			СообщениеОбОшибке = "";
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДобавитьПредметПродолжение",
				ЭтотОбъект,
				Новый Структура);
			
			ДобавитьПредметЗадачи(ЭтаФорма, ЗадачиМнеТекущаяЗадача, СообщениеОбОшибке,
			ТекущиеДанные.ИмяПредмета, ТекущиеДанные.Ссылка,, ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УсловиеОтбораЗадачМне()
	
	Условие = 
		"	ЗадачиИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачиИсполнителя.ПометкаУдаления = ЛОЖЬ		
		|	И ЗадачиИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И (ЗадачиИсполнителя.Исполнитель В (&Исполнители)
		|			ИЛИ (1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|				ГДЕ
		|					ИсполнителиЗадач.РольИсполнителя = ЗадачиИсполнителя.РольИсполнителя
		|					И ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачиИсполнителя.ОсновнойОбъектАдресации
		|					И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачиИсполнителя.ДополнительныйОбъектАдресации
		|					И ИсполнителиЗадач.Исполнитель В (&Исполнители))
		|				И ЗадачиИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)))
		|	И ЗадачиИсполнителя.Выполнена = ЛОЖЬ";	
		
	Возврат Условие;	
	
КонецФункции

&НаКлиенте
Процедура ВнестиДатуРешения(Команда)
	ПараметрыФормы = Новый Структура("Задача", ЗадачиМнеТекущаяЗадача); 
	Оп = Новый ОписаниеОповещения("ЗавершитьВнестиДатуРешения", ЭтаФорма);
	//ОткрытьФорму("Обработка.мВнестиДатуРешения.Форма", ПараметрыФормы, ЭтаФорма, , , , Оп);
	ОткрытьФорму("Документ.мВнесениеДатыРешения.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , Оп);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВнестиДатуРешения(Результат, ПараметрыРаботы) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Результат Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("ПовторитьСогласование", Ложь);
			ПараметрыВыполнения.Вставить("ДатаИсполнения", ТекущаяДата());
			
			Попытка
				БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ЗадачиМнеТекущаяЗадача, ПараметрыВыполнения);
				ПоказатьОповещениеПользователя("Выполнена "+ЗадачиМнеТекущаяЗадача);
			Исключение
				Сообщить(Строка(ЗадачиМнеТекущаяЗадача) + " не выполнена!");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
	ОбновитьСписки();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеНайти(Команда)
	ИскСтрока = "";
	Если ВвестиСтроку(ИскСтрока, "Строка поиска") Тогда
		Дерево = ЗадачиМне.ПолучитьЭлементы();
		ИндексСтроки = НайтиСтрокуВДереве(Дерево, ИскСтрока);
		Если ЗначениеЗаполнено(ИндексСтроки) Тогда
			Элементы.ЗадачиМне.ТекущаяСтрока = ИндексСтроки;	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры
 
&НаКлиенте
Функция НайтиСтрокуВДереве(КоллекцияСтрок, ИскСтрока, Индекс=Неопределено) 
    Если ЗначениеЗаполнено(Индекс) Тогда
    	Возврат Индекс;
	КонецЕсли; 
	Для Каждого Стр Из КоллекцияСтрок Цикл
		Если СтрНайти(Стр.Наименование, ИскСтрока) > 0 Тогда
			Индекс = Стр.ПолучитьИдентификатор();
			Прервать;
		Иначе
			НайтиСтрокуВДереве(Стр.ПолучитьЭлементы(), ИскСтрока, Индекс);
		КонецЕсли;
	КонецЦикла;
    Возврат Индекс;
КонецФункции
#КонецОбласти

#КонецОбласти
