////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("Пользователи",
		БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь));
	Список.Параметры.УстановитьЗначениеПараметра("ИмяГруппыБезПроекта", НСтр("ru = 'Без проекта'"));
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='дд МММ гггг, ЧЧ:мм'",
		"ДФ='дд МММ гггг'");
	Элементы.СрокИсполнения.Формат 	= ФорматДатыДляКолонок;
	Элементы.Дата.Формат = ФорматДатыДляКолонок;
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
		
	ЗаполнитьПользователейВПодразделениях();
	
	// Быстрый отбор
	БыстрыйПоискВключен =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ЭтаФорма.ИмяФормы,
			"БыстрыйПоискВключен",
			Истина);
	
	СформироватьТаблицуБыстрогоОтбора();
	ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Настройки = Новый Структура;
	Настройки.Вставить("БыстрыйПоискВключен", БыстрыйПоискВключен);
	
	// Сохранение параметров отбора в папке
	МассивНастроек = Новый Массив;
	Для каждого Строка Из ОтборВСписке Цикл
		НастройкаЗначение = Новый Структура("Имя, Значение", Строка.Параметр, Строка.Значение);
		МассивНастроек.Добавить(НастройкаЗначение);
	КонецЦикла;
	Настройки.Вставить("ОтборВСписке", МассивНастроек);
	
	ПриЗакрытииСервер(ЭтаФорма.ИмяФормы, Настройки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		Или ИмяСобытия = "БизнесПроцессСтартован" Тогда
		
		ОбновитьСписок();
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Список

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы.ФормаЗадачаЗадачаИсполнителяЗадатьВопросАвтору.Доступность = Истина;
	ТипБизнесПроцесса = ТипЗнч(Элементы.Список.ТекущиеДанные.БизнесПроцесс);
	Если ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
		Элементы.ФормаЗадачаЗадачаИсполнителяЗадатьВопросАвтору.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.НомерФлага Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ВыбраннаяСтрока) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
		
		Возврат;
		
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(
		Элемент, 
		ВыбраннаяСтрока, 
		Поле, 
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоПользователей

&НаКлиенте
Процедура ДеревоПользователейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйИсполнитель = Неопределено;
	Если Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь <> Неопределено Тогда
		НовыйИсполнитель = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
	ИначеЕсли Элементы.ДеревоПользователей.ТекущиеДанные.Подразделение <> Неопределено Тогда
		НовыйИсполнитель = Элементы.ДеревоПользователей.ТекущиеДанные.Подразделение;
	КонецЕсли;
	
	Если НовыйИсполнитель = Неопределено 
		Или ТекущийИсполнитель = НовыйИсполнитель Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИсполнитель = НовыйИсполнитель;
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаДереваПользователей(
	ЭлементыДерева, Пользователь, Подразделение)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Подразделение = Подразделение
			И ЭлементДерева.Пользователь = Пользователь Тогда
			
			Результат = ЭлементДерева.ПолучитьИдентификатор();
			
			Прервать;
			
		КонецЕсли;
		
		Результат = ПолучитьИдентификаторЭлементаДереваПользователей(
			ЭлементДерева.ПолучитьЭлементы(), Пользователь, Подразделение);
			
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПользователейВПодразделениях()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ПодразделенияРуководителя
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				СтруктураПредприятия.Ссылка
		|			ИЗ
		|				Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|			ГДЕ
		|				СтруктураПредприятия.Руководитель В (&Исполнители))
		|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправочникСтруктураПредприятия.Ссылка КАК ГруппаСсылка,
		|	СправочникСтруктураПредприятия.Наименование КАК ГруппаНаименование,
		|	СведенияОПользователях.Пользователь КАК ПользователиСсылка,
		|	СведенияОПользователях.Пользователь.ПредставлениеВПерепискеСРангом КАК ПользователиНаименование
		|ПОМЕСТИТЬ ВрТаблица
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СправочникСтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодразделенияРуководителя КАК ПодразделенияРуководителя
		|		ПО СправочникСтруктураПредприятия.Ссылка = ПодразделенияРуководителя.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО (СведенияОПользователях.Подразделение = СправочникСтруктураПредприятия.Ссылка)
		|			И (СведенияОПользователях.Пользователь.Недействителен = ЛОЖЬ)
		|			И (СведенияОПользователях.Пользователь.ПометкаУдаления = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВрТаблица.ГруппаСсылка,
		|	ВрТаблица.ГруппаНаименование,
		|	ИсполнителиЗадач.РольИсполнителя,
		|	ИсполнителиЗадач.РольИсполнителя.Наименование
		|ПОМЕСТИТЬ ВрТаблицаРоли
		|ИЗ
		|	ВрТаблица КАК ВрТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ВрТаблица.ПользователиСсылка = ИсполнителиЗадач.Исполнитель
		|			И (ИсполнителиЗадач.РольИсполнителя.ПометкаУдаления = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВрТаблица.ГруппаСсылка КАК Подразделение,
		|	ВрТаблица.ГруппаНаименование КАК ПодразделениеНаименование,
		|	ВрТаблица.ПользователиСсылка КАК Пользователь,
		|	ВрТаблица.ПользователиНаименование КАК ПользовательНаименование
		|ИЗ
		|	ВрТаблица КАК ВрТаблица
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВрТаблицаРоли.ГруппаСсылка,
		|	ВрТаблицаРоли.ГруппаНаименование,
		|	ВрТаблицаРоли.РольИсполнителя,
		|	ВрТаблицаРоли.РольИсполнителяНаименование
		|ИЗ
		|	ВрТаблицаРоли КАК ВрТаблицаРоли
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВрТаблица.ГруппаСсылка ИЕРАРХИЯ,
		|	ВрТаблица.ПользователиНаименование";
		
	Запрос.УстановитьПараметр("Исполнители",
		БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоПользователей.ПолучитьЭлементы().Очистить();
	КореньДерева = ДеревоПользователей.ПолучитьЭлементы();
	ВеткиДереваДляГрупп = Новый Соответствие;
	
	Элементы.ДеревоПользователей.Отображение = ОтображениеТаблицы.Дерево;
	
	ВыборкаДерево.Строки.Сортировать("ПодразделениеНаименование, ПользовательНаименование");
	Для Каждого СтрокаВыборкиДерево Из ВыборкаДерево.Строки Цикл
		ЗаполнитьЛистДереваПользователейВПодразделениях(
			СтрокаВыборкиДерево,
			КореньДерева,
			ВеткиДереваДляГрупп);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистДереваПользователейВПодразделениях(Выборка, КореньДерева, ВеткиДереваДляГрупп);
	
	Выборка.Строки.Сортировать("ПодразделениеНаименование, ПользовательНаименование");
	
	СтрокаДереваГруппы = ВеткиДереваДляГрупп.Получить(Выборка.Подразделение);
	Если СтрокаДереваГруппы = Неопределено Тогда
		СтрокаДереваГруппы = КореньДерева.Добавить();
		
		ВеткиДереваДляГрупп.Вставить(Выборка.Подразделение, СтрокаДереваГруппы);
		
		СтрокаДереваГруппы.Подразделение = Выборка.Подразделение;
		СтрокаДереваГруппы.Наименование = Выборка.ПодразделениеНаименование;
		СтрокаДереваГруппы.НомерКартинки = 2;
	КонецЕсли;	
	
	Для Каждого СтрокаВыборкиДерево Из Выборка.Строки Цикл
		ЗаполнитьЛистДереваПользователейВПодразделениях(СтрокаВыборкиДерево,
			СтрокаДереваГруппы.ПолучитьЭлементы(), ВеткиДереваДляГрупп);
	КонецЦикла;
	
	Если Выборка.Пользователь <> Null Тогда
		СтрокаДереваПользователь = СтрокаДереваГруппы.ПолучитьЭлементы().Добавить();
		
		СтрокаДереваПользователь.Пользователь = Выборка.Пользователь;
		СтрокаДереваПользователь.Наименование = Выборка.ПользовательНаименование;
		СтрокаДереваПользователь.Подразделение = Выборка.Подразделение;
		СтрокаДереваПользователь.НомерКартинки = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
	
	УстановитьПараметрыСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСписка()
	
	УстановитьПараметрыСпискаСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаСервер()
	
	ВыбраноПодразделение = ТипЗнч(ТекущийИсполнитель) = Тип("СправочникСсылка.СтруктураПредприятия");
	
	РуководительПодразделения = Неопределено;
	Если ВыбраноПодразделение Тогда
		РуководительПодразделения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ТекущийИсполнитель,
			"Руководитель");
	КонецЕсли;
	
	Элементы.ГруппаИсполнитель.Видимость = ВыбраноПодразделение;
	
	РолеваяАдресация = ТипЗнч(ТекущийИсполнитель) = Тип("СправочникСсылка.РолиИсполнителей");
	
	Если ВыбраноПодразделение И Не РуководительПодразделения.Пустая() Тогда
		Руководители = Новый Массив;
		Руководители.Добавить(РуководительПодразделения);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"Пользователи",
			Руководители);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"Пользователи",
			БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"РольИсполнителя",
		ТекущийИсполнитель,
		РолеваяАдресация И Не ВыбраноПодразделение);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"Исполнитель",
		ТекущийИсполнитель,
		Не РолеваяАдресация И Не ВыбраноПодразделение);
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	
	Подразделение = Неопределено;
	Пользователь = Неопределено;
	ИдентификаторТекущейСтроки = Элементы.ДеревоПользователей.ТекущаяСтрока;
	
	Если Элементы.ДеревоПользователей.ТекущиеДанные <> Неопределено Тогда
		Подразделение = Элементы.ДеревоПользователей.ТекущиеДанные.Подразделение;
		Пользователь = Элементы.ДеревоПользователей.ТекущиеДанные.Пользователь;
	КонецЕсли;
	
	ОбновитьСписокНаСервере();
	
	ЭлементыДерева = ДеревоПользователей.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоПользователей.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		
		Элементы.ДеревоПользователей.ТекущаяСтрока = 
			ПолучитьИдентификаторЭлементаДереваПользователей(
				ДеревоПользователей.ПолучитьЭлементы(), Пользователь, Подразделение);
		
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	ЗаполнитьПользователейВПодразделениях();
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(*) КАК ЗадачиВсего,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиНовые,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ЗадачаЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|						И ЗадачаЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЗадачиПросроченные
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И (1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|				ГДЕ
		|					ПодчиненностьСотрудников.Подчиненный = ЗадачаЗадачаИсполнителя.Исполнитель
		|					И ПодчиненностьСотрудников.Руководитель В (&Пользователи))
		|			ИЛИ 1 В
		|				(ВЫБРАТЬ
		|					1
		|				ИЗ
		|					РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|				ГДЕ
		|					ИсполнителиЗадач.РольИсполнителя = ЗадачаЗадачаИсполнителя.РольИсполнителя
		|					И ИсполнителиЗадач.ОсновнойОбъектАдресации = ЗадачаЗадачаИсполнителя.ОсновнойОбъектАдресации
		|					И ИсполнителиЗадач.ДополнительныйОбъектАдресации = ЗадачаЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|					И 1 В
		|						(ВЫБРАТЬ
		|							1
		|						ИЗ
		|							РегистрСведений.ПодчиненностьСотрудников КАК ПодчиненностьСотрудников
		|						ГДЕ
		|							ПодчиненностьСотрудников.Подчиненный = ИсполнителиЗадач.Исполнитель
		|							И ПодчиненностьСотрудников.Руководитель В (&Пользователи))))
		|{ГДЕ
		|	ЗадачаЗадачаИсполнителя.Выполнена,
		|	ЗадачаЗадачаИсполнителя.Проект,
		|	ЗадачаЗадачаИсполнителя.Автор,
		|	ЗадачаЗадачаИсполнителя.Исполнитель,
		|	ЗадачаЗадачаИсполнителя.РольИсполнителя}";
			
	ОтборСписка = Новый Соответствие;
		
	// выполнена
	НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.Отбор,
		"Выполнена");
	Если НайденныеЭлементы.Количество() > 0 Тогда
		ОтборСписка.Вставить("Выполнена", НайденныеЭлементы[0].ПравоеЗначение);
	КонецЕсли;
	
	// проект
	НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.Отбор,
		"Проект");
	Если НайденныеЭлементы.Количество() > 0 Тогда
		ОтборСписка.Вставить("Проект", НайденныеЭлементы[0].ПравоеЗначение);
	КонецЕсли;
	
	// автор
	НайденныеЭлементы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.Отбор,
		"Автор");
	Если НайденныеЭлементы.Количество() > 0 Тогда
		ОтборСписка.Вставить("Автор", НайденныеЭлементы[0].ПравоеЗначение);
	КонецЕсли;
	
	// исполнитель
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Исполнитель"));
		
	Если Параметр <> Неопределено
		И Параметр.Использование Тогда
		ОтборСписка.Вставить("Исполнитель", Параметр.Значение);
	КонецЕсли;
	
	// роль исполнителя
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("РольИсполнителя"));
		
	Если Параметр <> Неопределено
		И Параметр.Использование Тогда
		ОтборСписка.Вставить("РольИсполнителя", Параметр.Значение);
	КонецЕсли;	
	
	// руководитель
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Пользователи"));
		
	Если Параметр <> Неопределено
		И Параметр.Использование Тогда
		ПостроительЗапроса.Параметры.Вставить(
			"Пользователи", 
			Параметр.Значение);
	Иначе
		ПостроительЗапроса.Параметры.Вставить(
			"Пользователи",
			БизнесПроцессыИЗадачиСервер.ИсполнителиЗадачПользователя(ТекущийПользователь));
	КонецЕсли;
		
	Для каждого КлючЗначение Из ОтборСписка Цикл
		ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		ПостроительЗапроса.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
		
	ПостроительЗапроса.Параметры.Вставить(
		"ТекущаяДата",
		ТекущаяДатаСеанса());
		
	ПостроительЗапроса.Выполнить();
		
	// Заполнение статистики по задачам
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// ОТБОР В ПАПКЕ

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	// Настройка отбора в текущей папке
	НоваяСтрока = ОтборВСписке.Добавить();
	НоваяСтрока.Параметр = "Выполнена";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Завершена:'");
	НоваяСтрока.Тип = "Булево";
	НоваяСтрока.Значение = Ложь;
	
	НоваяСтрока = ОтборВСписке.Добавить();
	НоваяСтрока.Параметр = "Проект";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Проект:'");
	НоваяСтрока.Тип = "СправочникСсылка.Проекты";
	НоваяСтрока.Значение = Справочники.Проекты.ПустаяСсылка();
	
	НоваяСтрока = ОтборВСписке.Добавить();
	НоваяСтрока.Параметр = "Автор";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Автор:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Справочники.Пользователи.ПустаяСсылка();
	
	НастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ЭтаФорма.ИмяФормы,
		"ОтборВСписке",
		Новый Массив);
	
	Для каждого Элемент Из НастройкиОтбора Цикл
		
		Если ТипЗнч(Элемент) = Тип("Структура") Тогда
			
			Для каждого Строка Из ОтборВСписке Цикл
			
				Если Строка.Параметр = Элемент.Имя Тогда
					Строка.Значение = Элемент.Значение;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ОтборВСписке.ТекущаяСтрока = 0
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка(ПоискВключен)
	
	Для каждого строка Из ОтборВСписке Цикл
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, ИмяПараметра);
	КонецЦикла;
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для каждого строка Из ОтборВСписке Цикл
		
		ИмяПараметра = СтрЗаменить(СтрЗаменить(Строка.Параметр, "_С", ""), "_По", "");
		
		Если ЗначениеЗаполнено(Строка.Значение)
			И Строка.Значение <> Неопределено Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
		КонецЕсли;
		
		Если Не ПоискВключен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Тип = "Строка"
			И ЗначениеЗаполнено(Строка.Значение) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Содержит,
				Строка.Значение);
		
		ИначеЕсли Строка.Тип = "Булево"
			И Строка.Значение <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);
		
		ИначеЕсли Строка.Тип = "Дата"
			И ЗначениеЗаполнено(Строка.Значение)Тогда
			
			Если Найти(Строка.Параметр, "_С") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
					НачалоДня(Строка.Значение));
				
			КонецЕсли;
			
			Если Найти(Строка.Параметр, "_По") > 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Список.Отбор,
					ИмяПараметра,
					ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
					КонецДня(Строка.Значение));
				
			КонецЕсли;
		
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип = "СправочникСсылка.Проекты" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,
				Строка.Значение);
				
		ИначеЕсли (Строка.Значение = Неопределено
			Или ЗначениеЗаполнено(Строка.Значение))
			И Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				Список.Отбор,
				ИмяПараметра,
				ВидСравненияКомпоновкиДанных.Равно,
				Строка.Значение);

		КонецЕсли;

	КонецЦикла;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСпискаКлиент()
	
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	УстановитьОтборСписка(БыстрыйПоискВключен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораУТекущегоПоляОтбора()
	
	Элементы.ОтборВСпискеЗначение.СписокВыбора.Очистить();
	
	ТекущаяСтрокаВОтборе = ОтборВСписке.НайтиПоИдентификатору(ТекущаяСтрокаВОтбореВПапке);
	
	Если ТекущаяСтрокаВОтборе <> Неопределено
		И ТекущаяСтрокаВОтборе.Значение = Неопределено
		И ТекущаяСтрокаВОтборе.Тип = "Булево" Тогда
		
		Элементы.ОтборВСпискеЗначение.СписокВыбора.Добавить(Истина);
		Элементы.ОтборВСпискеЗначение.СписокВыбора.Добавить(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)

	Для Каждого Строка Из ОтборВСписке Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Проекты" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "Булево" Тогда
			Строка.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	УстановитьОтборСписка(БыстрыйПоискВключен);
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВСпискеПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаВОтбореВПапке <> Элементы.ОтборВСписке.ТекущаяСтрока Тогда
		ТекущаяСтрокаВОтбореВПапке = Элементы.ОтборВСписке.ТекущаяСтрока;
		ОбновитьСписокВыбораУТекущегоПоляОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВСпискеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Строка = ОтборВСписке[Элементы.ОтборВСписке.ТекущаяСтрока];
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1,1,1);	
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Проекты" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "Булево" Тогда
		Строка.Значение = Неопределено;
	КонецЕсли;
	Элементы.ОтборВСписке.ЗакончитьРедактированиеСтроки(Ложь);
	УстановитьОтборСписка(БыстрыйПоискВключен);
	ОбновитьСписокВыбораУТекущегоПоляОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВСпискеЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.ОтборВСписке.ТекущиеДанные.Значение = ВыбранноеЗначение;
	Элементы.ОтборВСписке.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПодключитьОбработчикОжидания("ЗначениеОтбораПриИзменении", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораПриИзменении()
	
	Если Не БыстрыйПоискВключен Тогда
		Если ЗначениеЗаполнено(Элементы.ОтборВСписке.ТекущиеДанные.Значение) Тогда
			БыстрыйПоискВключен = Истина;
			ВключитьВыключитьБыстрыйПоискСервер(БыстрыйПоискВключен);
		КонецЕсли;
	КонецЕсли;
	УстановитьОтборСпискаКлиент();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоиск(Команда)
	
	ВключитьВыключитьБыстрыйПоискКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьБыстрыйПоискКлиент()
	
	ВключитьВыключитьБыстрыйПоискСервер(Не БыстрыйПоискВключен);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВыключитьБыстрыйПоискСервер(ВключитьПоиск) 
	
	БыстрыйПоискВключен = ВключитьПоиск; 
	
	Если БыстрыйПоискВключен Тогда
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Выключить быстрый поиск'");
	Иначе
		Элементы.ВключитьВыключитьБыстрыйПоиск.Картинка = БиблиотекаКартинок.ЛампочкаВыкл;
		ЭтаФорма.Команды["ВключитьВыключитьБыстрыйПоиск"].Подсказка = НСтр("ru = 'Включить быстрый поиск'");
	КонецЕсли;
	
	УстановитьОтборСписка(БыстрыйПоискВключен); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииСервер(ИмяФормы, Настройки, УникальныйИдентификатор)
	
	Для каждого Настройка Из Настройки Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
КонецПроцедуры
