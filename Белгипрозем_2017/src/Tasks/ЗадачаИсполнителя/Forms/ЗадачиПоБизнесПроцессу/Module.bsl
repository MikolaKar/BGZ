
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если ТипЗнч(Параметры.ЗначениеОтбора) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задачи процесса %1'"), Строка(Параметры.ЗначениеОтбора.БизнесПроцесс));
			
		// Условное оформление текущей задачи в дереве
		ПредставлениеЭлемента = "Текущая задача (стандартная настройка)";
		Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
			УсловноеОформление, ПредставлениеЭлемента);
		
		ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Ссылка");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Параметры.ЗначениеОтбора;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
		ЭлементОформления.Значение = ЦветаСтиля.ЦветТекстаТекущейЗадачи;
		ЭлементОформления.Использование = Истина;
	
		Поле = Эл.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадач");
	
	Иначе 
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задачи процесса %1'"), Строка(Параметры.ЗначениеОтбора));
	КонецЕсли;
	
	ПроцессПрерван = Ложь;
	Если Метаданные.БизнесПроцессы.Содержит(Параметры.ЗначениеОтбора.Метаданные()) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Параметры.ЗначениеОтбора, "Состояние");
		Если СтруктураРеквизитов.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			ПроцессПрерван = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиОтображения = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ЗначениеЗаполнено(НастройкиОтображения) Тогда
		ПоказыватьТолькоАктивныеПроцессы = 
		НастройкиОтображения.Получить("ПоказыватьТолькоАктивныеПроцессы");
	КонецЕсли;
		
	ЗаполнитьДеревоЗадач();
	Элементы.СрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.ДеревоЗадачДатаВыполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.СписокАктивныхЗадачСрокИсполнения.Формат = 
		?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" И Источник <> ЭтаФорма
		ИЛИ ИмяСобытия = "БизнесПроцессИзменен" Тогда
		
		ЗаполнитьДеревоЗадач();
		Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОбновитьДеревоЗадач();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
			ОбновитьДеревоЗадач();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПроцессПрерван Тогда
		ПоказыватьТолькоАктивныеПроцессы = Ложь;
	Иначе
		ПоказыватьТолькоАктивныеПроцессы = ПоказыватьТолькоАктивныеПроцессы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьТолькоАктивныеПроцессыПриИзменении(Элемент)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрокаВДереве = Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		СтрокаТаблицы = ДеревоЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущийЭлемент = Элементы.СписокАктивныхЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Элементы.СписокАктивныхЗадач.ТекущаяСтрока;
		СтрокаТаблицы = СписокАктивныхЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуСпискаАктивныхЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрокаВСпискеАктивныхЗадач = Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадание(Команда)
	
	БизнесПроцессыИЗадачиКлиент.СоздатьЗадание(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ОткрытьТекущуюСтрокуДереваЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОткрытьЗадачу(Команда)
	
	ОткрытьЗадачуСпискаАктивныхЗадач();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с флагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"), "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено, "ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Флаг, ИмяТаблицы = "")
	
	ВыделенныеСтроки = Новый Массив;
	
	ТаблицаФормы = Элементы[ИмяТаблицы];
	
	МассивВыделенныхСтрок = ТаблицаФормы.ВыделенныеСтроки;
	Для Каждого Стр Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(Стр);
		ВыделенныеСтроки.Добавить(СтрокаДерева.Ссылка);
	КонецЦикла;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"), "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"), "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"), "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"), "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"), "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено, "СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"), "СписокАктивныхЗадач");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокАктивныхЗадач(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ТипЗнч(ЭлементДерева.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			И НЕ ЭлементДерева.Выполнена
			И ЭлементДерева.СостояниеБизнесПроцесса = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			НоваяСтрока = СписокАктивныхЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			
		КонецЕсли;
		
		ЗаполнитьСписокАктивныхЗадач(ЭлементДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	
	Если ТипЗнч(Параметры.ЗначениеОтбора) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, Параметры.ЗначениеОтбора.БизнесПроцесс);
	Иначе
		ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, Параметры.ЗначениеОтбора);
	КонецЕсли;	
	
	ЗначениеВДанныеФормы(Дерево, ДеревоЗадач);
	
	УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы());
	
	СписокАктивныхЗадач.Очистить();
	ЗаполнитьСписокАктивныхЗадач(ДеревоЗадач.ПолучитьЭлементы());
	СписокАктивныхЗадач.Сортировать("Ссылка Возр");
	УстановитьТекущуюСтрокуВСпискеАктивныхЗадач();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекущуюСтроку(ЭлементыДерева)
	
	Если Элементы.Количество() > 0 Тогда
		Для каждого Эл Из ЭлементыДерева Цикл
			Если Эл.Ссылка = ТекущаяСтрокаВДереве Тогда
				Элементы.ДеревоЗадач.ТекущаяСтрока = Эл.ПолучитьИдентификатор();
				Возврат;
			Иначе	
				УстановитьТекущуюСтроку(Эл.ПолучитьЭлементы());
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьТекущуюСтрокуВСпискеАктивныхЗадач()
	
	Для Каждого ЗадачаСтрока Из СписокАктивныхЗадач Цикл
		
		Если ЗадачаСтрока.Ссылка = ТекущаяСтрокаВСпискеАктивныхЗадач Тогда
			Элементы.СписокАктивныхЗадач.ТекущаяСтрока = ЗадачаСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
			|			ТОГДА 2
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.СтартОтменен)
			|			ТОГДА 3
			|		ИНАЧЕ -1	
			|	КОНЕЦ КАК СостояниеКартинка,
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА 4
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА 3
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА 2
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
			|		ПО БизнесПроцессы.Ссылка = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
			|ГДЕ
			|   (БизнесПроцессы.ГлавнаяЗадача = &Задача ИЛИ БизнесПроцессы.ВедущаяЗадача = &Задача)
			|   И БизнесПроцессы.ПометкаУдаления = Ложь
			|   И (&ПоказыватьПрерванные 
			|		ИЛИ БизнесПроцессы.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
			|	И (&ОтображатьОтложенныеПроцессы 
			|		ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
			|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние ЕСТЬ NULL)
			|	И (&ПоказыватьВыполненные = ИСТИНА
			|			ИЛИ БизнесПроцессы.Завершен = ЛОЖЬ)";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
		
		Если ПоказыватьТолькоАктивныеПроцессы Тогда
			Запрос.УстановитьПараметр("ПоказыватьВыполненные", Ложь);
			Запрос.УстановитьПараметр("ПоказыватьПрерванные", Ложь);
			Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Ложь);
		Иначе
			Запрос.УстановитьПараметр("ПоказыватьВыполненные", Истина);
			Запрос.УстановитьПараметр("ПоказыватьПрерванные", Истина);
			Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Истина);
		КонецЕсли;

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = Неопределено;
			Если Ветвь = Неопределено Тогда
				Строка = Дерево.Строки.Добавить();
			Иначе	
				Строка = Ветвь.Строки.Добавить();
			КонецЕсли;
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.СостояниеКартинка = ВыборкаДетальныеЗаписи.СостояниеКартинка;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Завершен;
			Строка.ПринятаКИсполнению = Истина;
			Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
			Строка.Тип = 0;
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка)
	
	Ветвь = Дерево.Строки.Найти(БизнесПроцессСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Наименование,
		|	Задачи.Исполнитель,
		|	Задачи.РольИсполнителя,
		|	Задачи.ОсновнойОбъектАдресации,
		|	Задачи.ДополнительныйОбъектАдресации,
		|	Задачи.СрокИсполнения,
		|	Задачи.Выполнена,
		|	ВЫБОР
		|		КОГДА Задачи.Выполнена
		|			ТОГДА Задачи.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	Задачи.РезультатВыполнения,
		|	Задачи.ПринятаКИсполнению,
		|	ВЫБОР
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 4
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 3
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 2
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Задачи.Выполнена = ИСТИНА
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК РезультатЗавершения,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	Задачи.Автор,
		|	Задачи.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятсКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Задачи.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Задачи.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО (ФлагиОбъектов.Объект = Задачи.Ссылка)
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
		|		ПО Задачи.БизнесПроцесс = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ИсключенаИзПроцесса = ЛОЖЬ
		|	И (&ПоказыватьПрерванные
		|			ИЛИ Задачи.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван))
		|	И (&ОтображатьОтложенныеПроцессы
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
		|			ИЛИ НастройкаОтложенногоСтартаБизнесПроцессов.Состояние ЕСТЬ NULL )
		|	И (&ПоказыватьВыполненные = ИСТИНА
		|			ИЛИ Задачи.БизнесПроцесс.Завершен = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задачи.Дата";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Если ПоказыватьТолькоАктивныеПроцессы Тогда
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Ложь);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Ложь);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ПоказыватьВыполненные", Истина);
		Запрос.УстановитьПараметр("ПоказыватьПрерванные", Истина);
		Запрос.УстановитьПараметр("ОтображатьОтложенныеПроцессы", Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВедомыйБизнесПроцесс = Новый Структура();
		Если НЕ ЭтоВедущаяЗадача(ВыборкаДетальныеЗаписи.Ссылка, ВедомыйБизнесПроцесс) Тогда
			
			Если НЕ (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Исполнитель)
				ИЛИ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РольИсполнителя)) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ветвь = Неопределено Тогда
				Строка = Дерево.Строки.Добавить();
			Иначе	
				Строка = Ветвь.Строки.Добавить();
			КонецЕсли;
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.Тип = 1;
			Строка.СостояниеКартинка = ВыборкаДетальныеЗаписи.СостояниеКартинка;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Выполнена;
			Строка.ДатаВыполнения = ВыборкаДетальныеЗаписи.ДатаВыполнения;
			Строка.РезультатВыполнения = ВыборкаДетальныеЗаписи.РезультатВыполнения;
			Строка.РезультатЗавершения = ВыборкаДетальныеЗаписи.РезультатЗавершения;
			Строка.ПринятаКИсполнению = ВыборкаДетальныеЗаписи.ПринятаКИсполнению;
			Строка.Просрочена = Ложь;
			Строка.НомерФлага = ВыборкаДетальныеЗаписи.НомерФлага;
			Строка.Флаг = ВыборкаДетальныеЗаписи.Флаг;
			Строка.Автор = ВыборкаДетальныеЗаписи.Автор;
			Строка.СостояниеБизнесПроцесса = ВыборкаДетальныеЗаписи.СостояниеБизнесПроцесса;
			Строка.СостояниеКонтроля = ВыборкаДетальныеЗаписи.СостояниеКонтроля;
			
			Если ВыборкаДетальныеЗаписи.СрокИсполнения <> '00010101000000' 
				И ВыборкаДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса() Тогда
				Строка.Просрочена = Истина;
			КонецЕсли;				
			Если ВыборкаДетальныеЗаписи.Исполнитель.Пустая() Тогда
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.РольИсполнителя;
				Строка.ОсновнойОбъектАдресации = ВыборкаДетальныеЗаписи.ОсновнойОбъектАдресации;
				Строка.ДополнительныйОбъектАдресации = ВыборкаДетальныеЗаписи.ДополнительныйОбъектАдресации;
			Иначе	
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
			КонецЕсли;	
			
			ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		Иначе
			Если ПоказыватьТолькоАктивныеПроцессы 
				И (ВедомыйБизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
						ИЛИ ВедомыйБизнесПроцесс.СостояниеОтложенногоБизнесПроцесса = Перечисления.СостоянияОтложенныхПроцессов.ГотовКСтарту
						ИЛИ ВедомыйБизнесПроцесс.Завершен = Истина)Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(ВедомыйБизнесПроцесс.Ссылка).Чтение Тогда				
				Если Ветвь = Неопределено Тогда
					Строка = Дерево.Строки.Добавить();
				Иначе	
					Строка = Ветвь.Строки.Добавить();
				КонецЕсли;
				
				Строка.Наименование = ВедомыйБизнесПроцесс.Наименование;
				Строка.Важность = ВедомыйБизнесПроцесс.Важность;
				Строка.СостояниеКартинка = ВедомыйБизнесПроцесс.СостояниеКартинка;
				Строка.Ссылка = ВедомыйБизнесПроцесс.Ссылка;
				Строка.Выполнена = ВедомыйБизнесПроцесс.Завершен;
				Строка.РезультатЗавершения = ВедомыйБизнесПроцесс.РезультатЗавершения;
				Строка.ПринятаКИсполнению = Истина;
				Строка.Тип = 0;
				ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, Строка.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВедущаяЗадача(ЗадачаСсылка, ДанныеВедомогоПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)	
			|			ТОГДА 1
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.ГотовКСтарту)
			|			ТОГДА 2
			|		КОГДА НЕ БизнесПроцессы.Стартован
			|				И БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|				И НастройкаОтложенногоСтартаБизнесПроцессов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхПроцессов.СтартОтменен)
			|			ТОГДА 3
			|		ИНАЧЕ -1	
			|	КОНЕЦ КАК СостояниеКартинка,
			|	ВЫБОР
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
			|			ТОГДА 4
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
			|			ТОГДА 3
			|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
			|			ТОГДА 2
			|		ИНАЧЕ 			
			|			ВЫБОР
			|				КОГДА БизнесПроцессы.Завершен = ИСТИНА
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК РезультатЗавершения,
			|	БизнесПроцессы.Состояние,
			|	БизнесПроцессы.ПометкаУдаления,
			|	НастройкаОтложенногоСтартаБизнесПроцессов.Состояние КАК СостояниеОтложенногоБизнесПроцесса
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО БизнесПроцессы.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОтложенногоСтартаБизнесПроцессов КАК НастройкаОтложенногоСтартаБизнесПроцессов
			|		ПО БизнесПроцессы.Ссылка = НастройкаОтложенногоСтартаБизнесПроцессов.БизнесПроцесс
			|ГДЕ
			|   БизнесПроцессы.ВедущаяЗадача = &Задача";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВедомогоПроцесса.Вставить("Наименование", Выборка.Наименование);
			ДанныеВедомогоПроцесса.Вставить("Важность", Выборка.Важность);
			ДанныеВедомогоПроцесса.Вставить("СостояниеКартинка", Выборка.СостояниеКартинка);
			ДанныеВедомогоПроцесса.Вставить("Ссылка", Выборка.Ссылка);
			ДанныеВедомогоПроцесса.Вставить("Завершен", Выборка.Завершен);
			ДанныеВедомогоПроцесса.Вставить("РезультатЗавершения", Выборка.РезультатЗавершения);
			ДанныеВедомогоПроцесса.Вставить("Состояние", Выборка.Состояние);
			ДанныеВедомогоПроцесса.Вставить("СостояниеОтложенногоБизнесПроцесса", Выборка.СостояниеОтложенногоБизнесПроцесса);
			ДанныеВедомогоПроцесса.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			Возврат Истина;
		КонецЦикла;
	КонецЦикла;
  
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоЗадач()

	ЗаполнитьДеревоЗадач();
	Для каждого Строка ИЗ ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьТекущуюСтрокуДереваЗадач()
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		Иначе	
			ПоказатьЗначение(, Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

// Открывает текущую задачу списка СписокАктивныхЗадач
//
&НаКлиенте
Процедура ОткрытьЗадачуСпискаАктивныхЗадач()
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти
