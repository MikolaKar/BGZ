&НаКлиенте
Процедура ФайлБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть базу данных";
	ДиалогВыбораФайла.Фильтр    = "База Acses (*.mdb)|*.mdb";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлБД = ДиалогВыбораФайла.ПолноеИмяФайла;
		ПутьКФайламДанныхНаДиске = ДиалогВыбораФайла.Каталог; 
		СохранитьНастройки();
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////
// Вспомогательные для работы обработки
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьНастройки();
	ГруппаУволенных = Справочники.ГруппыПользователей.НайтиПоНаименованию("Уволенные");
	НашаОрганизация = Справочники.Организации.НайтиПоКоду("00-000001");
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьБазу(Команда)
	ЛогФайл.ДобавитьСтроку("Начата загрузка: "+ТекущаяДата());
    Если УстановитьСоединение() Тогда
        ПрочитатьЭтапы(ФайлБД);
    Иначе
        Сообщить("Не установлено соединение с базой данных Access! Загрузка данных не выполнена!");
    КонецЕсли;    
КонецПроцедуры

// Устанавливает соединение с Access
//
// Возвращаемое значение:
//   Истина - если установлено
//
&НаСервере
Функция УстановитьСоединение()
    
	пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения = "Driver={Microsoft Access Driver (*.mdb)};Dbq=" + ФайлБД;
	пСоед.СтрокаСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=" + ФайлБД;
	//пСоед.СтрокаСоединения = "Driver={Microsoft Access Driver (*.mdb)};Dbq=D:\1С\Базы 1С\Внешние проекты\Белгипрозем 2012\БрестГипрозем\Шлюз\mainBase.mdb";
	ВнИст = ВнешниеИсточникиДанных.MS_Access;
	ВнИст.УстановитьОбщиеПараметрыСоединения(пСоед);
    Если ВнИст.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
     	ВнИст.УстановитьСоединение(); 
    КонецЕсли;
    СоединениеУстановлено = Ложь;
    Если ВнИст.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
        СоединениеУстановлено = Истина;
    КонецЕсли;
    
    Возврат СоединениеУстановлено;

КонецФункции // УстановитьСоединение()

&НаКлиенте
Процедура ПрочитатьЭтапы(ИмяФайлаБД)
	
	СохранитьНастройки();
	
	НовыйФайл = Новый файл(ПутьКЛогФайлу);
	Если НовыйФайл.Существует() Тогда
		ЛогФайл.Прочитать(ПутьКЛогФайлу);
		ЛогФайл.Очистить();
	КонецЕсли; 
	ЛогФайл.ДобавитьСтроку("Зарузка начата: "+ТекущаяДата());
	
	АдресДанных1С = ИнициализироватьТаблицыДанных();
	 
	ДанныеАксесс = ПолучитьДанныеИзАксесс();
	
	КоличествоСтрок = ДанныеАксесс.Количество;
	АдресДанныхАксесс = ДанныеАксесс.Адрес;
	
	Индикатор = 0;
	Элементы.Индикатор.МаксимальноеЗначение = КоличествоСтрок;
	ЕстьОшибки = Ложь;
	
	Для Счетчик = 0 По КоличествоСтрок-1 Цикл
		
		ОбработкаПрерыванияПользователя();
		Индикатор = Счетчик + 1;
		ОбновитьОтображениеДанных();

		Если ЗагрузитьСтрокуДанныхАксесс(Счетчик, АдресДанныхАксесс, АдресДанных1С) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли; ;
	КонецЦикла; 
	
	Состояние("удаление лишних данных");
	
	Если УдалятьЛишние Тогда
		УдалитьЛишниеЭтапы(АдресДанных1С);
	КонецЕсли; ;
	
	Состояние("Проведение актирования");
	ПерепровестиАктирование();
	
	Если ЕстьОшибки Тогда
		Сообщить("Загрузка завершена с ошибками!");
	Иначе
		Сообщить("Загрузка завершена!");
	КонецЕсли; 
	ЛогФайл.ДобавитьСтроку("Зарузка завершена: "+ТекущаяДата());
	ЛогФайл.Записать(ПутьКЛогФайлу);
	
	//ЛогФайл.Показать("Загрузка", ПутьКЛогФайлу);
	//ЛогФайл.Показать("Загрузка", ПутьКЛогФайлу);

КонецПроцедуры // ПодключитьБазуНаСервере(ФайлБД)

&НаСервере
Процедура ПерепровестиАктирование()
	//Возврат;
	//ВыполнитьПаралельноНаСервере();
	Выборка = Документы.мАктирование.Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Получитьобъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПаралельноНаСервере()
 
	//МассивЗаданий = Новый Массив;
	////{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	мАктирование.Ссылка
	//	|ИЗ
	//	|	Документ.мАктирование КАК мАктирование";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Результат = РезультатЗапроса.Выбрать().Выгрузить();
	//
	//

	//
	//Выборка = Документы.мАктирование.Выбрать();
	//Счетчик = 0;
	//Пока Выборка.Следующий() Цикл
	//	Док = Выборка.Получитьобъект();
	//	Док.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЦикла; 
	//
	//Для Каждого ТекСтрока ИЗ ТЗСклады Цикл
	//	
	//	НаборПараметров = Новый Массив;
	//	НаборПараметров.Добавить("%ЗначениеПараметра1%");
	//	НаборПараметров.Добавить("%ЗначениеПараметраN%");
	//	
	//	// запуск фонового задания
	//	Задание = ФоновыеЗадания.Выполнить("мРазное.ПроведениеАктирования", НаборПараметров);
	//	
	//	// добавляем задание в массив, что бы потом отследить выполнение
	//	МассивЗаданий.Добавить(Задание);
	//	
	//КонецЦикла;
	//
	//// проверим результат выполнения фоновых заданий
	//Если МассивЗаданий.Количество() > 0 Тогда
	//	Попытка
	//		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	//	Исключение
	//		// действия в случае ошибки
	//	КонецПопытки;        
	//КонецЕсли;
	
КонецПроцедуры // ВыполнитьПаралельно()


&НаСервере
Функция ЗагрузитьСтрокуДанныхАксесс(Счетчик, АдресДанныхАксесс, АдресДанных1С)
	ТаблАксесс = ПолучитьИзВременногоХранилища(АдресДанныхАксесс);
	Возврат ЗагрузитьСтроку(ТаблАксесс[Счетчик], АдресДанных1С);
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзАксесс()
	
	// Получение списка договоров для загрузки
	// 1. Не заактированные, но оплаченные. До 2015г.
	// 2. Заактированные, но не оплаченные. До 2015г.
	// 3. Выполненные частично. До 2015г.
	// 4. Все после 2014г.
	
	// Получение таблиц из Аксесс для последующей обработки
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DogEtap.Kod КАК КодЭтапа,
		|	DogEtap.Dog КАК КодДоговора,
		|	DogEtap.Etap КАК КодЭтапаРабота,
		|	DogEtap.NomSmety КАК НомерЭтапа,
		|	DogEtap.NZajavki КАК НомерЗаявки,
		|	DogEtap.DZajavki КАК ДатаЗаявки,
		|	DogEtap.AktNakl КАК НомерНакл,
		|	DogEtap.Gruppa КАК КодГруппыОтделов,
		|	DogEtap.Plos КАК КодОбъекта,
		|	DogEtap.SumDog КАК Стоимость,
		|	DogEtap.NDSPrc КАК ПроцентНДС,
		|	DogEtap.NDSSum КАК СуммаНДС,
		|	DogEtap.SumVsego КАК ВсегоСНДС,
		|	DogEtap.AktSost КАК ДатаАкта,
		|	DogEtap.SumVyp КАК Заактировано,
		|	DogEtap.OrientD КАК ПлановыйСрок,
		|	DogEtap.Prodlenka КАК ДатаПродления,
		|	DogEtap.PrimPEO КАК Примечание,
		|	DogEtap.Dizm КАК ДатаИзменения
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.DogEtap КАК DogEtap
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Dogovor.NomDog КАК НомерДоговора,
		|	Dogovor.DSostav КАК ДатаДоговора,
		|	Dogovor.Kod КАК КодДоговора,
		|	Dogovor.Klient КАК КодКлиента
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.Dogovor КАК Dogovor
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DogOplata.Etap КАК КодЭтапа,
		|	DogOplata.Dog КАК КодДоговора,
		|	DogOplata.OpDat КАК ДатаОплаты,
		|	DogOplata.OpSum КАК СуммаОплаты,
		|	DogOplata.OpDok КАК ДокОплаты,
		|	DogOplata.NomSmety КАК НомерЭтапа,
		|	DogOplata.VozDat КАК ДатаВозврата,
		|	DogOplata.VozSum КАК СуммаВозврата
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.DogOplata КАК DogOplata
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SBank.Key КАК КодБанка,
		|	SBank.MFO КАК МФО,
		|	SBank.Nai КАК Наименование,
		|	SBank.City КАК Город,
		|	SBank.Adress КАК Адрес
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SBank КАК SBank
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SEtap.Kod КАК КодЭтапа,
		|	SEtap.Work КАК КодРаботы
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SEtap КАК SEtap
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SGruppa.Kod КАК КодГруппыОтделов,
		|	SGruppa.Nai КАК Наименование,
		|	SGruppa.Otdel КАК КодОтдела
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SGruppa КАК SGruppa
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SOtdel.Kod КАК КодОтдела,
		|	SOtdel.Nai КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SOtdel КАК SOtdel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SKlient.Kod КАК КодКлиента,
		|	SKlient.Nai КАК Наименование,
		|	SKlient.AIndex КАК Индекс,
		|	SKlient.AGorod КАК Город,
		|	SKlient.AUlica КАК Улица,
		|	SKlient.ADom КАК Дом,
		|	SKlient.OKPO КАК ОКПО,
		|	SKlient.UNN КАК УНП,
		|	SKlient.BNazv КАК ДолжностьДир,
		|	SKlient.BFam КАК ФамилияДир,
		|	SKlient.BIma КАК ИмяДир,
		|	SKlient.BOtc КАК ОтчествоДир,
		|	SKlient.BTel КАК ТелефонДир,
		|	SKlient.Bank КАК КодБанка,
		|	SKlient.RCount КАК РасчетныйСчет
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SKlient КАК SKlient
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SObject.Kod КАК КодОбъекта,
		|	SObject.Nai КАК Наименование,
		|	SObject.Klient КАК КодКлиента,
		|	SObject.SSovet КАК Сельсовет,
		|	SObject.Aderes КАК АдресСельсовета,
		|	SObject.Adress КАК ПочтовыйАдрес,
		|	SObject.Phones КАК Телефоны,
		|	SObject.ZYAdress КАК АдресЗУ
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SObject КАК SObject
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DogVypolneno.Etap КАК КодЭтапа,
		|	DogVypolneno.Isp КАК КодИсполнителя
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.DogVypolneno КАК DogVypolneno
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	SWorker.Kod КАК КодИсполнителя,
		|	SWorker.TN КАК ТабельныйНомер,
		|	SWorker.FIO КАК ФИОИсполнителя,
		|	SWorker.Gruppa КАК КодГруппыОтделов
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.SWorker КАК SWorker";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТзЭтапыДог = Результат[0].Выгрузить();
	ТзДоговоры = Результат[1].Выгрузить();
	ТзОплаты = Результат[2].Выгрузить();
	ТзБанки = Результат[3].Выгрузить();
	ТзЭтапы = Результат[4].Выгрузить();
	ТзГруппы = Результат[5].Выгрузить();
	ТзОтделы = Результат[6].Выгрузить();
	ТзКлиенты = Результат[7].Выгрузить();
	ТзОбъекты = Результат[8].Выгрузить();
	ТзВыполнение = Результат[9].Выгрузить();
	ТзИсполнители = Результат[10].Выгрузить();
	
	// Получение списка договоров для загрузки
	//  1) Отбор договоров из загружаемого интервала 
	//  2) Поиск в отобранных договорах незакрытых этапов на 01.01.15, определение списка договоров для загрузки
	//  3) Получение всех этапов из списка договоров для загрузки
	//  4) Загрузка в 1С этапов
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТзЭтапыДог",ТзЭтапыДог);  
	Запрос.УстановитьПараметр("ТзДоговоры",ТзДоговоры);  
	Запрос.УстановитьПараметр("ТзОплаты",ТзОплаты);  
	Запрос.УстановитьПараметр("ТзБанки",ТзБанки);  
	Запрос.УстановитьПараметр("ТзЭтапы",ТзЭтапы);  
	Запрос.УстановитьПараметр("ТзГруппы",ТзГруппы);  
	Запрос.УстановитьПараметр("ТзОтделы",ТзОтделы);  
	Запрос.УстановитьПараметр("ТзКлиенты",ТзКлиенты);  
	Запрос.УстановитьПараметр("ТзОбъекты",ТзОбъекты);  
	Запрос.УстановитьПараметр("ТзВыполнение",ТзВыполнение);  
	Запрос.УстановитьПараметр("ТзИсполнители",ТзИсполнители);  
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТзДоговоры.НомерДоговора,
	|	ТзДоговоры.ДатаДоговора,
	|	ТзДоговоры.КодДоговора,
	|	ТзДоговоры.КодКлиента
	|ПОМЕСТИТЬ ДоговорыИзТЗ
	|ИЗ
	|	&ТзДоговоры КАК ТзДоговоры
	|ГДЕ
	|	ТзДоговоры.ДатаДоговора МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзЭтапыДог.КодЭтапа,
	|	ТзЭтапыДог.КодЭтапаРабота,
	|	ТзЭтапыДог.КодДоговора,
	|	ТзЭтапыДог.НомерЭтапа,
	|	ТзЭтапыДог.КодОбъекта,
	|	ТзЭтапыДог.КодГруппыОтделов,
	|	ЕСТЬNULL(ТзЭтапыДог.Стоимость, 0) КАК Стоимость,
	|	ТзЭтапыДог.ПроцентНДС,
	|	ЕСТЬNULL(ТзЭтапыДог.СуммаНДС, 0) КАК СуммаНДС,
	|	ЕСТЬNULL(ТзЭтапыДог.ВсегоСНДС, 0) КАК ВсегоСНДС,
	|	ТзЭтапыДог.ПлановыйСрок,
	|	ТзЭтапыДог.ДатаПродления,
	|	ТзЭтапыДог.ДатаИзменения,
	|	ТзЭтапыДог.Примечание,
	|	ТзЭтапыДог.ДатаАкта,
	|	ВЫБОР
	|		КОГДА ТзЭтапыДог.ДатаАкта < &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзЭтапыДог.Заактировано, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Акт14,
	|	ВЫБОР
	|		КОГДА ТзЭтапыДог.ДатаАкта >= &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзЭтапыДог.Заактировано, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Акт15
	|ПОМЕСТИТЬ ЭтапыИзТЗ
	|ИЗ
	|	&ТзЭтапыДог КАК ТзЭтапыДог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзОплаты.КодЭтапа,
	|	ТзОплаты.КодДоговора,
	|	ВЫБОР
	|		КОГДА ТзОплаты.ДатаОплаты < &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзОплаты.СуммаОплаты, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Опл14,
	|	ВЫБОР
	|		КОГДА ТзОплаты.ДатаОплаты >= &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзОплаты.СуммаОплаты, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Опл15,
	|	ВЫБОР
	|		КОГДА ТзОплаты.ДатаВозврата < &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзОплаты.СуммаВозврата, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Воз14,
	|	ВЫБОР
	|		КОГДА ТзОплаты.ДатаВозврата >= &ДатаНач2015
	|			ТОГДА ЕСТЬNULL(ТзОплаты.СуммаВозврата, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Воз15,
	|	ТзОплаты.ДатаОплаты,
	|	ТзОплаты.ДатаВозврата
	|ПОМЕСТИТЬ ОплатыИзТЗ
	|ИЗ
	|	&ТзОплаты КАК ТзОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатыИзТЗ.КодЭтапа,
	|	ОплатыИзТЗ.КодДоговора,
	|	СУММА(ОплатыИзТЗ.Опл14) КАК Опл14,
	|	СУММА(ОплатыИзТЗ.Опл15) КАК Опл15,
	|	СУММА(ОплатыИзТЗ.Воз14) КАК Воз14,
	|	СУММА(ОплатыИзТЗ.Воз15) КАК Воз15
	|ПОМЕСТИТЬ ОплатыПоЭтапам
	|ИЗ
	|	ОплатыИзТЗ КАК ОплатыИзТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатыИзТЗ.КодЭтапа,
	|	ОплатыИзТЗ.КодДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыИзТЗ.КодДоговора,
	|	ЕСТЬNULL(ОплатыПоЭтапам.Опл14, 0) КАК Опл14,
	|	ЕСТЬNULL(ОплатыПоЭтапам.Опл15, 0) КАК Опл15,
	|	ЕСТЬNULL(ОплатыПоЭтапам.Воз14, 0) КАК Воз14,
	|	ЕСТЬNULL(ОплатыПоЭтапам.Воз15, 0) КАК Воз15,
	|	ЭтапыИзТЗ.Акт14,
	|	ЭтапыИзТЗ.Акт15,
	|	ДоговорыИзТЗ.НомерДоговора КАК НомерДоговора,
	|	ДоговорыИзТЗ.ДатаДоговора КАК ДатаДоговора,
	|	ЭтапыИзТЗ.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыИзТЗ.ДатаИзменения КАК ДатаИзменения,
	|	ЭтапыИзТЗ.КодЭтапа
	|ПОМЕСТИТЬ ЭтапыДляЗагрузки
	|ИЗ
	|	ЭтапыИзТЗ КАК ЭтапыИзТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыИзТЗ КАК ДоговорыИзТЗ
	|		ПО ЭтапыИзТЗ.КодДоговора = ДоговорыИзТЗ.КодДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоЭтапам КАК ОплатыПоЭтапам
	|		ПО ЭтапыИзТЗ.КодЭтапа = ОплатыПоЭтапам.КодЭтапа
	|ГДЕ
	|	ЭтапыИзТЗ.КодДоговора В
	|			(ВЫБРАТЬ
	|				ДоговорыИзТЗ.КодДоговора
	|			ИЗ
	|				ДоговорыИзТЗ КАК ДоговорыИзТЗ)
	|	И (&ДатаКон < &ДатаНач2015
	|				И (ЭтапыИзТЗ.Акт14 <> ЕСТЬNULL(ОплатыПоЭтапам.Опл14, 0) - ЕСТЬNULL(ОплатыПоЭтапам.Воз14, 0)
	|					ИЛИ ЭтапыИзТЗ.Акт15 <> 0
	|					ИЛИ ЕСТЬNULL(ОплатыПоЭтапам.Опл15, 0) <> 0
	|					ИЛИ ЕСТЬNULL(ОплатыПоЭтапам.Воз15, 0) <> 0)
	|			ИЛИ &ДатаКон >= &ДатаНач2015
	|				И (ЭтапыИзТЗ.Акт15 <> 0
	|					ИЛИ ЕСТЬNULL(ОплатыПоЭтапам.Опл15, 0) <> 0
	|					ИЛИ ЕСТЬNULL(ОплатыПоЭтапам.Воз15, 0) <> 0)";
	
	Если ИспользоватьПериодИзменения Тогда
		Запрос.Текст = Запрос.Текст + "	
	|					ИЛИ (ЭтапыИзТЗ.ДатаИзменения МЕЖДУ &ДатаНачИзм И &ДатаКонИзм
	|						И ЭтапыИзТЗ.Акт15 = 0
	|						И ЕСТЬNULL(ОплатыПоЭтапам.Опл15, 0) = 0
	|						И ЕСТЬNULL(ОплатыПоЭтапам.Воз15, 0) = 0)";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ")	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзБанки.КодБанка,
	|	ТзБанки.МФО,
	|	ТзБанки.Наименование,
	|	ТзБанки.Город,
	|	ТзБанки.Адрес
	|ПОМЕСТИТЬ Банки
	|ИЗ
	|	&ТзБанки КАК ТзБанки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзЭтапы.КодЭтапа,
	|	ТзЭтапы.КодРаботы
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	&ТзЭтапы КАК ТзЭтапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзГруппы.КодГруппыОтделов,
	|	ТзГруппы.Наименование,
	|	ТзГруппы.КодОтдела
	|ПОМЕСТИТЬ Группы
	|ИЗ
	|	&ТзГруппы КАК ТзГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзОтделы.КодОтдела,
	|	ТзОтделы.Наименование
	|ПОМЕСТИТЬ Отделы
	|ИЗ
	|	&ТзОтделы КАК ТзОтделы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзКлиенты.КодКлиента,
	|	ТзКлиенты.Наименование,
	|	ТзКлиенты.Индекс,
	|	ТзКлиенты.Город,
	|	ТзКлиенты.Улица,
	|	ТзКлиенты.Дом,
	|	ТзКлиенты.ОКПО,
	|	ТзКлиенты.УНП,
	|	ТзКлиенты.ДолжностьДир,
	|	ТзКлиенты.ФамилияДир,
	|	ТзКлиенты.ИмяДир,
	|	ТзКлиенты.ОтчествоДир,
	|	ТзКлиенты.ТелефонДир,
	|	ТзКлиенты.КодБанка,
	|	ТзКлиенты.РасчетныйСчет
	|ПОМЕСТИТЬ Клиенты
	|ИЗ
	|	&ТзКлиенты КАК ТзКлиенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзОбъекты.КодОбъекта,
	|	ТзОбъекты.Наименование,
	|	ТзОбъекты.КодКлиента,
	|	ТзОбъекты.Сельсовет,
	|	ТзОбъекты.АдресСельсовета,
	|	ТзОбъекты.ПочтовыйАдрес,
	|	ТзОбъекты.Телефоны,
	|	ТзОбъекты.АдресЗУ
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	&ТзОбъекты КАК ТзОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзВыполнение.КодЭтапа,
	|	ТзВыполнение.КодИсполнителя
	|ПОМЕСТИТЬ Выполнение
	|ИЗ
	|	&ТзВыполнение КАК ТзВыполнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТзИсполнители.КодИсполнителя,
	|	ТзИсполнители.ТабельныйНомер,
	|	ТзИсполнители.ФИОИсполнителя,
	|	ТзИсполнители.КодГруппыОтделов
	|ПОМЕСТИТЬ Исполнители
	|ИЗ
	|	&ТзИсполнители КАК ТзИсполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыИзТЗ.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыИзТЗ.КодЭтапа,
	|	ЭтапыИзТЗ.КодЭтапаРабота,
	|	ЭтапыИзТЗ.ДатаАкта,
	|	ЭтапыИзТЗ.Акт14,
	|	ЭтапыИзТЗ.Акт15,
	|	ЭтапыИзТЗ.КодГруппыОтделов КАК КодГруппыОтделовЭтапа,
	|	ЭтапыИзТЗ.Стоимость,
	|	ЭтапыИзТЗ.ПроцентНДС,
	|	ЭтапыИзТЗ.СуммаНДС,
	|	ЭтапыИзТЗ.ВсегоСНДС,
	|	ЭтапыИзТЗ.ПлановыйСрок,
	|	ЭтапыИзТЗ.ДатаПродления,
	|	ЭтапыИзТЗ.Примечание,
	|	ЭтапыИзТЗ.ДатаИзменения,
	|	ДоговорыИзТЗ.НомерДоговора КАК НомерДоговора,
	|	ДоговорыИзТЗ.ДатаДоговора КАК ДатаДоговора,
	|	ЕСТЬNULL(ОплатыИзТЗ.Опл14, 0) КАК Опл14,
	|	ЕСТЬNULL(ОплатыИзТЗ.Опл15, 0) КАК Опл15,
	|	ЕСТЬNULL(ОплатыИзТЗ.Воз14, 0) КАК Воз14,
	|	ЕСТЬNULL(ОплатыИзТЗ.Воз15, 0) КАК Воз15,
	|	ОплатыИзТЗ.ДатаОплаты,
	|	ОплатыИзТЗ.ДатаВозврата,
	|	Клиенты.Наименование КАК НаименованиеКлиента,
	|	Клиенты.КодКлиента,
	|	Клиенты.Индекс,
	|	Клиенты.Город,
	|	Клиенты.Улица,
	|	Клиенты.Дом,
	|	Клиенты.ОКПО,
	|	Клиенты.УНП,
	|	Клиенты.ДолжностьДир,
	|	Клиенты.ФамилияДир,
	|	Клиенты.ИмяДир,
	|	Клиенты.ОтчествоДир,
	|	Клиенты.ТелефонДир,
	|	Клиенты.КодБанка,
	|	Клиенты.РасчетныйСчет,
	|	Банки.МФО КАК КодБанка,
	|	Банки.Наименование КАК НаименованиеБанка,
	|	Банки.Город КАК ГородБанка,
	|	Банки.Адрес КАК АдресБанка,
	|	Этапы.КодРаботы,
	|	Исполнители.ТабельныйНомер,
	|	Исполнители.ФИОИсполнителя,
	|	Исполнители.КодГруппыОтделов КАК КодГруппыОтделовИсполнителя,
	|	ГруппыИсп.Наименование КАК НаименованиеГруппыОтделовИсполнителя,
	|	ОтделыИсп.Наименование КАК НаименованиеОтделаИсполнителя,
	|	ГруппыЭтапов.Наименование КАК НаименованиеГруппыОтделовЭтапа,
	|	ОтделыЭтапов.Наименование КАК НаименованиеОтделаЭтапа,
	|	ОтделыЭтапов.КодОтдела КАК КодОтделаЭтапа,
	|	Объекты.Наименование КАК НаименованиеОбъекта,
	|	Объекты.Сельсовет КАК СельсоветОбъекта,
	|	Объекты.АдресСельсовета КАК АдресСельсоветаОбъекта,
	|	Объекты.ПочтовыйАдрес КАК ПочтовыйАдресОбъекта,
	|	Объекты.Телефоны КАК ТелефоныОбъекта,
	|	Объекты.АдресЗУ КАК АдресЗУОбъекта
	|ИЗ
	|	ЭтапыИзТЗ КАК ЭтапыИзТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыИзТЗ КАК ОплатыИзТЗ
	|		ПО ЭтапыИзТЗ.КодЭтапа = ОплатыИзТЗ.КодЭтапа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Объекты КАК Объекты
	|		ПО ЭтапыИзТЗ.КодОбъекта = Объекты.КодОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыИзТЗ КАК ДоговорыИзТЗ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Клиенты КАК Клиенты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Банки КАК Банки
	|				ПО Клиенты.КодБанка = Банки.КодБанка
	|			ПО ДоговорыИзТЗ.КодКлиента = Клиенты.КодКлиента
	|		ПО ЭтапыИзТЗ.КодДоговора = ДоговорыИзТЗ.КодДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ Этапы КАК Этапы
	|		ПО ЭтапыИзТЗ.КодЭтапаРабота = Этапы.КодЭтапа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Выполнение КАК Выполнение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Исполнители КАК Исполнители
	|				ЛЕВОЕ СОЕДИНЕНИЕ Группы КАК ГруппыИсп
	|					ЛЕВОЕ СОЕДИНЕНИЕ Отделы КАК ОтделыИсп
	|					ПО ГруппыИсп.КодОтдела = ОтделыИсп.КодОтдела
	|				ПО Исполнители.КодГруппыОтделов = ГруппыИсп.КодГруппыОтделов
	|			ПО Выполнение.КодИсполнителя = Исполнители.КодИсполнителя
	|		ПО ЭтапыИзТЗ.КодЭтапа = Выполнение.КодЭтапа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Группы КАК ГруппыЭтапов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Отделы КАК ОтделыЭтапов
	|			ПО ГруппыЭтапов.КодОтдела = ОтделыЭтапов.КодОтдела
	|		ПО ЭтапыИзТЗ.КодГруппыОтделов = ГруппыЭтапов.КодГруппыОтделов
	|ГДЕ
	|	ЭтапыИзТЗ.КодЭтапа В
	|			(ВЫБРАТЬ
	|				ЭтапыДляЗагрузки.КодЭтапа
	|			ИЗ
	|				ЭтапыДляЗагрузки КАК ЭтапыДляЗагрузки)
	//Если ИспользоватьПериодИзменения Тогда
	//	Запрос.Текст = Запрос.Текст + "	
	//|	Или ЭтапыИзТЗ.ДатаИзменения МЕЖДУ &ДатаНачИзм И &ДатаКонИзм";
	//КонецЕсли; 
	//Запрос.Текст = Запрос.Текст + "	
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерДоговора,
	|	ДатаДоговора,
	|	НомерЭтапа";
	
	

	//Запрос.УстановитьПараметр("ДатаНач2014", Дата('20140101000000')); // дата с которой грузятся все этапы
	Запрос.УстановитьПараметр("ДатаНач2015", Дата("20150101000000")); // дата начала 2015
	Запрос.УстановитьПараметр("ДатаНач", Объект.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Объект.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачИзм", ПериодИзменения.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонИзм", ПериодИзменения.ДатаОкончания);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("000101010000"));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
    АдресДанныхАксесс = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);

	ДанныеАксесс = Новый Структура("Адрес, Количество");
	ДанныеАксесс.Вставить("Адрес", АдресДанныхАксесс);
	ДанныеАксесс.Вставить("Количество", Результат.Количество());
	
	Возврат ДанныеАксесс;
 КонецФункции // ПолучитьДанныеИзАксесс()

&НаКлиенте
Функция ПолучитьДатуСКЛ(ИскДата)
	ДатаСКЛ = "#" + День(ИскДата) + "/" + Месяц(ИскДата) + "/" + СтрЗаменить(Год(ИскДата), Символы.НПП, "") + "#";
	Возврат ДатаСКЛ;                                                                                    
КонецФункции // ПолучитьДатуСКЛ(НачалоПериода)

&НаСервере
Процедура УдалитьЛишниеЭтапы(АдресДанных)
	//СтруктураТаблицБД = ПолучитьИзВременногоХранилища(АдресДанных);
	//ТзЭтапыКУДалению = СтруктураТаблицБД.ТзЭтапыКУДалению;
	//
	//Для каждого Стр Из ТзЭтапыКУдалению Цикл
	//    Если Не Стр.ЭтапСсылка.ПометкаУдаления Тогда
	//		Этап = Стр.ЭтапСсылка.ПолучитьОбъект();
	//		Этап.УстановитьПометкуУдаления(Истина,);
	//		Этап.Записать();
	//	КонецЕсли; 
	//КонецЦикла; 
	//
	//// Поиск и удаление оплат удаленных этапов
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОплатаРабот.Ссылка
	//	|ИЗ
	//	|	Документ.ОплатаРабот КАК ОплатаРабот
	//	|ГДЕ
	//	|	ОплатаРабот.ЭтапДоговора В(&МассивЭтапов)";
	//	
	//МассивЭтапов = ТзЭтапыКУДалению.ВыгрузитьКолонку("ЭтапСсылка");
	//Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Оплата = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//	Оплата.Удалить();
	//КонецЦикла;
	//
	//// Поиск и удаление возвратов удаленных этапов
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВозвратОплаты.Ссылка
	//	|ИЗ
	//	|	Документ.ВозвратОплаты КАК ВозвратОплаты
	//	|ГДЕ
	//	|	ВозвратОплаты.ЭтапДоговора В(&МассивЭтапов)";
	//
	//Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ВозвратОплаты = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//	ВозвратОплаты.Удалить();
	//КонецЦикла;

	//// Поиск и удаление УчетДоговоров удаленных этапов
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	УчетДоговоров.Ссылка
	//	|ИЗ
	//	|	Документ.УчетДоговоров КАК УчетДоговоров
	//	|ГДЕ
	//	|	УчетДоговоров.ЭтапДоговора В(&МассивЭтапов)";
	//
	//Запрос.УстановитьПараметр("МассивЭтапов", МассивЭтапов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ВозвратОплаты = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//	ВозвратОплаты.Удалить();
	//КонецЦикла;

	//// Поиск и удаление Актирования удаленных этапов
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	мАктированиеАкты.Ссылка КАК Ссылка,
	//	|	мАктированиеАкты.НомерСтроки КАК НомерСтроки,
	//	|	мАктированиеАкты.ЭтапДоговора
	//	|ИЗ
	//	|	Документ.мАктирование.Акты КАК мАктированиеАкты
	//	|ГДЕ
	//	|	мАктированиеАкты.ЭтапДоговора В(&МассивЭтапов)
	//	|
	//	//|СГРУППИРОВАТЬ ПО
	//	//|	мАктированиеАкты.Ссылка,
	//	//|	мАктированиеАкты.НомерСтроки,
	//	//|	мАктированиеАкты.ЭтапДоговора
	//	//|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Ссылка,
	//	|	НомерСтроки УБЫВ";
	//
	//Запрос.УстановитьПараметр("МассивЭтапов", ТзЭтапыКУДалению.ВыгрузитьКолонку("ЭтапСсылка"));
	//
	//РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//
	//ПредДок = "";
	//Для каждого Стр Из РезультатЗапроса Цикл
	//	Если ПредДок = "" Тогда
	//		Актирование = Стр.Ссылка.ПолучитьОбъект();
	//	    ПредДок = Стр.Ссылка;
	//		Акты = Актирование.Акты;
	//	Иначе
	//		Если ПредДок <> Стр.Ссылка Тогда
	//			Если Актирование.Акты.Количество() = 0 Тогда
	//			    Актирование.Записать(РежимЗаписиДокумента.Запись);
	//				Актирование.Удалить();
	//			Иначе	
	//			    Актирование.Записать(РежимЗаписиДокумента.Запись);
	//			КонецЕсли; 
	//			Актирование = Стр.Ссылка.ПолучитьОбъект();
	//	    	ПредДок = Стр.Ссылка;
	//			Акты = Актирование.Акты;
	//			ДокИзменен = Истина;
	//		КонецЕсли; 
	//		СтрокаАкта = Акты.Найти(Стр.НомерСтроки, "НомерСтроки");
	//		Акты.Удалить(СтрокаАкта);
	//	КонецЕсли; 
	//КонецЦикла;
	////Если ДокИзменен Тогда
	//	Если Актирование.Акты.Количество() = 0 Тогда
	//		Актирование.Записать(РежимЗаписиДокумента.Запись);
	//		Актирование.Удалить();
	//	Иначе	
	//		Актирование.Записать(РежимЗаписиДокумента.Запись);
	//	КонецЕсли; 
	////КонецЕсли; 
	//
	//// Удаление договоров
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВнутренниеДокументы.Ссылка
	//	|ПОМЕСТИТЬ ДоговоракУдалению
	//	|ИЗ
	//	|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
	//	|ГДЕ
	//	|	ВнутренниеДокументы.Ссылка В(&МассивДоговоров)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	мЭтапыДоговоров.Ссылка,
	//	|	мЭтапыДоговоров.Владелец
	//	|ПОМЕСТИТЬ Нельзя
	//	|ИЗ
	//	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	//	|ГДЕ
	//	|	мЭтапыДоговоров.Владелец В
	//	|			(ВЫБРАТЬ
	//	|				ДоговоракУдалению.Ссылка
	//	|			ИЗ
	//	|				ДоговоракУдалению КАК ДоговоракУдалению)
	//	|	И НЕ мЭтапыДоговоров.ПометкаУдаления
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ДоговоракУдалению.Ссылка
	//	|ИЗ
	//	|	ДоговоракУдалению КАК ДоговоракУдалению
	//	|ГДЕ
	//	|	НЕ ДоговоракУдалению.Ссылка В
	//	|				(ВЫБРАТЬ
	//	|					Нельзя.Владелец
	//	|				ИЗ
	//	|					Нельзя КАК Нельзя)";
	//
	//Запрос.УстановитьПараметр("МассивДоговоров", ТзЭтапыКУДалению.ВыгрузитьКолонку("ДоговорСсылка"));
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Если Не ВыборкаДетальныеЗаписи.Ссылка.ПометкаУдаления Тогда
	//		ОбъектКУдалению = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//		ОбъектКУдалению.УстановитьПометкуУдаления(Истина,);
	//		ОбъектКУдалению.Записать();
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры // УдалитьЛишниеЭтапы(АдресДанных1С)()
 
&НаСервере
Функция ЗагрузитьСтроку(СтрЭтап, АдресДанных)
	
	ЕстьОшибка = ЛОжь;
	УстановитьПривилегированныйРежим(Истина);

	СтруктураТаблицБД = ПолучитьИзВременногоХранилища(АдресДанных);
	ТзКорреспондент = СтруктураТаблицБД.ТзКорреспондент;
	ТзОбъекты = СтруктураТаблицБД.ТзОбъекты;
	ТзДоговора = СтруктураТаблицБД.ТзДоговора;
	ТзЭтапы = СтруктураТаблицБД.ТзЭтапы;
	//ТзЭтапыКУДалению = СтруктураТаблицБД.ТзЭтапыКУДалению;
	ТзАкты = СтруктураТаблицБД.ТзАкты;
	ТзВедомостиАктирования = СтруктураТаблицБД.ТзВедомостиАктирования;
	ТзВозвраты = СтруктураТаблицБД.ТзВозвраты;
	ТзОплаты = СтруктураТаблицБД.ТзОплаты;		                         			
	ТзПодразделения = СтруктураТаблицБД.ТзПодразделения;
	ТзВидыРабот = СтруктураТаблицБД.ТзВидыРабот;
	ТзГруппыЭтапов = СтруктураТаблицБД.ТзГруппыЭтапов;
	ТзБанки = СтруктураТаблицБД.ТзБанки;
	ТзБанковскиеСчета = СтруктураТаблицБД.ТзБанковскиеСчета;
	ТзКонтактныеЛица = СтруктураТаблицБД.ТзКонтактныеЛица;

	НомерДоговора = СтрЗаменить(СтрЭтап.НомерДоговора, Символы.НПП, "");
	ДатаДоговора = СтрЭтап.ДатаДоговора;
		
	// Строка Заказчика  
	Корреспондент = ПолучитьКорреспондента(СтрЭтап, ТзКорреспондент, ТзБанки, ТзБанковскиеСчета, ТзКонтактныеЛица);
		
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбъектРабот = Неопределено;
	Иначе
		ИмяОбъекта = СтрЭтап.НаименованиеОбъекта;
		Если ЗначениеЗаполнено(ИмяОбъекта) Тогда
			СтруктураОбъекта = Новый Структура();
			СтруктураОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
			СтруктураОбъекта.Вставить("СельсоветОбъекта", СтрЭтап.СельсоветОбъекта);
			СтруктураОбъекта.Вставить("АдресСельсоветаОбъекта", СтрЭтап.АдресСельсоветаОбъекта);
			СтруктураОбъекта.Вставить("ПочтовыйАдресОбъекта", СтрЭтап.ПочтовыйАдресОбъекта);
			СтруктураОбъекта.Вставить("ТелефоныОбъекта", СтрЭтап.ТелефоныОбъекта);
			СтруктураОбъекта.Вставить("АдресЗУОбъекта", СтрЭтап.АдресЗУОбъекта);
		
			ОбъектРабот = ПолучитьОбъект(Корреспондент, СтруктураОбъекта, ТзОбъекты);
		Иначе
			ОбъектРабот = Справочники.мОбъектыРабот.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
		
	Договор = ПолучитьДоговор(НомерДоговора, ДатаДоговора, Корреспондент, ТзДоговора);
	
	// Принцип определения отдела и группы этапов
	// Если у исполнителя и в этапе указана одна и та же группа, то надо брать подразделение исполнителя, а группу этапа не заполнять
	// Иначе подразделение из исполнителя, а группу этапа из этапа
	
	Исполнитель = Неопределено;
	ТабНомер = СтрЗаменить(СтрЭтап.ТабельныйНомер, Символы.НПП, "");
	Если ТабНомер = "185" и СокрЛП(СтрЭтап.ФИОИсполнителя) = "Шедько А.А.-увол" Тогда
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();	
	Иначе	
		Подразделение = ПолучитьПодразделение(ТабНомер, ТзПодразделения, СтрЭтап, Исполнитель);	
	КонецЕсли; 
	ГруппаЭтапа = Неопределено;
	
	Если СокрЛП(СтрЭтап.КодГруппыОтделовИсполнителя) <> СокрЛП(СтрЭтап.КодГруппыОтделовЭтапа) Тогда
		ГруппаЭтапа = ПолучитьГруппуЭтапа(СтрЭтап, ТзГруппыЭтапов);	
	КонецЕсли; 
		
	КодВидаРабот = СтрЗаменить(СтрЭтап.КодЭтапаРабота, Символы.НПП, "");
	ВидРабот = ПолучитьВидРаботыПоДоговору(КодВидаРабот, ТзВидыРабот, Корреспондент.ЮрФизЛицо);
	Если ВидРабот = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не определен вид работ по коду "+КодВидаРабот+" для "+Корреспондент.ЮрФизЛицо;
		//Сообщение.Поле = "Номенклатура[10].Количество";
		//Сообщение.УстановитьДанные(ОбъектДанных);
		Сообщение.Сообщить();
		
		//Сообщить("Не определен вид работ по коду "+КодВидаРабот);
		ЕстьОшибка = Истина;
		Возврат ЕстьОшибка;
	КонецЕсли; 
	
	НомерЭтапа = СтрЭтап.НомерЭтапа;
	Этап = ПолучитьЭтап(Договор, НомерЭтапа, ОбъектРабот, ТзЭтапы, Подразделение, ВидРабот, СтрЭтап, ГруппаЭтапа, Исполнитель);
	
	//// Удаляем этап из ТзЭтапыКУДалению
	//Если УдалятьЛишние Тогда
	//	ИскСтрока = ТзЭтапыКУДалению.Найти(Этап, "ЭтапСсылка");
	//	Если ИскСтрока <> Неопределено Тогда
	//		ТзЭтапыКУДалению.Удалить(ИскСтрока);
	//	КонецЕсли; 
	//КонецЕсли; 
	
	// Акты
	ПолучитьАкт(Договор, Этап, Корреспондент, ТзАкты, ТзВедомостиАктирования, СтрЭтап);
	
	// Оплаты
	Сумма = 0;
	//Если СтрЭтап.Опл13 > 0 Тогда
	//	Док = ПолучитьОплату(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаОплаты), СтрЭтап.Опл13, ТзОплаты);
	//	//Сумма = СтрЭтап.Опл13;
	//КонецЕсли; 
	//Иначе
	Если СтрЭтап.Опл14 > 0 Тогда
		Док = ПолучитьОплату(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаОплаты), СтрЭтап.Опл14, ТзОплаты);
		//Сумма = СтрЭтап.Опл14;	
	КонецЕсли; 
	//Иначе
	Если СтрЭтап.Опл15 > 0 Тогда
		Док = ПолучитьОплату(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаОплаты), СтрЭтап.Опл15, ТзОплаты);
		//Сумма = СтрЭтап.Опл15;
	КонецЕсли; 
	
	////ВсегоОплата = ПреобразоватьКЧислу(СтрЭтап.СуммаОплаты);
	//Если Сумма > 0 Тогда
	//	Если ЗначениеЗаполнено(СтрЭтап.ДатаОплаты) Тогда
	//		ДатаОплаты = Дата(СтрЭтап.ДатаОплаты);
	//		Если (СтрДлина(СокрЛП(ДатаОплаты))>=10) Тогда
	//			Док = ПолучитьОплату(Корреспондент, Договор, Этап, ДатаОплаты, Сумма, ТзОплаты);
	//		КонецЕсли; 
	//	Иначе
	//		Сообщение = Новый СообщениеПользователю();
	//		Сообщение.Текст = "Нет даты оплаты "+Договор+" этап =  "+Этап + " сумма = " + Сумма;
	//		//Сообщение.Поле = "Номенклатура[10].Количество";
	//		//Сообщение.УстановитьДанные(ОбъектДанных);
	//		Сообщение.Сообщить();
	//	КонецЕсли; 
	//КонецЕсли; 
		
	// Возвраты
	//Если СтрЭтап.Воз13 > 0 Тогда
	//	Док = ПолучитьВозврат(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаВозврата), СтрЭтап.Воз13, ТзВозвраты);
	//КонецЕсли; 
	Если СтрЭтап.Воз14 > 0 Тогда
		Док = ПолучитьВозврат(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаВозврата), СтрЭтап.Воз14, ТзВозвраты);
	КонецЕсли; 
	Если СтрЭтап.Воз15 > 0 Тогда
		Док = ПолучитьВозврат(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаВозврата), СтрЭтап.Воз15, ТзВозвраты);
	КонецЕсли; 
	
	//Сумма = 0;
	//Если СтрЭтап.Воз13 > 0 Тогда
	//	Сумма = СтрЭтап.Воз13;
	//ИначеЕсли СтрЭтап.Воз14 > 0 Тогда
	//	Сумма = СтрЭтап.Воз14;	
	//Иначе
	//	Сумма = СтрЭтап.Воз15;
	//КонецЕсли; 
	//
	////Сумма = ПреобразоватьКЧислу(СтрЭтап.СуммаВозврата);
	//Если (СтрДлина(СокрЛП(СтрЭтап.ДатаВозврата))>=10)И(Сумма>0) Тогда
	//	Док = ПолучитьВозврат(Корреспондент, Договор, Этап, Дата(СтрЭтап.ДатаВозврата), Сумма, ТзВозвраты);
	//КонецЕсли; 
	
	Возврат ЕстьОшибка;
КонецФункции

&НаСервере
Функция ПолучитьКорреспондента(СтрЭтап, ТзКорреспондент, ТзБанки, ТзБанковскиеСчета, ТзКонтактныеЛица)
	УНП = СтрЭтап.УНП;
	Наим = СокрЛП(СтрЭтап.НаименованиеКлиента);
		
	// Поиск Корреспондента по УНП
	Если ЗначениеЗаполнено(УНП) Тогда
		НайденнаяСтрока = ТзКорреспондент.Найти(УНП, "ИНН"); 
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		// ищем по наименованию 
		НайденнаяСтрока = ТзКорреспондент.Найти(Наим, "Наименование"); 
	КонецЕсли; 
	
	Если НайденнаяСтрока = Неопределено Тогда
		// ищем по Полному наименованию (254 символа)
		НайденнаяСтрока = ТзКорреспондент.Найти(Наим, "ПолноеНаименование"); 
	КонецЕсли; 
	
	Если НайденнаяСтрока = Неопределено Тогда
		// создаем
		
		НовыйКорреспондент = Справочники.Корреспонденты.СоздатьЭлемент();
		НовыйКорреспондент.УстановитьНовыйКод();
		НовыйКорреспондент.ИНН = УНП;
		НовыйКорреспондент.КодПоОКПО = СтрЭтап.ОКПО;
		НовыйКорреспондент.Наименование = Наим;
		НовыйКорреспондент.ПолноеНаименование = Наим;
		НовыйКорреспондент.ЮрФизЛицо = ПолучитьВидЛица(УНП, Наим);
		НовыйКорреспондент.Комментарий = СтрЭтап.КодКлиента; // для возможной синхронизации
		НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
		
		
		НовыйКорреспондент.Записать();
		//Сообщить("Добавлен Корреспондент "+Наим);
		
		Если ЗначениеЗаполнено(СтрЭтап.Город) или ЗначениеЗаполнено(СтрЭтап.Улица) Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента;
			СтруктураКИ = Новый Структура();
			СтруктураКИ.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента);
			СтруктураКИ.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			СтруктураКИ.Вставить("Представление", 
				""+?(ЗначениеЗаполнено(СтрЭтап.Улица), СокрЛП(СтрЭтап.Улица), "") + 
				?(ЗначениеЗаполнено(СтрЭтап.Дом), ", " + СокрЛП(СтрЭтап.Дом), "") +
				?(ЗначениеЗаполнено(СтрЭтап.Город), ", " + СокрЛП(СтрЭтап.Город), "") +
				?(ЗначениеЗаполнено(СтрЭтап.Индекс), СокрЛП(СтрЭтап.Индекс), ""));
			Если ЗначениеЗаполнено(СтрЭтап.Город) Тогда
				СтруктураКИ.Вставить("Город", СокрЛП(СтрЭтап.Город)); 
			КонецЕсли; 
			КлючСтроки = Новый Структура(); 
			КлючСтроки.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента);
			КлючСтроки.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
			
			УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъекта(НовыйКорреспондент.Ссылка, 
				ВидКИ, 
				СтруктураКИ,
				КлючСтроки);
			
		КонецЕсли; 
		
		Корреспондент = НовыйКорреспондент.Ссылка; //Справочники.Корреспонденты.ДоВыяснения;
		
		// расчетный счет
		Если ЗначениеЗаполнено(СтрЭтап.РасчетныйСчет) и ЗначениеЗаполнено(СтрЭтап.КодБанка) Тогда
			Банк = ПолучитьБанк(СтрЭтап, ТзБанки);	
			БанковскийСчет = ПолучитьБанковскийСчет(Корреспондент, Банк, СтрЭтап, ТзБанковскиеСчета);
			НовыйКорреспондент = Корреспондент.ПолучитьОбъект();
		    НовыйКорреспондент.ОсновнойБанковскийСчет = БанковскийСчет;
			НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
			НовыйКорреспондент.Записать();
		КонецЕсли; 
		
		// Контактное лицо
		Если ЗначениеЗаполнено(СтрЭтап.ФамилияДир) Тогда
			ПолучитьКонтактноеЛицо(Корреспондент, СтрЭтап, ТзКонтактныеЛица);
		КонецЕсли; 
		
		// добавление в ТЗ
		НоваяСтрока = ТзКорреспондент.Добавить();
		НоваяСтрока.ИНН = УНП;
		НоваяСтрока.Наименование = Наим;
		НоваяСтрока.ПолноеНаименование = Наим;
		НоваяСтрока.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НоваяСтрока.КорреспондентСсылка = Корреспондент;
		
		ЛогФайл.ДобавитьСтроку("Добавлен Корреспондент: "+Корреспондент);
	Иначе
		Корреспондент = НайденнаяСтрока.КорреспондентСсылка;	
	КонецЕсли; 
	
	// доп проверка банковского счета
	Если ЗначениеЗаполнено(СтрЭтап.РасчетныйСчет) и ЗначениеЗаполнено(СтрЭтап.КодБанка) и Не ЗначениеЗаполнено(Корреспондент.ОсновнойБанковскийСчет) Тогда
		Банк = ПолучитьБанк(СтрЭтап, ТзБанки);	
		БанковскийСчет = ПолучитьБанковскийСчет(Корреспондент, Банк, СтрЭтап, ТзБанковскиеСчета);
		НовыйКорреспондент = Корреспондент.ПолучитьОбъект();
		НовыйКорреспондент.ОсновнойБанковскийСчет = БанковскийСчет;
		НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
		НовыйКорреспондент.Записать();
	КонецЕсли; 
	
	// Контактное лицо
	Если ЗначениеЗаполнено(СтрЭтап.ФамилияДир) Тогда
		ПолучитьКонтактноеЛицо(Корреспондент, СтрЭтап, ТзКонтактныеЛица);
	КонецЕсли; 
	
	Возврат Корреспондент;
КонецФункции

&НаСервере
Функция ПолучитьВидЛица(УНП, Наим)
	Если ЗначениеЗаполнено(УНП) Тогда
		Если Лев(Наим, 19)="Индивидуальный пред" Тогда
			Возврат Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе
			Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;	
	Иначе
		Если Лев(Наим, 3)="гр." или Лев(Наим, 3)="Гр." Тогда
			Возврат Перечисления.ЮрФизЛицо.ФизЛицо;;
			
		ИначеЕсли Лев(Наим, 5)="гражд" или Лев(Наим, 5)="Гражд" Тогда
			Возврат Перечисления.ЮрФизЛицо.ФизЛицо;;
			
		ИначеЕсли Лев(Наим, 19)="Индивидуальный пред" Тогда
			Возврат Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
			
		Иначе
			Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ПолучитьВидЛица()

&НаСервере
Функция ПолучитьДоговор(Номер, Дата, Корреспондент, ТзДоговора)
	
	// Если договор был обработан - пропускаем
	ДатаДог = Дата(Дата);
	НомерДог = СокрЛП(Номер) + "-" + Прав(Год(ДатаДог), 2);
	
	Отбор = Новый Структура("Номер, Дата", НомерДог, ДатаДог);
	
	// Если договор существует - возвращаем
	Строки = ТзДоговора.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ДоговорСсылка;		
	КонецЕсли; 
	
	// Запись договора
	Дог = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
	Дог.Бессрочный = Истина;
	Дог.Организация = НашаОрганизация;
	Дог.Валюта = Справочники.Валюты.НайтиПоКоду(974);
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Дог.ВидДокумента = ВидДокументаДоговорЮрЛиц;
		Дог.Папка = ПолучитьПапкуВнутреннихДокументов("Договоры");
	Иначе
		Дог.ВидДокумента = ВидДокументаДоговорФизЛиц;
		Дог.Папка = ПолучитьПапкуВнутреннихДокументов("Договоры");
	КонецЕсли; 
	Дог.ДатаНачалаДействия = Дата;
	Дог.ДатаРегистрации = Дата;
	Дог.Заголовок = "" + СтрЗаменить(НомерДог, Символы.НПП, "")+" "+Лев(Дата,10)+" "+СокрЛП(Корреспондент.Наименование);
	Дог.Наименование = "" + СтрЗаменить(НомерДог, Символы.НПП, "")+" "+Лев(Дата,10)+" "+СокрЛП(Корреспондент.Наименование);
	Дог.Корреспондент = Корреспондент;
	Дог.Корреспонденты.Очистить();
	НовКорр = Дог.Корреспонденты.Добавить();
	НовКорр.Корреспондент = Корреспондент;
	
	Дог.РегистрационныйНомер = НомерДог;
	Попытка
		Дог.ЧисловойНомер = Число(Номер);
	Исключение
		ЛогФайл.ДобавитьСтроку("Ошибка в номере договора: "+НомерДог);
	КонецПопытки;
	//Дог.СрокИсполнения = ?(ЗначениеЗаполнено(ДанныеЭлемента.dat_vypoln),ДанныеЭлемента.dat_vypoln,"");
	//Дог.Комментарий = "Заявка: "+СокрЛП(ДанныеЭлемента.DOG_NOM_ZA)+" от "+Лев(ДанныеЭлемента.DATA_POST_,10);
	//Дог.Проведен = Истина;
	Дог.ГрифДоступа = Справочники.ГрифыДоступа.НайтиПоНаименованию("Общий");
	Дог.ВопросДеятельности = Справочники.ВопросыДеятельности.НайтиПоНаименованию("Основной");
	Дог.ОбменДанными.Загрузка = Истина;
	Дог.Записать();
	
	ЛогФайл.ДобавитьСтроку("Добавлен Договор: "+Дог.Наименование);
	
	// Добавление в ТзДоговора
	СтрОбработанных = ТзДоговора.Добавить();
	СтрОбработанных.Номер = НомерДог;
	СтрОбработанных.Дата = Дата;
	СтрОбработанных.ДоговорСсылка = Дог.Ссылка;
	СтрОбработанных.Корреспондент = Корреспондент;
	
	// Запись состояния
	Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	СостоянияДоговоров = РегистрыСведений.ТекущиеСостоянияДокументов;
	НаборЗаписей = СостоянияДоговоров.СоздатьНаборЗаписей();
		
	НаборЗаписей.Отбор.Документ.Установить(Дог.Ссылка);
	НаборЗаписей.Отбор.Состояние.Установить(Состояние);
		
	НовЗапись = НаборЗаписей.Добавить();
	//НовЗапись.Период = Дата;
	НовЗапись.Документ = Дог.Ссылка;
	НовЗапись.Состояние = Состояние;
	НовЗапись.ДатаУстановки = Дата;
	НаборЗаписей.Записать(Истина);
	
	Возврат Дог.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьОбъект(Корреспондент, СтруктураОбъекта, ТзОбъекты)
	
	//// Проверка наличия объекта
	//Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
	//	Возврат Справочники.мОбъектыРабот.ПустаяСсылка();		
	//КонецЕсли; 
			
	ИмяОбъекта = СтруктураОбъекта.ИмяОбъекта;
	
	Отбор = Новый Структура("Корреспондент, ПолноеНаименованиеОбъекта", Корреспондент, ИмяОбъекта);
	Строки = ТзОбъекты.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].ОбъектСсылка;
	КонецЕсли; 
	
	//// Для физ лиц объекты не создаем
	//Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
	//Иначе                           
	//	Возврат Справочники.мОбъектыРабот.ПустаяСсылка();		
	//КонецЕсли; 
		
	// Запись Объекта
	ОбъектРабот = Справочники.мОбъектыРабот.СоздатьЭлемент();
	ОбъектРабот.УстановитьНовыйКод();
	ОбъектРабот.Владелец = Корреспондент;
	ОбъектРабот.Наименование = ИмяОбъекта;
	ОбъектРабот.ПолноеНаименование = ИмяОбъекта;
	ТелефоныОбъекта = СтруктураОбъекта.ТелефоныОбъекта;
	Если ЗначениеЗаполнено(ТелефоныОбъекта) Тогда
		ОбъектРабот.Комментарий = "Тел."+ТелефоныОбъекта+", " + СокрЛП(СтруктураОбъекта.СельсоветОбъекта)+" "+СокрЛП(СтруктураОбъекта.АдресСельсоветаОбъекта);
	Иначе	
		ОбъектРабот.Комментарий = ""+СокрЛП(СтруктураОбъекта.СельсоветОбъекта)+" "+СокрЛП(СтруктураОбъекта.АдресСельсоветаОбъекта);
	КонецЕсли; 
	ОбъектРабот.ОбменДанными.Загрузка = Истина;
	
	// Добавление контактной информации
	ПочтовыйАдресОбъекта = СтруктураОбъекта.ПочтовыйАдресОбъекта;
	Если ЗначениеЗаполнено(ПочтовыйАдресОбъекта) Тогда
		КИОбъекта = ОбъектРабот.КонтактнаяИнформация;
		НовЗапись = КИОбъекта.Добавить();
		НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОбъектаРабот;
		НовЗапись.Представление = ПочтовыйАдресОбъекта; 
	КонецЕсли; 
	
	АдресЗУОбъекта = СтруктураОбъекта.АдресЗУОбъекта;
	Если ЗначениеЗаполнено(АдресЗУОбъекта) Тогда
		КИОбъекта = ОбъектРабот.КонтактнаяИнформация;
		НовЗапись = КИОбъекта.Добавить();
		НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот;
		НовЗапись.Представление = АдресЗУОбъекта; 
	КонецЕсли; 
		
	ОбъектРабот.Записать();

	//_ЛогФайл = ДанныеФормыВЗначение("ЛогФайл", Тип("Файл");
	ЛогФайл.ДобавитьСтроку("Добавлен объект: "+ОбъектРабот.Наименование);

	// добавление в ТзОбъекты для исключения дублей объектов
	НоваяСтрока = ТзОбъекты.Добавить();
	НоваяСтрока.Корреспондент = Корреспондент;
	НоваяСтрока.ОбъектСсылка = ОбъектРабот.Ссылка;
	НоваяСтрока.НаименованиеОбъекта = ИмяОбъекта; 
	НоваяСтрока.ПолноеНаименованиеОбъекта = ИмяОбъекта; 

	Возврат ОбъектРабот.Ссылка;		

КонецФункции

&НаСервере
Функция ПолучитьПодразделение(ТабельныйНомер, Тз, СтрЭтап, Исполнитель)
	
	Если Не ЗначениеЗаполнено(ТабельныйНомер) Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();		
	КонецЕсли; 
	
	СтрокаПодр = Тз.Найти(ТабельныйНомер, "ТабельныйНомер");
	
	Если СтрокаПодр = Неопределено Тогда
		
		// добавляем сотрудника в Уволенные
		НовыйСотр = Справочники.Пользователи.СоздатьЭлемент();
		НовыйСотр.Наименование = СтрЭтап.ФИОИсполнителя;
		НовыйСотр.ПредставлениеВДокументах = СтрЭтап.ФИОИсполнителя;
		НовыйСотр.ТабельныйНомер = ТабельныйНомер;
		НовыйСотр.ОбменДанными.Загрузка = Истина;
		НовыйСотр.Записать();
		
		Исполнитель = НовыйСотр.Ссылка;
		
		// Запись в Уволенные
		ГруппаУволенныхОбъект = ГруппаУволенных.ПолучитьОбъект();
		
		НовПользователь = ГруппаУволенныхОбъект.Состав.Добавить();
		НовПользователь.Пользователь = Исполнитель;
		ГруппаУволенныхОбъект.ОбменДанными.Загрузка = Истина;
		ГруппаУволенныхОбъект.Записать();
		
		// добавляем в Тз
		НовСтрока = Тз.Добавить();
		НовСтрока.ТабельныйНомер = ТабельныйНомер;
		НовСтрока.Пользователь = Исполнитель;
		НовСтрока.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
		
	//ИначеЕсли Не ЗначениеЗаполнено(СтрокаПодр.Подразделение) Тогда
	//	Исполнитель = СтрокаПодр.Пользователь;
	//	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли; 
	
	Исполнитель = СтрокаПодр.Пользователь;
	
	Возврат СтрокаПодр.Подразделение;
		
КонецФункции

&НаСервере
Функция ПреобразоватьКЧислу(Значение)
    ВозвращаемоеЗначение = 0;
	ТипЗначения = ТипЗнч(Значение);
    Если ТипЗначения = Тип("Строка") или ТипЗначения = Тип("Число") Тогда 
        ВозвращаемоеЗначение = Число(Значение);
    КонецЕсли;
    Возврат ВозвращаемоеЗначение;
КонецФункции	

&НаСервере
Функция ПолучитьЭтап(Договор, НомерЭтапа, ОбъектРабот, ТзЭтапы, Подразделение, ВидРабот, СтрТЗ, ГруппаЭтапа, Исполнитель)
	
	Отбор = Новый Структура("ДоговорСсылка, НомерЭтапа", Договор, Число(НомерЭтапа));
	СтрокиДог = ТзЭтапы.НайтиСтроки(Отбор);
	
	Если СтрокиДог.Количество() > 0 Тогда
		// Проверка и запись Подразделения
		Если ЗначениеЗаполнено(Подразделение) и Не ЗначениеЗаполнено(СтрокиДог[0].ЭтапСсылка.Подразделение) Тогда
			ЭтапОбъект = СтрокиДог[0].ЭтапСсылка.ПолучитьОбъект();
			ЭтапОбъект.Подразделение = Подразделение;
			ЭтапОбъект.ОбменДанными.Загрузка = Истина;
			
			// Проверка и добавление исполнителя
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				СтрокаИсп = ЭтапОбъект.Исполнители.Найти(Исполнитель, "Исполнитель");
				Если СтрокаИсп = Неопределено Тогда
					НовИсп = ЭтапОбъект.Исполнители.Добавить();
					НовИсп.Исполнитель = Исполнитель;
					НовИсп.КТУ = 1;
				КонецЕсли; 
			КонецЕсли; 
			
			ЭтапОбъект.Записать();
			
			Возврат ЭтапОбъект.Ссылка;
		Иначе	
			// Проверка и добавление исполнителя
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				Исполнители = СтрокиДог[0].ЭтапСсылка.Исполнители;
				СтрокаИсп = Исполнители.Найти(Исполнитель, "Исполнитель");
				Если СтрокаИсп = Неопределено Тогда
					ЭтапОбъект = СтрокиДог[0].ЭтапСсылка.ПолучитьОбъект();
					НовИсп = ЭтапОбъект.Исполнители.Добавить();
					НовИсп.Исполнитель = Исполнитель;
					НовИсп.КТУ = 1;
					ЭтапОбъект.ОбменДанными.Загрузка = Истина;
					ЭтапОбъект.Записать();
				КонецЕсли; 
			КонецЕсли; 
			
			Возврат СтрокиДог[0].ЭтапСсылка;		
		КонецЕсли; 
	КонецЕсли; 
	
	СтоимостьСНДС 	= ПреобразоватьКЧислу(СтрТЗ.ВсегоСНДС);
	СтрокаНДС 		= СтрТЗ.ПроцентНДС;
	СуммаНДС		= ПреобразоватьКЧислу(СтрТЗ.СуммаНДС);
	
	// Запись ЭтапаДоговора
	Этап = Справочники.мЭтапыДоговоров.СоздатьЭлемент();
	Этап.УстановитьНовыйКод();
	Этап.Владелец = Договор;
	Этап.Договор = Договор;
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Этап.ВидРабот 	= ВидРабот;
		Этап.Наименование = ""+НомерЭтапа+" "+ВидРабот.Наименование;
	Иначе
		Этап.Наименование = ""+НомерЭтапа;
	КонецЕсли; 
	Этап.НомерЭтапа = НомерЭтапа;
	
	Если ЗначениеЗаполнено(ОбъектРабот) Тогда
		// для физ лиц не нужен
		Этап.ОбъектРабот = ОбъектРабот;
	КонецЕсли; 
	
	Этап.Подразделение = Подразделение;
	Этап.СтоимостьСНДС = СтоимостьСНДС;
	Этап.СуммаНДС = СуммаНДС;
	Этап.Стоимость = СтоимостьСНДС - СуммаНДС;
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		НовИсп = Этап.Исполнители.Добавить();
		НовИсп.Исполнитель = Исполнитель;
		НовИсп.КТУ = 1;
	КонецЕсли; 
	
	Если Лев(СтрокаНДС,2) = "20" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_20;;
	ИначеЕсли Лев(СтрокаНДС,2) = "18" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_18;
	ИначеЕсли Лев(СтрокаНДС,1) = "0" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_0;
	Иначе
		Сообщить("Неопределенное значение в графе NDSPrc:"+СтрокаНДС+" Ставка НДС не определена!");	
	КонецЕсли;
	Этап.ГруппаЭтаповДоговоров = ГруппаЭтапа;
	Этап.ОбменДанными.Загрузка = Истина;
	Этап.Записать();
	
	ЛогФайл.ДобавитьСтроку("Добавлен этап: "+Этап.Наименование);
	
	// Добавление Этапа в ТзЭтапы
	НовСтрока = ТзЭтапы.Добавить();
	НовСтрока.ДоговорСсылка = Договор;
	НовСтрока.НомерЭтапа = НомерЭтапа;
	НовСтрока.ЭтапСсылка = Этап.Ссылка;
	
	// Запись даты продления - пишется как новый плановый срок
	ДатаПродления = СтрТЗ.ДатаПродления;
	Если ЗначениеЗаполнено(ДатаПродления) Тогда
		//ВидДаты = Справочники.мВидыДатДоговоров.ДатаПродления;
		ВидДаты = Справочники.мВидыДатДоговоров.ПлановыйСрок;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтапДоговора", Этап.Ссылка);
		//СтруктураОтбора.Вставить("Основание", Этап.Ссылка);
		СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДаты);
		
		ТаблицаДляЗаписи = мРаботаСДоговорами.СоздатьТаблицуДляЗаписиДатыДоговоров(Этап.Ссылка,
		ВидДаты,	ДатаПродления,	Этап.Ссылка);
		
		ТаблицаДляЗаписи[0].ВидДатыДоговора = ВидДаты;
		ТаблицаДляЗаписи[0].Дата = ДатаПродления;
		
		мРаботаСДоговорами.ЗаписатьДатуДоговора(ТаблицаДляЗаписи, СтруктураОтбора); 
	Иначе
		
		// Запись планового срока
		ПлановыйСрок = СтрТЗ.ПлановыйСрок;
		Если ЗначениеЗаполнено(ПлановыйСрок) Тогда
			ВидДаты = Справочники.мВидыДатДоговоров.ПлановыйСрок;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭтапДоговора", Этап.Ссылка);
			//СтруктураОтбора.Вставить("Основание", Этап.Ссылка);
			СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДаты);
			
			ТаблицаДляЗаписи = мРаботаСДоговорами.СоздатьТаблицуДляЗаписиДатыДоговоров(Этап.Ссылка,
			ВидДаты,	Договор.ДатаРегистрации,	Этап.Ссылка);
			
			ТаблицаДляЗаписи[0].ВидДатыДоговора = ВидДаты;
			ТаблицаДляЗаписи[0].Дата = ПлановыйСрок;
			
			мРаботаСДоговорами.ЗаписатьДатуДоговора(ТаблицаДляЗаписи, СтруктураОтбора); 
		КонецЕсли; 
	КонецЕсли; 
		
	//Сообщить("Добавлен Этап "+Договор+" "+Этап.Наименование);
	Возврат Этап.Ссылка;		

КонецФункции

&НаСервере
Функция ПолучитьГруппуЭтапа(СтрЭтап, ТзГруппыЭтапов)
	//|	DogEtap.Gruppa КАК ГруппаЭтапа,
	//|	SWorker.TN КАК ТабНомер,
	//|	SWorker.FIO КАК ИсполнительФИО,
	//|	SWorker.Gruppa КАК ГруппаИсполнителя,
	//|	SOtdel.Kod КАК КодОтделаЭтапа,
	//|	SOtdel.Nai КАК НаименованиеОтделаЭтапа,
	//|	DogEtap.AktSost,
	//|	SGruppa.Otdel КАК ОтделГруппыЭтапа,
	//|	SGruppa.Nai КАК НаименованиеГруппыЭтапа,
	//|	SGruppaWorker.Nai КАК НаименованиеГруппыИсполнителя,
	//|	SOtdelWorker.Nai КАК НаименованиеОтделаГруппыИсполнителя

	//|	ГруппыИсп.Наименование КАК НаименованиеГруппыОтделовИсполнителя,
	//|	ОтделыИсп.Наименование КАК НаименованиеОтделаИсполнителя,
	//|	ГруппыЭтапов.Наименование КАК НаименованиеГруппыОтделовЭтапа,
	//|	ОтделыЭтапов.Наименование КАК НаименованиеОтделаЭтапа,
	//|	ГруппыЭтапов.КодГруппыОтделов КАК КодГруппыОтделовЭтапа,
	//|	ОтделыЭтапов.КодОтдела КАК КодОтделаЭтапа,
	
	// Структура Группа
	//              Элемент

	КодОтдела = СокрЛП(СтрЗаменить(СтрЭтап.КодОтделаЭтапа, Символы.НПП, ""));         // Родитель - Группа
	КодГруппы = СокрЛП(СтрЗаменить(СтрЭтап.КодГруппыОтделовЭтапа, Символы.НПП, ""));  // Элемент
	КодПоиска = ""+СокрЛП(КодОтдела)+" "+СокрЛП(КодГруппы);
	
	// Поиск общий
	ИскСтрока = ТзГруппыЭтапов.Найти(КодПоиска, "ВспомогательныйКод");
	
	Если ИскСтрока = Неопределено Тогда
		// Поиск ГруппаЭтапа
		ИскСтрока = ТзГруппыЭтапов.Найти(КодОтдела, "ВспомогательныйКод");
		
		Если ИскСтрока = Неопределено Тогда
			// Создание Группа
			НовГруппа = Справочники.мГруппыЭтаповДоговоров.СоздатьГруппу();
			НовГруппа.УстановитьНовыйКод();
			НовГруппа.ВспомогательныйКод = КодОтдела;
			НовГруппа.Наименование = СтрЭтап.НаименованиеОтделаЭтапа;
			НовГруппа.ОбменДанными.Загрузка = Истина;
			НовГруппа.Записать();
			
			ГруппаЭтапа = НовГруппа.Ссылка;
			
			// добавление в Тз
			НовСтрока = ТзГруппыЭтапов.Добавить();
			НовСтрока.ВспомогательныйКод = КодОтдела;
			НовСтрока.ГруппаЭтапа = ГруппаЭтапа;
	
		Иначе
			ГруппаЭтапа = ИскСтрока.ГруппаЭтапа;
		КонецЕсли; 
		
		// Создание элемента
		НовЭлемент = Справочники.мГруппыЭтаповДоговоров.СоздатьЭлемент();
		НовЭлемент.УстановитьНовыйКод();
		НовЭлемент.ВспомогательныйКод = КодПоиска;
		НовЭлемент.Наименование = СтрЭтап.НаименованиеГруппыОтделовЭтапа;
		НовЭлемент.Родитель = ГруппаЭтапа;
		НовЭлемент.ОбменДанными.Загрузка = Истина;
		НовЭлемент.Записать();
		
		ИскЭлемент = НовЭлемент.Ссылка;
		
		// добавление в Тз
		НовСтрока = ТзГруппыЭтапов.Добавить();
		НовСтрока.ВспомогательныйКод = КодПоиска;
		НовСтрока.ГруппаЭтапа = ИскЭлемент;
	
	Иначе	
		ИскЭлемент = ИскСтрока.ГруппаЭтапа;
	КонецЕсли; 
	
	Возврат ИскЭлемент;
КонецФункции // ПолучитьГруппуЭтапа()
 
&НаСервере
Функция ПолучитьВидРаботыПоДоговору(КодВидаРабот, ТзВидыРабот, ЮрФизЛицо)
	СтрокаТЗ = ТзВидыРабот.Найти(КодВидаРабот, "КодРаботы");
	
	Если СтрокаТЗ = Неопределено Тогда
		Возврат СтрокаТЗ;
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		Возврат СтрокаТЗ.ВидРаботыФЛ;
	Иначе	
		Возврат СтрокаТЗ.ВидРаботыЮЛ;
	КонецЕсли; 
КонецФункции // ПолучитьВидРаботыПоДоговору()

&НаСервере
Функция ПолучитьАкт(Договор, ЭтапДоговора, Корреспондент, ТзАкты, ТзВедомостиАктирования, СтрТЗ)
	
	//СуммаАкта 	= ПреобразоватьКЧислу(СтрТЗ.Заактировано);
	СуммаАкта = 0;
	//Если СтрТЗ.Акт13 > 0 Тогда
	//	СуммаАкта = СтрТЗ.Акт13; 
	//Иначе
	Если СтрТЗ.Акт14 > 0 Тогда
		СуммаАкта = СтрТЗ.Акт14; 
	Иначе
		СуммаАкта = СтрТЗ.Акт15; 
	КонецЕсли; 
	
	// Проверка наличия акта в загружаемом файле
	Если (СтрДлина(СокрЛП(СтрТЗ.ДатаАкта)) < 10)или(СуммаАкта = 0) Тогда
		Возврат "";		
	КонецЕсли; 
	
	ДатаАкта 	= Дата(СтрТЗ.ДатаАкта);
	
	ОтборАктов = Новый Структура("Договор, ЭтапДоговора, ДатаАкта, Сумма", Договор, ЭтапДоговора, ДатаАкта, СуммаАкта);
	СтрокиАктов = ТзАкты.НайтиСтроки(ОтборАктов);
	Если СтрокиАктов.Количество() > 0 Тогда
		Возврат СтрокиАктов[0];		
	КонецЕсли; 
	
	ВедомостьАктирования = ПолучитьВедомостьАктирования(КонецМесяца(ДатаАкта), ТзВедомостиАктирования);
	
	// если такой акт уже в ведомости есть - возврат
	//ОтборАктов = Новый Структура("Договор, ЭтапДоговора, ДатаАкта, Сумма", Договор, ЭтапДоговора, ДатаАкта, СуммаАкта);
	//СтрокиАктов = ВедомостьАктирования.Акты.НайтиСтроки(ОтборАктов);
	//Если СтрокиАктов.Количество() > 0 Тогда
	//	
	//	// не сработал фильтр по ТзАкты ранее
	//	СтрокаТЗ = ТзАкты.Добавить();
	//	СтрокаТЗ.Договор = Договор;
	//	СтрокаТЗ.ЭтапДоговора = ЭтапДоговора;
	//	СтрокаТЗ.ДатаАкта = ДатаАкта;
	//	СтрокаТЗ.Сумма = СуммаАкта;

	//	Возврат СтрокиАктов[0];		
	//КонецЕсли; 

	// Добавить новый акт в ведомость актирования
	ДокВедомостьАктирования = ВедомостьАктирования.ПолучитьОбъект();
	НовАкт = ДокВедомостьАктирования.Акты.Добавить();
	//НовАкт.Корреспондент = Корреспондент;
	НовАкт.Договор = Договор;
	НовАкт.ЭтапДоговора = ЭтапДоговора;
	//НовАкт.Подразделение = ЭтапДоговора.Подразделение;
	НовАкт.ДатаАкта = ДатаАкта;
	НовАкт.Сумма = СуммаАкта;
	Ставка = ЭтапДоговора.СтавкаНДС.Ставка;
	НовАкт.НДС = СуммаАкта * Ставка / (100 + Ставка);
	НовАкт.НомерАкта = СокрЛП(Договор.РегистрационныйНомер)+"/"+СокрЛП(ЭтапДоговора.НомерЭтапа);
	
	ДокВедомостьАктирования.ОбменДанными.Загрузка = Истина;
	ДокВедомостьАктирования.Записать();
	
	ЛогФайл.ДобавитьСтроку("Добавлен акт: "+НовАкт.НомерАкта+" от "+ДатаАкта+". Ведомость: "+ДокВедомостьАктирования);
	
	СтрокаТЗ = ТзАкты.Добавить();
	СтрокаТЗ.Договор = Договор;
	СтрокаТЗ.ЭтапДоговора = ЭтапДоговора;
	СтрокаТЗ.ДатаАкта = ДатаАкта;
	СтрокаТЗ.Сумма = СуммаАкта;

	Возврат НовАкт;
КонецФункции

&НаСервере
Функция ПолучитьБанк(СтрЭтап, ТзБанки)

	Отбор = Новый Структура;
	Отбор.Вставить("Код", СтрЭтап.КодБанка);
	Отбор.Вставить("Наименование", СтрЭтап.НаименованиеБанка);

	Строки = ТзБанки.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
	
	НовБанк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
	НовБанк.Код = СтрЭтап.КодБанка;
	НовБанк.Наименование = СтрЭтап.НаименованиеБанка;
	НовБанк.Город = СтрЭтап.ГородБанка;
	НовБанк.Адрес = СтрЭтап.АдресБанка;
	НовБанк.ОбменДанными.Загрузка = Истина;
	НовБанк.Записать();
	
	//Добавление в ТзБанки	
	НовСтрока = ТзБанки.Добавить();
	НовСтрока.Код = НовБанк.Код;
	НовСтрока.Наименование = НовБанк.Наименование;
	НовСтрока.Ссылка = НовБанк.Ссылка;

	Возврат НовБанк.Ссылка;
КонецФункции // ПолучитьБанк()
 
&НаСервере
Функция ПолучитьБанковскийСчет(Корреспондент, Банк, СтрЭтап, ТзБанковскиеСчета)

	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Корреспондент);
	Отбор.Вставить("НомерСчета", СтрЭтап.РасчетныйСчет);

	Строки = ТзБанковскиеСчета.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
	
	НовБанкСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовБанкСчет.УстановитьНовыйКод();
	НовБанкСчет.Владелец = Корреспондент;
	НовБанкСчет.НомерСчета = СтрЭтап.РасчетныйСчет;
	НовБанкСчет.Банк = Банк;
	НовБанкСчет.ВидСчета = "Расчетный";
	НовБанкСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("974");
	НовБанкСчет.Наименование = Лев(СтрЭтап.РасчетныйСчет + " в " + Банк.Наименование,100);
	НовБанкСчет.ОбменДанными.Загрузка = Истина;
	НовБанкСчет.Записать();
	
	//Добавление в ТзБанковскиеСчета	
	НовСтрока = ТзБанковскиеСчета.Добавить();
	НовСтрока.Владелец = Корреспондент;
	НовСтрока.НомерСчета = СтрЭтап.РасчетныйСчет;
	НовСтрока.Ссылка = НовБанкСчет.Ссылка;

	Возврат НовБанкСчет.Ссылка;
КонецФункции // ПолучитьБанк()

&НаСервере
Функция ПолучитьКонтактноеЛицо(Корреспондент, СтрЭтап, ТзКонтактныеЛица)

	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Корреспондент);
	ФИО = СокрЛП(СтрЭтап.ФамилияДир)+?(ЗначениеЗаполнено(СтрЭтап.ИмяДир), " " + СокрЛП(СтрЭтап.ИмяДир), "") +
		?(ЗначениеЗаполнено(СтрЭтап.ОтчествоДир), " " + СокрЛП(СтрЭтап.ОтчествоДир), "");
	Отбор.Вставить("Наименование", ФИО);

	Строки = ТзКонтактныеЛица.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
	
	НовЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
	//НовЛицо.УстановитьНовыйКод();
	НовЛицо.Владелец = Корреспондент;
	НовЛицо.Наименование = ФИО;
	НовЛицо.Должность = СокрЛП(СтрЭтап.ДолжностьДир);
	НовЛицо.ОбменДанными.Загрузка = Истина;
	
	// Телефон
	Если ЗначениеЗаполнено(СтрЭтап.ТелефонДир) Тогда
		СтрокаКИ = НовЛицо.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаКИ.Представление = СтрЭтап.ТелефонДир; 
		СтрокаКИ.НомерТелефона = СтрЭтап.ТелефонДир; 
	КонецЕсли; 
	НовЛицо.Записать();
	
	//Добавление в ТзКонтактныеЛица	
	НовСтрока = ТзКонтактныеЛица.Добавить();
	НовСтрока.Владелец = Корреспондент;
	НовСтрока.Наименование = ФИО;
	НовСтрока.Ссылка = НовЛицо.Ссылка;

	Возврат НовЛицо.Ссылка;
КонецФункции // ПолучитьБанк()

// Возвращает/создает объект документ Ведомость актирования
&НаСервереБезКонтекста
Функция ПолучитьВедомостьАктирования(ДатаДок, ТзВедомостиАктирования)
    СтрокаВедомости = ТзВедомостиАктирования.Найти(ДатаДок, "Дата");
	Если СтрокаВедомости = Неопределено Тогда
		ИскДокумент = Документы.мАктирование.СоздатьДокумент();
		ИскДокумент.УстановитьНовыйНомер();
		ИскДокумент.Дата = ДатаДок;
		ИскДокумент.ОбменДанными.Загрузка = Истина;
		ИскДокумент.Записать();
		ИскДокумент = ИскДокумент.Ссылка;
		
		//Добавление в ТзВедомостиАктирования	
		НовСтрока = ТзВедомостиАктирования.Добавить();
		НовСтрока.ВедомостьАктирования = ИскДокумент;
		НовСтрока.Дата = ДатаДок;
		
	Иначе
		ИскДокумент = СтрокаВедомости.ВедомостьАктирования;
	КонецЕсли; 

	Возврат ИскДокумент;
	
КонецФункции // ПолучитьВедомостьАктирования(ДатаДок)

&НаСервере
Функция ИнициализироватьТаблицыДанных()
    // Таблицы базы
	ТзКорреспондент = ПолучитьКорреспондентов();
	ТзОбъекты = ПолучитьОбъекты();
	ТзДоговора = ПолучитьДоговора();
	ТзЭтапы = ПолучитьЭтапы();
	////Если УдалятьЛишние Тогда
	//	ТзЭтапыКУдалению = ПолучитьЭтапыКУдалению();
	////КонецЕсли;
	ТзАкты = ПолучитьАкты();
	ТзВедомостиАктирования = ПолучитьВедомостиАктирования();
	ТзВозвраты = ПолучитьВозвраты();
	ТзОплаты = ПолучитьОплаты();		                         			
	ТзПодразделения = ПолучитьПодразделения();
	ТзВидыРабот = ПолучитьВидыРабот();
	ТзГруппыЭтапов = ПолучитьГруппыЭтапов();
	ТзБанки = ПолучитьБанки();
	ТзБанковскиеСчета = ПолучитьБанковскиеСчета();
	ТзКонтактныеЛица = ПолучитьКонтактныеЛица();

	СтруктураТаблицБД = Новый Структура();
	СтруктураТаблицБД.Вставить("ТзКорреспондент", ТзКорреспондент);
	СтруктураТаблицБД.Вставить("ТзОбъекты", ТзОбъекты);
	СтруктураТаблицБД.Вставить("ТзДоговора", ТзДоговора);
	СтруктураТаблицБД.Вставить("ТзЭтапы", ТзЭтапы);
	//Если УдалятьЛишние Тогда
	//	СтруктураТаблицБД.Вставить("ТзЭтапыКУдалению", ТзЭтапыКУдалению);
	//КонецЕсли;
	СтруктураТаблицБД.Вставить("ТзАкты", ТзАкты);
	СтруктураТаблицБД.Вставить("ТзВедомостиАктирования", ТзВедомостиАктирования);
	СтруктураТаблицБД.Вставить("ТзВозвраты", ТзВозвраты);
	СтруктураТаблицБД.Вставить("ТзОплаты", ТзОплаты);
	СтруктураТаблицБД.Вставить("ТзПодразделения", ТзПодразделения);
	СтруктураТаблицБД.Вставить("ТзВидыРабот", ТзВидыРабот);
	СтруктураТаблицБД.Вставить("ТзГруппыЭтапов", ТзГруппыЭтапов);
	СтруктураТаблицБД.Вставить("ТзБанки", ТзБанки);
	СтруктураТаблицБД.Вставить("ТзБанковскиеСчета", ТзБанковскиеСчета);
	СтруктураТаблицБД.Вставить("ТзКонтактныеЛица", ТзКонтактныеЛица);
	
    АдресДанных = ПоместитьВоВременноеХранилище(СтруктураТаблицБД, УникальныйИдентификатор);
    Возврат АдресДанных;
КонецФункции // ИнициализироватьТаблицыДанных()
 
&НаСервереБезКонтекста
Функция ПолучитьПапкуВнутреннихДокументов(ИмяПапки)
	Папки = Справочники.ПапкиВнутреннихДокументов;
	ИскПапка = Папки.НайтиПоНаименованию(ИмяПапки);
	Если ИскПапка = Папки.ПустаяСсылка() Тогда
		ПапкаДоговоров = Папки.СоздатьЭлемент();
		ПапкаДоговоров.Наименование = ИмяПапки;
		ПапкаДоговоров.Записать();
		ИскПапка = ПапкаДоговоров.Ссылка;
	КонецЕсли; 
	Возврат ИскПапка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКорреспондентов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК КорреспондентСсылка,
		|	Корреспонденты.ИНН,
		|	Корреспонденты.ЮрФизЛицо,
		|	Корреспонденты.Наименование,
		|	ВЫРАЗИТЬ(Корреспонденты.ПолноеНаименование КАК Строка(254)) КАК ПолноеНаименование,
		|	Корреспонденты.Комментарий
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты";

	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["ИНН"]);
	Результат.Колонки.Индекс(Результат.Колонки["Наименование"]);
	Результат.Колонки.Индекс(Результат.Колонки["ПолноеНаименование"]);
	Результат.Колонки.Индекс(Результат.Колонки["Комментарий"]);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъекты()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбъектыРабот.Владелец.Ссылка КАК Корреспондент,
		|	мОбъектыРабот.Наименование Как НаименованиеОбъекта,
		|	мОбъектыРабот.ПолноеНаименование Как ПолноеНаименованиеОбъекта,
		|	мОбъектыРабот.Ссылка КАК ОбъектСсылка
		|ИЗ
		|	Справочник.мОбъектыРабот КАК мОбъектыРабот";

	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["Корреспондент"]);
    Результат.Колонки.Индекс(Результат.Колонки["НаименованиеОбъекта"]);
    Результат.Колонки.Индекс(Результат.Колонки["ПолноеНаименованиеОбъекта"]);
	
	Возврат Результат; 

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговора()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК ДоговорСсылка,
		|	ВнутренниеДокументы.ДатаРегистрации КАК Дата,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК Номер,
		|	ВнутренниеДокументы.Корреспондент
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента В ИЕРАРХИИ(&ВидДокумента)
		|	И (НЕ ВнутренниеДокументы.ВидДокумента В (&СписокДок))";

	СписокИсключаемыхВидовДокументов = Новый СписокЗначений;
	СписокИсключаемыхВидовДокументов.Добавить(Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
	СписокИсключаемыхВидовДокументов.Добавить(Справочники.ВидыВнутреннихДокументов.ДополнительноеСоглашениеДоговораЗемлеустроительныхРабот);
	Запрос.УстановитьПараметр("СписокДок", СписокИсключаемыхВидовДокументов);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот);
		
	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["Номер"]);
	Результат.Колонки.Индекс(Результат.Колонки["Дата"]);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЭтапы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыДоговоров.Ссылка КАК ЭтапСсылка,
		|	ЭтапыДоговоров.Владелец.Ссылка КАК ДоговорСсылка,
		//|	ЭтапыДоговоров.Владелец.ДатаРегистрации КАК ДатаДог,
		//|	ЭтапыДоговоров.Владелец.РегистрационныйНомер КАК НомерДог,
		|	ЭтапыДоговоров.НомерЭтапа
		//|	ЭтапыДоговоров.Владелец.Корреспондент КАК КорреспондентСсылка,
		//|	ЭтапыДоговоров.Владелец.Корреспондент.Наименование КАК КорреспондентНаименование,
		//|	ЭтапыДоговоров.Стоимость,
		//|	ЭтапыДоговоров.СтоимостьСНДС,
		//|	ЭтапыДоговоров.Подразделение,
		//|	ЭтапыДоговоров.Владелец.ВидДокумента КАК ВидДокументаДоговора
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	НЕ ЭтапыДоговоров.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
    Результат.Колонки.Индекс(Результат.Колонки["ДоговорСсылка"]);
	Результат.Колонки.Индекс(Результат.Колонки["НомерЭтапа"]);
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьЭтапыКУдалению()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыДоговоров.Ссылка КАК ЭтапСсылка,
		|	ЭтапыДоговоров.Владелец.Ссылка КАК ДоговорСсылка,
		|	ЭтапыДоговоров.НомерЭтапа
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	ЭтапыДоговоров.Владелец.ДатаРегистрации МЕЖДУ &ДатаНач И &ДатаКон";

	Запрос.УстановитьПараметр("ДатаНач", Объект.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Объект.Период.ДатаОкончания);

	Результат = Запрос.Выполнить().Выгрузить();
	
    Результат.Колонки.Индекс(Результат.Колонки["ДоговорСсылка"]);
	Результат.Колонки.Индекс(Результат.Колонки["НомерЭтапа"]);
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьАкты()
	// Заодно возвращает и ссылку на договор, к которому относится
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//|	ВедомостьАктированияАкты.Ссылка,
		|	ВедомостьАктированияАкты.Договор,
		|	ВедомостьАктированияАкты.ЭтапДоговора,
		|	ВедомостьАктированияАкты.ДатаАкта КАК ДатаАкта,
		|	ВедомостьАктированияАкты.Сумма КАК Сумма
		|ИЗ
		|	Документ.мАктирование.Акты КАК ВедомостьАктированияАкты
		|ГДЕ
		|	Не ВедомостьАктированияАкты.Ссылка.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьВедомостиАктирования()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ведомость.Дата,
		|	Ведомость.Ссылка КАК ВедомостьАктирования
		|ИЗ
		|	Документ.мАктирование КАК Ведомость
		|ГДЕ
		|	НЕ Ведомость.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьВозврат(Корреспондент, Договор, Этап, Дата, Сумма, ТзВозвраты)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Дата", Дата);
	Отбор.Вставить("ЭтапДоговора", Этап);
	Отбор.Вставить("Корреспондент", Корреспондент);
	Отбор.Вставить("Договор", Договор);
	Отбор.Вставить("Сумма", Сумма);
	Строки = ТзВозвраты.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
		
	Док = Документы.ВозвратОплаты.СоздатьДокумент();
	Док.Дата = Дата;
	Док.Корреспондент = Корреспондент;
	Док.Договор = Договор;
	Док.ЭтапДоговора = Этап;
	Док.Сумма = Сумма;
	
	//Док.ОбменДанными.Загрузка = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	ЛогФайл.ДобавитьСтроку("Добавлен  возврат: "+Док.Номер+" от "+Дата+". Сумма: "+Сумма);
	
	//Добавление в ТзВозвраты	
	НовСтрока = ТзВозвраты.Добавить();
	НовСтрока.Ссылка = Док.Ссылка;
	НовСтрока.Корреспондент = Корреспондент;
	НовСтрока.Договор = Договор;
	НовСтрока.ЭтапДоговора = Этап;
	НовСтрока.Дата = Дата;
	НовСтрока.Сумма = Сумма;

	Возврат Док.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьВозвраты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратОплаты.Ссылка,
		|	ВозвратОплаты.Дата,
		|	ВозвратОплаты.Корреспондент,
		|	ВозвратОплаты.Договор,
		|	ВозвратОплаты.ЭтапДоговора,
		|	ВозвратОплаты.Сумма
		|ИЗ
		|	Документ.ВозвратОплаты КАК ВозвратОплаты
		|ГДЕ
		|	НЕ ВозвратОплаты.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьОплату(Корреспондент, Договор, Этап, Дата, Сумма, ТзОплаты)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Дата", Дата);
	Отбор.Вставить("ЭтапДоговора", Этап);
	Отбор.Вставить("Корреспондент", Корреспондент);
	Отбор.Вставить("Договор", Договор);
	Отбор.Вставить("Сумма", Сумма);
	Строки = ТзОплаты.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
		
	Док = Документы.ОплатаРабот.СоздатьДокумент();
	Док.Дата = Дата;
	Док.Корреспондент = Корреспондент;
	Док.Договор = Договор;
	Док.ЭтапДоговора = Этап;
	Док.Сумма = Сумма;
	Док.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	
	//Док.ОбменДанными.Загрузка = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	ЛогФайл.ДобавитьСтроку("Добавлена оплата: "+Док.Номер+" от "+Дата+". Сумма: "+Сумма);
	
	//Добавление в ТзОплаты	
	НовСтрока = ТзОплаты.Добавить();
	НовСтрока.Ссылка = Док.Ссылка;
	НовСтрока.Корреспондент = Корреспондент;
	НовСтрока.Договор = Договор;
	НовСтрока.ЭтапДоговора = Этап;
	НовСтрока.Дата = Дата;
	НовСтрока.Сумма = Сумма;

	Возврат Док.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьОплаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаРабот.Ссылка,
		|	ОплатаРабот.Корреспондент,
		|	ОплатаРабот.Договор,
		|	ОплатаРабот.ЭтапДоговора,
		|	ОплатаРабот.Дата,
		|	ОплатаРабот.Сумма
		|ИЗ
		|	Документ.ОплатаРабот КАК ОплатаРабот
		|ГДЕ
		|	НЕ ОплатаРабот.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОПользователях.Пользователь.ТабельныйНомер КАК ТабельныйНомер,
	|	СведенияОПользователях.Пользователь КАК Пользователь,
	|	СведенияОПользователях.Подразделение
	|ИЗ
	|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьБанки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Наименование,
	|	КлассификаторБанковРФ.Код,
	|	КлассификаторБанковРФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()
 
&НаСервере
Функция ПолучитьБанковскиеСчета()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()
 
&НаСервере
Функция ПолучитьКонтактныеЛица()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.Владелец,
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Наименование
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()
 
&НаСервере
Функция ПолучитьВидыРабот()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мВидыРаботФизЛица.Код КАК КодФЛ,
		|	мВидыРаботФизЛица.Ссылка КАК ВРФЛ,
		|	мВидыРаботЮрЛица.Код КАК КодЮЛ,
		|	мВидыРаботЮрЛица.Ссылка КАК ВРЮЛ
		|ИЗ
		|	Справочник.мВидыРаботФизЛица КАК мВидыРаботФизЛица,
		|	Справочник.мВидыРаботЮрЛица КАК мВидыРаботЮрЛица";

	Результат = Запрос.Выполнить().Выгрузить();
	
	ТзРабот = Новый ТаблицаЗначений;
	ТзРабот.Колонки.Добавить("КодРаботы");
	ТзРабот.Колонки.Добавить("ВидРаботыФЛ");
	ТзРабот.Колонки.Добавить("ВидРаботыЮЛ");
	
	ТабличныйДокумент    = Обработки.М_ШлюзБрест.ПолучитьМакет("СоответствиеВидовРабот");
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		КодБазы = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C1").Текст);
		КодФЛ = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C2").Текст);
		КодЮЛ = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C3").Текст);
		
		Если Не ЗначениеЗаполнено(КодФЛ) и Не ЗначениеЗаполнено(КодЮЛ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТз = ТзРабот.Добавить();
		СтрокаТз.КодРаботы = КодБазы;
		
		ВРФЛ = Неопределено;
		Если ЗначениеЗаполнено(КодФЛ) Тогда
			СтрокаРез = Результат.Найти(КодФЛ, "КодФЛ");
			Если СтрокаРез <> Неопределено Тогда
				ВРФЛ = СтрокаРез.ВРФЛ;
			КонецЕсли; 
		КонецЕсли; 
		ВРЮЛ = Неопределено;
		Если ЗначениеЗаполнено(КодЮЛ) Тогда
			СтрокаРез = Результат.Найти(КодЮЛ, "КодЮЛ");
			Если СтрокаРез <> Неопределено Тогда
				ВРЮЛ = СтрокаРез.ВРЮЛ;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаТз.ВидРаботыФЛ = ВРФЛ;
		СтрокаТз.ВидРаботыЮЛ = ВРЮЛ;
		
	КонецЦикла;	
	Возврат ТзРабот;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппыЭтапов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мГруппыЭтаповДоговоров.Ссылка КАК ГруппаЭтапа,
		|	мГруппыЭтаповДоговоров.ВспомогательныйКод
		|ИЗ
		|	Справочник.мГруппыЭтаповДоговоров КАК мГруппыЭтаповДоговоров";

	Результат = Запрос.Выполнить().Выгрузить();
	
	//Результат.Колонки.Индекс(Результат.Колонки["ДатаДог"]);
	//Результат.Колонки.Индекс(Результат.Колонки["НомерДог"]);
	//Результат.Колонки.Индекс(Результат.Колонки["НомерЭтапа"]);
	Возврат Результат; 

КонецФункции

&НаКлиенте
Процедура ЛогФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть файл для записи";
	ДиалогВыбораФайла.Фильтр    = "Текст (*.txt)|*.txt";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКЛогФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
		НовыйФайл = Новый файл(ПутьКЛогФайлу);
		Если НовыйФайл.Существует() Тогда
			ЛогФайл.Прочитать(ПутьКЛогФайлу);
			ЛогФайл.Очистить();
		Иначе
			ЛогФайл.Записать(ПутьКЛогФайлу);		
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ (СЕРВЕР)

&НаСервере
Процедура ЗагрузитьНастройки()
    
    КлючОбъекта = "Обработка.М_ШлюзБрест.Формы.Форма";
	ПериодНастройка = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "Период");
	Если Не ЗначениеЗаполнено(ПериодНастройка) Тогда
		ПериодНастройка = Новый СтандартныйПериод;
		ПериодНастройка.Вариант = ВариантСтандартногоПериода.Сегодня;
	КонецЕсли;
	Объект.Период = ПериодНастройка;
	ФайлБД = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ФайлБД");
    //ЗагрузкаПоПериодуИзменений = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ЗагрузкаПоПериодуИзменений");
	ПутьКФайламДанныхНаДиске = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ПутьКФайламДанныхНаДиске");
	ВидДокументаДоговорФизЛиц = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ВидДокументаДоговорФизЛиц");
	ВидДокументаДоговорЮрЛиц = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, "ВидДокументаДоговорЮрЛиц");
    
 КонецПроцедуры // ЗагрузитьНастройки()
 
&НаСервере
Процедура СохранитьНастройки()
    
    КлючОбъекта = "Обработка.М_ШлюзБрест.Формы.Форма";
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "Период", Объект.Период);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ФайлБД", ФайлБД);
    //ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ЗагрузкаПоПериодуИзменений", ЗагрузкаПоПериодуИзменений);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ПутьКФайламДанныхНаДиске", ПутьКФайламДанныхНаДиске);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ВидДокументаДоговорФизЛиц", ВидДокументаДоговорФизЛиц);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, "ВидДокументаДоговорЮрЛиц", ВидДокументаДоговорЮрЛиц);
    
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНомераДелНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	DogEtap.Dog КАК КодДоговора,
		|	DogEtap.NomSmety КАК НомерЭтапа,
		|	DogEtap.InvN КАК ИнвНомер,
		|	Dogovor.NomDog КАК НомерДоговора,
		|	Dogovor.DSostav КАК ДатаДоговора
		|ИЗ
		|	ВнешнийИсточникДанных.MS_Access.Таблица.DogEtap КАК DogEtap
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.MS_Access.Таблица.Dogovor КАК Dogovor
		|		ПО DogEtap.Dog = Dogovor.Kod";
	
	ТзНомера = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.мИнвентарныйНомерТехархива КАК ИнвНомер,
		|	ВнутренниеДокументы.ЭтапДоговора.НомерЭтапа КАК НомерЭтапа,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец КАК Договор,
		|	ВнутренниеДокументы.Ссылка КАК Дело,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец.ДатаРегистрации КАК ДатаДоговора,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец.РегистрационныйНомер КАК НомерДоговора
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.Дело)
		|	И (ВнутренниеДокументы.мИнвентарныйНомерТехархива = ""0"" ИЛИ ВнутренниеДокументы.мИнвентарныйНомерТехархива = """") 
		|	И ВнутренниеДокументы.ДатаСоздания МЕЖДУ &Дата1 И &Дата2
		|	И ВнутренниеДокументы.ЭтапДоговора <> &ЭтапДоговора";
		
		Запрос.УстановитьПараметр("ЭтапДоговора", Справочники.мЭтапыДоговоров.ПустаяСсылка());
		Если ИспользоватьПериодИзменения Тогда
			Запрос.УстановитьПараметр("Дата1", ПериодИзменения.ДатаНачала);
			Запрос.УстановитьПараметр("Дата2", ПериодИзменения.ДатаОкончания);
		Иначе
			Запрос.УстановитьПараметр("Дата1", '00010101000000');
			Запрос.УстановитьПараметр("Дата2", ТекущаяДата());
		КонецЕсли; 
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		ЧисловойНомер = СформироватьЧисловойНомерПоРегистрационному(Выборка.НомерДоговора);
		Отбор = Новый Структура("НомерДоговора, НомерЭтапа", ЧисловойНомер, Выборка.НомерЭтапа);
		ИскСтроки = ТзНомера.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() > 0 Тогда
			Для каждого Стр Из ИскСтроки Цикл
				Если Год(Стр.ДатаДоговора) = Год(Выборка.ДатаДоговора) Тогда
					Если Стр.ИнвНомер = Null Тогда
						Продолжить;
					КонецЕсли; 
					// нашли что искали
					Сч = Сч + 1;
					Дело = Выборка.Дело.ПолучитьОбъект();
					Дело.мИнвентарныйНомерТехархива = Стр.ИнвНомер;
					Дело.ОбменДанными.Загрузка = Истина;
					Дело.Записать();
				    Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Сч;
КонецФункции

&НаСервере
Функция СформироватьЧисловойНомерПоРегистрационному(РегНомер)
	СтрокаЧисла = "";
	Числа = "0123456789";
	
	Для й=1 По СтрДлина(РегНомер) Цикл
		СимволРегНомер = Сред(РегНомер, й, 1);
		Если СтрНайти(Числа, СимволРегНомер) > 0 Тогда
			СтрокаЧисла = СтрокаЧисла + СимволРегНомер;					
	    Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокаЧисла = "" Тогда
		ЧисловойНомер = -1;
	Иначе	
	    ЧисловойНомер = Число(СтрокаЧисла);
	КонецЕсли; 
	
	Возврат ЧисловойНомер;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНомераДел(Команда)
	
	Если УстановитьСоединение() Тогда
		Состояние("Соединение установлено. Выполняется поиск и запись номеров...");
		ЗаписаноНомеров = ЗагрузитьНомераДелНаСервере();
        Сообщить("Записано номеров: "+ЗаписаноНомеров);
    Иначе
        Сообщить("Не установлено соединение с базой данных Access! Загрузка данных не выполнена!");
	КонецЕсли; 
КонецПроцедуры


