////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УчетныеЗаписи.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	
	ЗагрузитьНастройки();
	
	ОбновитьПараметрыУсловногоОформления();
	
	Для каждого КодировкаЭлемент Из РаботаСоСтроками.ПолучитьСписокКодировок() Цикл
		
		Элементы.КодировкаИсходящихПисем.СписокВыбора.Добавить(
			КодировкаЭлемент.Значение,
			КодировкаЭлемент.Представление);
			
		Элементы.КодировкаПриСохраненииПисем.СписокВыбора.Добавить(
			КодировкаЭлемент.Представление,
			КодировкаЭлемент.Представление);
			
	КонецЦикла;
	
	ОтобразитьФлаг();
	
	Элементы.ЧислоСимволовПисьмаДляСпособаРедактирования.Доступность = 
		(СпособРедактированияТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособРедактированияТекстаПисьма.Авто"));
		
	ИмяТекущейСтраницы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиВстроеннойПочты", "ТекущаяЗакладка", 
		Элементы.СтраницаУчетныеЗаписи.Имя);
		
	Если ИмяТекущейСтраницы	 = "СтраницаУчетныеЗаписи" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУчетныеЗаписи;
	ИначеЕсли ИмяТекущейСтраницы	 = "СтраницаПисьмо" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПисьмо;
	ИначеЕсли ИмяТекущейСтраницы	 = "СтраницаСписокПисем" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокПисем;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты"
		И Источник <> ЭтаФорма Тогда
		
		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки") Тогда
			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
		КонецЕсли;
		
		Если Параметр.Свойство("ОтображениеОбластиЧтения") Тогда
			ОтображениеОбластиЧтения = Параметр.ОтображениеОбластиЧтения;
		КонецЕсли;
		
		Если Параметр.Свойство("РежимМоиПапки") Тогда
			РежимМоиПапки = Параметр.РежимМоиПапки;
		КонецЕсли;
		
		Если Параметр.Свойство("НастройкиАвтообновления") Тогда
			НастройкиАвтообновления = Параметр.НастройкиАвтообновления;
		КонецЕсли;
		
		Если Параметр.Свойство("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям") Тогда
			ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям = Параметр.ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОтображениеОбластиЧтенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриВыбореВходящегоПисьмаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиПриАктивизацииСтроки(Элемент)
	
	Если Не ЗначениеЗаполнено(Элементы.УчетныеЗаписи.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОсновнаяУчетнаяЗапись.Пометка =
		(Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка = ОсновнаяУчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтложеннуюОтправкуПисемПриИзменении(Элемент)
	
	Если ИспользоватьОтложеннуюОтправкуПисем Тогда
		Элементы.Задержка.Доступность = Истина;
		Элементы.НадписьСекунд.Доступность = Истина;
	Иначе
		Задержка = 0;
		Элементы.Задержка.Доступность = Ложь;
		Элементы.НадписьСекунд.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаСтрокиПриФорматированииПриИзменении(Элемент)
	
	Если ШиринаСтрокиПриФорматировании < 30 И ШиринаСтрокиПриФорматировании <> 0 Тогда
		ШиринаСтрокиПриФорматировании = 30;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаСтрокиПриСохраненииПриИзменении(Элемент)
	
	Если ШиринаСтрокиПриСохранении < 30 И ШиринаСтрокиПриСохранении <> 0 Тогда
		ШиринаСтрокиПриСохранении = 30;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручнуюПриИзменении(Элемент)
	
	Если ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Ложь;
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения = Ложь;
	Иначе
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьДляНовыхПисемПриИзменении(Элемент)
	
	ПодписьДляПисемПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПриОтветеИПересылкеПриИзменении(Элемент)

	ПодписьДляПисемПриИзмененииНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьНастройки();
	
	НастройкиВстроеннойПочты = Новый Структура;
	НастройкиВстроеннойПочты.Вставить("ДействиеПриВыбореВходящегоПисьма", ДействиеПриВыбореВходящегоПисьма);
	НастройкиВстроеннойПочты.Вставить("ОтображатьУдаленныеПисьмаИПапки", ОтображатьУдаленныеПисьмаИПапки);
	НастройкиВстроеннойПочты.Вставить("ОтображениеОбластиЧтения", ОтображениеОбластиЧтения);
	НастройкиВстроеннойПочты.Вставить("РежимМоиПапки", РежимМоиПапки);
	НастройкиВстроеннойПочты.Вставить("НеПредлагатьСоздатьПравилоПриПеретаскивании", НеПредлагатьСоздатьПравилоПриПеретаскивании);
	НастройкиВстроеннойПочты.Вставить("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения);
	Оповестить("ИзмененыНастройкиВстроеннойПочты", НастройкиВстроеннойПочты, ЭтаФорма);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблоны(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Владелец", ПользователиКлиентСервер.ТекущийПользователь());
	ОткрытьФорму("Справочник.ШаблоныТекстовПисем.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗапись(Команда)
	
	Если Элементы.УчетныеЗаписи.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана учетная запись'"));
		Возврат;
	КонецЕсли;
	
	Если ОсновнаяУчетнаяЗапись = Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка Тогда
		ОсновнаяУчетнаяЗапись = Неопределено;
	Иначе
		ОсновнаяУчетнаяЗапись = Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОсновнаяУчетнаяЗапись",
		ОсновнаяУчетнаяЗапись);
	
	Элементы.ОсновнаяУчетнаяЗапись.Пометка =
		(Элементы.УчетныеЗаписи.ТекущиеДанные.Ссылка = ОсновнаяУчетнаяЗапись);
	
	ОбновитьПараметрыУсловногоОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.НастройкаПроверкиНовыхПисем", , , , , , ,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаСервере
Процедура ЗагрузитьНастройки()
	
	АвтовыборКодировкиИсходящихПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтовыборКодировкиИсходящихПисем");
	
	КодировкаИсходящихПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("КодировкаИсходящихПисем");
	
	Если ПустаяСтрока(КодировкаИсходящихПисем) Тогда
		КодировкаИсходящихПисем = "utf-8";
	КонецЕсли;
	
	ПериодАвтоматическогоСохраненияНеотправленныхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПериодАвтоматическогоСохраненияНеотправленныхПисем");
	
	ИспользоватьАвтосохранениеНеотправленныхПисем = (ПериодАвтоматическогоСохраненияНеотправленныхПисем > 0);
	Если ИспользоватьАвтосохранениеНеотправленныхПисем Тогда
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Истина;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Истина;
	Иначе
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
	ШиринаСтрокиПриФорматировании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриФорматировании");
		
	ЗначениеКодировкаПриСохраненииПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("КодировкаПриСохраненииПисем");
		
	КодировкаПриСохраненииПисем =
		РаботаСоСтроками.ПолучитьПредставлениеКодировки(ЗначениеКодировкаПриСохраненииПисем);
		
	ШиринаСтрокиПриСохранении =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ШиринаСтрокиПриСохранении");

	ПодписьДляНовыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьДляНовыхПисем");
	
	ПодписьПриОтветеИПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
	
	ОсновнаяУчетнаяЗапись =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнаяУчетнаяЗапись");
	
	ВставлятьТекстИсходногоПисьмаПриОтвете =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ВставлятьТекстИсходногоПисьмаПриОтвете");
	
	ОтвечатьСФайлами =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтвечатьСФайлами");
	
	ОсновнойФлаг =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОсновнойФлаг");
		
	ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям = 	
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям");	
		
	ОткрыватьФайлыИсходящегоПисьмаНаРедактирование =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОткрыватьФайлыИсходящегоПисьмаНаРедактирование");
		
	ДобавлятьАвтораИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьАвтораИсходногоПисьмаПриПересылке");
	
	ДобавлятьПолучателейИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейИсходногоПисьмаПриПересылке");
	
	ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке");
	
	ДействиеПриВыбореВходящегоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ДействиеПриВыбореВходящегоПисьма");
	
	ОтображатьУдаленныеПисьмаИПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображатьУдаленныеПисьмаИПапки");
		
	ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
		
	СпособРедактированияТекстаПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("СпособРедактированияТекстаПисьма");
		
	ЧислоСимволовПисьмаДляСпособаРедактирования =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ЧислоСимволовПисьмаДляСпособаРедактирования");
		
	Элементы.ЧислоСимволовПисьмаДляСпособаРедактирования.Доступность = 
		(СпособРедактированияТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособРедактированияТекстаПисьма.Авто"));
		
	ОтображениеОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ОтображениеОбластиЧтения");
	
	Если Не ЗначениеЗаполнено(ОтображениеОбластиЧтения) Тогда
		ОтображениеОбластиЧтения = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
	КонецЕсли;
	
	РежимМоиПапки =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");
	
	НастройкиАвтообновления =
		Автообновление.ПолучитьНастройкиАвтообновленияФормы(
			"ЖурналДокументов.ЭлектроннаяПочта.Форма.ФормаСписка");
			
	НеПредлагатьСоздатьПравилоПриПеретаскивании =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("НеПредлагатьСоздатьПравилоПриПеретаскивании");
		
	ФорматНовыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ФорматНовыхПисем");
		
	ФорматОтветныхИПересылаемыхПисем =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ФорматОтветныхИПересылаемыхПисем");
		
	ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную");
	ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения");
	Если ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную Тогда
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Ложь;
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения = Ложь;
	Иначе
		Элементы.ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения.Доступность = Истина;
	КонецЕсли;
	
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
	Задержка = РегистрыСведений.НастройкиОтложеннойОтправкиПисем.ПолучитьНастройку(ТекущийПользователь);
	ИспользоватьОтложеннуюОтправкуПисем = (Задержка > 0);
	Если ИспользоватьОтложеннуюОтправкуПисем Тогда
		Элементы.Задержка.Доступность = Истина;
		Элементы.НадписьСекунд.Доступность = Истина;
	Иначе
		Элементы.Задержка.Доступность = Ложь;
		Элементы.НадписьСекунд.Доступность = Ложь;
	КонецЕсли;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		Элементы.ИспользоватьАвтосохранениеНеотправленныхПисем.Доступность = Ложь;
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	МассивСтруктур = Новый Массив;
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"АвтовыборКодировкиИсходящихПисем",
		АвтовыборКодировкиИсходящихПисем);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"КодировкаИсходящихПисем",
		КодировкаИсходящихПисем);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная Тогда
		
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПериодАвтоматическогоСохраненияНеотправленныхПисем",
			ПериодАвтоматическогоСохраненияНеотправленныхПисем);
		
	КонецЕсли;
	
	ЗначениеКодировкаПриСохраненииПисем = РаботаСоСтроками.ПолучитьКодировкуПоПредставлению(КодировкаПриСохраненииПисем);
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"КодировкаПриСохраненииПисем",
		ЗначениеКодировкаПриСохраненииПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ШиринаСтрокиПриФорматировании",
		ШиринаСтрокиПриФорматировании);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ШиринаСтрокиПриСохранении",
		ШиринаСтрокиПриСохранении);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПодписьДляНовыхПисем",
		ПодписьДляНовыхПисем);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПодписьПриОтветеИПересылке",
		ПодписьПриОтветеИПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ВставлятьТекстИсходногоПисьмаПриОтвете",
		ВставлятьТекстИсходногоПисьмаПриОтвете);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтвечатьСФайлами",
		ОтвечатьСФайлами);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОсновнойФлаг",
		ОсновнойФлаг);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям",
		ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям);	
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОткрыватьФайлыИсходящегоПисьмаНаРедактирование",
		ОткрыватьФайлыИсходящегоПисьмаНаРедактирование);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьАвтораИсходногоПисьмаПриПересылке",
		ДобавлятьАвтораИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьПолучателейИсходногоПисьмаПриПересылке",
		ДобавлятьПолучателейИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке",
		ДобавлятьПолучателейКопийИсходногоПисьмаПриПересылке);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ДействиеПриВыбореВходящегоПисьма",
		ДействиеПриВыбореВходящегоПисьма);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображатьУдаленныеПисьмаИПапки",
		ОтображатьУдаленныеПисьмаИПапки);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ОтображениеОбластиЧтения",
		ОтображениеОбластиЧтения);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов",
		ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"РежимМоиПапки",
		РежимМоиПапки);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"НеПредлагатьСоздатьПравилоПриПеретаскивании",
		НеПредлагатьСоздатьПравилоПриПеретаскивании);
		
	Если Не ЗначениеЗаполнено(СпособРедактированияТекстаПисьма) Тогда
		СпособРедактированияТекстаПисьма = Перечисления.СпособРедактированияТекстаПисьма.ПолеВвода;
	КонецЕсли;	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"СпособРедактированияТекстаПисьма",
		СпособРедактированияТекстаПисьма);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ЧислоСимволовПисьмаДляСпособаРедактирования",
		ЧислоСимволовПисьмаДляСпособаРедактирования);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную",
		ПомечатьВходящиеПисьмаПрочтеннымиТолькоВручную);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения",
		ПомечатьВходящиеПисьмаПрочтеннымиПриПросмотреВОбластиЧтения);
	
	РегистрыСведений.НастройкиОтложеннойОтправкиПисем.СохранитьНастройку(ТекущийПользователь, Задержка);
	
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ФорматНовыхПисем",
		ФорматНовыхПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"ФорматОтветныхИПересылаемыхПисем",
		ФорматОтветныхИПересылаемыхПисем);
		
	ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
		"АвтоматическиСохранятьВерсииНеотправленногоПисьма",
		АвтоматическиСохранятьВерсииНеотправленногоПисьма);
		
	ОбновитьПовторноИспользуемыеЗначения();	
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыУсловногоОформления()
	
	ЭтаФорма.УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = ОсновнаяУчетнаяЗапись;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодписьДляПисемПриИзмененииНаСервере()
	
	РегистрыСведений.ИзмененныеНастройкиСинхронизацииСМобильнымКлиентом.ДобавитьЗапись(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ВидыНастроекОбменаСМобильнымКлиентом.ШаблоныТекстовПисем);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФЛАГАМИ

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	ОсновнойФлаг = ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый");
	Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьФлаг()
	
	Если ОсновнойФлаг = Перечисления.ФлагиОбъектов.ПустаяСсылка() Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ПустойФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Красный Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.КрасныйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Синий Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.СинийФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Желтый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Зеленый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Оранжевый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
	ИначеЕсли ОсновнойФлаг = Перечисления.ФлагиОбъектов.Лиловый Тогда
		Элементы.ПодменюФлаги.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// АВТОСОХРАНЕНИЕ

&НаКлиенте
Процедура ИспользоватьАвтосохранениеНеотправленныхПисемПриИзменении(Элемент)
	
	Если ИспользоватьАвтосохранениеНеотправленныхПисем Тогда
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Истина;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Истина;
	Иначе
		ПериодАвтоматическогоСохраненияНеотправленныхПисем = 0;
		Элементы.ПериодАвтоматическогоСохраненияНеотправленныхПисем.Доступность = Ложь;
		Элементы.НадписьПериодАвтосохраненияМинут.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияТекстаПисьмаПриИзменении(Элемент)
	
	Элементы.ЧислоСимволовПисьмаДляСпособаРедактирования.Доступность = 
		(СпособРедактированияТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособРедактированияТекстаПисьма.Авто"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиВстроеннойПочты", "ТекущаяЗакладка", Элементы.Страницы.ТекущаяСтраница.Имя);
КонецПроцедуры

