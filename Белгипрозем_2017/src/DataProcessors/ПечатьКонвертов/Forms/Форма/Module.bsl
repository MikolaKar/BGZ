
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НашГород = мРазное.НашГород();
	ВидКонверта = "С6_162х114";
	МассивДокументов = Параметры.МассивПисем;
	
	ДанныеПолучателей = ПолучитьДанныеПолучателей(МассивДокументов);
	
	Для каждого СтрПолучателя Из ДанныеПолучателей Цикл
        
		НоваяСтрока = Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрПолучателя);
	
	КонецЦикла; 
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  МассивПисем  - Массив исходящих документов 
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ДанныеПолучателей   - РезультатЗапроса
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПолучателей(МассивДокументов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   ВЫБОР
        |       КОГДА КорреспондентыКонтактнаяИнформация.Ссылка.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
        |           ТОГДА ВЫРАЗИТЬ(ИсходящиеДокументыПолучатели.Получатель.ПолноеНаименование КАК СТРОКА(1000))
        |       ИНАЧЕ ИсходящиеДокументыПолучатели.Получатель.Наименование
        |   КОНЕЦ КАК Получатель,
        |   ИсходящиеДокументыПолучатели.Адресат.Наименование КАК Адресат,
        |   КорреспондентыКонтактнаяИнформация.Представление КАК АдресКорр,
        |   ВЫРАЗИТЬ(КорреспондентыКонтактнаяИнформация.ЗначенияПолей КАК СТРОКА(1000)) КАК ЗначенияПолей,
        |   ИсходящиеДокументыПолучатели.Ссылка.РегистрационныйНомер КАК ИсхНомер,
        |   ИСТИНА КАК Пометка,
        |   ВЫБОР
        |       КОГДА ИсходящиеДокументыПолучатели.Ссылка.Подразделение.Наименование ПОДОБНО ""%филиал%""
        |           ТОГДА ИсходящиеДокументыПолучатели.Ссылка.Подразделение.Комментарий
        |       ИНАЧЕ """"
        |   КОНЕЦ КАК НашАдрес
        |ИЗ
        |   Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
        |       ПО ИсходящиеДокументыПолучатели.Получатель = КорреспондентыКонтактнаяИнформация.Ссылка
        |ГДЕ
        |   ИсходящиеДокументыПолучатели.Ссылка В(&МассивДокументов)
        |   И ВЫБОР
        |           КОГДА КорреспондентыКонтактнаяИнформация.Ссылка.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
        |               ТОГДА КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица)
        |           ИНАЧЕ КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента)
        |       КОНЕЦ";

	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);

	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
КонецФункции // ПолучитьДанныеПолучателей(МассивПисем)

&НаСервереБезКонтекста
Функция ПолучитьНашиРеквизиты()
    НашиРеквизиты = Новый Структура("НашАдрес, НашаОрганизация, НашУНП", );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  
		|	КорреспондентыКонтактнаяИнформация.Представление КАК НашАдрес,
		|	КорреспондентыКонтактнаяИнформация.Ссылка.ПолноеНаименование КАК НашаОрганизация,
		|	КорреспондентыКонтактнаяИнформация.Ссылка.ИНН КАК НашУНП
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка = &Корреспондент
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента)";

	Запрос.УстановитьПараметр("Корреспондент", Константы.НашаОрганизация.Получить());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НашиРеквизиты, ВыборкаДетальныеЗаписи);	
	КонецЦикла;

	Возврат НашиРеквизиты;

КонецФункции // ПолучитьНашиРеквизиты()

&НаКлиенте
Процедура ПечатьКонверта(Команда)
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	МассивПолучателей = Новый Массив;
	Для Каждого СтрПолучателя Из ЭтаФорма.Получатели Цикл
		Если Не СтрПолучателя.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПолучателей = Новый Структура("Корреспондент, Адрес");
		СтруктураПолучателей.Вставить("Корреспондент", СтрПолучателя.Получатель);
		СтруктураПолучателей.Вставить("Адрес", СтрПолучателя.АдресКорр);
		СтруктураПолучателей.Вставить("НашАдрес", СтрПолучателя.НашАдрес);
		СтруктураПолучателей.Вставить("ЗначенияПолей", СтрПолучателя.ЗначенияПолей);
		
		МассивПолучателей.Добавить(СтруктураПолучателей);
	КонецЦикла;
	
	Если НашГород = "Прилуки" Тогда
		ТабДок = СформироватьТабДокПрилуки(ВидКонверта, МассивПолучателей);
		ТабДок.РазмерСтраницы = "Envelope DL";
	Иначе
		ТабДок = СформироватьТабДок(ВидКонверта, МассивПолучателей);
		
		ТабДок.РазмерСтраницы = "Envelope C6";
	КонецЕсли; 
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
    ТабДок.ПолеСправа = 10;
    ТабДок.ПолеСлева = 0;
    ТабДок.ПолеСверху = 0;
    ТабДок.ПолеСнизу = 0;
	Если флСразуНаПринтер Тогда
		ТабДок.Напечатать();
	Иначе	
		ТабДок.Показать("Печать конверта", , Истина); 
	КонецЕсли; 
	             
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс)
	Если мРазное.НашГород() = "Прилуки" Тогда
		ОбластьКонверта.Параметры.Индекс = Индекс;
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Индекс) Тогда
		ОбластьКонверта.Параметры.Индекс1 = Лев(Индекс, 1);
		ОбластьКонверта.Параметры.Индекс2 = Сред(Индекс, 2, 1);
		ОбластьКонверта.Параметры.Индекс3 = Сред(Индекс, 3, 1);
		ОбластьКонверта.Параметры.Индекс4 = Сред(Индекс, 4, 1);
		ОбластьКонверта.Параметры.Индекс5 = Сред(Индекс, 5, 1);
		ОбластьКонверта.Параметры.Индекс6 = Сред(Индекс, 6, 1);
	Иначе
		// Индекса нет
		Для й = 1 По 6 Цикл
			ОбластьКонверта.Параметры["Индекс"+й] = "";
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати)
    // вырежем индекс из адреса
    ПозицияИндекса = ПозицияИндекса(КудаДляПечати);
    Индекс = "";
    
    Если ПозицияИндекса > 0 Тогда
        Индекс = Сред(КудаДляПечати, ПозицияИндекса, 6);
        КудаДляПечати = Лев(КудаДляПечати, ПозицияИндекса-1) + Сред(КудаДляПечати, ПозицияИндекса+7); 
    КонецЕсли; 
    
	Если мРазное.НашГород() = "Прилуки" Тогда
		ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(КудаДляПечати, 35, Ложь);
		ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(КудаДляПечати, 35, Ложь);
		ОбластьКонверта.Параметры.СтрКуда3 = ВырезатьСтроку(КудаДляПечати, 25, Ложь);
		ОбластьКонверта.Параметры.СтрКуда4 = ВырезатьСтроку(КудаДляПечати, 35, Истина);
		
		ОбластьКонверта.Параметры.Индекс = Индекс;
	Иначе
		ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(КудаДляПечати, 31, Ложь);
		ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(КудаДляПечати, 40, Ложь);
		ОбластьКонверта.Параметры.СтрКуда3 = ВырезатьСтроку(КудаДляПечати, 21, Ложь);
		ОбластьКонверта.Параметры.СтрКуда4 = ВырезатьСтроку(КудаДляПечати, 40, Истина);
		
	    ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс);
	КонецЕсли; 
 КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьАдресаПоХДТО(ОбластьКонверта, ОбъектХДТО, НаселенныйПункт)
    // Если отправление в город:
    // 1-я строка: Улица, дом, квартира
    // 2-я строка: продолжение
    // 3-я строка: город
    // 4-я строка: район, область
    
    // Если в деревню
    // 1-я строка: Улица, дом, квартира
    // 2-я строка: продолжение + деревня
    // 3-4 строка: сельсовет, район, область
            
    // получим старших населенного пункта
    ПредставлениеНаселенногоПункта = КонтактнаяИнформацияСлужебный.ПредставлениеНаселенногоПункта(ОбъектХДТО.Состав);
    СельсоветРайонОбласть = СокрЛП(СтрЗаменить(ПредставлениеНаселенногоПункта, НаселенныйПункт+",", ""));
    
    ЭтоГород = ?(Найти(НаселенныйПункт, "г.")>0, Истина, Ложь);
    
    // 1-я строка совпадает
    //	название улицы, номер дома, корпуса, квартиры, 
    Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
    ОбъектХДТО.Состав.Состав.Улица, "");
    // Строения и помещения
    НомерНеВыведен = Истина;
    Данные = КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(ОбъектХДТО);
    Для Каждого Строка Из Данные.Здания Цикл
        Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
        Представление, "",
        СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение), "");
        НомерНеВыведен = Ложь;
    КонецЦикла;
    Для Каждого Строка Из Данные.Помещения Цикл
        Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
        Представление, "",
        СокрЛП(Строка.Сокращение + " " + Строка.Значение), "");
    КонецЦикла;
    Представление = СтрЗаменить(Представление, "квартира", "кв.");
    
    Если ЭтоГород Тогда
        // распределяем улицу на 2 строки            
        ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(Представление, 26, Ложь);
        ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(Представление, 40, Ложь);
        ОбластьКонверта.Параметры.СтрКуда3 = НаселенныйПункт;
        
        // Для Минска сбрасываем фиктивный регион, что бы не выводился в представлении
        Если Найти(НаселенныйПункт, "Минск") > 0 Тогда
            СельсоветРайонОбласть = СтрЗаменить(СельсоветРайонОбласть, "Минск", "");
            СельсоветРайонОбласть = СтрЗаменить(СельсоветРайонОбласть, "г.", "");
        КонецЕсли; 
        ОбластьКонверта.Параметры.СтрКуда4 = СельсоветРайонОбласть;
        
    Иначе
        // Добавляем название насел. пункта. Если можно выводим название на второй строке
        Если СтрДлина(Представление) > 40 Тогда
            Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
            СокрЛП(НаселенныйПункт), "");
            // распределяем улицу+деревня на 2 строки            
            ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(Представление, 31, Ложь);
            ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(Представление, 40, Ложь);
        Иначе
            // улицу на 1-й, деревню на 2-й
            ОбластьКонверта.Параметры.СтрКуда1 = Представление;
            ОбластьКонверта.Параметры.СтрКуда2 = НаселенныйПункт;
        КонецЕсли; 
        
        // распределим на оставшиеся 2 строки вышестоящие территории
        ОбластьКонверта.Параметры.СтрКуда3 = ВырезатьСтроку(СельсоветРайонОбласть, 21, Ложь);
        ОбластьКонверта.Параметры.СтрКуда4 = ВырезатьСтроку(СельсоветРайонОбласть, 40, Ложь);
        
    КонецЕсли; 
    
    // Индекс
    Индекс = КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(ОбъектХДТО);
    ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СформироватьТабДок(ИмяМакета, МассивПолучателей)
	
	ТабДок = Новый ТабличныйДокумент();
	Макет = Обработки.ПечатьКонвертов.ПолучитьМакет(ИмяМакета);
	ОбластьКонверта = Макет.ПолучитьОбласть("Конверт");
    	
	НашиРеквизиты = ПолучитьНашиРеквизиты();
	
	Счетчик = 0;
    Для Каждого СтрПолучателя Из МассивПолучателей Цикл
        
        МассивСтрок = Новый Массив;
        
        ПорезатьСтрокуНаСтроки(НашиРеквизиты.НашаОрганизация, 40, МассивСтрок);
		Если ЗначениеЗаполнено(СтрПолучателя.НашАдрес) Тогда
			ПорезатьСтрокуНаСтроки(СтрПолучателя.НашАдрес, 40, МассивСтрок);
		Иначе
			ПорезатьСтрокуНаСтроки(НашиРеквизиты.НашАдрес, 40, МассивСтрок);
		КонецЕсли; 
        
        КолвоСтрокОтправителя = МассивСтрок.Количество();
        
        Для й = 1 По 6 Цикл
            Если й <= КолвоСтрокОтправителя Тогда
                ОбластьКонверта.Параметры["СтрОтправитель"+й] = МассивСтрок[й-1];
            Иначе
                ОбластьКонверта.Параметры.Установить(й-1, "");
            КонецЕсли; 
        КонецЦикла; 
        
        КомуДляПечати = СтрПолучателя.Корреспондент;
         
        ОбластьКонверта.Параметры.СтрКому1 = ВырезатьСтроку(КомуДляПечати, 40, Ложь);
        ОбластьКонверта.Параметры.СтрКому2 = ВырезатьСтроку(КомуДляПечати, 40, Истина);
        
        ОбъектХДТО = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(СтрПолучателя.ЗначенияПолей);
        
        Если ТипЗнч(ОбъектХДТО)<>Тип("ОбъектXDTO") Тогда
            // Это иностранный адрес - пытаемся работать со строкой адреса
            КудаДляПечати = СтрПолучателя.Адрес;
            
            ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати);
             
        Иначе
            // Это белорусский адрес
            
            АдресРФ = ОбъектХДТО.Состав.Состав;
            НаселенныйПункт = АдресРФ.НаселПункт;
            
            Если Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
                ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, СтрПолучателя.Адрес);
            Иначе
                ЗаполнитьОбластьАдресаПоХДТО(ОбластьКонверта, ОбъектХДТО, НаселенныйПункт);
            КонецЕсли; 
         КонецЕсли;
		
		ТабДок.Вывести(ОбластьКонверта);
		
		Счетчик = Счетчик + 1;
		Если Счетчик < МассивПолучателей.Количество() Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция СформироватьТабДокПрилуки(ИмяМакета, МассивПолучателей)
	
	ТабДок = Новый ТабличныйДокумент();
	Макет = Обработки.ПечатьКонвертов.ПолучитьМакет(ИмяМакета);
	ОбластьКонверта = Макет.ПолучитьОбласть("Конверт");
    	
	//НашиРеквизиты = ПолучитьНашиРеквизиты();
	
	Счетчик = 0;
    Для Каждого СтрПолучателя Из МассивПолучателей Цикл
        
		//МассивСтрок = Новый Массив;
		//
		//ПорезатьСтрокуНаСтроки(НашиРеквизиты.НашаОрганизация, 40, МассивСтрок);
		//Если ЗначениеЗаполнено(СтрПолучателя.НашАдрес) Тогда
		//	ПорезатьСтрокуНаСтроки(СтрПолучателя.НашАдрес, 40, МассивСтрок);
		//Иначе
		//	ПорезатьСтрокуНаСтроки(НашиРеквизиты.НашАдрес, 40, МассивСтрок);
		//КонецЕсли; 
		//
		//КолвоСтрокОтправителя = МассивСтрок.Количество();
		//
		//Для й = 1 По 6 Цикл
		//    Если й <= КолвоСтрокОтправителя Тогда
		//        ОбластьКонверта.Параметры["СтрОтправитель"+й] = МассивСтрок[й-1];
		//    Иначе
		//        ОбластьКонверта.Параметры.Установить(й-1, "");
		//    КонецЕсли; 
		//КонецЦикла; 
        
        КомуДляПечати = СтрПолучателя.Корреспондент;
         
        ОбластьКонверта.Параметры.СтрКому1 = ВырезатьСтроку(КомуДляПечати, 35, Ложь);
        ОбластьКонверта.Параметры.СтрКому2 = ВырезатьСтроку(КомуДляПечати, 35, Истина);
		
		Если ЗначениеЗаполнено(СтрПолучателя.ЗначенияПолей) Тогда
			ОбъектХДТО = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(СтрПолучателя.ЗначенияПолей);
			
			Если ТипЗнч(ОбъектХДТО)<>Тип("ОбъектXDTO") Тогда
				// Это иностранный адрес - пытаемся работать со строкой адреса
				КудаДляПечати = СтрПолучателя.Адрес;
				
				ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати);
				
			Иначе
				// Это белорусский адрес
				
				АдресРФ = ОбъектХДТО.Состав.Состав;
				НаселенныйПункт = АдресРФ.НаселПункт;
				
				Если Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
					ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, СтрПолучателя.Адрес);
				Иначе
					ЗаполнитьОбластьАдресаПоХДТО(ОбластьКонверта, ОбъектХДТО, НаселенныйПункт);
				КонецЕсли; 
			КонецЕсли;
		Иначе
			КудаДляПечати = СтрПолучателя.Адрес;
			
			ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати);
		КонецЕсли; 
		
		ТабДок.Вывести(ОбластьКонверта);
		
		Счетчик = Счетчик + 1;
		Если Счетчик < МассивПолучателей.Количество() Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ПозицияИндекса(Адрес)
    СчетчикЦифр = 0;
    ПозицияИндекса = 0;
    Цифры = "1234567890";
    НачалоИндекса = 0;
    
    Для й=1 По СтрДлина(Адрес) Цикл
        ТекСимвол = Сред(Адрес, й, 1);
        Если Найти(Цифры, ТекСимвол) > 0 Тогда
            // есть цифра
            СчетчикЦифр = СчетчикЦифр + 1;
			
			Если СчетчикЦифр = 6 Тогда
				// это индекс
				ПозицияИндекса = НачалоИндекса;
				Прервать;
			КонецЕсли;
			
            Если НачалоИндекса = 0 Тогда
                // первая цифра - возможно начало индекса
                НачалоИндекса = й;
            КонецЕсли; 
        Иначе
            // не цифра
            Если СчетчикЦифр = 6 Тогда
                // это был индекс
                ПозицияИндекса = НачалоИндекса;
                Прервать;
            Иначе
                // это не было индексом
                СчетчикЦифр = 0;
                НачалоИндекса = 0;
            КонецЕсли; 
        КонецЕсли; 
    КонецЦикла; 
    Возврат ПозицияИндекса;
КонецФункции

&НаСервереБезКонтекста
Функция ПорезатьСтрокуНаСтроки(ИсхСтрока, МаксДлинаСтроки, МассивСтрок)

    СтрокаДляПечати = "";
    
    ТекСтрока = ИсхСтрока;
    Если СтрЧислоВхождений(ИсхСтрока, "  ") > 0 Тогда
        ТекСтрока = СтрЗаменить(ТекСтрока, "  ", " ");
    КонецЕсли; 
    
    КолвоПробелов = СтрЧислоВхождений(ТекСтрока, " ");
    
    ПоследняяПозиция = 0;
    
	Если СтрДлина(ТекСтрока) <= МаксДлинаСтроки Тогда
		// строка размещается без обрезки
		СтрокаДляПечати = ТекСтрока;
		ТекСтрока = "";
		Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
			МассивСтрок.Добавить(СтрокаДляПечати);
		КонецЕсли; 
	Иначе
		Пока СтрДлина(ТекСтрока) > 0 Цикл
			Если СтрДлина(ТекСтрока) <= МаксДлинаСтроки Тогда
				// строка размещается без обрезки
				СтрокаДляПечати = ТекСтрока;
				ТекСтрока = "";
				Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
					МассивСтрок.Добавить(СтрокаДляПечати);
				КонецЕсли; 
			Иначе
				КолвоПробелов = СтрЧислоВхождений(ТекСтрока, " ");
				Если КолвоПробелов > 0 Тогда
					Для й=1 По КолвоПробелов Цикл
						Позиция = Найти(ТекСтрока, " ");
						
						НоваяПозиция = ПоследняяПозиция + Позиция;
						
						Если НоваяПозиция <= МаксДлинаСтроки Тогда
							ПоследняяПозиция = НоваяПозиция;
							
							СтрокаДляПечати = СтрокаДляПечати + Лев(ТекСтрока, Позиция);
							
							ТекСтрока = Сред(ТекСтрока, Позиция + 1); 
						Иначе
							ПоследняяПозиция = 0;
							Прервать;
							//	// Длина получаемой строки превысит максимально допустимую в строке
							//	МассивСтрок.Добавить(СтрокаДляПечати);
							//	
							//	ПоследняяПозиция = Позиция;
							//	
							//	СтрокаДляПечати = Лев(ТекСтрока, Позиция);
							//	
							//	ТекСтрока = Сред(ТекСтрока, Позиция + 1); 
						КонецЕсли; 
					КонецЦикла; 
					
					Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
						МассивСтрок.Добавить(СтрокаДляПечати);
					КонецЕсли; 
					СтрокаДляПечати = "";
				Иначе
					Если ЗначениеЗаполнено(ТекСтрока) Тогда
						МассивСтрок.Добавить(ТекСтрока);
					КонецЕсли; 
					ТекСтрока = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;    
    
    Возврат МассивСтрок;
КонецФункции

&НаСервереБезКонтекста
Функция ВырезатьСтроку(ИсхСтрока, МаксДлинаСтроки, ЭтоПоследняяСтрока)
    
    Если СтрЧислоВхождений(ИсхСтрока, "  ") > 0 Тогда
        ИсхСтрока = СтрЗаменить(ИсхСтрока, "  ", " ");
    КонецЕсли; 
    
    КолвоПробелов = СтрЧислоВхождений(ИсхСтрока, " ");
    
    ПоследняяПозиция = 0;
    СтрокаДляПечати = "";
    
    Если СтрДлина(ИсхСтрока) <= МаксДлинаСтроки Тогда
        // строка размещается без обрезки
        СтрокаДляПечати = ИсхСтрока;
    	ИсхСтрока = "";
    Иначе
        Для й=1 По КолвоПробелов Цикл
            Позиция = Найти(ИсхСтрока, " ");
            
            НоваяПозиция = ПоследняяПозиция + Позиция;
            
            Если НоваяПозиция <= МаксДлинаСтроки Тогда
                ПоследняяПозиция = НоваяПозиция;
                
                СтрокаДляПечати = СтрокаДляПечати + Лев(ИсхСтрока, Позиция);
                
                ИсхСтрока = Сред(ИсхСтрока, Позиция + 1); 
            Иначе
                Прервать;
            КонецЕсли; 
        КонецЦикла; 
        
        Если ЭтоПоследняяСтрока и СтрДлина(ИсхСтрока) > 0 Тогда
            // остался хвост
            СтрокаДляПечати = СтрокаДляПечати + ИсхСтрока;
        КонецЕсли; 
        
	КонецЕсли; 
	
	// Удалим запятую в конце строки
	Если Прав(СокрЛП(СтрокаДляПечати), 1) = "," Тогда
		ПозЗпт = СтрНайти(СтрокаДляПечати, ",", НаправлениеПоиска.СКонца, ,1);
		СтрокаДляПечати = Лев(СтрокаДляПечати, ПозЗпт - 1);
	КонецЕсли; 
    
    Возврат СтрокаДляПечати;
КонецФункции
 

 
