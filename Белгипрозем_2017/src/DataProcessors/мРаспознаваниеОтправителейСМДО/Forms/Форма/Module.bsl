
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = "";
	Фильтр = "XML (*.xml)|*.xml";
	Диалог.Фильтр = Фильтр;
	Диалог.МножественныйВыбор = Ложь;
	//Диалог.Каталог = "";
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)
	ПоказатьОповещениеПользователя("Начата обработка почты...");
	РаботаССВД.ПриемДокументовПоСВД();
	
	ПроверитьЗаполнениеУчастниковСВД();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеУчастниковСВД()
	
	// 1. Найти Сообщения с пустыми Отправителями
	// 2. Получить из файлов сообщений Код отправителя из СМДО
	// 3. Получить по коду из файла dictionaryData.xml данные отправителя
	// 4. Подобрать корреспондентов для установки связи с отправителем СМДО
	
	МассивПроблемныхСообщений = СообщенияБезОтправителей(Период);
	
	Если МассивПроблемныхСообщений.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя("Все отправители опознаны!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУчастниковСВД(МассивПроблемныхСообщений);
	
	ЗаполнитьДанныеУчастниковСВД();
	
	ПодобратьКорреспондентов();
	
	Если УчастникиСВД.Количество() > 0 Тогда
		Элементы.УчастникиСВД.ТекущаяСтрока = УчастникиСВД[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчастниковСВД()
	ПоказатьОповещениеПользователя("Получение данных новых отправителей...");
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗавершениеНачатьПомещениеФайла", ЭтотОбъект);
	Адрес = "";
	НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, , ПутьКФайлу, Ложь, ЭтаФорма.УникальныйИдентификатор); 	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНачатьПомещениеФайла(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	ПрочитатьНаСервере(Адрес);
КонецПроцедуры

&НаСервере
Функция ПолучитьОбъектXDTO(Адрес)
	ПространствоИмен = "http://www.1c.ru/medoorganizations";
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяВременногоФайлаИсх = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяВременногоФайлаИсх);
	
	ЧтениеФайла = Новый ТекстовыйДокумент();
	//ПутьКФайлу = ОпределитьПутьКФайлу(ПутьКФайлу);
	ЧтениеФайла.Прочитать(ИмяВременногоФайлаИсх, КодировкаТекста.UTF8);
	ЗаписьФайла = Новый ТекстовыйДокумент();
	
	Для ТекущаяСтрока=1 По ЧтениеФайла.КоличествоСтрок() Цикл
		Стр = ЧтениеФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если Найти(Стр, "<dictionaryData")>0 И Найти(Стр, ПространствоИмен)=0 Тогда
			Стр = СтрЗаменить(Стр, "<dictionaryData", "<dictionaryData xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'");
		КонецЕсли;
		ЗаписьФайла.ДобавитьСтроку(Стр);
	КонецЦикла;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьФайла.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "dictionaryData");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайлаИсх);
		Возврат ОбъектXDTO;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ПрочитатьНаСервере(Адрес)
	
	ОбъектXDTO = ПолучитьОбъектXDTO(Адрес);
	Если ОбъектXDTO = Неопределено Тогда
		Сообщить("файл не прочитан.");
		Возврат;
	КонецЕсли;
	
	СписокУчастников = Новый СписокЗначений;
	
	Для каждого Стр Из УчастникиСВД Цикл
		Стр.КодСМДО =  ВРег(Стр.КодСМДО);
		СписокУчастников.Добавить(Стр.КодСМДО);	
	КонецЦикла;
	
	// Номера нужных колонок
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 0;
	Для каждого Колонка Из ОбъектXDTO.model.header.field Цикл
		Если Колонка.name.__content = "smdocode" Тогда
			НомераКолонок.Вставить("КодСМДО", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "unp" Тогда
			НомераКолонок.Вставить("УНП", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "name" Тогда
			НомераКолонок.Вставить("НаименованиеПолное", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "shortName" Тогда
			НомераКолонок.Вставить("Наименование", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "corpus" Тогда
			НомераКолонок.Вставить("Корпус", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "home" Тогда
			НомераКолонок.Вставить("Дом", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "postIndex" Тогда
			НомераКолонок.Вставить("Индекс", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "street" Тогда
			НомераКолонок.Вставить("Улица", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "email" Тогда
			НомераКолонок.Вставить("Email", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "fax" Тогда
			НомераКолонок.Вставить("Факс", НомерКолонки);
		ИначеЕсли Колонка.name.__content = "phone" Тогда
			НомераКолонок.Вставить("Телефон", НомерКолонки);
		КонецЕсли; 
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Для Каждого ПолеСтроки Из ОбъектXDTO.data.rows.row Цикл
		//НомерСтроки = НомерСтроки+1;
		Колонки = ?(ТипЗнч(ПолеСтроки.columns) = Тип("ОбъектXDTO"), ПолеСтроки.columns.column, ПолеСтроки.columns);
		
		ТекИмяАдресата = ВРег(Колонки[0].column[НомераКолонок.Получить("КодСМДО")].__content);
		
		ЭлементВСписке = СписокУчастников.НайтиПоЗначению(ТекИмяАдресата);
		Если ЭлементВСписке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение данных в строке Участники
		Отбор = Новый Структура("КодСМДО", ТекИмяАдресата);
		ИскСтроки = УчастникиСВД.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Для каждого Кол Из НомераКолонок Цикл
				Если Колонки[0].column[Кол.Значение] = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ИскСтроки[0][Кол.Ключ] = Колонки[0].column[Кол.Значение].__content;
			КонецЦикла; 
			ИскСтроки[0].Пометка = Истина;
		КонецЕсли; 
		
		// Удаление из списка
		СписокУчастников.Удалить(ЭлементВСписке);
		Если СписокУчастников.Количество() = 0 Тогда
			Прервать;	
		КонецЕсли; 	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковСВД(МассивПроблемныхСообщений)
	
	ПоказатьОповещениеПользователя("Поиск новых отправителей...");
	
	ПространствоИмен = "http://www.1c.ru/MEDOSignedMessageBY";
	УчастникиСВД.Очистить();
	
	Для каждого Проблема Из МассивПроблемныхСообщений Цикл
		
		СообщениеСсылка = Проблема.Сообщение;
		Транспорт = Проблема.Транспорт;
		
		АдресВоВременномХранилище = ПолучитьДанныеФайлаДляЧтения(СообщениеСсылка);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
		Если ДвоичныеДанные = Неопределено Тогда
			Сообщить(""+СообщениеСсылка+" Похоже файл уже был удалён из хранилища.");
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Попытка
		
			ЧтениеXML = Новый ЧтениеXML;	
			ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
			
			ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "Envelop");
			
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
			ОбъектXDTO.Проверить();
			
			ЧтениеXML.Закрыть();
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			Отбор = Новый Структура("КодСМДО", ОбъектXDTO.Header.Sender.id);
			
			ИскСтроки = УчастникиСВД.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				Стр = УчастникиСВД.Добавить();
				Стр.КодСМДО = ОбъектXDTO.Header.Sender.id;
				Стр.Наименование = ОбъектXDTO.Header.Sender.name;
				Стр.Транспорт = Транспорт;
			КонецЕсли; 
			
		Исключение
			Сообщить(СообщениеСсылка);
		КонецПопытки;
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаДляЧтения(СообщениеСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(СообщениеСсылка);
	Если МассивФайлов.Количество() = 1 Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(МассивФайлов[0]);
		АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ДанныеФайла.Версия);
		Возврат АдресВоВременномХранилище;
	КонецЕсли;	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияБезОтправителей(Период)
	МассивПроблемныхСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящееСообщениеСВД.Ссылка КАК ВходящееСообщениеСВД,
		|	ВходящееСообщениеСВД.ТранспортПолучения КАК Транспорт
		|ИЗ
		|	Документ.ВходящееСообщениеСВД КАК ВходящееСообщениеСВД
		|ГДЕ
		|	ВходящееСообщениеСВД.Дата МЕЖДУ &Дата1 И &Дата2
		|	И ВходящееСообщениеСВД.КорреспондентОтправитель = &КорреспондентОтправитель";
	
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("КорреспондентОтправитель", Справочники.Корреспонденты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Проблема = Новый Структура("Сообщение, Транспорт", Выборка.ВходящееСообщениеСВД, Выборка.Транспорт);
		МассивПроблемныхСообщений.Добавить(Проблема);
	КонецЦикла;
	
	Возврат МассивПроблемныхСообщений;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)
	ЗаполнитьДанныеУчастниковСВД();
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКорреспондентов()
	ПоказатьОповещениеПользователя("Поиск корреспондентов...");
	ПодобратьКорреспондентовНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПодобратьКорреспондентовНаСервере()
	// Подпираем по УНП и Наименованию и из РС УчастникиСВД
	МассивУНП = Новый Массив;
	Для каждого Стр Из УчастникиСВД Цикл
		МассивУНП.Добавить(Стр.УНП);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК Корреспондент,
		|	Корреспонденты.ИНН КАК УНП,
		|	Корреспонденты.Наименование КАК Наименование,
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ПочтовыйАдрес
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|		ПО (КорреспондентыКонтактнаяИнформация.Ссылка = Корреспонденты.Ссылка)
		|			И (КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента))
		|ГДЕ
		|	НЕ Корреспонденты.ПометкаУдаления
		|	И Корреспонденты.ИНН В(&МассивУНП)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("МассивУНП", МассивУНП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Код СМДО
		Отбор = Новый Структура("УНП", Выборка.УНП);
		ИскСтроки = УчастникиСВД.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Для й=0 По ИскСтроки.Количество()-1 Цикл
				КодСМДО = ИскСтроки[й].КодСМДО;
				
				НовКорр = Корреспонденты.Добавить();
				ЗаполнитьЗначенияСвойств(НовКорр, Выборка);
				НовКорр.КодСМДО = КодСМДО;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКорреспондентов1(Команда)
	
	Корреспонденты.Очистить();
	
	ПодобратьКорреспондентов();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСоответствиеНаСервере(КодСМДО, Транспорт, Корреспондент)
	НаборЗаписей = РегистрыСведений.УчастникиСВД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Транспорт.Установить(Транспорт);
	НаборЗаписей.Отбор.Адресат.Установить(Корреспондент);
	Запись = НаборЗаписей.Добавить();
	Запись.Адресат = Корреспондент;
	Запись.Транспорт = Транспорт;
	Запись.ИмяАдресата = КодСМДО;
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствие(Команда)
	Сч = 0;
	Для каждого Стр Из УчастникиСВД Цикл
		Если Стр.Пометка Тогда
			Отбор = Новый Структура("Пометка, КодСМДО", Истина, Стр.КодСМДО);
			ИскСтроки = Корреспонденты.НайтиСтроки(Отбор);
			НайденоСтрок = ИскСтроки.Количество();
			
			// Проверка птичек
			Если НайденоСтрок = 0 Тогда
				Сообщить("Не отмечено ни одного корреспондента для " + Стр.КодСМДО);
				Продолжить;
			ИначеЕсли НайденоСтрок > 1 Тогда
				Сообщить("Отметьте только одного корреспондента для " + Стр.КодСМДО);
				Продолжить;
			КонецЕсли;
			
			УстановитьСоответствиеНаСервере(Стр.КодСМДО, Стр.Транспорт, ИскСтроки[0].Корреспондент);
			Сч = Сч+1;
		КонецЕсли; 
	КонецЦикла; 
	
	ПоказатьОповещениеПользователя("Установлено соответствий: " + Сч);
		
КонецПроцедуры

&НаСервере
Функция СоздатьНовогоНаСервере(ДанныеЗаполнения)
	Корреспондент = Справочники.Корреспонденты.СоздатьЭлемент();
	Корреспондент.УстановитьНовыйКод();
	ЗаполнитьЗначенияСвойств(Корреспондент, ДанныеЗаполнения);
	
	// Контактная информация
	КИ = Корреспондент.КонтактнаяИнформация;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Улица) Тогда
		Адрес = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Индекс), ДанныеЗаполнения.Индекс + ", ", "") + 
			ДанныеЗаполнения.Улица +
			?(ЗначениеЗаполнено(ДанныеЗаполнения.Дом), ", д. " + ДанныеЗаполнения.Дом, "") + 
			?(ЗначениеЗаполнено(ДанныеЗаполнения.Корпус), ", корп." + ДанныеЗаполнения.Корпус, ""); 
		НовКИ = КИ.Добавить();
		НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента;
		НовКИ.Представление = Адрес;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Email) Тогда
		НовКИ = КИ.Добавить();
		НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКорреспондента;
		НовКИ.Представление = ДанныеЗаполнения.Email;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Факс) Тогда
		НовКИ = КИ.Добавить();
		НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс;
		НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКорреспондента;
		НовКИ.Представление = ДанныеЗаполнения.Факс;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Телефон) Тогда
		НовКИ = КИ.Добавить();
		НовКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента;
		НовКИ.Представление = ДанныеЗаполнения.Телефон;
		НовКИ.НомерТелефона = ДанныеЗаполнения.Телефон;
	КонецЕсли; 
	Корреспондент.ОбменДанными.Загрузка = Истина;
	Корреспондент.Записать();
	
	Возврат Корреспондент.Ссылка;

КонецФункции 

&НаКлиенте
Процедура СоздатьНового(Команда)
	ТекДанные = Элементы.УчастникиСВД.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Корреспондент = "";
	Если СоответствиеЕсть(ТекДанные.КодСМДО, ТекДанные.Транспорт, Корреспондент) Тогда
		ОчиститьСообщения();
		Сообщить("Для " + ТекДанные.КодСМДО + " уже есть соответствующий корреспондент: " + Корреспондент);
		
		Отбор = Новый Структура("Корреспондент", Корреспондент);
		ИскСтроки = Корреспонденты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			ИскСтроки[0].Пометка = Истина;
			Элементы.Корреспонденты.ТекущаяСтрока = ИскСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Наименование", ТекДанные.Наименование);	
	ДанныеЗаполнения.Вставить("ПолноеНаименование", ТекДанные.НаименованиеПолное);	
	ДанныеЗаполнения.Вставить("ИНН", ТекДанные.УНП);	
	ДанныеЗаполнения.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));	
	ДанныеЗаполнения.Вставить("мСтрана", ПредопределенноеЗначение("Справочник.СтраныМира.Беларусь"));	
	ДанныеЗаполнения.Вставить("Улица", ТекДанные.Улица);	
	ДанныеЗаполнения.Вставить("Индекс", ТекДанные.Индекс);	
	ДанныеЗаполнения.Вставить("Дом", ТекДанные.Дом);	
	ДанныеЗаполнения.Вставить("Корпус", ТекДанные.Корпус);
	ДанныеЗаполнения.Вставить("Email", ТекДанные.Email);	
	ДанныеЗаполнения.Вставить("Факс", ТекДанные.Факс);	
	ДанныеЗаполнения.Вставить("Телефон", ТекДанные.Телефон);	
	
	КодСМДО = ТекДанные.КодСМДО;
	
	Корреспондент = СоздатьНовогоНаСервере(ДанныеЗаполнения);
	Если ЗначениеЗаполнено(Корреспондент) Тогда
		НовКорр = Корреспонденты.Добавить();
		НовКорр.КодСМДО = КодСМДО;
		НовКорр.Корреспондент = Корреспондент;
		НовКорр.УНП = ТекДанные.УНП;
		Адрес = ?(ЗначениеЗаполнено(ТекДанные.Индекс), ТекДанные.Индекс + ", ", "") + 
			ТекДанные.Улица +
			?(ЗначениеЗаполнено(ТекДанные.Дом), ", д. " + ТекДанные.Дом, "") + 
			?(ЗначениеЗаполнено(ТекДанные.Корпус), ", корп." + ТекДанные.Корпус, ""); 
			
		НовКорр.ПочтовыйАдрес = Адрес;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеЕсть(КодСМДО, Транспорт, Корреспондент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиСВД.Адресат КАК Корреспондент
		|ИЗ
		|	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		|ГДЕ
		|	УчастникиСВД.Транспорт = &Транспорт
		|	И УчастникиСВД.ИмяАдресата = &ИмяАдресата
		|	И НЕ УчастникиСВД.Адресат.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИмяАдресата", КодСМДО);
	Запрос.УстановитьПараметр("Транспорт", Транспорт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Корреспондент = Выборка.Корреспондент;
	КонецЕсли; 
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	УчастникиСВД.Очистить();
	Корреспонденты.Очистить();
	
	ПроверитьЗаполнениеУчастниковСВД();	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиСВДПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.УчастникиСВД.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый ФиксированнаяСтруктура("КодСМДО", ТекДанные.КодСМДО);
	Элементы.Корреспонденты.ОтборСтрок = Отбор;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДата();
	КонецЕсли; 
КонецПроцедуры
 
 