&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтапыДоговора.Очистить();
	Заказчики.Очистить();
	
	Договор = Неопределено;
	Если Параметры.Свойство("Договор") Тогда
		Договор = Параметры.Договор;
	КонецЕсли; 
	Если Параметры.Свойство("АктВыполненныхРабот") Тогда
		АктВыполненныхРабот = Параметры.АктВыполненныхРабот;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Договор) Тогда
	    ЗаполнитьФорму(Договор);
		Если ЭтоФизЛица Тогда
			Элементы.ЗаказчикПлательщики.Видимость = Ложь;
		Иначе
			Элементы.ЗаказчикПлательщики.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.Подписал.Видимость = Ложь;	
	Элементы.ЗаказчикПлательщики.Видимость = Ложь; 	
	//Элементы.ПечататьШтрихКод.Видимость = Ложь;

	//Если Параметры.Свойство("АктВыполненныхРабот") Тогда
	//	АктВыполненныхРабот = Параметры.АктВыполненныхРабот;
	//	ЭтапДоговора = АктВыполненныхРабот.ЭтапДоговора;
	//	Подписал = АктВыполненныхРабот.Утвердил;
	//	
	//	Для каждого СтрЭтапа Из ЭтапыДоговора Цикл
	//		СтрЭтапа.Пометка = СтрЭтапа.ЭтапДоговора = ЭтапДоговора; 
	//	КонецЦикла; 
	//	
	//	Элементы.ПечататьШтрихКод.Видимость = Истина;
	//	ПечататьШтрихКод = Истина;
	//КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорму(Договор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
		|	ЭтапыДоговоров.НомерЭтапа,
		|	ЭтапыДоговоров.Стоимость,
		|	ЭтапыДоговоров.ВидРабот,
		|	ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК НаименованиеРаботы,
		|	ВЫРАЗИТЬ(ЭтапыДоговоров.ОбъектРабот.ПолноеНаименование КАК СТРОКА(1000)) КАК ОбъектРабот,
		|	ВЫБОР
		|		КОГДА ЭтапыДоговоров.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЭтапыДоговоров.Подразделение
		|		ИНАЧЕ ЭтапыДоговоров.Подразделение.Родитель
		|	КОНЕЦ КАК ОтделИсполнителя,
		|	ВЫБОР
		|		КОГДА ЭтапыДоговоров.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ЭтапыДоговоров.Подразделение.Руководитель
		|		ИНАЧЕ ЭтапыДоговоров.Подразделение.Родитель.Руководитель
		|	КОНЕЦ КАК НачИсполнителя,
		|	ВЫБОР
		|		КОГДА ЭтапыДоговоров.СтавкаНДС.НеОблагается
		|			ТОГДА ""Без НДС""
		|		ИНАЧЕ ЭтапыДоговоров.СтавкаНДС.Ставка
		|	КОНЕЦ КАК СтавкаНДС,
		|	ЭтапыДоговоров.ОсвобождениеОтНДС,
		|	ЭтапыДоговоров.ОсвобождениеОтНДС.ДляПечати КАК ОсвобождениеОтНДСДляПечати,
		|	ЭтапыДоговоров.Цена,
		|	ЭтапыДоговоров.СуммаНДС,
		|	ЭтапыДоговоров.СтоимостьСНДС,
		|	ЭтапыДоговоров.КоличествоУчастков,
		|	ЭтапыДоговоров.Месторасположение,
		|	ЭтапыДоговоров.КакДоговорЮрЛица,
		|	ЕСТЬNULL(УчетДоговоровОбороты.СуммаРасход, 0) КАК Заактировано
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетДоговоров.Обороты(&НачПер, &КонПер, День, ЭтапДоговора.Владелец = &Договор) КАК УчетДоговоровОбороты
		|		ПО ЭтапыДоговоров.Ссылка = УчетДоговоровОбороты.ЭтапДоговора
		|ГДЕ
		|	ЭтапыДоговоров.Владелец = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВнутренниеДокументы.Утвердил,
		|	ВнутренниеДокументы.Валюта,
		|	ВнутренниеДокументы.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументыКорреспонденты.Корреспондент,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ФизЛицо КАК ФизЛицо,
		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента,
		|	ВнутренниеДокументыКорреспонденты.КонтактноеЛицо,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.Наименование,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ПолноеНаименование,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ИНН,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.КодПоОКПО,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.НомерСчета,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Код,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Наименование,
		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Адрес,
		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента.Наименование КАК ПодписалОтКорреспондента,
		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента.Должность
		|ПОМЕСТИТЬ Заказчики
		|ИЗ
		|	Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
		|ГДЕ
		|	ВнутренниеДокументыКорреспонденты.Ссылка = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК Адрес,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ тАдрес
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК Телефон,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ тТелефон
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКорреспондента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(тАдрес.Адрес, ""__________________"") КАК Адрес,
		|	ЕСТЬNULL(тТелефон.Телефон, ""__________________"") КАК Телефон,
		|	Заказчики.Корреспондент,
		|	Заказчики.КорреспондентНаименование КАК Наименование,
		|	Заказчики.КорреспондентПолноеНаименование КАК ПолноеНаименование,
		|	Заказчики.КорреспондентИНН КАК УНП,
		|	Заказчики.КорреспондентКодПоОКПО КАК ОКПО,
		|	Заказчики.КорреспондентОсновнойБанковскийСчетНомерСчета КАК НомерСчета,
		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкКод КАК КодБанка,
		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкНаименование КАК Банк,
		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкАдрес КАК БанкАдрес,
		|	Заказчики.ПодписалОтКорреспондента КАК КорреспондентКратко,
		|	Заказчики.ПодписалОтКорреспондентаДолжность КАК ДолжностьКорр
		|ИЗ
		|	Заказчики КАК Заказчики
		|		ЛЕВОЕ СОЕДИНЕНИЕ тАдрес КАК тАдрес
		|		ПО Заказчики.Корреспондент = тАдрес.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ тТелефон КАК тТелефон
		|		ПО Заказчики.Корреспондент = тТелефон.Корреспондент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказчики.Корреспондент КАК Корреспондент,
		|	Заказчики.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ ФизЛица
		|ИЗ
		|	Заказчики КАК Заказчики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийАдрес,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ДомашниеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийТелефон,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ДомашниеТелефоны
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК ПочтовыйАдрес,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ ПочтовыеАдреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК МобильныйТелефон,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ МобильныеТелефоны
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				Заказчики.Корреспондент
		|			ИЗ
		|				Заказчики КАК Заказчики)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо,
		|	МАКСИМУМ(ДокументыФизическихЛицСрезПоследних.Период) КАК Период
		|ПОМЕСТИТЬ ДокументыСрез
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.ФизЛицо
		|					ИЗ
		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыФизическихЛицСрезПоследних.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.Физлицо
		|ПОМЕСТИТЬ ДанныеПаспорта
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо В
		|					(ВЫБРАТЬ
		|						ФизЛица.ФизЛицо
		|					ИЗ
		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСрез КАК ДокументыСрез
		|		ПО ДокументыФизическихЛицСрезПоследних.Период = ДокументыСрез.Период
		|			И ДокументыФизическихЛицСрезПоследних.Физлицо = ДокументыСрез.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДокументыСрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДомашниеАдреса.ДомашнийАдрес, """") КАК Адрес,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДомашниеТелефоны.ДомашнийТелефон, """") <> """"
		|			ТОГДА ЕСТЬNULL(ДомашниеТелефоны.ДомашнийТелефон, """")
		|		ИНАЧЕ ЕСТЬNULL(МобильныеТелефоны.МобильныйТелефон, """")
		|	КОНЕЦ КАК Телефон,
		|	ЕСТЬNULL(ПочтовыеАдреса.ПочтовыйАдрес, """") КАК ПочтовыйАдрес,
		|	ЕСТЬNULL(ДанныеПаспорта.Серия, """") КАК СерияПаспорта,
		|	ЕСТЬNULL(ДанныеПаспорта.Номер, """") КАК НомерПаспорта,
		|	ЕСТЬNULL(ДанныеПаспорта.ДатаВыдачи, """") КАК ДатаВыдачи,
		|	ЕСТЬNULL(ДанныеПаспорта.КемВыдан, """") КАК КемВыдан,
		|	ЕСТЬNULL(ДанныеПаспорта.СрокДействия, """") КАК СрокДействия,
		|	ФизЛица.Корреспондент.ПолноеНаименование КАК ПолноеНаименование,
		|	ФизЛица.Корреспондент,
		|	ФизЛица.ФизЛицо
		|ИЗ
		|	ФизЛица КАК ФизЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеАдреса КАК ДомашниеАдреса
		|		ПО ФизЛица.Корреспондент = ДомашниеАдреса.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеТелефоны КАК ДомашниеТелефоны
		|		ПО ФизЛица.Корреспондент = ДомашниеТелефоны.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПочтовыеАдреса КАК ПочтовыеАдреса
		|		ПО ФизЛица.Корреспондент = ПочтовыеАдреса.ПочтовыйАдрес
		|		ЛЕВОЕ СОЕДИНЕНИЕ МобильныеТелефоны КАК МобильныеТелефоны
		|		ПО ФизЛица.Корреспондент = МобильныеТелефоны.Корреспондент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПаспорта КАК ДанныеПаспорта
		|		ПО ФизЛица.ФизЛицо = ДанныеПаспорта.Физлицо";

	Запрос.УстановитьПараметр("Договор", Договор);
 	Запрос.УстановитьПараметр("НачПер", Договор.ДатаРегистрации);
	Запрос.УстановитьПараметр("КонПер", ТекущаяДата());

	Результат = Запрос.ВыполнитьПакет();

	// Этапы
	ВыборкаДетальныеЗаписи = Результат[0].Выбрать();
	
	ЭтапыДоговора.Очистить();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Этап = ЭтапыДоговора.Добавить();
		ЗаполнитьЗначенияСвойств(Этап, ВыборкаДетальныеЗаписи);
		Если ВыборкаДетальныеЗаписи.КоличествоУчастков = 0 Тогда
		    Этап.КоличествоУчастков = 1;
		КонецЕсли;
		
		Этап.Заактировано = ВыборкаДетальныеЗаписи.Заактировано;
		
		Если ВыборкаДетальныеЗаписи.Заактировано = 0 Тогда
			Этап.Пометка = Ложь;
		Иначе
			Этап.Пометка = Истина; 
		КонецЕсли;
	КонецЦикла;
	
    Если ЭтапыДоговора.Количество() > 0 Тогда
        НачИсполнителя = ЭтапыДоговора[0].ЭтапДоговора.Подразделение.Руководитель;
    КонецЕсли; 
	
	// Договор
	ДанныеДоговора = Результат[1].Выгрузить();
	НомерДоговора = ДанныеДоговора[0].РегистрационныйНомер;
	ДатаДоговора = ДанныеДоговора[0].ДатаРегистрации;
	Подписал = ДанныеДоговора[0].Утвердил;
	Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда
		Подписал = АктВыполненныхРабот.Утвердил;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ДанныеДоговора[0].Валюта) Тогда
		ВалютаДоговора = ДанныеДоговора[0].Валюта; 
	Иначе	
		ВалютаДоговора = Константы.ОсновнаяВалюта.Получить(); 
	КонецЕсли; 
	
	// Заказчики
	ЮрЛица = Результат[5].Выгрузить();
	ФизЛица = Результат[14].Выгрузить();
	ЭтоФизЛица = ЮрЛица[0].Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;	
	
	Заказчики.Очистить();
	
	Если ЭтоФизЛица Тогда
		ТзЗаказчики = ФизЛица;
	Иначе
		ТзЗаказчики = ЮрЛица;
	КонецЕсли; 
	
	Для каждого СтрокаТз Из ТзЗаказчики Цикл
		Заказчик = Заказчики.Добавить();
		ЗаполнитьЗначенияСвойств(Заказчик, СтрокаТз);
	КонецЦикла; 
	//Отсортируем по номеру этапа
	ЭтапыДоговора.Сортировать("НомерЭтапа Возр");
	
КонецПроцедуры // ЗаполнитьЭтапы()
 
// Возвращает Фимилию и инициалы из полного наименования
//
// Параметры:
//  ПолноеНаименование  - <Строка> - Фамилия Имя Отчетство
//
// Возвращаемое значение:
//   <Строка>   - Фамилия И.О.
//
&НаСервере
Функция ПолучитьЗаказчикаКратко(ПолноеНаименование)
	Возврат ФизическиеЛица.ФамилияИнициалыФизЛица(ПолноеНаименование,,,,Ложь);
КонецФункции // ПолучитьЗаказчикаКратко()
 
&НаКлиенте
Процедура Заменить(Док, ИмяЗакладки, Значение)
	Док.Content.Find.Execute(ИмяЗакладки,  Ложь, Истина, Ложь, , , Истина, , Ложь, Значение, 2);
КонецПроцедуры

&НаСервере
Функция СформироватьСуммуПрописью(СтоимостьАкта, Валюта, Флаг)
	Возврат РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтоимостьАкта, Валюта, Флаг);
КонецФункции // СформироватьСуммуПрописью(СтоимостьАкта, Валюта, Истина)

&НаСервере
Функция ПолучитьПодписиИсполнителя(ЭтапДоговора)
	Подразделение = ЭтапДоговора.Подразделение;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ЗначениеЗаполнено(ЭтапДоговора.Подразделение.Родитель) Тогда
			ОтделИсполнителя = ЭтапДоговора.Подразделение.Родитель;
			ОтделИсполнителяНаименование = ЭтапДоговора.Подразделение.Родитель.Наименование;
		Иначе
			ОтделИсполнителя = ЭтапДоговора.Подразделение;
			ОтделИсполнителяНаименование = ЭтапДоговора.Подразделение.Наименование;
		КонецЕсли; 
		
		Исполнитель = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОтделИсполнителя, "Руководитель");
		ИсполнительКратко = ФизическиеЛица.ФамилияИнициалыФизЛица(Исполнитель.ПредставлениеВДокументах,,,,Ложь);
		ДолжностьИсполнителя = РаботаСПользователями.ПолучитьДолжность(Исполнитель).Наименование;
		ТелефонИсполнителя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Исполнитель, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОтделИсполнителяНаименование = "___________________";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ИсполнительКратко) Тогда
		ИсполнительКратко = "___________________";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ДолжностьИсполнителя) Тогда
		ДолжностьИсполнителя = "___________________";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ТелефонИсполнителя) Тогда
		ТелефонИсполнителя = "___________________";
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура(); 
	СтруктураПараметров.Вставить("ОтделИсполнителя", ОтделИсполнителяНаименование);
	СтруктураПараметров.Вставить("ДолжностьИсполнителя", ДолжностьИсполнителя);
	СтруктураПараметров.Вставить("ИсполнительКратко", ИсполнительКратко);
	СтруктураПараметров.Вставить("ТелефонИсполнителя", ТелефонИсполнителя);
	
	Возврат СтруктураПараметров;
КонецФункции // ПолучитьПодписиИсполнителя()

&НаСервереБезКонтекста
Функция ПолучитьПодписиПодрядчика(Договор)
	СтруктураПараметров = Новый Структура(); 
	
	Подписал = Договор.Утвердил;
	Если ЗначениеЗаполнено(Подписал) Тогда
		ПодписалДолжность = РаботаСПользователями.ПолучитьДолжность(Подписал).Наименование;
		ПодписалКратко = ФизическиеЛица.ФамилияИнициалыФизЛица(Подписал.Наименование,,,,Ложь);
		ПодписалДоверенность = ПолучитьДоверенность(Подписал, Договор.ДатаРегистрации);
	
	Иначе
		Сообщить("Не заполнен в договоре Подписал!");
		ПодписалДолжность = "___________________";
		ПодписалКратко = "___________________";
		ПодписалДоверенность = "___________________";
	КонецЕсли; 
	СтруктураПараметров.Вставить("ПодписалДолжность", ПодписалДолжность);
	СтруктураПараметров.Вставить("ПодписалКратко", ПодписалКратко);
	СтруктураПараметров.Вставить("ПодписалДоверенность", ПодписалДоверенность);
	
	Возврат СтруктураПараметров;
КонецФункции // ПолучитьПодписиПодрядчика()

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ЗаполнитьФорму(Договор);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    // Выделим отмеченные строки
	Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда
		ЭтапАкта = ПолучитьЭтапАкта(АктВыполненныхРабот);
		Для каждого Этап Из ЭтапыДоговора Цикл
			Этап.Пометка = Ложь;
			Если Этап.ЭтапДоговора = ЭтапАкта Тогда
				Элементы.ЭтапыДоговора.ВыделенныеСтроки.Добавить(Этап);
				Этап.Пометка = Истина; 
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Для каждого Этап Из ЭтапыДоговора Цикл
			Если Этап.Пометка Тогда
				Элементы.ЭтапыДоговора.ВыделенныеСтроки.Добавить(Этап);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоверенность(Подписал, ДатаРегистрации)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДействиеДоверенностей.НомерДоверенности КАК НомерДоверенности,
	|	ДействиеДоверенностей.ДатаНачала КАК ДатаДоверенности,
	|	ДействиеДоверенностей.ДатаОкончания
	|ИЗ
	|	РегистрСведений.ДействиеДоверенностей КАК ДействиеДоверенностей
	|ГДЕ
	|	ДействиеДоверенностей.Пользователь = &Пользователь
	|	И &ДатаДоговора МЕЖДУ ДействиеДоверенностей.ДатаНачала И ДействиеДоверенностей.ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаДоговора", ДатаРегистрации);
	Запрос.УстановитьПараметр("Пользователь", Подписал);
	ВыборкаШапкаДоговора = Запрос.Выполнить().Выбрать();
	ВыборкаШапкаДоговора.Следующий();
	
	НомерДоверенности = СокрЛП(ВыборкаШапкаДоговора.НомерДоверенности);
	Если НомерДоверенности = "Устав" Тогда
		РезультатОбработки = "";
	Иначе
		РезультатОбработки = "(на основании "+НомерДоверенности+ " от "+Формат(ВыборкаШапкаДоговора.ДатаДоверенности, "ДЛФ = DD")+")";
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции // ПолучитьРеквизитыКорреспондента()

//&НаКлиенте
//Процедура Создать(Команда)
//	СоздатьАкт = Истина;  
//	ГродноПечатьАкта();
//	Оповестить("Напечатан акт выполненных работ", АктВыполненныхРабот);	
//КонецПроцедуры // Печать()

&НаКлиенте
Процедура ПечатьВорд(Команда)
	СоздатьАкт = Ложь;
	ГродноПечатьАкта();
		
	Для Каждого СтрЭтапа Из ЭтапыДоговора Цикл
		Если СтрЭтапа.Пометка Тогда
			ЗаписатьДатуПечатиАкта(СтрЭтапа.ЭтапДоговора, ТекущаяДата());
		КонецЕсли;
	КонецЦикла;	
	Оповестить("Напечатан акт выполненных работ", АктВыполненныхРабот);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуРегистрации(_Акт) 
	Возврат _Акт.ДатаРегистрации;
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьРегНомерАкта(_Акт) 
	Возврат _Акт.РегистрационныйНомер;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭтапАкта(_Акт) 
	Возврат _Акт.ЭтапДоговора;
КонецФункции


&НаСервере
Процедура ЗаписатьДатуПечатиАкта(ЭтапДоговора, ДатаПечати) 
	ЭтапДоговораОбъект = ЭтапДоговора.ПолучитьОбъект();
	ЭтапДоговораОбъект.ДатаПечатиАкта = ДатаПечати;
	ЭтапДоговораОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ЭтапДоговораОбъект.Записать();
	Исключение
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать этап договора "+ЭтапДоговора+"! "+ОписаниеОшибки();
		Сообщение.Сообщить(); 
	КонецПопытки; 
КонецПроцедуры 

&НаКлиенте
Процедура ГродноПечатьАкта()
	Город = мРазное.ПолучитьГородБазы();
	Если Не Город = "Гродно" Тогда
		Если Не ЗначениеЗаполнено(Подписал) Тогда
			// Создание сообщения
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнено поле ""Подписал""!";
			Сообщение.Поле  = "Подписал";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Подписи = ПолучитьПодписиПодрядчика(Договор);
	СтруктураНашихРеквизитов = Гр_ПравилаАвтозаполненияШаблонов.ПолучитьНашиРеквизиты();
	
	Этапы = Новый СписокЗначений;
	г = ЭтапыДоговора.Количество() - 1;
	Пока г <> -1 Цикл
		Если ЭтапыДоговора[г].Пометка Тогда
			Этапы.Добавить(ЭтапыДоговора[г],"ЭтапДоговора");
		КонецЕсли;
		г = г - 1;
	КонецЦикла;
	Режим = "";
	Макет = ГродноПолучитьМакетНаСервере(Этапы.Получить(0).Значение.КакДоговорЮрЛица, Режим);
	
	Дата = '00010101';
	НомерАктирования = 0;
	Для каждого Этап из Этапы Цикл
		Данные = ГродноПолучитьНомерИДатуАкта(Этап.Значение.ЭтапДоговора);
		Если Дата < Данные.Дата Тогда
			Дата = Данные.Дата;
			НомерАктирования = Данные.Номер;
		КонецЕсли;
	КонецЦикла;
	Если НомерАктирования = 0 Тогда
		НомерАктирования = НомерАктирования + 1;
	КонецЕсли;
	
	временныйПуть = КаталогВременныхФайлов();
	Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда
		ПутьКФайлуНаДиске = "Акт " + ПолучитьРегНомерАкта(АктВыполненныхРабот)+".docx";
	Иначе
		ПутьКФайлуНаДиске = "Акт " + НомерДоговора + "_" + НомерАктирования + ".docx";
	КонецЕсли;
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "/", "_");
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "\", "_");
	ПутьКФайлуНаДиске = временныйПуть + ПутьКФайлуНаДиске;
	
	Макет.Записать(ПутьКФайлуНаДиске);
	
	WordApp = Новый COMОбъект("Word.Application");
	Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
	
	Селекция = WordApp.Selection;
	
	Док.Content.Find.ClearFormatting();
	Док.Content.Find.Replacement.ClearFormatting();
	
	// Заполнение акта
	РегНомер  = НомерДоговора;
	ДатаРег   = Формат(ДатаДоговора,"ДЛФ=D");
	НомерАкта = ?(ЗначениеЗаполнено(АктВыполненныхРабот),ПолучитьРегНомерАкта(АктВыполненныхРабот),РегНомер + "/" + НомерАктирования);
	Заменить(Док, "НомерДатаДоговора", РегНомер + " от " + ДатаРег);  
	Заменить(Док, "НомерАкта", НомерАкта);
	Если Дата = '00010101' Тогда
		Заменить(Док, "%Период%", Формат(ТекущаяДата(),"ДЛФ=Д"));
	Иначе
		Заменить(Док, "%Период%", Формат(Дата,"ДЛФ=Д"));
	КонецЕсли;
	
	// Шапка документа
	Для каждого Реквизит Из СтруктураНашихРеквизитов Цикл
		Заменить(Док, Реквизит.Ключ, Реквизит.Значение);  
	КонецЦикла;
	
	// Заказчики
	//работаем с копированием абзацев
	НачалоЗакладки = Док.Bookmarks("ЗаказчикиРабот").Start;
	КонецЗакладки  = Док.Bookmarks("ЗаказчикиРабот").End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End   = КонецЗакладки;
	Селекция.Cut();
	
	ЗаказчикиКоличество = Заказчики.Количество(); 
	
	Если Режим = "ЮрЛица" Тогда
		ПлательщикиКоличество = ЗаказчикиКоличество - 1;
		
		Для й=1 По ЗаказчикиКоличество Цикл
			селекция.Start = НачалоЗакладки; // Начало вставки
			селекция.Collapse();             // Вставка, а не замещение
			селекция.Paste();
			//заполняем параметры
			НомерЗаказчика = ЗаказчикиКоличество-й+1;
			
			ДанныеКорр     = Заказчики[НомерЗаказчика-1];
			//ДанныеКорр = ДанныеКорреспондентов[НомерЗаказчика-1];
			
			Если ЗаказчикиКоличество=1 Тогда
				//Заменить(Док, "%ЗаказчикШапка%", "Заказчик");
				//Заменить(Док, "%НомерЗаказчика%", "");
				Заменить(Док, "%СтрокаЗАКАЗЧИКИ%", "Заказчик");
				Заменить(Док, "%ю%", "е");
			//Иначе
				//Если ЗаказчикПлательщики Тогда
				//	Если й=ЗаказчикиКоличество Тогда // Вывод первого
						//Заменить(Док, "%ЗаказчикШапка%", "Заказчик");
						//Заменить(Док, "%НомерЗаказчика%", "");
					//	Если ПлательщикиКоличество = 1 Тогда
					//		Заменить(Док, "%СтрокаЗАКАЗЧИКИ%", "ЗАКАЗЧИК и ПЛАТЕЛЬЩИК");
					//	Иначе	
					//		Заменить(Док, "%СтрокаЗАКАЗЧИКИ%", "ЗАКАЗЧИК и ПЛАТЕЛЬЩИКИ");
					//	КонецЕсли; 
					//Иначе
					//	Заменить(Док, "%ЗаказчикШапка%", "Плательщик");
					//	Если ПлательщикиКоличество = 1 Тогда
					//		Заменить(Док, "%НомерЗаказчика%", "");  
					//	Иначе	
					//		НомерПлательщика = НомерЗаказчика - 1;
					//		Заменить(Док, "%НомерЗаказчика%", " "+НомерПлательщика);  
					//	КонецЕсли; 
					//КонецЕсли; 
				Иначе	
					//Заменить(Док, "%ЗаказчикШапка%", "Заказчик");
					//Заменить(Док, "%НомерЗаказчика%", " "+НомерЗаказчика);  
					Заменить(Док, "%СтрокаЗАКАЗЧИКИ%", "Заказчики");
					Заменить(Док, "%ю%", "ю");
				//КонецЕсли; 
			КонецЕсли; 
			Заменить(Док, "%Заказчик%", ДанныеКорр.ПолноеНаименование);  
			Заменить(Док, "%Адрес%", ДанныеКорр.Адрес); 
			РасчетныйСчет = ДанныеКорр.НомерСчета + " " + ДанныеКорр.Банк + ", "+ДанныеКорр.БанкАдрес + ", МФО "+ ДанныеКорр.КодБанка;
			Заменить(Док, "%РасчетныйСчет%", РасчетныйСчет);  
			Заменить(Док, "%УНП%", ДанныеКорр.УНП);  
			Заменить(Док, "%ОКПО%", ДанныеКорр.ОКПО + Символы.ВК);    
		КонецЦикла; 
	Иначе
		Если ЗаказчикиКоличество>1 Тогда
			Заменить(Док, "%И%", "и");
			Заменить(Док, "%ю%", "ю");
		Иначе
			Заменить(Док, "%И%", "");
			Заменить(Док, "%ю%", "е");
		КонецЕсли;
		
		Для й=1 По ЗаказчикиКоличество Цикл
			селекция.Start = НачалоЗакладки; // Начало вставки
			селекция.Collapse();             // Вставка, а не замещение
			селекция.Paste();
			//заполняем параметры
			НомерЗаказчика = ЗаказчикиКоличество-й+1;
			//РеквизитыФизЛица = мРаботаСДоговорами.ПолучитьРеквизитыФизЛица(Заказчики[НомерЗаказчика-1].Корреспондент);
			Заменить(Док, "%Заказчик%", Строка(Заказчики[НомерЗаказчика-1].ПолноеНаименование));  
			// Паспорт не нужен		
			адрес=Строка(Заказчики[НомерЗаказчика-1].Адрес)+Символы.ВК;
			Заменить(Док, "%Адрес%", адрес);  
		КонецЦикла; 
	КонецЕсли; 
	
	//Формирование таблицы
	НачалоЗакладки = Док.Bookmarks("СтрокаТаблицы").Start;
	КонецЗакладки  = Док.Bookmarks("СтрокаТаблицы").End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End   = КонецЗакладки;
	Селекция.Cut();
	
	СуммаЭтапа      = 0;
	СуммаВыпРабот   = 0;
	НомерСтроки     = Этапы.Количество();
	СуммаНДС        = 0;
	СуммаВыпНДС     = 0;
	СуммаЗаОтчМесяц = 0;
	СуммаНДСМесяц   = 0;
	
	СтатьяОсвобождения = Новый Массив;
	
	Массив = Новый Массив(5);
	Массив[0] = Символ(42);
	Массив[1] = Символ(185);
	Массив[2] = Символ(178);
	Массив[3] = Символ(179);
	Массив[4] = Символ(8308);
	
	Зашел = Истина;
	т = 0;
	Для каждого Этапа из Этапы Цикл
		селекция.Start = НачалоЗакладки; // Начало вставки
		селекция.Collapse();             // Вставка, а не замещение
		селекция.Paste();
		
		СтоимостьВыпРабот = ГродноПолучитьСтоимостьВыполненныхРабот(Этапа.Значение.ЭтапДоговора);	
		СтоимостьМесяц    = ГродноПолучитьСтоимостьЗаОтчМесяц(Этапа.Значение.ЭтапДоговора, Дата);
		СтоимостьЭтапа    = Этапа.Значение.СтоимостьСНДС;
		НДС               = Этапа.Значение.СуммаНДС;
		
		ВидРабот = Этапа.Значение.НаименованиеРаботы;
		Вид1     = Лев(ВидРабот,250);
		Вид2     = СтрЗаменить(Видработ,Вид1,""); 
		
		ОбъектРабот  = Строка(Этапа.Значение.ОбъектРабот);
		Объект1      = Лев(ОбъектРабот,250);
		Объект2      = СтрЗаменить(ОбъектРабот,Объект1,"");
		Статья       = "";
		
		Если Этапа.Значение.СтавкаНДС = "Без НДС" Тогда
			//Статья = Символы.ВК + "в т.ч. НДС по ст. " + Строка(Этапа.Значение.СтавкаНДС) + "% -" + Строка(НДС);
		//Иначе
			Если Зашел Тогда
				СтатьяОсвобождения.Добавить(Этапа.Значение.ОсвобождениеОтНДСДляПечати);
				Зашел = Ложь;
				т = т + 1;
			КонецЕсли;
			Статья = Строка(Статья) + " " + Массив[0] + Массив[т];
		КонецЕсли;
		
		Заменить(Док,"%Номер%", Этапа.Значение.НомерЭтапа);
		Заменить(Док,"%СтоимЭтапа%", Строка(СтоимостьЭтапа) + Строка(Статья));
		Заменить(Док, "%Объект1%", Строка(Объект1));
		Заменить(Док, "%Объект2%", Строка(Объект2));
		Заменить(Док, "%Вид1%", Строка(Вид1));
		Заменить(Док, "%Вид2%", Строка(Вид2));
		
		Если Режим <> "ЮрЛица" Тогда
			Заменить(Док,"%АдресОбъекта%"," по адресу: " + Строка(Этапа.Значение.Месторасположение));
		Иначе
			Заменить(Док,"%АдресОбъекта%"," ");
		КонецЕсли;
		
		//Если СтоимостьВыпРабот.НДСАкт>0 Тогда
		//	 Заменить(Док,"%СтоимВып%", Формат(СтоимостьВыпРабот.Актирование,"ЧРГ=' '; ЧН=0") + " в т.ч. НДС по ст. " + Строка(Этапа.Значение.СтавкаНДС) + "% -" + Строка(СтоимостьвыпРабот.НДСАкт));
		//Иначе
			 Заменить(Док,"%СтоимВып%", Формат(СтоимостьВыпРабот.Актирование,"ЧРГ=' '; ЧН=0"));
		//КонецЕсли; 
		//Если СтоимостьМесяц.НДСОтчМесяц>0 Тогда
		//	 Заменить(Док, "%СтоимМес%",Строка(СтоимостьМесяц.СтоимостьОтчМесяц) + " в т.ч. НДС по ст. " + Строка(Этапа.Значение.СтавкаНДС) + "% -" + Строка(СтоимостьМесяц.НДСОтчМесяц));
		//Иначе
			 Заменить(Док, "%СтоимМес%",Формат(СтоимостьМесяц.СтоимостьОтчМесяц,"ЧРГ=' '; ЧН=0"));
		//КонецЕсли;

		СуммаЗаОтчМесяц = СуммаЗаОтчМесяц + Число(СтоимостьМесяц.СтоимостьОтчМесяц);
		СуммаНДСМесяц   = СуммаНДСМесяц   + Число(СтоимостьМесяц.НДСОтчМесяц);
		СуммаЭтапа      = СуммаЭтапа      + Число(СтоимостьЭтапа);
		СуммаВыпРабот   = СуммаВыпРабот   + Число(СтоимостьВыпРабот.Актирование);
		СуммаВыпНДС     = СуммаВыпНДС     + Число(СтоимостьВыпРабот.НДСАкт);
		СуммаНДС        = СуммаНДС        + НДС;
		Статья          = "";
		НомерСтроки     = НомерСтроки - 1;
	КонецЦикла;
		
	Док.Bookmarks("СтоимостьАкта").Range.Text = Формат(СуммаЭтапа,"ЧРГ=' '; ЧН=0");
	Док.Bookmarks("СтоимостьВып").Range.Text  = Формат(СуммаВыпРабот,"ЧРГ=' '; ЧН=0");
	Док.Bookmarks("НДСМес").Range.Text        = Формат(СуммаНДСМесяц,"ЧРГ=' '; ЧН=0");
	Док.Bookmarks("СтоимостьМес").Range.Text  = Формат(СуммаЗаОтчМесяц,"ЧРГ=' '; ЧН=0");
	Док.Bookmarks("НДСАкт").Range.Text        = Формат(СуммаНДС,"ЧРГ=' '; ЧН=0");
	Док.Bookmarks("НДСВып").Range.Text        = Формат(СуммаВыпНДС,"ЧРГ=' '; ЧН=0");
	
	т = 0;
	Если СтатьяОсвобождения.Количество() <> 0 Тогда
		Для г = 0 по СтатьяОсвобождения.ВГраница() Цикл
			Строки = Строка(Строки) + Массив[0] + Массив[т+1] + " Без НДС, согласно " + Строка(СтатьяОсвобождения[г]) + Символы.ВК;
			т = т + 1;
		КонецЦикла;
		Док.Bookmarks("Сноски").Range.Text = Строки;
	Иначе
		Док.Bookmarks("Сноски").Range.Text = "";
	КонецЕсли;
			
	Если СуммаЭтапа = СуммаВыпРабот Тогда
		Заменить(Док,"%ПРОМЕЖУТОЧНЫЙ%"," ");
	иначе
		Заменить(Док,"%ПРОМЕЖУТОЧНЫЙ%","ПРОМЕЖУТОЧНЫЙ");
	КонецЕсли;
	
	// Стоимость Акта цифрами и прописью
	СтоимостьАкта = мРаботаСДоговорами.СуммаЧисломИПрописью(СуммаЗаОтчМесяц, ВалютаДоговора);
	Если СуммаНДС > 0 Тогда
		СуммаНДСПрописьюПолная = мРаботаСДоговорами.СуммаЧисломИПрописью(СуммаНДСМесяц, ВалютаДоговора);
		СтоимостьАкта          = СтоимостьАкта + ", в том числе НДС в сумме " + СуммаНДСПрописьюПолная;
	КонецЕсли;
		
	Док.Bookmarks("СтоимостьАкт").Range.Text = СтоимостьАкта; 
	
	//Аванс
	Аванс = 0;
	Для каждого Этапа из Этапы Цикл
		Аванс = Аванс + ГродноПолучитьАвансПоЭтапу(Этапа.Значение.ЭтапДоговора);
	КонецЦикла;
	Док.Bookmarks("АвансЭтапа").Range.Text = мРаботаСДоговорами.СуммаЧисломИПрописью(Аванс, ВалютаДоговора);	
	
	Если Аванс = 0 Тогда
		Оплата = СуммаВыпРабот;
	Иначе
		Оплата = СуммаВыпРабот - Аванс;
	КонецЕсли;
	Если Оплата < 0 Тогда
		Оплата = 0;
	КонецЕсли;
	Док.Bookmarks("Оплата").Range.Text = мРаботаСДоговорами.СуммаЧисломИПрописью(Оплата, ВалютаДоговора);
		
	// Подписи
	ПодписиИсполнителя = ПолучитьПодписиИсполнителя(Этапы.Получить(0).Значение.ЭтапДоговора);
	
	Док.Bookmarks("ДолжностьИсполнителя").Range.Text = ПодписиИсполнителя.ДолжностьИсполнителя;
	Док.Bookmarks("ИсполнительКратко").Range.Text    = ПодписиИсполнителя.ИсполнительКратко;
	
	Если Лев(Подписи.ПодписалДолжность,2) = "__" Тогда
		Подписи.ПодписалДолжность = "____________ ";
		Подписи.ПодписалКратко    = "____________";
	КонецЕсли;
	Заменить(Док, "%ПодписалДолжность", Подписи.ПодписалДолжность);
	Заменить(Док, "%МестоПодписи", "____________ ");
	Заменить(Док, "%ПодписалКратко", Подписи.ПодписалКратко + Символы.ВК);
	
	//Подписи заказчиков
	НачалоЗакладки = Док.Bookmarks("ЗаказчикиПодвал").Start;
	КонецЗакладки  = Док.Bookmarks("ЗаказчикиПодвал").End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End   = КонецЗакладки;
	Селекция.Cut();
	//
	Если Режим = "ЮрЛица" Тогда
		Для й=1 По ЗаказчикиКоличество Цикл
			селекция.Start = НачалоЗакладки; // Начало вставки
			селекция.Collapse();             // Вставка, а не замещение
			селекция.Paste();
			//заполняем параметры
			НомерЗаказчика = ЗаказчикиКоличество-й+1;
			ДанныеКорр     = Заказчики[НомерЗаказчика-1];
			//ДанныеКорр = ДанныеКорреспондентов[НомерЗаказчика-1];
			
			//Если ЗаказчикиКоличество=1 Тогда
			//	Заменить(Док, "%ЗаказчикПодвал%", "ЗАКАЗЧИКА");
			//	Заменить(Док, "_НомерЗаказчика_", "");  
			//Иначе
			//	Если ЗаказчикПлательщики Тогда
			//		Если й=ЗаказчикиКоличество Тогда //вывод первого
			//			Заменить(Док, "%ЗаказчикПодвал%", "ЗАКАЗЧИКА");
			//			Заменить(Док, "_НомерЗаказчика_", "");  
			//		Иначе
			//			Заменить(Док, "%ЗаказчикПодвал%", "ПЛАТЕЛЬЩИКА");
			//			Если ПлательщикиКоличество = 1 Тогда
			//				Заменить(Док, "_НомерЗаказчика_", "");  
			//			Иначе	
			//				НомерПлательщика = НомерЗаказчика - 1;
			//				Заменить(Док, "_НомерЗаказчика_", " "+НомерПлательщика);  
			//			КонецЕсли; 
			//		КонецЕсли; 
			//	Иначе	
			//		Заменить(Док, "%ЗаказчикПодвал%", "ЗАКАЗЧИКА");
			//		Заменить(Док, "_НомерЗаказчика_", " "+НомерЗаказчика);  
			//	КонецЕсли; 
			//КонецЕсли; 
			Если ДанныеКорр.КорреспондентКратко <> "" Тогда 
				Заменить(Док, "ДолжностьКорр", СокрЛП(ДанныеКорр.ДолжностьКорр) + " _____________ "+ ПолучитьЗаказчикаКратко(ДанныеКорр.КорреспондентКратко)); 
				Заменить(Док, "ДолжностьКоррКР", "");
			Иначе
				Заменить(Док, "ДолжностьКоррКР", "Заполните поле подписал у Заказчика");
				Заменить(Док, "ДолжностьКорр", "");
			КонецЕсли;			
		КонецЦикла; 
	Иначе
		Для й=1 По ЗаказчикиКоличество Цикл
			селекция.Start = НачалоЗакладки; // Начало вставки
			селекция.Collapse();             // Вставка, а не замещение
			селекция.Paste();
			НомерЗаказчика = ЗаказчикиКоличество-й+1;					
			Заменить(Док, "КорреспондентКратко", ПолучитьЗаказчикаКратко(Заказчики[НомерЗаказчика-1].ПолноеНаименование));  
		КонецЦикла; 
	КонецЕсли; 

	Если ПечататьШтрихКод Тогда
		Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда
			ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(АктВыполненныхРабот, Ложь, Истина);
			Если ДанныеОШтрихкоде <> Неопределено
				И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
				
				// Запись картинки штрихкода во временный файл
				ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
				ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
				
				НачалоЗакладки = Док.Bookmarks("Штрихкод").Start;
				КонецЗакладки  = Док.Bookmarks("Штрихкод").End;
				Селекция.Start = НачалоЗакладки;
				Селекция.End   = КонецЗакладки;
				
				//Док.Bookmarks("Штрихкод").Range.Select();
				//Селекция = WordApp.Selection; // активная (выделенная) область 
				Рисунок = Селекция.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
				
				// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
				Shape = Рисунок.ConvertToShape();
				Shape.WrapFormat.Type = 0; // по контуру...
				
				УдалитьФайлы(ВременныйФайлКартинки);
			КонецЕсли;
		Иначе 
			// Акта нет - штрихкод не вставляем
			Заменить(Док, "Штрихкод", "");
		КонецЕсли; 
	Иначе
		// Печатать штрихкод не надо
		Заменить(Док, "Штрихкод", "");
	КонецЕсли; 
	
	
	WordApp.Visible = Ложь; 
	
	Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
	Док.Saved = Истина;
	Док.Close(); 
	
	Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда// Сохранить в Акт вып работ
		КарточкаФайла = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, АктВыполненныхРабот, ЭтаФорма, Истина, , , , ,);
	Иначе//Сохраняем в Договор
		КарточкаФайла = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, Договор, ЭтаФорма, Истина, , , , ,);	
	КонецЕсли; 
	КомандыРаботыСФайламиКлиент.Редактировать(КарточкаФайла);//открываем на редактирование 
	
	УдалитьФайлы(ПутьКФайлуНаДиске);	
	Закрыть();
КонецПроцедуры

&Насервере
Функция ГродноПолучитьМакетНаСервере(КакДоговорЮрЛица, Режим="") 
Если ЭтоФизЛица Тогда
		//Если КакДоговорЮрЛица Тогда
		//	Режим = "ФизЛицаКакЮрЛица";
		//	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктФизЛицКакЮрЛиц");
		//Иначе
			Режим = "ФизЛица";
			Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("Гродно_DOCX_АктФизЛиц");
		//КонецЕсли; 
	Иначе
		Режим = "ЮрЛица";
		Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("Гродно_DOCX_АктЮрЛиц");
	КонецЕсли; 
КонецФункции

Функция ГродноПолучитьАвансПоЭтапу(ЭтапДоговора)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СУММА(ВЫБОР
	                |			КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	                |					И РасчетыСПокупателями.Сумма > 0
	                |				ТОГДА РасчетыСПокупателями.Сумма
	                |			ИНАЧЕ 0
	                |		КОНЕЦ) КАК Оплата
	                |ИЗ
	                |	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	                |ГДЕ
	                |	РасчетыСПокупателями.ЭтапДоговора = &ЭтапДоговора";
	Запрос.УстановитьПараметр("ЭтапДоговора",ЭтапДоговора);
	Результат = Запрос.Выполнить().Выгрузить();
	ОплаченоРанее = 0;
	Если Результат.Количество() <> 0 и Результат[0].Оплата<>Null Тогда
		ОплаченоРанее = Число(Результат[0].Оплата);
	КонецЕсли;
    	                    	
	Возврат ОплаченоРанее
КонецФункции

Функция ГродноПолучитьСтоимостьВыполненныхРабот(ЭтапДоговора)
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетДоговоровОбороты.СуммаРасход КАК СуммаРасход,
	               |	УчетДоговоровОбороты.НДСРасход КАК НДСРасход
	               |ИЗ
	               |	РегистрНакопления.УчетДоговоров.Обороты(, , , ЭтапДоговора = &ЭтапДоговора) КАК УчетДоговоровОбороты";
	Запрос.УстановитьПараметр("ЭтапДоговора",ЭтапДоговора);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Актирование = 0;
	Значения = Новый Структура;
	Если РезультатЗапроса.Количество()<>0 и РезультатЗапроса[0].СуммаРасход<>Null Тогда
		Значения.Вставить("Актирование",Число(РезультатЗапроса[0].СуммаРасход));
		Значения.Вставить("НДСАкт",Число(РезультатЗапроса[0].НДСРасход));
	Иначе 
		Значения.Вставить("Актирование",0);
		Значения.Вставить("НДСАкт",0);
	КонецЕсли;
	  
	Возврат Значения
КонецФункции

Функция ГродноПолучитьСтоимостьЗаОтчМесяц(ЭтапДоговора,ДатаАкта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетДоговоровОбороты.СуммаРасход КАК СуммаРасход,
	|	УчетДоговоровОбороты.НДСРасход КАК НДСРасход
	|ИЗ
	|	РегистрНакопления.УчетДоговоров.Обороты(&НачалоПериода, &КонецПериода, Период, ЭтапДоговора = &ЭтапДоговора) КАК УчетДоговоровОбороты";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаАкта));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДатаАкта));
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	РезультатЗапроса=Запрос.Выполнить().Выгрузить();
	
	Значение = Новый Структура;
	Если РезультатЗапроса.Количество()<>0 и РезультатЗапроса[0].СуммаРасход <> Null Тогда
		Значение.Вставить("СтоимостьОтчМесяц", РезультатЗапроса[0].СуммаРасход);
		Значение.Вставить("НДСОтчМесяц", РезультатЗапроса[0].НДСРасход);
	Иначе
		Значение.Вставить("СтоимостьОтчМесяц", 0);
		Значение.Вставить("НДСОтчМесяц", 0);
	КонецЕсли;	
	
	Возврат Значение
КонецФункции

Функция ГродноПолучитьНомерИДатуАкта(ЭтапДоговора)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетыСПокупателями.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				И РасчетыСПокупателями.ВидСписанияЗадолженности = ЗНАЧЕНИЕ(Перечисление.мВидыСписанияЗадолженности.ПустаяСсылка)
	               |			ТОГДА РасчетыСПокупателями.Сумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Актирование
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	               |ГДЕ
	               |	РасчетыСПокупателями.ЭтапДоговора = &ЭтапДоговора
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапДоговора",ЭтапДоговора );
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Зашел = Истина;
	Номер = 0;
	Период = '00010101';
	Для каждого Строки Из РезультатЗапроса Цикл
		Если Строки.Актирование<>0 Тогда
			Если Зашел Тогда
				Период = Строки.Период;
				Зашел = Ложь;
			КонецЕсли;
			Номер = Номер + 1;
		КонецЕсли;
	КонецЦикла;
	Значение = Новый Структура;
	Значение.Вставить("Номер",Номер);
	Значение.Вставить("Дата",Период);
	
	Возврат Значение;
КонецФункции	

 &НаКлиенте
Процедура СнятьПометки(Команда)
	Для каждого Этап Из ЭтапыДоговора Цикл
		Этап.Пометка = Ложь;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура  ПроставитьВсеПометки(Команда) 
	Для каждого Этап Из ЭтапыДоговора Цикл
		Этап.Пометка = Истина;
	КонецЦикла; 
КонецПроцедуры
