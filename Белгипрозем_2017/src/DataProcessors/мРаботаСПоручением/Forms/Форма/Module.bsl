#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Поручение") Тогда
		Поручение = Параметры.Поручение;
		Штрихкод = мРаботаСДоговорами.ШтрихКодДокумента(Поручение);
	КонецЕсли; 

	Автор = ПользователиКлиентСервер.ТекущийПользователь();
	
	Состояние = мРаботаСДоговорами.СостояниеПоручения(Поручение);
	
	//РаскраситьКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//СистемнаяИнформация = Новый СистемнаяИнформация();
	//ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	//Операция = мРазное.ПолучитьОперациюСканераШтрихкода(ИдентификаторКлиента);
	УправлениеДиалогом();
	
	//Штрихкод = "";
	//ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
	//ДатаРегистрации = '00010101000000';

КонецПроцедуры




#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ШтрихкодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	//ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоручениеПриИзменении(Элемент)
	ШтрихКод = "";
	Если ЗначениеЗаполнено(Поручение) Тогда
		Штрихкод = мРаботаСДоговорами.ШтрихКодДокумента(Поручение);
	КонецЕсли; 
	
	Состояние = мРаботаСДоговорами.СостояниеПоручения(Поручение);
	
	УправлениеДиалогом();	
КонецПроцедуры





#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОК(Команда)
	ЗапомнитьОперацию();
	
	Если Не ЗначениеЗаполнено(Поручение) Тогда
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			Поручение = ПолучитьДокПоШтрихкоду(Штрихкод);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Поручение) Тогда
		Сообщить("Операция не выполнена, т.к. не указано поручение.");
		Возврат; 
	КонецЕсли; 
	
	//Если Операция = "Исполнить поручение" Тогда
	//	ИсполнитьПоручение("");		
	//	
	//ИначеЕсли Операция = "Подготовить запрос доп. информации" Тогда
	//	ПодготовитьЗапросИнформации();
	//	
	//ИначеЕсли Операция = "Запросить доп. информацию" Тогда
	//	ЗапроситьИнформацию();
	//	
	//ИначеЕсли Операция = "Исполнить поручение (доп. инф.)" Тогда
	//	ИсполнитьПоручениеДопИнф();
	//	
	//ИначеЕсли Операция = "Вернуть поручение" Тогда
	//	ВернутьПоручение();
	//	
	//ИначеЕсли Операция = "Подготовить договор" Тогда
	//	ПодготовитьДоговор();
	//	
	//ИначеЕсли Операция = "Назначить исполнителя" Тогда
	//	НазначитьИсполнителя();
	//	
	//КонецЕсли;
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПоручение(Команда)
	ОчиститьСообщения();
	Исполнитель = "";
	
	Если СтартоватьПроцесс("Исполнить поручение", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Исполнить поручение""", ,
		"будет стартован в течение минуты.");
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Исполнить поручение"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьДопИнформацию(Команда)
	ОчиститьСообщения();
	Исполнитель = "";
	
	Если СтартоватьПроцесс("Подготовить запрос доп. информации", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Подготовить запрос доп. информации""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Исполнить поручение");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Подготовить запрос доп. информации"".");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИнформациюПоОценке(Команда)
	ОчиститьСообщения();
	Исполнитель = "";
	
	Если СтартоватьПроцесс("Подготовить информацию по оценке и(или) убыткам", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Подготовить информацию по оценке и(или) убыткам""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Исполнить поручение");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Подготовить информацию по оценке и(или) убыткам"".");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДопИнформацию(Команда)
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Укажите Исполнителя.";
		Сообщение.Поле = "Исполнитель";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Если СтартоватьПроцесс("Запросить доп. информацию", Поручение, Автор, Исполнитель) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Запросить доп. информацию""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Подготовить запрос доп. информации");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Запросить доп. информацию"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДопИнформациюСамостоятельно(Команда)
	ОчиститьСообщения();
	
	Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если СтартоватьПроцесс("Запросить доп. информацию", Поручение, Автор, Исполнитель) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Запросить доп. информацию""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Исполнить поручение");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Запросить доп. информацию"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнитьПоручениеДопИнф(Команда)
	ОчиститьСообщения();
	
	Если СтартоватьПроцесс("Исполнить поручение (доп. инф.)", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Исполнить поручение (доп. инф.)""", ,
		"будет стартован в течение минуты.");
		
		// Предыдущий процесс должен завершаться при отправке исх документа
		//  вида ЗапросИнформацииКПоручению
		//МассивИмен = Новый Массив;
		//МассивИмен.Добавить("Запросить доп. информацию");
		//мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Исполнить поручение (доп. инф.)"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителя(Команда)
	ОчиститьСообщения();
	Исполнитель = "";
	
	Если СтартоватьПроцесс("Назначить исполнителя", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Назначить исполнителя""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Подготовить договор");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Назначить исполнителя"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДоговор(Команда)
	ОчиститьСообщения();
	Исполнитель = "";
	
	Если СтартоватьПроцесс("Подготовить договор", Поручение, Автор) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Подготовить договор""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Исполнить поручение");
		МассивИмен.Добавить("Исполнить поручение (доп. инф.)");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Подготовить договор"".");
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаботы(Команда)
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Укажите Исполнителя.";
		Сообщение.Поле = "Исполнитель";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Если СтартоватьПроцесс("Выполнить работы", Поручение, Автор, Исполнитель) Тогда
		ПоказатьОповещениеПользователя("Процесс ""Выполнить работы""", ,
		"будет стартован в течение минуты.");
		
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Назначить исполнителя");
		мРаботаСДоговорами.ЗавершитьПроцессы(МассивИмен, Поручение);
		
		УправлениеДиалогом();
	Иначе
		Сообщить("Произошла ошибка при старте 
		|процесса ""Выполнить работы"".");
	КонецЕсли; 	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Функция СформироватьНастройку(Значение, ИдентификаторКлиента)
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкаОперацииРаботыСПоручением");
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Значение);
	Возврат Элемент;
	
КонецФункции	

&НаКлиенте
Процедура ЗапомнитьОперацию() 
	МассивСтруктур = Новый Массив;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	МассивСтруктур.Добавить(СформироватьНастройку(Операция, ИдентификаторКлиента));
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьДокПоШтрихкоду(Штрихкод)
	МассивДел = ШтрихкодированиеСервер.НайтиОбъектыПоШтрихкоду(Штрихкод);
	Если МассивДел.Количество() = 0 Тогда
		Сообщить("Не найден владелец штрихкода " +Штрихкод+ "!");
		ШтрихКод = "";
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивДел[0].Ключ;
КонецФункции 

&НаКлиенте
Процедура УстановитьОписаниеДействия()
	Если Операция = "Исполнить поручение" Тогда
		ОписаниеДействия = "Установление состояния поручения ""В работе"".
		|Запуск процесса ""Исполнить поручение"".";		
		
	ИначеЕсли Операция = "Уточнить доп. информацию" Тогда
		ОписаниеДействия = "Установление состояния поручения ""Подготовка запроса информации"".
		|Запуск процесса ""Уточнить доп. информацию"".";
		
	ИначеЕсли Операция = "Запросить доп. информацию" Тогда
		ОписаниеДействия = "Установление состояния поручения ""Запрос информации"".
		|Запуск процесса ""Запросить информацию"".";
		
	ИначеЕсли Операция = "Исполнить поручение (доп. инф.)" Тогда
		ОписаниеДействия = "Установление состояния поручения ""В работе (доп. инф.)"".
		|Запуск процесса ""Исполнить поручение (доп. инф.)"".";
		
	ИначеЕсли Операция = "Подготовить договор" Тогда
		ОписаниеДействия = "Изменение состояния дела на ""Составление договора"".
		|Запуск процесса ""Подготовить договор"".";
		
	ИначеЕсли Операция = "Назначить исполнителя" Тогда
		ОписаниеДействия = "Изменение состояния дела на ""Назначение исполнителя"".
		|Запуск процесса ""Назначить исполнителя"".";
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СтартоватьПроцесс(ИмяПроцесса, Поручение, Автор, Исполнитель = "")
	ШаблонБП = мРаботаСДоговорами.ШаблонИсполненияПоИмени(ИмяПроцесса);
	
	Если Не ЗначениеЗаполнено(ШаблонБП) Тогда
		Сообщить("Процесс "+ИмяПроцесса+" не стартовал, т.к. не найден шаблон процесса.");
		Возврат Ложь;
	КонецЕсли;
	
    БизнесПроцесс = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
    
    ПараметрыЗаполнения = Новый Структура();
    ПараметрыЗаполнения.Вставить("Шаблон", ШаблонБП);
    ПараметрыЗаполнения.Вставить("Предметы", Поручение);
    ПараметрыЗаполнения.Вставить("АвторСобытия", Автор);
    ПараметрыЗаполнения.Вставить("Описание", Описание);
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		Исполнители = Новый Массив;
		Исполнители.Добавить(Исполнитель);
    	ПараметрыЗаполнения.Вставить("Исполнители", Исполнители);
	КонецЕсли; 
    БизнесПроцесс.Заполнить(ПараметрыЗаполнения);

	МассивПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
    Если МассивПолей.Количество() <> 0 Тогда
        
        СтрокаПолей = БизнесСобытияВызовСервера.МассивПолейВСтроку(МассивПолей);
        
        СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru = 'При заполнении процесса по шаблону ""%1"" не были заполнены поля: %2.
        | Автоматический запуск процесса не выполнен.'"),
        Строка(ШаблонБП), СтрокаПолей);
        
        ЗаписьЖурналаРегистрации(НСтр("ru='Обработка автоматического запуска процессов'"), УровеньЖурналаРегистрации.Ошибка, , ШаблонБП, СообщениеОбОшибке);
        
        // Создание уведомлений программы
        ОписаниеУведомления = НСтр("ru = 'Произошла ошибка при автоматическом запуске процесса по документу:
        |%1'");
        ОписаниеУведомления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        ОписаниеУведомления,
        СообщениеОбОшибке);
        
        РаботаСУведомлениямиПрограммыСервер.ДобавитьУведомление(
        ТекущаяДатаСеанса(),
        ОписаниеУведомления,
        Перечисления.ВидыУведомленийПрограммы.Ошибка,
        Автор,
        Поручение);
        
        Возврат Ложь;
        
    КонецЕсли;	
    
    БизнесПроцесс.Записать();
    
    БизнесПроцесс.Старт();
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКнопок()
	Группы = Новый Структура("
		|ГруппаИсполнитьПоручение,
		|ГруппаУточнитьДопИнформацию,
		|ГруппаПодготовитьИнформациюПоОценке,
		|ГруппаЗапроситьДопИнформацию,
		|ГруппаЗапроситьДопИнформациюСамостоятельно,
		|ГруппаИсполнитьПоручениеДопИнф,
		|ГруппаПодготовитьДоговор,
		|ГруппаНазначитьИсполнителя,
		|ГруппаВыполнитьРаботы");
	
	// Скрыть все по умолчанию
	Для каждого Группа Из Группы Цикл
		Группы[Группа.Ключ] = Ложь;	
	КонецЦикла;
	
	// Что показать
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Если ЗначениеЗаполнено(Поручение) Тогда
			Группы.Вставить("ГруппаИсполнитьПоручение", Истина);	
		КонецЕсли;
		
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.Зарегистрировано Тогда
		Группы.Вставить("ГруппаИсполнитьПоручение", Истина);	
		
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВРаботе Тогда
		Группы.Вставить("ГруппаУточнитьДопИнформацию", Истина);	
		Группы.Вставить("ГруппаПодготовитьИнформациюПоОценке", Истина);	
		Группы.Вставить("ГруппаПодготовитьДоговор", Истина);	
		Группы.Вставить("ГруппаЗапроситьДопИнформациюСамостоятельно", Истина);	
		
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.Возвращено Тогда
		//ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
		
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.УточнениеИнформации Тогда
		Группы.Вставить("ГруппаЗапроситьДопИнформацию", Истина);	
		Группы.Вставить("ГруппаПодготовитьДоговор", Истина);	
		Группы.Вставить("ГруппаЗапроситьДопИнформациюСамостоятельно", Истина);	
	
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ЗапросИнформации Тогда
		Группы.Вставить("ГруппаИсполнитьПоручениеДопИнф", Истина);	
	
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВРаботеДопИнформация Тогда
		Группы.Вставить("ГруппаУточнитьДопИнформацию", Истина);	
		Группы.Вставить("ГруппаПодготовитьДоговор", Истина);	
		Группы.Вставить("ГруппаЗапроситьДопИнформациюСамостоятельно", Истина);	
	
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.СоставлениеДоговора
		или Состояние = Перечисления.мСостоянияПоручения.ДоговорСоставлен Тогда
		Группы.Вставить("ГруппаНазначитьИсполнителя", Истина);	
	
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.НазначениеИсполнителя Тогда
		Группы.Вставить("ГруппаВыполнитьРаботы", Истина);	
	
	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВыполнениеРабот Тогда
		//Для каждого Кнопка Из ЦветаКнопок Цикл
		//	ЦветаКнопок.Вставить(Кнопка.Ключ, "ЦветСиний");
		//КонецЦикла; 
	КонецЕсли;
	
	Для каждого Группа Из Группы Цикл
		Элементы[Группа.Ключ].Видимость = Группа.Значение;
		ИмяКнопки = СтрЗаменить(Группа.Ключ, "Группа", "");
		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(,12,Истина);
	КонецЦикла; 
	
КонецПроцедуры
 
//&НаСервере
//Процедура РаскраситьКнопки()
//	ЦветаКнопок = Новый Структура("ИсполнитьПоручение, ПодготовитьЗапросДопИнформации, ЗапроситьДопИнформацию,
//	|ЗапроситьДопИнформациюСамостоятельно, ИсполнитьПоручениеДопИнф, ПодготовитьДоговор,
//	|НазначитьИсполнителя, ВыполнитьРаботы"); 
//	
//	// Доступные цвета
//	// ЦветЗеленый - разрешено нажать кнопку
//	// ЦветСиний - Кнопка уже нажималась, запрет
//	// ЦветКрасный - Кнопка пока не доступна, запрет
//	
//	Если Не ЗначениеЗаполнено(Состояние) Тогда
//		Если ЗначениеЗаполнено(Поручение) Тогда
//			ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветЗеленый");	
//		КонецЕсли;
//		
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.Зарегистрировано Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветЗеленый");	
//		
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВРаботе Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветЗеленый");	
//		ЦветаКнопок.Вставить("ПодготовитьДоговор", "ЦветЗеленый");
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветЗеленый");	
//		
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.Возвращено Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ПодготовкаЗапросаИнформации Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформацию", "ЦветЗеленый");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветЗеленый");	
//	
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ЗапросИнформации Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформацию", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ИсполнитьПоручениеДопИнф", "ЦветЗеленый");	
//	
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВРаботеДопИнформация Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформацию", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ИсполнитьПоручениеДопИнф", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьДоговор", "ЦветЗеленый");	
//	
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.СоставлениеДоговора
//		или Состояние = Перечисления.мСостоянияПоручения.ДоговорСоставлен Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформацию", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ИсполнитьПоручениеДопИнф", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьДоговор", "ЦветСиний");	
//		ЦветаКнопок.Вставить("НазначитьИсполнителя", "ЦветЗеленый");	
//	
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.НазначениеИсполнителя Тогда
//		ЦветаКнопок.Вставить("ИсполнитьПоручение", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьЗапросДопИнформации", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформацию", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ЗапроситьДопИнформациюСамостоятельно", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ИсполнитьПоручениеДопИнф", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ПодготовитьДоговор", "ЦветСиний");	
//		ЦветаКнопок.Вставить("НазначитьИсполнителя", "ЦветСиний");	
//		ЦветаКнопок.Вставить("ВыполнитьРаботы", "ЦветЗеленый");	
//	
//	ИначеЕсли Состояние = Перечисления.мСостоянияПоручения.ВыполнениеРабот Тогда
//		Для каждого Кнопка Из ЦветаКнопок Цикл
//			ЦветаКнопок.Вставить(Кнопка.Ключ, "ЦветСиний");
//		КонецЦикла; 
//	КонецЕсли;
//	
//	Для каждого Кнопка Из ЦветаКнопок Цикл
//		УстановитьЦветКнопки(Кнопка);
//	КонецЦикла; 
//КонецПроцедуры
 
//&НаСервере
//Процедура УстановитьЦветКнопки(Кнопка)
//	ИмяКнопки = Кнопка.Ключ;
//	ЦветКнопки = Кнопка.Значение;
//	
//	Если Не ЗначениеЗаполнено(ЦветКнопки) Тогда
//		ЦветКнопки = БиблиотекаКартинок.ЦветКрасный;
//	Иначе	
//		ЦветКнопки = БиблиотекаКартинок[ЦветКнопки];
//	КонецЕсли; 
//	
//	Элементы[ИмяКнопки].Картинка = ЦветКнопки;
//	Элементы[ИмяКнопки].Отображение = ОтображениеКнопки.КартинкаИТекст;
//	
//	Если ЦветКнопки = БиблиотекаКартинок.ЦветЗеленый Тогда
//		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(,12,Истина);
//	Иначе
//		Элементы[ИмяКнопки].Шрифт = Новый Шрифт(,12,Ложь);
//	КонецЕсли; 
//КонецПроцедуры

//&НаСервере
//Функция Запрет(ИмяКнопки)
//	ЦветКнопки = Элементы[ИмяКнопки].Картинка;
//	Если ЦветКнопки = БиблиотекаКартинок.ЦветЗеленый Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат Истина;
//	КонецЕсли; 
//КонецФункции
 
&НаКлиенте
Процедура УправлениеДиалогом()
	Состояние = мРаботаСДоговорами.СостояниеПоручения(Поручение);
	УстановитьВидимостьКнопок();
	//РаскраситьКнопки();
КонецПроцедуры


#КонецОбласти

 



&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	//ЗапомнитьОперацию();
	УправлениеДиалогом();
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
КонецПроцедуры

&НаСервере
Функция УстановитьДатуРегистрацииДела(Дело, Дата) 
	Если ЗначениеЗаполнено(Дело) Тогда
		Попытка
			ДелоОбъект = Дело.ПолучитьОбъект();
			ДелоОбъект.ДатаРегистрации = Дата;
			ДелоОбъект.Записать();
			Возврат Истина;
		Исключение
		КонецПопытки; 
	КонецЕсли; 
	Возврат Ложь;
КонецФункции 

&НаКлиенте
Функция ПолучитьЗадачуСогласования(Дело, Проверяющий)
	ЗадачаСогласования = Неопределено;
	//МассивЗадач = мПроверкаДела.ПолучитьМассивЗадачПроверкиДела(Дело, Проверяющий);
	//Для й=0 По МассивЗадач.Количество()-1 Цикл
	//	ТочкаМаршрутаИмя = ПолучитьИмяТочкиМаршрута(МассивЗадач[й]);
	//	Если ТочкаМаршрутаИмя = "Согласовать" Тогда
	//		ЗадачаСогласования = МассивЗадач[й];
	//		Прервать;
	//	КонецЕсли; 
	//КонецЦикла; 
	Возврат ЗадачаСогласования;
КонецФункции
 
&НаКлиенте
Процедура ОбработкаОжидания()

	//ЭтаФорма.ТекущийЭлемент = Элементы.Штрихкод;

	//Если Не ЗначениеЗаполнено(Штрихкод) Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//Если Операция = "Исполнить поручение" Тогда
	//	ИсполнитьПоручение();		
	//	
	//ИначеЕсли Операция = "Подготовить запрос доп. информации" Тогда
	//	ПодготовитьЗапросИнформации();
	//	
	//ИначеЕсли Операция = "Запросить доп. информацию" Тогда
	//	ЗапроситьИнформацию();
	//	
	//ИначеЕсли Операция = "Исполнить поручение (доп. инф.)" Тогда
	//	ИсполнитьПоручениеДопИнф();
	//	
	//ИначеЕсли Операция = "Вернуть поручение" Тогда
	//	ВернутьПоручение();
	//	
	//ИначеЕсли Операция = "Подготовить договор" Тогда
	//	ПодготовитьДоговор();
	//	
	//ИначеЕсли Операция = "Назначить исполнителя" Тогда
	//	НазначитьИсполнителя();
	//	
	//КонецЕсли;
	//
	////Штрихкод = "";	  
	//ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина); 
КонецПроцедуры 


&НаСервереБезКонтекста
Функция ПолучитьНомерДела(Дело)
	Возврат Дело.РегистрационныйНомер;
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьРеквизитыИсхДок(ИсхДок, Дата, Способ=Неопределено) 
	Если ЗначениеЗаполнено(ИсхДок) Тогда
		Попытка
			ИсхДокОбъект = ИсхДок.ПолучитьОбъект();
			Получатели = ИсхДокОбъект.Получатели;
			Для каждого Стр Из Получатели Цикл
				Если ЗначениеЗаполнено(Способ) Тогда
					Стр.СпособОтправки = Способ;
				КонецЕсли; 
				// Если дата отправки сегодня, то запись со временем, если завтра, то без времени
				Сегодня = НачалоДня(ТекущаяДата());
				ДеньОтправки = НачалоДня(Дата);
				Если ДеньОтправки <= Сегодня Тогда
					Стр.ДатаОтправки = Дата;
				ИначеЕсли ДеньОтправки > Сегодня Тогда
					Стр.ДатаОтправки = ДеньОтправки;	
				КонецЕсли; 
				Стр.Отправлен = Истина;
			КонецЦикла; 
			ИсхДокОбъект.Записать();
			Возврат Истина;
		Исключение
		КонецПопытки; 
	КонецЕсли; 
	Возврат Ложь;
КонецФункции 

&НаСервереБезКонтекста
Функция ОтметитьВозвратВЖурналеПередачи(ИсхДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Период КАК Период,
		|	ЖурналПередачиДокументов.Документ КАК Документ,
		|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", ИсхДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		МенеджерЗаписи = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ 		= Выборка.Документ;
		МенеджерЗаписи.ТипЭкземпляра 	= Выборка.ТипЭкземпляра;
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.НомерЭкземпляра 	= Выборка.НомерЭкземпляра;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Возвращен = Истина;
		МенеджерЗаписи.ДатаВозврата = ТекущаяДата();
		МенеджерЗаписи.Записать();
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ОтметитьПередачуВЖурналеПередачи(СтруктураПараметров)
	ИсхДок = СтруктураПараметров.Документ;
	Пользователь = СтруктураПараметров.Пользователь;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Период КАК Период,
		|	ЖурналПередачиДокументов.Документ КАК Документ,
		|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", ИсхДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Документ уже был передан - отмечаем возврат и снова делаем передачу 
		МенеджерЗаписи = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Документ 		= Выборка.Документ;
		МенеджерЗаписи.ТипЭкземпляра 	= Выборка.ТипЭкземпляра;
		МенеджерЗаписи.Период 			= Выборка.Период;
		МенеджерЗаписи.НомерЭкземпляра 	= Выборка.НомерЭкземпляра;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Возвращен = Истина;
		МенеджерЗаписи.ДатаВозврата = ТекущаяДата();
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// Передача
	
	НаборЗаписей = РегистрыСведений.ЖурналПередачиДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ИсхДок);
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
	НаборЗаписей.Прочитать();
	
	НовЗап = НаборЗаписей.Добавить();
	НовЗап.Документ = ИсхДок;
	НовЗап.Период = ТекущаяДата();
	НовЗап.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал;
	НовЗап.НомерЭкземпляра = 1;
	НовЗап.Пользователь = Пользователь;
	НовЗап.СрокВозврата = ТекущаяДата() + 15*24*3600;
	
	НаборЗаписан = Ложь;
	Попытка
		НаборЗаписей.Записать();
		НаборЗаписан = Истина;
	Исключение
	КонецПопытки; 
	Возврат НаборЗаписан;		
КонецФункции 






