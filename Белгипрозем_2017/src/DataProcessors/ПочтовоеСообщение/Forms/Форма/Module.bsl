&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыОтправки = ПараметрыОтправкиПочтовогоСообщенияВызовСервера.Создать();
	
	ЗаполнитьРеквизитыФормы(Параметры.Объекты);
	
	Если Параметры.Свойство("СписокФайлов") Тогда
		
		ВложенияВПисьмо = Параметры.СписокФайлов;
		
		// помечаем те вложения, которые являются путями к файлам на клиенте
		Для Каждого ОписаниеВложение из ВложенияВПисьмо Цикл
			
			Если ТипЗнч(ОписаниеВложение.Значение) = Тип("Строка") Тогда
				Если ЭтоАдресВременногоХранилища(ОписаниеВложение.Значение) Тогда
					
					СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеВложение.Представление);
					
					ВложенияСтрока = Вложения.Добавить();
					
					ВложенияСтрока.ИмяФайла = СтруктураИмениФайла.Имя;
					ВложенияСтрока.ИндексКартинки = 
						ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(СтруктураИмениФайла.Расширение);
						
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеВложение.Значение);
					ВложенияСтрока.Размер = ДвоичныеДанные.Размер();
					
					ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ВложенияСтрока.Размер);
					ВложенияСтрока.ПометкаУдаления = Ложь;
					ВложенияСтрока.ИмяФайлаНаДиске = "";
					ВложенияСтрока.Редактирует = Неопределено;
					ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
					ВложенияСтрока.Представление = СтруктураИмениФайла.ИмяБезРасширения;
					ВложенияСтрока.Выбран = Истина;
					
					ВложенияСтрока.Расположение = "ВременноеХранилище";
					ВложенияСтрока.Ссылка = Неопределено;
					ВложенияСтрока.Адрес = ОписаниеВложение.Значение;
					ВложенияСтрока.ИмяФайла = ОписаниеВложение.Представление;
					
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Если Параметры.Свойство("Кому") Тогда
		Кому = Параметры.Кому;
	КонецЕсли;	
	
	СохранениеВводимыхЗначений.ЗагрузитьСписокВыбора(ЭтаФорма, "Кому");
	СохранениеВводимыхЗначений.ЗагрузитьСписокВыбора(ЭтаФорма, "Копия");
	СохранениеВводимыхЗначений.ЗагрузитьСписокВыбора(ЭтаФорма, "СкрытаяКопия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Объекты)
	
	// Установим профиль.
	Профиль = ПараметрыОтправкиПочтовогоСообщения.ПолучитьПрофиль(ПараметрыОтправки);
	Если Параметры.Свойство("ВебКлиент") И Параметры.ВебКлиент = Истина И ТипЗнч(Профиль) = Тип("Строка") Тогда
		Профиль = Неопределено;
	КонецЕсли;
	
	// Заполним список выбора профиля.
	Элементы.Профиль.СписокВыбора.ЗагрузитьЗначения(
		ПараметрыОтправкиПочтовогоСообщения.ПолучитьСписокДоступныхПрофилей(ПараметрыОтправки));
		
	УстановитьЗаголовокКомандыОтправить();
	
	ПрикладыватьФайлВзаимодействияСЭД = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ПрикладыватьФайлВзаимодействияСЭД");
	
	Если ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Да
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Объекты[0];
	ИначеЕсли ПрикладыватьФайлВзаимодействияСЭД = Перечисления.ДаНетСпрашивать.Спрашивать
		И Объекты.Количество() = 1
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объекты[0]) Тогда
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Истина;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Истина;
		ОбъектВзаимодействияСЭД = Объекты[0];
	Иначе
		ПриложитьКПисьмуСообщениеВзаимодействияСЭД = Ложь;
		Элементы.ПриложитьКПисьмуСообщениеВзаимодействияСЭД.Доступность = Ложь;
		ОбъектВзаимодействияСЭД = Неопределено;
	КонецЕсли;
	
	// Формирование таблицы вложений
	ДобавитьФайлыОбъектов(Объекты);
	
	// Заполнение получателей из переданных объектов
	ЗаполнитьПолучателей();
	
	// Формирование текста письма
	СформироватьТекстПисьма();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыОбъектов(Объекты)
	
	Для каждого Объект Из Объекты Цикл
		ДобавитьОбъект(ТаблицаФайлов, Объект);
	КонецЦикла;
	ПересчитатьРазмерВложений();
	
	ДобавитьВложенияИзДерева(ТаблицаФайлов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияИзДерева(ДеревоЭлементы)
	
	Для каждого ДеревоСтрока Из ДеревоЭлементы Цикл
		Если Не ДеревоСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДеревоСтрока.ЭтоФайл Тогда
			ВложенияСтрока = Вложения.Добавить();
			
			ВложенияСтрока.ИмяФайла = "";
			ВложенияСтрока.ИндексКартинки = ДеревоСтрока.ИндексКартинки;
			ВложенияСтрока.Размер = ДеревоСтрока.Размер;
			ВложенияСтрока.Расположение = "Ссылка";
			ВложенияСтрока.РазмерПредставление = РаботаСоСтроками.ПолучитьРазмерСтрокой(ДеревоСтрока.Размер);
			ВложенияСтрока.ПометкаУдаления = Ложь;
			ВложенияСтрока.ИмяФайлаНаДиске = "";
			ВложенияСтрока.Редактирует = Неопределено;
			ВложенияСтрока.РедактируетТекущийПользователь = Ложь;
			ВложенияСтрока.Представление = ДеревоСтрока.Наименование;
			ВложенияСтрока.Адрес = Неопределено;
			ВложенияСтрока.Выбран = Истина;
			Если ДеревоСтрока.ЭтоПодпись Тогда
				ВложенияСтрока.Расположение = "ВременноеХранилище";
				ВложенияСтрока.Ссылка = Неопределено;
				ВложенияСтрока.Адрес = ДеревоСтрока.Подпись;
				ВложенияСтрока.ИмяФайла = ДеревоСтрока.ИмяФайла;
			Иначе
				ВложенияСтрока.Расположение = "Ссылка";
				ВложенияСтрока.Ссылка = ДеревоСтрока.Ссылка;
				ВложенияСтрока.Адрес = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВложенияИзДерева(ДеревоСтрока.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъект(Корень, Объект, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(Объект) Тогда
		ФайлыИнфо = ПолучитьИнформациюОФайлах(Новый Структура("Ссылка", Объект));
		ДобавитьФайл(Корень, ФайлыИнфо[0]);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоКомплект(Объект) Тогда
			ДобавитьКомплект(Корень, Объект);
		Иначе
			ДобавитьДокумент(Корень, Объект, ДобавлятьДокументыТолькоСФайлами);
		КонецЕсли;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Объект) Тогда
		ДобавитьМероприятие(Корень, Объект);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроект(Объект) Тогда
		ДобавитьПроект(Корень, Объект);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоПроектнаяЗадача(Объект) Тогда
		ДобавитьПроектнуюЗадачу(Корень, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплект(Корень, Ссылка)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Строка(Ссылка));
	ПараметрыЗаполнения.Вставить("Ссылка", Ссылка);
	СтрокаКомплект = ТаблицаФайловДобавитьСтроку(Корень, "Комплект", ПараметрыЗаполнения);
	КомплектующиеИнфо = РаботаСКомплектамиДокументовСервер.ПолучитьИнформациюОКомплектующих(Ссылка, Ложь);
	Для каждого Элемент Из КомплектующиеИнфо.Элементы Цикл
		ДобавитьОбъект(СтрокаКомплект, Элемент, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокумент(Корень, Ссылка, ДобавлятьДокументыТолькоСФайлами = Ложь)
	
	ФайлыДокументаИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Ссылка, Ложь));
	Если ДобавлятьДокументыТолькоСФайлами И ФайлыДокументаИнфо.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаДокумент = ТаблицаФайловДобавитьСтроку(Корень, "Документ", Ссылка);
	Для каждого ФайлИнфо Из ФайлыДокументаИнфо Цикл
		ДобавитьФайл(СтрокаДокумент, ФайлИнфо);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайл(Корень, ФайлИнфо)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", ФайлИнфо.Наименование);
	ПараметрыЗаполнения.Вставить("Ссылка", ФайлИнфо.Ссылка);
	ПараметрыЗаполнения.Вставить("Размер", ФайлИнфо.Размер);
	ПараметрыЗаполнения.Вставить("Расширение", ФайлИнфо.Расширение);
	СтрокаФайл = ТаблицаФайловДобавитьСтроку(Корень, "Файл", ПараметрыЗаполнения);
	
	ОтправлятьПодписиЭППоПочте = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ОтправлятьПодписиЭППоПочте");
	
	Если ОтправлятьПодписиЭППоПочте = Перечисления.ДействияПриОтправкеПоПочтеЭП.Спрашивать Тогда
		ЭПФайлаИнфо = ПолучитьИнформациюОбЭПФайла(ФайлИнфо.Ссылка);
		Для каждого ЭПИнфо Из ЭПФайлаИнфо Цикл
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЭП: %1 - %2'"),
				ЭПИнфо.Ссылка.Владелец.Наименование,
				ЭПИнфо.Наименование);
			
			ДобавитьПодпись(
				СтрокаФайл,
				Наименование,
				ЭПИнфо.Подпись.Получить(),
				ЭПИнфо.Размер);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМероприятие(Корень, Ссылка)
	
	ФайлыМероприятияИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Ссылка, Ложь));
	СтрокаМероприятие = ТаблицаФайловДобавитьСтроку(Корень, "Мероприятие", Ссылка);
	Для каждого ФайлИнфо Из ФайлыМероприятияИнфо Цикл
		ДобавитьФайл(СтрокаМероприятие, ФайлИнфо);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроект(Корень, Ссылка)
	
	СтрокаПроект = ТаблицаФайловДобавитьСтроку(Корень, "Проект", Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроектнуюЗадачу(Корень, Ссылка)
	
	СтрокаПроектнаяЗадача = ТаблицаФайловДобавитьСтроку(Корень, "ПроектнаяЗадача", Ссылка);
	
	Предмет = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Предмет");
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(Предмет) Тогда
			ФайлыИнфо = ПолучитьИнформациюОФайлах(Новый Структура("Ссылка", Предмет));
		Иначе
			ФайлыИнфо = ПолучитьИнформациюОФайлах(Новый Структура("ВладелецФайла, ПометкаУдаления", Предмет, Ложь));
		КонецЕсли;
		Для Каждого ФайлИнфо Из ФайлыИнфо Цикл
			ДобавитьФайл(СтрокаПроектнаяЗадача, ФайлИнфо);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодпись(Корень, Наименование, Подпись, Размер)
	
	Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование, "");
	ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
		Наименование,
		ПараметрыОтправкиПочтовогоСообщения.Свойство(ПараметрыОтправки, "РасширениеДляФайловПодписи"));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Наименование", Наименование);
	ПараметрыЗаполнения.Вставить("Подпись", ПоместитьВоВременноеХранилище(Подпись, УникальныйИдентификатор));
	ПараметрыЗаполнения.Вставить("Размер", Размер);
	ПараметрыЗаполнения.Вставить("ИмяФайла", ИмяФайла);
	
	СтрокаЭП = ТаблицаФайловДобавитьСтроку(Корень, "Подпись", ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаФайловДобавитьСтроку(Корень, ВидСтроки, ПараметрыЗаполнения)
	
	ТаблицаФайловСтрока = Корень.ПолучитьЭлементы().Добавить();
	ТаблицаФайловСтрока.Выбран = Истина;
	ТаблицаФайловСтрока.ЭтоДокумент = Ложь;
	ТаблицаФайловСтрока.ЭтоФайл = Ложь;
	ТаблицаФайловСтрока.ЭтоПодпись = Ложь;
	ТаблицаФайловСтрока.ЭтоМероприятие = Ложь;
	ТаблицаФайловСтрока.ЭтоПроект = Ложь;
	ТаблицаФайловСтрока.ЭтоПроектнаяЗадача = Ложь;
	
	Если ВидСтроки = "Комплект" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 2;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Документ" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоДокумент = Истина;
	ИначеЕсли ВидСтроки = "Файл" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ПараметрыЗаполнения.Расширение);
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
	ИначеЕсли ВидСтроки = "Подпись" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.ИмяФайла = ПараметрыЗаполнения.ИмяФайла;
		ТаблицаФайловСтрока.Ссылка = Неопределено;
		ТаблицаФайловСтрока.ИндексКартинки = 4; 
		ТаблицаФайловСтрока.Подпись = ПараметрыЗаполнения.Подпись;
		ТаблицаФайловСтрока.Размер = ПараметрыЗаполнения.Размер;
		ТаблицаФайловСтрока.ЭтоФайл = Истина;
		ТаблицаФайловСтрока.ЭтоПодпись = Истина;
	ИначеЕсли ВидСтроки = "Мероприятие" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоМероприятие = Истина;
	ИначеЕсли ВидСтроки = "Проект" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоПроект = Истина;
	ИначеЕсли ВидСтроки = "ПроектнаяЗадача" Тогда
		ТаблицаФайловСтрока.Наименование = ПараметрыЗаполнения.Наименование;
		ТаблицаФайловСтрока.Ссылка = ПараметрыЗаполнения.Ссылка;
		ТаблицаФайловСтрока.ИндексКартинки = 0;
		ТаблицаФайловСтрока.Размер = 0;
		ТаблицаФайловСтрока.ЭтоПроектнаяЗадача = Истина;
	КонецЕсли;
	
	ПересчитатьРазмерКб(ТаблицаФайловСтрока);
	
	Возврат ТаблицаФайловСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолучателей()
	
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьПолучателейИзВложения(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПолучателейИзВложения(ЭлементДерева)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭлементДерева.ЭтоДокумент Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ЭлементДерева.Ссылка) Тогда
			ДокументИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭлементДерева.Ссылка, "Отправитель, Подписал");
			Если ЗначениеЗаполнено(ДокументИнфо.Отправитель)
				И ТипЗнч(ДокументИнфо.Отправитель) = Тип("СправочникСсылка.Корреспонденты") Тогда
				ДобавитьПолучателя(ДокументИнфо.Отправитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументИнфо.Подписал) Тогда
				ДобавитьПолучателя(ДокументИнфо.Подписал);
			КонецЕсли;
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ЭлементДерева.Ссылка) Тогда
			ПолучателиИнфо = ПолучитьИнформациюОПолучателяхИсходящегоДокумента(ЭлементДерева.Ссылка);
			Для каждого ПолучательИнфо Из ПолучателиИнфо Цикл
				Если ЗначениеЗаполнено(ПолучательИнфо.Адресат) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Адресат);
				ИначеЕсли ЗначениеЗаполнено(ПолучательИнфо.Получатель) Тогда
					ДобавитьПолучателя(ПолучательИнфо.Получатель);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(ЭлементДерева.Ссылка) Тогда
			Корреспондент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЭлементДерева.Ссылка, "Корреспондент");
			Если ЗначениеЗаполнено(Корреспондент) Тогда
				ДобавитьПолучателя(Корреспондент);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭлементДерева.ЭтоМероприятие Тогда
		Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ЭлементДерева.Ссылка);
		Для Каждого УчастникиСтрока Из Участники Цикл
			Если ЗначениеЗаполнено(УчастникиСтрока.Исполнитель)
				И ТипЗнч(УчастникиСтрока.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				ДобавитьПолучателя(УчастникиСтрока.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЭлементДерева.ЭтоПроект Тогда
		Для Каждого ПроектнаяКомандаСтрока Из ЭлементДерева.Ссылка.ПроектнаяКоманда Цикл
			Если ЗначениеЗаполнено(ПроектнаяКомандаСтрока.Исполнитель) Тогда
				ДобавитьПолучателя(ПроектнаяКомандаСтрока.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЭлементДерева.ЭтоПроектнаяЗадача Тогда
		ПолучателиИнфо = ПолучитьИнформациюОбИсполнителяхПроектнойЗадачи(ЭлементДерева.Ссылка);
		Для каждого ПолучательИнфо Из ПолучателиИнфо Цикл
			Если ЗначениеЗаполнено(ПолучательИнфо.Исполнитель) Тогда
				ДобавитьПолучателя(ПолучательИнфо.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОПолучателяхИсходящегоДокумента(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсходящиеДокументыПолучатели.Адресат,
		|	ИсходящиеДокументыПолучатели.Получатель
		|ИЗ
		|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
		|ГДЕ
		|	ИсходящиеДокументыПолучатели.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОбИсполнителяхПроектнойЗадачи(Ссылка)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроектныеЗадачиИсполнители.Исполнитель
		|ИЗ
		|	Справочник.ПроектныеЗадачи.Исполнители КАК ПроектныеЗадачиИсполнители
		|ГДЕ
		|	ПроектныеЗадачиИсполнители.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(ПроектныеЗадачиИсполнители.Исполнитель) = ТИП(Справочник.Пользователи)");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ДобавитьПолучателя(Получатель)
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПочтовогоАдреса = ПолучитьАдресДляОтправкиЛегкойПочтой(Получатель);
	
	Если Найти(Кому, ПредставлениеПочтовогоАдреса) = 0 Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Кому, "; ", ПредставлениеПочтовогоАдреса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДляОтправкиЛегкойПочтой(Получатель)
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица)";
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Корреспонденты") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКорреспондента)";
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Организации") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)";
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)";
		
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица)";
			
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.АдресЭП КАК ПочтовыйАдрес,
			|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформация.Ссылка) КАК Представление
			|ИЗ
			|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Ссылка
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailРоли)";
			
	Иначе
		ВызватьИсключение НСтр("ru = 'В функцию ПолучитьАдресДляОтправкиЛегкойПочтой передан некорректный параметр'");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Получатель);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРезультата = РезультатЗапроса.Выгрузить()[0];
	Результат = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(
		Строка(СтрокаРезультата.Представление),
		СокрЛП(СтрокаРезультата.ПочтовыйАдрес));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьТекстПисьма()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Тема", "");
	Контекст.Вставить("СодержаниеДокументов", "");
	Контекст.Вставить("ТекстОснований", "");
	Контекст.Вставить("КоличествоОснований", 0);
	Для каждого ЭлементДерева Из ТаблицаФайлов.ПолучитьЭлементы() Цикл
		ДобавитьОписаниеВложения(ЭлементДерева, Контекст);
	КонецЦикла;
	
	Содержание = "";
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		Контекст.СодержаниеДокументов);
	
	ОтправкаПодписьСообщения = ПараметрыОтправкиПочтовогоСообщения.Свойство(
		ПараметрыОтправки,
		"ОтправкаПодписьСообщения");
	
	ДобавитьЗначениеКСтрокеЧерезРазделитель(
		Содержание,
		Символы.ПС + Символы.ПС,
		ОтправкаПодписьСообщения);
	
	Если Контекст.КоличествоОснований > 0 Тогда
		Если Контекст.КоличествоОснований = 1 Тогда
			Тема = Контекст.Тема;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основание:'"));
		Иначе
			ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, НСтр("ru = 'Основания:'"));
		КонецЕсли;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Содержание, Символы.ПС + Символы.ПС, Контекст.ТекстОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОписаниеВложения(ЭлементДерева, Контекст)
	
	Если Не ЭлементДерева.Выбран Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПредставлениеОбъекта = ПолучитьПредставлениеОбъекта(ЭлементДерева.Ссылка);
	Если ЭлементДерева.ЭтоДокумент Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СокрЛП(ЭлементДерева.Ссылка.Содержание));
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		
	ИначеЕсли ЭлементДерева.ЭтоФайл Тогда
		Если Не ЭлементДерева.ЭтоПодпись Тогда
			Контекст.Тема = ПредставлениеОбъекта;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС + Символы.ПС,
				ПредставлениеОбъекта);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.ТекстОснований,
				Символы.ПС,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
			
			Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		КонецЕсли;
		
	ИначеЕсли ЭлементДерева.ЭтоМероприятие Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		МероприятиеИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			ЭлементДерева.Ссылка,
			"Описание, ДатаНачала, ДатаОкончания, МестоПроведения");
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			МероприятиеИнфо.Описание);
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начало: %1'"),
				Формат(МероприятиеИнфо.ДатаНачала, "ДФ='дд.ММ.гг ЧЧ:мм'")));
				
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Окончание: %1'"),
				Формат(МероприятиеИнфо.ДатаОкончания, "ДФ='дд.ММ.гг ЧЧ:мм'")));
				
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Место проведения: %1'"),
				Формат(МероприятиеИнфо.МестоПроведения, "ДФ='дд.ММ.гг ЧЧ:мм'")));
				
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		
	ИначеЕсли ЭлементДерева.ЭтоПроект Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ПроектИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			ЭлементДерева.Ссылка,
			"Описание, Руководитель, Заказчик");
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			ПроектИнфо.Описание);
			
		Если ЗначениеЗаполнено(ПроектИнфо.Руководитель) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Руководитель: %1'"),
					ПроектИнфо.Руководитель));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроектИнфо.Заказчик) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Заказчик: %1'"),
					ПроектИнфо.Заказчик));
		КонецЕсли;
		
		// Проектная команда
		ПроектнаяКоманда = ЭлементДерева.Ссылка.ПроектнаяКоманда;
		Если ПроектнаяКоманда.Количество() > 0 Тогда
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				НСтр("ru = 'Проектная команда:'"));
			
			Для каждого ПроектнаяКомандаСтрока Из ПроектнаяКоманда Цикл
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					Символы.ПС,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1: ",
					ПроектнаяКомандаСтрока.Исполнитель));
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль в проекте: %1'"),
					ПроектнаяКомандаСтрока.РольВПроекте));
				
			КонецЦикла;
		КонецЕсли;
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		
	ИначеЕсли ЭлементДерева.ЭтоПроектнаяЗадача Тогда
		Контекст.Тема = ПредставлениеОбъекта;
		ПроектнаяЗадачаИнфо = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
			ЭлементДерева.Ссылка,
			"Описание, Владелец, 
			| ТекущийПланТрудозатраты, ТекущийПланЕдиницаТрудозатрат, ЕдиницаТрудозатратФакт");
			
		// добавление фактических трудозатрат
		ФактическиеТрудозатраты = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(
			ЭлементДерева.Ссылка);
		ПроектнаяЗадачаИнфо.Вставить("ТрудозатратыФакт", ФактическиеТрудозатраты);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			ПредставлениеОбъекта);
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			ПроектнаяЗадачаИнфо.Описание);
			
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.СодержаниеДокументов,
			Символы.ПС + Символы.ПС,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проект: %1'"),
				ПроектнаяЗадачаИнфо.Владелец));
				
		ДанныеПроектнойЗадачи = РаботаСпроектами.ПолучитьДанныеПроектнойЗадачи(ЭлементДерева.Ссылка);		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.ТекущийПланНачало)
			Или ЗначениеЗаполнено(ДанныеПроектнойЗадачи.ТекущийПланОкончание)
			Или ЗначениеЗаполнено(ПроектнаяЗадачаИнфо.ТекущийПланТрудозатраты) Тогда
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					Символы.ПС + Символы.ПС,
					НСтр("ru = 'Текущий план:'"));
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Начало: %1'"),
						ДанныеПроектнойЗадачи.ТекущийПланНачало));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Окончание: %1'"),
						ДанныеПроектнойЗадачи.ТекущийПланОкончание));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Трудозатраты: %1'"),
						ПроектнаяЗадачаИнфо.ТекущийПланТрудозатраты));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					" ",
					ПроектнаяЗадачаИнфо.ТекущийПланЕдиницаТрудозатрат);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПроектнойЗадачи.НачалоФакт)
			Или ЗначениеЗаполнено(ДанныеПроектнойЗадачи.ОкончаниеФакт)
			Или ЗначениеЗаполнено(ПроектнаяЗадачаИнфо.ТрудозатратыФакт) Тогда
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				НСтр("ru = 'Факт:'"));
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				"  ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Начало: %1'"),
					ДанныеПроектнойЗадачи.НачалоФакт));
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				"  ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Окончание: %1'"),
					ДанныеПроектнойЗадачи.ОкончаниеФакт));
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				"  ",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Трудозатраты: %1'"),
					ПроектнаяЗадачаИнфо.ТрудозатратыФакт));
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				" ",
				ПроектнаяЗадачаИнфо.ЕдиницаТрудозатратФакт);
			
		КонецЕсли;
		
		// Дополнительные реквизиты
		ДополнительныеРеквизиты = УправлениеСвойствами.ПолучитьЗначенияСвойств(ЭлементДерева.Ссылка);
		Если ДополнительныеРеквизиты.Количество() > 0 Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				НСтр("ru = 'Дополнительные реквизиты:'"));
			Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1: ",
						ДополнительныйРеквизит.Свойство));
						
					ДобавитьЗначениеКСтрокеЧерезРазделитель(
						Контекст.СодержаниеДокументов,
						" ",
						ДополнительныйРеквизит.Значение);
			КонецЦикла;
		КонецЕсли;
		
		// Исполнители
		СписокИсполнителей = РаботаСПроектами.ПолучитьФактическиеТрудозатратыИсполнителейПроектнойЗадачи(
			ЭлементДерева.Ссылка);	
		Исполнители = ЭлементДерева.Ссылка.Исполнители;
		Если Исполнители.Количество() > 0 Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Контекст.СодержаниеДокументов,
				Символы.ПС + Символы.ПС,
				НСтр("ru = 'Исполнители:'"));
			Для каждого ИсполнительСтрока Из Исполнители Цикл
				
				ТрудозатратыИсполнителя = 0;
				Для Каждого Участник Из СписокИсполнителей Цикл
					Если Участник.Исполнитель = ИсполнительСтрока.Исполнитель
						И (Участник.ОсновнойОбъектАдресации = ИсполнительСтрока.ОсновнойОбъектАдресации
							ИЛИ
							НЕ ЗначениеЗаполнено(Участник.ОсновнойОбъектАдресации)
							И НЕ ЗначениеЗаполнено(ИсполнительСтрока.ОсновнойОбъектАдресации))
						И (Участник.ДополнительныйОбъектАдресации = ИсполнительСтрока.ДополнительныйОбъектАдресации 
							ИЛИ
							НЕ ЗначениеЗаполнено(Участник.ДополнительныйОбъектАдресации)
							И НЕ ЗначениеЗаполнено(ИсполнительСтрока.ДополнительныйОбъектАдресации)) Тогда
						
						ТрудозатратыИсполнителя = Участник.ТрудозатратыФакт;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					Символы.ПС,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1: ",
						ИсполнительСтрока.Исполнитель));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Плановые трудозатраты: %1'"),
						ИсполнительСтрока.ТекущийПланТрудозатраты));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					" ",
					ПроектнаяЗадачаИнфо.ТекущийПланЕдиницаТрудозатрат);
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					"  ",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Фактические трудозатраты: %1'"),
						ТрудозатратыИсполнителя));
						
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Контекст.СодержаниеДокументов,
					" ",
					ПроектнаяЗадачаИнфо.ЕдиницаТрудозатратФакт);

			КонецЦикла;
		КонецЕсли;
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Контекст.ТекстОснований,
			Символы.ПС,
			ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(ЭлементДерева.Ссылка));
		
		Контекст.КоличествоОснований = Контекст.КоличествоОснований + 1;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Возврат Строка(Объект) + " (" + Объект.Метаданные().ПредставлениеОбъекта + ")"
	
КонецФункции

&НаСервере
Процедура ПересчитатьРазмерКб(ТаблицаФайловСтрока)
	
	Если ТаблицаФайловСтрока.Выбран Тогда
		Если ТаблицаФайловСтрока.Размер = 0 Тогда
			ТаблицаФайловСтрока.РазмерКб = 0;
		Иначе
			ТаблицаФайловСтрока.РазмерКб = Макс(1, Окр(ТаблицаФайловСтрока.Размер / 1024));
		КонецЕсли;
	Иначе
		ТаблицаФайловСтрока.РазмерКб = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРазмерВложений()
	
	Контекст = Новый Структура("ИтогоРазмерКб", 0);
	ОбойтиДерево(ТаблицаФайлов, Контекст, "ПересчетРазмераВложений");
	ИтогоРазмерКб = Контекст.ИтогоРазмерКб;
	
КонецПроцедуры

&НаСервере
Функция ПересчетРазмераВложений(ЭлементДерева, Контекст)
	
	ПересчитатьРазмерКб(ЭлементДерева);
	Контекст.ИтогоРазмерКб = Контекст.ИтогоРазмерКб + ЭлементДерева.РазмерКб;
	
КонецФункции

&НаСервере
Процедура ОбойтиДерево(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДерево(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДеревоНаКлиенте(Корень, Контекст, ИмяПроцедуры)
	
	Для каждого ЭлементДерева Из Корень.ПолучитьЭлементы() Цикл
		Результат = Вычислить(ИмяПроцедуры + "(ЭлементДерева, Контекст)");
		ОбойтиДеревоНаКлиенте(ЭлементДерева, Контекст, ИмяПроцедуры);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОФайлах(Отбор)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|
		|{ГДЕ
		|	Файлы.ВладелецФайла.*,
		|	Файлы.Ссылка.*,
		|   Файлы.ПометкаУдаления.*}";
	Для каждого КлючЗначение Из Отбор Цикл
		ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		ПостроительЗапроса.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
	КонецЦикла;
	ПостроительЗапроса.Выполнить();
	Результат = ПостроительЗапроса.Результат.Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИнформациюОбЭПФайла(Файл)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.Объект КАК Ссылка,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.КомуВыданСертификат КАК Наименование,
		|	ЭП.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.Объект.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", Файл);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Размер");
	Для каждого РезультатСтрока Из Результат Цикл
		РезультатСтрока.Размер = РезультатСтрока.Подпись.Получить().Размер();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыОтправить()
	
	Если ЗначениеЗаполнено(Профиль) Тогда
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		Иначе
			Элементы.Отправить.Заголовок = НСтр("ru = 'Создать письмо'");
		КонецЕсли;
		Элементы.Отправить.Доступность = Истина;
	Иначе
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		Элементы.Отправить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОтправкиКлиент()
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьПрофиль(ПараметрыОтправки, Профиль);
	
	Если ШифроватьПриОтправке Тогда
		// Соберем массив сертификатов для шифрования.
		Сертификаты = Новый Массив;
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Для каждого СертификатЭлемент Из ТаблицаАдресовИСертификатовСтрока.Сертификаты Цикл
				Сертификаты.Добавить(СертификатЭлемент.Значение);
			КонецЦикла;
		КонецЦикла;
		
		// Установим режим шифрования почтового сообщения.
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке,
			Сертификаты);
		
		// Соберем строчку Кому.
		КомуСтр = "";
		Для Каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтр, "; ", ТаблицаАдресовИСертификатовСтрока.Кому);
		КонецЦикла;
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", КомуСтр);
	Иначе
		ПараметрыОтправкиПочтовогоСообщения.УстановитьРежимШифрования(
			ПараметрыОтправки,
			ШифроватьПриОтправке);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Кому", Кому);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "Копия", Копия);
		ПараметрыОтправкиПочтовогоСообщения.УстановитьПолучателей(ПараметрыОтправки, "СкрытаяКопия", СкрытаяКопия);
	КонецЕсли;
	
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТему(ПараметрыОтправки, Тема);
	ПараметрыОтправкиПочтовогоСообщения.УстановитьТекст(ПараметрыОтправки, Содержание);
	
	ВажностьПисьма = ?(Важность,
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Высокая"),
		ПредопределенноеЗначение("Перечисление.ВажностьПисем.Обычная"));
	ПараметрыОтправкиПочтовогоСообщения.УстановитьВажность(ПараметрыОтправки, ВажностьПисьма);
	
	ПараметрыОтправкиПочтовогоСообщения.ОчиститьВложения(ПараметрыОтправки);
	Для каждого ВложениеСтрока Из Вложения Цикл
		Если Не ВложениеСтрока.Выбран Тогда
			Продолжить;
		КонецЕсли;
		Если ВложениеСтрока.Расположение = "Ссылка" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеФайл(
				ПараметрыОтправки,
				ВложениеСтрока.Ссылка);
		ИначеЕсли ВложениеСтрока.Расположение = "ВременноеХранилище" Тогда
			ПараметрыОтправкиПочтовогоСообщения.ДобавитьВложениеИзВременногоХранилища(
				ПараметрыОтправки,
				ВложениеСтрока.Адрес,
				ВложениеСтрока.ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ПриложитьКПисьмуСообщениеВзаимодействияСЭД
		И ЗначениеЗаполнено(ОбъектВзаимодействияСЭД) Тогда
		ПараметрыОтправкиПочтовогоСообщения.ДобавитьДокумент(
			ПараметрыОтправки,
			ОбъектВзаимодействияСЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасширениеРаботыСКриптографиейПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОтправкиКлиент();
	Состояние(НСтр("ru = 'Идет отправка почтового сообщения. Пожалуйста, подождите...'"));
	СообщениеОбОшибке = "";
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПродолжение",
		ЭтотОбъект);
	 ЛегкаяПочтаКлиент.Отправить(ОписаниеОповещения, ПараметрыОтправки, СообщениеОбОшибке);
	 Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПродолжение(Результат, Параметры) Экспорт
	
	Если Не Результат.КодВозврата Тогда
		ТекстПредупреждения = НСтр("ru = 'Не удалось отправить сообщение!'");
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ТекстПредупреждения, Символы.ПС, Результат.СообщениеОбОшибке);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Почтовое сообщение отправлено.'"));	
	Закрыть();	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ШифроватьПриОтправке Тогда
		Для каждого ТаблицаАдресовИСертификатовСтрока Из ТаблицаАдресовИСертификатов Цикл
			Если ПустаяСтрока(ТаблицаАдресовИСертификатовСтрока.Кому) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Кому"" не заполнено.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Кому");
				Возврат;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТаблицаАдресовИСертификатовСтрока.Сертификаты) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Сертификаты"" не заполнено.'"),,
					"ТаблицаАдресовИСертификатов[" + ТаблицаАдресовИСертификатовСтрока.ПолучитьИдентификатор() + "].Сертификаты");
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			ПроверяемыеРеквизиты.Добавить("Кому");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьПриОтправкеПриИзменении(Элемент)
	
	Если ШифроватьПриОтправке Тогда
		ПеренестиАдресаИзКомуВТаблицу();
		Кому = "";
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаТаблицаАдресов;
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Истина;
		Элементы.ТаблицаАдресовИСертификатов.ВысотаВСтрокахТаблицы = Макс(3, ТаблицаАдресовИСертификатов.Количество());
	Иначе
		ПеренестиАдресаИзТаблицыВКому();
		ТаблицаАдресовИСертификатов.Очистить();
		Элементы.ТаблицаАдресовИСертификатов.Видимость = Ложь;
		Элементы.СтраницыПолучатели.ТекущаяСтраница = Элементы.СтраницаПолучатели;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзКомуВТаблицу()
	
	ТаблицаАдресовИСертификатов.Очистить();
	Адреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Кому, ";");
	Для Каждого Адрес Из Адреса Цикл
		Строка = ТаблицаАдресовИСертификатов.Добавить();
		Строка.Кому = СокрЛП(Адрес);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиАдресаИзТаблицыВКому()
	
	КомуСтрока = "";
	Для Каждого Строка Из ТаблицаАдресовИСертификатов Цикл
		ДобавитьЗначениеКСтрокеЧерезРазделитель(КомуСтрока, "; ", Строка.Кому);
	КонецЦикла;
	Кому = КомуСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранениеВводимыхЗначенийКлиент.ОбновитьСписокВыбора(ЭтаФорма, "Кому");
	СохранениеВводимыхЗначенийКлиент.ОбновитьСписокВыбора(ЭтаФорма, "Копия");
	СохранениеВводимыхЗначенийКлиент.ОбновитьСписокВыбора(ЭтаФорма, "СкрытаяКопия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюКому(Команда)
	
	СохранениеВводимыхЗначенийКлиент.ОчиститьСписокВыбора(ЭтаФорма, "Кому");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюКопия(Команда)
	
	СохранениеВводимыхЗначенийКлиент.ОчиститьСписокВыбора(ЭтаФорма, "Копия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюСкрытаяКопия(Команда)
	
	СохранениеВводимыхЗначенийКлиент.ОчиститьСписокВыбора(ЭтаФорма, "СкрытаяКопия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(Команда)
	
	ОткрытьВложениеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеКлиент()
	
	ТекущаяСтрока = Элементы.Вложения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	
	Если Не РасширениеРаботыСФайламиПодключено() Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		КомандыРаботыСФайламиКлиент.Открыть(
			РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
				ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовИСертификатовСертификатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РасширениеПодключеноФайл = ПодключитьРасширениеРаботыСФайлами();
	
	ТолькоЛичные = Ложь;
	МассивСтруктурСертификатов = ЭлектроннаяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	
	Для Каждого СтрокаЗначений Из Элементы.ТаблицаАдресовИСертификатов.ТекущиеДанные.Сертификаты Цикл
		СтрокаОтпечатка = СтрокаЗначений.Значение;
		Для Каждого СтруктураСертификата Из МассивСтруктурСертификатов Цикл
			Если СтруктураСертификата.Отпечаток = СтрокаОтпечатка Тогда
				СтруктураСертификата.Вставить("Пометка", Истина);
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурСертификатов);
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ТаблицаАдресовИСертификатовСертификатыНачалоВыбораПродолжение",
			ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСертификатовШифрования",
		ПараметрыФормы ,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовИСертификатовСертификатыНачалоВыбораПродолжение(
	СтруктураВозврата, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
		Элементы.ТаблицаАдресовИСертификатов.ТекущиеДанные.Сертификаты.Очистить();
		Для Каждого Сертификат Из СтруктураВозврата Цикл
			ПоляСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Представление = ПоляСертификата.КомуВыдан;
			Элементы.ТаблицаАдресовИСертификатов.ТекущиеДанные.Сертификаты.Добавить(ПоляСертификата.Отпечаток, Представление);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РасширениеРаботыСФайламиПодключено()
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не подключено расширение работы с файлами!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;;
	
КонецФункции

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	УстановитьЗаголовокКомандыОтправить();
	Если Не ШифроватьПриОтправке И ТипЗнч(Профиль) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		Элементы.Кому.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Кому.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеКлиент();
	
КонецПроцедуры
