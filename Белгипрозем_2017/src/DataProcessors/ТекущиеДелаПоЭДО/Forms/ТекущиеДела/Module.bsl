
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
															"ИспользоватьЭлектронныеПодписи");
	
	ИнициализироватьДерево();
	
	Если НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = Нстр("ru = 'Подписать'");
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить, подписать и подготовить к отправке
																	|выделенные электронные документы'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и подготовить к отправке
																		|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.СформироватьПодписатьИОтправить.Заголовок = Нстр("ru = 'Утвердить и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = Нстр("ru = 'Утвердить и отправить
																	|выделенные электронные документы'");
	КонецЕсли;

	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	СформироватьТаблицуБыстрогоОтбора();
	
	Элементы.СтраницаПодписать.Видимость = ИспользоватьЭП;
		
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтаФорма.ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Отборы.Количество() > 0 Тогда
		УстановитьОтборыДинамическихСписков(ЭтаФорма, Отборы);
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Ложь) Тогда
		Элементы.ОтправитьПакеты.Видимость                              = Ложь;
		Элементы.КомандаПодписать.Видимость                             = Ложь;
		Элементы.КомандаУтвердитьЭД.Видимость                           = Ложь;
		Элементы.ОтправитьИПолучитьЭД.Видимость                         = Ложь;
		Элементы.ТаблицаСформироватьЭД.Видимость                        = Ложь;
		Элементы.РаспаковатьВыделенныеПакеты.Видимость                  = Ложь;
		Элементы.СформироватьПодписатьИОтправить.Видимость              = Ложь;
		Элементы.СформироватьЗакрытьПринудительно.Видимость             = Ложь;
		Элементы.ПодписатьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.УтвердитьУстановитьОтветственного.Видимость            = Ложь;
		Элементы.ОбработатьУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаКонтролеУстановитьОтветственного.Видимость           = Ложь;
		Элементы.НаУточненииУстановитьОтветственного.Видимость          = Ложь;
		Элементы.НаИсправленииУстановитьОтветственного.Видимость        = Ложь;
		Элементы.КомандаСформироватьПодписатьИОтправить.Видимость       = Ложь;
		Элементы.НеизвестныеПакетыУстановитьСтатусОтменен.Видимость     = Ложь;
		Элементы.НеотправленныеПакетыУстановитьСтатусОтменен.Видимость  = Ложь;
		Элементы.НераспакованныеПакетыУстановитьСтатусОтменен.Видимость = Ложь;
	КонецЕсли;
	
	Для Каждого Страница ИЗ Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		НазваниеСписка = СтрЗаменить(Страница.Имя, "Страница", "");
		Запросы.Добавить(НазваниеСписка, ЭтаФорма[НазваниеСписка].ТекстЗапроса);
		
	КонецЦикла;
	
	ОбновитьДанныеДерева(Запросы);
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																		"СчетФактураВыданныйВМетаданных");
				
	Если ЗначениеЗаполнено(ИмяСчетаФактурыВыданного) И
		НЕ (Метаданные.Справочники[ИмяСчетаФактурыВыданного].Реквизиты.Найти("ДокументОснование") = Неопределено) Тогда
		
			Сформировать.ТекстЗапроса = СтрЗаменить(Сформировать.ТекстЗапроса,
													"НЕОПРЕДЕЛЕНО",
													"СостоянияЭД.СсылкаНаОбъект.ДокументОснование.Контрагент");
			Сформировать.ТекстЗапроса = СтрЗаменить(Сформировать.ТекстЗапроса,
													"0",
													"СостоянияЭД.СсылкаНаОбъект.ДокументОснование.СуммаДокумента");
													
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьДанныеДереваНаКлиенте();
		ОбновитьДинамическиеСписки();
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьОтборы(ЭтаФорма.ИмяФормы, "Отборы", БыстрыеОтборы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ БыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	УстановитьОтборы();
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы["Страница" + Элемент.ТекущиеДанные.Значение];
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	ОбновитьДинамическиеСписки();
	ТекущийЭлемент = Элементы[СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "")];
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	УстановитьОтборы();
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Утвердить

&НаКлиенте
Процедура УтвердитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Исправить

&НаКлиенте
Процедура ИсправитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Подписать

&НаКлиенте
Процедура ПодписатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Уточнить

&НаКлиенте
Процедура УточнитьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Обработать

&НаКлиенте
Процедура ОбработатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Сформировать

&НаКлиенте
Процедура СформироватьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НаКонтроле

&НаКлиенте
Процедура НаКонтролеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.ЭлектронныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Действие = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	Элементы[Действие].Обновить();
	ОбновитьДанныеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПолучитьЭлектронныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаУтверждении(Команда)
	
	УстановитьОтветственного(Элементы.Утвердить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаПодписи(Команда)
	
	УстановитьОтветственного(Элементы.Подписать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаУточнении(Команда)
	
	УстановитьОтветственного(Элементы.Уточнить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаИсправлении(Команда)
	
	УстановитьОтветственного(Элементы.Исправить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаОбработке(Команда)
	
	УстановитьОтветственного(Элементы.Обработать.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоНаКонтроле(Команда)
	
	УстановитьОтветственного(Элементы.НаКонтроле.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	Если Элементы.Сформировать.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.Сформировать.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеотправленныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Отправить.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНераспакованныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененНеизвестныеПакеты(Команда)
	
	УстановитьСтатусОтменен(Элементы.Разобрать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.РаспаковатьМассивПакетовЭД(Элементы.Распаковать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.Сформировать.ВыделенныеСтроки);
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	ЗакрытьДокументыПринудительно(Элементы.Сформировать.ВыделенныеСтроки);
	
	ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Элементы.Сформировать.ВыделенныеСтроки.Количество());
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
	
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
		
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Элементы.Утвердить.ВыделенныеСтроки, "УтвердитьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Элементы.Подписать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Элементы.Обработать.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			ЭлектронныеДокументыСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																										"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	СоотвСоглашенийИСтруктурСертификатов = ЭлектронныеДокументыСлужебныйКлиент.СоотвСоглашенийИСтруктурСертификатовДляАвторизации();
	
	КоличествоОтправленных = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(
													Элементы.Отправить.ВыделенныеСтроки,
													СоотвСоглашенийИСтруктурСертификатов);

	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Организации" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗакрытьДокументыПринудительно(Знач МассивДокументов)
	
	ТабБлокировки = Новый ТаблицаЗначений;
	ТабБлокировки.Колонки.Добавить("СсылкаНаОбъект");
	
	Для Каждого Запись Из МассивДокументов Цикл
		НовСтрока = ТабБлокировки.Добавить();
		НовСтрока.СсылкаНаОбъект = Запись.СсылкаНаОбъект;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТабБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СсылкаНаОбъект", "СсылкаНаОбъект");
	Блокировка.Заблокировать();
	
	Для Каждого Строка ИЗ ТабБлокировки Цикл
		ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
		ЗаписьРегистра.ЭлектронныйДокумент = Справочники.СообщенияЭДО.ПустаяСсылка();
		ЗаписьРегистра.Записать();
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоСумме(Форма, Значение, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Сформировать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.НаКонтроле.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Утвердить.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Обработать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Подписать.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Исправить.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
													Форма.Уточнить.Отбор,
													"СуммаДокумента",
													ВидСравнения,
													Значение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДате(Форма, ЗначениеОтбора, ВидСравнения)

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Форма.Подписать.Отбор, "Дата", ВидСравнения, ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Исправить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Уточнить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Обработать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Утвердить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Разобрать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.НаКонтроле.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Отправить.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Распаковать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
											Форма.Сформировать.Отбор,
											"Дата",
											ВидСравнения,
											ЗначениеОтбора);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОтветственному(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"Ответственный",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоКонтрагенту(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Сформировать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Контрагент",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизации(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Сформировать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Отправить.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"Организация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоВидуЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"ВидЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоНаправлениюЭД(Форма, ЗначениеОтбора)
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Распаковать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Разобрать.Отбор,
										"НаправлениеЭД",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Равно,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоДополнительнойИнформации(Форма, ЗначениеОтбора)

	ИспользоватьОтбор = ЗначениеЗаполнено(ЗначениеОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Утвердить.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Исправить.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Уточнить.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Подписать.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.Обработать.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
										Форма.НаКонтроле.Отбор,
										"ДополнительнаяИнформация",
										ЗначениеОтбора,
										ВидСравненияКомпоновкиДанных.Содержит,
										,
										ИспользоватьОтбор);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСформировать Тогда
		Элементы.Сформировать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУтвердить Тогда
		Элементы.Утвердить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодписать Тогда
		Элементы.Подписать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработать Тогда
		Элементы.Обработать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУточнить Тогда
		Элементы.Уточнить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИсправить Тогда
		Элементы.Исправить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНаКонтроле Тогда
		Элементы.НаКонтроле.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтправить Тогда
		Элементы.Отправить.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспаковать Тогда
		Элементы.Распаковать.Обновить();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазобрать Тогда
		Элементы.Разобрать.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий(Знач ДеревоДействий, Запросы)
	
	Дерево = РеквизитФормыВЗначение("ДеревоДействий", Тип("ДеревоЗначений"));
	
	ДанныеОКоличествах = ДанныеОКоличествах(Запросы);
	
	ПредставлениеСтроки = НСтр("ru = 'Сформировать'");
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Сформировать", ПредставлениеСтроки, ДанныеОКоличествах[0]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Обработать", НСтр("ru = 'Обработать'"), ДанныеОКоличествах[1]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Утвердить", НСтр("ru = 'Утвердить'"), ДанныеОКоличествах[2]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Подписать", НСтр("ru = 'Подписать'"), ДанныеОКоличествах[3]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Уточнить", НСтр("ru = 'Уточнить'"), ДанныеОКоличествах[4]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Исправить", НСтр("ru = 'Исправить'"), ДанныеОКоличествах[5]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "НаКонтроле", НСтр("ru = 'На контроле'"), ДанныеОКоличествах[6]);
	
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Отправить", НСтр("ru = 'Отправить'"), ДанныеОКоличествах[7]);

	ПредставлениеСтроки = НСтр("ru = 'Распаковать'");
	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Распаковать", ПредставлениеСтроки, ДанныеОКоличествах[8]);

	УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, "Разобрать", НСтр("ru = 'Разобрать'"), ДанныеОКоличествах[9]);
	
	Возврат Дерево;

КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ТекстОперации,
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	СтрокаОбработать = Дерево.Строки.Добавить();
	СтрокаОбработать.Значение = "Обработать";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Утвердить";
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаОбработать.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Уточнить";
	НовЗапись = СтрокаОбработать.Строки.Добавить();
	НовЗапись.Значение = "Исправить";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправить";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Распаковать";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Разобрать";
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеСтрокДереваРекурсивно(Дерево, Значение, Представление, Количество)
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПредставлениеСтрокДереваРекурсивно(Строка, Значение, Представление, Количество);
		КонецЕсли;
		
		Если Строка.Значение = Значение Тогда
			Строка.Представление = Представление + ?(Количество > 0, " (" + Количество + ")", "");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;

	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Организация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Организации");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Ответственный";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Ответственный:'");
	НоваяСтрока.Тип = "СправочникСсылка.Пользователи";
	НоваяСтрока.Значение = Пользователи.АвторизованныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	УдалитьОтборыПоСумме();
	УдалитьОтборыПоДате();
	
	УстановитьОтборыДинамическихСписков(ЭтаФорма, ЭтаФорма.БыстрыеОтборы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыДинамическихСписков(Форма, Отборы)
	
	Для Каждого СтрокаОтбора ИЗ Отборы Цикл
		Если СтрокаОтбора.Параметр = "Ответственный" Тогда
			УстановитьОтборПоОтветственному(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Контрагент" Тогда
			УстановитьОтборПоКонтрагенту(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Организация" Тогда
			УстановитьОтборПоОрганизации(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "НаправлениеЭД" Тогда
			УстановитьОтборПоНаправлениюЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "ВидЭД" Тогда
			УстановитьОтборПоВидуЭД(Форма, СтрокаОтбора.Значение);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_С"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Сумма_По"
				И (ЗначениеЗаполнено(СтрокаОтбора.Значение) ИЛИ СтрокаОтбора.Значение = 0) Тогда
			УстановитьОтборПоСумме(Форма, СтрокаОтбора.Значение, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_С" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, НачалоДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "Дата_По" И ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			УстановитьОтборПоДате(Форма, КонецДня(СтрокаОтбора.Значение), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ИначеЕсли СтрокаОтбора.Параметр = "ДополнительнаяИнформация" Тогда
			УстановитьОтборПоДополнительнойИнформации(Форма, СтрокаОтбора.Значение);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоСумме()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Сформировать.Отбор, "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Обработать.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.НаКонтроле.Отбор,   "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Подписать.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Утвердить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Исправить.Отбор,    "СуммаДокумента");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Уточнить.Отбор,     "СуммаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыПоДате()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Сформировать.Отбор, "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Распаковать.Отбор,  "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Обработать.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.НаКонтроле.Отбор,   "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Отправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Разобрать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Утвердить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Исправить.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Подписать.Отбор,    "Дата");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЭтаФорма.Уточнить.Отбор,     "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД,
							ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"),
							Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьДанныеДереваНаКлиенте();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",      Истина);
	ПараметрыФормы.Вставить("РежимВыбора",             Истина);
	
	ПараметрыВыполнения = Новый Структура("МассивЭД", МассивЭД);
	Обработчик = Новый ОписаниеОповещения("УстановитьОтветственногоЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоЗавершение(НовыйОтветственный, ПараметрыВыполнения) Экспорт
	
	Если НЕ НовыйОтветственный = Неопределено Тогда
		КоличествоОбработанныхЭД = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьОтветственногоЭД(
														ПараметрыВыполнения.МассивЭД,
														НовыйОтветственный,
														КоличествоОбработанныхЭД);
		ЭлектронныеДокументыСлужебныйКлиент.ОповеститьПользователяОСменеОтветственного(
														НовыйОтветственный,
														ПараметрыВыполнения.МассивЭД.Количество(),
														КоличествоОбработанныхЭД);
	КонецЕсли;
	
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	МассивИсключенияЭД = Новый Массив();
	МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
	МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
	МассивИсключенияЭД.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
	МассивАктуальныхЭД = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивАктуальныхЭД, МассивИсключенияЭД);
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	Элементы.СброситьОтбор.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	Для Каждого Строка ИЗ БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			УстановитьДоступностьКомандыСбросаОтбора(Истина);
			Прервать;
		КонецЕсли
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДерева(Знач Запросы)
	
	Дерево = ДанныеДереваДействий(ДеревоДействий, Запросы);
	
	Коллекция = ДеревоДействий.ПолучитьЭлементы();
	Коллекция.Очистить();
	
	Для Каждого Строка Из Дерево.Строки Цикл
		ЗаполнитьСтрокиРекурсивно(Коллекция, Строка);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиРекурсивно(Приемник, Знач Источник);
	
	НовСтрокаКоллекции = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрокаКоллекции, Источник);
	Если Источник.Строки.Количество() > 0 Тогда
		Для Каждого Строка ИЗ Источник.Строки Цикл
			ЗаполнитьСтрокиРекурсивно(НовСтрокаКоллекции.ПолучитьЭлементы(), Строка);
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОКоличествах(Знач Запросы)
	
	ТекстЗапросаОбщий = "";
	
	Для Каждого ТекстЗапроса Из Запросы Цикл
		ТекстЗапросаОбщий = ТекстЗапросаОбщий + ТекстЗапроса + ";" + Символы.ПС;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОбщий;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Выборка ИЗ РезультатЗапроса Цикл
		МассивРезультатов.Добавить(Выборка.Выбрать().Количество());
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеДереваНаКлиенте()
	
	ТекущаяСтрока = Элементы.ДеревоДействий.ТекущиеДанные.Значение;
	ОбновитьДанныеДерева(Запросы);
	ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
	Для Каждого Элемент ИЗ ЭлементыДерева Цикл
		Если Элемент.Значение = ТекущаяСтрока Тогда
			Элементы.ДеревоДействий.ТекущаяСтрока = Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		Если Элемент.Значение = "Обработать" Тогда
			Элементы.ДеревоДействий.Развернуть(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
		ПодчиненныеЭлементыСтроки = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтроки.Количество() > 0 Тогда
			Для Каждого ПодчиненныйЭлемент ИЗ ПодчиненныеЭлементыСтроки Цикл
				Если ПодчиненныйЭлемент.Значение = ТекущаяСтрока Тогда
					Элементы.ДеревоДействий.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры