
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыделитьНазначенныхИсполнителей();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьИсполнителей();	
	Если ЗначениеЗаполнено(Период) Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКНазначениюПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ЗаявкиКНазначению.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый ФиксированнаяСтруктура("Заявка", ТекДанные.Заявка);
	Элементы.Договоры.ОтборСтрок = Отбор;
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы
&НаКлиенте
Процедура ЗаявкиКНазначениюОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	Для каждого Эл Из ПараметрыПеретаскивания.Значение Цикл
		ЗаявкиКНазначению.Удалить(Эл);
	КонецЦикла; 
	ВыделитьНазначенныхИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Исполнитель = Исполнители[Строка].Исполнитель;
	Заявки = ПараметрыПеретаскивания.Значение;
	Для каждого Эл Из Заявки Цикл
		Отбор = Новый Структура("Исполнитель, Заявка", Исполнитель, Эл.Заявка);
		ИскСтроки = ЗаявкиНазначенные.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НовСтр = ЗаявкиНазначенные.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Эл); 
			НовСтр.Исполнитель = Исполнитель;
			НовСтр.Пометка = Ложь;
			
			Исполнители[Строка].Назначен = Истина;
		Иначе
			Сообщить(""+Исполнитель+" уже назначен на "+Эл.Заявка);
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.Исполнители.ТекущаяСтрока = Исполнители[Строка].ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый ФиксированнаяСтруктура("Исполнитель", ТекДанные.Исполнитель);
	Элементы.ЗаявкиНазначенные.ОтборСтрок = Отбор;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Назначить(Команда)
	// очистить пометки от предыдущей команды
	Для каждого Эл Из ЗаявкиНазначенные Цикл
		Если Эл.Пометка Тогда
			Эл.Пометка = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	МассивИсп = Новый Массив;
	Для каждого Эл Из Исполнители Цикл
		Если Эл.Пометка Тогда
			МассивИсп.Добавить(Эл.Исполнитель);
			Эл.Пометка = Ложь;
		КонецЕсли; 
	КонецЦикла;
	
	МассивЗаяв = Новый Массив;
	Для каждого Эл Из ЗаявкиКНазначению Цикл
		Если Эл.Пометка Тогда
			МассивЗаяв.Добавить(Эл);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Исполнитель Из МассивИсп Цикл
		Для каждого Эл Из МассивЗаяв Цикл
			Отбор = Новый Структура("Исполнитель, Заявка", Исполнитель, Эл.Заявка);
			ИскСтроки = ЗаявкиНазначенные.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = ЗаявкиНазначенные.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Эл); 
				НовСтр.Исполнитель = Исполнитель;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	й = ЗаявкиКНазначению.Количество()-1;
	Пока й >= 0 Цикл
		Если ЗаявкиКНазначению[й].Пометка Тогда
			ЗаявкиКНазначению.Удалить(й);
		КонецЕсли; 
		й = й-1;
	КонецЦикла; 
	
	ВыделитьНазначенныхИсполнителей();
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	й = ЗаявкиНазначенные.Количество()-1;
	Пока й >= 0 Цикл
		Если ЗаявкиНазначенные[й].Пометка Тогда
			Отбор = Новый Структура("Заявка", ЗаявкиНазначенные[й].Заявка);
			ИскСтроки = ЗаявкиКНазначению.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = ЗаявкиКНазначению.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ЗаявкиНазначенные[й]);
				НовСтр.Пометка = Ложь;
			КонецЕсли; 
			
			ЗаявкиНазначенные.Удалить(й);
		КонецЕсли; 
		й = й-1;
	КонецЦикла; 
	ВыделитьНазначенныхИсполнителей();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка КАК Заявка
		|ПОМЕСТИТЬ ВсеЗаявки
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|	И НЕ ВходящиеДокументы.ПометкаУдаления
		|	И ВходящиеДокументы.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И ВходящиеДокументы.ВидДокумента = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мИсполнителиРабот.Владелец КАК Заявка
		|ПОМЕСТИТЬ НазначенныеЗаявки
		|ИЗ
		|	Справочник.мИсполнителиРабот КАК мИсполнителиРабот
		|ГДЕ
		|	мИсполнителиРабот.Владелец.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|	И НЕ мИсполнителиРабот.Владелец.ПометкаУдаления
		|	И мИсполнителиРабот.Владелец.Подразделение В ИЕРАРХИИ(&Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеЗаявки.Заявка КАК Заявка,
		|	ВсеЗаявки.Заявка.Отправитель КАК Заказчик,
		|	ВходящиеДокументыКонтактнаяИнформация.Представление КАК Адрес,
		|	СвязиДокументов.СвязанныйДокумент КАК Договор,
		|	СвязиДокументов.СвязанныйДокумент.Сумма КАК Сумма,
		|	мЭтапыДоговоров.Наименование КАК Этап
		|ИЗ
		|	ВсеЗаявки КАК ВсеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВходящиеДокументы.КонтактнаяИнформация КАК ВходящиеДокументыКонтактнаяИнформация
		|		ПО ВсеЗаявки.Заявка = ВходящиеДокументыКонтактнаяИнформация.Ссылка
		|			И (ВходящиеДокументыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|			ПО СвязиДокументов.СвязанныйДокумент = мЭтапыДоговоров.Владелец
		|		ПО ВсеЗаявки.Заявка = СвязиДокументов.Документ
		|			И (СвязиДокументов.ТипСвязи = &ТипСвязи)
		|ГДЕ
		|	НЕ ВсеЗаявки.Заявка В
		|				(ВЫБРАТЬ
		|					НазначенныеЗаявки.Заявка
		|				ИЗ
		|					НазначенныеЗаявки КАК НазначенныеЗаявки)";
	
	Запрос.УстановитьПараметр("ВидДокумента", СПравочники.ВидыВходящихДокументов.НайтиПоНаименованию("Поручение на выполнение работ"));
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.Поручение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выгрузить();
	
	Договоры.Очистить();
	Для каждого Стр Из Результат Цикл
		Если ЗначениеЗаполнено(Стр.Договор) Тогда
			
			Отбор = Новый Структура("Договор", Стр.Договор);
			ИскСтроки = Договоры.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = Договоры.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			    НовСтр.Этапы = Стр.Этап;
			Иначе	
				ИскСтроки[0].Этапы = ИскСтроки[0].Этапы + ", " + Стр.Этап;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Результат.Свернуть("Заявка, Заказчик, Адрес", "Сумма");
	
	ЗаявкиКНазначению.Очистить();
	
	Для каждого Стр Из Результат Цикл
		ЗаполнитьЗначенияСвойств(ЗаявкиКНазначению.Добавить(), Стр);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНаСервере()
	МассивЗаявок = Новый Массив;	
	Для каждого Стр Из ЗаявкиНазначенные Цикл
		Если МассивЗаявок.Найти(Стр.Заявка) = Неопределено Тогда
			МассивЗаявок.Добавить(Стр.Заявка);
		КонецЕсли; 	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мИсполнителиРабот.Ссылка КАК Исполнитель,
		|	мИсполнителиРабот.Владелец КАК Заявка
		|ИЗ
		|	Справочник.мИсполнителиРабот КАК мИсполнителиРабот
		|ГДЕ
		|	мИсполнителиРабот.Владелец В(&МассивЗаявок)";
	
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ЗаявкиНазначенные Цикл
		Отбор = Новый Структура("Заявка, Исполнитель", Стр.Заявка, Стр.Исполнитель);
		ИскСтроки = Результат.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			Спр = Справочники.мИсполнителиРабот.СоздатьЭлемент();
			Спр.Владелец = Стр.Заявка;
			Спр.Наименование = "" + Стр.Исполнитель;
			Спр.Пользователь = Стр.Исполнитель;
			Спр.Записать();
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьНаСервере();
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Исполнители сохранены.";
	Сообщение.Сообщить(); 
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗаявкиКНазначению(Команда)
	Пометить(ЗаявкиКНазначению, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиЗаявкиКНазначению(Команда)
	Пометить(ЗаявкиКНазначению, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЗаявкиНазначенные(Команда)
	Если Элементы.ЗаявкиНазначенные.ОтборСтрок = Неопределено Тогда
		// Пометка всех
		Пометить(ЗаявкиНазначенные, Истина);
	Иначе
		// Пометка с учетом отбора
		Исполнитель = Элементы.ЗаявкиНазначенные.ОтборСтрок.Исполнитель;
		Для каждого Эл Из ЗаявкиНазначенные Цикл
			Если Эл.Исполнитель = Исполнитель Тогда
				Эл.Пометка = Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиЗаявкиНазначенные(Команда)
	Если Элементы.ЗаявкиНазначенные.ОтборСтрок = Неопределено Тогда
		// Пометка всех
		Пометить(ЗаявкиНазначенные, Ложь);
	Иначе
		// Пометка с учетом отбора
		Исполнитель = Элементы.ЗаявкиНазначенные.ОтборСтрок.Исполнитель;
		Для каждого Эл Из ЗаявкиНазначенные Цикл
			Если Эл.Исполнитель = Исполнитель Тогда
				Эл.Пометка = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Пометить(Таблица, Флаг)
	Для каждого Эл Из Таблица Цикл
		Эл.Пометка = Флаг;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеНазначенные(Команда)
	Элементы.ЗаявкиНазначенные.ОтборСтрок = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьИсполнителей()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.Пользователь КАК Исполнитель
		|ПОМЕСТИТЬ Пользователи
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И НЕ СведенияОПользователях.Пользователь.Недействителен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	мЭтапыДоговоровИсполнители.Ссылка КАК ЭтапДоговора,
		|	мЭтапыДоговоровИсполнители.Ссылка.Владелец КАК Договор,
		|	мЭтапыДоговоровИсполнители.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ ЭтапыИсполнителей
		|ИЗ
		|	Справочник.мЭтапыДоговоров.Исполнители КАК мЭтапыДоговоровИсполнители
		|ГДЕ
		|	мЭтапыДоговоровИсполнители.Исполнитель В
		|			(ВЫБРАТЬ
		|				Пользователи.Исполнитель
		|			ИЗ
		|				Пользователи КАК Пользователи)
		|	И НЕ мЭтапыДоговоровИсполнители.Ссылка.ПометкаУдаления
		|	И НЕ мЭтапыДоговоровИсполнители.Ссылка.ИсключенИзДоговора
		|	И НЕ мЭтапыДоговоровИсполнители.Ссылка.Владелец.НеДействует
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЭтапДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мСметнаяСтоимостьСрезПоследних.Период КАК Период,
		|	ВЫБОР
		|		КОГДА мСметнаяСтоимостьСрезПоследних.Период < &ДатаДеноминации
		|			ТОГДА ВЫРАЗИТЬ(мСметнаяСтоимостьСрезПоследних.Сумма / 10000 КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ мСметнаяСтоимостьСрезПоследних.Сумма
		|	КОНЕЦ КАК СметнаяСтоимость,
		|	мСметнаяСтоимостьСрезПоследних.ЭтапДоговора КАК ЭтапДоговора
		|ПОМЕСТИТЬ Стоимости
		|ИЗ
		|	РегистрСведений.мСметнаяСтоимость.СрезПоследних(
		|			,
		|			ЭтапДоговора В
		|				(ВЫБРАТЬ
		|					ЭтапыИсполнителей.ЭтапДоговора
		|				ИЗ
		|					ЭтапыИсполнителей КАК ЭтапыИсполнителей)) КАК мСметнаяСтоимостьСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.СуммаРасход > 0
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|							ТОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаРасход / 10000 КАК ЧИСЛО(15, 2))
		|						КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыСПокупателямиОбороты.СуммаРасход
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Заактировано,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОбороты.СуммаПриход < 0
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаДеноминации
		|							ТОГДА -(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.СуммаПриход / 10000 КАК ЧИСЛО(15, 2)))
		|						КОГДА РасчетыСПокупателямиОбороты.Период < &ДатаПослеДеноминации
		|							ТОГДА 0
		|						ИНАЧЕ -РасчетыСПокупателямиОбороты.СуммаПриход
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Возврат,
		|	РасчетыСПокупателямиОбороты.Договор КАК Договор
		|ПОМЕСТИТЬ Суммы
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Договор В
		|				(ВЫБРАТЬ
		|					ЭтапыИсполнителей.Договор
		|				ИЗ
		|					ЭтапыИсполнителей КАК ЭтапыИсполнителей)) КАК РасчетыСПокупателямиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОбороты.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыИсполнителей.Исполнитель КАК Исполнитель,
		|	Стоимости.СметнаяСтоимость КАК СметнаяСтоимость,
		|	ЕСТЬNULL(Суммы.Заактировано, 0) КАК Заактировано,
		|	ЕСТЬNULL(Суммы.Возврат, 0) КАК Возврат,
		|	Стоимости.ЭтапДоговора.Владелец КАК Договор,
		|	Стоимости.СметнаяСтоимость - ЕСТЬNULL(Суммы.Заактировано, 0) - ЕСТЬNULL(Суммы.Возврат, 0) КАК Сумма
		|ПОМЕСТИТЬ Итого
		|ИЗ
		|	ЭтапыИсполнителей КАК ЭтапыИсполнителей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Стоимости КАК Стоимости
		|		ПО (Стоимости.ЭтапДоговора = ЭтапыИсполнителей.ЭтапДоговора)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Суммы КАК Суммы
		|		ПО ЭтапыИсполнителей.Договор = Суммы.Договор
		|ГДЕ
		|	Стоимости.СметнаяСтоимость - ЕСТЬNULL(Суммы.Заактировано, 0) - ЕСТЬNULL(Суммы.Возврат, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итого.Исполнитель КАК Исполнитель,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Итого.Договор) КАК Договоров,
		|	СУММА(Итого.Сумма) КАК Сумма
		|ИЗ
		|	Итого КАК Итого
		|
		|СГРУППИРОВАТЬ ПО
		|	Итого.Исполнитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Итого.Исполнитель.Наименование";
	                                                                       
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ДатаДеноминации", Дата(2016, 7, 1));
	Запрос.УстановитьПараметр("ДатаПослеДеноминации", Дата(2016, 7, 2));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Исполнители.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НовСтр = Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УсловноеОформление.Элементы.Очистить();
	
    ЭлементУО = УсловноеОформление.Элементы.Добавить();
    ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноБирюзовый);
    ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.Назначен");
    Элементусловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементУсловия.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИсполнителиИсполнитель"); 
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьНазначенныхИсполнителей()
	МассивИсп = Новый Массив;
	Для каждого Стр Из ЗаявкиНазначенные Цикл
		Если МассивИсп.Найти(Стр.Исполнитель) = Неопределено Тогда
			МассивИсп.Добавить(Стр.Исполнитель);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Стр Из Исполнители Цикл
		Если МассивИсп.Найти(Стр.Исполнитель) = Неопределено Тогда
			Стр.Назначен = Ложь;
		Иначе
			Стр.Назначен = Истина;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти
