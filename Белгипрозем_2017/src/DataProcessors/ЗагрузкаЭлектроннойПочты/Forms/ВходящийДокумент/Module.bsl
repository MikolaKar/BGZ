&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВидДокумента", ВидДокумента);
	Параметры.Свойство("ВидОбращения", ВидОбращения);
	Параметры.Свойство("ВопросДеятельности", ВопросДеятельности);
	Параметры.Свойство("ГрифДоступа", ГрифДоступа);
	Параметры.Свойство("Организация", Организация);
	
	Если Параметры.Свойство("Отправитель") Тогда
		Если ТипЗнч(Параметры.Отправитель) = Тип("СправочникСсылка.Корреспонденты") Тогда
			Отправитель = Параметры.Отправитель;
		ИначеЕсли ТипЗнч(Параметры.Отправитель) = Тип("Строка") Тогда
			НайтиКорреспондентаПоСтрокеАдреса(Строка(Параметры.Отправитель));
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный отправитель.'");
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.ИспользоватьВидыВходящихДокументов.Получить() = Истина Тогда
		ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидВходящегоДокумента");
		Элементы.ВидДокумента.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВидДокумента.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		Элементы.ГрифДоступа.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ГрифДоступа.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		Элементы.ВопросДеятельности.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВопросДеятельности.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Вложения") И ЗначениеЗаполнено(Параметры.Вложения) Тогда
		Для Каждого Вложение Из Параметры.Вложения Цикл
			ФайлыСтрока = Файлы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ФайлыСтрока, Вложение);
			ФайлыСтрока.Импортировать = Истина;
			Если ПустаяСтрока(Вложение.ПолноеИмяФайла) И ЭтоАдресВременногоХранилища(Вложение.Адрес) Тогда
				ФайлыДвоичныеДанные.Добавить(ПолучитьИзВременногоХранилища(Вложение.Адрес), Вложение.Адрес);
			КонецЕсли;
			Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ФайлыСтрока.Расширение) Тогда 
				ФайлыСтрока.Оригинал = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Принимает строку адреса эл. почты. "ХХХХХХ <AA@BB.cc>" или "AA@BB.cc"
// Ищет корреспондента по соответствию адреса электронной почты, в том числе и среди контактных лиц
// Если найден 1, то подставляет в форму, если найдено несколько то заполняем список выбора поля отправитель
//
&НаСервере
Процедура НайтиКорреспондентаПоСтрокеАдреса(СтрокаАдресаЭлектроннойПочты)
	
	АдресЭлектроннойПочты = ВыделитьАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты);
	Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
	
	СписокКорреспондентов = ПолучитьСписокКорреспондентовПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты);
	Если СписокКорреспондентов.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли СписокКорреспондентов.Количество() = 1 Тогда
		Отправитель = СписокКорреспондентов[0];
	Иначе
		Элементы.Отправитель.СписокВыбора.Очистить();
		Элементы.Отправитель.СписокВыбора.ЗагрузитьЗначения(СписокКорреспондентов);
		Элементы.Отправитель.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыделитьАдресЭлектроннойПочты(Знач СтрокаАдресаЭлектроннойПочты)
	
	СтрокаАдресаЭлектроннойПочты = СокрЛП(СтрокаАдресаЭлектроннойПочты);
	Поз = Найти(СтрокаАдресаЭлектроннойПочты, "<");
	Если Поз > 0 Тогда
		СтрокаАдресаЭлектроннойПочты = Сред(СтрокаАдресаЭлектроннойПочты, Поз + 1);
		Поз = Найти(СтрокаАдресаЭлектроннойПочты, ">");
		Если Поз = 0 Тогда
			Возврат "";
		КонецЕсли;
		СтрокаАдресаЭлектроннойПочты = Лев(СтрокаАдресаЭлектроннойПочты, Поз - 1);
	КонецЕсли;
	
	Если НЕ ЭтоАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаАдресаЭлектроннойПочты;
	
КонецФункции

&НаСервере
Функция ЭтоАдресЭлектроннойПочты(СтрокаАдресаЭлектроннойПочты)
	
	Поз = Найти(СтрокаАдресаЭлектроннойПочты, "@");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Пользователь = Лев(СтрокаАдресаЭлектроннойПочты, Поз - 1);
	Сервер = Сред(СтрокаАдресаЭлектроннойПочты, Поз + 1);
	Поз = Найти(Сервер, ".");
	Если Поз = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// проверка не точная но основные элементы на месте
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокКорреспондентовПоАдресуЭлектроннойПочты(АдресЭП)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.АдресЭП = &АдресЭП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП";
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Корреспондент");
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	Если ИспользоватьГрифыДоступа Тогда 
		ПроверяемыеРеквизиты.Добавить("ГрифДоступа");
	КонецЕсли;
	
	ИспользоватьВидВхДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыВходящихДокументов");
	Если ИспользоватьВидВхДокументов Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидДокумента");
		Если ВидДокумента.ЯвляетсяОбращениемОтГраждан = Истина Тогда
			ПроверяемыеРеквизиты.Добавить("ВидОбращения");
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОрганизации = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьОрганизации Тогда 
		ПроверяемыеРеквизиты.Добавить("Организация");
	КонецЕсли;
	
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	Если ИспользоватьВопросыДеятельности Тогда 
		ПроверяемыеРеквизиты.Добавить("ВопросДеятельности");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВидаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаСервер()
	
	Если ВидДокумента.ЯвляетсяОбращениемОтГраждан = Истина Тогда
		Элементы.ВидОбращения.Доступность = Истина;
		Элементы.ВидОбращения.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВидОбращения.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Тип", "ВходящийДокумент");
	СтруктураВозврата.Вставить("Отправитель", Отправитель);
	СтруктураВозврата.Вставить("ГрифДоступа", ГрифДоступа);
	СтруктураВозврата.Вставить("ВидДокумента", ВидДокумента);
	СтруктураВозврата.Вставить("ВидОбращения", ВидОбращения);
	СтруктураВозврата.Вставить("Организация", Организация);
	СтруктураВозврата.Вставить("ВопросДеятельности", ВопросДеятельности);
	СтруктураВозврата.Вставить("Файлы", ПолучитьМассивСтруктурФайлов());
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтруктурФайлов()
	
	Результат = Новый Массив;
	Для каждого ФайлыСтрока Из Файлы.ПолучитьЭлементы() Цикл
		Если Не ФайлыСтрока.Импортировать Тогда
			Продолжить;
		КонецЕсли;
		ФайлИнфо = Новый Структура;
		ФайлИнфо.Вставить("Наименование", ФайлыСтрока.Наименование);
		ФайлИнфо.Вставить("Имя", ФайлыСтрока.Имя);
		ФайлИнфо.Вставить("Расширение", ФайлыСтрока.Расширение);
		ФайлИнфо.Вставить("ПолноеИмяФайла", ФайлыСтрока.ПолноеИмяФайла);
		ФайлИнфо.Вставить("Адрес", ФайлыСтрока.Адрес);
		ФайлИнфо.Вставить("Оригинал", ФайлыСтрока.Оригинал);
		МассивЭП = Новый Массив;
		Для каждого ЭПСтрока Из ФайлыСтрока.ПолучитьЭлементы() Цикл
			Если Не ЭПСтрока.Импортировать Тогда
				Продолжить;
			КонецЕсли;
			ЭПИнфо = Новый Структура;
			ЭПИнфо.Вставить("Наименование", ЭПСтрока.Наименование);
			ЭПИнфо.Вставить("Имя", ЭПСтрока.Имя);
			ЭПИнфо.Вставить("Расширение", ЭПСтрока.Расширение);
			ЭПИнфо.Вставить("ПолноеИмяФайла", ЭПСтрока.ПолноеИмяФайла);
			ЭПИнфо.Вставить("Адрес", ЭПСтрока.Адрес);
			ЭПИнфо.Вставить("Отпечаток", ЭПСтрока.Отпечаток);
			ЭПИнфо.Вставить("КомуВыданСертификат", ЭПСтрока.КомуВыданСертификат);
			ЭПИнфо.Вставить("АдресСертификата", ЭПСтрока.АдресСертификата);
			МассивЭП.Добавить(ЭПИнфо);
		КонецЦикла;
		Если МассивЭП.Количество() > 0 Тогда
			ФайлИнфо.Вставить("ЭП", МассивЭП);
		КонецЕсли;
		Результат.Добавить(ФайлИнфо);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Возврат;
	КонецЕсли;
	
	СписокФайлов = Файлы.ПолучитьЭлементы();
	ИндексФайла = СписокФайлов.Количество() - 1;
	
	Пока ИндексФайла > -1 Цикл
		Файл = СписокФайлов.Получить(ИндексФайла);
		ИндексЭП = СписокФайлов.Количество() - 1;
		Пока ИндексЭП > 0 Цикл
			Если ИндексФайла <> ИндексЭП Тогда
				ЭП = СписокФайлов.Получить(ИндексЭП);
				ЭПДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(ЭП);
				Сертификат = ПолучитьСертификатИзПодписи(ЭПДвоичныеДанные);
				ФайлДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(Файл);
				ПодписьВерна = ПроверитьПодпись(ФайлДвоичныеДанные, ЭПДвоичныеДанные);
				Если ПодписьВерна Тогда
					ПеренестиФайлВПодпись(Файл, ЭП, Сертификат, ПодписьВерна);
				КонецЕсли;
			КонецЕсли;
			ИндексЭП = ИндексЭП - 1;
		КонецЦикла;
		ИндексФайла = ИндексФайла - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДвоичныеДанныеФайла(Строка)
	
	Если Не ПустаяСтрока(Строка.ПолноеИмяФайла) Тогда
		Возврат Новый ДвоичныеДанные(Строка.ПолноеИмяФайла);
	Иначе
		Для каждого Элемент Из ФайлыДвоичныеДанные Цикл
			Если Элемент.Представление = Строка.Адрес Тогда
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЦикла;
		ВызватьИсключение НСтр("ru = 'Не найдены двоичные данные файла'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПодпись(ФайлДвоичныеДанные, ЭПДвоичныеДанные)
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		ОшибкиПроверки = ЭлектроннаяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии,
			ФайлДвоичныеДанные, ЭПДвоичныеДанные);
		Возврат Не ОшибкиПроверки.Свойство("ТекстОшибкиПроверкиПодписи");
	Исключение
		// Если произошло исключение, значит ЭП не подходит к файлу
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСертификатИзПодписи(ЭПДвоичныеДанные)
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ЭПДвоичныеДанные);
	Исключение
		// Если произошло исключение, значит файл не является файлом подписи.
		Возврат Неопределено;
	КонецПопытки;
	
	Если Сертификаты.Количество() = 0 Тогда
		// Количество сертификатов в файле подписи должно быть больше 0.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сертификаты[0];
	
КонецФункции

&НаКлиенте
Процедура ПеренестиФайлВПодпись(ФайлыСтрока, ЭПСтрока, Сертификат = Неопределено, ПодписьВерна = Ложь)
	
	ФайлыСтрокаЭП = ФайлыСтрока.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(ФайлыСтрокаЭП, ЭПСтрока);
	ФайлыСтрокаЭП.ЭтоПодпись = Истина;
	ФайлыСтрокаЭП.ПодписьВерна = ПодписьВерна;
	Если Сертификат <> Неопределено Тогда
		ФайлыСтрокаЭП.Отпечаток = Base64Строка(Сертификат.Отпечаток);
		ФайлыСтрокаЭП.КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ФайлыСтрокаЭП.АдресСертификата = ПоместитьВоВременноеХранилище(Сертификат.Выгрузить());
	КонецЕсли;
	Файлы.ПолучитьЭлементы().Удалить(ЭПСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодписьВФайл(ЭПСтрока)
	
	ФайлыСтрока = Файлы.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(ФайлыСтрока, ЭПСтрока,, "ЭтоПодпись, ПодписьВерна, Отпечаток, КомуВыданСертификат, АдресСертификата");
	Если ЭтоАдресВременногоХранилища(ЭПСтрока.АдресСертификата) Тогда
		УдалитьИзВременногоХранилища(ЭПСтрока.АдресСертификата);
	КонецЕсли;
	ЭПСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ЭПСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайлСтрока = Элементы.Файлы.ТекущиеДанные;
	
	Если Не ПустаяСтрока(ФайлСтрока.ПолноеИмяФайла) Тогда
		ДелопроизводствоКлиент.ОткрытьФайлНаДиске(ФайлСтрока.ПолноеИмяФайла, ФайлСтрока.Имя);
	ИначеЕсли ЭтоАдресВременногоХранилища(ФайлСтрока.Адрес) Тогда
		ДелопроизводствоКлиент.ОткрытьФайлИзВременногоХранилища(
			ФайлСтрока.Адрес,
			ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
				ФайлСтрока.Имя,
				ФайлСтрока.Расширение));
	Иначе
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	Источник = Файлы.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если Источник.ПолучитьРодителя() = Неопределено
		И Источник.ПолучитьЭлементы().Количество() = 0
		И Строка <> Неопределено Тогда
		Приемник = Файлы.НайтиПоИдентификатору(Строка);
		Если Приемник.ПолучитьРодителя() = Неопределено Тогда
			ЭПДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(Источник);
			Сертификат = ПолучитьСертификатИзПодписи(ЭПДвоичныеДанные);
			ФайлДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(Приемник);
			ПодписьВерна = ПроверитьПодпись(ФайлДвоичныеДанные, ЭПДвоичныеДанные);
			ПеренестиФайлВПодпись(Приемник, Источник, Сертификат, ПодписьВерна);
		КонецЕсли;
	ИначеЕсли Источник.ПолучитьРодителя() <> Неопределено
		И Источник.ПолучитьЭлементы().Количество() = 0
		И Строка = Неопределено Тогда
		ПеренестиПодписьВФайл(Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Расширение = ТекущиеДанные.Расширение;
	
	Если ТекущиеДанные.Оригинал Тогда 
		Если Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение) Тогда 
			ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
			|Вы действительно хотите отметить его как оригинал?'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения("ОригиналПриИзмененииЗавершение", ЭтотОбъект, ТекущиеДанные);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Отметка оригинала'"));
			
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
