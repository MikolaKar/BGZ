
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтложенноеОбновлениеПрав = ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа");
	
	ОбновитьСведенияОбОчереди();
	
	// Добавление всех объектов
    ТипыВладельцев = Метаданные.ПодпискиНаСобытия.ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа.Источник.Типы(); 
    Для Каждого Тип Из ТипыВладельцев Цикл 

		МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			МетаданныеОбъекта.ПолноеИмя());
		
		Строка = ОбъектыДляОбновленияПрав.Добавить();
		Строка.ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		Строка.ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоСсылке(МенеджерОбъекта.ПолучитьСсылку());
		Строка.ПредставлениеОбъекта = МетаданныеОбъекта.Представление() + " (" + Строка.ВидОбъекта + ")";

    КонецЦикла;
	
	// Добавление регистров
    ТипыВладельцев = Метаданные.ПодпискиНаСобытия.ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей.Источник.Типы(); 
    Для Каждого Тип Из ТипыВладельцев Цикл 

		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип);
		
		Строка = ОбъектыДляОбновленияПрав.Добавить();
		Строка.ПолноеИмяОбъекта = МетаданныеРегистра.ПолноеИмя(); 
		Строка.ВидОбъекта = НСтр("ru = 'Регистр'");
		Строка.ПредставлениеОбъекта = МетаданныеРегистра.Представление() + " (" + Строка.ВидОбъекта + ")";
		
	КонецЦикла;
	
	ОбъектыДляОбновленияПрав.Сортировать("ПредставлениеОбъекта");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОчереди()
	
	Если ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОтложенноеОбновлениеПравДоступа") Тогда
		
		РазмерВсейОчереди = РегистрыСведений.ОчередьОбновленияПравДоступа.РазмерОчереди();
		РазмерОчереди1 = РегистрыСведений.ОчередьОбновленияПравДоступа.РазмерОчереди(1);
		РазмерОчереди2 = РегистрыСведений.ОчередьОбновленияПравДоступа.РазмерОчереди(2);
		Элементы.СведенияОбОчереди.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 заданий (%2/%3)'"),
			РазмерВсейОчереди,
			РазмерОчереди1,
			РазмерОчереди2);
			
	Иначе		
		
		Элементы.ГруппаОчередь.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсеОбъекты(Команда)
	
	Для Каждого Строка Из ОбъектыДляОбновленияПрав Цикл
		
		Строка.Обновить = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделениеСоВсехОбъектов(Команда)
	
	Для Каждого Строка Из ОбъектыДляОбновленияПрав Цикл
		
		Строка.Обновить = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередь(Команда)
	
	ОткрытьФорму("РегистрСведений.ОчередьОбновленияПравДоступа.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеПрава(Команда)
	
	Текст = НСтр("ru = 'Будет выполнено обновление прав доступа для всех данных информационной базы. 
		|Это может занять продолжительное время. Обновить права?'");		
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьВсеПраваПродолжение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеПраваПродолжение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Состояние(НСтр("ru = 'Выполняется очистка всех прав доступа. 
			|Пожалуйста, подождите...'"));
		
		ОчиститьВсеПраваНаСервере();
		
		// В случае отложенного обновления права будут обновлены регл. заданием
		Если Не ОтложенноеОбновлениеПрав Тогда
			Состояние(НСтр("ru = 'Выполняется обновление прав доступа для всех данных информационной базы. 
				|Пожалуйста, подождите...'"));
			
			ОбновитьВсеПраваНаСервере();
		КонецЕсли;
	
		Состояние();
		Если ОтложенноеОбновлениеПрав Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Очистка прав доступа завершена.
				|Права будут обновлены в фоновом режиме.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Обновление прав доступа для всех данных информационной базы завершено!'"));
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеПраваНаСервере()
	
	ДокументооборотПраваДоступа.УдалитьВсеДанныеОПравахДоступа();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсеПраваНаСервере()
	
	ДокументооборотПраваДоступа.ОбновитьПраваВсехДанных();
	ОбновитьСведенияОбОчереди();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыбранные(Команда)
	
	ОчиститьСообщения();
	
	ЧислоОтмеченных = 0;
	Для Каждого Строка Из ОбъектыДляОбновленияПрав Цикл
		
		Если Строка.Обновить Тогда
			ЧислоОтмеченных = ЧислоОтмеченных + 1;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЧислоОтмеченных = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не отмечены объекты, права которых надо обновить.'"), 
			, 
			"ОбъектыДляОбновленияПрав");
			
		Возврат;	
		
	КонецЕсли;	
	
	Состояние(НСтр("ru = 'Выполняется обновление прав доступа для выбранных объектов. 
		|Пожалуйста, подождите...'"));
		
	ДатаНачала = ТекущаяДата();
	ОбновитьПраваВыбранныхОбъектовСервер();
	ДатаОкончания = ТекущаяДата();
	
	Состояние();
		
	Если ОтложенноеОбновлениеПрав Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Обработка выбранных объектов завершена (%1 сек).
			|Сформирована очередь обновления прав доступа.'"),
			ДатаОкончания - ДатаНачала);
	Иначе
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	 		НСтр("ru = 'Обновление прав доступа выбранных объектов завершено (%1 сек)!'"),
			ДатаОкончания - ДатаНачала);
	КонецЕсли;	
	
	ПоказатьПредупреждение(, ТекстПредупреждения);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПраваВыбранныхОбъектовСервер()
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
	Попытка
		
		Обновляемыеобъекты = ОбъектыДляОбновленияПрав.Выгрузить(Новый Структура("Обновить", Истина));
		Обновляемыеобъекты.Колонки.Добавить("Приоритет");
		
		// Объекты, чьи права должны быть расчитаны в последнюю очередь
		ЗависимыеОбъекты = 
			ДокументооборотПраваДоступаПереопределяемый.ПолучитьИменаОбъектовСЗависимымиДескрипторами();
		
		Для Каждого Обновляемый из Обновляемыеобъекты Цикл
			Если ЗависимыеОбъекты.Найти(Обновляемый.ПолноеИмяОбъекта) = Неопределено Тогда
				Обновляемый.Приоритет = 0;
			Иначе
				Обновляемый.Приоритет = 1;
			КонецЕсли;
		КонецЦикла;
		
		Обновляемыеобъекты.Сортировать("Приоритет");
		Для Каждого Строка Из Обновляемыеобъекты Цикл
			
			Если ЭтоРегистр(Строка.ПолноеИмяОбъекта) Тогда
				
				ДокументооборотПраваДоступа.ОпределитьПраваПоИмениРегистра(Строка.ПолноеИмяОбъекта);
				ОбновитьПраваДескрипторовРегистра(Строка.ПолноеИмяОбъекта);
				
			Иначе	
				
				ДокументооборотПраваДоступа.ОпределитьПраваПоИмениОбъекта(Строка.ПолноеИмяОбъекта);
				ОбновитьПраваДескрипторовОбъектов(Строка.ПолноеИмяОбъекта);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	Исключение	
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбновитьСведенияОбОчереди();
	
КонецПроцедуры	

&НаСервере
Функция ЭтоРегистр(ПолноеИмя)
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистра)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра)
		ИЛИ Метаданные.РегистрыРасчета.Содержит(МетаданныеРегистра)
		ИЛИ Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;	
	
КонецФункции

&НаСервере
Процедура ОбновитьПраваДескрипторовРегистра(ПолноеИмяРегистра)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.Регистр = &Регистр";

	Запрос.УстановитьПараметр("Регистр", ПолноеИмяРегистра);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Процедура ОбновитьПраваДескрипторовОбъектов(ПолноеИмяОбъекта)
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных";

	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", ИдентификаторОбъектаМетаданных);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияОбОчереди1(Команда)
	
	ОбновитьСведенияОбОчереди();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляОбновленияПравПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляОбновленияПравПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогнозСроковРасчетаОчереди(Команда)
	
	ОткрытьФорму("Обработка.АнализВремениОбработкиОчереди.Форма.Форма");
	
КонецПроцедуры
