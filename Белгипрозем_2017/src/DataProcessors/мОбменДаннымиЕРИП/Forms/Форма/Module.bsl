
&НаКлиенте
Процедура Загрузить(Команда)
	МассивПлатежей = Новый Массив; 
	Файл = Новый Файл(ИмяФайлаЗагрузки);
	Если Файл.Существует() Тогда
		Текст = Новый ЧтениеТекста(ИмяФайлаЗагрузки);
		ПозицияНачалаИмениФайла = СтрНайти(ИмяФайлаЗагрузки, "\", НаправлениеПоиска.СКонца);
		ИмяФайла = Сред(ИмяФАйлаЗагрузки, ПозицияНачалаИмениФайла+1); 
		Стр = Текст.ПрочитатьСтроку();
		//Сообщить(Стр);
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "^");
		НомерСообщения = МассивСтрок[2];
		ДатаСообщения = Дата(МассивСтрок[3]);
		НомерПлатежа = МассивСтрок[9];
		ДатаПлатежа = Дата(МассивСтрок[10]);
		
		Если ФайлНеПодходит(МассивСтрок) Тогда
			Возврат;
		КонецЕсли; 
		
		КоличествоПлатежей = Число(МассивСтрок[4]);
		
		Для й = 1 По КоличествоПлатежей Цикл
			Состояние("Чтение файла "+ИмяФайлаЗагрузки, й/КоличествоПлатежей*100);
			Стр = Текст.ПрочитатьСтроку();
			//Сообщить(Стр);
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "^");
			
			СтруктураПлатежа = Новый Структура();
			СтруктураПлатежа.Вставить("НомерСообщения", НомерСообщения);
			СтруктураПлатежа.Вставить("НомерПлатежа", НомерПлатежа);
			СтруктураПлатежа.Вставить("ДатаПлатежа", ДатаПлатежа);
			СтруктураПлатежа.Вставить("НомерЗаписи", МассивСтрок[0]);
			СтруктураПлатежа.Вставить("НомерДоговора", МассивСтрок[2]);
			СтруктураПлатежа.Вставить("ФИО", МассивСтрок[3]);
			СтруктураПлатежа.Вставить("Адрес", МассивСтрок[4]);
			СтруктураПлатежа.Вставить("СуммаОплаты", Число(МассивСтрок[6]));
			
			// Способ платежа
			СтрокаСпособПлатежа = МассивСтрок[15];
			Если СтрНайти(СтрокаСпособПлатежа, "CASH") > 0 Тогда
				СпособПлатежа = "Касса банка";
			Иначе
				СпособПлатежа = "Другим способом";
			КонецЕсли; 
			
			СтруктураПлатежа.Вставить("СпособПлатежа", СпособПлатежа);
			СтруктураПлатежа.Вставить("ИмяФайла", ИмяФайла);
			МассивПлатежей.Добавить(СтруктураПлатежа);
		КонецЦикла; 
			
		Текст.Закрыть();
	КонецЕсли; 
	Оповестить("Файл ЕРИП прочитан", МассивПлатежей);
	//Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ФайлНеПодходит(МассивСтрок)
	ТекстОшибки = "";
	
	// Проверка даты
	ДатаПлатежейЕРИП = НачалоДня(Дата(МассивСтрок[10]));
	Если ДатаПлатежей <> ДатаПлатежейЕРИП Тогда
		ТекстОшибки = "Дата документа "+Формат(ДатаПлатежей, "ДФ=dd.MM.yyyy")+" не совпадает с датой оплат "+Формат(ДатаПлатежейЕРИП, "ДФ=dd.MM.yyyy")+".";
	КонецЕсли; 
	
	// Проверка Расчетного счета
	Если НомерСчета <> МассивСтрок[8] Тогда
		ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", Символы.ПС) + "Номер счета "+НомерСчета+" не совпадает с номером из ЕРИП "+МассивСтрок[8]+".";
	КонецЕсли; 
	
	Если ТекстОшибки <> "" Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + " Файл не загружен!";
		Сообщить(ТекстОшибки);
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	МассивДоговоров = ДоговораДляПередачиЕРИП();
	КоличествоПлатежей = МассивДоговоров.Количество();
	
	Если КоличествоПлатежей = 0 Тогда
		Сообщить("Нет договоров, зарегистрированных для передачи в ЕРИП!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли; 
	
	НомерФайла = НомерФайла() + 1;
	ИмяФайлаВыгрузки = ПолноеИмяФайлаЕРИП(НомерФайла);
	
	Реквизиты = РеквизитыОтправителя();
	Если Не ЗначениеЗаполнено(Реквизиты) Тогда
		Сообщить("Не удалось получить наши реквизиты! Данные не выгружены!");
		Возврат;
	КонецЕсли; 
	
	Текст = Новый ЗаписьТекста(ИмяФайлаВыгрузки, КодировкаТекста.ANSI);
	
	//Заголовок
	Эл = Новый Массив;
	Эл.Добавить(5); // Версия сообщения 
	Эл.Добавить(Реквизиты.КодАбонента); // Код отправителя сообщения (код абонента производителя услуг) 
	Эл.Добавить(НомерФайла); // Номер сообщения 
	Эл.Добавить(Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss")); // Дата формирования сообщения 
	Эл.Добавить(Формат(КоличествоПлатежей, "ЧЦ=6; ЧГ=0")); // Количество записей в сообщении (количество строк в файле без учета заголовка) 
	Эл.Добавить(Реквизиты.УНП); // Учетный номер плательщика производителя услуг 
	Эл.Добавить(Прав(СокрЛП(Реквизиты.КодБанка), 3)); // Код банка производителя услуг (три последние цифры кода МФО банка, в котором открыт расчетный счет производителя услуги) 
	Эл.Добавить(Реквизиты.РасчетныйСчет); // Расчетный счет производителя услуг 
	Эл.Добавить(Реквизиты.НомерУслуги); // Номер услуги у производителя услуг 
	Эл.Добавить(933); // Код валюты требований к оплате 
	Эл.Добавить("PS"); // Опции списка требований к оплате - P – (Partial) – разрешается частичная загрузка требований (загружаются все неошибочные требования); - S – (Source) – включать ли в запись ответа с ошибкой исходную строку
	
	Стр = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Эл, "^");
	Текст.ЗаписатьСтроку(Стр);
	
	й=0;
	Для каждого Дог Из МассивДоговоров Цикл
		й=й+1;
		Состояние("Запись файла "+ИмяФайлаВыгрузки, й/КоличествоПлатежей*100);
		Эл = Новый Массив;
		Эл.Добавить(2); // Тип записи ( = 2) 
		Если СтрДлина(Дог.НомерДоговора) > 12 Тогда
			Сообщить("Номер договора "+Дог.НомерДоговора+" превышает 12 символов!");
		КонецЕсли; 
		Эл.Добавить(Дог.НомерДоговора); // Номер лицевого счета (уникальное значение, однозначно идентифицирующее потребителя услуг или товар) 
		Эл.Добавить(Лев(Дог.ФИО, 99)); // ФИО потребителя услуг
		Эл.Добавить(Лев(Дог.Адрес, 99)); // Адрес потребителя услуг
		Эл.Добавить(""); // Период оплаты
		Эл.Добавить(Формат(Дог.СуммаПлатежа, "ЧЦ=12; ЧДЦ=2; ЧРД=.; ЧГ=0")); // Сумма задолженности потребителя услуг перед производителем услуг. Отрицательное значение означает задолженность производителя перед потребителем 
		Эл.Добавить(""); // Счетчики (см. таблицу 1.9)
		Эл.Добавить(Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss")); // Дата формирования требования к оплате
		Эл.Добавить(""); // Дополнительная информация, выводимая клиенту при оплате на экран и/или чек. Предоставляемая информация может быть разбита на строки. Для разбиения строк используется символ "~"  (код символа 0x7E) 
		Эл.Добавить(""); // Дополнительные данные (неформализованные данные о требовании к оплате, которые будут выгружены в одноименном поле в исходящих сообщениях 206, 210, 216) 
		Эл.Добавить(""); // Сумма пени, начисленная ПУ (В случае просрочки платежа система ЕРИП не начисляет пеню на эту сумму) 
		Эл.Добавить(""); // Количество проживающих (по умолчанию 1) 
		Эл.Добавить(""); // Количество льготников (по умолчанию 0) 
		Эл.Добавить(""); // Коэффициент 1 (по умолчанию 0) 
		Эл.Добавить(""); // Коэффициент 2 (по умолчанию 0) 

		Стр = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Эл, "^");
		Текст.ЗаписатьСтроку(Стр);
	КонецЦикла; 

	Текст.Закрыть();
	
	ИзменитьНомерНумератора();
	
	ИзменитьСостояниеДоговоров(МассивДоговоров, НомерФайла);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеДоговоров(МассивДоговоров, НомерФайла)
	НачатьТранзакцию();
	Попытка
		Для каждого Дог Из МассивДоговоров Цикл
			НаборЗаписей = РегистрыСведений.мОбменЕРИП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Договор.Установить(Дог.Договор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Период = ТекущаяДата();
				Запись.Договор = Дог.Договор;
				Запись.Состояние = Перечисления.мСостояниеОбменЕРИП.Отправлен;
				Запись.ИмяФайла = Строка(НомерФайла)+".202";
				НаборЗаписей.Записать(Ложь); // не замещать существующие записи
				
			Иначе
				// найти запись для отправки
				Для й = 0 По НаборЗаписей.Количество()-1 Цикл
					Запись = НаборЗаписей[й];	
					Если Запись.Состояние = Перечисления.мСостояниеОбменЕРИП.ДляОтправки Тогда
						Запись.Период = ТекущаяДата();
						Запись.Договор = Дог.Договор;
						Запись.Состояние = Перечисления.мСостояниеОбменЕРИП.Отправлен;
						Запись.ИмяФайла = Строка(НомерФайла)+".202";
						НаборЗаписей.Записать(Истина); // замещать существующие записи
						
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры 

&НаСервере
Процедура ИзменитьНомерНумератора()
	Нумератор = Справочники.Нумераторы.ФайлыЕРИП;
	ДатаРегистрации = ТекущаяДата();
	
	// измерения нумерации
	ПериодНумерации = Нумерация.НачалоПериодаНумерации(Нумератор.Периодичность, ДатаРегистрации);
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	СвязанныйДокумент = Неопределено;
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	Проект = Справочники.Проекты.ПустаяСсылка();
	ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	
	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		  	Справочники.Нумераторы.ФайлыЕРИП);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации",   	ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  	Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", 	СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", 	  	Подразделение);
		ЭлементБлокировки.УстановитьЗначение("Проект", 			  	Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",	ВопросДеятельности);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СтруктураИзмерений = Новый Структура;
		СтруктураИзмерений.Вставить("Нумератор", 		  Справочники.Нумераторы.ФайлыЕРИП);
		СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
		СтруктураИзмерений.Вставить("Организация", 		  Организация);
		СтруктураИзмерений.Вставить("СвязанныйДокумент",  СвязанныйДокумент);
		СтруктураИзмерений.Вставить("Подразделение", 	  Подразделение);
		СтруктураИзмерений.Вставить("Проект", 			  Проект);
		СтруктураИзмерений.Вставить("ВопросДеятельности", ВопросДеятельности);
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
		МенеджерЗаписи.ТекущийНомер = СформированныйНомер;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры 

&НаСервере
Функция РеквизитыОтправителя()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.ИНН КАК УНП,
		|	Корреспонденты.ОсновнойБанковскийСчет.СчетИБАН КАК РасчетныйСчет,
		|	Корреспонденты.ОсновнойБанковскийСчет.Банк.Код КАК КодБанка,	// Для ЕРИП нужен цифровой код банка
		|	М_КодАбонентаДляЕРИП.Значение КАК КодАбонента,
		|	М_НомерУслугиДляЕРИП.Значение КАК НомерУслуги
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты,
		|	Константа.М_КодАбонентаДляЕРИП КАК М_КодАбонентаДляЕРИП,
		|	Константа.М_НомерУслугиДляЕРИП КАК М_НомерУслугиДляЕРИП
		|ГДЕ
		|	Корреспонденты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Константы.НашаОрганизация.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Реквизиты = Новый Структура();
		Реквизиты.Вставить("УНП", Выборка.УНП);
		Реквизиты.Вставить("РасчетныйСчет", Выборка.РасчетныйСчет);
		Реквизиты.Вставить("КодБанка", Выборка.КодБанка);
		Реквизиты.Вставить("КодАбонента", Выборка.КодАбонента);
		Реквизиты.Вставить("НомерУслуги", Выборка.НомерУслуги);
		Возврат Реквизиты;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолноеИмяФайлаЕРИП(НомерФайла)
	Возврат Константы.М_КаталогОбменЕРИП.Получить()+"\in\"+СОкрЛП(НомерФайла)+".202";	
КонецФункции 

&НаСервере
Функция НомерФайла()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Нумерация.ТекущийНомер
		|ИЗ
		|	РегистрСведений.Нумерация КАК Нумерация
		|ГДЕ
		|	Нумерация.Нумератор = &Нумератор
		|	И Нумерация.ПериодНумерации = &ПериодНумерации";
	
	Запрос.УстановитьПараметр("Нумератор", Справочники.Нумераторы.ФайлыЕРИП);
	Запрос.УстановитьПараметр("ПериодНумерации", НачалоГода(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ТекущийНомер;
	КонецЦикла;
	
	Возврат 0;
КонецФункции
 
&НаСервере
Функция ДоговораДляПередачиЕРИП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбменЕРИПСрезПоследних.Договор,
		|	мОбменЕРИПСрезПоследних.Договор.Корреспондент КАК Корреспондент,
		|	мОбменЕРИПСрезПоследних.Сумма КАК Сумма
		|ПОМЕСТИТЬ ДоговорыДляОтправки
		|ИЗ
		|	РегистрСведений.мОбменЕРИП.СрезПоследних(, Состояние = ЗНАЧЕНИЕ(Перечисление.мСостояниеОбменЕРИП.ДляОтправки)) КАК мОбменЕРИПСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Представление КАК Адрес,
		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
		|ПОМЕСТИТЬ Адреса
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ДоговорыДляОтправки.Корреспондент
		|			ИЗ
		|				ДоговорыДляОтправки КАК ДоговорыДляОтправки)
		|	И КорреспондентыКонтактнаяИнформация.Вид = &Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Адреса.Адрес КАК Адрес,
		|	ДоговорыДляОтправки.Договор КАК Договор,
		|	ДоговорыДляОтправки.Договор.РегистрационныйНомер КАК НомерДоговора,
		|	ДоговорыДляОтправки.Корреспондент.Наименование КАК ФИО,
		|	ДоговорыДляОтправки.Сумма КАК СуммаПлатежа
		|ИЗ
		|	ДоговорыДляОтправки КАК ДоговорыДляОтправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Адреса КАК Адреса
		|		ПО ДоговорыДляОтправки.Корреспондент = Адреса.Корреспондент";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица);
	//Запрос.УстановитьПараметр("Состояние", Перечисления.мСостояниеОбменЕРИП.ДляОтправки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивДоговоров = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПлатежа = Новый Структура();
		СтруктураПлатежа.Вставить("Договор", Выборка.Договор);
		СтруктураПлатежа.Вставить("НомерДоговора", Выборка.НомерДоговора);
		СтруктураПлатежа.Вставить("ФИО", Выборка.ФИО);
		СтруктураПлатежа.Вставить("СуммаПлатежа", Выборка.СуммаПлатежа);
		СтруктураПлатежа.Вставить("Адрес", Выборка.Адрес);
		МассивДоговоров.Добавить(СтруктураПлатежа);
	КонецЦикла;
	
	Возврат МассивДоговоров; 
КонецФункции 
 
&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть файл";
	ДиалогВыбораФайла.Фильтр    = "Сообщение ЕРИП (*.210)|*.210";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Выбрать файл";
	ДиалогВыбораФайла.Фильтр    = "Сообщение ЕРИП (*.202)|*.202";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ДатаПлатежей") Тогда
		// Открытие из Реестра текущих платежей
		Элементы.ГруппаВыгрузка.Видимость = Ложь;
		ДатаПлатежей = Параметры.ДатаПлатежей;
		НомерСчета = Параметры.НашБанковскийСчет.СчетИБАН;
	Иначе
		// Открытие из меню
		Элементы.ГруппаЗагрузка.Видимость = Ложь;
	КонецЕсли; 
	Ошибки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтветы(Команда)
	КаталогОбмена = мОбменЕРИПСервер.ПолучитьКаталогОбменаЕРИП(); 
	КаталогГдеИскать = КаталогОбмена + "\out";
    МассивНайденныхФайлов = НайтиФайлы(КаталогГдеИскать, "*.204");
	
	Если МассивНайденныхФайлов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "В каталоге " +КаталогГдеИскать+ " нет файлов с ответами!", 2);
		Возврат;
	КонецЕсли;	
	
	Для Каждого Файл Из МассивНайденныхФайлов Цикл
		Текст = Новый ЧтениеТекста(КаталогГдеИскать+"\"+Файл.Имя);
		Стр = Текст.ПрочитатьСтроку();
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "^");
		НомерИсхСообщения = МассивСтрок[4];
		РезультатОбработки = МассивСтрок[6];
		КоличествоОшибок = Число(МассивСтрок[8]);
		
		// Договоры отправленные
		ИмяФайлаОтправки = "" + НомерИсхСообщения + ".202";
		ЗаполнитьДоговоры(ИмяФайлаОтправки);
		
		// Договоры с ошибками
		Ошибки.Очистить();
		
		Для й=1 По КоличествоОшибок Цикл
			Стр = Текст.ПрочитатьСтроку();
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "^");
			
			Стр = Ошибки.Добавить();
			Стр.НомерЗаписи = Число(МассивСтрок[0]);
			Стр.НомерДоговора = МассивСтрок[3];
			Стр.Ошибка = МассивСтрок[1];
		КонецЦикла; 
		Текст.Закрыть();
		
		ОбработатьОтвет(Файл.Имя);
		ПереместитьФайл(КаталогГдеИскать+"\"+Файл.Имя, КаталогГдеИскать+"\bak\"+Файл.Имя);
		ПоказатьОповещениеПользователя("Файл ответ " + Файл.Имя + " обработан!");
		
		//Если ОбработатьОтвет(Файл.Имя) Тогда
		//	// Перемещение файла-ответ
		//	ПереместитьФайл(КаталогГдеИскать+"\"+Файл.Имя, КаталогГдеИскать+"\bak\"+Файл.Имя);
		//	ПоказатьОповещениеПользователя("Файл ответ " + Файл.Имя + " обработан!");
		//Иначе
		//	Сообщить("Файл ответ " + Файл.Имя + " не обработан!");
		//КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговоры(ИмяФайлаОтправки)
	// Договоры отправленные в ЕРИП файлом ИмяФайлаОтправки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбменЕРИПСрезПоследних.Договор КАК Договор,
		|	мОбменЕРИПСрезПоследних.Договор.РегистрационныйНомер КАК РегНомер,
		|	мОбменЕРИПСрезПоследних.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.мОбменЕРИП.СрезПоследних КАК мОбменЕРИПСрезПоследних
		|ГДЕ
		|	мОбменЕРИПСрезПоследних.ИмяФайла = &ИмяФайла";
	
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаОтправки);
	
	Тз = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(Тз, "Договоры");
	
КонецПроцедуры

&НаСервере
Функция ОбработатьОтвет(ФайлОтвет)
	Ошибка = Перечисления.мСостояниеОбменЕРИП.Ошибка;
	Ожидание = Перечисления.мСостояниеОбменЕРИП.ОжиданиеОплаты;
	
	НаборЗаписей = РегистрыСведений.мОбменЕРИП.СоздатьНаборЗаписей();
	Период = ТекущаяДата();
	
	Для Каждого Стр Из Договоры Цикл
		Отбор = Новый Структура("НомерДоговора", Стр.РегНомер);
		ИскСтроки = Ошибки.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			// успешно - ничего не меняем
			Продолжить;
			//Состояние = Ожидание;
		Иначе
			// ошибка
			Состояние = Ошибка;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Период;
		Запись.Договор = Стр.Договор;
		Запись.Сумма = Стр.Сумма;
		Запись.ИмяФайла = ФайлОтвет;
		Запись.Состояние = Состояние;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Договор "+ИскСтроки[0].НомерДоговора+" не отправлен. Ошибка: "+ИскСтроки[0].Ошибка+".";
		Сообщение.Сообщить();
		//мОбменЕРИПСервер.ЗарегистрироватьСостояниеЕРИП(Стр.Договор, Состояние, ФайлОтвет);
	КонецЦикла;	
	
	ОтветОбработан = Истина;
	Попытка
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;	
	Исключение
		ОтветОбработан = Ложь;
	КонецПопытки;
	Возврат ОтветОбработан;
КонецФункции
	
