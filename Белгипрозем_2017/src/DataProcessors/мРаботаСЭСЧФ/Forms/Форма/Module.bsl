
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Период.ДатаНачала       = НачалоМесяца(ТекущаяДата());
	Период.ДатаОкончания    = КонецМесяца(ТекущаяДата());
	ДатаСозданияЭСЧФ        = ТекущаяДата();
	
	ПолучитьНашиРеквизиты();
	
	// Тестовый портал
	//СтрокаКоннекта = "https://185.32.226.170:4443/InvoicesWS/services/InvoicesPort?wsdl";
	
	// Рабочий портал
	СтрокаКоннекта = "https://ws.vat.gov.by:443/InvoicesWS/services/InvoicesPort?wsdl";
	
	КаталогСхемПроверкиЭСЧФ = Константы.М_КаталогСхемПроверкиЭСЧФ.Получить();
	КаталогВыгрузки = Константы.М_КаталогВыгрузкиЭСЧФ.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(КаталогСхемПроверкиЭСЧФ) Тогда
		Сообщить("Не заполнена константа ""Каталог схем проверки ЭСЧФ""!");
		Сообщить("Установите константу и перезапустите обработку!");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Сообщить("Не заполнена константа ""Каталог выгрузки ЭСЧФ""!");
		Сообщить("Установите константу и перезапустите обработку!");
	КонецЕсли; 
	
	УстановитьНачальныйНомерЭСЧФ();
	ОбновитьДанныеФормы();
	
	ПодборВТаблицу = "";
КонецПроцедуры

&НаСервере
Процедура АннулироватьНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	// Аннулировать можно только не подписанные покупателем ЭСЧФ иначе на согласование
	АннулироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальныйНомерЭСЧФ()
	НачальныйНомерЭСЧФ = ПривестиНомерЭСЧФКФормату(ПолучитьПоследнийНомерЭСЧФ() + 1);
КонецПроцедуры

&НаСервере
Функция ПолучитьПоследнийНомерЭСЧФ()
	Запрос       = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	мЭСЧФ.Номер
		|ИЗ
		|	Документ.мЭСЧФ КАК мЭСЧФ
		|ГДЕ
		|	ГОД(мЭСЧФ.Дата) = &ГодСФ
		|УПОРЯДОЧИТЬ ПО
		|	мЭСЧФ.Номер УБЫВ";
		
	ГодСФ                  = Год(ДатаСозданияЭСЧФ);
	Запрос.УстановитьПараметр("ГодСФ",ГодСФ);
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ?(ВыборкаДетальныеЗаписи.Следующий(), ОбщегоНазначения.ВЧисло(ВыборкаДетальныеЗаписи.Номер), 0);
КонецФункции

&НаСервере
Процедура ЗаполнитьАктыНаСервере()
	Акты.Очистить();
	
	// Акты с датой регистрации в периоде
	// Акты заактированные в периоде
	// Акты состояние Подписан, ВрученЗаказчику, ВрученЗаказчикуКопия (отбор в форме)
	// Акты, не вошедшие в ЭСЧФ
	// НДС > 0
	// Акты состояние <> НеПодписан
	
	// Акты с датой регистрации в периоде
	// Акты заактированные в периоде
	// Акты состояние Подписан, ВрученЗаказчику, ВрученЗаказчикуКопия (отбор в форме)
	// Акты, не вошедшие в ЭСЧФ
	// НДС = 0
	// Акты по юр лицам
	// Акты состояние <> НеПодписан
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеализация.Ссылка КАК Ссылка,
		|	мРеализация.Дата КАК Дата,
		|	мРеализация.СерияТТН КАК Серия,
		|	мРеализация.ЭтапДоговора КАК ЭтапДоговора,
		|	ЕСТЬNULL(мСвязиЭСЧФ.ЭСЧФ, ИСТИНА) КАК ЭСЧФ,
		|	мРеализация.Состояние КАК СостояниеАкта
		|ПОМЕСТИТЬ РеализацииСсылки
		|ИЗ
		|	Документ.мРеализация КАК мРеализация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСвязиЭСЧФ КАК мСвязиЭСЧФ
		|		ПО (мСвязиЭСЧФ.ДокументРеализации = мРеализация.Ссылка)
		|ГДЕ
		|	мРеализация.Дата МЕЖДУ &Дата1 И &Дата2
		|	И мРеализация.Проведен
		|	И мРеализация.Корреспондент = &Корреспондент
		|	И мРеализация.Договор = &Договор
		|	И мРеализация.Состояние <> ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.НеПодписан)
		|	И (мРеализация.Состояние = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ВрученЗаказчику)
		|			ИЛИ мРеализация.Состояние = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчиком)
		|			ИЛИ мРеализация.Состояние = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчикомКопия))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	мРеализацияНоменклатура.Ссылка КАК Ссылка,
		|	СУММА(мРеализацияНоменклатура.НДС) КАК НДС,
		|	СУММА(мРеализацияНоменклатура.Всего) КАК Всего
		|ПОМЕСТИТЬ ИтогиРеализации
		|ИЗ
		|	Документ.мРеализация.Номенклатура КАК мРеализацияНоменклатура
		|ГДЕ
		|	мРеализацияНоменклатура.Ссылка В
		|			(ВЫБРАТЬ
		|				РеализацииСсылки.Ссылка
		|			ИЗ
		|				РеализацииСсылки КАК РеализацииСсылки)
		|
		|СГРУППИРОВАТЬ ПО
		|	мРеализацияНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацииСсылки.Ссылка КАК Реализация,
		|	РеализацииСсылки.Дата КАК ДатаСовершенияОперации,
		|	РеализацииСсылки.Серия КАК Серия,
		|	РеализацииСсылки.ЭтапДоговора,
		|	РеализацииСсылки.ЭСЧФ,
		|	РеализацииСсылки.СостояниеАкта,
		|	ИтогиРеализации.НДС,
		|	ИтогиРеализации.Всего
		|ПОМЕСТИТЬ Реализации
		|ИЗ
		|	РеализацииСсылки КАК РеализацииСсылки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиРеализации КАК ИтогиРеализации
		|		ПО РеализацииСсылки.Ссылка = ИтогиРеализации.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Ссылка,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта,
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаАкта,
		|	"""" КАК Серия,
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаСовершенияОперации,
		|	ВнутренниеДокументы.ЭтапДоговора КАК ЭтапДоговора,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС КАК СтавкаНДС,
		|	мРеквизитыАктовВыполненныхРабот.Сумма КАК Сумма,
		|	мРеквизитыАктовВыполненныхРабот.СуммаНДС КАК НДС,
		|	ЕСТЬNULL(мСвязиЭСЧФ.ЭСЧФ, ИСТИНА) КАК ЭСЧФ,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСвязиЭСЧФ КАК мСвязиЭСЧФ
		|		ПО (мСвязиЭСЧФ.ДокументРеализации = ВнутренниеДокументы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|		ПО (мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка)
		|ГДЕ
		|	ВнутренниеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|	И НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот)
		|	И ВнутренниеДокументы.Ссылка.ЭтапДоговора.Владелец.Корреспондент = &Корреспондент
		|	И ВнутренниеДокументы.ЭтапДоговора.Владелец = &Договор
		|	И мРеквизитыАктовВыполненныхРабот.СостояниеАкта <> ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.НеПодписан)
		|	И (мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ВрученЗаказчику)
		|			ИЛИ мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчиком)
		|			ИЛИ мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчикомКопия)
		|			ИЛИ ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО ""%Гео%""
		|			ИЛИ ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО ""%ЗИС%""
		|			ИЛИ ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО ""%ГКИ%""
		|			ИЛИ ВнутренниеДокументы.РегистрационныйНомер ПОДОБНО ""%/К%"")
		|	И (мРеквизитыАктовВыполненныхРабот.СуммаНДС > 0
		|			ИЛИ мРеквизитыАктовВыполненныхРабот.СуммаНДС = 0
		|				И мРеквизитыАктовВыполненныхРабот.Владелец.Корреспондент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Реализации.Реализация,
		|	Реализации.Реализация.НомерТТН,
		|	Реализации.ДатаСовершенияОперации,
		|	Реализации.Серия,
		|	Реализации.ДатаСовершенияОперации,
		|	Реализации.ЭтапДоговора,
		|	Реализации.ЭтапДоговора.СтавкаНДС,
		|	Реализации.Всего,
		|	Реализации.НДС,
		|	ЕСТЬNULL(Реализации.ЭСЧФ, ИСТИНА),
		|	Реализации.СостояниеАкта
		|ИЗ
		|	Реализации КАК Реализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Акты.Ссылка КАК Акт,
		|	Акты.НомерАкта КАК НомерАкта,
		|	Акты.ДатаАкта КАК ДатаАкта,
		|	Акты.Серия КАК Серия,
		|	Акты.СтавкаНДС КАК СтавкаНДС,
		|	Акты.Сумма КАК Заактировано,
		|	Акты.НДС КАК НДС,
		|	Акты.ЭтапДоговора.Владелец.РегистрационныйНомер КАК НомерДоговора,
		|	Акты.ЭтапДоговора.Владелец.ДатаРегистрации КАК ДатаДоговора,
		|	Акты.ЭтапДоговора.ВидРабот.ПолноеНаименование КАК НаименованиеРаботы,
		|	Акты.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам.ВидЭкономическойДеятельности КАК КодОКЭД,
		|	Акты.СостояниеАкта КАК СостояниеАкта,
		|	Акты.ДатаСовершенияОперации КАК ДатаСовершенияОперации,
		|	Акты.Ссылка.Корреспондент КАК Корреспондент,
		|	Акты.Ссылка.Корреспондент.мВзаимозависимоеЛицо КАК ВзаимозависимоеЛицо,
		|	Акты.Ссылка.Корреспондент.мСтрана.Код КАК КодСтраны,
		|	Акты.Ссылка.Корреспондент.мКодФилиала КАК КодФилиала,
		|	ВЫРАЗИТЬ(Акты.Ссылка.Корреспондент.ПолноеНаименование КАК СТРОКА(1000)) КАК НазваниеКорреспондента,
		|	Акты.Ссылка.Корреспондент.ИНН КАК УНПКорреспондента,
		|	КорреспондентыКонтактнаяИнформация.Представление КАК АдресКорреспондента
		|ИЗ
		|	Акты КАК Акты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|		ПО Акты.Ссылка.Корреспондент = КорреспондентыКонтактнаяИнформация.Ссылка
		|			И (КорреспондентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
		|				ИЛИ КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица))
		|ГДЕ
		|	Акты.ЭСЧФ = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерАкта";
	
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Если ЗначениеЗаполнено(СостояниеАкта) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ВрученЗаказчику)
		|			ИЛИ мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчиком)
		|			ИЛИ мРеквизитыАктовВыполненныхРабот.СостояниеАкта = ЗНАЧЕНИЕ(Перечисление.мСостоянияАктовВыполненныхРабот.ПодписанЗаказчикомКопия)",
		"мРеквизитыАктовВыполненныхРабот.СостояниеАкта = &СостояниеАкта"); 	
		
		Запрос.УстановитьПараметр("СостояниеАкта", СостояниеАкта);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОтборКорреспондент) Тогда
		Запрос.УстановитьПараметр("Корреспондент", ОтборКорреспондент);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И мРеализация.Корреспондент = &Корреспондент", ""); 	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.Ссылка.ЭтапДоговора.Владелец.Корреспондент = &Корреспондент", ""); 	
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборДоговор) Тогда
		Запрос.УстановитьПараметр("Договор", ОтборДоговор);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И мРеализация.Договор = &Договор", ""); 	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.ЭтапДоговора.Владелец = &Договор", ""); 	
	КонецЕсли; 
	
	//Запрос.УстановитьПараметр("Аннулирован", Перечисления.мСтатусыСФ.Аннулирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрАкты = Акты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрАкты, Выборка);
        Если ЗначениеЗаполнено(СтрАкты.УНПКорреспондента) Тогда
            СтрАкты.Пометка = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрАкты.КодСтраны) Тогда
			СтрАкты.КодСтраны = "112";
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАкты(Команда)
	ЗаполнитьАктыНаСервере();
	ОбновитьЗаголовкиЗакладок();
КонецПроцедуры
	
&НаСервере
Процедура СоздатьЭСЧФНаСервере(Исправленный = Ложь)
	НачатьТранзакцию();
    Сч = 0;
	Для каждого СтрАкт Из Акты Цикл
		Если Не СтрАкт.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТТН = ТипЗнч(СтрАкт.Акт) = Тип("ДокументСсылка.мРеализация");

		Сч = Сч + 1;
        Если Сч%50=0 Тогда
            ЗафиксироватьТранзакцию();
            НачатьТранзакцию();
        КонецЕсли;
		Док = Документы.мЭСЧФ.СоздатьДокумент();
		Док.Дата = ДатаСозданияЭСЧФ;
		Док.Номер = НачальныйНомерЭСЧФ;
		
		НачальныйНомерЭСЧФ = ПривестиНомерЭСЧФКФормату(ОбщегоНазначения.ВЧисло(НачальныйНомерЭСЧФ) + 1);
		//Док.УстановитьНовыйНомер();
        
		Док.СтатусСФ = Перечисления.мСтатусыСФ.Подготовлен1С;
		Док.АктВыполненныхРабот = СтрАкт.Акт;
		
		Док._01_НомерСЧ = Строка(НашУНП)+"-"+Формат(Год(ДатаСозданияЭСЧФ),"ЧГ=0")+"-"+Док.Номер;
		Док._03_ДатаСовершенияОперации = СтрАкт.ДатаСовершенияОперации;
		Если Исправленный Тогда
			Док._04_ТипСЧ = Перечисления.мТипСЧ.Исправленный;
			Док._05_ОтноситсяКСЧ = СтрАкт.ЭСЧФ;//ПолучитьНомерЭСЧФ(СтрАкт.ЭСЧФ);
			Док._05_1_ДатаАннулированияСФ = СтрАкт.ДатаСовершенияОперации;
		Иначе
			Док._04_ТипСЧ = Перечисления.мТипСЧ.Исходный;
		КонецЕсли; 
		Док._06_СтатусПоставщика = Перечисления.мСтатусыПоставщика.Продавец;
		Док._06_1_ВзаимозависимоеЛицо = СтрАкт.ВзаимозависимоеЛицо;
		Док._07_КодСтраныПоставщика = "112";
		Док._08_УНППоставщика = НашУНП;
		Док._09_Поставщик = НашеНазвание;
		Док._10_ЮрАдресПоставщика = НашАдрес;
		Если ЗначениеЗаполнено(СтрАкт.УНПКорреспондента) Тогда
			// Это юрлицо
			Док._15_СтатусПолучателя = Перечисления.мСтатусыПолучателя.Покупатель;
			Док._17_УНППолучателя = СтрАкт.УНПКорреспондента;
			Док._16_КодСтраныПолучателя = СтрАкт.КодСтраны;
			Док._17_1_КодФилиалаПолучателя = СтрАкт.КодФилиала;
			Док._18_Получатель = СтрАкт.НазваниеКорреспондента;
			Док._19_ЮрАдресПолучателя = СтрАкт.АдресКорреспондента;
		Иначе
			Док._15_СтатусПолучателя = Перечисления.мСтатусыПолучателя.Потребитель;
		КонецЕсли; 
		Док._30_1_НомерДоговора = СтрАкт.НомерДоговора; 
		Док._30_2_ДатаДоговора = СтрАкт.ДатаДоговора;
		
		Если ЭтоТТН Тогда
			СтрРаздел4 = Док.Раздел4.Добавить();
			СтрРаздел4._22_КодСтраныГрузоотправителя = "112";
			СтрРаздел4._23_УНПГрузоотправителя = НашУНП;
			СтрРаздел4._24_Грузоотправитель = НашеНазвание;
			СтрРаздел4._25_АдресОтправки = НашАдрес;
			СтрРаздел4._26_КодСтраныГрузополучателя = "112";
			Если ЗначениеЗаполнено(СтрАкт.УНПКорреспондента) Тогда
				// Это юрлицо
				СтрРаздел4._27_УНПГрузополучателя = СтрАкт.УНПКорреспондента;
				СтрРаздел4._28_Грузополучатель = Док._18_Получатель;
				СтрРаздел4._29_АдресДоставки = Док._19_ЮрАдресПолучателя;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрРаздел5 = Док.Раздел5.Добавить();
		Если ЭтоТТН Тогда
			СтрРаздел5._30_3_ВидДокумента = Перечисления.мВидыДокументовЭСЧФ.ТН2;
			СтрРаздел5._30_5_ДатаДокумента = СтрАкт.ДатаАкта;
			СтрРаздел5._30_6_КодТипаБланка = СтрАкт.Акт.КодБланка;
			СтрРаздел5._30_7_СерияБланка = СтрАкт.Серия;
			СтрРаздел5._30_8_НомерБланка = СтрАкт.НомерАкта;
		Иначе
			СтрРаздел5._30_3_ВидДокумента = Перечисления.мВидыДокументовЭСЧФ.АктВыполненныхРабот;
			СтрРаздел5._30_5_ДатаДокумента = СтрАкт.ДатаАкта;
			СтрРаздел5._30_8_НомерБланка = СтрАкт.НомерАкта;
		КонецЕсли; 
		
		Если ЭтоТТН Тогда
			// может быть несколько строк	
			Док.ВсегоСтомость = 0;
			Док.ВсегоНДС = 0;
			Док.ВсегоСтомостьСНДС = 0;
			
			Номенклатура = СтрАкт.Акт.Номенклатура;
			Для каждого СтрТЧ из Номенклатура Цикл
				СтрРаздел6 = Док.Раздел6.Добавить();                     
				СтрРаздел6._2_Наименование = СтрТЧ.НоменклатураПроизводства.Наименование;
				Если СтрАкт.ВзаимозависимоеЛицо Тогда
					СтрРаздел6._3_2_КодОКЭД = СтрАкт.КодОКЭД;
				КонецЕсли; 
				СтрРаздел6._4_ЕдиницаИзмерения = "шт";
				СтрРаздел6._5_Количество = СтрТЧ.Количество;
				СтрРаздел6._6_Цена = СтрТЧ.Цена;
				СтрРаздел6._7_Стоимость = СтрТЧ.Сумма;
				СтрРаздел6._11_СтоимостьСНДС = СтрТЧ.Всего;
				СтрРаздел6._9_СтавкаНДС = СтрТЧ.СтавкаНДС;
				СтрРаздел6._10_СуммаНДС = СтрТЧ.НДС;
				Если СтрТЧ.НДС = 0 Тогда
					СтрРаздел6._12_ДопДанные1 = Перечисления.мДополнительныеДанныеЭСЧФ.ОсвобождениеОтНДС;
				КонецЕсли; 
				
				// Итого по ЭСЧФ
				Док.ВсегоСтомость = Док.ВсегоСтомость + СтрРаздел6._7_Стоимость;
				Док.ВсегоНДС = Док.ВсегоНДС + СтрРаздел6._10_СуммаНДС;
				Док.ВсегоСтомостьСНДС = Док.ВсегоСтомостьСНДС + СтрРаздел6._11_СтоимостьСНДС;
			КонецЦикла; 
		Иначе
			// одна строка
			СтрРаздел6 = Док.Раздел6.Добавить();                     
			СтрРаздел6._2_Наименование = СтрАкт.НаименованиеРаботы;
			Если СтрАкт.ВзаимозависимоеЛицо Тогда
				СтрРаздел6._3_2_КодОКЭД = СтрАкт.КодОКЭД;
			КонецЕсли; 
			СтрРаздел6._7_Стоимость = СтрАкт.Заактировано - СтрАкт.НДС;
			СтрРаздел6._11_СтоимостьСНДС = СтрАкт.Заактировано;
			СтрРаздел6._9_СтавкаНДС = СтрАкт.СтавкаНДС;
			СтрРаздел6._10_СуммаНДС = СтрАкт.НДС;
			Если СтрАкт.НДС = 0 Тогда
				СтрРаздел6._12_ДопДанные1 = Перечисления.мДополнительныеДанныеЭСЧФ.ОсвобождениеОтНДС;
			КонецЕсли; 
			
			// Итого по ЭСЧФ
			Док.ВсегоСтомость = СтрРаздел6._7_Стоимость;
			Док.ВсегоНДС = СтрРаздел6._10_СуммаНДС;
			Док.ВсегоСтомостьСНДС = СтрРаздел6._11_СтоимостьСНДС;
		КонецЕсли; 
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
		// Установка связи
		НаборЗаписей = РегистрыСведений.мСвязиЭСЧФ.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.ЭСЧФ.Установить(Док.Ссылка);
		//НаборЗаписей.Отбор.ДокументРеализации.Установить(СтрАкт.Акт);
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ДокументРеализации = СтрАкт.Акт;
		НовЗапись.ЭСЧФ = Док.Ссылка;
		НаборЗаписей.Записать(Истина);
		
    КонецЦикла; 
    Если ТранзакцияАктивна() Тогда
        ЗафиксироватьТранзакцию();
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭСЧФ(ИмяТаблицы = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭСЧФ.Ссылка КАК ЭСЧФ,
		|	мЭСЧФ.Номер КАК Номер,
		|	ИСТИНА КАК Пометка,
		|	мЭСЧФ.АктВыполненныхРабот КАК Акт,
		|	мЭСЧФ.СтатусСФ КАК Статус,
		|	мЭСЧФ.Дата КАК ДатаЭСЧФ
		|ИЗ
		|	Документ.мЭСЧФ КАК мЭСЧФ
		|ГДЕ
		|	мЭСЧФ._03_ДатаСовершенияОперации МЕЖДУ &Дата1 И &Дата2
		|	И мЭСЧФ.Проведен
		|	И мЭСЧФ.СтатусСФ В(&МассивСтатусов)
		|	И мЭСЧФ.АктВыполненныхРабот.Корреспондент = &Корреспондент
		|	И мЭСЧФ.АктВыполненныхРабот.ЭтапДоговора.Владелец = &Договор";
	
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	
	Если ЗначениеЗаполнено(ОтборКорреспондент) Тогда
		Запрос.УстановитьПараметр("Корреспондент", ОтборКорреспондент);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И мЭСЧФ.АктВыполненныхРабот.Корреспондент = &Корреспондент", ""); 	
	КонецЕсли; 
	Если ЗначениеЗаполнено(ОтборДоговор) Тогда
		Запрос.УстановитьПараметр("Договор", ОтборДоговор);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И мЭСЧФ.АктВыполненныхРабот.ЭтапДоговора.Владелец = &Договор", ""); 	
	КонецЕсли; 
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		МассивСтатусов = Новый Массив;
		Если ИмяТаблицы = "Подготовленные" Тогда
			МассивСтатусов.Добавить(Перечисления.мСтатусыСФ.Подготовлен1С);
			МассивСтатусов.Добавить(Перечисления.мСтатусыСФ.ПустаяСсылка());
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И мЭСЧФ.СтатусСФ В(&МассивСтатусов)", ""); 	
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Подготовленные.Очистить();
	БезСтатусов.Очистить();
	Выставленные.Очистить();
	Аннулированные.Очистить();
	
	Подготовлен1С = Перечисления.мСтатусыСФ.Подготовлен1С;
	ВРазработке = Перечисления.мСтатусыСФ.ВРазработке;
	НеОпределен = Перечисления.мСтатусыСФ.НеОпределен;
	Выставлен = Перечисления.мСтатусыСФ.Выставлен;
	ВыставленПодписанПолучателем = Перечисления.мСтатусыСФ.ВыставленПодписанПолучателем;
	ВыставленАннулированПоставщиком = Перечисления.мСтатусыСФ.ВыставленАннулированПоставщиком;
	НаСогласовании = Перечисления.мСтатусыСФ.НаСогласовании;
	Аннулирован = Перечисления.мСтатусыСФ.Аннулирован;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Подготовлен1С Тогда
			НовСтр = Подготовленные.Добавить();
		ИначеЕсли Выборка.Статус = ВРазработке Тогда
			НовСтр = БезСтатусов.Добавить();
		ИначеЕсли Выборка.Статус = НеОпределен Тогда
			НовСтр = БезСтатусов.Добавить();
		ИначеЕсли Выборка.Статус = Выставлен Тогда
			НовСтр = Выставленные.Добавить();
		ИначеЕсли Выборка.Статус = ВыставленПодписанПолучателем Тогда
			НовСтр = Выставленные.Добавить();
		ИначеЕсли Выборка.Статус = НаСогласовании Тогда
			НовСтр = Выставленные.Добавить();
		ИначеЕсли Выборка.Статус = Аннулирован Тогда
			НовСтр = Аннулированные.Добавить();
		ИначеЕсли Выборка.Статус = ВыставленАннулированПоставщиком Тогда
			НовСтр = Аннулированные.Добавить();
		Иначе
			НовСтр = БезСтатусов.Добавить();
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла; 
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЭСЧФ(Команда)
    Если Не ЗначениеЗаполнено(ДатаСозданияЭСЧФ) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Укажите дату создания ЭСЧФ!";
        Сообщение.Поле = "ДатаСозданияЭСЧФ";
        Сообщение.Сообщить(); 
    	Возврат;
	КонецЕсли; 
	
    Если Не ЗначениеЗаполнено(НачальныйНомерЭСЧФ) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Укажите начальный номер ЭСЧФ!";
        Сообщение.Поле = "НачальныйНомерЭСЧФ";
        Сообщение.Сообщить(); 
    	Возврат;
	КонецЕсли; 
	
	СоздатьЭСЧФНаСервере();
	
	Подготовленные.Очистить();
	ЗаполнитьЭСЧФ("Подготовленные");
	//ЗаполнитьПодготовленныеЭСЧФ();
	
	
	ОбновитьЗаголовокЗакладки("Подготовленные");
    
    й = Акты.Количество()-1;
    Пока й >=0 Цикл
        Отбор = Новый Структура("Акт", Акты[й].Акт); 
        ИскСтрока = Подготовленные.НайтиСтроки(Отбор);
    	Если ИскСтрока.Количество() > 0 Тогда
            Акты.Удалить(й);    
        КонецЕсли;
        й = й-1;
    КонецЦикла; 
	ОбновитьЗаголовокЗакладки("Акты");
        
КонецПроцедуры

&НаСервере
Функция СоздатьФабрикуXDTOНаСервере(ЭСЧФ)
	ТипСчета = ФабрикаXDTO.Пакеты.Получить("http://www.w3schools.com").КорневыеСвойства.Получить("issuance").Тип;
	Счет = ФабрикаXDTO.Создать(ТипСчета);
	//Счет.sender = Константы.НашаОрганизация.Получить().ИНН;
	Счет.sender = НашУНП;
	
	// Общие реквизиты 
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "general"));
	//ТекТип = Счет.Свойства().Получить("general").Тип;
	//ОбластьСчета = ФабрикаXDTO.Создать(ТекТип);
	ОбластьСчета.number = ЭСЧФ._01_НомерСЧ;
	//ОбластьСчета.dateIssuance = XMLДата(ЭСЧФ.Дата);
	ОбластьСчета.dateTransaction = XMLДата(ЭСЧФ._03_ДатаСовершенияОперации);
	Если ЗначениеЗаполнено(ЭСЧФ._05_ОтноситсяКСЧ) Тогда
		ОбластьСчета.documentType = "FIXED";
	    ОбластьСчета.invoice = ЭСЧФ._05_ОтноситсяКСЧ._01_НомерСЧ;
		ОбластьСчета.dateCancelled = XMLДата(ЭСЧФ._05_1_ДатаАннулированияСФ);
	Иначе	
		ОбластьСчета.documentType = "ORIGINAL";
	КонецЕсли; 
	Счет.general = ОбластьСчета;
	
	// Реквизиты поставщика
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "provider"));
	//ТекТип = Счет.Свойства().Получить("provider").Тип;
	//ОбластьСчета = ФабрикаXDTO.Создать(ТекТип);
	ОбластьСчета.providerStatus = мЭСЧФ.ПолучитьСтатусПоставщика(ЭСЧФ._06_СтатусПоставщика);
	ОбластьСчета.dependentPerson = ЭСЧФ._06_1_ВзаимозависимоеЛицо;
	ОбластьСчета.residentsOfOffshore = ЭСЧФ._06_2_СделкаОффшор;
	ОбластьСчета.specialDealGoods = ЭСЧФ._06_3_СделкаТовар;
	ОбластьСчета.bigCompany = ЭСЧФ._06_4_КрупныйПлательщик;
	ОбластьСчета.countryCode = ЭСЧФ._07_КодСтраныПоставщика;
	ОбластьСчета.unp = ЭСЧФ._08_УНППоставщика;
	Если ЗначениеЗаполнено(ЭСЧФ._08_1_КодФилиалаПоставщика) Тогда
		ОбластьСчета.branchCode = ЭСЧФ._08_1_КодФилиалаПоставщика;
	КонецЕсли; 
	ОбластьСчета.name = ЭСЧФ._09_Поставщик;
	ОбластьСчета.address = ЭСЧФ._10_ЮрАдресПоставщика;
	
	Если ЗначениеЗаполнено(ЭСЧФ._11_1_НомерСФКомитента) Тогда
		ДатаНомерСчетаКомитента = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "forInvoiceType"));
		ДатаНомерСчетаКомитента.number = ЭСЧФ._11_1_НомерСФКомитента;
		ДатаНомерСчетаКомитента.date = XMLДата(ЭСЧФ._11_2_ДатаСФКомитента);
		ОбластьСчета.principal = ДатаНомерСчетаКомитента;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._12_1_НомерСФПродавца) Тогда
		ДатаНомерСчетаПродавца = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "forInvoiceType"));
		ДатаНомерСчетаПродавца.number = ЭСЧФ._12_1_НомерСФПродавца;
		ДатаНомерСчетаПродавца.date = XMLДата(ЭСЧФ._12_2_ДатаСФПродавца);
		ОбластьСчета.vendor = ДатаНомерСчетаПродавца;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЭСЧФ._13_РегистрационныйНомерВыпускаТоваров) Тогда
		ОбластьСчета.declaration = ЭСЧФ._13_РегистрационныйНомерВыпускаТоваров;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._13_1_ДатаВыпускаТоваров) Тогда
		ОбластьСчета.dateRelease = XMLДата(ЭСЧФ._13_1_ДатаВыпускаТоваров);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._13_2_ДатаДатаРазрешенияНаУбытиеТоваров) Тогда
		ОбластьСчета.dateActualExport = XMLДата(ЭСЧФ._13_2_ДатаДатаРазрешенияНаУбытиеТоваров);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._14_1_НомерЗаявленияОВвозеТоваров) Тогда
		ДатаНомерЗаявленияОВвозеТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "taxesType"));
		ДатаНомерЗаявленияОВвозеТоваров.number = ЭСЧФ._14_1_НомерЗаявленияОВвозеТоваров;
		ДатаНомерЗаявленияОВвозеТоваров.date = XMLДата(ЭСЧФ._14_2_ДатаЗаявленияОВвозеТоваров);
		ОбластьСчета.taxes = ДатаНомерЗаявленияОВвозеТоваров;
	КонецЕсли; 
	Счет.provider = ОбластьСчета;
	
	// Реквизиты Получателя
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "recipient"));
	//ТекТип = Счет.Свойства().Получить("recipient").Тип;
	//ОбластьСчета = ФабрикаXDTO.Создать(ТекТип);
	ОбластьСчета.recipientStatus = мЭСЧФ.ПолучитьСтатусПолучателя(ЭСЧФ._15_СтатусПолучателя);
	ОбластьСчета.dependentPerson = ЭСЧФ._15_1_ВзаимозависимоеЛицо;
	ОбластьСчета.residentsOfOffshore = ЭСЧФ._15_2_СделкаОффшор;
	ОбластьСчета.specialDealGoods = ЭСЧФ._15_3_СделкаТовар;
	ОбластьСчета.bigCompany = ЭСЧФ._15_4_КрупныйПлательщик;
	Если ЗначениеЗаполнено(ЭСЧФ._17_УНППолучателя) Тогда
		// Это юрлицо, если не заполнено - физлицо		
		Если ЗначениеЗаполнено(ЭСЧФ._16_КодСтраныПолучателя) Тогда
			ОбластьСчета.countryCode = ЭСЧФ._16_КодСтраныПолучателя;
		Иначе
			ОбластьСчета.countryCode = 112; // по умолчанию РБ
		КонецЕсли; 
		
		//// Временное условие для аннулирования неправильно выставленных ЭСЧФ с НДС=0
		//Если ЗначениеЗаполнено(ЭСЧФ._05_ОтноситсяКСЧ) Тогда	
		//	Если ЭСЧФ.ВсегоНДС = 0 Тогда	
		//		ОбластьСчета.unp = "";
		//	Иначе
		//		ОбластьСчета.unp = ЭСЧФ._17_УНППолучателя;
		//	КонецЕсли;
		//	
		//КонецЕсли; 
		
		ОбластьСчета.unp = ЭСЧФ._17_УНППолучателя;
		Если ЗначениеЗаполнено(ЭСЧФ._17_1_КодФилиалаПолучателя) Тогда
			ОбластьСчета.branchCode = ЭСЧФ._17_1_КодФилиалаПолучателя;
		КонецЕсли; 
		ОбластьСчета.name = ЭСЧФ._18_Получатель;
		ОбластьСчета.address = ЭСЧФ._19_ЮрАдресПолучателя;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._20_РегистрационныйНомерВыпускаТоваров) Тогда
		ОбластьСчета.declaration = ЭСЧФ._20_РегистрационныйНомерВыпускаТоваров;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ЭСЧФ._21_0_1_НомерЗаявленияОВвозеТоваров) Тогда
		ДатаНомерЗаявленияОВвозеТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "taxesType"));
		ДатаНомерЗаявленияОВвозеТоваров.number = ЭСЧФ._21_0_1_НомерЗаявленияОВвозеТоваров;
		ДатаНомерЗаявленияОВвозеТоваров.date = XMLДата(ЭСЧФ._21_0_2_ДатаЗаявленияОВвозеТоваров);
		ОбластьСчета.taxes = ДатаНомерЗаявленияОВвозеТоваров;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ЭСЧФ._21_1_ДатаВвозаТоваров) Тогда
		ОбластьСчета.dateImport = XMLДата(ЭСЧФ._21_1_ДатаВвозаТоваров);
	КонецЕсли; 

	Счет.recipient = ОбластьСчета;
	
	// Реквизиты грузопоотправителя и грузополучателя
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "senderReceiver"));
	//ТекТип = Счет.Свойства().Получить("senderReceiver").Тип;
	//ОбластьСчета = ФабрикаXDTO.Создать(ТекТип);
	СписокОтправителей = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "consignorList"));
	СписокПолучателей = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "consigneeList"));
	ОбластьСчета.consignors = СписокОтправителей;
	ОбластьСчета.consignees = СписокПолучателей;
	Счет.senderReceiver = ОбластьСчета;
	
	// Условия поставки
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "deliveryCondition"));
	//ТекТип = Счет.Свойства().Получить("deliveryCondition").Тип;
	//ОбластьСчета = ФабрикаXDTO.Создать(ТекТип);
	
	Контракт = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "contract"));
	Контракт.number = ЭСЧФ._30_1_НомерДоговора;
	Если ЗначениеЗаполнено(ЭСЧФ._30_1_НомерДоговора) Тогда
		Контракт.date = XMLДата(ЭСЧФ._30_2_ДатаДоговора);
	КонецЕсли; 
	
	СписокДокументов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "documentList"));
	
	Для каждого СтрДок Из ЭСЧФ.Раздел5 Цикл
		Если Не ЗначениеЗаполнено(СтрДок._30_3_ВидДокумента) Тогда
			Продолжить;
		КонецЕсли; 
		
		Док = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "document"));
		
		ТипДок = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "docType"));
		ТипДок.code = мЭСЧФ.ПолучитьКодВидаДокументаЭСЧФ(СтрДок._30_3_ВидДокумента);
		
		Док.docType = ТипДок;
		Док.date = XMLДата(СтрДок._30_5_ДатаДокумента);
		Док.number = СтрДок._30_8_НомерБланка;
		//Если ЗначениеЗаполнено(СтрДок._30_4_НазваниеДокумента) Тогда
		//	Док.blankCode = СтрДок._30_4_НазваниеДокумента;
		//КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._30_6_КодТипаБланка) Тогда
			Док.blankCode = СтрДок._30_6_КодТипаБланка;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._30_7_СерияБланка) Тогда
			Док.seria = СтрДок._30_7_СерияБланка;
		КонецЕсли; 
		
		СписокДокументов.document.Добавить(Док);
	КонецЦикла; 
	
	Контракт.documents = СписокДокументов;
	
	ОбластьСчета.contract = Контракт;
	Если ЗначениеЗаполнено(ЭСЧФ._31_ДопСведения) Тогда
		ОбластьСчета.description = ЭСЧФ._31_ДопСведения;
	КонецЕсли; 
	Счет.deliveryCondition = ОбластьСчета;
	
	// Данные по товарам (работам, услугам), имущественным правам
	ОбластьСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "rosterList"));
	ОбластьСчета.totalCostVat = ЭСЧФ.Раздел6.Итог("_11_СтоимостьСНДС"); 
	ОбластьСчета.totalExcise = ЭСЧФ.Раздел6.Итог("_8_Акциз");
	ОбластьСчета.totalVat = ЭСЧФ.Раздел6.Итог("_10_СуммаНДС");
	ОбластьСчета.totalCost = ЭСЧФ.Раздел6.Итог("_7_Стоимость");
	
	НомерПП=0;
	Для каждого СтрДок Из ЭСЧФ.Раздел6 Цикл
		Если Не ЗначениеЗаполнено(СтрДок._2_Наименование) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСчета = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "rosterItem"));
		СтрокаСчета.number = НомерПП;
		НомерПП = НомерПП + 1;
		СтрокаСчета.name = СтрДок._2_Наименование;
		Если ЗначениеЗаполнено(СтрДок._3_1_КодТНВЭД) Тогда
			СтрокаСчета.code = СтрДок._3_1_КодТНВЭД.Код; 
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._3_2_КодОКЭД) Тогда
			СтрокаСчета.code_oced = Число(СтрДок._3_2_КодОКЭД.Код); 
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._4_ЕдиницаИзмерения) Тогда
			//СтрокаСчета.units = Число(СтрДок._4_ЕдиницаИзмерения.Код);
			СтрокаСчета.units = 796;
		КонецЕсли; 
		СтрокаСчета.count = СтрДок._5_Количество;
		СтрокаСчета.price = СтрДок._6_Цена;
		СтрокаСчета.cost = СтрДок._7_Стоимость;
		СтрокаСчета.summaExcise = СтрДок._8_Акциз;
		
		НДС = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "vat"));
		//Если СтрДок._10_СуммаНДС = 0 Тогда
		//	НДС.rate = 0;
		//Иначе	
			НДС.rate = СтрДок._9_СтавкаНДС.Ставка;
		//КонецЕсли; 
		
		НДС.rateType = мЭСЧФ.ПолучитьТипСтавкиНДС(СтрДок._9_СтавкаНДС);
		НДС.summaVat = СтрДок._10_СуммаНДС;
		СтрокаСчета.vat = НДС;
		
		СтрокаСчета.costVat = СтрДок._11_СтоимостьСНДС;
		
		ЕстьДопСведения = Ложь;
		СписокДопСведений = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.w3schools.com", "descriptionList"));
		Если ЗначениеЗаполнено(СтрДок._12_ДопДанные1) Тогда
		    СписокДопСведений.description.Добавить(мЭСЧФ.ПолучитьДопДанныеЭСЧФ(СтрДок._12_ДопДанные1));
			ЕстьДопСведения = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._12_ДопДанные2) Тогда
		    СписокДопСведений.description.Добавить(мЭСЧФ.ПолучитьДопДанныеЭСЧФ(СтрДок._12_ДопДанные2));
			ЕстьДопСведения = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._12_ДопДанные3) Тогда
		    СписокДопСведений.description.Добавить(мЭСЧФ.ПолучитьДопДанныеЭСЧФ(СтрДок._12_ДопДанные3));
			ЕстьДопСведения = Истина;
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрДок._12_ДопДанные4) Тогда
		    СписокДопСведений.description.Добавить(мЭСЧФ.ПолучитьДопДанныеЭСЧФ(СтрДок._12_ДопДанные4));
			ЕстьДопСведения = Истина;
		КонецЕсли; 
		Если ЕстьДопСведения Тогда
			СтрокаСчета.descriptions = СписокДопСведений;
		КонецЕсли; 
		
		ОбластьСчета.rosterItem.Добавить(СтрокаСчета);
	КонецЦикла; 
	
	Счет.roster = ОбластьСчета;
	
    ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла(".xml");
	//ИмяФайлаБезРасширения = КаталогВыгрузки + "\"+ЭСЧФ._01_НомерСЧ;
	//ИмяФайла = ИмяФайлаБезРасширения + ".xml";
    ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
    ЗаписьXML.ЗаписатьОбъявлениеXML(); 
    ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Счет, "issuance");
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения);
	
	Попытка
		УдалитьФайлы(ИмяФайла);  
	Исключение
		Сообщить("Ошибка при удалении файла ЭСЧФ "+ЭСЧФ._01_НомерСЧ+" на сервере: "+ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

#Область РаботаСПорталом
&НаКлиенте
Процедура ПодключитьКомпонентыДоступаКПорталуЭСФЧ()
	Попытка
		EVatService = Новый COMОбъект("EInvVatService.Connector");  
		
		ПоказатьОповещениеПользователя("Компоненты доступа к порталу ЭСФЧ загружены");
	Исключение
		Сообщить("На компьютере не обнаружены компоненты, необходимые для доступа к порталу ЭСФЧ!");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпоненту(Команда)
	ПодключитьКомпонентыДоступаКПорталуЭСФЧ();
	EVatAU = 0;
КонецПроцедуры

&НаКлиенте
Процедура ПриАвторизации() Экспорт
	Если EVatService.Login("", 0) = 0 Тогда
		ПоказатьОповещениеПользователя( "Авторизация успешно");
		EVatAU = 1;
	Иначе
		Сообщить("Ошибка авторизации: " + EVatService.LastError);
		EVatAU = 0;
		возврат;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗавершенииАвторизации() Экспорт
	Если EVatService.Disconnect <> 0 Тогда
		ПоказатьОповещениеПользователя("Ошибка при завершении подключения к службе регистрации");
	КонецЕсли;
	Если EVatService.Logout <> 0 Тогда
		ПоказатьОповещениеПользователя("Ошибка при завершении авторизованной сессии");
	КонецЕсли ;
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если EVatAU = 1 Тогда
		ПриЗавершенииАвторизации();
	КонецЕсли ;
КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	ПриАвторизации();
КонецПроцедуры

&НаКлиенте
Функция ПодписаноИОтправленоНаПорталЭСФЧ(ИмяФайла)
	//Чтение файла
	InvVatXml = EVatService.CreateEDoc;
	Если InvVatXml.Document.LoadFromFile(ИмяФайла) <> 0 Тогда
		Сообщить( "Ошибка чтения файла: " + EVatService.LastError);
		Возврат Ложь;
	КонецЕсли;
	
	//Проверка XML файла на соответствие  xsd -схеме
	InvVatType = InvVatXml.Document.GetXmlNodeValue("issuance/general/documentType");
	Если InvVatType ="ORIGINAL" Тогда
		xsd = "MNSATI_original.xsd";
	ИначеЕсли  InvVatType =  "FIXED" Тогда
		xsd = "MNSATI_fixed.xsd";
	ИначеЕсли InvVatType =  "ADDITIONAL" Тогда
		xsd = "MNSATI_additional.xsd";
	ИначеЕсли InvVatType =    "ADD_NO_REFERENCE" Тогда
		xsd = "MNSATI_add_no_reference.xsd";
	Иначе
		сообщить("файл " + ИмяФайла+".xml  содержит неверный тип документа");	  
		Возврат Ложь;
	КонецЕсли;
	
	res = InvVatXml.Document.ValidateXML(КаталогСхемПроверкиЭСЧФ + "\" + xsd, 0);
	
	Если res <> 0 Тогда
		Сообщить( EVatService.LastError + " Документ не соответствует требуемой схеме xsd");
		Возврат Ложь;
	КонецЕсли;
	
	//Выработка подписи
	res = InvVatXml.Sign(0);
	Если res <> 0 Тогда
		Сообщить("Ошибка выработки подписи: " + EVatService.LastError);
		Возврат Ложь;
	КонецЕсли;
	
	//Сохранение подписанного файла с расширением ".edoc.xml"
	fn = ИмяФайла+ ".edoc.xml";
	res = InvVatXml.SaveToFile( fn )           ;
	Если res <> 0 Тогда
		Сообщить("Ошибка сохранения подписанного документа: " + EVatService.LastError);
		Возврат Ложь;
	КонецЕсли;
	
	//Отправка подписанного документа на портал ЭСФЧ
	res = EVatService.SendEDoc(InvVatXml);
	Если res <> 0 Тогда
		Сообщить( "Ошибка отправки: " + EVatService.LastError);
		Возврат Ложь;
	Иначе
		ПоказатьОповещениеПользователя("Документ отправлен");
	КонецЕсли;
	
	//Ответ от портала ЭСФЧ будет сохранен в фале с расширением ".ticket.error.xml" в случае 
	// ошибки  и с   ".ticket.xml"  в случае успешного принятия файла сервисом
	
	InvVatTicket = EVatService.Ticket;
	Если InvVatTicket.Accepted <> 0 Тогда
		Сообщить( "Документ не принят: " + InvVatTicket.Message);
		fn = ИмяФайла+ ".ticket.error.xml";
	Иначе
		TicketIssuerUri = InvVatTicket.Document.GetXmlNodeAttribute("ticket/issuer/URI") ;
		//Сообщить("Документ успешно принят сервисом " + TicketIssuerUri);
		fn = ИмяФайла + ".ticket.xml";
	КонецЕсли;  
	
	// Сохранение квитанции
	res = InvVatTicket.SaveToFile( fn );
	Если res <> 0 Тогда
		Сообщить("Ошибка сохранения квитанции: " + EVatService.LastError );
		Возврат Ложь;
	Иначе
		ПоказатьОповещениеПользователя("Файл квитанции " + fn + " сохранен");
	КонецЕсли ;
	Возврат Истина;
КонецФункции	

&НаКлиенте
Функция ПолучитьСтатусЭСЧФ(НомерЭСЧФ, СтатусЭСЧФ, Трассировка = Истина)
	Попытка
		СтатусЭСЧФ = EVatService.GetStatus(НомерЭСЧФ);
	Исключение
		Сообщить(""+НомерЭСЧФ+ " Ошибка портала: "+ EVatService.LastError);
		Возврат Ложь;
	КонецПопытки; 
	
	Если СтатусЭСЧФ = Неопределено Тогда
		Сообщить(""+НомерЭСЧФ+ " Ошибка возврата статуса от сервера портала: "+ EVatService.LastError);
		Возврат Ложь; 
	Иначе
		Результ = СтатусЭСЧФ.Verify();
		Если Результ <> 0 Тогда
			Сообщить( "Ошибка проверки статуса документа: " + EVatService.LastError+" (Код "+Результ+")");
			Возврат Ложь; 
		Иначе
			Если Трассировка Тогда
				//ПоказатьОповещениеПользователя(""+НомерЭСЧФ+" Статус: " + Строка(СтатусЭСЧФ.Status) + " " + Строка(СтатусЭСЧФ.Message));
				ПоказатьОповещениеПользователя(""+НомерЭСЧФ+" Статус: " + Строка(СтатусЭСЧФ.Message)+" Дата уст: " + Строка(СтатусЭСЧФ.Since));
				Сообщить( ""+НомерЭСЧФ+" Статус: " + Строка(СтатусЭСЧФ.Message)+" Дата уст: " + Строка(СтатусЭСЧФ.Since));
			КонецЕсли; 
			СтатусЭСЧФ = Строка(СтатусЭСЧФ.Status);
			Возврат Истина; 
			//Возврат Строка(СтатусЭСЧФ.Status); 
		КонецЕсли; 
	КонецЕсли; 
КонецФункции

&НаСервере
Функция ИзменитьСтатусЭСЧФ(ЭСЧФ, НовыйСтатус)
	СтатусИзменен = Ложь;
	Попытка
	    Если ЭСЧФ.СтатусСФ <> НовыйСтатус Тогда
			Док = ЭСЧФ.ПолучитьОбъект();
			Док.СтатусСФ = НовыйСтатус;
			Док.Записать(РежимЗаписиДокумента.Проведение);
			СтатусИзменен = Истина;
		КонецЕсли; 
	Исключение
	
	КонецПопытки; 
	Возврат СтатусИзменен;
КонецФункции

// Распределяет подготовенные на 2 группы: Выставленные и Ошибки
&НаСервере
Процедура РаспределитьЭСЧФПоЗакладкам()
	Выставлен = Перечисления.мСтатусыСФ.Выставлен;
	НаСогласовании = Перечисления.мСтатусыСФ.НаСогласовании;
	ВРазработке = Перечисления.мСтатусыСФ.ВРазработке;
	ПустаяСсылка = Перечисления.мСтатусыСФ.ПустаяСсылка();
	НеОпределен = Перечисления.мСтатусыСФ.НеОпределен;
	Подготовлен1С = Перечисления.мСтатусыСФ.Подготовлен1С;
	
	Для каждого Стр Из Подготовленные Цикл
		Если Стр.Статус = Перечисления.мСтатусыСФ.ВРазработкеОшибка Тогда
			
		ИначеЕсли Стр.Статус = Выставлен ИЛИ Стр.Статус = НаСогласовании Тогда
			//ИЛИ Стр.Статус = ВРазработке Тогда	
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = Выставленные.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = Выставленные.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		ИначеЕсли Стр.Статус = ВРазработке ИЛИ Стр.Статус = НеОпределен Тогда	
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = БезСтатусов.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = БезСтатусов.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		ИначеЕсли Стр.Статус = ПустаяСсылка Тогда	
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = Подготовленные.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = Подготовленные.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		ИначеЕсли Стр.Статус = Подготовлен1С Тогда
			// статус не изменился
		Иначе
			Сообщить("Нет правила распределения ЭСЧФ для статуса "+Стр.Статус);
		КонецЕсли; 
	КонецЦикла; 
	
	// Очистка Подготовленные
	й = Подготовленные.Количество()-1;
	Пока й >= 0 Цикл
		Если Подготовленные[й].Статус <> Подготовлен1С И 
			Подготовленные[й].Статус <> ПустаяСсылка Тогда
			Подготовленные.Удалить(й);
		КонецЕсли; 
		й = й-1;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция СоздатьСоответствияСтатусов()
	Статусы = Новый Соответствие;
	Статусы.Вставить("COMPLETED", Перечисления.мСтатусыСФ.Выставлен);
	Статусы.Вставить("COMPLETED_SIGNED", Перечисления.мСтатусыСФ.ВыставленПодписанПолучателем);
	Статусы.Вставить("IN_PROGRESS", Перечисления.мСтатусыСФ.ВРазработке);
	Статусы.Вставить("CANCELLED", Перечисления.мСтатусыСФ.Аннулирован);
	Статусы.Вставить("DENIED", Перечисления.мСтатусыСФ.Подготовлен1С);
	Статусы.Вставить("ON_AGREEMENT", Перечисления.мСтатусыСФ.НаСогласовании);
	Статусы.Вставить("ON_AGREEMENT_CANCEL", Перечисления.мСтатусыСФ.ВыставленАннулированПоставщиком);
	Статусы.Вставить("НеООпределен", Перечисления.мСтатусыСФ.НеОпределен);
	Возврат Статусы;
КонецФункции

&НаКлиенте
Процедура ОтправитьНаПортал(Команда)
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Сообщить("Укажите каталог выгрузки!");	
		Возврат;
	КонецЕсли;
	
	ВсегоПодготовленных = 0;
	Для каждого Стр Из Подготовленные Цикл
		Если Стр.Пометка Тогда
			ВсегоПодготовленных = ВсегоПодготовленных+1;
		КонецЕсли; 
    КонецЦикла;
    
	Если ВсегоПодготовленных = 0 Тогда
		Сообщить("Нет отмеченных ЭСЧФ для отправки!");	
		Возврат;
	КонецЕсли; 
    
 	Если Не ПодключениеУспешно() Тогда
		Возврат;
	КонецЕсли; 
	
	Статусы = СоздатьСоответствияСтатусов();
    
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(ВсегоПодготовленных);
    Сч = 0;
	Для каждого Стр Из Подготовленные Цикл
		Если Не Стр.Пометка Тогда
			Продолжить;
        КонецЕсли; 
        
        Сч = Сч+1;
		Индикатор.ПредставлениеПроцесса = "Выгружается "+Сч+" из "+ВсегоПодготовленных+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		
		АдресХранения = СоздатьФабрикуXDTOНаСервере(Стр.ЭСЧФ);
		
		ИмяФайла = КаталогВыгрузки + "\"+СокрЛП(Стр.Номер) + ".xml";
		Описание=Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресХранения);
		МассивОписаний=Новый Массив;
		МассивОписаний.Добавить(Описание);
		ПолучитьФайлы(МассивОписаний,,,Ложь);
		
		Если ПодписаноИОтправленоНаПорталЭСФЧ(ИмяФайла) Тогда
			СтатусЭСЧФ = Неопределено;
			НомерЭСЧФ = НашУНП + "-" + СтрЗаменить(Год(ДатаСозданияЭСЧФ), Символы.НПП, "") + "-" + Стр.Номер;

			Если ПолучитьСтатусЭСЧФ(НомерЭСЧФ, СтатусЭСЧФ) Тогда
				Статус = Статусы.Получить(СтатусЭСЧФ);
			Иначе
				Статус = Статусы.Получить("НеОпределен");
			КонецЕсли;
			Если Стр.Статус <> Статус Тогда
				Стр.Статус = Статус;
				ИзменитьСтатусЭСЧФ(Стр.ЭСЧФ, Стр.Статус);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	РаспределитьЭСЧФПоЗакладкам();
	
	// Обновить Заголовки закладок
	ОбновитьЗаголовкиЗакладок();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерЭСЧФ(ЭСЧФ)
	Возврат ЭСЧФ._01_НомерСЧ;
КонецФункции 

#КонецОбласти 

&НаКлиенте
Процедура ОбновитьЗаголовкиЗакладок()
	Для каждого Закладка Из СписокЗакладок Цикл
		ОбновитьЗаголовокЗакладки(Закладка.Значение);
	КонецЦикла; 
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьЗаголовокЗакладки(ИмяЗакладки)
    Закладка = СписокЗакладок.НайтиПоЗначению(ИмяЗакладки);
    Если Закладка = Неопределено Тогда
        Сообщить("Не найдена закладка "+ИмяЗакладки);
        Возврат;
    КонецЕсли; 
    
    ТекЗаголовок = Закладка.Представление;
	Количество = ЭтаФорма[Закладка.Значение].Количество();
	
	Если Количество > 0 Тогда
		Если ИмяЗакладки = "Акты" Тогда
			Помеченных = 0;
			Для й=0 По Количество-1 Цикл
				Если ЭтаФорма[Закладка.Значение][й].Пометка Тогда
					Помеченных = Помеченных + 1;
				КонецЕсли; 
			КонецЦикла; 
			
			ТекЗаголовок = ТекЗаголовок + " (" + Помеченных + " из " + Количество + ")";
			
		Иначе	
			ТекЗаголовок = ТекЗаголовок + " (" + Количество + ")";
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы["Группа"+Закладка.Значение].Заголовок = ТекЗаголовок;	
КонецПроцедуры

&НаСервере
Функция ПолучитьНашиРеквизиты()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Ссылка.ПолноеНаименование КАК НашеНазвание,
		|	КорреспондентыКонтактнаяИнформация.Представление КАК НашАдрес,
		|	НашаОрганизация.Значение.ИНН КАК НашУНП
		|ИЗ
		|	Константа.НашаОрганизация КАК НашаОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|		ПО НашаОрганизация.Значение = КорреспондентыКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НашиРеквизиты = Новый Структура("НашУНП, НашеНазвание, НашАдрес"); 
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
	КонецЦикла;
	Возврат НашиРеквизиты;
КонецФункции  

&НаКлиенте
Процедура АктыПометкаПриИзменении(Элемент)
	ОбновитьЗаголовокЗакладки("Акты");
КонецПроцедуры

&НаКлиенте
Процедура ПодготовленныеПометкаПриИзменении(Элемент)
	ОбновитьЗаголовокЗакладки("Подготовленные");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗакладок()

	СписокЗакладок.Очистить();
    СписокЗакладок.Добавить("Акты", "Акты для выставления");
    СписокЗакладок.Добавить("Подготовленные", "ЭСЧФ к отправке");
    СписокЗакладок.Добавить("БезСтатусов", "Без статусов");
    СписокЗакладок.Добавить("Выставленные", "Выставленные");
    СписокЗакладок.Добавить("Аннулированные", "Аннулированные");

КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеАкты(Команда)
    ПометкаСписка("Акты", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВсеАкты(Команда)
    ПометкаСписка("Акты", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеПодготовленные(Команда)
    ПометкаСписка("Подготовленные", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВсеПодготовленные(Команда)
    ПометкаСписка("Подготовленные", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеВыставленные(Команда)
    ПометкаСписка("Выставленные", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВсеВыставленные(Команда)
    ПометкаСписка("Выставленные", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПометкаСписка(ИмяТабл, Пометка)
    Для каждого Стр Из ЭтаФорма[ИмяТабл] Цикл
    	Стр.Пометка = Пометка;
    КонецЦикла; 
	ОбновитьЗаголовокЗакладки(ИмяТабл);
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//ДиалогОткрытияФайла.ПолноеИмяФайла = ФайлВыгрузки;
	//Фильтр = "(*.xml)|*.xml";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		КаталогВыгрузки = ДиалогОткрытияФайла.Каталог;
		
	Иначе
		Текст = "ru = ""Каталог не выбран!""; en = ""File(s) not selected!""";
		Предупреждение(НСтр(Текст));
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПодготовленныеЭСЧФПриИзменении(Элемент)
	ЗаполнитьСтрокуПодготовленные();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПодготовленные()
	ТекДанные = Элементы.Подготовленные.ТекущиеДанные;
	РеквЭСЧФ = ПолучитьРеквЭСЧФ(ТекДанные.ЭСЧФ);
	ЗаполнитьЗначенияСвойств(ТекДанные, РеквЭСЧФ);
КонецПроцедуры
 
&НаСервере
Функция ПолучитьРеквЭСЧФ(ЭСЧФ)
	РеквЭСЧФ = Новый Структура();
	РеквЭСЧФ.Вставить("Номер", ЭСЧФ.Номер);
	РеквЭСЧФ.Вставить("Статус", ЭСЧФ.СтатусСФ);
	РеквЭСЧФ.Вставить("Акт", ЭСЧФ.АктВыполненныхРабот);
	Возврат РеквЭСЧФ;
КонецФункции

&НаКлиенте
Процедура ПодобратьЭСЧФПодготовленные(Команда)
	
	ПодборВТаблицу = "Подготовленные";
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Документ.мЭСЧФ.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЭСЧФВыставленные(Команда)
	ПодборВТаблицу = "Выставленные";
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Документ.мЭСЧФ.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// если выбрали договор для отбора
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
		ВидДокумента = ПолучитьРодителяВидДокумента(ВыбранноеЗначение);
		Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот") Тогда
			// Это договор
			ОтборДоговор = ВыбранноеЗначение;
			ОбновитьДанныеФормы();
			Возврат;		
		КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаПодбора = "";
	Если ПодборВТаблицу = "Подготовленные" Тогда
		ТаблицаПодбора = Подготовленные;
	ИначеЕсли ПодборВТаблицу = "Выставленные" Тогда
		ТаблицаПодбора = Выставленные;	
	ИначеЕсли ПодборВТаблицу = "Акты" Тогда
		ТаблицаПодбора = Акты;	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЭСЧФ", ВыбранноеЗначение);
	СтруктураПоиска.ЭСЧФ = ВыбранноеЗначение;
	НайденныеСтроки = ТаблицаПодбора.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Стр = ТаблицаПодбора.Добавить();
		Стр.ЭСЧФ = ВыбранноеЗначение;
		Стр.Пометка = Истина;
		РеквЭСЧФ = ПолучитьРеквЭСЧФ(ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Стр, РеквЭСЧФ);
		Если ПодборВТаблицу = "Акты" Тогда
			СтруктураСтроки = СоздатьСтруктуруСтроки();
			ПолучитьДанныеАкта(РеквЭСЧФ.Акт, СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(Стр, СтруктураСтроки);
		КонецЕсли;
		ОбновитьЗаголовокЗакладки(ПодборВТаблицу);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРодителяВидДокумента(ВыбранноеЗначение)
	Возврат ВыбранноеЗначение.ВидДокумента.Родитель;
КонецФункции

&НаКлиенте
Процедура НачальныйНомерЭСЧФОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачальныйНомерЭСЧФ = ДополнитьНулями(Текст); 
КонецПроцедуры

&НаКлиенте
Функция ДополнитьНулями(Текст)
	Результат = Текст;
	Пока СтрДлина(Результат) < 10  Цикл
		Результат = "0"+Результат;
	КонецЦикла; 
	Возврат Результат;
КонецФункции // 

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
    ЗаполнитьАктыНаСервере();

	ЗаполнитьЭСЧФ();
    
    ОбновитьЗаголовкиЗакладок();
	
	ПодборВТаблицу = "";
КонецПроцедуры

&НаКлиенте
Функция ПодключениеУспешно()
   // Проверяем запуск компоненты
	Если Не ЗначениеЗаполнено(EVatAU) Тогда
        ПодключитьКомпонентыДоступаКПорталуЭСФЧ();
        EVatAU = 0;
	КонецЕсли;
    
	// Проверяем авторизацию
	Если Не ЗначениеЗаполнено(EVatAU) Тогда
		ПриАвторизации();
	КонецЕсли;
	
	//  подключение к порталу ЭСФЧ
	Если EVatService.Connect(СтрокаКоннекта) = 0 Тогда
		ПоказатьОповещениеПользователя("Подключение успешно");
	Иначе
		Сообщить( "Ошибка подключения: " + EVatService.LastError);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;	
КонецФункции
 
&НаКлиенте
Процедура ОбновитьСтатусыВыставленные(Команда)
	ОбновитьСтатусы(Выставленные);	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы(ИмяТаблицы)
	
	ОчиститьСообщения();
	
	Всего = 0;
	Для каждого Стр Из ИмяТаблицы Цикл
		Если Стр.Пометка Тогда
			Всего = Всего+1;
		КонецЕсли; 
    КонецЦикла;
    
	Если Всего = 0 Тогда
		Сообщить("Нет отмеченных ЭСЧФ для обновления статуса!");	
		Возврат;
	КонецЕсли; 
	
	Если Не ПодключениеУспешно() Тогда
		Возврат;
	КонецЕсли; 
 	
	Статусы = СоздатьСоответствияСтатусов();
	
 	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
    Сч = 0;
	Для каждого Стр Из ИмяТаблицы Цикл
		Если Не Стр.Пометка Тогда
			Продолжить;
		КонецЕсли; 	
		
        Сч = Сч+1;
		Индикатор.ПредставлениеПроцесса = "Обновление "+Сч+" из "+Всего+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		
		НомерЭСЧФ = НашУНП + "-" + СтрЗаменить(Год(ДатаСозданияЭСЧФ), Символы.НПП, "") + "-" + Стр.Номер;

		СтатусЭСЧФ = Неопределено;
		Если ПолучитьСтатусЭСЧФ(НомерЭСЧФ, СтатусЭСЧФ, Ложь) Тогда
		//Если ПолучитьСтатусЭСЧФ(ПолучитьНомерЭСЧФ(Стр.ЭСЧФ), СтатусЭСЧФ, Ложь) Тогда
			Статус = Статусы.Получить(СтатусЭСЧФ);
		Иначе
			Статус = Статусы.Получить("НеОпределен");
		КонецЕсли;
		Если Стр.Статус <> Статус Тогда
			Сообщить(Стр.Номер+": "+Статус);
			Стр.Статус = Статус;
			ИзменитьСтатусЭСЧФ(Стр.ЭСЧФ, Стр.Статус);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция НадоОбновлятьСтатус(ЭСЧФ, ВыставленПодписан)
	Возврат ЭСЧФ.СтатусСФ <> ВыставленПодписан;	
КонецФункции
 
&НаКлиенте
Процедура АктыАктПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = СоздатьСтруктуруСтроки();
	ПолучитьДанныеАкта(ТекДанные.Акт, СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураСтроки);
КонецПроцедуры

&НаКлиенте
Функция СоздатьСтруктуруСтроки()
	СтруктураСтроки = Новый Структура();
	СтруктураСтроки.Вставить("ЭСЧФ", "");
	СтруктураСтроки.Вставить("СостояниеАкта", "");
	СтруктураСтроки.Вставить("СтатусСчета", "");
	СтруктураСтроки.Вставить("Заактировано", 0);
	СтруктураСтроки.Вставить("НДС", 0);
	СтруктураСтроки.Вставить("ДатаСовершенияОперации", "");
	СтруктураСтроки.Вставить("Корреспондент", "");
	СтруктураСтроки.Вставить("УНПКорреспондента", "");
	СтруктураСтроки.Вставить("АдресКорреспондента", "");
	СтруктураСтроки.Вставить("НазваниеКорреспондента", "");
	СтруктураСтроки.Вставить("НомерДоговора", "");
	СтруктураСтроки.Вставить("ДатаДоговора", "");
	СтруктураСтроки.Вставить("НомерАкта", "");
	СтруктураСтроки.Вставить("ДатаАкта", "");
	СтруктураСтроки.Вставить("НаименованиеРаботы", "");
	СтруктураСтроки.Вставить("СтавкаНДС", "");
	СтруктураСтроки.Вставить("КодФилиала", "");
	СтруктураСтроки.Вставить("КодСтраны", "");
	СтруктураСтроки.Вставить("ВзаимозависимоеЛицо", Ложь);
	СтруктураСтроки.Вставить("КодОКЭД", "");
	Возврат СтруктураСтроки;
КонецФункции
 
&НаСервере
Функция ПолучитьДанныеАкта(Акт, СтруктураСтроки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Ссылка,
		|	ВнутренниеДокументы.ЭтапДоговора КАК ЭтапДоговора,
		|	мРеквизитыАктовВыполненныхРабот.СтавкаНДС КАК СтавкаНДС,
		|	мРеквизитыАктовВыполненныхРабот.Сумма КАК Сумма,
		|	мРеквизитыАктовВыполненныхРабот.СуммаНДС КАК НДС,
		|	мСвязиЭСЧФ.ЭСЧФ КАК ЭСЧФ,
		|	мСвязиЭСЧФ.ЭСЧФ.СтатусСФ КАК СтатусСчета,
		|	мРеквизитыАктовВыполненныхРабот.СостояниеАкта КАК СостояниеАкта
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мСвязиЭСЧФ КАК мСвязиЭСЧФ
		|		ПО (мСвязиЭСЧФ.ДокументРеализации = ВнутренниеДокументы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|		ПО (мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка)
		|ГДЕ
		|	ВнутренниеДокументы.Ссылка = &Акт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Акты.Ссылка КАК Акт,
		|	Акты.Ссылка.РегистрационныйНомер КАК НомерАкта,
		|	Акты.Ссылка.ДатаРегистрации КАК ДатаАкта,
		|	Акты.СтавкаНДС КАК СтавкаНДС,
		|	Акты.Сумма КАК Заактировано,
		|	Акты.НДС КАК НДС,
		|	Акты.ЭСЧФ КАК ЭСЧФ,
		|	Акты.СтатусСчета КАК СтатусСчета,
		|	Акты.ЭтапДоговора.Владелец.РегистрационныйНомер КАК НомерДоговора,
		|	Акты.ЭтапДоговора.Владелец.ДатаРегистрации КАК ДатаДоговора,
		|	Акты.ЭтапДоговора.ВидРабот.ПолноеНаименование КАК НаименованиеРаботы,
		|	Акты.ЭтапДоговора.ВидРабот.ВидРаботПоДоговорам.ВидЭкономическойДеятельности КАК КодОКЭД,
		|	Акты.СостояниеАкта КАК СостояниеАкта,
		|	Акты.Ссылка.ДатаРегистрации КАК ДатаСовершенияОперации,
		|	Акты.Ссылка.Корреспондент КАК Корреспондент,
		|	Акты.Ссылка.Корреспондент.мВзаимозависимоеЛицо КАК ВзаимозависимоеЛицо,
		|	Акты.Ссылка.Корреспондент.мСтрана.Код КАК КодСтраны,
		|	Акты.Ссылка.Корреспондент.мКодФилиала КАК КодФилиала,
		|	ВЫРАЗИТЬ(Акты.Ссылка.Корреспондент.ПолноеНаименование КАК СТРОКА(1000)) КАК НазваниеКорреспондента,
		|	Акты.Ссылка.Корреспондент.ИНН КАК УНПКорреспондента,
		|	КорреспондентыКонтактнаяИнформация.Представление КАК АдресКорреспондента
		|ИЗ
		|	Акты КАК Акты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|		ПО Акты.Ссылка.Корреспондент = КорреспондентыКонтактнаяИнформация.Ссылка
		|			И (КорреспондентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
		|				ИЛИ КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерАкта";
	
	Запрос.УстановитьПараметр("Акт", Акт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		Возврат СтруктураСтроки;
	КонецЦикла;
КонецФункции 

&НаКлиенте
Процедура СоздатьИсправленныйЭСЧФ(Команда)
    Если Не ЗначениеЗаполнено(ДатаСозданияЭСЧФ) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Укажите дату создания ЭСЧФ!";
        Сообщение.Поле = "ДатаСозданияЭСЧФ";
        Сообщение.Сообщить(); 
    	Возврат;
	КонецЕсли; 
	
    Если Не ЗначениеЗаполнено(НачальныйНомерЭСЧФ) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Укажите начальный номер ЭСЧФ!";
        Сообщение.Поле = "НачальныйНомерЭСЧФ";
        Сообщение.Сообщить(); 
    	Возврат;
	КонецЕсли; 
	
	Исправленный = Истина;
	СоздатьЭСЧФНаСервере(Исправленный);
	
	Подготовленные.Очистить();
	ЗаполнитьЭСЧФ("Подготовленные");
	
	ОбновитьЗаголовокЗакладки("Подготовленные");
    
    й = Акты.Количество()-1;
    Пока й >=0 Цикл
        Отбор = Новый Структура("Акт", Акты[й].Акт); 
        ИскСтрока = Подготовленные.НайтиСтроки(Отбор);
    	Если ИскСтрока.Количество() > 0 Тогда
            Акты.Удалить(й);    
        КонецЕсли;
        й = й-1;
    КонецЦикла; 
	ОбновитьЗаголовокЗакладки("Акты");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
  	ОбновитьДанныеФормы();
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьДанныеФормы()
   	ЗаполнитьСписокЗакладок();
    
    ЗаполнитьАктыНаСервере();
	ЗаполнитьЭСЧФ();
    
    ОбновитьЗаголовкиЗакладок();
КонецПроцедуры

&НаКлиенте
Процедура АктыСчетПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = СоздатьСтруктуруСтроки();
	ТекДанные.Акт = ПолучитьАктСчета(ТекДанные.ЭСЧФ);
	ПолучитьДанныеАкта(ТекДанные.Акт, СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураСтроки,,"ЭСЧФ");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАктСчета(ЭСЧФ)
	Возврат ЭСЧФ.АктВыполненныхРабот;	
КонецФункции

&НаКлиенте
Процедура ПодборЭСЧФ(Команда)
	ПодборВТаблицу = "Акты";
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Документ.мЭСЧФ.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПодготовленныеПослеУдаления(Элемент)
	ОбновитьЗаголовокЗакладки("Подготовленные");
КонецПроцедуры

&НаКлиенте
Процедура ПодготовленныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Новаястрока и НЕ ОтменаРедактирования Тогда
		ОбновитьЗаголовокЗакладки("Подготовленные");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АктыПослеУдаления(Элемент)
	ОбновитьЗаголовокЗакладки("Акты");
КонецПроцедуры

&НаКлиенте
Процедура АктыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Новаястрока и НЕ ОтменаРедактирования Тогда
		ОбновитьЗаголовокЗакладки("Акты");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтборКорреспондентПриИзменении(Элемент)
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорПриИзменении(Элемент)
	ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//ОбновитьДанныеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ОтборКорреспондент) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Корреспондент", ОтборКорреспондент)); 
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
		ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеБезСтатусов(Команда)
    ПометкаСписка("БезСтатусов", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВсеБезСтатусов(Команда)
    ПометкаСписка("БезСтатусов", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыБезСтатусов(Команда)
	
	ОбновитьСтатусы(БезСтатусов);	
	
	Выставлен = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.Выставлен");
	НаСогласовании = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.НаСогласовании");
	ВРазработке = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.ВРазработке");
	//ПустаяСсылка = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.ПустаяСсылка()");
	НеОпределен = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.НеОпределен");
	Подготовлен1С = ПредопределенноеЗначение("Перечисление.мСтатусыСФ.Подготовлен1С");
	
	Для каждого Стр Из БезСтатусов Цикл
		Если Стр.Статус = Выставлен ИЛИ Стр.Статус = НаСогласовании Тогда
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = Выставленные.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = Выставленные.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				//НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		ИначеЕсли Стр.Статус = ВРазработке Тогда	
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = БезСтатусов.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = БезСтатусов.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				//НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		ИначеЕсли Стр.Статус = НеОпределен Тогда	
			Отбор = Новый Структура("ЭСЧФ", Стр.ЭСЧФ);
			ИскСтроки = БезСтатусов.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				НовСтр = БезСтатусов.Добавить();
                ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				//НовСтр.ДатаЭСЧФ = Стр.ЭСЧФ.Дата;
			КонецЕсли;
			
		Иначе
			Сообщить("Нет правила распределения ЭСЧФ для статуса "+Стр.Статус);
		КонецЕсли; 
	КонецЦикла; 
	
	// Очистка БезСтатусов
	й = БезСтатусов.Количество()-1;
	Пока й >= 0 Цикл
		Если БезСтатусов[й].Статус <> НеОпределен И 
			БезСтатусов[й].Статус <> ВРазработке Тогда
			БезСтатусов.Удалить(й);
		КонецЕсли; 
		й = й-1;
	КонецЦикла; 
	ОбновитьЗаголовокЗакладки("БезСтатусов");
КонецПроцедуры

&НаКлиенте
Процедура ДатаСозданияЭСЧФПриИзменении(Элемент)
	УстановитьНачальныйНомерЭСЧФ();
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПривестиНомерЭСЧФКФормату(Номер)
	Возврат Формат(ОбщегоНазначения.ВЧисло(Номер), "ЧЦ=10; ЧВН=; ЧГ=0"); 
КонецФункции
