
&НаКлиенте
Перем Док;

&НаКлиенте
Перем WordApp;

&НаКлиенте
Перем Селекция, НачалоЗакладки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Актирование") Тогда
		Актирование = Параметры.Актирование;	
	КонецЕсли; 
	Организация = РаботаСОрганизациями.ПолучитьОрганизациюПоУмолчанию();
	Копий = 2;
	ВалютаДоговора = Константы.ОсновнаяВалюта.Получить();
    Если ЗначениеЗаполнено(Подписал1) Тогда
        Должность1 = РаботаСПользователями.ПолучитьДолжность(Подписал1);    
    КонецЕсли; 
    Если ЗначениеЗаполнено(Подписал2) Тогда
        Должность2 = РаботаСПользователями.ПолучитьДолжность(Подписал2);    
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьАкты(Команда)
	ОчиститьСообщения();
	ПоказатьОповещениеПользователя("Чтение файла...");
	Файл = Новый ЧтениеXML;
	Файл.ОткрытьФайл(ПутьКФайлу);
	
	ОчиститьАкты();
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	ТекНомерДог = "";
	ТекФамилия = "";
	ТекИмя = "";
	ТекОтчество = "";
	СчетчикТарифов = 0;
	НовСтр = Неопределено;
	
	//Акты.Очистить();
	// Прочитать фрагменты элемента.
	Пока Файл.Прочитать() Цикл
		// После чтения проверить тип узла.
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если Файл.Имя = "ActItem" Тогда
				
				Файл.Прочитать();
				Если Файл.Имя = "ContractNumber" Тогда	
					Файл.Прочитать();
					
					// Строка договора
					Если ТекНомерДог <> Файл.Значение Тогда
						Если ТекНомерДог <> "" Тогда
							// Запись тарифов в таблицу
							Тарифы = НовСтр.ПолучитьЭлементы();
							Для каждого Стр Из ВремТарифы Цикл
								Эл = Тарифы.Добавить();
							    ЗаполнитьЗначенияСвойств(Эл, Стр);
								Эл.Загружать = Истина;
							КонецЦикла; 
						КонецЕсли; 
						НовСтр = Договоры.Добавить();
						НовСтр.Загружать = Истина;
						НовСтр.НомерДоговора = Файл.Значение;
						
						ТекНомерДог = Файл.Значение;
						ТекФамилия = "";
						ТекИмя = "";
						ТекОтчество = "";
						ВремТарифы.Очистить();
					Иначе
						// Номер договора тот же, а ФИО уже другая
						ТекФамилия = "";
						ТекИмя = "";
						ТекОтчество = "";
					КонецЕсли; 
					СтрокаТарифа = ВремТарифы.Добавить();
					//СчетчикТарифов = СчетчикТарифов + 1;
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "FirstName" Тогда	
					Файл.Прочитать();
					СтрокаТарифа.Имя = Файл.Значение;
					Если Не ЗначениеЗаполнено(ТекИмя) Тогда
						ТекИмя = Файл.Значение;
					КонецЕсли; 
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "LastName" Тогда	
					Файл.Прочитать();
					СтрокаТарифа.Фамилия = Файл.Значение;	
					Если Не ЗначениеЗаполнено(ТекФамилия) Тогда
						ТекФамилия = Файл.Значение;
					КонецЕсли; 
					
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "MiddleName" Тогда	
					Файл.Прочитать();
					СтрокаТарифа.Отчество = Файл.Значение;	
					Если Не ЗначениеЗаполнено(ТекОтчество) Тогда
						ТекОтчество = Файл.Значение;
					КонецЕсли; 
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "ActNumber" Тогда	
					Файл.Прочитать();
					НовСтр.НомерАкта = Файл.Значение;	
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "ActDate" Тогда	
					Файл.Прочитать();
					НовСтр.ДатаАкта = ДатаИзЗначения(Файл.Значение);	
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				Если Файл.Имя = "VATRate" Тогда	
					Файл.Прочитать();
					НовСтр.СтавкаНДС = Файл.Значение;
					ТекСтавкаНДС = Файл.Значение;
					СтрокаТарифа.СтавкаНДС = ТекСтавкаНДС;
					Файл.Прочитать();
					Файл.Прочитать();
				КонецЕсли;
				
				Если Файл.Имя = "Tariffs" Тогда 
					 СчетчикТарифов = 1;
					//Файл.Прочитать();
					Пока Файл.Прочитать() Цикл
						Если Файл.Имя = "Tariff" Тогда
							Если СчетчикТарифов = 1 Тогда
								// Это первая строка тарифа - ничего не надо
							Иначе
								СтрокаТарифа = ВремТарифы.Добавить();
								СтрокаТарифа.Имя = ТекИмя;
								СтрокаТарифа.Фамилия = ТекФамилия;
								СтрокаТарифа.Отчество = ТекОтчество;
								СтрокаТарифа.СтавкаНДС = ТекСтавкаНДС;
							КонецЕсли; 
							СчетчикТарифов = СчетчикТарифов + 1;
							Файл.Прочитать();
							Если Файл.Имя = "TariffName" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.ИмяТарифа = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "code1C" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.КодТарифа = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "PricePerMonthWithoutVAT" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.Цена = Файл.Значение;
								Если ЗначениеЗаполнено(Файл.Значение) Тогда
									Файл.Прочитать();
								КонецЕсли; 
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "DayPerMonth" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.Количество = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "PriceWithoutVAT" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.Сумма = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "PriceVAT" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.НДС = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
							Если Файл.Имя = "PriceWithVAT" Тогда	
								Файл.Прочитать();
								СтрокаТарифа.ВСего = Файл.Значение;	
								Файл.Прочитать();
								Файл.Прочитать();
							КонецЕсли;
						КонецЕсли; 
						//Файл.Прочитать();
						Если Файл.Имя = "Tariffs" Тогда
							СчетчикТарифов = 1;
							Прервать;
						КонецЕсли;	
					КонецЦикла; 
				КонецЕсли; 
				
				// Окончание элемента Акт
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// запись последнего договора
	Если ВремТарифы.Количество()>0 Тогда
		// Запись тарифов в таблицу
		Тарифы = НовСтр.ПолучитьЭлементы();
		Для каждого Стр Из ВремТарифы Цикл
			Эл = Тарифы.Добавить();
			ЗаполнитьЗначенияСвойств(Эл, Стр);
			Эл.Загружать = Истина;
		КонецЦикла; 
	КонецЕсли; 
	
	Файл.Закрыть();
	ОбновитьИнтерфейс();
	
	ПроверитьДоговора();
	
	ПосчитатьИтогиПоДоговорам();
КонецПроцедуры

&НаКлиенте
Функция ДатаИзЗначения(ЗначениеДаты)
	ГодДаты = Число(Лев(ЗначениеДаты, 4));
	МесяцДень = Сред(ЗначениеДаты, 6);
	ПозРазделителя = СтрНайти(МесяцДень, "-");
	МесяцДаты = Число(Лев(МесяцДень, ПозРазделителя-1));
	ЧислоДаты = Число(Сред(МесяцДень, ПозРазделителя+1));
	ИскДата = Дата(ГодДаты, МесяцДаты, ЧислоДаты);
	Возврат ИскДата;
КонецФункции

&НаКлиенте
Процедура ПроверитьДоговора()
	ПоказатьОповещениеПользователя("Проверка наличия договоров...");
	СписокНеНайденных = ПроверитьДоговораНаСервере(); 
	
	Если СписокНеНайденных.Количество() > 0 Тогда
		Сообщить("Создайте договора:");
		Для каждого Эл Из СписокНеНайденных Цикл
			Сообщить(Эл.Значение);
		КонецЦикла; 
		
		// Отмена загрузки
		Договоры = АктыИзФайла.ПолучитьЭлементы();
		Для каждого Стр Из Договоры Цикл
			Если СписокНеНайденных.НайтиПоЗначению(Стр.НомерДоговора) <> Неопределено Тогда
				Стр.Загружать = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтогиПоДоговорам()
	ПоказатьОповещениеПользователя("Подсчет итогов по договорам...");
	
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	Для каждого Стр Из Договоры Цикл
		
		Тарифы = Стр.ПолучитьЭлементы();
		Для ц=0 По Тарифы.Количество()-1 Цикл
			Стр.Сумма = Стр.Сумма + Тарифы[ц].Сумма;
			Стр.НДС = Стр.НДС + Тарифы[ц].НДС;
			Стр.Всего = Стр.Всего + Тарифы[ц].Всего;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Функция ПроверитьДоговораНаСервере()
	СписокНомеровДоговоров = ПолучитьСписокНомеровДоговоров();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК Номер
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.РегистрационныйНомер В(&СписокНомеровДоговоров)";
	
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДоговорГеопортал);
	Запрос.УстановитьПараметр("СписокНомеровДоговоров", СписокНомеровДоговоров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИскЭлемент = СписокНомеровДоговоров.НайтиПоЗначению(Выборка.Номер);
		Если ИскЭлемент <> Неопределено Тогда
			СписокНомеровДоговоров.Удалить(ИскЭлемент);	
		КонецЕсли; 
	КонецЦикла;
	Возврат СписокНомеровДоговоров;
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьАкты(Команда)
	Если Не ЗначениеЗаполнено(Актирование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Укажите документ актирования.'"), ,
		"Актирование");
		Возврат;
	КонецЕсли; 
	Если ДокНеПуст() Тогда
		Ответ = Вопрос("Табличные части документа будут очищены! Продолжать?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
    КонецЕсли; 
    
	ПоказатьОповещениеПользователя("Идет загрузка актов... Подождите...");
	
	ЗагрузитьАктыНаСервере();
	
	ЗаполнитьАкты();
	ПометитьАктыБезКарточекФайлов();

	Оповестить("Акты геопортала загружены");
	ПоказатьОповещениеПользователя("Акты геопортала загружены...");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАктыНаСервере() 
	
	ТзДог = ПолучитьДанныеДляАктирования();
	ТзАкты = ПолучитьАктыДляАктирования();
	ЗаполнитьПрейскурант();
	
	Док = Актирование.ПолучитьОбъект();
	Док.Акты.Очистить();
	Док.Зарплата.Очистить();
	
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	Для каждого Стр Из Договоры Цикл
		Если Не Стр.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		// контроль периода
		Если НачалоМесяца(Док.Дата) <> НачалоМесяца(Стр.ДатаАкта) Тогда
			Сообщить("Дата акта "+Стр.НомерАкта+" в файле не соответствует дате документа актирования!");
			Стр.Загружать = Ложь;
			Продолжить;
		КонецЕсли; 
		
		// Получение Этапа договора
		НомерЭтапа = ПолучитьНомерЭтапа(Стр.НомерАкта);
		
		Отбор = Новый Структура("РегистрационныйНомер, НомерЭтапа", Стр.НомерДоговора, НомерЭтапа); 
		
		ИскСтроки = ТзДог.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() = 0 Тогда
			
			Отбор = Новый Структура("РегистрационныйНомер", Стр.НомерДоговора);		
			ИскСтроки = ТзДог.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				Сообщить("Не найден договор "+ Стр.НомерДоговора);
				Сообщить("Этап, Акт не созданы!");
				Продолжить;
			Иначе
				// Договор есть - создать этап
				Договор = ИскСтроки[0].Договор;
			
				ЭтапДоговора = СоздатьЭтапДоговораГеопортал(ТзДог, ИскСтроки[0].Договор, НомерЭтапа, Стр);
			КонецЕсли; 
		Иначе
			// Договор и этап есть, надо проверить, не изменился ли этап?
			Договор = ИскСтроки[0].Договор;
			ЭтапДоговора = ИскСтроки[0].ЭтапДоговора;
			ПроверитьЭтапДоговора(ТзДог, ЭтапДоговора, Стр);
		КонецЕсли; 
		
		// Получение Акта вып. работ
		Отбор = Новый Структура("НомерАкта", Стр.НомерАкта); 
		ИскСтроки = ТзАкты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			Акт = ПроверитьСоздатьАктВыпРабот(Договор, ЭтапДоговора, Стр);
		Иначе
			// Акт есть, надо проверить, не изменился ли он?
			АктВыпРабот = ИскСтроки[0].Акт;
			ЕстьЭСЧФ = Ложь;
			Если ИскСтроки[0].ЕстьЭСЧФ и ЗначениеЗаполнено(ИскСтроки[0].СтатусСФ) 
				и ИскСтроки[0].СтатусСФ <> Перечисления.мСтатусыСФ.Аннулирован 
				и ИскСтроки[0].СтатусСФ <> Перечисления.мСтатусыСФ.Подготовлен1С Тогда
			    ЕстьЭСЧФ = Истина;
			КонецЕсли; 
			СуммаНДС = ИскСтроки[0].СуммаНДС;
			Акт = ПроверитьСоздатьАктВыпРабот(Договор, ЭтапДоговора, Стр, АктВыпРабот, ЕстьЭСЧФ, СуммаНДС);
		КонецЕсли; 
		
		НовАкт = Док.Акты.Добавить();
		НовАкт.Договор = Договор;
		НовАкт.ЭтапДоговора = ЭтапДоговора;
		НовАкт.НомерАкта = Стр.НомерАкта;
		НовАкт.ДатаАкта = Стр.ДатаАкта;
		НовАкт.Сумма = Стр.Всего;
		НовАкт.НДС = Стр.НДС;
		НовАкт.Акт = Акт;
		
		Если ЭтапДоговора.Исполнители.Количество() > 0 Тогда
			Для каждого Исп Из ЭтапДоговора.Исполнители Цикл
				НовЗП = Док.Зарплата.Добавить();
				НовЗП.ЭтапДоговора = ЭтапДоговора;
				НовЗП.Исполнитель = Исп.Исполнитель;
				НовЗП.КТУ = Исп.КТУ;
				НовЗП.Норматив = 0;
				НовЗП.Коэффициент = 1;
				НовЗП.ОбъемРабот = Стр.Всего - Стр.НДС;
				НовЗП.Начислено = 0;
				Если ЗначениеЗаполнено(ЭтапДоговора.Подразделение) Тогда
					НовЗП.Подразделение = ЭтапДоговора.Подразделение;
				Иначе
					НовЗП.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Исп.Исполнитель);
				КонецЕсли; 
				НовЗП.НомерАкта = НовАкт.НомерАкта;
				НовЗП.БазовоеНачисление = 0;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	Док.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрейскурант()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мПрейскурантГеопорталаСрезПоследних.Услуга,
		|	мПрейскурантГеопорталаСрезПоследних.Цена,
		|	мПрейскурантГеопорталаСрезПоследних.СтавкаНДС,
		|	мПрейскурантГеопорталаСрезПоследних.СуммаНДС,
		|	мПрейскурантГеопорталаСрезПоследних.Стоимость,
		|	мПрейскурантГеопорталаСрезПоследних.Услуга.Код КАК КодТарифа
		|ИЗ
		|	РегистрСведений.мПрейскурантГеопортала.СрезПоследних КАК мПрейскурантГеопорталаСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Прейскурант.Загрузить(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАкты(Команда)
	
	ПолучитьЗаактированныеАкты();
	
	СписокДоговоров = Новый СписокЗначений;

	Договоры = АктыИзФайла.ПолучитьЭлементы();
	Для каждого Стр Из Договоры Цикл
		
		ИскДог = СписокДоговоров.НайтиПоЗначению(Стр.НомерДоговора);
		Если ИскДог = Неопределено Тогда
			СписокДоговоров.Добавить(Стр.НомерДоговора);
		Иначе
			// Проверка уже была
			Продолжить;
		КонецЕсли; 
		
		// Проверка договора
		Отбор = Новый Структура("НомерДоговора", Стр.НомерДоговора);
		ИскСтроки = ТабПроверки.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() = 0 Тогда
			Сообщить("В базе нет договора: "+Стр.НомерДоговора);
			Продолжить;
		КонецЕсли;
		
		// Проверка акта
		Отбор = Новый Структура("НомерАкта", Стр.НомерАкта);
		ИскСтроки = ТабПроверки.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() = 0 Тогда
			Сообщить("В базе нет акта: "+Стр.НомерАкта);
			Продолжить;
		КонецЕсли;
		
		// Проверка сумм
		Если ИскСтроки[0].Сумма <> Стр.Всего Тогда
			Сообщить("Акт: "+Стр.НомерАкта+" Заактировано: "+ИскСтроки[0].Сумма+" надо: "+Стр.Всего);
		КонецЕсли; 
		Если ИскСтроки[0].НДС <> Стр.НДС Тогда
			Сообщить("Акт: "+Стр.НомерАкта+" НДС: "+ИскСтроки[0].НДС+" надо: "+Стр.НДС);
		КонецЕсли;
		
		ТабПроверки.Удалить(ИскСтроки[0]);
		
	КонецЦикла;
	
	Если ТабПроверки.Количество() > 0 Тогда
		Сообщить("Лишние акты в базе:");
		Для каждого Стр Из ТабПроверки Цикл
			Сообщить("Дог: "+Стр.НомерДоговора+" Акт: "+Стр.НомерАкта);
		КонецЦикла; 
	КонецЕсли; 
	
	Оповестить("Акты геопортала проверены");

КонецПроцедуры

&НаСервере
Функция ПолучитьЗаактированныеАкты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДоговоров.Договор.РегистрационныйНомер КАК НомерДоговора,
		|	УчетДоговоров.Сумма,
		|	УчетДоговоров.НДС,
		|	УчетДоговоров.НомерДокумента КАК НомерАкта
		|ИЗ
		|	РегистрНакопления.УчетДоговоров КАК УчетДоговоров
		|ГДЕ
		|	УчетДоговоров.Период МЕЖДУ &Дата1 И &Дата2
		|	И УчетДоговоров.ВидДвижения = &ВидДвижения
		|	И УчетДоговоров.Сумма > 0
		|	И УчетДоговоров.Договор.ВидДокумента = &ГеоПортал";
	
	Запрос.УстановитьПараметр("ГеоПортал", Справочники.ВидыВнутреннихДокументов.ДоговорГеопортал);
	Если ЗначениеЗаполнено(Актирование) Тогда
		ТекДата = Актирование.Дата;
	Иначе
		ТекДата = ТекущаяДата();
	КонецЕсли; 
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ПериодРегистрации.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ПериодРегистрации.ДатаОкончания));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Тз = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(Тз, ТабПроверки);
	//Возврат Результат;	
	
КонецФункции
 

&НаСервере
Функция ПроверитьСоздатьАктВыпРабот(Договор, ЭтапДоговора, Стр, АктВыпРабот=Неопределено, ЕстьЭСЧФ=Неопределено, СуммаНДС=0)
	НачатьТранзакцию();
	Если ЗначениеЗаполнено(АктВыпРабот) Тогда
		Если ЕстьЭСЧФ = Истина Тогда
			Если АктВыпРабот.Сумма <> Стр.Всего ИЛИ СуммаНДС <> Стр.НДС Тогда
				Сообщить("Проверьте акт "+Стр.НомерАкта+" - был ЭСЧФ!");
			КонецЕсли; 	
		КонецЕсли; 
		Акт = АктВыпРабот.ПолучитьОбъект();
	Иначе
		Акт = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
		Акт.УстановитьНовыйКод();
	КонецЕсли; 
	Акт.ДатаРегистрации = Стр.ДатаАкта;
	Акт.РегистрационныйНомер = Стр.НомерАкта;
	Акт.Папка = Справочники.ПапкиВнутреннихДокументов.мАктыВыполненныхРабот;
	Акт.ВидДокумента = Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот;
	Акт.Заголовок = "Акт выполненных работ " + Стр.НомерАкта + " " + Формат(Стр.ДатаАкта, "ДЛФ=D");;
	Акт.ГрифДоступа = Договор.ГрифДоступа;
	Акт.Организация = Договор.Организация;
	Акт.ВопросДеятельности = Договор.ВопросДеятельности;
	Акт.ЭтапДоговора = ЭтапДоговора;
	Акт.Подготовил = Пользователи.ТекущийПользователь();
	Акт.Утвердил = Договор.Утвердил;
	Акт.Корреспондент = Договор.Корреспондент;
	Акт.КонтактноеЛицо = Договор.КонтактноеЛицо;
	Акт.ПодписалОтКорреспондента = Договор.ПодписалОтКорреспондента;
	Акт.ДатаСоздания = ТекущаяДатаСеанса();
	Акт.Валюта = Константы.ОсновнаяВалюта.Получить();
	Акт.Сумма = Стр.Всего;
	
	Если ЗначениеЗаполнено(Акт.Корреспондент) Тогда 
		Акт.Корреспонденты.Очистить();
		Строка = Акт.Корреспонденты.Добавить();
		Строка.Корреспондент = Акт.Корреспондент;
		Строка.КонтактноеЛицо = Акт.КонтактноеЛицо;
		Строка.ПодписалОтКорреспондента = Акт.ПодписалОтКорреспондента;		
	КонецЕсли;
	
	ДопРеквизиты = Акт.ДополнительныеСвойства;
	ДопРеквизиты.Вставить("ЭтапДоговора", ЭтапДоговора);
	ДопРеквизиты.Вставить("СтавкаНДС", ЭтапДоговора.СтавкаНДС);
	ДопРеквизиты.Вставить("Сумма", Стр.Всего);
	ДопРеквизиты.Вставить("СуммаНДС", Стр.НДС);
	ДопРеквизиты.Вставить("ОсвобождениеОтНДС", ЭтапДоговора.ОсвобождениеОтНДС);
	ДопРеквизиты.Вставить("СостояниеАкта", Перечисления.мСостоянияАктовВыполненныхРабот.Подготовлен);
	ДопРеквизиты.Вставить("ВидАкта", Перечисления.мВидыАктовВыполненныхРабот.Обычный);
	
	Акт.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Акт.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьАктыДляАктирования()
	СписокНомеров = ПолучитьНомераАктов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мСвязиЭСЧФ.ЭСЧФ КАК ЭСЧФ,
		|	МАКСИМУМ(мСвязиЭСЧФ.ЭСЧФ.Дата) КАК ЭСЧФДата,
		|	МАКСИМУМ(мСвязиЭСЧФ.ЭСЧФ._01_НомерСЧ) КАК ЭСЧФНомер,
		|	мСвязиЭСЧФ.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ЭСЧФы
		|ИЗ
		|	РегистрСведений.мСвязиЭСЧФ КАК мСвязиЭСЧФ
		|ГДЕ
		|	мСвязиЭСЧФ.ДокументРеализации.РегистрационныйНомер В(&СписокНомеров)
		|
		|СГРУППИРОВАТЬ ПО
		|	мСвязиЭСЧФ.ДокументРеализации,
		|	мСвязиЭСЧФ.ЭСЧФ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Акт,
		|	ВнутренниеДокументы.Сумма,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта,
		|	мРеквизитыАктовВыполненныхРабот.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭСЧФы.ЭСЧФ, ЛОЖЬ) = ЛОЖЬ
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЭСЧФ,
		|	ЭСЧФы.ЭСЧФ.СтатусСФ КАК СтатусСФ
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|		ПО (мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭСЧФы КАК ЭСЧФы
		|		ПО (ЭСЧФы.ДокументРеализации = ВнутренниеДокументы.Ссылка)
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.РегистрационныйНомер В(&СписокНомеров)";
	
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
	Запрос.УстановитьПараметр("СписокНомеров", СписокНомеров);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьНомераАктов()
	СписокНомеров = Новый СписокЗначений;
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	Для каждого Стр Из Договоры Цикл
		Если Стр.Загружать Тогда
			СписокНомеров.Добавить(Стр.НомерАкта);
		КонецЕсли; 
	КонецЦикла; 
	Возврат СписокНомеров;
КонецФункции

&НаСервере
Процедура ПроверитьЭтапДоговора(ТзДог, ЭтапДоговора, Стр)
	НадоЗаписать = Ложь;
	Если ЭтапДоговора.Стоимость <> Стр.Сумма Тогда
		//ЭтапДоговора.Стоимость = Стр.Сумма;
		НадоЗаписать = Истина;
	КонецЕсли; 
	Если ЭтапДоговора.СуммаНДС <> Стр.НДС Тогда
		//ЭтапДоговора.СуммаНДС = Стр.НДС;
		НадоЗаписать = Истина;
	КонецЕсли; 
	Если ЭтапДоговора.СтоимостьСНДС <> Стр.Всего Тогда
		//ЭтапДоговора.СтоимостьСНДС = Стр.Всего;
		НадоЗаписать = Истина;
    КонецЕсли; 
    
    Если Замещать Тогда
        НадоЗаписать = Истина;
    КонецЕсли; 
	
	Если НадоЗаписать Тогда
		СоздатьЭтапДоговораГеопортал(ТзДог, ЭтапДоговора.Владелец, ЭтапДоговора.НомерЭтапа, Стр, ЭтапДоговора);	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция СоздатьЭтапДоговораГеопортал(ТзДог, Договор, НомерЭтапа, Стр, ЭтапДоговора = Неопределено)
	НачатьТранзакцию();
	Если ЭтапДоговора = Неопределено Тогда
		Этап = Справочники.мЭтапыДоговоров.СоздатьЭлемент();
		Этап.УстановитьНовыйКод(); 
		Этап.ДатаРегистрации = НачалоМесяца(ДатаАктирования);
	Иначе
	    Этап = ЭтапДоговора.ПолучитьОбъект();
	КонецЕсли; 
	Этап.Наименование = "" + Строка(НомерЭтапа) + " " + ВидРабот;
	Этап.Владелец = Договор;
	Этап.Договор = Договор;
	Этап.НомерЭтапа = Число(НомерЭтапа);
	Этап.ВидРабот = ВидРабот;
	Этап.Подразделение = Подразделение;
	Если Стр.СтавкаНДС = 20 Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_20;
    ИначеЕсли Стр.СтавкаНДС = 0 Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.Ст33;
	КонецЕсли;
	Этап.СуммаНДС = Стр.НДС;
	Этап.СтоимостьСНДС = Стр.Всего;
	Этап.Стоимость = Стр.Сумма;
	Этап.ДатаПоследнейЗаписи = НачалоМесяца(Стр.ДатаАкта);
	Этап.ЗапретИзмененияПлановогоСрока = Истина;
    
    Если Замещать Тогда
        Этап.Исполнители.Очистить();
        Этап.Геопортал.Очистить();
    КонецЕсли; 
    
    Исполнители = Этап.Исполнители.Добавить();
	Исполнители.Исполнитель = Исполнитель;
	Исполнители.КТУ = 1;
	
	ЗаполнитьУслугиЭтапа(ТзДог, Договор, Этап, Стр);
	Этап.ОбменДанными.Загрузка = Истина;
	Этап.Записать();
	
	// Создание сметной стоимости
	ПараметрыЭтапа = мРаботаСДоговорами.ПодготовитьПараметрыУчетаДоговоров();
	мРаботаСДоговорами.ЗаполнитьПараметрыУчетаДоговоровИзЭтапа(ПараметрыЭтапа, Этап);
	ПараметрыЭтапа.Вставить("НеИзменятьЭтап", Истина);
	
	// если УчетДоговора уже есть с датой = ДатаПоследнейЗаписи,
	//  то новый создавать не надо, а надо перезаписать существующий
	ПустойДок = Документы.УчетДоговоров.ПустаяСсылка();
	Результат = мРаботаСДоговорами.ПолучитьПоследнийУчетДоговоров(ПустойДок, Этап.Ссылка, Этап.ДатаПоследнейЗаписи);
	ПоследнийДокумент = Результат.ПоследнийДокумент;
	
	Отказ = Ложь;
	Если ЗначениеЗаполнено(ПоследнийДокумент) Тогда
		мРаботаСДоговорами.ИзменитьУчетДоговоров(Этап.Ссылка, Этап.ДатаПоследнейЗаписи, Отказ, ПараметрыЭтапа);
	Иначе
		мРаботаСДоговорами.ЗаписатьНовыйУчетДоговоров(Этап.Ссылка, Этап.ДатаПоследнейЗаписи, Отказ, ПараметрыЭтапа);
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат Этап.Ссылка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУслугиЭтапа(ТзДог, Договор, Этап, Стр)
	_Услуги = Стр.ПолучитьЭлементы();
	Для й=0 По _Услуги.Количество()-1 Цикл
		// услуги без сумм пропускаем
		Если _Услуги[й].Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭтапУслуги = Этап.Геопортал.Добавить();
	    ЭтапУслуги.Получатель = ПолучитьПолучателя(ТзДог, Договор, _Услуги[й]);
		ЦенаПрейскуранта = 0;
		ЭтапУслуги.Услуга = ПолучитьУслугу(_Услуги[й].КодТарифа, ЦенаПрейскуранта);
		Если Не ЗначениеЗаполнено(ЭтапУслуги.Услуга) Тогда
			Сообщить("Не найдена услуга с кодом "+_Услуги[й].КодТарифа+" дог.:"+Договор+" этап:"+Этап);
        КонецЕсли; 
        Если _Услуги[й].КодТарифа = "000000031" Тогда
            // Цены за месяц нет, только за квартал
            // Имя тарифа надо вывести в акт 
            ЭтапУслуги.ТарифДляПечати = _Услуги[й].ИмяТарифа;
        Иначе
            Если _Услуги[й].Цена <> ЦенаПрейскуранта Тогда
                Сообщить("Цена услуги с кодом "+_Услуги[й].КодТарифа+" дог.:"+Договор+" этап:"+Этап+" отличается от прейскурантной!");
            КонецЕсли; 
        КонецЕсли; 
		ЭтапУслуги.Цена = _Услуги[й].Цена;
		ЭтапУслуги.Количество = _Услуги[й].Количество;
		ЭтапУслуги.Сумма = _Услуги[й].Сумма;
		ЭтапУслуги.НДС = _Услуги[й].НДС;
		ЭтапУслуги.Всего = _Услуги[й].Всего;
		ЭтапУслуги.СтавкаНДС = Этап.СтавкаНДС;
		ЭтапУслуги.ОсвобождениеОтНДС = "";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьУслугу(КодТарифа, ЦенаПрейскуранта)
	Отбор = Новый Структура("КодТарифа", КодТарифа);
	ИскСтроки = Прейскурант.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		ЦенаПрейскуранта = ИскСтроки[0].Цена;
		Возврат ИскСтроки[0].Услуга;
	КонецЕсли; 
	Возврат Неопределено;
КонецФункции
 
&НаСервере
Функция ПолучитьНомерЭтапа(НомерАкта)
	Поз = СтрНайти(НомерАкта, "/", НаправлениеПоиска.СКонца,,1);
	Возврат Число(Сред(НомерАкта, Поз+1));
КонецФункции

&НаСервере
Функция ПолучитьПолучателя(ТзДог, Договор, Стр)
	НаименованиеОбъекта = ""+Стр.Фамилия+" "+Стр.Имя+" "+Стр.Отчество;
	
	Отбор = Новый Структура("Договор, ОбъектРаботНаименование", Договор, НаименованиеОбъекта); 
	
	ИскСтроки = ТзДог.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		НовОбъект = Справочники.мОбъектыРабот.СоздатьЭлемент();
		НовОбъект.Владелец = Договор.Корреспондент;
		НовОбъект.Наименование = НаименованиеОбъекта;
		НовОбъект.ПолноеНаименование = НаименованиеОбъекта;
		НовОбъект.Записать();
		Получатель = НовОбъект.Ссылка;
		
		// Добавить в ТзДог 
		НовСтр = ТзДог.Добавить();
		НовСтр.Договор = Договор;
		НовСтр.ОбъектРаботНаименование = НаименованиеОбъекта;
		НовСтр.ОбъектРабот = Получатель;
	Иначе	
		Получатель = ИскСтроки[0].ОбъектРабот;	
	КонецЕсли; 
	
	Возврат Получатель;
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляАктирования() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
	|	мЭтапыДоговоров.Подразделение КАК Подразделение,
	|	мЭтапыДоговоров.Исполнители.(
	|		Исполнитель,
	|		КТУ
	|	) КАК Исполнители,
	|	мЭтапыДоговоров.Владелец КАК Договор,
	|	мЭтапыДоговоров.Владелец.РегистрационныйНомер КАК РегистрационныйНомер,
	|	мЭтапыДоговоров.ОбъектРабот.Наименование КАК ОбъектРаботНаименование,
	|	мЭтапыДоговоров.ОбъектРабот КАК ОбъектРабот,
	|	мЭтапыДоговоров.НомерЭтапа
	|ИЗ
	|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
	|ГДЕ
	|	мЭтапыДоговоров.Владелец.РегистрационныйНомер В(&СписокНомеровДоговоров)
	|	И НЕ мЭтапыДоговоров.ПометкаУдаления
	|	И мЭтапыДоговоров.ДатаИсключенИзДоговора=ДатаВремя(1,1,1,0,0,0)";
	
	СписокНомеровДоговоров = ПолучитьСписокНомеровДоговоров();
	Запрос.УстановитьПараметр("СписокНомеровДоговоров", СписокНомеровДоговоров);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьСписокНомеровДоговоров()
	СписокНомеров = Новый СписокЗначений;
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	Для каждого Стр Из Договоры Цикл
		Если Стр.Загружать Тогда
			ИскЭл = СписокНомеров.НайтиПоЗначению(Стр.НомерДоговора);
			Если ИскЭл = Неопределено Тогда
				СписокНомеров.Добавить(Стр.НомерДоговора);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Возврат СписокНомеров;
КонецФункции

&НаСервере
Функция ДокНеПуст() 
	Если Актирование.Акты.Количество() = 0 и 
		Актирование.Зарплата.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОбновитьАктыНаСервере()
    Док = Актирование.ПолучитьОбъект();
	//Док.Акты.Очистить();
	//Док.Зарплата.Очистить();
	
	ТзДог = ПолучитьДанныеДляАктирования();
	
	// удаление лишних пробелов
	Для каждого Стр Из ТзДог Цикл
		Стр.ОбъектРабот = СокрЛП(Стр.ОбъектРабот);
	КонецЦикла; 
	
	Для каждого Акт Из АктыИзФайла Цикл
		Если Не Акт.Загружать Тогда
			Продолжить;
		КонецЕсли; 
		
		Отбор = Новый Структура("РегистрационныйНомер, ОбъектРабот", 
		Акт.НомерДоговора,
		""+Акт.Фамилия+" "+Акт.Имя+" "+Акт.Отчество); 
		
		ИскСтроки = ТзДог.НайтиСтроки(Отбор);
		
		Если ИскСтроки.Количество() = 0 Тогда
			Сообщить("Не найден договор "+ Акт.НомерДоговора + " "+Акт.Фамилия+" "+Акт.Имя+" "+Акт.Отчество);
			Сообщить("Акт не создан!");
			Продолжить;
		КонецЕсли; 
		
        // ищем в Актах актирования
        Отбор = Новый Структура("Договор, ЭтапДоговора", ИскСтроки[0].Договор, ИскСтроки[0].ЭтапДоговора);
        ИскАкт = Док.Акты.НайтиСтроки(Отбор);
        Если ИскАкт.Количество() = 0 Тогда
        	Сообщить("Не найден в актировании договор "+ ИскСтроки[0].Договор + " Этап: "+ИскСтроки[0].ЭтапДоговора);
        	Сообщить("Акт не обновлен!");
        	Продолжить;
        КонецЕсли; 
        
        ИскАкт[0].Сумма = Акт.Всего;
        ИскАкт[0].НДС = Акт.НДС;
		
        // Объем работ исполнителей
        ОтборИсп = Новый Структура("ЭтапДоговора, НомерАкта", ИскСтроки[0].ЭтапДоговора, ИскАкт[0].НомерАкта); 
        ИскИсп = Док.Зарплата.НайтиСтроки(ОтборИсп);
        Если ИскИсп.Количество() > 0 Тогда
        	Для каждого Исп Из ИскИсп Цикл
        		Исп.ОбъемРабот = Акт.Всего - Акт.НДС;
        	КонецЦикла; 
        КонецЕсли; 
		
		//НовАкт = Док.Акты.Добавить();
		//НовАкт.Договор = ИскСтроки[0].Договор;
		//НовАкт.ЭтапДоговора = ИскСтроки[0].ЭтапДоговора;
		//НовАкт.НомерАкта = Акт.НомерАкта + "/" + ИскСтроки[0].ЭтапДоговора.НомерЭтапа;
		//НовАкт.ДатаАкта = Акт.ДатаАкта;
		//НовАкт.Сумма = Акт.Всего;
		//НовАкт.НДС = Акт.НДС;
		
		//Если ИскСтроки[0].Исполнители.Количество() > 0 Тогда
		//	Для каждого Исп Из ИскСтроки[0].Исполнители Цикл
		//		НовЗП = Док.Зарплата.Добавить();
		//		НовЗП.ЭтапДоговора = ИскСтроки[0].ЭтапДоговора;
		//		НовЗП.Исполнитель = Исп.Исполнитель;
		//		НовЗП.КТУ = Исп.КТУ;
		//		НовЗП.Норматив = 0;
		//		НовЗП.Коэффициент = 1;
		//		НовЗП.ОбъемРабот = Акт.Всего - Акт.НДС;
		//		НовЗП.Начислено = 0;
		//		Если ЗначениеЗаполнено(ИскСтроки[0].Подразделение) Тогда
		//			НовЗП.Подразделение = ИскСтроки[0].Подразделение;
		//		Иначе
		//			НовЗП.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Исп.Исполнитель);
		//		КонецЕсли; 
		//		НовЗП.НомерАкта = НовАкт.НомерАкта;
		//		НовЗП.БазовоеНачисление = 0;
		//	КонецЦикла; 
		//КонецЕсли; 
	КонецЦикла; 
	//Док.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАкты(Команда)
    //ОбновитьАктыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	ЭлементыДерева = АктыИзФайла.ПолучитьЭлементы();
	ПометитьЭлементы(ЭлементыДерева, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	ЭлементыДерева = АктыИзФайла.ПолучитьЭлементы();
	ПометитьЭлементы(ЭлементыДерева, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьЭлементы(ЭлементыДерева, Флаг)
	Для й=0 По ЭлементыДерева.Количество()-1 Цикл
		Стр = ЭлементыДерева[й];
		Стр.Загружать = Флаг;
		Тар = Стр.ПолучитьЭлементы();
		Для ц=0 По Тар.Количество()-1 Цикл
			Тар[ц].Загружать = Флаг;
		КонецЦикла; 
	КонецЦикла; 		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАкты()
	Договоры = АктыИзФайла.ПолучитьЭлементы();
	
	й = Договоры.Количество()-1;
	Пока й >= 0 Цикл
		Договоры.Удалить(й);
		й = й-1;
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть файл с данными";
	ДиалогВыбораФайла.Фильтр    = "Файл-xml (*.xml)|*.xml";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура АктыЗагружатьПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	ТекЭлемент = АктыИзФайла.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор());
	Эл = ТекЭлемент.ПолучитьЭлементы();
	Для ц=0 По Эл.Количество()-1 Цикл
		Эл[ц].Загружать = ТекЭлемент.Загружать;
	КонецЦикла; 
КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура ПечатьАктов(Команда)
	ОчиститьСообщения();
	Всего = 0;
	Для каждого Акт Из Акты Цикл
		Если Акт.Пометка Тогда
			Всего = Всего + 1;
		КонецЕсли; 	
	КонецЦикла; 
	
	Если Всего = 0 Тогда
		Сообщить("Нет отмеченных актов для печати!");
		Возврат;
	КонецЕсли; 
	
	// Вывод готовых печатных форм
	WordApp = Новый COMОбъект("Word.Application");
	
	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	Сч=0;
	Для каждого Акт Из Акты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если Акт.Пометка Тогда
			
			Сч = Сч + 1;
			Индикатор.ПредставлениеПроцесса = "Подготовка к печати... "+Сч+" из "+Всего+"...";
			мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
			//Процент = Окр(Сч/Всего*100,0);
			//Состояние("Подготовка к печати...", Процент, ""+Сч+" из "+Всего);
			
			ПутьКФайлуНаДиске = ПолучитьПутьКФайлу(Акт.КарточкаФайла);
			Если Сч = 1 Тогда
				Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
				//Док.Range(ПозицияОкончанияДокумента-1, ПозицияОкончанияДокумента-1).InsertBreak(2);
                Контекст = Док.Content;
                Контекст.InsertParagraphAfter();
			Иначе
				Док.Range(Контекст.End - 1, Контекст.End).InsertFile(ПутьКФайлуНаДиске, "", Ложь, Ложь);
				//Док.Range(ПозицияОкончанияДокумента-1, ПозицияОкончанияДокумента-1).InsertBreak(2);
				Контекст.InsertParagraphAfter();
			КонецЕсли;
			
			Если Сч < Всего Тогда
				// Вставка разрыва раздела с новой страницы страницы
				ПозицияОкончанияДокумента = Док.Range().End;
				Док.Range(ПозицияОкончанияДокумента-1, ПозицияОкончанияДокумента-1).InsertBreak(2);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла; 
	
	ПутьКФайлуНаДиске1 = ПолучитьИмяВременногоФайла("docx");
	
	Док.SaveAs(ПутьКФайлуНаДиске1);//(ПутьКФайлуНаДиске)                        
	Док.Saved = Истина;
	
	Если ПечатьСразуНаПринтер Тогда
		Если Копий > 0 Тогда
			Док.PrintOut(,,,,,,,Копий);
		Иначе 
			Док.PrintOut();
		КонецЕсли;
		
		Док.Close(); 
	Иначе
		// Открытие на просмотр файла
		ЗапуститьПриложение(ПутьКФайлуНаДиске1, , , ); 
		//Док.Close(); 
	КонецЕсли; 
	
	WordApp.Quit();	
	WordApp = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПутьКФайлу(КарточкаФайла)
	Возврат "" + КарточкаФайла.ТекущаяВерсияТом.ПолныйПутьWindows + КарточкаФайла.ТекущаяВерсияПутьКФайлу;	
КонецФункции

&НаКлиенте
Процедура СоздатьПечатныеФормы(Команда)
	СоздатьПечатныеФормыАктов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПечатныеФормыАктов()
	
	Всего = 0;
	Для каждого Акт Из Акты Цикл
		Если Акт.Пометка Тогда
			Всего = Всего + 1;
			Если Всего = 1 Тогда
				СтруктураНашихРеквизитов = мРаботаСДоговорами.ПолучитьНашиРеквизиты(Акт.Договор, Истина);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла;
	
	ЗаполнитьДанныеДляПечатиАктов();
	ГородПодразделения	= мРазное.ПолучитьГородПодразделения();
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	Сч = 0;
    WordApp = Новый COMОбъект("Word.Application");
	
	Для каждого Акт Из Акты Цикл
		
		Если Не Акт.Пометка Тогда
			Продолжить;
        КонецЕсли; 	
        
		Сч = Сч+1;
		Индикатор.ПредставлениеПроцесса = "Формирование печатных форм "+Сч+" из "+Всего+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
			
		Макет = ПолучитьМакетСервер();
		временныйПуть = КаталогВременныхФайлов();
		ПутьКФайлуНаДиске = "Акт "+Акт.НомерАкта+".docx";
		ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "/", "_");
		ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "\", "_");
		ПутьКФайлуНаДиске = временныйПуть + ПутьКФайлуНаДиске;
		Макет.Записать(ПутьКФайлуНаДиске);
		
		Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
		
		Селекция = WordApp.Selection;
        
        Поиск = Док.Content.Find;
		Поиск.ClearFormatting();
		Поиск.Replacement.ClearFormatting();
		
		// Шапка документа
        Для каждого Реквизит Из СтруктураНашихРеквизитов Цикл
			//Если Реквизит.Ключ = "НашРасчетныйСчет" Тогда
			//мРазноеКлиент.Заменить(Поиск, Реквизит.Ключ, "3012163150010 в ЗАО ""МТБанк"", МФО 117");  
			//Иначе
    			мРазноеКлиент.Заменить(Поиск, Реквизит.Ключ, Реквизит.Значение);  
			//КонецЕсли; 
		КонецЦикла; 
		
		Отбор = Новый Структура("Акт", Акт.Акт);
		ИскСтроки = Корреспонденты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			Сообщить("Ошибка при заполнении корресспондента в акте " + Акт.Акт+"! Печатная форма не сформирована!");
			Продолжить;
		КонецЕсли; 
		
		ДанныеКорр = ИскСтроки[0];
		мРазноеКлиент.Заменить(Поиск, "%Заказчик%", ДанныеКорр.ПолноеНаименование);  
		мРазноеКлиент.Заменить(Поиск, "%Адрес%", ДанныеКорр.Адрес); 
		Если ЗначениеЗаполнено(ДанныеКорр.НомерСчета) Тогда
			РасчетныйСчет = ДанныеКорр.НомерСчета + " " + ДанныеКорр.Банк + ", МФО "+ДанныеКорр.КодБанка;
		Иначе
			РасчетныйСчет = "_________________ " + "_________________, " + ", МФО ________ ";
		КонецЕсли; 
		//Если ЗначениеЗаполнено(ДанныеКорр.НомерСчета) Тогда
		//	РасчетныйСчет = ДанныеКорр.НомерСчета + " " + ДанныеКорр.Банк + ", "+ДанныеКорр.БанкАдрес + ", МФО "+ДанныеКорр.КодБанка;
		//Иначе
		//	РасчетныйСчет = "_________________ " + "_________________, "+"_________________ " + ", МФО ________ ";
		//КонецЕсли; 
		мРазноеКлиент.Заменить(Поиск, "%РасчетныйСчет%", РасчетныйСчет); 
        Если ЗначениеЗаполнено(ДанныеКорр.УНП) Тогда
            мРазноеКлиент.Заменить(Поиск, "[УНП %УНП%,]", "УНП %УНП%,");
            мРазноеКлиент.Заменить(Поиск, "%УНП%", ДанныеКорр.УНП);
        Иначе
            мРазноеКлиент.Заменить(Поиск, "[УНП %УНП%,]", "");
        КонецЕсли;
       Если ЗначениеЗаполнено(ДанныеКорр.ОКПО) Тогда
            мРазноеКлиент.Заменить(Поиск, "[ОКПО %ОКПО%,]", "ОКПО %ОКПО%,");
            мРазноеКлиент.Заменить(Поиск, "%ОКПО%", ДанныеКорр.ОКПО);
        Иначе
            мРазноеКлиент.Заменить(Поиск, "[ОКПО %ОКПО%,]", "");
        КонецЕсли;
		  
		мРазноеКлиент.Заменить(Поиск, "%ОКПО%", ДанныеКорр.ОКПО);  
		мРазноеКлиент.Заменить(Поиск, "%Телефон%", ДанныеКорр.Телефон);  
		
		// Заполнение акта
		РегНомер = Акт.НомерДоговора;
		ДатаРег = Формат(Акт.ДатаДоговора,"ДЛФ=D");
		НомерАкта = Акт.НомерАкта;
		ДатаАкта = Акт.ДатаАкта;
		ОтчетныйПериод = Формат(Акт.ДатаАкта,"ДФ=""ММMM yyyy 'г.'""");
		
		Если ЗначениеЗаполнено(ДатаАкта) Тогда
			ДатаАкта = Формат(ДатаАкта, "ДЛФ=DD");
		Иначе	
			ДатаАкта = "«_____»_____________201___г.";
		КонецЕсли; 
		
		мРазноеКлиент.Заменить(Поиск, "НомерДатаДоговора", РегНомер+" от "+ДатаРег);  
		мРазноеКлиент.Заменить(Поиск, "НомерАкта", НомерАкта); 
		мРазноеКлиент.Заменить(Поиск, "%Город", ГородПодразделения); 
		мРазноеКлиент.Заменить(Поиск, "%ДатаАкта%", ДатаАкта);  
		мРазноеКлиент.Заменить(Поиск, "%ОтчетныйПериод%", ОтчетныйПериод);  
		
		// Вставка штрихкода
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Акт.Акт, Ложь, Истина);
		Если ДанныеОШтрихкоде <> Неопределено
			И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
			
			// Запись картинки штрихкода во временный файл
			ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
			ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
			
			Док.Bookmarks("Штрихкод").Range.Select();
			Селекция = WordApp.Selection; // активная (выделенная) область 
			Рисунок = Селекция.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
			
			// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
			Shape = Рисунок.ConvertToShape();
			Shape.WrapFormat.Type = 0; // по контуру...
			
			УдалитьФайлы(ВременныйФайлКартинки);
		КонецЕсли;
		
		// Строки таблицы
		НачалоЗакладки = Док.Bookmarks("СтрокаТаблицы").Start;
		КонецЗакладки = Док.Bookmarks("СтрокаТаблицы").End;
		Селекция.Start = НачалоЗакладки;
		Селекция.End = КонецЗакладки;
		Селекция.Cut();
		
		ФорматЦен = "ЧДЦ=2; ЧРД=.; ЧГ=3,0";
		Отбор = Новый Структура("Акт", Акт.Акт);
		ИскСтроки = Услуги.НайтиСтроки(Отбор);
		КолвоСтрок = ИскСтроки.Количество();
		Если КолвоСтрок > 0 Тогда
			
			НадоВставитьРазрывСтраницы = Ложь;
			Если (20 < КолвоСтрок и КолвоСтрок < 37)
				ИЛИ	(72 < КолвоСтрок и КолвоСтрок < 88) Тогда			
				НадоВставитьРазрывСтраницы = Истина;
			КонецЕсли; 
            
            //ИскСтроки.Сортировать("НомерСтроки");
            
			СтоимостьИтого = 0;
			СуммаНДСИтого = 0;
			СтоимостьСНДСИтого = 0;
			СтавкаНДС = "";
            
			й = ИскСтроки.Количество()-1;
			Пока й >= 0 Цикл
				Если НадоВставитьРазрывСтраницы Тогда
					Если й = ИскСтроки.Количество()-2 Тогда
						// Вставка разрыва страницы
						Док.Range(НачалоЗакладки+1, НачалоЗакладки+1).InsertBreak();
					КонецЕсли; 
				КонецЕсли; 
				селекция.Start = НачалоЗакладки; // Начало вставки
				селекция.Collapse();             // Вставка, а не замещение
				селекция.Paste();
				НомерПодпункта = й+1;
				мРазноеКлиент.Заменить(Поиск, "%НомерПП%", НомерПодпункта); 
				Если ИскСтроки[й].ДопУслуга Тогда
					мРазноеКлиент.Заменить(Поиск, "%НаименованиеУслуги%", "  "+ИскСтроки[й].УслугаНаименование); 
				Иначе
					мРазноеКлиент.Заменить(Поиск, "%НаименованиеУслуги%", ИскСтроки[й].Получатель); 
				КонецЕсли; 
				мРазноеКлиент.Заменить(Поиск, "%ДопИнформация%", ИскСтроки[й].УслугаДопИнформация); 
				мРазноеКлиент.Заменить(Поиск, "%Цена%", Формат(ИскСтроки[й].Цена, ФорматЦен)); 
				мРазноеКлиент.Заменить(Поиск, "%Количество%", ИскСтроки[й].Количество); 
				мРазноеКлиент.Заменить(Поиск, "%Стоимость%", Формат(ИскСтроки[й].Сумма, ФорматЦен)); 
				мРазноеКлиент.Заменить(Поиск, "%СтавкаНДС%", ИскСтроки[й].СтавкаНДС); 
				мРазноеКлиент.Заменить(Поиск, "%СуммаНДС%", Формат(ИскСтроки[й].НДС, ФорматЦен)); 
				мРазноеКлиент.Заменить(Поиск, "%СтоимостьСНДС%", Формат(ИскСтроки[й].Всего, ФорматЦен)); 
				
				Если ИскСтроки[й].НДС > 0 Тогда
					СтавкаНДС = ИскСтроки[й].СтавкаНДС; 
				КонецЕсли; 
				
				СтоимостьИтого = СтоимостьИтого + ИскСтроки[й].Сумма;
				СуммаНДСИтого = СуммаНДСИтого + ИскСтроки[й].НДС;
				СтоимостьСНДСИтого = СтоимостьСНДСИтого + ИскСтроки[й].Всего;
				й=й-1;
			КонецЦикла;
			// Всего
			мРазноеКлиент.Заменить(Поиск, "%СтоимостьИтого%", Формат(СтоимостьИтого, ФорматЦен)); 
			мРазноеКлиент.Заменить(Поиск, "%СуммаНДСИтого%", Формат(СуммаНДСИтого, ФорматЦен)); 
			мРазноеКлиент.Заменить(Поиск, "%СтоимостьСНДСИтого%", Формат(СтоимостьСНДСИтого, ФорматЦен)); 
		КонецЕсли; 
		
		// Стоимость Акта
		СтоимостьАкта = мРаботаСДоговорами.СуммаЧисломИПрописью(СтоимостьСНДСИтого, ВалютаДоговора);
		Если СуммаНДСИтого > 0 Тогда
			СуммаНДСПрописьюПолная = мРаботаСДоговорами.СуммаЧисломИПрописью(СуммаНДСИтого, ВалютаДоговора);
			СтоимостьАкта = СтоимостьАкта + ", в том числе НДС по ставке " + СтавкаНДС +"% в сумме " + СуммаНДСПрописьюПолная;
		КонецЕсли;
		мРазноеКлиент.Заменить(Поиск,"СтоимостьАкта", СтоимостьАкта); 
		
		// Подписи
		мРазноеКлиент.Заменить(Поиск, "%ПодписалДолжность", ПолучитьНаименованиеДолжности(Должность1)+Символы.ВК);
		мРазноеКлиент.Заменить(Поиск, "%МестоПодписи", ""+Символы.ВК+"_________________ ");
		мРазноеКлиент.Заменить(Поиск, "%ПодписалКратко", ПолучитьПодписантаКратко(Подписал1)+Символы.ВК);
		мРазноеКлиент.Заменить(Поиск, "%(подпись)ФИО", "         (подпись)                               (Ф.И.О.)"+Символы.ВК+"М.П.");
		мРазноеКлиент.Заменить(Поиск, "ПодписалДоверенность", "");
		//мРазноеКлиент.Заменить(Поиск, "ПодписалДоверенность", ""+Символы.ВК);
		мРазноеКлиент.Заменить(Поиск, "ДолжностьИсполнителя", ПолучитьНаименованиеДолжности(Должность2));
		мРазноеКлиент.Заменить(Поиск, "ИсполнительКратко", ПолучитьПодписантаКратко(Подписал2));
		
		мРазноеКлиент.Заменить(Поиск, "ДолжностьКорр", "_________________ "+Символы.ВК);
		мРазноеКлиент.Заменить(Поиск, "КорреспондентКратко", " _________________");
			
		Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
		Док.Saved = Истина;
		
		Если СохранятьВАктах Тогда
			Док.Close(); 
            //WordApp.Visible = Ложь; 
			
			//Сохранить в договор
			КарточкаФайла = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, Акт.Договор, ЭтаФорма, Истина, , , , ,);
			Акт.КарточкаФайла = КарточкаФайла;
			
			Если ЗначениеЗаполнено(Акт.Акт) Тогда
				// Сохранить в Акт вып работ
				РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, Акт.Акт, ЭтаФорма, Истина, , , , ,);
			КонецЕсли; 
			
			//// Открытие файла на редактирование из карточки в списке файлов договора
			//КомандыРаботыСФайламиКлиент.Редактировать(КарточкаФайла);
		Иначе
			Если ПечатьСразуНаПринтер Тогда
				Если Копий > 0 Тогда
					Док.PrintOut(,,,,,,,Копий);
				Иначе 
					Док.PrintOut();
				КонецЕсли;
				
				Док.Close(); 
			Иначе
				// Открытие на просмотр файла
				ЗапуститьПриложение(ПутьКФайлуНаДиске, , , ); 
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла;
    WordApp.Quit();	
    WordApp = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеДолжности(Должность)
	Возврат Должность.Наименование;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодписантаКратко(Подписал)
	Возврат Подписал.ПредставлениеВДокументах;	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьДанныеДляПечатиАктов()
	СписокЭтапов = ПолучитьСписокЭтапов();
	СписокКорр = ПолучитьСписокКорр();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   мЭтапыДоговоровГеопортал.Ссылка КАК ЭтапДоговора,
        |   мЭтапыДоговоровГеопортал.НомерСтроки КАК НомерСтроки,
        |   мЭтапыДоговоровГеопортал.Получатель.Наименование КАК Получатель,
        |   мЭтапыДоговоровГеопортал.Услуга,
        |   мЭтапыДоговоровГеопортал.Услуга.ДопУслуга КАК ДопУслуга,
        |   ВЫБОР
        |       КОГДА мЭтапыДоговоровГеопортал.ТарифДляПечати = """"
        |           ТОГДА мЭтапыДоговоровГеопортал.Услуга.ДляПечатиВАкте
        |       ИНАЧЕ мЭтапыДоговоровГеопортал.ТарифДляПечати
        |   КОНЕЦ КАК УслугаНаименование,
        |   мЭтапыДоговоровГеопортал.Услуга.ДопИнформацияДляПечати КАК УслугаДопИнформация,
        |   мЭтапыДоговоровГеопортал.Цена,
        |   мЭтапыДоговоровГеопортал.Количество,
        |   мЭтапыДоговоровГеопортал.Сумма,
        |   мЭтапыДоговоровГеопортал.НДС,
        |   мЭтапыДоговоровГеопортал.Всего,
        |   мЭтапыДоговоровГеопортал.СтавкаНДС.Наименование КАК СтавкаНДС
        |ИЗ
        |   Справочник.мЭтапыДоговоров.Геопортал КАК мЭтапыДоговоровГеопортал
        |ГДЕ
        |   мЭтапыДоговоровГеопортал.Ссылка В(&СписокЭтапов)
        |   И НЕ мЭтапыДоговоровГеопортал.Ссылка.ПометкаУдаления
        |
        |УПОРЯДОЧИТЬ ПО
        |   НомерСтроки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Корреспонденты.Ссылка КАК Корреспондент,
        |   Корреспонденты.Наименование,
        |   Корреспонденты.ПолноеНаименование,
        |   Корреспонденты.ИНН,
        |   Корреспонденты.КодПоОКПО,
        |   Корреспонденты.ОсновнойБанковскийСчет.НомерСчета,
        |   Корреспонденты.ОсновнойБанковскийСчет.СчетИБАН,
        |   Корреспонденты.ОсновнойБанковскийСчет.Банк.Код,
        |   Корреспонденты.ОсновнойБанковскийСчет.Банк.БИК,
        |   Корреспонденты.ОсновнойБанковскийСчет.Банк.Наименование,
        |   Корреспонденты.ОсновнойБанковскийСчет.Банк.Адрес
        |ПОМЕСТИТЬ Заказчики
        |ИЗ
        |   Справочник.Корреспонденты КАК Корреспонденты
        |ГДЕ
        |   Корреспонденты.Ссылка В(&СписокКорр)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КорреспондентыКонтактнаяИнформация.Представление КАК Адрес,
        |   КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
        |ПОМЕСТИТЬ тАдрес
        |ИЗ
        |   Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
        |ГДЕ
        |   КорреспондентыКонтактнаяИнформация.Ссылка В(&СписокКорр)
        |   И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КорреспондентыКонтактнаяИнформация.Представление КАК Телефон,
        |   КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
        |ПОМЕСТИТЬ тТелефон
        |ИЗ
        |   Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
        |ГДЕ
        |   КорреспондентыКонтактнаяИнформация.Ссылка В(&СписокКорр)
        |   И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКорреспондента)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(тАдрес.Адрес, ""__________________"") КАК Адрес,
        |   ЕСТЬNULL(тТелефон.Телефон, ""__________________"") КАК Телефон,
        |   Заказчики.Корреспондент,
        |   Заказчики.Наименование КАК Наименование,
        |   Заказчики.ПолноеНаименование КАК ПолноеНаименование,
        |   Заказчики.ИНН КАК УНП,
        |   Заказчики.КодПоОКПО КАК ОКПО,
		//|   Заказчики.ОсновнойБанковскийСчетНомерСчета КАК НомерСчета,
        |   Заказчики.ОсновнойБанковскийСчетСчетИБАН КАК НомерСчета,
		//|   Заказчики.ОсновнойБанковскийСчетБанкКод КАК КодБанка,
         |   Заказчики.ОсновнойБанковскийСчетБанкБИК КАК КодБанка,
        |   Заказчики.ОсновнойБанковскийСчетБанкНаименование КАК Банк,
        |   Заказчики.ОсновнойБанковскийСчетБанкАдрес КАК БанкАдрес
        |ИЗ
        |   Заказчики КАК Заказчики
        |       ЛЕВОЕ СОЕДИНЕНИЕ тАдрес КАК тАдрес
        |       ПО Заказчики.Корреспондент = тАдрес.Корреспондент
        |       ЛЕВОЕ СОЕДИНЕНИЕ тТелефон КАК тТелефон
        |       ПО Заказчики.Корреспондент = тТелефон.Корреспондент";

	Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);
 	Запрос.УстановитьПараметр("СписокКорр", СписокКорр);

	Результат = Запрос.ВыполнитьПакет();
	
	// Заполнение таблиц формы данными для печати в актах
	
	// Услуги
	Выборка = Результат[0].Выбрать();
	
	Услуги.Очистить();

	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ЭтапДоговора", Выборка.ЭтапДоговора);
		ИскСтроки = Акты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Услуга = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(Услуга, Выборка);
			Услуга.Акт = ИскСтроки[0].Акт;
		КонецЕсли; 
	КонецЦикла;
	
	// Корреспонденты
 	Выборка = Результат[4].Выбрать();
	
	Корреспонденты.Очистить();

	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("Корреспондент, Пометка", Выборка.Корреспондент, Истина);
		ИскСтроки = Акты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() > 0 Тогда
			Стр = Корреспонденты.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Стр.Акт = ИскСтроки[0].Акт;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ПолучитьСписокЭтапов()
	Сп = новый СписокЗначений;
	Для каждого Акт Из Акты Цикл
		Если Акт.Пометка Тогда
			Сп.Добавить(Акт.ЭтапДоговора);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Сп;
КонецФункции

&НаСервере
Функция ПолучитьСписокКорр()
	Сп = новый СписокЗначений;
	Для каждого Акт Из Акты Цикл
		Если Акт.Пометка Тогда
			Сп.Добавить(Акт.Корреспондент);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Сп;
КонецФункции
 

&НаСервере
Функция ПолучитьМакетСервер()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктГеопортал");
КонецФункции

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	ЗаполнитьАкты();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАкты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК Акт,
		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаАкта,
		|	ВнутренниеДокументы.Корреспондент КАК Корреспондент,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец КАК Договор,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец.ДатаРегистрации КАК ДатаДоговора,
		|	ВнутренниеДокументы.ЭтапДоговора.Владелец.РегистрационныйНомер КАК НомерДоговора,
		|	ВнутренниеДокументы.ЭтапДоговора КАК ЭтапДоговора,
		|	ВнутренниеДокументы.Сумма КАК Всего,
		|	ГОД(ВнутренниеДокументы.ЭтапДоговора.Владелец.ДатаРегистрации) КАК ГодДоговора,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|	И НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И ВнутренниеДокументы.ЭтапДоговора.Владелец.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.ВидДокумента = &ВидДокументаАкт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Файлы.ТекущаяВерсияДатаМодификацииФайла) КАК ТекущаяВерсияДатаМодификацииФайла,
		|	Файлы.ВладелецФайла КАК Акт
		|ПОМЕСТИТЬ ТабФайлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В
		|			(ВЫБРАТЬ
		|				Акты.Акт
		|			ИЗ
		|				Акты КАК Акты)
		|	И НЕ Файлы.ПометкаУдаления
		|	И Файлы.ТекущаяВерсияРасширение = ""docx""
		|
		|СГРУППИРОВАТЬ ПО
		|	Файлы.ВладелецФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Акты.Акт КАК Акт,
		|	Акты.ДатаАкта КАК ДатаАкта,
		|	Акты.Корреспондент КАК Корреспондент,
		|	Акты.Договор КАК Договор,
		|	Акты.ДатаДоговора КАК ДатаДоговора,
		|	Акты.НомерДоговора КАК НомерДоговора,
		|	Акты.ЭтапДоговора КАК ЭтапДоговора,
		|	Акты.Всего КАК Всего,
		|	Акты.ГодДоговора КАК ГодДоговора,
		|	Акты.НомерАкта КАК НомерАкта,
		|	Файлы.Ссылка КАК КарточкаФайла,
		|	ИСТИНА КАК Пометка
		|ИЗ
		|	Акты КАК Акты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТабФайлы КАК ТабФайлы
		|			ПО Файлы.ВладелецФайла = ТабФайлы.Акт
		|				И Файлы.ТекущаяВерсияДатаМодификацииФайла = ТабФайлы.ТекущаяВерсияДатаМодификацииФайла
		|		ПО Акты.Акт = Файлы.ВладелецФайла
		|			И (Файлы.ВладелецФайла = ТабФайлы.Акт)
		|			И (Файлы.ТекущаяВерсияДатаМодификацииФайла = ТабФайлы.ТекущаяВерсияДатаМодификацииФайла)";
	
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДоговорГеопортал);
	Запрос.УстановитьПараметр("ВидДокументаАкт", Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
	Запрос.УстановитьПараметр("Дата1", ПериодРегистрации.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", ПериодРегистрации.ДатаОкончания);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Акты.Загрузить(Результат);
	Для каждого Стр Из Акты Цикл
		Стр.ДляСортировки = Стр.ГодДоговора*1000000 + ПолучитьЧисловойНомерДоговора(Стр.НомерАкта);
	КонецЦикла; 
	Акты.Сортировать("ДляСортировки");		
КонецПроцедуры

&НаКлиенте
Процедура ПометитьАктыБезКарточекФайлов()
	Для каждого Стр Из Акты Цикл
		Стр.Пометка = Не ЗначениеЗаполнено(Стр.КарточкаФайла);
	КонецЦикла; 
КонецПроцедуры
 
&НаСервере
Функция ПолучитьЧисловойНомерДоговора(НомерАкта)
	Поз = СтрНайти(НомерАкта, "-");
	Если Поз > 0 Тогда
		Возврат Число(Лев(НомерАкта, Поз-1));
	КонецЕсли; 
	Возврат 0;
КонецФункции

#Область ОбработчикиФормы
&НаКлиенте
Процедура Подписал1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот");
	Подписал1 = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидДокумента);
	Должность1 = РаботаСПользователями.ПолучитьДолжность(Подписал1);
КонецПроцедуры

&НаКлиенте
Процедура Подписал1ПриИзменении(Элемент)
	Должность1 = РаботаСПользователями.ПолучитьДолжность(Подписал1);
КонецПроцедуры

&НаКлиенте
Процедура Подписал1ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот");
	Подписал1 = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидДокумента, Текст);
КонецПроцедуры

&НаКлиенте
Процедура Подписал2ПриИзменении(Элемент)
	Должность2 = РаботаСПользователями.ПолучитьДолжность(Подписал2);
КонецПроцедуры
 
&НаКлиенте
Процедура ПометитьВсеАкты(Команда)
	Для каждого Стр Из Акты Цикл
		Стр.Пометка = Истина;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиАкты(Команда)
	Для каждого Стр Из Акты Цикл
		Стр.Пометка = Ложь;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ЗаполнитьАкты();	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АктированиеПриИзменении(Элемент)
	ДатаАктирования = ПолучитьДатуАктирования(Актирование);
	ПериодРегистрации.ДатаНачала = НачалоМесяца(ДатаАктирования);
	ПериодРегистрации.ДатаОкончания = КонецМесяца(ДатаАктирования);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуАктирования(ДокАктирования)
	Возврат ДокАктирования.Дата;	
КонецФункции
 
	
#КонецОбласти
#КонецОбласти 

