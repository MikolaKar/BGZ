
&НаКлиенте
Перем ТекущаяСтрокаЗаявки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборФайлов(Неопределено);
	
	РезультатыСогласованияСогласовано = Перечисления.РезультатыСогласования.Согласовано;
	РезультатыСогласованияНеСогласовано = Перечисления.РезультатыСогласования.НеСогласовано;
	РезультатыСогласованияСогласованоСЗамечаниями = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
	
	РезультатыУтвержденияУтверждено = Перечисления.РезультатыУтверждения.Утверждено;
	РезультатыУтвержденияНеУтверждено = Перечисления.РезультатыУтверждения.НеУтверждено;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ЗадачиМнеСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Элементы.ЗадачиОтМеняСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	Файлы.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	
	ПараметрыИмяБизнесПроцесса = Неопределено;
	Если Параметры.Свойство("ИмяБизнесПроцесса") Тогда
		ПараметрыИмяБизнесПроцесса = Параметры.ИмяБизнесПроцесса;
	КонецЕсли;	
	
	Если Параметры.Свойство("ОткрытаИзФормыРабочийСтолРуководителя") Тогда
		ОткрытаИзФормыРабочийСтолРуководителя = Параметры.ОткрытаИзФормыРабочийСтолРуководителя;
	КонецЕсли;	
	
	Если ПараметрыИмяБизнесПроцесса <> Неопределено Тогда
		
		ТипБизнесПроцесса = Неопределено;
		
		Если ПараметрыИмяБизнесПроцесса = "Рассмотрение" Тогда

			ТипБизнесПроцесса = БизнесПроцессы.Рассмотрение.ПустаяСсылка();
			Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокРассмотрение;
			Заголовок = НСтр("ru='Заявки на рассмотрение'");
			Элементы.ГруппаРезолюцияПолеВводаИКнопка.Видимость = Истина;
			Элементы.ГруппаТолькоКнопкиСогласования.Видимость = Ложь;
			Элементы.ГруппаТолькоКнопкиУтверждения.Видимость = Ложь;				
			
			ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 
				БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
			
		ИначеЕсли ПараметрыИмяБизнесПроцесса = "Согласование" Тогда
			
			ТипБизнесПроцесса = БизнесПроцессы.Согласование.ПустаяСсылка();
			Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокСогласование;
			Заголовок = НСтр("ru='Заявки на согласование'");
			Элементы.ГруппаРезолюцияПолеВводаИКнопка.Видимость = Ложь;
			Элементы.ГруппаТолькоКнопкиСогласования.Видимость = Истина;
			Элементы.ГруппаТолькоКнопкиУтверждения.Видимость = Ложь;	
			
			ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 
				БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
			
		ИначеЕсли ПараметрыИмяБизнесПроцесса = "Утверждение" Тогда
			
			ТипБизнесПроцесса = БизнесПроцессы.Утверждение.ПустаяСсылка();
			Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокУтверждение;
			Заголовок = НСтр("ru='Заявки на утверждение'");
			Элементы.ГруппаРезолюцияПолеВводаИКнопка.Видимость = Ложь;
			Элементы.ГруппаТолькоКнопкиСогласования.Видимость = Ложь;
			Элементы.ГруппаТолькоКнопкиУтверждения.Видимость = Истина;				
			
			ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 
				БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить);
				
		Иначе
			
			ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 
				Неопределено);
			
		КонецЕсли;	
		
		ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТипБизнесПроцесса", 
			ТипБизнесПроцесса);
			
	Иначе
		
		Заголовок = НСтр("ru='Все задачи мне'");	
		Элементы.ГруппаОписаниеЗадачи.Заголовок = НСтр("ru='Задача'");	
		РежимВсеЗадачиМне = Истина;
		
		ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТипБизнесПроцесса", 
			Неопределено);
			
		ЗадачиМне.Параметры.УстановитьЗначениеПараметра("ТочкаМаршрута", 
			Неопределено);
			
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ЗадачиМне.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
	
	Элементы.ЗадачиСтраницы.ТекущаяСтраница = Элементы.ЗадачиМнеСтраница;
	Элементы.ЗадачиОтМеняСписок.Видимость = Ложь;
	РежимЗадачиМне = Истина;
	
	Если Параметры.Свойство("ЗадачиОтМеня") Тогда
		
		ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра("СрокИсполнения", 
			ТекущаяДатаСеанса());
			
		ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра("Автор", 
			ПользователиКлиентСервер.ТекущийПользователь());
			
		ЗадачиОтМеня.Параметры.УстановитьЗначениеПараметра("ТолькоПросроченные", 
			Параметры.ТолькоПросроченные);
			
		Если Параметры.ТолькоПросроченные Тогда
			Заголовок = НСтр("ru='Просроченные задачи от меня'");	
		Иначе
			Заголовок = НСтр("ru='Задачи от меня'");	
		КонецЕсли;	
		
		Элементы.ГруппаОписаниеЗадачи.Заголовок = НСтр("ru='Задача'");	
		
		Элементы.ЗадачиСтраницы.ТекущаяСтраница = Элементы.ЗадачиОтМеняСтраница;
		Элементы.ЗадачиМне.Видимость = Ложь;
		Элементы.ЗадачиОтМеняСписок.Видимость = Истина;
		РежимЗадачиМне = Ложь;
		РежимВсеЗадачиМне = Ложь;
		Элементы.ГруппаВидыКнопок.Видимость = Ложь;
		
	КонецЕсли;	
	
	ПоказатьПомеченныеНаУдалениеВСпискеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаИзменена" Тогда
		Если РежимЗадачиМне Тогда
			Элементы.ЗадачиМне.Обновить();
		Иначе
			Элементы.ЗадачиОтМеняСписок.Обновить();
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И (Параметр.Событие = "ДанныеФайлаИзменены" Или Параметр.Событие = "ФайлЗанятДляРедактирования")
		И РежимМногоПредметов Тогда
		
		ОбновитьДеревоПриложений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ФормаРаботыСЗаявкойЗакрыта");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлементHTML = ДанныеСобытия.Anchor;
	Если (ЭлементHTML <> Неопределено И ЭлементHTML.id = "Document") Тогда
	
		Предмет = ПолучитьТекущийПредмет();

		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Предмет);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМне

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаЗаявки <> Элемент.ТекущаяСтрока Тогда
		
		// если выполнили задачу и больше ничего не осталось - закрыть форму
		Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
			Если ОткрытаИзФормыРабочийСтолРуководителя Тогда
				Закрыть();
				Возврат;
			КонецЕсли;		
		КонецЕсли;	
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиМнеНомерФлага
		И ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
		
		Элементы.ЗадачиМне.Обновить();
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеФайлы

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
	КонецЕсли;
	
	РедактироватьДоступность = Истина;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытияИПроверитьВозможноЗанятьФайл(ВыбраннаяСтрока, 
		Неопределено, УникальныйИдентификатор, , РедактироватьДоступность);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиМнеПереписка

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеПерепискаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ЗадачиМнеПереписка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаРассмотрениеПерепискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗадачиМнеПереписка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачиОтМеняСписок

&НаКлиенте
Процедура ЗадачиОтМеняСписокПриАктивизацииСтроки(Элемент)
	
	Если ТекущаяСтрокаЗаявки <> Элемент.ТекущаяСтрока Тогда
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиОтМеняСписокНомерФлага
		И ТипЗнч(ВыбраннаяСтрока) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(ВыбраннаяСтрока);
		
		Элементы.ЗадачиОтМеняСписок.Обновить();
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСФайлами(
		Элементы.ДеревоПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоПриложенийВыбор(
		ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрока = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
		ПоказатьЗначение(, ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Поиск задач в списках

&НаКлиенте
Процедура Поиск(Команда)
	
	ОчиститьОтборПоиска();

	Если РежимЗадачиМне Тогда
		
		Группа = ЗадачиМне.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Группа.Представление = "ГруппаПоиска";
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Группа, "АвторСтрокой", СтрокаПоиска, ВидСравненияКомпоновкиДанных.Содержит);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Группа, "Наименование", СтрокаПоиска, ВидСравненияКомпоновкиДанных.Содержит);
		
	Иначе
		
		Группа = ЗадачиОтМеня.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		Группа.Представление = "ГруппаПоиска";
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Группа, "ИсполнительСтрока", СтрокаПоиска, ВидСравненияКомпоновкиДанных.Содержит);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Группа, "Наименование", СтрокаПоиска, ВидСравненияКомпоновкиДанных.Содержит);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоиск(Команда)
	
	ОчиститьОтборПоиска();
	СтрокаПоиска = "";
	
КонецПроцедуры

// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если РежимМногоПредметов Тогда
		
		РаботаСБизнесПроцессамиКлиент.ОткрытьТекущийФайлДляПросмотра(ЭтаФорма, Элементы.ДеревоПриложений);
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(Элементы.ЗадачиМнеФайлы.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			ФайлСсылка = Приложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(ФайлСсылка, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
			
			УстановитьДоступностьКомандРаботыСФайлами(Приложения);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(Элементы.ЗадачиМнеФайлы.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			ФайлСсылка = Приложения.ТекущиеДанные.Ссылка;
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ФайлСсылка);
			
			Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандРаботыСФайламиПриложения", ЭтотОбъект);
			РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
				Обработчик,
				ДанныеФайла, УникальныйИдентификатор);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(Элементы.ЗадачиМнеФайлы.ТекущаяСтрока);
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
			Обработчик,
			ДанныеФайла, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандРаботыСФайламиПриложения", ЭтотОбъект);
			РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Приложения.ТекущиеДанные.Ссылка);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.ЗадачиМнеФайлы.ТекущаяСтрока);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения	= Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
			Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандРаботыСФайламиПриложения", ЭтотОбъект);
			
			РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
				Обработчик,
				Приложения.ТекущиеДанные.Ссылка,
				УникальныйИдентификатор,
				Приложения.ТекущиеДанные.ХранитьВерсии,
				Приложения.ТекущиеДанные.РедактируетТекущийПользователь,
				Приложения.ТекущиеДанные.Редактирует);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
			Обработчик,
			Элементы.ЗадачиМнеФайлы.ТекущаяСтрока,
			УникальныйИдентификатор,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.ХранитьВерсии,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.РедактируетТекущийПользователь,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.Редактирует);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайловЗадачиМне(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСФайламиПриложения(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Приложения	= Элементы.ДеревоПриложений;
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКомандРаботыСФайлами(Приложения);
			
КонецПроцедуры	

&НаКлиенте
Процедура Занять(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
			РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Приложения.ТекущиеДанные.Ссылка);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;

		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.ЗадачиМнеФайлы.ТекущаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандРаботыСФайламиПриложения", ЭтотОбъект);
			РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
				Обработчик,
				Приложения.ТекущиеДанные.Ссылка);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(
			Обработчик,
			Элементы.ЗадачиМнеФайлы.ТекущаяСтрока,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.ХранитьВерсии,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.РедактируетТекущийПользователь,
			Элементы.ЗадачиМнеФайлы.ТекущиеДанные.Редактирует);
			
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если РежимМногоПредметов Тогда
		
		Приложения = Элементы.ДеревоПриложений;
		Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
			
			Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьКомандРаботыСФайламиПриложения", ЭтотОбъект);
			РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
				Обработчик,
				Приложения.ТекущиеДанные.Ссылка, 
				УникальныйИдентификатор);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
			
		КонецЕсли;
		
	Иначе	
	
		Если Элементы.ЗадачиМнеФайлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайловЗадачиМне", ЭтотОбъект);
		РаботаСФайламиКлиент.ОпубликоватьФайлСОповещением(
			Обработчик,
			Элементы.ЗадачиМнеФайлы.ТекущаяСтрока, 
			УникальныйИдентификатор);
			
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляПросмотра(Команда)
	
	Приложения = Элементы.ДеревоПриложений;
	
	Если Приложения.ТекущиеДанные.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приложения.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(
			Приложения.ТекущиеДанные.Ссылка,
			Неопределено,
			УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = НЕ ПоказыватьУдаленныеФайлы;
	
	Элементы.ЗадачиМнеФайлыКонтекстноеМенюПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	
	ПоказатьПомеченныеНаУдалениеВСпискеФайлы();
	
КонецПроцедуры

// Работа с предметами

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено Тогда
		ТекущаяСтрока = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
		ПоказатьЗначение(, ТекущаяСтрока);
	КонецЕсли;	
	
КонецПроцедуры

// Команды выполнения задач

&НаКлиенте
Процедура ПерейтиКФормеЗадачи(Команда)
	
	Задача = ПолучитьТекущуюЗадачу();
	СтандартнаяОбработка = Истина;
	Элемент = Неопределено;
	Поле = Неопределено;
	БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, Задача, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассмотрено(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВариантаРассмотренияЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.РабочийСтолРуководителя.Форма.ФормаВыбораВариантаРассмотрения", , , , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборВариантаРассмотренияЗавершение(ВариантРассмотрения, Параметры) Экспорт
	
	Если ВариантРассмотрения = "НаИсполнение" Тогда
		
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение"));
		
	ИначеЕсли ВариантРассмотрения = "НаОзнакомление" Тогда
		
		ОткрытьФормуРассмотренияЗадачи(
			ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление"));
		
	ИначеЕсли ВариантРассмотрения = "Рассмотрено" Тогда
		
		Отказ = Ложь;
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(Резолюция) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Резолюция"" не заполнено'"),,
			"Резолюция",,Отказ);
		КонецЕсли;
		
		Если Отказ Тогда 
			Возврат;
		КонецЕсли;
		
		Задача = ПолучитьТекущуюЗадачу();
		
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
		
		РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Задача, ОписаниеОповещения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		МассивРезолюций = Новый Массив;
		МассивРезолюцийДляПодписания = Новый Массив;
		МассивАдресов = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		
		ПредметыЗадачи = ДеревоПриложений.ПолучитьЭлементы();
		
		Для Каждого Предмет Из ПредметыЗадачи Цикл
			Если ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет.Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
				
				СтруктураРезолюцииДляПодписания = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				СтруктураРезолюцииДляПодписания.Документ = Предмет.Ссылка;
				СтруктураРезолюцииДляПодписания.ДатаРезолюции = ДатаФормированияРезолюций;
				СтруктураРезолюцииДляПодписания.АвторРезолюции = ИсполнительТекущейЗадачи;
				СтруктураРезолюцииДляПодписания.ВнесРезолюцию = ИсполнительТекущейЗадачи;
				СтруктураРезолюцииДляПодписания.ТекстРезолюции = Резолюция;
				
				МассивРезолюцийДляПодписания.Добавить(СтруктураРезолюцииДляПодписания);
				
				СтруктураРезолюции = РаботаСРезолюциями.ПолучитьСтруктуруКлючевыхРеквизитовРезолюции();
				ЗаполнитьЗначенияСвойств(СтруктураРезолюции, СтруктураРезолюцииДляПодписания);
				СтруктураРезолюции.Вставить(
					"Наименование",
					РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет.Ссылка));
				
				МассивРезолюций.Добавить(СтруктураРезолюции);
				
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРезолюцийДляПодписания.Количество() > 0 Тогда
			
			ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подписать резолюции предметов'");
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП",
					ЭтотОбъект,
					ДатаФормированияРезолюций);
				
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивРезолюцийДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов,,
				ЗаголовокФормыВыбораСертификата,ОписаниеОповещения);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
		
	ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаРассмотреноПослеПодписанияРезолюцийЭП(
	Результат, ДатаФормированияРезолюций) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РассмотрениеВыполнениеКомандыВыполнено");
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	ПодписиКРезолюциямПредметов = Новый Структура;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из МассивДанныхДляЗанесенияВРегистр Цикл
		
		РезолюцияДокумента = ДанныеДляЗанесенияВРегистр.ОбъектСсылка;
		
		Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Предмет_%1_%2'"),
			СтрЗаменить(Строка(РезолюцияДокумента.Документ.УникальныйИдентификатор()), "-", ""),
			Формат(РезолюцияДокумента.ДатаРезолюции, "ДФ=yyyyMMddHHmmss"));
		
		ПодписиКРезолюциямПредметов.Вставить(Ключ, ДанныеДляЗанесенияВРегистр);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения",
		ДатаФормированияРезолюций);
	
	ПараметрыЗаписи.Вставить(
		"ПодписыватьЭП",
		ПодписыватьРезультатВыполненияЭП);
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКРезолюциямПредметов",
		ПодписиКРезолюциямПредметов);
		
	ПараметрыЗаписи.Вставить(
		"ВариантРассмотрения",
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.ВвестиТекстРезолюции"));
		
	ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуДляКомандыЗадачаРассмотрено(ПараметрыЗаписи)
	
	НачатьТранзакцию();
	
	Задача = ПолучитьТекущуюЗадачуНаСервере();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Задача);
		
		ВыполнитьЗадачу(ПараметрыЗаписи);
		
		Если ПараметрыЗаписи.Свойство("ПодписыватьЭП")
			И ПараметрыЗаписи.ПодписыватьЭП = Истина
			И ПараметрыЗаписи.Свойство("ПодписиКРезолюциямПредметов")
			И ТипЗнч(ПараметрыЗаписи.ПодписиКРезолюциямПредметов) = Тип("Структура")
			И ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
			
			ПодписиКРезолюциямПредметов = ПараметрыЗаписи.ПодписиКРезолюциямПредметов;
			
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Предметы");
			ТаблицаПредметов = РеквизитыЗадачи.Предметы.Выгрузить();
			
			Для Каждого Предмет Из ТаблицаПредметов Цикл
			
				Предмет = Предмет.Предмет;
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") 
					ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
					
					Резолюции = РаботаСРезолюциями.ПолучитьРезолюциюПоДате(
						Предмет, ПараметрыЗаписи.ДатаИсполнения);
					
					Если Резолюции.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОбъектРезолюции = Резолюции[0].Ссылка.ПолучитьОбъект();
					
					Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Предмет_%1_%2'"),
						СтрЗаменить(Строка(Предмет.УникальныйИдентификатор()), "-", ""),
						Формат(ПараметрыЗаписи.ДатаИсполнения, "ДФ=yyyyMMddHHmmss"));
					
					Если Не ПодписиКРезолюциямПредметов.Свойство(Ключ) Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеПодписи = ПодписиКРезолюциямПредметов[Ключ];
					
					РаботаСЭП.ЗанестиИнформациюОПодписи(
						ОбъектРезолюции.Ссылка,
						ДанныеПодписи.НоваяПодписьДвоичныеДанные, 
						ДанныеПодписи.Отпечаток,
						ДанныеПодписи.ДатаПодписи,
						ДанныеПодписи.Комментарий, 
						ДанныеПодписи.ИмяФайлаПодписи,
						ДанныеПодписи.КомуВыданСертификат,
						ДанныеПодписи.ДвоичныеДанныеСертификата);
					ОбъектРезолюции.Подписана = Истина;
					ОбъектРезолюции.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Задача);
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовано(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВариантаСогласованияЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.РабочийСтолРуководителя.Форма.ФормаВыбораВариантаСогласования", , , , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаСогласованияЗавершение(ВариантСогласования, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВариантСогласования) Тогда
		ВыполнитьЗадачуСогласования(ВариантСогласования);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура НеСогласовано(Команда)
	
	ВыполнитьЗадачуСогласования(
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"));
	
КонецПроцедуры

&НаКлиенте
Процедура Утверждено(Команда)
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ПолучитьТекущуюЗадачу();
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Задача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НеУтверждено(Команда)
	
	Если Не ЗначениеЗаполнено(Резолюция) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите причину отклонения документа '"),,
			"Резолюция");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения", 
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено"));
	ПараметрыЗаписи.Вставить("КлючеваяОперация", "УтверждениеВыполнениеКомандыНеУтверждено");
	
	Задача = ПолучитьТекущуюЗадачу();
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ВыполнитьЗадачуНаКлиентеПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Задача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуНаКлиентеПродолжение(
	Результат, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи <> Неопределено
		И ПараметрыЗаписи.Свойство("КлючеваяОперация") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			ПараметрыЗаписи.КлючеваяОперация);
		
	КонецЕсли;
	
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

// Команды работы с флагами

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьОтборПоиска()
	
	Если РежимЗадачиМне Тогда
		Для Каждого Элемент Из ЗадачиМне.Отбор.Элементы Цикл
			Если Элемент.Представление = "ГруппаПоиска" Тогда
				ЗадачиМне.Отбор.Элементы.Удалить(Элемент);
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Для Каждого Элемент Из ЗадачиОтМеня.Отбор.Элементы Цикл
			Если Элемент.Представление = "ГруппаПоиска" Тогда
				ЗадачиОтМеня.Отбор.Элементы.Удалить(Элемент);
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли
			
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачу(ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ДатаИсполнения") Тогда
		ПараметрыЗаписи.Вставить("ДатаИсполнения", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("РезультатВыполнения", Резолюция);
	
	БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачуСПараметрами(ТекущаяЗадача, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюЗадачу()
	
	Задача = Неопределено;
	Если РежимЗадачиМне Тогда
		Задача = Элементы.ЗадачиМне.ТекущаяСтрока;
	Иначе
		Задача = Элементы.ЗадачиОтМеняСписок.ТекущаяСтрока;
	КонецЕсли;	
	
	Возврат Задача;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущуюЗадачуНаСервере()
	
	Задача = Неопределено;
	Если РежимЗадачиМне Тогда
		Задача = Элементы.ЗадачиМне.ТекущаяСтрока;
	Иначе
		Задача = Элементы.ЗадачиОтМеняСписок.ТекущаяСтрока;
	КонецЕсли;	
	
	Возврат Задача;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийПредмет()
	
	Возврат ТекущийПредмет;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРассмотренияЗадачи(ВариантРассмотрения)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ТекущаяЗадача);
	ОткрытаяФорма = ОткрытьФорму(
		"БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя", ПараметрыОткрытия);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗадачаСсылка", ТекущаяЗадача);
	ПараметрыОповещения.Вставить(
		"ВариантРассмотрения", 
		ВариантРассмотрения);
	Оповестить("ПерейтиКРезультатуРассмотренияЗадачи", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуСогласования(РезультатСогласования)
	
	Если МультипредметностьКлиент.ПроверитьЗаполнениеПредметовЗадачи(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы",
			ЭтотОбъект,
			РезультатСогласования);
			
	Задача = ПолучитьТекущуюЗадачу();
			
	РаботаСБизнесПроцессамиКлиент.ПроверитьНаличиеЗанятыхФайлов(Задача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиНаЗанятыеФайлы(
	Результат, РезультатСогласования) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи",
			ЭтотОбъект,
			РезультатСогласования);
			
	Задача = ПолучитьТекущуюЗадачу();
			
	РаботаСВизамиСогласованияКлиент.ПроверитьВизуИсполнителяЗадачи(Задача, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПроверкиВизИсполнителяЗадачи(
	Результат, РезультатСогласования) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ПолучитьТекущуюЗадачу();
	
	ПараметрыЗаписи = Новый Структура;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Задача,, Истина);
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		ДатаФормированияРезолюций = ТекущаяДата();
		
		РезультатСогласованияДляПодписи = 
			?(РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"),
				ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"),
				РезультатСогласования);
		
		МассивВизДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
				
		Для Каждого Предмет Из ОсновныеПредметы Цикл
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
				
				СтруктураВизыДляПодписания = РаботаСВизамиСогласованияКлиент.ПолучитьСтруктуруВизДляПодписания();
				СтруктураВизыДляПодписания.Документ = Предмет;
				СтруктураВизыДляПодписания.ДатаИсполнения = ДатаФормированияРезолюций;
				СтруктураВизыДляПодписания.РезультатСогласования = РезультатСогласованияДляПодписи;
				СтруктураВизыДляПодписания.Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
				
				МассивВизДляПодписания.Добавить(СтруктураВизыДляПодписания);
				
			КонецЕсли;
		КонецЦикла;
				
		Если МассивВизДляПодписания.Количество() > 0 Тогда
			
			Если МассивВизДляПодписания.Количество() = 1 Тогда
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись визы согласования'");
			Иначе
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись виз согласования'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДатаФормированияРезолюций", ДатаФормированияРезолюций);
			ПараметрыОповещения.Вставить("ОсновныеПредметы", ОсновныеПредметы);
			ПараметрыОповещения.Вставить("РезультатСогласования", РезультатСогласования);
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП",
					ЭтотОбъект,
					ПараметрыОповещения);
			
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивВизДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ,
				ЗаголовокФормыВыбораСертификата, ОписаниеОповещения);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", 
		РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", Задача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", БизнесПроцессТекущейЗадачи);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполнениеКомандыЗадачаСогласованоПослеПодписанияВизЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ПолучитьТекущуюЗадачу();
	
	Если Параметры.РезультатСогласования = 
		ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано") Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
			"СогласованиеВыполнениеКомандыСогласовано");
			
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Результат.МассивДанныхДляЗанесенияВРегистр;
	ПодписиКВизамСогласования = Новый СписокЗначений;
	
	Для Каждого ДанныеДляЗанесенияВРегистр Из МассивДанныхДляЗанесенияВРегистр Цикл
		
		ПодписиКВизамСогласования.Добавить(ДанныеДляЗанесенияВРегистр);
		
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"ПодписиКВизамСогласования", ПодписиКВизамСогласования);
			
	ПараметрыЗаписи.Вставить(
		"ДатаИсполнения", Параметры.ДатаФормированияРезолюций);
		
	ПараметрыЗаписи.Вставить(
		"РезультатСогласования", Параметры.РезультатСогласования);
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	Для Каждого Предмет Из Параметры.ОсновныеПредметы Цикл
		ИнформацияОЗадаче = Новый Структура;
		ИнформацияОЗадаче.Вставить("Ссылка", Задача);
		ИнформацияОЗадаче.Вставить("Предмет", Предмет);
		ИнформацияОЗадаче.Вставить("БизнесПроцесс", БизнесПроцессТекущейЗадачи);
		Оповестить("ЗадачаСогласованияВыполнена", ИнформацияОЗадаче);
	КонецЦикла;
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПроверкиНаЗанятыеФайлы(
	Результат, СписокПроверяемыхСтрок) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ПолучитьТекущуюЗадачу();
	
	Если ПодписыватьРезультатВыполненияЭП Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			РаботаСЭПКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСКриптографией();
			Возврат;
		КонецЕсли;
		
		ОсновныеПредметы = МультипредметностьКлиентСервер.
			ПолучитьМассивПредметовОбъекта(Задача,, Истина);
		
		МассивПредметовДляПодписания = Новый Массив;
		МассивДанныхДляЗанесенияВРегистр = Новый Массив;
		МассивАдресов = Новый Массив;
		
		Для Каждого Предмет из ОсновныеПредметы Цикл
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				
				МассивПредметовДляПодписания.Добавить(Предмет);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивПредметовДляПодписания.Количество() > 0 Тогда
			
			Если МассивПредметовДляПодписания.Количество() = 1 Тогда
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись предмета'");
			Иначе
				ЗаголовокФормыВыбораСертификата = НСтр("ru = 'Подпись предметов'");
			КонецЕсли;
			
			ОписаниеОповещения = 
				Новый ОписаниеОповещения(
					"ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП",
					ЭтотОбъект);
			
			РаботаСЭПКлиент.СформироватьПодписиОбъектов(МассивПредметовДляПодписания,
				УникальныйИдентификатор, МассивДанныхДляЗанесенияВРегистр, МассивАдресов, ,
				ЗаголовокФормыВыбораСертификата,
				ОписаниеОповещения);
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");

	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВыполненияКомандыЗадачаУтвержденоПослеПодписанияПредметовЭП(
	Результат, Параметры) Экспорт
	
	Если НЕ Результат.Флаг Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"УтверждениеВыполнениеКомандыУтверждено");
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить(
		"МассивДанныхДляЗанесенияВРегистр",
		Результат.МассивДанныхДляЗанесенияВРегистр);
	ПараметрыЗаписи.Вставить(
		"МассивАдресов",
		Результат.МассивАдресов);
	ПараметрыЗаписи.Вставить(
		"РезультатУтверждения",
		ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"));
		
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИзмененияПараметровУтверждения(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыЗаписи = Новый Структура;	
	ПараметрыЗаписи.Вставить("ПовторитьУтверждение", Истина);
	ПараметрыЗаписи.Вставить("УникальныйИдентификаторФормыИзмененияПараметров", Параметры.УникальныйИдентификаторФормыИзмененияПараметров);
	ВыполнитьЗадачу(ПараметрыЗаписи);
	
	ОповеститьПослеВыполненияЗадачи();
	
КонецПроцедуры

////////////////////////////////////////////////////////////
// Работа с описанием задачи

// Устанавливает доступность команд работы с файлами в карточке задачи
&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСФайлами(Приложения)

	Если Приложения.ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = Приложения.ТекущиеДанные.Ссылка;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
			
			Элементы.ОткрытьКарточку.Доступность = Истина;
			Элементы.ОткрытьДляПросмотра.Доступность = Истина;
			Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьДляПросмотра.Доступность = Истина;
			
			Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = Истина;
			
			РедактируетТекущийПользователь = Приложения.ТекущиеДанные.РедактируетТекущийПользователь;
			РедактируетДругойПользователь = Приложения.ТекущиеДанные.РедактируетДругойПользователь;
			
			Если Не Приложения.ТекущиеДанные.РедактируетДругойПользователь
				И НЕ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				
				Элементы.Редактировать.Доступность = Истина;
				Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность = Истина;
			Иначе
				Элементы.Редактировать.Доступность = Ложь;
				Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность = Ложь;
			КонецЕсли;
			
			Если Приложения.ТекущиеДанные.РедактируетТекущийПользователь
				И НЕ Приложения.ТекущиеДанные.ПодписанЭП Тогда
				
				Элементы.ЗакончитьРедактирование.Доступность = Истина;
				Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность = Истина;
			Иначе
				Элементы.ЗакончитьРедактирование.Доступность = Ложь;
				Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
			КонецЕсли;
			
			Элементы.ДеревоПриложенийКонтекстноеМенюЗанять.Доступность = (Не РедактируетДругойПользователь И Не РедактируетТекущийПользователь);
			Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
			Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность = РедактируетТекущийПользователь;
			Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = Истина;
			Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Не РедактируетДругойПользователь;
			
		Иначе
			
			Элементы.ОткрытьКарточку.Доступность = Истина;
			Элементы.ОткрытьДляПросмотра.Доступность = Ложь;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьДляПросмотра.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
			
			Элементы.ДеревоПриложенийКонтекстноеМенюЗанять.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьИзменения.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = Ложь;
			Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет правый список
&НаКлиенте
Процедура ОбработкаОжидания()
	
	Если РежимЗадачиМне Тогда
		ТекущаяСтрокаЗаявки = Элементы.ЗадачиМне.ТекущаяСтрока;
		ИсполнительТекущейЗадачи = Элементы.ЗадачиМне.ТекущиеДанные.Исполнитель;
	Иначе
		ТекущаяСтрокаЗаявки = Элементы.ЗадачиОтМеняСписок.ТекущаяСтрока;
		ИсполнительТекущейЗадачи = Элементы.ЗадачиОтМеняСписок.ТекущиеДанные.Исполнитель;
	КонецЕсли;
	
	ОбновитьДанныеЗаявки(ТекущаяСтрокаЗаявки);
	РазвернутьВсеДеревоПереписки();
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЗаявки(Задача)
	
	УстановитьОтборФайлов(Задача);
	ТекстЗаявкиHTML = СформироватьТекстЗаявкиHTML(Задача);
	ЗаполнитьПереписку(Задача);
	Резолюция = "";
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Элементы.ГруппаВидыКнопок.Видимость = Ложь;
		Возврат;
	КонецЕсли;	
	
	Резолюция = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача, "РезультатВыполнения");
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача, "БизнесПроцесс, ТочкаМаршрута");
	
	ТипБизнесПроцесса = ТипЗнч(РеквизитыЗадачи.БизнесПроцесс);
	
	БизнесПроцессТекущейЗадачи = РеквизитыЗадачи.БизнесПроцесс;
	
	Если РежимЗадачиМне Тогда
		
		ТочкаМаршрутаСсылка = РеквизитыЗадачи.ТочкаМаршрута;
		
		Элементы.ГруппаВидыКнопок.Видимость = Истина;
		ЗадачаСКнопками = Ложь;
		
		ПодписыватьРезультатВыполненияЭП = Ложь;
		
		Если ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
			
			Если ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда 
				Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокРассмотрение;
				ЗадачаСКнопками = Истина;
			Иначе
				ЗадачаСКнопками = Ложь;
			КонецЕсли;
			
			// Вычисление ПодписыватьРезультатВыполненияЭП
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗадачаИсполнителяПредметы.Предмет
				|ИЗ
				|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
				|ГДЕ
				|	ЗадачаИсполнителяПредметы.Предмет.ВидДокумента.ПодписыватьРезолюцииЭП = ИСТИНА
				|	И ЗадачаИсполнителяПредметы.Ссылка = &Задача";
			
			Запрос.УстановитьПараметр("Задача", Задача);
			ПодписыватьРезультатВыполненияЭП = НЕ Запрос.Выполнить().Пустой()
				И РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование();
			
		ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
			
			Если ТочкаМаршрутаСсылка = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда 
				Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокСогласование;
				ЗадачаСКнопками = Истина;
			Иначе
				ЗадачаСКнопками = Ложь;
			КонецЕсли;
			
			ПодписыватьРезультатВыполненияЭП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
				РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП")
					И РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование();
			
		ИначеЕсли ТипБизнесПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
			
			Если ТочкаМаршрутаСсылка = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда 
				Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокУтверждение;
				ЗадачаСКнопками = Истина;
			Иначе
				ЗадачаСКнопками = Ложь;
			КонецЕсли;
			
			ПодписыватьЭП = 
				ОбщегоНазначения.ПолучитьЗначениеРеквизита(РеквизитыЗадачи.БизнесПроцесс, "ПодписыватьЭП");
				
			ПодписыватьРезультатВыполненияЭП = ПодписыватьЭП
				И РаботаСФайламиВызовСервера.ПолучитьИспользоватьЭлектронныеПодписиИШифрование();
			
		КонецЕсли;	
		
		Если ЗадачаСКнопками = Ложь Тогда // бизнес-процесс не нашего типа или нашего, но другая точка маршрута
			Элементы.ГруппаВидыКнопок.ТекущаяСтраница = Элементы.ГруппаКнопокПерейтиКФормеЗадачи;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеДеревоПереписки()
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ЗадачиМнеПереписка.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПереписку(Задача)
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		Предмет = Неопределено;
		Если Задача <> Неопределено И Задача.Предметы.Количество() = 1 Тогда
			Предмет = Задача.Предметы[0].Предмет;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Предмет) Тогда
		
			// Для Внутренних документов - все как в форме ИсторияПереписки
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
				
				Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
				
				Если ПравоДоступа("Чтение", Метаданные.Справочники.ВходящиеДокументы)
					И ПравоДоступа("Чтение", Метаданные.Справочники.ИсходящиеДокументы) Тогда
					
					Делопроизводство.ЗаполнитьДерево(Дерево, Предмет);
					
				КонецЕсли;
				
				ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
				
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда			
				
				Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
				Дерево.Строки.Очистить();
				КорневоеПисьмо = ВстроеннаяПочтаСервер.ПолучитьКорневоеПисьмо(Предмет);
				ВыведенныеПисьма = Новый Массив;
				Делопроизводство.ДобавитьПисьмоВДерево(Дерево.Строки, КорневоеПисьмо, Предмет, ВыведенныеПисьма);
				ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЧислоОбъектовПереписки = НайтиЧислоЭлементов(ДеревоДокументов.ПолучитьЭлементы());
	
	Элементы.ГруппаПереписка.Заголовок 
		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Переписка (%1)'"),
			Формат(ЧислоОбъектовПереписки, "ЧН=0"));
	
КонецФункции

&НаСервере
Функция НайтиЧислоЭлементов(Строки)
	
	ЧислоСтрок = Строки.Количество();
	Для Каждого Строка Из Строки Цикл
		ЧислоСтрок = ЧислоСтрок + НайтиЧислоЭлементов(Строка.ПолучитьЭлементы());
	КонецЦикла;	
	
	Возврат ЧислоСтрок;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборФайлов(Задача)
	
	ТекущаяЗадача = Задача;
	
	Файлы.Отбор.Элементы.Очистить();
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Файлы.Отбор, "Ссылка", Справочники.Файлы.ПустаяСсылка());
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоПриложенийПоПредметам(ЭтаФорма, Задача.Предметы);
	
	Предмет = Неопределено;
	Если Задача <> Неопределено И Задача.Предметы.Количество() <= 1 Тогда
		
		Если Задача.Предметы.Количество() = 1 Тогда
			Предмет = Задача.Предметы[0].Предмет;
		КонецЕсли;	
		ТекущийПредмет = Предмет;
		Элементы.ГруппаФайлыПредметы.ТекущаяСтраница = Элементы.ГруппаФайлы;
		РежимМногоПредметов = Ложь;
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Файлы.Отбор, "Ссылка", Предмет);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Файлы.Отбор, "ВладелецФайла", Предмет);
			КонецЕсли;		
			
		Иначе	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Файлы.Отбор, "Ссылка", Справочники.Файлы.ПустаяСсылка());
		КонецЕсли;	
		
	Иначе	
		РежимМногоПредметов = Истина;
		Элементы.ГруппаФайлыПредметы.ТекущаяСтраница = Элементы.ГруппаПредметы;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоПредметов()
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		РаботаСБизнесПроцессами.ЗаполнитьДеревоПриложенийПоПредметам(ЭтаФорма, ТекущаяЗадача.Предметы);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуHTML(ТекстHTML, ИмяПоля, Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ТекстHTML = ТекстHTML + "<tr><td valign=""top""><b>" + ИмяПоля + ": </b></td><td valign=""top"">" + Значение + "</td></tr>";	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СформироватьТекстЗаявкиHTML(Задача)
	
	ТекстHTML = "<html> <body topmargin=0 leftmargin=0 scroll=auto>
	|<meta http-equiv=""Content-Style-Type"" content=""text/css"">
    |<title></title>
    |<style type=""text/css"">
    |             .TextStyle           {font-family:MS Sans Serif; font-size:12px;}
    |</style>";
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		Предмет = Неопределено;
		Если Задача <> Неопределено И Задача.Предметы.Количество() = 1 Тогда
			Предмет = Задача.Предметы[0].Предмет;
		КонецЕсли;	
		
		ТекстHTML = ТекстHTML + "<table width:auto; class = ""TextStyle"" cellpadding=""2"">";
		
		ИмяПоляЗадача = НСтр("ru='Заявка'");
		Если Не РежимЗадачиМне Или РежимВсеЗадачиМне Тогда
			ИмяПоляЗадача = НСтр("ru='Задача'");
		КонецЕсли;
		
		НаименованиеСтрока = Задача.Наименование;
		Если Не ПустаяСтрока(Задача.Описание) И Задача.Описание <> Задача.Наименование Тогда
			НаименованиеСтрока = НаименованиеСтрока + "<br>" + Задача.Описание;
		КонецЕсли;	
		ДобавитьСтрокуHTML(ТекстHTML, ИмяПоляЗадача, НаименованиеСтрока);
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Предмет) Тогда
				
				// пустая строка
				ТекстHTML = ТекстHTML + "<tr><td><b>" + "&nbsp;" + " </b></td><td>" + "&nbsp;" + "</td></tr>";	
				
				УстановитьПривилегированныйРежим(Истина);
				ЗначениеСтрока = "<a id=""Document"" href=Document>" + Предмет.Наименование + "</a>";
				ДобавитьСтрокуHTML(ТекстHTML, Строка(ТипЗнч(Предмет)), ЗначениеСтрока);
				УстановитьПривилегированныйРежим(Ложь);
				
				Если ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(предмет).Чтение Тогда
				
					Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда
						ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='От кого'"), Предмет.Отправитель);
						ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Адресат'"), Предмет.Адресат);
					КонецЕсли;
					
					Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда
						
						СтрокаПолучателей = "";
						
						Если Предмет.Получатели.Количество() = 1 Тогда
							СтрокаПолучателей = Предмет.Получатели[0].Получатель;
							ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Получатель'"), СтрокаПолучателей);
						Иначе
							СтрокаПолучателей = "";
							Для Каждого Строка Из Предмет.Получатели Цикл
								ДобавитьЗначениеКСтрокеЧерезРазделитель(СтрокаПолучателей, ", ", Строка.Получатель);
							КонецЦикла;	
							ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Получатели'"), СтрокаПолучателей);
						КонецЕсли;	
						
					КонецЕсли;
					
					Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
						Если Предмет.ВидДокумента.ВестиУчетПоКорреспондентам Тогда
							ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Корреспондент'"), Предмет.Корреспондент);
							ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Контактное лицо'"), Предмет.КонтактноеЛицо);
						КонецЕсли;
					КонецЕсли;
					
					Если Предмет.ВидДокумента.УчитыватьСуммуДокумента Тогда
						ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Сумма'"), Строка(Предмет.Сумма) + " " + Предмет.Валюта.НаименованиеПолное);
					КонецЕсли;	
					
					ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
					Если ИспользоватьУчетПоОрганизациям Тогда
						ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Организация'"), Предмет.Организация);
					КонецЕсли;	
					
					ДобавитьСтрокуHTML (ТекстHTML, НСтр("ru='Содержание'"), Предмет.Содержание);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;	
		
		ТекстHTML = ТекстHTML + "</table>";
		
	КонецЕсли;	
	
	ТекстHTML = ТекстHTML + "</html> </body>";
	Возврат ТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДеревоПриложений()
	
	ТекущаяСсылкаВДереве = Неопределено;
	ТекущееИмяПредметаВДереве = Неопределено;
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено И ТекущееИмяПредметаВДереве = Неопределено Тогда
		ТекущаяСсылкаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.Ссылка;
		ТекущееИмяПредметаВДереве = Элементы.ДеревоПриложений.ТекущиеДанные.ИмяПредмета;
	КонецЕсли;
	
	Если Элементы.Найти("ДеревоПриложений") <> Неопределено  Тогда
		ПерезаполнитьДеревоПредметов();
	КонецЕсли;
	
	Если ТекущаяСсылкаВДереве <> Неопределено ИЛИ ТекущееИмяПредметаВДереве <> Неопределено Тогда
		РаботаСБизнесПроцессамиКлиент.УстановитьТекущуюСтрокуВДеревеПриложений(
			ЭтаФорма, 
			ДеревоПриложений.ПолучитьЭлементы(), 
			ТекущаяСсылкаВДереве, ТекущееИмяПредметаВДереве);
	КонецЕсли;
		
	УстановитьДоступностьКомандРаботыСФайлами(
		Элементы.ДеревоПриложений);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.ЗадачиМнеФайлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОбновитьИзФайлаНаДиске, Ложь);
		
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП 	= ТекущиеДанные.ПодписанЭП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыЗанять, Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОсвободить, Не Редактирует.Пустая());
		УстановитьДоступностьКоманды(Элементы.ЗадачиМнеФайлыОбновитьИзФайлаНаДиске, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

// Заполняет подчиненные документы
&НаСервере
Процедура ЗаполнитьПодчиненныеДокументы(СтрокаДерева, СтрокиДерева, ПараметрыДокумент)
	
	Ссылка = СтрокаДерева.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходящиеДокументы.Ссылка КАК Ссылка,
		|	ИсходящиеДокументы.Заголовок КАК Заголовок,
		|	ИсходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ИсходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	3 КАК ИндексКартинки,
		|	ИсходящиеДокументы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ИсходящиеДокументы КАК ИсходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО ИсходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И (НЕ ИсходящиеДокументы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ИсходящиеДокументы") Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВходящиеДокументы.Ссылка КАК Ссылка,
		|	ВходящиеДокументы.Заголовок КАК Заголовок,
		|	ВходящиеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ВходящиеДокументы.ДатаРегистрации КАК ДатаРегистрации,
		|	0 КАК ИндексКартинки,
		|	ВходящиеДокументы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязьВОтветНа
		|		ПО ВходящиеДокументы.Ссылка = СвязьВОтветНа.Документ
		|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйДокумент = &Ссылка
		|	И (НЕ ВходящиеДокументы.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВходящиеДокументы")  Тогда 
			Отправлен = Делопроизводство.ПолучитьПризнакОтправлен(Выборка.Ссылка, Ссылка.Отправитель, Ссылка.Подписал);
			НоваяСтрока.ИндексКартинки = ?(Отправлен, 1, 3);
		КонецЕсли;
		
		Если НоваяСтрока.Ссылка = ПараметрыДокумент Тогда 
			НоваяСтрока.Текущий = Истина;
		КонецЕсли;
		
		ЗаполнитьПодчиненныеДокументы(НоваяСтрока, СтрокиДерева, ПараметрыДокумент);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеВыполненияЗадачи()
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выполнение:'"),
		ПолучитьНавигационнуюСсылку(ТекущаяЗадача),
		Строка(ТекущаяЗадача),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("ЗадачаВыполнена", ТекущаяЗадача);
	
	Оповестить("ЗадачаИзменена", ТекущаяЗадача, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеВСпискеФайлы()
	
	Если НЕ ПоказыватьУдаленныеФайлы Тогда
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьУдаленныеФайлы", Истина);
	Иначе
		Файлы.Параметры.Элементы.Найти("НеПоказыватьУдаленныеФайлы").Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Работа с флагами

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	МассивЗадач = Новый Массив;
	
	Если Элементы.ЗадачиСтраницы.ТекущаяСтраница = Элементы.ЗадачиМнеСтраница Тогда
		ТекущийСписок = Элементы.ЗадачиМне;
	ИначеЕсли Элементы.ЗадачиСтраницы.ТекущаяСтраница = Элементы.ЗадачиОтМеняСтраница Тогда
		ТекущийСписок = Элементы.ЗадачиОтМеняСписок;
	КонецЕсли;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ТекущийСписок.ВыделенныеСтроки, Флаг);
	ТекущийСписок.Обновить();
	
КонецПроцедуры


#КонецОбласти
