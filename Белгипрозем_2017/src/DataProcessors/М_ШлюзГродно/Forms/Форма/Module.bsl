//////////////////////////////////////////////////////////////
// Вспомогательные для работы обработки
&НаКлиенте
Процедура ФайлБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Открыть базу данных";
	ДиалогВыбораФайла.Фильтр    = "База Firebird (*.gdb)|*.gdb";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлБД = ДиалогВыбораФайла.ПолноеИмяФайла;
		ПутьКФайламДанныхНаДиске = ДиалогВыбораФайла.Каталог; 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ГруппаУволенных = Справочники.ГруппыПользователей.НайтиПоНаименованию("Уволенные");
	ФизическоеЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ЮридическоеЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	РБ = Справочники.СтраныМира.Беларусь;
	ПапкаДоговоры = ПолучитьПапкуВнутреннихДокументов("Договоры");
	ГрифДоступа = Справочники.ГрифыДоступа.НайтиПоНаименованию("Общий");
	ВопросДеятельности = Справочники.ВопросыДеятельности.НайтиПоНаименованию("Землеустройство");
	//ПолучитьПодразделения();
	РублиРБ = Справочники.Валюты.НайтиПоКоду("974");
	ПолучитьВидыРабот();
	
	ЗагрузитьКатегории();
	
	ВидДокументаПоручение = Справочники.ВидыВходящихДокументов.НайтиПоНаименованию("Поручение на выполнение работ");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКатегории()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииДанных.Ссылка,
		|	КатегорииДанных.Наименование
		|ИЗ
		|	Справочник.КатегорииДанных КАК КатегорииДанных";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КатегорияИнвестиции = ПолучитьКатегорию("Инвестиции", Результат);
	КатегорияАЭС = ПолучитьКатегорию("АЭС", Результат);
	КатегорияСервис = ПолучитьКатегорию("Придорожный сервис", Результат);
	КатегорияАукцион = ПолучитьКатегорию("Аукцион", Результат);
КонецПроцедуры // ЗагрузитьКатегории()

&НаСервере
Функция ПолучитьКатегорию(ИмяКатегории, Результат)
	ИскСтрока = Результат.Найти(ИмяКатегории, "Наименование");
	Если ИскСтрока = Неопределено Тогда
		Эл = Справочники.КатегорииДанных.СоздатьЭлемент();
		Эл.Наименование = ИмяКатегории;
		Эл.Записать();
		Возврат Эл.Ссылка;
	Иначе
		Возврат ИскСтрока.Ссылка;
	КонецЕсли;	
КонецФункции // ПолучитьКатегорию("Инвестиции", Результат)

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
    Если УстановитьСоединение() Тогда
        ВыполнитьЗагрузкуДанных();
        //Сообщить("Ок!"); 
    Иначе
        Сообщить("Не установлено соединение с базой данных Firebird! Загрузка данных не выполнена!");
    КонецЕсли;    
КонецПроцедуры

// Устанавливает соединение с Firebird
//
// Возвращаемое значение:
//   Истина - если установлено
//
&НаСервере
Функция УстановитьСоединение()
	// Соединение должно быть установлено через меню Все функции/Стандартные функции/Управление внешними источниками данных
	Возврат Истина;

	
//    ИмяПользователя = "SYSDBA";
//    Пароль = "masterkey";
//	
//Соединение = Новый COMОбъект("ADODB.Connection");

//Соединение.ConnectionString     = "DRIVER={Firebird/InterBase(r) driver}; ;Dialect=3; CHARSET=NONE; DbName=" + ФайлБД+"; UID="+ИмяПользователя+"; PWD="+Пароль; 


////Константы.СтрокаСоединенияСБазой.Получить() +                // DRIVER={Firebird/InterBase(r) driver};Dialect=3;CHARSET=NONE;DBNAME=D:\DB.FDB;
////                                        "UID=" + Константы.ИмяПользователяБазы.Получить() + ";" +    // UID=SYSDBA;
////                                        "PWD=" + Константы.ПарольПользователяБазы.Получить() + ";";       // PWD=masterkey;                                                           

//Соединение.ConnectionTimeOut    = 1200;
//Соединение.CursorLocation       = 3;
//Попытка                        
//	Соединение.Open(Соединение.ConnectionString);
//	Возврат Истина;
//	Возврат Соединение;
//Исключение
//	ОбщегоНазначения.СообщитьОбОшибке("Невозможно установить соединение с Firebird:
//	| "+ОписаниеОшибки());
//	Возврат Ложь;
//КонецПопытки;	
	
	//пСоед = Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//пСоед.СтрокаСоединения = "DRIVER={Firebird/InterBase(r) driver}; Dialect=3; CHARSET=NONE; DbName=" + ФайлБД+"; UID="+ИмяПользователя+"; PWD="+Пароль;//+";";
	////пСоед.СтрокаСоединения = "DRIVER=Firebird/InterBase(r) driver; DbName=" + ФайлБД+"; UID="+ИмяПользователя+"; PWD="+Пароль;//+";";
	//ВнИст = ВнешниеИсточникиДанных.Гродно;
	//ВнИст.УстановитьОбщиеПараметрыСоединения(пСоед);
	//Если ВнИст.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
	// 	ВнИст.УстановитьСоединение(); 
	//КонецЕсли;
	//СоединениеУстановлено = Ложь;
	//Если ВнИст.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
	//    СоединениеУстановлено = Истина;
	//КонецЕсли;
	//
	//Возврат СоединениеУстановлено;
	Возврат Истина;
КонецФункции // УстановитьСоединение()

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанных()
	Сообщить("Старт: "+ТекущаяДата());	
    ДанныеБД = ПолучитьДанныеБД();
	Сообщить("База ПЭО прочитана: "+ТекущаяДата());	

	
	// Получить нужные строки для загрузки
	МассивДоговоров = Новый Массив;
	ПолучитьМассивДоговоровДляЗагрузки(ДанныеБД, МассивДоговоров);
	
	Сообщить("Получены договора для загрузки: "+ТекущаяДата());	
	
	Если МассивДоговоров.Количество() = 0 Тогда
		Сообщить("Договоров нет!");
		Возврат;
	КонецЕсли;	
	
 	КоличествоСтрок = ДанныеБД.Количество;
	АдресДанныхБД = ДанныеБД.Адрес;
	
	
	РазмерПорции = 100;
	РазмерПоследнейПорции = 0;
	
	КоличествоШагов = Цел(КоличествоСтрок/РазмерПорции);
	Если КоличествоСтрок - КоличествоШагов*РазмерПорции > 0 Тогда
		РазмерПоследнейПорции = КоличествоСтрок - КоличествоШагов*РазмерПорции;
    	КоличествоШагов = КоличествоШагов + 1; 
	КонецЕсли; 
	
	ЕстьОшибки = Ложь;
	
	Для Шаг = 1 По КоличествоШагов Цикл
		
		ОбработкаПрерыванияПользователя();
		
		НачЗначение = (Шаг-1)*РазмерПорции;
		
		Состояние("Обработано: "+НачЗначение+" из "+КоличествоСтрок, Окр(Шаг/КоличествоШагов*100));
		
		Если Шаг = КоличествоШагов Тогда
			РазмерПорции = РазмерПоследнейПорции;
		КонецЕсли; 
		
		КонЗначение = НачЗначение + РазмерПорции - 1;
		
		Если ЗагрузитьПорциюСтрокДанныхБД(НачЗначение, КонЗначение, АдресДанныхБД, ЕстьОшибки, МассивДоговоров) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли; ;
	КонецЦикла; 
	
	//Если флЗаписьИсполнителей или флЗаписьКатегорий Тогда
	//	Возврат;
	//КонецЕсли; 
	Сообщить("Данные загружены, начало загрузки актов: "+ТекущаяДата());	
	
	Состояние("Загрузка актов");
	ЗагрузитьАкты();
	//Сообщить("Загружены акты: "+ТекущаяДата());	
	
	Если ЕстьОшибки Тогда
		Сообщить("Загрузка завершена с ошибками!");
	Иначе
		//Состояние("Проведение актирования");
		//
		//ПерепровестиАктирование();
		
		//Сообщить("Загрузка завершена!");
	КонецЕсли; 
	Сообщить("Финиш: "+ТекущаяДата());	
   
КонецПроцедуры // ВыполнитьЗагрузкуНаСервере()

//&НаСервере
//Функция ЗагрузитьПорциюСтрокДанных(НачЗначение, КонЗначение, ДанныеБД, ЕстьОшибки, МассивДоговоров)
//	
//	АдресДанныхБД = ДанныеБД.Адрес;
//	ТаблБД = ПолучитьИзВременногоХранилища(АдресДанныхБД);
//	_ТабАктов = РеквизитФормыВЗначение("ТабАктов", Тип("ТаблицаЗначений"));
//	ТабДляАктов = _ТабАктов.Скопировать();
//	ТабДляАктов.Очистить();
//	
//	// определяем максимальное количество потоков 
//	ЧислоПотоков = 8;
//	
//	ЧислоСтрокВТаблице = КонЗначение - НачЗначение;
//	// объем порции данных для обработки каждым потоком 
//	РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
//	
//	// массив, где будут храниться фоновые задания 
//	МассивЗаданий = Новый Массив;
//	МассивАдресовХранилища = Новый Массив;
//	
//	Для НомерПотока = 1 По ЧислоПотоков Цикл
//		
//		// определяем индекс для начала обработки данных данным потоком 
//		// разные потоки обрабатывают разные части таблицы 
//		ИндексНачала = НачЗначение + (НомерПотока - 1)*РазмерПорции;
//		
//		Если (НомерПотока = ЧислоПотоков) Тогда
//			// если это последний поток, то он обрабатывает все оставшиеся данные 
//			// т.к. число потоков может не быть кратно количеству строк в таблице 
//			РазмерПорции = ЧислоСтрокВТаблице -(ЧислоПотоков*РазмерПорции)+РазмерПорции;
//		КонецЕсли;
//		
//		// определяем массив параметров для процедуры 
//		ВходнойПараметр = Новый Структура;
//		ВходнойПараметр.Вставить("ТаблБД", ТаблБД);
//		ВходнойПараметр.Вставить("ИндексНачала", ИндексНачала);
//		ВходнойПараметр.Вставить("РазмерПорции", РазмерПорции);
//		ВходнойПараметр.Вставить("ТабДляАктов", ТабДляАктов);
//		ВходнойПараметр.Вставить("МассивДоговоров", МассивДоговоров);
//		
//		НаборПараметров = Новый Массив;
//		НаборПараметров.Добавить(ВходнойПараметр);
//		//НаборПараметров.Добавить(ИндексНачала);
//		//НаборПараметров.Добавить(РазмерПорции);
//		
//		Ключ = Новый УникальныйИдентификатор;

//		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
//		НаборПараметров.Добавить(АдресХранилища);
//		
//		МассивАдресовХранилища.Добавить(АдресХранилища);
//		
//		// запуск фонового задания 
//		Задание = ФоновыеЗадания.Выполнить("мМногопоточнаяОбработка.ЗагрузитьСтроку", НаборПараметров, Ключ);
//		
//		// добавляем задание в массив, чтобы потом отследить выполнение 
//		МассивЗаданий.Добавить(Задание);
//		
//	КонецЦикла;
//	
//	// проверим результат выполнения фоновых заданий 
//	Если МассивЗаданий.Количество() > 0 Тогда
//		
//		Попытка
//			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
//		Исключение
//			// действия в случае ошибки 
//		КонецПопытки;
//	КонецЕсли;
//	
//	// обработка результатов фоновых заданий
//	Для каждого АдресХранилища из МассивАдресовХранилища Цикл
//		ТекМассив = ПолучитьИзВременногоХранилища(АдресХранилища);
//		//Сообщить(ТекМассив);
//		Для Каждого Акт из ТекМассив Цикл
//			НоваяСтрока = Тз.Добавить();
//        ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрокаДанные);
//			МассивДоговоров.Добавить(Дог);	
//		КонецЦикла;	
//	КонецЦикла;	
//	
//	Возврат Истина;
//КонецФункции	



&НаСервере
Процедура ЗагрузитьАкты()
	Тз = ДанныеФормыВЗначение(ТабАктов, Тип("ТаблицаЗначений"));
	Тз.Сортировать("ДатаАкта");
	
	// Помечаем все ведомости на удаления
	Выборка = Документы.ВедомостьАктирования.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления Тогда
			Док = Выборка.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Истина);
			Док.Записать();
		КонецЕсли; 
	КонецЦикла; 
	
	ДатаПредВед = "";
	ВедомостьАктирования = Документы.ВедомостьАктирования;
	ЭтоПервыйАкт = Истина;
	
	Для каждого Стр Из Тз Цикл
	
		Если ДатаПредВед <> Стр.ДатаАкта Тогда
			Если Не ЭтоПервыйАкт Тогда
				// Закрытие ведомости предыдущей
			    Док.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли; 
			
			ДатаПредВед = Стр.ДатаАкта;
			ЭтоПервыйАкт = Ложь;
			
		    ВедомостьАктирования = ПолучитьВедомостьАктирования(Стр.ДатаАкта);
			Док = ВедомостьАктирования.ПолучитьОбъект();
			Док.УстановитьПометкуУдаления(Ложь);
			Акты = Док.Акты;
			Акты.Очистить();
		КонецЕсли; 
	    НовАкт = Акты.Добавить();
		ЗаполнитьЗначенияСвойств(НовАкт, Стр);
		НовАкт.ЭтапДоговора = Стр.Этап;
	КонецЦикла; 
	
	Док.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры // ЗагрузитьАкты()
 
&НаКлиенте
Функция ПолучитьМассивДоговоровДляЗагрузки(ДанныеБД, МассивДоговоров)
	
 	КоличествоСтрок = ДанныеБД.Количество;
	//АдресДанныхБД = ДанныеБД.Адрес;
	
	//МассивДоговоров.Очистить();
	
	РазмерПорции = 500;
	РазмерПоследнейПорции = 0;
	
	КоличествоШагов = Цел(КоличествоСтрок/РазмерПорции);
	Если КоличествоСтрок - КоличествоШагов*РазмерПорции > 0 Тогда
		РазмерПоследнейПорции = КоличествоСтрок - КоличествоШагов*РазмерПорции;
    	КоличествоШагов = КоличествоШагов + 1; 
	КонецЕсли; 
	
	ЕстьОшибки = Ложь;
	
	Для Шаг = 1 По КоличествоШагов Цикл
		
		ОбработкаПрерыванияПользователя();
		
		НачЗначение = (Шаг-1)*РазмерПорции;
		
		Состояние("Получение списка договоров для загрузки: "+НачЗначение+" из "+КоличествоСтрок, Окр(Шаг/КоличествоШагов*100));
		
		Если Шаг = КоличествоШагов Тогда
			РазмерПорции = РазмерПоследнейПорции;
		КонецЕсли; 
		
		КонЗначение = НачЗначение + РазмерПорции - 1;

		Если ЗагрузитьПорциюСтрокДоговоры(НачЗначение, КонЗначение, ДанныеБД, ЕстьОшибки, МассивДоговоров) Тогда
		КонецЕсли; ;
	КонецЦикла; 
	
	//Состояние("Удаление лишних строк");
	//НовыеДанныеБД = УдалитьЛишниеСтроки(МассивДоговоров, ДанныеБД);
	
	//Возврат НовыеДанныеБД;
	Возврат ДанныеБД;
КонецФункции // ПолучитьСписокДоговоровДляЗагрузки(ДанныеБД)()

&НаСервере
Функция УдалитьЛишниеСтроки(МассивДоговоров, ДанныеБД)
	
	ТаблБД = ПолучитьИзВременногоХранилища(ДанныеБД.Адрес);
	
	ВсегоСтрок = ТаблБД.Количество();
		
	Пока ВсегоСтрок > 0 Цикл
		
		ИскЭлемент = МассивДоговоров.Найти(ТаблБД[ВсегоСтрок-1].КодДоговора);
		Если ИскЭлемент = Неопределено Тогда
			ТаблБД.Удалить(ВсегоСтрок-1);
		КонецЕсли; 
		
		ВсегоСтрок = ВсегоСтрок - 1;
	КонецЦикла; 
	
	Сообщить("Осталось "+ТаблБД.Количество());
	
	АдресДанныхБД = ПоместитьВоВременноеХранилище(ТаблБД, ДанныеБД.Адрес);
	
	ДанныеБД.Вставить("Адрес", АдресДанныхБД);
	ДанныеБД.Вставить("Количество", ТаблБД.Количество());
	
	Возврат ДанныеБД;
	
КонецФункции // УдалитьЛишниеСтроки(МассивУдаляемыхСтрок)()

&НаСервере
Функция ЗагрузитьПорциюСтрокДоговоры(НачЗначение, КонЗначение, ДанныеБД, ЕстьОшибки, МассивДоговоров)
	
	АдресДанныхБД = ДанныеБД.Адрес;
	ТаблБД = ПолучитьИзВременногоХранилища(АдресДанныхБД);
	
	// определяем максимальное количество потоков 
	ЧислоПотоков = 8;
	
	ЧислоСтрокВТаблице = КонЗначение - НачЗначение;
	// объем порции данных для обработки каждым потоком 
	РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
	
	// массив, где будут храниться фоновые задания 
	МассивЗаданий = Новый Массив;
	МассивАдресовХранилища = Новый Массив;
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл
		
		// определяем индекс для начала обработки данных данным потоком 
		// разные потоки обрабатывают разные части таблицы 
		ИндексНачала = НачЗначение + (НомерПотока - 1)*РазмерПорции;
		
		Если (НомерПотока = ЧислоПотоков) Тогда
			// если это последний поток, то он обрабатывает все оставшиеся данные 
			// т.к. число потоков может не быть кратно количеству строк в таблице 
			РазмерПорции = ЧислоСтрокВТаблице -(ЧислоПотоков*РазмерПорции)+РазмерПорции;
		КонецЕсли;
		
		// определяем массив параметров для процедуры 
		ВходнойПараметр = Новый Структура;
		ВходнойПараметр.Вставить("ТаблБД", ТаблБД);
		ВходнойПараметр.Вставить("ИндексНачала", ИндексНачала);
		ВходнойПараметр.Вставить("РазмерПорции", РазмерПорции);
		
		НаборПараметров = Новый Массив;
		НаборПараметров.Добавить(ВходнойПараметр);
		//НаборПараметров.Добавить(ИндексНачала);
		//НаборПараметров.Добавить(РазмерПорции);
		
		МассивДляДоговоров = Новый Массив;
		Ключ = Новый УникальныйИдентификатор;

		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
		НаборПараметров.Добавить(АдресХранилища);
		
		МассивАдресовХранилища.Добавить(АдресХранилища);
		
		// запуск фонового задания 
		Задание = ФоновыеЗадания.Выполнить("мМногопоточнаяОбработка.ЗагрузитьСтрокиДоговоров", НаборПараметров, Ключ);
		
		// добавляем задание в массив, чтобы потом отследить выполнение 
		МассивЗаданий.Добавить(Задание);
		
	КонецЦикла;
	
	// проверим результат выполнения фоновых заданий 
	Если МассивЗаданий.Количество() > 0 Тогда
		
		Попытка
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
			// действия в случае ошибки 
		КонецПопытки;
	КонецЕсли;
	
	// обработка результатов фоновых заданий
	Для каждого АдресХранилища из МассивАдресовХранилища Цикл
		ТекМассив = ПолучитьИзВременногоХранилища(АдресХранилища);
		//Сообщить(ТекМассив);
		Для Каждого Дог из ТекМассив Цикл
			МассивДоговоров.Добавить(Дог);	
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции	

&НаСервере
Функция ГрузитьСтроку(Стр)
	Если Стр.ГодДоговора < 2015 Тогда
		ДатаАкта = ПреобразоватьСтрокуКДате(Стр.ДатаАкта);
		ДатаОплаты1 = ПреобразоватьСтрокуКДате(Стр.ДатаОплаты1);
		ДатаОплаты2 = ПреобразоватьСтрокуКДате(Стр.ДатаОплаты2);
		ДатаВозврата = ПреобразоватьСтрокуКДате(Стр.ДатаВозврата);
		ДатаПрибыль = ПреобразоватьСтрокуКДате(Стр.ДатаПрибыль);
		ДатаУбыток = ПреобразоватьСтрокуКДате(Стр.ДатаУбыток);
		
		Если Стр.СуммаАкта = Стр.СуммаОплаты1 + Стр.СуммаОплаты2 - Стр.СуммаВозврата - Стр.СуммаПрибыль + Стр.СуммаУбыток И 
			Стр.СуммаАкта = 0 Тогда
			// оплата была возвращена полностью, работы не выполнялись
			Если Год(ДатаАкта) < 2015 
				и Год(ДатаОплаты1) < 2015 
				и Год(ДатаОплаты2) < 2015 
				И Год(ДатаВозврата) < 2015 
				И Год(ДатаПрибыль) < 2015
				И Год(ДатаУбыток) < 2015 Тогда
				// было до 2015
				Возврат Ложь;
			КонецЕсли; 
			
		ИначеЕсли Стр.СуммаАкта = Стр.СуммаОплаты1 + Стр.СуммаОплаты2 - Стр.СуммаВозврата - Стр.СуммаПрибыль + Стр.СуммаУбыток И 
			Стр.СуммаАкта = Стр.Стоимость Тогда
			// работы выполнены полностью 
			Если Год(ДатаАкта) < 2015 
				и Год(ДатаОплаты1) < 2015 
				и Год(ДатаОплаты2) < 2015 
				И Год(ДатаВозврата) < 2015 
				И Год(ДатаПрибыль) < 2015
				И Год(ДатаУбыток) < 2015 Тогда
				// было до 2015
				Возврат Ложь;
			КонецЕсли; 
			
		//ИначеЕсли Стр.СуммаАкта = 0 И Стр.СуммаОплаты1 > 0 И Стр.СуммаОплаты1 < 10000 Тогда
		//	// такие не надо переносить
		//	Возврат Ложь;
		КонецЕсли;
	//Иначе
	//	// Договор 2015
	//	Если Стр.СуммаАкта = Стр.СуммаОплаты1 + Стр.СуммаОплаты2 - Стр.СуммаВозврата И 
	//		Стр.СуммаАкта = 0 Тогда
	//		// оплата была возвращена полностью, работы не выполнялись
	//		Возврат Ложь;
	//	КонецЕсли; 
	КонецЕсли; 
	Возврат Истина;
КонецФункции // ГрузитьСтроку(Стр)
 
&НаСервере
Функция ЗагружатьСтрокуДоговоров(Стр, МассивДоговоров)
	
	Если ГрузитьСтроку(Стр) Тогда
		// Добавляем договор
		ИскЭлемент = МассивДоговоров.Найти(Стр.КодДоговора);
		Если ИскЭлемент = Неопределено Тогда
			Если ЗначениеЗаполнено(Стр.НомерДоговора) Тогда
				МассивДоговоров.Добавить(Стр.КодДоговора);
			КонецЕсли; 
		КонецЕсли; 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ЗагрузитьПорциюСтрокДанныхБД(НачЗначение, КонЗначение, АдресДанныхБД, ЕстьОшибки, МассивДоговоров)
	ТаблБД = ПолучитьИзВременногоХранилища(АдресДанныхБД);
	
	Для й=НачЗначение По КонЗначение Цикл
		Если ЗагрузитьСтроку(ТаблБД[й], МассивДоговоров) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат ЕстьОшибки;
КонецФункции	

&НаСервере
Функция ЗагрузитьСтроку(Стр, МассивДоговоров)
	ЕстьОшибка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	ИскЭлемент = МассивДоговоров.Найти(Стр.КодДоговора);
	Если ИскЭлемент = Неопределено Тогда
		// грузить не надо
		Возврат ЕстьОшибка;
	КонецЕсли; 
		
	НомерДоговора = СтрЗаменить(Стр.НомерДоговора, Символы.НПП, "");
	//ДатаДоговора = ПреобразоватьСтрокуКДате(Стр.ДатаДоговора);
		
	// Строка Заказчика  
	Корреспондент = ПолучитьКорреспондента(Стр);
    
	КомментарийЭтапа = "";
	ГруппаЭтапа = "";
	
	// Объект работ
	Если Стр.ETAP_ISP1_NN = 24 
	    или Стр.ETAP_ISP1_NN = 25 
	    или Стр.ETAP_ISP1_NN = 39
	    или Стр.ETAP_ISP1_NN = 46 
	    или Стр.ETAP_ISP1_NN = 47 
	    или Стр.ETAP_ISP1_NN = 100 Тогда
	    // если у нач отделов стоят такие коды, то объект брать из заявки, 
	    //   а то, что есть в объекте этапа - записать в его комментарий
	    КомментарийЭтапа = СокрЛП(Стр.ОбъектВЭтапе)+" "+СокрЛП(Стр.Комментарий); 
		
	    Если Корреспондент.ЮрФизЛицо = ФизическоеЛицо Тогда
	        ОбъектРабот = Неопределено;
	    Иначе
	        ИмяОбъекта = СокрЛП(Стр.ОбъектВЗаявке);
	        Если ИмяОбъекта <> "" Тогда
	            ОбъектРабот = ПолучитьОбъектРабот(Корреспондент, ИмяОбъекта);
	        КонецЕсли; 
		КонецЕсли; 
		
		КодГруппыОтделовЭтапа = СокрЛП(Стр.КодОтдела) + " " + СокрЛП(Стр.КодОтряда);
		//Если СокрЛП(СтрЭтап.КодГруппыОтделовИсполнителя) <> СокрЛП(СтрЭтап.КодГруппыОтделовЭтапа) Тогда
		ГруппаЭтапа = ПолучитьГруппуЭтапа(Стр);	
		//КонецЕсли; 
		
	 Иначе
	    КомментарийЭтапа = СокрЛП(Стр.Комментарий); 
	    Если Корреспондент.ЮрФизЛицо = ФизическоеЛицо Тогда
	        ОбъектРабот = Неопределено;
	    Иначе
	        ИмяОбъекта = СокрЛП(Стр.ОбъектВЭтапе);
	        Если ИмяОбъекта <> "" Тогда
	            ОбъектРабот = ПолучитьОбъектРабот(Корреспондент, ИмяОбъекта);
	        КонецЕсли; 
	    КонецЕсли; 
	 КонецЕсли; 
	 
	// Договор
	Договор = ПолучитьДоговор(НомерДоговора, Стр, Корреспондент);
	
	// Получение Подразделения через таб номер исполнителя или начальника
	ТабНомерДляПоиска = СтрЗаменить(Стр.ТабНомер, Символы.НПП, "");
	ТабНомерНачДляПоиска = СтрЗаменить(Стр.ТабНомерНАч, Символы.НПП, "");
	Подразделение = "";	
	Если Не ЗначениеЗаполнено(ГруппаЭтапа) Тогда
		Если Стр.ТабНомер >= 0 Тогда
			Если Стр.ТабНомер > 0 Тогда
				Подразделение = ПолучитьПодразделение(ТабНомерДляПоиска, Стр.Исполнитель);
			Иначе
				Сообщить(""+СокрЛП(Стр.Исполнитель) +" " + НомерДоговора+" "+ стр.ДатаДоговора+" этап № "+Стр.НомерЭтапа + " нет таб.№!" );
			КонецЕсли; 
		//Иначе
		//	Сообщить(""+СокрЛП(Стр.Исполнитель) +" " + НомерДоговора+" "+ стр.ДатаДоговора+" этап № "+Стр.НомерЭтапа + " нет таб.№!" );
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			// проба получить подразделение по таб № начальника
			Если Стр.ТабНомерНач >= 0 Тогда
				Если Стр.ТабНомерНач > 0 Тогда
					Подразделение = ПолучитьПодразделение(ТабНомерНачДляПоиска, Стр.НаименованиеГруппыЭтапов);
				Иначе
					Сообщить(""+СокрЛП(Стр.НаименованиеГруппыЭтапов) +" " + НомерДоговора+" "+ стр.ДатаДоговора+" этап № "+Стр.НомерЭтапа + " нет таб.№!" );
				КонецЕсли; 
			//Иначе
			//	Сообщить(""+СокрЛП(Стр.НаименованиеГруппыЭтапов) +" " + НомерДоговора+" "+ стр.ДатаДоговора+" этап № "+Стр.НомерЭтапа + " нет таб.№!" );
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
		
	// Заявка
	ПолучитьЗаявку(Стр, Договор, Корреспондент, Подразделение);
	
	ВидРабот = Неопределено;
	КодВидаРабот = СтрЗаменить(Стр.КодРаботы, Символы.НПП, "");
	ВидРабот = ПолучитьВидРаботыПоДоговору(КодВидаРабот, Корреспондент.ЮрФизЛицо);
	Если ВидРабот = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не определен вид работ по коду "+КодВидаРабот+" для "+Корреспондент.ЮрФизЛицо;
		//Сообщение.Поле = "Номенклатура[10].Количество";
		//Сообщение.УстановитьДанные(ОбъектДанных);
		Сообщение.Сообщить();
		
		//Сообщить("Не определен вид работ по коду "+КодВидаРабот);
		ЕстьОшибка = Истина;
		Возврат ЕстьОшибка;
	КонецЕсли; 
	
	НомерЭтапа = Стр.НомерЭтапа;
	Этап = ПолучитьЭтап(Договор, НомерЭтапа, ОбъектРабот, Подразделение, ВидРабот, Стр, КомментарийЭтапа);
	
	// Акты
    СуммаАкта 	= Число(Стр.СуммаАкта);
	ДатаАкта = ПреобразоватьСтрокуКДате(Стр.ДатаАкта);
	
	// Проверка наличия даты акта в загружаемом файле
	Если ЗначениеЗаполнено(ДатаАкта)и(СуммаАкта > 0) Тогда
		НовАкт = ТабАктов.Добавить();
		НовАкт.Корреспондент = Корреспондент;
		НовАкт.Договор = Договор;
		НовАкт.Этап = Этап;
		НовАкт.ДатаАкта = ДатаАкта;
		НовАкт.Сумма = СуммаАкта;
		НовАкт.НДС = Стр.СуммаНДС;
		НовАкт.Подразделение = Этап.Подразделение;
	КонецЕсли; 
	//ПолучитьАкт(Договор, Этап, Корреспондент, Стр);
	
	//Если флЗаписьИсполнителей или флЗаписьКатегорий Тогда
	//	Возврат ЕстьОшибка;
	//КонецЕсли; 
	
	
	// Оплаты
	//ВсегоОплата = ПреобразоватьСтрокуКЧислу(Стр.СуммаОплаты1);
	Если Стр.СуммаОплаты1 <> 0 Тогда
		ДатаОплаты = ПреобразоватьСтрокуКДате(Стр.ДатаОплаты1);
		Если (СтрДлина(СокрЛП(ДатаОплаты))>=10) Тогда
			ЭтоОплата = Истина;
			Док = ПолучитьОплату(Корреспондент, Договор, Этап, ДатаОплаты, Стр.СуммаОплаты1, ЭтоОплата);
		КонецЕсли; 
	КонецЕсли; 
	//СуммаОплаты2 = ПреобразоватьСтрокуКЧислу(Стр.СуммаОплаты2);
	Если Стр.СуммаОплаты2 <> 0 Тогда
		ДатаОплаты = ПреобразоватьСтрокуКДате(Стр.ДатаОплаты2);
		Если (СтрДлина(СокрЛП(ДатаОплаты))>=10) Тогда
			ЭтоОплата = Истина;
			Док = ПолучитьОплату(Корреспондент, Договор, Этап, ДатаОплаты, Стр.СуммаОплаты2, ЭтоОплата);
		КонецЕсли; 
	КонецЕсли; 
	
	// Списание на убытки оформляем как оплату
	Если (СтрДлина(СокрЛП(Стр.ДатаУбыток))>=10)И(Стр.СуммаУбыток<>0) Тогда
	    ДатаУбыток = ПреобразоватьСтрокуКДате(Стр.ДатаУбыток);
		ЭтоОплата = Ложь;
		Док = ПолучитьОплату(Корреспондент, Договор, Этап, ДатаУбыток, Стр.СуммаУбыток, ЭтоОплата);
	КонецЕсли; 
		
	// Возвраты
	//Сумма = ПреобразоватьСтрокуКЧислу(Стр.СуммаВозврата);
	Если (СтрДлина(СокрЛП(Стр.ДатаВозврата))>=10)И(Стр.СуммаВозврата<>0) Тогда
	    ДатаВозврата = ПреобразоватьСтрокуКДате(Стр.ДатаВозврата);
		ЭтоВозврат = Истина;
		Док = ПолучитьВозврат(Корреспондент, Договор, Этап, ДатаВозврата, Стр.СуммаВозврата, ЭтоВозврат);
	КонецЕсли; 
	
	// Списание на прибыль оформляем как возврат
	Если (СтрДлина(СокрЛП(Стр.ДатаПрибыль))>=10)И(Стр.СуммаПрибыль<>0) Тогда
	    ДатаПрибыль = ПреобразоватьСтрокуКДате(Стр.ДатаПрибыль);
		ЭтоВозврат = Ложь;
		Док = ПолучитьВозврат(Корреспондент, Договор, Этап, ДатаПрибыль, Стр.СуммаПрибыль, ЭтоВозврат);
	КонецЕсли; 
	
	Возврат ЕстьОшибка;
КонецФункции

Функция ИнициализироватьТаблицыДанных()
    // Таблицы базы
	ТзКорреспондент = ПолучитьКорреспондентов();
	ТзФизЛиц = ПолучитьФизЛица();
	ТзОбъекты = ПолучитьОбъекты();
	ТзДоговора = ПолучитьДоговора();
	ТзЭтапы = ПолучитьЭтапы();
	ТзАкты = ПолучитьАкты();
	ТзВедомостиАктирования = ПолучитьВедомостиАктирования();
	ТзВозвраты = ПолучитьВозвраты();
	ТзОплаты = ПолучитьОплаты();		                         			
	ТзПодразделения = ПолучитьПодразделения();
	ТзВидыРабот = ПолучитьВидыРабот();
	ТзБанки = ПолучитьБанки();
	ТзБанковскиеСчета = ПолучитьБанковскиеСчета();
	ТзКонтактныеЛица = ПолучитьКонтактныеЛица();
	ТзПользователи = ПолучитьПользователей();

	СтруктураТаблицБД = Новый Структура();
	СтруктураТаблицБД.Вставить("ТзКорреспондент", ТзКорреспондент);
	СтруктураТаблицБД.Вставить("ТзФизЛиц", ТзФизЛиц);
	СтруктураТаблицБД.Вставить("ТзОбъекты", ТзОбъекты);
	СтруктураТаблицБД.Вставить("ТзДоговора", ТзДоговора);
	СтруктураТаблицБД.Вставить("ТзЭтапы", ТзЭтапы);
	СтруктураТаблицБД.Вставить("ТзАкты", ТзАкты);
	СтруктураТаблицБД.Вставить("ТзВедомостиАктирования", ТзВедомостиАктирования);
	СтруктураТаблицБД.Вставить("ТзВозвраты", ТзВозвраты);
	СтруктураТаблицБД.Вставить("ТзОплаты", ТзОплаты);
	СтруктураТаблицБД.Вставить("ТзПодразделения", ТзПодразделения);
	СтруктураТаблицБД.Вставить("ТзВидыРабот", ТзВидыРабот);
	//СтруктураТаблицБД.Вставить("ТзГруппыЭтапов", ТзГруппыЭтапов);
	СтруктураТаблицБД.Вставить("ТзБанки", ТзБанки);
	СтруктураТаблицБД.Вставить("ТзБанковскиеСчета", ТзБанковскиеСчета);
	СтруктураТаблицБД.Вставить("ТзКонтактныеЛица", ТзКонтактныеЛица);
	СтруктураТаблицБД.Вставить("ТзПользователи", ТзПользователи);
	
    АдресДанных = ПоместитьВоВременноеХранилище(СтруктураТаблицБД, УникальныйИдентификатор);
    Возврат АдресДанных;
КонецФункции // ИнициализироватьТаблицыДанных()

// <Описание функции>
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьДанныеБД()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Dogovor.DOG_NOM, """") КАК НомерДоговора,
		|	Dogovor.DOG_D_OFORML КАК ДатаДоговора,
		|	Dogovor.DOG_NN_ZAK КАК КодКлиента,
		|	ЕСТЬNULL(Dogovor.DOG_YEAR, 0) КАК ГодДоговора,
		|	Etap.ETAP_DOG_NN КАК КодДоговора,
		|	Etap.ETAP_NAIM_OB КАК ОбъектВЭтапе,
		|	ZAJAVKI.ZAJAVKI_D_REG КАК ДатаЗаявки,
		|	ЕСТЬNULL(ZAJAVKI.ZAJAVKI_NOM, 0) КАК НомерЗаявки,
		|	ZAJAVKI.ZAJAVKI_OBEKT КАК ОбъектВЗаявке,
		|	ЕСТЬNULL(Etap.ETAP_VYPOLN, 0) КАК СуммаАкта,
		|	Etap.ETAP_D_VYP КАК ДатаАкта,
		|	ЕСТЬNULL(Etap.ETAP_OPL_SUMMA, 0) КАК СуммаОплаты1,
		|	Etap.ETAP_D_OPLATA КАК ДатаОплаты1,
		|	ЕСТЬNULL(Etap.ETAP_OPL_SUMMA2, 0) КАК СуммаОплаты2,
		|	Etap.ETAP_D_OPLATA2 КАК ДатаОплаты2,
		|	ЕСТЬNULL(Etap.ETAP_VOZVR_SUMMA, 0) КАК СуммаВозврата,
		|	Etap.ETAP_D_VOZVR КАК ДатаВозврата,
		|	Etap.ETAP_D_SD_PLAN КАК ПлановыйСрок,
		|	Etap.ETAP_NOM КАК НомерЭтапа,
		|	Etap.ETAP_NDS КАК СтавкаНДС,
		|	ЕСТЬNULL(Etap.ETAP_NDS_SUMMA, 0) КАК СуммаНДС,
		|	ЕСТЬNULL(Etap.ETAP_STOIM, 0) КАК Стоимость,
		|	Etap.ETAP_ISP1_NN,
		|	SPR_ETAP.SPR_ETAP_NAIM КАК НаименованиеРабот,
		|	SPR_ISP1.ISP_OTDEL КАК КодОтдела,
		|	SPR_ISP1.ISP_GRUPPA КАК КодОтряда,
		|	ЕСТЬNULL(SPR_ISP1.ISP_TAB_NOM, -1) КАК ТабНомерНач,
		|	ЕСТЬNULL(SPR_ISP.ISP_TAB_NOM, -1) КАК ТабНомер,
		|	SPR_ISP1.ISP_FIO КАК НаименованиеГруппыЭтапов,
		|	SPR_ISP.ISP_FIO КАК Исполнитель,
		|	SPR_ZAK.Z_NAIM КАК НаименованиеЗаказчика,
		|	SPR_ZAK.Z_ADRES КАК Адрес,
		|	SPR_ZAK.Z_INDEX КАК Индекс,
		|	SPR_ZAK.Z_SCHET КАК РасчетныйСчет,
		|	SPR_ZAK.Z_UNP КАК УНП,
		|	SPR_ZAK.Z_FIO КАК ФИО,
		|	SPR_ZAK.Z_DOLZNOST КАК Должность,
		|	SPR_ZAK.Z_DOKUMENT КАК Документ,
		|	SPR_ZAK.Z_TELEFON КАК Телефон,
		|	SPR_ZAK.Z_NN_BANK,
		|	SPR_BANK.B_NAIM КАК НаименованиеБанка,
		|	SPR_BANK.B_COD КАК КодБанка,
		|	SPR_BANK.B_ADRES_BANKA КАК АдресБанка,
		|	SPR_ETAP.SPR_ETAP_NN КАК КодРаботы,
		|	ZAJAVKI.ZAJAVKI_FIZ_UR_NN КАК ФизЮрЛицо,
		|	Etap.ETAP_PRIM КАК Комментарий,
		|	ЕСТЬNULL(Dogovor.DOG_INVESTICII, 0) КАК Инвестиции,
		|	ЕСТЬNULL(Dogovor.DOG_PRID_SERVIS, 0) КАК Сервис,
		|	ЕСТЬNULL(Dogovor.DOG_AUCTIONS, 0) КАК Аукцион,
		|	ЕСТЬNULL(Dogovor.DOG_AES, 0) КАК АЭС,
		|	ЕСТЬNULL(ZAJAVKI.ZAJAVKI_KOL_LIST_DOK, 0) КАК КолвоЛистов,
		|	ZAJAVKI.ZAJAVKI_D_POST_DOK КАК ИсхДатаЗаявки,
		|	ZAJAVKI.ZAJAVKI_NOM_POST_DOK КАК ИсхНомерЗаявки,
		|	ZAJAVKI.ZAJAVKI_PRIM КАК ПримечаниеЗаявки,
		|	ЕСТЬNULL(ZAJAVKI.ZAJAVKI_KOL_LIST_PRIL, 0) КАК КолвоПриложений,
		|	ЕСТЬNULL(Etap.ETAP_PRIB_SUMMA, 0) КАК СуммаПрибыль,
		|	Etap.ETAP_D_PRIB КАК ДатаПрибыль,
		|	Etap.ETAP_D_UBYTK КАК ДатаУбыток,
		|	ЕСТЬNULL(Etap.ETAP_UBYTK_SUMMA, 0) КАК СуммаУбыток
		|ИЗ
		|	ВнешнийИсточникДанных.Гродно.Таблица.ETAP КАК Etap
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.DOGOVOR КАК Dogovor
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ZAK КАК SPR_ZAK
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_BANK КАК SPR_BANK
		|				ПО SPR_ZAK.Z_NN_BANK = SPR_BANK.B_NN
		|			ПО Dogovor.DOG_NN_ZAK = SPR_ZAK.Z_NN
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.ZAJAVKI КАК ZAJAVKI
		|			ПО Dogovor.DOG_ZAJAVKI_NN = ZAJAVKI.ZAJAVKI_NN
		|		ПО Etap.ETAP_DOG_NN = Dogovor.DOG_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ISP КАК SPR_ISP
		|		ПО Etap.ETAP_ISP2_NN = SPR_ISP.ISP_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ISP КАК SPR_ISP1
		|		ПО Etap.ETAP_ISP1_NN = SPR_ISP1.ISP_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ETAP КАК SPR_ETAP
		|		ПО Etap.ETAP_SPR_ETAP_NN = SPR_ETAP.SPR_ETAP_NN";

		//Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Результат = Запрос.Выполнить().Выгрузить();

    АдресДанныхБД = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);

	ДанныеБД = Новый Структура("Адрес, Количество");
	ДанныеБД.Вставить("Адрес", АдресДанныхБД);
	ДанныеБД.Вставить("Количество", Результат.Количество());
	
	Возврат ДанныеБД;
 КонецФункции // ПолучитьДанныеБД()

&НаСервере
Функция ПолучитьГруппуЭтапа(Стр)

	КодОтдела = СокрЛП(СтрЗаменить(Стр.КодОтдела, Символы.НПП, ""));         // Родитель - Группа
	КодОтряда = СокрЛП(СтрЗаменить(Стр.КодОтряда, Символы.НПП, ""));  // Элемент
	КодПоиска = ""+СокрЛП(КодОтдела)+" "+СокрЛП(КодОтряда);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мГруппыЭтаповДоговоров.Ссылка,
		|	мГруппыЭтаповДоговоров.ВспомогательныйКод
		|ИЗ
		|	Справочник.мГруппыЭтаповДоговоров КАК мГруппыЭтаповДоговоров
		|ГДЕ
		|	(мГруппыЭтаповДоговоров.ВспомогательныйКод = &ВспомогательныйКод
		|			ИЛИ мГруппыЭтаповДоговоров.ВспомогательныйКод = &КодОтдела)";
	
	Запрос.УстановитьПараметр("ВспомогательныйКод", КодПоиска);
	Запрос.УстановитьПараметр("КодОтдела", КодОтдела);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()>0 Тогда
		Для каждого СтрРез Из Результат Цикл
			Если СтрРез.ВспомогательныйКод = КодПоиска Тогда
				Возврат СтрРез.Ссылка;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// Поиск ГруппаЭтапа
	ИскСтрока = Результат.Найти(КодОтдела, "ВспомогательныйКод");
	
	Если ИскСтрока = Неопределено Тогда
		// Создание Группа
		НовГруппа = Справочники.мГруппыЭтаповДоговоров.СоздатьГруппу();
		НовГруппа.УстановитьНовыйКод();
		НовГруппа.ВспомогательныйКод = КодОтдела;
		НовГруппа.Наименование = Стр.НаименованиеГруппыЭтапов;
		НовГруппа.ОбменДанными.Загрузка = Истина;
		НовГруппа.Записать();
		
		ГруппаЭтапа = НовГруппа.Ссылка;
	Иначе
		ГруппаЭтапа = ИскСтрока.Ссылка;
	КонецЕсли; 
	
	// Создание элемента
	НовЭлемент = Справочники.мГруппыЭтаповДоговоров.СоздатьЭлемент();
	НовЭлемент.УстановитьНовыйКод();
	НовЭлемент.ВспомогательныйКод = КодПоиска;
	НовЭлемент.Наименование = Стр.НаименованиеГруппыЭтапов;
	НовЭлемент.Родитель = ГруппаЭтапа;
	НовЭлемент.ОбменДанными.Загрузка = Истина;
	НовЭлемент.Записать();
	
	ИскЭлемент = НовЭлемент.Ссылка;
	
	Возврат ИскЭлемент;
КонецФункции // ПолучитьГруппуЭтапа()

&НаСервере
Функция ПолучитьЗаявку(Стр, Договор, Корреспондент, Подразделение)	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВходящиеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
		|ГДЕ
		|	ВходящиеДокументы.ВидДокумента = &ВидДокумента
		|	И ВходящиеДокументы.ДатаРегистрации = &ДатаРегистрации
		|	И ВходящиеДокументы.РегистрационныйНомер Подобно &РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаПоручение);
	Запрос.УстановитьПараметр("ДатаРегистрации", Стр.ДатаЗаявки);
	
	НомерЗаявки = СтрЗаменить(Стр.НомерЗаявки, Символы.НПП, "");
	Запрос.УстановитьПараметр("РегистрационныйНомер", НомерЗаявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если СтрДлина(Стр.ДатаЗаявки)<10 Тогда
			Возврат Справочники.ВходящиеДокументы.ПустаяСсылка();
		КонецЕсли; 
		Док = Справочники.ВходящиеДокументы.СоздатьЭлемент();
		Док.ДатаРегистрации = Стр.ДатаЗаявки;
		Док.РегистрационныйНомер = НомерЗаявки;
		Док.ВидДокумента = ВидДокументаПоручение;
		Док.ВопросДеятельности = ВопросДеятельности;
		Док.ГрифДоступа = ГрифДоступа;
		Если СтрДлина(Стр.ИсхДатаЗаявки)>=10 Тогда
			Попытка
				Если Год(Стр.ИсхДатаЗаявки) < 3000 Тогда
					Док.ИсходящаяДата = Стр.ИсхДатаЗаявки;
				КонецЕсли; 
			Исключение
			КонецПопытки; 
		КонецЕсли; 
		Док.ИсходящийНомер = Стр.ИсхНомерЗаявки;
		Док.КоличествоЛистов = Стр.КолвоЛистов;
		Док.КоличествоПриложений = Стр.КолвоПриложений;
		Док.Отправитель = Корреспондент;
		Док.Наименование = НомерЗаявки+" "+Формат(Стр.ДатаЗаявки,"ДФ=dd.MM.yy") +" "+ Стр.ОбъектВЗаявке;
		Док.Заголовок = НомерЗаявки+" "+Формат(Стр.ДатаЗаявки,"ДФ=dd.MM.yy")+" "+ Стр.ОбъектВЗаявке;
		Док.Подразделение = Подразделение;
		Док.Содержание = Стр.ОбъектВЗаявке;
		Попытка
			Док.ЧисловойНомер = Число(НомерЗаявки);
		Исключение
		
		КонецПопытки; 
		Док.Комментарий = Стр.ПримечаниеЗаявки;
		Док.ОбменДанными.Загрузка = Истина;
		Док.Записать();
		
		ЗаписатьКатегории(Док, Стр);
		
		//// Запись категорий  в Заявку
		//СпКатегорий = Новый СписокЗначений;
		//Если Стр.Аукцион = 1 Тогда
		//	СпКатегорий.Добавить(КатегорияАукцион);
		//КонецЕсли; 
		//Если Стр.АЭС = 1 Тогда
		//	СпКатегорий.Добавить(КатегорияАЭС);
		//КонецЕсли; 
		//Если Стр.Сервис = 1 Тогда
		//	СпКатегорий.Добавить(КатегорияСервис);
		//КонецЕсли; 
		//Если Стр.Инвестиции = 1 Тогда
		//	СпКатегорий.Добавить(КатегорияИнвестиции);
		//КонецЕсли; 
		//
		//Если СпКатегорий.Количество() > 0 Тогда
		//	РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СпКатегорий, Док);
		//КонецЕсли; 
		
		ИскДок = Док.Ссылка;
		
		// Установка связи
		СвязиДокументов.СоздатьСвязь(ИскДок, Договор, Справочники.ТипыСвязей.Поручение);
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если флЗаписьКатегорий Тогда
				ЗаписатьКатегории(ВыборкаДетальныеЗаписи.Ссылка, Стр);
				Прервать;
			КонецЕсли; 
			ИскДок = ВыборкаДетальныеЗаписи.Ссылка;
			
			// Установка связи
			СвязиДокументов.СоздатьСвязь(ИскДок, Договор, Справочники.ТипыСвязей.Поручение);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ИскДок;
КонецФункции // ПолучитьЗаявку(Стр, Договор, Корреспондент)

&НаСервереБезКонтекста
Функция ПолучитьПапкуВнутреннихДокументов(ИмяПапки)
	Папки = Справочники.ПапкиВнутреннихДокументов;
	ИскПапка = Папки.НайтиПоНаименованию(ИмяПапки);
	Если ИскПапка = Папки.ПустаяСсылка() Тогда
		ПапкаДоговоров = Папки.СоздатьЭлемент();
		ПапкаДоговоров.Наименование = ИмяПапки;
		ПапкаДоговоров.Записать();
		ИскПапка = ПапкаДоговоров.Ссылка;
	КонецЕсли; 
	Возврат ИскПапка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКорреспондентов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Корреспонденты.Ссылка КАК КорреспондентСсылка,
		|	Корреспонденты.ИНН,
		|	Корреспонденты.Наименование,
		|	ВЫРАЗИТЬ(Корреспонденты.ПолноеНаименование КАК Строка(300)) КАК ПолноеНаименование,
		|	Корреспонденты.Комментарий
		|ИЗ
		|	Справочник.Корреспонденты КАК Корреспонденты";

	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["ИНН"]);
	Результат.Колонки.Индекс(Результат.Колонки["Наименование"]);
	Результат.Колонки.Индекс(Результат.Колонки["ПолноеНаименование"]);
	Результат.Колонки.Индекс(Результат.Колонки["Комментарий"]);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьКорреспондента(Стр)
	
	ИскЗначение = Неопределено;
	
	Если Стр.ФизЮрЛицо = 1 Тогда
		УНП = Стр.УНП;
		
		// Поиск Корреспондента по УНП
		Если ЗначениеЗаполнено(УНП) Тогда
			ИскЗначение = НайтиПоРеквизиту("ИНН", УНП, "Справочник.Корреспонденты");
		КонецЕсли;
	КонецЕсли; 
	
	Наименование = СокрЛП(Стр.НаименованиеЗаказчика);
	
	Если ИскЗначение = Неопределено Тогда
		// ищем по наименованию 
		ИскЗначение = НайтиПоРеквизиту("Наименование", Наименование, "Справочник.Корреспонденты");
		//НайденнаяСтрока = ТзКорреспондент.Найти(Наим, "Наименование"); 
	КонецЕсли; 
	
	Если ИскЗначение = Неопределено Тогда
		// ищем по Полному наименованию (254 символа)
		ИскЗначение = НайтиПоРеквизиту("ПолноеНаименование", Наименование, "Справочник.Корреспонденты");
		//НайденнаяСтрока = ТзКорреспондент.Найти(Наим, "ПолноеНаименование"); 
	КонецЕсли; 
	
	Если ИскЗначение = Неопределено Тогда
		// создаем
		
		НовыйКорреспондент = Справочники.Корреспонденты.СоздатьЭлемент();
		НовыйКорреспондент.УстановитьНовыйКод();
		НовыйКорреспондент.ИНН = УНП;
		//НовыйКорреспондент.КодПоОКПО = Стр.ОКПО;
		НовыйКорреспондент.Наименование = Наименование;
		НовыйКорреспондент.ПолноеНаименование = Наименование;
		Если Стр.ФизЮрЛицо = 1 Тогда
			НовыйКорреспондент.ЮрФизЛицо = ЮридическоеЛицо;
		Иначе
			НовыйКорреспондент.ЮрФизЛицо = ФизическоеЛицо;
			ФизЛицо = ПолучитьФизЛицо(Наименование, Стр);
			НовыйКорреспондент.ФизЛицо = ФизЛицо;
		КонецЕсли;	
		НовыйКорреспондент.Комментарий = Стр.КодКлиента; // для возможной синхронизации
		НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
		//Сообщить("Добавлен Корреспондент "+Наим);
		
		Если ЗначениеЗаполнено(Стр.Адрес) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
			СтруктураОтбора = Новый Структура("Вид, Тип", ВидКИ, ТипКИ);
			
			ТабЧастьКИ = НовыйКорреспондент.КонтактнаяИнформация;
			СтрокаАдреса = ТабЧастьКИ.НайтиСтроки(СтруктураОтбора);
			Если СтрокаАдреса.Количество() = 0 Тогда
				НовСтрока = ТабЧастьКИ.Добавить();
				НовСтрока.Вид = ВидКИ;
				НовСтрока.Тип = ТипКИ;
				НовСтрока.Представление = СокрЛП(Стр.Адрес);
				НовСтрока.ЗначенияПолей = "Представление = "+СокрЛП(Стр.Адрес);
				НовСтрока.Страна = РБ;
			КонецЕсли; 
			
		КонецЕсли; 
		Если ЗначениеЗаполнено(Стр.Телефон) Тогда
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента;
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
			
			СтруктураОтбора = Новый Структура("Вид, Тип", ВидКИ, ТипКИ);
			
			ТабЧастьКИ = НовыйКорреспондент.КонтактнаяИнформация;
			СтрокаАдреса = ТабЧастьКИ.НайтиСтроки(СтруктураОтбора);
			Если СтрокаАдреса.Количество() = 0 Тогда
				НовСтрока = ТабЧастьКИ.Добавить();
				НовСтрока.Вид = ВидКИ;
				НовСтрока.Тип = ТипКИ;
				НовСтрока.Представление = СокрЛП(Стр.Телефон);
				НовСтрока.НомерТелефона = СокрЛП(Стр.Телефон);
				//НовСтрока.ЗначенияПолей = "Представление = "+СокрЛП(Стр.Телефон);
			КонецЕсли; 
			
		КонецЕсли; 
		
		НовыйКорреспондент.Записать();
		
		Корреспондент = НовыйКорреспондент.Ссылка; //Справочники.Корреспонденты.ДоВыяснения;
		
		// расчетный счет
		Если ЗначениеЗаполнено(Стр.РасчетныйСчет) и ЗначениеЗаполнено(Стр.КодБанка) Тогда
			Банк = ПолучитьБанк(Стр);	
			БанковскийСчет = ПолучитьБанковскийСчет(Корреспондент, Банк, Стр);
			Если Корреспондент.ОсновнойБанковскийСчет <> БанковскийСчет Тогда
				НовыйКорреспондент = Корреспондент.ПолучитьОбъект();
				НовыйКорреспондент.ОсновнойБанковскийСчет = БанковскийСчет;
				НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
				НовыйКорреспондент.Записать();
			КонецЕсли; 
		КонецЕсли; 
		
		//// Контактное лицо
		//Если ЗначениеЗаполнено(Стр.ФИО) Тогда
		//	ПолучитьКонтактноеЛицо(Корреспондент, Стр, ТзКонтактныеЛица);
		//КонецЕсли; 
		
		//// добавление в ТЗ
		//НоваяСтрока = ТзКорреспондент.Добавить();
		//НоваяСтрока.ИНН = УНП;
		//НоваяСтрока.Наименование = Наим;
		//НоваяСтрока.ПолноеНаименование = Наим;
		//НоваяСтрока.КорреспондентСсылка = Корреспондент;
		
	Иначе
		Корреспондент = ИскЗначение;	
	КонецЕсли; 
	
	//// доп проверка банковского счета
	//Если ЗначениеЗаполнено(Стр.РасчетныйСчет) и ЗначениеЗаполнено(Стр.КодБанка) и Не ЗначениеЗаполнено(Корреспондент.ОсновнойБанковскийСчет) Тогда
	//	Банк = ПолучитьБанк(Стр, ТзБанки);	
	//	БанковскийСчет = ПолучитьБанковскийСчет(Корреспондент, Банк, Стр, ТзБанковскиеСчета);
	//	НовыйКорреспондент = Корреспондент.ПолучитьОбъект();
	//	НовыйКорреспондент.ОсновнойБанковскийСчет = БанковскийСчет;
	//	НовыйКорреспондент.ОбменДанными.Загрузка = Истина;
	//	НовыйКорреспондент.Записать();
	//КонецЕсли; 
	//
	//// Контактное лицо
	//Если ЗначениеЗаполнено(Стр.ФИО) Тогда
	//	ПолучитьКонтактноеЛицо(Корреспондент, Стр, ТзКонтактныеЛица);
	//КонецЕсли; 
	
	Возврат Корреспондент;
КонецФункции

&НаСервере
Функция НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, ТипДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка
		|ИЗ
		|	"+ТипДанных+" КАК Таблица
		|ГДЕ";
		Если ИмяРеквизита = "ПолноеНаименование" Тогда
			Запрос.Текст = Запрос.Текст +"
			|	Выразить(Таблица."+ИмяРеквизита+" КАК Строка(300)) = &"+ИмяРеквизита+"
			|	И НЕ Таблица.ПометкаУдаления";
		Иначе	
			Запрос.Текст = Запрос.Текст +"
			|	Таблица."+ИмяРеквизита+" = &"+ИмяРеквизита+"
			|	И НЕ Таблица.ПометкаУдаления";
		КонецЕсли; 		
	
	Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьОбъекты()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбъектыРабот.Владелец.Ссылка КАК Корреспондент,
		|	мОбъектыРабот.Наименование Как НаименованиеОбъекта,
		|	мОбъектыРабот.ПолноеНаименование Как ПолноеНаименованиеОбъекта,
		|	мОбъектыРабот.Ссылка КАК ОбъектСсылка
		|ИЗ
		|	Справочник.мОбъектыРабот КАК мОбъектыРабот";

	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["Корреспондент"]);
    Результат.Колонки.Индекс(Результат.Колонки["НаименованиеОбъекта"]);
    Результат.Колонки.Индекс(Результат.Колонки["ПолноеНаименованиеОбъекта"]);
	
	Возврат Результат; 

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъектРабот(Корреспондент, ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОбъектыРабот.Ссылка
		|ИЗ
		|	Справочник.мОбъектыРабот КАК мОбъектыРабот
		|ГДЕ
		|	ВЫРАЗИТЬ(мОбъектыРабот.ПолноеНаименование КАК СТРОКА(700)) ПОДОБНО &ПолноеНаименование
		|	И мОбъектыРабот.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Корреспондент);
	Запрос.УстановитьПараметр("ПолноеНаименование", ИмяОбъекта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;

	// Запись Объекта
	ОбъектРабот = Справочники.мОбъектыРабот.СоздатьЭлемент();
	ОбъектРабот.УстановитьНовыйКод();
	ОбъектРабот.Владелец = Корреспондент;
	ОбъектРабот.Наименование = ИмяОбъекта;
	ОбъектРабот.ПолноеНаименование = ИмяОбъекта;
	//ТелефоныОбъекта = СтруктураОбъекта.ТелефоныОбъекта;
	//Если ЗначениеЗаполнено(ТелефоныОбъекта) Тогда
	//	ОбъектРабот.Комментарий = "Тел."+ТелефоныОбъекта+", " + СокрЛП(СтруктураОбъекта.СельсоветОбъекта)+" "+СокрЛП(СтруктураОбъекта.АдресСельсоветаОбъекта);
	//Иначе	
	//	ОбъектРабот.Комментарий = ""+СокрЛП(СтруктураОбъекта.СельсоветОбъекта)+" "+СокрЛП(СтруктураОбъекта.АдресСельсоветаОбъекта);
	//КонецЕсли; 
	ОбъектРабот.ОбменДанными.Загрузка = Истина;
	
	//// Добавление контактной информации
	//ПочтовыйАдресОбъекта = СтруктураОбъекта.ПочтовыйАдресОбъекта;
	//Если ЗначениеЗаполнено(ПочтовыйАдресОбъекта) Тогда
	//	КИОбъекта = ОбъектРабот.КонтактнаяИнформация;
	//	НовЗапись = КИОбъекта.Добавить();
	//	НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//	НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОбъектаРабот;
	//	НовЗапись.Представление = ПочтовыйАдресОбъекта; 
	//КонецЕсли; 
	//
	//АдресЗУОбъекта = СтруктураОбъекта.АдресЗУОбъекта;
	//Если ЗначениеЗаполнено(АдресЗУОбъекта) Тогда
	//	КИОбъекта = ОбъектРабот.КонтактнаяИнформация;
	//	НовЗапись = КИОбъекта.Добавить();
	//	НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//	НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗемельногоУчасткаОбъектаРабот;
	//	НовЗапись.Представление = АдресЗУОбъекта; 
	//КонецЕсли; 
		
	ОбъектРабот.Записать();
		
	//// добавление в ТзОбъекты для исключения дублей объектов
	//НоваяСтрока = ТзОбъекты.Добавить();
	//НоваяСтрока.Корреспондент = Корреспондент;
	//НоваяСтрока.ОбъектСсылка = ОбъектРабот.Ссылка;
	//НоваяСтрока.НаименованиеОбъекта = ИмяОбъекта; 
	//НоваяСтрока.ПолноеНаименованиеОбъекта = ИмяОбъекта; 

	Возврат ОбъектРабот.Ссылка;		

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговора()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка КАК ДоговорСсылка,
		|	ВнутренниеДокументы.ДатаРегистрации КАК Дата,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК Номер,
		|	ВнутренниеДокументы.Корреспондент
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.ВидДокумента В ИЕРАРХИИ(&ВидДокумента)
		|	И (НЕ ВнутренниеДокументы.ВидДокумента В (&СписокДок))";

	СписокИсключаемыхВидовДокументов = Новый СписокЗначений;
	СписокИсключаемыхВидовДокументов.Добавить(Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
	СписокИсключаемыхВидовДокументов.Добавить(Справочники.ВидыВнутреннихДокументов.ДополнительноеСоглашениеДоговораЗемлеустроительныхРабот);
	Запрос.УстановитьПараметр("СписокДок", СписокИсключаемыхВидовДокументов);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.ДоговораЗемлеустроительныхРабот);
		
	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["Номер"]);
	Результат.Колонки.Индекс(Результат.Колонки["Дата"]);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКатегории(Дог, Стр)
	// Запись категорий
	СпКатегорий = Новый СписокЗначений;
	Если Стр.Аукцион = 1 Тогда
		СпКатегорий.Добавить(КатегорияАукцион);
	КонецЕсли; 
	Если Стр.АЭС = 1 Тогда
		СпКатегорий.Добавить(КатегорияАЭС);
	КонецЕсли; 
	Если Стр.Сервис = 1 Тогда
		СпКатегорий.Добавить(КатегорияСервис);
	КонецЕсли; 
	Если Стр.Инвестиции = 1 Тогда
		СпКатегорий.Добавить(КатегорияИнвестиции);
	КонецЕсли; 
	
	Если СпКатегорий.Количество() > 0 Тогда
		Если ТипЗнч(Дог) = Тип("СправочникСсылка.ВнутренниеДокументы") Тогда
			ДогСсылка = Дог;
		ИначеЕсли ТипЗнч(Дог) = Тип("СправочникОбъект.ВнутренниеДокументы") Тогда	
			ДогСсылка = Дог.Ссылка;
		ИначеЕсли ТипЗнч(Дог) = Тип("СправочникСсылка.ВходящиеДокументы") Тогда	
			ДогСсылка = Дог;
		ИначеЕсли ТипЗнч(Дог) = Тип("СправочникОбъект.ВходящиеДокументы") Тогда	
			ДогСсылка = Дог.Ссылка;
		КонецЕсли; 
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СпКатегорий, ДогСсылка);
	КонецЕсли; 
КонецПроцедуры // ЗаписатьКатегории(Ссылка, Стр)
 
&НаСервере
Функция ПолучитьДоговор(Номер, Стр, Корреспондент)
	
	Дата = Стр.ДатаДоговора;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнутренниеДокументы.Ссылка
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|ГДЕ
		|	ВнутренниеДокументы.Папка = &ПапкаДоговоры
		|	И ВнутренниеДокументы.ДатаРегистрации = &ДатаРегистрации
		|	И ВнутренниеДокументы.РегистрационныйНомер = &РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("ПапкаДоговоры", ПапкаДоговоры);
	Запрос.УстановитьПараметр("ДатаРегистрации", Дата);
	Запрос.УстановитьПараметр("РегистрационныйНомер", Номер);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Если флЗаписьКатегорий Тогда
			ЗаписатьКатегории(Результат[0].Ссылка, Стр); 
		КонецЕсли; 
		Возврат Результат[0].Ссылка;
	КонецЕсли;

//	
//	// Если договор был обработан - пропускаем
//	Отбор = Новый Структура("Номер, Дата", Номер, Дата(Дата));
//	
//	// Если договор существует - возвращаем
//	Строки = ТзДоговора.НайтиСтроки(Отбор);
//	Если Строки.Количество() > 0 Тогда
//		Возврат Строки[0].ДоговорСсылка;		
//	КонецЕсли; 
	
	// Запись договора
	Дог = Справочники.ВнутренниеДокументы.СоздатьЭлемент();
	Дог.Бессрочный = Истина;
	Дог.Валюта = РублиРБ;
	Если Корреспондент.ЮрФизЛицо = ЮридическоеЛицо Тогда
		Дог.ВидДокумента = ВидДокументаДоговорЮрЛиц;
		Дог.Папка = ПапкаДоговоры;
	Иначе
		Дог.ВидДокумента = ВидДокументаДоговорФизЛиц;
		Дог.Папка = ПапкаДоговоры;
	КонецЕсли; 
	Дог.ДатаНачалаДействия = Дата;
	Дог.ДатаРегистрации = Дата;
	Дог.Заголовок = "" + СтрЗаменить(Номер, Символы.НПП, "")+" "+Лев(Дата,10)+" "+СокрЛП(Корреспондент.Наименование);
	Дог.Наименование = "" + СтрЗаменить(Номер, Символы.НПП, "")+" "+Лев(Дата,10)+" "+СокрЛП(Корреспондент.Наименование);
	Дог.Корреспондент = Корреспондент;
	Дог.Корреспонденты.Очистить();
	НовКорр = Дог.Корреспонденты.Добавить();
	НовКорр.Корреспондент = Корреспондент;
	
	Дог.РегистрационныйНомер = Номер;
	Попытка
		Дог.ЧисловойНомер = Число(Номер);
	Исключение
		Сообщить("Числовой номер договора = " + Номер);
		Дог.ЧисловойНомер = 0;
	КонецПопытки; 
	//Дог.СрокИсполнения = ?(ЗначениеЗаполнено(ДанныеЭлемента.dat_vypoln),ДанныеЭлемента.dat_vypoln,"");
	//Дог.Комментарий = "Заявка: "+СокрЛП(ДанныеЭлемента.DOG_NOM_ZA)+" от "+Лев(ДанныеЭлемента.DATA_POST_,10);
	//Дог.Проведен = Истина;
	Дог.ГрифДоступа = ГрифДоступа;
	Дог.ВопросДеятельности = ВопросДеятельности;
	Дог.ОбменДанными.Загрузка = Истина;
	Дог.Записать();
	
	Если флЗаписьКатегорий Тогда
		ЗаписатьКатегории(Дог.Ссылка, Стр); 
	КонецЕсли; 

	//// Запись категорий
	//СпКатегорий = Новый СписокЗначений;
	//Если Стр.Аукцион = 1 Тогда
	//	СпКатегорий.Добавить(КатегорияАукцион);
	//КонецЕсли; 
	//Если Стр.АЭС = 1 Тогда
	//	СпКатегорий.Добавить(КатегорияАЭС);
	//КонецЕсли; 
	//Если Стр.Сервис = 1 Тогда
	//	СпКатегорий.Добавить(КатегорияСервис);
	//КонецЕсли; 
	//Если Стр.Инвестиции = 1 Тогда
	//	СпКатегорий.Добавить(КатегорияИнвестиции);
	//КонецЕсли; 
	//
	//Если СпКатегорий.Количество() > 0 Тогда
	//	РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СпКатегорий, Дог);
	//КонецЕсли; 
	
	//// Добавление в ТзДоговора
	//СтрОбработанных = ТзДоговора.Добавить();
	//СтрОбработанных.Номер = Номер;
	//СтрОбработанных.Дата = Дата;
	//СтрОбработанных.ДоговорСсылка = Дог.Ссылка;
	//СтрОбработанных.Корреспондент = Корреспондент;
	
	// Запись состояния
	Состояние = Перечисления.СостоянияДокументов.Зарегистрирован;
	СостоянияДоговоров = РегистрыСведений.ТекущиеСостоянияДокументов;
	НаборЗаписей = СостоянияДоговоров.СоздатьНаборЗаписей();
		
	НаборЗаписей.Отбор.Документ.Установить(Дог.Ссылка);
	НаборЗаписей.Отбор.Состояние.Установить(Состояние);
		
	НовЗапись = НаборЗаписей.Добавить();
	//НовЗапись.Период = Дата;
	НовЗапись.Документ = Дог.Ссылка;
	НовЗапись.Состояние = Состояние;
	НовЗапись.ДатаУстановки = Дата;
	НаборЗаписей.Записать(Истина);
	
	// Запись общих реквизитов
	Запись = РегистрыСведений.ОбщиеРеквизитыДокументов.СоздатьМенеджерЗаписи();
	Запись.Документ = Дог.Ссылка;
	Запись.ДатаРегистрации = Дог.ДатаРегистрации;
	Запись.Заголовок = Дог.Заголовок;
	Запись.КорреспондентыДляСписков = Дог.Корреспондент;
	Запись.Записать(Истина);
	
	Возврат Дог.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьЭтапы()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыДоговоров.Ссылка КАК ЭтапСсылка,
		|	ЭтапыДоговоров.Владелец.Ссылка КАК ДоговорСсылка,
		|	ЭтапыДоговоров.НомерЭтапа
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
		|ГДЕ
		|	НЕ ЭтапыДоговоров.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
    Результат.Колонки.Индекс(Результат.Колонки["ДоговорСсылка"]);
	Результат.Колонки.Индекс(Результат.Колонки["НомерЭтапа"]);
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьИсполнителяРабот(ТабНомерДляПоиска)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ТабельныйНомер = &ТабельныйНомер";
	
	Запрос.УстановитьПараметр("ТабельныйНомер", ТабНомерДляПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Сообщить("Нет пользователя с ТабНом "+ ТабНомерДляПоиска);
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции // ПолучитьИсполнителяРабот(ТабНомерДляПоиска)

&НаСервере
Процедура ЗаписатьИсполнителя(Этап, Стр);
	ТабНомерДляПоиска = СтрЗаменить(Стр.ТабНомер, Символы.НПП, "");
	Если ТабНомерДляПоиска = "-1" Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(Этап) = Тип("СправочникСсылка.мЭтапыДоговоров") Тогда
		ЭтапОбъект = Этап.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Этап) = Тип("СправочникОбъект.мЭтапыДоговоров") Тогда	
		ЭтапОбъект = Этап;
	КонецЕсли; 
	
	// добавим исполнителя работ
	Если ЗначениеЗаполнено(ТабНомерДляПоиска) Тогда
		Исполнитель = ПолучитьИсполнителяРабот(ТабНомерДляПоиска);
		Если ЗначениеЗаполнено(Исполнитель) Тогда
		
			Если ТипЗнч(Этап) = Тип("СправочникСсылка.мЭтапыДоговоров") Тогда
				ЭтапОбъект = Этап.ПолучитьОбъект();
			ИначеЕсли ТипЗнч(Этап) = Тип("СправочникОбъект.мЭтапыДоговоров") Тогда	
				ЭтапОбъект = Этап;
			КонецЕсли; 
		    НовИсп = ЭтапОбъект.Исполнители.Добавить();
			НовИсп.Исполнитель = Исполнитель;
			НовИсп.Коэффициент = 1;
			НовИсп.КТУ = 1;
			НовИсп.Норматив = 0;
			НовИсп.Сумма = 0;
			Если ТипЗнч(Этап) = Тип("СправочникСсылка.мЭтапыДоговоров") Тогда
				ЭтапОбъект.ОбменДанными.Загрузка = Истина;
				ЭтапОбъект.Записать();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // 				ЗаписатьИсполнителей(й.Ссылка, Стр);
 
&НаСервере
Функция ПолучитьЭтап(Договор, НомерЭтапа, ОбъектРабот, Подразделение, ВидРабот, СтрТз, КомментарийЭтапа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мЭтапыДоговоров.Ссылка
		|ИЗ
		|	Справочник.мЭтапыДоговоров КАК мЭтапыДоговоров
		|ГДЕ
		|	мЭтапыДоговоров.Владелец = &Владелец
		|	И мЭтапыДоговоров.НомерЭтапа = &НомерЭтапа
		|	И НЕ мЭтапыДоговоров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Договор);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерЭтапа);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого й Из Результат Цикл
		Если ЗначениеЗаполнено(й.Ссылка) Тогда
			Если флЗаписьИсполнителей Тогда
				ЗаписатьИсполнителя(й.Ссылка, СтрТз);
			КонецЕсли; 
			Возврат й.Ссылка;
		КонецЕсли; 	
	КонецЦикла; 
	//Если Результат.Количество() > 0 Тогда
	//	
	//	Возврат Результат[0].Ссылка;
	//КонецЕсли;
	
	
	//Отбор = Новый Структура("ДоговорСсылка, НомерЭтапа", Договор, Число(НомерЭтапа));
	//СтрокиДог = ТзЭтапы.НайтиСтроки(Отбор);
	//Если СтрокиДог.Количество() > 0 Тогда
	//	Возврат СтрокиДог[0].ЭтапСсылка;		
	//КонецЕсли; 
	
	СтоимостьСНДС 	= ПреобразоватьСтрокуКЧислу(СтрТЗ.Стоимость);
	СтрокаНДС 		= СтрТЗ.СтавкаНДС;
	СуммаНДС		= ПреобразоватьСтрокуКЧислу(СтрТЗ.СуммаНДС);
	//НомерДог 		= СтрТЗ.dog1;
	//ДатаДог 		= СтрТЗ.dat_dog;
	//ДатаПредоплаты 	= СтрТЗ.dat_pay1;
	//ДатаВыполнения 	= СтрТЗ.dat_vypoln;
	
	// Запись ЭтапаДоговора
	НачатьТранзакцию();
	Этап = Справочники.мЭтапыДоговоров.СоздатьЭлемент();
	Этап.Владелец = Договор;
	Этап.Договор = Договор;
	Если ЗначениеЗаполнено(ВидРабот) Тогда
		Этап.ВидРабот 	= ВидРабот;
		Этап.Наименование = "" + НомерЭтапа+" "+ВидРабот.Наименование;
	Иначе
		Этап.Наименование = "" + НомерЭтапа + " "+СокрЛП(СтрТЗ.НаименованиеРабот);
	КонецЕсли; 
	Этап.НомерЭтапа = НомерЭтапа;
	
	Если ЗначениеЗаполнено(ОбъектРабот) Тогда
		// для физ лиц не нужен
		Этап.ОбъектРабот = ОбъектРабот;
	КонецЕсли; 
	
	Этап.Подразделение = Подразделение;
	Этап.СтоимостьСНДС = СтоимостьСНДС;
	Этап.СуммаНДС = СуммаНДС;
	Этап.Стоимость = СтоимостьСНДС - СуммаНДС;
	Этап.Комментарий = КомментарийЭтапа;
	Этап.КоличествоДел = 1;
	Этап.ДоляОбъекта = 1;
	
	Если СтрТЗ.ФизЮрЛицо = 0 Тогда
		Этап.ДоговорФизЛица = Истина;
	КонецЕсли; 
	
	Если Лев(СтрокаНДС,2) = "20" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_20;;
	ИначеЕсли Лев(СтрокаНДС,2) = "18" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.НДС_18;
	ИначеЕсли Лев(СтрокаНДС,1) = "0" Тогда
		Этап.СтавкаНДС = Справочники.мСтавкиНДС.БезНДС;
		Этап.ОсвобождениеОтНДС = Справочники.мОсвобождениеОтНДС.НайтиПоКоду("2.1");
	Иначе
		Сообщить("Неопределенное значение в графе ETAP_NDS:"+СтрокаНДС+" Ставка НДС не определена!");	
    КонецЕсли;
	
	ЗаписатьИсполнителя(Этап, СтрТЗ);
	//// добавим исполнителя работ
	//Если ЗначениеЗаполнено(СтрТЗ.ISP_TAB_NOM) Тогда
	//    НовИсп = Этап.Исполнители.Добавить();
	//    ТабельныйНомер = СтрЗаменить(СокрЛП(СтрТЗ.ISP_TAB_NOM), Символы.НПП, "");
	//    НовИсп.Исполнитель = ПолучитьИсполнителя(ТабельныйНомер, ТзПользователи);
	//    НовИсп.Коэффициент = 1;
	//	НовИсп.КТУ = 1;
	//    НовИсп.Норматив = 0;
	//    НовИсп.Сумма = 0;
	//КонецЕсли; 
	
	ПлановыйСрок = ПреобразоватьСтрокуКДате(СтрТЗ.ПлановыйСрок);
	Если ЗначениеЗаполнено(ПлановыйСрок) и Год(ПлановыйСрок) < 2020 Тогда
		Этап.ЗапретИзмененияПлановогоСрока = Истина;
    КонецЕсли;
	
	Этап.Записать();
	
	// Изменяем стоимость договора
	Дог = Договор.ПолучитьОбъект();
	Дог.Сумма = Дог.Сумма + СтоимостьСНДС;
	Дог.ОбменДанными.Загрузка = Истина;
	Дог.Записать();
	
	ЗафиксироватьТранзакцию();
		
	// Запись планового срока
	Если ЗначениеЗаполнено(ПлановыйСрок) и Год(ПлановыйСрок) < 2020 Тогда
		ВидДаты = Справочники.мВидыДатДоговоров.ПлановыйСрок;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭтапДоговора", Этап.Ссылка);
		СтруктураОтбора.Вставить("ВидДатыДоговора", ВидДаты);
		
		ТаблицаДляЗаписи = мРаботаСДоговорами.СоздатьТаблицуДляЗаписиДатыДоговоров(Этап.Ссылка,
		ВидДаты,	Договор.ДатаРегистрации,	Этап.Ссылка);
		
		ТаблицаДляЗаписи[0].ВидДатыДоговора = ВидДаты;
		ТаблицаДляЗаписи[0].Дата = ПлановыйСрок;
		
		мРаботаСДоговорами.ЗаписатьДатуДоговора(ТаблицаДляЗаписи, СтруктураОтбора); 
	КонецЕсли; 

    Возврат Этап.Ссылка;		
КонецФункции

&НаСервере
Функция ПолучитьАкты()
	// Заодно возвращает и ссылку на договор, к которому относится
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьАктированияАкты.Договор,
		|	ВедомостьАктированияАкты.ЭтапДоговора,
		|	ВедомостьАктированияАкты.ДатаАкта КАК ДатаАкта,
		|	ВедомостьАктированияАкты.Сумма КАК СуммаАкта
		|ИЗ
		|	Документ.ВедомостьАктирования.Акты КАК ВедомостьАктированияАкты
		|ГДЕ
		|	Не ВедомостьАктированияАкты.Ссылка.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьАкт(Договор, ЭтапДоговора, Корреспондент, СтрТз)
    СуммаАкта 	= Число(СтрТЗ.СуммаАкта);
	
	// Проверка наличия даты акта в загружаемом файле
	Если (СтрДлина(СокрЛП(СтрТЗ.ДатаАкта)) < 10)или(СуммаАкта = 0) Тогда
		Возврат "";		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьАктированияАкты.Ссылка
		|ИЗ
		|	Документ.ВедомостьАктирования.Акты КАК ВедомостьАктированияАкты
		|ГДЕ
		|	ВедомостьАктированияАкты.Корреспондент = &Корреспондент
		|	И ВедомостьАктированияАкты.Договор = &Договор
		|	И ВедомостьАктированияАкты.ЭтапДоговора = &ЭтапДоговора
		|	И ВедомостьАктированияАкты.Сумма = &Сумма
		|	И ВедомостьАктированияАкты.ДатаАкта = &ДатаАкта";
	
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	Запрос.УстановитьПараметр("Сумма", СтрТЗ.СуммаАкта);
	Запрос.УстановитьПараметр("ДатаАкта", СтрТЗ.ДатаАкта);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		//Акт есть 
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
	//ДатаАкта 	= ПреобразоватьСтрокуКДате(СтрТЗ.ДатаАкта);
	//
	//ОтборАктов = Новый Структура("Договор, ЭтапДоговора, ДатаАкта, СуммаАкта", Договор, ЭтапДоговора, ДатаАкта, СуммаАкта);
	//СтрокиАктов = ТзАкты.НайтиСтроки(ОтборАктов);
	//Если СтрокиАктов.Количество() > 0 Тогда
	//	Возврат СтрокиАктов[0];		
	//КонецЕсли; 
	
	ВедомостьАктирования = ПолучитьВедомостьАктирования(КонецМесяца(СтрТЗ.ДатаАкта));
	
	//// если такой акт уже в ведомости есть - возврат
	//ОтборАктов = Новый Структура("Договор, ЭтапДоговора, ДатаАкта, Сумма", Договор, ЭтапДоговора, ДатаАкта, СуммаАкта);
	//СтрокиАктов = ВедомостьАктирования.Акты.НайтиСтроки(ОтборАктов);
	//Если СтрокиАктов.Количество() > 0 Тогда
	//	
	//	// не сработал фильтр по ТзАкты ранее
	//	СтрокаТЗ = ТзАкты.Добавить();
	//	СтрокаТЗ.Договор = Договор;
	//	СтрокаТЗ.ЭтапДоговора = ЭтапДоговора;
	//	СтрокаТЗ.ДатаАкта = ДатаАкта;
	//	СтрокаТЗ.СуммаАкта = СуммаАкта;

	//	Возврат СтрокиАктов[0];		
	//КонецЕсли; 

	// Добавить новый акт в ведомость актирования
    ОбъектВедомость = ВедомостьАктирования.ПолучитьОбъект();
	НовАкт = ОбъектВедомость.Акты.Добавить();
	НовАкт.Корреспондент = Корреспондент;
	НовАкт.Договор = Договор;
	НовАкт.ЭтапДоговора = ЭтапДоговора;
	НовАкт.Подразделение = ЭтапДоговора.Подразделение;
	НовАкт.ДатаАкта = СтрТЗ.ДатаАкта;
	НовАкт.Сумма = СуммаАкта;
	Ставка = ЭтапДоговора.СтавкаНДС.Ставка;
	НовАкт.НДС = СуммаАкта * Ставка / (100 + Ставка);
	НовАкт.НомерАкта = СокрЛП(Договор.РегистрационныйНомер)+"/"+СокрЛП(ЭтапДоговора.НомерЭтапа);
	
	ОбъектВедомость.Записать();
	
	//СтрокаТЗ = ТзАкты.Добавить();
	//СтрокаТЗ.Договор = Договор;
	//СтрокаТЗ.ЭтапДоговора = ЭтапДоговора;
	//СтрокаТЗ.ДатаАкта = ДатаАкта;
	//СтрокаТЗ.СуммаАкта = СуммаАкта;

	//Возврат НовАкт;
КонецФункции

&НаСервере
Функция ПолучитьВедомостиАктирования()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ведомость.Дата,
		|	Ведомость.Ссылка КАК ВедомостьАктирования
		|ИЗ
		|	Документ.ВедомостьАктирования КАК Ведомость
		|ГДЕ
		|	НЕ Ведомость.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

// Возвращает/создает объект документ Ведомость актирования
&НаСервереБезКонтекста
Функция ПолучитьВедомостьАктирования(ДатаДок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьАктирования.Ссылка
		|ИЗ
		|	Документ.ВедомостьАктирования КАК ВедомостьАктирования
		|ГДЕ
		|	ВедомостьАктирования.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//СтрокаВедомости = ТзВедомостиАктирования.Найти(ДатаДок, "Дата");
	//Если СтрокаВедомости = Неопределено Тогда
		ИскДокумент = Документы.ВедомостьАктирования.СоздатьДокумент();
		ИскДокумент.Дата = ДатаДок;
		ИскДокумент.Записать();
		ИскДокумент = ИскДокумент.Ссылка;
        
	//    НовСтрока = ТзВедомостиАктирования.Добавить();
	//    НовСтрока.Дата = ДатаДок;
	//    НовСтрока.ВедомостьАктирования = ИскДокумент;
	//    
	//Иначе
	//	ИскДокумент = СтрокаВедомости.ВедомостьАктирования;
	//КонецЕсли; 

	Возврат ИскДокумент;
	
КонецФункции // ПолучитьВедомостьАктирования(ДатаДок)

&НаСервереБезКонтекста
Функция ПолучитьПользователей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   Пользователи.Ссылка КАК Исполнитель,
        |   Пользователи.ТабельныйНомер
        |ИЗ
        |   Справочник.Пользователи КАК Пользователи";

	Результат = Запрос.Выполнить().Выгрузить();
    Результат.Колонки.Индекс(Результат.Колонки["ТабельныйНомер"]);
	
	Возврат Результат;
	
КонецФункции

// <Описание функции>
//
// Параметры
//  ТабельныйНомер  - <Тип.Строка> 
//
// Возвращаемое значение:
//   <Тип.СсылкаПользователи> 
//
&НаСервереБезКонтекста
Функция ПолучитьИсполнителя(ТабельныйНомер, ТзПользователи)
    
	СтрокаИсп = ТзПользователи.Найти(ТабельныйНомер, "ТабельныйНомер");
	Если СтрокаИсп = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();		
	КонецЕсли; 
	
	Возврат СтрокаИсп.Исполнитель;

КонецФункции // ПолучитьПользователя()

&НаСервере
Функция ПолучитьВозврат(Корреспондент, Договор, ЭтапДоговора, Дата, Сумма, ЭтоВозврат)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратОплаты.Ссылка
		|ИЗ
		|	Документ.ВозвратОплаты КАК ВозвратОплаты
		|ГДЕ
		|	ВозвратОплаты.Дата = &Дата
		|	И ВозвратОплаты.ЭтапДоговора = &ЭтапДоговора
		|	И ВозвратОплаты.Корреспондент = &Корреспондент
		|	И ВозвратОплаты.Договор = &Договор
		|	И ВозвратОплаты.Сумма = &Сумма";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
	Док = Документы.ВозвратОплаты.СоздатьДокумент();
	Док.Дата = Дата;
	Док.Корреспондент = Корреспондент;
	Док.Договор = Договор;
	Док.ЭтапДоговора = ЭтапДоговора;
	Док.Сумма = Сумма;
	Если Не ЭтоВозврат Тогда
		Док.НомерПлатежногоДокумента = "На прибыль";
	КонецЕсли; 
	
	//Док.ОбменДанными.Загрузка = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Док.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьВозвраты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратОплаты.Ссылка,
		|	ВозвратОплаты.Дата,
		|	ВозвратОплаты.Корреспондент,
		|	ВозвратОплаты.Договор,
		|	ВозвратОплаты.ЭтапДоговора,
		|	ВозвратОплаты.Сумма
		|ИЗ
		|	Документ.ВозвратОплаты КАК ВозвратОплаты
		|ГДЕ
		|	НЕ ВозвратОплаты.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьОплату(Корреспондент, Договор, ЭтапДоговора, Дата, Сумма, ЭтоОплата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаРабот.Ссылка
		|ИЗ
		|	Документ.ОплатаРабот КАК ОплатаРабот
		|ГДЕ
		|	ОплатаРабот.Дата = &Дата
		|	И ОплатаРабот.ЭтапДоговора = &ЭтапДоговора
		|	И ОплатаРабот.Корреспондент = &Корреспондент
		|	И ОплатаРабот.Договор = &Договор
		|	И ОплатаРабот.Сумма = &Сумма";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
	Док = Документы.ОплатаРабот.СоздатьДокумент();
	Док.Дата = Дата;
	Док.Корреспондент = Корреспондент;
	Док.Договор = Договор;
	Док.ЭтапДоговора = ЭтапДоговора;
	Док.Сумма = Сумма;
	Если Не ЭтоОплата Тогда
		Док.НомерПлатежногоДокумента = "На убытки";
	КонецЕсли; 
	Док.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	
	//Док.ОбменДанными.Загрузка = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	////Добавление в ТзОплаты	
	//НовСтрока = ТзОплаты.Добавить();
	//НовСтрока.Ссылка = Док.Ссылка;
	//НовСтрока.Корреспондент = Корреспондент;
	//НовСтрока.Договор = Договор;
	//НовСтрока.ЭтапДоговора = Этап;
	//НовСтрока.Дата = Дата;
	//НовСтрока.Сумма = Сумма;

	Возврат Док.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьОплаты()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОплатаРабот.Ссылка,
		|	ОплатаРабот.Корреспондент,
		|	ОплатаРабот.Договор,
		|	ОплатаРабот.ЭтапДоговора,
		|	ОплатаРабот.Дата,
		|	ОплатаРабот.Сумма
		|ИЗ
		|	Документ.ОплатаРабот КАК ОплатаРабот
		|ГДЕ
		|	НЕ ОплатаРабот.ПометкаУдаления";

	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат; 

КонецФункции

&НаСервере
Функция ПолучитьПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Код КАК Код,
		|	СтруктураПредприятия.Комментарий КАК КодБД
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия";

	Результат = Запрос.Выполнить().Выгрузить();
	
	ТабличныйДокумент    = Обработки.М_ШлюзГродно.ПолучитьМакет("КодыПодразделений");
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		КодОтдела = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C1").Текст);
		КодОтряда = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C2").Текст);
		КодПодр = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C3").Текст);
		НаимПодр = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C3").Текст);
		
		ТзПодразделения.Очистить();
		
		СтрокаТз = ТзПодразделения.Добавить();
		СтрокаТз.Код = КодОтдела+" "+КодОтряда;
		СтрокаРез = Результат.Найти(КодПодр, "Код");
		Если СтрокаРез <> Неопределено Тогда
			СтрокаТз.Подразделение = СтрокаРез.Подразделение;
		Иначе
			Подр = Справочники.СтруктураПредприятия.СоздатьЭлемент();
			Подр.Код = КодПодр;
			Подр.Наименование = НаимПодр;
			Подр.ОбменДанными.Загрузка = Истина;
			Подр.Записать();
			СтрокаТз.Подразделение = Подр.Ссылка;
		КонецЕсли; 
	КонецЦикла;	
КонецФункции

&НаСервере
Функция ПолучитьПодразделение(ТабНомер, Исполнитель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.Подразделение
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь.ТабельныйНомер = &ТабельныйНомер";
	
	Запрос.УстановитьПараметр("ТабельныйНомер", ТабНомер);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Подразделение;
	КонецЕсли;
	
	Сообщить("Нет подр для таб. = "+ТабНомер+" "+Исполнитель);
	
	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();		
	
	
	//ТзПодр = РеквизитФормыВЗначение("ТзПодразделения");
	//СтрокаПодр = ТзПодр.Найти(КодБД, "Код");
	//Если СтрокаПодр = Неопределено Тогда
	//	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();		
	//КонецЕсли; 
	//
	//Возврат СтрокаПодр.Подразделение;
		
КонецФункции

&НаСервере
Функция ПолучитьБанки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.Наименование,
	|	КлассификаторБанковРФ.Код,
	|	КлассификаторБанковРФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()

&НаСервере
Функция ПолучитьБанк(Стр)
	КодБанка = СтрЗаменить(Стр.КодБанка, Символы.НПП, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторБанковРФ.Ссылка
		|ИЗ
		|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
		|ГДЕ
		|	КлассификаторБанковРФ.Код = &Код
		|	И КлассификаторБанковРФ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Код", КодБанка);
	Запрос.УстановитьПараметр("Наименование", Стр.НаименованиеБанка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;

	//Отбор = Новый Структура;
	//Отбор.Вставить("Код", Стр.КодБанка);
	//Отбор.Вставить("Наименование", Стр.НаименованиеБанка);

	//Строки = ТзБанки.НайтиСтроки(Отбор);
	//Если Строки.Количество() > 0 Тогда
	//	Возврат Строки[0].Ссылка;
	//КонецЕсли; 
	
	НовБанк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
	НовБанк.Код = КодБанка;
	НовБанк.Наименование = Стр.НаименованиеБанка;
	//НовБанк.Город = Стр.ГородБанка;
	НовБанк.Адрес = Стр.АдресБанка;
	НовБанк.ОбменДанными.Загрузка = Истина;
	НовБанк.Записать();
	
	////Добавление в ТзБанки	
	//НовСтрока = ТзБанки.Добавить();
	//НовСтрока.Код = НовБанк.Код;
	//НовСтрока.Наименование = НовБанк.Наименование;
	//НовСтрока.Ссылка = НовБанк.Ссылка;

	Возврат НовБанк.Ссылка;
КонецФункции // ПолучитьБанк()
  
&НаСервере
Функция ПолучитьБанковскиеСчета()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()
 
&НаСервере
Функция ПолучитьБанковскийСчет(Корреспондент, Банк, Стр)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|	И БанковскиеСчета.Банк = &Банк";
	
	Запрос.УстановитьПараметр("НомерСчета", Стр.РасчетныйСчет);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Владелец", Корреспондент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Ссылка;
	КонецЕсли;

	//Отбор = Новый Структура;
	//Отбор.Вставить("Владелец", Корреспондент);
	//Отбор.Вставить("НомерСчета", Стр.РасчетныйСчет);

	//Строки = ТзБанковскиеСчета.НайтиСтроки(Отбор);
	//Если Строки.Количество() > 0 Тогда
	//	Возврат Строки[0].Ссылка;
	//КонецЕсли; 
	
	НовБанкСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовБанкСчет.УстановитьНовыйКод();
	НовБанкСчет.Владелец = Корреспондент;
	НовБанкСчет.НомерСчета = Стр.РасчетныйСчет;
	НовБанкСчет.Банк = Банк;
	НовБанкСчет.ВидСчета = "Расчетный";
	НовБанкСчет.ВалютаДенежныхСредств = РублиРБ;
	НовБанкСчет.Наименование = Лев(Стр.РасчетныйСчет + " в " + Банк.Наименование,100);
	НовБанкСчет.ОбменДанными.Загрузка = Истина;
	НовБанкСчет.Записать();
	
	////Добавление в ТзБанковскиеСчета	
	//НовСтрока = ТзБанковскиеСчета.Добавить();
	//НовСтрока.Владелец = Корреспондент;
	//НовСтрока.НомерСчета = Стр.РасчетныйСчет;
	//НовСтрока.Ссылка = НовБанкСчет.Ссылка;

	Возврат НовБанкСчет.Ссылка;
КонецФункции // ПолучитьБанк()
 
&НаСервере
Функция ПолучитьКонтактныеЛица()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.Владелец,
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Наименование
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции // ПолучитьБанки()
 
&НаСервере
Функция ПолучитьКонтактноеЛицо(Корреспондент, Стр, ТзКонтактныеЛица)

	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Корреспондент);
	//ФИО = СокрЛП(Стр.ФамилияДир)+?(ЗначениеЗаполнено(Стр.ИмяДир), " " + СокрЛП(Стр.ИмяДир), "") +
	//	?(ЗначениеЗаполнено(Стр.ОтчествоДир), " " + СокрЛП(Стр.ОтчествоДир), "");
	Отбор.Вставить("Наименование", Стр.ФИО);

	Строки = ТзКонтактныеЛица.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0].Ссылка;
	КонецЕсли; 
	
	НовЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
	//НовЛицо.УстановитьНовыйКод();
	НовЛицо.Владелец = Корреспондент;
	НовЛицо.Наименование = Стр.ФИО;
	НовЛицо.Должность = СокрЛП(Стр.Должность);
	НовЛицо.ОбменДанными.Загрузка = Истина;
	
	// Телефон
	Если ЗначениеЗаполнено(Стр.Телефон) Тогда
		СтрокаКИ = НовЛицо.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаКИ.Представление = Стр.Телефон; 
		СтрокаКИ.НомерТелефона = Стр.Телефон; 
	КонецЕсли; 
	НовЛицо.Записать();
	
	//Добавление в ТзКонтактныеЛица	
	НовСтрока = ТзКонтактныеЛица.Добавить();
	НовСтрока.Владелец = Корреспондент;
	НовСтрока.Наименование = Стр.ФИО;
	НовСтрока.Ссылка = НовЛицо.Ссылка;

	Возврат НовЛицо.Ссылка;
КонецФункции // ПолучитьБанк()

&НаСервере
Функция ПолучитьФизЛица()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции // ПолучитьФизЛица()

&НаСервере
Функция ПолучитьФизЛицо(Наим, Стр)
	
	//Отбор = Новый Структура;
	//Отбор.Вставить("Наименование", Наим);

	//Строки = ТзФизЛиц.НайтиСтроки(Отбор);
	//Если Строки.Количество() > 0 Тогда
	//	Возврат Строки[0].Ссылка;
	//КонецЕсли; 
	
	ИскЛицо = НайтиПоРеквизиту("Наименование", Наим, "Справочник.ФизическиеЛица");
	Если ИскЛицо <> Неопределено Тогда
		Возврат ИскЛицо;
	КонецЕсли; 
	
	НовЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
	НовЛицо.Наименование = Наим;
	НовЛицо.ОбменДанными.Загрузка = Истина;
	
	Если ЗначениеЗаполнено(Стр.Адрес) Тогда
		СтрокаКИ = НовЛицо.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица;
		СтрокаКИ.Представление = Стр.Адрес + ?(ЗначениеЗаполнено(Стр.Индекс), Стр.Индекс, ""); 
	КонецЕсли; 
	Если ЗначениеЗаполнено(Стр.Телефон) Тогда
		СтрокаКИ = НовЛицо.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица;
		СтрокаКИ.Представление = Стр.Телефон; 
	КонецЕсли; 
	
	НовЛицо.Записать();
	
	////Добавление в ТзФизЛиц	
	//НовСтрока = ТзФизЛиц.Добавить();
	//НовСтрока.Наименование = Наим;
	//НовСтрока.Ссылка = НовЛицо.Ссылка;

	Возврат НовЛицо.Ссылка;

КонецФункции // ПолучитьФизЛицо()

&НаСервере
Функция ПолучитьВидыРабот()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мВидыРаботФизЛица.Код КАК КодФЛ,
		|	мВидыРаботФизЛица.Ссылка КАК ВРФЛ,
		|	мВидыРаботЮрЛица.Код КАК КодЮЛ,
		|	мВидыРаботЮрЛица.Ссылка КАК ВРЮЛ
		|ИЗ
		|	Справочник.мВидыРаботФизЛица КАК мВидыРаботФизЛица,
		|	Справочник.мВидыРаботЮрЛица КАК мВидыРаботЮрЛица";

	Результат = Запрос.Выполнить().Выгрузить();
	
	//Значения по умолчалнию
	СтрокаРез = Результат.Найти("0000000150", "КодФЛ");
	Если СтрокаРез <> Неопределено Тогда
		ВидРаботФЛ = СтрокаРез.ВРФЛ;
	Иначе
		// надо создать вид работ
		ВидРаботПоДоговорам = Справочники.мВидыРаботПоДоговорам.НайтиПоКоду("0000000150");
		Если не ЗначениеЗаполнено(ВидРаботПоДоговорам) Тогда
			ВР = Справочники.мВидыРаботПоДоговорам.СоздатьЭлемент();
			ВР.Код = "0000000150";
			ВР.Наименование = "Загружено из базы ПЭО";
			ВР.ПолноеНаименование = "Загружено из базы ПЭО";
			ВР.Комментарий = "Загружено из базы ПЭО";
			ВР.Записать();
			
			ВидРаботПоДоговорам = ВР.Ссылка;
		КонецЕсли;
		
		ВидРаботФЛ = Справочники.мВидыРаботФизЛица.НайтиПоКоду("0000000150");
		Если не ЗначениеЗаполнено(ВидРаботФЛ) Тогда
			ВР = Справочники.мВидыРаботФизЛица.СоздатьЭлемент();
			ВР.Код = "0000000150";
			ВР.Наименование = "Загружено из базы ПЭО";
			ВР.ПолноеНаименование = "Загружено из базы ПЭО";
			ВР.Комментарий = "Загружено из базы ПЭО";
			ВР.ВидРаботПоДоговорам = ВидРаботПоДоговорам;
			ВР.Записать();
			
			ВидРаботФЛ = ВР.Ссылка;
		КонецЕсли;
	КонецЕсли; 
	СтрокаРез = Результат.Найти("0000000150", "КодЮЛ");
	Если СтрокаРез <> Неопределено Тогда
		ВидРаботЮЛ = СтрокаРез.ВРЮЛ;
	Иначе
		// надо создать вид работ
		ВидРаботПоДоговорам = Справочники.мВидыРаботПоДоговорам.НайтиПоКоду("0000000150");
		Если не ЗначениеЗаполнено(ВидРаботПоДоговорам) Тогда
			ВР = Справочники.мВидыРаботПоДоговорам.СоздатьЭлемент();
			ВР.Код = "0000000150";
			ВР.Наименование = "Загружено из базы ПЭО";
			ВР.ПолноеНаименование = "Загружено из базы ПЭО";
			ВР.Комментарий = "Загружено из базы ПЭО";
			ВР.Записать();
			
			ВидРаботПоДоговорам = ВР.Ссылка;
		КонецЕсли;
		
		ВидРаботЮЛ = Справочники.мВидыРаботЮрЛица.НайтиПоКоду("0000000150");
		Если не ЗначениеЗаполнено(ВидРаботЮЛ) Тогда
			ВР = Справочники.мВидыРаботЮрЛица.СоздатьЭлемент();
			ВР.Код = "0000000150";
			ВР.Наименование = "Загружено из базы ПЭО";
			ВР.ПолноеНаименование = "Загружено из базы ПЭО";
			ВР.Комментарий = "Загружено из базы ПЭО";
			ВР.ВидРаботПоДоговорам = ВидРаботПоДоговорам;
			ВР.Записать();
			
			ВидРаботЮЛ = ВР.Ссылка;
		КонецЕсли;
	КонецЕсли; 

	ТзВидыРабот.Очистить();
	
	ТабличныйДокумент    = Обработки.М_ШлюзГродно.ПолучитьМакет("СоответствиеВидовРабот");
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		КодБазы = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C1").Текст);
		КодФЛ = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C2").Текст);
		КодЮЛ = СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C3").Текст);
		
		Если Не ЗначениеЗаполнено(КодФЛ) Тогда
			КодФЛ = "0000000150";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КодЮЛ) Тогда
			КодЮЛ = "0000000150";
		КонецЕсли;
		
		СтрокаТз = ТзВидыРабот.Добавить();
		СтрокаТз.КодРаботы = КодБазы;
		
		ВРФЛ = Неопределено;
		Если ЗначениеЗаполнено(КодФЛ) Тогда
			СтрокаРез = Результат.Найти(КодФЛ, "КодФЛ");
			Если СтрокаРез <> Неопределено Тогда
				ВРФЛ = СтрокаРез.ВРФЛ;
			КонецЕсли; 
		КонецЕсли; 
		ВРЮЛ = Неопределено;
		Если ЗначениеЗаполнено(КодЮЛ) Тогда
			СтрокаРез = Результат.Найти(КодЮЛ, "КодЮЛ");
			Если СтрокаРез <> Неопределено Тогда
				ВРЮЛ = СтрокаРез.ВРЮЛ;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаТз.ВидРаботыФЛ = ВРФЛ;
		СтрокаТз.ВидРаботыЮЛ = ВРЮЛ;
		
	КонецЦикла;	
	
КонецФункции

&НаСервере
Функция ПолучитьВидРаботыПоДоговору(КодВидаРабот, ЮрФизЛицо)
	ТзВР = РеквизитФормыВЗначение("ТзВидыРабот");
	СтрокаТЗ = ТзВР.Найти(КодВидаРабот, "КодРаботы");
	
	Если СтрокаТЗ = Неопределено Тогда
		Если ЮрФизЛицо = ФизическоеЛицо Тогда 
			Возврат ВидРаботФЛ;
		Иначе	
			Возврат ВидРаботЮЛ;
		КонецЕсли;
		
		Возврат СтрокаТЗ;
		
	ИначеЕсли ЮрФизЛицо = ФизическоеЛицо Тогда 
		Возврат СтрокаТЗ.ВидРаботыФЛ;
	Иначе	
		Возврат СтрокаТЗ.ВидРаботыЮЛ;
	КонецЕсли; 
КонецФункции // ПолучитьВидРаботыПоДоговору()

&НаСервере
Функция ПолучитьДокУчетДоговоров(ВнутреннийДокумент, Корреспондент, Договор, Подразделение, ТзЭтапы, ТзУчетДоговоров, СтрТЗ)
	//
	//// получить этапы договора
	//СтрокиЭтапов = ТзЭтапы.НайтиСтроки(Новый Структура("ДоговорСсылка", Договор));
	//Если СтрокиЭтапов.Количество() = 0 Тогда
	//	Возврат Документы.УчетДоговоров.ПустаяСсылка();
	//КонецЕсли;
	//
	//Дата = ВнутреннийДокумент.ДатаРегистрации;
	//Отбор = Новый Структура;
	//Отбор.Вставить("Дата", Дата);
	//Отбор.Вставить("ВнутреннийДокумент", ВнутреннийДокумент);
	//Отбор.Вставить("Корреспондент", Корреспондент);
	//Отбор.Вставить("Договор", Договор);
	//Строки = ТзУчетДоговоров.НайтиСтроки(Отбор);
	//Если Строки.Количество() > 0 Тогда
	//	Возврат Строки[0].Ссылка;
	//КонецЕсли; 
	//	
	//// Для движений по договору 
	//Док = Документы.УчетДоговоров.СоздатьДокумент();
	//Док.Дата = Дата;
	//Док.ВнутреннийДокумент = ВнутреннийДокумент;
	//Док.Корреспондент = Корреспондент;
	//Док.Договор = Договор;
	//
	//Если ВнутреннийДокумент.ВидДокумента = Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот Тогда
	//	СтрокаТЧ = Док.Этапы.Добавить();
	//	Этап = ВнутреннийДокумент.Этап;
	//	СтрокаТЧ.ЭтапДоговора = Этап;
	//	СтрокаТЧ.Подразделение = Подразделение;
	//	СтрокаТЧ.Стоимость = Этап.СтоимостьСНДС;
	//Иначе	
	//	Для каждого СтрЭтапа Из СтрокиЭтапов Цикл
	//		
	//		СтрокаТЧ = Док.Этапы.Добавить();
	//		СтрокаТЧ.ЭтапДоговора = СтрЭтапа.ЭтапСсылка;
	//		СтрокаТЧ.Подразделение = СтрЭтапа.Подразделение;
	//		СтрокаТЧ.Стоимость = СтрЭтапа.СтоимостьСНДС;
	//		
	//	КонецЦикла; 
	//КонецЕсли; 
	//
	//Док.Записать(РежимЗаписиДокумента.Проведение);
	//
	////Сообщить("Создан Док учет договоров "+Док);	

	//Возврат Док.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуКДате(СтрокаДаты)
    Если ЗначениеЗаполнено(СтрокаДаты) Тогда
        Если ТипЗнч(СтрокаДаты) = Тип("Дата") Тогда
            ПолученнаяДата = СтрокаДаты;
        Иначе	
            ПолученнаяДата = Дата(СтрЗаменить(СтрокаДаты, ".", "") + "000000");
		КонецЕсли;
	Иначе
	    ПолученнаяДата = Дата(1,1,1);
    КонецЕсли; 
    Возврат ПолученнаяДата;
КонецФункции // ПреобразоватьСтрокуКДате(СтрДоговор.D_OFORM)()

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуКЧислу(СтрокаЧисла)
    ИсхЧисло = 0;
    ТипСтрокаЧисло = ТипЗнч(СтрокаЧисла);
    Если (ТипСтрокаЧисло = Тип("Строка"))или(ТипСтрокаЧисло = Тип("Число")) Тогда
        Если СокрЛП(СтрокаЧисла) <> "" Тогда
             ИсхЧисло = Число(СтрокаЧисла);
        КонецЕсли; 
    КонецЕсли; 
    Возврат ИсхЧисло;
КонецФункции // ПреобразоватьСтрокуКЧислу()


&НаСервере
Функция ПолучитьТаблицуБанков()
	КлассификаторТаблица = Новый ТаблицаЗначений;
	КлассификаторТаблица.Колонки.Добавить("БИК");
	КлассификаторТаблица.Колонки.Добавить("КодБанка");
	КлассификаторТаблица.Колонки.Добавить("Наименование");
	КлассификаторТаблица.Колонки.Добавить("Адрес");
	КлассификаторТаблица.Колонки.Добавить("Телефоны");
	
	Макет = Справочники.Банки.ПолучитьМакет("КлассификаторБанковРБ");
	ОбластьБанки = Макет.ПолучитьОбласть("Банки");
	КоличествоСтрок = ОбластьБанки.ВысотаТаблицы;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		НоваяСтрока = КлассификаторТаблица.Добавить();
		НоваяСтрока.БИК          = СокрЛП(ОбластьБанки.Область(НомерСтроки, 1).Текст);
		НоваяСтрока.КодБанка     = Прав(СокрЛП(ОбластьБанки.Область(НомерСтроки, 1).Текст),3);
		НоваяСтрока.Наименование = СокрЛП(ОбластьБанки.Область(НомерСтроки, 2).Текст);
		НоваяСтрока.Адрес        = СокрЛП(ОбластьБанки.Область(НомерСтроки, 3).Текст);
		НоваяСтрока.Телефоны     = СокрЛП(ОбластьБанки.Область(НомерСтроки, 4).Текст);
	КонецЦикла;
	
	Возврат КлассификаторТаблица;
КонецФункции

&НаСервере
Процедура ПерепровестиАктирование()
	//Возврат;
	Выборка = Документы.ВедомостьАктирования.Выбрать();
	Пока Выборка.Следующий() Цикл
		Док = Выборка.Получитьобъект();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодыВидовРабот(Команда)
	ПолучитьКодыВидовРаботНаСервере();
КонецПроцедуры

Процедура ПолучитьКодыВидовРаботНаСервере()
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Dogovor.DOG_NOM КАК НомерДоговора,
		|	Dogovor.DOG_D_OFORML КАК ДатаДоговора,
		|	Dogovor.DOG_NN_ZAK КАК КодКлиента,
		|	ЕстьNULL(Dogovor.DOG_YEAR, 0) КАК ГодДоговора,
		|	Etap.ETAP_DOG_NN,
		|	Etap.ETAP_NAIM_OB КАК ОбъектВЭтапе,
		|	ZAJAVKI.ZAJAVKI_D_REG КАК ДатаЗаявки,
		|	ZAJAVKI.ZAJAVKI_NOM КАК НомерЗаявки,
		|	ZAJAVKI.ZAJAVKI_OBEKT КАК ОбъектВЗаявке,
		|	ЕстьNULL(Etap.ETAP_VYPOLN, 0) КАК СуммаАкта,
		|	Etap.ETAP_D_VYP КАК ДатаАкта,
		|	ЕстьNULL(Etap.ETAP_OPL_SUMMA, 0) КАК СуммаОплаты1,
		|	Etap.ETAP_D_OPLATA КАК ДатаОплаты1,
		|	ЕстьNULL(Etap.ETAP_OPL_SUMMA2, 0) КАК СуммаОплаты2,
		|	Etap.ETAP_D_OPLATA2 КАК ДатаОплаты2,
		|	ЕстьNULL(Etap.ETAP_VOZVR_SUMMA, 0) КАК СуммаВозврата,
		|	Etap.ETAP_D_VOZVR КАК ДатаВозврата,
		|	Etap.ETAP_D_SD_PLAN КАК ПлановыйСрок,
		|	Etap.ETAP_NOM КАК НомерЭтапа,
		|	Etap.ETAP_NDS КАК СтавкаНДС,
		|	ЕстьNULL(Etap.ETAP_NDS_SUMMA, 0) КАК СуммаНДС,
		|	ЕстьNULL(Etap.ETAP_STOIM, 0) КАК Стоимость,
		|	Etap.ETAP_ISP1_NN,
		|	SPR_ETAP.SPR_ETAP_NAIM КАК НаименованиеРабот,
		|	SPR_ISP1.ISP_OTDEL КАК КодОтдела,
		|	SPR_ISP1.ISP_GRUPPA КАК КодОтряда,
		|	SPR_ISP.ISP_TAB_NOM КАК ТабНомер,
		|	SPR_ZAK.Z_NAIM КАК НаименованиеЗаказчика,
		|	SPR_ZAK.Z_ADRES КАК Адрес,
		|	SPR_ZAK.Z_INDEX КАК Индекс,
		|	SPR_ZAK.Z_SCHET КАК РасчетныйСчет,
		|	SPR_ZAK.Z_UNP КАК УНП,
		|	SPR_ZAK.Z_FIO КАК ФИО,
		|	SPR_ZAK.Z_DOLZNOST КАК Должность,
		|	SPR_ZAK.Z_DOKUMENT КАК Документ,
		|	SPR_ZAK.Z_TELEFON КАК Телефон,
		|	SPR_ZAK.Z_NN_BANK,
		|	SPR_BANK.B_NAIM КАК НаименованиеБанка,
		|	SPR_BANK.B_COD КАК КодБанка,
		|	SPR_BANK.B_ADRES_BANKA КАК АдресБанка,
		|	SPR_ETAP.SPR_ETAP_NN КАК КодРаботы,
		|	ZAJAVKI.ZAJAVKI_FIZ_UR_NN КАК ФизЮрЛицо
		|ИЗ
		|	ВнешнийИсточникДанных.Гродно.Таблица.ETAP КАК Etap
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.DOGOVOR КАК Dogovor
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ZAK КАК SPR_ZAK
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_BANK КАК SPR_BANK
		|				ПО SPR_ZAK.Z_NN_BANK = SPR_BANK.B_NN
		|			ПО Dogovor.DOG_NN_ZAK = SPR_ZAK.Z_NN
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.ZAJAVKI КАК ZAJAVKI
		|			ПО Dogovor.DOG_ZAJAVKI_NN = ZAJAVKI.ZAJAVKI_NN
		|		ПО Etap.ETAP_DOG_NN = Dogovor.DOG_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ISP КАК SPR_ISP
		|		ПО Etap.ETAP_ISP2_NN = SPR_ISP.ISP_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ISP КАК SPR_ISP1
		|		ПО Etap.ETAP_ISP1_NN = SPR_ISP1.ISP_NN
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.Гродно.Таблица.SPR_ETAP КАК SPR_ETAP
		|		ПО Etap.ETAP_SPR_ETAP_NN = SPR_ETAP.SPR_ETAP_NN";

	Результат = Запрос.Выполнить().Выгрузить();

	ТзВидыРабот = ПолучитьВидыРабот(); 
	
	СпНенайденных = Новый СписокЗначений;
	
	Для каждого Стр Из Результат Цикл
		Если Стр.ГодДоговора < 2015 Тогда
			Если Стр.СуммаАкта = Стр.СуммаОплаты1 + Стр.СуммаОплаты2 - Стр.СуммаВозврата И 
				Стр.СуммаАкта = 0 Тогда
				// оплата была возвращена полностью, работы не выполнялись
				Продолжить;
				
			ИначеЕсли Стр.СуммаАкта = Стр.СуммаОплаты1 + Стр.СуммаОплаты2 - Стр.СуммаВозврата И 
				Стр.СуммаАкта = Стр.Стоимость Тогда
				// работы выполнены полностью до 2015г.
				Продолжить;
				
			ИначеЕсли Стр.СуммаОплаты1 < 10000 Тогда
				// такие не надо переносить
				Продолжить;
			КонецЕсли;  
		КонецЕсли; 
		
		ВидРабот = Неопределено;
		КодВидаРабот = СтрЗаменить(Стр.КодРаботы, Символы.НПП, "");
		Если Стр.ФизЮрЛицо = 1 Тогда
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли; 
		ВидРабот = ПолучитьВидРаботыПоДоговору(КодВидаРабот, ЮрФизЛицо);
		Если ВидРабот = Неопределено Тогда
			Если СпНенайденных.НайтиПоЗначению(КодВидаРабот) = Неопределено Тогда
				СпНенайденных.Добавить(КодВидаРабот, Стр.НаименованиеРабот);
			КонецЕсли; 
			//Сообщение = Новый СообщениеПользователю();
			//Сообщение.Текст = "Не определен вид работ по коду "+КодВидаРабот+" для "+Корреспондент.ЮрФизЛицо;
			//Сообщение.Сообщить();
		
			////Сообщить("Не определен вид работ по коду "+КодВидаРабот);
			//ЕстьОшибка = Истина;
			//Возврат ЕстьОшибка;
		КонецЕсли; 
	КонецЦикла; 
	
	СпНеНайденных.СортироватьПоЗначению();
	
	Для каждого Стр Из СпНеНайденных Цикл
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ""+Стр.Значение+" "+Стр.Представление;
		Сообщение.Сообщить();
	КонецЦикла; 
	
КонецПроцедуры

