
&НаКлиенте
Перем Док;

&НаКлиенте
Перем WordApp;

&НаКлиенте
Перем Селекция, НачалоЗакладки, Поиск;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Договор = Неопределено;
	Если Параметры.Свойство("Договор") Тогда
		Договор = Параметры.Договор;
		НомерДоговора = Договор.РегистрационныйНомер;
		ДатаДоговора = Договор.ДатаРегистрации;
		Корреспондент = Договор.Корреспондент;
		
		ЗаполнитьАктыДляВыбора();
	КонецЕсли;
	
	Если Параметры.Свойство("АктВыполненныхРабот") Тогда
		Акт = Параметры.АктВыполненныхРабот;
		НомерАкта = Акт.РегистрационныйНомер;
		ДатаАкта = Акт.ДатаРегистрации;
		ЭтапДоговора = Акт.ЭтапДоговора;
		
		ОпределитьВидРабот();
		
		ЗаполнитьНаСервере();
	КонецЕсли; 
	  	
КонецПроцедуры

//&НаСервере
Процедура ЗаполнитьФорму()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ЭтапыДоговоров.Ссылка КАК ЭтапДоговора,
//		|	ЭтапыДоговоров.НомерЭтапа,
//		|	ЭтапыДоговоров.Стоимость,
//		|	ЭтапыДоговоров.ВидРабот,
//		|	ЭтапыДоговоров.ВидРабот.ПолноеНаименование КАК НаименованиеРаботы,
//		|	ВЫРАЗИТЬ(ЭтапыДоговоров.ОбъектРабот.ПолноеНаименование КАК СТРОКА(1000)) КАК ОбъектРабот,
//		|	ВЫБОР
//		|		КОГДА ЭтапыДоговоров.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
//		|			ТОГДА ЭтапыДоговоров.Подразделение
//		|		ИНАЧЕ ЭтапыДоговоров.Подразделение.Родитель
//		|	КОНЕЦ КАК ОтделИсполнителя,
//		|	ВЫБОР
//		|		КОГДА ЭтапыДоговоров.Подразделение.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
//		|			ТОГДА ЭтапыДоговоров.Подразделение.Руководитель
//		|		ИНАЧЕ ЭтапыДоговоров.Подразделение.Родитель.Руководитель
//		|	КОНЕЦ КАК НачИсполнителя,
//		|	ВЫБОР
//		|		КОГДА ЭтапыДоговоров.СтавкаНДС.НеОблагается
//		|			ТОГДА ""Без НДС""
//		|		ИНАЧЕ ЭтапыДоговоров.СтавкаНДС.Ставка
//		|	КОНЕЦ КАК СтавкаНДС,
//		|	ЭтапыДоговоров.ОсвобождениеОтНДС,
//		|	ЭтапыДоговоров.ОсвобождениеОтНДС.ДляПечати КАК ОсвобождениеОтНДСДляПечати,
//		|	ЭтапыДоговоров.Цена,
//		|	ЭтапыДоговоров.СуммаНДС,
//		|	ЭтапыДоговоров.СтоимостьСНДС,
//		|	ЭтапыДоговоров.КоличествоУчастков,
//		|	ЭтапыДоговоров.Месторасположение,
//		|	ЭтапыДоговоров.КакДоговорЮрЛица,
//		|	ЕСТЬNULL(УчетДоговоровОбороты.СуммаРасход, 0) КАК Заактировано
//		|ИЗ
//		|	Справочник.мЭтапыДоговоров КАК ЭтапыДоговоров
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетДоговоров.Обороты(&НачПер, &КонПер, День, ЭтапДоговора.Владелец = &Договор) КАК УчетДоговоровОбороты
//		|		ПО ЭтапыДоговоров.Ссылка = УчетДоговоровОбороты.ЭтапДоговора
//		|ГДЕ
//		|	ЭтапыДоговоров.Владелец = &Договор
//		|	И НЕ ЭтапыДоговоров.ПометкаУдаления
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВнутренниеДокументы.ДатаРегистрации КАК ДатаРегистрации,
//		|	ВнутренниеДокументы.РегистрационныйНомер КАК РегистрационныйНомер,
//		|	ВнутренниеДокументы.Утвердил,
//		|	ВнутренниеДокументы.Организация,
//		|	ВнутренниеДокументы.Валюта,
//		|	ВнутренниеДокументы.Ссылка КАК Договор
//		|ИЗ
//		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
//		|ГДЕ
//		|	ВнутренниеДокументы.Ссылка = &Договор
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ФизЛицо КАК ФизЛицо,
//		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента,
//		|	ВнутренниеДокументыКорреспонденты.КонтактноеЛицо,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.Наименование,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ПолноеНаименование,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ИНН,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.КодПоОКПО,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.НомерСчета,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Код,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Наименование,
//		|	ВнутренниеДокументыКорреспонденты.Корреспондент.ОсновнойБанковскийСчет.Банк.Адрес,
//		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента.Наименование КАК ПодписалОтКорреспондента,
//		|	ВнутренниеДокументыКорреспонденты.ПодписалОтКорреспондента.Должность
//		|ПОМЕСТИТЬ Заказчики
//		|ИЗ
//		|	Справочник.ВнутренниеДокументы.Корреспонденты КАК ВнутренниеДокументыКорреспонденты
//		|ГДЕ
//		|	ВнутренниеДокументыКорреспонденты.Ссылка = &ДокументОснование
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК Адрес,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ тАдрес
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮридическийАдресКорреспондента)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК Телефон,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ тТелефон
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКорреспондента)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ЕСТЬNULL(тАдрес.Адрес, ""__________________"") КАК Адрес,
//		|	ЕСТЬNULL(тТелефон.Телефон, ""__________________"") КАК Телефон,
//		|	Заказчики.Корреспондент,
//		|	Заказчики.КорреспондентНаименование КАК Наименование,
//		|	Заказчики.КорреспондентПолноеНаименование КАК ПолноеНаименование,
//		|	Заказчики.КорреспондентИНН КАК УНП,
//		|	Заказчики.КорреспондентКодПоОКПО КАК ОКПО,
//		|	Заказчики.КорреспондентОсновнойБанковскийСчетНомерСчета КАК НомерСчета,
//		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкКод КАК КодБанка,
//		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкНаименование КАК Банк,
//		|	Заказчики.КорреспондентОсновнойБанковскийСчетБанкАдрес КАК БанкАдрес,
//		|	Заказчики.ПодписалОтКорреспондента КАК КорреспондентКратко,
//		|	Заказчики.ПодписалОтКорреспондентаДолжность КАК ДолжностьКорр
//		|ИЗ
//		|	Заказчики КАК Заказчики
//		|		ЛЕВОЕ СОЕДИНЕНИЕ тАдрес КАК тАдрес
//		|		ПО Заказчики.Корреспондент = тАдрес.Корреспондент
//		|		ЛЕВОЕ СОЕДИНЕНИЕ тТелефон КАК тТелефон
//		|		ПО Заказчики.Корреспондент = тТелефон.Корреспондент
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Заказчики.Корреспондент КАК Корреспондент,
//		|	Заказчики.ФизЛицо КАК ФизЛицо
//		|ПОМЕСТИТЬ ФизЛица
//		|ИЗ
//		|	Заказчики КАК Заказчики
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийАдрес,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ ДомашниеАдреса
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК ДомашнийТелефон,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ ДомашниеТелефоны
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДомашнийТелефонФизическогоЛица)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК ПочтовыйАдрес,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ ПочтовыеАдреса
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КорреспондентыКонтактнаяИнформация.Представление КАК МобильныйТелефон,
//		|	КорреспондентыКонтактнаяИнформация.Ссылка КАК Корреспондент
//		|ПОМЕСТИТЬ МобильныеТелефоны
//		|ИЗ
//		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
//		|ГДЕ
//		|	КорреспондентыКонтактнаяИнформация.Ссылка В
//		|			(ВЫБРАТЬ
//		|				Заказчики.Корреспондент
//		|			ИЗ
//		|				Заказчики КАК Заказчики)
//		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ДокументыФизическихЛицСрезПоследних.Физлицо,
//		|	МАКСИМУМ(ДокументыФизическихЛицСрезПоследних.Период) КАК Период
//		|ПОМЕСТИТЬ ДокументыСрез
//		|ИЗ
//		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
//		|			,
//		|			ЯвляетсяДокументомУдостоверяющимЛичность
//		|				И Физлицо В
//		|					(ВЫБРАТЬ
//		|						ФизЛица.ФизЛицо
//		|					ИЗ
//		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ДокументыФизическихЛицСрезПоследних.Физлицо
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ДокументыФизическихЛицСрезПоследних.Серия,
//		|	ДокументыФизическихЛицСрезПоследних.Номер,
//		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
//		|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
//		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
//		|	ДокументыФизическихЛицСрезПоследних.Физлицо
//		|ПОМЕСТИТЬ ДанныеПаспорта
//		|ИЗ
//		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
//		|			,
//		|			ЯвляетсяДокументомУдостоверяющимЛичность
//		|				И Физлицо В
//		|					(ВЫБРАТЬ
//		|						ФизЛица.ФизЛицо
//		|					ИЗ
//		|						ФизЛица КАК ФизЛица)) КАК ДокументыФизическихЛицСрезПоследних
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСрез КАК ДокументыСрез
//		|		ПО ДокументыФизическихЛицСрезПоследних.Период = ДокументыСрез.Период
//		|			И ДокументыФизическихЛицСрезПоследних.Физлицо = ДокументыСрез.Физлицо
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|УНИЧТОЖИТЬ ДокументыСрез
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ЕСТЬNULL(ДомашниеАдреса.ДомашнийАдрес, """") КАК Адрес,
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(ДомашниеТелефоны.ДомашнийТелефон, """") <> """"
//		|			ТОГДА ЕСТЬNULL(ДомашниеТелефоны.ДомашнийТелефон, """")
//		|		ИНАЧЕ ЕСТЬNULL(МобильныеТелефоны.МобильныйТелефон, """")
//		|	КОНЕЦ КАК Телефон,
//		|	ЕСТЬNULL(ПочтовыеАдреса.ПочтовыйАдрес, """") КАК ПочтовыйАдрес,
//		|	ЕСТЬNULL(ДанныеПаспорта.Серия, """") КАК СерияПаспорта,
//		|	ЕСТЬNULL(ДанныеПаспорта.Номер, """") КАК НомерПаспорта,
//		|	ЕСТЬNULL(ДанныеПаспорта.ДатаВыдачи, """") КАК ДатаВыдачи,
//		|	ЕСТЬNULL(ДанныеПаспорта.КемВыдан, """") КАК КемВыдан,
//		|	ЕСТЬNULL(ДанныеПаспорта.СрокДействия, """") КАК СрокДействия,
//		|	ФизЛица.Корреспондент.ПолноеНаименование КАК ПолноеНаименование,
//		|	ФизЛица.Корреспондент,
//		|	ФизЛица.ФизЛицо
//		|ИЗ
//		|	ФизЛица КАК ФизЛица
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеАдреса КАК ДомашниеАдреса
//		|		ПО ФизЛица.Корреспондент = ДомашниеАдреса.Корреспондент
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ДомашниеТелефоны КАК ДомашниеТелефоны
//		|		ПО ФизЛица.Корреспондент = ДомашниеТелефоны.Корреспондент
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ПочтовыеАдреса КАК ПочтовыеАдреса
//		|		ПО ФизЛица.Корреспондент = ПочтовыеАдреса.ПочтовыйАдрес
//		|		ЛЕВОЕ СОЕДИНЕНИЕ МобильныеТелефоны КАК МобильныеТелефоны
//		|		ПО ФизЛица.Корреспондент = МобильныеТелефоны.Корреспондент
//		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПаспорта КАК ДанныеПаспорта
//		|		ПО ФизЛица.ФизЛицо = ДанныеПаспорта.Физлицо";

//	Запрос.УстановитьПараметр("Договор", Договор);
//	Если ЗначениеЗаполнено(Акт) Тогда
//	 	Запрос.УстановитьПараметр("ДокументОснование", Акт);
//	Иначе
//	 	Запрос.УстановитьПараметр("ДокументОснование", Договор);
//	КонецЕсли; 
//	Запрос.УстановитьПараметр("НачПер", Договор.ДатаРегистрации);
//	Запрос.УстановитьПараметр("КонПер", ТекущаяДата());

//	Результат = Запрос.ВыполнитьПакет();

//	// Этапы
//	ВыборкаДетальныеЗаписи = Результат[0].Выбрать();
//	
//	ЭтапыДоговора.Очистить();

//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		
//		// в таб часть добавляем только этап из Акта выполненных работ
//		Если ЗначениеЗаполнено(Акт) Тогда
//			Если ВыборкаДетальныеЗаписи.ЭтапДоговора <> Акт.ЭтапДоговора Тогда
//				Продолжить;
//			КонецЕсли; 
//		КонецЕсли;
//		
//		Этап = ЭтапыДоговора.Добавить();
//		ЗаполнитьЗначенияСвойств(Этап, ВыборкаДетальныеЗаписи);
//		Если ВыборкаДетальныеЗаписи.КоличествоУчастков = 0 Тогда
//		    Этап.КоличествоУчастков = 1;
//		КонецЕсли; 

//		Если мРазное.ПолучитьГородБазы() = "Гродно" Тогда
//			Если ВыборкаДетальныеЗаписи.Заактировано = 0 Тогда
//				Этап.Пометка = Ложь;
//			Иначе
//				Этап.Пометка = Истина; 
//			КонецЕсли;
//		Иначе	
//			Если ВыборкаДетальныеЗаписи.Заактировано > 0 Тогда
//				Этап.Пометка = Ложь;
//			Иначе
//				Этап.Пометка = Истина; 
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//    Если ЭтапыДоговора.Количество() > 0 Тогда
//		//НачИсполнителя = ЭтапыДоговора[0].ЭтапДоговора.Подразделение.Руководитель;
//        НачИсполнителя = ЭтапыДоговора[0].НачИсполнителя;
//    КонецЕсли; 
//	
//	// Договор
//	ДанныеДоговора = Результат[1].Выгрузить();
//	НомерДоговора = ДанныеДоговора[0].РегистрационныйНомер;
//	ДатаДоговора = ДанныеДоговора[0].ДатаРегистрации;
//    //Подписал = ДанныеДоговора[0].Утвердил;
//	Организация = ДанныеДоговора[0].Организация;
//	
//    Если Город = "Брест" Тогда
//        Если ЗначениеЗаполнено(Акт) Тогда
//            ПодписалБГЗ1 = Акт.Утвердил;
//        Иначе    
//            // Подписывает акт - тот кто подписал договор
//            ПодписалБГЗ1 = ДанныеДоговора[0].Утвердил;
//        КонецЕсли; 
//    КонецЕсли;
//    
//    //Если ЗначениеЗаполнено(АктВыполненныхРабот) Тогда
//    //	Подписал = АктВыполненныхРабот.Утвердил;
//    //	//Если Город = "Брест" Тогда
//    //	//	// Подписывает акт - тот кто его утвердил
//    //	//	НачИсполнителя = АктВыполненныхРабот.Утвердил;
//    //	//КонецЕсли;
//    //Иначе
//    //	// Это печать актов для физлиц
//    //	//Если Город = "Брест" Тогда
//    //	//	// Подписывает акт - тот кто подписал договор
//    //	//	НачИсполнителя = ДанныеДоговора[0].Утвердил;
//    //	//	Если Не ЗначениеЗаполнено(НачИсполнителя) Тогда
//    //	//		Сообщить("Не заполнено поле ""Подписал"" в договоре!");
//    //	//	КонецЕсли; 
//    //	//КонецЕсли;
//    //КонецЕсли; 

//	Если ЗначениеЗаполнено(ДанныеДоговора[0].Валюта) Тогда
//		ВалютаДоговора = ДанныеДоговора[0].Валюта; 
//	Иначе	
//		ВалютаДоговора = Константы.ОсновнаяВалюта.Получить(); 
//	КонецЕсли; 
//	
//	// Заказчики
//	ЮрЛица = Результат[5].Выгрузить();
//	ФизЛица = Результат[14].Выгрузить();
//	ЭтоФизЛица = ЮрЛица[0].Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;	
//	
//	Заказчики.Очистить();
//	
//	Если ЭтоФизЛица Тогда
//		ТзЗаказчики = ФизЛица;
//	Иначе
//		ТзЗаказчики = ЮрЛица;
//	КонецЕсли; 
//	
//	Для каждого СтрокаТз Из ТзЗаказчики Цикл
//		Отбор = Новый Структура("Корреспондент", СтрокаТз.Корреспондент);
//		ИскСтроки = Заказчики.НайтиСтроки(Отбор);
//		Если ИскСтроки.Количество() = 0 Тогда
//			Заказчик = Заказчики.Добавить();
//			ЗаполнитьЗначенияСвойств(Заказчик, СтрокаТз);
//		КонецЕсли; 
//	КонецЦикла; 
//	РублиНовые = Справочники.Валюты.НайтиПоКоду("933");
//	РублиСтарые = Справочники.Валюты.НайтиПоКоду("974");
КонецПроцедуры 

#Область ОбработчикиРеквизитовФормы

&НаКлиенте
Процедура ПодписалГКИ1ПриИзменении(Элемент)
	ДолжностьГКИ1 = ДолжностьКонтактногоЛица(ПодписалГКИ1);
	ПодписалГКИ1строкой = Строка(ПодписалГКИ1); 
КонецПроцедуры

&НаКлиенте
Процедура ПодписалГКИ2ПриИзменении(Элемент)
	ДолжностьГКИ2 = ДолжностьКонтактногоЛица(ПодписалГКИ2); 	
	ПодписалГКИ2строкой = Строка(ПодписалГКИ2); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДолжностьКонтактногоЛица(Лицо)
	Возврат Лицо.Должность; 	
КонецФункции

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	РеквДоговора = РеквизитыДоговора(Договор);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквДоговора); 
	
	ЗаполнитьАктыДляВыбора();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАктыДляВыбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СвязиДокументов.СвязанныйДокумент КАК Справочник.ВнутренниеДокументы) КАК Акт
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.Документ = &Договор
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи
		|	И НЕ СвязиДокументов.СвязанныйДокумент.ПометкаУдаления
		|	И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.Имеет);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыВнутреннихДокументов.АктВыполненныхРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	АктыДляВыбора.Очистить();
	
	Пока Выборка.Следующий() Цикл
		АктыДляВыбора.Добавить(Выборка.Акт);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = АктыДляВыбора;
КонецПроцедуры

&НаКлиенте
Процедура АктПриИзменении(Элемент)
	РеквАкта = РеквизитыАкта(Акт);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквАкта); 
	
	ОпределитьВидРабот();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДоговора(Договор)
	
	РеквДоговора = Новый Структура;
	РеквДоговора.Вставить("Корреспондент", Договор.Корреспондент);
	РеквДоговора.Вставить("НомерДоговора", Договор.РегистрационныйНомер);
	РеквДоговора.Вставить("ДатаДоговора", Договор.ДатаРегистрации);
	
	Возврат РеквДоговора;	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыАкта(Акт)
	
	РеквАкта = Новый Структура;
	РеквАкта.Вставить("ЭтапДоговора", Акт.ЭтапДоговора);
	РеквАкта.Вставить("НомерДоговора", Акт.РегистрационныйНомер);
	РеквАкта.Вставить("ДатаДоговора", Акт.ДатаРегистрации);
	
	Возврат РеквАкта;	
КонецФункции

&НаСервере
Процедура ОпределитьВидРабот()
	ЭтоОбновление = Ложь;
	ЭтоЭксплуатация = Ложь;
	ЭтоКадастроваяОценка = Ложь;

	ВидРабот = ЭтапДоговора.ВидРабот;
	Если ВидРабот = Справочники.мВидыРаботЮрЛица.ОбновлениеЗИС Тогда
		ЭтоОбновление = Истина;
	ИначеЕсли ВидРабот = Справочники.мВидыРаботЮрЛица.ЭксплуатацияЗИС Тогда
		ЭтоЭксплуатация = Истина;
	ИначеЕсли ВидРабот.Родитель = Справочники.мВидыРаботЮрЛица.КадастроваяОценкаГКИ Тогда
		ЭтоКадастроваяОценка = Истина;
	Иначе
		Сообщить("Не обработан вид работ: "+ВидРабот+". Обратитесь к разработчику.");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот");
	ПодписалБГЗ1 = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидДокумента);
	ПодписалБГЗ1ПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодписалИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот");
	ПодписалБГЗ1 = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидДокумента, Текст);
	ПодписалБГЗ1ПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодписалБГЗ1ПриИзменении(Элемент)
	ДолжностьБГЗ1 = РаботаСПользователями.ПолучитьДолжность(ПодписалБГЗ1);
	ПодписалБГЗ1строкой = ПредставлениеСотрудника(ПодписалБГЗ1);
КонецПроцедуры

&НаКлиенте
Процедура ПодписалБГЗ2ПриИзменении(Элемент)
	ДолжностьБГЗ2 = РаботаСПользователями.ПолучитьДолжность(ПодписалБГЗ2);
	ПодписалБГЗ2строкой = ПредставлениеСотрудника(ПодписалБГЗ2);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСотрудника(Пользователь)
	Возврат Пользователь.ПредставлениеВДокументах;	
КонецФункции
 
#КонецОбласти 

#Область КомандыФормы

&НаКлиенте
Процедура Создать(Команда)
	Если Не ЗначениеЗаполнено(Акт) Тогда
		Сообщить("Укажите акт!");
		Возврат;
	КонецЕсли; 
	СоздатьАкт = Истина;  
	ПечатьАкта();
	//Оповестить("Напечатан акт выполненных работ", Акт);	
КонецПроцедуры // Печать()

&НаКлиенте
Процедура ПечатьВорд(Команда)
	Если Не ЗначениеЗаполнено(Акт) Тогда
		Сообщить("Укажите акт!");
		Возврат;
	КонецЕсли; 
	
	СоздатьАкт = Ложь;
	ПечатьАкта();
	
	//Оповестить("Напечатан акт выполненных работ", Акт);	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СметыОбороты.ВидРабот КАК ВидРабот,
		|	СметыОбороты.ВидРабот.Примечание КАК СодержаниеПримечания,
		|	ВЫБОР
		|		КОГДА СметыОбороты.ОбъектРабот.Родитель = &Пустой
		|			ТОГДА СметыОбороты.ОбъектРабот
		|		ИНАЧЕ СметыОбороты.ОбъектРабот.Родитель
		|	КОНЕЦ КАК ОбъектРабот1,
		|	ВЫБОР
		|		КОГДА СметыОбороты.ОбъектРабот.Родитель = &Пустой
		|			ТОГДА СметыОбороты.ОбъектРабот.ЕдиницаИзмерения
		|		ИНАЧЕ СметыОбороты.ОбъектРабот.Родитель.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдИзм1,
		|	СметыОбороты.Договор,
		|	СметыОбороты.Смета.СтавкаНДС.Наименование КАК СтавкаНДСстрокой,
		|	СметыОбороты.СуммаРасход КАК СуммаНГ,
		|	СметыОбороты.НДСРасход КАК НДСНГ,
		|	СметыОбороты.ОбъемРасход КАК ОбъемНГ,
		|	0 КАК СуммаТП,
		|	0 КАК НДСТП,
		|	0 КАК ОбъемТП,
		|	0 КАК НомерСтрокиВР,
		|	ВЫБОР
		|		КОГДА СметыОбороты.ОбъектРабот.Родитель <> &Пустой
		|			ТОГДА СметыОбороты.ОбъектРабот
		|		ИНАЧЕ &Пустой
		|	КОНЕЦ КАК ОбъектРабот2,
		|	ВЫБОР
		|		КОГДА СметыОбороты.ОбъектРабот.Родитель <> &Пустой
		|			ТОГДА СметыОбороты.ОбъектРабот.ЕдиницаИзмерения
		|		ИНАЧЕ ""
		|	КОНЕЦ КАК ЕдИзм2,
		|ИЗ
		|	РегистрНакопления.Сметы.Обороты(&НачалоГода, &НачалоПП, Период, ) КАК СметыОбороты
		|ГДЕ
		|	СметыОбороты.Договор = &Договор
		|	И СметыОбороты.Смета.ЭтапДоговора = &ЭтапДоговора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	мЭтапыДоговоровОбъектыРабот.ВидРабот,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка.ВидРабот.Примечание,
		|	ВЫБОР
		|		КОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот.Родитель = &Пустой
		|			ТОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот
		|		ИНАЧЕ мЭтапыДоговоровОбъектыРабот.ОбъектРабот.Родитель
		|	КОНЕЦ,
		|	мЭтапыДоговоровОбъектыРабот.ОбъектРабот.ЕдиницаИзмерения,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка.Владелец,
		|	мЭтапыДоговоровОбъектыРабот.Ссылка.СтавкаНДС.Наименование,
		|	0,
		|	0,
		|	0,
		|	мЭтапыДоговоровОбъектыРабот.Смета.КОплате,
		|	мЭтапыДоговоровОбъектыРабот.Смета.НДС,
		|	мЭтапыДоговоровОбъектыРабот.Смета.Объем,
		|	мЭтапыДоговоровОбъектыРабот.НомерСтроки,
		|	ВЫБОР
		|		КОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот.Родитель <> &Пустой
		|			ТОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот
		|		ИНАЧЕ &Пустой
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот.Родитель <> &Пустой
		|			ТОГДА мЭтапыДоговоровОбъектыРабот.ОбъектРабот.ЕдиницаИзмерения
		|		ИНАЧЕ ""
		|	КОНЕЦ
		|ИЗ
		|	Справочник.мЭтапыДоговоров.ОбъектыРабот КАК мЭтапыДоговоровОбъектыРабот
		|ГДЕ
		|	мЭтапыДоговоровОбъектыРабот.Ссылка.Владелец = &Договор
		|	И мЭтапыДоговоровОбъектыРабот.Ссылка = &ЭтапДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиВР,
		|	ВидРабот,
		|	ОбъектРабот1,
		|	ОбъектРабот2";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДатаАкта));
	Запрос.УстановитьПараметр("НачалоПП", НачалоМесяца(ДатаАкта)-1);
	Запрос.УстановитьПараметр("ЭтапДоговора", ЭтапДоговора);
	Запрос.УстановитьПараметр("Пустой", Справочники.мОбъектыРабот.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Работы.Очистить();
	
	ЕстьОбъектРабот2 = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Стр = Работы.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
		
		Стр.СуммаНГ = Стр.СуммаНГ + Стр.СуммаТП;
		Стр.НДСНГ = Стр.НДСНГ + Стр.НДСТП;
		Стр.ОбъемНГ = Стр.ОбъемНГ + Стр.ОбъемТП;
		
		Если ЗначениеЗаполнено(Стр.ОбъектРабот2) Тогда
			ЕстьОбъектРабот2 = Истина;
		Иначе	
			Если Стр.СуммаНГ > 0 Тогда
				Стр.ОбъемНГ = 1;
			КонецЕсли; 
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.СтавкаНДССтрокой) Тогда
			СтавкаНДССтрокой = Выборка.СтавкаНДССтрокой;
		КонецЕсли; 
		СодержаниеПримечания = Выборка.СодержаниеПримечания;
	КонецЦикла;
	
	Элементы.Работы.ПодчиненныеЭлементы.РаботыОбъектРабот2.Видимость = ЕстьОбъектРабот2;
	
	// Итоги
	ВсегоНДСНГ = Работы.Итог("НДСНГ");
	ВсегоНДСТП = Работы.Итог("НДСТП");
	ВсегоСуммаНГ = Работы.Итог("СуммаНГ");
	ВсегоСуммаТП = Работы.Итог("СуммаТП");
	ВсегоОбъемНГ = Работы.Итог("ОбъемНГ");
	ВсегоОбъемТП = Работы.Итог("ОбъемТП");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАкта()
	ЭтоПечатьРасшифровки = Ложь;
	
	ИнициализироватьДокументWord();
	
	// Шапка документа
	ВывестиРеквизитыСторон();
	
	// Штрихкод
	ВывестиШтрихКод();

	// Заполнение акта
	ВывестиШапкуАкта();
	
	// Заполнение таблицы
	ВывестиТаблицуАкта();
	
	// Стоимость
	СформироватьСуммуПрописью();
	
	// Примечание
	ВывестиПримечание();
	
	// Подписи
	ВывестиПодписи();
	
	// Вывод 
	ПоказатьФайлНаЭкран();
КонецПроцедуры 

&НаКлиенте
Процедура РасшифровкаСоздать(Команда)
	СоздатьРасшифровку = Истина;
	
	ПечатьРасшифровки();
	
	СоздатьРасшифровку = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПечать(Команда)
	СоздатьРасшифровку = Ложь;
	ПечатьРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРасшифровки()
	ЭтоПечатьРасшифровки = Истина;
	
	// инициализация
	Макет = ПолучитьМакетСервер();
	ВременныйПуть = КаталогВременныхФайлов();
	ПутьКФайлуНаДиске = "Расш "+СокрЛП(НомерАкта)+".docx";
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "/", "_");
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "\", "_");
	ПутьКФайлуНаДиске = ВременныйПуть + ПутьКФайлуНаДиске;
	Макет.Записать(ПутьКФайлуНаДиске);
	
	WordApp = Новый COMОбъект("Word.Application");
	Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
	
	Селекция = WordApp.Selection;
	Селекция1 = WordApp.Selection;
	Селекция2 = WordApp.Selection;
	
	Поиск = Док.Content.Find;
	Поиск.ClearFormatting();
	Поиск.Replacement.ClearFormatting();
	
	ВывестиШапкуАкта();
	
	// Определить количество видов работ
	ПолучитьСпискиВидовРабот();
	
	// Вывод строк видов работ с объектами
	КоличествоВРсОбъектами = СпВидовРаботСОбъектами.Количество();
	
	Если КоличествоВРсОбъектами = 0 Тогда
		// ни одного
	
	ИначеЕсли КоличествоВРсОбъектами > 2 Тогда
		// Несколько -
	
	Иначе
		// один ВР
		
		// находим нулевую строку
		Док.Bookmarks("НомерВРсОбъектами").Select();
		
		// Вывод заголовка ВР
		Док.Bookmarks("НаименованиеГруппыВР").Range.Text = Строка(СпВидовРаботСОбъектами[0].Представление);
		Док.Bookmarks("НомерВРсОбъектами").Range.Text = "1";
		Док.Bookmarks("ВидРаботСДетализациейПоОбъектам").Range.Text = Строка(СпВидовРаботСОбъектами[1].Представление);
		
		// итоги по виду работ
		ВсегоОбъемНГпункт = 0;
		ВсегоСуммаНГпункт = 0;
		ВсегоОбъемТПпункт = 0;
		ВсегоСуммаТПпункт = 0;
		
		// вывод списка объектов
		//СохранитьПозициюЗакладки("СтрокаТаблицы");
		
		//й = КоличествоВРсОбъектами/2-1;
		Для й = 0 По КоличествоВРсОбъектами/2-1 Цикл
		
			
		
		//КонецЦикла; 
		//Пока й >= 0 Цикл
			
			Отбор = Новый Структура("ВидРабот", СпВидовРаботСОбъектами[2*й+1].Значение); 
			ИскСтроки = Работы.НайтиСтроки(Отбор);
			
			// Получим СпОбъектов по конкретному ВР
			СпОбъектов = Новый СписокЗначений;
			Для каждого Стр Из ИскСтроки Цикл
				Если СпОбъектов.НайтиПоЗначению(Стр.ОбъектРабот1) = Неопределено Тогда
					СпОбъектов.Добавить(Стр.ОбъектРабот1, Строка(Стр.ОбъектРабот1));
				КонецЕсли; 
			КонецЦикла; 
			
			КоличествоОбъектов = СпОбъектов.Количество();
			
			// копию начальной строки объекта в буфер
			Селекция.MoveDown();
			Селекция.SelectRow();
			Селекция.Copy();
			
			// Вывод подобъектов по объектам
			Для ы = 0 По КоличествоОбъектов-1 Цикл
				
				// заполняем строку
				мРазноеКлиент.Заменить(Поиск, "НаименованиеОбъектаНачало", Строка(СпОбъектов[ы].Значение));
				мРазноеКлиент.Заменить(Поиск, "ЕдИзм1", "район");
				
				//Перемещаемся вниз, вставляем из буфера обмена строку для следующих объектов
				Селекция.MoveDown();
				Селекция.MoveLeft();
				Селекция.Collapse();
				Селекция.Paste();
				
				// Запоминаем строку таблицы для объктов2
				Селекция.SelectRow();
				Селекция.Cut();
				
				// перемещаемся вверх , что бы вставить объект2 после начала объект1
				Селекция.MoveUp();
				Селекция.Collapse();
				Селекция.Paste();
				Селекция.SelectRow();

				// Подсчет итогов по объекту
				Отбор.Вставить("ОбъектРабот1", СпОбъектов[ы].Значение);
				ИскСтроки = Работы.НайтиСтроки(Отбор);
				
				// Вывод объектов 2 
				ОбъемНГОбъект = 0;
				СуммаНГОбъект = 0;
				ОбъемТПОбъект = 0;
				СуммаТПОбъект = 0;
				Для каждого Стр Из ИскСтроки Цикл
					
					мРазноеКлиент.Заменить(Поиск, "НаименованиеОбъекта", Строка(Стр.ОбъектРабот2));
					мРазноеКлиент.Заменить(Поиск, "ОбъемНГ", Формат(Стр.ОбъемНГ, "ЧЦ=7; ЧДЦ=3"));
					мРазноеКлиент.Заменить(Поиск, "СуммаНГ", Формат(Стр.СуммаНГ, "ЧДЦ=2; ЧРГ=' '"));
					мРазноеКлиент.Заменить(Поиск, "ОбъемТП", Формат(Стр.ОбъемТП, "ЧЦ=7; ЧДЦ=3"));
					мРазноеКлиент.Заменить(Поиск, "СуммаТП", Формат(Стр.СуммаТП, "ЧДЦ=2; ЧРГ=' '"));
					
					СуммаНГОбъект = СуммаНГОбъект + Стр.СуммаНГ;
					СуммаТПОбъект = СуммаТПОбъект + Стр.СуммаТП;
					ОбъемНГОбъект = ОбъемНГОбъект + Стр.ОбъемНГ;
					ОбъемТПОбъект = ОбъемТПОбъект + Стр.ОбъемТП;
					
					////Перемещаемся вниз, вставляем из буфера обмена строку
					Селекция.MoveLeft();
					Селекция.Collapse();
					Селекция.Paste();
					
					////Перемещаемся вверх и выделяем строку для замены значений
					//Селекция.MoveUp();
					//Селекция.MoveUp();
					Селекция.SelectRow();
					//Прервать;
				КонецЦикла;
				
				// Вывод итога по объекту
				// Переход вниз
				//Селекция.MoveDown();
				Селекция.MoveDown();
				Селекция.SelectRow();
				Селекция.Cut();
				
				// вставка в месте ввода строки
				Селекция.MoveUp();
				Селекция.MoveUp();
				Селекция.Collapse();
				Селекция.Paste();
				Селекция.SelectRow();
				
				//заполняем параметры
				Док.Bookmarks("ВсегоОбъемНГпункт").Range.Text = Формат(ОбъемНГОбъект, "ЧЦ=7; ЧДЦ=3");
				Док.Bookmarks("ВсегоСуммаНГпункт").Range.Text = Формат(СуммаНГОбъект, "ЧДЦ=2; ЧРГ=' '");
				Док.Bookmarks("ВсегоОбъемТПпункт").Range.Text = Формат(ОбъемТПОбъект, "ЧЦ=7; ЧДЦ=3");
				Док.Bookmarks("ВсегоСуммаТПпункт").Range.Text = Формат(СуммаТПОбъект, "ЧДЦ=2; ЧРГ=' '");
				
				// вставка для след итераций
				Селекция.Collapse();
				Селекция.Paste();
				Прервать;
				
	//			ВосстановитьПозициюЗакладки();
	//			
	//			//заполняем параметры
	//			НомерПП = ы+1;
	//			//Док.Bookmarks("НомерПП").Range.Text = "1."+НомерПП+".";
	//			//Док.Bookmarks("НаименованиеОбъекта").Range.Text = Строка(СпОбъектов[ы].Значение);
	//			Док.Bookmarks("ВсегоОбъемНГпункт").Range.Text = Формат(ОбъемНГОбъект, "ЧЦ=4; ЧДЦ=");
	//			Док.Bookmarks("ВсегоСуммаНГпункт").Range.Text = Формат(СуммаНГОбъект, "ЧДЦ=2; ЧРГ=' '");
	//			Док.Bookmarks("ВсегоОбъемТПпункт").Range.Text = Формат(ОбъемТПОбъект, "ЧЦ=4; ЧДЦ=");
	//			Док.Bookmarks("ВсегоСуммаТПпункт").Range.Text = Формат(СуммаТПОбъект, "ЧДЦ=2; ЧРГ=' '");
	//			
	//			// Вывод объектов 2 
	//			//СохранитьПозициюЗакладки("СтрокаТаблицы");
	//			Для каждого Стр Из ИскСтроки Цикл
	//				
	//селекция1.Start = НачалоЗакладки1; // Начало вставки
	//селекция1.Collapse();             // Вставка, а не замещение
	//селекция1.Paste();
	//				
	//				//ВосстановитьПозициюЗакладки();
	//				Док.Bookmarks("НаименованиеОбъекта").Range.Text = Строка(Стр.ОбъектРабот2);
	//				Док.Bookmarks("ОбъемНГ").Range.Text = Формат(Стр.ОбъемНГ, "ЧЦ=4; ЧДЦ=");
	//				Док.Bookmarks("СуммаНГ").Range.Text = Формат(Стр.СуммаНГ, "ЧДЦ=2; ЧРГ=' '");
	//				Док.Bookmarks("ОбъемТП").Range.Text = Формат(Стр.ОбъемТП, "ЧЦ=4; ЧДЦ=");
	//				Док.Bookmarks("СуммаТП").Range.Text = Формат(Стр.СуммаТП, "ЧДЦ=2; ЧРГ=' '");
	//			КонецЦикла;
	//			
	//			// Вывод заголовка объекта1
	//			//СохранитьПозициюЗакладки("СтрокаЗаголовкаОбъекта");
	//			//ВосстановитьПозициюЗакладки();
	//селекция2.Start = НачалоЗакладки2; // Начало вставки
	//селекция2.Collapse();             // Вставка, а не замещение
	//селекция2.Paste();
	//			Док.Bookmarks("НаименованиеОбъектаНачало").Range.Text = Строка(СпОбъектов[ы].Значение);
	//			
	//			
	//			// итоги по виду работ
	//			ВсегоОбъемНГпункт = ВсегоОбъемНГпункт + ОбъемНГОбъект;
	//			ВсегоСуммаНГпункт = ВсегоСуммаНГпункт + СуммаНГОбъект;
	//			ВсегоОбъемТПпункт = ВсегоОбъемТПпункт + ОбъемТПОбъект;
	//			ВсегоСуммаТПпункт = ВсегоСуммаТПпункт + СуммаТПОбъект;
				
				//ы = ы-1;
			КонецЦикла; 
			
			//// Вывод итога по виду работ
			////Док.Bookmarks("НомерПункта").Range.Text = "первому";
			//Док.Bookmarks("ВсегоОбъемНГпункт").Range.Text = Формат(ВсегоОбъемНГпункт, "ЧЦ=4; ЧДЦ=");
			//Док.Bookmarks("ВсегоСуммаНГпункт").Range.Text = Формат(ВсегоСуммаНГпункт, "ЧДЦ=2; ЧРГ=' '");
			//Док.Bookmarks("ВсегоОбъемТПпункт").Range.Text = Формат(ВсегоОбъемТПпункт, "ЧЦ=4; ЧДЦ=");
			//Док.Bookmarks("ВсегоСуммаТПпункт").Range.Text = Формат(ВсегоСуммаТПпункт, "ЧДЦ=2; ЧРГ=' '");
		
			//й=й-1;		
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Итоги таблицы
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемНГ%", Формат(0, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаНГ%", Формат(ВсегоСуммаНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСНГ%", Формат(ВсегоНДСНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемТП%", Формат(0, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаТП%", Формат(ВсегоСуммаТП, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСТП%", Формат(ВсегоНДСТП, "ЧДЦ=2; ЧРГ=' '"));
	
	// Подписи
	ВывестиПодписи();
	
	// Вывод 
	ПоказатьФайлНаЭкран();
КонецПроцедуры
 

	
#КонецОбласти 

#Область ОбщиеПроцедурыПечати
&НаКлиенте
Процедура ИнициализироватьДокументWord() 
	Макет = ПолучитьМакетСервер();
	ВременныйПуть = КаталогВременныхФайлов();
	ПутьКФайлуНаДиске = "Акт "+СокрЛП(НомерАкта)+".docx";
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "/", "_");
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "\", "_");
	ПутьКФайлуНаДиске = ВременныйПуть + ПутьКФайлуНаДиске;
	Макет.Записать(ПутьКФайлуНаДиске);
	
	WordApp = Новый COMОбъект("Word.Application");
	Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
	
	Селекция = WordApp.Selection;
	
	Поиск = Док.Content.Find;
	Поиск.ClearFormatting();
	Поиск.Replacement.ClearFormatting();
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиРеквизитыСторон()
	СтруктураНашихРеквизитов = мРаботаСДоговорами.ПолучитьНашиРеквизиты(Договор);
	Для каждого Реквизит Из СтруктураНашихРеквизитов Цикл
		Если Реквизит.Ключ = "НашеНаименование" Тогда
			_Наим = ПреобразоватьКавычки(Реквизит.Значение);
			мРазноеКлиент.Заменить(Поиск, "НашеНаименование", _Наим);  
		Иначе	
			мРазноеКлиент.Заменить(Поиск, Реквизит.Ключ, Реквизит.Значение);  
		КонецЕсли; 
	КонецЦикла; 
	
	РеквЗак = ПолучитьРеквизитыЗаказчика(Корреспондент);
	Для каждого Рекв Из РеквЗак Цикл
		_Знач = Рекв.Значение;
		Если Рекв.Ключ = "РасчетныйСчет" Тогда
			_Знач = ПреобразоватьКавычки(_Знач);
		КонецЕсли; 
		мРазноеКлиент.Заменить(Поиск, "%"+Рекв.Ключ+"%", _Знач);  
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ВывестиШтрихКод()
	ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Акт, Ложь, Истина);
	Если ДанныеОШтрихкоде <> Неопределено
		И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
		
		// Запись картинки штрихкода во временный файл
		ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
		ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
		
		Док.Bookmarks("Штрихкод").Range.Select();
		Селекция = WordApp.Selection; // активная (выделенная) область 
		Рисунок = Селекция.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
		
		// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
		Shape = Рисунок.ConvertToShape();
		Shape.WrapFormat.Type = 0; // по контуру...
		
		УдалитьФайлы(ВременныйФайлКартинки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиШапкуАкта()
	РегНомер = НомерДоговора;
	ДатаРег = Формат(ДатаДоговора,"ДЛФ=D");

	мРазноеКлиент.Заменить(Поиск, "НомерДатаДоговора", РегНомер+" от "+ДатаРег);  
	мРазноеКлиент.Заменить(Поиск, "НомерАкта", НомерАкта); 
	мРазноеКлиент.Заменить(Поиск, "ДатаАкта", ДатаАкта); 
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуАкта()
	Если ЭтоОбновление ИЛИ ЭтоЭксплуатация Тогда
		ВывестиТаблицуАктаОбновления();
	ИначеЕсли ЭтоКадастроваяОценка Тогда
		ВывестиТаблицуКадастроваяОценка();
	Иначе
		Возврат;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуАктаОбновления()
	НачалоЗакладки = Док.Bookmarks("СтрокаТаблицы").Start;
	КонецЗакладки = Док.Bookmarks("СтрокаТаблицы").End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End = КонецЗакладки;
	Селекция.Cut();
	
	й = Работы.Количество()-1;
	Пока й >= 0 Цикл
		селекция.Start = НачалоЗакладки; // Начало вставки
		селекция.Collapse();             // Вставка, а не замещение
		селекция.Paste();
		
		//заполняем параметры
		НомерПП = й+1;
		Док.Bookmarks("НомерПП").Range.Text = НомерПП;
		Док.Bookmarks("НаименованиеОбъекта").Range.Text = Строка(Работы[й].ОбъектРабот1);
		Док.Bookmarks("ОбъемНГ").Range.Text = Формат(Работы[й].ОбъемНГ, "ЧЦ=4; ЧДЦ=");
		Док.Bookmarks("СуммаНГ").Range.Text = Формат(Работы[й].СуммаНГ, "ЧДЦ=2; ЧРГ=' '");
		Док.Bookmarks("ОбъемТП").Range.Text = Формат(Работы[й].ОбъемТП, "ЧЦ=4; ЧДЦ=");
		Док.Bookmarks("СуммаТП").Range.Text = Формат(Работы[й].СуммаТП, "ЧДЦ=2; ЧРГ=' '");
	    й=й-1;		
	КонецЦикла; 
	
	// Итоги таблицы
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемНГ%", Формат(ВсегоОбъемНГ, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаНГ%", Формат(ВсегоСуммаНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСНГ%", Формат(ВсегоНДСНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемТП%", Формат(ВсегоОбъемТП, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаТП%", Формат(ВсегоСуммаТП, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСТП%", Формат(ВсегоНДСТП, "ЧДЦ=2; ЧРГ=' '"));
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуКадастроваяОценка()
	// Определить количество видов работ
	ПолучитьСпискиВидовРабот();
	
	// Вывод строк видов работ с объектами
	КоличествоВРсОбъектами = СпВидовРаботСОбъектами.Количество();
	
	Если КоличествоВРсОбъектами = 0 Тогда
		// ни одного
	
	ИначеЕсли КоличествоВРсОбъектами > 2 Тогда
		// Несколько -
	
	Иначе
		// один ВР
		
		// Вывод заголовка ВР
		Док.Bookmarks("НаименованиеГруппыВР").Range.Text = Строка(СпВидовРаботСОбъектами[0].Представление);
		Док.Bookmarks("НомерВРсОбъектами").Range.Text = "1";
		Док.Bookmarks("ВидРаботСДетализациейПоОбъектам").Range.Text = Строка(СпВидовРаботСОбъектами[1].Представление);
		
		// итоги по виду работ
		ВсегоОбъемНГпункт = 0;
		ВсегоСуммаНГпункт = 0;
		ВсегоОбъемТПпункт = 0;
		ВсегоСуммаТПпункт = 0;
		
		// вывод списка объектов
		СохранитьПозициюЗакладки("СтрокаТаблицы");
		
		й = КоличествоВРсОбъектами/2-1;
		
		Пока й >= 0 Цикл
			
			Отбор = Новый Структура("ВидРабот", СпВидовРаботСОбъектами[2*й+1].Значение); 
			ИскСтроки = Работы.НайтиСтроки(Отбор);
			
			// Получим СпОбъектов по конкретному ВР
			СпОбъектов = Новый СписокЗначений;
			Для каждого Стр Из ИскСтроки Цикл
				Если СпОбъектов.НайтиПоЗначению(Стр.ОбъектРабот1) = Неопределено Тогда
					СпОбъектов.Добавить(Стр.ОбъектРабот1, Строка(Стр.ОбъектРабот1));
				КонецЕсли; 
			КонецЦикла; 
			
			КоличествоОбъектов = СпОбъектов.Количество();
			
			// Вывод итогов по объектам в обратном порядке
			ы = КоличествоОбъектов-1;
			Пока ы >= 0 Цикл
				
				// Подсчет итогов по объекту
				Отбор.Вставить("ОбъектРабот1", СпОбъектов[ы].Значение);
				ИскСтроки = Работы.НайтиСтроки(Отбор);
				
				ОбъемНГОбъект = 0;
				СуммаНГОбъект = 0;
				ОбъемТПОбъект = 0;
				СуммаТПОбъект = 0;
				Для каждого Стр Из ИскСтроки Цикл
					СуммаНГОбъект = СуммаНГОбъект + Стр.СуммаНГ;
					СуммаТПОбъект = СуммаТПОбъект + Стр.СуммаТП;
				КонецЦикла;
				ОбъемНГОбъект = ?(СуммаНГОбъект>0, 1, 0);
				ОбъемТПОбъект = ?(СуммаТПОбъект>0, 1, 0);
				
				// Вывод итога по объекту
				ВосстановитьПозициюЗакладки();
				
				//заполняем параметры
				НомерПП = ы+1;
				Док.Bookmarks("НомерПП").Range.Text = "1."+НомерПП+".";
				Док.Bookmarks("НаименованиеОбъекта").Range.Text = Строка(СпОбъектов[ы].Значение);
				Док.Bookmarks("ОбъемНГ").Range.Text = Формат(ОбъемНГОбъект, "ЧЦ=4; ЧДЦ=");
				Док.Bookmarks("СуммаНГ").Range.Text = Формат(СуммаНГОбъект, "ЧДЦ=2; ЧРГ=' '");
				Док.Bookmarks("ОбъемТП").Range.Text = Формат(ОбъемТПОбъект, "ЧЦ=4; ЧДЦ=");
				Док.Bookmarks("СуммаТП").Range.Text = Формат(СуммаТПОбъект, "ЧДЦ=2; ЧРГ=' '");
				
				// итоги по виду работ
				ВсегоОбъемНГпункт = ВсегоОбъемНГпункт + ОбъемНГОбъект;
				ВсегоСуммаНГпункт = ВсегоСуммаНГпункт + СуммаНГОбъект;
				ВсегоОбъемТПпункт = ВсегоОбъемТПпункт + ОбъемТПОбъект;
				ВсегоСуммаТПпункт = ВсегоСуммаТПпункт + СуммаТПОбъект;
				
				ы = ы-1;
			КонецЦикла; 
			
			// Вывод итога по виду работ
			Док.Bookmarks("НомерПункта").Range.Text = "первому";
			Док.Bookmarks("ВсегоОбъемНГпункт").Range.Text = Формат(ВсегоОбъемНГпункт, "ЧЦ=4; ЧДЦ=");
			Док.Bookmarks("ВсегоСуммаНГпункт").Range.Text = Формат(ВсегоСуммаНГпункт, "ЧДЦ=2; ЧРГ=' '");
			Док.Bookmarks("ВсегоОбъемТПпункт").Range.Text = Формат(ВсегоОбъемТПпункт, "ЧЦ=4; ЧДЦ=");
			Док.Bookmarks("ВсегоСуммаТПпункт").Range.Text = Формат(ВсегоСуммаТПпункт, "ЧДЦ=2; ЧРГ=' '");
		
			й=й-1;		
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Вывод строк видов работ без объектов	
	Если СпВидовРаботБезОбъектов.Количество() = 0 Тогда
	
	Иначе
		СохранитьПозициюЗакладки("СтрокаТаблицыВР");
		
		й = СпВидовРаботБезОбъектов.Количество()-1;
		
		Пока й >= 0 Цикл
			ВосстановитьПозициюЗакладки();
			
			Отбор = Новый Структура("ВидРабот", СпВидовРаботБезОбъектов[й].Значение); 
			ИскСтроки = Работы.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() > 0 Тогда
				//заполняем параметры
				НомерВР = й+2;
				Док.Bookmarks("НомерВР").Range.Text = НомерВР;
				Док.Bookmarks("НаименованиеВР").Range.Text = Строка(СпВидовРаботБезОбъектов[й].Представление);
				Док.Bookmarks("ОбъемНГВР").Range.Text = Формат(ИскСтроки[0].ОбъемНГ, "ЧЦ=4; ЧДЦ=");
				Док.Bookmarks("СуммаНГВР").Range.Text = Формат(ИскСтроки[0].СуммаНГ, "ЧДЦ=2; ЧРГ=' '");
				Док.Bookmarks("ОбъемТПВР").Range.Text = Формат(ИскСтроки[0].ОбъемТП, "ЧЦ=4; ЧДЦ=");
				Док.Bookmarks("СуммаТПВР").Range.Text = Формат(ИскСтроки[0].СуммаТП, "ЧДЦ=2; ЧРГ=' '");
			КонецЕсли; 
			
			й=й-1;		
		КонецЦикла; 
	
	КонецЕсли; 
	
	// Итоги таблицы
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемНГ%", Формат(0, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаНГ%", Формат(ВсегоСуммаНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСНГ%", Формат(ВсегоНДСНГ, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоОбъемТП%", Формат(0, "ЧЦ=4; ЧДЦ="));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоСуммаТП%", Формат(ВсегоСуммаТП, "ЧДЦ=2; ЧРГ=' '"));
	мРазноеКлиент.Заменить(Поиск, "%ВсегоНДСТП%", Формат(ВсегоНДСТП, "ЧДЦ=2; ЧРГ=' '"));
КонецПроцедуры

&НаСервере
Функция ПолучитьСпискиВидовРабот()
	СпВидовРаботБезОбъектов.Очистить();
	СпВидовРаботСОбъектами.Очистить();
	
	Для каждого Стр Из Работы Цикл
		Если Стр.ОбъектРабот1.Наименование = "Не установлен" Тогда
			СпВидовРаботБезОбъектов.Добавить(Стр.ВидРабот, Стр.ВидРабот.ПолноеНаименование);
		Иначе
			Если СпВидовРаботСОбъектами.НайтиПоЗначению(Стр.ВидРабот) = Неопределено Тогда
				Если ЗначениеЗаполнено(Стр.ВидРабот.Родитель) Тогда
					СпВидовРаботСОбъектами.Добавить(Стр.ВидРабот.Родитель, Стр.ВидРабот.Родитель.ПолноеНаименование);
				КонецЕсли; 
				СпВидовРаботСОбъектами.Добавить(Стр.ВидРабот, Стр.ВидРабот.ПолноеНаименование);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура СохранитьПозициюЗакладки(ИмяЗакладки)
	НачалоЗакладки = Док.Bookmarks(ИмяЗакладки).Start;
	КонецЗакладки = Док.Bookmarks(ИмяЗакладки).End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End = КонецЗакладки;
	Селекция.Cut();
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПозициюЗакладки()
	селекция.Start = НачалоЗакладки; // Начало вставки
	селекция.Collapse();             // Вставка, а не замещение
	селекция.Paste();
КонецПроцедуры
 
 

&НаКлиенте
Процедура ВывестиПримечание()
	Если ЭтоОбновление ИЛИ ЭтоЭксплуатация ИЛИ ЭтоКадастроваяОценка Тогда
		мРазноеКлиент.Заменить(Поиск, "СодержаниеПримечания", ПреобразоватьКавычки(СодержаниеПримечания));
	Иначе
	КонецЕсли; 	
КонецПроцедуры
 
&НаКлиенте
Процедура ВывестиПодписи()
	мРазноеКлиент.Заменить(Поиск, "ПодписалКратко1", ПодписалБГЗ1строкой);
	мРазноеКлиент.Заменить(Поиск, "ПодписалДолжность1", ПреобразоватьКавычки(ДолжностьБГЗ1));
	мРазноеКлиент.Заменить(Поиск, "ПодписалКратко2", ПодписалБГЗ2строкой);
	мРазноеКлиент.Заменить(Поиск, "ПодписалДолжность2", ПреобразоватьКавычки(ДолжностьБГЗ2));
	
	мРазноеКлиент.Заменить(Поиск, "КорреспондентКратко1", ПодписалГКИ1строкой);
	мРазноеКлиент.Заменить(Поиск, "ДолжностьКорр1", ПреобразоватьКавычки(ДолжностьГКИ1));
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьФайлНаЭкран()
	Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
	Док.Saved = Истина;
	
	Если СоздатьАкт Тогда
		Док.Close(); 
		WordApp.Visible = Ложь; 
		
		// Сохранить в Акт вып работ
		КарточкаФайла = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, Акт, ЭтаФорма, Истина, , , , ,);
		
		// Открытие файла на редактирование из карточки в списке файлов договора
		КомандыРаботыСФайламиКлиент.Редактировать(КарточкаФайла);
		
	Иначе
		WordApp.Quit();	
		WordApp = Неопределено;
		// Открытие на просмотр файла
		ЗапуститьПриложение(ПутьКФайлуНаДиске, , , ); 
	КонецЕсли; 
КонецПроцедуры
 
#КонецОбласти 

&НаСервере
Функция ПолучитьРеквизитыЗаказчика(Корреспондент)
	Таб = мРаботаСДоговорами.ПолучитьДанныеЮрЛиц(Корреспондент);
	РеквЗак = Новый Структура;
	РеквЗак.Вставить("Заказчик", Таб[0].ПолноеНаименованиеКорр);
	РеквЗак.Вставить("Адрес", Таб[0].ЮридическийАдрес);
	РеквЗак.Вставить("РасчетныйСчет", "р/с "+Таб[0].НомерСчетаКорр + " " + Таб[0].БанкКорр + ", МФО " + Таб[0].КодБанкаКорр);
	РеквЗак.Вставить("УНП", Таб[0].УНПКорр);
	РеквЗак.Вставить("ОКПО", Таб[0].ОКПОКорр);
	Возврат РеквЗак;
КонецФункции

&НаСервере
Функция ПолучитьМакетСервер()
	Если ЭтоОбновление Тогда
		Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктГКИ_Обновление");
	ИначеЕсли ЭтоЭксплуатация Тогда
		Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктГКИ_Эксплуатация");
	ИначеЕсли ЭтоКадастроваяОценка Тогда
		Если ЭтоПечатьРасшифровки Тогда
			Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктГКИ_КадастроваяОценка_Расшифровка");
		Иначе
			Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_DOCX_АктГКИ_КадастроваяОценка");
		КонецЕсли; 
	Иначе
		Сообщить("Печатная форма еще не разработана для вида работ: "+ ЭтапДоговора.ВидРабот);
	КонецЕсли; 
КонецФункции
 
// Возвращает Фимилию и инициалы из полного наименования
//
// Параметры:
//  ПолноеНаименование  - <Строка> - Фамилия Имя Отчетство
//
// Возвращаемое значение:
//   <Строка>   - Фамилия И.О.
//
&НаСервере
Функция ПолучитьЗаказчикаКратко(ПолноеНаименование)
	Возврат ФизическиеЛица.ФамилияИнициалыФизЛица(ПолноеНаименование);
КонецФункции 
 
&НаКлиенте
Функция СформироватьСуммуПрописью()
	СтоимостьАкта = мРаботаСДоговорами.СуммаЧисломИПрописью(ВсегоСуммаТП);
	Если ВсегоНДСТП > 0 Тогда
		СуммаНДСПрописьюПолная = мРаботаСДоговорами.СуммаЧисломИПрописью(ВсегоНДСТП);
		СтоимостьАкта = СтоимостьАкта + ", в том числе НДС (" + СтавкаНДССтрокой +") " + СуммаНДСПрописьюПолная;
	КонецЕсли;
//"1 259 252,72 руб. (Один миллион двести пятьдесят девять тысяч двести пятьдесят два белорусских рубля 72 копейки), в том числе НДС (20%) 209 875,46 руб. (Двести девять тысяч восемьсот семьдесят пять белорусских рублей 46 копеек).	"
	// уборка руб.
	СтоимостьАкта = СтрЗаменить(СтоимостьАкта, "руб. ", "");
	// перенос скобок
	СтоимостьАкта = СтрЗаменить(СтоимостьАкта, ")", "");
	СтоимостьАкта = СтрЗаменить(СтоимостьАкта, " бел", ") бел");
	СтоимостьАкта = СтрЗаменить(СтоимостьАкта, "%", "%)");
	
	мРазноеКлиент.Заменить(Поиск, "СтоимостьАкта", СтоимостьАкта);

	Возврат СтоимостьАкта;
КонецФункции 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//Если Настройки.Получить("ПечатьСразуНаПринтер") Тогда
	//	Элементы.Копий.Доступность = Истина;
	//Иначе
	//	Элементы.Копий.Доступность = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьКавычки(Текст)
	Если СокрЛП(Текст) = "" Тогда
		Возврат Текст;
	КонецЕсли; 
	
	ЧислоКавычек = СтрЧислоВхождений(Текст, Символ(34));
	Если ЧислоКавычек = 0 Тогда
		Возврат Текст;
	КонецЕсли; 
	
	_Наим = Текст;
	
	Для й = 1 По ЧислоКавычек Цикл
		ПерваяКавычка = СтрНайти(Текст, Символ(34));
		_Наим = Лев(_Наим, ПерваяКавычка-1)+Символ(8221)+Сред(_Наим, ПерваяКавычка+1);
	
		ВтораяКавычка = СтрНайти(_Наим, Символ(34));
		Если ВтораяКавычка > 0 Тогда
			_Наим = Лев(_Наим, ВтораяКавычка-1)+Символ(8220)+Сред(_Наим, ВтораяКавычка+1);
		КонецЕсли;
		
	    й=й+1;
	КонецЦикла; 
	
	Возврат _Наим;
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДиалогом()
	Если ЭтоОбновление Тогда
		Элементы.ГруппаПодписалДолжностьГКИ2.Видимость = Ложь;
	ИначеЕсли ЭтоЭксплуатация Тогда
		Элементы.ГруппаПодписалДолжностьГКИ2.Видимость = Истина;
	ИначеЕсли ЭтоКадастроваяОценка Тогда
		Элементы.ГруппаПодписалДолжностьГКИ2.Видимость = Ложь;
	КонецЕсли; 	
КонецПроцедуры

 
 


 

