&НаКлиенте
Перем ЗаданиеАктивно;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РежимВосстановления = Параметры.РежимВосстановления ИЛИ Параметры.РежимВосстановленияПослеПредоставленияРазрешений;
	РежимВосстановленияПослеПредоставленияРазрешений = Параметры.РежимВосстановленияПослеПредоставленияРазрешений;
	
	АдресХранилища = НачатьОбработкуЗапросов(
		Параметры.Идентификаторы,
		РежимВосстановления,
		Параметры.РежимВключения,
		Параметры.РежимОтключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаданиеАктивно = Истина;
	ИтерацияПроверки = 1;
	ПодключитьОбработчикОжидания("ПроверитьОбработкуЗапросов", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗаданиеАктивно Тогда
		
		ОтменитьОбработкуЗапросов(ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция НачатьОбработкуЗапросов(Знач Запросы, Знач РежимВосстановления, Знач РежимВключения, РежимОтключения)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	
	Если РежимВключения Тогда
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(РежимВосстановления);
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		ПараметрыВызоваМетода = Новый Массив();
		ПараметрыВызоваМетода.Добавить("Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ВыполнитьОбработкуЗапросовОбновления");
		ПараметрыВызоваМетода.Добавить(ПараметрыЗадания);
		
	ИначеЕсли РежимОтключения Тогда
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(РежимВосстановления);
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		ПараметрыВызоваМетода = Новый Массив();
		ПараметрыВызоваМетода.Добавить("Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ВыполнитьОбработкуЗапросовОтключения");
		ПараметрыВызоваМетода.Добавить(ПараметрыЗадания);
		
	ИначеЕсли РежимВосстановления Тогда
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(РаботаВБезопасномРежимеСлужебный.ИдентификаторыОбрабатываемыхЗапросов(Запросы));
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		ПараметрыВызоваМетода = Новый Массив();
		ПараметрыВызоваМетода.Добавить("Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ВыполнитьОбработкуЗапросовВосстановления");
		ПараметрыВызоваМетода.Добавить(ПараметрыЗадания);
		
	Иначе
		
		ПараметрыЗадания = Новый Массив();
		ПараметрыЗадания.Добавить(РаботаВБезопасномРежимеСлужебный.ИдентификаторыОбрабатываемыхЗапросов(Запросы));
		ПараметрыЗадания.Добавить(РежимВосстановления);
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		ПараметрыВызоваМетода = Новый Массив();
		ПараметрыВызоваМетода.Добавить("Обработки.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.ВыполнитьОбработкуЗапросов");
		ПараметрыВызоваМетода.Добавить(ПараметрыЗадания);
		
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации",
			ПараметрыВызоваМетода,
			,
			НСтр("ru = 'Обработка запросов на использование внешних ресурсов...'"));
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОбработкуЗапросов()
	
	Попытка
		Готовность = ЗапросыОбработаны(ИдентификаторЗадания);
	Исключение
		ОтключитьОбработчикОжидания("ПроверитьОбработкуЗапросов");
		ЗаданиеАктивно = Ложь;
		Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Готовность Тогда
		ОтключитьОбработчикОжидания("ПроверитьОбработкуЗапросов");
		ЗаданиеАктивно = Ложь;
		ЗавершитьОбработкуЗапросов();
	Иначе
		
		ИтерацияПроверки = ИтерацияПроверки + 1;
		
		Если ИтерацияПроверки = 2 Тогда
			ОтключитьОбработчикОжидания("ПроверитьОбработкуЗапросов");
			ПодключитьОбработчикОжидания("ПроверитьОбработкуЗапросов", 5);
		ИначеЕсли ИтерацияПроверки = 3 Тогда
			ОтключитьОбработчикОжидания("ПроверитьОбработкуЗапросов");
			ПодключитьОбработчикОжидания("ПроверитьОбработкуЗапросов", 12);
		Иначе
			ОтключитьОбработчикОжидания("ПроверитьОбработкуЗапросов");
			ПодключитьОбработчикОжидания("ПроверитьОбработкуЗапросов", 30);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросыОбработаны(Знач ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ВызватьИсключение(НСтр("ru = 'При обработке запросов произошла ошибка - не найдено задание обработки запросов.'"));
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ВызватьИсключение(ПодробноеПредставлениеОшибки(ОшибкаЗадания));
		Иначе
			ВызватьИсключение(НСтр("ru = 'При обработке запросов произошла ошибка - задание обработки запросов завершилось с неизвестной ошибкой.'"));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ВызватьИсключение(НСтр("ru = 'При обработке запросов произошла ошибка - задание обработки запросов было отменено администратором.'"));
	Иначе
		ИдентификаторЗадания = Неопределено;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуЗапросов()
	
	ОписаниеОповещения = ЭтотОбъект.ОписаниеОповещенияОЗакрытии;
	ЭтотОбъект.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытия", ЭтотОбъект, ОписаниеОповещения);
	
	Если Открыта() Тогда
		
		Закрыть();
		
	Иначе
		
		ПослеЗакрытия(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьОбработкуЗапросов(Знач ИдентификаторЗадания)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание = Неопределено ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Настройка разрешений на использование внешних ресурсов.Отмена выполнения фонового задания'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытия(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ХранилищеРезультатаОбработкиЗапросов", АдресХранилища);
	ПараметрыФормы.Вставить("РежимВосстановления", РежимВосстановления);
	ПараметрыФормы.Вставить("РежимВосстановленияПослеПредоставленияРазрешений", РежимВосстановленияПослеПредоставленияРазрешений);
	
	ОткрытьФорму(
		"Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.Форма.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов",
		ПараметрыФормы,
		ЭтотОбъект.ВладелецФормы,
		,
		,
		,
		ОписаниеОповещения,
		ЭтотОбъект.РежимОткрытияОкна
	);
	
КонецПроцедуры

#КонецОбласти