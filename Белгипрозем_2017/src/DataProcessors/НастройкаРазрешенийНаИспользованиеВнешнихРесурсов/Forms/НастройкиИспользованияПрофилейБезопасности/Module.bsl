&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	Если Не РаботаВБезопасномРежимеСлужебный.ВозможноИспользованиеПрофилейБезопасности() Тогда
		ВызватьИсключение НСтр("ru = 'Использование профилей безопасности недоступно для данной конфигурации!'");
	КонецЕсли;
	
	Если Не РаботаВБезопасномРежимеСлужебный.ДоступнаНастройкаПрофилейБезопасности() Тогда
		ВызватьИсключение НСтр("ru = 'Настройка профилей безопасности недоступна!'");
	КонецЕсли;
	
	Если Не РежимРаботы.ЭтоАдминистраторСистемы Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа!'");
	КонецЕсли;
	
	// Настройки видимости при запуске
	ПрочитатьРежимИспользованияПрофилейБезопасности();
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимИспользованияПрофилейБезопасностиПриИзменении(Элемент)
	
	Попытка
		
		НачатьПрименениеНастроекПрофилейБезопасности(ЭтаФорма.УникальныйИдентификатор);
		
		ПредыдущийРежим = ТекущийРежимИспользованияПрофилейБезопасности();
		НовыйРежим = РежимИспользованияПрофилейБезопасности;
		
		Если (ПредыдущийРежим <> НовыйРежим) И (ПредыдущийРежим = 2 Или НовыйРежим = 2) Тогда
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПомощникаПримененияИзмененийВПрофиляхБезопасности", ЭтотОбъект, Истина);
			
			ПараметрыФормы = Новый Структура();
			Если НовыйРежим = 2 Тогда
				ПараметрыФормы.Вставить("РежимВключения", Истина);
			Иначе
				ПараметрыФормы.Вставить("РежимОтключения", Истина);
			КонецЕсли;
			
			ОткрытьФорму(
				"Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.Форма.ИнициализацияЗапросаРазрешений",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
			);
			
		Иначе
			
			УстановитьДоступность("РежимИспользованияПрофилейБезопасности");
			
		КонецЕсли;
		
	Исключение
		
		ПрочитатьРежимИспользованияПрофилейБезопасности();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТребуемыеРазрешения(Команда)
	
	ИдентификаторыЗапросов = НачатьВосстановлениеНастроекПрофилейБезопасности(ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторыЗапросов", ИдентификаторыЗапросов);
	
	ОткрытьФорму(
		"Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.Форма.ПросмотрРазрешений",
		ПараметрыФормы,
		ЭтотОбъект);
	
	УстановитьИгнорированиеТекущихНастроекПрофилейБезопасности(ЭтаФорма.УникальныйИдентификатор, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПрофилиБезопасности(Команда)
	
	Попытка
		
		НачатьПрименениеНастроекПрофилейБезопасности(ЭтаФорма.УникальныйИдентификатор);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПомощникаПримененияИзмененийВПрофиляхБезопасности", ЭтотОбъект, Истина);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимВключения", Истина);
		ПараметрыФормы.Вставить("РежимВосстановления", Истина);
		
		ОткрытьФорму(
			"Обработка.НастройкаРазрешенийНаИспользованиеВнешнихРесурсов.Форма.ИнициализацияЗапросаРазрешений",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОповещениеОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
		
	Исключение
		
		ПрочитатьРежимИспользованияПрофилейБезопасности();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПомощникаПримененияИзмененийВПрофиляхБезопасности(Результат, ТребуетсяПерезапускКлиентскогоПриложения) Экспорт
	
	УстановитьИгнорированиеТекущихНастроекПрофилейБезопасности(ЭтаФорма.УникальныйИдентификатор, Ложь);
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗавершитьПрименениеНастроекПрофилейБезопасности();
	КонецЕсли;
	
	ПрочитатьРежимИспользованияПрофилейБезопасности();
	
	Если Результат = КодВозвратаДиалога.ОК И ТребуетсяПерезапускКлиентскогоПриложения Тогда
		ПрекратитьРаботуСистемы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РежимРаботы.ЭтоАдминистраторСистемы Тогда
		
		Если РеквизитПутьКДанным = "РежимИспользованияПрофилейБезопасности" ИЛИ РеквизитПутьКДанным = "" Тогда
			
			Элементы.ГруппаПрофилиБезопасностиКолонкаПравая.Доступность = РежимИспользованияПрофилейБезопасности > 0;
			
			Элементы.ПрофильБезопасностиИнформационнойБазы.ТолькоПросмотр = (РежимИспользованияПрофилейБезопасности = 2);
			Элементы.ГруппаВосстановлениеПрофилейБезопасности.Доступность = (РежимИспользованияПрофилейБезопасности = 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРежимИспользованияПрофилейБезопасности()
	
	РежимИспользованияПрофилейБезопасности = ТекущийРежимИспользованияПрофилейБезопасности();
	УстановитьДоступность("РежимИспользованияПрофилейБезопасности");
	
КонецПроцедуры

&НаСервере
Функция ТекущийРежимИспользованияПрофилейБезопасности()
	
	Если РаботаВБезопасномРежимеСлужебный.ВозможноИспользованиеПрофилейБезопасности() И ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности") Тогда
		
		Если Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Получить() Тогда
			
			Результат = 2; // Из текущей ИБ
			
		Иначе
			
			Результат = 1; // Через консоль кластера
			
		КонецЕсли;
		
	Иначе
		
		Результат = 0; // Не используются
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НачатьПрименениеНастроекПрофилейБезопасности(Знач УникальныйИдентификатор)
	
	Если Не РаботаВБезопасномРежимеСлужебный.ВозможноИспользованиеПрофилейБезопасности() Тогда
		ВызватьИсключение НСтр("ru = 'Включение автоматического запроса разрешений недоступно!'");
	КонецЕсли;
	
	УстановитьМонопольныйРежим(Истина);
	УстановитьИгнорированиеТекущихНастроекПрофилейБезопасности(УникальныйИдентификатор, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьВосстановлениеНастроекПрофилейБезопасности(Знач УникальныйИдентификатор)
	
	УстановитьИгнорированиеТекущихНастроекПрофилейБезопасности(УникальныйИдентификатор, Истина);
	Запросы = РаботаВБезопасномРежимеСлужебный.ЗапросыНаОбновлениеРазрешенийКонфигурации();
	Возврат Запросы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИгнорированиеТекущихНастроекПрофилейБезопасности(Знач УникальныйИдентификатор, Знач Режим = Истина)
	
	Если Режим Тогда
		
		ЗаблокироватьДанныеДляРедактирования(РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ(), , УникальныйИдентификатор);
		
	Иначе
		
		РазблокироватьДанныеДляРедактирования(РаботаВБезопасномРежимеСлужебныйПовтИсп.СлужебныйИОМ(), УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПрименениеНастроекПрофилейБезопасности()
	
	Если РежимИспользованияПрофилейБезопасности = 0 Тогда
		
		Константы.ИспользуютсяПрофилиБезопасности.Установить(Ложь);
		Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Установить(Ложь);
		Константы.ПрофильБезопасностиИнформационнойБазы.Установить("");
		
	ИначеЕсли РежимИспользованияПрофилейБезопасности = 1 Тогда
		
		Константы.ИспользуютсяПрофилиБезопасности.Установить(Истина);
		Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Установить(Ложь);
		
	ИначеЕсли РежимИспользованияПрофилейБезопасности = 2 Тогда
		
		Константы.ИспользуютсяПрофилиБезопасности.Установить(Истина);
		Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Установить(Истина);
		
	КонецЕсли;
	
	Если МонопольныйРежим() Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
