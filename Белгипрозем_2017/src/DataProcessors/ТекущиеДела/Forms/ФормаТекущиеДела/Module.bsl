////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;		
	
	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Для каждого ГруппаСтрока Из Элементы.ГруппаТекущиеДела.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ГруппаСтрока) = Тип("ГруппаФормы") Тогда
			Для каждого ГруппаКолонка Из ГруппаСтрока.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ГруппаКолонка) = Тип("ГруппаФормы") Тогда
					ГруппаКолонка.Видимость = Ложь;	
				КонецЕсли;	
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла; 
	
	НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
	
	СформироватьДеревоПоказателей();
	
	ЗагрузитьДанныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
	ПодключитьОбработчикОжидания("ОбновитьВремяОбновленияФормы", 60);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Перем ОбновитьСписокПоследних; // Признак обновления списка последних
	
	ОбновитьСписокПоследних = Ложь;
	ОбновитьРабочийСтол = Ложь;
	
	Если ИмяСобытия = "ОбновитьСписокПоследних" Тогда		
		Если ПоследниеОткрытиеИзСписка Тогда
			ПоследниеОткрытиеИзСписка = Ложь;			
		Иначе
			ОбновитьСписокПоследних = Истина;		
		КонецЕсли;				
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда		
		ОбновитьСписокПоследних = Истина;        		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЕжедневныйОтчет" Тогда
		ОбновитьРабочийСтол = Истина;
	КонецЕсли;
	
	Если ОбновитьРабочийСтол Тогда
		ОбновитьДанныеРабочегоСтола();
	ИначеЕсли ОбновитьСписокПоследних Тогда
		СтрокаДерева = ТекущиеДелаКлиент.ПолучитьСтрокуДереваПоказателей(
			ДеревоПоказателей, 
			"СписокПоследние");
			
		Если СтрокаДерева.Отображать Тогда
			ОбновитьСписокПоследние();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПоказательНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНажатиеПоказателя(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетВремениДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Расшифровка) Тогда
		ЕжедневныйОтчет = ПолучитьЕжедневныйОтчетНаДату(Расшифровка);
		Если ЗначениеЗаполнено(ЕжедневныйОтчет) Тогда
			ПоказатьЗначение(, ЕжедневныйОтчет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрафикНагрузкиДиаграммаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокИзбранное

&НаКлиенте
Процедура ИзбранноеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ИзбранноеУдалитьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзбранноеПерейтиВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;	
	Если Не Копирование Тогда
		ИзбранноеДобавитьВыполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ОбъектПринятый Из ПараметрыПеретаскивания.Значение Цикл
			Ссылка = ПолучитьНавигационнуюСсылку(ОбъектПринятый);
			
			ТекстОшибки = "";
			Если Не ИзбранноеДобавитьСсылкуИОбновитьСписокСервер(
				Ссылка, 
				ТекстОшибки, 
				ОбъектПринятый) Тогда
				
				ПоказатьПредупреждение(, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокПоследние

&НаКлиенте
Процедура ПоследниеСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипТекущейСтроки = ТипЗнч(Элементы.СписокПоследние.ТекущаяСтрока);
	Если ТипТекущейСтроки = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда	
		Возврат;
	КонецЕсли;
	
	ПоследниеОткрытиеИзСписка = Истина;
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Объект) = Тип("СправочникСсылка.Файлы") Тогда
		
		ВыбраннаяСтрока = Элемент.ТекущиеДанные.Объект;
		
		НастройкиРаботы = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
		
		КакОткрывать = НастройкиРаботы.ДействиеПоДвойномуЩелчкуМыши;
		
		Если КакОткрывать = "ОткрыватьКарточку" Тогда
			ПоказатьЗначение(,ВыбраннаяСтрока);
			ПоследниеПереместитьСтрокуВНачало(Элементы.СписокПоследние.ТекущаяСтрока);
			Возврат;
		КонецЕсли;
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
			Неопределено, УникальныйИдентификатор, Неопределено, ПоследниеПредыдущийАдресФайла);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
		
		РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
		
	Иначе
		ПоследниеОткрытьЗначениеСписка(Элемент.ТекущиеДанные.Объект);
		ПоследниеПереместитьСтрокуВНачало(Элементы.СписокПоследние.ТекущаяСтрока);
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Обработчик, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ПоследниеПереместитьСтрокуВНачало(Элементы.СписокПоследние.ТекущаяСтрока);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоследниеСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоследниеОткрытьЗначениеСписка(Элемент.ТекущиеДанные.Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСписокПриАктивизацииСтроки(Элемент)
	
	ПоследниеУстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение.Очистить();
	ПараметрыПеретаскивания.Значение.Добавить(Элементы.СписокПоследние.ТекущиеДанные.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоследниеСписокПередУдалениемЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выделенные записи?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСписокПередУдалениемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ПоследниеУдалитьЗаписи();
	ОбновитьСписокПоследние();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НастроитьФорму(Команда)
	
	СтруктураПараметров = Новый Структура("");
	
	СписокПоказателейСВидимостью = СписокДоступныхГруппПоказателей();
	СтруктураПараметров.Вставить(
		"СписокПоказателейСВидимостью", СписокПоказателейСВидимостью);
		
	СтруктураПараметров.Вставить(
		"НастройкиАвтообновления", НастройкиАвтообновления);
	
	Если ПоказателиПочтыДоступны Тогда
		СтруктураПараметров.Вставить("ВыбранныеПапкиПисем", СписокВыбранныхПапокПисем());
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьФормуЗавершение", ЭтаФорма);
	Результат = ОткрытьФорму(
		"Обработка.ТекущиеДела.Форма.ФормаНастройки", СтруктураПараметров, , , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьГруппПоказателейИзСписка(Результат.СписокПоказателейСВидимостью);
	
	НастройкиАвтообновления = Результат.НастройкиАвтообновления;
	Автообновление.СохранитьНастройкиАвтообновленияФормы(ИмяФормы, НастройкиАвтообновления);
	
	СохранитьВидимостьПоказателейВНастройки();
	
	Если ПоказателиПочтыДоступны Тогда
		СохранитьСписокВыбранныхПапокПисем(Результат.ВыбранныеПапкиПисем);
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
	ОбновитьДанныеРабочегоСтола();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеРабочегоСтола();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеОткрытьФайл(Команда)
	
	ТекущаяСтрока = Элементы.СписокПоследние.ТекущиеДанные.Объект;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляОткрытия(ТекущаяСтрока, 
			Неопределено, УникальныйИдентификатор, Неопределено, ПоследниеПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеРедактировать(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗакончитьРедактирование", ЭтотОбъект);
	
	РаботаСФайламиКлиент.РедактироватьСОповещением(
		Обработчик,
		Элементы.СписокПоследние.ТекущиеДанные.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСохранитьКак(Команда)
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаДляСохранения(
		Элементы.СписокПоследние.ТекущиеДанные.Объект, 
		Неопределено, 
		УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	ОбновитьСписокПоследние();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеЗакончитьРедактирование(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗакончитьРедактирование", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(
		Обработчик,
		Элементы.СписокПоследние.ТекущиеДанные.Объект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакончитьРедактирование(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСписокПоследние();
	ПоследниеУстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСоздатьПроцесс(Команда)
	
	Предметы = Новый Массив;
	
	Для Каждого ИДПредмета Из Элементы.СписокПоследние.ВыделенныеСтроки Цикл
		
		Предмет = СписокПоследние.НайтиПоИдентификатору(ИДПредмета).Объект;
		
		Если ВозможноСоздатьПроцессНаОснованииСсылки(Предмет) Тогда
			Предметы.Добавить(Предмет);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПредметов = Предметы.Количество();
	
	Если КоличествоПредметов = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выделено ни одного подходящего предмета для создания процесса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"СписокПоследние");
		Возврат;
	ИначеЕсли КоличествоПредметов = 1
		И ТипЗнч(Предметы[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Предметы = Предметы[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Предметы", Предметы);
	ОткрытьФорму("ОбщаяФорма.СозданиеБизнесПроцесса", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ВозможноСоздатьПроцессНаОснованииСсылки(СсылкаНаОбъект)
	
	ТипВыбраннойСтроки = ТипЗнч(СсылкаНаОбъект);
					
	Возврат ТипВыбраннойСтроки = Тип("СправочникСсылка.УведомленияПрограммы")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.ТемыОбсуждений")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.Корреспонденты")
		ИЛИ ТипВыбраннойСтроки = Тип("ДокументСсылка.ВходящееПисьмо")
		ИЛИ ТипВыбраннойСтроки = Тип("ДокументСсылка.ИсходящееПисьмо")
		ИЛИ ТипВыбраннойСтроки = Тип("ДокументСсылка.ИсходящееПисьмо")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.Файлы") 
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.ВходящиеДокументы")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.ВнутренниеДокументы")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.СообщенияОбсуждений")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.ИсходящиеДокументы")
		ИЛИ ТипВыбраннойСтроки = Тип("СправочникСсылка.Мероприятия")
		ИЛИ ТипВыбраннойСтроки = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	
КонецФункции

&НаКлиенте
Процедура ИзбранноеПерейтиВыполнить()
	
	Если Элементы.СписокИзбранное.ТекущиеДанные <> Неопределено Тогда
		
		ПерейтиПоНавигационнойСсылке(Элементы.СписокИзбранное.ТекущиеДанные.Значение);

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеДобавитьВыполнить()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзбранноеДобавитьЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.ТекущиеДела.Форма.ФормаДобавленияСсылки", , , , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры
	
&НаКлиенте	
Процедура ИзбранноеДобавитьЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.КодВозврата = КодВозвратаДиалога.ОК Тогда
		ТекстОшибки = "";
		Если Не ИзбранноеДобавитьСсылкуИОбновитьСписокСервер(Результат.Ссылка, ТекстОшибки) Тогда
			
			ПоказатьПредупреждение(, ТекстОшибки); 
			
        КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеУдалитьВыполнить()
	
	Если Элементы.СписокИзбранное.ТекущиеДанные <> Неопределено Тогда
		ИзбранноеУдалитьСсылкуИОбновитьСписокСервер(Элементы.СписокИзбранное.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере 
Процедура ЗаполнитьПапкиПисемПоУмолчанию()
	
	// Получение e-mail адресов текущего пользователя
	ТаблицаКонтактовEmail = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		ТекущийПользователь, 
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	EmailАдресаПользователя = ТаблицаКонтактовEmail.ВыгрузитьКолонку("Значение");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПапкиУчетныхЗаписей.Папка КАК Папка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты.ОтветственныеЗаОбработкуПисем КАК ОтветственныеЗаОбработкуПисем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПапкиУчетныхЗаписей КАК ПапкиУчетныхЗаписей
		|		ПО ОтветственныеЗаОбработкуПисем.Ссылка = ПапкиУчетныхЗаписей.УчетнаяЗапись
		|			И (ПапкиУчетныхЗаписей.ВидПапки = ЗНАЧЕНИЕ(Перечисление.ВидыПапокПисем.Входящие))
		|ГДЕ
		|	ОтветственныеЗаОбработкуПисем.Пользователь = &ТекущийПользователь
		|	И ОтветственныеЗаОбработкуПисем.Ссылка.АдресЭлектроннойПочты В(&АдресЭлектроннойПочты)
		|	И ОтветственныеЗаОбработкуПисем.Ссылка.ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПочты.Встроенная)";

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", EmailАдресаПользователя);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Папки = Результат.Выгрузить().ВыгрузитьКолонку("Папка");
		СохранитьСписокВыбранныхПапокПисем(Папки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция СписокВыбранныхПапокПисем()
	
	Возврат РегистрыСведений.ПапкиПисемТекущихДел.ВыбранныеПапкиПользователя();
	
КонецФункции

&НаСервере 
Процедура СохранитьСписокВыбранныхПапокПисем(Папки)
	
	РегистрыСведений.ПапкиПисемТекущихДел.СохранитьВыбранныеПапкиПользователя(
		ТекущийПользователь,
		Папки);
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьЕжедневныйОтчетНаДату(ДатаОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕжедневныйОтчет.Ссылка
		|ИЗ
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|ГДЕ
		|	ЕжедневныйОтчет.Пользователь = &ТекущийПользователь
		|	И НЕ ЕжедневныйОтчет.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = &Период";

	Запрос.УстановитьПараметр("Период", НачалоДня(ДатаОтчета));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Результат =  Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует дерево показателей
//
&НаСервере
Процедура СформироватьДеревоПоказателей()
	
	ОбъектДерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	ТекущиеДелаСервер.ДобавитьСтрокиГруппПоказателей(ОбъектДерево);
		
	Для Каждого СтрокаГруппы из ОбъектДерево.Строки Цикл
		ТекущиеДелаСервер.ДобавитьСтрокиПоказателей(СтрокаГруппы);
		Если СтрокаГруппы.Показатель = "Почта" Тогда
			ПоказателиПочтыДоступны = Истина;
		КонецЕсли;		
	КонецЦикла;
	
	Если ПоказателиПочтыДоступны Тогда
		Если СписокВыбранныхПапокПисем() = Неопределено Тогда
			ЗаполнитьПапкиПисемПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьВидимостьПоказателейИзНастроек(ОбъектДерево);
	
	КоличествоВидимыхВСтроке2 = 0;
	Для Каждого СтрокаГруппы Из ОбъектДерево.Строки Цикл
		Если СтрокаГруппы.Отображать
			И (СтрокаГруппы.Показатель = "Форум" Или СтрокаГруппы.Показатель = "Мероприятия"
			Или СтрокаГруппы.Показатель = "ЗадачиПодчиненных" Или СтрокаГруппы.Показатель = "Контроль") Тогда
			КоличествоВидимыхВСтроке2 = КоличествоВидимыхВСтроке2 + 1;
		КонецЕсли;		
	КонецЦикла;
	
	//В строке может быть максимум 3 показателя, поэтому один уберем
	Если КоличествоВидимыхВСтроке2 = 4 Тогда 
		
		// Делопроизводители видят показатель Контроля, и не видят Форум	
		РольДелопроизводитель = РольДоступна("ДобавлениеИзменениеВходящихДокументов") 
			Или РольДоступна("РегистрацияИсходящихДокументов") 
			Или РольДоступна("РегистрацияВнутреннихДокументов");
			
		ЭтоРуководитель = РаботаСПользователями.ЭтоРуководитель(ТекущийПользователь);	
			
		ПараметрыОтбора = Новый Структура;
		Если РольДелопроизводитель Или ЭтоРуководитель Тогда 	
			ПараметрыОтбора.Вставить("Показатель", "Форум");
		Иначе 	
			ПараметрыОтбора.Вставить("Показатель", "Контроль");
		КонецЕсли;	
			
		НайденныеСтроки = ОбъектДерево.Строки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденныеСтроки[0].Отображать = Ложь;
		КонецЕсли;	
	КонецЕсли;

	ЗначениеВРеквизитФормы(ОбъектДерево, "ДеревоПоказателей");   	
	
КонецПроцедуры

// Обновляет данные рабочего стола
//
&НаКлиенте
Процедура ОбновитьДанныеРабочегоСтола()
	
	КоличествоПоказателейВТаблице = 0;
	ОбновитьДанныеРабочегоСтолаСервер(КоличествоПоказателейВТаблице);
	УстановитьВидОтображенияПоказателей(КоличествоПоказателейВТаблице < 4);
	ВремяОбновленияФормы = ТекущаяДата();
	ОтобразитьВремяОбновленияФормы(ЭтаФорма);

КонецПроцедуры

// Обновляет данные рабочего стола
//
&НаСервере
Процедура ЗагрузитьДанныеСервер()
	
	КоличествоПоказателейВТаблице = 0;
	ОбновитьДанныеРабочегоСтолаСервер(КоличествоПоказателейВТаблице);
	УстановитьВидОтображенияПоказателейСервер(КоличествоПоказателейВТаблице < 4);
	ВремяОбновленияФормы = ТекущаяДатаСеанса();
	ОтобразитьВремяОбновленияФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРабочегоСтолаСервер(КоличествоПоказателейВТаблице)
	
	РассчитатьПоказатели();

	ОтобразитьПоказатели(КоличествоПоказателейВТаблице);	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяОбновленияФормы()
	
	ОтобразитьВремяОбновленияФормы(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьВремяОбновленияФормы(Форма)
	
	#Если Сервер Тогда
		КоличествоСекунд = ТекущаяДатаСеанса() - Форма.ВремяОбновленияФормы;	
	#Иначе
		КоличествоСекунд = ТекущаяДата() - Форма.ВремяОбновленияФормы;	
	#КонецЕсли
	КоличествоЧасов  = Цел(КоличествоСекунд / 3600);
	КоличествоМинут  = Цел((КоличествоСекунд - КоличествоЧасов * 3600) / 60);
			
	Если КоличествоЧасов = 0 И КоличествоМинут = 0 Тогда
		ВремяПрописью = НСтр("ru = 'меньше минуты'");
	Иначе	
		ПредставлениеМинут	= НСтр("ru = 'минуту'") 
			+ "," + НСтр("ru = 'минуты'")  
			+ "," + НСтр("ru = 'минут'");
			
		ПредставлениеЧасов	= НСтр("ru = 'час'")     
			+ "," + НСтр("ru = 'часа'")    
			+ "," + НСтр("ru = 'часов'");	
			
		МинутыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоМинут, 
			ПредставлениеМинут);
			
		ЧасыПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоЧасов, 
			ПредставлениеЧасов);
				
		Если КоличествоЧасов > 0 Тогда
			ВремяПрописью = ЧасыПрописью + " " + МинутыПрописью;
		Иначе
			ВремяПрописью = МинутыПрописью;			
		КонецЕсли;		
	КонецЕсли;              	
	
	ПредставлениеВремени = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновлено %1 назад'"), 
		ВремяПрописью);		

	Форма.ПредставлениеВремениОбновленияФормы = ПредставлениеВремени;
	
КонецПроцедуры
	
// Выполняет обработку нажатия гиперссылки показателя в форме
//
// Параметры:
//  ИмяПоказателя - Имя показателя, для которого требуется обработать нажатие
//
&НаКлиенте
Процедура ОбработатьНажатиеПоказателя(ИмяПоказателя)

	СтрокаПоказателя = ТекущиеДелаКлиент.ПолучитьСтрокуДереваПоказателей(
		ДеревоПоказателей, 
		ИмяПоказателя);
	
	// Если значение показателя - ссылка на объект, то открыть 
	Если СтрокаПоказателя <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) 
			И ТипЗнч(СтрокаПоказателя.Значение) <> Тип("Строка") Тогда
			ПоказатьЗначение(, СтрокаПоказателя.Значение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = ТекущиеДелаКлиент.ПолучитьПараметрыФормы(ИмяПоказателя);
	РежимОткрытия = "";
	УникальныйИдентификаторФормы = Неопределено;
	ИмяОткрываемойФормы = ТекущиеДелаКлиент.ПолучитьИмяФормы(
		ИмяПоказателя,
		РежимОткрытия,
		УникальныйИдентификаторФормы);
		
	Если ИмяОткрываемойФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РежимОткрытия = "ПоИмениФормы" Тогда
		ФормаПоказателя = ОткрытьФорму(
			ИмяОткрываемойФормы,
			СтруктураПараметров,,
			УникальныйИдентификаторФормы);
	Иначе
		ПерейтиПоНавигационнойСсылке(ИмяОткрываемойФормы);
	КонецЕсли;

	ЛеваяЧастьИмени = Лев(ИмяПоказателя, СтрДлина("ПочтаНепрочтенныеПисьмаУчетнойЗаписи"));
	Если ЛеваяЧастьИмени = "ПочтаНепрочтенныеПисьмаУчетнойЗаписи" Тогда
		УчетнаяЗапись = УчетныеЗаписи[Число(Прав(ИмяПоказателя, 1)) - 1].Значение;
		ПараметрыОповещения = Новый Структура(
			"Папка", 
			ПолучитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗапись));
		Оповестить("ПочтаУстановитьВыделениеНаПапку", ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗапись)
	
	ПапкаВходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(		
		УчетнаяЗапись,
		Перечисления.ВидыПапокПисем.Входящие);	
			
	Возврат ПапкаВходящие;	

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// Работа со списком избранное

&НаСервере
Процедура ОбновитьИзбранное()
    	
	СписокИзбранное.Очистить();
	
	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя", "");
	Если Избранное = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Элемент Из Избранное Цикл
		МассивСсылок.Добавить(Элемент.НавигационнаяСсылка);
	КонецЦикла;
	
	ПредставленияСсылок = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
	
	Для Сч = 1 По ПредставленияСсылок.Количество() Цикл
		//Если ЗначениеЗаполнено(ПредставленияСсылок[Сч - 1]) Тогда
			СписокИзбранное.Добавить(МассивСсылок[Сч - 1], ПредставленияСсылок[Сч - 1].Текст);
		//КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИзбранноеДобавитьСсылкуИОбновитьСписокСервер(НавСсылка, ТекстОшибки, СсылкаОбъекта = Неопределено)
	
	Если СписокИзбранное.НайтиПоЗначению(НавСсылка) <> Неопределено Тогда
		
		Представление = НавСсылка;
		Если СсылкаОбъекта <> Неопределено Тогда
			Представление = Строка(СсылкаОбъекта);
		КонецЕсли;	
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ссылка ""%1""  уже есть в избранном.'"),
			Представление);
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(НавСсылка);
	ПредставленияСсылок = ПолучитьПредставленияНавигационныхСсылок(Ссылки);
	Если ПредставленияСсылок.Количество() <> 0 Тогда
		Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя", "");
		Если Избранное = Неопределено тогда
			Избранное = Новый ИзбранноеРаботыПользователя;
		КонецЕсли;	
		ЭлементИзбранного = Новый ЭлементИзбранногоРаботыПользователя;
		ЭлементИзбранного.НавигационнаяСсылка = НавСсылка;
		Избранное.Добавить(ЭлементИзбранного);
		ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", Избранное);
		ОбновитьИзбранное();
		Возврат Истина;
	КонецЕсли;	
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ссылка ""%1"" не найдена.'"),
		НавСсылка);
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИзбранноеУдалитьСсылкуИОбновитьСписокСервер(Идентификатор)
	
	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя", "");
	Избранное.Удалить(СписокИзбранное.Индекс(СписокИзбранное.НайтиПоИдентификатору(Идентификатор)));
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", Избранное);
	ОбновитьИзбранное();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со списком последние

&НаСервере
Процедура ОбновитьСписокПоследние()
	
	ТекущаяСтрока = Элементы.СписокПоследние.ТекущаяСтрока;
	НомерСтроки = -1;
	Если ТекущаяСтрока <> Неопределено Тогда
		 Строка = СписокПоследние.НайтиПоИдентификатору(ТекущаяСтрока);
		 НомерСтроки = СписокПоследние.Индекс(Строка);
	КонецЕсли;	
	
	СписокПоследние.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
		|	ПРЕДСТАВЛЕНИЕ(РегистрСведенийОбращенияКОбъектам.Объект) КАК Представление,
		|	РегистрСведенийОбращенияКОбъектам.Объект,
		|	ТИПЗНАЧЕНИЯ(РегистрСведенийОбращенияКОбъектам.Объект) КАК ТипОбъекта,
		|	РегистрСведенийОбращенияКОбъектам.Пользователь,
		|	РегистрСведенийОбращенияКОбъектам.ДатаПоследнегоОбращения КАК ДатаПоследнегоОбращения,
		|	ВЫБОР
		|		КОГДА РегистрСведенийОбращенияКОбъектам.Объект.ПометкаУдаления = ИСТИНА
		|			ТОГДА РегистрСведенийОбращенияКОбъектам.ИндексКартинки + 1
		|		ИНАЧЕ РегистрСведенийОбращенияКОбъектам.ИндексКартинки
		|	КОНЕЦ КАК ИндексКартинки,
		|	Файлы.Редактирует,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь
		|ИЗ
		|	РегистрСведений.ОбращенияКОбъектам КАК РегистрСведенийОбращенияКОбъектам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО РегистрСведенийОбращенияКОбъектам.Объект = Файлы.Ссылка
		|ГДЕ
		|	РегистрСведенийОбращенияКОбъектам.Пользователь = &ТекущийПользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнегоОбращения УБЫВ";

	ТекущиеДелаСервер.УстановитьПараметрыЗапроса(Запрос, Неопределено);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТекущаяДатаНачалоДня = НачалоДня(ТекущаяДатаСеанса());

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = СписокПоследние.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
		Строка.ДатаСегодня = (НачалоДня(Строка.ДатаПоследнегоОбращения) = ТекущаяДатаНачалоДня);
		
	КонецЦикла;

	Если НомерСтроки <> -1 И НомерСтроки < СписокПоследние.Количество() Тогда
		СтрокаДляВыделения = СписокПоследние.Получить(НомерСтроки);
		ИдСтроки = СтрокаДляВыделения.ПолучитьИдентификатор();
		Элементы.СписокПоследние.ТекущаяСтрока = ИдСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеОткрытьЗначениеСписка(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Ссылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьЗначение(, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеПереместитьСтрокуВНачало(ТекущаяСтрока)
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		Строка = СписокПоследние.НайтиПоИдентификатору(ТекущаяСтрока);
		НомерСтроки = СписокПоследние.Индекс(Строка);
		Строка.ДатаПоследнегоОбращения = ТекущаяДата();
		Строка.ДатаСегодня = Истина;
		 
		СписокПоследние.Сдвинуть(НомерСтроки, -НомерСтроки); // сдвинем в позицию 0
		
		СтрокаДляВыделения = СписокПоследние.Получить(НомерСтроки);
		ИдСтроки = СтрокаДляВыделения.ПолучитьИдентификатор();
		Элементы.СписокПоследние.ТекущаяСтрока = ИдСтроки;
		
		ПоследниеУстановитьДоступностьКоманд();
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоследниеУстановитьДоступностьКоманд()
	
	Если Элементы.СписокПоследние.ТекущиеДанные <> Неопределено Тогда
		
		ТипТекущейСтроки = ТипЗнч(Элементы.СписокПоследние.ТекущаяСтрока);
		Если ТипТекущейСтроки <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ВыбраннаяСтрока = Элементы.СписокПоследние.ТекущиеДанные.Объект;
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("СправочникСсылка.Файлы") Тогда
				
				ПоследниеУстановитьДоступностьКомандФайлов(
					Элементы.СписокПоследние.ТекущиеДанные.РедактируетТекущийПользователь,
					Элементы.СписокПоследние.ТекущиеДанные.Редактирует);
					
				Возврат;	
				
			КонецЕсли;	
			
			ПоследниеСделатьКомандыНедоступными();
			
			Если Элементы.СписокПоследние.ВыделенныеСтроки.Количество() = 1 Тогда
				Для Каждого ВыделеннаяСтрока ИЗ Элементы.СписокПоследние.ВыделенныеСтроки Цикл
					Если ВозможноСоздатьПроцессНаОснованииСсылки(ВыбраннаяСтрока) Тогда
						Элементы.КонтекстноеМенюПоследниеСоздатьПроцесс.Доступность = Истина;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Элементы.КонтекстноеМенюПоследниеСоздатьПроцесс.Доступность = Истина;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	ПоследниеСделатьКомандыНедоступными();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеУстановитьДоступностьКомандФайлов(РедактируетТекущийПользователь, Редактирует)
	
	РедактируетДругой = Не Редактирует.Пустая() И НЕ РедактируетТекущийПользователь;
	
	Элементы.КонтекстноеМенюПоследниеОткрытьФайл.Доступность = Истина;
	Элементы.КонтекстноеМенюПоследниеЗакончитьРедактирование.Доступность = 
		РедактируетТекущийПользователь;
	Элементы.КонтекстноеМенюПоследниеРедактировать.Доступность = НЕ РедактируетДругой;
	Элементы.КонтекстноеМенюПоследниеСохранитьКак.Доступность = Истина;
	Элементы.КонтекстноеМенюПоследниеСоздатьПроцесс.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследниеСделатьКомандыНедоступными()
	
	Элементы.КонтекстноеМенюПоследниеСоздатьПроцесс.Доступность = Ложь;
	Элементы.КонтекстноеМенюПоследниеОткрытьФайл.Доступность = Ложь;
	Элементы.КонтекстноеМенюПоследниеЗакончитьРедактирование.Доступность = Ложь;
	Элементы.КонтекстноеМенюПоследниеРедактировать.Доступность = Ложь;
	Элементы.КонтекстноеМенюПоследниеСохранитьКак.Доступность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПоследниеУдалитьЗаписи()
	
	ТекущийПользователь = ТекущийПользователь;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.ОбращенияКОбъектам.СоздатьНаборЗаписей();
	
	Для Каждого ИдСтроки Из Элементы.СписокПоследние.ВыделенныеСтроки Цикл
		
		Строка = СписокПоследние.НайтиПоИдентификатору(ИдСтроки);
		 
		НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Расчет показателей

&НаСервере
Процедура РассчитатьПоказатели()
	
	ДеревоЗначенийПоказателей = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	РассчитатьЗначенияПоказателей(ДеревоЗначенийПоказателей);
	ЗаполнитьЗначенияРеквизитов(ДеревоЗначенийПоказателей);
	
	ЗначениеВРеквизитФормы(ДеревоЗначенийПоказателей, "ДеревоПоказателей");
	
КонецПроцедуры

// Выполняет расчет значений показателей
//
&НаСервере
Процедура РассчитатьЗначенияПоказателей(ДеревоЗначенийПоказателей)

	// Перед расчетом обнулить значения показателей в дереве
	Для Каждого СтрокаГруппы из ДеревоЗначенийПоказателей.Строки Цикл
		СтрокаГруппы.Значение = Неопределено;
		
		Для Каждого СтрокаПоказателя из СтрокаГруппы.Строки Цикл
			СтрокаПоказателя.Значение = Неопределено;
		КонецЦикла;
	КонецЦикла;
	
	МассивГрупп = Новый Массив;
	
	Для Каждого СтрокаГруппы из ДеревоЗначенийПоказателей.Строки Цикл
		Если СтрокаГруппы.Отображать Тогда
			Если СтрокаГруппы.Вид = 1 Тогда // Если показатель - таблица
				Если СтрокаГруппы.Показатель = "СписокИзбранное" Тогда
					ОбновитьИзбранное();
				ИначеЕсли СтрокаГруппы.Показатель = "СписокПоследние" Тогда
					ОбновитьСписокПоследние();
				КонецЕсли;
			Иначе
				Если СтрокаГруппы.Показатель = "УчетВремени" Тогда
					СформироватьДиаграммуУчетаВремени(УчетВремениДиаграмма, ТекущийПользователь);
				ИначеЕсли СтрокаГруппы.Показатель = "ГрафикНагрузки" Тогда
					СформироватьДиаграммуГрафикаНагрузки(
						ГрафикНагрузкиДиаграмма, 
						ТекущийПользователь);
					Продолжить;
				КонецЕсли;
				
				МассивГрупп.Добавить(СтрокаГруппы.Показатель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = ПолучитьСтруктуруРассчитанныхПоказателей(
		МассивГрупп, 
		ДеревоЗначенийПоказателей);
	
	Для Каждого Группа из МассивГрупп Цикл
		СтруктураПоказателейГруппы = СтруктураДанных[Группа];
		ЗанестиПоказателиВДерево(СтруктураПоказателейГруппы, ДеревоЗначенийПоказателей);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения реквизитов из дерева показателей
//
&НаСервере
Процедура ЗаполнитьЗначенияРеквизитов(ДеревоЗначенийПоказателей)

	МассивРеквизитов = ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		
		СтрокаПоказателя = ДеревоЗначенийПоказателей.Строки.Найти(Реквизит.Имя, "Показатель", Истина);

		Если СтрокаПоказателя <> Неопределено 
			И СтрокаПоказателя.Вид <> 1 Тогда //Если показатель не таблица
			
			ПредставлениеПоказателя = ТекущиеДелаСервер.ПолучитьПредставлениеЗначенияПоказателя(
				СтрокаПоказателя);
			
			ЭтаФорма[Реквизит.Имя] = ПредставлениеПоказателя;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Рассчитывает показатели для указанных групп показателей
// 
// Параметры
//  МассивГрупп	- массив групп показателей, подлежащих расчету
// 
// Возвращаемое значение:
//  Структура	- структура с рассчитанными значениями показателей
//
&НаСервере
Функция ПолучитьСтруктуруРассчитанныхПоказателей(МассивГрупп, ДеревоЗначенийПоказателей)
	
	СтруктураРассчитанныхДанных = Новый Структура;
	
	ИтоговыйТекстЗапроса = "";
	Для Каждого Группа из МассивГрупп Цикл
		
		ТекстЗапроса = ТекущиеДелаСервер.ПолучитьТекстаЗапросаДляРасчетаПоказателейГруппы(Группа);
		
		Если ТекстЗапроса <> "" Тогда
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + ТекстЗапроса + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИтоговыйТекстЗапроса = "" Тогда
		Возврат СтруктураРассчитанныхДанных;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИтоговыйТекстЗапроса;
	
	ТекущиеДелаСервер.УстановитьПараметрыЗапроса(Запрос, МассивГрупп);
	
	СтруктураПоказателейГрупп = ПолучитьСтруктуруПоказателейГрупп(
		МассивГрупп, 
		ДеревоЗначенийПоказателей);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	  
	Индекс = 0;
	Для Каждого Группа из МассивГрупп Цикл
		
		РезультатЗапроса = МассивРезультатовЗапроса[Индекс];
		
		СтруктураПоказателейГруппы = СтруктураПоказателейГрупп[Группа];
		             		
		ТекущиеДелаСервер.ЗаполнитьЗначенияПоказателейГруппыИзЗапроса(
			Группа, 
			СтруктураПоказателейГруппы, 
			РезультатЗапроса,
			ЭтаФорма);
				
		СтруктураРассчитанныхДанных.Вставить(Группа, СтруктураПоказателейГруппы);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтруктураРассчитанныхДанных;
	
КонецФункции

// Создает структуру показателей для указанных групп 
//
// Параметры
//  Массив		- массив групп показателей 
// 
// Возвращаемое значение:
//  Структура	- структура показателей
// 
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоказателейГрупп(МассивГрупп, ДеревоЗначенийПоказателей)
	
	СтруктураПоказателейГрупп = Новый Структура();
	
	Для Каждого Группа из МассивГрупп Цикл
		СтруктураПоказателейГруппы = ПолучитьСтруктуруПоказателейДляГруппы(
			Группа, 
			ДеревоЗначенийПоказателей);
		СтруктураПоказателейГрупп.Вставить(Группа, СтруктураПоказателейГруппы);
	КонецЦикла;
	
	Возврат СтруктураПоказателейГрупп;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоказателейДляГруппы(Группа, ДеревоЗначенийПоказателей)
	
	СтруктураПоказателей = Новый Структура();
		
	СтрокаГруппы = ДеревоЗначенийПоказателей.Строки.Найти(Группа, "Показатель");
	
	Если СтрокаГруппы <> Неопределено Тогда
		Для Каждого СтрокаПоказателя из СтрокаГруппы.Строки Цикл
			СтруктураПоказателей.Вставить(СтрокаПоказателя.Показатель, "");			
		КонецЦикла;
		СтруктураПоказателей.Вставить(СтрокаГруппы.Показатель, "");					
	КонецЕсли;
	
	Возврат СтруктураПоказателей;
	
КонецФункции

// Заносит значения показателей в дерево показателей
//
// Параметры:
//  СтруктураПоказателей		- структура, содержащая рассчитанные значения показателей
//  ДеревоЗначенийПоказателей	- дерево показателей
//
&НаСервереБезКонтекста
Процедура ЗанестиПоказателиВДерево(СтруктураПоказателей, ДеревоЗначенийПоказателей)

	Для Каждого Элемент из СтруктураПоказателей Цикл
		
		СтрокаДерева = ДеревоЗначенийПоказателей.Строки.Найти(Элемент.Ключ, "Показатель", Истина);
		
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.Значение = Элемент.Значение;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДиаграммуУчетаВремени(УчетВремениДиаграмма, ТекущийПользователь)
	
	УчетВремениДиаграмма.ТипДиаграммы = ТипДиаграммы.ГистограммаСНакоплением;
	УчетВремениДиаграмма.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) КАК Период,
		|	СУММА(ФактическиеТрудозатраты.Длительность) КАК СуммарнаяДлительность
		|ПОМЕСТИТЬ 
		|	ВременнаяТаблица
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.ДатаДобавления >= &НачалоНедели
		|	И ФактическиеТрудозатраты.ДатаДобавления <= &КонецНедели
		|	И ФактическиеТрудозатраты.Пользователь = &ТекущийПользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ);
		|	
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) КАК Период,
		|	РАЗНОСТЬДАТ(ЕжедневныйОтчет.НачалоДня, ЕжедневныйОтчет.ОкончаниеДня, СЕКУНДА) КАК ДлительностьДня,
		|	Время.СуммарнаяДлительность КАК Учтено
		|ИЗ	
		|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК Время
		|		ПО (Время.Период = НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ))
		|ГДЕ
		|	ЕжедневныйОтчет.Дата >= &НачалоНедели
		|	И ЕжедневныйОтчет.Дата <= &КонецНедели
		|	И ЕжедневныйОтчет.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	ДатаСеанса = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("НачалоНедели", НачалоНедели(ДатаСеанса) - 2 * 86400);
	Запрос.УстановитьПараметр("КонецНедели", КонецНедели(ДатаСеанса));
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	УчетВремениДиаграмма.Обновление = Ложь;
	УчетВремениДиаграмма.ОтображатьЛегенду = Ложь;
	УчетВремениДиаграмма.ОтображатьЗаголовок = Ложь;
	УчетВремениДиаграмма.МинимальноеЗначение = 0;
	УчетВремениДиаграмма.МаксимальноеЗначение = 10;	
	УчетВремениДиаграмма.АвтоМаксимальноеЗначение = Ложь;
	УчетВремениДиаграмма.АвтоМинимальноеЗначение = Ложь;
	
	УчетВремениДиаграмма.ОбластьПостроения.Верх = 0;
	УчетВремениДиаграмма.ОбластьПостроения.Лево = 0;
	УчетВремениДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	УчетВремениДиаграмма.ОбластьПостроения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	УчетВремениДиаграмма.КоличествоСерий = 2;	
	УчетВремениДиаграмма.Серии[0].Цвет = ЦветаСтиля.ИнформационнаяНадпись;
	УчетВремениДиаграмма.Серии[0].Текст = "Учтено";
	
	УчетВремениДиаграмма.Серии[1].Цвет = WebЦвета.ГолубойСоСтальнымОттенком;
	УчетВремениДиаграмма.Серии[1].Текст = "Осталось";
		
	ОбщийИтог = 0;
	
	НачалоОтсчета = НачалоНедели(ДатаСеанса) - 2 * 86400;
	
	// Заполнение точек графика
	УчетВремениДиаграмма.КоличествоТочек = 9;
	Для Сч = 0 По 8 Цикл
		
		ВременныйПериод = НачалоОтсчета + Сч * 86400;
		УчетВремениДиаграмма.Точки[Сч].Текст = Формат(ВременныйПериод, "ДФ=ddd");
		УчетВремениДиаграмма.УстановитьЗначение(
			Сч, 
			0, 
			0,
			ВременныйПериод);
			
	КонецЦикла;
	
	// Заполнение значений графика
	Пока Выборка.Следующий() Цикл
	
		ИндексТочки = (Выборка.Период - НачалоОтсчета)/86400;

		ДлительностьДня = ?(Выборка.ДлительностьДня = NULL, 0, Выборка.ДлительностьДня);
		Учтено = ?(Выборка.Учтено = NULL, 0, Выборка.Учтено);
		ОсталосьУчесть = ДлительностьДня - Учтено;
		ОсталосьУчесть = ?(ОсталосьУчесть < 0, 0, ОсталосьУчесть);
		
		ПодсказкаДляУчтено = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Учтено %1'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(Учтено));
		
		УчетВремениДиаграмма.УстановитьЗначение(
			ИндексТочки, 
			0, 
			Окр(Учтено / 3600, 1),
			Выборка.Период,
			ПодсказкаДляУчтено);

		ПодсказкаДляОсталосьУчесть = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Осталось %1'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ОсталосьУчесть));
			
		УчетВремениДиаграмма.УстановитьЗначение(
			ИндексТочки, 
			1, 
			Окр(ОсталосьУчесть / 3600, 1),
			Выборка.Период,
			ПодсказкаДляОсталосьУчесть);
			
		ОбщийИтог = ОбщийИтог + Учтено + ОсталосьУчесть;
		
	КонецЦикла;
	
	УчетВремениДиаграмма.Обновление = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьДиаграммуГрафикаНагрузки(ГрафикНагрузкиДиаграмма, ТекущийПользователь)
	
	ГрафикНагрузкиДиаграмма.ТипДиаграммы = ТипДиаграммы.График;
	ГрафикНагрузкиДиаграмма.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.Период, ДЕНЬ) КАК Период,
		|	СРЕДНЕЕ(ЗначенияПоказателей.Количество) КАК Количество
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейРаботыПользователя КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.Пользователь = &ТекущийПользователь
		|	И ЗначенияПоказателей.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.Период, ДЕНЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода)";

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДатаСеанса()) - 30 * 86400);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить();
	
	ГрафикНагрузкиДиаграмма.Обновление = Ложь;
	
	ГрафикНагрузкиДиаграмма.ОтображатьЛегенду = Ложь;
	ГрафикНагрузкиДиаграмма.ОтображатьЗаголовок = Ложь;
	
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.Верх = 0;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.Лево = 0;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	ГрафикНагрузкиДиаграмма.ОбластьПостроения.ОриентацияМеток = 
		ОриентацияМетокДиаграммы.Горизонтально;
		
	ГрафикНагрузкиДиаграмма.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "ВСЕ");
	
	ГрафикНагрузкиДиаграмма.КоличествоСерий = 1;	
	ГрафикНагрузкиДиаграмма.Серии[0].Цвет = ЦветаСтиля.ИнформационнаяНадпись;
	ГрафикНагрузкиДиаграмма.Серии[0].Текст = "";
	ГрафикНагрузкиДиаграмма.Серии[0].Маркер = ТипМаркераДиаграммы.Нет;
		
	КоличествоТочек = 0;
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоТочек = КоличествоТочек + 1;

		ГрафикНагрузкиДиаграмма.КоличествоТочек = КоличествоТочек;
		ГрафикНагрузкиДиаграмма.Точки[КоличествоТочек - 1].Текст = "";

		КоличествоОбъектов = ?(Выборка.Количество = NULL, 0, Выборка.Количество);
		КоличествоОбъектов = Окр(КоличествоОбъектов);
		
		ПодсказкаДляЗначения = Формат(Выборка.Период, "ДЛФ=DD") 
			+ " - " + Строка(КоличествоОбъектов);

		ГрафикНагрузкиДиаграмма.УстановитьЗначение(
			КоличествоТочек - 1, 
			0, 
			КоличествоОбъектов,,
			ПодсказкаДляЗначения);
		
	КонецЦикла;
	
	ГрафикНагрузкиДиаграмма.Обновление = Истина;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление видимостью показателей

// Устанавливает видимость групп формы
//
&НаСервере
Процедура ОтобразитьПоказатели(КоличествоПоказателейВТаблице)
		
	ГруппыПоказателей = ДеревоПоказателей.ПолучитьЭлементы();

	КоличествоПоказателейВТаблице = 0;
	
	Для Каждого СтрокаГруппы из ГруппыПоказателей Цикл
		ИмяЭлементаГруппы = "Группа" + СтрокаГруппы.Показатель;
		
		УстановитьВидимостьЭлементаФормы(Элементы[ИмяЭлементаГруппы], СтрокаГруппы.Отображать);

		Если СтрокаГруппы.Вид <> 1 Тогда // Если показатель является группой
			
			Если СтрокаГруппы.Отображать Тогда
				ОтобразитьСоставныеПоказатели(СтрокаГруппы);
				
				СтрокиПоказателей = СтрокаГруппы.ПолучитьЭлементы();
				Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
					Если НЕ СтрокаПоказателя.Составной Тогда
						ОтобразитьПоказатель(СтрокаПоказателя);
					КонецЕсли;
				КонецЦикла;
				КоличествоПоказателейВТаблице = КоличествоПоказателейВТаблице + 1;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСоставныеПоказатели(СтрокаГруппы)
	
	Если СтрокаГруппы.Показатель = "Календарь" Тогда
		Сегодня = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "КалендарьСегодня");
		Завтра = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "КалендарьЗавтра");
		НаНеделе = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "КалендарьНаНеделе");
		НаСледующейНеделе = ПолучитьПредставлениеПоказателя(
			СтрокаГруппы, "КалендарьНаСледующейНеделе");
		
		СегодняИЗавтра = "";
		Если ЗначениеЗаполнено(Сегодня) Тогда
			СегодняИЗавтра = Сегодня;
		КонецЕсли;
		Если ЗначениеЗаполнено(Завтра) Тогда
			Если ЗначениеЗаполнено(СегодняИЗавтра) Тогда
				СегодняИЗавтра = СегодняИЗавтра + ", " + Завтра;
			Иначе
				СегодняИЗавтра = Завтра;
			КонецЕсли;
		КонецЕсли;
		
		СоставныеПоказатели = Новый Массив();
		Если ЗначениеЗаполнено(СегодняИЗавтра) Тогда
			СоставныеПоказатели.Добавить(СегодняИЗавтра);
		КонецЕсли;
		Если ЗначениеЗаполнено(НаНеделе) Тогда
			СоставныеПоказатели.Добавить(НаНеделе);
		КонецЕсли;
		Если ЗначениеЗаполнено(НаСледующейНеделе) Тогда
			СоставныеПоказатели.Добавить(НаСледующейНеделе);
		КонецЕсли;
		
		СоставныеПоказателиСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(
			СоставныеПоказатели, Символы.ПС);
			
		Элементы.КалендарьСоставной.Высота = СоставныеПоказатели.Количество();
		Элементы.КалендарьСоставной.Заголовок = СоставныеПоказателиСтрока;
	ИначеЕсли СтрокаГруппы.Показатель = "Мероприятия" Тогда
		Сегодня = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "МероприятияСегодня");
		Завтра = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "МероприятияЗавтра");
		НаНеделе = ПолучитьПредставлениеПоказателя(СтрокаГруппы, "МероприятияНаНеделе");
		НаСледующейНеделе = ПолучитьПредставлениеПоказателя(
			СтрокаГруппы, "МероприятияНаСледующейНеделе");
		
		СегодняИЗавтра = "";
		Если ЗначениеЗаполнено(Сегодня) Тогда
			СегодняИЗавтра = Сегодня;
		КонецЕсли;
		Если ЗначениеЗаполнено(Завтра) Тогда
			Если ЗначениеЗаполнено(СегодняИЗавтра) Тогда
				СегодняИЗавтра = СегодняИЗавтра + ", " + Завтра;
			Иначе
				СегодняИЗавтра = Завтра;
			КонецЕсли;
		КонецЕсли;
		
		СоставныеПоказатели = Новый Массив();
		Если ЗначениеЗаполнено(СегодняИЗавтра) Тогда
			СоставныеПоказатели.Добавить(СегодняИЗавтра);
		КонецЕсли;
		Если ЗначениеЗаполнено(НаНеделе) Тогда
			СоставныеПоказатели.Добавить(НаНеделе);
		КонецЕсли;
		Если ЗначениеЗаполнено(НаСледующейНеделе) Тогда
			СоставныеПоказатели.Добавить(НаСледующейНеделе);
		КонецЕсли;
		
		СоставныеПоказателиСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(
			СоставныеПоказатели, Символы.ПС);
			
		Элементы.МероприятияСоставной.Высота = СоставныеПоказатели.Количество();
		Элементы.МероприятияСоставной.Заголовок = СоставныеПоказателиСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеПоказателя(СтрокаГруппы, ИмяПоказателя)
	
	Показатель = Неопределено;
	
	СтрокиПоказателей = СтрокаГруппы.ПолучитьЭлементы();
	Для каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
		Если СтрокаПоказателя.Показатель = ИмяПоказателя Тогда
			Показатель = СтрокаПоказателя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Показатель = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	РеквизитПоказателя = ЭтаФорма[ИмяПоказателя];
		
	Если НЕ НулевойПоказатель(СтрокаПоказателя) Тогда
		Результат = РеквизитПоказателя;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидОтображенияПоказателей(Знач ВОднуСтроку)

	ГруппаТекущиеДела = Элементы.ГруппаТекущиеДела;
	
	Если ВОднуСтроку Тогда // вывести показатели в одну строку		
		Если ГруппаТекущиеДела.Группировка <> ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная Тогда
			ГруппаТекущиеДела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТекущиеДела.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;			
			Для каждого СтрокаПоказателей Из ГруппаТекущиеДела.ПодчиненныеЭлементы Цикл				
				СтрокаПоказателей.Отображение = ОтображениеОбычнойГруппы.Нет;
			КонецЦикла; 	
		КонецЕсли;		
	Иначе // табличное представление показателей
		Если ГруппаТекущиеДела.Группировка <> ГруппировкаПодчиненныхЭлементовФормы.Вертикальная Тогда
			ГруппаТекущиеДела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТекущиеДела.Отображение = ОтображениеОбычнойГруппы.Нет;
			Для каждого СтрокаПоказателей Из ГруппаТекущиеДела.ПодчиненныеЭлементы Цикл				
				СтрокаПоказателей.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			КонецЦикла; 	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидОтображенияПоказателейСервер(Знач ВОднуСтроку)

	ГруппаТекущиеДела = Элементы.ГруппаТекущиеДела;
	
	Если ВОднуСтроку Тогда // вывести показатели в одну строку		
		Если ГруппаТекущиеДела.Группировка <> ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная Тогда
			ГруппаТекущиеДела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаТекущиеДела.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;			
			Для каждого СтрокаПоказателей Из ГруппаТекущиеДела.ПодчиненныеЭлементы Цикл				
				СтрокаПоказателей.Отображение = ОтображениеОбычнойГруппы.Нет;
			КонецЦикла; 	
		КонецЕсли;		
	Иначе // табличное представление показателей
		Если ГруппаТекущиеДела.Группировка <> ГруппировкаПодчиненныхЭлементовФормы.Вертикальная Тогда
			ГруппаТекущиеДела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаТекущиеДела.Отображение = ОтображениеОбычнойГруппы.Нет;
			Для каждого СтрокаПоказателей Из ГруппаТекущиеДела.ПодчиненныеЭлементы Цикл				
				СтрокаПоказателей.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
			КонецЦикла; 	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОтобразитьПоказатель(СтрокаПоказателя)
	
	ЭлементПоказателя = Элементы[СтрокаПоказателя.Показатель];
	
	Если ЭтаФорма[СтрокаПоказателя.Показатель] = "" Тогда 
		// Скрытие показателя, при отсутствии представления.
		УстановитьВидимостьЭлементаФормы(ЭлементПоказателя.Родитель, Ложь);
	Иначе
		УстановитьВидимостьЭлементаФормы(ЭлементПоказателя.Родитель, Истина);
	КонецЕсли;
	
	Если НулевойПоказатель(СтрокаПоказателя) И НЕ СтрокаПоказателя.ЯвляетсяСсылкой Тогда
		УстановитьВидимостьЭлементаФормы(ЭлементПоказателя.Родитель, Ложь);
	Иначе
		Если СтрокаПоказателя.ВыделятьЦветом Тогда
			УстановитьЦветЭлементаФормы(ЭлементПоказателя, ЦветаСтиля.ЗапрещенноеПравоДоступа);
		Иначе
			УстановитьЦветЭлементаФормы(ЭлементПоказателя, Новый Цвет);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = "УчетВремениУчтеноСегодня" Тогда
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
			// Отображение красным, при отсутствии отчета за сегодня.
			УстановитьЦветЭлементаФормы(ЭлементПоказателя, ЦветаСтиля.ЗапрещенноеПравоДоступа);
		Иначе
			УстановитьЦветЭлементаФормы(ЭлементПоказателя, Новый Цвет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НулевойПоказатель(СтрокаПоказателя)
	
	Возврат ТипЗнч(СтрокаПоказателя.Значение) = Тип("Строка")
		И СтрокаПоказателя.Значение = "0";
	
КонецФункции

&НаСервере
Процедура УстановитьЦветЭлементаФормы(Элемент, Цвет)

	Если Элемент.ЦветТекста <> Цвет Тогда
		Элемент.ЦветТекста = Цвет;							
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)

	Если Элемент.Видимость <> Видимость Тогда
		Элемент.Видимость = Видимость;							
	КонецЕсли;

КонецПроцедуры 

// Устанавливает видимость групп в дереве показателей из списка значений
//
// Параметры
//  СписокПоказателейСВидимостью	- СписокЗначений - список групп показателей с пометками видимости  
//
&НаКлиенте
Процедура УстановитьВидимостьГруппПоказателейИзСписка(СписокПоказателейСВидимостью)	
	
	ГруппыПоказателей = ДеревоПоказателей.ПолучитьЭлементы();	
	Для Каждого СтрокаГруппы из ГруппыПоказателей Цикл			
		ЭлементСписка = СписокПоказателейСВидимостью.НайтиПоЗначению(СтрокаГруппы.Показатель);
		
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаГруппы.Отображать = ЭлементСписка.Пометка;
		КонецЕсли;			
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Функция СписокДоступныхГруппПоказателей();
	
	Результат = Новый СписокЗначений();
	
	ГруппыПоказателей = ДеревоПоказателей.ПолучитьЭлементы();
	Для Каждого СтрокаГруппы из ГруппыПоказателей Цикл
		Результат.Добавить(СтрокаГруппы.Показатель, СтрокаГруппы.Заголовок, СтрокаГруппы.Отображать);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Загружает видимость показателей из хранилища настроек данных формы
//
&НаСервере
Процедура ЗагрузитьВидимостьПоказателейИзНастроек(Дерево)	
	
	СписокСкрытыхПоказателей = ХранилищеНастроекДанныхФорм.Загрузить(
		ЭтаФорма.ИмяФормы, 
		"СписокСкрытыхПоказателей");	
		
	Если Не ЗначениеЗаполнено(СписокСкрытыхПоказателей) Тогда
		СписокСкрытыхПоказателей = Новый СписокЗначений;
	КонецЕсли;
	
	ГруппыПоказателей = Дерево.Строки;	
	Для Каждого СтрокаГруппы из ГруппыПоказателей Цикл			
		Если СтрокаГруппы.Показатель = "ГрафикНагрузки" Тогда
		    СтрокаГруппы.Отображать = 
				РегистрыСведений.НастройкиТекущихДел.ПолучитьПризнакОтображенияГрафикаНагрузки();
		ИначеЕсли СписокСкрытыхПоказателей.НайтиПоЗначению(СтрокаГруппы.Показатель) <> Неопределено Тогда
			СтрокаГруппы.Отображать = Ложь;
		КонецЕсли;				
	КонецЦикла;	
	
КонецПроцедуры

// Сохраняется видимость показателей в хранилище настроек данных формы
//
&НаСервере
Процедура СохранитьВидимостьПоказателейВНастройки()	
	
	СписокСкрытыхПоказателей = Новый СписокЗначений();
	
	ГруппыПоказателей = ДеревоПоказателей.ПолучитьЭлементы();	
	Для Каждого СтрокаГруппы из ГруппыПоказателей Цикл			
		Если СтрокаГруппы.Показатель = "ГрафикНагрузки" Тогда
			РегистрыСведений.НастройкиТекущихДел.УстановитьПризнакОтображенияГрафикаНагрузки(
				СтрокаГруппы.Отображать);	
		ИначеЕсли Не СтрокаГруппы.Отображать Тогда
			СписокСкрытыхПоказателей.Добавить(СтрокаГруппы.Показатель);				
		КонецЕсли;                                                     		
	КонецЦикла;
				 	
	ХранилищеНастроекДанныхФорм.Сохранить(
		ЭтаФорма.ИмяФормы, 
		"СписокСкрытыхПоказателей", 
		СписокСкрытыхПоказателей);		
	
КонецПроцедуры                                      

////////////////////////////////////////////////////////////////////////////////
// АВТООБНОВЛЕНИЕ

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли

	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания("Автообновление", НастройкиАвтообновления.ПериодАвтоОбновления, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или Не НастройкиАвтообновления.Автообновление Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьДанныеРабочегоСтола();
	КонецЕсли;
	
КонецПроцедуры
