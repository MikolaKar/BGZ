
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	флНезавершенные = Истина;
    
    УстановитьПраваНаПодразделение();
    
    УстановитьПараметрыСписка();
    
КонецПроцедуры

&НаСервере
Функция УстановитьПраваНаПодразделение()
    
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
    
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ Разрешенные
        |   Группы.Ссылка,
        |   Группы.Ссылка.Наименование КАК Наименование
        |ИЗ
        |   Справочник.ГруппыДоступа.Пользователи КАК Группы
        |ГДЕ
        |   Группы.Пользователь = &Пользователь";
       // |   И Группы.Ссылка.Наименование ПОДОБНО ""Руководители подразделений""";
    
    Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
    
    Результат = Запрос.Выполнить().Выгрузить();
    
    Если Результат.НайтиСтроки(Новый Структура("Наименование", "Администраторы")).Количество() > 0  Тогда
        
        // Пользователь - Администратор - Все права
        РазрешитьИзменениеПодразделения = Истина;
        
    ИначеЕсли Результат.НайтиСтроки(Новый Структура("Наименование", "Руководители подразделений")).Количество() > 0  Тогда
        
        // Это руководитель подразделения - ограничим доступ подразделением, где он руководит
        РазрешенноеПодразделение = РаботаСПользователями.ПолучитьПодразделение(ТекущийПользователь);
        Подразделение = РазрешенноеПодразделение;
        РазрешитьИзменениеПодразделения = Ложь;
    Иначе
        // Это исполнитель - ограничим доступ подразделением, где он работает
        РазрешенноеПодразделение = РаботаСПользователями.ПолучитьПодразделение(ТекущийПользователь);
        Подразделение = РазрешенноеПодразделение;
        РазрешитьИзменениеПодразделения = Ложь;
    КонецЕсли; 
    УстановитьПривилегированныйРежим(Ложь);
    
КонецФункции

&НаСервере
Процедура УстановитьПараметрыСписка()
    
    // Подразделение
	Если ЗначениеЗаполнено(Подразделение) Тогда
	    Список.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделение);
	Иначе	
		ПараметрОтбора = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Подразделение"));
		Если ПараметрОтбора <> Неопределено Тогда
			ПараметрОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли; 	
    
    // Период оплаты
    //  по умолчанию - все
    НачПер = Дата(1,1,1);
    КонПер = ТекущаяДата();
    
    Если ИспользоватьПериодОплаты Тогда
        Если ЗначениеЗаполнено(ПериодОплаты) Тогда
            НачПер = ПериодОплаты.ДатаНачала;
            КонПер = ПериодОплаты.ДатаОкончания;
        КонецЕсли;
    КонецЕсли; 
    
    Список.Параметры.УстановитьЗначениеПараметра("НачПер", НачПер);  
    Список.Параметры.УстановитьЗначениеПараметра("КонПер", КонПер);
    Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьПериодОплаты", ИспользоватьПериодОплаты);  
    
    //Оплаты.Параметры.УстановитьЗначениеПараметра("НачПер", НачПер);  
    //Оплаты.Параметры.УстановитьЗначениеПараметра("КонПер", КонПер);
    
    // Период актирования
    //  по умолчанию - все
    НачПерАкт = Дата(1,1,1);
    КонПерАкт = ТекущаяДата();
    
    Если ИспользоватьПериодАктирования Тогда
        Если ЗначениеЗаполнено(ПериодАктирования) Тогда
            НачПерАкт = ПериодАктирования.ДатаНачала;
            КонПерАкт = ПериодАктирования.ДатаОкончания;
        КонецЕсли;
    КонецЕсли; 
    
    Список.Параметры.УстановитьЗначениеПараметра("НачПерАкт", НачПерАкт);  
    Список.Параметры.УстановитьЗначениеПараметра("КонПерАкт", КонПерАкт);
    Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьПериодАктирования", ИспользоватьПериодАктирования);  
    
    //Оплаты.Параметры.УстановитьЗначениеПараметра("НачПерАкт", НачПерАкт);  
    //Оплаты.Параметры.УстановитьЗначениеПараметра("КонПерАкт", КонПерАкт);
    
    // Незавершенные
	//Если флНезавершенные Тогда
	    Список.Параметры.УстановитьЗначениеПараметра("флНезавершенные", флНезавершенные);
	//Иначе	
	//	ПараметрОтбора = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("флНезавершенные"));
	//	Если ПараметрОтбора <> Неопределено Тогда
	//		ПараметрОтбора.Использование = Ложь;
	//	КонецЕсли;
	//КонецЕсли; 	
    
    // Остальные
    Список.Параметры.УстановитьЗначениеПараметра("ТекДата", ТекущаяДата()); 
    
    Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", Неопределено);
    
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
    
    Если Не РазрешитьИзменениеПодразделения Тогда
        Если Подразделение <> РазрешенноеПодразделение и Подразделение.Родитель <> РазрешенноеПодразделение Тогда
            Предупреждение("Запрещено изменять подразделение!",3);
            Подразделение = РазрешенноеПодразделение;
        КонецЕсли; 
    КонецЕсли; 
    
    УстановитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
    ТекСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И (ТекСтрока.Свойство("Оплата")или(ТекСтрока.Свойство("Возврат"))или(ТекСтрока.Свойство("Актирование"))) Тогда
        Если (ТекСтрока.Оплата <> 0) или (ТекСтрока.Возврат <> 0) или (ТекСтрока.Актирование <> 0) Тогда
            //ПолучитьДетали(ТекСтрока.Ссылка);
            ПодключитьОбработчикОжидания("ОбработкаОжидания",0.2,Истина); 
        КонецЕсли; 
    //Иначе
    //    Детали.Очистить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()
    ТекЭтапДоговора = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ТекЭтапДоговора <> Неопределено Тогда
		Оплаты.Параметры.УстановитьЗначениеПараметра("ЭтапДоговора", ТекЭтапДоговора);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура флНезавершенныеПриИзменении(Элемент)
    УстановитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОплатыПриИзменении()
    ИспользоватьПериодОплаты = ЗначениеЗаполнено(ПериодОплаты);
    УстановитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура ПериодАктированияПриИзменении(Элемент)
    ИспользоватьПериодАктирования = ЗначениеЗаполнено(ПериодАктирования);
    УстановитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПериодОплатыПриИзменении(Элемент)
    УстановитьПараметрыСписка();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПериодАктированияПриИзменении(Элемент)
    УстановитьПараметрыСписка();
КонецПроцедуры



