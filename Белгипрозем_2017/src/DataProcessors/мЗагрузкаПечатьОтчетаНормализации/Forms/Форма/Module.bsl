
&НаКлиенте
Перем Док;

&НаКлиенте
Перем WordApp;

&НаКлиенте
Перем Селекция, НачалоЗакладки, Поиск;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Основание") Тогда
		ОтчетНормализации = Параметры.Основание;
		НомерОтчета = Параметры.НомерОтчета;
		ДатаОтчета = Параметры.ДатаОтчета;
		Утвердил = Параметры.Подписал;
		Если ЗначениеЗаполнено(Утвердил) Тогда
		    Подписал = Утвердил.ПредставлениеВДокументах;
		КонецЕсли; 
		ДолжностьСсылка = РаботаСПользователями.ПолучитьДолжность(Утвердил);
		Если ЗначениеЗаполнено(ДолжностьСсылка) Тогда
			Должность = ДолжностьСсылка.Наименование;
		КонецЕсли; 
		
		Дело = СвязиДокументов.ПолучитьСвязанныйДокумент(ОтчетНормализации, Справочники.ТипыСвязей.ОтноситсяК);
		Если ЗначениеЗаполнено(Дело) Тогда
			НомерДела = Дело.РегистрационныйНомер;
		КонецЕсли; 
		
		ОтчетНормализацииПриИзмененииНаСервере();
		
		Если Данные.Количество() > 0 Тогда
			НомерДела = Данные[0].НомерДела;
		КонецЕсли; 
		
	КонецЕсли; 
	НазваниеОрганизации = ОтчетНормализации.Организация.ПолноеНаименование;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок = "Открыть каталог для выгрузки";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлДБФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр    = "Файлы DBF (*.dbf)|*.dbf";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлДБФ = ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогЗагрузки = ДиалогВыбораФайла.Каталог;
		ИмяФайла = Сред(ФайлДБФ, СтрДлина(КаталогЗагрузки)+1); // без каталога
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4); // без расширения
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

&НаКлиенте
Процедура ДанныеПричинаПриИзменении(Элемент)
	ТекДанные = Элементы.Данные.ТекущиеДанные;
	ТекДанные.КодПричины = Число(КодПричины(ТекДанные.Причина));
	ТекДанные.ПолноеНаименование =  ПолноеНаименованиеПричины(ТекДанные.Причина);
	ТекДанные.ВидГраницы = ВидГраницыПричины(ТекДанные.Причина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПричины(Причина)
	Возврат Причина.Код;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеНаименованиеПричины(Причина)
	Возврат Причина.ПолноеНаименование;	
КонецФункции

&НаСервереБезКонтекста
Функция ВидГраницыПричины(Причина)
	Возврат Причина.ВидГраниц;	
КонецФункции

&НаКлиенте
Процедура ДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.Данные.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекДанные.НомерДела = НомерДела;		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКадастровыйНомерПриИзменении(Элемент)
	//ТекДанные = Элементы.Данные.ТекущиеДанные;
	//КадастровыйНомерПравильный(ТекДанные.КадастровыйНомер);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКадастровыйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	КадастровыйНомерПравильный(Текст);
КонецПроцедуры

&НаКлиенте
Функция КадастровыйНомерПравильный(КадастровыйНомер)
	Если СтрДлина(СокрЛП(КадастровыйНомер)) < 18 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не хватает символов";
		Сообщение.Поле = "Данные["+Элементы.Данные.ТекущаяСтрока+"].КадастровыйНомер";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли; 
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	Границы = Новый Массив;
	Границы.Добавить(ПредопределенноеЗначение("Перечисление.мВидыГраниц.Фиксированная"));
	Границы.Добавить(ПредопределенноеЗначение("Перечисление.мВидыГраниц.Нефиксированная"));
	
	ЗаполнитьПричины();
	
	//Причины = Новый Соответствие;
	НетПричин = Новый Соответствие;
	
	Данные.Очистить();
	
	хВ = Новый XBase(ФайлДБФ);
	Если хВ.Открыта() Тогда
		Пока Не хВ.ВКонце() Цикл
			Стр = Данные.Добавить();
			Стр.КадастровыйНомер = хВ.CADNUM;
			Стр.НомерДела = НомерДела;
			Стр.ВидГраницы = Границы[хВ.TBORDERLIN-1];
			Стр.КодПричины = хВ.REASON;
			КодПричины1С = Формат(Стр.КодПричины, "ЧЦ=9; ЧВН=; ЧГ=0");
			
			Отбор = Новый Структура("Код", КодПричины1С); 
			ИскСтроки = ТзПричины.НайтиСтроки(Отбор);
			Если ИскСтроки.Количество() = 0 Тогда
				// Причины с таким кодом нет
				НетТекПричины = НетПричин.Получить(Стр.КодПричины);
				Если НетТекПричины = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не найдена причина с кодом: "+Стр.КодПричины;
					Сообщение.Сообщить(); 
					
					НетПричин.Вставить(Стр.КодПричины, Стр.КодПричины); 
				КонецЕсли; 
			Иначе
				// проверка причины
				Если ИскСтроки[0].ВидГраниц <> Стр.ВидГраницы Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Причина не соответствует виду границы у: "+Стр.КадастровыйНомер;
					Сообщение.Сообщить(); 
				Иначе	
					Стр.Причина = ИскСтроки[0].Причина;
					Стр.ПолноеНаименование = ИскСтроки[0].ПолноеНаименование;
				КонецЕсли; 
			КонецЕсли; 
			хВ.Следующая();
		КонецЦикла;
		хВ.ЗакрытьФайл();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка открытия файла (dbf): "+ФайлДБФ;
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	Данные.Сортировать("КадастровыйНомер");
КонецПроцедуры

&НаКлиенте
Функция НайтиПричину(Код)
	Отбор = Новый Структура("Код", Код); 
	ИскСтроки = ТзПричины.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе	
		ВОзврат ИскСтроки[0].Причина;
	КонецЕсли; 
КонецФункции 

&НаСервере
Процедура ЗаполнитьПричины()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мПричиныНормализации.Код,
		|	мПричиныНормализации.ПолноеНаименование,
		|	мПричиныНормализации.Ссылка КАК Причина,
		|	мПричиныНормализации.ВидГраниц КАК ВидГраниц
		|ИЗ
		|	Справочник.мПричиныНормализации КАК мПричиныНормализации
		|ГДЕ
		|	НЕ мПричиныНормализации.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(Результат, ТзПричины);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьДанныеНаСервере()
	НаборЗаписей = РегистрыСведений.мОтчетыНормализации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОтчетНормализации.Установить(ОтчетНормализации);

	Для каждого Стр Из Данные Цикл
		НовыйНабор = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйНабор, Стр);
		НовыйНабор.ОтчетНормализации = ОтчетНормализации;
		НовыйНабор.НомерДела = НомерДела;
	КонецЦикла; 
		
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	ПрикрепитьФайлы();
	
	// Запись данных отчета в РС
	ЗаписатьДанныеНаСервере();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Данные сохранены.";
	Сообщение.Сообщить(); 
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлы()
	Если Не ЗначениеЗаполнено(ФайлДБФ) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для загрузки файлов надо выбрать файл dbf.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВременныйПуть = КаталогВременныхФайлов();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = Сред(ФайлДБФ, СтрДлина(КаталогЗагрузки)+1); // без каталога
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4); // без расширения
	КонецЕсли; 
	ПутьКФайлуНаДиске = ВременныйПуть + ИмяФайла + ".dbf";
	
	КопироватьФайл(ФайлДБФ, ПутьКФайлуНаДиске);
	
	// Запись номера отчета во временный файл
	ВыбФайл = Новый Файл(ПутьКФайлуНаДиске);
	Если ВыбФайл.Существует() Тогда
		хВ = Новый XBase(ПутьКФайлуНаДиске);
		Если хВ.Открыта() Тогда
			Пока Не хВ.ВКонце() Цикл
				
				хВ.REPORT = НомерОтчета;
				хВ.Записать();
				
				хВ.Следующая();
				
			КонецЦикла;
			хВ.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
	
	// пометка на удаление существующих файлов
	УдалитьФайлыОтчета();
	
	// Добавление файлов в карточку Отчета
    МассивНайденныхФайлов = НайтиФайлы(
        КаталогЗагрузки, // где искать
        ИмяФайла + ".*", // маска поиска
        Ложь // если Истина, то будет искать и в подкаталогах
   	);
	
	Для Каждого Файл Из МассивНайденныхФайлов Цикл
		Если Файл.Расширение = ".dbf" Тогда
			// Подменяем временным файлом
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, ОтчетНормализации, ЭтаФорма, Истина, , , , ,);
		Иначе	
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(Файл.ПолноеИмя, ОтчетНормализации, ЭтаФорма, Истина, , , , ,);
		КонецЕсли; 
	КонецЦикла;
	
	// Удаляем временный файл
	УдалитьФайлы(ПутьКФайлуНаДиске);
	
КонецПроцедуры
 

&НаКлиенте
Процедура УдалитьФайлыОтчета()
	Если  ЗначениеЗаполнено(ОтчетНормализации) Тогда
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ОтчетНормализации, 
		Истина);
		
		УдалитьФайлыНаСервере(МассивФайлов);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлыНаСервере(МассивФайлов)
	Для каждого ТекФайл Из МассивФайлов Цикл
		Если Не ТекФайл.ПометкаУдаления Тогда
			ФайлОбъект = ТекФайл.ПолучитьОбъект();
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
			ФайлОбъект.Записать();
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	СоздатьДокумент = Ложь;
	Если Данные.Количество() > 1 Тогда
		ПечатьНесколькоУчастков();
	Иначе	
	    ПечатьОдинУчасток();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНесколькоУчастков()
	
	ИнициализироватьДокументWord();
	
	//Штрихкод
	ВставитьШтрихКод();
	
	мРазноеКлиент.Заменить(Поиск, "/НомерОтчета/", НомерОтчета);  
	мРазноеКлиент.Заменить(Поиск, "/ДатаОтчета/", ДатаОтчета); 
	мРазноеКлиент.Заменить(Поиск, "/НазваниеОрганизации/", НазваниеОрганизации); 
	
	// Подсчет количества абзацев
	СтрАбзацев = Новый Структура;
	
	// Для правильного обхода структуры абзацев запись ключей в массив
	МассивКлючей = Новый Массив;
	
	Для каждого Стр Из Данные Цикл
		КлючПоиска = "_"+Строка(Стр.КодПричины)+"_"+Строка(Стр.ВидГраницы);
		Если Не СтрАбзацев.Свойство(КлючПоиска) Тогда
			СтрЭлемент = Новый Структура("Причина, ВидГраницы", Стр.Причина, Стр.ВидГраницы); 
			СтрАбзацев.Вставить(КлючПоиска, СтрЭлемент);
			МассивКлючей.Добавить(КлючПоиска);
		КонецЕсли; 
	КонецЦикла; 
	
	// Создание абзацев
	НачалоЗакладки = Док.Bookmarks("Абзац").Start;
	Селекция.Start = НачалоЗакладки;
	Селекция.End = Док.Bookmarks("Абзац").End;
	Селекция.Cut();
	
	КоличествоАбзацев = СтрАбзацев.Количество();
	
	// Абзацы обходим от последнего
	й = МассивКлючей.Количество()-1;
	Пока й >= 0 Цикл
	    Ключ = МассивКлючей[й];
		Стр = "";
		СтрАбзацев.Свойство(Ключ, Стр);
		
		селекция.Start = НачалоЗакладки; // Начало вставки
		селекция.Collapse();             // Вставка, а не замещение
		селекция.Paste();
		
		Если Стр.ВидГраницы = ПредопределенноеЗначение("Перечисление.мВидыГраниц.Нефиксированная") Тогда
			ВидГраниц = "нефиксированными";
		Иначе
			ВидГраниц = "фиксированными";
		КонецЕсли; 
		мРазноеКлиент.Заменить(Поиск, "/ВидГраницы/", ВидГраниц); 
		ИскСтроки = Данные.НайтиСтроки(Стр);
		Если ИскСтроки.Количество() > 0 Тогда
			мРазноеКлиент.Заменить(Поиск, "/Причина/", ИскСтроки[0].ПолноеНаименование);
		Иначе
			мРазноеКлиент.Заменить(Поиск, "/Причина/", "");
		КонецЕсли; 
		й = й-1;
	КонецЦикла;
	
	// Заполнение таблиц в абзацах
	//  В доке таблицы уже идут в правильной последовательности
	НомерТаблицыДок = 2; // первая таблица уже есть в шапке - пропускаем
	Для каждого Стр Из СтрАбзацев Цикл
		Таблица = Док.Content.Tables(НомерТаблицыДок);
		НомерТаблицыДок = НомерТаблицыДок +1;
		
		ИскСтроки = Данные.НайтиСтроки(Стр.Значение);
		КоличествоНомеров = ИскСтроки.Количество();
		КоличествоСтрок = Цел(КоличествоНомеров/4);
		Если КоличествоНомеров%4 > 0 Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли; 
		
		Для й=1 По КоличествоСтрок Цикл
			Таблица.Cell(й, 1).Range().Text = ИскСтроки[(й-1)].КадастровыйНомер;
			Если (й-1)+КоличествоСтрок < КоличествоНомеров Тогда
				Таблица.Cell(й, 2).Range().Text = ИскСтроки[(й-1)+КоличествоСтрок].КадастровыйНомер;
			Иначе
				Таблица.Cell(й, 2).Range().Text = "";
			КонецЕсли; 
			Если (й-1)+КоличествоСтрок*2 < КоличествоНомеров Тогда
				Таблица.Cell(й, 3).Range().Text = ИскСтроки[(й-1)+КоличествоСтрок*2].КадастровыйНомер;
			Иначе
				Таблица.Cell(й, 3).Range().Text = "";
			КонецЕсли; 
			Если (й-1)+КоличествоСтрок*3 < КоличествоНомеров Тогда
				Таблица.Cell(й, 4).Range().Text = ИскСтроки[(й-1)+КоличествоСтрок*3].КадастровыйНомер;
			Иначе
				Таблица.Cell(й, 4).Range().Text = "";
			КонецЕсли; 
			Если й < КоличествоСтрок Тогда
				Таблица.Rows.Add();
			КонецЕсли; 			
		КонецЦикла;
	КонецЦикла; 
	
	// Подпись
	мРазноеКлиент.Заменить(Поиск, "/Подписал/", Подписал); 
	мРазноеКлиент.Заменить(Поиск, "/Должность/", Должность);

	// Вывод на печать или в файл
	ВывестиДокумент();
КонецПроцедуры

&НаКлиенте                                                                                    
Процедура ПечатьОдинУчасток()
	ИнициализироватьДокументWord();
	
	//Штрихкод
	ВставитьШтрихКод();
	
	//шапка
	мРазноеКлиент.Заменить(Поиск, "/НомерОтчета/", НомерОтчета);  
	мРазноеКлиент.Заменить(Поиск, "/ДатаОтчета/", ДатаОтчета); 
	мРазноеКлиент.Заменить(Поиск, "/НазваниеОрганизации/", НазваниеОрганизации); 
	
	// текст
	Если Данные[0].ВидГраницы = ПредопределенноеЗначение("Перечисление.мВидыГраниц.Нефиксированная") Тогда
		ВидГраниц = "нефиксированными";
	Иначе
		ВидГраниц = "фиксированными";
	КонецЕсли; 
	мРазноеКлиент.Заменить(Поиск, "/ВидГраницы/", ВидГраниц); 
	мРазноеКлиент.Заменить(Поиск, "/Причина/", Строка(Данные[0].ПолноеНаименование));
	мРазноеКлиент.Заменить(Поиск, "/КадастровыйНомер/", Строка(Данные[0].КадастровыйНомер));
	
	// Подпись
	мРазноеКлиент.Заменить(Поиск, "/Подписал/", Подписал); 
	мРазноеКлиент.Заменить(Поиск, "/Должность/", Должность);

	// Вывод на печать или в файл
	ВывестиДокумент();
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СоздатьДокумент = Истина;
	Если Данные.Количество() > 1 Тогда
		ПечатьНесколькоУчастков();
	Иначе	
	    ПечатьОдинУчасток();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОтчетНормализацииПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мОтчетыНормализации.ОтчетНормализации,
		|	мОтчетыНормализации.Причина,
		|	мОтчетыНормализации.ВидГраницы,
		|	мОтчетыНормализации.НомерДела,
		|	мОтчетыНормализации.КадастровыйНомер,
		|	мОтчетыНормализации.ОтчетНормализации.ДатаРегистрации КАК ДатаРегистрации,
		|	мОтчетыНормализации.ОтчетНормализации.РегистрационныйНомер КАК РегистрационныйНомер
		|ИЗ
		|	РегистрСведений.мОтчетыНормализации КАК мОтчетыНормализации
		|ГДЕ
		|	мОтчетыНормализации.ОтчетНормализации = &ОтчетНормализации";
	
	Запрос.УстановитьПараметр("ОтчетНормализации", ОтчетНормализации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Данные.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Стр = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, Выборка);
		
		НомерОтчета = Выборка.РегистрационныйНомер;
		ДатаОтчета = Выборка.ДатаРегистрации;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНормализацииПриИзменении(Элемент)
	ОтчетНормализацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	ОтчетНормализацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	Если  Не ЗначениеЗаполнено(ОтчетНормализации) Тогда
		Возврат;
	КонецЕсли; 	
	
	СписокФайлов = ПолучитьВсеПодчиненныеФайлы(
	ОтчетНормализации, 
	Ложь);
	
	МассивФайлов = Новый Массив;
	Для каждого ЭлементСписка Из СписокФайлов Цикл
		ИмяФайлаНаСервере = ЭлементСписка.Значение;
		Адрес = ПолучитьАдресФайла(ИмяФайлаНаСервере);
		ИмяФайлаНаКлиенте = КаталогВыгрузки+"\"+ЭлементСписка.Представление;
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайлаНаКлиенте, Адрес);
		МассивФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	// Добавление отчета в форме дбф
	ОписаниеФайла = ВыгрузитьДанныеВФайлДБФ();
	МассивФайлов.Добавить(ОписаниеФайла);
	
	ПолученныеФайлы = Новый Массив;
	Результат = ПолучитьФайлы(МассивФайлов, ПолученныеФайлы, КаталогВыгрузки, Ложь);
	Если НЕ Результат Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка выгрузки файлов!";
		Сообщение.Сообщить();
	Иначе
		ПоказатьОповещениеПользователя("Файлы сохранены");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАдресФайла(ИмяФайлаНаСервере)
	Двоичное = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное,  ЭтаФорма.УникальныйИдентификатор);
	Возврат Адрес;
КонецФункции

&НаСервере
Функция ПолучитьВсеПодчиненныеФайлы(ВладелецФайла, ПолучатьПомеченныеНаУдаление = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК ИмяФайла,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	Файлы.ТекущаяВерсияПутьКФайлу КАК ПутьКФайлу,
		|	Файлы.ТекущаяВерсияТом.ПолныйПутьWindows КАК Том
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла";
		
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + " И Файлы.ПометкаУдаления = &ПометкаУдаления";
	КонецЕсли;	
		
	Запрос.Текст = Запрос.Текст + 	
		" УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование";
		
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокФайлов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Если Прав(Строка(Выборка.Том), 1) = "\" Тогда
			СписокФайлов.Добавить(Строка(Выборка.Том)+Строка(Выборка.ПутьКФайлу), Строка(Выборка.ИмяФайла)+"."+Выборка.Расширение);
		Иначе	
			СписокФайлов.Добавить(Строка(Выборка.Том)+"\"+Строка(Выборка.ПутьКФайлу), Строка(Выборка.ИмяФайла)+"."+Выборка.Расширение);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьДанныеВФайлДБФ()
	// создание
	ПозицияРазделителя = СтрНайти(НомерОтчета, "/");
	НомерОтчетаДляФайла = Лев(НомерОтчета, ПозицияРазделителя-1);
	НомерОтчетаДляФайла = Лев(НомерОтчетаДляФайла, 8); // ограничение для dbf
	ИмяФайлаВыгрузки = КаталогВременныхФайлов()+НомерОтчетаДляФайла+".dbf";
	ФайлВыгрузки = СоздатьФайлДБФ(ИмяФайлаВыгрузки);
	
	// Заполнение
	Для каждого Стр Из Данные Цикл
		ФайлВыгрузки.Добавить();
		ФайлВыгрузки.CADNUM = Стр.КадастровыйНомер;
		ФайлВыгрузки.REASON = Число(КодПричины(Стр.Причина));
	    ФайлВыгрузки.REPORT = НомерОтчета;
		Если Стр.ВидГраницы = ПредопределенноеЗначение("Перечисление.мВидыГраниц.Фиксированная") Тогда
			ФайлВыгрузки.TBORDERLIN = 1;
		Иначе	
			ФайлВыгрузки.TBORDERLIN = 2;
		КонецЕсли; 
		ФайлВыгрузки.Записать();
	КонецЦикла;
	
	// сохранение
	Если ФайлВыгрузки.Открыта() Тогда
		ФайлВыгрузки.ЗакрытьФайл();	
	КонецЕсли; 
	
	// Описание
	Адрес = ПолучитьАдресФайла(ИмяФайлаВыгрузки);
	ИмяФайлаВыгрузки = КаталогВыгрузки+"\"+НомерОтчетаДляФайла+".dbf";
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ИмяФайлаВыгрузки, Адрес);
	
	Возврат ОписаниеФайла;
КонецФункции
 
&НаКлиенте
Функция СоздатьФайлДБФ(ИмяФайлаВыгрузки)
	НовыйФайл = Новый XBase;
	НовыйФайл.Кодировка = КодировкаXBase.ANSI;
	НовыйФайл.Поля.Добавить("CADNUM","S",18) ;
	НовыйФайл.Поля.Добавить("TBORDERLIN","N",4);
	НовыйФайл.Поля.Добавить("REASON","N",4) ;
	НовыйФайл.Поля.Добавить("REPORT","S",30) ;
	
	НовыйФайл.СоздатьФайл(ИмяФайлаВыгрузки);
	Возврат НовыйФайл;
КонецФункции 



#КонецОбласти

#Область СлужебныеПроцедурыИФункции



#КонецОбласти

#Область ОбщиеПроцедурыПечати

&НаКлиенте
Процедура ИнициализироватьДокументWord() 
    
	Макет = ПолучитьМакетСервер();
	временныйПуть = КаталогВременныхФайлов();
	ПутьКФайлуНаДиске = "Отч "+НомерОтчета+".docx";
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "/", "_");
	ПутьКФайлуНаДиске = СтрЗаменить(ПутьКФайлуНаДиске, "\", "_");
	ПутьКФайлуНаДиске = временныйПуть + ПутьКФайлуНаДиске;
	Макет.Записать(ПутьКФайлуНаДиске);
	
	//АдресХранения = ПолучитьАдресФайлаШаблона(ШаблонДоговора);
	//
	//Описание=Новый ОписаниеПередаваемогоФайла(ПутьКФайлуНаДиске, АдресХранения);
	//МассивОписаний=Новый Массив;
	//МассивОписаний.Добавить(Описание);
	//ПолучитьФайлы(МассивОписаний,,,Ложь);
	
	WordApp = Новый COMОбъект("Word.Application");
	
	Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
	
	Селекция = WordApp.Selection;
	
	Поиск = Док.Content.Find;
	Поиск.ClearFormatting();
	Поиск.Replacement.ClearFormatting();
КонецПроцедуры 

&НаСервере
Функция ПолучитьМакетСервер()
	Если Данные.Количество() = 1 Тогда
		ИмяМакета = "ПФ_DOCX_ОтчетНормОдин";	
	Иначе	
		ИмяМакета = "ПФ_DOCX_ОтчетНормМного";	
	КонецЕсли; 
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура ВывестиДокумент() 
	Если НЕ СоздатьДокумент Тогда
		
		Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
		Док.Saved = Истина;
		//Док.PrintOut();
		Док.Close(); 
		WordApp.Quit();	
		WordApp = Неопределено;
		
		ЗапуститьПриложение(ПутьКФайлуНаДиске,, , ); 
		
	Иначе
		WordApp.Visible = Ложь; 
		
		Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
		Док.Saved = Истина;
		Док.Close(); 
		
		РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ПутьКФайлуНаДиске, ОтчетНормализации, ЭтаФорма, Истина, , , , ,);
		
		WordApp.Quit();	
		WordApp = Неопределено;
		
		УдалитьФайлы(ПутьКФайлуНаДиске);	
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура ВставитьШтрихКод()
	ОбъектДляВставкиШК = ОтчетНормализации;
	
	ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ОбъектДляВставкиШК, Ложь, Истина);
	Если ДанныеОШтрихкоде <> Неопределено
		И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
		
		// Запись картинки штрихкода во временный файл
		ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
		ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
		
		Док.Bookmarks("Штрихкод").Range.Select();
		Селекция = WordApp.Selection; // активная (выделенная) область 
		Рисунок = Селекция.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
		
		// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
		Shape = Рисунок.ConvertToShape();
		Shape.WrapFormat.Type = 0; // по контуру...
		
		УдалитьФайлы(ВременныйФайлКартинки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 
