
&НаКлиенте
Процедура ДоговораПриАктивизацииСтроки(Элемент)
	Если Элементы.Акты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ОбновитьЗарплата();
	РассчитатьОбъемРаботКРаспределению();
КонецПроцедуры

&НаКлиенте
Процедура ДоговораНомерАктаПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	РеквАкта = ДоговораНомерАктаПриИзмененииНаСервере(ТекДанные.НомерАкта);
	ЗаполнитьЗначенияСвойств(ТекДанные, РеквАкта);
	ОбновитьЗарплата();
	
	РассчитатьОбъемРаботКРаспределению();
КонецПроцедуры

&НаСервере
Функция ДоговораНомерАктаПриИзмененииНаСервере(НомерАкта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеЗарплата.Ссылка КАК Актирование,
		|	мАктированиеЗарплата.НомерСтроки,
		|	мАктированиеЗарплата.ЭтапДоговора КАК ЭтапДоговора,
		|	мАктированиеЗарплата.Исполнитель КАК Исполнитель,
		|	мАктированиеЗарплата.КТУ,
		|	мАктированиеЗарплата.Норматив,
		|	мАктированиеЗарплата.Коэффициент,
		|	мАктированиеЗарплата.ОбъемРабот,
		|	мАктированиеЗарплата.Начислено,
		|	мАктированиеЗарплата.БазовоеНачисление,
		|	мАктированиеЗарплата.ОбоснованиеКоэффициента,
		|	мАктированиеЗарплата.Подразделение,
		|	мАктированиеЗарплата.НомерАкта,
		|	мАктированиеЗарплата.НеОсновноеПодразделение,
		|	мАктированиеЗарплата.ЭтапДоговора.Владелец КАК Договор,
		|	мАктированиеЗарплата.Исполнитель.ТабельныйНомер КАК ТабельныйНомер,
		|	мАктированиеАкты.ЭтапДоговора.НомерЭтапа КАК НомерЭтапа,
		|	мАктированиеАкты.ДатаАкта,
		|	мАктированиеАкты.Сумма,
		|	мАктированиеАкты.НДС,
		|	мАктированиеАкты.СуммаПрочих
		|ИЗ
		|	Документ.мАктирование.Зарплата КАК мАктированиеЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.мАктирование.Акты КАК мАктированиеАкты
		|		ПО мАктированиеЗарплата.Ссылка = мАктированиеАкты.Ссылка
		|ГДЕ
		|	НЕ мАктированиеЗарплата.Ссылка.ПометкаУдаления
		|	И мАктированиеЗарплата.НомерАкта = &НомерАкта
		|	И мАктированиеАкты.НомерАкта = &НомерАкта";
	
	Запрос.УстановитьПараметр("НомерАкта", НомерАкта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Сч=0;
	РеквАкта = Новый Структура("ДатаАкта, Сумма, НДС, СуммаПрочих, НомерЭтапа");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр = Объект.Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, ВыборкаДетальныеЗаписи);
		Сч=Сч+1;
		Если Сч = 1 Тогда
			ЗаполнитьЗначенияСвойств(РеквАкта, ВыборкаДетальныеЗаписи);
		КонецЕсли;
	КонецЦикла;
	Возврат РеквАкта;
КонецФункции

&НаКлиенте
Процедура ОбновитьЗарплата()
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Отбор = Новый ФиксированнаяСтруктура("НомерАкта, Актирование"
		, ТекДанные.НомерАкта, ТекДанные.Актирование);
	Элементы.Зарплата.ОтборСтрок = Отбор;
КонецПроцедуры // ОбоновитьЗарплата()

&НаКлиенте
Процедура ДоговораПередУдалением(Элемент, Отказ)
	ДоговораПередУдалениемНаСервере(Элементы.Акты.ТекущиеДанные.НомерАкта);
КонецПроцедуры

&НаСервере
Процедура ДоговораПередУдалениемНаСервере(НомерАкта)
	Отбор = Новый Структура("НомерАкта", НомерАкта);
	МассивСтрок = Объект.Зарплата.НайтиСтроки(Отбор);
	
	Для каждого Эл Из МассивСтрок Цикл
		Объект.Зарплата.Удалить(Эл);
	КонецЦикла; 
КонецПроцедуры // ДоговораПередУдалениемНаСервере()
 
&НаКлиенте
Процедура РассчитатьОбъемРаботКРаспределению()
    
    ОбъемРаботКРаспределению = 0;
    
    ТекСтрока = Элементы.Акты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
    
    Если ТекСтрока.Сумма = 0 Тогда
        Возврат;    
    КонецЕсли; 
    
    ОбъемРаботКРаспределению = ТекСтрока.Сумма - ТекСтрока.НДС - ТекСтрока.СуммаПрочих;
	
	РассчитатьОбъемРаботНеРаспределено();
        
КонецПроцедуры // РассчитатьОбъемРаботКРаспределению()

&НаКлиенте
Процедура РассчитатьОбъемРаботНеРаспределено()
    
	ОбъемРаботНеРаспределено = ОбъемРаботКРаспределению  - РассчитатьОбъемРаботРаспределено();
    
    Если ОбъемРаботНеРаспределено = 0 Тогда
        Элементы.ОбъемРаботНеРаспределено.ЦветТекста = WebЦвета.Черный;
    Иначе
        Элементы.ОбъемРаботНеРаспределено.ЦветТекста = WebЦвета.Красный;
    КонецЕсли; 
    
КонецПроцедуры // РассчитатьОбъемРаботНеРаспределено()

&НаКлиенте
Функция РассчитатьОбъемРаботРаспределено()
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	
	Распределено = ПолучитьРаспределено(ТекДанные.НомерАкта);
	
	Возврат Распределено;
КонецФункции // РассчитатьОбъемРаботРаспределено()

&НаСервере
Функция ПолучитьРаспределено(НомерАкта)
	Отбор = Новый Структура("НомерАкта", НомерАкта);
	МассивСтрок = Объект.Зарплата.НайтиСтроки(Отбор);
	
	Распределено = 0;
    Для каждого Стр Из МассивСтрок Цикл
        Распределено = Распределено + Стр.ОбъемРабот;           
	КонецЦикла;
	Возврат Распределено;
КонецФункции // ПолучитьРаспределено()
 
&НаКлиенте
Процедура ЗарплатаПослеУдаления(Элемент)
	РассчитатьОбъемРаботКРаспределению();
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	// Получим массив документов Актирования 
	МассивДок = Новый Массив;
	
	Для каждого Док Из Объект.Зарплата Цикл
		Если МассивДок.Найти(Док.Актирование) = Неопределено Тогда
			МассивДок.Добавить(Док.Актирование);
		КонецЕсли; 
	КонецЦикла; 
	
	Для й=0 По МассивДок.Количество()-1 Цикл
		Док = МассивДок[й];
		Процент = Окр((й+1)/МассивДок.Количество()*100, 2);
		Состояние("Проведение актирования...", Процент, "Обрабатывается " + Док, );
		ОбработатьДок(Док);
	КонецЦикла; 
	
	Состояние("Обработка завершена!");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДок(Док)
	// получение массива номеров актов для обработки
	Отбор = Новый Структура("Актирование", Док); 
	МассивСтрок = Объект.Зарплата.НайтиСтроки(Отбор);
	
	МассивАктов = Новый Массив;
	Для каждого Строка Из МассивСтрок Цикл
		Если МассивАктов.Найти(Строка.НомерАкта) = Неопределено Тогда
			МассивАктов.Добавить(Строка.НомерАкта);
		КонецЕсли; 
	КонецЦикла; 
	
	ТекДок = Док.ПолучитьОбъект();
	Тч_Зарплата = ТекДок.Зарплата;
	Тч_Акты = ТекДок.Акты;
	
	Для каждого НомерАкта Из МассивАктов Цикл
		
		// удаление начислений по актам из документа
		Отбор = Новый Структура("НомерАкта", НомерАкта); 
		МассивСтрок = Тч_Зарплата.НайтиСтроки(Отбор);
	    Для каждого Строка Из МассивСтрок Цикл
			Тч_Зарплата.Удалить(Строка);
		КонецЦикла; 
		
		// Добавление измененных записей ЗП
		ДатаАкта = "";
		МассивСтрок = Объект.Зарплата.НайтиСтроки(Отбор);
		Для каждого Строка Из МассивСтрок Цикл
			НоваяСтрока = Тч_Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ДатаАкта = Строка.ДатаАкта;
		КонецЦикла;
		
		// Проверка/изменение даты акта
		Если ЗначениеЗаполнено(ДатаАкта) Тогда
			СтрокиАктов = Тч_Акты.НайтиСтроки(Отбор);
			Для каждого СтрокаАкта Из СтрокиАктов Цикл
				Если СтрокаАкта.ДатаАкта <> ДатаАкта Тогда
					СтрокаАкта.ДатаАкта = ДатаАкта;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТекДок.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры // ОбработатьДок()

&НаКлиенте
Процедура ЗарплатаКТУПриИзменении(Элемент)
    ТекСтрока = Элементы.Зарплата.ТекущиеДанные;
    ТекСтрока.ОбъемРабот = Окр(ПолучитьОбъемРаботКРаспределению() * ТекСтрока.КТУ, мРазное.ЗнакОкр(Период.ДатаОкончания));

    РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

// Объем, который отображается в форме надо еще уменьшить на суммы, которые отданы другим подразделениям
&НаКлиенте
Функция ПолучитьОбъемРаботКРаспределению()
    КРаспределению = ОбъемРаботКРаспределению;
	ТекНомерАкта = Элементы.Акты.ТекущиеДанные.НомерАкта;
	
	Для каждого СтрЗарп Из Объект.Зарплата Цикл
		Если ТекНомерАкта = СтрЗарп.НомерАкта Тогда
			Если СтрЗарп.НеОсновноеПодразделение Тогда
				КРаспределению = КРаспределению - СтрЗарп.ОбъемРабот;
			КонецЕсли; 
		КонецЕсли; 
    КонецЦикла; 
    Возврат КРаспределению;
КонецФункции

&НаКлиенте
Процедура ЗарплатаНормативПриИзменении(Элемент)
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаКоэффициентПриИзменении(Элемент)
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуИсполнителя(СтруктураСтроки = "")
	Если СтруктураСтроки = "" Тогда
		ТекСтрока = Элементы.Зарплата.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ТекСтрока.Начислено = Окр(ТекСтрока.ОбъемРабот * ТекСтрока.Норматив * ТекСтрока.Коэффициент, мРазное.ЗнакОкр(Период.ДатаОкончания));
		ТекСтрока.БазовоеНачисление = Окр(ТекСтрока.ОбъемРабот * ТекСтрока.Норматив, мРазное.ЗнакОкр(Период.ДатаОкончания));
	Иначе
		СтруктураСтроки.Начислено = Окр(СтруктураСтроки.ОбъемРабот * СтруктураСтроки.Норматив * СтруктураСтроки.Коэффициент, мРазное.ЗнакОкр(Период.ДатаОкончания));
		СтруктураСтроки.БазовоеНачисление = Окр(СтруктураСтроки.ОбъемРабот * СтруктураСтроки.Норматив, мРазное.ЗнакОкр(Период.ДатаОкончания));
	КонецЕсли; 
КонецПроцедуры // РассчитатьСуммуИсполнителя()

&НаКлиенте
Процедура АктыНомерДоговораПриИзменении(Элемент)
    ТС = Элементы.Акты.ТекущиеДанные;
	
    СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(ТС.НомерДоговора);
    
    ВыбЭлемент = Неопределено;
    Если СписокДоговоров.Количество() > 1 Тогда
    	ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
    ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
    	ВыбЭлемент = СписокДоговоров.Получить(0);
    КонецЕсли; 
    Если ВыбЭлемент = Неопределено Тогда
    	Возврат;
    КонецЕсли;
    
    ТС.Договор = ВыбЭлемент.Значение;
	
	ЗаполнитьСтрокуАкта(ТС.Договор, Элементы.Акты.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуАкта(Договор ,ИндексСтроки)
	
	ТзАкты = ДанныеФормыВЗначение(Акты, Тип("ТаблицаЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеЗарплата.Ссылка,
		|	мАктированиеЗарплата.НомерСтроки КАК НомерСтроки,
		|	мАктированиеЗарплата.ЭтапДоговора,
		|	мАктированиеЗарплата.Исполнитель,
		|	мАктированиеЗарплата.КТУ,
		|	мАктированиеЗарплата.Норматив,
		|	мАктированиеЗарплата.Коэффициент,
		|	мАктированиеЗарплата.ОбъемРабот,
		|	мАктированиеЗарплата.Начислено,
		|	мАктированиеЗарплата.ОбоснованиеКоэффициента,
		|	мАктированиеЗарплата.Подразделение,
		|	мАктированиеЗарплата.НомерАкта КАК НомерАкта,
		|	мАктированиеЗарплата.НеОсновноеПодразделение,
		|	мАктированиеАкты.Сумма,
		|	мАктированиеАкты.НДС,
		|	мАктированиеАкты.СуммаПрочих,
		|	мАктированиеАкты.ДатаАкта
		|ИЗ
		|	Документ.мАктирование.Акты КАК мАктированиеАкты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.мАктирование.Зарплата КАК мАктированиеЗарплата
		|		ПО мАктированиеАкты.Ссылка = мАктированиеЗарплата.Ссылка
		|			И мАктированиеАкты.ЭтапДоговора = мАктированиеЗарплата.ЭтапДоговора
		|			И мАктированиеАкты.НомерАкта = мАктированиеЗарплата.НомерАкта
		|ГДЕ
		|	мАктированиеАкты.Договор = &Договор
		|	И мАктированиеАкты.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерАкта,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	
	
КонецПроцедуры // ЗаполнитьСтрокуАкта()

&НаКлиенте
Процедура ИскНомерДоговораПриИзменении(Элемент)
	// Сначала ищем в тч Акты, если не находим, то в Актировании
    СписокДоговоров = мРаботаСДоговорами.ПолучитьСписокДоговоровПоНомеру(ИскНомерДоговора);
    
    ВыбЭлемент = Неопределено;
    Если СписокДоговоров.Количество() > 1 Тогда
    	ВыбЭлемент = СписокДоговоров.ВыбратьЭлемент(,);
    ИначеЕсли СписокДоговоров.Количество() = 1 Тогда
    	ВыбЭлемент = СписокДоговоров.Получить(0);
    КонецЕсли; 
	Если ВыбЭлемент = Неопределено Тогда
		Сообщить("Договоров с номером " + ИскНомерДоговора + " не найдено!");
		Элементы.Акты.ОтборСтрок = Неопределено;
		Элементы.Акты.ТекущаяСтрока = Акты[0].ПолучитьИдентификатор();
    	Возврат;
    КонецЕсли;
    
    Договор = ВыбЭлемент.Значение;
	
	Если ИскНомерДоговораПриИзмененииНаСервере(Договор) Тогда
		// отобразить договор в актах
		Отбор = Новый ФиксированнаяСтруктура("Договор", Договор);
		Элементы.Акты.ОтборСтрок = Отбор;
		Элементы.Акты.ТекущаяСтрока = Акты[0].ПолучитьИдентификатор();
		
		ОбновитьЗарплата();
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ИскНомерДоговораПриИзмененииНаСервере(Договор)
	
	ТзАкты = ДанныеФормыВЗначение(Акты, Тип("ТаблицаЗначений"));
	
	Отбор = Новый Структура("Договор", Договор); 
	МассивСтрок = ТзАкты.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		ЗначениеВДанныеФормы(ТзАкты, Акты);
		Возврат Истина;
	КонецЕсли; 

	Возврат ПолучитьДанныеДоговораИзБазы(Договор);
КонецФункции

&НаСервере
Функция ПолучитьДанныеДоговораИзБазы(Договор)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мАктированиеЗарплата.Ссылка КАК Актирование,
		|	мАктированиеЗарплата.НомерСтроки КАК НомерСтроки,
		|	мАктированиеЗарплата.ЭтапДоговора,
		|	мАктированиеЗарплата.ЭтапДоговора.Владелец КАК Договор,
		|	мАктированиеЗарплата.Исполнитель,
		|	мАктированиеЗарплата.Исполнитель.ТабельныйНомер КАК ТабельныйНомер,
		|	мАктированиеЗарплата.КТУ,
		|	мАктированиеЗарплата.Норматив,
		|	мАктированиеЗарплата.Коэффициент,
		|	мАктированиеЗарплата.ОбъемРабот,
		|	мАктированиеЗарплата.Начислено,
		|	мАктированиеЗарплата.БазовоеНачисление,
		|	мАктированиеЗарплата.ОбоснованиеКоэффициента,
		|	мАктированиеЗарплата.Подразделение,
		|	мАктированиеЗарплата.НомерАкта КАК НомерАкта,
		|	мАктированиеЗарплата.НеОсновноеПодразделение,
		|	мАктированиеАкты.Сумма,
		|	мАктированиеАкты.НДС,
		|	мАктированиеАкты.СуммаПрочих,
		|	мАктированиеАкты.ДатаАкта КАК ДатаАкта
		|ИЗ
		|	Документ.мАктирование.Акты КАК мАктированиеАкты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.мАктирование.Зарплата КАК мАктированиеЗарплата
		|		ПО мАктированиеАкты.Ссылка = мАктированиеЗарплата.Ссылка
		|			И мАктированиеАкты.ЭтапДоговора = мАктированиеЗарплата.ЭтапДоговора
		|			И мАктированиеАкты.НомерАкта = мАктированиеЗарплата.НомерАкта
		|ГДЕ
		|	мАктированиеАкты.Договор = &Договор
		|	И мАктированиеАкты.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерАкта,
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ТзАкты = ДанныеФормыВЗначение(Акты, Тип("ТаблицаЗначений"));
	
	// очищаем введенные акты и ЗП по договору
	Отбор = Новый Структура("Договор", Договор);
	ИскСтроки = ТзАкты.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
		    ТзАкты.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
	ИскСтроки = Объект.Зарплата.НайтиСтроки(Отбор);
	Если ИскСтроки.Количество() > 0 Тогда
		Для каждого Стр Из ИскСтроки Цикл
		    Объект.Зарплата.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли; 
	
	// заполняем данными из базы
	Для каждого Стр Из Результат Цикл
		Отбор = Новый Структура("ЭтапДоговора, НомерАкта, Актирование", Стр.ЭтапДоговора, Стр.НомерАкта, Стр.Актирование);
		ИскСтроки = ТзАкты.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТзАкты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		КонецЕсли; 
		
		//ОтборЗП = Новый Структура("ЭтапДоговора, НомерАкта, Исполнитель, Начислено",
		//	Стр.ЭтапДоговора, Стр.НомерАкта, Стр.Исполнитель, Стр.Начислено);
		//	
		//ИскСтроки = Объект.Зарплата.НайтиСтроки(ОтборЗП);
		//Если ИскСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		//КонецЕсли; 
	КонецЦикла; 
	
	ЗначениеВДанныеФормы(ТзАкты, Акты);
	
	Возврат Истина;
КонецФункции // ПолучитьДанныеДоговораИзБазы()

&НаКлиенте
Процедура ОбновитьДоговор(Команда)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДоговор = ТекДанные.Договор;
		ПолучитьДанныеДоговораИзБазы(ТекДоговор);
		
		// установимся на обновляемый договор
		Отбор = Новый ФиксированнаяСтруктура("Договор", ТекДоговор);
		Элементы.Акты.ОтборСтрок = Отбор;
		Элементы.Акты.ТекущаяСтрока = Акты[0].ПолучитьИдентификатор();
		
		//ОбновитьЗарплата();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаОбъемРаботПриИзменении(Элемент)
    РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаИсполнительПриИзменении(Элемент)
    Тс = Элементы.Зарплата.ТекущиеДанные;
    
    ЗаполнитьНормативИПодразделение();
    
    Тс.ТабельныйНомер = ПолучитьТабельныйНомерИсполнителя(Тс.Исполнитель);
    
    ОпределитьНеОсновноеПодразделение();
    
	РассчитатьОбъемРаботКРаспределению();
    РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДопРеквДляНормативаЗП(ТекущийДоговор, ТекущийЭтапДоговора) Экспорт
	СтруктураДопРекв = Новый Структура("ВидЗаказчика, ЦельПредоставления, ДопУсловие", "", "", "");
	
	Корреспондент = ТекущийДоговор.Корреспондент;
	ВидЗаказчика = мРаботаСоСметами.ПолучитьДопРеквизит("Корреспонденты", Корреспондент, "Вид заказчика юр. лицо");
	СтруктураДопРекв.Вставить("ВидЗаказчика", ВидЗаказчика);
	
	Если Корреспондент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ИмяПВХ = "Цель предоставления зем. участка физлицам";
		ЦельПредоставления = мРаботаСоСметами.ПолучитьДопРеквизит("ВнутренниеДокументы", ТекущийДоговор, ИмяПВХ);
	Иначе
		ИмяПВХ = "Цель предоставления зем. участка юрлицам";
		ЦельПредоставления = ТекущийЭтапДоговора.КарточкаобъектаРабот.ЦельПредоставления;
	КонецЕсли;
	СтруктураДопРекв.Вставить("ЦельПредоставления", ЦельПредоставления);
	
	ДопУсловие = ТекущийЭтапДоговора.ДопУсловиеНормативаЗП;
	СтруктураДопРекв.Вставить("ДопУсловие", ДопУсловие);
	
	Возврат СтруктураДопРекв;
	
КонецФункции // ПолучитьДопРеквДляНормативаЗП()

&НаСервереБезКонтекста
Функция ПолучитьТабельныйНомерИсполнителя(Исполнитель)
	Возврат Исполнитель.ТабельныйНомер;
КонецФункции // ПолучитьТабельныйНомерИсполнителя()

&НаКлиенте
Процедура ОпределитьНеОсновноеПодразделение()
    Тс = Элементы.Зарплата.ТекущиеДанные;
	ПодразделениеЭтапа = ПолучитьРеквизитыЭтапа(Тс.ЭтапДоговора).Подразделение;
	Если Тс.Подразделение <> ПодразделениеЭтапа И ПолучитьРодителяПодразделения(Тс.Подразделение) <> ПодразделениеЭтапа Тогда
		Тс.НеОсновноеПодразделение = Истина;
	Иначе	
		Тс.НеОсновноеПодразделение = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыЭтапа(ЭтапДоговора)
    Рекв = Новый Структура;
    Рекв.Вставить("ОбъектРабот", ЭтапДоговора.ОбъектРабот);
    Рекв.Вставить("ИсточникФинансирования", ЭтапДоговора.ИсточникФинансирования);
    Рекв.Вставить("УсловияОплаты", ЭтапДоговора.ШаблонУсловийДоговора.Наименование);
    Рекв.Вставить("Договор", ЭтапДоговора.Владелец);
    Рекв.Вставить("Подразделение", ЭтапДоговора.Подразделение);
    Рекв.Вставить("ВидРабот", ЭтапДоговора.ВидРабот);

    Возврат Рекв;
КонецФункции // ПолучитьРеквизитыДоговора()

&НаСервереБезКонтекста
Функция ПолучитьРодителяПодразделения(Подразделение)
	Возврат Подразделение.Родитель;
КонецФункции

&НаКлиенте
Процедура ЗарплатаТабельныйНомерПриИзменении(Элемент)
    Тс = Элементы.Зарплата.ТекущиеДанные;
	Тс.Исполнитель = ПолучитьИсполнителяПоТабельныйНомер(Тс.ТабельныйНомер);
    
    ЗаполнитьНормативИПодразделение();
	
    ОпределитьНеОсновноеПодразделение();
	
	РассчитатьОбъемРаботКРаспределению();
	РассчитатьСуммуИсполнителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНормативИПодразделение()
    Тс = Элементы.Зарплата.ТекущиеДанные;
	ДанныеДляНорматива = ПолучитьДопРеквДляНормативаЗП(ТС.Договор, ТС.ЭтапДоговора);
	ДанныеДляНорматива.Вставить("Исполнитель", Тс.Исполнитель);
	ДанныеДляНорматива.Вставить("ВидРабот", ПолучитьРеквизитыЭтапа(Тс.ЭтапДоговора).ВидРабот);
	ДанныеДляНорматива.Вставить("Дата", Период.ДатаОкончания);
	
	Тс.Норматив = мРаботаСДоговорами.ПолучитьНормативЗП(ДанныеДляНорматива); 
    Тс.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Тс.Исполнитель);
КонецПроцедуры // ЗаполнитьНормативИПодразделение()

&НаСервереБезКонтекста
Функция ПолучитьИсполнителяПоТабельныйНомер(ТабельныйНомер)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ТабельныйНомер = &ТабельныйНомер";

	Запрос.УстановитьПараметр("ТабельныйНомер", ТабельныйНомер);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции // ПолучитьИсполнителяПоТабельныйНомер(ТабельныйНомер)

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Зарплата.ТекущиеДанные;
        ТекДанные.ЭтапДоговора = Элементы.Акты.ТекущиеДанные.ЭтапДоговора;
        ТекДанные.НомерАкта = Элементы.Акты.ТекущиеДанные.НомерАкта;
        ТекДанные.Актирование = Элементы.Акты.ТекущиеДанные.Актирование;
		ТекДанные.Коэффициент = 1;
        Если ФлОстаток Тогда
            ТекДанные.ОбъемРабот = ОбъемРаботНеРаспределено;
            ТекДанные.КТУ = ПолучитьОстатокКТУ();
        Иначе
            Если ДелитьНа = 0 Тогда
                ТекДанные.КТУ = 1;
                ТекДанные.ОбъемРабот = ПолучитьОбъемРаботКРаспределению();
            Иначе
                ТекДанные.КТУ = 1 / ДелитьНа;
                ТекДанные.ОбъемРабот = Окр(ПолучитьОбъемРаботКРаспределению() / ДелитьНа, мРазное.ЗнакОкр(Период.ДатаОкончания));
            КонецЕсли; 
        КонецЕсли; 
        РассчитатьОбъемРаботКРаспределению();
        РассчитатьСуммуИсполнителя();
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОстатокКТУ()
    ТекКТУ = 1;
	ТекНомерАкта = Элементы.Акты.ТекущиеДанные.НомерАкта;
	
    Для каждого СтрЗарп Из Объект.Зарплата Цикл
		Если ТекНомерАкта = СтрЗарп.НомерАкта И 
			Не СтрЗарп.НеОсновноеПодразделение Тогда
	    	ТекКТУ = ТекКТУ - СтрЗарп.КТУ;
		КонецЕсли; 
    КонецЦикла; 
    Возврат ТекКТУ;
КонецФункции

&НаКлиенте
Процедура ДелитьНаПриИзменении(Элемент)
    ПересчитатьОбъемРаботИсполнителей();
КонецПроцедуры

// Считаются только исполнители основного подразделения
&НаКлиенте
Процедура ПосчитатьИсполнителейИСуммуДляРаспределения()
	
    КолвоИсполнителейДляРаспределения = 0;
    СуммаДляРаспределения = ОбъемРаботКРаспределению;
    
    Для каждого ТекСтрока Из Объект.Зарплата Цикл
        Если ТекСтрока.НеОсновноеПодразделение Тогда
            // уменьшаем сумму к распределению на объем, отданный другим подразделениям
    	    СуммаДляРаспределения = СуммаДляРаспределения - ТекСтрока.ОбъемРабот;
        Иначе
            КолвоИсполнителейДляРаспределения = КолвоИсполнителейДляРаспределения + 1;
        КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ПосчитатьИсполнителейДляРаспределения()
 
&НаКлиенте
Процедура ПересчитатьОбъемРаботИсполнителей()
    
	ПосчитатьИсполнителейИСуммуДляРаспределения();
	
    // расчет объема пропорционально, на последнюю строку - остаток
    ОсталосьРаспределить = СуммаДляРаспределения;
    НомерПП = 0;
    ОсталосьРаспределитьКТУ = 1;
    Для каждого ТекСтрока Из Объект.Зарплата Цикл
        
        // неосновные подразделения пропускаем
        Если ТекСтрока.НеОсновноеПодразделение Тогда
            Продолжить;
        КонецЕсли;
        
        НомерПП = НомерПП + 1;
        
        Если НомерПП = КолвоИсполнителейДляРаспределения Тогда
            ТекСтрока.ОбъемРабот = ОсталосьРаспределить;
			Если флПоровну Тогда
				ТекСТрока.КТУ = ОсталосьРаспределитьКТУ;
			КонецЕсли; 
		Иначе
			Если флПоровну Тогда
				Если КолвоИсполнителейДляРаспределения > 0 Тогда
					ТекСтрока.ОбъемРабот = Окр(СуммаДляРаспределения / КолвоИсполнителейДляРаспределения, мРазное.ЗнакОкр(Период.ДатаОкончания));
					ТекСТрока.КТУ = 1 / КолвоИсполнителейДляРаспределения;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураСтроки = Новый Структура("Начислено, БазовоеНачисление, ОбъемРабот, Коэффициент, Норматив");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		
		РассчитатьСуммуИсполнителя(СтруктураСтроки);

		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);

		ОсталосьРаспределить = ОсталосьРаспределить - ТекСтрока.ОбъемРабот;
        ОсталосьРаспределитьКТУ = ОсталосьРаспределитьКТУ - ТекСТрока.КТУ;
    КонецЦикла;
    
	РассчитатьОбъемРаботКРаспределению();
    
	РассчитатьОбъемРаботКРаспределению();
	
КонецПроцедуры // ПересчитатьОбъемРаботИсполнителей()

&НаКлиенте
Процедура ДоговораДатаАктаПриИзменении(Элемент)
	ТекДанные = Элементы.Акты.ТекущиеДанные;
	Для каждого Стр Из Объект.Зарплата Цикл
		Если Стр.НомерАкта = ТекДанные.НомерАкта И Стр.ДатаАкта <> ТекДанные.ДатаАкта Тогда
		    Стр.ДатаАкта = ТекДанные.ДатаАкта;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ФлОстатокПриИзменении(Элемент)
	Если ФлОстаток Тогда
		флПоровну = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура флПоровнуПриИзменении(Элемент)
	Если флПоровну Тогда
		ФлОстаток = Ложь;
    	ПересчитатьОбъемРаботИсполнителей();
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗнакОкр(Дата) Экспорт
	Если Дата < Дата(2016, 7, 1) Тогда
		Возврат 0;
	Иначе	
	    Возврат 2;
	КонецЕсли; 
КонецФункции // ЗнакОкр()


 
 
