Перем НаименованиеКолонки Экспорт;

&НаКлиенте
Процедура ФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = "";
	Фильтр = "XML (*.xml)|*.xml";
	Диалог.Фильтр = Фильтр;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = "d:\!!!!!!!!!!!!!!!!!МиСофт\НЦЭУ\Справочники\Организации\";
	Если Диалог.Выбрать() Тогда
		Файл = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбъектXDTO()
	ПространствоИмен = "http://www.1c.ru/medoorganizations";
	
	ЧтениеФайла = Новый ТекстовыйДокумент();
	ПутьКФайлу = ОпределитьПутьКФайлу(Файл);
	ЧтениеФайла.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	ЗаписьФайла = Новый ТекстовыйДокумент();
	
	Для ТекущаяСтрока=1 По ЧтениеФайла.КоличествоСтрок() Цикл
		Стр = ЧтениеФайла.ПолучитьСтроку(ТекущаяСтрока);
		Если Найти(Стр, "<dictionaryData")>0 И Найти(Стр, ПространствоИмен)=0 Тогда
			Стр = СтрЗаменить(Стр, "<dictionaryData", "<dictionaryData xmlns='"+ПространствоИмен+"' xmlns:xs='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'");
		КонецЕсли;
		ЗаписьФайла.ДобавитьСтроку(Стр);
	КонецЦикла;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьФайла.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(ПространствоИмен, "dictionaryData");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат ОбъектXDTO;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СоздатьОрганизацииТФ(ОбъектXDTO)
	
	СоответствиеНаименований = Новый Соответствие;
	СоответствиеНаименований.Вставить("abonentBox", "Абонентский ящик");
	СоответствиеНаименований.Вставить("corpus", "Корпус");
	СоответствиеНаименований.Вставить("email", "Email");
	СоответствиеНаименований.Вставить("fax", "Факс");
	СоответствиеНаименований.Вставить("home", "Дом");
	СоответствиеНаименований.Вставить("name", "Наименование");
	СоответствиеНаименований.Вставить("okpfRowId", "okpfRowId");
	СоответствиеНаименований.Вставить("okpfValue", "okpfValue");
	СоответствиеНаименований.Вставить("phone", "Телефон");
	СоответствиеНаименований.Вставить("postIndex", "Индекс");
	СоответствиеНаименований.Вставить("shortName", "Сокращенное наименование");
	СоответствиеНаименований.Вставить("smdocode", "Код СМДО");
	СоответствиеНаименований.Вставить("soato", "Код СОАТО");
	СоответствиеНаименований.Вставить("street", "Улица");
	СоответствиеНаименований.Вставить("typesedRowId", "typesedRowId");
	СоответствиеНаименований.Вставить("typesedValue", "typesedValue");
	СоответствиеНаименований.Вставить("unp", "УНП");
	
	МассивДобавляемыхРеквизитов = Новый Массив; 
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДанныеСправочникаТФ", Новый ОписаниеТипов("ТаблицаЗначений")));    
	
	НаименованиеКолонки = Новый Соответствие;
	Номер = 1;
	Для Каждого Поле Из ОбъектXDTO.model.header.field Цикл
		ЗначениеПоля = ?(ТипЗнч(Поле.name) = Тип("ОбъектXDTO"), Поле.name.__content, Поле.name);
		НаименованиеКолонки.Вставить(Номер, ЗначениеПоля); 
		Номер = Номер+1;
		Представление = СоответствиеНаименований[ЗначениеПоля];
		Тип = Новый ОписаниеТипов("Строка");
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ЗначениеПоля, Тип, "ДанныеСправочникаТФ", Представление));
	КонецЦикла;
	
	//Мисофт+
	Тип = Новый ОписаниеТипов("Булево");
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьДубль", Тип, "ДанныеСправочникаТФ", "Есть дубль"));
	Если УчитыватьДублиУНП Тогда		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДублирующиесяУНП", Новый ОписаниеТипов("ТаблицаЗначений")));    
		Тип = Новый ОписаниеТипов("Строка");
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("УНП", Тип, "ДублирующиесяУНП", Представление));
	КонецЕсли;
	//Мисофт-
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ТаблицаФормы = Элементы.Добавить("ДанныеСправочникаТФ", Тип("ТаблицаФормы"));
	ТаблицаФормы.ПутьКДанным = "ДанныеСправочникаТФ";
	ТаблицаФормы.ТолькоПросмотр = Истина;
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Для Каждого Поле Из ОбъектXDTO.model.header.field Цикл
		Имя =?(ТипЗнч(Поле.name) = Тип("ОбъектXDTO"), Поле.name.__content, Поле.name);
		НоваяКолонка = Элементы.Добавить(ТаблицаФормы.ПутьКДанным+Имя, Тип("ПолеФормы"), Элементы.ДанныеСправочникаТФ); 
		НоваяКолонка.Заголовок = Имя; 
		НоваяКолонка.ПутьКДанным = ТаблицаФормы.ПутьКДанным+"."+Имя;
		НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;    
	КонецЦикла; 	
	
	//Мисофт+
	Имя = "ЕстьДубль";
	НоваяКолонка = Элементы.Добавить(ТаблицаФормы.ПутьКДанным+Имя, Тип("ПолеФормы"), Элементы.ДанныеСправочникаТФ); 
	НоваяКолонка.Заголовок = "Есть дубль";
	НоваяКолонка.ПутьКДанным = ТаблицаФормы.ПутьКДанным+"."+Имя;
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	
	Если УчитыватьДублиУНП Тогда
		ТаблицаФормы = Элементы.Добавить("ДублирующиесяУНП", Тип("ТаблицаФормы"),Элементы.Группа2);
		ТаблицаФормы.ПутьКДанным = "ДублирующиесяУНП";
		ТаблицаФормы.ТолькоПросмотр = Истина;
		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

		Имя = "УНП";
		НоваяКолонка = Элементы.Добавить(ТаблицаФормы.ПутьКДанным+Имя, Тип("ПолеФормы"), Элементы.ДублирующиесяУНП); 
		НоваяКолонка.Заголовок = "УНП";
		НоваяКолонка.ПутьКДанным = ТаблицаФормы.ПутьКДанным+"."+Имя;
		НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;

		ТаблицаФормы.УстановитьДействие("ПриАктивизацииСтроки","ПриАктивизацииСтрокиДубльУНП");
	КонецЕсли;
	//Мисофт-
	
	ОрганизацииТФСуществует = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицу(НаименованиеТФ, ОбъектXDTO)
	
	Если Не ОрганизацииТФСуществует Тогда
		СоздатьОрганизацииТФ(ОбъектXDTO);
	КонецЕсли;
	
	ДанныеСправочникаТЗ = РеквизитФормыВЗначение("ДанныеСправочникаТФ", Тип("ТаблицаЗначений"));
	
	НомерСтроки = 0;                           
	НомерКолонок = 0;
	
	Если НаименованиеКолонки = Неопределено Тогда
		Сообщить("Данные уже прочитаны.");
		Возврат;
	КонецЕсли;
		
	Для Каждого ПолеСтроки Из ОбъектXDTO.data.rows.row Цикл
		НомерСтроки = НомерСтроки+1;
		Колонки = ?(ТипЗнч(ПолеСтроки.columns) = Тип("ОбъектXDTO"), ПолеСтроки.columns.column, ПолеСтроки.columns);
		Для Каждого ПолеКолонок Из Колонки Цикл
			НомерКолонок = НомерКолонок+1;
			Номер = 0;
			СтрокаСправочникаТЗ = ДанныеСправочникаТЗ.Добавить(); 
			Для Каждого Поле Из ПолеКолонок.column Цикл
				Номер = Номер + 1;
				Если Поле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Поле = ?(ТипЗнч(Поле)=Тип("ОбъектXDTO"), Поле.__content, Поле);
				СтрокаСправочникаТЗ[НаименованиеКолонки[Номер]] = Поле;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Мисофт+
	Если УчитыватьДублиУНП Тогда
		ДублирующиесяУНПТЗ = РеквизитФормыВЗначение("ДублирующиесяУНП", Тип("ТаблицаЗначений"));
		ДублирующиесяУНПТЗ.Очистить();
		НоваяСтрока = ДублирующиесяУНПТЗ.Добавить();
		НоваяСтрока.УНП = "Все";
		НоваяСтрока = ДублирующиесяУНПТЗ.Добавить();
		НоваяСтрока.УНП = "Без дублей";
	
		КопияТЗ = ДанныеСправочникаТЗ.Скопировать();
		КопияТЗ.Колонки.Добавить("Количество");
		Для Каждого СтрокаТЗ Из КопияТЗ Цикл
			СтрокаТЗ.Количество = 1;
		КонецЦикла;
		
		КопияТЗ2 = КопияТЗ.Скопировать();
		КопияТЗ2.Свернуть ("shortName","Количество");
		КопияТЗ2.Сортировать ("Количество УБЫВ");
		
		КопияТЗ.Свернуть("unp","Количество");
		КопияТЗ.Сортировать ("Количество УБЫВ");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить ("unp");
		Для Каждого СтрокаТЗ ИЗ КопияТЗ Цикл
			Если СтрокаТЗ.Количество = 1 Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = ДублирующиесяУНПТЗ.Добавить();
			НоваяСтрока.УНП = СтрокаТЗ.unp;
			СтруктураОтбора.unp = СтрокаТЗ.unp;
			МассивСтрок = ДанныеСправочникаТЗ.НайтиСтроки (СтруктураОтбора);
			Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
				СтрокаМассива.ЕстьДубль = Истина;
			КонецЦикла;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДублирующиесяУНПТЗ, "ДублирующиесяУНП");
		
		Если КопияТЗ2[0].Количество <> 1 Тогда
			Сообщить ("Дублируются наименования:");
		КонецЕсли;
		Для Каждого СтрокаТЗ ИЗ КопияТЗ2 Цикл
			Если СтрокаТЗ.Количество = 1 Тогда 
				Прервать;
			КонецЕсли;
			Сообщить (СтрокаТЗ.shortName);
		КонецЦикла;
	КонецЕсли;
	//Мисофт-
	
	ЗначениеВРеквизитФормы(ДанныеСправочникаТЗ, "ДанныеСправочникаТФ");
	
	УстановитьВидимостьЗаписать();
	
КонецПроцедуры

Функция ОпределитьПутьКФайлу(Файл)
	Результат = "";
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
		Результат = РаботаСФайламиВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(Файл.ТекущаяВерсия);
	Иначе
		Результат = Файл;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПрочитатьНаСервере()
	
	ОбъектXDTO = ПолучитьОбъектXDTO();
	Если ОбъектXDTO = Неопределено Тогда
		Сообщить("файл не прочитан.");
		Возврат;
	КонецЕсли;
	
	Справочник = ?(ТипЗнч(ОбъектXDTO.model.name) = Тип("ОбъектXDTO"), ОбъектXDTO.model.name.__content, ОбъектXDTO.model.name);
	
	Если Справочник = "Организации" Тогда
		ЗаполнитьТаблицу("ДанныеСправочникаТФ", ОбъектXDTO);
		//Мисофт+
		Отбор = Новый Структура;
		Элементы.ДанныеСправочникаТФ.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		//Мисофт-
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	ПрочитатьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортыСВД.Ссылка
	               |ИЗ
	               |	Справочник.ТранспортыСВД КАК ТранспортыСВД
	               |ГДЕ
	               |	ТранспортыСВД.ФорматСообщения = &ФорматСообщения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТранспортыСВД.Код";				   
	Запрос.УстановитьПараметр("ФорматСообщения", Справочники.ФорматыСообщенийСВД.Сообщение1СДокументооборот);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Транспорт = Результат.Ссылка;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Наименование = ""dictionaryData""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Файлы.ДатаСоздания УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Файл = Результат.Ссылка;
		Элементы.Файл.Заголовок = "Файл для загрузки";
		Элементы.Файл.КнопкаВыбора = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЗаписать()
	ДанныеСправочникаТЗ = РеквизитФормыВЗначение("ДанныеСправочникаТФ", Тип("ТаблицаЗначений"));
	Элементы.Записать.Видимость = (ДанныеСправочникаТЗ.Количество()>0 И ЗначениеЗаполнено(Транспорт));
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформацию(Данные, КонтактнаяИнформация, ЭтоКорреспондент)
	Адрес = Данные.postIndex;
	Адрес = Адрес + ?(ЗначениеЗаполнено(Адрес), ", ", "") + Данные.street;
	Адрес = Адрес + ?(ЗначениеЗаполнено(Данные.street), ", ", "") + Данные.home;
	Адрес = Адрес + ?(ЗначениеЗаполнено(Данные.home) И ЗначениеЗаполнено(Данные.corpus), " - ", "") + Данные.corpus;
	
	Телефон = Данные.phone;
	АдресЭлектроннойПочты = Данные.email;
	Факс = Данные.fax;
	Другое = ?(ЗначениеЗаполнено(Данные.abonentBox), "Абонентский ящик: ", "") + Данные.abonentBox;
	
	ВидыКонтактнойИнформации = Новый Структура;
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		КонтактнаяИнформация.Вставить("Адрес", Адрес);
		ВидыКонтактнойИнформации.Вставить("Адрес", ?(ЭтоКорреспондент, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации));
	КонецЕсли;
	Если ЗначениеЗаполнено(Телефон) Тогда
		КонтактнаяИнформация.Вставить("Телефон", Телефон);
		ВидыКонтактнойИнформации.Вставить("Телефон", ?(ЭтоКорреспондент, Справочники.ВидыКонтактнойИнформации.ТелефонКорреспондента, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		КонтактнаяИнформация.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
		ВидыКонтактнойИнформации.Вставить("АдресЭлектроннойПочты", ?(ЭтоКорреспондент, Справочники.ВидыКонтактнойИнформации.EmailКорреспондента, Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
	КонецЕсли;
	Если ЗначениеЗаполнено(Факс) Тогда
		КонтактнаяИнформация.Вставить("Факс", Факс);
		ВидыКонтактнойИнформации.Вставить("Факс", ?(ЭтоКорреспондент, Справочники.ВидыКонтактнойИнформации.ФаксКорреспондента, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации));
	КонецЕсли;
	Если ЗначениеЗаполнено(Другое) Тогда
		КонтактнаяИнформация.Вставить("Другое", Другое);
		ВидыКонтактнойИнформации.Вставить("Другое", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	КонецЕсли;
	
	Возврат ВидыКонтактнойИнформации;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНаСервере()
	ДанныеСправочникаТЗ = РеквизитФормыВЗначение("ДанныеСправочникаТФ", Тип("ТаблицаЗначений"));
	//Мисофт+
	Если НЕ ИскатьТолькоПоУНП Тогда
		//Сначала получим все записи по уникальному служебному идентификационному номеру получателя
		ПервичныйМассив = ДанныеСправочникаТЗ.ВыгрузитьКолонку ("smdocode");
		МассивСВД = Новый Массив;
		Для Каждого СтрМассива ИЗ ПервичныйМассив Цикл
			МассивСВД.Добавить(ВРЕГ(СтрМассива));
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	УчастникиСВД.Адресат,
		               |	УчастникиСВД.Транспорт,
		               |	УчастникиСВД.ИмяАдресата
		               |ИЗ
		               |	РегистрСведений.УчастникиСВД КАК УчастникиСВД
		               |ГДЕ
		               |	УчастникиСВД.Транспорт = &Транспорт
		               |	И УчастникиСВД.ИмяАдресата В (&МассивСВД)";
		Запрос.УстановитьПараметр("МассивСВД",МассивСВД);
		Запрос.УстановитьПараметр("Транспорт",Транспорт);
		РезультатЗапроса = Запрос.Выполнить();
		ТабУчастникиСВД = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	//Мисофт-
	РеквизитыОбъектовДО = Новый Соответствие;
	РеквизитыОбъектовДО.Вставить("name", "НаименованиеПолное");
	РеквизитыОбъектовДО.Вставить("shortName", "Наименование");
	//РеквизитыОбъектовДО.Вставить("smdocode", "Код");
	РеквизитыОбъектовДО.Вставить("unp", "ИНН");
	Для Каждого Поле Из ДанныеСправочникаТЗ Цикл
		
		//Мисофт+
		ИспользоватьСтарыйВариантПоиска = Ложь;
		Если ИскатьТолькоПоУНП Тогда
			//Старый вариант поиска по УНП
			ИспользоватьСтарыйВариантПоиска = Истина;
		Иначе
			//Новый вариант поиска
			//Сначала ищем по уникальному служебному идентификационному номеру получателя
			ЭлементСправочника = ТабУчастникиСВД.Найти(ВРег(Поле.smdocode),"ИмяАдресата");
			Если ЭлементСправочника <> НЕОПРЕДЕЛЕНО Тогда
				//Нашли и все хорошо, работаем дальше
				ЭлементСправочника = ЭлементСправочника.Адресат;
				ЭлементСправочника = ЭлементСправочника.ПолучитьОбъект();
			Иначе
				//Ищем по старому варианту по УНП
				ИспользоватьСтарыйВариантПоиска = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьСтарыйВариантПоиска Тогда
			Если УчитыватьДублиУНП И ПропускатьДубли И Поле.ЕстьДубль Тогда
				//Продолжить;
				ЭлементСправочника = Справочники.Корреспонденты.НайтиПоНаименованию(Поле["shortName"]);
				ЭлементСправочника = ?(ЗначениеЗаполнено(ЭлементСправочника), ЭлементСправочника, Справочники.Организации.НайтиПоРеквизиту("ИНН", Поле["unp"]));
				ЭлементСправочника = ?(ЗначениеЗаполнено(ЭлементСправочника), ЭлементСправочника.ПолучитьОбъект(), Справочники.Корреспонденты.СоздатьЭлемент());
			Иначе
				ЭлементСправочника = Справочники.Корреспонденты.НайтиПоРеквизиту("ИНН", Поле["unp"]);
				ЭлементСправочника = ?(ЗначениеЗаполнено(ЭлементСправочника), ЭлементСправочника, Справочники.Организации.НайтиПоРеквизиту("ИНН", Поле["unp"]));
				ЭлементСправочника = ?(ЗначениеЗаполнено(ЭлементСправочника), ЭлементСправочника.ПолучитьОбъект(), Справочники.Корреспонденты.СоздатьЭлемент());
			КонецЕсли;
		КонецЕсли;
		//Мисофт-
		
		Для Каждого СтрокаСоответствия Из РеквизитыОбъектовДО Цикл
			Если СтрокаСоответствия.Значение = "НаименованиеПолное" Тогда
				ЭлементСправочника["ПолноеНаименование"] = Поле[СтрокаСоответствия.Ключ];
			Иначе
				ЭлементСправочника[СтрокаСоответствия.Значение] = Поле[СтрокаСоответствия.Ключ];
			КонецЕсли; 
		КонецЦикла;
		
		ЭлементСправочника.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		КонтактнаяИнформация = Новый Структура;
		ВидыКонтактнойИнформации = ПолучитьКонтактнуюИнформацию(Поле, КонтактнаяИнформация, ТипЗнч(ЭлементСправочника) = Тип("СправочникОбъект.Корреспонденты"));
		Для Каждого ПолеКИ Из КонтактнаяИнформация Цикл
			ПараметрыОтбора = Новый Структура("Вид, Тип", ВидыКонтактнойИнформации[ПолеКИ.Ключ], Перечисления.ТипыКонтактнойИнформации[ПолеКИ.Ключ]);
			НайденныеСтроки = ЭлементСправочника.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
			КонтактнаяИнформацияЭС = ?(НайденныеСтроки.Количество() = 0, ЭлементСправочника.КонтактнаяИнформация.Добавить(), НайденныеСтроки[НайденныеСтроки.Количество()-1]);
			КонтактнаяИнформацияЭС.Вид = ВидыКонтактнойИнформации[ПолеКИ.Ключ];
			КонтактнаяИнформацияЭС.Тип = Перечисления.ТипыКонтактнойИнформации[ПолеКИ.Ключ];
			КонтактнаяИнформацияЭС.Представление = ПолеКИ.Значение;
		КонецЦикла;
		ЭлементСправочника.Записать();
		
		УчастникиСВД = РегистрыСведений.УчастникиСВД.СоздатьМенеджерЗаписи();
		УчастникиСВД.Адресат = ЭлементСправочника.Ссылка;
		УчастникиСВД.Транспорт = Транспорт;
		УчастникиСВД.ИмяАдресата = ВРег(Поле.smdocode);
		УчастникиСВД.Регистратор = ЭлементСправочника.Ссылка;
		УчастникиСВД.Записать(Истина);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
	Сообщить("Справочник успешно загружен.", СтатусСообщения.Информация);
КонецПроцедуры

&НаКлиенте
Процедура ТранспортПриИзменении(Элемент)
	Элементы.Записать.Видимость = Ложь;
КонецПроцедуры

//Мисофт+
&НаКлиенте
Процедура ПриАктивизацииСтрокиДубльУНП(Элемент)
	ТекДанные = Элементы.ДублирующиесяУНП.ТекущиеДанные;
	Если ТекДанные = НЕОПРЕДЕЛЕНО Тогда
		Возврат;                           
	КонецЕсли;
	Если ТекДанные.УНП = "Все" Тогда
		//Снять все отборы
		Отбор = Новый Структура;
		Элементы.ДанныеСправочникаТФ.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	ИначеЕсли ТекДанные.УНП = "Без дублей" Тогда
		//Отбор ЕстьДубль = Ложь
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьДубль", Ложь);
		Элементы.ДанныеСправочникаТФ.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		//Отбор unp=УНП
		Отбор = Новый Структура;
		Отбор.Вставить("unp", ТекДанные.УНП);
		Элементы.ДанныеСправочникаТФ.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПропускатьДублиПриИзменении(Элемент)
	Если ПропускатьДубли Тогда
		УчитыватьДублиУНП = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УчитыватьДублиУНППриИзменении(Элемент)
	Если УчитыватьДублиУНП Тогда
		ПропускатьДубли = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УчитыватьДублиУНП = Истина;
	ПропускатьДубли = Истина;
КонецПроцедуры
//Мисофт-
