
&НаКлиенте
Перем Док, ОбщийДок;

&НаКлиенте
Перем WordApp;

&НаКлиенте
Перем Селекция, НачалоЗакладки, Поиск;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Если Не ЗначениеЗаполнено(Организация) Тогда
        Организация = Константы.М_ОсновнаяОрганизация.Получить();
    КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ПодписалПисьмо) Тогда
		ДолжностьПодписал = РаботаСПользователями.ПолучитьДолжность(ПодписалПисьмо);
		ФИОПодписал = ПолучитьФИОПодписал(ПодписалПисьмо);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодписалПисьмоПриИзменении(Элемент)
	ПолучитьДолжностьИФИОПодписал(ПодписалПисьмо);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДолжностьИФИОПодписал(Пользователь)
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Должность = РаботаСПользователями.ПолучитьДолжность(Пользователь);
		Если ЗначениеЗаполнено(Должность) Тогда
			ДолжностьПодписал = Должность;
		Иначе
			Сообщить("Не заполнена должность у " + Пользователь, СтатусСообщения.ОченьВажное);
			ДолжностьПодписал = "_______________________";
		КонецЕсли; 
		ФИОПодписал = ПолучитьФИОПодписал(Пользователь);
	Иначе	
		ДолжностьПодписал = "_______________________";
		ФИОПодписал = "_______________________";
	КонецЕсли; 
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьФИОПодписал(Пользователь) 
	Возврат Пользователь.ПредставлениеВДокументах;
КонецФункции

&НаСервере
Процедура ЗаполнитьАктыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВнутренниеДокументы.Ссылка КАК Акт,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта,
		|	СвязиДокументов.СвязанныйДокумент КАК Договор
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|		ПО (мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО (СвязиДокументов.Документ = ВнутренниеДокументы.Ссылка)
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		|	И мРеквизитыАктовВыполненныхРабот.СостояниеАкта = &СостояниеАкта
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи
		|	И ВнутренниеДокументы.Подготовил = &Подготовил
		|	И ВнутренниеДокументы.Организация = &Организация
		|	И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента
		|	И ВнутренниеДокументы.ДатаРегистрации МЕЖДУ &Дата1 И &Дата2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиДокументов.СвязанныйДокумент КАК ИсхПисьмо,
		|	СвязиДокументов.Документ КАК Акт
		|ПОМЕСТИТЬ ИсхПисьма
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.ТипСвязи = &ТипСвязи1
		|	И СвязиДокументов.Документ В
		|			(ВЫБРАТЬ
		|				Акты.Акт
		|			ИЗ
		|				Акты КАК Акты)
		|	И НЕ СвязиДокументов.СвязанныйДокумент.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЖурналПередачи.Документ КАК Акт,
		|	ЖурналПередачи.Возвращен
		|ПОМЕСТИТЬ ЖурналПередачи
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачи
		|ГДЕ
		|	ЖурналПередачи.Документ В
		|			(ВЫБРАТЬ
		|				Акты.Акт
		|			ИЗ
		|				Акты КАК Акты)
		|	И НЕ ЖурналПередачи.Возвращен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК КарточкаФайла,
		|	ВЫРАЗИТЬ(Файлы.ТекущаяВерсияТом.ПолныйПутьWindows КАК СТРОКА(1000)) КАК ТекущаяВерсияТом,
		|	ВЫРАЗИТЬ(Файлы.ТекущаяВерсияПутьКФайлу КАК СТРОКА(1000)) КАК ТекущаяВерсияПутьКФайлу,
		|	Файлы.ВладелецФайла КАК ИсхПисьмо
		|ПОМЕСТИТЬ Файлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В
		|			(ВЫБРАТЬ
		|				ИсхПисьма.ИсхПисьмо
		|			ИЗ
		|				ИсхПисьма КАК ИсхПисьма)
		|	И Файлы.ТекущаяВерсияРасширение = ""docx""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Акты.Акт КАК Акт,
		|	Акты.НомерАкта КАК НомерАкта,
		|	Акты.Договор КАК Договор,
		|	ГОД(Акты.Договор.ДатаРегистрации) КАК ГодДоговора,
		|	ИсхПисьма.ИсхПисьмо КАК ИсхПисьмо,
		|	Акты.Договор.Корреспондент КАК Корреспондент,
		|	Файлы.КарточкаФайла,
		|	Файлы.ТекущаяВерсияТом,
		|	Файлы.ТекущаяВерсияПутьКФайлу
		|ИЗ
		|	Акты КАК Акты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсхПисьма КАК ИсхПисьма
		|			ЛЕВОЕ СОЕДИНЕНИЕ Файлы КАК Файлы
		|			ПО ИсхПисьма.ИсхПисьмо = Файлы.ИсхПисьмо
		|		ПО Акты.Акт = ИсхПисьма.Акт
		|ГДЕ
		|	НЕ Акты.Акт В
		|				(ВЫБРАТЬ
		|					ЖурналПередачи.Акт
		|				ИЗ
		|					ЖурналПередачи КАК ЖурналПередачи)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Акты.Акт.РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("СостояниеАкта", Перечисления.мСостоянияАктовВыполненныхРабот.Подготовлен);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.ОтноситсяКДоговору);
	Запрос.УстановитьПараметр("ТипСвязи1", Справочники.ТипыСвязей.ПерепискаПоПредмету);
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	
	Если Не ЗначениеЗаполнено(Подготовил) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.Подготовил = &Подготовил", "");
	Иначе	
		Запрос.УстановитьПараметр("Подготовил", Подготовил);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента", "");
	Иначе	
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
    КонецЕсли; 
    
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.Организация = &Организация", "");
	Иначе	
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Акты.Очистить();
	Письма.Очистить();
	
	Для каждого Стр Из Результат Цикл
		НовСтр = Акты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Пометка = Не ЗначениеЗаполнено(Стр.ИсхПисьмо);
		НовСтр.ДляСортировки = Стр.ГодДоговора*1000000 + ПолучитьЧисловойНомерДоговора(Стр.НомерАкта);
		
		Отбор = Новый Структура("Корреспондент", Стр.Корреспондент); 
	    ИскСтроки = Письма.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НовПисьмо = Письма.Добавить();
			ЗаполнитьЗначенияСвойств(НовПисьмо, Стр);
			НовПисьмо.Пометка = Не ЗначениеЗаполнено(НовПисьмо.ИсхПисьмо);
			НовПисьмо.ДляСортировки = НовСтр.ДляСортировки;
		КонецЕсли; 
	КонецЦикла; 
	
	Акты.Сортировать("ДляСортировки");		
	Письма.Сортировать("ДляСортировки");		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧисловойНомерДоговора(НомерАкта)
	Поз = СтрНайти(НомерАкта, "-");
	Если Поз > 0 Тогда
		Возврат Число(Лев(НомерАкта, Поз-1));
	КонецЕсли; 
	Возврат 0;
КонецФункции

&НаКлиенте
Процедура УстановитьДлинуСтрок() 
	ДлинаСтрокиАктов = 77;
	ДлинаСтрокиИмя = 63;
	ДлинаСтрокиАдрес1 = 50;
	ДлинаСтрокиАдрес2 = 70;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДопДанные() 
	
	УстановитьДлинуСтрок();
	ДлинаСтрокиАдрес = ДлинаСтрокиАдрес1+ДлинаСтрокиАдрес2;
	
	ВсегоСтрок = Письма.Количество();
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(ВсегоСтрок);
	
	Сч = 0;
	Для каждого Стр Из Письма Цикл
		Сч = Сч+1;
	
		Индикатор.ПредставлениеПроцесса = "Заполнение таблицы "+Сч+" из "+ВсегоСтрок +"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		
		ДанныеДляПисьма = Новый Структура();
		ДанныеДляПисьма.Вставить("Корреспондент", Стр.Корреспондент);
		
		Отбор = Новый Структура("Корреспондент", Стр.Корреспондент); 
	    ИскСтроки = Акты.НайтиСтроки(Отбор);
		
		СобратьДанныеДляПисьмаПоДокументам(ДанныеДляПисьма, ИскСтроки);
		
		ЗаполнитьЗначенияСвойств(Стр, ДанныеДляПисьма);
		Стр.ДанныеДляПисьма = ДанныеДляПисьма;
		Стр.Имя = ДанныеДляПисьма.Получатель;
		Стр.Адрес = ДанныеДляПисьма.ПочтовыйАдрес;
		
	КонецЦикла; 
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьАкты(Команда)
	ЗаполнитьАктыНаСервере();
	ЗаполнитьДопДанные();
	
	Если Акты.Количество()=0 Тогда
		Сообщить("Нет актов для отправки!");
	Иначе
		ПоказатьОповещениеПользователя("Акты заполнены!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьма(Команда)
	ОчиститьСообщения();
	
	ЕстьАктыДляОтправки = Ложь;
	Для Каждого Строка Из Письма Цикл
		Если Строка.Пометка Тогда
		//Если Строка.Пометка И НЕ ЗначениеЗаполнено(Строка.ИсхПисьмо) Тогда
			ЕстьАктыДляОтправки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	// Создание исх. документов
	Если ЕстьАктыДляОтправки Тогда
		СоздатьИсходящиеПисьма();
	Иначе
		Сообщить("Нет актов для отправки!");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсходящиеПисьма()
	
	WordApp = Новый COMОбъект("Word.Application");
	
	Подготовил = ПользователиКлиентСервер.ТекущийПользователь();
	
	Всего = 0;
	Для каждого Стр Из Письма Цикл
		Если Стр.Пометка Тогда
			Всего = Всего + 1;
		КонецЕсли;
	КонецЦикла;
	
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	
	ТекущийПодписант = Неопределено; // чтоб не получать для каждого письма должность и ФИО
	Сч = 0;
	
	Для каждого Стр Из Письма Цикл
		
		Сч = Сч+1;
		Индикатор.ПредставлениеПроцесса = "Формирование исходящих писем "+Сч+" из "+Всего+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		
		Если Не Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПисьма = Стр.ДанныеДляПисьма;
		
		СоздатьИсходящееПисьмо(ДанныеДляПисьма, Стр.ИсхПисьмо);
		
		Если ЗначениеЗаполнено(ДанныеДляПисьма.ИсхПисьмо) Тогда
			
			Стр.ИсхПисьмо = ДанныеДляПисьма.ИсхПисьмо;
			Если ЗначениеЗаполнено(Стр.КарточкаФайла) Тогда
				УдалитьКарточку(Стр.КарточкаФайла);
			КонецЕсли; 
			Стр.КарточкаФайла = СоздатьПечатнуюФормуПисьма(ДанныеДляПисьма);
			
			ПараметрыКарточки = ПолучитьПараметрыКарточки(Стр.КарточкаФайла);
			Стр.ТекущаяВерсияТом = ПараметрыКарточки.ТекущаяВерсияТом ;
			Стр.ТекущаяВерсияПутьКФайлу = ПараметрыКарточки.ТекущаяВерсияПутьКФайлу;
			
			Стр.Имя = ДанныеДляПисьма.Получатель;
			Стр.Адрес = ДанныеДляПисьма.ПочтовыйАдрес;
		Иначе	
			//Сообщить("Для "+Стр.Акт+" исх. письмо не создано!", СтатусСообщения.ОченьВажное);
			Индекс = Сч - 1;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для "+Стр.Корреспондент+" исх. письмо не создано!";
			Сообщение.Поле = "Письма["+Индекс+"].ИсхПисьмо";
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЦикла; 
	
	WordApp.Quit();	
	WordApp = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьКарточку(КарточкаФайла)
	КарточкаОбъект = КарточкаФайла.ПолучитьОбъект();
	КарточкаОбъект.УстановитьПометкуУдаления(Истина, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКарточки(КарточкаФайла) 
	ПараметрыКарточки = Новый Структура();
	ПараметрыКарточки.Вставить("ТекущаяВерсияТом", КарточкаФайла.ТекущаяВерсияТом.ПолныйПутьWindows);
	ПараметрыКарточки.Вставить("ТекущаяВерсияПутьКФайлу", КарточкаФайла.ТекущаяВерсияПутьКФайлу);
	Возврат ПараметрыКарточки;
КонецФункции
 
&НаСервере
Функция СоздатьИсходящееПисьмо(ДанныеДляПисьма, ИсхПисьмо)
	
	Если ЗначениеЗаполнено(ИсхПисьмо) Тогда
		ИсхДок = ИсхПисьмо.ПолучитьОбъект();
	Иначе
		ИсхДок = Справочники.ИсходящиеДокументы.СоздатьЭлемент();
	КонецЕсли; 
	ИсхДок.ВидДокумента = Справочники.ВидыИсходящихДокументов.ОтправкаАктаВыполненныхРабот;
	ИсхДок.ДатаСоздания = ТекущаяДата();
	ИсхДок.НоменклатураДел = НоменклатураДел;
	ИсхДок.Подготовил = Подготовил;
    Если БратьПодписалИзДоговора Тогда
    	ИсхДок.Подписал = ДанныеДляПисьма.Подписал;
    Иначе
        ИсхДок.Подписал = ПодписалПисьмо;
    КонецЕсли; 
	ИсхДок.Валюта = ДанныеДляПисьма.Валюта;
	ИсхДок.ВопросДеятельности = ДанныеДляПисьма.ВопросДеятельности;
	ИсхДок.ГрифДоступа = ДанныеДляПисьма.ГрифДоступа;
	ИсхДок.Организация = ДанныеДляПисьма.Организация;
	ИсхДок.Подразделение = ДанныеДляПисьма.Подразделение;
	ИсхДок.Заголовок = ДанныеДляПисьма.Заголовок;
	ИсхДок.ЛистовВПриложениях = ДанныеДляПисьма.Листов;
	ИсхДок.КоличествоПриложений = ДанныеДляПисьма.Приложений;
	ИсхДок.Получатель = ДанныеДляПисьма.Корреспондент;
	ИсхДок.Адресат = ДанныеДляПисьма.Адресат;
	
	// Получатель
	Если ЗначениеЗаполнено(ИсхПисьмо) Тогда
	Иначе
		СтрокаПолучателя = ИсхДок.Получатели.Добавить();
		СтрокаПолучателя.Получатель = ДанныеДляПисьма.Корреспондент;
		СтрокаПолучателя.Адресат = ДанныеДляПисьма.Адресат;
		СтрокаПолучателя.СпособОтправки = Справочники.СпособыДоставки.НайтиПоНаименованию("Почта с уведомлением");
	КонецЕсли; 
	
	// Регистрация и запись
	Если ЗначениеЗаполнено(ИсхПисьмо) Тогда
		ИсхДок.Записать();
	Иначе
		Зарегистрировать(ИсхДок);
	КонецЕсли; 
	
 	Если ЗначениеЗаполнено(ИсхДок.Ссылка) Тогда
		// создание связей
		Для каждого Стр Из ДанныеДляПисьма.СписокДоговоров Цикл
			СвязиДокументов.СоздатьСвязь(Стр.Значение, ИсхДок.Ссылка, Справочники.ТипыСвязей.ПерепискаПоДоговору);
		КонецЦикла;
		Для каждого Стр Из ДанныеДляПисьма.СписокАктов Цикл
			СвязиДокументов.СоздатьСвязь(Стр.Значение, ИсхДок.Ссылка, Справочники.ТипыСвязей.ПерепискаПоПредмету);	
		КонецЦикла;
	КонецЕсли; 
	
	ДанныеДляПисьма.Вставить("ИсхПисьмо", ИсхДок.Ссылка);
	ДанныеДляПисьма.Вставить("РегистрационныйНомер", ИсхДок.РегистрационныйНомер);
	ДанныеДляПисьма.Вставить("ДатаРегистрации", ИсхДок.ДатаРегистрации);
	
	Возврат ДанныеДляПисьма;
КонецФункции 

&НаКлиенте
Функция СоздатьПечатнуюФормуПисьма(ДанныеДляПисьма)
	ИсхПисьмо = ДанныеДляПисьма.ИсхПисьмо;
	СтрокаДог = ДанныеДляПисьма.СтрокаДог;
	СтрокаАкт = ДанныеДляПисьма.СтрокаАкт;
	Получатель = ДанныеДляПисьма.Корреспондент;
	ДатаРег = ДанныеДляПисьма.ДатаРегистрации;
	РегНомер = ДанныеДляПисьма.РегистрационныйНомер;
	Листов = ДанныеДляПисьма.Листов;
	Приложений = ДанныеДляПисьма.Приложений;
	
	ИнициализироватьДокументWord();
	
	// Заполнение письма
	мРазноеКлиент.Заменить(Поиск, "/ДатаРег/", Формат(ДатаРег, "ДЛФ = D"));  
	мРазноеКлиент.Заменить(Поиск, "/РегНомер/", РегНомер);  
	мРазноеКлиент.Заменить(Поиск, "/ДатаНомерДоговора/", СтрокаДог);  
	
	Если мРаботаСДоговорами.ЭтоФизЛицо(Получатель) Тогда
		Корреспондент = ДанныеДляПисьма.ПолучательНаименование;
		ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица");
	Иначе
		Корреспондент = ДанныеДляПисьма.ПолучательПолноеНаименование;
		ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента");
	КонецЕсли;	
	мРазноеКлиент.Заменить(Поиск, "/Корреспондент/", Корреспондент); 
	
	ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Получатель, ВидАдреса);	
	мРазноеКлиент.Заменить(Поиск, "/ПочтовыйАдрес/", ПочтовыйАдрес); 
	мРазноеКлиент.Заменить(Поиск, "/КолвоЛистов/", Листов); 
	мРазноеКлиент.Заменить(Поиск, "/КолвоПриложений/", Приложений); 
	
	Если БратьПодписалИзДоговора Тогда
		Если ТекущийПодписант <> ДанныеДляПисьма.Подписал Тогда
			ТекущийПодписант = ДанныеДляПисьма.Подписал;
			ПолучитьДолжностьИФИОПодписал(ТекущийПодписант);
		КонецЕсли; 
	Иначе
		Если ТекущийПодписант <> ПодписалПисьмо Тогда
			ТекущийПодписант = ПодписалПисьмо;
			ПолучитьДолжностьИФИОПодписал(ТекущийПодписант);
		КонецЕсли; 
	КонецЕсли;
	
	мРазноеКлиент.Заменить(Поиск, "/ДолжностьПодписал/", ДолжностьПодписал); 
	мРазноеКлиент.Заменить(Поиск, "/ФИОПодписал/", ФИОПодписал);
	
	ДанныеДляПисьма.Вставить("ПочтовыйАдрес", ПочтовыйАдрес);
	
	// Строка исполнителя
	МестоДефисаВСтроке = Найти(РегНомер, "-");
	КодПодразделения = Лев(РегНомер, МестоДефисаВСтроке - 1);
	
	ПервыйПробел = Найти(Подготовил, " ");
	ФамилияПодготовил = Лев(Подготовил, ПервыйПробел - 1);
	
	СтрокаИсполнитель = КодПодразделения+ " " + 
		ФамилияПодготовил + ": " + 
		УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Подготовил, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя"));
	мРазноеКлиент.Заменить(Поиск, "/СтрокаИсполнитель/", СтрокаИсполнитель); 
	мРазноеКлиент.Заменить(Поиск, "/ДатаИсполнитель/", Формат(ДатаРег, "ДЛФ = D")); 
	
	//// Печатать штрихкода по умолчанию не надо
	//мРазноеКлиент.Заменить(Поиск, "ВставитьИзображениеШтрихкода", "");
	//
	//ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(ИсхПисьмо, Ложь, Истина);
	//Если ДанныеОШтрихкоде <> Неопределено
	//	И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
	//	
	//	// Запись картинки штрихкода во временный файл
	//	ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
	//	ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
	//	
	//	Док.Bookmarks("Штрихкод").Range.Select();
	//	Селекция = WordApp.Selection; // активная (выделенная) область 
	//	Рисунок = Селекция.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
	//	
	//	// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
	//	Shape = Рисунок.ConvertToShape();
	//	Shape.WrapFormat.Type = 0; // по контуру...
	//	
	//	УдалитьФайлы(ВременныйФайлКартинки);
	//КонецЕсли;
	
	КарточкаФайла = ВывестиДокумент(ИсхПисьмо, РегНомер);
    //КарточкаФайла = ВывестиДокумент(ИсхПисьмо, СтрокаАкт);
	Возврат КарточкаФайла;
КонецФункции 

&НаСервере
Процедура Зарегистрировать(ИсхДок) 
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ИсхДок);
	
	Если ЗначениеЗаполнено(Нумератор) Тогда // автоматическая нумерация
		
		ДатаРегистрации = ТекущаяДата();
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		ИсхДок.ДатаРегистрации = ДатаРегистрации;
		
		// сформируем текущий номер
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ИсхДок);
		Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ИсхДок.ЧисловойНомер);
		
		ОписанияОшибок = Новый СписокЗначений;
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ИсхДок);
		Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ИсхДок.РегистрационныйНомер, ОписанияОшибок);
		
		ИсхДок.Зарегистрировал = ТекущийПользователь;
		ИсхДок.Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
		ИсхДок.Ссылка, 
		ДатаРегистрации, 
		Перечисления.СостоянияДокументов.Зарегистрирован, 
		ТекущийПользователь);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьСопроводительных(Команда)
	ОчиститьСообщения();
	Всего = 0;
	Для каждого Письмо Из Письма Цикл
		Если Письмо.Пометка Тогда
			Всего = Всего + 1;
		КонецЕсли; 	
	КонецЦикла; 
	
	Если Всего = 0 Тогда
		Сообщить("Нет выделенных писем для печати!");
		Возврат;
	КонецЕсли; 
	
	WordApp = Новый COMОбъект("Word.Application");
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	Сч=0;
	Для каждого Письмо Из Письма Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если Письмо.Пометка Тогда
			
			Сч = Сч + 1;
			Индикатор.ПредставлениеПроцесса = "Подготовка к печати "+Сч+" из "+Всего+"...";
			мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
			//Процент = Окр(Сч/Всего*100,0);
			//Состояние("Подготовка к печати...", Процент, ""+Сч+" из "+Всего);
			
			ПутьКФайлуНаДиске = Письмо.ТекущаяВерсияТом + Письмо.ТекущаяВерсияПутьКФайлу;
            //ПутьКФайлуНаДиске = ПолучитьПутьКФайлу(Письмо.КарточкаФайла);
			Если Сч = 1 Тогда
				Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
				Контекст = Док.Content;
				Контекст.InsertParagraphAfter();
			Иначе
				Док.Range(Контекст.End - 1, Контекст.End).InsertFile(ПутьКФайлуНаДиске, "", Ложь, Ложь);
				Контекст.InsertParagraphAfter();
			КонецЕсли;
			
			Если Сч < Всего Тогда
				// Вставка разрыва страницы
				ПозицияОкончанияДокумента = Док.Range().End;
				Док.Range(ПозицияОкончанияДокумента-1, ПозицияОкончанияДокумента-1).InsertBreak();
			КонецЕсли; 
		КонецЕсли; 	
    КонецЦикла; 
    
	ПутьКФайлуНаДиске1 = ПолучитьИмяВременногоФайла("docx");
	
	Док.SaveAs(ПутьКФайлуНаДиске1);//(ПутьКФайлуНаДиске)                        
	Док.Saved = Истина;
	Док.Close(); 
	WordApp.Quit();	
	WordApp = Неопределено;
	
	ЗапуститьПриложение(ПутьКФайлуНаДиске1,, , ); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПутьКФайлу(КарточкаФайла)
	Возврат "" + КарточкаФайла.ТекущаяВерсияТом + КарточкаФайла.ТекущаяВерсияПутьКФайлу;
КонецФункции // ()
 
&НаКлиенте
Процедура ПечатьУведомлений(Команда)
	ОчиститьСообщения();
	УстановитьДлинуСтрок();
	
	ЕстьОшибки = ПроверитьДанныеПисем();
	Если ЕстьОшибки Тогда
		Сообщить("Есть ошибки в данных, которые надо устранить до печати файла!");
		Возврат;
	КонецЕсли; 
	
	Всего = 0;
	Для каждого Уведомление Из Письма Цикл
		Если Уведомление.Пометка Тогда
			Всего = Всего + 1;
		КонецЕсли; 	
	КонецЦикла; 
	
	Если Всего = 0 Тогда
		Сообщить("Нет выделенных писем для печати уведомлений!");
		Возврат;
	КонецЕсли; 
	
	//Сохранение шаблона на диске
	Макет = ПолучитьМакетУведомления("Уведомление");
	
	СчСтр = 0; // счетчик уведомлений на странице
	Сч = 0; // общий счетчик уведомлений
	//ДлинаСтрокиАктов = 77;
	//ДлинаСтрокиИмя = 63;
	//ДлинаСтрокиАдрес1 = 50;
	//ДлинаСтрокиАдрес2 = 70;
	НомераАктовПоУмолчанию = СформироватьСтрокуСимволов(ДлинаСтрокиАктов);
	ИмяПоУмолчанию = СформироватьСтрокуСимволов(ДлинаСтрокиИмя); 
	Адрес1ПоУмолчанию = СформироватьСтрокуСимволов(ДлинаСтрокиАдрес1);
	Адрес2ПоУмолчанию = СформироватьСтрокуСимволов(ДлинаСтрокиАдрес2);
	
	СписокВременныхФайлов.Очистить();
	
	WordApp = Новый COMОбъект("Word.Application");
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	
	Для каждого Уведомление Из Письма Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если Уведомление.Пометка Тогда
			
			Сч = Сч + 1;
			СчСтр = СчСтр + 1;
			
			Если СчСтр = 1 Тогда
				// открытие файла
				ПутьКФайлуНаДиске = ПолучитьИмяВременногоФайла("docx");
				Макет.Записать(ПутьКФайлуНаДиске);
				
				Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
				
				Селекция = WordApp.Selection;
				
                Поиск = Док.Content.Find;
                Поиск.ClearFormatting();
                Поиск.Replacement.ClearFormatting();
				
				Контекст = Док.Content;
				Контекст.Select();
				ДлинаШаблона = Селекция.End;
				
				СписокВременныхФайлов.Добавить(ПутьКФайлуНаДиске);			
			КонецЕсли; 
			
			Индикатор.ПредставлениеПроцесса = "Подготовка к печат "+Сч+" из "+Всего+"...";
			мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
			//Процент = Окр(Сч/Всего*100,0);
			//Состояние("Подготовка к печати...", Процент, ""+Сч+" из "+Всего);
			
			// Заполнение уведомления
			ВставитьШтрихКод(Уведомление, СчСтр);
			
			НомераАктов = ПолучитьНомераАктов(Уведомление.СписокАктов);
			
			Если СтрДлина(НомераАктов) <= ДлинаСтрокиАктов Тогда
				НомераАктов = НомераАктов + СформироватьСтрокуСимволов(ДлинаСтрокиАктов - СтрДлина(НомераАктов));
			Иначе
				// обрубаем
				НомераАктов = Лев(НомераАктов, ДлинаСтрокиАктов);
			КонецЕсли; 
			мРазноеКлиент.Заменить(Поиск, "%НомераАктов"+СчСтр+"%", НомераАктов);
			
			ДлинаИмени = СтрДлина(СокрЛП(Уведомление.Имя));
			Если ДлинаИмени <= ДлинаСтрокиИмя Тогда
				Имя = СокрЛП(Уведомление.Имя); 
			Иначе
				// Проверяем, может краткое подойдет
				Если СтрДлина(Уведомление.КраткоеИмя) <= ДлинаСтрокиИмя Тогда
					Имя = СокрЛП(Уведомление.КраткоеИмя); 
				Иначе
					Имя = Лев(СокрЛП(Уведомление.КраткоеИмя), ДлинаСтрокиИмя);
				КонецЕсли; 
			КонецЕсли; 
			мРазноеКлиент.Заменить(Поиск, "%Имя"+СчСтр+"%", Имя); 
			
			Адрес = СокрЛП(Уведомление.Адрес);
			ДлинаАдреса = СтрДлина(Адрес);
			
			Если ДлинаАдреса <= ДлинаСтрокиАдрес1 Тогда
				// Адрес одной строкой
			    Адрес1 = Адрес;
				Адрес2 = Адрес2ПоУмолчанию;
				
			Иначе
			    Адрес1 = Лев(Адрес, ДлинаСтрокиАдрес1);
				// Адрес в 2 строки
				//Определим макс длину строки 1
				ПозицияПробела = 0;
				КолвоПробелов = СтрЧислоВхождений(Адрес, " ");
				Адрес_1 = "";
				Адрес_2 = "";
				
				Для ц=1 По КолвоПробелов Цикл
					ПозицияПробела = СтрНайти(Адрес, " ", НаправлениеПоиска.СКонца, , ц);
					Если ПозицияПробела <= ДлинаСтрокиАдрес1 Тогда
						Адрес_1 = Лев(Адрес, ПозицияПробела-1);
						Адрес_2 = Сред(Адрес, ПозицияПробела+1);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				
				Адрес1 = Адрес_1;
				//Адрес1 = Адрес_1 + СформироватьСтрокуСимволов(ДлинаСтрокиАдрес1 - ПозицияПробела-1);
				
				Если СтрДлина(Адрес_2) <= ДлинаСтрокиАдрес2 Тогда
					Адрес2 = Адрес_2;
					//Адрес2 = Адрес_2 + СформироватьСтрокуСимволов(ДлинаСтрокиАдрес2 - СтрДлина(Адрес_2));
				Иначе
					// обрубаем
					Адрес2 = Лев(Адрес_2, ДлинаСтрокиАдрес2);
				КонецЕсли; 
			КонецЕсли; 
			
			мРазноеКлиент.Заменить(Поиск, "%Адрес"+СчСтр+"_1%", Адрес1); 
			мРазноеКлиент.Заменить(Поиск, "%Адрес"+СчСтр+"_2%", Адрес2); 
			
			Если СчСтр = 4 Тогда
				Если Сч <= Всего Тогда
					// Запись файла
					Док.SaveAs(ПутьКФайлуНаДиске);                        
					Док.Saved = Истина;
					Док.Close();
				КонецЕсли; 
				
				СчСтр = 0;
			Иначе
				// если общий список закончился, а на странице остались незаполненные уведомления
				Если Сч = Всего Тогда
					Для ы = СчСтр+1 По 4 Цикл
						мРазноеКлиент.Заменить(Поиск, "%НомераАктов"+ы+"%", НомераАктовПоУмолчанию);
						мРазноеКлиент.Заменить(Поиск, "%Имя"+ы+"%", ИмяПоУмолчанию); 
						мРазноеКлиент.Заменить(Поиск, "%Адрес"+ы+"_1%", Адрес1ПоУмолчанию); 
						мРазноеКлиент.Заменить(Поиск, "%Адрес"+ы+"_2%", Адрес2ПоУмолчанию);
						мРазноеКлиент.Заменить(Поиск, "ШтрихКод"+ы, "");
					КонецЦикла;
					// Запись файла
					Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
					Док.Saved = Истина;
					Док.Close();
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	// Вывод на печать
	WordApp = Новый COMОбъект("Word.Application");
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(Всего);
	Сч=0;
	ВсегоФайлов = СписокВременныхФайлов.Количество();
	
	Для й=0 По ВсегоФайлов-1 Цикл
		ОбработкаПрерыванияПользователя();
		
		Сч = й+1;
		Индикатор.ПредставлениеПроцесса = "Подготовка к печати "+Сч+" из "+Всего+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		//Состояние("Подготовка к печати...", Окр((й+1)/ВсегоФайлов*100,0), ""+Сч+" из "+Всего);
		
		ПутьКФайлуНаДиске = СписокВременныхФайлов[й].Значение;
		Если й = 0 Тогда
			Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
			Контекст = Док.Content;
			Контекст.InsertParagraphAfter();
		Иначе
			Док.Range(Док.Content.End-1, Док.Content.End).InsertFile(ПутьКФайлуНаДиске, "", Ложь, Ложь);
			//Док.Range(Контекст.End - 1, Контекст.End).InsertFile(ПутьКФайлуНаДиске, "", Ложь, Ложь);
			//Контекст.InsertParagraphAfter();
		КонецЕсли;
	КонецЦикла; 
	
	ПутьКФайлуНаДиске = ПолучитьИмяВременногоФайла("docx");
	
	Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
	Док.Saved = Истина;
	Док.Close(); 
	WordApp.Quit();	
	WordApp = Неопределено;
	
	// Удаление временных файлов
	ВсегоФайлов = СписокВременныхФайлов.Количество();
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(ВсегоФайлов);
	Для й=0 По ВсегоФайлов-1 Цикл
		Сч = й+1;
		Индикатор.ПредставлениеПроцесса = "Выгружается "+Сч+" из "+ВсегоФайлов+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		//Состояние("Удаление временных файлов...", Окр((й+1)/ВсегоФайлов*100,0));
		УдалитьФайлы(СписокВременныхФайлов[й].Значение);
	КонецЦикла; 
	
	ЗапуститьПриложение(ПутьКФайлуНаДиске,, , ); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомераАктов(СписокАктов)
	НомераАктов = "";
	Для каждого Акт Из СписокАктов Цикл
		ТекАкт = Акт.Значение.РегистрационныйНомер;
		НомераАктов = НомераАктов +?(НомераАктов = "", "", ", ") + ТекАкт; 
	КонецЦикла;
	Возврат НомераАктов;
КонецФункции
 
&НаКлиенте
Процедура ЗапомнитьЗакладкиШтрихкодов() 
	ТекНачалоШК.Очистить();
	ТекКонецШК.Очистить();
	
	Для й=1 По 4 Цикл
		Старт = Док.Bookmarks("ШтрихКод"+й).Start;
		Финиш = Док.Bookmarks("ШтрихКод"+й).End;
		НачалоШК.Добавить(Старт);
		КонецШК.Добавить(Финиш);
		ТекНачалоШК.Добавить(Старт); 	
		ТекКонецШК.Добавить(Финиш); 	
	КонецЦикла; 
КонецПроцедуры 

&НаКлиенте
Процедура ВставитьШтрихкод(Уведомление, Номер) 
	ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Уведомление.ИсхПисьмо, Ложь, Истина);
	Если ДанныеОШтрихкоде <> Неопределено
		И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
		
		// Запись картинки штрихкода во временный файл
		ВременныйФайлКартинки = ПолучитьИмяВременногоФайла("png");
		ДанныеОШтрихкоде.ДвоичныеДанныеИзображения.Записать(ВременныйФайлКартинки);
		
		//Док.Bookmarks("Штрихкод"+Номер).Range.Select();
		////Нач = ТекНачалоШК.Получить(Номер-1);
		////Кон = ТекКонецШК.Получить(Номер-1);
		СтрокаПоиска = "ШтрихКод"+Номер;
		СтрокаЗамены = " ";
		////Док.Content.Find.Execute(СтрокаПоиска,  Ложь, Истина, Ложь, , , Истина, , Ложь, , 0);
		////Результат = Док.Content.Find.Execute(СтрокаПоиска,  ,  Ложь, Истина, Ложь, , , Истина, , Ложь, , 1);
		////Результат = Док.Content.Find.Execute(СтрокаПоиска,  ,  , , , , , , , , , ,,,);
		//Старт = Макс(0, Док.Content.End - ДлинаШаблона);
		Селекция.Start = 0;
		Селекция.End = ДлинаШаблона;
		//Селекция.End = Док.Content.End;
		//WordApp.Selection.Find.ClearFormatting();
		////Результат = Док.Content.Find.Execute(СтрокаПоиска,,  Ложь, Истина, Ложь, , , Истина, , Ложь, СтрокаЗамены, 2);
		Результат = WordApp.Selection.Find.Execute(СтрокаПоиска);
		////Результат = Селекция.Find.Execute(СтрокаПоиска,  ,  , , , , , , , , , ,,,);
		//
		////Селекция.End = Кон;
		////Селекция.Start = Номер*100;
		////Селекция.End = 6 + Номер*100;
		SelPic = WordApp.Selection; // активная (выделенная) область 
		Рисунок = SelPic.InlineShapes.AddPicture(ВременныйФайлКартинки, Ложь, Истина);
		
		//// Чтобы установить обтекание текста, конвертируем рисунок в фигуру
		//Shape = Рисунок.ConvertToShape();
		//Shape.WrapFormat.Type = 0; // по контуру...
		
		// Убираем строку
		//мРазноеКлиент.Заменить(Поиск, "ШтрихКод"+Номер, "");
		
		УдалитьФайлы(ВременныйФайлКартинки);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция СобратьДанныеДляПисьмаПоДокументам(ДанныеДляПисьма, СтрокиАктов) 
	Листов = 0;
	Приложений = 0;
	СписокДоговоров = Новый СписокЗначений;
	СписокАктов = Новый СписокЗначений;
	Подписал = "";
	
	Для й = 0 По СтрокиАктов.Количество()-1 Цикл
		СтрАкта = СтрокиАктов[й];
		ТекАкт = СтрАкта.Акт;
        НомерАкта = СтрАкта.НомерАкта;
		ТекДог = СтрАкта.Договор;
		Если й = 0 Тогда
			Если БратьПодписалИзДоговора Тогда
				Подписал = ПолучитьПодписавшегоДоговор(ТекДог);
			Иначе
				Подписал = ПодписалПисьмо;
			КонецЕсли; 
		КонецЕсли; 
		
		// накопление договоров
		ИскДог = СписокДоговоров.НайтиПоЗначению(ТекДог);
		Если ИскДог = Неопределено Тогда
			СписокДоговоров.Добавить(ТекДог);
		КонецЕсли; 
		
		// Накопление актов
		ИскАкт = СписокАктов.НайтиПоЗначению(ТекАкт);
		Если ИскАкт = Неопределено Тогда
			СписокАктов.Добавить(ТекАкт);
		КонецЕсли; 
        
        // Для актов Геопортала идет один акт одним письмом
        Если СтрНайти(НомерАкта, "Гео") > 0 Тогда
            Если й = 0 Тогда
                Листов = Листов + 1;
                Приложений = Приложений + 2;
            КонецЕсли; 
        Иначе	
            Листов = Листов + 1;
            Приложений = Приложений + 2;
        КонецЕсли; 
		
		// Для ИсхПисьма все берем из первого попавшегося акта
		Если й = 0 Тогда
			ДобавитьРеквизитыАкта(ДанныеДляПисьма, ТекАкт);
		КонецЕсли; 
	КонецЦикла; 
	
	// Запись итогов
	// Строка договоров
	СтрокаДог = СформироватьСтрокуДоговоров(СписокДоговоров);
	
	// Строка заголовка исходящего и строка актов
	_Заголовок = "";
	СтрокаАкт = СформироватьСтрокуАктов(СписокАктов, _Заголовок);
	
	ДанныеДляПисьма.Вставить("Листов", Листов);
	ДанныеДляПисьма.Вставить("Приложений", Приложений);
	ДанныеДляПисьма.Вставить("СтрокаДог", СтрокаДог);
	ДанныеДляПисьма.Вставить("СтрокаАкт", СтрокаАкт);
	ДанныеДляПисьма.Вставить("Заголовок", _Заголовок);
	ДанныеДляПисьма.Вставить("СписокДоговоров", СписокДоговоров);
	ДанныеДляПисьма.Вставить("СписокАктов", СписокАктов);
	ДанныеДляПисьма.Вставить("Подписал", Подписал);
	
	Возврат ДанныеДляПисьма;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодписавшегоДоговор(ТекДог)
	Если ЗначениеЗаполнено(ТекДог) Тогда
		Возврат ТекДог.Утвердил;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСтрокуДоговоров(СписокДоговоров) 
	СтрокаДог = "";
	Для каждого Элем Из СписокДоговоров Цикл
		ТекДоговор = Элем.Значение;
		СтрокаДог = СтрокаДог + ?(СтрокаДог = "", "от ", ", от ")
		+ Формат(ТекДоговор.ДатаРегистрации, "ДЛФ=D") + " № " + ТекДоговор.РегистрационныйНомер; 
	КонецЦикла;
	СтрокаДог = "договор" + ?(СписокДоговоров.Количество() > 1, "ам ", "у ") + СтрокаДог;
	Возврат СтрокаДог;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСтрокуАктов(СписокАктов, _Заголовок)
	СтрокаАкт = "";
	Для каждого Элем Из СписокАктов Цикл
		ТекАкт = Элем.Значение;
		_Заголовок = _Заголовок + ?(_Заголовок = "", "", ", ")
		+ ТекАкт.РегистрационныйНомер + " " + Формат(ТекАкт.ДатаРегистрации, "ДЛФ=D"); 
		СтрокаАкт = СтрокаАкт + ?(СтрокаАкт = "", "", " ") + ТекАкт.РегистрационныйНомер;  
	КонецЦикла;
	_Заголовок = "Отправка Акт" + ?(СписокАктов.Количество() > 1, "ов ", "а ") + _Заголовок;
	Возврат СтрокаАкт;
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьРеквизитыАкта(ДанныеДляПисьма, ТекАкт) 
	ДанныеДляПисьма.Вставить("Валюта", ТекАкт.Валюта);
	ДанныеДляПисьма.Вставить("ВопросДеятельности", ТекАкт.ВопросДеятельности);
	ДанныеДляПисьма.Вставить("ГрифДоступа", ТекАкт.ГрифДоступа);
	ДанныеДляПисьма.Вставить("Организация", ТекАкт.Организация);
	ДанныеДляПисьма.Вставить("Подразделение", ТекАкт.Подразделение);
	
	Если мРаботаСДоговорами.ЭтоФизЛицо(ТекАкт.Корреспондент) Тогда
		Корреспондент = ТекАкт.Корреспондент;
		ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица");
	Иначе
		Корреспондент = ТекАкт.Корреспондент.ПолноеНаименование;
		ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента");
	КонецЕсли;	
	
	ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(ТекАкт.Корреспондент, ВидАдреса);	
	ДанныеДляПисьма.Вставить("ПочтовыйАдрес", ПочтовыйАдрес);
	ДанныеДляПисьма.Вставить("Получатель", Корреспондент);
	ДанныеДляПисьма.Вставить("ПолучательНаименование", ТекАкт.Корреспондент.Наименование);
	ДанныеДляПисьма.Вставить("ПолучательПолноеНаименование", ТекАкт.Корреспондент.ПолноеНаименование);
	ДанныеДляПисьма.Вставить("Адресат", ТекАкт.ПодписалОтКорреспондента);
	ДанныеДляПисьма.Вставить("КраткоеИмя", ТекАкт.Корреспондент.Наименование);
КонецФункции
 
&НаКлиенте
Функция ПроверитьДанныеПисем() 
	
	ЕстьОшибки = Ложь;
	УстановитьДлинуСтрок();
	ДлинаСтрокиАдрес = ДлинаСтрокиАдрес1+ДлинаСтрокиАдрес2;
	
	ВсегоСтрок = Письма.Количество();
  	Индикатор = мРазноеКлиент.ПолучитьИндикаторПроцесса(ВсегоСтрок);
	
	Сч = 0;
	Для каждого Стр Из Письма Цикл
		Сч = Сч+1;
	
		Индикатор.ПредставлениеПроцесса = "Проверка таблицы "+Сч+" из "+ВсегоСтрок+"...";
		мРазноеКлиент.ОбработатьИндикатор(Индикатор, Сч);
		//Процент = Окр(Сч/ВсегоСтрок*100,0);
		//Состояние("Проверка таблицы...",Процент);
		
		Если Не Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Стр.Адрес) Тогда
			Индекс = Сч - 1;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет адреса у "+Стр.Корреспондент+"!";
			Сообщение.Поле = "Письма["+Индекс+"].Адрес";
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
			
		ИначеЕсли СтрДлина(Стр.Адрес) > ДлинаСтрокиАдрес Тогда
			Индекс = Сч - 1;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Длинный адрес у "+Стр.Корреспондент+"! Сократите до "+ДлинаСтрокиАдрес+" символов.";
			Сообщение.Поле = "Письма["+Индекс+"].Адрес";
			Сообщение.Сообщить(); 
			ЕстьОшибки = Истина;
		КонецЕсли; 
		
		Если СтрДлина(Стр.Имя) > ДлинаСтрокиИмя И СтрДлина(Стр.КраткоеИмя) > ДлинаСтрокиИмя Тогда
			Индекс = Сч - 1;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "У "+Стр.Корреспондент+" длинное название! Сократите до "+ДлинаСтрокиИмя+" символов.";
			Сообщение.Поле = "Письма["+Индекс+"].КраткоеИмя";
			Сообщение.Сообщить(); 
			ЕстьОшибки = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ЕстьОшибки Тогда
		ПоказатьОповещениеПользователя("Ошибок в данных нет!");	
	КонецЕсли; 
	
	Возврат ЕстьОшибки;
КонецФункции 

&НаКлиенте
Процедура Проверить(Команда)
	БылиОшибки = ПроверитьДанныеПисем();
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеАкта(СписокАктов)
	НаправленЗаказчику = Перечисления.мСостоянияАктовВыполненныхРабот.НаправленЗаказчику;
	Для каждого Элемент Из СписокАктов Цикл
		Акт = Элемент.Значение;
		Выборка = Справочники.мРеквизитыАктовВыполненныхРабот.Выбрать(, Акт);
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли; 
			ОбъектРекв = Выборка.ПолучитьОбъект();
			ОбъектРекв.СостояниеАкта = НаправленЗаказчику;
			ОбъектРекв.Записать();
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры 

&НаКлиенте
Процедура ИнициализироватьДокументWord() 

	ПутьКФайлуНаДиске = ПолучитьИмяВременногоФайла("docx");
	ПутьКШаблону = ПолучитьПутьКШаблону(ШаблонПисьма); 
	
	ФайлШаблона = Новый ДвоичныеДанные(ПутьКШаблону);
	ФайлШаблона.Записать(ПутьКФайлуНаДиске);
	
	//WordApp = Новый COMОбъект("Word.Application");
	Док = WordApp.Documents.ADD(ПутьКФайлуНаДиске);
	
	Селекция = WordApp.Selection;
	
	Поиск = Док.Content.Find;
	Поиск.ClearFormatting();
	Поиск.Replacement.ClearFormatting();
КонецПроцедуры

&НаКлиенте                                                   
Процедура Заменить(Док, ИмяЗакладки, Значение)
	//Старт = Макс(0, Док.Content.End - ДлинаШаблона);
	//Селекция.Start = Старт;
	//Селекция.End = Док.Content.End;
	Док.Content.Find.Execute(ИмяЗакладки,  Ложь, Истина, Ложь, , , Истина, , Ложь, Значение, 2);
	//WordApp.Selection.Find.Execute(ИмяЗакладки,  Ложь, Истина, Ложь, , , Истина, , Ложь, Значение, 2);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПутьКШаблону(ШаблонПисьма) 
	Возврат ШаблонПисьма.ТекущаяВерсияТом.ПолныйПутьWindows + ШаблонПисьма.ТекущаяВерсияПутьКФайлу;
КонецФункции

&НаКлиенте
Функция ВывестиДокумент(ИсхПисьмо, СтрокаАкт) 
	//Если НЕ СоздатьДокумент Тогда
	//	//WordApp.Visible = Истина; 
	//	
	//	Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
	//	Док.Saved = Истина;
	//	Док.Close(); 
	//	WordApp.Quit();	
	//	WordApp = Неопределено;
	//	
	//	ЗапуститьПриложение(ПутьКФайлуНаДиске,, , ); 
	//	
	//Иначе
		WordApp.Visible = Ложь; 
		
		Док.SaveAs(ПутьКФайлуНаДиске);//(ПутьКФайлуНаДиске)                        
		Док.Saved = Истина;
		Док.Close(); 
		
		ИмяСоздаваемогоФайла = СформироватьИмяФайла(СтрокаАкт);
		
		КарточкаФайла = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПутьКФайлуНаДиске, 
			ИсхПисьмо, 
			ЭтаФорма, Истина, ИмяСоздаваемогоФайла, , , ,);
		
		//WordApp.Quit();	
		//WordApp = Неопределено;
		
		УдалитьФайлы(ПутьКФайлуНаДиске);	
	//КонецЕсли;
	Возврат КарточкаФайла;
КонецФункции 

&НаКлиенте
Функция СформироватьИмяФайла(СтрокаАкт) 
	ИмяФайла = СтрЗаменить(СтрокаАкт, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ".", "_");
	ИмяФайла = "Отправка акта "+СокрЛП(ИмяФайла)+".docx";
	Возврат ИмяФайла;
КонецФункции 

&НаКлиенте
Процедура ПометитьВсе(Команда)
	УстановкаФлажков(Акты, 1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановкаФлажков(Акты, 0);
КонецПроцедуры

&НаКлиенте
Процедура АктыПометкаПриИзменении(Элемент)
	//ИДТекущейСтроки = Элементы["Акты"].ТекущаяСтрока;

	//Если ИДТекущейСтроки <> Неопределено Тогда

	//    ЭлементКоллекции = ЭтаФорма["Акты"].НайтиПоИдентификатору(ИДТекущейСтроки);

	//    Если ЭлементКоллекции.Пометка = 2 Тогда
	//        ЭлементКоллекции.Пометка = 0;
	//    КонецЕсли;

	//    УстановкаФлажков(ЭлементКоллекции, ЭлементКоллекции.Пометка);

	//    Родитель = ЭлементКоллекции.ПолучитьРодителя();
	//    Пока Родитель <> Неопределено Цикл
	//        Родитель.Пометка = ?(УстановленоДляВсех(ЭлементКоллекции),
	//            ЭлементКоллекции.Пометка, 2);
	//        ЭлементКоллекции = Родитель;
	//        Родитель = ЭлементКоллекции.ПолучитьРодителя();
	//    КонецЦикла;

	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаФлажков(ЭлементКоллекции, ЗначениеПометки)
    Для Каждого ТекЭлемент Из ЭлементКоллекции Цикл
        ТекЭлемент.Пометка = ЗначениеПометки;
    КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СнятьПометкиПисьма(Команда)
	Для каждого Письмо Из Письма Цикл
		Письмо.Пометка = Ложь;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеПисьма(Команда)
	Для каждого Письмо Из Письма Цикл
		Письмо.Пометка = Истина;	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеАктовНаСервере()
	СписокАктов = Новый СписокЗначений;
	Для каждого Стр Из Письма Цикл
		Если Стр.Пометка Тогда
			ТекСписокАктов = Стр.СписокАктов;
			Для каждого СтрАкт Из ТекСписокАктов Цикл
				//Акт = СтрАкт.Значение;
				//ИскАкт = СписокАктов.НайтиПоЗначению(Акт);
				//Если ИскАкт = Неопределено Тогда
					СписокАктов.Добавить(СтрАкт.Значение);
				//КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	мРеквизитыАктовВыполненныхРабот.Ссылка КАК РеквизитыАкта
		|ИЗ
		|	Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		|ГДЕ
		|	мРеквизитыАктовВыполненныхРабот.Владелец В(&СписокАктов)";
	
	Запрос.УстановитьПараметр("СписокАктов", СписокАктов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаправленЗаказчику = Перечисления.мСостоянияАктовВыполненныхРабот.НаправленЗаказчику;
	
	Пока Выборка.Следующий() Цикл
		ОбъектРекв = Выборка.РеквизитыАкта.ПолучитьОбъект();
		ОбъектРекв.СостояниеАкта = НаправленЗаказчику;
		ОбъектРекв.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеАктов(Команда)
	ИзменитьСостояниеАктовНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетУведомления(ИмяМакета) 
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
Процедура УдалитьЗакладку(ИмяЗакладки) 
	НачалоЗакладки = Док.Bookmarks(ИмяЗакладки).Start;
	КонецЗакладки = Док.Bookmarks(ИмяЗакладки).End;
	Селекция.Start = НачалоЗакладки;
	Селекция.End = КонецЗакладки;
	Селекция.Cut();   
КонецПроцедуры 

&НаКлиенте
Функция СформироватьСтрокуСимволов(Длина) 
	СтрокаСимволов = "";
	Для й=1 По Длина Цикл
		СтрокаСимволов = СтрокаСимволов + "_";
	КонецЦикла; 
	Возврат СтрокаСимволов;
КонецФункции

&НаКлиенте
Процедура Отметить50(Команда)
	ВсегоПисем = Письма.Количество();
	МаксИндекс = Мин(ВсегоПисем, 50)-1;
	Для й = 0 По МаксИндекс Цикл
		Письма[й].Пометка = Истина;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПодборАктов(Команда)
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);
	ПараметрыПодбора.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыВнутреннихДокументов.АктВыполненныхРабот"));
	ОткрытьФорму("Справочник.ВнутренниеДокументы.ФормаВыбора", ПараметрыПодбора, Элементы.Акты);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАктыМассивом(МассивАктов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВнутренниеДокументы.Ссылка КАК Акт,
		|	ВнутренниеДокументы.РегистрационныйНомер КАК НомерАкта,
		|	СвязиДокументов.СвязанныйДокумент КАК Договор
		|ПОМЕСТИТЬ Акты
		|ИЗ
		|	Справочник.ВнутренниеДокументы КАК ВнутренниеДокументы
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.мРеквизитыАктовВыполненныхРабот КАК мРеквизитыАктовВыполненныхРабот
		//|		ПО (мРеквизитыАктовВыполненныхРабот.Владелец = ВнутренниеДокументы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|		ПО (СвязиДокументов.Документ = ВнутренниеДокументы.Ссылка)
		|ГДЕ
		|	НЕ ВнутренниеДокументы.ПометкаУдаления
		//|	И мРеквизитыАктовВыполненныхРабот.СостояниеАкта = &СостояниеАкта
		|	И СвязиДокументов.ТипСвязи = &ТипСвязи
		|	И ВнутренниеДокументы.Ссылка В (&МассивАктов)
		|	И ВнутренниеДокументы.Подготовил = &Подготовил
		|	И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиДокументов.СвязанныйДокумент КАК ИсхПисьмо,
		|	СвязиДокументов.Документ КАК Акт
		|ПОМЕСТИТЬ ИсхПисьма
		|ИЗ
		|	РегистрСведений.СвязиДокументов КАК СвязиДокументов
		|ГДЕ
		|	СвязиДокументов.ТипСвязи = &ТипСвязи1
		|	И СвязиДокументов.Документ В
		|			(ВЫБРАТЬ
		|				Акты.Акт
		|			ИЗ
		|				Акты КАК Акты)
		|	И НЕ СвязиДокументов.СвязанныйДокумент.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК КарточкаФайла,
		|	ВЫРАЗИТЬ(Файлы.ТекущаяВерсияТом.ПолныйПутьWindows КАК СТРОКА(1000)) КАК ТекущаяВерсияТом,
		|	ВЫРАЗИТЬ(Файлы.ТекущаяВерсияПутьКФайлу КАК СТРОКА(1000)) КАК ТекущаяВерсияПутьКФайлу,
		|	Файлы.ВладелецФайла КАК ИсхПисьмо
		|ПОМЕСТИТЬ Файлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В
		|			(ВЫБРАТЬ
		|				ИсхПисьма.ИсхПисьмо
		|			ИЗ
		|				ИсхПисьма КАК ИсхПисьма)
		|	И Файлы.ТекущаяВерсияРасширение = ""docx""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Акты.Акт КАК Акт,
		|	Акты.НомерАкта КАК НомерАкта,
		|	Акты.Договор КАК Договор,
		|	ИсхПисьма.ИсхПисьмо КАК ИсхПисьмо,
		|	Акты.Договор.Корреспондент КАК Корреспондент,
		|	Файлы.КарточкаФайла,
		|	Файлы.ТекущаяВерсияТом,
		|	Файлы.ТекущаяВерсияПутьКФайлу
		|ИЗ
		|	Акты КАК Акты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсхПисьма КАК ИсхПисьма
		|			ЛЕВОЕ СОЕДИНЕНИЕ Файлы КАК Файлы
		|			ПО ИсхПисьма.ИсхПисьмо = Файлы.ИсхПисьмо
		|		ПО Акты.Акт = ИсхПисьма.Акт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Акты.Акт.РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("СостояниеАкта", Перечисления.мСостоянияАктовВыполненныхРабот.Подготовлен);
	Запрос.УстановитьПараметр("МассивАктов", МассивАктов);
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.ОтноситсяКДоговору);
	Запрос.УстановитьПараметр("ТипСвязи1", Справочники.ТипыСвязей.ПерепискаПоПредмету);
	
	Если Не ЗначениеЗаполнено(Подготовил) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВнутренниеДокументы.Подготовил = &Подготовил", "");
	Иначе	
		Запрос.УстановитьПараметр("Подготовил", Подготовил);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СвязиДокументов.СвязанныйДокумент.ВидДокумента = &ВидДокумента", "");
	Иначе	
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Акты.Очистить();
	Письма.Очистить();
	
	Для каждого Стр Из Результат Цикл
		НовСтр = Акты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Пометка = Не ЗначениеЗаполнено(Стр.ИсхПисьмо);
		
		Отбор = Новый Структура("Корреспондент", Стр.Корреспондент); 
	    ИскСтроки = Письма.НайтиСтроки(Отбор);
		Если ИскСтроки.Количество() = 0 Тогда
			НовПисьмо = Письма.Добавить();
			ЗаполнитьЗначенияСвойств(НовПисьмо, Стр);
			НовПисьмо.Пометка = Не ЗначениеЗаполнено(НовПисьмо.ИсхПисьмо);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры 
 
&НаКлиенте
Процедура АктыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение.Количество() > 0 И Акты.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Очистить табличную часть?";
		Ответ = Вопрос(Текст, Режим, 0);   
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Акты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАктыМассивом(ВыбранноеЗначение);
	ЗаполнитьДопДанные();
	
	Если Акты.Количество()=0 Тогда
		Сообщить("Нет актов для отправки!");
	Иначе
		ПоказатьОповещениеПользователя("Акты заполнены!");
	КонецЕсли; 
	
	//Для каждого Подбор Из ВыбранноеЗначение Цикл
	//	//Строка = Акты.Добавить();
	//	//Строка.Товар = Подбор.Товар;
	//	//Строка.Серия = Подбор.Серия;
	//	//Строка.Количество = Подбор.Количество;
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура БратьПодписалИзДоговораПриИзменении(Элемент)
    Если БратьПодписалИзДоговора Тогда
        ПодписалПисьмо = "";
    КонецЕсли; 
    Элементы.ПодписалПисьмо.Доступность = НЕ БратьПодписалИзДоговора;
КонецПроцедуры

&НаКлиенте
Процедура ПодписалПисьмоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ВидИсхДокумента = ПредопределенноеЗначение("Справочник.ВидыИсходящихДокументов.ОтправкаАктаВыполненныхРабот");
	ПодписалПисьмо = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидИсхДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ПодписалПисьмоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    ВидИсхДокумента = ПредопределенноеЗначение("Справочник.ВидыИсходящихДокументов.ОтправкаАктаВыполненныхРабот");
	ПодписалПисьмо = РаботаСПользователямиКлиент.ПолучитьПодписанта(Организация, ВидИсхДокумента, Текст);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    ПодписалПисьмо = "";
КонецПроцедуры


&НаКлиенте
Процедура ПечатьОбратныхКонвертов(Команда)
	Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
	
	МассивПолучателей = Новый Массив;
	Для Каждого Письмо Из Письма Цикл
		Если Не Письмо.Пометка Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПолучателей = Новый Структура();
		СтруктураПолучателей.Вставить("Корреспондент", Письмо.Корреспондент);
		СтруктураПолучателей.Вставить("Адрес", Письмо.Адрес);
		
		МассивПолучателей.Добавить(СтруктураПолучателей);
	КонецЦикла;
	
	ТабДок = СформироватьТабДок("С6_162х114", МассивПолучателей);
	
	ТабДок.РазмерСтраницы = "Envelope C6";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
    ТабДок.ПолеСправа = 10;
    ТабДок.ПолеСлева = 0;
    ТабДок.ПолеСверху = 0;
    ТабДок.ПолеСнизу = 0;
	//Если флСразуНаПринтер Тогда
	//	ТабДок.Напечатать();
	//Иначе	
		ТабДок.Показать(); 
	//КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТабДок(ИмяМакета, МассивПолучателей)
	
	ТабДок = Новый ТабличныйДокумент();
	Макет = Обработки.ПечатьКонвертов.ПолучитьМакет(ИмяМакета);
	ОбластьКонверта = Макет.ПолучитьОбласть("Конверт");
    	
	НашиРеквизиты = ПолучитьНашиРеквизиты();
	
	Счетчик = 0;
    Для Каждого СтрПолучателя Из МассивПолучателей Цикл
        
        МассивСтрок = Новый Массив;
        
        ПорезатьСтрокуНаСтроки(СтрПолучателя.Корреспондент, 40, МассивСтрок);
		ПорезатьСтрокуНаСтроки(СтрПолучателя.Адрес, 40, МассивСтрок);
        
        КолвоСтрокОтправителя = МассивСтрок.Количество();
        
        Для й = 1 По 6 Цикл
            Если й <= КолвоСтрокОтправителя Тогда
                ОбластьКонверта.Параметры["СтрОтправитель"+й] = МассивСтрок[й-1];
            Иначе
                ОбластьКонверта.Параметры.Установить(й-1, "");
            КонецЕсли; 
        КонецЦикла; 
        
        КомуДляПечати = НашиРеквизиты.НашаОрганизация;
         
        ОбластьКонверта.Параметры.СтрКому1 = ВырезатьСтроку(КомуДляПечати, 40, Ложь);
        ОбластьКонверта.Параметры.СтрКому2 = ВырезатьСтроку(КомуДляПечати, 40, Истина);
        
        ОбъектХДТО = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(НашиРеквизиты.ЗначенияПолей);
        
        Если ТипЗнч(ОбъектХДТО)<>Тип("ОбъектXDTO") Тогда
            // Это иностранный адрес - пытаемся работать со строкой адреса
            КудаДляПечати = СтрПолучателя.Адрес;
            
            ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати);
             
        Иначе
            // Это белорусский адрес
            
            АдресРФ = ОбъектХДТО.Состав.Состав;
            НаселенныйПункт = АдресРФ.НаселПункт;
            
            Если Не ЗначениеЗаполнено(НаселенныйПункт) Тогда
                ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, СтрПолучателя.Адрес);
            Иначе
                ЗаполнитьОбластьАдресаПоХДТО(ОбластьКонверта, ОбъектХДТО, НаселенныйПункт);
            КонецЕсли; 
         КонецЕсли;
		
		ТабДок.Вывести(ОбластьКонверта);
		
		Счетчик = Счетчик + 1;
		Если Счетчик < МассивПолучателей.Количество() Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТабДок;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьНашиРеквизиты()
    НашиРеквизиты = Новый Структура("НашаОрганизация, ЗначенияПолей");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорреспондентыКонтактнаяИнформация.Ссылка.ПолноеНаименование КАК НашаОрганизация,
		|	КорреспондентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
		|ИЗ
		|	Справочник.Корреспонденты.КонтактнаяИнформация КАК КорреспондентыКонтактнаяИнформация
		|ГДЕ
		|	КорреспондентыКонтактнаяИнформация.Ссылка = &Корреспондент
		|	И КорреспондентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКорреспондента)";

	Запрос.УстановитьПараметр("Корреспондент", Константы.НашаОрганизация.Получить());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НашиРеквизиты, ВыборкаДетальныеЗаписи);	
	КонецЦикла;

	Возврат НашиРеквизиты;

КонецФункции // ПолучитьНашиРеквизиты()

&НаСервереБезКонтекста
Функция ПорезатьСтрокуНаСтроки(ИсхСтрока, МаксДлинаСтроки, МассивСтрок)

    СтрокаДляПечати = "";
    
    ТекСтрока = ИсхСтрока;
    Если СтрЧислоВхождений(ИсхСтрока, "  ") > 0 Тогда
        ТекСтрока = СтрЗаменить(ТекСтрока, "  ", " ");
    КонецЕсли; 
    
    КолвоПробелов = СтрЧислоВхождений(ТекСтрока, " ");
    
    ПоследняяПозиция = 0;
    
	Если СтрДлина(ТекСтрока) <= МаксДлинаСтроки Тогда
		// строка размещается без обрезки
		СтрокаДляПечати = ТекСтрока;
		ТекСтрока = "";
		Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
			МассивСтрок.Добавить(СтрокаДляПечати);
		КонецЕсли; 
	Иначе
		Пока СтрДлина(ТекСтрока) > 0 Цикл
			Если СтрДлина(ТекСтрока) <= МаксДлинаСтроки Тогда
				// строка размещается без обрезки
				СтрокаДляПечати = ТекСтрока;
				ТекСтрока = "";
				Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
					МассивСтрок.Добавить(СтрокаДляПечати);
				КонецЕсли; 
			Иначе
				КолвоПробелов = СтрЧислоВхождений(ТекСтрока, " ");
				Если КолвоПробелов > 0 Тогда
					Для й=1 По КолвоПробелов Цикл
						Позиция = Найти(ТекСтрока, " ");
						
						НоваяПозиция = ПоследняяПозиция + Позиция;
						
						Если НоваяПозиция <= МаксДлинаСтроки Тогда
							ПоследняяПозиция = НоваяПозиция;
							
							СтрокаДляПечати = СтрокаДляПечати + Лев(ТекСтрока, Позиция);
							
							ТекСтрока = Сред(ТекСтрока, Позиция + 1); 
						Иначе
							ПоследняяПозиция = 0;
							Прервать;
							//	// Длина получаемой строки превысит максимально допустимую в строке
							//	МассивСтрок.Добавить(СтрокаДляПечати);
							//	
							//	ПоследняяПозиция = Позиция;
							//	
							//	СтрокаДляПечати = Лев(ТекСтрока, Позиция);
							//	
							//	ТекСтрока = Сред(ТекСтрока, Позиция + 1); 
						КонецЕсли; 
					КонецЦикла; 
					
					Если ЗначениеЗаполнено(СтрокаДляПечати) Тогда
						МассивСтрок.Добавить(СтрокаДляПечати);
					КонецЕсли; 
					СтрокаДляПечати = "";
				Иначе
					Если ЗначениеЗаполнено(ТекСтрока) Тогда
						МассивСтрок.Добавить(ТекСтрока);
					КонецЕсли; 
					ТекСтрока = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;    
    
    Возврат МассивСтрок;
КонецФункции

&НаСервереБезКонтекста
Функция ВырезатьСтроку(ИсхСтрока, МаксДлинаСтроки, ЭтоПоследняяСтрока)
    //ТекСтрока = ИсхСтрока;
    Если СтрЧислоВхождений(ИсхСтрока, "  ") > 0 Тогда
        ИсхСтрока = СтрЗаменить(ИсхСтрока, "  ", " ");
    КонецЕсли; 
    
    КолвоПробелов = СтрЧислоВхождений(ИсхСтрока, " ");
    
    ПоследняяПозиция = 0;
    СтрокаДляПечати = "";
    
    Если СтрДлина(ИсхСтрока) <= МаксДлинаСтроки Тогда
        // строка размещается без обрезки
        СтрокаДляПечати = ИсхСтрока;
    	ИсхСтрока = "";
    Иначе
        Для й=1 По КолвоПробелов Цикл
            Позиция = Найти(ИсхСтрока, " ");
            
            НоваяПозиция = ПоследняяПозиция + Позиция;
            
            Если НоваяПозиция <= МаксДлинаСтроки Тогда
                ПоследняяПозиция = НоваяПозиция;
                
                СтрокаДляПечати = СтрокаДляПечати + Лев(ИсхСтрока, Позиция);
                
                ИсхСтрока = Сред(ИсхСтрока, Позиция + 1); 
            Иначе
                Прервать;
            //    // Длина получаемой строки превысит максимально допустимую в строке
            //    ПоследняяПозиция = Позиция;
            //    
            //    СтрокаДляПечати = Лев(ИсхСтрока, Позиция);
            //    
            //    ИсхСтрока = Сред(ИсхСтрока, Позиция + 1); 
            КонецЕсли; 
        КонецЦикла; 
        
        Если ЭтоПоследняяСтрока и СтрДлина(ИсхСтрока) > 0 Тогда
            // остался хвост
            СтрокаДляПечати = СтрокаДляПечати + ИсхСтрока;
        КонецЕсли; 
        
    КонецЕсли; 
    
    Возврат СтрокаДляПечати;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьАдресаПоСтроке(ОбластьКонверта, КудаДляПечати)
    // вырежем индекс из адреса
    ПозицияИндекса = ПолучитьПозициюИндекса(КудаДляПечати);
    Индекс = "";
    
    Если ПозицияИндекса > 0 Тогда
        Индекс = Сред(КудаДляПечати, ПозицияИндекса, 6);
        КудаДляПечати = Лев(КудаДляПечати, ПозицияИндекса-1) + Сред(КудаДляПечати, ПозицияИндекса+7); 
    КонецЕсли; 
    
    ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(КудаДляПечати, 31, Ложь);
    ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(КудаДляПечати, 40, Ложь);
    ОбластьКонверта.Параметры.СтрКуда3 = ВырезатьСтроку(КудаДляПечати, 21, Ложь);
    ОбластьКонверта.Параметры.СтрКуда4 = ВырезатьСтроку(КудаДляПечати, 40, Истина);
    
    ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс);
 КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьАдресаПоХДТО(ОбластьКонверта, ОбъектХДТО, НаселенныйПункт)
    // Если отправление в город:
    // 1-я строка: Улица, дом, квартира
    // 2-я строка: продолжение
    // 3-я строка: город
    // 4-я строка: район, область
    
    // Если в деревню
    // 1-я строка: Улица, дом, квартира
    // 2-я строка: продолжение + деревня
    // 3-4 строка: сельсовет, район, область
            
    // получим старших населенного пункта
    ПредставлениеНаселенногоПункта = КонтактнаяИнформацияСлужебный.ПредставлениеНаселенногоПункта(ОбъектХДТО.Состав);
    СельсоветРайонОбласть = СокрЛП(СтрЗаменить(ПредставлениеНаселенногоПункта, НаселенныйПункт+",", ""));
    
    ЭтоГород = ?(Найти(НаселенныйПункт, "г.")>0, Истина, Ложь);
    
    // 1-я строка совпадает
    //	название улицы, номер дома, корпуса, квартиры, 
    Представление = КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
    ОбъектХДТО.Состав.Состав.Улица, "");
    // Строения и помещения
    НомерНеВыведен = Истина;
    Данные = КонтактнаяИнформацияСлужебный.ЗданияИПомещенияАдреса(ОбъектХДТО);
    Для Каждого Строка Из Данные.Здания Цикл
        Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
        Представление, "",
        СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение), "");
        НомерНеВыведен = Ложь;
    КонецЦикла;
    Для Каждого Строка Из Данные.Помещения Цикл
        Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
        Представление, "",
        СокрЛП(Строка.Сокращение + " " + Строка.Значение), "");
    КонецЦикла;
    Представление = СтрЗаменить(Представление, "квартира", "кв.");
    
    Если ЭтоГород Тогда
        // распределяем улицу на 2 строки            
        ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(Представление, 26, Ложь);
        ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(Представление, 40, Ложь);
        ОбластьКонверта.Параметры.СтрКуда3 = НаселенныйПункт;
        
        // Для Минска сбрасываем фиктивный регион, что бы не выводился в представлении
        Если Найти(НаселенныйПункт, "Минск") > 0 Тогда
            СельсоветРайонОбласть = СтрЗаменить(СельсоветРайонОбласть, "Минск", "");
            СельсоветРайонОбласть = СтрЗаменить(СельсоветРайонОбласть, "г.", "");
        КонецЕсли; 
        ОбластьКонверта.Параметры.СтрКуда4 = СельсоветРайонОбласть;
        
    Иначе
        // Добавляем название насел. пункта. Если можно выводим название на второй строке
        Если СтрДлина(Представление) > 40 Тогда
            Представление =  КонтактнаяИнформацияКлиентСервер.ПолноеНаименование(
            Представление, "",
            СокрЛП(НаселенныйПункт), "");
            // распределяем улицу+деревня на 2 строки            
            ОбластьКонверта.Параметры.СтрКуда1 = ВырезатьСтроку(Представление, 31, Ложь);
            ОбластьКонверта.Параметры.СтрКуда2 = ВырезатьСтроку(Представление, 40, Ложь);
        Иначе
            // улицу на 1-й, деревню на 2-й
            ОбластьКонверта.Параметры.СтрКуда1 = Представление;
            ОбластьКонверта.Параметры.СтрКуда2 = НаселенныйПункт;
        КонецЕсли; 
        
        // распределим на оставшиеся 2 строки вышестоящие территории
        ОбластьКонверта.Параметры.СтрКуда3 = ВырезатьСтроку(СельсоветРайонОбласть, 21, Ложь);
        ОбластьКонверта.Параметры.СтрКуда4 = ВырезатьСтроку(СельсоветРайонОбласть, 40, Ложь);
        
    КонецЕсли; 
    
    // Индекс
    Индекс = КонтактнаяИнформацияСлужебный.ПочтовыйИндексАдреса(ОбъектХДТО);
    ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаполнитьЦифрыИндекса(ОбластьКонверта, Индекс)
   Если ЗначениеЗаполнено(Индекс) Тогда
        ОбластьКонверта.Параметры.Индекс1 = Лев(Индекс, 1);
        ОбластьКонверта.Параметры.Индекс2 = Сред(Индекс, 2, 1);
        ОбластьКонверта.Параметры.Индекс3 = Сред(Индекс, 3, 1);
        ОбластьКонверта.Параметры.Индекс4 = Сред(Индекс, 4, 1);
        ОбластьКонверта.Параметры.Индекс5 = Сред(Индекс, 5, 1);
        ОбластьКонверта.Параметры.Индекс6 = Сред(Индекс, 6, 1);
    Иначе
        // Индекса нет
        Для й = 1 По 6 Цикл
            ОбластьКонверта.Параметры["Индекс"+й] = "";
        КонецЦикла; 
    КонецЕсли; 
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПозициюИндекса(Адрес)
    СчетчикЦифр = 0;
    ПозицияИндекса = 0;
    Цифры = "1234567890";
    НачалоИндекса = 0;
    
    Для й=1 По СтрДлина(Адрес) Цикл
        ТекСимвол = Сред(Адрес, й, 1);
        Если Найти(Цифры, ТекСимвол) > 0 Тогда
            // есть цифра
            СчетчикЦифр = СчетчикЦифр + 1;
            
            Если НачалоИндекса = 0 Тогда
                // первая цифра - возможно начало индекса
                НачалоИндекса = й;
            КонецЕсли; 
        Иначе
            // не цифра
            Если СчетчикЦифр = 6 Тогда
                // это был индекс
                ПозицияИндекса = НачалоИндекса;
                Прервать;
            Иначе
                // это не было индексом
                СчетчикЦифр = 0;
                НачалоИндекса = 0;
            КонецЕсли; 
        КонецЕсли; 
    КонецЦикла; 
    Возврат ПозицияИндекса;
КонецФункции





