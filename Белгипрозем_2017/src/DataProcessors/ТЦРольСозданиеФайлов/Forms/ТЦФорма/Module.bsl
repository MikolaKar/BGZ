///////////////////////////////////////////////////////////////////////////////
// В Н И М А Н И Е!
// ПЕРЕМЕННЫЕ, ПРОЦЕДУРЫ И ФУНКЦИИ, НАЧИНАЮЩИЕСЯ С "ТЦ", НЕЛЬЗЯ УДАЛЯТЬ, Т.К.
// ОНИ НЕОБХОДИМЫ ДЛЯ ПРАВИЛЬНОЙ РАБОТЫ ТЕСТ-ЦЕНТРА
//

&НаКлиенте
Перем ТЦКонтекстВыполнения; // Служебная переменная Тест-центра

&НаКлиенте
Перем мОбъектыДляУдаления;

///////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ МЕТОДЫ СЦЕНАРИЯ

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если Не ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ТЦОбъект.ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПапку()
	
	Возврат Справочники.ПапкиФайлов.Шаблоны;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьДанныеНаСервере(ОбъектыДляУдаления)
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Ссылка Из ОбъектыДляУдаления Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = Ссылка.ПолучитьОбъект();
			Объект.Удалить();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Единовременная подготовка данных перед выполнением действия.
// Эта подготовка выполняется только при необходимости и не является
// обязательной.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦИнициализировать() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе
		// Код управляемого приложения
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦИнициализировать()

&НаКлиенте
// Выполнение действия.
// В этой функции содержится основной код действия, необходимый для выполнения
// сценария.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦВыполнить() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе
		Инструменты = ТестированиеКлиентСервер.ПолучитьИнструменты();
		мОбъектыДляУдаления = Новый Массив;
		ВладелецФайлов = ПолучитьПапку();
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		Путь = ТЦОбъект.ПутьКФайлу;
		КоличествоПовторов = 5;
		
		Для а = 0 По КоличествоПовторов - 1 Цикл
			
			Если ТЦОбъект.РазмерФайла = "Маленький" Тогда
				ТестированиеКлиентСервер.Пауза(Инструменты, 10*60000);
				ИмяПоказателя = "Создание маленького файла";
			ИначеЕсли ТЦОбъект.РазмерФайла = "Средний" Тогда
				ТестированиеКлиентСервер.Пауза(Инструменты, 10*60000);
				ИмяПоказателя = "Создание среднего файла";
			ИначеЕсли ТЦОбъект.РазмерФайла = "Большой" Тогда
				ТестированиеКлиентСервер.Пауза(Инструменты, 15*60000);
				ИмяПоказателя = "Создание большого файла";
			КонецЕсли;
			
			ВремяНачала = ТестированиеКлиентСервер.ЗначениеТаймера(Инструменты);
			
			СозданныйФайл = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(Путь, ВладелецФайлов, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			
			ВремяОкончания = ТестированиеКлиентСервер.ЗначениеТаймера(Инструменты);
			
			ТЦЗаписатьПоказатель(ИмяПоказателя, (ВремяОкончания - ВремяНачала) / 1000);
			мОбъектыДляУдаления.Добавить(СозданныйФайл);
			
		КонецЦикла;
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦВыполнить()

&НаКлиенте
// Единовременное удаление созданных при инициализации данных, после выполнения
// действия. Это удаление выполняется только при необходимости и не является
// обязательным.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.
//   Успешно - если при инициализации ошибок не возникло
//   Предупреждение - если возникшие ошибки позволяют продолжить выполнение
//   Ошибка - если возникли ошибки, которые не позволяют продолжить выполнение
//
Функция ТЦУдалитьДанные() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// Код обычного приложения
	#Иначе
		Попытка
			УдалитьДанныеНаСервере(мОбъектыДляУдаления);
		Исключение
			ТЦОбщий.ЗаписатьВЖурнал(ОписаниеОшибки());
			Возврат ТЦРезультатВыполненияОшибка();
		КонецПопытки;
	#КонецЕсли
	
	Возврат ТЦРезультатВыполненияУспешно();
	
КонецФункции // ТЦУдалитьДанные()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАЗРАБОТЧИКА СЦЕНАРИЯ

&НаКлиенте
// Записать значение показателя производительности
//
// Параметры:
//  ИмяПоказателя - Строка, произвольное имя показателя производительности
//  ЗначениеПоказателя - Число, значение показателя
//
Процедура ТЦЗаписатьПоказатель(ИмяПоказателя, ЗначениеПоказателя)
	
	ТЦКлиент.ДобавитьРезультат(ТЦКонтекст(), ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры // ТЦЗаписатьПоказатель()

&НаКлиенте
// Номер ВРМ, уникальный в рамках сценария
//
// Возвращаемое значение:
//  Число - номер текущего ВРМ
//
Функция ТЦНомерВРМ()
	
	Возврат ТЦКонтекст().ВРМ.Номер;
	
КонецФункции // ТЦНомерВРМ()

&НаКлиенте
// Ссылка на сценарий
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦСценарии
//
Функция ТЦСценарий()
	
	Возврат ТЦКонтекст().ВРМ.Сценарий;
	
КонецФункции // ТЦСценарий()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦИмяРоли()
	
	Возврат ТЦКонтекст().ВРМ.ИмяРоли;
	
КонецФункции // ТЦИмяРоли()

&НаКлиенте
// Получить имя текущей роли
//
// Возвращаемое значение:
//  Строка - имя текущей роли
//
Функция ТЦРоль()
	
	Возврат ТЦКонтекст().ВРМ.Роль;
	
КонецФункции // ТЦРоль()

&НаКлиенте
// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка - имя текущего пользователя
//
Функция ТЦИмяПользователя()
	
	Возврат ТЦКонтекст().ВРМ.Пользователь;
	
КонецФункции // ТЦИмяПользователя()

&НаКлиенте
// Получить имя текущего компьютера
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ТЦИмяКомпьютера()
	
	Возврат ТЦКонтекст().ВРМ.Компьютер;
	
КонецФункции // ТЦИмяКомпьютера()

&НаКлиенте
// Получить результат выполнения "Успешно"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Успешно
//
Функция ТЦРезультатВыполненияУспешно()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Успешно;
	
КонецФункции // ТЦРезультатВыполненияУспешно()

&НаКлиенте
// Получить результат выполнения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Предупреждение
//
Функция ТЦРезультатВыполненияПредупреждение()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Предупреждение;
	
КонецФункции // ТЦРезультатВыполненияПредупреждение()

&НаКлиенте
// Получить результат выполнения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения.Ошибка
//
Функция ТЦРезультатВыполненияОшибка()
	
	Возврат ТЦКонтекст().РезультатВыполнения.Ошибка;
	
КонецФункции // ТЦРезультатВыполненияОшибка()

&НаКлиенте
// Получить статус сообщения "Информация"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Информация
//
Функция ТЦСтатусСообщенияИнформация()
	
	Возврат ТЦКонтекст().СтатусСообщения.Информация;
	
КонецФункции // ТЦСтатусСообщенияИнформация()

&НаКлиенте
// Получить статус сообщения "Предупреждение"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Предупреждение
//
Функция ТЦСтатусСообщенияПредупреждение()
	
	Возврат ТЦКонтекст().СтатусСообщения.Предупреждение;
	
КонецФункции // ТЦСтатусСообщенияПредупреждение()

&НаКлиенте
// Получить статус сообщения "Ошибка"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦСтатусСообщения.Ошибка
//
Функция ТЦСтатусСообщенияОшибка()
	
	Возврат ТЦКонтекст().СтатусСообщения.Ошибка;
	
КонецФункции // ТЦСтатусСообщенияОшибка()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ТЕСТ-ЦЕНТРА

&НаКлиенте
// Обработчик команды "Выполнить".
// Выполняет инициализацию, действие и удаление созданных данных.
//
Процедура ВыполнитьДействие(Команда)
	
	ТЦИнициализировать();
	ТЦВыполнить();
	ТЦУдалитьДанные();
	
КонецПроцедуры // ВыполнитьДействие()

&НаКлиенте
// Получить контекст выполнения обработки
//
// Возвращаемое значение:
//  Структура - см. ТЦСервер.СоздатьКонтекстВыполненияОбработки()
//
Функция ТЦКонтекст() Экспорт
	
	Если ТЦКонтекстВыполнения = Неопределено Тогда
		ТЦКонтекстВыполнения = ТЦСервер.СоздатьКонтекстВыполненияОбработки();
	КонецЕсли;
	
	Возврат ТЦКонтекстВыполнения;
	
КонецФункции // ТЦКонтекст()

&НаКлиенте
// Загрузить параметры обработки и формы
//
// Параметры:
//  ПараметрыЗагрузки - ХранилищеЗначения
//
Процедура ТЦЗагрузить(ПараметрыЗагрузки) Экспорт
	
	ТЦЗагрузитьНаСервере(ПараметрыЗагрузки);
	ТЦКонтекст();
	
КонецПроцедуры // ТЦЗагрузить()

&НаСервере
// Загрузить параметры обработки.
// Во время загрузки устанавливаются ранее сохраненные значения реквизитов
//
// Параметры:
//  АрхивЗначений - ХранилищеЗначения, загружаемые данные
//
Процедура ТЦЗагрузитьНаСервере(АрхивЗначений)
	
	ОбъектОбработка = РеквизитФормыВЗначение("ТЦОбъект");
	ТЦСервер.ЗагрузитьРеквизитыОбработки(ОбъектОбработка, АрхивЗначений);
	ЗначениеВРеквизитФормы(ОбъектОбработка, "ТЦОбъект");
	
КонецПроцедуры // ТЦЗагрузитьНаСервере()

&НаКлиенте
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранить() Экспорт
	
	Возврат ТЦСохранитьНаСервере();
	
КонецФункции // ТЦСохранить()

&НаСервере
// Сохранить значения реквизитов для возможности последующей загрузки
//
// Возвращаемое значение:
//  ХранилищеЗначения - запакованые значения реквизитов
//
Функция ТЦСохранитьНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("ТЦОбъект");
	Возврат ТЦСервер.СохранитьРеквизитыОбработки(ОбъектОбработка);
	
КонецФункции // ТЦСохранитьНаСервере()

&НаКлиенте
// Получить результат выполнения тестирования
//
// Возвращаемое значение:
//  Соответствие - показатели и их значения
//
Функция ТЦПолучитьРезультат() Экспорт
	
	Возврат ТЦКонтекст().Результаты;
	
КонецФункции // ТЦПолучитьРезультат()

&НаКлиенте
// Закрыть форму и вернуть значение Истина, для модального вызова
//
Процедура ТЦОК(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры // ТЦОК()
